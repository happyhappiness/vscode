<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6283_git-2.7.2.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<cpp:ifdef pos:line="3" pos:column="1"># <cpp:directive pos:line="3" pos:column="3">ifdef<pos:position pos:line="3" pos:column="8"/></cpp:directive> <name pos:line="3" pos:column="9">RE_ENABLE_I18N<pos:position pos:line="3" pos:column="23"/></name></cpp:ifdef>
<name pos:line="4" pos:column="1">build_range_exp<pos:position pos:line="4" pos:column="16"/></name> <argument_list pos:line="4" pos:column="17">(<argument><expr><name pos:line="4" pos:column="18">bitset_t<pos:position pos:line="4" pos:column="26"/></name> <name pos:line="4" pos:column="27">sbcset<pos:position pos:line="4" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="35">re_charset_t<pos:position pos:line="4" pos:column="47"/></name> <operator pos:line="4" pos:column="48">*<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="49">mbcset<pos:position pos:line="4" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="57">int<pos:position pos:line="4" pos:column="60"/></name> <operator pos:line="4" pos:column="61">*<pos:position pos:line="4" pos:column="62"/></operator><name pos:line="4" pos:column="62">range_alloc<pos:position pos:line="4" pos:column="73"/></name></expr></argument>,
		 <argument><expr><name pos:line="5" pos:column="18">bracket_elem_t<pos:position pos:line="5" pos:column="32"/></name> <operator pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></operator><name pos:line="5" pos:column="34">start_elem<pos:position pos:line="5" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="46">bracket_elem_t<pos:position pos:line="5" pos:column="60"/></name> <operator pos:line="5" pos:column="61">*<pos:position pos:line="5" pos:column="62"/></operator><name pos:line="5" pos:column="62">end_elem<pos:position pos:line="5" pos:column="70"/></name></expr></argument>)<pos:position pos:line="5" pos:column="71"/></argument_list>
<cpp:else pos:line="6" pos:column="1"># <cpp:directive pos:line="6" pos:column="3">else<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:else> <comment type="block" pos:line="6" pos:column="8">/* not RE_ENABLE_I18N */</comment>
<name pos:line="7" pos:column="1">build_range_exp<pos:position pos:line="7" pos:column="16"/></name> <argument_list pos:line="7" pos:column="17">(<argument><expr><name pos:line="7" pos:column="18">bitset_t<pos:position pos:line="7" pos:column="26"/></name> <name pos:line="7" pos:column="27">sbcset<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="35">bracket_elem_t<pos:position pos:line="7" pos:column="49"/></name> <operator pos:line="7" pos:column="50">*<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="51">start_elem<pos:position pos:line="7" pos:column="61"/></name></expr></argument>,
		 <argument><expr><name pos:line="8" pos:column="18">bracket_elem_t<pos:position pos:line="8" pos:column="32"/></name> <operator pos:line="8" pos:column="33">*<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="34">end_elem<pos:position pos:line="8" pos:column="42"/></name></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list>
<cpp:endif pos:line="9" pos:column="1"># <cpp:directive pos:line="9" pos:column="3">endif<pos:position pos:line="9" pos:column="8"/></cpp:directive></cpp:endif> <comment type="block" pos:line="9" pos:column="9">/* not RE_ENABLE_I18N */</comment>
<argument_list pos:line="10" pos:column="1">{
  <argument><expr><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">int<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">start_ch<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="26">end_ch<pos:position pos:line="11" pos:column="32"/></name></expr></argument>;
  <comment type="block" pos:line="12" pos:column="3">/* Equivalence Classes and Character Classes can't be a range start/end.  */</comment>
  if <argument><expr><operator pos:line="13" pos:column="6">(<pos:position pos:line="13" pos:column="7"/></operator><call><name pos:line="13" pos:column="7">BE<pos:position pos:line="13" pos:column="9"/></name> <argument_list pos:line="13" pos:column="10">(<argument><expr><name><name pos:line="13" pos:column="11">start_elem<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">-&gt;<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="23">type<pos:position pos:line="13" pos:column="27"/></name></name> <operator pos:line="13" pos:column="28">==<pos:position pos:line="13" pos:column="30"/></operator> <name pos:line="13" pos:column="31">EQUIV_CLASS<pos:position pos:line="13" pos:column="42"/></name> <operator pos:line="13" pos:column="43">||<pos:position pos:line="13" pos:column="45"/></operator> <name><name pos:line="13" pos:column="46">start_elem<pos:position pos:line="13" pos:column="56"/></name><operator pos:line="13" pos:column="56">-&gt;<pos:position pos:line="13" pos:column="61"/></operator><name pos:line="13" pos:column="58">type<pos:position pos:line="13" pos:column="62"/></name></name> <operator pos:line="13" pos:column="63">==<pos:position pos:line="13" pos:column="65"/></operator> <name pos:line="13" pos:column="66">CHAR_CLASS<pos:position pos:line="13" pos:column="76"/></name>
	  <operator pos:line="14" pos:column="11">||<pos:position pos:line="14" pos:column="13"/></operator> <name><name pos:line="14" pos:column="14">end_elem<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">-&gt;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="24">type<pos:position pos:line="14" pos:column="28"/></name></name> <operator pos:line="14" pos:column="29">==<pos:position pos:line="14" pos:column="31"/></operator> <name pos:line="14" pos:column="32">EQUIV_CLASS<pos:position pos:line="14" pos:column="43"/></name> <operator pos:line="14" pos:column="44">||<pos:position pos:line="14" pos:column="46"/></operator> <name><name pos:line="14" pos:column="47">end_elem<pos:position pos:line="14" pos:column="55"/></name><operator pos:line="14" pos:column="55">-&gt;<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="57">type<pos:position pos:line="14" pos:column="61"/></name></name> <operator pos:line="14" pos:column="62">==<pos:position pos:line="14" pos:column="64"/></operator> <name pos:line="14" pos:column="65">CHAR_CLASS<pos:position pos:line="14" pos:column="75"/></name></expr></argument>,
	  <argument><expr><literal type="number" pos:line="15" pos:column="11">0<pos:position pos:line="15" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="13"/></argument_list></call><operator pos:line="15" pos:column="13">)<pos:position pos:line="15" pos:column="14"/></operator></expr></argument>
    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">REG_ERANGE<pos:position pos:line="16" pos:column="22"/></name></expr>;<pos:position pos:line="16" pos:column="23"/></return></argument_list></decl></decl_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* We can handle no multi character collating elements without libc
     support.  */</comment>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><call><name pos:line="20" pos:column="7">BE<pos:position pos:line="20" pos:column="9"/></name> <argument_list pos:line="20" pos:column="10">(<argument><expr><operator pos:line="20" pos:column="11">(<pos:position pos:line="20" pos:column="12"/></operator><name><name pos:line="20" pos:column="12">start_elem<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">type<pos:position pos:line="20" pos:column="28"/></name></name> <operator pos:line="20" pos:column="29">==<pos:position pos:line="20" pos:column="31"/></operator> <name pos:line="20" pos:column="32">COLL_SYM<pos:position pos:line="20" pos:column="40"/></name>
	   <operator pos:line="21" pos:column="12">&amp;&amp;<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="15">strlen<pos:position pos:line="21" pos:column="21"/></name> <argument_list pos:line="21" pos:column="22">(<argument><expr><operator pos:line="21" pos:column="23">(<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="24">char<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">*<pos:position pos:line="21" pos:column="30"/></operator><operator pos:line="21" pos:column="30">)<pos:position pos:line="21" pos:column="31"/></operator> <name><name pos:line="21" pos:column="32">start_elem<pos:position pos:line="21" pos:column="42"/></name><operator pos:line="21" pos:column="42">-&gt;<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="44">opr<pos:position pos:line="21" pos:column="47"/></name><operator pos:line="21" pos:column="47">.<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="48">name<pos:position pos:line="21" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></call> <operator pos:line="21" pos:column="54">&gt;<pos:position pos:line="21" pos:column="58"/></operator> <literal type="number" pos:line="21" pos:column="56">1<pos:position pos:line="21" pos:column="57"/></literal><operator pos:line="21" pos:column="57">)<pos:position pos:line="21" pos:column="58"/></operator>
	  <operator pos:line="22" pos:column="11">||<pos:position pos:line="22" pos:column="13"/></operator> <operator pos:line="22" pos:column="14">(<pos:position pos:line="22" pos:column="15"/></operator><name><name pos:line="22" pos:column="15">end_elem<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">-&gt;<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="25">type<pos:position pos:line="22" pos:column="29"/></name></name> <operator pos:line="22" pos:column="30">==<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="33">COLL_SYM<pos:position pos:line="22" pos:column="41"/></name>
	      <operator pos:line="23" pos:column="15">&amp;&amp;<pos:position pos:line="23" pos:column="25"/></operator> <call><name pos:line="23" pos:column="18">strlen<pos:position pos:line="23" pos:column="24"/></name> <argument_list pos:line="23" pos:column="25">(<argument><expr><operator pos:line="23" pos:column="26">(<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">char<pos:position pos:line="23" pos:column="31"/></name> <operator pos:line="23" pos:column="32">*<pos:position pos:line="23" pos:column="33"/></operator><operator pos:line="23" pos:column="33">)<pos:position pos:line="23" pos:column="34"/></operator> <name><name pos:line="23" pos:column="35">end_elem<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">-&gt;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="45">opr<pos:position pos:line="23" pos:column="48"/></name><operator pos:line="23" pos:column="48">.<pos:position pos:line="23" pos:column="49"/></operator><name pos:line="23" pos:column="49">name<pos:position pos:line="23" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call> <operator pos:line="23" pos:column="55">&gt;<pos:position pos:line="23" pos:column="59"/></operator> <literal type="number" pos:line="23" pos:column="57">1<pos:position pos:line="23" pos:column="58"/></literal><operator pos:line="23" pos:column="58">)<pos:position pos:line="23" pos:column="59"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="61">0<pos:position pos:line="23" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="64"/></condition><then pos:line="23" pos:column="64">
    <block type="pseudo"><return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">REG_ECOLLATE<pos:position pos:line="24" pos:column="24"/></name></expr>;<pos:position pos:line="24" pos:column="25"/></return></block></then></if>

<cpp:ifdef pos:line="26" pos:column="1"># <cpp:directive pos:line="26" pos:column="3">ifdef<pos:position pos:line="26" pos:column="8"/></cpp:directive> <name pos:line="26" pos:column="9">RE_ENABLE_I18N<pos:position pos:line="26" pos:column="23"/></name></cpp:ifdef>
  <block pos:line="27" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">wchar_t<pos:position pos:line="28" pos:column="12"/></name></type> <name pos:line="28" pos:column="13">wc<pos:position pos:line="28" pos:column="15"/></name></decl>;<pos:position pos:line="28" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">wint_t<pos:position pos:line="29" pos:column="11"/></name></type> <name pos:line="29" pos:column="12">start_wc<pos:position pos:line="29" pos:column="20"/></name></decl>;<pos:position pos:line="29" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">wint_t<pos:position pos:line="30" pos:column="11"/></name></type> <name pos:line="30" pos:column="12">end_wc<pos:position pos:line="30" pos:column="18"/></name></decl>;<pos:position pos:line="30" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">wchar_t<pos:position pos:line="31" pos:column="12"/></name></type> <name><name pos:line="31" pos:column="13">cmp_buf<pos:position pos:line="31" pos:column="20"/></name><index pos:line="31" pos:column="20">[<expr><literal type="number" pos:line="31" pos:column="21">6<pos:position pos:line="31" pos:column="22"/></literal></expr>]<pos:position pos:line="31" pos:column="23"/></index></name> <init pos:line="31" pos:column="24">= <expr><block pos:line="31" pos:column="26">{<expr><literal type="string" pos:line="31" pos:column="27">L'<pos:position pos:line="31" pos:column="29"/></literal>\0'<pos:position pos:line="31" pos:column="32"/></expr>, <expr><literal type="string" pos:line="31" pos:column="34">L'<pos:position pos:line="31" pos:column="36"/></literal>\0'<pos:position pos:line="31" pos:column="39"/></expr>, <expr><literal type="string" pos:line="31" pos:column="41">L'<pos:position pos:line="31" pos:column="43"/></literal>\0'<pos:position pos:line="31" pos:column="46"/></expr>, <expr><literal type="string" pos:line="31" pos:column="48">L'<pos:position pos:line="31" pos:column="50"/></literal>\0'<pos:position pos:line="31" pos:column="53"/></expr>, <expr><literal type="string" pos:line="31" pos:column="55">L'<pos:position pos:line="31" pos:column="57"/></literal>\0'<pos:position pos:line="31" pos:column="60"/></expr>, <expr><literal type="string" pos:line="31" pos:column="62">L'<pos:position pos:line="31" pos:column="64"/></literal>\0'<pos:position pos:line="31" pos:column="67"/></expr>}<pos:position pos:line="31" pos:column="68"/></block></expr></init></decl>;<pos:position pos:line="31" pos:column="69"/></decl_stmt>

    <expr_stmt><expr><name pos:line="33" pos:column="5">start_ch<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <operator pos:line="33" pos:column="16">(<pos:position pos:line="33" pos:column="17"/></operator><ternary><condition><expr><operator pos:line="33" pos:column="17">(<pos:position pos:line="33" pos:column="18"/></operator><name><name pos:line="33" pos:column="18">start_elem<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">-&gt;<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="30">type<pos:position pos:line="33" pos:column="34"/></name></name> <operator pos:line="33" pos:column="35">==<pos:position pos:line="33" pos:column="37"/></operator> <name pos:line="33" pos:column="38">SB_CHAR<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">)<pos:position pos:line="33" pos:column="46"/></operator></expr> ?<pos:position pos:line="33" pos:column="48"/></condition><then pos:line="33" pos:column="48"> <expr><name><name pos:line="33" pos:column="49">start_elem<pos:position pos:line="33" pos:column="59"/></name><operator pos:line="33" pos:column="59">-&gt;<pos:position pos:line="33" pos:column="64"/></operator><name pos:line="33" pos:column="61">opr<pos:position pos:line="33" pos:column="64"/></name><operator pos:line="33" pos:column="64">.<pos:position pos:line="33" pos:column="65"/></operator><name pos:line="33" pos:column="65">ch<pos:position pos:line="33" pos:column="67"/></name></name></expr>
		<pos:position pos:line="34" pos:column="3"/></then><else pos:line="34" pos:column="17">: <expr><operator pos:line="34" pos:column="19">(<pos:position pos:line="34" pos:column="20"/></operator><ternary><condition><expr><operator pos:line="34" pos:column="20">(<pos:position pos:line="34" pos:column="21"/></operator><name><name pos:line="34" pos:column="21">start_elem<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">-&gt;<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="33">type<pos:position pos:line="34" pos:column="37"/></name></name> <operator pos:line="34" pos:column="38">==<pos:position pos:line="34" pos:column="40"/></operator> <name pos:line="34" pos:column="41">COLL_SYM<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">)<pos:position pos:line="34" pos:column="50"/></operator></expr> ?<pos:position pos:line="34" pos:column="52"/></condition><then pos:line="34" pos:column="52"> <expr><name><name pos:line="34" pos:column="53">start_elem<pos:position pos:line="34" pos:column="63"/></name><operator pos:line="34" pos:column="63">-&gt;<pos:position pos:line="34" pos:column="68"/></operator><name pos:line="34" pos:column="65">opr<pos:position pos:line="34" pos:column="68"/></name><operator pos:line="34" pos:column="68">.<pos:position pos:line="34" pos:column="69"/></operator><name pos:line="34" pos:column="69">name<pos:position pos:line="34" pos:column="73"/></name><index pos:line="34" pos:column="73">[<expr><literal type="number" pos:line="34" pos:column="74">0<pos:position pos:line="34" pos:column="75"/></literal></expr>]<pos:position pos:line="34" pos:column="76"/></index></name></expr>
		   <pos:position pos:line="35" pos:column="6"/></then><else pos:line="35" pos:column="20">: <expr><literal type="number" pos:line="35" pos:column="22">0<pos:position pos:line="35" pos:column="23"/></literal></expr></else></ternary><operator pos:line="35" pos:column="23">)<pos:position pos:line="35" pos:column="24"/></operator></expr></else></ternary><operator pos:line="35" pos:column="24">)<pos:position pos:line="35" pos:column="25"/></operator></expr>;<pos:position pos:line="35" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">end_ch<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <operator pos:line="36" pos:column="14">(<pos:position pos:line="36" pos:column="15"/></operator><ternary><condition><expr><operator pos:line="36" pos:column="15">(<pos:position pos:line="36" pos:column="16"/></operator><name><name pos:line="36" pos:column="16">end_elem<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">type<pos:position pos:line="36" pos:column="30"/></name></name> <operator pos:line="36" pos:column="31">==<pos:position pos:line="36" pos:column="33"/></operator> <name pos:line="36" pos:column="34">SB_CHAR<pos:position pos:line="36" pos:column="41"/></name><operator pos:line="36" pos:column="41">)<pos:position pos:line="36" pos:column="42"/></operator></expr> ?<pos:position pos:line="36" pos:column="44"/></condition><then pos:line="36" pos:column="44"> <expr><name><name pos:line="36" pos:column="45">end_elem<pos:position pos:line="36" pos:column="53"/></name><operator pos:line="36" pos:column="53">-&gt;<pos:position pos:line="36" pos:column="58"/></operator><name pos:line="36" pos:column="55">opr<pos:position pos:line="36" pos:column="58"/></name><operator pos:line="36" pos:column="58">.<pos:position pos:line="36" pos:column="59"/></operator><name pos:line="36" pos:column="59">ch<pos:position pos:line="36" pos:column="61"/></name></name></expr>
	      <pos:position pos:line="37" pos:column="8"/></then><else pos:line="37" pos:column="15">: <expr><operator pos:line="37" pos:column="17">(<pos:position pos:line="37" pos:column="18"/></operator><ternary><condition><expr><operator pos:line="37" pos:column="18">(<pos:position pos:line="37" pos:column="19"/></operator><name><name pos:line="37" pos:column="19">end_elem<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">-&gt;<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="29">type<pos:position pos:line="37" pos:column="33"/></name></name> <operator pos:line="37" pos:column="34">==<pos:position pos:line="37" pos:column="36"/></operator> <name pos:line="37" pos:column="37">COLL_SYM<pos:position pos:line="37" pos:column="45"/></name><operator pos:line="37" pos:column="45">)<pos:position pos:line="37" pos:column="46"/></operator></expr> ?<pos:position pos:line="37" pos:column="48"/></condition><then pos:line="37" pos:column="48"> <expr><name><name pos:line="37" pos:column="49">end_elem<pos:position pos:line="37" pos:column="57"/></name><operator pos:line="37" pos:column="57">-&gt;<pos:position pos:line="37" pos:column="62"/></operator><name pos:line="37" pos:column="59">opr<pos:position pos:line="37" pos:column="62"/></name><operator pos:line="37" pos:column="62">.<pos:position pos:line="37" pos:column="63"/></operator><name pos:line="37" pos:column="63">name<pos:position pos:line="37" pos:column="67"/></name><index pos:line="37" pos:column="67">[<expr><literal type="number" pos:line="37" pos:column="68">0<pos:position pos:line="37" pos:column="69"/></literal></expr>]<pos:position pos:line="37" pos:column="70"/></index></name></expr>
		 <pos:position pos:line="38" pos:column="4"/></then><else pos:line="38" pos:column="18">: <expr><literal type="number" pos:line="38" pos:column="20">0<pos:position pos:line="38" pos:column="21"/></literal></expr></else></ternary><operator pos:line="38" pos:column="21">)<pos:position pos:line="38" pos:column="22"/></operator></expr></else></ternary><operator pos:line="38" pos:column="22">)<pos:position pos:line="38" pos:column="23"/></operator></expr>;<pos:position pos:line="38" pos:column="24"/></expr_stmt>
<cpp:ifdef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifdef<pos:position pos:line="39" pos:column="7"/></cpp:directive> <name pos:line="39" pos:column="8">GAWK<pos:position pos:line="39" pos:column="12"/></name></cpp:ifdef>
    <comment type="block" pos:line="40" pos:column="5">/*
     * Fedora Core 2, maybe others, have broken `btowc' that returns -1
     * for any value &gt; 127. Sigh. Note that `start_ch' and `end_ch' are
     * unsigned, so we don't have sign extension problems.
     */</comment>
    <expr_stmt><expr><name pos:line="45" pos:column="5">start_wc<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <operator pos:line="45" pos:column="16">(<pos:position pos:line="45" pos:column="17"/></operator><ternary><condition><expr><operator pos:line="45" pos:column="17">(<pos:position pos:line="45" pos:column="18"/></operator><name><name pos:line="45" pos:column="18">start_elem<pos:position pos:line="45" pos:column="28"/></name><operator pos:line="45" pos:column="28">-&gt;<pos:position pos:line="45" pos:column="33"/></operator><name pos:line="45" pos:column="30">type<pos:position pos:line="45" pos:column="34"/></name></name> <operator pos:line="45" pos:column="35">==<pos:position pos:line="45" pos:column="37"/></operator> <name pos:line="45" pos:column="38">SB_CHAR<pos:position pos:line="45" pos:column="45"/></name> <operator pos:line="45" pos:column="46">||<pos:position pos:line="45" pos:column="48"/></operator> <name><name pos:line="45" pos:column="49">start_elem<pos:position pos:line="45" pos:column="59"/></name><operator pos:line="45" pos:column="59">-&gt;<pos:position pos:line="45" pos:column="64"/></operator><name pos:line="45" pos:column="61">type<pos:position pos:line="45" pos:column="65"/></name></name> <operator pos:line="45" pos:column="66">==<pos:position pos:line="45" pos:column="68"/></operator> <name pos:line="45" pos:column="69">COLL_SYM<pos:position pos:line="45" pos:column="77"/></name><operator pos:line="45" pos:column="77">)<pos:position pos:line="45" pos:column="78"/></operator></expr>
		?<pos:position pos:line="46" pos:column="18"/></condition><then pos:line="46" pos:column="18"> <expr><name pos:line="46" pos:column="19">start_ch<pos:position pos:line="46" pos:column="27"/></name></expr> <pos:position pos:line="46" pos:column="28"/></then><else pos:line="46" pos:column="28">: <expr><name><name pos:line="46" pos:column="30">start_elem<pos:position pos:line="46" pos:column="40"/></name><operator pos:line="46" pos:column="40">-&gt;<pos:position pos:line="46" pos:column="45"/></operator><name pos:line="46" pos:column="42">opr<pos:position pos:line="46" pos:column="45"/></name><operator pos:line="46" pos:column="45">.<pos:position pos:line="46" pos:column="46"/></operator><name pos:line="46" pos:column="46">wch<pos:position pos:line="46" pos:column="49"/></name></name></expr></else></ternary><operator pos:line="46" pos:column="49">)<pos:position pos:line="46" pos:column="50"/></operator></expr>;<pos:position pos:line="46" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="47" pos:column="5">end_wc<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <operator pos:line="47" pos:column="14">(<pos:position pos:line="47" pos:column="15"/></operator><ternary><condition><expr><operator pos:line="47" pos:column="15">(<pos:position pos:line="47" pos:column="16"/></operator><name><name pos:line="47" pos:column="16">end_elem<pos:position pos:line="47" pos:column="24"/></name><operator pos:line="47" pos:column="24">-&gt;<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="26">type<pos:position pos:line="47" pos:column="30"/></name></name> <operator pos:line="47" pos:column="31">==<pos:position pos:line="47" pos:column="33"/></operator> <name pos:line="47" pos:column="34">SB_CHAR<pos:position pos:line="47" pos:column="41"/></name> <operator pos:line="47" pos:column="42">||<pos:position pos:line="47" pos:column="44"/></operator> <name><name pos:line="47" pos:column="45">end_elem<pos:position pos:line="47" pos:column="53"/></name><operator pos:line="47" pos:column="53">-&gt;<pos:position pos:line="47" pos:column="58"/></operator><name pos:line="47" pos:column="55">type<pos:position pos:line="47" pos:column="59"/></name></name> <operator pos:line="47" pos:column="60">==<pos:position pos:line="47" pos:column="62"/></operator> <name pos:line="47" pos:column="63">COLL_SYM<pos:position pos:line="47" pos:column="71"/></name><operator pos:line="47" pos:column="71">)<pos:position pos:line="47" pos:column="72"/></operator></expr>
	      ?<pos:position pos:line="48" pos:column="16"/></condition><then pos:line="48" pos:column="16"> <expr><name pos:line="48" pos:column="17">end_ch<pos:position pos:line="48" pos:column="23"/></name></expr> <pos:position pos:line="48" pos:column="24"/></then><else pos:line="48" pos:column="24">: <expr><name><name pos:line="48" pos:column="26">end_elem<pos:position pos:line="48" pos:column="34"/></name><operator pos:line="48" pos:column="34">-&gt;<pos:position pos:line="48" pos:column="39"/></operator><name pos:line="48" pos:column="36">opr<pos:position pos:line="48" pos:column="39"/></name><operator pos:line="48" pos:column="39">.<pos:position pos:line="48" pos:column="40"/></operator><name pos:line="48" pos:column="40">wch<pos:position pos:line="48" pos:column="43"/></name></name></expr></else></ternary><operator pos:line="48" pos:column="43">)<pos:position pos:line="48" pos:column="44"/></operator></expr>;<pos:position pos:line="48" pos:column="45"/></expr_stmt>
<cpp:else pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">else<pos:position pos:line="49" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="50" pos:column="5">start_wc<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <operator pos:line="50" pos:column="16">(<pos:position pos:line="50" pos:column="17"/></operator><ternary><condition><expr><operator pos:line="50" pos:column="17">(<pos:position pos:line="50" pos:column="18"/></operator><name><name pos:line="50" pos:column="18">start_elem<pos:position pos:line="50" pos:column="28"/></name><operator pos:line="50" pos:column="28">-&gt;<pos:position pos:line="50" pos:column="33"/></operator><name pos:line="50" pos:column="30">type<pos:position pos:line="50" pos:column="34"/></name></name> <operator pos:line="50" pos:column="35">==<pos:position pos:line="50" pos:column="37"/></operator> <name pos:line="50" pos:column="38">SB_CHAR<pos:position pos:line="50" pos:column="45"/></name> <operator pos:line="50" pos:column="46">||<pos:position pos:line="50" pos:column="48"/></operator> <name><name pos:line="50" pos:column="49">start_elem<pos:position pos:line="50" pos:column="59"/></name><operator pos:line="50" pos:column="59">-&gt;<pos:position pos:line="50" pos:column="64"/></operator><name pos:line="50" pos:column="61">type<pos:position pos:line="50" pos:column="65"/></name></name> <operator pos:line="50" pos:column="66">==<pos:position pos:line="50" pos:column="68"/></operator> <name pos:line="50" pos:column="69">COLL_SYM<pos:position pos:line="50" pos:column="77"/></name><operator pos:line="50" pos:column="77">)<pos:position pos:line="50" pos:column="78"/></operator></expr>
		?<pos:position pos:line="51" pos:column="18"/></condition><then pos:line="51" pos:column="18"> <expr><call><name pos:line="51" pos:column="19">__btowc<pos:position pos:line="51" pos:column="26"/></name> <argument_list pos:line="51" pos:column="27">(<argument><expr><name pos:line="51" pos:column="28">start_ch<pos:position pos:line="51" pos:column="36"/></name></expr></argument>)<pos:position pos:line="51" pos:column="37"/></argument_list></call></expr> <pos:position pos:line="51" pos:column="38"/></then><else pos:line="51" pos:column="38">: <expr><name><name pos:line="51" pos:column="40">start_elem<pos:position pos:line="51" pos:column="50"/></name><operator pos:line="51" pos:column="50">-&gt;<pos:position pos:line="51" pos:column="55"/></operator><name pos:line="51" pos:column="52">opr<pos:position pos:line="51" pos:column="55"/></name><operator pos:line="51" pos:column="55">.<pos:position pos:line="51" pos:column="56"/></operator><name pos:line="51" pos:column="56">wch<pos:position pos:line="51" pos:column="59"/></name></name></expr></else></ternary><operator pos:line="51" pos:column="59">)<pos:position pos:line="51" pos:column="60"/></operator></expr>;<pos:position pos:line="51" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><name pos:line="52" pos:column="5">end_wc<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <operator pos:line="52" pos:column="14">(<pos:position pos:line="52" pos:column="15"/></operator><ternary><condition><expr><operator pos:line="52" pos:column="15">(<pos:position pos:line="52" pos:column="16"/></operator><name><name pos:line="52" pos:column="16">end_elem<pos:position pos:line="52" pos:column="24"/></name><operator pos:line="52" pos:column="24">-&gt;<pos:position pos:line="52" pos:column="29"/></operator><name pos:line="52" pos:column="26">type<pos:position pos:line="52" pos:column="30"/></name></name> <operator pos:line="52" pos:column="31">==<pos:position pos:line="52" pos:column="33"/></operator> <name pos:line="52" pos:column="34">SB_CHAR<pos:position pos:line="52" pos:column="41"/></name> <operator pos:line="52" pos:column="42">||<pos:position pos:line="52" pos:column="44"/></operator> <name><name pos:line="52" pos:column="45">end_elem<pos:position pos:line="52" pos:column="53"/></name><operator pos:line="52" pos:column="53">-&gt;<pos:position pos:line="52" pos:column="58"/></operator><name pos:line="52" pos:column="55">type<pos:position pos:line="52" pos:column="59"/></name></name> <operator pos:line="52" pos:column="60">==<pos:position pos:line="52" pos:column="62"/></operator> <name pos:line="52" pos:column="63">COLL_SYM<pos:position pos:line="52" pos:column="71"/></name><operator pos:line="52" pos:column="71">)<pos:position pos:line="52" pos:column="72"/></operator></expr>
	      ?<pos:position pos:line="53" pos:column="16"/></condition><then pos:line="53" pos:column="16"> <expr><call><name pos:line="53" pos:column="17">__btowc<pos:position pos:line="53" pos:column="24"/></name> <argument_list pos:line="53" pos:column="25">(<argument><expr><name pos:line="53" pos:column="26">end_ch<pos:position pos:line="53" pos:column="32"/></name></expr></argument>)<pos:position pos:line="53" pos:column="33"/></argument_list></call></expr> <pos:position pos:line="53" pos:column="34"/></then><else pos:line="53" pos:column="34">: <expr><name><name pos:line="53" pos:column="36">end_elem<pos:position pos:line="53" pos:column="44"/></name><operator pos:line="53" pos:column="44">-&gt;<pos:position pos:line="53" pos:column="49"/></operator><name pos:line="53" pos:column="46">opr<pos:position pos:line="53" pos:column="49"/></name><operator pos:line="53" pos:column="49">.<pos:position pos:line="53" pos:column="50"/></operator><name pos:line="53" pos:column="50">wch<pos:position pos:line="53" pos:column="53"/></name></name></expr></else></ternary><operator pos:line="53" pos:column="53">)<pos:position pos:line="53" pos:column="54"/></operator></expr>;<pos:position pos:line="53" pos:column="55"/></expr_stmt>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><name pos:line="55" pos:column="9">start_wc<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">==<pos:position pos:line="55" pos:column="20"/></operator> <name pos:line="55" pos:column="21">WEOF<pos:position pos:line="55" pos:column="25"/></name> <operator pos:line="55" pos:column="26">||<pos:position pos:line="55" pos:column="28"/></operator> <name pos:line="55" pos:column="29">end_wc<pos:position pos:line="55" pos:column="35"/></name> <operator pos:line="55" pos:column="36">==<pos:position pos:line="55" pos:column="38"/></operator> <name pos:line="55" pos:column="39">WEOF<pos:position pos:line="55" pos:column="43"/></name></expr>)<pos:position pos:line="55" pos:column="44"/></condition><then pos:line="55" pos:column="44">
      <block type="pseudo"><return pos:line="56" pos:column="7">return <expr><name pos:line="56" pos:column="14">REG_ECOLLATE<pos:position pos:line="56" pos:column="26"/></name></expr>;<pos:position pos:line="56" pos:column="27"/></return></block></then></if>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">cmp_buf<pos:position pos:line="57" pos:column="12"/></name><index pos:line="57" pos:column="12">[<expr><literal type="number" pos:line="57" pos:column="13">0<pos:position pos:line="57" pos:column="14"/></literal></expr>]<pos:position pos:line="57" pos:column="15"/></index></name> <operator pos:line="57" pos:column="16">=<pos:position pos:line="57" pos:column="17"/></operator> <name pos:line="57" pos:column="18">start_wc<pos:position pos:line="57" pos:column="26"/></name></expr>;<pos:position pos:line="57" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">cmp_buf<pos:position pos:line="58" pos:column="12"/></name><index pos:line="58" pos:column="12">[<expr><literal type="number" pos:line="58" pos:column="13">4<pos:position pos:line="58" pos:column="14"/></literal></expr>]<pos:position pos:line="58" pos:column="15"/></index></name> <operator pos:line="58" pos:column="16">=<pos:position pos:line="58" pos:column="17"/></operator> <name pos:line="58" pos:column="18">end_wc<pos:position pos:line="58" pos:column="24"/></name></expr>;<pos:position pos:line="58" pos:column="25"/></expr_stmt>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><call><name pos:line="59" pos:column="9">wcscoll<pos:position pos:line="59" pos:column="16"/></name> <argument_list pos:line="59" pos:column="17">(<argument><expr><name pos:line="59" pos:column="18">cmp_buf<pos:position pos:line="59" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="27">cmp_buf<pos:position pos:line="59" pos:column="34"/></name> <operator pos:line="59" pos:column="35">+<pos:position pos:line="59" pos:column="36"/></operator> <literal type="number" pos:line="59" pos:column="37">4<pos:position pos:line="59" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="39"/></argument_list></call> <operator pos:line="59" pos:column="40">&gt;<pos:position pos:line="59" pos:column="44"/></operator> <literal type="number" pos:line="59" pos:column="42">0<pos:position pos:line="59" pos:column="43"/></literal></expr>)<pos:position pos:line="59" pos:column="44"/></condition><then pos:line="59" pos:column="44">
      <block type="pseudo"><return pos:line="60" pos:column="7">return <expr><name pos:line="60" pos:column="14">REG_ERANGE<pos:position pos:line="60" pos:column="24"/></name></expr>;<pos:position pos:line="60" pos:column="25"/></return></block></then></if>

    <comment type="block" pos:line="62" pos:column="5">/* Got valid collation sequence values, add them as a new entry.
       However, for !_LIBC we have no collation elements: if the
       character set is single byte, the single byte character set
       that we build below suffices.  parse_bracket_exp passes
       no MBCSET if dfa-&gt;mb_cur_max == 1.  */</comment>
    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name pos:line="67" pos:column="9">mbcset<pos:position pos:line="67" pos:column="15"/></name></expr>)<pos:position pos:line="67" pos:column="16"/></condition><then pos:line="67" pos:column="16">
      <block pos:line="68" pos:column="7">{
	<comment type="block" pos:line="69" pos:column="9">/* Check the space of the arrays.  */</comment>
	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><call><name pos:line="70" pos:column="13">BE<pos:position pos:line="70" pos:column="15"/></name> <argument_list pos:line="70" pos:column="16">(<argument><expr><operator pos:line="70" pos:column="17">*<pos:position pos:line="70" pos:column="18"/></operator><name pos:line="70" pos:column="18">range_alloc<pos:position pos:line="70" pos:column="29"/></name> <operator pos:line="70" pos:column="30">==<pos:position pos:line="70" pos:column="32"/></operator> <name><name pos:line="70" pos:column="33">mbcset<pos:position pos:line="70" pos:column="39"/></name><operator pos:line="70" pos:column="39">-&gt;<pos:position pos:line="70" pos:column="44"/></operator><name pos:line="70" pos:column="41">nranges<pos:position pos:line="70" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="50">0<pos:position pos:line="70" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="53"/></condition><then pos:line="70" pos:column="53">
	  <block pos:line="71" pos:column="11">{
	    <comment type="block" pos:line="72" pos:column="13">/* There is not enough space, need realloc.  */</comment>
	    <decl_stmt><decl><type><name pos:line="73" pos:column="13">wchar_t<pos:position pos:line="73" pos:column="20"/></name> <modifier pos:line="73" pos:column="21">*<pos:position pos:line="73" pos:column="22"/></modifier></type><name pos:line="73" pos:column="22">new_array_start<pos:position pos:line="73" pos:column="37"/></name></decl>, <modifier pos:line="73" pos:column="39">*<pos:position pos:line="73" pos:column="40"/></modifier><decl><type ref="prev"/><name pos:line="73" pos:column="40">new_array_end<pos:position pos:line="73" pos:column="53"/></name></decl>;<pos:position pos:line="73" pos:column="54"/></decl_stmt>
	    <decl_stmt><decl><type><name pos:line="74" pos:column="13">int<pos:position pos:line="74" pos:column="16"/></name></type> <name pos:line="74" pos:column="17">new_nranges<pos:position pos:line="74" pos:column="28"/></name></decl>;<pos:position pos:line="74" pos:column="29"/></decl_stmt>

	    <comment type="block" pos:line="76" pos:column="13">/* +1 in case of mbcset-&gt;nranges is 0.  */</comment>
	    <expr_stmt><expr><name pos:line="77" pos:column="13">new_nranges<pos:position pos:line="77" pos:column="24"/></name> <operator pos:line="77" pos:column="25">=<pos:position pos:line="77" pos:column="26"/></operator> <literal type="number" pos:line="77" pos:column="27">2<pos:position pos:line="77" pos:column="28"/></literal> <operator pos:line="77" pos:column="29">*<pos:position pos:line="77" pos:column="30"/></operator> <name><name pos:line="77" pos:column="31">mbcset<pos:position pos:line="77" pos:column="37"/></name><operator pos:line="77" pos:column="37">-&gt;<pos:position pos:line="77" pos:column="42"/></operator><name pos:line="77" pos:column="39">nranges<pos:position pos:line="77" pos:column="46"/></name></name> <operator pos:line="77" pos:column="47">+<pos:position pos:line="77" pos:column="48"/></operator> <literal type="number" pos:line="77" pos:column="49">1<pos:position pos:line="77" pos:column="50"/></literal></expr>;<pos:position pos:line="77" pos:column="51"/></expr_stmt>
	    <comment type="block" pos:line="78" pos:column="13">/* Use realloc since mbcset-&gt;range_starts and mbcset-&gt;range_ends
	       are NULL if *range_alloc == 0.  */</comment>
	    <expr_stmt><expr><name pos:line="80" pos:column="13">new_array_start<pos:position pos:line="80" pos:column="28"/></name> <operator pos:line="80" pos:column="29">=<pos:position pos:line="80" pos:column="30"/></operator> <call><name pos:line="80" pos:column="31">re_realloc<pos:position pos:line="80" pos:column="41"/></name> <argument_list pos:line="80" pos:column="42">(<argument><expr><name><name pos:line="80" pos:column="43">mbcset<pos:position pos:line="80" pos:column="49"/></name><operator pos:line="80" pos:column="49">-&gt;<pos:position pos:line="80" pos:column="54"/></operator><name pos:line="80" pos:column="51">range_starts<pos:position pos:line="80" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="65">wchar_t<pos:position pos:line="80" pos:column="72"/></name></expr></argument>,
					  <argument><expr><name pos:line="81" pos:column="43">new_nranges<pos:position pos:line="81" pos:column="54"/></name></expr></argument>)<pos:position pos:line="81" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="56"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="82" pos:column="13">new_array_end<pos:position pos:line="82" pos:column="26"/></name> <operator pos:line="82" pos:column="27">=<pos:position pos:line="82" pos:column="28"/></operator> <call><name pos:line="82" pos:column="29">re_realloc<pos:position pos:line="82" pos:column="39"/></name> <argument_list pos:line="82" pos:column="40">(<argument><expr><name><name pos:line="82" pos:column="41">mbcset<pos:position pos:line="82" pos:column="47"/></name><operator pos:line="82" pos:column="47">-&gt;<pos:position pos:line="82" pos:column="52"/></operator><name pos:line="82" pos:column="49">range_ends<pos:position pos:line="82" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="61">wchar_t<pos:position pos:line="82" pos:column="68"/></name></expr></argument>,
					<argument><expr><name pos:line="83" pos:column="41">new_nranges<pos:position pos:line="83" pos:column="52"/></name></expr></argument>)<pos:position pos:line="83" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="54"/></expr_stmt>

	    <if pos:line="85" pos:column="13">if <condition pos:line="85" pos:column="16">(<expr><call><name pos:line="85" pos:column="17">BE<pos:position pos:line="85" pos:column="19"/></name> <argument_list pos:line="85" pos:column="20">(<argument><expr><name pos:line="85" pos:column="21">new_array_start<pos:position pos:line="85" pos:column="36"/></name> <operator pos:line="85" pos:column="37">==<pos:position pos:line="85" pos:column="39"/></operator> <name pos:line="85" pos:column="40">NULL<pos:position pos:line="85" pos:column="44"/></name> <operator pos:line="85" pos:column="45">||<pos:position pos:line="85" pos:column="47"/></operator> <name pos:line="85" pos:column="48">new_array_end<pos:position pos:line="85" pos:column="61"/></name> <operator pos:line="85" pos:column="62">==<pos:position pos:line="85" pos:column="64"/></operator> <name pos:line="85" pos:column="65">NULL<pos:position pos:line="85" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="71">0<pos:position pos:line="85" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="74"/></condition><then pos:line="85" pos:column="74">
	      <block type="pseudo"><return pos:line="86" pos:column="15">return <expr><name pos:line="86" pos:column="22">REG_ESPACE<pos:position pos:line="86" pos:column="32"/></name></expr>;<pos:position pos:line="86" pos:column="33"/></return></block></then></if>

	    <expr_stmt><expr><name><name pos:line="88" pos:column="13">mbcset<pos:position pos:line="88" pos:column="19"/></name><operator pos:line="88" pos:column="19">-&gt;<pos:position pos:line="88" pos:column="24"/></operator><name pos:line="88" pos:column="21">range_starts<pos:position pos:line="88" pos:column="33"/></name></name> <operator pos:line="88" pos:column="34">=<pos:position pos:line="88" pos:column="35"/></operator> <name pos:line="88" pos:column="36">new_array_start<pos:position pos:line="88" pos:column="51"/></name></expr>;<pos:position pos:line="88" pos:column="52"/></expr_stmt>
	    <expr_stmt><expr><name><name pos:line="89" pos:column="13">mbcset<pos:position pos:line="89" pos:column="19"/></name><operator pos:line="89" pos:column="19">-&gt;<pos:position pos:line="89" pos:column="24"/></operator><name pos:line="89" pos:column="21">range_ends<pos:position pos:line="89" pos:column="31"/></name></name> <operator pos:line="89" pos:column="32">=<pos:position pos:line="89" pos:column="33"/></operator> <name pos:line="89" pos:column="34">new_array_end<pos:position pos:line="89" pos:column="47"/></name></expr>;<pos:position pos:line="89" pos:column="48"/></expr_stmt>
	    <expr_stmt><expr><operator pos:line="90" pos:column="13">*<pos:position pos:line="90" pos:column="14"/></operator><name pos:line="90" pos:column="14">range_alloc<pos:position pos:line="90" pos:column="25"/></name> <operator pos:line="90" pos:column="26">=<pos:position pos:line="90" pos:column="27"/></operator> <name pos:line="90" pos:column="28">new_nranges<pos:position pos:line="90" pos:column="39"/></name></expr>;<pos:position pos:line="90" pos:column="40"/></expr_stmt>
	  }<pos:position pos:line="91" pos:column="12"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="93" pos:column="9">mbcset<pos:position pos:line="93" pos:column="15"/></name><operator pos:line="93" pos:column="15">-&gt;<pos:position pos:line="93" pos:column="20"/></operator><name pos:line="93" pos:column="17">range_starts<pos:position pos:line="93" pos:column="29"/></name><index pos:line="93" pos:column="29">[<expr><name><name pos:line="93" pos:column="30">mbcset<pos:position pos:line="93" pos:column="36"/></name><operator pos:line="93" pos:column="36">-&gt;<pos:position pos:line="93" pos:column="41"/></operator><name pos:line="93" pos:column="38">nranges<pos:position pos:line="93" pos:column="45"/></name></name></expr>]<pos:position pos:line="93" pos:column="46"/></index></name> <operator pos:line="93" pos:column="47">=<pos:position pos:line="93" pos:column="48"/></operator> <name pos:line="93" pos:column="49">start_wc<pos:position pos:line="93" pos:column="57"/></name></expr>;<pos:position pos:line="93" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="94" pos:column="9">mbcset<pos:position pos:line="94" pos:column="15"/></name><operator pos:line="94" pos:column="15">-&gt;<pos:position pos:line="94" pos:column="20"/></operator><name pos:line="94" pos:column="17">range_ends<pos:position pos:line="94" pos:column="27"/></name><index pos:line="94" pos:column="27">[<expr><name><name pos:line="94" pos:column="28">mbcset<pos:position pos:line="94" pos:column="34"/></name><operator pos:line="94" pos:column="34">-&gt;<pos:position pos:line="94" pos:column="39"/></operator><name pos:line="94" pos:column="36">nranges<pos:position pos:line="94" pos:column="43"/></name></name><operator pos:line="94" pos:column="43">++<pos:position pos:line="94" pos:column="45"/></operator></expr>]<pos:position pos:line="94" pos:column="46"/></index></name> <operator pos:line="94" pos:column="47">=<pos:position pos:line="94" pos:column="48"/></operator> <name pos:line="94" pos:column="49">end_wc<pos:position pos:line="94" pos:column="55"/></name></expr>;<pos:position pos:line="94" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="95" pos:column="8"/></block></then></if>

    <comment type="block" pos:line="97" pos:column="5">/* Build the table for single byte characters.  */</comment>
    <for pos:line="98" pos:column="5">for <control pos:line="98" pos:column="9">(<init><expr><name pos:line="98" pos:column="10">wc<pos:position pos:line="98" pos:column="12"/></name> <operator pos:line="98" pos:column="13">=<pos:position pos:line="98" pos:column="14"/></operator> <literal type="number" pos:line="98" pos:column="15">0<pos:position pos:line="98" pos:column="16"/></literal></expr>;<pos:position pos:line="98" pos:column="17"/></init> <condition><expr><name pos:line="98" pos:column="18">wc<pos:position pos:line="98" pos:column="20"/></name> <operator pos:line="98" pos:column="21">&lt;<pos:position pos:line="98" pos:column="25"/></operator> <name pos:line="98" pos:column="23">SBC_MAX<pos:position pos:line="98" pos:column="30"/></name></expr>;<pos:position pos:line="98" pos:column="31"/></condition> <incr><expr><operator pos:line="98" pos:column="32">++<pos:position pos:line="98" pos:column="34"/></operator><name pos:line="98" pos:column="34">wc<pos:position pos:line="98" pos:column="36"/></name></expr></incr>)<pos:position pos:line="98" pos:column="37"/></control>
      <block pos:line="99" pos:column="7">{
	<expr_stmt><expr><name><name pos:line="100" pos:column="9">cmp_buf<pos:position pos:line="100" pos:column="16"/></name><index pos:line="100" pos:column="16">[<expr><literal type="number" pos:line="100" pos:column="17">2<pos:position pos:line="100" pos:column="18"/></literal></expr>]<pos:position pos:line="100" pos:column="19"/></index></name> <operator pos:line="100" pos:column="20">=<pos:position pos:line="100" pos:column="21"/></operator> <name pos:line="100" pos:column="22">wc<pos:position pos:line="100" pos:column="24"/></name></expr>;<pos:position pos:line="100" pos:column="25"/></expr_stmt>
	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><call><name pos:line="101" pos:column="13">wcscoll<pos:position pos:line="101" pos:column="20"/></name> <argument_list pos:line="101" pos:column="21">(<argument><expr><name pos:line="101" pos:column="22">cmp_buf<pos:position pos:line="101" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="31">cmp_buf<pos:position pos:line="101" pos:column="38"/></name> <operator pos:line="101" pos:column="39">+<pos:position pos:line="101" pos:column="40"/></operator> <literal type="number" pos:line="101" pos:column="41">2<pos:position pos:line="101" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="43"/></argument_list></call> <operator pos:line="101" pos:column="44">&lt;=<pos:position pos:line="101" pos:column="49"/></operator> <literal type="number" pos:line="101" pos:column="47">0<pos:position pos:line="101" pos:column="48"/></literal>
	    <operator pos:line="102" pos:column="13">&amp;&amp;<pos:position pos:line="102" pos:column="23"/></operator> <call><name pos:line="102" pos:column="16">wcscoll<pos:position pos:line="102" pos:column="23"/></name> <argument_list pos:line="102" pos:column="24">(<argument><expr><name pos:line="102" pos:column="25">cmp_buf<pos:position pos:line="102" pos:column="32"/></name> <operator pos:line="102" pos:column="33">+<pos:position pos:line="102" pos:column="34"/></operator> <literal type="number" pos:line="102" pos:column="35">2<pos:position pos:line="102" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="38">cmp_buf<pos:position pos:line="102" pos:column="45"/></name> <operator pos:line="102" pos:column="46">+<pos:position pos:line="102" pos:column="47"/></operator> <literal type="number" pos:line="102" pos:column="48">4<pos:position pos:line="102" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="50"/></argument_list></call> <operator pos:line="102" pos:column="51">&lt;=<pos:position pos:line="102" pos:column="56"/></operator> <literal type="number" pos:line="102" pos:column="54">0<pos:position pos:line="102" pos:column="55"/></literal></expr>)<pos:position pos:line="102" pos:column="56"/></condition><then pos:line="102" pos:column="56">
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="11">bitset_set<pos:position pos:line="103" pos:column="21"/></name> <argument_list pos:line="103" pos:column="22">(<argument><expr><name pos:line="103" pos:column="23">sbcset<pos:position pos:line="103" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="31">wc<pos:position pos:line="103" pos:column="33"/></name></expr></argument>)<pos:position pos:line="103" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="35"/></expr_stmt></block></then></if>
      }<pos:position pos:line="104" pos:column="8"/></block></for>
  }<pos:position pos:line="105" pos:column="4"/></block>
<cpp:else pos:line="106" pos:column="1"># <cpp:directive pos:line="106" pos:column="3">else<pos:position pos:line="106" pos:column="7"/></cpp:directive></cpp:else> <comment type="block" pos:line="106" pos:column="8">/* not RE_ENABLE_I18N */</comment>
  <block pos:line="107" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="108" pos:column="5">unsigned<pos:position pos:line="108" pos:column="13"/></name> <name pos:line="108" pos:column="14">int<pos:position pos:line="108" pos:column="17"/></name></type> <name pos:line="108" pos:column="18">ch<pos:position pos:line="108" pos:column="20"/></name></decl>;<pos:position pos:line="108" pos:column="21"/></decl_stmt>
    <expr_stmt><expr><name pos:line="109" pos:column="5">start_ch<pos:position pos:line="109" pos:column="13"/></name> <operator pos:line="109" pos:column="14">=<pos:position pos:line="109" pos:column="15"/></operator> <operator pos:line="109" pos:column="16">(<pos:position pos:line="109" pos:column="17"/></operator><ternary><condition><expr><operator pos:line="109" pos:column="17">(<pos:position pos:line="109" pos:column="18"/></operator><name><name pos:line="109" pos:column="18">start_elem<pos:position pos:line="109" pos:column="28"/></name><operator pos:line="109" pos:column="28">-&gt;<pos:position pos:line="109" pos:column="33"/></operator><name pos:line="109" pos:column="30">type<pos:position pos:line="109" pos:column="34"/></name></name> <operator pos:line="109" pos:column="35">==<pos:position pos:line="109" pos:column="37"/></operator> <name pos:line="109" pos:column="38">SB_CHAR<pos:position pos:line="109" pos:column="45"/></name> <operator pos:line="109" pos:column="46">)<pos:position pos:line="109" pos:column="47"/></operator></expr> ?<pos:position pos:line="109" pos:column="49"/></condition><then pos:line="109" pos:column="49"> <expr><name><name pos:line="109" pos:column="50">start_elem<pos:position pos:line="109" pos:column="60"/></name><operator pos:line="109" pos:column="60">-&gt;<pos:position pos:line="109" pos:column="65"/></operator><name pos:line="109" pos:column="62">opr<pos:position pos:line="109" pos:column="65"/></name><operator pos:line="109" pos:column="65">.<pos:position pos:line="109" pos:column="66"/></operator><name pos:line="109" pos:column="66">ch<pos:position pos:line="109" pos:column="68"/></name></name></expr>
		<pos:position pos:line="110" pos:column="3"/></then><else pos:line="110" pos:column="17">: <expr><operator pos:line="110" pos:column="19">(<pos:position pos:line="110" pos:column="20"/></operator><ternary><condition><expr><operator pos:line="110" pos:column="20">(<pos:position pos:line="110" pos:column="21"/></operator><name><name pos:line="110" pos:column="21">start_elem<pos:position pos:line="110" pos:column="31"/></name><operator pos:line="110" pos:column="31">-&gt;<pos:position pos:line="110" pos:column="36"/></operator><name pos:line="110" pos:column="33">type<pos:position pos:line="110" pos:column="37"/></name></name> <operator pos:line="110" pos:column="38">==<pos:position pos:line="110" pos:column="40"/></operator> <name pos:line="110" pos:column="41">COLL_SYM<pos:position pos:line="110" pos:column="49"/></name><operator pos:line="110" pos:column="49">)<pos:position pos:line="110" pos:column="50"/></operator></expr> ?<pos:position pos:line="110" pos:column="52"/></condition><then pos:line="110" pos:column="52"> <expr><name><name pos:line="110" pos:column="53">start_elem<pos:position pos:line="110" pos:column="63"/></name><operator pos:line="110" pos:column="63">-&gt;<pos:position pos:line="110" pos:column="68"/></operator><name pos:line="110" pos:column="65">opr<pos:position pos:line="110" pos:column="68"/></name><operator pos:line="110" pos:column="68">.<pos:position pos:line="110" pos:column="69"/></operator><name pos:line="110" pos:column="69">name<pos:position pos:line="110" pos:column="73"/></name><index pos:line="110" pos:column="73">[<expr><literal type="number" pos:line="110" pos:column="74">0<pos:position pos:line="110" pos:column="75"/></literal></expr>]<pos:position pos:line="110" pos:column="76"/></index></name></expr>
		   <pos:position pos:line="111" pos:column="6"/></then><else pos:line="111" pos:column="20">: <expr><literal type="number" pos:line="111" pos:column="22">0<pos:position pos:line="111" pos:column="23"/></literal></expr></else></ternary><operator pos:line="111" pos:column="23">)<pos:position pos:line="111" pos:column="24"/></operator></expr></else></ternary><operator pos:line="111" pos:column="24">)<pos:position pos:line="111" pos:column="25"/></operator></expr>;<pos:position pos:line="111" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="112" pos:column="5">end_ch<pos:position pos:line="112" pos:column="11"/></name> <operator pos:line="112" pos:column="12">=<pos:position pos:line="112" pos:column="13"/></operator> <operator pos:line="112" pos:column="14">(<pos:position pos:line="112" pos:column="15"/></operator><ternary><condition><expr><operator pos:line="112" pos:column="15">(<pos:position pos:line="112" pos:column="16"/></operator><name><name pos:line="112" pos:column="16">end_elem<pos:position pos:line="112" pos:column="24"/></name><operator pos:line="112" pos:column="24">-&gt;<pos:position pos:line="112" pos:column="29"/></operator><name pos:line="112" pos:column="26">type<pos:position pos:line="112" pos:column="30"/></name></name> <operator pos:line="112" pos:column="31">==<pos:position pos:line="112" pos:column="33"/></operator> <name pos:line="112" pos:column="34">SB_CHAR<pos:position pos:line="112" pos:column="41"/></name> <operator pos:line="112" pos:column="42">)<pos:position pos:line="112" pos:column="43"/></operator></expr> ?<pos:position pos:line="112" pos:column="45"/></condition><then pos:line="112" pos:column="45"> <expr><name><name pos:line="112" pos:column="46">end_elem<pos:position pos:line="112" pos:column="54"/></name><operator pos:line="112" pos:column="54">-&gt;<pos:position pos:line="112" pos:column="59"/></operator><name pos:line="112" pos:column="56">opr<pos:position pos:line="112" pos:column="59"/></name><operator pos:line="112" pos:column="59">.<pos:position pos:line="112" pos:column="60"/></operator><name pos:line="112" pos:column="60">ch<pos:position pos:line="112" pos:column="62"/></name></name></expr>
	      <pos:position pos:line="113" pos:column="8"/></then><else pos:line="113" pos:column="15">: <expr><operator pos:line="113" pos:column="17">(<pos:position pos:line="113" pos:column="18"/></operator><ternary><condition><expr><operator pos:line="113" pos:column="18">(<pos:position pos:line="113" pos:column="19"/></operator><name><name pos:line="113" pos:column="19">end_elem<pos:position pos:line="113" pos:column="27"/></name><operator pos:line="113" pos:column="27">-&gt;<pos:position pos:line="113" pos:column="32"/></operator><name pos:line="113" pos:column="29">type<pos:position pos:line="113" pos:column="33"/></name></name> <operator pos:line="113" pos:column="34">==<pos:position pos:line="113" pos:column="36"/></operator> <name pos:line="113" pos:column="37">COLL_SYM<pos:position pos:line="113" pos:column="45"/></name><operator pos:line="113" pos:column="45">)<pos:position pos:line="113" pos:column="46"/></operator></expr> ?<pos:position pos:line="113" pos:column="48"/></condition><then pos:line="113" pos:column="48"> <expr><name><name pos:line="113" pos:column="49">end_elem<pos:position pos:line="113" pos:column="57"/></name><operator pos:line="113" pos:column="57">-&gt;<pos:position pos:line="113" pos:column="62"/></operator><name pos:line="113" pos:column="59">opr<pos:position pos:line="113" pos:column="62"/></name><operator pos:line="113" pos:column="62">.<pos:position pos:line="113" pos:column="63"/></operator><name pos:line="113" pos:column="63">name<pos:position pos:line="113" pos:column="67"/></name><index pos:line="113" pos:column="67">[<expr><literal type="number" pos:line="113" pos:column="68">0<pos:position pos:line="113" pos:column="69"/></literal></expr>]<pos:position pos:line="113" pos:column="70"/></index></name></expr>
		 <pos:position pos:line="114" pos:column="4"/></then><else pos:line="114" pos:column="18">: <expr><literal type="number" pos:line="114" pos:column="20">0<pos:position pos:line="114" pos:column="21"/></literal></expr></else></ternary><operator pos:line="114" pos:column="21">)<pos:position pos:line="114" pos:column="22"/></operator></expr></else></ternary><operator pos:line="114" pos:column="22">)<pos:position pos:line="114" pos:column="23"/></operator></expr>;<pos:position pos:line="114" pos:column="24"/></expr_stmt>
    <if pos:line="115" pos:column="5">if <condition pos:line="115" pos:column="8">(<expr><name pos:line="115" pos:column="9">start_ch<pos:position pos:line="115" pos:column="17"/></name> <operator pos:line="115" pos:column="18">&gt;<pos:position pos:line="115" pos:column="22"/></operator> <name pos:line="115" pos:column="20">end_ch<pos:position pos:line="115" pos:column="26"/></name></expr>)<pos:position pos:line="115" pos:column="27"/></condition><then pos:line="115" pos:column="27">
      <block type="pseudo"><return pos:line="116" pos:column="7">return <expr><name pos:line="116" pos:column="14">REG_ERANGE<pos:position pos:line="116" pos:column="24"/></name></expr>;<pos:position pos:line="116" pos:column="25"/></return></block></then></if>
    <comment type="block" pos:line="117" pos:column="5">/* Build the table for single byte characters.  */</comment>
    <for pos:line="118" pos:column="5">for <control pos:line="118" pos:column="9">(<init><expr><name pos:line="118" pos:column="10">ch<pos:position pos:line="118" pos:column="12"/></name> <operator pos:line="118" pos:column="13">=<pos:position pos:line="118" pos:column="14"/></operator> <literal type="number" pos:line="118" pos:column="15">0<pos:position pos:line="118" pos:column="16"/></literal></expr>;<pos:position pos:line="118" pos:column="17"/></init> <condition><expr><name pos:line="118" pos:column="18">ch<pos:position pos:line="118" pos:column="20"/></name> <operator pos:line="118" pos:column="21">&lt;<pos:position pos:line="118" pos:column="25"/></operator> <name pos:line="118" pos:column="23">SBC_MAX<pos:position pos:line="118" pos:column="30"/></name></expr>;<pos:position pos:line="118" pos:column="31"/></condition> <incr><expr><operator pos:line="118" pos:column="32">++<pos:position pos:line="118" pos:column="34"/></operator><name pos:line="118" pos:column="34">ch<pos:position pos:line="118" pos:column="36"/></name></expr></incr>)<pos:position pos:line="118" pos:column="37"/></control>
      <block type="pseudo"><if pos:line="119" pos:column="7">if <condition pos:line="119" pos:column="10">(<expr><name pos:line="119" pos:column="11">start_ch<pos:position pos:line="119" pos:column="19"/></name> <operator pos:line="119" pos:column="20">&lt;=<pos:position pos:line="119" pos:column="25"/></operator> <name pos:line="119" pos:column="23">ch<pos:position pos:line="119" pos:column="25"/></name>  <operator pos:line="119" pos:column="27">&amp;&amp;<pos:position pos:line="119" pos:column="37"/></operator> <name pos:line="119" pos:column="30">ch<pos:position pos:line="119" pos:column="32"/></name> <operator pos:line="119" pos:column="33">&lt;=<pos:position pos:line="119" pos:column="38"/></operator> <name pos:line="119" pos:column="36">end_ch<pos:position pos:line="119" pos:column="42"/></name></expr>)<pos:position pos:line="119" pos:column="43"/></condition><then pos:line="119" pos:column="43">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="9">bitset_set<pos:position pos:line="120" pos:column="19"/></name> <argument_list pos:line="120" pos:column="20">(<argument><expr><name pos:line="120" pos:column="21">sbcset<pos:position pos:line="120" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="29">ch<pos:position pos:line="120" pos:column="31"/></name></expr></argument>)<pos:position pos:line="120" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="33"/></expr_stmt></block></then></if></block></for>
  }<pos:position pos:line="121" pos:column="4"/></block>
<cpp:endif pos:line="122" pos:column="1"># <cpp:directive pos:line="122" pos:column="3">endif<pos:position pos:line="122" pos:column="8"/></cpp:directive></cpp:endif> <comment type="block" pos:line="122" pos:column="9">/* not RE_ENABLE_I18N */</comment>
  <return pos:line="123" pos:column="3">return <expr><name pos:line="123" pos:column="10">REG_NOERROR<pos:position pos:line="123" pos:column="21"/></name></expr>;<pos:position pos:line="123" pos:column="22"/></return>
}</unit>
