<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5045_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_name<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">path<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">object_id<pos:position pos:line="1" pos:column="61"/></name></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">oid<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">int<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">flag<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="78">void<pos:position pos:line="1" pos:column="82"/></name> <modifier pos:line="1" pos:column="83">*<pos:position pos:line="1" pos:column="84"/></modifier></type><name pos:line="1" pos:column="84">cb_data<pos:position pos:line="1" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="92"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">is_tag<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><call><name pos:line="3" pos:column="22">starts_with<pos:position pos:line="3" pos:column="33"/></name><argument_list pos:line="3" pos:column="33">(<argument><expr><name pos:line="3" pos:column="34">path<pos:position pos:line="3" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="40">"refs/tags/"<pos:position pos:line="3" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">object_id<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">peeled<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">is_annotated<pos:position pos:line="5" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="27">prio<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* Reject anything outside refs/tags/ unless --all */</comment>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">all<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">&amp;&amp;<pos:position pos:line="8" pos:column="28"/></operator> <operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">is_tag<pos:position pos:line="8" pos:column="28"/></name></expr>)<pos:position pos:line="8" pos:column="29"/></condition><then pos:line="8" pos:column="29">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="11" pos:column="9">/*
	 * If we're given exclude patterns, first exclude any tag which match
	 * any of the exclude pattern.
	 */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">exclude_patterns<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">.<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">nr<pos:position pos:line="15" pos:column="32"/></name></name></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33"> <block pos:line="15" pos:column="34">{
		<decl_stmt><decl><type><name><name pos:line="16" pos:column="17">struct<pos:position pos:line="16" pos:column="23"/></name> <name pos:line="16" pos:column="24">string_list_item<pos:position pos:line="16" pos:column="40"/></name></name> <modifier pos:line="16" pos:column="41">*<pos:position pos:line="16" pos:column="42"/></modifier></type><name pos:line="16" pos:column="42">item<pos:position pos:line="16" pos:column="46"/></name></decl>;<pos:position pos:line="16" pos:column="47"/></decl_stmt>

		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">is_tag<pos:position pos:line="18" pos:column="28"/></name></expr>)<pos:position pos:line="18" pos:column="29"/></condition><then pos:line="18" pos:column="29">
			<block type="pseudo"><return pos:line="19" pos:column="25">return <expr><literal type="number" pos:line="19" pos:column="32">0<pos:position pos:line="19" pos:column="33"/></literal></expr>;<pos:position pos:line="19" pos:column="34"/></return></block></then></if>

		<macro><name pos:line="21" pos:column="17">for_each_string_list_item<pos:position pos:line="21" pos:column="42"/></name><argument_list pos:line="21" pos:column="42">(<argument pos:line="21" pos:column="43">item<pos:position pos:line="21" pos:column="47"/></argument>, <argument pos:line="21" pos:column="49">&amp;exclude_patterns<pos:position pos:line="21" pos:column="66"/></argument>)<pos:position pos:line="21" pos:column="67"/></argument_list></macro> <block pos:line="21" pos:column="68">{
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><operator pos:line="22" pos:column="29">!<pos:position pos:line="22" pos:column="30"/></operator><call><name pos:line="22" pos:column="30">wildmatch<pos:position pos:line="22" pos:column="39"/></name><argument_list pos:line="22" pos:column="39">(<argument><expr><name><name pos:line="22" pos:column="40">item<pos:position pos:line="22" pos:column="44"/></name><operator pos:line="22" pos:column="44">-&gt;<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="46">string<pos:position pos:line="22" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="54">path<pos:position pos:line="22" pos:column="58"/></name> <operator pos:line="22" pos:column="59">+<pos:position pos:line="22" pos:column="60"/></operator> <literal type="number" pos:line="22" pos:column="61">10<pos:position pos:line="22" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="65">0<pos:position pos:line="22" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="68"/></condition><then pos:line="22" pos:column="68">
				<block type="pseudo"><return pos:line="23" pos:column="33">return <expr><literal type="number" pos:line="23" pos:column="40">0<pos:position pos:line="23" pos:column="41"/></literal></expr>;<pos:position pos:line="23" pos:column="42"/></return></block></then></if>
		}<pos:position pos:line="24" pos:column="18"/></block>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="27" pos:column="9">/*
	 * If we're given patterns, accept only tags which match at least one
	 * pattern.
	 */</comment>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name><name pos:line="31" pos:column="13">patterns<pos:position pos:line="31" pos:column="21"/></name><operator pos:line="31" pos:column="21">.<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">nr<pos:position pos:line="31" pos:column="24"/></name></name></expr>)<pos:position pos:line="31" pos:column="25"/></condition><then pos:line="31" pos:column="25"> <block pos:line="31" pos:column="26">{
		<decl_stmt><decl><type><name><name pos:line="32" pos:column="17">struct<pos:position pos:line="32" pos:column="23"/></name> <name pos:line="32" pos:column="24">string_list_item<pos:position pos:line="32" pos:column="40"/></name></name> <modifier pos:line="32" pos:column="41">*<pos:position pos:line="32" pos:column="42"/></modifier></type><name pos:line="32" pos:column="42">item<pos:position pos:line="32" pos:column="46"/></name></decl>;<pos:position pos:line="32" pos:column="47"/></decl_stmt>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><operator pos:line="34" pos:column="21">!<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">is_tag<pos:position pos:line="34" pos:column="28"/></name></expr>)<pos:position pos:line="34" pos:column="29"/></condition><then pos:line="34" pos:column="29">
			<block type="pseudo"><return pos:line="35" pos:column="25">return <expr><literal type="number" pos:line="35" pos:column="32">0<pos:position pos:line="35" pos:column="33"/></literal></expr>;<pos:position pos:line="35" pos:column="34"/></return></block></then></if>

		<macro><name pos:line="37" pos:column="17">for_each_string_list_item<pos:position pos:line="37" pos:column="42"/></name><argument_list pos:line="37" pos:column="42">(<argument pos:line="37" pos:column="43">item<pos:position pos:line="37" pos:column="47"/></argument>, <argument pos:line="37" pos:column="49">&amp;patterns<pos:position pos:line="37" pos:column="58"/></argument>)<pos:position pos:line="37" pos:column="59"/></argument_list></macro> <block pos:line="37" pos:column="60">{
			<if pos:line="38" pos:column="25">if <condition pos:line="38" pos:column="28">(<expr><operator pos:line="38" pos:column="29">!<pos:position pos:line="38" pos:column="30"/></operator><call><name pos:line="38" pos:column="30">wildmatch<pos:position pos:line="38" pos:column="39"/></name><argument_list pos:line="38" pos:column="39">(<argument><expr><name><name pos:line="38" pos:column="40">item<pos:position pos:line="38" pos:column="44"/></name><operator pos:line="38" pos:column="44">-&gt;<pos:position pos:line="38" pos:column="49"/></operator><name pos:line="38" pos:column="46">string<pos:position pos:line="38" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="54">path<pos:position pos:line="38" pos:column="58"/></name> <operator pos:line="38" pos:column="59">+<pos:position pos:line="38" pos:column="60"/></operator> <literal type="number" pos:line="38" pos:column="61">10<pos:position pos:line="38" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="65">0<pos:position pos:line="38" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="68"/></condition><then pos:line="38" pos:column="68">
				<block type="pseudo"><break pos:line="39" pos:column="33">break;<pos:position pos:line="39" pos:column="39"/></break></block></then></if>

			<comment type="block" pos:line="41" pos:column="25">/* If we get here, no pattern matched. */</comment>
			<return pos:line="42" pos:column="25">return <expr><literal type="number" pos:line="42" pos:column="32">0<pos:position pos:line="42" pos:column="33"/></literal></expr>;<pos:position pos:line="42" pos:column="34"/></return>
		}<pos:position pos:line="43" pos:column="18"/></block>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="46" pos:column="9">/* Is it annotated? */</comment>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">!<pos:position pos:line="47" pos:column="14"/></operator><call><name pos:line="47" pos:column="14">peel_ref<pos:position pos:line="47" pos:column="22"/></name><argument_list pos:line="47" pos:column="22">(<argument><expr><name pos:line="47" pos:column="23">path<pos:position pos:line="47" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="29">peeled<pos:position pos:line="47" pos:column="35"/></name><operator pos:line="47" pos:column="35">.<pos:position pos:line="47" pos:column="36"/></operator><name pos:line="47" pos:column="36">hash<pos:position pos:line="47" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="42"/></condition><then pos:line="47" pos:column="42"> <block pos:line="47" pos:column="43">{
		<expr_stmt><expr><name pos:line="48" pos:column="17">is_annotated<pos:position pos:line="48" pos:column="29"/></name> <operator pos:line="48" pos:column="30">=<pos:position pos:line="48" pos:column="31"/></operator> <operator pos:line="48" pos:column="32">!<pos:position pos:line="48" pos:column="33"/></operator><operator pos:line="48" pos:column="33">!<pos:position pos:line="48" pos:column="34"/></operator><call><name pos:line="48" pos:column="34">oidcmp<pos:position pos:line="48" pos:column="40"/></name><argument_list pos:line="48" pos:column="40">(<argument><expr><name pos:line="48" pos:column="41">oid<pos:position pos:line="48" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="46">&amp;<pos:position pos:line="48" pos:column="51"/></operator><name pos:line="48" pos:column="47">peeled<pos:position pos:line="48" pos:column="53"/></name></expr></argument>)<pos:position pos:line="48" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="55"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></then> <else pos:line="49" pos:column="11">else <block pos:line="49" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">oidcpy<pos:position pos:line="50" pos:column="23"/></name><argument_list pos:line="50" pos:column="23">(<argument><expr><operator pos:line="50" pos:column="24">&amp;<pos:position pos:line="50" pos:column="29"/></operator><name pos:line="50" pos:column="25">peeled<pos:position pos:line="50" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="33">oid<pos:position pos:line="50" pos:column="36"/></name></expr></argument>)<pos:position pos:line="50" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="51" pos:column="17">is_annotated<pos:position pos:line="51" pos:column="29"/></name> <operator pos:line="51" pos:column="30">=<pos:position pos:line="51" pos:column="31"/></operator> <literal type="number" pos:line="51" pos:column="32">0<pos:position pos:line="51" pos:column="33"/></literal></expr>;<pos:position pos:line="51" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="54" pos:column="9">/*
	 * By default, we only use annotated tags, but with --tags
	 * we fall back to lightweight ones (even without --tags,
	 * we still remember lightweight ones, only to give hints
	 * in an error message).  --all allows any refs to be used.
	 */</comment>
	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">is_annotated<pos:position pos:line="60" pos:column="25"/></name></expr>)<pos:position pos:line="60" pos:column="26"/></condition><then pos:line="60" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="17">prio<pos:position pos:line="61" pos:column="21"/></name> <operator pos:line="61" pos:column="22">=<pos:position pos:line="61" pos:column="23"/></operator> <literal type="number" pos:line="61" pos:column="24">2<pos:position pos:line="61" pos:column="25"/></literal></expr>;<pos:position pos:line="61" pos:column="26"/></expr_stmt></block></then>
	<elseif pos:line="62" pos:column="9">else <if pos:line="62" pos:column="14">if <condition pos:line="62" pos:column="17">(<expr><name pos:line="62" pos:column="18">is_tag<pos:position pos:line="62" pos:column="24"/></name></expr>)<pos:position pos:line="62" pos:column="25"/></condition><then pos:line="62" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="17">prio<pos:position pos:line="63" pos:column="21"/></name> <operator pos:line="63" pos:column="22">=<pos:position pos:line="63" pos:column="23"/></operator> <literal type="number" pos:line="63" pos:column="24">1<pos:position pos:line="63" pos:column="25"/></literal></expr>;<pos:position pos:line="63" pos:column="26"/></expr_stmt></block></then></if></elseif>
	<else pos:line="64" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="17">prio<pos:position pos:line="65" pos:column="21"/></name> <operator pos:line="65" pos:column="22">=<pos:position pos:line="65" pos:column="23"/></operator> <literal type="number" pos:line="65" pos:column="24">0<pos:position pos:line="65" pos:column="25"/></literal></expr>;<pos:position pos:line="65" pos:column="26"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="67" pos:column="9">add_to_known_names<pos:position pos:line="67" pos:column="27"/></name><argument_list pos:line="67" pos:column="27">(<argument><expr><ternary><condition><expr><name pos:line="67" pos:column="28">all<pos:position pos:line="67" pos:column="31"/></name></expr> ?<pos:position pos:line="67" pos:column="33"/></condition><then pos:line="67" pos:column="33"> <expr><name pos:line="67" pos:column="34">path<pos:position pos:line="67" pos:column="38"/></name> <operator pos:line="67" pos:column="39">+<pos:position pos:line="67" pos:column="40"/></operator> <literal type="number" pos:line="67" pos:column="41">5<pos:position pos:line="67" pos:column="42"/></literal></expr> <pos:position pos:line="67" pos:column="43"/></then><else pos:line="67" pos:column="43">: <expr><name pos:line="67" pos:column="45">path<pos:position pos:line="67" pos:column="49"/></name> <operator pos:line="67" pos:column="50">+<pos:position pos:line="67" pos:column="51"/></operator> <literal type="number" pos:line="67" pos:column="52">10<pos:position pos:line="67" pos:column="54"/></literal></expr></else></ternary></expr></argument>, <argument><expr><operator pos:line="67" pos:column="56">&amp;<pos:position pos:line="67" pos:column="61"/></operator><name pos:line="67" pos:column="57">peeled<pos:position pos:line="67" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="65">prio<pos:position pos:line="67" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="71">oid<pos:position pos:line="67" pos:column="74"/></name></expr></argument>)<pos:position pos:line="67" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="76"/></expr_stmt>
	<return pos:line="68" pos:column="9">return <expr><literal type="number" pos:line="68" pos:column="16">0<pos:position pos:line="68" pos:column="17"/></literal></expr>;<pos:position pos:line="68" pos:column="18"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
