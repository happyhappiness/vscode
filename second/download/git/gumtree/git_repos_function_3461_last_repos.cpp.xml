<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3461_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">resolve_gitlink_ref<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">submodule<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">refname<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="2" pos:column="25">unsigned<pos:position pos:line="2" pos:column="33"/></name> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">sha1<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">len<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><call><name pos:line="4" pos:column="22">strlen<pos:position pos:line="4" pos:column="28"/></name><argument_list pos:line="4" pos:column="28">(<argument><expr><name pos:line="4" pos:column="29">submodule<pos:position pos:line="4" pos:column="38"/></name></expr></argument>)<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">ref_store<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">refs<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">flags<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><name pos:line="8" pos:column="16">len<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">&amp;&amp;<pos:position pos:line="8" pos:column="30"/></operator> <name><name pos:line="8" pos:column="23">submodule<pos:position pos:line="8" pos:column="32"/></name><index pos:line="8" pos:column="32">[<expr><name pos:line="8" pos:column="33">len<pos:position pos:line="8" pos:column="36"/></name> <operator pos:line="8" pos:column="37">-<pos:position pos:line="8" pos:column="38"/></operator> <literal type="number" pos:line="8" pos:column="39">1<pos:position pos:line="8" pos:column="40"/></literal></expr>]<pos:position pos:line="8" pos:column="41"/></index></name> <operator pos:line="8" pos:column="42">==<pos:position pos:line="8" pos:column="44"/></operator> <literal type="char" pos:line="8" pos:column="45">'/'<pos:position pos:line="8" pos:column="48"/></literal></expr>)<pos:position pos:line="8" pos:column="49"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">len<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">--<pos:position pos:line="9" pos:column="22"/></operator></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt></block></while>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">len<pos:position pos:line="11" pos:column="17"/></name></expr>)<pos:position pos:line="11" pos:column="18"/></condition><then pos:line="11" pos:column="18">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">-<pos:position pos:line="12" pos:column="25"/></operator><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr>;<pos:position pos:line="12" pos:column="27"/></return></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">submodule<pos:position pos:line="14" pos:column="22"/></name><index pos:line="14" pos:column="22">[<expr><name pos:line="14" pos:column="23">len<pos:position pos:line="14" pos:column="26"/></name></expr>]<pos:position pos:line="14" pos:column="27"/></index></name></expr>)<pos:position pos:line="14" pos:column="28"/></condition><then pos:line="14" pos:column="28"> <block pos:line="14" pos:column="29">{
		<comment type="block" pos:line="15" pos:column="17">/* We need to strip off one or more trailing slashes */</comment>
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">char<pos:position pos:line="16" pos:column="21"/></name> <modifier pos:line="16" pos:column="22">*<pos:position pos:line="16" pos:column="23"/></modifier></type><name pos:line="16" pos:column="23">stripped<pos:position pos:line="16" pos:column="31"/></name> <init pos:line="16" pos:column="32">= <expr><call><name pos:line="16" pos:column="34">xmemdupz<pos:position pos:line="16" pos:column="42"/></name><argument_list pos:line="16" pos:column="42">(<argument><expr><name pos:line="16" pos:column="43">submodule<pos:position pos:line="16" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="54">len<pos:position pos:line="16" pos:column="57"/></name></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="59"/></decl_stmt>

		<expr_stmt><expr><name pos:line="18" pos:column="17">refs<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <call><name pos:line="18" pos:column="24">get_submodule_ref_store<pos:position pos:line="18" pos:column="47"/></name><argument_list pos:line="18" pos:column="47">(<argument><expr><name pos:line="18" pos:column="48">stripped<pos:position pos:line="18" pos:column="56"/></name></expr></argument>)<pos:position pos:line="18" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">free<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">stripped<pos:position pos:line="19" pos:column="30"/></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then> <else pos:line="20" pos:column="11">else <block pos:line="20" pos:column="16">{
		<expr_stmt><expr><name pos:line="21" pos:column="17">refs<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <call><name pos:line="21" pos:column="24">get_submodule_ref_store<pos:position pos:line="21" pos:column="47"/></name><argument_list pos:line="21" pos:column="47">(<argument><expr><name pos:line="21" pos:column="48">submodule<pos:position pos:line="21" pos:column="57"/></name></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></else></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">refs<pos:position pos:line="24" pos:column="18"/></name></expr>)<pos:position pos:line="24" pos:column="19"/></condition><then pos:line="24" pos:column="19">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><operator pos:line="25" pos:column="24">-<pos:position pos:line="25" pos:column="25"/></operator><literal type="number" pos:line="25" pos:column="25">1<pos:position pos:line="25" pos:column="26"/></literal></expr>;<pos:position pos:line="25" pos:column="27"/></return></block></then></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><call><name pos:line="27" pos:column="14">refs_resolve_ref_unsafe<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">refs<pos:position pos:line="27" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">refname<pos:position pos:line="27" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="53">0<pos:position pos:line="27" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="56">sha1<pos:position pos:line="27" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="62">&amp;<pos:position pos:line="27" pos:column="67"/></operator><name pos:line="27" pos:column="63">flags<pos:position pos:line="27" pos:column="68"/></name></expr></argument>)<pos:position pos:line="27" pos:column="69"/></argument_list></call> <operator pos:line="27" pos:column="70">||<pos:position pos:line="27" pos:column="72"/></operator>
	    <call><name pos:line="28" pos:column="13">is_null_sha1<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">sha1<pos:position pos:line="28" pos:column="30"/></name></expr></argument>)<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="32"/></condition><then pos:line="28" pos:column="32">
		<block type="pseudo"><return pos:line="29" pos:column="17">return <expr><operator pos:line="29" pos:column="24">-<pos:position pos:line="29" pos:column="25"/></operator><literal type="number" pos:line="29" pos:column="25">1<pos:position pos:line="29" pos:column="26"/></literal></expr>;<pos:position pos:line="29" pos:column="27"/></return></block></then></if>
	<return pos:line="30" pos:column="9">return <expr><literal type="number" pos:line="30" pos:column="16">0<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
