<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6947_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">push_fail_stack<pos:position pos:line="3" pos:column="16"/></name> <parameter_list pos:line="3" pos:column="17">(<parameter><decl><type><name><name pos:line="3" pos:column="18">struct<pos:position pos:line="3" pos:column="24"/></name> <name pos:line="3" pos:column="25">re_fail_stack_t<pos:position pos:line="3" pos:column="40"/></name></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">fs<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="46">int<pos:position pos:line="3" pos:column="49"/></name></type> <name pos:line="3" pos:column="50">str_idx<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="59">int<pos:position pos:line="3" pos:column="62"/></name></type> <name pos:line="3" pos:column="63">dest_node<pos:position pos:line="3" pos:column="72"/></name></decl></parameter>,
		 <parameter><decl><type><name pos:line="4" pos:column="18">int<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">nregs<pos:position pos:line="4" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="29">regmatch_t<pos:position pos:line="4" pos:column="39"/></name> <modifier pos:line="4" pos:column="40">*<pos:position pos:line="4" pos:column="41"/></modifier></type><name pos:line="4" pos:column="41">regs<pos:position pos:line="4" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="47">re_node_set<pos:position pos:line="4" pos:column="58"/></name> <modifier pos:line="4" pos:column="59">*<pos:position pos:line="4" pos:column="60"/></modifier></type><name pos:line="4" pos:column="60">eps_via_nodes<pos:position pos:line="4" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="74"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">reg_errcode_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">err<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">num<pos:position pos:line="7" pos:column="10"/></name> <init pos:line="7" pos:column="11">= <expr><name><name pos:line="7" pos:column="13">fs<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">-&gt;<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="17">num<pos:position pos:line="7" pos:column="20"/></name></name><operator pos:line="7" pos:column="20">++<pos:position pos:line="7" pos:column="22"/></operator></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name><name pos:line="8" pos:column="7">fs<pos:position pos:line="8" pos:column="9"/></name><operator pos:line="8" pos:column="9">-&gt;<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="11">num<pos:position pos:line="8" pos:column="14"/></name></name> <operator pos:line="8" pos:column="15">==<pos:position pos:line="8" pos:column="17"/></operator> <name><name pos:line="8" pos:column="18">fs<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">alloc<pos:position pos:line="8" pos:column="27"/></name></name></expr>)<pos:position pos:line="8" pos:column="28"/></condition><then pos:line="8" pos:column="28">
    <block pos:line="9" pos:column="5">{
      <decl_stmt><decl><type><name><name pos:line="10" pos:column="7">struct<pos:position pos:line="10" pos:column="13"/></name> <name pos:line="10" pos:column="14">re_fail_stack_ent_t<pos:position pos:line="10" pos:column="33"/></name></name> <modifier pos:line="10" pos:column="34">*<pos:position pos:line="10" pos:column="35"/></modifier></type><name pos:line="10" pos:column="35">new_array<pos:position pos:line="10" pos:column="44"/></name></decl>;<pos:position pos:line="10" pos:column="45"/></decl_stmt>
      <expr_stmt><expr><name pos:line="11" pos:column="7">new_array<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <call><name pos:line="11" pos:column="19">realloc<pos:position pos:line="11" pos:column="26"/></name> <argument_list pos:line="11" pos:column="27">(<argument><expr><name><name pos:line="11" pos:column="28">fs<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">-&gt;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="32">stack<pos:position pos:line="11" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="39">(<pos:position pos:line="11" pos:column="40"/></operator><sizeof pos:line="11" pos:column="40">sizeof <argument_list pos:line="11" pos:column="47">(<argument><expr pos:line="11" pos:column="48">struct <name pos:line="11" pos:column="55">re_fail_stack_ent_t<pos:position pos:line="11" pos:column="74"/></name></expr></argument>)<pos:position pos:line="11" pos:column="75"/></argument_list></sizeof>
				       <operator pos:line="12" pos:column="40">*<pos:position pos:line="12" pos:column="41"/></operator> <name><name pos:line="12" pos:column="42">fs<pos:position pos:line="12" pos:column="44"/></name><operator pos:line="12" pos:column="44">-&gt;<pos:position pos:line="12" pos:column="49"/></operator><name pos:line="12" pos:column="46">alloc<pos:position pos:line="12" pos:column="51"/></name></name> <operator pos:line="12" pos:column="52">*<pos:position pos:line="12" pos:column="53"/></operator> <literal type="number" pos:line="12" pos:column="54">2<pos:position pos:line="12" pos:column="55"/></literal><operator pos:line="12" pos:column="55">)<pos:position pos:line="12" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>
      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><name pos:line="13" pos:column="11">new_array<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">==<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="24">NULL<pos:position pos:line="13" pos:column="28"/></name></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29">
	<block type="pseudo"><return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">REG_ESPACE<pos:position pos:line="14" pos:column="26"/></name></expr>;<pos:position pos:line="14" pos:column="27"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="15" pos:column="7">fs<pos:position pos:line="15" pos:column="9"/></name><operator pos:line="15" pos:column="9">-&gt;<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="11">alloc<pos:position pos:line="15" pos:column="16"/></name></name> <operator pos:line="15" pos:column="17">*=<pos:position pos:line="15" pos:column="19"/></operator> <literal type="number" pos:line="15" pos:column="20">2<pos:position pos:line="15" pos:column="21"/></literal></expr>;<pos:position pos:line="15" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="16" pos:column="7">fs<pos:position pos:line="16" pos:column="9"/></name><operator pos:line="16" pos:column="9">-&gt;<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="11">stack<pos:position pos:line="16" pos:column="16"/></name></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">new_array<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">fs<pos:position pos:line="18" pos:column="5"/></name><operator pos:line="18" pos:column="5">-&gt;<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="7">stack<pos:position pos:line="18" pos:column="12"/></name><index pos:line="18" pos:column="12">[<expr><name pos:line="18" pos:column="13">num<pos:position pos:line="18" pos:column="16"/></name></expr>]<pos:position pos:line="18" pos:column="17"/></index></name><operator pos:line="18" pos:column="17">.<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">idx<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">str_idx<pos:position pos:line="18" pos:column="31"/></name></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">fs<pos:position pos:line="19" pos:column="5"/></name><operator pos:line="19" pos:column="5">-&gt;<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="7">stack<pos:position pos:line="19" pos:column="12"/></name><index pos:line="19" pos:column="12">[<expr><name pos:line="19" pos:column="13">num<pos:position pos:line="19" pos:column="16"/></name></expr>]<pos:position pos:line="19" pos:column="17"/></index></name><operator pos:line="19" pos:column="17">.<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">node<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <name pos:line="19" pos:column="25">dest_node<pos:position pos:line="19" pos:column="34"/></name></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">fs<pos:position pos:line="20" pos:column="5"/></name><operator pos:line="20" pos:column="5">-&gt;<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="7">stack<pos:position pos:line="20" pos:column="12"/></name><index pos:line="20" pos:column="12">[<expr><name pos:line="20" pos:column="13">num<pos:position pos:line="20" pos:column="16"/></name></expr>]<pos:position pos:line="20" pos:column="17"/></index></name><operator pos:line="20" pos:column="17">.<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">regs<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <call><name pos:line="20" pos:column="25">re_malloc<pos:position pos:line="20" pos:column="34"/></name> <argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">regmatch_t<pos:position pos:line="20" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="48">nregs<pos:position pos:line="20" pos:column="53"/></name></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name><name pos:line="21" pos:column="7">fs<pos:position pos:line="21" pos:column="9"/></name><operator pos:line="21" pos:column="9">-&gt;<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="11">stack<pos:position pos:line="21" pos:column="16"/></name><index pos:line="21" pos:column="16">[<expr><name pos:line="21" pos:column="17">num<pos:position pos:line="21" pos:column="20"/></name></expr>]<pos:position pos:line="21" pos:column="21"/></index></name><operator pos:line="21" pos:column="21">.<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">regs<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">==<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="30">NULL<pos:position pos:line="21" pos:column="34"/></name></expr>)<pos:position pos:line="21" pos:column="35"/></condition><then pos:line="21" pos:column="35">
    <block type="pseudo"><return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">REG_ESPACE<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">memcpy<pos:position pos:line="23" pos:column="9"/></name> <argument_list pos:line="23" pos:column="10">(<argument><expr><name><name pos:line="23" pos:column="11">fs<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">stack<pos:position pos:line="23" pos:column="20"/></name><index pos:line="23" pos:column="20">[<expr><name pos:line="23" pos:column="21">num<pos:position pos:line="23" pos:column="24"/></name></expr>]<pos:position pos:line="23" pos:column="25"/></index></name><operator pos:line="23" pos:column="25">.<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">regs<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">regs<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="38">sizeof <argument_list pos:line="23" pos:column="45">(<argument><expr><name pos:line="23" pos:column="46">regmatch_t<pos:position pos:line="23" pos:column="56"/></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></sizeof> <operator pos:line="23" pos:column="58">*<pos:position pos:line="23" pos:column="59"/></operator> <name pos:line="23" pos:column="60">nregs<pos:position pos:line="23" pos:column="65"/></name></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="67"/></expr_stmt>
  <expr_stmt><expr><name pos:line="24" pos:column="3">err<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <call><name pos:line="24" pos:column="9">re_node_set_init_copy<pos:position pos:line="24" pos:column="30"/></name> <argument_list pos:line="24" pos:column="31">(<argument><expr><operator pos:line="24" pos:column="32">&amp;<pos:position pos:line="24" pos:column="37"/></operator><name><name pos:line="24" pos:column="33">fs<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">-&gt;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="37">stack<pos:position pos:line="24" pos:column="42"/></name><index pos:line="24" pos:column="42">[<expr><name pos:line="24" pos:column="43">num<pos:position pos:line="24" pos:column="46"/></name></expr>]<pos:position pos:line="24" pos:column="47"/></index></name><operator pos:line="24" pos:column="47">.<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="48">eps_via_nodes<pos:position pos:line="24" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="63">eps_via_nodes<pos:position pos:line="24" pos:column="76"/></name></expr></argument>)<pos:position pos:line="24" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="78"/></expr_stmt>
  <return pos:line="25" pos:column="3">return <expr><name pos:line="25" pos:column="10">err<pos:position pos:line="25" pos:column="13"/></name></expr>;<pos:position pos:line="25" pos:column="14"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
