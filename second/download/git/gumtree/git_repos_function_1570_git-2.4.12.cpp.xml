<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1570_git-2.4.12.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">enum<pos:position pos:line="1" pos:column="5"/></name> <name pos:line="1" pos:column="6">scld_error<pos:position pos:line="1" pos:column="16"/></name></name></type> <name pos:line="1" pos:column="17">safe_create_leading_directories<pos:position pos:line="1" pos:column="48"/></name><parameter_list pos:line="1" pos:column="48">(<parameter><decl><type><name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">path<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">next_component<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name pos:line="3" pos:column="32">path<pos:position pos:line="3" pos:column="36"/></name> <operator pos:line="3" pos:column="37">+<pos:position pos:line="3" pos:column="38"/></operator> <call><name pos:line="3" pos:column="39">offset_1st_component<pos:position pos:line="3" pos:column="59"/></name><argument_list pos:line="3" pos:column="59">(<argument><expr><name pos:line="3" pos:column="60">path<pos:position pos:line="3" pos:column="64"/></name></expr></argument>)<pos:position pos:line="3" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="66"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">enum<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">scld_error<pos:position pos:line="4" pos:column="24"/></name></name></type> <name pos:line="4" pos:column="25">ret<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><name pos:line="4" pos:column="31">SCLD_OK<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><name pos:line="6" pos:column="16">ret<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">==<pos:position pos:line="6" pos:column="22"/></operator> <name pos:line="6" pos:column="23">SCLD_OK<pos:position pos:line="6" pos:column="30"/></name> <operator pos:line="6" pos:column="31">&amp;&amp;<pos:position pos:line="6" pos:column="41"/></operator> <name pos:line="6" pos:column="34">next_component<pos:position pos:line="6" pos:column="48"/></name></expr>)<pos:position pos:line="6" pos:column="49"/></condition> <block pos:line="6" pos:column="50">{
		<decl_stmt><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">stat<pos:position pos:line="7" pos:column="28"/></name></name></type> <name pos:line="7" pos:column="29">st<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">char<pos:position pos:line="8" pos:column="21"/></name> <modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type><name pos:line="8" pos:column="23">slash<pos:position pos:line="8" pos:column="28"/></name> <init pos:line="8" pos:column="29">= <expr><name pos:line="8" pos:column="31">next_component<pos:position pos:line="8" pos:column="45"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="47">slash_character<pos:position pos:line="8" pos:column="62"/></name></decl>;<pos:position pos:line="8" pos:column="63"/></decl_stmt>

		<while pos:line="10" pos:column="17">while <condition pos:line="10" pos:column="23">(<expr><operator pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">slash<pos:position pos:line="10" pos:column="30"/></name> <operator pos:line="10" pos:column="31">&amp;&amp;<pos:position pos:line="10" pos:column="41"/></operator> <operator pos:line="10" pos:column="34">!<pos:position pos:line="10" pos:column="35"/></operator><call><name pos:line="10" pos:column="35">is_dir_sep<pos:position pos:line="10" pos:column="45"/></name><argument_list pos:line="10" pos:column="45">(<argument><expr><operator pos:line="10" pos:column="46">*<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="47">slash<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="54"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="25">slash<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">++<pos:position pos:line="11" pos:column="32"/></operator></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt></block></while>

		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><operator pos:line="13" pos:column="22">*<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">slash<pos:position pos:line="13" pos:column="28"/></name></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29">
			<block type="pseudo"><break pos:line="14" pos:column="25">break;<pos:position pos:line="14" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><name pos:line="16" pos:column="17">next_component<pos:position pos:line="16" pos:column="31"/></name> <operator pos:line="16" pos:column="32">=<pos:position pos:line="16" pos:column="33"/></operator> <name pos:line="16" pos:column="34">slash<pos:position pos:line="16" pos:column="39"/></name> <operator pos:line="16" pos:column="40">+<pos:position pos:line="16" pos:column="41"/></operator> <literal type="number" pos:line="16" pos:column="42">1<pos:position pos:line="16" pos:column="43"/></literal></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
		<while pos:line="17" pos:column="17">while <condition pos:line="17" pos:column="23">(<expr><call><name pos:line="17" pos:column="24">is_dir_sep<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><operator pos:line="17" pos:column="35">*<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="36">next_component<pos:position pos:line="17" pos:column="50"/></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="52"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="25">next_component<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">++<pos:position pos:line="18" pos:column="41"/></operator></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt></block></while>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">!<pos:position pos:line="19" pos:column="22"/></operator><operator pos:line="19" pos:column="22">*<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">next_component<pos:position pos:line="19" pos:column="37"/></name></expr>)<pos:position pos:line="19" pos:column="38"/></condition><then pos:line="19" pos:column="38">
			<block type="pseudo"><break pos:line="20" pos:column="25">break;<pos:position pos:line="20" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><name pos:line="22" pos:column="17">slash_character<pos:position pos:line="22" pos:column="32"/></name> <operator pos:line="22" pos:column="33">=<pos:position pos:line="22" pos:column="34"/></operator> <operator pos:line="22" pos:column="35">*<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="36">slash<pos:position pos:line="22" pos:column="41"/></name></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="23" pos:column="17">*<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">slash<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <literal type="char" pos:line="23" pos:column="26">'\0'<pos:position pos:line="23" pos:column="30"/></literal></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><call><name pos:line="24" pos:column="22">stat<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">path<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="33">&amp;<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="34">st<pos:position pos:line="24" pos:column="36"/></name></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="38"/></condition><then pos:line="24" pos:column="38"> <block pos:line="24" pos:column="39">{
			<comment type="block" pos:line="25" pos:column="25">/* path exists */</comment>
			<if pos:line="26" pos:column="25">if <condition pos:line="26" pos:column="28">(<expr><operator pos:line="26" pos:column="29">!<pos:position pos:line="26" pos:column="30"/></operator><call><name pos:line="26" pos:column="30">S_ISDIR<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><name><name pos:line="26" pos:column="38">st<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">.<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="41">st_mode<pos:position pos:line="26" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="50"/></condition><then pos:line="26" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="33">ret<pos:position pos:line="27" pos:column="36"/></name> <operator pos:line="27" pos:column="37">=<pos:position pos:line="27" pos:column="38"/></operator> <name pos:line="27" pos:column="39">SCLD_EXISTS<pos:position pos:line="27" pos:column="50"/></name></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt></block></then></if>
		}<pos:position pos:line="28" pos:column="18"/></block></then> <elseif pos:line="28" pos:column="19">else <if pos:line="28" pos:column="24">if <condition pos:line="28" pos:column="27">(<expr><call><name pos:line="28" pos:column="28">mkdir<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">path<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="40">0777<pos:position pos:line="28" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="46"/></condition><then pos:line="28" pos:column="46"> <block pos:line="28" pos:column="47">{
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><name pos:line="29" pos:column="29">errno<pos:position pos:line="29" pos:column="34"/></name> <operator pos:line="29" pos:column="35">==<pos:position pos:line="29" pos:column="37"/></operator> <name pos:line="29" pos:column="38">EEXIST<pos:position pos:line="29" pos:column="44"/></name> <operator pos:line="29" pos:column="45">&amp;&amp;<pos:position pos:line="29" pos:column="55"/></operator>
			    <operator pos:line="30" pos:column="29">!<pos:position pos:line="30" pos:column="30"/></operator><call><name pos:line="30" pos:column="30">stat<pos:position pos:line="30" pos:column="34"/></name><argument_list pos:line="30" pos:column="34">(<argument><expr><name pos:line="30" pos:column="35">path<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="41">&amp;<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="42">st<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call> <operator pos:line="30" pos:column="46">&amp;&amp;<pos:position pos:line="30" pos:column="56"/></operator> <call><name pos:line="30" pos:column="49">S_ISDIR<pos:position pos:line="30" pos:column="56"/></name><argument_list pos:line="30" pos:column="56">(<argument><expr><name><name pos:line="30" pos:column="57">st<pos:position pos:line="30" pos:column="59"/></name><operator pos:line="30" pos:column="59">.<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="60">st_mode<pos:position pos:line="30" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="69"/></condition><then pos:line="30" pos:column="69">
				<block type="pseudo"><empty_stmt pos:line="31" pos:column="33">;<pos:position pos:line="31" pos:column="34"/></empty_stmt></block></then> <comment type="block" pos:line="31" pos:column="35">/* somebody created it since we checked */</comment>
			<elseif pos:line="32" pos:column="25">else <if pos:line="32" pos:column="30">if <condition pos:line="32" pos:column="33">(<expr><name pos:line="32" pos:column="34">errno<pos:position pos:line="32" pos:column="39"/></name> <operator pos:line="32" pos:column="40">==<pos:position pos:line="32" pos:column="42"/></operator> <name pos:line="32" pos:column="43">ENOENT<pos:position pos:line="32" pos:column="49"/></name></expr>)<pos:position pos:line="32" pos:column="50"/></condition><then pos:line="32" pos:column="50">
				<comment type="block" pos:line="33" pos:column="33">/*
				 * Either mkdir() failed because
				 * somebody just pruned the containing
				 * directory, or stat() failed because
				 * the file that was in our way was
				 * just removed.  Either way, inform
				 * the caller that it might be worth
				 * trying again:
				 */</comment>
				<block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="33">ret<pos:position pos:line="42" pos:column="36"/></name> <operator pos:line="42" pos:column="37">=<pos:position pos:line="42" pos:column="38"/></operator> <name pos:line="42" pos:column="39">SCLD_VANISHED<pos:position pos:line="42" pos:column="52"/></name></expr>;<pos:position pos:line="42" pos:column="53"/></expr_stmt></block></then></if></elseif>
			<else pos:line="43" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="33">ret<pos:position pos:line="44" pos:column="36"/></name> <operator pos:line="44" pos:column="37">=<pos:position pos:line="44" pos:column="38"/></operator> <name pos:line="44" pos:column="39">SCLD_FAILED<pos:position pos:line="44" pos:column="50"/></name></expr>;<pos:position pos:line="44" pos:column="51"/></expr_stmt></block></else></if>
		}<pos:position pos:line="45" pos:column="18"/></block></then></if></elseif> <elseif pos:line="45" pos:column="19">else <if pos:line="45" pos:column="24">if <condition pos:line="45" pos:column="27">(<expr><call><name pos:line="45" pos:column="28">adjust_shared_perm<pos:position pos:line="45" pos:column="46"/></name><argument_list pos:line="45" pos:column="46">(<argument><expr><name pos:line="45" pos:column="47">path<pos:position pos:line="45" pos:column="51"/></name></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="53"/></condition><then pos:line="45" pos:column="53"> <block pos:line="45" pos:column="54">{
			<expr_stmt><expr><name pos:line="46" pos:column="25">ret<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">=<pos:position pos:line="46" pos:column="30"/></operator> <name pos:line="46" pos:column="31">SCLD_PERMS<pos:position pos:line="46" pos:column="41"/></name></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if></elseif></if>
		<expr_stmt><expr><operator pos:line="48" pos:column="17">*<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="18">slash<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">=<pos:position pos:line="48" pos:column="25"/></operator> <name pos:line="48" pos:column="26">slash_character<pos:position pos:line="48" pos:column="41"/></name></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></while>
	<return pos:line="50" pos:column="9">return <expr><name pos:line="50" pos:column="16">ret<pos:position pos:line="50" pos:column="19"/></name></expr>;<pos:position pos:line="50" pos:column="20"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
