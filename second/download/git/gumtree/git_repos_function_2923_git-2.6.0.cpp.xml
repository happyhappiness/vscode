<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2923_git-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_one_conflict<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">i<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">type<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name><name pos:line="3" pos:column="15">struct<pos:position pos:line="3" pos:column="21"/></name> <name pos:line="3" pos:column="22">cache_entry<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">e<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><name><name pos:line="3" pos:column="39">active_cache<pos:position pos:line="3" pos:column="51"/></name><index pos:line="3" pos:column="51">[<expr><name pos:line="3" pos:column="52">i<pos:position pos:line="3" pos:column="53"/></name></expr>]<pos:position pos:line="3" pos:column="54"/></index></name></expr></init></decl>;<pos:position pos:line="3" pos:column="55"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><call><name pos:line="5" pos:column="14">ce_stage<pos:position pos:line="5" pos:column="22"/></name><argument_list pos:line="5" pos:column="22">(<argument><expr><name pos:line="5" pos:column="23">e<pos:position pos:line="5" pos:column="24"/></name></expr></argument>)<pos:position pos:line="5" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="26"/></condition><then pos:line="5" pos:column="26"> <block pos:line="5" pos:column="27">{
		<expr_stmt><expr><operator pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">type<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">=<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="25">RESOLVED<pos:position pos:line="6" pos:column="33"/></name></expr>;<pos:position pos:line="6" pos:column="34"/></expr_stmt>
		<return pos:line="7" pos:column="17">return <expr><name pos:line="7" pos:column="24">i<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">+<pos:position pos:line="7" pos:column="27"/></operator> <literal type="number" pos:line="7" pos:column="28">1<pos:position pos:line="7" pos:column="29"/></literal></expr>;<pos:position pos:line="7" pos:column="30"/></return>
	}<pos:position pos:line="8" pos:column="10"/></block></then></if>

	<expr_stmt><expr><operator pos:line="10" pos:column="9">*<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">type<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">PUNTED<pos:position pos:line="10" pos:column="23"/></name></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">ce_stage<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">e<pos:position pos:line="11" pos:column="23"/></name></expr></argument>)<pos:position pos:line="11" pos:column="24"/></argument_list></call> <operator pos:line="11" pos:column="25">==<pos:position pos:line="11" pos:column="27"/></operator> <literal type="number" pos:line="11" pos:column="28">1<pos:position pos:line="11" pos:column="29"/></literal></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30"> <block pos:line="11" pos:column="31">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">active_nr<pos:position pos:line="12" pos:column="30"/></name> <operator pos:line="12" pos:column="31">&lt;=<pos:position pos:line="12" pos:column="36"/></operator> <operator pos:line="12" pos:column="34">++<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="36">i<pos:position pos:line="12" pos:column="37"/></name></expr>)<pos:position pos:line="12" pos:column="38"/></condition><then pos:line="12" pos:column="38">
			<block type="pseudo"><return pos:line="13" pos:column="25">return <expr><name pos:line="13" pos:column="32">i<pos:position pos:line="13" pos:column="33"/></name> <operator pos:line="13" pos:column="34">+<pos:position pos:line="13" pos:column="35"/></operator> <literal type="number" pos:line="13" pos:column="36">1<pos:position pos:line="13" pos:column="37"/></literal></expr>;<pos:position pos:line="13" pos:column="38"/></return></block></then></if>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="16" pos:column="9">/* Only handle regular files with both stages #2 and #3 */</comment>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">i<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">+<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">1<pos:position pos:line="17" pos:column="18"/></literal> <operator pos:line="17" pos:column="19">&lt;<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="21">active_nr<pos:position pos:line="17" pos:column="30"/></name></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31"> <block pos:line="17" pos:column="32">{
		<decl_stmt><decl><type><specifier pos:line="18" pos:column="17">const<pos:position pos:line="18" pos:column="22"/></specifier> <name><name pos:line="18" pos:column="23">struct<pos:position pos:line="18" pos:column="29"/></name> <name pos:line="18" pos:column="30">cache_entry<pos:position pos:line="18" pos:column="41"/></name></name> <modifier pos:line="18" pos:column="42">*<pos:position pos:line="18" pos:column="43"/></modifier></type><name pos:line="18" pos:column="43">e2<pos:position pos:line="18" pos:column="45"/></name> <init pos:line="18" pos:column="46">= <expr><name><name pos:line="18" pos:column="48">active_cache<pos:position pos:line="18" pos:column="60"/></name><index pos:line="18" pos:column="60">[<expr><name pos:line="18" pos:column="61">i<pos:position pos:line="18" pos:column="62"/></name></expr>]<pos:position pos:line="18" pos:column="63"/></index></name></expr></init></decl>;<pos:position pos:line="18" pos:column="64"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="19" pos:column="17">const<pos:position pos:line="19" pos:column="22"/></specifier> <name><name pos:line="19" pos:column="23">struct<pos:position pos:line="19" pos:column="29"/></name> <name pos:line="19" pos:column="30">cache_entry<pos:position pos:line="19" pos:column="41"/></name></name> <modifier pos:line="19" pos:column="42">*<pos:position pos:line="19" pos:column="43"/></modifier></type><name pos:line="19" pos:column="43">e3<pos:position pos:line="19" pos:column="45"/></name> <init pos:line="19" pos:column="46">= <expr><name><name pos:line="19" pos:column="48">active_cache<pos:position pos:line="19" pos:column="60"/></name><index pos:line="19" pos:column="60">[<expr><name pos:line="19" pos:column="61">i<pos:position pos:line="19" pos:column="62"/></name> <operator pos:line="19" pos:column="63">+<pos:position pos:line="19" pos:column="64"/></operator> <literal type="number" pos:line="19" pos:column="65">1<pos:position pos:line="19" pos:column="66"/></literal></expr>]<pos:position pos:line="19" pos:column="67"/></index></name></expr></init></decl>;<pos:position pos:line="19" pos:column="68"/></decl_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">ce_stage<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">e2<pos:position pos:line="20" pos:column="32"/></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call> <operator pos:line="20" pos:column="34">==<pos:position pos:line="20" pos:column="36"/></operator> <literal type="number" pos:line="20" pos:column="37">2<pos:position pos:line="20" pos:column="38"/></literal> <operator pos:line="20" pos:column="39">&amp;&amp;<pos:position pos:line="20" pos:column="49"/></operator>
		    <call><name pos:line="21" pos:column="21">ce_stage<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">e3<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call> <operator pos:line="21" pos:column="34">==<pos:position pos:line="21" pos:column="36"/></operator> <literal type="number" pos:line="21" pos:column="37">3<pos:position pos:line="21" pos:column="38"/></literal> <operator pos:line="21" pos:column="39">&amp;&amp;<pos:position pos:line="21" pos:column="49"/></operator>
		    <call><name pos:line="22" pos:column="21">ce_same_name<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">e<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="37">e3<pos:position pos:line="22" pos:column="39"/></name></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call> <operator pos:line="22" pos:column="41">&amp;&amp;<pos:position pos:line="22" pos:column="51"/></operator>
		    <call><name pos:line="23" pos:column="21">S_ISREG<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name><name pos:line="23" pos:column="29">e2<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">-&gt;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="33">ce_mode<pos:position pos:line="23" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call> <operator pos:line="23" pos:column="42">&amp;&amp;<pos:position pos:line="23" pos:column="52"/></operator>
		    <call><name pos:line="24" pos:column="21">S_ISREG<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><name><name pos:line="24" pos:column="29">e3<pos:position pos:line="24" pos:column="31"/></name><operator pos:line="24" pos:column="31">-&gt;<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="33">ce_mode<pos:position pos:line="24" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="25" pos:column="25">*<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="26">type<pos:position pos:line="25" pos:column="30"/></name> <operator pos:line="25" pos:column="31">=<pos:position pos:line="25" pos:column="32"/></operator> <name pos:line="25" pos:column="33">THREE_STAGED<pos:position pos:line="25" pos:column="45"/></name></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="28" pos:column="9">/* Skip the entries with the same name */</comment>
	<while pos:line="29" pos:column="9">while <condition pos:line="29" pos:column="15">(<expr><name pos:line="29" pos:column="16">i<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">&lt;<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="20">active_nr<pos:position pos:line="29" pos:column="29"/></name> <operator pos:line="29" pos:column="30">&amp;&amp;<pos:position pos:line="29" pos:column="40"/></operator> <call><name pos:line="29" pos:column="33">ce_same_name<pos:position pos:line="29" pos:column="45"/></name><argument_list pos:line="29" pos:column="45">(<argument><expr><name pos:line="29" pos:column="46">e<pos:position pos:line="29" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="49">active_cache<pos:position pos:line="29" pos:column="61"/></name><index pos:line="29" pos:column="61">[<expr><name pos:line="29" pos:column="62">i<pos:position pos:line="29" pos:column="63"/></name></expr>]<pos:position pos:line="29" pos:column="64"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="66"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="17">i<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">++<pos:position pos:line="30" pos:column="20"/></operator></expr>;<pos:position pos:line="30" pos:column="21"/></expr_stmt></block></while>
	<return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">i<pos:position pos:line="31" pos:column="17"/></name></expr>;<pos:position pos:line="31" pos:column="18"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
