<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3126_git-2.4.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">match_entry<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">pathspec_item<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">item<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
		       <parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">name_entry<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">entry<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">int<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">pathlen<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>,
		       <parameter><decl><type><specifier pos:line="3" pos:column="24">const<pos:position pos:line="3" pos:column="29"/></specifier> <name pos:line="3" pos:column="30">char<pos:position pos:line="3" pos:column="34"/></name> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier></type><name pos:line="3" pos:column="36">match<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="43">int<pos:position pos:line="3" pos:column="46"/></name></type> <name pos:line="3" pos:column="47">matchlen<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>,
		       <parameter><decl><type><name><name pos:line="4" pos:column="24">enum<pos:position pos:line="4" pos:column="28"/></name> <name pos:line="4" pos:column="29">interesting<pos:position pos:line="4" pos:column="40"/></name></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier></type><name pos:line="4" pos:column="42">never_interesting<pos:position pos:line="4" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="60"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">m<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><operator pos:line="6" pos:column="17">-<pos:position pos:line="6" pos:column="18"/></operator><literal type="number" pos:line="6" pos:column="18">1<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt> <comment type="block" pos:line="6" pos:column="21">/* signals that we haven't called strncmp() */</comment>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">item<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">magic<pos:position pos:line="8" pos:column="24"/></name></name> <operator pos:line="8" pos:column="25">&amp;<pos:position pos:line="8" pos:column="30"/></operator> <name pos:line="8" pos:column="27">PATHSPEC_ICASE<pos:position pos:line="8" pos:column="41"/></name></expr>)<pos:position pos:line="8" pos:column="42"/></condition><then pos:line="8" pos:column="42">
		<comment type="block" pos:line="9" pos:column="17">/*
		 * "Never interesting" trick requires exact
		 * matching. We could do something clever with inexact
		 * matching, but it's trickier (and not to forget that
		 * strcasecmp is locale-dependent, at least in
		 * glibc). Just disable it for now. It can't be worse
		 * than the wildcard's codepath of '[Tt][Hi][Is][Ss]'
		 * pattern.
		 */</comment>
		<block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="17">*<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">never_interesting<pos:position pos:line="18" pos:column="35"/></name> <operator pos:line="18" pos:column="36">=<pos:position pos:line="18" pos:column="37"/></operator> <name pos:line="18" pos:column="38">entry_not_interesting<pos:position pos:line="18" pos:column="59"/></name></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt></block></then>
	<elseif pos:line="19" pos:column="9">else <if pos:line="19" pos:column="14">if <condition pos:line="19" pos:column="17">(<expr><operator pos:line="19" pos:column="18">*<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">never_interesting<pos:position pos:line="19" pos:column="36"/></name> <operator pos:line="19" pos:column="37">!=<pos:position pos:line="19" pos:column="39"/></operator> <name pos:line="19" pos:column="40">entry_not_interesting<pos:position pos:line="19" pos:column="61"/></name></expr>)<pos:position pos:line="19" pos:column="62"/></condition><then pos:line="19" pos:column="62"> <block pos:line="19" pos:column="63">{
		<comment type="block" pos:line="20" pos:column="17">/*
		 * We have not seen any match that sorts later
		 * than the current path.
		 */</comment>

		<comment type="block" pos:line="25" pos:column="17">/*
		 * Does match sort strictly earlier than path
		 * with their common parts?
		 */</comment>
		<expr_stmt><expr><name pos:line="29" pos:column="17">m<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <call><name pos:line="29" pos:column="21">strncmp<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">match<pos:position pos:line="29" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="36">entry<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">-&gt;<pos:position pos:line="29" pos:column="46"/></operator><name pos:line="29" pos:column="43">path<pos:position pos:line="29" pos:column="47"/></name></name></expr></argument>,
			    <argument><expr><ternary><condition><expr><operator pos:line="30" pos:column="29">(<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="30">matchlen<pos:position pos:line="30" pos:column="38"/></name> <operator pos:line="30" pos:column="39">&lt;<pos:position pos:line="30" pos:column="43"/></operator> <name pos:line="30" pos:column="41">pathlen<pos:position pos:line="30" pos:column="48"/></name><operator pos:line="30" pos:column="48">)<pos:position pos:line="30" pos:column="49"/></operator></expr> ?<pos:position pos:line="30" pos:column="51"/></condition><then pos:line="30" pos:column="51"> <expr><name pos:line="30" pos:column="52">matchlen<pos:position pos:line="30" pos:column="60"/></name></expr> <pos:position pos:line="30" pos:column="61"/></then><else pos:line="30" pos:column="61">: <expr><name pos:line="30" pos:column="63">pathlen<pos:position pos:line="30" pos:column="70"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="72"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">m<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&lt;<pos:position pos:line="31" pos:column="27"/></operator> <literal type="number" pos:line="31" pos:column="25">0<pos:position pos:line="31" pos:column="26"/></literal></expr>)<pos:position pos:line="31" pos:column="27"/></condition><then pos:line="31" pos:column="27">
			<block type="pseudo"><return pos:line="32" pos:column="25">return <expr><literal type="number" pos:line="32" pos:column="32">0<pos:position pos:line="32" pos:column="33"/></literal></expr>;<pos:position pos:line="32" pos:column="34"/></return></block></then></if>

		<comment type="block" pos:line="34" pos:column="17">/*
		 * If we come here even once, that means there is at
		 * least one pathspec that would sort equal to or
		 * later than the path we are currently looking at.
		 * In other words, if we have never reached this point
		 * after iterating all pathspecs, it means all
		 * pathspecs are either outside of base, or inside the
		 * base but sorts strictly earlier than the current
		 * one.  In either case, they will never match the
		 * subsequent entries.  In such a case, we initialized
		 * the variable to -1 and that is what will be
		 * returned, allowing the caller to terminate early.
		 */</comment>
		<expr_stmt><expr><operator pos:line="47" pos:column="17">*<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">never_interesting<pos:position pos:line="47" pos:column="35"/></name> <operator pos:line="47" pos:column="36">=<pos:position pos:line="47" pos:column="37"/></operator> <name pos:line="47" pos:column="38">entry_not_interesting<pos:position pos:line="47" pos:column="59"/></name></expr>;<pos:position pos:line="47" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if></elseif></if>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">pathlen<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">&gt;<pos:position pos:line="50" pos:column="25"/></operator> <name pos:line="50" pos:column="23">matchlen<pos:position pos:line="50" pos:column="31"/></name></expr>)<pos:position pos:line="50" pos:column="32"/></condition><then pos:line="50" pos:column="32">
		<block type="pseudo"><return pos:line="51" pos:column="17">return <expr><literal type="number" pos:line="51" pos:column="24">0<pos:position pos:line="51" pos:column="25"/></literal></expr>;<pos:position pos:line="51" pos:column="26"/></return></block></then></if>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">matchlen<pos:position pos:line="53" pos:column="21"/></name> <operator pos:line="53" pos:column="22">&gt;<pos:position pos:line="53" pos:column="26"/></operator> <name pos:line="53" pos:column="24">pathlen<pos:position pos:line="53" pos:column="31"/></name></expr>)<pos:position pos:line="53" pos:column="32"/></condition><then pos:line="53" pos:column="32"> <block pos:line="53" pos:column="33">{
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name><name pos:line="54" pos:column="21">match<pos:position pos:line="54" pos:column="26"/></name><index pos:line="54" pos:column="26">[<expr><name pos:line="54" pos:column="27">pathlen<pos:position pos:line="54" pos:column="34"/></name></expr>]<pos:position pos:line="54" pos:column="35"/></index></name> <operator pos:line="54" pos:column="36">!=<pos:position pos:line="54" pos:column="38"/></operator> <literal type="char" pos:line="54" pos:column="39">'/'<pos:position pos:line="54" pos:column="42"/></literal></expr>)<pos:position pos:line="54" pos:column="43"/></condition><then pos:line="54" pos:column="43">
			<block type="pseudo"><return pos:line="55" pos:column="25">return <expr><literal type="number" pos:line="55" pos:column="32">0<pos:position pos:line="55" pos:column="33"/></literal></expr>;<pos:position pos:line="55" pos:column="34"/></return></block></then></if>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><operator pos:line="56" pos:column="21">!<pos:position pos:line="56" pos:column="22"/></operator><call><name pos:line="56" pos:column="22">S_ISDIR<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name><name pos:line="56" pos:column="30">entry<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">-&gt;<pos:position pos:line="56" pos:column="40"/></operator><name pos:line="56" pos:column="37">mode<pos:position pos:line="56" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="42"/></argument_list></call> <operator pos:line="56" pos:column="43">&amp;&amp;<pos:position pos:line="56" pos:column="53"/></operator> <operator pos:line="56" pos:column="46">!<pos:position pos:line="56" pos:column="47"/></operator><call><name pos:line="56" pos:column="47">S_ISGITLINK<pos:position pos:line="56" pos:column="58"/></name><argument_list pos:line="56" pos:column="58">(<argument><expr><name><name pos:line="56" pos:column="59">entry<pos:position pos:line="56" pos:column="64"/></name><operator pos:line="56" pos:column="64">-&gt;<pos:position pos:line="56" pos:column="69"/></operator><name pos:line="56" pos:column="66">mode<pos:position pos:line="56" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="72"/></condition><then pos:line="56" pos:column="72">
			<block type="pseudo"><return pos:line="57" pos:column="25">return <expr><literal type="number" pos:line="57" pos:column="32">0<pos:position pos:line="57" pos:column="33"/></literal></expr>;<pos:position pos:line="57" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="58" pos:column="10"/></block></then></if>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">m<pos:position pos:line="60" pos:column="14"/></name> <operator pos:line="60" pos:column="15">==<pos:position pos:line="60" pos:column="17"/></operator> <operator pos:line="60" pos:column="18">-<pos:position pos:line="60" pos:column="19"/></operator><literal type="number" pos:line="60" pos:column="19">1<pos:position pos:line="60" pos:column="20"/></literal></expr>)<pos:position pos:line="60" pos:column="21"/></condition><then pos:line="60" pos:column="21">
		<comment type="block" pos:line="61" pos:column="17">/*
		 * we cheated and did not do strncmp(), so we do
		 * that here.
		 */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="17">m<pos:position pos:line="65" pos:column="18"/></name> <operator pos:line="65" pos:column="19">=<pos:position pos:line="65" pos:column="20"/></operator> <call><name pos:line="65" pos:column="21">ps_strncmp<pos:position pos:line="65" pos:column="31"/></name><argument_list pos:line="65" pos:column="31">(<argument><expr><name pos:line="65" pos:column="32">item<pos:position pos:line="65" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="38">match<pos:position pos:line="65" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="45">entry<pos:position pos:line="65" pos:column="50"/></name><operator pos:line="65" pos:column="50">-&gt;<pos:position pos:line="65" pos:column="55"/></operator><name pos:line="65" pos:column="52">path<pos:position pos:line="65" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="58">pathlen<pos:position pos:line="65" pos:column="65"/></name></expr></argument>)<pos:position pos:line="65" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="67"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="67" pos:column="9">/*
	 * If common part matched earlier then it is a hit,
	 * because we rejected the case where path is not a
	 * leading directory and is shorter than match.
	 */</comment>
	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><operator pos:line="72" pos:column="13">!<pos:position pos:line="72" pos:column="14"/></operator><name pos:line="72" pos:column="14">m<pos:position pos:line="72" pos:column="15"/></name></expr>)<pos:position pos:line="72" pos:column="16"/></condition><then pos:line="72" pos:column="16">
		<comment type="block" pos:line="73" pos:column="17">/*
		 * match_entry does not check if the prefix part is
		 * matched case-sensitively. If the entry is a
		 * directory and part of prefix, it'll be rematched
		 * eventually by basecmp with special treatment for
		 * the prefix.
		 */</comment>
		<block type="pseudo"><return pos:line="80" pos:column="17">return <expr><literal type="number" pos:line="80" pos:column="24">1<pos:position pos:line="80" pos:column="25"/></literal></expr>;<pos:position pos:line="80" pos:column="26"/></return></block></then></if>

	<return pos:line="82" pos:column="9">return <expr><literal type="number" pos:line="82" pos:column="16">0<pos:position pos:line="82" pos:column="17"/></literal></expr>;<pos:position pos:line="82" pos:column="18"/></return>
}<pos:position pos:line="83" pos:column="2"/></block></function></unit>
