<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4886_git-2.13.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_pull<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name pos:line="1" pos:column="14">int<pos:position pos:line="1" pos:column="17"/></name></type> <name pos:line="1" pos:column="18">argc<pos:position pos:line="1" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier><modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">argv<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">prefix<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">repo<pos:position pos:line="3" pos:column="25"/></name></decl>, <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier><modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="29">refspecs<pos:position pos:line="3" pos:column="37"/></name></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">oid_array<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">merge_heads<pos:position pos:line="4" pos:column="37"/></name> <init pos:line="4" pos:column="38">= <expr><name pos:line="4" pos:column="40">OID_ARRAY_INIT<pos:position pos:line="4" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="55"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">object_id<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">orig_head<pos:position pos:line="5" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="37">curr_head<pos:position pos:line="5" pos:column="46"/></name></decl>;<pos:position pos:line="5" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object_id<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">rebase_fork_point<pos:position pos:line="6" pos:column="43"/></name></decl>;<pos:position pos:line="6" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">autostash<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">getenv<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><literal type="string" pos:line="9" pos:column="21">"GIT_REFLOG_ACTION"<pos:position pos:line="9" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="42"/></condition><then pos:line="9" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">set_reflog_message<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><name pos:line="10" pos:column="36">argc<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="42">argv<pos:position pos:line="10" pos:column="46"/></name></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="12" pos:column="9">argc<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <call><name pos:line="12" pos:column="16">parse_options<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">argc<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="36">argv<pos:position pos:line="12" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="42">prefix<pos:position pos:line="12" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">pull_options<pos:position pos:line="12" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="64">pull_usage<pos:position pos:line="12" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="76">0<pos:position pos:line="12" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="79"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">parse_repo_refspecs<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">argc<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="35">argv<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="41">&amp;<pos:position pos:line="14" pos:column="46"/></operator><name pos:line="14" pos:column="42">repo<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="48">&amp;<pos:position pos:line="14" pos:column="53"/></operator><name pos:line="14" pos:column="49">refspecs<pos:position pos:line="14" pos:column="57"/></name></expr></argument>)<pos:position pos:line="14" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="59"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">opt_ff<pos:position pos:line="16" pos:column="20"/></name></expr>)<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">opt_ff<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <call><name pos:line="17" pos:column="26">xstrdup_or_null<pos:position pos:line="17" pos:column="41"/></name><argument_list pos:line="17" pos:column="41">(<argument><expr><call><name pos:line="17" pos:column="42">config_get_ff<pos:position pos:line="17" pos:column="55"/></name><argument_list pos:line="17" pos:column="55">()<pos:position pos:line="17" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></expr_stmt></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">opt_rebase<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">&lt;<pos:position pos:line="19" pos:column="28"/></operator> <literal type="number" pos:line="19" pos:column="26">0<pos:position pos:line="19" pos:column="27"/></literal></expr>)<pos:position pos:line="19" pos:column="28"/></condition><then pos:line="19" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="17">opt_rebase<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">=<pos:position pos:line="20" pos:column="29"/></operator> <call><name pos:line="20" pos:column="30">config_get_rebase<pos:position pos:line="20" pos:column="47"/></name><argument_list pos:line="20" pos:column="47">()<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">git_config<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">git_pull_config<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="37">NULL<pos:position pos:line="22" pos:column="41"/></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">read_cache_unmerged<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">()<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="35"/></condition><then pos:line="24" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="17">die_resolve_conflict<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><literal type="string" pos:line="25" pos:column="38">"pull"<pos:position pos:line="25" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt></block></then></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><call><name pos:line="27" pos:column="13">file_exists<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><call><name pos:line="27" pos:column="25">git_path_merge_head<pos:position pos:line="27" pos:column="44"/></name><argument_list pos:line="27" pos:column="44">()<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="48"/></condition><then pos:line="27" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">die_conclude_merge<pos:position pos:line="28" pos:column="35"/></name><argument_list pos:line="28" pos:column="35">()<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt></block></then></if>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">get_oid<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><literal type="string" pos:line="30" pos:column="21">"HEAD"<pos:position pos:line="30" pos:column="27"/></literal></expr></argument>, <argument><expr><operator pos:line="30" pos:column="29">&amp;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="30">orig_head<pos:position pos:line="30" pos:column="39"/></name></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="41"/></condition><then pos:line="30" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">oidclr<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><operator pos:line="31" pos:column="24">&amp;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="25">orig_head<pos:position pos:line="31" pos:column="34"/></name></expr></argument>)<pos:position pos:line="31" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt></block></then></if>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">opt_rebase<pos:position pos:line="33" pos:column="24"/></name> <operator pos:line="33" pos:column="25">&amp;&amp;<pos:position pos:line="33" pos:column="35"/></operator> <name pos:line="33" pos:column="28">opt_autostash<pos:position pos:line="33" pos:column="41"/></name> <operator pos:line="33" pos:column="42">!=<pos:position pos:line="33" pos:column="44"/></operator> <operator pos:line="33" pos:column="45">-<pos:position pos:line="33" pos:column="46"/></operator><literal type="number" pos:line="33" pos:column="46">1<pos:position pos:line="33" pos:column="47"/></literal></expr>)<pos:position pos:line="33" pos:column="48"/></condition><then pos:line="33" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="17">die<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><call><name pos:line="34" pos:column="21">_<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><literal type="string" pos:line="34" pos:column="23">"--[no-]autostash option is only valid with --rebase."<pos:position pos:line="34" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="80"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="36" pos:column="9">autostash<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <name pos:line="36" pos:column="21">config_autostash<pos:position pos:line="36" pos:column="37"/></name></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">opt_rebase<pos:position pos:line="37" pos:column="23"/></name></expr>)<pos:position pos:line="37" pos:column="24"/></condition><then pos:line="37" pos:column="24"> <block pos:line="37" pos:column="25">{
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">opt_autostash<pos:position pos:line="38" pos:column="34"/></name> <operator pos:line="38" pos:column="35">!=<pos:position pos:line="38" pos:column="37"/></operator> <operator pos:line="38" pos:column="38">-<pos:position pos:line="38" pos:column="39"/></operator><literal type="number" pos:line="38" pos:column="39">1<pos:position pos:line="38" pos:column="40"/></literal></expr>)<pos:position pos:line="38" pos:column="41"/></condition><then pos:line="38" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="25">autostash<pos:position pos:line="39" pos:column="34"/></name> <operator pos:line="39" pos:column="35">=<pos:position pos:line="39" pos:column="36"/></operator> <name pos:line="39" pos:column="37">opt_autostash<pos:position pos:line="39" pos:column="50"/></name></expr>;<pos:position pos:line="39" pos:column="51"/></expr_stmt></block></then></if>

		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><call><name pos:line="41" pos:column="21">is_null_oid<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><operator pos:line="41" pos:column="33">&amp;<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="34">orig_head<pos:position pos:line="41" pos:column="43"/></name></expr></argument>)<pos:position pos:line="41" pos:column="44"/></argument_list></call> <operator pos:line="41" pos:column="45">&amp;&amp;<pos:position pos:line="41" pos:column="55"/></operator> <operator pos:line="41" pos:column="48">!<pos:position pos:line="41" pos:column="49"/></operator><call><name pos:line="41" pos:column="49">is_cache_unborn<pos:position pos:line="41" pos:column="64"/></name><argument_list pos:line="41" pos:column="64">()<pos:position pos:line="41" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="67"/></condition><then pos:line="41" pos:column="67">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">die<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><call><name pos:line="42" pos:column="29">_<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><literal type="string" pos:line="42" pos:column="31">"Updating an unborn branch with changes added to the index."<pos:position pos:line="42" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="94"/></expr_stmt></block></then></if>

		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><operator pos:line="44" pos:column="21">!<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">autostash<pos:position pos:line="44" pos:column="31"/></name></expr>)<pos:position pos:line="44" pos:column="32"/></condition><then pos:line="44" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">require_clean_work_tree<pos:position pos:line="45" pos:column="48"/></name><argument_list pos:line="45" pos:column="48">(<argument><expr><call><name pos:line="45" pos:column="49">N_<pos:position pos:line="45" pos:column="51"/></name><argument_list pos:line="45" pos:column="51">(<argument><expr><literal type="string" pos:line="45" pos:column="52">"pull with rebase"<pos:position pos:line="45" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="71"/></argument_list></call></expr></argument>,
				<argument><expr><call><name pos:line="46" pos:column="33">_<pos:position pos:line="46" pos:column="34"/></name><argument_list pos:line="46" pos:column="34">(<argument><expr><literal type="string" pos:line="46" pos:column="35">"please commit or stash them."<pos:position pos:line="46" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="68">1<pos:position pos:line="46" pos:column="69"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="71">0<pos:position pos:line="46" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="74"/></expr_stmt></block></then></if>

		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><call><name pos:line="48" pos:column="21">get_rebase_fork_point<pos:position pos:line="48" pos:column="42"/></name><argument_list pos:line="48" pos:column="42">(<argument><expr><operator pos:line="48" pos:column="43">&amp;<pos:position pos:line="48" pos:column="48"/></operator><name pos:line="48" pos:column="44">rebase_fork_point<pos:position pos:line="48" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="63">repo<pos:position pos:line="48" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="69">*<pos:position pos:line="48" pos:column="70"/></operator><name pos:line="48" pos:column="70">refspecs<pos:position pos:line="48" pos:column="78"/></name></expr></argument>)<pos:position pos:line="48" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="80"/></condition><then pos:line="48" pos:column="80">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="25">oidclr<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><operator pos:line="49" pos:column="32">&amp;<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="33">rebase_fork_point<pos:position pos:line="49" pos:column="50"/></name></expr></argument>)<pos:position pos:line="49" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="52"/></expr_stmt></block></then></if>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">run_fetch<pos:position pos:line="52" pos:column="22"/></name><argument_list pos:line="52" pos:column="22">(<argument><expr><name pos:line="52" pos:column="23">repo<pos:position pos:line="52" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="29">refspecs<pos:position pos:line="52" pos:column="37"/></name></expr></argument>)<pos:position pos:line="52" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="39"/></condition><then pos:line="52" pos:column="39">
		<block type="pseudo"><return pos:line="53" pos:column="17">return <expr><literal type="number" pos:line="53" pos:column="24">1<pos:position pos:line="53" pos:column="25"/></literal></expr>;<pos:position pos:line="53" pos:column="26"/></return></block></then></if>

	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">opt_dry_run<pos:position pos:line="55" pos:column="24"/></name></expr>)<pos:position pos:line="55" pos:column="25"/></condition><then pos:line="55" pos:column="25">
		<block type="pseudo"><return pos:line="56" pos:column="17">return <expr><literal type="number" pos:line="56" pos:column="24">0<pos:position pos:line="56" pos:column="25"/></literal></expr>;<pos:position pos:line="56" pos:column="26"/></return></block></then></if>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><call><name pos:line="58" pos:column="13">get_oid<pos:position pos:line="58" pos:column="20"/></name><argument_list pos:line="58" pos:column="20">(<argument><expr><literal type="string" pos:line="58" pos:column="21">"HEAD"<pos:position pos:line="58" pos:column="27"/></literal></expr></argument>, <argument><expr><operator pos:line="58" pos:column="29">&amp;<pos:position pos:line="58" pos:column="34"/></operator><name pos:line="58" pos:column="30">curr_head<pos:position pos:line="58" pos:column="39"/></name></expr></argument>)<pos:position pos:line="58" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="41"/></condition><then pos:line="58" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">oidclr<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">(<argument><expr><operator pos:line="59" pos:column="24">&amp;<pos:position pos:line="59" pos:column="29"/></operator><name pos:line="59" pos:column="25">curr_head<pos:position pos:line="59" pos:column="34"/></name></expr></argument>)<pos:position pos:line="59" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="36"/></expr_stmt></block></then></if>

	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><operator pos:line="61" pos:column="13">!<pos:position pos:line="61" pos:column="14"/></operator><call><name pos:line="61" pos:column="14">is_null_oid<pos:position pos:line="61" pos:column="25"/></name><argument_list pos:line="61" pos:column="25">(<argument><expr><operator pos:line="61" pos:column="26">&amp;<pos:position pos:line="61" pos:column="31"/></operator><name pos:line="61" pos:column="27">orig_head<pos:position pos:line="61" pos:column="36"/></name></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call> <operator pos:line="61" pos:column="38">&amp;&amp;<pos:position pos:line="61" pos:column="48"/></operator> <operator pos:line="61" pos:column="41">!<pos:position pos:line="61" pos:column="42"/></operator><call><name pos:line="61" pos:column="42">is_null_oid<pos:position pos:line="61" pos:column="53"/></name><argument_list pos:line="61" pos:column="53">(<argument><expr><operator pos:line="61" pos:column="54">&amp;<pos:position pos:line="61" pos:column="59"/></operator><name pos:line="61" pos:column="55">curr_head<pos:position pos:line="61" pos:column="64"/></name></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></call> <operator pos:line="61" pos:column="66">&amp;&amp;<pos:position pos:line="61" pos:column="76"/></operator>
			<call><name pos:line="62" pos:column="25">oidcmp<pos:position pos:line="62" pos:column="31"/></name><argument_list pos:line="62" pos:column="31">(<argument><expr><operator pos:line="62" pos:column="32">&amp;<pos:position pos:line="62" pos:column="37"/></operator><name pos:line="62" pos:column="33">orig_head<pos:position pos:line="62" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="44">&amp;<pos:position pos:line="62" pos:column="49"/></operator><name pos:line="62" pos:column="45">curr_head<pos:position pos:line="62" pos:column="54"/></name></expr></argument>)<pos:position pos:line="62" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="56"/></condition><then pos:line="62" pos:column="56"> <block pos:line="62" pos:column="57">{
		<comment type="block" pos:line="63" pos:column="17">/*
		 * The fetch involved updating the current branch.
		 *
		 * The working tree and the index file are still based on
		 * orig_head commit, but we are merging into curr_head.
		 * Update the working tree to match curr_head.
		 */</comment>

		<expr_stmt><expr><call><name pos:line="71" pos:column="17">warning<pos:position pos:line="71" pos:column="24"/></name><argument_list pos:line="71" pos:column="24">(<argument><expr><call><name pos:line="71" pos:column="25">_<pos:position pos:line="71" pos:column="26"/></name><argument_list pos:line="71" pos:column="26">(<argument><expr><literal type="string" pos:line="71" pos:column="27">"fetch updated the current branch head.\n"<pos:position pos:line="71" pos:column="69"/></literal>
			<literal type="string" pos:line="72" pos:column="25">"fast-forwarding your working tree from\n"<pos:position pos:line="72" pos:column="67"/></literal>
			<literal type="string" pos:line="73" pos:column="25">"commit %s."<pos:position pos:line="73" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="73" pos:column="40">oid_to_hex<pos:position pos:line="73" pos:column="50"/></name><argument_list pos:line="73" pos:column="50">(<argument><expr><operator pos:line="73" pos:column="51">&amp;<pos:position pos:line="73" pos:column="56"/></operator><name pos:line="73" pos:column="52">orig_head<pos:position pos:line="73" pos:column="61"/></name></expr></argument>)<pos:position pos:line="73" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="64"/></expr_stmt>

		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><call><name pos:line="75" pos:column="21">checkout_fast_forward<pos:position pos:line="75" pos:column="42"/></name><argument_list pos:line="75" pos:column="42">(<argument><expr><name><name pos:line="75" pos:column="43">orig_head<pos:position pos:line="75" pos:column="52"/></name><operator pos:line="75" pos:column="52">.<pos:position pos:line="75" pos:column="53"/></operator><name pos:line="75" pos:column="53">hash<pos:position pos:line="75" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="59">curr_head<pos:position pos:line="75" pos:column="68"/></name><operator pos:line="75" pos:column="68">.<pos:position pos:line="75" pos:column="69"/></operator><name pos:line="75" pos:column="69">hash<pos:position pos:line="75" pos:column="73"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="75">0<pos:position pos:line="75" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="78"/></condition><then pos:line="75" pos:column="78">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="25">die<pos:position pos:line="76" pos:column="28"/></name><argument_list pos:line="76" pos:column="28">(<argument><expr><call><name pos:line="76" pos:column="29">_<pos:position pos:line="76" pos:column="30"/></name><argument_list pos:line="76" pos:column="30">(<argument><expr><literal type="string" pos:line="76" pos:column="31">"Cannot fast-forward your working tree.\n"<pos:position pos:line="76" pos:column="73"/></literal>
				<literal type="string" pos:line="77" pos:column="33">"After making sure that you saved anything precious from\n"<pos:position pos:line="77" pos:column="92"/></literal>
				<literal type="string" pos:line="78" pos:column="33">"$ git diff %s\n"<pos:position pos:line="78" pos:column="50"/></literal>
				<literal type="string" pos:line="79" pos:column="33">"output, run\n"<pos:position pos:line="79" pos:column="48"/></literal>
				<literal type="string" pos:line="80" pos:column="33">"$ git reset --hard\n"<pos:position pos:line="80" pos:column="55"/></literal>
				<literal type="string" pos:line="81" pos:column="33">"to recover."<pos:position pos:line="81" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="81" pos:column="49">oid_to_hex<pos:position pos:line="81" pos:column="59"/></name><argument_list pos:line="81" pos:column="59">(<argument><expr><operator pos:line="81" pos:column="60">&amp;<pos:position pos:line="81" pos:column="65"/></operator><name pos:line="81" pos:column="61">orig_head<pos:position pos:line="81" pos:column="70"/></name></expr></argument>)<pos:position pos:line="81" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="81" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="73"/></expr_stmt></block></then></if>
	}<pos:position pos:line="82" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="84" pos:column="9">get_merge_heads<pos:position pos:line="84" pos:column="24"/></name><argument_list pos:line="84" pos:column="24">(<argument><expr><operator pos:line="84" pos:column="25">&amp;<pos:position pos:line="84" pos:column="30"/></operator><name pos:line="84" pos:column="26">merge_heads<pos:position pos:line="84" pos:column="37"/></name></expr></argument>)<pos:position pos:line="84" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="39"/></expr_stmt>

	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><operator pos:line="86" pos:column="13">!<pos:position pos:line="86" pos:column="14"/></operator><name><name pos:line="86" pos:column="14">merge_heads<pos:position pos:line="86" pos:column="25"/></name><operator pos:line="86" pos:column="25">.<pos:position pos:line="86" pos:column="26"/></operator><name pos:line="86" pos:column="26">nr<pos:position pos:line="86" pos:column="28"/></name></name></expr>)<pos:position pos:line="86" pos:column="29"/></condition><then pos:line="86" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="17">die_no_merge_candidates<pos:position pos:line="87" pos:column="40"/></name><argument_list pos:line="87" pos:column="40">(<argument><expr><name pos:line="87" pos:column="41">repo<pos:position pos:line="87" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="47">refspecs<pos:position pos:line="87" pos:column="55"/></name></expr></argument>)<pos:position pos:line="87" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="57"/></expr_stmt></block></then></if>

	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><call><name pos:line="89" pos:column="13">is_null_oid<pos:position pos:line="89" pos:column="24"/></name><argument_list pos:line="89" pos:column="24">(<argument><expr><operator pos:line="89" pos:column="25">&amp;<pos:position pos:line="89" pos:column="30"/></operator><name pos:line="89" pos:column="26">orig_head<pos:position pos:line="89" pos:column="35"/></name></expr></argument>)<pos:position pos:line="89" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="37"/></condition><then pos:line="89" pos:column="37"> <block pos:line="89" pos:column="38">{
		<if pos:line="90" pos:column="17">if <condition pos:line="90" pos:column="20">(<expr><name><name pos:line="90" pos:column="21">merge_heads<pos:position pos:line="90" pos:column="32"/></name><operator pos:line="90" pos:column="32">.<pos:position pos:line="90" pos:column="33"/></operator><name pos:line="90" pos:column="33">nr<pos:position pos:line="90" pos:column="35"/></name></name> <operator pos:line="90" pos:column="36">&gt;<pos:position pos:line="90" pos:column="40"/></operator> <literal type="number" pos:line="90" pos:column="38">1<pos:position pos:line="90" pos:column="39"/></literal></expr>)<pos:position pos:line="90" pos:column="40"/></condition><then pos:line="90" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="91" pos:column="25">die<pos:position pos:line="91" pos:column="28"/></name><argument_list pos:line="91" pos:column="28">(<argument><expr><call><name pos:line="91" pos:column="29">_<pos:position pos:line="91" pos:column="30"/></name><argument_list pos:line="91" pos:column="30">(<argument><expr><literal type="string" pos:line="91" pos:column="31">"Cannot merge multiple branches into empty head."<pos:position pos:line="91" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="91" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="83"/></expr_stmt></block></then></if>
		<return pos:line="92" pos:column="17">return <expr><call><name pos:line="92" pos:column="24">pull_into_void<pos:position pos:line="92" pos:column="38"/></name><argument_list pos:line="92" pos:column="38">(<argument><expr><name><name pos:line="92" pos:column="39">merge_heads<pos:position pos:line="92" pos:column="50"/></name><operator pos:line="92" pos:column="50">.<pos:position pos:line="92" pos:column="51"/></operator><name pos:line="92" pos:column="51">oid<pos:position pos:line="92" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="92" pos:column="56">&amp;<pos:position pos:line="92" pos:column="61"/></operator><name pos:line="92" pos:column="57">curr_head<pos:position pos:line="92" pos:column="66"/></name></expr></argument>)<pos:position pos:line="92" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="68"/></return>
	}<pos:position pos:line="93" pos:column="10"/></block></then></if>
	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><name pos:line="94" pos:column="13">opt_rebase<pos:position pos:line="94" pos:column="23"/></name> <operator pos:line="94" pos:column="24">&amp;&amp;<pos:position pos:line="94" pos:column="34"/></operator> <name><name pos:line="94" pos:column="27">merge_heads<pos:position pos:line="94" pos:column="38"/></name><operator pos:line="94" pos:column="38">.<pos:position pos:line="94" pos:column="39"/></operator><name pos:line="94" pos:column="39">nr<pos:position pos:line="94" pos:column="41"/></name></name> <operator pos:line="94" pos:column="42">&gt;<pos:position pos:line="94" pos:column="46"/></operator> <literal type="number" pos:line="94" pos:column="44">1<pos:position pos:line="94" pos:column="45"/></literal></expr>)<pos:position pos:line="94" pos:column="46"/></condition><then pos:line="94" pos:column="46">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="95" pos:column="17">die<pos:position pos:line="95" pos:column="20"/></name><argument_list pos:line="95" pos:column="20">(<argument><expr><call><name pos:line="95" pos:column="21">_<pos:position pos:line="95" pos:column="22"/></name><argument_list pos:line="95" pos:column="22">(<argument><expr><literal type="string" pos:line="95" pos:column="23">"Cannot rebase onto multiple branches."<pos:position pos:line="95" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="95" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="65"/></expr_stmt></block></then></if>

	<if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name pos:line="97" pos:column="13">opt_rebase<pos:position pos:line="97" pos:column="23"/></name></expr>)<pos:position pos:line="97" pos:column="24"/></condition><then pos:line="97" pos:column="24"> <block pos:line="97" pos:column="25">{
		<if pos:line="98" pos:column="17">if <condition pos:line="98" pos:column="20">(<expr><operator pos:line="98" pos:column="21">!<pos:position pos:line="98" pos:column="22"/></operator><name pos:line="98" pos:column="22">autostash<pos:position pos:line="98" pos:column="31"/></name></expr>)<pos:position pos:line="98" pos:column="32"/></condition><then pos:line="98" pos:column="32"> <block pos:line="98" pos:column="33">{
			<decl_stmt><decl><type><name><name pos:line="99" pos:column="25">struct<pos:position pos:line="99" pos:column="31"/></name> <name pos:line="99" pos:column="32">commit_list<pos:position pos:line="99" pos:column="43"/></name></name> <modifier pos:line="99" pos:column="44">*<pos:position pos:line="99" pos:column="45"/></modifier></type><name pos:line="99" pos:column="45">list<pos:position pos:line="99" pos:column="49"/></name> <init pos:line="99" pos:column="50">= <expr><name pos:line="99" pos:column="52">NULL<pos:position pos:line="99" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="99" pos:column="57"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="100" pos:column="25">struct<pos:position pos:line="100" pos:column="31"/></name> <name pos:line="100" pos:column="32">commit<pos:position pos:line="100" pos:column="38"/></name></name> <modifier pos:line="100" pos:column="39">*<pos:position pos:line="100" pos:column="40"/></modifier></type><name pos:line="100" pos:column="40">merge_head<pos:position pos:line="100" pos:column="50"/></name></decl>, <modifier pos:line="100" pos:column="52">*<pos:position pos:line="100" pos:column="53"/></modifier><decl><type ref="prev"/><name pos:line="100" pos:column="53">head<pos:position pos:line="100" pos:column="57"/></name></decl>;<pos:position pos:line="100" pos:column="58"/></decl_stmt>

			<expr_stmt><expr><name pos:line="102" pos:column="25">head<pos:position pos:line="102" pos:column="29"/></name> <operator pos:line="102" pos:column="30">=<pos:position pos:line="102" pos:column="31"/></operator> <call><name pos:line="102" pos:column="32">lookup_commit_reference<pos:position pos:line="102" pos:column="55"/></name><argument_list pos:line="102" pos:column="55">(<argument><expr><name><name pos:line="102" pos:column="56">orig_head<pos:position pos:line="102" pos:column="65"/></name><operator pos:line="102" pos:column="65">.<pos:position pos:line="102" pos:column="66"/></operator><name pos:line="102" pos:column="66">hash<pos:position pos:line="102" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="103" pos:column="25">commit_list_insert<pos:position pos:line="103" pos:column="43"/></name><argument_list pos:line="103" pos:column="43">(<argument><expr><name pos:line="103" pos:column="44">head<pos:position pos:line="103" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="103" pos:column="50">&amp;<pos:position pos:line="103" pos:column="55"/></operator><name pos:line="103" pos:column="51">list<pos:position pos:line="103" pos:column="55"/></name></expr></argument>)<pos:position pos:line="103" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><name pos:line="104" pos:column="25">merge_head<pos:position pos:line="104" pos:column="35"/></name> <operator pos:line="104" pos:column="36">=<pos:position pos:line="104" pos:column="37"/></operator> <call><name pos:line="104" pos:column="38">lookup_commit_reference<pos:position pos:line="104" pos:column="61"/></name><argument_list pos:line="104" pos:column="61">(<argument><expr><name><name pos:line="104" pos:column="62">merge_heads<pos:position pos:line="104" pos:column="73"/></name><operator pos:line="104" pos:column="73">.<pos:position pos:line="104" pos:column="74"/></operator><name pos:line="104" pos:column="74">oid<pos:position pos:line="104" pos:column="77"/></name><index pos:line="104" pos:column="77">[<expr><literal type="number" pos:line="104" pos:column="78">0<pos:position pos:line="104" pos:column="79"/></literal></expr>]<pos:position pos:line="104" pos:column="80"/></index></name><operator pos:line="104" pos:column="80">.<pos:position pos:line="104" pos:column="81"/></operator><name pos:line="104" pos:column="81">hash<pos:position pos:line="104" pos:column="85"/></name></expr></argument>)<pos:position pos:line="104" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="87"/></expr_stmt>
			<if pos:line="105" pos:column="25">if <condition pos:line="105" pos:column="28">(<expr><call><name pos:line="105" pos:column="29">is_descendant_of<pos:position pos:line="105" pos:column="45"/></name><argument_list pos:line="105" pos:column="45">(<argument><expr><name pos:line="105" pos:column="46">merge_head<pos:position pos:line="105" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="58">list<pos:position pos:line="105" pos:column="62"/></name></expr></argument>)<pos:position pos:line="105" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="105" pos:column="64"/></condition><then pos:line="105" pos:column="64"> <block pos:line="105" pos:column="65">{
				<comment type="block" pos:line="106" pos:column="33">/* we can fast-forward this without invoking rebase */</comment>
				<expr_stmt><expr><name pos:line="107" pos:column="33">opt_ff<pos:position pos:line="107" pos:column="39"/></name> <operator pos:line="107" pos:column="40">=<pos:position pos:line="107" pos:column="41"/></operator> <literal type="string" pos:line="107" pos:column="42">"--ff-only"<pos:position pos:line="107" pos:column="53"/></literal></expr>;<pos:position pos:line="107" pos:column="54"/></expr_stmt>
				<return pos:line="108" pos:column="33">return <expr><call><name pos:line="108" pos:column="40">run_merge<pos:position pos:line="108" pos:column="49"/></name><argument_list pos:line="108" pos:column="49">()<pos:position pos:line="108" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="52"/></return>
			}<pos:position pos:line="109" pos:column="26"/></block></then></if>
		}<pos:position pos:line="110" pos:column="18"/></block></then></if>
		<return pos:line="111" pos:column="17">return <expr><call><name pos:line="111" pos:column="24">run_rebase<pos:position pos:line="111" pos:column="34"/></name><argument_list pos:line="111" pos:column="34">(<argument><expr><operator pos:line="111" pos:column="35">&amp;<pos:position pos:line="111" pos:column="40"/></operator><name pos:line="111" pos:column="36">curr_head<pos:position pos:line="111" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="111" pos:column="47">merge_heads<pos:position pos:line="111" pos:column="58"/></name><operator pos:line="111" pos:column="58">.<pos:position pos:line="111" pos:column="59"/></operator><name pos:line="111" pos:column="59">oid<pos:position pos:line="111" pos:column="62"/></name></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="64">&amp;<pos:position pos:line="111" pos:column="69"/></operator><name pos:line="111" pos:column="65">rebase_fork_point<pos:position pos:line="111" pos:column="82"/></name></expr></argument>)<pos:position pos:line="111" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="84"/></return>
	}<pos:position pos:line="112" pos:column="10"/></block></then> <else pos:line="112" pos:column="11">else <block pos:line="112" pos:column="16">{
		<return pos:line="113" pos:column="17">return <expr><call><name pos:line="113" pos:column="24">run_merge<pos:position pos:line="113" pos:column="33"/></name><argument_list pos:line="113" pos:column="33">()<pos:position pos:line="113" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="36"/></return>
	}<pos:position pos:line="114" pos:column="10"/></block></else></if>
}<pos:position pos:line="115" pos:column="2"/></block></function></unit>
