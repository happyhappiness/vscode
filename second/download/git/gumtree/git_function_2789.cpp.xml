<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2789.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">write_pack_file<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">void<pos:position pos:line="1" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">uint32_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">i<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="25">j<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sha1file<pos:position pos:line="4" pos:column="24"/></name></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">f<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">off_t<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">offset<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">uint32_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">nr_remaining<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><name pos:line="6" pos:column="33">nr_result<pos:position pos:line="6" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">time_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">last_mtime<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">object_entry<pos:position pos:line="8" pos:column="28"/></name></name> <modifier pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></modifier><modifier pos:line="8" pos:column="30">*<pos:position pos:line="8" pos:column="31"/></modifier></type><name pos:line="8" pos:column="31">write_order<pos:position pos:line="8" pos:column="42"/></name></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">progress<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">&gt;<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="24">pack_to_stdout<pos:position pos:line="10" pos:column="38"/></name></expr>)<pos:position pos:line="10" pos:column="39"/></condition><then pos:line="10" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">progress_state<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">=<pos:position pos:line="11" pos:column="33"/></operator> <call><name pos:line="11" pos:column="34">start_progress<pos:position pos:line="11" pos:column="48"/></name><argument_list pos:line="11" pos:column="48">(<argument><expr><call><name pos:line="11" pos:column="49">_<pos:position pos:line="11" pos:column="50"/></name><argument_list pos:line="11" pos:column="50">(<argument><expr><literal type="string" pos:line="11" pos:column="51">"Writing objects"<pos:position pos:line="11" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="11" pos:column="71">nr_result<pos:position pos:line="11" pos:column="80"/></name></expr></argument>)<pos:position pos:line="11" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="82"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">ALLOC_ARRAY<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">written_list<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="35">to_pack<pos:position pos:line="12" pos:column="42"/></name><operator pos:line="12" pos:column="42">.<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="43">nr_objects<pos:position pos:line="12" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><name pos:line="13" pos:column="9">write_order<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <call><name pos:line="13" pos:column="23">compute_write_order<pos:position pos:line="13" pos:column="42"/></name><argument_list pos:line="13" pos:column="42">()<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>

	<do pos:line="15" pos:column="9">do <block pos:line="15" pos:column="12">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">unsigned<pos:position pos:line="16" pos:column="25"/></name> <name pos:line="16" pos:column="26">char<pos:position pos:line="16" pos:column="30"/></name></type> <name><name pos:line="16" pos:column="31">sha1<pos:position pos:line="16" pos:column="35"/></name><index pos:line="16" pos:column="35">[<expr><literal type="number" pos:line="16" pos:column="36">20<pos:position pos:line="16" pos:column="38"/></literal></expr>]<pos:position pos:line="16" pos:column="39"/></index></name></decl>;<pos:position pos:line="16" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">char<pos:position pos:line="17" pos:column="21"/></name> <modifier pos:line="17" pos:column="22">*<pos:position pos:line="17" pos:column="23"/></modifier></type><name pos:line="17" pos:column="23">pack_tmp_name<pos:position pos:line="17" pos:column="36"/></name> <init pos:line="17" pos:column="37">= <expr><name pos:line="17" pos:column="39">NULL<pos:position pos:line="17" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="44"/></decl_stmt>

		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">pack_to_stdout<pos:position pos:line="19" pos:column="35"/></name></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="25">f<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <call><name pos:line="20" pos:column="29">sha1fd_throughput<pos:position pos:line="20" pos:column="46"/></name><argument_list pos:line="20" pos:column="46">(<argument><expr><literal type="number" pos:line="20" pos:column="47">1<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="50">"&lt;stdout&gt;"<pos:position pos:line="20" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="62">progress_state<pos:position pos:line="20" pos:column="76"/></name></expr></argument>)<pos:position pos:line="20" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="78"/></expr_stmt></block></then>
		<else pos:line="21" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="25">f<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <call><name pos:line="22" pos:column="29">create_tmp_packfile<pos:position pos:line="22" pos:column="48"/></name><argument_list pos:line="22" pos:column="48">(<argument><expr><operator pos:line="22" pos:column="49">&amp;<pos:position pos:line="22" pos:column="54"/></operator><name pos:line="22" pos:column="50">pack_tmp_name<pos:position pos:line="22" pos:column="63"/></name></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="65"/></expr_stmt></block></else></if>

		<expr_stmt><expr><name pos:line="24" pos:column="17">offset<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <call><name pos:line="24" pos:column="26">write_pack_header<pos:position pos:line="24" pos:column="43"/></name><argument_list pos:line="24" pos:column="43">(<argument><expr><name pos:line="24" pos:column="44">f<pos:position pos:line="24" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="47">nr_remaining<pos:position pos:line="24" pos:column="59"/></name></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="61"/></expr_stmt>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">reuse_packfile<pos:position pos:line="26" pos:column="35"/></name></expr>)<pos:position pos:line="26" pos:column="36"/></condition><then pos:line="26" pos:column="36"> <block pos:line="26" pos:column="37">{
			<decl_stmt><decl><type><name pos:line="27" pos:column="25">off_t<pos:position pos:line="27" pos:column="30"/></name></type> <name pos:line="27" pos:column="31">packfile_size<pos:position pos:line="27" pos:column="44"/></name></decl>;<pos:position pos:line="27" pos:column="45"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">assert<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">pack_to_stdout<pos:position pos:line="28" pos:column="46"/></name></expr></argument>)<pos:position pos:line="28" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="48"/></expr_stmt>

			<expr_stmt><expr><name pos:line="30" pos:column="25">packfile_size<pos:position pos:line="30" pos:column="38"/></name> <operator pos:line="30" pos:column="39">=<pos:position pos:line="30" pos:column="40"/></operator> <call><name pos:line="30" pos:column="41">write_reused_pack<pos:position pos:line="30" pos:column="58"/></name><argument_list pos:line="30" pos:column="58">(<argument><expr><name pos:line="30" pos:column="59">f<pos:position pos:line="30" pos:column="60"/></name></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="31" pos:column="25">offset<pos:position pos:line="31" pos:column="31"/></name> <operator pos:line="31" pos:column="32">+=<pos:position pos:line="31" pos:column="34"/></operator> <name pos:line="31" pos:column="35">packfile_size<pos:position pos:line="31" pos:column="48"/></name></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="34" pos:column="17">nr_written<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">=<pos:position pos:line="34" pos:column="29"/></operator> <literal type="number" pos:line="34" pos:column="30">0<pos:position pos:line="34" pos:column="31"/></literal></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>
		<for pos:line="35" pos:column="17">for <control pos:line="35" pos:column="21">(<init pos:line="35" pos:column="22">;<pos:position pos:line="35" pos:column="23"/></init> <condition><expr><name pos:line="35" pos:column="24">i<pos:position pos:line="35" pos:column="25"/></name> <operator pos:line="35" pos:column="26">&lt;<pos:position pos:line="35" pos:column="30"/></operator> <name><name pos:line="35" pos:column="28">to_pack<pos:position pos:line="35" pos:column="35"/></name><operator pos:line="35" pos:column="35">.<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="36">nr_objects<pos:position pos:line="35" pos:column="46"/></name></name></expr>;<pos:position pos:line="35" pos:column="47"/></condition> <incr><expr><name pos:line="35" pos:column="48">i<pos:position pos:line="35" pos:column="49"/></name><operator pos:line="35" pos:column="49">++<pos:position pos:line="35" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="52"/></control> <block pos:line="35" pos:column="53">{
			<decl_stmt><decl><type><name><name pos:line="36" pos:column="25">struct<pos:position pos:line="36" pos:column="31"/></name> <name pos:line="36" pos:column="32">object_entry<pos:position pos:line="36" pos:column="44"/></name></name> <modifier pos:line="36" pos:column="45">*<pos:position pos:line="36" pos:column="46"/></modifier></type><name pos:line="36" pos:column="46">e<pos:position pos:line="36" pos:column="47"/></name> <init pos:line="36" pos:column="48">= <expr><name><name pos:line="36" pos:column="50">write_order<pos:position pos:line="36" pos:column="61"/></name><index pos:line="36" pos:column="61">[<expr><name pos:line="36" pos:column="62">i<pos:position pos:line="36" pos:column="63"/></name></expr>]<pos:position pos:line="36" pos:column="64"/></index></name></expr></init></decl>;<pos:position pos:line="36" pos:column="65"/></decl_stmt>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><call><name pos:line="37" pos:column="29">write_one<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">f<pos:position pos:line="37" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="42">e<pos:position pos:line="37" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="45">&amp;<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="46">offset<pos:position pos:line="37" pos:column="52"/></name></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call> <operator pos:line="37" pos:column="54">==<pos:position pos:line="37" pos:column="56"/></operator> <name pos:line="37" pos:column="57">WRITE_ONE_BREAK<pos:position pos:line="37" pos:column="72"/></name></expr>)<pos:position pos:line="37" pos:column="73"/></condition><then pos:line="37" pos:column="73">
				<block type="pseudo"><break pos:line="38" pos:column="33">break;<pos:position pos:line="38" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">display_progress<pos:position pos:line="39" pos:column="41"/></name><argument_list pos:line="39" pos:column="41">(<argument><expr><name pos:line="39" pos:column="42">progress_state<pos:position pos:line="39" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="58">written<pos:position pos:line="39" pos:column="65"/></name></expr></argument>)<pos:position pos:line="39" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></for>

		<comment type="block" pos:line="42" pos:column="17">/*
		 * Did we write the wrong # entries in the header?
		 * If so, rewrite it like in fast-import
		 */</comment>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">pack_to_stdout<pos:position pos:line="46" pos:column="35"/></name></expr>)<pos:position pos:line="46" pos:column="36"/></condition><then pos:line="46" pos:column="36"> <block pos:line="46" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">sha1close<pos:position pos:line="47" pos:column="34"/></name><argument_list pos:line="47" pos:column="34">(<argument><expr><name pos:line="47" pos:column="35">f<pos:position pos:line="47" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="38">sha1<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="44">CSUM_CLOSE<pos:position pos:line="47" pos:column="54"/></name></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="48" pos:column="18"/></block></then> <elseif pos:line="48" pos:column="19">else <if pos:line="48" pos:column="24">if <condition pos:line="48" pos:column="27">(<expr><name pos:line="48" pos:column="28">nr_written<pos:position pos:line="48" pos:column="38"/></name> <operator pos:line="48" pos:column="39">==<pos:position pos:line="48" pos:column="41"/></operator> <name pos:line="48" pos:column="42">nr_remaining<pos:position pos:line="48" pos:column="54"/></name></expr>)<pos:position pos:line="48" pos:column="55"/></condition><then pos:line="48" pos:column="55"> <block pos:line="48" pos:column="56">{
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">sha1close<pos:position pos:line="49" pos:column="34"/></name><argument_list pos:line="49" pos:column="34">(<argument><expr><name pos:line="49" pos:column="35">f<pos:position pos:line="49" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="38">sha1<pos:position pos:line="49" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="44">CSUM_FSYNC<pos:position pos:line="49" pos:column="54"/></name></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if></elseif> <else pos:line="50" pos:column="19">else <block pos:line="50" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">int<pos:position pos:line="51" pos:column="28"/></name></type> <name pos:line="51" pos:column="29">fd<pos:position pos:line="51" pos:column="31"/></name> <init pos:line="51" pos:column="32">= <expr><call><name pos:line="51" pos:column="34">sha1close<pos:position pos:line="51" pos:column="43"/></name><argument_list pos:line="51" pos:column="43">(<argument><expr><name pos:line="51" pos:column="44">f<pos:position pos:line="51" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="47">sha1<pos:position pos:line="51" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="53">0<pos:position pos:line="51" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="51" pos:column="56"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="52" pos:column="25">fixup_pack_header_footer<pos:position pos:line="52" pos:column="49"/></name><argument_list pos:line="52" pos:column="49">(<argument><expr><name pos:line="52" pos:column="50">fd<pos:position pos:line="52" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="54">sha1<pos:position pos:line="52" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="60">pack_tmp_name<pos:position pos:line="52" pos:column="73"/></name></expr></argument>,
						 <argument><expr><name pos:line="53" pos:column="50">nr_written<pos:position pos:line="53" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="62">sha1<pos:position pos:line="53" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="68">offset<pos:position pos:line="53" pos:column="74"/></name></expr></argument>)<pos:position pos:line="53" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="54" pos:column="25">close<pos:position pos:line="54" pos:column="30"/></name><argument_list pos:line="54" pos:column="30">(<argument><expr><name pos:line="54" pos:column="31">fd<pos:position pos:line="54" pos:column="33"/></name></expr></argument>)<pos:position pos:line="54" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt>
			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><name pos:line="55" pos:column="29">write_bitmap_index<pos:position pos:line="55" pos:column="47"/></name></expr>)<pos:position pos:line="55" pos:column="48"/></condition><then pos:line="55" pos:column="48"> <block pos:line="55" pos:column="49">{
				<expr_stmt><expr><call><name pos:line="56" pos:column="33">warning<pos:position pos:line="56" pos:column="40"/></name><argument_list pos:line="56" pos:column="40">(<argument><expr><call><name pos:line="56" pos:column="41">_<pos:position pos:line="56" pos:column="42"/></name><argument_list pos:line="56" pos:column="42">(<argument><expr><name pos:line="56" pos:column="43">no_split_warning<pos:position pos:line="56" pos:column="59"/></name></expr></argument>)<pos:position pos:line="56" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="62"/></expr_stmt>
				<expr_stmt><expr><name pos:line="57" pos:column="33">write_bitmap_index<pos:position pos:line="57" pos:column="51"/></name> <operator pos:line="57" pos:column="52">=<pos:position pos:line="57" pos:column="53"/></operator> <literal type="number" pos:line="57" pos:column="54">0<pos:position pos:line="57" pos:column="55"/></literal></expr>;<pos:position pos:line="57" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="58" pos:column="26"/></block></then></if>
		}<pos:position pos:line="59" pos:column="18"/></block></else></if>

		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><operator pos:line="61" pos:column="21">!<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="22">pack_to_stdout<pos:position pos:line="61" pos:column="36"/></name></expr>)<pos:position pos:line="61" pos:column="37"/></condition><then pos:line="61" pos:column="37"> <block pos:line="61" pos:column="38">{
			<decl_stmt><decl><type><name><name pos:line="62" pos:column="25">struct<pos:position pos:line="62" pos:column="31"/></name> <name pos:line="62" pos:column="32">stat<pos:position pos:line="62" pos:column="36"/></name></name></type> <name pos:line="62" pos:column="37">st<pos:position pos:line="62" pos:column="39"/></name></decl>;<pos:position pos:line="62" pos:column="40"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="63" pos:column="25">struct<pos:position pos:line="63" pos:column="31"/></name> <name pos:line="63" pos:column="32">strbuf<pos:position pos:line="63" pos:column="38"/></name></name></type> <name pos:line="63" pos:column="39">tmpname<pos:position pos:line="63" pos:column="46"/></name> <init pos:line="63" pos:column="47">= <expr><name pos:line="63" pos:column="49">STRBUF_INIT<pos:position pos:line="63" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="63" pos:column="61"/></decl_stmt>

			<comment type="block" pos:line="65" pos:column="25">/*
			 * Packs are runtime accessed in their mtime
			 * order since newer packs are more likely to contain
			 * younger objects.  So if we are creating multiple
			 * packs then we should modify the mtime of later ones
			 * to preserve this property.
			 */</comment>
			<if pos:line="72" pos:column="25">if <condition pos:line="72" pos:column="28">(<expr><call><name pos:line="72" pos:column="29">stat<pos:position pos:line="72" pos:column="33"/></name><argument_list pos:line="72" pos:column="33">(<argument><expr><name pos:line="72" pos:column="34">pack_tmp_name<pos:position pos:line="72" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="49">&amp;<pos:position pos:line="72" pos:column="54"/></operator><name pos:line="72" pos:column="50">st<pos:position pos:line="72" pos:column="52"/></name></expr></argument>)<pos:position pos:line="72" pos:column="53"/></argument_list></call> <operator pos:line="72" pos:column="54">&lt;<pos:position pos:line="72" pos:column="58"/></operator> <literal type="number" pos:line="72" pos:column="56">0<pos:position pos:line="72" pos:column="57"/></literal></expr>)<pos:position pos:line="72" pos:column="58"/></condition><then pos:line="72" pos:column="58"> <block pos:line="72" pos:column="59">{
				<expr_stmt><expr><call><name pos:line="73" pos:column="33">warning<pos:position pos:line="73" pos:column="40"/></name><argument_list pos:line="73" pos:column="40">(<argument><expr><literal type="string" pos:line="73" pos:column="41">"failed to stat %s: %s"<pos:position pos:line="73" pos:column="64"/></literal></expr></argument>,
					<argument><expr><name pos:line="74" pos:column="41">pack_tmp_name<pos:position pos:line="74" pos:column="54"/></name></expr></argument>, <argument><expr><call><name pos:line="74" pos:column="56">strerror<pos:position pos:line="74" pos:column="64"/></name><argument_list pos:line="74" pos:column="64">(<argument><expr><name pos:line="74" pos:column="65">errno<pos:position pos:line="74" pos:column="70"/></name></expr></argument>)<pos:position pos:line="74" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="73"/></expr_stmt>
			}<pos:position pos:line="75" pos:column="26"/></block></then> <elseif pos:line="75" pos:column="27">else <if pos:line="75" pos:column="32">if <condition pos:line="75" pos:column="35">(<expr><operator pos:line="75" pos:column="36">!<pos:position pos:line="75" pos:column="37"/></operator><name pos:line="75" pos:column="37">last_mtime<pos:position pos:line="75" pos:column="47"/></name></expr>)<pos:position pos:line="75" pos:column="48"/></condition><then pos:line="75" pos:column="48"> <block pos:line="75" pos:column="49">{
				<expr_stmt><expr><name pos:line="76" pos:column="33">last_mtime<pos:position pos:line="76" pos:column="43"/></name> <operator pos:line="76" pos:column="44">=<pos:position pos:line="76" pos:column="45"/></operator> <name><name pos:line="76" pos:column="46">st<pos:position pos:line="76" pos:column="48"/></name><operator pos:line="76" pos:column="48">.<pos:position pos:line="76" pos:column="49"/></operator><name pos:line="76" pos:column="49">st_mtime<pos:position pos:line="76" pos:column="57"/></name></name></expr>;<pos:position pos:line="76" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="77" pos:column="26"/></block></then></if></elseif> <else pos:line="77" pos:column="27">else <block pos:line="77" pos:column="32">{
				<decl_stmt><decl><type><name><name pos:line="78" pos:column="33">struct<pos:position pos:line="78" pos:column="39"/></name> <name pos:line="78" pos:column="40">utimbuf<pos:position pos:line="78" pos:column="47"/></name></name></type> <name pos:line="78" pos:column="48">utb<pos:position pos:line="78" pos:column="51"/></name></decl>;<pos:position pos:line="78" pos:column="52"/></decl_stmt>
				<expr_stmt><expr><name><name pos:line="79" pos:column="33">utb<pos:position pos:line="79" pos:column="36"/></name><operator pos:line="79" pos:column="36">.<pos:position pos:line="79" pos:column="37"/></operator><name pos:line="79" pos:column="37">actime<pos:position pos:line="79" pos:column="43"/></name></name> <operator pos:line="79" pos:column="44">=<pos:position pos:line="79" pos:column="45"/></operator> <name><name pos:line="79" pos:column="46">st<pos:position pos:line="79" pos:column="48"/></name><operator pos:line="79" pos:column="48">.<pos:position pos:line="79" pos:column="49"/></operator><name pos:line="79" pos:column="49">st_atime<pos:position pos:line="79" pos:column="57"/></name></name></expr>;<pos:position pos:line="79" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="80" pos:column="33">utb<pos:position pos:line="80" pos:column="36"/></name><operator pos:line="80" pos:column="36">.<pos:position pos:line="80" pos:column="37"/></operator><name pos:line="80" pos:column="37">modtime<pos:position pos:line="80" pos:column="44"/></name></name> <operator pos:line="80" pos:column="45">=<pos:position pos:line="80" pos:column="46"/></operator> <operator pos:line="80" pos:column="47">--<pos:position pos:line="80" pos:column="49"/></operator><name pos:line="80" pos:column="49">last_mtime<pos:position pos:line="80" pos:column="59"/></name></expr>;<pos:position pos:line="80" pos:column="60"/></expr_stmt>
				<if pos:line="81" pos:column="33">if <condition pos:line="81" pos:column="36">(<expr><call><name pos:line="81" pos:column="37">utime<pos:position pos:line="81" pos:column="42"/></name><argument_list pos:line="81" pos:column="42">(<argument><expr><name pos:line="81" pos:column="43">pack_tmp_name<pos:position pos:line="81" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="58">&amp;<pos:position pos:line="81" pos:column="63"/></operator><name pos:line="81" pos:column="59">utb<pos:position pos:line="81" pos:column="62"/></name></expr></argument>)<pos:position pos:line="81" pos:column="63"/></argument_list></call> <operator pos:line="81" pos:column="64">&lt;<pos:position pos:line="81" pos:column="68"/></operator> <literal type="number" pos:line="81" pos:column="66">0<pos:position pos:line="81" pos:column="67"/></literal></expr>)<pos:position pos:line="81" pos:column="68"/></condition><then pos:line="81" pos:column="68">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="41">warning<pos:position pos:line="82" pos:column="48"/></name><argument_list pos:line="82" pos:column="48">(<argument><expr><literal type="string" pos:line="82" pos:column="49">"failed utime() on %s: %s"<pos:position pos:line="82" pos:column="75"/></literal></expr></argument>,
						<argument><expr><name pos:line="83" pos:column="49">pack_tmp_name<pos:position pos:line="83" pos:column="62"/></name></expr></argument>, <argument><expr><call><name pos:line="83" pos:column="64">strerror<pos:position pos:line="83" pos:column="72"/></name><argument_list pos:line="83" pos:column="72">(<argument><expr><name pos:line="83" pos:column="73">errno<pos:position pos:line="83" pos:column="78"/></name></expr></argument>)<pos:position pos:line="83" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="83" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="81"/></expr_stmt></block></then></if>
			}<pos:position pos:line="84" pos:column="26"/></block></else></if>

			<expr_stmt><expr><call><name pos:line="86" pos:column="25">strbuf_addf<pos:position pos:line="86" pos:column="36"/></name><argument_list pos:line="86" pos:column="36">(<argument><expr><operator pos:line="86" pos:column="37">&amp;<pos:position pos:line="86" pos:column="42"/></operator><name pos:line="86" pos:column="38">tmpname<pos:position pos:line="86" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="47">"%s-"<pos:position pos:line="86" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="54">base_name<pos:position pos:line="86" pos:column="63"/></name></expr></argument>)<pos:position pos:line="86" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="65"/></expr_stmt>

			<if pos:line="88" pos:column="25">if <condition pos:line="88" pos:column="28">(<expr><name pos:line="88" pos:column="29">write_bitmap_index<pos:position pos:line="88" pos:column="47"/></name></expr>)<pos:position pos:line="88" pos:column="48"/></condition><then pos:line="88" pos:column="48"> <block pos:line="88" pos:column="49">{
				<expr_stmt><expr><call><name pos:line="89" pos:column="33">bitmap_writer_set_checksum<pos:position pos:line="89" pos:column="59"/></name><argument_list pos:line="89" pos:column="59">(<argument><expr><name pos:line="89" pos:column="60">sha1<pos:position pos:line="89" pos:column="64"/></name></expr></argument>)<pos:position pos:line="89" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="66"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="90" pos:column="33">bitmap_writer_build_type_index<pos:position pos:line="90" pos:column="63"/></name><argument_list pos:line="90" pos:column="63">(<argument><expr><name pos:line="90" pos:column="64">written_list<pos:position pos:line="90" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="78">nr_written<pos:position pos:line="90" pos:column="88"/></name></expr></argument>)<pos:position pos:line="90" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="90"/></expr_stmt>
			}<pos:position pos:line="91" pos:column="26"/></block></then></if>

			<expr_stmt><expr><call><name pos:line="93" pos:column="25">finish_tmp_packfile<pos:position pos:line="93" pos:column="44"/></name><argument_list pos:line="93" pos:column="44">(<argument><expr><operator pos:line="93" pos:column="45">&amp;<pos:position pos:line="93" pos:column="50"/></operator><name pos:line="93" pos:column="46">tmpname<pos:position pos:line="93" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="55">pack_tmp_name<pos:position pos:line="93" pos:column="68"/></name></expr></argument>,
					    <argument><expr><name pos:line="94" pos:column="45">written_list<pos:position pos:line="94" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="59">nr_written<pos:position pos:line="94" pos:column="69"/></name></expr></argument>,
					    <argument><expr><operator pos:line="95" pos:column="45">&amp;<pos:position pos:line="95" pos:column="50"/></operator><name pos:line="95" pos:column="46">pack_idx_opts<pos:position pos:line="95" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="61">sha1<pos:position pos:line="95" pos:column="65"/></name></expr></argument>)<pos:position pos:line="95" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="67"/></expr_stmt>

			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><name pos:line="97" pos:column="29">write_bitmap_index<pos:position pos:line="97" pos:column="47"/></name></expr>)<pos:position pos:line="97" pos:column="48"/></condition><then pos:line="97" pos:column="48"> <block pos:line="97" pos:column="49">{
				<expr_stmt><expr><call><name pos:line="98" pos:column="33">strbuf_addf<pos:position pos:line="98" pos:column="44"/></name><argument_list pos:line="98" pos:column="44">(<argument><expr><operator pos:line="98" pos:column="45">&amp;<pos:position pos:line="98" pos:column="50"/></operator><name pos:line="98" pos:column="46">tmpname<pos:position pos:line="98" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="55">"%s.bitmap"<pos:position pos:line="98" pos:column="66"/></literal></expr></argument>, <argument><expr><call><name pos:line="98" pos:column="68">sha1_to_hex<pos:position pos:line="98" pos:column="79"/></name><argument_list pos:line="98" pos:column="79">(<argument><expr><name pos:line="98" pos:column="80">sha1<pos:position pos:line="98" pos:column="84"/></name></expr></argument>)<pos:position pos:line="98" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="98" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="87"/></expr_stmt>

				<expr_stmt><expr><call><name pos:line="100" pos:column="33">stop_progress<pos:position pos:line="100" pos:column="46"/></name><argument_list pos:line="100" pos:column="46">(<argument><expr><operator pos:line="100" pos:column="47">&amp;<pos:position pos:line="100" pos:column="52"/></operator><name pos:line="100" pos:column="48">progress_state<pos:position pos:line="100" pos:column="62"/></name></expr></argument>)<pos:position pos:line="100" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="64"/></expr_stmt>

				<expr_stmt><expr><call><name pos:line="102" pos:column="33">bitmap_writer_show_progress<pos:position pos:line="102" pos:column="60"/></name><argument_list pos:line="102" pos:column="60">(<argument><expr><name pos:line="102" pos:column="61">progress<pos:position pos:line="102" pos:column="69"/></name></expr></argument>)<pos:position pos:line="102" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="71"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="103" pos:column="33">bitmap_writer_reuse_bitmaps<pos:position pos:line="103" pos:column="60"/></name><argument_list pos:line="103" pos:column="60">(<argument><expr><operator pos:line="103" pos:column="61">&amp;<pos:position pos:line="103" pos:column="66"/></operator><name pos:line="103" pos:column="62">to_pack<pos:position pos:line="103" pos:column="69"/></name></expr></argument>)<pos:position pos:line="103" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="71"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="104" pos:column="33">bitmap_writer_select_commits<pos:position pos:line="104" pos:column="61"/></name><argument_list pos:line="104" pos:column="61">(<argument><expr><name pos:line="104" pos:column="62">indexed_commits<pos:position pos:line="104" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="79">indexed_commits_nr<pos:position pos:line="104" pos:column="97"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="99">-<pos:position pos:line="104" pos:column="100"/></operator><literal type="number" pos:line="104" pos:column="100">1<pos:position pos:line="104" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="103"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="105" pos:column="33">bitmap_writer_build<pos:position pos:line="105" pos:column="52"/></name><argument_list pos:line="105" pos:column="52">(<argument><expr><operator pos:line="105" pos:column="53">&amp;<pos:position pos:line="105" pos:column="58"/></operator><name pos:line="105" pos:column="54">to_pack<pos:position pos:line="105" pos:column="61"/></name></expr></argument>)<pos:position pos:line="105" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="63"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="106" pos:column="33">bitmap_writer_finish<pos:position pos:line="106" pos:column="53"/></name><argument_list pos:line="106" pos:column="53">(<argument><expr><name pos:line="106" pos:column="54">written_list<pos:position pos:line="106" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="68">nr_written<pos:position pos:line="106" pos:column="78"/></name></expr></argument>,
						     <argument><expr><name><name pos:line="107" pos:column="54">tmpname<pos:position pos:line="107" pos:column="61"/></name><operator pos:line="107" pos:column="61">.<pos:position pos:line="107" pos:column="62"/></operator><name pos:line="107" pos:column="62">buf<pos:position pos:line="107" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="67">write_bitmap_options<pos:position pos:line="107" pos:column="87"/></name></expr></argument>)<pos:position pos:line="107" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="89"/></expr_stmt>
				<expr_stmt><expr><name pos:line="108" pos:column="33">write_bitmap_index<pos:position pos:line="108" pos:column="51"/></name> <operator pos:line="108" pos:column="52">=<pos:position pos:line="108" pos:column="53"/></operator> <literal type="number" pos:line="108" pos:column="54">0<pos:position pos:line="108" pos:column="55"/></literal></expr>;<pos:position pos:line="108" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="109" pos:column="26"/></block></then></if>

			<expr_stmt><expr><call><name pos:line="111" pos:column="25">strbuf_release<pos:position pos:line="111" pos:column="39"/></name><argument_list pos:line="111" pos:column="39">(<argument><expr><operator pos:line="111" pos:column="40">&amp;<pos:position pos:line="111" pos:column="45"/></operator><name pos:line="111" pos:column="41">tmpname<pos:position pos:line="111" pos:column="48"/></name></expr></argument>)<pos:position pos:line="111" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="112" pos:column="25">free<pos:position pos:line="112" pos:column="29"/></name><argument_list pos:line="112" pos:column="29">(<argument><expr><name pos:line="112" pos:column="30">pack_tmp_name<pos:position pos:line="112" pos:column="43"/></name></expr></argument>)<pos:position pos:line="112" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="113" pos:column="25">puts<pos:position pos:line="113" pos:column="29"/></name><argument_list pos:line="113" pos:column="29">(<argument><expr><call><name pos:line="113" pos:column="30">sha1_to_hex<pos:position pos:line="113" pos:column="41"/></name><argument_list pos:line="113" pos:column="41">(<argument><expr><name pos:line="113" pos:column="42">sha1<pos:position pos:line="113" pos:column="46"/></name></expr></argument>)<pos:position pos:line="113" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="113" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="114" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="116" pos:column="17">/* mark written objects as written to previous pack */</comment>
		<for pos:line="117" pos:column="17">for <control pos:line="117" pos:column="21">(<init><expr><name pos:line="117" pos:column="22">j<pos:position pos:line="117" pos:column="23"/></name> <operator pos:line="117" pos:column="24">=<pos:position pos:line="117" pos:column="25"/></operator> <literal type="number" pos:line="117" pos:column="26">0<pos:position pos:line="117" pos:column="27"/></literal></expr>;<pos:position pos:line="117" pos:column="28"/></init> <condition><expr><name pos:line="117" pos:column="29">j<pos:position pos:line="117" pos:column="30"/></name> <operator pos:line="117" pos:column="31">&lt;<pos:position pos:line="117" pos:column="35"/></operator> <name pos:line="117" pos:column="33">nr_written<pos:position pos:line="117" pos:column="43"/></name></expr>;<pos:position pos:line="117" pos:column="44"/></condition> <incr><expr><name pos:line="117" pos:column="45">j<pos:position pos:line="117" pos:column="46"/></name><operator pos:line="117" pos:column="46">++<pos:position pos:line="117" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="117" pos:column="49"/></control> <block pos:line="117" pos:column="50">{
			<expr_stmt><expr><name><name pos:line="118" pos:column="25">written_list<pos:position pos:line="118" pos:column="37"/></name><index pos:line="118" pos:column="37">[<expr><name pos:line="118" pos:column="38">j<pos:position pos:line="118" pos:column="39"/></name></expr>]<pos:position pos:line="118" pos:column="40"/></index></name><operator pos:line="118" pos:column="40">-&gt;<pos:position pos:line="118" pos:column="45"/></operator><name pos:line="118" pos:column="42">offset<pos:position pos:line="118" pos:column="48"/></name> <operator pos:line="118" pos:column="49">=<pos:position pos:line="118" pos:column="50"/></operator> <operator pos:line="118" pos:column="51">(<pos:position pos:line="118" pos:column="52"/></operator><name pos:line="118" pos:column="52">off_t<pos:position pos:line="118" pos:column="57"/></name><operator pos:line="118" pos:column="57">)<pos:position pos:line="118" pos:column="58"/></operator><operator pos:line="118" pos:column="58">-<pos:position pos:line="118" pos:column="59"/></operator><literal type="number" pos:line="118" pos:column="59">1<pos:position pos:line="118" pos:column="60"/></literal></expr>;<pos:position pos:line="118" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="119" pos:column="18"/></block></for>
		<expr_stmt><expr><name pos:line="120" pos:column="17">nr_remaining<pos:position pos:line="120" pos:column="29"/></name> <operator pos:line="120" pos:column="30">-=<pos:position pos:line="120" pos:column="32"/></operator> <name pos:line="120" pos:column="33">nr_written<pos:position pos:line="120" pos:column="43"/></name></expr>;<pos:position pos:line="120" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="121" pos:column="10"/></block> while <condition pos:line="121" pos:column="17">(<expr><name pos:line="121" pos:column="18">nr_remaining<pos:position pos:line="121" pos:column="30"/></name> <operator pos:line="121" pos:column="31">&amp;&amp;<pos:position pos:line="121" pos:column="41"/></operator> <name pos:line="121" pos:column="34">i<pos:position pos:line="121" pos:column="35"/></name> <operator pos:line="121" pos:column="36">&lt;<pos:position pos:line="121" pos:column="40"/></operator> <name><name pos:line="121" pos:column="38">to_pack<pos:position pos:line="121" pos:column="45"/></name><operator pos:line="121" pos:column="45">.<pos:position pos:line="121" pos:column="46"/></operator><name pos:line="121" pos:column="46">nr_objects<pos:position pos:line="121" pos:column="56"/></name></name></expr>)<pos:position pos:line="121" pos:column="57"/></condition>;<pos:position pos:line="121" pos:column="58"/></do>

	<expr_stmt><expr><call><name pos:line="123" pos:column="9">free<pos:position pos:line="123" pos:column="13"/></name><argument_list pos:line="123" pos:column="13">(<argument><expr><name pos:line="123" pos:column="14">written_list<pos:position pos:line="123" pos:column="26"/></name></expr></argument>)<pos:position pos:line="123" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="124" pos:column="9">free<pos:position pos:line="124" pos:column="13"/></name><argument_list pos:line="124" pos:column="13">(<argument><expr><name pos:line="124" pos:column="14">write_order<pos:position pos:line="124" pos:column="25"/></name></expr></argument>)<pos:position pos:line="124" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="125" pos:column="9">stop_progress<pos:position pos:line="125" pos:column="22"/></name><argument_list pos:line="125" pos:column="22">(<argument><expr><operator pos:line="125" pos:column="23">&amp;<pos:position pos:line="125" pos:column="28"/></operator><name pos:line="125" pos:column="24">progress_state<pos:position pos:line="125" pos:column="38"/></name></expr></argument>)<pos:position pos:line="125" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="40"/></expr_stmt>
	<if pos:line="126" pos:column="9">if <condition pos:line="126" pos:column="12">(<expr><name pos:line="126" pos:column="13">written<pos:position pos:line="126" pos:column="20"/></name> <operator pos:line="126" pos:column="21">!=<pos:position pos:line="126" pos:column="23"/></operator> <name pos:line="126" pos:column="24">nr_result<pos:position pos:line="126" pos:column="33"/></name></expr>)<pos:position pos:line="126" pos:column="34"/></condition><then pos:line="126" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="127" pos:column="17">die<pos:position pos:line="127" pos:column="20"/></name><argument_list pos:line="127" pos:column="20">(<argument><expr><literal type="string" pos:line="127" pos:column="21">"wrote %"<pos:position pos:line="127" pos:column="30"/></literal><name pos:line="127" pos:column="30">PRIu32<pos:position pos:line="127" pos:column="36"/></name><literal type="string" pos:line="127" pos:column="36">" objects while expecting %"<pos:position pos:line="127" pos:column="64"/></literal><name pos:line="127" pos:column="64">PRIu32<pos:position pos:line="127" pos:column="70"/></name></expr></argument>,
			<argument><expr><name pos:line="128" pos:column="25">written<pos:position pos:line="128" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="34">nr_result<pos:position pos:line="128" pos:column="43"/></name></expr></argument>)<pos:position pos:line="128" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="45"/></expr_stmt></block></then></if>
}<pos:position pos:line="129" pos:column="2"/></block></function></unit>
