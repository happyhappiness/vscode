<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4452_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">show_ref<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">refname<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">object_id<pos:position pos:line="1" pos:column="64"/></name></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">oid<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
		    <parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">flag<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">void<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">cbdata<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">hex<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">object_id<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">peeled<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">show_head<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&amp;&amp;<pos:position pos:line="7" pos:column="33"/></operator> <operator pos:line="7" pos:column="26">!<pos:position pos:line="7" pos:column="27"/></operator><call><name pos:line="7" pos:column="27">strcmp<pos:position pos:line="7" pos:column="33"/></name><argument_list pos:line="7" pos:column="33">(<argument><expr><name pos:line="7" pos:column="34">refname<pos:position pos:line="7" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="43">"HEAD"<pos:position pos:line="7" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="51"/></condition><then pos:line="7" pos:column="51">
		<block type="pseudo"><goto pos:line="8" pos:column="17">goto <name pos:line="8" pos:column="22">match<pos:position pos:line="8" pos:column="27"/></name>;<pos:position pos:line="8" pos:column="28"/></goto></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">tags_only<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">||<pos:position pos:line="10" pos:column="25"/></operator> <name pos:line="10" pos:column="26">heads_only<pos:position pos:line="10" pos:column="36"/></name></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37"> <block pos:line="10" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">match<pos:position pos:line="11" pos:column="26"/></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>

		<expr_stmt><expr><name pos:line="13" pos:column="17">match<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">heads_only<pos:position pos:line="13" pos:column="35"/></name> <operator pos:line="13" pos:column="36">&amp;&amp;<pos:position pos:line="13" pos:column="46"/></operator> <call><name pos:line="13" pos:column="39">starts_with<pos:position pos:line="13" pos:column="50"/></name><argument_list pos:line="13" pos:column="50">(<argument><expr><name pos:line="13" pos:column="51">refname<pos:position pos:line="13" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="60">"refs/heads/"<pos:position pos:line="13" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">match<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">|=<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="26">tags_only<pos:position pos:line="14" pos:column="35"/></name> <operator pos:line="14" pos:column="36">&amp;&amp;<pos:position pos:line="14" pos:column="46"/></operator> <call><name pos:line="14" pos:column="39">starts_with<pos:position pos:line="14" pos:column="50"/></name><argument_list pos:line="14" pos:column="50">(<argument><expr><name pos:line="14" pos:column="51">refname<pos:position pos:line="14" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="60">"refs/tags/"<pos:position pos:line="14" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="74"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">match<pos:position pos:line="15" pos:column="27"/></name></expr>)<pos:position pos:line="15" pos:column="28"/></condition><then pos:line="15" pos:column="28">
			<block type="pseudo"><return pos:line="16" pos:column="25">return <expr><literal type="number" pos:line="16" pos:column="32">0<pos:position pos:line="16" pos:column="33"/></literal></expr>;<pos:position pos:line="16" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">pattern<pos:position pos:line="18" pos:column="20"/></name></expr>)<pos:position pos:line="18" pos:column="21"/></condition><then pos:line="18" pos:column="21"> <block pos:line="18" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">int<pos:position pos:line="19" pos:column="20"/></name></type> <name pos:line="19" pos:column="21">reflen<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><call><name pos:line="19" pos:column="30">strlen<pos:position pos:line="19" pos:column="36"/></name><argument_list pos:line="19" pos:column="36">(<argument><expr><name pos:line="19" pos:column="37">refname<pos:position pos:line="19" pos:column="44"/></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="20" pos:column="17">const<pos:position pos:line="20" pos:column="22"/></specifier> <name pos:line="20" pos:column="23">char<pos:position pos:line="20" pos:column="27"/></name> <modifier pos:line="20" pos:column="28">*<pos:position pos:line="20" pos:column="29"/></modifier><modifier pos:line="20" pos:column="29">*<pos:position pos:line="20" pos:column="30"/></modifier></type><name pos:line="20" pos:column="30">p<pos:position pos:line="20" pos:column="31"/></name> <init pos:line="20" pos:column="32">= <expr><name pos:line="20" pos:column="34">pattern<pos:position pos:line="20" pos:column="41"/></name></expr></init></decl>, <modifier pos:line="20" pos:column="43">*<pos:position pos:line="20" pos:column="44"/></modifier><decl><type ref="prev"/><name pos:line="20" pos:column="44">m<pos:position pos:line="20" pos:column="45"/></name></decl>;<pos:position pos:line="20" pos:column="46"/></decl_stmt>
		<while pos:line="21" pos:column="17">while <condition pos:line="21" pos:column="23">(<expr><operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">m<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">=<pos:position pos:line="21" pos:column="28"/></operator> <operator pos:line="21" pos:column="29">*<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="30">p<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">++<pos:position pos:line="21" pos:column="33"/></operator><operator pos:line="21" pos:column="33">)<pos:position pos:line="21" pos:column="34"/></operator> <operator pos:line="21" pos:column="35">!=<pos:position pos:line="21" pos:column="37"/></operator> <name pos:line="21" pos:column="38">NULL<pos:position pos:line="21" pos:column="42"/></name></expr>)<pos:position pos:line="21" pos:column="43"/></condition> <block pos:line="21" pos:column="44">{
			<decl_stmt><decl><type><name pos:line="22" pos:column="25">int<pos:position pos:line="22" pos:column="28"/></name></type> <name pos:line="22" pos:column="29">len<pos:position pos:line="22" pos:column="32"/></name> <init pos:line="22" pos:column="33">= <expr><call><name pos:line="22" pos:column="35">strlen<pos:position pos:line="22" pos:column="41"/></name><argument_list pos:line="22" pos:column="41">(<argument><expr><name pos:line="22" pos:column="42">m<pos:position pos:line="22" pos:column="43"/></name></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="45"/></decl_stmt>
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><name pos:line="23" pos:column="29">len<pos:position pos:line="23" pos:column="32"/></name> <operator pos:line="23" pos:column="33">&gt;<pos:position pos:line="23" pos:column="37"/></operator> <name pos:line="23" pos:column="35">reflen<pos:position pos:line="23" pos:column="41"/></name></expr>)<pos:position pos:line="23" pos:column="42"/></condition><then pos:line="23" pos:column="42">
				<block type="pseudo"><continue pos:line="24" pos:column="33">continue;<pos:position pos:line="24" pos:column="42"/></continue></block></then></if>
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><call><name pos:line="25" pos:column="29">memcmp<pos:position pos:line="25" pos:column="35"/></name><argument_list pos:line="25" pos:column="35">(<argument><expr><name pos:line="25" pos:column="36">m<pos:position pos:line="25" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="39">refname<pos:position pos:line="25" pos:column="46"/></name> <operator pos:line="25" pos:column="47">+<pos:position pos:line="25" pos:column="48"/></operator> <name pos:line="25" pos:column="49">reflen<pos:position pos:line="25" pos:column="55"/></name> <operator pos:line="25" pos:column="56">-<pos:position pos:line="25" pos:column="57"/></operator> <name pos:line="25" pos:column="58">len<pos:position pos:line="25" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="63">len<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="68"/></condition><then pos:line="25" pos:column="68">
				<block type="pseudo"><continue pos:line="26" pos:column="33">continue;<pos:position pos:line="26" pos:column="42"/></continue></block></then></if>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><name pos:line="27" pos:column="29">len<pos:position pos:line="27" pos:column="32"/></name> <operator pos:line="27" pos:column="33">==<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="36">reflen<pos:position pos:line="27" pos:column="42"/></name></expr>)<pos:position pos:line="27" pos:column="43"/></condition><then pos:line="27" pos:column="43">
				<block type="pseudo"><goto pos:line="28" pos:column="33">goto <name pos:line="28" pos:column="38">match<pos:position pos:line="28" pos:column="43"/></name>;<pos:position pos:line="28" pos:column="44"/></goto></block></then></if>
			<comment type="block" pos:line="29" pos:column="25">/* "--verify" requires an exact match */</comment>
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name pos:line="30" pos:column="29">verify<pos:position pos:line="30" pos:column="35"/></name></expr>)<pos:position pos:line="30" pos:column="36"/></condition><then pos:line="30" pos:column="36">
				<block type="pseudo"><continue pos:line="31" pos:column="33">continue;<pos:position pos:line="31" pos:column="42"/></continue></block></then></if>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><name><name pos:line="32" pos:column="29">refname<pos:position pos:line="32" pos:column="36"/></name><index pos:line="32" pos:column="36">[<expr><name pos:line="32" pos:column="37">reflen<pos:position pos:line="32" pos:column="43"/></name> <operator pos:line="32" pos:column="44">-<pos:position pos:line="32" pos:column="45"/></operator> <name pos:line="32" pos:column="46">len<pos:position pos:line="32" pos:column="49"/></name> <operator pos:line="32" pos:column="50">-<pos:position pos:line="32" pos:column="51"/></operator> <literal type="number" pos:line="32" pos:column="52">1<pos:position pos:line="32" pos:column="53"/></literal></expr>]<pos:position pos:line="32" pos:column="54"/></index></name> <operator pos:line="32" pos:column="55">==<pos:position pos:line="32" pos:column="57"/></operator> <literal type="char" pos:line="32" pos:column="58">'/'<pos:position pos:line="32" pos:column="61"/></literal></expr>)<pos:position pos:line="32" pos:column="62"/></condition><then pos:line="32" pos:column="62">
				<block type="pseudo"><goto pos:line="33" pos:column="33">goto <name pos:line="33" pos:column="38">match<pos:position pos:line="33" pos:column="43"/></name>;<pos:position pos:line="33" pos:column="44"/></goto></block></then></if>
		}<pos:position pos:line="34" pos:column="18"/></block></while>
		<return pos:line="35" pos:column="17">return <expr><literal type="number" pos:line="35" pos:column="24">0<pos:position pos:line="35" pos:column="25"/></literal></expr>;<pos:position pos:line="35" pos:column="26"/></return>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

<label><name pos:line="38" pos:column="1">match<pos:position pos:line="38" pos:column="6"/></name>:<pos:position pos:line="38" pos:column="7"/></label>
	<expr_stmt><expr><name pos:line="39" pos:column="9">found_match<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">++<pos:position pos:line="39" pos:column="22"/></operator></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>

	<comment type="block" pos:line="41" pos:column="9">/* This changes the semantics slightly that even under quiet we
	 * detect and return error if the repository is corrupt and
	 * ref points at a nonexistent object.
	 */</comment>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><call><name pos:line="45" pos:column="14">has_sha1_file<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><name><name pos:line="45" pos:column="28">oid<pos:position pos:line="45" pos:column="31"/></name><operator pos:line="45" pos:column="31">-&gt;<pos:position pos:line="45" pos:column="36"/></operator><name pos:line="45" pos:column="33">hash<pos:position pos:line="45" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="39"/></condition><then pos:line="45" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="17">die<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">(<argument><expr><literal type="string" pos:line="46" pos:column="21">"git show-ref: bad ref %s (%s)"<pos:position pos:line="46" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="54">refname<pos:position pos:line="46" pos:column="61"/></name></expr></argument>,
		    <argument><expr><call><name pos:line="47" pos:column="21">oid_to_hex<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">oid<pos:position pos:line="47" pos:column="35"/></name></expr></argument>)<pos:position pos:line="47" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="38"/></expr_stmt></block></then></if>

	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">quiet<pos:position pos:line="49" pos:column="18"/></name></expr>)<pos:position pos:line="49" pos:column="19"/></condition><then pos:line="49" pos:column="19">
		<block type="pseudo"><return pos:line="50" pos:column="17">return <expr><literal type="number" pos:line="50" pos:column="24">0<pos:position pos:line="50" pos:column="25"/></literal></expr>;<pos:position pos:line="50" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="52" pos:column="9">show_one<pos:position pos:line="52" pos:column="17"/></name><argument_list pos:line="52" pos:column="17">(<argument><expr><name pos:line="52" pos:column="18">refname<pos:position pos:line="52" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="27">oid<pos:position pos:line="52" pos:column="30"/></name></expr></argument>)<pos:position pos:line="52" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="32"/></expr_stmt>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><operator pos:line="54" pos:column="13">!<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="14">deref_tags<pos:position pos:line="54" pos:column="24"/></name></expr>)<pos:position pos:line="54" pos:column="25"/></condition><then pos:line="54" pos:column="25">
		<block type="pseudo"><return pos:line="55" pos:column="17">return <expr><literal type="number" pos:line="55" pos:column="24">0<pos:position pos:line="55" pos:column="25"/></literal></expr>;<pos:position pos:line="55" pos:column="26"/></return></block></then></if>

	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><operator pos:line="57" pos:column="13">!<pos:position pos:line="57" pos:column="14"/></operator><call><name pos:line="57" pos:column="14">peel_ref<pos:position pos:line="57" pos:column="22"/></name><argument_list pos:line="57" pos:column="22">(<argument><expr><name pos:line="57" pos:column="23">refname<pos:position pos:line="57" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="32">peeled<pos:position pos:line="57" pos:column="38"/></name><operator pos:line="57" pos:column="38">.<pos:position pos:line="57" pos:column="39"/></operator><name pos:line="57" pos:column="39">hash<pos:position pos:line="57" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="45"/></condition><then pos:line="57" pos:column="45"> <block pos:line="57" pos:column="46">{
		<expr_stmt><expr><name pos:line="58" pos:column="17">hex<pos:position pos:line="58" pos:column="20"/></name> <operator pos:line="58" pos:column="21">=<pos:position pos:line="58" pos:column="22"/></operator> <call><name pos:line="58" pos:column="23">find_unique_abbrev<pos:position pos:line="58" pos:column="41"/></name><argument_list pos:line="58" pos:column="41">(<argument><expr><name><name pos:line="58" pos:column="42">peeled<pos:position pos:line="58" pos:column="48"/></name><operator pos:line="58" pos:column="48">.<pos:position pos:line="58" pos:column="49"/></operator><name pos:line="58" pos:column="49">hash<pos:position pos:line="58" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="55">abbrev<pos:position pos:line="58" pos:column="61"/></name></expr></argument>)<pos:position pos:line="58" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">printf<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">(<argument><expr><literal type="string" pos:line="59" pos:column="24">"%s %s^{}\n"<pos:position pos:line="59" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="38">hex<pos:position pos:line="59" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="43">refname<pos:position pos:line="59" pos:column="50"/></name></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>
	<return pos:line="61" pos:column="9">return <expr><literal type="number" pos:line="61" pos:column="16">0<pos:position pos:line="61" pos:column="17"/></literal></expr>;<pos:position pos:line="61" pos:column="18"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
