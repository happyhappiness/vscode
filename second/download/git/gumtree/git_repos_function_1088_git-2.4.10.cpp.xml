<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1088_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">reuse_worktree_file<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">name<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">unsigned<pos:position pos:line="1" pos:column="64"/></name> <name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">sha1<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="77">int<pos:position pos:line="1" pos:column="80"/></name></type> <name pos:line="1" pos:column="81">want_file<pos:position pos:line="1" pos:column="90"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="91"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name><name pos:line="3" pos:column="15">struct<pos:position pos:line="3" pos:column="21"/></name> <name pos:line="3" pos:column="22">cache_entry<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">ce<pos:position pos:line="3" pos:column="37"/></name></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">stat<pos:position pos:line="4" pos:column="20"/></name></name></type> <name pos:line="4" pos:column="21">st<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">pos<pos:position pos:line="5" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="18">len<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/*
	 * We do not read the cache ourselves here, because the
	 * benchmark with my previous version that always reads cache
	 * shows that it makes things worse for diff-tree comparing
	 * two linux-2.6 kernel trees in an already checked out work
	 * tree.  This is because most diff-tree comparisons deal with
	 * only a small number of files, while reading the cache is
	 * expensive for a large project, and its cost outweighs the
	 * savings we get by not inflating the object to a temporary
	 * file.  Practically, this code only helps when we are used
	 * by diff-cache --cached, which does read the cache before
	 * calling us.
	 */</comment>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">active_cache<pos:position pos:line="20" pos:column="26"/></name></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27">
		<block type="pseudo"><return pos:line="21" pos:column="17">return <expr><literal type="number" pos:line="21" pos:column="24">0<pos:position pos:line="21" pos:column="25"/></literal></expr>;<pos:position pos:line="21" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="23" pos:column="9">/* We want to avoid the working directory if our caller
	 * doesn't need the data in a normal file, this system
	 * is rather slow with its stat/open/mmap/close syscalls,
	 * and the object is contained in a pack file.  The pack
	 * is probably already open and will be faster to obtain
	 * the data through than the working directory.  Loose
	 * objects however would tend to be slower as they need
	 * to be individually opened and inflated.
	 */</comment>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">FAST_WORKING_DIRECTORY<pos:position pos:line="32" pos:column="36"/></name> <operator pos:line="32" pos:column="37">&amp;&amp;<pos:position pos:line="32" pos:column="47"/></operator> <operator pos:line="32" pos:column="40">!<pos:position pos:line="32" pos:column="41"/></operator><name pos:line="32" pos:column="41">want_file<pos:position pos:line="32" pos:column="50"/></name> <operator pos:line="32" pos:column="51">&amp;&amp;<pos:position pos:line="32" pos:column="61"/></operator> <call><name pos:line="32" pos:column="54">has_sha1_pack<pos:position pos:line="32" pos:column="67"/></name><argument_list pos:line="32" pos:column="67">(<argument><expr><name pos:line="32" pos:column="68">sha1<pos:position pos:line="32" pos:column="72"/></name></expr></argument>)<pos:position pos:line="32" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="74"/></condition><then pos:line="32" pos:column="74">
		<block type="pseudo"><return pos:line="33" pos:column="17">return <expr><literal type="number" pos:line="33" pos:column="24">0<pos:position pos:line="33" pos:column="25"/></literal></expr>;<pos:position pos:line="33" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="35" pos:column="9">len<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <call><name pos:line="35" pos:column="15">strlen<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">name<pos:position pos:line="35" pos:column="26"/></name></expr></argument>)<pos:position pos:line="35" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="36" pos:column="9">pos<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">cache_name_pos<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">name<pos:position pos:line="36" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="36">len<pos:position pos:line="36" pos:column="39"/></name></expr></argument>)<pos:position pos:line="36" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="41"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">pos<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">&lt;<pos:position pos:line="37" pos:column="21"/></operator> <literal type="number" pos:line="37" pos:column="19">0<pos:position pos:line="37" pos:column="20"/></literal></expr>)<pos:position pos:line="37" pos:column="21"/></condition><then pos:line="37" pos:column="21">
		<block type="pseudo"><return pos:line="38" pos:column="17">return <expr><literal type="number" pos:line="38" pos:column="24">0<pos:position pos:line="38" pos:column="25"/></literal></expr>;<pos:position pos:line="38" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="39" pos:column="9">ce<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <name><name pos:line="39" pos:column="14">active_cache<pos:position pos:line="39" pos:column="26"/></name><index pos:line="39" pos:column="26">[<expr><name pos:line="39" pos:column="27">pos<pos:position pos:line="39" pos:column="30"/></name></expr>]<pos:position pos:line="39" pos:column="31"/></index></name></expr>;<pos:position pos:line="39" pos:column="32"/></expr_stmt>

	<comment type="block" pos:line="41" pos:column="9">/*
	 * This is not the sha1 we are looking for, or
	 * unreusable because it is not a regular file.
	 */</comment>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name pos:line="45" pos:column="13">hashcmp<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name pos:line="45" pos:column="21">sha1<pos:position pos:line="45" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="27">ce<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">-&gt;<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="31">sha1<pos:position pos:line="45" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call> <operator pos:line="45" pos:column="37">||<pos:position pos:line="45" pos:column="39"/></operator> <operator pos:line="45" pos:column="40">!<pos:position pos:line="45" pos:column="41"/></operator><call><name pos:line="45" pos:column="41">S_ISREG<pos:position pos:line="45" pos:column="48"/></name><argument_list pos:line="45" pos:column="48">(<argument><expr><name><name pos:line="45" pos:column="49">ce<pos:position pos:line="45" pos:column="51"/></name><operator pos:line="45" pos:column="51">-&gt;<pos:position pos:line="45" pos:column="56"/></operator><name pos:line="45" pos:column="53">ce_mode<pos:position pos:line="45" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="62"/></condition><then pos:line="45" pos:column="62">
		<block type="pseudo"><return pos:line="46" pos:column="17">return <expr><literal type="number" pos:line="46" pos:column="24">0<pos:position pos:line="46" pos:column="25"/></literal></expr>;<pos:position pos:line="46" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="48" pos:column="9">/*
	 * If ce is marked as "assume unchanged", there is no
	 * guarantee that work tree matches what we are looking for.
	 */</comment>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><operator pos:line="52" pos:column="13">(<pos:position pos:line="52" pos:column="14"/></operator><name><name pos:line="52" pos:column="14">ce<pos:position pos:line="52" pos:column="16"/></name><operator pos:line="52" pos:column="16">-&gt;<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="18">ce_flags<pos:position pos:line="52" pos:column="26"/></name></name> <operator pos:line="52" pos:column="27">&amp;<pos:position pos:line="52" pos:column="32"/></operator> <name pos:line="52" pos:column="29">CE_VALID<pos:position pos:line="52" pos:column="37"/></name><operator pos:line="52" pos:column="37">)<pos:position pos:line="52" pos:column="38"/></operator> <operator pos:line="52" pos:column="39">||<pos:position pos:line="52" pos:column="41"/></operator> <call><name pos:line="52" pos:column="42">ce_skip_worktree<pos:position pos:line="52" pos:column="58"/></name><argument_list pos:line="52" pos:column="58">(<argument><expr><name pos:line="52" pos:column="59">ce<pos:position pos:line="52" pos:column="61"/></name></expr></argument>)<pos:position pos:line="52" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="63"/></condition><then pos:line="52" pos:column="63">
		<block type="pseudo"><return pos:line="53" pos:column="17">return <expr><literal type="number" pos:line="53" pos:column="24">0<pos:position pos:line="53" pos:column="25"/></literal></expr>;<pos:position pos:line="53" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="55" pos:column="9">/*
	 * If ce matches the file in the work tree, we can reuse it.
	 */</comment>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><call><name pos:line="58" pos:column="13">ce_uptodate<pos:position pos:line="58" pos:column="24"/></name><argument_list pos:line="58" pos:column="24">(<argument><expr><name pos:line="58" pos:column="25">ce<pos:position pos:line="58" pos:column="27"/></name></expr></argument>)<pos:position pos:line="58" pos:column="28"/></argument_list></call> <operator pos:line="58" pos:column="29">||<pos:position pos:line="58" pos:column="31"/></operator>
	    <operator pos:line="59" pos:column="13">(<pos:position pos:line="59" pos:column="14"/></operator><operator pos:line="59" pos:column="14">!<pos:position pos:line="59" pos:column="15"/></operator><call><name pos:line="59" pos:column="15">lstat<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><name pos:line="59" pos:column="21">name<pos:position pos:line="59" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="27">&amp;<pos:position pos:line="59" pos:column="32"/></operator><name pos:line="59" pos:column="28">st<pos:position pos:line="59" pos:column="30"/></name></expr></argument>)<pos:position pos:line="59" pos:column="31"/></argument_list></call> <operator pos:line="59" pos:column="32">&amp;&amp;<pos:position pos:line="59" pos:column="42"/></operator> <operator pos:line="59" pos:column="35">!<pos:position pos:line="59" pos:column="36"/></operator><call><name pos:line="59" pos:column="36">ce_match_stat<pos:position pos:line="59" pos:column="49"/></name><argument_list pos:line="59" pos:column="49">(<argument><expr><name pos:line="59" pos:column="50">ce<pos:position pos:line="59" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="54">&amp;<pos:position pos:line="59" pos:column="59"/></operator><name pos:line="59" pos:column="55">st<pos:position pos:line="59" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="59">0<pos:position pos:line="59" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="61"/></argument_list></call><operator pos:line="59" pos:column="61">)<pos:position pos:line="59" pos:column="62"/></operator></expr>)<pos:position pos:line="59" pos:column="63"/></condition><then pos:line="59" pos:column="63">
		<block type="pseudo"><return pos:line="60" pos:column="17">return <expr><literal type="number" pos:line="60" pos:column="24">1<pos:position pos:line="60" pos:column="25"/></literal></expr>;<pos:position pos:line="60" pos:column="26"/></return></block></then></if>

	<return pos:line="62" pos:column="9">return <expr><literal type="number" pos:line="62" pos:column="16">0<pos:position pos:line="62" pos:column="17"/></literal></expr>;<pos:position pos:line="62" pos:column="18"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
