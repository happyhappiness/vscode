<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1881.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">merge_name<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">remote<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="44">struct<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">strbuf<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">msg<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">commit<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">remote_head<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">branch_head<pos:position pos:line="4" pos:column="34"/></name><index pos:line="4" pos:column="34">[<expr><literal type="number" pos:line="4" pos:column="35">20<pos:position pos:line="4" pos:column="37"/></literal></expr>]<pos:position pos:line="4" pos:column="38"/></index></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">buf<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">STRBUF_INIT<pos:position pos:line="5" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">bname<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name pos:line="6" pos:column="31">STRBUF_INIT<pos:position pos:line="6" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">ptr<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">found_ref<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">len<pos:position pos:line="9" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="18">early<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">strbuf_branchname<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><operator pos:line="11" pos:column="27">&amp;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="28">bname<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="35">remote<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">remote<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <name><name pos:line="12" pos:column="18">bname<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">.<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="24">buf<pos:position pos:line="12" pos:column="27"/></name></name></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">memset<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">branch_head<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="29">0<pos:position pos:line="14" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="32">sizeof<argument_list pos:line="14" pos:column="38">(<argument><expr><name pos:line="14" pos:column="39">branch_head<pos:position pos:line="14" pos:column="50"/></name></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">remote_head<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <call><name pos:line="15" pos:column="23">get_merge_parent<pos:position pos:line="15" pos:column="39"/></name><argument_list pos:line="15" pos:column="39">(<argument><expr><name pos:line="15" pos:column="40">remote<pos:position pos:line="15" pos:column="46"/></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">remote_head<pos:position pos:line="16" pos:column="25"/></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">die<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><call><name pos:line="17" pos:column="21">_<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><literal type="string" pos:line="17" pos:column="23">"'%s' does not point to a commit"<pos:position pos:line="17" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="17" pos:column="59">remote<pos:position pos:line="17" pos:column="65"/></name></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="67"/></expr_stmt></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">dwim_ref<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">remote<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="30">strlen<pos:position pos:line="19" pos:column="36"/></name><argument_list pos:line="19" pos:column="36">(<argument><expr><name pos:line="19" pos:column="37">remote<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">branch_head<pos:position pos:line="19" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="59">&amp;<pos:position pos:line="19" pos:column="64"/></operator><name pos:line="19" pos:column="60">found_ref<pos:position pos:line="19" pos:column="69"/></name></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call> <operator pos:line="19" pos:column="71">&gt;<pos:position pos:line="19" pos:column="75"/></operator> <literal type="number" pos:line="19" pos:column="73">0<pos:position pos:line="19" pos:column="74"/></literal></expr>)<pos:position pos:line="19" pos:column="75"/></condition><then pos:line="19" pos:column="75"> <block pos:line="19" pos:column="76">{
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">starts_with<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">found_ref<pos:position pos:line="20" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="44">"refs/heads/"<pos:position pos:line="20" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="59"/></condition><then pos:line="20" pos:column="59"> <block pos:line="20" pos:column="60">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">strbuf_addf<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><name pos:line="21" pos:column="37">msg<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="42">"%s\t\tbranch '%s' of .\n"<pos:position pos:line="21" pos:column="68"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="22" pos:column="37">sha1_to_hex<pos:position pos:line="22" pos:column="48"/></name><argument_list pos:line="22" pos:column="48">(<argument><expr><name pos:line="22" pos:column="49">branch_head<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="22" pos:column="63">remote<pos:position pos:line="22" pos:column="69"/></name></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="71"/></expr_stmt>
			<goto pos:line="23" pos:column="25">goto <name pos:line="23" pos:column="30">cleanup<pos:position pos:line="23" pos:column="37"/></name>;<pos:position pos:line="23" pos:column="38"/></goto>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">starts_with<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">found_ref<pos:position pos:line="25" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="44">"refs/tags/"<pos:position pos:line="25" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="58"/></condition><then pos:line="25" pos:column="58"> <block pos:line="25" pos:column="59">{
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">strbuf_addf<pos:position pos:line="26" pos:column="36"/></name><argument_list pos:line="26" pos:column="36">(<argument><expr><name pos:line="26" pos:column="37">msg<pos:position pos:line="26" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="42">"%s\t\ttag '%s' of .\n"<pos:position pos:line="26" pos:column="65"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="27" pos:column="37">sha1_to_hex<pos:position pos:line="27" pos:column="48"/></name><argument_list pos:line="27" pos:column="48">(<argument><expr><name pos:line="27" pos:column="49">branch_head<pos:position pos:line="27" pos:column="60"/></name></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="27" pos:column="63">remote<pos:position pos:line="27" pos:column="69"/></name></expr></argument>)<pos:position pos:line="27" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="71"/></expr_stmt>
			<goto pos:line="28" pos:column="25">goto <name pos:line="28" pos:column="30">cleanup<pos:position pos:line="28" pos:column="37"/></name>;<pos:position pos:line="28" pos:column="38"/></goto>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><call><name pos:line="30" pos:column="21">starts_with<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">found_ref<pos:position pos:line="30" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="44">"refs/remotes/"<pos:position pos:line="30" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="61"/></condition><then pos:line="30" pos:column="61"> <block pos:line="30" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">strbuf_addf<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><name pos:line="31" pos:column="37">msg<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="42">"%s\t\tremote-tracking branch '%s' of .\n"<pos:position pos:line="31" pos:column="84"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="32" pos:column="37">sha1_to_hex<pos:position pos:line="32" pos:column="48"/></name><argument_list pos:line="32" pos:column="48">(<argument><expr><name pos:line="32" pos:column="49">branch_head<pos:position pos:line="32" pos:column="60"/></name></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="32" pos:column="63">remote<pos:position pos:line="32" pos:column="69"/></name></expr></argument>)<pos:position pos:line="32" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="71"/></expr_stmt>
			<goto pos:line="33" pos:column="25">goto <name pos:line="33" pos:column="30">cleanup<pos:position pos:line="33" pos:column="37"/></name>;<pos:position pos:line="33" pos:column="38"/></goto>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="37" pos:column="9">/* See if remote matches &lt;name&gt;^^^.. or &lt;name&gt;~&lt;number&gt; */</comment>
	<for pos:line="38" pos:column="9">for <control pos:line="38" pos:column="13">(<init><expr><name pos:line="38" pos:column="14">len<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">=<pos:position pos:line="38" pos:column="19"/></operator> <literal type="number" pos:line="38" pos:column="20">0<pos:position pos:line="38" pos:column="21"/></literal></expr><operator pos:line="38" pos:column="21">,<pos:position pos:line="38" pos:column="22"/></operator> <expr><name pos:line="38" pos:column="23">ptr<pos:position pos:line="38" pos:column="26"/></name> <operator pos:line="38" pos:column="27">=<pos:position pos:line="38" pos:column="28"/></operator> <name pos:line="38" pos:column="29">remote<pos:position pos:line="38" pos:column="35"/></name> <operator pos:line="38" pos:column="36">+<pos:position pos:line="38" pos:column="37"/></operator> <call><name pos:line="38" pos:column="38">strlen<pos:position pos:line="38" pos:column="44"/></name><argument_list pos:line="38" pos:column="44">(<argument><expr><name pos:line="38" pos:column="45">remote<pos:position pos:line="38" pos:column="51"/></name></expr></argument>)<pos:position pos:line="38" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="53"/></init>
	     <condition><expr><name pos:line="39" pos:column="14">remote<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">&lt;<pos:position pos:line="39" pos:column="25"/></operator> <name pos:line="39" pos:column="23">ptr<pos:position pos:line="39" pos:column="26"/></name> <operator pos:line="39" pos:column="27">&amp;&amp;<pos:position pos:line="39" pos:column="37"/></operator> <name><name pos:line="39" pos:column="30">ptr<pos:position pos:line="39" pos:column="33"/></name><index pos:line="39" pos:column="33">[<expr><operator pos:line="39" pos:column="34">-<pos:position pos:line="39" pos:column="35"/></operator><literal type="number" pos:line="39" pos:column="35">1<pos:position pos:line="39" pos:column="36"/></literal></expr>]<pos:position pos:line="39" pos:column="37"/></index></name> <operator pos:line="39" pos:column="38">==<pos:position pos:line="39" pos:column="40"/></operator> <literal type="char" pos:line="39" pos:column="41">'^'<pos:position pos:line="39" pos:column="44"/></literal></expr>;<pos:position pos:line="39" pos:column="45"/></condition>
	     <incr><expr><name pos:line="40" pos:column="14">ptr<pos:position pos:line="40" pos:column="17"/></name><operator pos:line="40" pos:column="17">--<pos:position pos:line="40" pos:column="19"/></operator></expr></incr>)<pos:position pos:line="40" pos:column="20"/></control>
		<block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="17">len<pos:position pos:line="41" pos:column="20"/></name><operator pos:line="41" pos:column="20">++<pos:position pos:line="41" pos:column="22"/></operator></expr>;<pos:position pos:line="41" pos:column="23"/></expr_stmt></block></for>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">len<pos:position pos:line="42" pos:column="16"/></name></expr>)<pos:position pos:line="42" pos:column="17"/></condition><then pos:line="42" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="17">early<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <literal type="number" pos:line="43" pos:column="25">1<pos:position pos:line="43" pos:column="26"/></literal></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt></block></then>
	<else pos:line="44" pos:column="9">else <block pos:line="44" pos:column="14">{
		<expr_stmt><expr><name pos:line="45" pos:column="17">early<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">=<pos:position pos:line="45" pos:column="24"/></operator> <literal type="number" pos:line="45" pos:column="25">0<pos:position pos:line="45" pos:column="26"/></literal></expr>;<pos:position pos:line="45" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="46" pos:column="17">ptr<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <call><name pos:line="46" pos:column="23">strrchr<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><name pos:line="46" pos:column="31">remote<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="46" pos:column="39">'~'<pos:position pos:line="46" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="44"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">ptr<pos:position pos:line="47" pos:column="24"/></name></expr>)<pos:position pos:line="47" pos:column="25"/></condition><then pos:line="47" pos:column="25"> <block pos:line="47" pos:column="26">{
			<decl_stmt><decl><type><name pos:line="48" pos:column="25">int<pos:position pos:line="48" pos:column="28"/></name></type> <name pos:line="48" pos:column="29">seen_nonzero<pos:position pos:line="48" pos:column="41"/></name> <init pos:line="48" pos:column="42">= <expr><literal type="number" pos:line="48" pos:column="44">0<pos:position pos:line="48" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="48" pos:column="46"/></decl_stmt>

			<expr_stmt><expr><name pos:line="50" pos:column="25">len<pos:position pos:line="50" pos:column="28"/></name><operator pos:line="50" pos:column="28">++<pos:position pos:line="50" pos:column="30"/></operator></expr>;<pos:position pos:line="50" pos:column="31"/></expr_stmt> <comment type="block" pos:line="50" pos:column="32">/* count ~ */</comment>
			<while pos:line="51" pos:column="25">while <condition pos:line="51" pos:column="31">(<expr><operator pos:line="51" pos:column="32">*<pos:position pos:line="51" pos:column="33"/></operator><operator pos:line="51" pos:column="33">++<pos:position pos:line="51" pos:column="35"/></operator><name pos:line="51" pos:column="35">ptr<pos:position pos:line="51" pos:column="38"/></name> <operator pos:line="51" pos:column="39">&amp;&amp;<pos:position pos:line="51" pos:column="49"/></operator> <call><name pos:line="51" pos:column="42">isdigit<pos:position pos:line="51" pos:column="49"/></name><argument_list pos:line="51" pos:column="49">(<argument><expr><operator pos:line="51" pos:column="50">*<pos:position pos:line="51" pos:column="51"/></operator><name pos:line="51" pos:column="51">ptr<pos:position pos:line="51" pos:column="54"/></name></expr></argument>)<pos:position pos:line="51" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="56"/></condition> <block pos:line="51" pos:column="57">{
				<expr_stmt><expr><name pos:line="52" pos:column="33">seen_nonzero<pos:position pos:line="52" pos:column="45"/></name> <operator pos:line="52" pos:column="46">|=<pos:position pos:line="52" pos:column="48"/></operator> <operator pos:line="52" pos:column="49">(<pos:position pos:line="52" pos:column="50"/></operator><operator pos:line="52" pos:column="50">*<pos:position pos:line="52" pos:column="51"/></operator><name pos:line="52" pos:column="51">ptr<pos:position pos:line="52" pos:column="54"/></name> <operator pos:line="52" pos:column="55">!=<pos:position pos:line="52" pos:column="57"/></operator> <literal type="char" pos:line="52" pos:column="58">'0'<pos:position pos:line="52" pos:column="61"/></literal><operator pos:line="52" pos:column="61">)<pos:position pos:line="52" pos:column="62"/></operator></expr>;<pos:position pos:line="52" pos:column="63"/></expr_stmt>
				<expr_stmt><expr><name pos:line="53" pos:column="33">len<pos:position pos:line="53" pos:column="36"/></name><operator pos:line="53" pos:column="36">++<pos:position pos:line="53" pos:column="38"/></operator></expr>;<pos:position pos:line="53" pos:column="39"/></expr_stmt>
			}<pos:position pos:line="54" pos:column="26"/></block></while>
			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><operator pos:line="55" pos:column="29">*<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="30">ptr<pos:position pos:line="55" pos:column="33"/></name></expr>)<pos:position pos:line="55" pos:column="34"/></condition><then pos:line="55" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="33">len<pos:position pos:line="56" pos:column="36"/></name> <operator pos:line="56" pos:column="37">=<pos:position pos:line="56" pos:column="38"/></operator> <literal type="number" pos:line="56" pos:column="39">0<pos:position pos:line="56" pos:column="40"/></literal></expr>;<pos:position pos:line="56" pos:column="41"/></expr_stmt></block></then> <comment type="block" pos:line="56" pos:column="42">/* not ...~&lt;number&gt; */</comment>
			<elseif pos:line="57" pos:column="25">else <if pos:line="57" pos:column="30">if <condition pos:line="57" pos:column="33">(<expr><name pos:line="57" pos:column="34">seen_nonzero<pos:position pos:line="57" pos:column="46"/></name></expr>)<pos:position pos:line="57" pos:column="47"/></condition><then pos:line="57" pos:column="47">
				<block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="33">early<pos:position pos:line="58" pos:column="38"/></name> <operator pos:line="58" pos:column="39">=<pos:position pos:line="58" pos:column="40"/></operator> <literal type="number" pos:line="58" pos:column="41">1<pos:position pos:line="58" pos:column="42"/></literal></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="59" pos:column="25">else <if pos:line="59" pos:column="30">if <condition pos:line="59" pos:column="33">(<expr><name pos:line="59" pos:column="34">len<pos:position pos:line="59" pos:column="37"/></name> <operator pos:line="59" pos:column="38">==<pos:position pos:line="59" pos:column="40"/></operator> <literal type="number" pos:line="59" pos:column="41">1<pos:position pos:line="59" pos:column="42"/></literal></expr>)<pos:position pos:line="59" pos:column="43"/></condition><then pos:line="59" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="33">early<pos:position pos:line="60" pos:column="38"/></name> <operator pos:line="60" pos:column="39">=<pos:position pos:line="60" pos:column="40"/></operator> <literal type="number" pos:line="60" pos:column="41">1<pos:position pos:line="60" pos:column="42"/></literal></expr>;<pos:position pos:line="60" pos:column="43"/></expr_stmt></block></then></if></elseif></if> <comment type="block" pos:line="60" pos:column="44">/* "name~" is "name~1"! */</comment>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if>
	}<pos:position pos:line="62" pos:column="10"/></block></else></if>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">len<pos:position pos:line="63" pos:column="16"/></name></expr>)<pos:position pos:line="63" pos:column="17"/></condition><then pos:line="63" pos:column="17"> <block pos:line="63" pos:column="18">{
		<decl_stmt><decl><type><name><name pos:line="64" pos:column="17">struct<pos:position pos:line="64" pos:column="23"/></name> <name pos:line="64" pos:column="24">strbuf<pos:position pos:line="64" pos:column="30"/></name></name></type> <name pos:line="64" pos:column="31">truname<pos:position pos:line="64" pos:column="38"/></name> <init pos:line="64" pos:column="39">= <expr><name pos:line="64" pos:column="41">STRBUF_INIT<pos:position pos:line="64" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="64" pos:column="53"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="65" pos:column="17">strbuf_addstr<pos:position pos:line="65" pos:column="30"/></name><argument_list pos:line="65" pos:column="30">(<argument><expr><operator pos:line="65" pos:column="31">&amp;<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="32">truname<pos:position pos:line="65" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="41">"refs/heads/"<pos:position pos:line="65" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">strbuf_addstr<pos:position pos:line="66" pos:column="30"/></name><argument_list pos:line="66" pos:column="30">(<argument><expr><operator pos:line="66" pos:column="31">&amp;<pos:position pos:line="66" pos:column="36"/></operator><name pos:line="66" pos:column="32">truname<pos:position pos:line="66" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="41">remote<pos:position pos:line="66" pos:column="47"/></name></expr></argument>)<pos:position pos:line="66" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="67" pos:column="17">strbuf_setlen<pos:position pos:line="67" pos:column="30"/></name><argument_list pos:line="67" pos:column="30">(<argument><expr><operator pos:line="67" pos:column="31">&amp;<pos:position pos:line="67" pos:column="36"/></operator><name pos:line="67" pos:column="32">truname<pos:position pos:line="67" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="41">truname<pos:position pos:line="67" pos:column="48"/></name><operator pos:line="67" pos:column="48">.<pos:position pos:line="67" pos:column="49"/></operator><name pos:line="67" pos:column="49">len<pos:position pos:line="67" pos:column="52"/></name></name> <operator pos:line="67" pos:column="53">-<pos:position pos:line="67" pos:column="54"/></operator> <name pos:line="67" pos:column="55">len<pos:position pos:line="67" pos:column="58"/></name></expr></argument>)<pos:position pos:line="67" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="60"/></expr_stmt>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><call><name pos:line="68" pos:column="21">ref_exists<pos:position pos:line="68" pos:column="31"/></name><argument_list pos:line="68" pos:column="31">(<argument><expr><name><name pos:line="68" pos:column="32">truname<pos:position pos:line="68" pos:column="39"/></name><operator pos:line="68" pos:column="39">.<pos:position pos:line="68" pos:column="40"/></operator><name pos:line="68" pos:column="40">buf<pos:position pos:line="68" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="45"/></condition><then pos:line="68" pos:column="45"> <block pos:line="68" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="69" pos:column="25">strbuf_addf<pos:position pos:line="69" pos:column="36"/></name><argument_list pos:line="69" pos:column="36">(<argument><expr><name pos:line="69" pos:column="37">msg<pos:position pos:line="69" pos:column="40"/></name></expr></argument>,
				    <argument><expr><literal type="string" pos:line="70" pos:column="37">"%s\t\tbranch '%s'%s of .\n"<pos:position pos:line="70" pos:column="65"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="71" pos:column="37">sha1_to_hex<pos:position pos:line="71" pos:column="48"/></name><argument_list pos:line="71" pos:column="48">(<argument><expr><name><name pos:line="71" pos:column="49">remote_head<pos:position pos:line="71" pos:column="60"/></name><operator pos:line="71" pos:column="60">-&gt;<pos:position pos:line="71" pos:column="65"/></operator><name pos:line="71" pos:column="62">object<pos:position pos:line="71" pos:column="68"/></name><operator pos:line="71" pos:column="68">.<pos:position pos:line="71" pos:column="69"/></operator><name pos:line="71" pos:column="69">sha1<pos:position pos:line="71" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="74"/></argument_list></call></expr></argument>,
				    <argument><expr><name><name pos:line="72" pos:column="37">truname<pos:position pos:line="72" pos:column="44"/></name><operator pos:line="72" pos:column="44">.<pos:position pos:line="72" pos:column="45"/></operator><name pos:line="72" pos:column="45">buf<pos:position pos:line="72" pos:column="48"/></name></name> <operator pos:line="72" pos:column="49">+<pos:position pos:line="72" pos:column="50"/></operator> <literal type="number" pos:line="72" pos:column="51">11<pos:position pos:line="72" pos:column="53"/></literal></expr></argument>,
				    <argument><expr><operator pos:line="73" pos:column="37">(<pos:position pos:line="73" pos:column="38"/></operator><ternary><condition><expr><name pos:line="73" pos:column="38">early<pos:position pos:line="73" pos:column="43"/></name></expr> ?<pos:position pos:line="73" pos:column="45"/></condition><then pos:line="73" pos:column="45"> <expr><literal type="string" pos:line="73" pos:column="46">" (early part)"<pos:position pos:line="73" pos:column="61"/></literal></expr> <pos:position pos:line="73" pos:column="62"/></then><else pos:line="73" pos:column="62">: <expr><literal type="string" pos:line="73" pos:column="64">""<pos:position pos:line="73" pos:column="66"/></literal></expr></else></ternary><operator pos:line="73" pos:column="66">)<pos:position pos:line="73" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="73" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">strbuf_release<pos:position pos:line="74" pos:column="39"/></name><argument_list pos:line="74" pos:column="39">(<argument><expr><operator pos:line="74" pos:column="40">&amp;<pos:position pos:line="74" pos:column="45"/></operator><name pos:line="74" pos:column="41">truname<pos:position pos:line="74" pos:column="48"/></name></expr></argument>)<pos:position pos:line="74" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="50"/></expr_stmt>
			<goto pos:line="75" pos:column="25">goto <name pos:line="75" pos:column="30">cleanup<pos:position pos:line="75" pos:column="37"/></name>;<pos:position pos:line="75" pos:column="38"/></goto>
		}<pos:position pos:line="76" pos:column="18"/></block></then></if>
	}<pos:position pos:line="77" pos:column="10"/></block></then></if>

	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><operator pos:line="79" pos:column="13">!<pos:position pos:line="79" pos:column="14"/></operator><call><name pos:line="79" pos:column="14">strcmp<pos:position pos:line="79" pos:column="20"/></name><argument_list pos:line="79" pos:column="20">(<argument><expr><name pos:line="79" pos:column="21">remote<pos:position pos:line="79" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="29">"FETCH_HEAD"<pos:position pos:line="79" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="42"/></argument_list></call> <operator pos:line="79" pos:column="43">&amp;&amp;<pos:position pos:line="79" pos:column="53"/></operator>
			<operator pos:line="80" pos:column="25">!<pos:position pos:line="80" pos:column="26"/></operator><call><name pos:line="80" pos:column="26">access<pos:position pos:line="80" pos:column="32"/></name><argument_list pos:line="80" pos:column="32">(<argument><expr><call><name pos:line="80" pos:column="33">git_path<pos:position pos:line="80" pos:column="41"/></name><argument_list pos:line="80" pos:column="41">(<argument><expr><literal type="string" pos:line="80" pos:column="42">"FETCH_HEAD"<pos:position pos:line="80" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="80" pos:column="57">R_OK<pos:position pos:line="80" pos:column="61"/></name></expr></argument>)<pos:position pos:line="80" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="63"/></condition><then pos:line="80" pos:column="63"> <block pos:line="80" pos:column="64">{
		<decl_stmt><decl><type><specifier pos:line="81" pos:column="17">const<pos:position pos:line="81" pos:column="22"/></specifier> <name pos:line="81" pos:column="23">char<pos:position pos:line="81" pos:column="27"/></name> <modifier pos:line="81" pos:column="28">*<pos:position pos:line="81" pos:column="29"/></modifier></type><name pos:line="81" pos:column="29">filename<pos:position pos:line="81" pos:column="37"/></name></decl>;<pos:position pos:line="81" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="82" pos:column="17">FILE<pos:position pos:line="82" pos:column="21"/></name> <modifier pos:line="82" pos:column="22">*<pos:position pos:line="82" pos:column="23"/></modifier></type><name pos:line="82" pos:column="23">fp<pos:position pos:line="82" pos:column="25"/></name></decl>;<pos:position pos:line="82" pos:column="26"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="83" pos:column="17">struct<pos:position pos:line="83" pos:column="23"/></name> <name pos:line="83" pos:column="24">strbuf<pos:position pos:line="83" pos:column="30"/></name></name></type> <name pos:line="83" pos:column="31">line<pos:position pos:line="83" pos:column="35"/></name> <init pos:line="83" pos:column="36">= <expr><name pos:line="83" pos:column="38">STRBUF_INIT<pos:position pos:line="83" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="83" pos:column="50"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="84" pos:column="17">char<pos:position pos:line="84" pos:column="21"/></name> <modifier pos:line="84" pos:column="22">*<pos:position pos:line="84" pos:column="23"/></modifier></type><name pos:line="84" pos:column="23">ptr<pos:position pos:line="84" pos:column="26"/></name></decl>;<pos:position pos:line="84" pos:column="27"/></decl_stmt>

		<expr_stmt><expr><name pos:line="86" pos:column="17">filename<pos:position pos:line="86" pos:column="25"/></name> <operator pos:line="86" pos:column="26">=<pos:position pos:line="86" pos:column="27"/></operator> <call><name pos:line="86" pos:column="28">git_path<pos:position pos:line="86" pos:column="36"/></name><argument_list pos:line="86" pos:column="36">(<argument><expr><literal type="string" pos:line="86" pos:column="37">"FETCH_HEAD"<pos:position pos:line="86" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="87" pos:column="17">fp<pos:position pos:line="87" pos:column="19"/></name> <operator pos:line="87" pos:column="20">=<pos:position pos:line="87" pos:column="21"/></operator> <call><name pos:line="87" pos:column="22">fopen<pos:position pos:line="87" pos:column="27"/></name><argument_list pos:line="87" pos:column="27">(<argument><expr><name pos:line="87" pos:column="28">filename<pos:position pos:line="87" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="38">"r"<pos:position pos:line="87" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="43"/></expr_stmt>
		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><operator pos:line="88" pos:column="21">!<pos:position pos:line="88" pos:column="22"/></operator><name pos:line="88" pos:column="22">fp<pos:position pos:line="88" pos:column="24"/></name></expr>)<pos:position pos:line="88" pos:column="25"/></condition><then pos:line="88" pos:column="25">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="25">die_errno<pos:position pos:line="89" pos:column="34"/></name><argument_list pos:line="89" pos:column="34">(<argument><expr><call><name pos:line="89" pos:column="35">_<pos:position pos:line="89" pos:column="36"/></name><argument_list pos:line="89" pos:column="36">(<argument><expr><literal type="string" pos:line="89" pos:column="37">"could not open '%s' for reading"<pos:position pos:line="89" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="71"/></argument_list></call></expr></argument>,
				  <argument><expr><name pos:line="90" pos:column="35">filename<pos:position pos:line="90" pos:column="43"/></name></expr></argument>)<pos:position pos:line="90" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="45"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">strbuf_getline<pos:position pos:line="91" pos:column="31"/></name><argument_list pos:line="91" pos:column="31">(<argument><expr><operator pos:line="91" pos:column="32">&amp;<pos:position pos:line="91" pos:column="37"/></operator><name pos:line="91" pos:column="33">line<pos:position pos:line="91" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="39">fp<pos:position pos:line="91" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="91" pos:column="43">'\n'<pos:position pos:line="91" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="92" pos:column="17">fclose<pos:position pos:line="92" pos:column="23"/></name><argument_list pos:line="92" pos:column="23">(<argument><expr><name pos:line="92" pos:column="24">fp<pos:position pos:line="92" pos:column="26"/></name></expr></argument>)<pos:position pos:line="92" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="93" pos:column="17">ptr<pos:position pos:line="93" pos:column="20"/></name> <operator pos:line="93" pos:column="21">=<pos:position pos:line="93" pos:column="22"/></operator> <call><name pos:line="93" pos:column="23">strstr<pos:position pos:line="93" pos:column="29"/></name><argument_list pos:line="93" pos:column="29">(<argument><expr><name><name pos:line="93" pos:column="30">line<pos:position pos:line="93" pos:column="34"/></name><operator pos:line="93" pos:column="34">.<pos:position pos:line="93" pos:column="35"/></operator><name pos:line="93" pos:column="35">buf<pos:position pos:line="93" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="40">"\tnot-for-merge\t"<pos:position pos:line="93" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="61"/></expr_stmt>
		<if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><name pos:line="94" pos:column="21">ptr<pos:position pos:line="94" pos:column="24"/></name></expr>)<pos:position pos:line="94" pos:column="25"/></condition><then pos:line="94" pos:column="25">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="95" pos:column="25">strbuf_remove<pos:position pos:line="95" pos:column="38"/></name><argument_list pos:line="95" pos:column="38">(<argument><expr><operator pos:line="95" pos:column="39">&amp;<pos:position pos:line="95" pos:column="44"/></operator><name pos:line="95" pos:column="40">line<pos:position pos:line="95" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="46">ptr<pos:position pos:line="95" pos:column="49"/></name><operator pos:line="95" pos:column="49">-<pos:position pos:line="95" pos:column="50"/></operator><name><name pos:line="95" pos:column="50">line<pos:position pos:line="95" pos:column="54"/></name><operator pos:line="95" pos:column="54">.<pos:position pos:line="95" pos:column="55"/></operator><name pos:line="95" pos:column="55">buf<pos:position pos:line="95" pos:column="58"/></name></name><operator pos:line="95" pos:column="58">+<pos:position pos:line="95" pos:column="59"/></operator><literal type="number" pos:line="95" pos:column="59">1<pos:position pos:line="95" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="62">13<pos:position pos:line="95" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="66"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="96" pos:column="17">strbuf_addbuf<pos:position pos:line="96" pos:column="30"/></name><argument_list pos:line="96" pos:column="30">(<argument><expr><name pos:line="96" pos:column="31">msg<pos:position pos:line="96" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="36">&amp;<pos:position pos:line="96" pos:column="41"/></operator><name pos:line="96" pos:column="37">line<pos:position pos:line="96" pos:column="41"/></name></expr></argument>)<pos:position pos:line="96" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="97" pos:column="17">strbuf_release<pos:position pos:line="97" pos:column="31"/></name><argument_list pos:line="97" pos:column="31">(<argument><expr><operator pos:line="97" pos:column="32">&amp;<pos:position pos:line="97" pos:column="37"/></operator><name pos:line="97" pos:column="33">line<pos:position pos:line="97" pos:column="37"/></name></expr></argument>)<pos:position pos:line="97" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="39"/></expr_stmt>
		<goto pos:line="98" pos:column="17">goto <name pos:line="98" pos:column="22">cleanup<pos:position pos:line="98" pos:column="29"/></name>;<pos:position pos:line="98" pos:column="30"/></goto>
	}<pos:position pos:line="99" pos:column="10"/></block></then></if>

	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><name><name pos:line="101" pos:column="13">remote_head<pos:position pos:line="101" pos:column="24"/></name><operator pos:line="101" pos:column="24">-&gt;<pos:position pos:line="101" pos:column="29"/></operator><name pos:line="101" pos:column="26">util<pos:position pos:line="101" pos:column="30"/></name></name></expr>)<pos:position pos:line="101" pos:column="31"/></condition><then pos:line="101" pos:column="31"> <block pos:line="101" pos:column="32">{
		<decl_stmt><decl><type><name><name pos:line="102" pos:column="17">struct<pos:position pos:line="102" pos:column="23"/></name> <name pos:line="102" pos:column="24">merge_remote_desc<pos:position pos:line="102" pos:column="41"/></name></name> <modifier pos:line="102" pos:column="42">*<pos:position pos:line="102" pos:column="43"/></modifier></type><name pos:line="102" pos:column="43">desc<pos:position pos:line="102" pos:column="47"/></name></decl>;<pos:position pos:line="102" pos:column="48"/></decl_stmt>
		<expr_stmt><expr><name pos:line="103" pos:column="17">desc<pos:position pos:line="103" pos:column="21"/></name> <operator pos:line="103" pos:column="22">=<pos:position pos:line="103" pos:column="23"/></operator> <call><name pos:line="103" pos:column="24">merge_remote_util<pos:position pos:line="103" pos:column="41"/></name><argument_list pos:line="103" pos:column="41">(<argument><expr><name pos:line="103" pos:column="42">remote_head<pos:position pos:line="103" pos:column="53"/></name></expr></argument>)<pos:position pos:line="103" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="55"/></expr_stmt>
		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name pos:line="104" pos:column="21">desc<pos:position pos:line="104" pos:column="25"/></name> <operator pos:line="104" pos:column="26">&amp;&amp;<pos:position pos:line="104" pos:column="36"/></operator> <name><name pos:line="104" pos:column="29">desc<pos:position pos:line="104" pos:column="33"/></name><operator pos:line="104" pos:column="33">-&gt;<pos:position pos:line="104" pos:column="38"/></operator><name pos:line="104" pos:column="35">obj<pos:position pos:line="104" pos:column="38"/></name></name> <operator pos:line="104" pos:column="39">&amp;&amp;<pos:position pos:line="104" pos:column="49"/></operator> <name><name pos:line="104" pos:column="42">desc<pos:position pos:line="104" pos:column="46"/></name><operator pos:line="104" pos:column="46">-&gt;<pos:position pos:line="104" pos:column="51"/></operator><name pos:line="104" pos:column="48">obj<pos:position pos:line="104" pos:column="51"/></name><operator pos:line="104" pos:column="51">-&gt;<pos:position pos:line="104" pos:column="56"/></operator><name pos:line="104" pos:column="53">type<pos:position pos:line="104" pos:column="57"/></name></name> <operator pos:line="104" pos:column="58">==<pos:position pos:line="104" pos:column="60"/></operator> <name pos:line="104" pos:column="61">OBJ_TAG<pos:position pos:line="104" pos:column="68"/></name></expr>)<pos:position pos:line="104" pos:column="69"/></condition><then pos:line="104" pos:column="69"> <block pos:line="104" pos:column="70">{
			<expr_stmt><expr><call><name pos:line="105" pos:column="25">strbuf_addf<pos:position pos:line="105" pos:column="36"/></name><argument_list pos:line="105" pos:column="36">(<argument><expr><name pos:line="105" pos:column="37">msg<pos:position pos:line="105" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="42">"%s\t\t%s '%s'\n"<pos:position pos:line="105" pos:column="59"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="106" pos:column="37">sha1_to_hex<pos:position pos:line="106" pos:column="48"/></name><argument_list pos:line="106" pos:column="48">(<argument><expr><name><name pos:line="106" pos:column="49">desc<pos:position pos:line="106" pos:column="53"/></name><operator pos:line="106" pos:column="53">-&gt;<pos:position pos:line="106" pos:column="58"/></operator><name pos:line="106" pos:column="55">obj<pos:position pos:line="106" pos:column="58"/></name><operator pos:line="106" pos:column="58">-&gt;<pos:position pos:line="106" pos:column="63"/></operator><name pos:line="106" pos:column="60">sha1<pos:position pos:line="106" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="65"/></argument_list></call></expr></argument>,
				    <argument><expr><name><typename pos:line="107" pos:column="37">typename<pos:position pos:line="107" pos:column="45"/></typename></name><operator pos:line="107" pos:column="45">(<pos:position pos:line="107" pos:column="46"/></operator><name><name pos:line="107" pos:column="46">desc<pos:position pos:line="107" pos:column="50"/></name><operator pos:line="107" pos:column="50">-&gt;<pos:position pos:line="107" pos:column="55"/></operator><name pos:line="107" pos:column="52">obj<pos:position pos:line="107" pos:column="55"/></name><operator pos:line="107" pos:column="55">-&gt;<pos:position pos:line="107" pos:column="60"/></operator><name pos:line="107" pos:column="57">type<pos:position pos:line="107" pos:column="61"/></name></name><operator pos:line="107" pos:column="61">)<pos:position pos:line="107" pos:column="62"/></operator></expr></argument>,
				    <argument><expr><name pos:line="108" pos:column="37">remote<pos:position pos:line="108" pos:column="43"/></name></expr></argument>)<pos:position pos:line="108" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="45"/></expr_stmt>
			<goto pos:line="109" pos:column="25">goto <name pos:line="109" pos:column="30">cleanup<pos:position pos:line="109" pos:column="37"/></name>;<pos:position pos:line="109" pos:column="38"/></goto>
		}<pos:position pos:line="110" pos:column="18"/></block></then></if>
	}<pos:position pos:line="111" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="113" pos:column="9">strbuf_addf<pos:position pos:line="113" pos:column="20"/></name><argument_list pos:line="113" pos:column="20">(<argument><expr><name pos:line="113" pos:column="21">msg<pos:position pos:line="113" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="26">"%s\t\tcommit '%s'\n"<pos:position pos:line="113" pos:column="47"/></literal></expr></argument>,
		<argument><expr><call><name pos:line="114" pos:column="17">sha1_to_hex<pos:position pos:line="114" pos:column="28"/></name><argument_list pos:line="114" pos:column="28">(<argument><expr><name><name pos:line="114" pos:column="29">remote_head<pos:position pos:line="114" pos:column="40"/></name><operator pos:line="114" pos:column="40">-&gt;<pos:position pos:line="114" pos:column="45"/></operator><name pos:line="114" pos:column="42">object<pos:position pos:line="114" pos:column="48"/></name><operator pos:line="114" pos:column="48">.<pos:position pos:line="114" pos:column="49"/></operator><name pos:line="114" pos:column="49">sha1<pos:position pos:line="114" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="114" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="114" pos:column="56">remote<pos:position pos:line="114" pos:column="62"/></name></expr></argument>)<pos:position pos:line="114" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="64"/></expr_stmt>
<label><name pos:line="115" pos:column="1">cleanup<pos:position pos:line="115" pos:column="8"/></name>:<pos:position pos:line="115" pos:column="9"/></label>
	<expr_stmt><expr><call><name pos:line="116" pos:column="9">strbuf_release<pos:position pos:line="116" pos:column="23"/></name><argument_list pos:line="116" pos:column="23">(<argument><expr><operator pos:line="116" pos:column="24">&amp;<pos:position pos:line="116" pos:column="29"/></operator><name pos:line="116" pos:column="25">buf<pos:position pos:line="116" pos:column="28"/></name></expr></argument>)<pos:position pos:line="116" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="117" pos:column="9">strbuf_release<pos:position pos:line="117" pos:column="23"/></name><argument_list pos:line="117" pos:column="23">(<argument><expr><operator pos:line="117" pos:column="24">&amp;<pos:position pos:line="117" pos:column="29"/></operator><name pos:line="117" pos:column="25">bname<pos:position pos:line="117" pos:column="30"/></name></expr></argument>)<pos:position pos:line="117" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="32"/></expr_stmt>
}<pos:position pos:line="118" pos:column="2"/></block></function></unit>
