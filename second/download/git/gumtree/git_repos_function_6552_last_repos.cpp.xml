<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6552_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">fast_export_data<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">uint32_t<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">mode<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">off_t<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">len<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="49">struct<pos:position pos:line="1" pos:column="55"/></name> <name pos:line="1" pos:column="56">line_buffer<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">input<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">assert<pos:position pos:line="3" pos:column="15"/></name><argument_list pos:line="3" pos:column="15">(<argument><expr><name pos:line="3" pos:column="16">len<pos:position pos:line="3" pos:column="19"/></name> <operator pos:line="3" pos:column="20">&gt;=<pos:position pos:line="3" pos:column="25"/></operator> <literal type="number" pos:line="3" pos:column="23">0<pos:position pos:line="3" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="26"/></expr_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name pos:line="4" pos:column="13">mode<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">==<pos:position pos:line="4" pos:column="20"/></operator> <name pos:line="4" pos:column="21">S_IFLNK<pos:position pos:line="4" pos:column="28"/></name></expr>)<pos:position pos:line="4" pos:column="29"/></condition><then pos:line="4" pos:column="29"> <block pos:line="4" pos:column="30">{
		<comment type="block" pos:line="5" pos:column="17">/* svn symlink blobs start with "link " */</comment>
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><name pos:line="6" pos:column="21">len<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">&lt;<pos:position pos:line="6" pos:column="29"/></operator> <literal type="number" pos:line="6" pos:column="27">5<pos:position pos:line="6" pos:column="28"/></literal></expr>)<pos:position pos:line="6" pos:column="29"/></condition><then pos:line="6" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="25">die<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><literal type="string" pos:line="7" pos:column="29">"invalid dump: symlink too short for \"link\" prefix"<pos:position pos:line="7" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="84"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="8" pos:column="17">len<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">-=<pos:position pos:line="8" pos:column="23"/></operator> <literal type="number" pos:line="8" pos:column="24">5<pos:position pos:line="8" pos:column="25"/></literal></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><call><name pos:line="9" pos:column="21">buffer_skip_bytes<pos:position pos:line="9" pos:column="38"/></name><argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">input<pos:position pos:line="9" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="46">5<pos:position pos:line="9" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call> <operator pos:line="9" pos:column="49">!=<pos:position pos:line="9" pos:column="51"/></operator> <literal type="number" pos:line="9" pos:column="52">5<pos:position pos:line="9" pos:column="53"/></literal></expr>)<pos:position pos:line="9" pos:column="54"/></condition><then pos:line="9" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">die_short_read<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><name pos:line="10" pos:column="40">input<pos:position pos:line="10" pos:column="45"/></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt></block></then></if>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">printf<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="string" pos:line="12" pos:column="16">"data %"<pos:position pos:line="12" pos:column="24"/></literal><name pos:line="12" pos:column="24">PRIuMAX<pos:position pos:line="12" pos:column="31"/></name><literal type="string" pos:line="12" pos:column="31">"\n"<pos:position pos:line="12" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="37">(<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="38">uintmax_t<pos:position pos:line="12" pos:column="47"/></name><operator pos:line="12" pos:column="47">)<pos:position pos:line="12" pos:column="48"/></operator> <name pos:line="12" pos:column="49">len<pos:position pos:line="12" pos:column="52"/></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">buffer_copy_bytes<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">input<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="38">len<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call> <operator pos:line="13" pos:column="43">!=<pos:position pos:line="13" pos:column="45"/></operator> <name pos:line="13" pos:column="46">len<pos:position pos:line="13" pos:column="49"/></name></expr>)<pos:position pos:line="13" pos:column="50"/></condition><then pos:line="13" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">die_short_read<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><name pos:line="14" pos:column="32">input<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">fputc<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><literal type="char" pos:line="15" pos:column="15">'\n'<pos:position pos:line="15" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="21">stdout<pos:position pos:line="15" pos:column="27"/></name></expr></argument>)<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
