<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1091.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">else_atom_handler<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">atom_value<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">atomv<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="57">struct<pos:position pos:line="1" pos:column="63"/></name> <name pos:line="1" pos:column="64">ref_formatting_state<pos:position pos:line="1" pos:column="84"/></name></name> <modifier pos:line="1" pos:column="85">*<pos:position pos:line="1" pos:column="86"/></modifier></type><name pos:line="1" pos:column="86">state<pos:position pos:line="1" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="92"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ref_formatting_stack<pos:position pos:line="3" pos:column="36"/></name></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">prev<pos:position pos:line="3" pos:column="42"/></name> <init pos:line="3" pos:column="43">= <expr><name><name pos:line="3" pos:column="45">state<pos:position pos:line="3" pos:column="50"/></name><operator pos:line="3" pos:column="50">-&gt;<pos:position pos:line="3" pos:column="55"/></operator><name pos:line="3" pos:column="52">stack<pos:position pos:line="3" pos:column="57"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">if_then_else<pos:position pos:line="4" pos:column="28"/></name></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">if_then_else<pos:position pos:line="4" pos:column="42"/></name> <init pos:line="4" pos:column="43">= <expr><name pos:line="4" pos:column="45">NULL<pos:position pos:line="4" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">prev<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">at_end<pos:position pos:line="6" pos:column="25"/></name></name> <operator pos:line="6" pos:column="26">==<pos:position pos:line="6" pos:column="28"/></operator> <name pos:line="6" pos:column="29">if_then_else_handler<pos:position pos:line="6" pos:column="49"/></name></expr>)<pos:position pos:line="6" pos:column="50"/></condition><then pos:line="6" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="17">if_then_else<pos:position pos:line="7" pos:column="29"/></name> <operator pos:line="7" pos:column="30">=<pos:position pos:line="7" pos:column="31"/></operator> <operator pos:line="7" pos:column="32">(<pos:position pos:line="7" pos:column="33"/></operator>struct <name pos:line="7" pos:column="40">if_then_else<pos:position pos:line="7" pos:column="52"/></name> <operator pos:line="7" pos:column="53">*<pos:position pos:line="7" pos:column="54"/></operator><operator pos:line="7" pos:column="54">)<pos:position pos:line="7" pos:column="55"/></operator><name><name pos:line="7" pos:column="55">prev<pos:position pos:line="7" pos:column="59"/></name><operator pos:line="7" pos:column="59">-&gt;<pos:position pos:line="7" pos:column="64"/></operator><name pos:line="7" pos:column="61">at_end_data<pos:position pos:line="7" pos:column="72"/></name></name></expr>;<pos:position pos:line="7" pos:column="73"/></expr_stmt></block></then></if>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">if_then_else<pos:position pos:line="8" pos:column="26"/></name></expr>)<pos:position pos:line="8" pos:column="27"/></condition><then pos:line="8" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">die<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><call><name pos:line="9" pos:column="21">_<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><literal type="string" pos:line="9" pos:column="23">"format: %%(else) atom used without an %%(if) atom"<pos:position pos:line="9" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="77"/></expr_stmt></block></then></if>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name><name pos:line="10" pos:column="14">if_then_else<pos:position pos:line="10" pos:column="26"/></name><operator pos:line="10" pos:column="26">-&gt;<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="28">then_atom_seen<pos:position pos:line="10" pos:column="42"/></name></name></expr>)<pos:position pos:line="10" pos:column="43"/></condition><then pos:line="10" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">die<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><call><name pos:line="11" pos:column="21">_<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><literal type="string" pos:line="11" pos:column="23">"format: %%(else) atom used without a %%(then) atom"<pos:position pos:line="11" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="78"/></expr_stmt></block></then></if>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">if_then_else<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">else_atom_seen<pos:position pos:line="12" pos:column="41"/></name></name></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">die<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><call><name pos:line="13" pos:column="21">_<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><literal type="string" pos:line="13" pos:column="23">"format: %%(else) atom used more than once"<pos:position pos:line="13" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="69"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">if_then_else<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">-&gt;<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="23">else_atom_seen<pos:position pos:line="14" pos:column="37"/></name></name> <operator pos:line="14" pos:column="38">=<pos:position pos:line="14" pos:column="39"/></operator> <literal type="number" pos:line="14" pos:column="40">1<pos:position pos:line="14" pos:column="41"/></literal></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">push_stack_element<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><operator pos:line="15" pos:column="28">&amp;<pos:position pos:line="15" pos:column="33"/></operator><name><name pos:line="15" pos:column="29">state<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">-&gt;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="36">stack<pos:position pos:line="15" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">state<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">-&gt;<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="16">stack<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">-&gt;<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="23">at_end_data<pos:position pos:line="16" pos:column="34"/></name></name> <operator pos:line="16" pos:column="35">=<pos:position pos:line="16" pos:column="36"/></operator> <name><name pos:line="16" pos:column="37">prev<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">-&gt;<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="43">at_end_data<pos:position pos:line="16" pos:column="54"/></name></name></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">state<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">stack<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">-&gt;<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="23">at_end<pos:position pos:line="17" pos:column="29"/></name></name> <operator pos:line="17" pos:column="30">=<pos:position pos:line="17" pos:column="31"/></operator> <name><name pos:line="17" pos:column="32">prev<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">-&gt;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="38">at_end<pos:position pos:line="17" pos:column="44"/></name></name></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
