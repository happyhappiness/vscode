<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6562_git-2.13.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">_obstack_newchunk<pos:position pos:line="2" pos:column="18"/></name> <parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name><name pos:line="2" pos:column="20">struct<pos:position pos:line="2" pos:column="26"/></name> <name pos:line="2" pos:column="27">obstack<pos:position pos:line="2" pos:column="34"/></name></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">h<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">int<pos:position pos:line="2" pos:column="42"/></name></type> <name pos:line="2" pos:column="43">length<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">register<pos:position pos:line="4" pos:column="11"/></specifier> <name><name pos:line="4" pos:column="12">struct<pos:position pos:line="4" pos:column="18"/></name> <name pos:line="4" pos:column="19">_obstack_chunk<pos:position pos:line="4" pos:column="33"/></name></name> <modifier pos:line="4" pos:column="34">*<pos:position pos:line="4" pos:column="35"/></modifier></type><name pos:line="4" pos:column="35">old_chunk<pos:position pos:line="4" pos:column="44"/></name> <init pos:line="4" pos:column="45">= <expr><name><name pos:line="4" pos:column="47">h<pos:position pos:line="4" pos:column="48"/></name><operator pos:line="4" pos:column="48">-&gt;<pos:position pos:line="4" pos:column="53"/></operator><name pos:line="4" pos:column="50">chunk<pos:position pos:line="4" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">register<pos:position pos:line="5" pos:column="11"/></specifier> <name><name pos:line="5" pos:column="12">struct<pos:position pos:line="5" pos:column="18"/></name> <name pos:line="5" pos:column="19">_obstack_chunk<pos:position pos:line="5" pos:column="33"/></name></name> <modifier pos:line="5" pos:column="34">*<pos:position pos:line="5" pos:column="35"/></modifier></type><name pos:line="5" pos:column="35">new_chunk<pos:position pos:line="5" pos:column="44"/></name></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">register<pos:position pos:line="6" pos:column="11"/></specifier> <name pos:line="6" pos:column="12">long<pos:position pos:line="6" pos:column="16"/></name></type>	<name pos:line="6" pos:column="17">new_size<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">register<pos:position pos:line="7" pos:column="11"/></specifier> <name pos:line="7" pos:column="12">long<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">obj_size<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name><name pos:line="7" pos:column="28">h<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">-&gt;<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="31">next_free<pos:position pos:line="7" pos:column="40"/></name></name> <operator pos:line="7" pos:column="41">-<pos:position pos:line="7" pos:column="42"/></operator> <name><name pos:line="7" pos:column="43">h<pos:position pos:line="7" pos:column="44"/></name><operator pos:line="7" pos:column="44">-&gt;<pos:position pos:line="7" pos:column="49"/></operator><name pos:line="7" pos:column="46">object_base<pos:position pos:line="7" pos:column="57"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="58"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">register<pos:position pos:line="8" pos:column="11"/></specifier> <name pos:line="8" pos:column="12">long<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">i<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">long<pos:position pos:line="9" pos:column="7"/></name></type> <name pos:line="9" pos:column="8">already<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">object_base<pos:position pos:line="10" pos:column="20"/></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* Compute size for new chunk.  */</comment>
  <expr_stmt><expr><name pos:line="13" pos:column="3">new_size<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <operator pos:line="13" pos:column="14">(<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">obj_size<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">+<pos:position pos:line="13" pos:column="25"/></operator> <name pos:line="13" pos:column="26">length<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">)<pos:position pos:line="13" pos:column="33"/></operator> <operator pos:line="13" pos:column="34">+<pos:position pos:line="13" pos:column="35"/></operator> <operator pos:line="13" pos:column="36">(<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="37">obj_size<pos:position pos:line="13" pos:column="45"/></name> <operator pos:line="13" pos:column="46">&gt;&gt;<pos:position pos:line="13" pos:column="51"/></operator> <literal type="number" pos:line="13" pos:column="49">3<pos:position pos:line="13" pos:column="50"/></literal><operator pos:line="13" pos:column="50">)<pos:position pos:line="13" pos:column="51"/></operator> <operator pos:line="13" pos:column="52">+<pos:position pos:line="13" pos:column="53"/></operator> <name><name pos:line="13" pos:column="54">h<pos:position pos:line="13" pos:column="55"/></name><operator pos:line="13" pos:column="55">-&gt;<pos:position pos:line="13" pos:column="60"/></operator><name pos:line="13" pos:column="57">alignment_mask<pos:position pos:line="13" pos:column="71"/></name></name> <operator pos:line="13" pos:column="72">+<pos:position pos:line="13" pos:column="73"/></operator> <literal type="number" pos:line="13" pos:column="74">100<pos:position pos:line="13" pos:column="77"/></literal></expr>;<pos:position pos:line="13" pos:column="78"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">new_size<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">&lt;<pos:position pos:line="14" pos:column="20"/></operator> <name><name pos:line="14" pos:column="18">h<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">-&gt;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="21">chunk_size<pos:position pos:line="14" pos:column="31"/></name></name></expr>)<pos:position pos:line="14" pos:column="32"/></condition><then pos:line="14" pos:column="32">
    <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="5">new_size<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name><name pos:line="15" pos:column="16">h<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">-&gt;<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="19">chunk_size<pos:position pos:line="15" pos:column="29"/></name></name></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="17" pos:column="3">/* Allocate and initialize the new chunk.  */</comment>
  <expr_stmt><expr><name pos:line="18" pos:column="3">new_chunk<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">CALL_CHUNKFUN<pos:position pos:line="18" pos:column="28"/></name> <argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">h<pos:position pos:line="18" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="33">new_size<pos:position pos:line="18" pos:column="41"/></name></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><operator pos:line="19" pos:column="7">!<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">new_chunk<pos:position pos:line="19" pos:column="17"/></name></expr>)<pos:position pos:line="19" pos:column="18"/></condition><then pos:line="19" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><call pos:line="20" pos:column="5">(<modifier pos:line="20" pos:column="6">*<pos:position pos:line="20" pos:column="7"/></modifier><name pos:line="20" pos:column="7">obstack_alloc_failed_handler<pos:position pos:line="20" pos:column="35"/></name>) <argument_list pos:line="20" pos:column="37">()<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name><name pos:line="21" pos:column="3">h<pos:position pos:line="21" pos:column="4"/></name><operator pos:line="21" pos:column="4">-&gt;<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="6">chunk<pos:position pos:line="21" pos:column="11"/></name></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">new_chunk<pos:position pos:line="21" pos:column="23"/></name></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">new_chunk<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">prev<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <name pos:line="22" pos:column="21">old_chunk<pos:position pos:line="22" pos:column="30"/></name></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">new_chunk<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">-&gt;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="14">limit<pos:position pos:line="23" pos:column="19"/></name></name> <operator pos:line="23" pos:column="20">=<pos:position pos:line="23" pos:column="21"/></operator> <name><name pos:line="23" pos:column="22">h<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">-&gt;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="25">chunk_limit<pos:position pos:line="23" pos:column="36"/></name></name> <operator pos:line="23" pos:column="37">=<pos:position pos:line="23" pos:column="38"/></operator> <operator pos:line="23" pos:column="39">(<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="40">char<pos:position pos:line="23" pos:column="44"/></name> <operator pos:line="23" pos:column="45">*<pos:position pos:line="23" pos:column="46"/></operator><operator pos:line="23" pos:column="46">)<pos:position pos:line="23" pos:column="47"/></operator> <name pos:line="23" pos:column="48">new_chunk<pos:position pos:line="23" pos:column="57"/></name> <operator pos:line="23" pos:column="58">+<pos:position pos:line="23" pos:column="59"/></operator> <name pos:line="23" pos:column="60">new_size<pos:position pos:line="23" pos:column="68"/></name></expr>;<pos:position pos:line="23" pos:column="69"/></expr_stmt>

  <comment type="block" pos:line="25" pos:column="3">/* Compute an aligned object_base in the new chunk */</comment>
  <expr_stmt><expr><name pos:line="26" pos:column="3">object_base<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator>
    <call><name pos:line="27" pos:column="5">__PTR_ALIGN<pos:position pos:line="27" pos:column="16"/></name> <argument_list pos:line="27" pos:column="17">(<argument><expr><operator pos:line="27" pos:column="18">(<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">char<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">*<pos:position pos:line="27" pos:column="25"/></operator><operator pos:line="27" pos:column="25">)<pos:position pos:line="27" pos:column="26"/></operator> <name pos:line="27" pos:column="27">new_chunk<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="38">new_chunk<pos:position pos:line="27" pos:column="47"/></name><operator pos:line="27" pos:column="47">-&gt;<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="49">contents<pos:position pos:line="27" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="59">h<pos:position pos:line="27" pos:column="60"/></name><operator pos:line="27" pos:column="60">-&gt;<pos:position pos:line="27" pos:column="65"/></operator><name pos:line="27" pos:column="62">alignment_mask<pos:position pos:line="27" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="78"/></expr_stmt>

  <comment type="block" pos:line="29" pos:column="3">/* Move the existing object to the new chunk.
     Word at a time is fast and is safe if the object
     is sufficiently aligned.  */</comment>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><name><name pos:line="32" pos:column="7">h<pos:position pos:line="32" pos:column="8"/></name><operator pos:line="32" pos:column="8">-&gt;<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="10">alignment_mask<pos:position pos:line="32" pos:column="24"/></name></name> <operator pos:line="32" pos:column="25">+<pos:position pos:line="32" pos:column="26"/></operator> <literal type="number" pos:line="32" pos:column="27">1<pos:position pos:line="32" pos:column="28"/></literal> <operator pos:line="32" pos:column="29">&gt;=<pos:position pos:line="32" pos:column="34"/></operator> <name pos:line="32" pos:column="32">DEFAULT_ALIGNMENT<pos:position pos:line="32" pos:column="49"/></name></expr>)<pos:position pos:line="32" pos:column="50"/></condition><then pos:line="32" pos:column="50">
    <block pos:line="33" pos:column="5">{
      <for pos:line="34" pos:column="7">for <control pos:line="34" pos:column="11">(<init><expr><name pos:line="34" pos:column="12">i<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <name pos:line="34" pos:column="16">obj_size<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">/<pos:position pos:line="34" pos:column="26"/></operator> <sizeof pos:line="34" pos:column="27">sizeof <argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">COPYING_UNIT<pos:position pos:line="34" pos:column="47"/></name></expr></argument>)<pos:position pos:line="34" pos:column="48"/></argument_list></sizeof> <operator pos:line="34" pos:column="49">-<pos:position pos:line="34" pos:column="50"/></operator> <literal type="number" pos:line="34" pos:column="51">1<pos:position pos:line="34" pos:column="52"/></literal></expr>;<pos:position pos:line="34" pos:column="53"/></init>
	   <condition><expr><name pos:line="35" pos:column="12">i<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">&gt;=<pos:position pos:line="35" pos:column="19"/></operator> <literal type="number" pos:line="35" pos:column="17">0<pos:position pos:line="35" pos:column="18"/></literal></expr>;<pos:position pos:line="35" pos:column="19"/></condition> <incr><expr><name pos:line="35" pos:column="20">i<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">--<pos:position pos:line="35" pos:column="23"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="24"/></control>
	<block type="pseudo"><expr_stmt><expr><operator pos:line="36" pos:column="9">(<pos:position pos:line="36" pos:column="10"/></operator><operator pos:line="36" pos:column="10">(<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="11">COPYING_UNIT<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">*<pos:position pos:line="36" pos:column="25"/></operator><operator pos:line="36" pos:column="25">)<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="26">object_base<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">)<pos:position pos:line="36" pos:column="38"/></operator><index pos:line="36" pos:column="38">[<expr><name pos:line="36" pos:column="39">i<pos:position pos:line="36" pos:column="40"/></name></expr>]<pos:position pos:line="36" pos:column="41"/></index>
	  <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <operator pos:line="37" pos:column="13">(<pos:position pos:line="37" pos:column="14"/></operator><operator pos:line="37" pos:column="14">(<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="15">COPYING_UNIT<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">*<pos:position pos:line="37" pos:column="29"/></operator><operator pos:line="37" pos:column="29">)<pos:position pos:line="37" pos:column="30"/></operator><name><name pos:line="37" pos:column="30">h<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">-&gt;<pos:position pos:line="37" pos:column="36"/></operator><name pos:line="37" pos:column="33">object_base<pos:position pos:line="37" pos:column="44"/></name></name><operator pos:line="37" pos:column="44">)<pos:position pos:line="37" pos:column="45"/></operator><index pos:line="37" pos:column="45">[<expr><name pos:line="37" pos:column="46">i<pos:position pos:line="37" pos:column="47"/></name></expr>]<pos:position pos:line="37" pos:column="48"/></index></expr>;<pos:position pos:line="37" pos:column="49"/></expr_stmt></block></for>
      <comment type="block" pos:line="38" pos:column="7">/* We used to copy the odd few remaining bytes as one extra COPYING_UNIT,
	 but that can cross a page boundary on a machine
	 which does not do strict alignment for COPYING_UNITS.  */</comment>
      <expr_stmt><expr><name pos:line="41" pos:column="7">already<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">=<pos:position pos:line="41" pos:column="16"/></operator> <name pos:line="41" pos:column="17">obj_size<pos:position pos:line="41" pos:column="25"/></name> <operator pos:line="41" pos:column="26">/<pos:position pos:line="41" pos:column="27"/></operator> <sizeof pos:line="41" pos:column="28">sizeof <argument_list pos:line="41" pos:column="35">(<argument><expr><name pos:line="41" pos:column="36">COPYING_UNIT<pos:position pos:line="41" pos:column="48"/></name></expr></argument>)<pos:position pos:line="41" pos:column="49"/></argument_list></sizeof> <operator pos:line="41" pos:column="50">*<pos:position pos:line="41" pos:column="51"/></operator> <sizeof pos:line="41" pos:column="52">sizeof <argument_list pos:line="41" pos:column="59">(<argument><expr><name pos:line="41" pos:column="60">COPYING_UNIT<pos:position pos:line="41" pos:column="72"/></name></expr></argument>)<pos:position pos:line="41" pos:column="73"/></argument_list></sizeof></expr>;<pos:position pos:line="41" pos:column="74"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then>
  <else pos:line="43" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="5">already<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator> <literal type="number" pos:line="44" pos:column="15">0<pos:position pos:line="44" pos:column="16"/></literal></expr>;<pos:position pos:line="44" pos:column="17"/></expr_stmt></block></else></if>
  <comment type="block" pos:line="45" pos:column="3">/* Copy remaining bytes one by one.  */</comment>
  <for pos:line="46" pos:column="3">for <control pos:line="46" pos:column="7">(<init><expr><name pos:line="46" pos:column="8">i<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <name pos:line="46" pos:column="12">already<pos:position pos:line="46" pos:column="19"/></name></expr>;<pos:position pos:line="46" pos:column="20"/></init> <condition><expr><name pos:line="46" pos:column="21">i<pos:position pos:line="46" pos:column="22"/></name> <operator pos:line="46" pos:column="23">&lt;<pos:position pos:line="46" pos:column="27"/></operator> <name pos:line="46" pos:column="25">obj_size<pos:position pos:line="46" pos:column="33"/></name></expr>;<pos:position pos:line="46" pos:column="34"/></condition> <incr><expr><name pos:line="46" pos:column="35">i<pos:position pos:line="46" pos:column="36"/></name><operator pos:line="46" pos:column="36">++<pos:position pos:line="46" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="46" pos:column="39"/></control>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="5">object_base<pos:position pos:line="47" pos:column="16"/></name><index pos:line="47" pos:column="16">[<expr><name pos:line="47" pos:column="17">i<pos:position pos:line="47" pos:column="18"/></name></expr>]<pos:position pos:line="47" pos:column="19"/></index></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <name><name pos:line="47" pos:column="22">h<pos:position pos:line="47" pos:column="23"/></name><operator pos:line="47" pos:column="23">-&gt;<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="25">object_base<pos:position pos:line="47" pos:column="36"/></name><index pos:line="47" pos:column="36">[<expr><name pos:line="47" pos:column="37">i<pos:position pos:line="47" pos:column="38"/></name></expr>]<pos:position pos:line="47" pos:column="39"/></index></name></expr>;<pos:position pos:line="47" pos:column="40"/></expr_stmt></block></for>

  <comment type="block" pos:line="49" pos:column="3">/* If the object just copied was the only data in OLD_CHUNK,
     free that chunk and remove it from the chain.
     But not if that chunk might contain an empty object.  */</comment>
  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><operator pos:line="52" pos:column="7">!<pos:position pos:line="52" pos:column="8"/></operator> <name><name pos:line="52" pos:column="9">h<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">-&gt;<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="12">maybe_empty_object<pos:position pos:line="52" pos:column="30"/></name></name>
      <operator pos:line="53" pos:column="7">&amp;&amp;<pos:position pos:line="53" pos:column="17"/></operator> <operator pos:line="53" pos:column="10">(<pos:position pos:line="53" pos:column="11"/></operator><name><name pos:line="53" pos:column="11">h<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">-&gt;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="14">object_base<pos:position pos:line="53" pos:column="25"/></name></name>
	  <operator pos:line="54" pos:column="11">==<pos:position pos:line="54" pos:column="13"/></operator> <call><name pos:line="54" pos:column="14">__PTR_ALIGN<pos:position pos:line="54" pos:column="25"/></name> <argument_list pos:line="54" pos:column="26">(<argument><expr><operator pos:line="54" pos:column="27">(<pos:position pos:line="54" pos:column="28"/></operator><name pos:line="54" pos:column="28">char<pos:position pos:line="54" pos:column="32"/></name> <operator pos:line="54" pos:column="33">*<pos:position pos:line="54" pos:column="34"/></operator><operator pos:line="54" pos:column="34">)<pos:position pos:line="54" pos:column="35"/></operator> <name pos:line="54" pos:column="36">old_chunk<pos:position pos:line="54" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="47">old_chunk<pos:position pos:line="54" pos:column="56"/></name><operator pos:line="54" pos:column="56">-&gt;<pos:position pos:line="54" pos:column="61"/></operator><name pos:line="54" pos:column="58">contents<pos:position pos:line="54" pos:column="66"/></name></name></expr></argument>,
			  <argument><expr><name><name pos:line="55" pos:column="27">h<pos:position pos:line="55" pos:column="28"/></name><operator pos:line="55" pos:column="28">-&gt;<pos:position pos:line="55" pos:column="33"/></operator><name pos:line="55" pos:column="30">alignment_mask<pos:position pos:line="55" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call><operator pos:line="55" pos:column="45">)<pos:position pos:line="55" pos:column="46"/></operator></expr>)<pos:position pos:line="55" pos:column="47"/></condition><then pos:line="55" pos:column="47">
    <block pos:line="56" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="57" pos:column="7">new_chunk<pos:position pos:line="57" pos:column="16"/></name><operator pos:line="57" pos:column="16">-&gt;<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="18">prev<pos:position pos:line="57" pos:column="22"/></name></name> <operator pos:line="57" pos:column="23">=<pos:position pos:line="57" pos:column="24"/></operator> <name><name pos:line="57" pos:column="25">old_chunk<pos:position pos:line="57" pos:column="34"/></name><operator pos:line="57" pos:column="34">-&gt;<pos:position pos:line="57" pos:column="39"/></operator><name pos:line="57" pos:column="36">prev<pos:position pos:line="57" pos:column="40"/></name></name></expr>;<pos:position pos:line="57" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">CALL_FREEFUN<pos:position pos:line="58" pos:column="19"/></name> <argument_list pos:line="58" pos:column="20">(<argument><expr><name pos:line="58" pos:column="21">h<pos:position pos:line="58" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="24">old_chunk<pos:position pos:line="58" pos:column="33"/></name></expr></argument>)<pos:position pos:line="58" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="61" pos:column="3">h<pos:position pos:line="61" pos:column="4"/></name><operator pos:line="61" pos:column="4">-&gt;<pos:position pos:line="61" pos:column="9"/></operator><name pos:line="61" pos:column="6">object_base<pos:position pos:line="61" pos:column="17"/></name></name> <operator pos:line="61" pos:column="18">=<pos:position pos:line="61" pos:column="19"/></operator> <name pos:line="61" pos:column="20">object_base<pos:position pos:line="61" pos:column="31"/></name></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="62" pos:column="3">h<pos:position pos:line="62" pos:column="4"/></name><operator pos:line="62" pos:column="4">-&gt;<pos:position pos:line="62" pos:column="9"/></operator><name pos:line="62" pos:column="6">next_free<pos:position pos:line="62" pos:column="15"/></name></name> <operator pos:line="62" pos:column="16">=<pos:position pos:line="62" pos:column="17"/></operator> <name><name pos:line="62" pos:column="18">h<pos:position pos:line="62" pos:column="19"/></name><operator pos:line="62" pos:column="19">-&gt;<pos:position pos:line="62" pos:column="24"/></operator><name pos:line="62" pos:column="21">object_base<pos:position pos:line="62" pos:column="32"/></name></name> <operator pos:line="62" pos:column="33">+<pos:position pos:line="62" pos:column="34"/></operator> <name pos:line="62" pos:column="35">obj_size<pos:position pos:line="62" pos:column="43"/></name></expr>;<pos:position pos:line="62" pos:column="44"/></expr_stmt>
  <comment type="block" pos:line="63" pos:column="3">/* The new chunk certainly contains no empty object yet.  */</comment>
  <expr_stmt><expr><name><name pos:line="64" pos:column="3">h<pos:position pos:line="64" pos:column="4"/></name><operator pos:line="64" pos:column="4">-&gt;<pos:position pos:line="64" pos:column="9"/></operator><name pos:line="64" pos:column="6">maybe_empty_object<pos:position pos:line="64" pos:column="24"/></name></name> <operator pos:line="64" pos:column="25">=<pos:position pos:line="64" pos:column="26"/></operator> <literal type="number" pos:line="64" pos:column="27">0<pos:position pos:line="64" pos:column="28"/></literal></expr>;<pos:position pos:line="64" pos:column="29"/></expr_stmt>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
