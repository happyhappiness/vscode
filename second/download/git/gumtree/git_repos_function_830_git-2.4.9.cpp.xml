<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_830_git-2.4.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">is_hfs_dotgit<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">path<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">ucs_char_t<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">c<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><name pos:line="5" pos:column="9">c<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">=<pos:position pos:line="5" pos:column="12"/></operator> <call><name pos:line="5" pos:column="13">next_hfs_char<pos:position pos:line="5" pos:column="26"/></name><argument_list pos:line="5" pos:column="26">(<argument><expr><operator pos:line="5" pos:column="27">&amp;<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="28">path<pos:position pos:line="5" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="34"/></expr_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">c<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">!=<pos:position pos:line="6" pos:column="17"/></operator> <literal type="char" pos:line="6" pos:column="18">'.'<pos:position pos:line="6" pos:column="21"/></literal></expr>)<pos:position pos:line="6" pos:column="22"/></condition><then pos:line="6" pos:column="22">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="8" pos:column="9">c<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <call><name pos:line="8" pos:column="13">next_hfs_char<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><operator pos:line="8" pos:column="27">&amp;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="28">path<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>

	<comment type="block" pos:line="10" pos:column="9">/*
	 * there's a great deal of other case-folding that occurs
	 * in HFS+, but this is enough to catch anything that will
	 * convert to ".git"
	 */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">c<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">!=<pos:position pos:line="15" pos:column="17"/></operator> <literal type="char" pos:line="15" pos:column="18">'g'<pos:position pos:line="15" pos:column="21"/></literal> <operator pos:line="15" pos:column="22">&amp;&amp;<pos:position pos:line="15" pos:column="32"/></operator> <name pos:line="15" pos:column="25">c<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">!=<pos:position pos:line="15" pos:column="29"/></operator> <literal type="char" pos:line="15" pos:column="30">'G'<pos:position pos:line="15" pos:column="33"/></literal></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><literal type="number" pos:line="16" pos:column="24">0<pos:position pos:line="16" pos:column="25"/></literal></expr>;<pos:position pos:line="16" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="17" pos:column="9">c<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <call><name pos:line="17" pos:column="13">next_hfs_char<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><operator pos:line="17" pos:column="27">&amp;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="28">path<pos:position pos:line="17" pos:column="32"/></name></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">c<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">!=<pos:position pos:line="18" pos:column="17"/></operator> <literal type="char" pos:line="18" pos:column="18">'i'<pos:position pos:line="18" pos:column="21"/></literal> <operator pos:line="18" pos:column="22">&amp;&amp;<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="25">c<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">!=<pos:position pos:line="18" pos:column="29"/></operator> <literal type="char" pos:line="18" pos:column="30">'I'<pos:position pos:line="18" pos:column="33"/></literal></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="20" pos:column="9">c<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <call><name pos:line="20" pos:column="13">next_hfs_char<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><operator pos:line="20" pos:column="27">&amp;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="28">path<pos:position pos:line="20" pos:column="32"/></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">c<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">!=<pos:position pos:line="21" pos:column="17"/></operator> <literal type="char" pos:line="21" pos:column="18">'t'<pos:position pos:line="21" pos:column="21"/></literal> <operator pos:line="21" pos:column="22">&amp;&amp;<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="25">c<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">!=<pos:position pos:line="21" pos:column="29"/></operator> <literal type="char" pos:line="21" pos:column="30">'T'<pos:position pos:line="21" pos:column="33"/></literal></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><literal type="number" pos:line="22" pos:column="24">0<pos:position pos:line="22" pos:column="25"/></literal></expr>;<pos:position pos:line="22" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="23" pos:column="9">c<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <call><name pos:line="23" pos:column="13">next_hfs_char<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><operator pos:line="23" pos:column="27">&amp;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="28">path<pos:position pos:line="23" pos:column="32"/></name></expr></argument>)<pos:position pos:line="23" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">c<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">&amp;&amp;<pos:position pos:line="24" pos:column="25"/></operator> <operator pos:line="24" pos:column="18">!<pos:position pos:line="24" pos:column="19"/></operator><call><name pos:line="24" pos:column="19">is_dir_sep<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">c<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="33"/></condition><then pos:line="24" pos:column="33">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><literal type="number" pos:line="25" pos:column="24">0<pos:position pos:line="25" pos:column="25"/></literal></expr>;<pos:position pos:line="25" pos:column="26"/></return></block></then></if>

	<return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">1<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
