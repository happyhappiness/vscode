<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_579_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">rstrip_ref_components<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">refname<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">int<pos:position pos:line="1" pos:column="66"/></name></type> <name pos:line="1" pos:column="67">len<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">long<pos:position pos:line="3" pos:column="13"/></name></type> <name pos:line="3" pos:column="14">remaining<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><name pos:line="3" pos:column="26">len<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">start<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><call><name pos:line="4" pos:column="23">xstrdup<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">(<argument><expr><name pos:line="4" pos:column="31">refname<pos:position pos:line="4" pos:column="38"/></name></expr></argument>)<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">len<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">&lt;<pos:position pos:line="6" pos:column="21"/></operator> <literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21"> <block pos:line="6" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">i<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">p<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><name pos:line="8" pos:column="33">refname<pos:position pos:line="8" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>

		<comment type="block" pos:line="10" pos:column="17">/* Find total no of '/' separated path-components */</comment>
		<for pos:line="11" pos:column="17">for <control pos:line="11" pos:column="21">(<init><expr><name pos:line="11" pos:column="22">i<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator> <literal type="number" pos:line="11" pos:column="26">0<pos:position pos:line="11" pos:column="27"/></literal></expr>;<pos:position pos:line="11" pos:column="28"/></init> <condition><expr><name><name pos:line="11" pos:column="29">p<pos:position pos:line="11" pos:column="30"/></name><index pos:line="11" pos:column="30">[<expr><name pos:line="11" pos:column="31">i<pos:position pos:line="11" pos:column="32"/></name></expr>]<pos:position pos:line="11" pos:column="33"/></index></name></expr>;<pos:position pos:line="11" pos:column="34"/></condition> <incr><expr><ternary><condition><expr><name><name pos:line="11" pos:column="35">p<pos:position pos:line="11" pos:column="36"/></name><index pos:line="11" pos:column="36">[<expr><name pos:line="11" pos:column="37">i<pos:position pos:line="11" pos:column="38"/></name></expr>]<pos:position pos:line="11" pos:column="39"/></index></name> <operator pos:line="11" pos:column="40">==<pos:position pos:line="11" pos:column="42"/></operator> <literal type="char" pos:line="11" pos:column="43">'/'<pos:position pos:line="11" pos:column="46"/></literal></expr> ?<pos:position pos:line="11" pos:column="48"/></condition><then pos:line="11" pos:column="48"> <expr><name pos:line="11" pos:column="49">i<pos:position pos:line="11" pos:column="50"/></name><operator pos:line="11" pos:column="50">++<pos:position pos:line="11" pos:column="52"/></operator></expr> <pos:position pos:line="11" pos:column="53"/></then><else pos:line="11" pos:column="53">: <expr><operator pos:line="11" pos:column="55">*<pos:position pos:line="11" pos:column="56"/></operator><name pos:line="11" pos:column="56">p<pos:position pos:line="11" pos:column="57"/></name><operator pos:line="11" pos:column="57">++<pos:position pos:line="11" pos:column="59"/></operator></expr></else></ternary></expr></incr>)<pos:position pos:line="11" pos:column="60"/></control>
			<block type="pseudo"><empty_stmt pos:line="12" pos:column="25">;<pos:position pos:line="12" pos:column="26"/></empty_stmt></block></for>
		<comment type="block" pos:line="13" pos:column="17">/*
		 * The number of components we need to strip is now
		 * the total minus the components to be left (Plus one
		 * because we count the number of '/', but the number
		 * of components is one more than the no of '/').
		 */</comment>
		<expr_stmt><expr><name pos:line="19" pos:column="17">remaining<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="29">i<pos:position pos:line="19" pos:column="30"/></name> <operator pos:line="19" pos:column="31">+<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="33">len<pos:position pos:line="19" pos:column="36"/></name> <operator pos:line="19" pos:column="37">+<pos:position pos:line="19" pos:column="38"/></operator> <literal type="number" pos:line="19" pos:column="39">1<pos:position pos:line="19" pos:column="40"/></literal></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><name pos:line="22" pos:column="16">remaining<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">--<pos:position pos:line="22" pos:column="27"/></operator> <operator pos:line="22" pos:column="28">&gt;<pos:position pos:line="22" pos:column="32"/></operator> <literal type="number" pos:line="22" pos:column="30">0<pos:position pos:line="22" pos:column="31"/></literal></expr>)<pos:position pos:line="22" pos:column="32"/></condition> <block pos:line="22" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">char<pos:position pos:line="23" pos:column="21"/></name> <modifier pos:line="23" pos:column="22">*<pos:position pos:line="23" pos:column="23"/></modifier></type><name pos:line="23" pos:column="23">p<pos:position pos:line="23" pos:column="24"/></name> <init pos:line="23" pos:column="25">= <expr><call><name pos:line="23" pos:column="27">strrchr<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">start<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="42">'/'<pos:position pos:line="23" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="47"/></decl_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">p<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">==<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="26">NULL<pos:position pos:line="24" pos:column="30"/></name></expr>)<pos:position pos:line="24" pos:column="31"/></condition><then pos:line="24" pos:column="31">
			<block type="pseudo"><return pos:line="25" pos:column="25">return <expr><literal type="string" pos:line="25" pos:column="32">""<pos:position pos:line="25" pos:column="34"/></literal></expr>;<pos:position pos:line="25" pos:column="35"/></return></block></then>
		<else pos:line="26" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="25">p<pos:position pos:line="27" pos:column="26"/></name><index pos:line="27" pos:column="26">[<expr><literal type="number" pos:line="27" pos:column="27">0<pos:position pos:line="27" pos:column="28"/></literal></expr>]<pos:position pos:line="27" pos:column="29"/></index></name> <operator pos:line="27" pos:column="30">=<pos:position pos:line="27" pos:column="31"/></operator> <literal type="char" pos:line="27" pos:column="32">'\0'<pos:position pos:line="27" pos:column="36"/></literal></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt></block></else></if>
	}<pos:position pos:line="28" pos:column="10"/></block></while>
	<return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">start<pos:position pos:line="29" pos:column="21"/></name></expr>;<pos:position pos:line="29" pos:column="22"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
