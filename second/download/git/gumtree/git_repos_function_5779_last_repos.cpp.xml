<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5779_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mktree_line<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">buf<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">size_t<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">len<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">nul_term_line<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">int<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">allow_missing<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="85"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">ptr<pos:position pos:line="3" pos:column="18"/></name></decl>, <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="21">ntr<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">mode<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">enum<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">object_type<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">mode_type<pos:position pos:line="5" pos:column="35"/></name></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt> <comment type="block" pos:line="5" pos:column="37">/* object type derived from mode */</comment>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">enum<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">object_type<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">obj_type<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt> <comment type="block" pos:line="6" pos:column="36">/* object type derived from sha */</comment>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">path<pos:position pos:line="7" pos:column="19"/></name></decl>, <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="22">to_free<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><name pos:line="7" pos:column="32">NULL<pos:position pos:line="7" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name> <name pos:line="8" pos:column="18">char<pos:position pos:line="8" pos:column="22"/></name></type> <name><name pos:line="8" pos:column="23">sha1<pos:position pos:line="8" pos:column="27"/></name><index pos:line="8" pos:column="27">[<expr><literal type="number" pos:line="8" pos:column="28">20<pos:position pos:line="8" pos:column="30"/></literal></expr>]<pos:position pos:line="8" pos:column="31"/></index></name></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">ptr<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <name pos:line="10" pos:column="15">buf<pos:position pos:line="10" pos:column="18"/></name></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
	<comment type="block" pos:line="11" pos:column="9">/*
	 * Read non-recursive ls-tree output format:
	 *     mode SP type SP sha1 TAB name
	 */</comment>
	<expr_stmt><expr><name pos:line="15" pos:column="9">mode<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <call><name pos:line="15" pos:column="16">strtoul<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">ptr<pos:position pos:line="15" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="29">&amp;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="30">ntr<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="35">8<pos:position pos:line="15" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">ptr<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">==<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">ntr<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">||<pos:position pos:line="16" pos:column="26"/></operator> <operator pos:line="16" pos:column="27">!<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="28">ntr<pos:position pos:line="16" pos:column="31"/></name> <operator pos:line="16" pos:column="32">||<pos:position pos:line="16" pos:column="34"/></operator> <operator pos:line="16" pos:column="35">*<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="36">ntr<pos:position pos:line="16" pos:column="39"/></name> <operator pos:line="16" pos:column="40">!=<pos:position pos:line="16" pos:column="42"/></operator> <literal type="char" pos:line="16" pos:column="43">' '<pos:position pos:line="16" pos:column="46"/></literal></expr>)<pos:position pos:line="16" pos:column="47"/></condition><then pos:line="16" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">die<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><literal type="string" pos:line="17" pos:column="21">"input format error: %s"<pos:position pos:line="17" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="47">buf<pos:position pos:line="17" pos:column="50"/></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="18" pos:column="9">ptr<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <name pos:line="18" pos:column="15">ntr<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">+<pos:position pos:line="18" pos:column="20"/></operator> <literal type="number" pos:line="18" pos:column="21">1<pos:position pos:line="18" pos:column="22"/></literal></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt> <comment type="block" pos:line="18" pos:column="24">/* type */</comment>
	<expr_stmt><expr><name pos:line="19" pos:column="9">ntr<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <call><name pos:line="19" pos:column="15">strchr<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">ptr<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="27">' '<pos:position pos:line="19" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">ntr<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">||<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">buf<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">+<pos:position pos:line="20" pos:column="26"/></operator> <name pos:line="20" pos:column="27">len<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">&lt;=<pos:position pos:line="20" pos:column="36"/></operator> <name pos:line="20" pos:column="34">ntr<pos:position pos:line="20" pos:column="37"/></name> <operator pos:line="20" pos:column="38">+<pos:position pos:line="20" pos:column="39"/></operator> <literal type="number" pos:line="20" pos:column="40">40<pos:position pos:line="20" pos:column="42"/></literal> <operator pos:line="20" pos:column="43">||<pos:position pos:line="20" pos:column="45"/></operator>
	    <name><name pos:line="21" pos:column="13">ntr<pos:position pos:line="21" pos:column="16"/></name><index pos:line="21" pos:column="16">[<expr><literal type="number" pos:line="21" pos:column="17">41<pos:position pos:line="21" pos:column="19"/></literal></expr>]<pos:position pos:line="21" pos:column="20"/></index></name> <operator pos:line="21" pos:column="21">!=<pos:position pos:line="21" pos:column="23"/></operator> <literal type="char" pos:line="21" pos:column="24">'\t'<pos:position pos:line="21" pos:column="28"/></literal> <operator pos:line="21" pos:column="29">||<pos:position pos:line="21" pos:column="31"/></operator>
	    <call><name pos:line="22" pos:column="13">get_sha1_hex<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">ntr<pos:position pos:line="22" pos:column="29"/></name> <operator pos:line="22" pos:column="30">+<pos:position pos:line="22" pos:column="31"/></operator> <literal type="number" pos:line="22" pos:column="32">1<pos:position pos:line="22" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="35">sha1<pos:position pos:line="22" pos:column="39"/></name></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="41"/></condition><then pos:line="22" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">die<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><literal type="string" pos:line="23" pos:column="21">"input format error: %s"<pos:position pos:line="23" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="47">buf<pos:position pos:line="23" pos:column="50"/></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="25" pos:column="9">/* It is perfectly normal if we do not have a commit from a submodule */</comment>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">S_ISGITLINK<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">mode<pos:position pos:line="26" pos:column="29"/></name></expr></argument>)<pos:position pos:line="26" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="31"/></condition><then pos:line="26" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="17">allow_missing<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">=<pos:position pos:line="27" pos:column="32"/></operator> <literal type="number" pos:line="27" pos:column="33">1<pos:position pos:line="27" pos:column="34"/></literal></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt></block></then></if>


	<expr_stmt><expr><operator pos:line="30" pos:column="9">*<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">ntr<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">++<pos:position pos:line="30" pos:column="15"/></operator> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <literal type="number" pos:line="30" pos:column="18">0<pos:position pos:line="30" pos:column="19"/></literal></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt> <comment type="block" pos:line="30" pos:column="21">/* now at the beginning of SHA1 */</comment>

	<expr_stmt><expr><name pos:line="32" pos:column="9">path<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <name pos:line="32" pos:column="16">ntr<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">+<pos:position pos:line="32" pos:column="21"/></operator> <literal type="number" pos:line="32" pos:column="22">41<pos:position pos:line="32" pos:column="24"/></literal></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>  <comment type="block" pos:line="32" pos:column="27">/* at the beginning of name */</comment>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">nul_term_line<pos:position pos:line="33" pos:column="27"/></name> <operator pos:line="33" pos:column="28">&amp;&amp;<pos:position pos:line="33" pos:column="38"/></operator> <name><name pos:line="33" pos:column="31">path<pos:position pos:line="33" pos:column="35"/></name><index pos:line="33" pos:column="35">[<expr><literal type="number" pos:line="33" pos:column="36">0<pos:position pos:line="33" pos:column="37"/></literal></expr>]<pos:position pos:line="33" pos:column="38"/></index></name> <operator pos:line="33" pos:column="39">==<pos:position pos:line="33" pos:column="41"/></operator> <literal type="char" pos:line="33" pos:column="42">'"'<pos:position pos:line="33" pos:column="45"/></literal></expr>)<pos:position pos:line="33" pos:column="46"/></condition><then pos:line="33" pos:column="46"> <block pos:line="33" pos:column="47">{
		<decl_stmt><decl><type><name><name pos:line="34" pos:column="17">struct<pos:position pos:line="34" pos:column="23"/></name> <name pos:line="34" pos:column="24">strbuf<pos:position pos:line="34" pos:column="30"/></name></name></type> <name pos:line="34" pos:column="31">p_uq<pos:position pos:line="34" pos:column="35"/></name> <init pos:line="34" pos:column="36">= <expr><name pos:line="34" pos:column="38">STRBUF_INIT<pos:position pos:line="34" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="50"/></decl_stmt>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><call><name pos:line="35" pos:column="21">unquote_c_style<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><operator pos:line="35" pos:column="37">&amp;<pos:position pos:line="35" pos:column="42"/></operator><name pos:line="35" pos:column="38">p_uq<pos:position pos:line="35" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">path<pos:position pos:line="35" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="50">NULL<pos:position pos:line="35" pos:column="54"/></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="56"/></condition><then pos:line="35" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="25">die<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><literal type="string" pos:line="36" pos:column="29">"invalid quoting"<pos:position pos:line="36" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="37" pos:column="17">path<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">to_free<pos:position pos:line="37" pos:column="31"/></name> <operator pos:line="37" pos:column="32">=<pos:position pos:line="37" pos:column="33"/></operator> <call><name pos:line="37" pos:column="34">strbuf_detach<pos:position pos:line="37" pos:column="47"/></name><argument_list pos:line="37" pos:column="47">(<argument><expr><operator pos:line="37" pos:column="48">&amp;<pos:position pos:line="37" pos:column="53"/></operator><name pos:line="37" pos:column="49">p_uq<pos:position pos:line="37" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="55">NULL<pos:position pos:line="37" pos:column="59"/></name></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="40" pos:column="9">/*
	 * Object type is redundantly derivable three ways.
	 * These should all agree.
	 */</comment>
	<expr_stmt><expr><name pos:line="44" pos:column="9">mode_type<pos:position pos:line="44" pos:column="18"/></name> <operator pos:line="44" pos:column="19">=<pos:position pos:line="44" pos:column="20"/></operator> <call><name pos:line="44" pos:column="21">object_type<pos:position pos:line="44" pos:column="32"/></name><argument_list pos:line="44" pos:column="32">(<argument><expr><name pos:line="44" pos:column="33">mode<pos:position pos:line="44" pos:column="37"/></name></expr></argument>)<pos:position pos:line="44" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="39"/></expr_stmt>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">mode_type<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">!=<pos:position pos:line="45" pos:column="25"/></operator> <call><name pos:line="45" pos:column="26">type_from_string<pos:position pos:line="45" pos:column="42"/></name><argument_list pos:line="45" pos:column="42">(<argument><expr><name pos:line="45" pos:column="43">ptr<pos:position pos:line="45" pos:column="46"/></name></expr></argument>)<pos:position pos:line="45" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="48"/></condition><then pos:line="45" pos:column="48"> <block pos:line="45" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">die<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">(<argument><expr><literal type="string" pos:line="46" pos:column="21">"entry '%s' object type (%s) doesn't match mode type (%s)"<pos:position pos:line="46" pos:column="79"/></literal></expr></argument>,
			<argument><expr><name pos:line="47" pos:column="25">path<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="31">ptr<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><name><typename pos:line="47" pos:column="36">typename<pos:position pos:line="47" pos:column="44"/></typename></name><operator pos:line="47" pos:column="44">(<pos:position pos:line="47" pos:column="45"/></operator><name pos:line="47" pos:column="45">mode_type<pos:position pos:line="47" pos:column="54"/></name><operator pos:line="47" pos:column="54">)<pos:position pos:line="47" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="50" pos:column="9">/* Check the type of object identified by sha1 */</comment>
	<expr_stmt><expr><name pos:line="51" pos:column="9">obj_type<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">=<pos:position pos:line="51" pos:column="19"/></operator> <call><name pos:line="51" pos:column="20">sha1_object_info<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">(<argument><expr><name pos:line="51" pos:column="37">sha1<pos:position pos:line="51" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="43">NULL<pos:position pos:line="51" pos:column="47"/></name></expr></argument>)<pos:position pos:line="51" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="49"/></expr_stmt>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">obj_type<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">&lt;<pos:position pos:line="52" pos:column="26"/></operator> <literal type="number" pos:line="52" pos:column="24">0<pos:position pos:line="52" pos:column="25"/></literal></expr>)<pos:position pos:line="52" pos:column="26"/></condition><then pos:line="52" pos:column="26"> <block pos:line="52" pos:column="27">{
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name pos:line="53" pos:column="21">allow_missing<pos:position pos:line="53" pos:column="34"/></name></expr>)<pos:position pos:line="53" pos:column="35"/></condition><then pos:line="53" pos:column="35"> <block pos:line="53" pos:column="36">{
			<empty_stmt pos:line="54" pos:column="25">;<pos:position pos:line="54" pos:column="26"/></empty_stmt> <comment type="block" pos:line="54" pos:column="27">/* no problem - missing objects are presumed to be of the right type */</comment>
		}<pos:position pos:line="55" pos:column="18"/></block></then> <else pos:line="55" pos:column="19">else <block pos:line="55" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">die<pos:position pos:line="56" pos:column="28"/></name><argument_list pos:line="56" pos:column="28">(<argument><expr><literal type="string" pos:line="56" pos:column="29">"entry '%s' object %s is unavailable"<pos:position pos:line="56" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="68">path<pos:position pos:line="56" pos:column="72"/></name></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="74">sha1_to_hex<pos:position pos:line="56" pos:column="85"/></name><argument_list pos:line="56" pos:column="85">(<argument><expr><name pos:line="56" pos:column="86">sha1<pos:position pos:line="56" pos:column="90"/></name></expr></argument>)<pos:position pos:line="56" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="93"/></expr_stmt>
		}<pos:position pos:line="57" pos:column="18"/></block></else></if>
	}<pos:position pos:line="58" pos:column="10"/></block></then> <else pos:line="58" pos:column="11">else <block pos:line="58" pos:column="16">{
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">obj_type<pos:position pos:line="59" pos:column="29"/></name> <operator pos:line="59" pos:column="30">!=<pos:position pos:line="59" pos:column="32"/></operator> <name pos:line="59" pos:column="33">mode_type<pos:position pos:line="59" pos:column="42"/></name></expr>)<pos:position pos:line="59" pos:column="43"/></condition><then pos:line="59" pos:column="43"> <block pos:line="59" pos:column="44">{
			<comment type="block" pos:line="60" pos:column="25">/*
			 * The object exists but is of the wrong type.
			 * This is a problem regardless of allow_missing
			 * because the new tree entry will never be correct.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="65" pos:column="25">die<pos:position pos:line="65" pos:column="28"/></name><argument_list pos:line="65" pos:column="28">(<argument><expr><literal type="string" pos:line="65" pos:column="29">"entry '%s' object %s is a %s but specified type was (%s)"<pos:position pos:line="65" pos:column="87"/></literal></expr></argument>,
				<argument><expr><name pos:line="66" pos:column="33">path<pos:position pos:line="66" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="66" pos:column="39">sha1_to_hex<pos:position pos:line="66" pos:column="50"/></name><argument_list pos:line="66" pos:column="50">(<argument><expr><name pos:line="66" pos:column="51">sha1<pos:position pos:line="66" pos:column="55"/></name></expr></argument>)<pos:position pos:line="66" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name><typename pos:line="66" pos:column="58">typename<pos:position pos:line="66" pos:column="66"/></typename></name><operator pos:line="66" pos:column="66">(<pos:position pos:line="66" pos:column="67"/></operator><name pos:line="66" pos:column="67">obj_type<pos:position pos:line="66" pos:column="75"/></name><operator pos:line="66" pos:column="75">)<pos:position pos:line="66" pos:column="76"/></operator></expr></argument>, <argument><expr><name><typename pos:line="66" pos:column="78">typename<pos:position pos:line="66" pos:column="86"/></typename></name><operator pos:line="66" pos:column="86">(<pos:position pos:line="66" pos:column="87"/></operator><name pos:line="66" pos:column="87">mode_type<pos:position pos:line="66" pos:column="96"/></name><operator pos:line="66" pos:column="96">)<pos:position pos:line="66" pos:column="97"/></operator></expr></argument>)<pos:position pos:line="66" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="99"/></expr_stmt>
		}<pos:position pos:line="67" pos:column="18"/></block></then></if>
	}<pos:position pos:line="68" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="70" pos:column="9">append_to_tree<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><name pos:line="70" pos:column="24">mode<pos:position pos:line="70" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="30">sha1<pos:position pos:line="70" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="36">path<pos:position pos:line="70" pos:column="40"/></name></expr></argument>)<pos:position pos:line="70" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">free<pos:position pos:line="71" pos:column="13"/></name><argument_list pos:line="71" pos:column="13">(<argument><expr><name pos:line="71" pos:column="14">to_free<pos:position pos:line="71" pos:column="21"/></name></expr></argument>)<pos:position pos:line="71" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="23"/></expr_stmt>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
