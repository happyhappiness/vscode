<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5900_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">update_remote_refs<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">ref<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">refs<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
			       <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name><name pos:line="2" pos:column="38">struct<pos:position pos:line="2" pos:column="44"/></name> <name pos:line="2" pos:column="45">ref<pos:position pos:line="2" pos:column="48"/></name></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">mapped_refs<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>,
			       <parameter><decl><type><specifier pos:line="3" pos:column="32">const<pos:position pos:line="3" pos:column="37"/></specifier> <name><name pos:line="3" pos:column="38">struct<pos:position pos:line="3" pos:column="44"/></name> <name pos:line="3" pos:column="45">ref<pos:position pos:line="3" pos:column="48"/></name></name> <modifier pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></modifier></type><name pos:line="3" pos:column="50">remote_head_points_at<pos:position pos:line="3" pos:column="71"/></name></decl></parameter>,
			       <parameter><decl><type><specifier pos:line="4" pos:column="32">const<pos:position pos:line="4" pos:column="37"/></specifier> <name pos:line="4" pos:column="38">char<pos:position pos:line="4" pos:column="42"/></name> <modifier pos:line="4" pos:column="43">*<pos:position pos:line="4" pos:column="44"/></modifier></type><name pos:line="4" pos:column="44">branch_top<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>,
			       <parameter><decl><type><specifier pos:line="5" pos:column="32">const<pos:position pos:line="5" pos:column="37"/></specifier> <name pos:line="5" pos:column="38">char<pos:position pos:line="5" pos:column="42"/></name> <modifier pos:line="5" pos:column="43">*<pos:position pos:line="5" pos:column="44"/></modifier></type><name pos:line="5" pos:column="44">msg<pos:position pos:line="5" pos:column="47"/></name></decl></parameter>,
			       <parameter><decl><type><name><name pos:line="6" pos:column="32">struct<pos:position pos:line="6" pos:column="38"/></name> <name pos:line="6" pos:column="39">transport<pos:position pos:line="6" pos:column="48"/></name></name> <modifier pos:line="6" pos:column="49">*<pos:position pos:line="6" pos:column="50"/></modifier></type><name pos:line="6" pos:column="50">transport<pos:position pos:line="6" pos:column="59"/></name></decl></parameter>,
			       <parameter><decl><type><name pos:line="7" pos:column="32">int<pos:position pos:line="7" pos:column="35"/></name></type> <name pos:line="7" pos:column="36">check_connectivity<pos:position pos:line="7" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="55"/></parameter_list>
<block pos:line="8" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name><name pos:line="9" pos:column="15">struct<pos:position pos:line="9" pos:column="21"/></name> <name pos:line="9" pos:column="22">ref<pos:position pos:line="9" pos:column="25"/></name></name> <modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier></type><name pos:line="9" pos:column="27">rm<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><name pos:line="9" pos:column="32">mapped_refs<pos:position pos:line="9" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="44"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">check_connectivity<pos:position pos:line="11" pos:column="31"/></name></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32"> <block pos:line="11" pos:column="33">{
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">struct<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">check_connected_options<pos:position pos:line="12" pos:column="47"/></name></name></type> <name pos:line="12" pos:column="48">opt<pos:position pos:line="12" pos:column="51"/></name> <init pos:line="12" pos:column="52">= <expr><name pos:line="12" pos:column="54">CHECK_CONNECTED_INIT<pos:position pos:line="12" pos:column="74"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="75"/></decl_stmt>

		<expr_stmt><expr><name><name pos:line="14" pos:column="17">opt<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">.<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="21">transport<pos:position pos:line="14" pos:column="30"/></name></name> <operator pos:line="14" pos:column="31">=<pos:position pos:line="14" pos:column="32"/></operator> <name pos:line="14" pos:column="33">transport<pos:position pos:line="14" pos:column="42"/></name></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="15" pos:column="17">opt<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">.<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">progress<pos:position pos:line="15" pos:column="29"/></name></name> <operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator> <name><name pos:line="15" pos:column="32">transport<pos:position pos:line="15" pos:column="41"/></name><operator pos:line="15" pos:column="41">-&gt;<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="43">progress<pos:position pos:line="15" pos:column="51"/></name></name></expr>;<pos:position pos:line="15" pos:column="52"/></expr_stmt>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><call><name pos:line="17" pos:column="21">check_connected<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">iterate_ref_map<pos:position pos:line="17" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="54">&amp;<pos:position pos:line="17" pos:column="59"/></operator><name pos:line="17" pos:column="55">rm<pos:position pos:line="17" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="59">&amp;<pos:position pos:line="17" pos:column="64"/></operator><name pos:line="17" pos:column="60">opt<pos:position pos:line="17" pos:column="63"/></name></expr></argument>)<pos:position pos:line="17" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="65"/></condition><then pos:line="17" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="25">die<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><call><name pos:line="18" pos:column="29">_<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><literal type="string" pos:line="18" pos:column="31">"remote did not send all necessary objects"<pos:position pos:line="18" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="77"/></expr_stmt></block></then></if>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">refs<pos:position pos:line="21" pos:column="17"/></name></expr>)<pos:position pos:line="21" pos:column="18"/></condition><then pos:line="21" pos:column="18"> <block pos:line="21" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">write_remote_refs<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(<argument><expr><name pos:line="22" pos:column="35">mapped_refs<pos:position pos:line="22" pos:column="46"/></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">option_single_branch<pos:position pos:line="23" pos:column="41"/></name> <operator pos:line="23" pos:column="42">&amp;&amp;<pos:position pos:line="23" pos:column="52"/></operator> <operator pos:line="23" pos:column="45">!<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="46">option_no_tags<pos:position pos:line="23" pos:column="60"/></name></expr>)<pos:position pos:line="23" pos:column="61"/></condition><then pos:line="23" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">write_followtags<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name pos:line="24" pos:column="42">refs<pos:position pos:line="24" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="48">msg<pos:position pos:line="24" pos:column="51"/></name></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="53"/></expr_stmt></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">remote_head_points_at<pos:position pos:line="27" pos:column="34"/></name> <operator pos:line="27" pos:column="35">&amp;&amp;<pos:position pos:line="27" pos:column="45"/></operator> <operator pos:line="27" pos:column="38">!<pos:position pos:line="27" pos:column="39"/></operator><name pos:line="27" pos:column="39">option_bare<pos:position pos:line="27" pos:column="50"/></name></expr>)<pos:position pos:line="27" pos:column="51"/></condition><then pos:line="27" pos:column="51"> <block pos:line="27" pos:column="52">{
		<decl_stmt><decl><type><name><name pos:line="28" pos:column="17">struct<pos:position pos:line="28" pos:column="23"/></name> <name pos:line="28" pos:column="24">strbuf<pos:position pos:line="28" pos:column="30"/></name></name></type> <name pos:line="28" pos:column="31">head_ref<pos:position pos:line="28" pos:column="39"/></name> <init pos:line="28" pos:column="40">= <expr><name pos:line="28" pos:column="42">STRBUF_INIT<pos:position pos:line="28" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="54"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">strbuf_addstr<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><operator pos:line="29" pos:column="31">&amp;<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="32">head_ref<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="42">branch_top<pos:position pos:line="29" pos:column="52"/></name></expr></argument>)<pos:position pos:line="29" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">strbuf_addstr<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><operator pos:line="30" pos:column="31">&amp;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="32">head_ref<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="42">"HEAD"<pos:position pos:line="30" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><call><name pos:line="31" pos:column="21">create_symref<pos:position pos:line="31" pos:column="34"/></name><argument_list pos:line="31" pos:column="34">(<argument><expr><name><name pos:line="31" pos:column="35">head_ref<pos:position pos:line="31" pos:column="43"/></name><operator pos:line="31" pos:column="43">.<pos:position pos:line="31" pos:column="44"/></operator><name pos:line="31" pos:column="44">buf<pos:position pos:line="31" pos:column="47"/></name></name></expr></argument>,
				  <argument><expr><name><name pos:line="32" pos:column="35">remote_head_points_at<pos:position pos:line="32" pos:column="56"/></name><operator pos:line="32" pos:column="56">-&gt;<pos:position pos:line="32" pos:column="61"/></operator><name pos:line="32" pos:column="58">peer_ref<pos:position pos:line="32" pos:column="66"/></name><operator pos:line="32" pos:column="66">-&gt;<pos:position pos:line="32" pos:column="71"/></operator><name pos:line="32" pos:column="68">name<pos:position pos:line="32" pos:column="72"/></name></name></expr></argument>,
				  <argument><expr><name pos:line="33" pos:column="35">msg<pos:position pos:line="33" pos:column="38"/></name></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call> <operator pos:line="33" pos:column="40">&lt;<pos:position pos:line="33" pos:column="44"/></operator> <literal type="number" pos:line="33" pos:column="42">0<pos:position pos:line="33" pos:column="43"/></literal></expr>)<pos:position pos:line="33" pos:column="44"/></condition><then pos:line="33" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">die<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><call><name pos:line="34" pos:column="29">_<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><literal type="string" pos:line="34" pos:column="31">"unable to update %s"<pos:position pos:line="34" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="55">head_ref<pos:position pos:line="34" pos:column="63"/></name><operator pos:line="34" pos:column="63">.<pos:position pos:line="34" pos:column="64"/></operator><name pos:line="34" pos:column="64">buf<pos:position pos:line="34" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="69"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">strbuf_release<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><operator pos:line="35" pos:column="32">&amp;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="33">head_ref<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
