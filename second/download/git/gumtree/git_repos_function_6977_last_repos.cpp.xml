<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6977_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">check_arrival_expand_ecl_sub<pos:position pos:line="3" pos:column="29"/></name> <parameter_list pos:line="3" pos:column="30">(<parameter><decl><type><specifier pos:line="3" pos:column="31">const<pos:position pos:line="3" pos:column="36"/></specifier> <name pos:line="3" pos:column="37">re_dfa_t<pos:position pos:line="3" pos:column="45"/></name> <modifier pos:line="3" pos:column="46">*<pos:position pos:line="3" pos:column="47"/></modifier></type><name pos:line="3" pos:column="47">dfa<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="52">re_node_set<pos:position pos:line="3" pos:column="63"/></name> <modifier pos:line="3" pos:column="64">*<pos:position pos:line="3" pos:column="65"/></modifier></type><name pos:line="3" pos:column="65">dst_nodes<pos:position pos:line="3" pos:column="74"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="4" pos:column="31">int<pos:position pos:line="4" pos:column="34"/></name></type> <name pos:line="4" pos:column="35">target<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="43">int<pos:position pos:line="4" pos:column="46"/></name></type> <name pos:line="4" pos:column="47">ex_subexp<pos:position pos:line="4" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="58">int<pos:position pos:line="4" pos:column="61"/></name></type> <name pos:line="4" pos:column="62">type<pos:position pos:line="4" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="67"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">cur_node<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
  <for pos:line="7" pos:column="3">for <control pos:line="7" pos:column="7">(<init><expr><name pos:line="7" pos:column="8">cur_node<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">=<pos:position pos:line="7" pos:column="18"/></operator> <name pos:line="7" pos:column="19">target<pos:position pos:line="7" pos:column="25"/></name></expr>;<pos:position pos:line="7" pos:column="26"/></init> <condition><expr><operator pos:line="7" pos:column="27">!<pos:position pos:line="7" pos:column="28"/></operator><call><name pos:line="7" pos:column="28">re_node_set_contains<pos:position pos:line="7" pos:column="48"/></name> <argument_list pos:line="7" pos:column="49">(<argument><expr><name pos:line="7" pos:column="50">dst_nodes<pos:position pos:line="7" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="61">cur_node<pos:position pos:line="7" pos:column="69"/></name></expr></argument>)<pos:position pos:line="7" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="71"/></condition><incr/>)<pos:position pos:line="7" pos:column="72"/></control>
    <block pos:line="8" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="9" pos:column="7">int<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">err<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>

      <if pos:line="11" pos:column="7">if <condition pos:line="11" pos:column="10">(<expr><name><name pos:line="11" pos:column="11">dfa<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">-&gt;<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="16">nodes<pos:position pos:line="11" pos:column="21"/></name><index pos:line="11" pos:column="21">[<expr><name pos:line="11" pos:column="22">cur_node<pos:position pos:line="11" pos:column="30"/></name></expr>]<pos:position pos:line="11" pos:column="31"/></index></name><operator pos:line="11" pos:column="31">.<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">type<pos:position pos:line="11" pos:column="36"/></name> <operator pos:line="11" pos:column="37">==<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="40">type<pos:position pos:line="11" pos:column="44"/></name>
	  <operator pos:line="12" pos:column="11">&amp;&amp;<pos:position pos:line="12" pos:column="21"/></operator> <name><name pos:line="12" pos:column="14">dfa<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">-&gt;<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="19">nodes<pos:position pos:line="12" pos:column="24"/></name><index pos:line="12" pos:column="24">[<expr><name pos:line="12" pos:column="25">cur_node<pos:position pos:line="12" pos:column="33"/></name></expr>]<pos:position pos:line="12" pos:column="34"/></index></name><operator pos:line="12" pos:column="34">.<pos:position pos:line="12" pos:column="35"/></operator><name><name pos:line="12" pos:column="35">opr<pos:position pos:line="12" pos:column="38"/></name><operator pos:line="12" pos:column="38">.<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="39">idx<pos:position pos:line="12" pos:column="42"/></name></name> <operator pos:line="12" pos:column="43">==<pos:position pos:line="12" pos:column="45"/></operator> <name pos:line="12" pos:column="46">ex_subexp<pos:position pos:line="12" pos:column="55"/></name></expr>)<pos:position pos:line="12" pos:column="56"/></condition><then pos:line="12" pos:column="56">
	<block pos:line="13" pos:column="9">{
	  <if pos:line="14" pos:column="11">if <condition pos:line="14" pos:column="14">(<expr><name pos:line="14" pos:column="15">type<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">==<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="23">OP_CLOSE_SUBEXP<pos:position pos:line="14" pos:column="38"/></name></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39">
	    <block pos:line="15" pos:column="13">{
	      <expr_stmt><expr><name pos:line="16" pos:column="15">err<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <call><name pos:line="16" pos:column="21">re_node_set_insert<pos:position pos:line="16" pos:column="39"/></name> <argument_list pos:line="16" pos:column="40">(<argument><expr><name pos:line="16" pos:column="41">dst_nodes<pos:position pos:line="16" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="52">cur_node<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
	      <if pos:line="17" pos:column="15">if <condition pos:line="17" pos:column="18">(<expr><call><name pos:line="17" pos:column="19">BE<pos:position pos:line="17" pos:column="21"/></name> <argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">err<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">==<pos:position pos:line="17" pos:column="29"/></operator> <operator pos:line="17" pos:column="30">-<pos:position pos:line="17" pos:column="31"/></operator><literal type="number" pos:line="17" pos:column="31">1<pos:position pos:line="17" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="34">0<pos:position pos:line="17" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="37"/></condition><then pos:line="17" pos:column="37">
		<block type="pseudo"><return pos:line="18" pos:column="17">return <expr><name pos:line="18" pos:column="24">REG_ESPACE<pos:position pos:line="18" pos:column="34"/></name></expr>;<pos:position pos:line="18" pos:column="35"/></return></block></then></if>
	    }<pos:position pos:line="19" pos:column="14"/></block></then></if>
	  <break pos:line="20" pos:column="11">break;<pos:position pos:line="20" pos:column="17"/></break>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name pos:line="22" pos:column="7">err<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <call><name pos:line="22" pos:column="13">re_node_set_insert<pos:position pos:line="22" pos:column="31"/></name> <argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">dst_nodes<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="44">cur_node<pos:position pos:line="22" pos:column="52"/></name></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="54"/></expr_stmt>
      <if pos:line="23" pos:column="7">if <condition pos:line="23" pos:column="10">(<expr><call><name pos:line="23" pos:column="11">BE<pos:position pos:line="23" pos:column="13"/></name> <argument_list pos:line="23" pos:column="14">(<argument><expr><name pos:line="23" pos:column="15">err<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">==<pos:position pos:line="23" pos:column="21"/></operator> <operator pos:line="23" pos:column="22">-<pos:position pos:line="23" pos:column="23"/></operator><literal type="number" pos:line="23" pos:column="23">1<pos:position pos:line="23" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="26">0<pos:position pos:line="23" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="29"/></condition><then pos:line="23" pos:column="29">
	<block type="pseudo"><return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">REG_ESPACE<pos:position pos:line="24" pos:column="26"/></name></expr>;<pos:position pos:line="24" pos:column="27"/></return></block></then></if>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><name><name pos:line="25" pos:column="11">dfa<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">-&gt;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="16">edests<pos:position pos:line="25" pos:column="22"/></name><index pos:line="25" pos:column="22">[<expr><name pos:line="25" pos:column="23">cur_node<pos:position pos:line="25" pos:column="31"/></name></expr>]<pos:position pos:line="25" pos:column="32"/></index></name><operator pos:line="25" pos:column="32">.<pos:position pos:line="25" pos:column="33"/></operator><name pos:line="25" pos:column="33">nelem<pos:position pos:line="25" pos:column="38"/></name> <operator pos:line="25" pos:column="39">==<pos:position pos:line="25" pos:column="41"/></operator> <literal type="number" pos:line="25" pos:column="42">0<pos:position pos:line="25" pos:column="43"/></literal></expr>)<pos:position pos:line="25" pos:column="44"/></condition><then pos:line="25" pos:column="44">
	<block type="pseudo"><break pos:line="26" pos:column="9">break;<pos:position pos:line="26" pos:column="15"/></break></block></then></if>
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><name><name pos:line="27" pos:column="11">dfa<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">-&gt;<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="16">edests<pos:position pos:line="27" pos:column="22"/></name><index pos:line="27" pos:column="22">[<expr><name pos:line="27" pos:column="23">cur_node<pos:position pos:line="27" pos:column="31"/></name></expr>]<pos:position pos:line="27" pos:column="32"/></index></name><operator pos:line="27" pos:column="32">.<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="33">nelem<pos:position pos:line="27" pos:column="38"/></name> <operator pos:line="27" pos:column="39">==<pos:position pos:line="27" pos:column="41"/></operator> <literal type="number" pos:line="27" pos:column="42">2<pos:position pos:line="27" pos:column="43"/></literal></expr>)<pos:position pos:line="27" pos:column="44"/></condition><then pos:line="27" pos:column="44">
	<block pos:line="28" pos:column="9">{
	  <expr_stmt><expr><name pos:line="29" pos:column="11">err<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">=<pos:position pos:line="29" pos:column="16"/></operator> <call><name pos:line="29" pos:column="17">check_arrival_expand_ecl_sub<pos:position pos:line="29" pos:column="45"/></name> <argument_list pos:line="29" pos:column="46">(<argument><expr><name pos:line="29" pos:column="47">dfa<pos:position pos:line="29" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="52">dst_nodes<pos:position pos:line="29" pos:column="61"/></name></expr></argument>,
					      <argument><expr><name><name pos:line="30" pos:column="47">dfa<pos:position pos:line="30" pos:column="50"/></name><operator pos:line="30" pos:column="50">-&gt;<pos:position pos:line="30" pos:column="55"/></operator><name pos:line="30" pos:column="52">edests<pos:position pos:line="30" pos:column="58"/></name><index pos:line="30" pos:column="58">[<expr><name pos:line="30" pos:column="59">cur_node<pos:position pos:line="30" pos:column="67"/></name></expr>]<pos:position pos:line="30" pos:column="68"/></index></name><operator pos:line="30" pos:column="68">.<pos:position pos:line="30" pos:column="69"/></operator><name><name pos:line="30" pos:column="69">elems<pos:position pos:line="30" pos:column="74"/></name><index pos:line="30" pos:column="74">[<expr><literal type="number" pos:line="30" pos:column="75">1<pos:position pos:line="30" pos:column="76"/></literal></expr>]<pos:position pos:line="30" pos:column="77"/></index></name></expr></argument>,
					      <argument><expr><name pos:line="31" pos:column="47">ex_subexp<pos:position pos:line="31" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="58">type<pos:position pos:line="31" pos:column="62"/></name></expr></argument>)<pos:position pos:line="31" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="64"/></expr_stmt>
	  <if pos:line="32" pos:column="11">if <condition pos:line="32" pos:column="14">(<expr><call><name pos:line="32" pos:column="15">BE<pos:position pos:line="32" pos:column="17"/></name> <argument_list pos:line="32" pos:column="18">(<argument><expr><name pos:line="32" pos:column="19">err<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">!=<pos:position pos:line="32" pos:column="25"/></operator> <name pos:line="32" pos:column="26">REG_NOERROR<pos:position pos:line="32" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="39">0<pos:position pos:line="32" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="42"/></condition><then pos:line="32" pos:column="42">
	    <block type="pseudo"><return pos:line="33" pos:column="13">return <expr><name pos:line="33" pos:column="20">err<pos:position pos:line="33" pos:column="23"/></name></expr>;<pos:position pos:line="33" pos:column="24"/></return></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name pos:line="35" pos:column="7">cur_node<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <name><name pos:line="35" pos:column="18">dfa<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">-&gt;<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="23">edests<pos:position pos:line="35" pos:column="29"/></name><index pos:line="35" pos:column="29">[<expr><name pos:line="35" pos:column="30">cur_node<pos:position pos:line="35" pos:column="38"/></name></expr>]<pos:position pos:line="35" pos:column="39"/></index></name><operator pos:line="35" pos:column="39">.<pos:position pos:line="35" pos:column="40"/></operator><name><name pos:line="35" pos:column="40">elems<pos:position pos:line="35" pos:column="45"/></name><index pos:line="35" pos:column="45">[<expr><literal type="number" pos:line="35" pos:column="46">0<pos:position pos:line="35" pos:column="47"/></literal></expr>]<pos:position pos:line="35" pos:column="48"/></index></name></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></for>
  <return pos:line="37" pos:column="3">return <expr><name pos:line="37" pos:column="10">REG_NOERROR<pos:position pos:line="37" pos:column="21"/></name></expr>;<pos:position pos:line="37" pos:column="22"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
