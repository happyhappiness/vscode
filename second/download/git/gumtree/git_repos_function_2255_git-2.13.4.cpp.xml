<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2255_git-2.13.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">abspath_part_inside_repo<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">path<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">len<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">wtlen<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">path0<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">off<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">work_tree<pos:position pos:line="7" pos:column="30"/></name> <init pos:line="7" pos:column="31">= <expr><call><name pos:line="7" pos:column="33">get_git_work_tree<pos:position pos:line="7" pos:column="50"/></name><argument_list pos:line="7" pos:column="50">()<pos:position pos:line="7" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="53"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">work_tree<pos:position pos:line="9" pos:column="23"/></name></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">-<pos:position pos:line="10" pos:column="25"/></operator><literal type="number" pos:line="10" pos:column="25">1<pos:position pos:line="10" pos:column="26"/></literal></expr>;<pos:position pos:line="10" pos:column="27"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="11" pos:column="9">wtlen<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <call><name pos:line="11" pos:column="17">strlen<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">work_tree<pos:position pos:line="11" pos:column="33"/></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">len<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <call><name pos:line="12" pos:column="15">strlen<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">path<pos:position pos:line="12" pos:column="26"/></name></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="13" pos:column="9">off<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">offset_1st_component<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">path<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>

	<comment type="block" pos:line="15" pos:column="9">/* check if work tree is already the prefix */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">wtlen<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">&lt;=<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="22">len<pos:position pos:line="16" pos:column="25"/></name> <operator pos:line="16" pos:column="26">&amp;&amp;<pos:position pos:line="16" pos:column="36"/></operator> <operator pos:line="16" pos:column="29">!<pos:position pos:line="16" pos:column="30"/></operator><call><name pos:line="16" pos:column="30">strncmp<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">path<pos:position pos:line="16" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="44">work_tree<pos:position pos:line="16" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="55">wtlen<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="62"/></condition><then pos:line="16" pos:column="62"> <block pos:line="16" pos:column="63">{
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">path<pos:position pos:line="17" pos:column="25"/></name><index pos:line="17" pos:column="25">[<expr><name pos:line="17" pos:column="26">wtlen<pos:position pos:line="17" pos:column="31"/></name></expr>]<pos:position pos:line="17" pos:column="32"/></index></name> <operator pos:line="17" pos:column="33">==<pos:position pos:line="17" pos:column="35"/></operator> <literal type="char" pos:line="17" pos:column="36">'/'<pos:position pos:line="17" pos:column="39"/></literal></expr>)<pos:position pos:line="17" pos:column="40"/></condition><then pos:line="17" pos:column="40"> <block pos:line="17" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">memmove<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">path<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="39">path<pos:position pos:line="18" pos:column="43"/></name> <operator pos:line="18" pos:column="44">+<pos:position pos:line="18" pos:column="45"/></operator> <name pos:line="18" pos:column="46">wtlen<pos:position pos:line="18" pos:column="51"/></name> <operator pos:line="18" pos:column="52">+<pos:position pos:line="18" pos:column="53"/></operator> <literal type="number" pos:line="18" pos:column="54">1<pos:position pos:line="18" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="57">len<pos:position pos:line="18" pos:column="60"/></name> <operator pos:line="18" pos:column="61">-<pos:position pos:line="18" pos:column="62"/></operator> <name pos:line="18" pos:column="63">wtlen<pos:position pos:line="18" pos:column="68"/></name></expr></argument>)<pos:position pos:line="18" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="70"/></expr_stmt>
			<return pos:line="19" pos:column="25">return <expr><literal type="number" pos:line="19" pos:column="32">0<pos:position pos:line="19" pos:column="33"/></literal></expr>;<pos:position pos:line="19" pos:column="34"/></return>
		}<pos:position pos:line="20" pos:column="18"/></block></then> <elseif pos:line="20" pos:column="19">else <if pos:line="20" pos:column="24">if <condition pos:line="20" pos:column="27">(<expr><name><name pos:line="20" pos:column="28">path<pos:position pos:line="20" pos:column="32"/></name><index pos:line="20" pos:column="32">[<expr><name pos:line="20" pos:column="33">wtlen<pos:position pos:line="20" pos:column="38"/></name> <operator pos:line="20" pos:column="39">-<pos:position pos:line="20" pos:column="40"/></operator> <literal type="number" pos:line="20" pos:column="41">1<pos:position pos:line="20" pos:column="42"/></literal></expr>]<pos:position pos:line="20" pos:column="43"/></index></name> <operator pos:line="20" pos:column="44">==<pos:position pos:line="20" pos:column="46"/></operator> <literal type="char" pos:line="20" pos:column="47">'/'<pos:position pos:line="20" pos:column="50"/></literal> <operator pos:line="20" pos:column="51">||<pos:position pos:line="20" pos:column="53"/></operator> <name><name pos:line="20" pos:column="54">path<pos:position pos:line="20" pos:column="58"/></name><index pos:line="20" pos:column="58">[<expr><name pos:line="20" pos:column="59">wtlen<pos:position pos:line="20" pos:column="64"/></name></expr>]<pos:position pos:line="20" pos:column="65"/></index></name> <operator pos:line="20" pos:column="66">==<pos:position pos:line="20" pos:column="68"/></operator> <literal type="char" pos:line="20" pos:column="69">'\0'<pos:position pos:line="20" pos:column="73"/></literal></expr>)<pos:position pos:line="20" pos:column="74"/></condition><then pos:line="20" pos:column="74"> <block pos:line="20" pos:column="75">{
			<comment type="block" pos:line="21" pos:column="25">/* work tree is the root, or the whole path */</comment>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">memmove<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">path<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="39">path<pos:position pos:line="22" pos:column="43"/></name> <operator pos:line="22" pos:column="44">+<pos:position pos:line="22" pos:column="45"/></operator> <name pos:line="22" pos:column="46">wtlen<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="53">len<pos:position pos:line="22" pos:column="56"/></name> <operator pos:line="22" pos:column="57">-<pos:position pos:line="22" pos:column="58"/></operator> <name pos:line="22" pos:column="59">wtlen<pos:position pos:line="22" pos:column="64"/></name> <operator pos:line="22" pos:column="65">+<pos:position pos:line="22" pos:column="66"/></operator> <literal type="number" pos:line="22" pos:column="67">1<pos:position pos:line="22" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="70"/></expr_stmt>
			<return pos:line="23" pos:column="25">return <expr><literal type="number" pos:line="23" pos:column="32">0<pos:position pos:line="23" pos:column="33"/></literal></expr>;<pos:position pos:line="23" pos:column="34"/></return>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if></elseif></if>
		<comment type="block" pos:line="25" pos:column="17">/* work tree might match beginning of a symlink to work tree */</comment>
		<expr_stmt><expr><name pos:line="26" pos:column="17">off<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">wtlen<pos:position pos:line="26" pos:column="28"/></name></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="28" pos:column="9">path0<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <name pos:line="28" pos:column="17">path<pos:position pos:line="28" pos:column="21"/></name></expr>;<pos:position pos:line="28" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">path<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">+=<pos:position pos:line="29" pos:column="16"/></operator> <name pos:line="29" pos:column="17">off<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></expr_stmt>

	<comment type="block" pos:line="31" pos:column="9">/* check each '/'-terminated level */</comment>
	<while pos:line="32" pos:column="9">while <condition pos:line="32" pos:column="15">(<expr><operator pos:line="32" pos:column="16">*<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">path<pos:position pos:line="32" pos:column="21"/></name></expr>)<pos:position pos:line="32" pos:column="22"/></condition> <block pos:line="32" pos:column="23">{
		<expr_stmt><expr><name pos:line="33" pos:column="17">path<pos:position pos:line="33" pos:column="21"/></name><operator pos:line="33" pos:column="21">++<pos:position pos:line="33" pos:column="23"/></operator></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><operator pos:line="34" pos:column="21">*<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">path<pos:position pos:line="34" pos:column="26"/></name> <operator pos:line="34" pos:column="27">==<pos:position pos:line="34" pos:column="29"/></operator> <literal type="char" pos:line="34" pos:column="30">'/'<pos:position pos:line="34" pos:column="33"/></literal></expr>)<pos:position pos:line="34" pos:column="34"/></condition><then pos:line="34" pos:column="34"> <block pos:line="34" pos:column="35">{
			<expr_stmt><expr><operator pos:line="35" pos:column="25">*<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="26">path<pos:position pos:line="35" pos:column="30"/></name> <operator pos:line="35" pos:column="31">=<pos:position pos:line="35" pos:column="32"/></operator> <literal type="char" pos:line="35" pos:column="33">'\0'<pos:position pos:line="35" pos:column="37"/></literal></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><call><name pos:line="36" pos:column="29">strcmp<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">(<argument><expr><call><name pos:line="36" pos:column="36">real_path<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">(<argument><expr><name pos:line="36" pos:column="46">path0<pos:position pos:line="36" pos:column="51"/></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="36" pos:column="54">work_tree<pos:position pos:line="36" pos:column="63"/></name></expr></argument>)<pos:position pos:line="36" pos:column="64"/></argument_list></call> <operator pos:line="36" pos:column="65">==<pos:position pos:line="36" pos:column="67"/></operator> <literal type="number" pos:line="36" pos:column="68">0<pos:position pos:line="36" pos:column="69"/></literal></expr>)<pos:position pos:line="36" pos:column="70"/></condition><then pos:line="36" pos:column="70"> <block pos:line="36" pos:column="71">{
				<expr_stmt><expr><call><name pos:line="37" pos:column="33">memmove<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><name pos:line="37" pos:column="41">path0<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">path<pos:position pos:line="37" pos:column="52"/></name> <operator pos:line="37" pos:column="53">+<pos:position pos:line="37" pos:column="54"/></operator> <literal type="number" pos:line="37" pos:column="55">1<pos:position pos:line="37" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="58">len<pos:position pos:line="37" pos:column="61"/></name> <operator pos:line="37" pos:column="62">-<pos:position pos:line="37" pos:column="63"/></operator> <operator pos:line="37" pos:column="64">(<pos:position pos:line="37" pos:column="65"/></operator><name pos:line="37" pos:column="65">path<pos:position pos:line="37" pos:column="69"/></name> <operator pos:line="37" pos:column="70">-<pos:position pos:line="37" pos:column="71"/></operator> <name pos:line="37" pos:column="72">path0<pos:position pos:line="37" pos:column="77"/></name><operator pos:line="37" pos:column="77">)<pos:position pos:line="37" pos:column="78"/></operator></expr></argument>)<pos:position pos:line="37" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="80"/></expr_stmt>
				<return pos:line="38" pos:column="33">return <expr><literal type="number" pos:line="38" pos:column="40">0<pos:position pos:line="38" pos:column="41"/></literal></expr>;<pos:position pos:line="38" pos:column="42"/></return>
			}<pos:position pos:line="39" pos:column="26"/></block></then></if>
			<expr_stmt><expr><operator pos:line="40" pos:column="25">*<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="26">path<pos:position pos:line="40" pos:column="30"/></name> <operator pos:line="40" pos:column="31">=<pos:position pos:line="40" pos:column="32"/></operator> <literal type="char" pos:line="40" pos:column="33">'/'<pos:position pos:line="40" pos:column="36"/></literal></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>
	}<pos:position pos:line="42" pos:column="10"/></block></while>

	<comment type="block" pos:line="44" pos:column="9">/* check whole path */</comment>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name pos:line="45" pos:column="13">strcmp<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><call><name pos:line="45" pos:column="20">real_path<pos:position pos:line="45" pos:column="29"/></name><argument_list pos:line="45" pos:column="29">(<argument><expr><name pos:line="45" pos:column="30">path0<pos:position pos:line="45" pos:column="35"/></name></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="45" pos:column="38">work_tree<pos:position pos:line="45" pos:column="47"/></name></expr></argument>)<pos:position pos:line="45" pos:column="48"/></argument_list></call> <operator pos:line="45" pos:column="49">==<pos:position pos:line="45" pos:column="51"/></operator> <literal type="number" pos:line="45" pos:column="52">0<pos:position pos:line="45" pos:column="53"/></literal></expr>)<pos:position pos:line="45" pos:column="54"/></condition><then pos:line="45" pos:column="54"> <block pos:line="45" pos:column="55">{
		<expr_stmt><expr><operator pos:line="46" pos:column="17">*<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="18">path0<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">=<pos:position pos:line="46" pos:column="25"/></operator> <literal type="char" pos:line="46" pos:column="26">'\0'<pos:position pos:line="46" pos:column="30"/></literal></expr>;<pos:position pos:line="46" pos:column="31"/></expr_stmt>
		<return pos:line="47" pos:column="17">return <expr><literal type="number" pos:line="47" pos:column="24">0<pos:position pos:line="47" pos:column="25"/></literal></expr>;<pos:position pos:line="47" pos:column="26"/></return>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>

	<return pos:line="50" pos:column="9">return <expr><operator pos:line="50" pos:column="16">-<pos:position pos:line="50" pos:column="17"/></operator><literal type="number" pos:line="50" pos:column="17">1<pos:position pos:line="50" pos:column="18"/></literal></expr>;<pos:position pos:line="50" pos:column="19"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
