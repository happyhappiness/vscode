<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5126_git-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">merge_entry<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">pos<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">path<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">found<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name><name pos:line="4" pos:column="21">arguments<pos:position pos:line="4" pos:column="30"/></name><index pos:line="4" pos:column="30">[]<pos:position pos:line="4" pos:column="32"/></index></name> <init pos:line="4" pos:column="33">= <expr><block pos:line="4" pos:column="35">{ <expr><name pos:line="4" pos:column="37">pgm<pos:position pos:line="4" pos:column="40"/></name></expr>, <expr><literal type="string" pos:line="4" pos:column="42">""<pos:position pos:line="4" pos:column="44"/></literal></expr>, <expr><literal type="string" pos:line="4" pos:column="46">""<pos:position pos:line="4" pos:column="48"/></literal></expr>, <expr><literal type="string" pos:line="4" pos:column="50">""<pos:position pos:line="4" pos:column="52"/></literal></expr>, <expr><name pos:line="4" pos:column="54">path<pos:position pos:line="4" pos:column="58"/></name></expr>, <expr><literal type="string" pos:line="4" pos:column="60">""<pos:position pos:line="4" pos:column="62"/></literal></expr>, <expr><literal type="string" pos:line="4" pos:column="64">""<pos:position pos:line="4" pos:column="66"/></literal></expr>, <expr><literal type="string" pos:line="4" pos:column="68">""<pos:position pos:line="4" pos:column="70"/></literal></expr>, <expr><name pos:line="4" pos:column="72">NULL<pos:position pos:line="4" pos:column="76"/></name></expr> }<pos:position pos:line="4" pos:column="78"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="79"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">hexbuf<pos:position pos:line="5" pos:column="20"/></name><index pos:line="5" pos:column="20">[<expr><literal type="number" pos:line="5" pos:column="21">4<pos:position pos:line="5" pos:column="22"/></literal></expr>]<pos:position pos:line="5" pos:column="23"/></index><index pos:line="5" pos:column="23">[<expr><literal type="number" pos:line="5" pos:column="24">60<pos:position pos:line="5" pos:column="26"/></literal></expr>]<pos:position pos:line="5" pos:column="27"/></index></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">ownbuf<pos:position pos:line="6" pos:column="20"/></name><index pos:line="6" pos:column="20">[<expr><literal type="number" pos:line="6" pos:column="21">4<pos:position pos:line="6" pos:column="22"/></literal></expr>]<pos:position pos:line="6" pos:column="23"/></index><index pos:line="6" pos:column="23">[<expr><literal type="number" pos:line="6" pos:column="24">60<pos:position pos:line="6" pos:column="26"/></literal></expr>]<pos:position pos:line="6" pos:column="27"/></index></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">pos<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">&gt;=<pos:position pos:line="8" pos:column="22"/></operator> <name pos:line="8" pos:column="20">active_nr<pos:position pos:line="8" pos:column="29"/></name></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">die<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><literal type="string" pos:line="9" pos:column="21">"git merge-index: %s not in the cache"<pos:position pos:line="9" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="61">path<pos:position pos:line="9" pos:column="65"/></name></expr></argument>)<pos:position pos:line="9" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="67"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="10" pos:column="9">found<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
	<do pos:line="11" pos:column="9">do <block pos:line="11" pos:column="12">{
		<decl_stmt><decl><type><specifier pos:line="12" pos:column="17">const<pos:position pos:line="12" pos:column="22"/></specifier> <name><name pos:line="12" pos:column="23">struct<pos:position pos:line="12" pos:column="29"/></name> <name pos:line="12" pos:column="30">cache_entry<pos:position pos:line="12" pos:column="41"/></name></name> <modifier pos:line="12" pos:column="42">*<pos:position pos:line="12" pos:column="43"/></modifier></type><name pos:line="12" pos:column="43">ce<pos:position pos:line="12" pos:column="45"/></name> <init pos:line="12" pos:column="46">= <expr><name><name pos:line="12" pos:column="48">active_cache<pos:position pos:line="12" pos:column="60"/></name><index pos:line="12" pos:column="60">[<expr><name pos:line="12" pos:column="61">pos<pos:position pos:line="12" pos:column="64"/></name></expr>]<pos:position pos:line="12" pos:column="65"/></index></name></expr></init></decl>;<pos:position pos:line="12" pos:column="66"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">stage<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><call><name pos:line="13" pos:column="29">ce_stage<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">ce<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="42"/></decl_stmt>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">strcmp<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name><name pos:line="15" pos:column="28">ce<pos:position pos:line="15" pos:column="30"/></name><operator pos:line="15" pos:column="30">-&gt;<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="32">name<pos:position pos:line="15" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="38">path<pos:position pos:line="15" pos:column="42"/></name></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="44"/></condition><then pos:line="15" pos:column="44">
			<block type="pseudo"><break pos:line="16" pos:column="25">break;<pos:position pos:line="16" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="17" pos:column="17">found<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">++<pos:position pos:line="17" pos:column="24"/></operator></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">strcpy<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name><name pos:line="18" pos:column="24">hexbuf<pos:position pos:line="18" pos:column="30"/></name><index pos:line="18" pos:column="30">[<expr><name pos:line="18" pos:column="31">stage<pos:position pos:line="18" pos:column="36"/></name></expr>]<pos:position pos:line="18" pos:column="37"/></index></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="39">sha1_to_hex<pos:position pos:line="18" pos:column="50"/></name><argument_list pos:line="18" pos:column="50">(<argument><expr><name><name pos:line="18" pos:column="51">ce<pos:position pos:line="18" pos:column="53"/></name><operator pos:line="18" pos:column="53">-&gt;<pos:position pos:line="18" pos:column="58"/></operator><name pos:line="18" pos:column="55">sha1<pos:position pos:line="18" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">sprintf<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name><name pos:line="19" pos:column="25">ownbuf<pos:position pos:line="19" pos:column="31"/></name><index pos:line="19" pos:column="31">[<expr><name pos:line="19" pos:column="32">stage<pos:position pos:line="19" pos:column="37"/></name></expr>]<pos:position pos:line="19" pos:column="38"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="40">"%o"<pos:position pos:line="19" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="46">ce<pos:position pos:line="19" pos:column="48"/></name><operator pos:line="19" pos:column="48">-&gt;<pos:position pos:line="19" pos:column="53"/></operator><name pos:line="19" pos:column="50">ce_mode<pos:position pos:line="19" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="20" pos:column="17">arguments<pos:position pos:line="20" pos:column="26"/></name><index pos:line="20" pos:column="26">[<expr><name pos:line="20" pos:column="27">stage<pos:position pos:line="20" pos:column="32"/></name></expr>]<pos:position pos:line="20" pos:column="33"/></index></name> <operator pos:line="20" pos:column="34">=<pos:position pos:line="20" pos:column="35"/></operator> <name><name pos:line="20" pos:column="36">hexbuf<pos:position pos:line="20" pos:column="42"/></name><index pos:line="20" pos:column="42">[<expr><name pos:line="20" pos:column="43">stage<pos:position pos:line="20" pos:column="48"/></name></expr>]<pos:position pos:line="20" pos:column="49"/></index></name></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="21" pos:column="17">arguments<pos:position pos:line="21" pos:column="26"/></name><index pos:line="21" pos:column="26">[<expr><name pos:line="21" pos:column="27">stage<pos:position pos:line="21" pos:column="32"/></name> <operator pos:line="21" pos:column="33">+<pos:position pos:line="21" pos:column="34"/></operator> <literal type="number" pos:line="21" pos:column="35">4<pos:position pos:line="21" pos:column="36"/></literal></expr>]<pos:position pos:line="21" pos:column="37"/></index></name> <operator pos:line="21" pos:column="38">=<pos:position pos:line="21" pos:column="39"/></operator> <name><name pos:line="21" pos:column="40">ownbuf<pos:position pos:line="21" pos:column="46"/></name><index pos:line="21" pos:column="46">[<expr><name pos:line="21" pos:column="47">stage<pos:position pos:line="21" pos:column="52"/></name></expr>]<pos:position pos:line="21" pos:column="53"/></index></name></expr>;<pos:position pos:line="21" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block> while <condition pos:line="22" pos:column="17">(<expr><operator pos:line="22" pos:column="18">++<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">pos<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">&lt;<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="26">active_nr<pos:position pos:line="22" pos:column="35"/></name></expr>)<pos:position pos:line="22" pos:column="36"/></condition>;<pos:position pos:line="22" pos:column="37"/></do>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">found<pos:position pos:line="23" pos:column="19"/></name></expr>)<pos:position pos:line="23" pos:column="20"/></condition><then pos:line="23" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="17">die<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><literal type="string" pos:line="24" pos:column="21">"git merge-index: %s not in the cache"<pos:position pos:line="24" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="61">path<pos:position pos:line="24" pos:column="65"/></name></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="67"/></expr_stmt></block></then></if>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">run_command_v_opt<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><name pos:line="26" pos:column="31">arguments<pos:position pos:line="26" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="42">0<pos:position pos:line="26" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="45"/></condition><then pos:line="26" pos:column="45"> <block pos:line="26" pos:column="46">{
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">one_shot<pos:position pos:line="27" pos:column="29"/></name></expr>)<pos:position pos:line="27" pos:column="30"/></condition><then pos:line="27" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="25">err<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">++<pos:position pos:line="28" pos:column="30"/></operator></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt></block></then>
		<else pos:line="29" pos:column="17">else <block pos:line="29" pos:column="22">{
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><operator pos:line="30" pos:column="29">!<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="30">quiet<pos:position pos:line="30" pos:column="35"/></name></expr>)<pos:position pos:line="30" pos:column="36"/></condition><then pos:line="30" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="33">die<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><literal type="string" pos:line="31" pos:column="37">"merge program failed"<pos:position pos:line="31" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="61"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">exit<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><literal type="number" pos:line="32" pos:column="30">1<pos:position pos:line="32" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></else></if>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
	<return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">found<pos:position pos:line="35" pos:column="21"/></name></expr>;<pos:position pos:line="35" pos:column="22"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
