<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1786_git-2.4.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">read_merge_config<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">var<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">value<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">void<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">cb<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ll_merge_driver<pos:position pos:line="3" pos:column="31"/></name></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">fn<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">key<pos:position pos:line="4" pos:column="24"/></name></decl>, <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="27">name<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">namelen<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><call><name pos:line="7" pos:column="14">strcmp<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">var<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="26">"merge.default"<pos:position pos:line="7" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><call><name pos:line="8" pos:column="24">git_config_string<pos:position pos:line="8" pos:column="41"/></name><argument_list pos:line="8" pos:column="41">(<argument><expr><operator pos:line="8" pos:column="42">&amp;<pos:position pos:line="8" pos:column="47"/></operator><name pos:line="8" pos:column="43">default_ll_merge<pos:position pos:line="8" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="61">var<pos:position pos:line="8" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="66">value<pos:position pos:line="8" pos:column="71"/></name></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="73"/></return></block></then></if>

	<comment type="block" pos:line="10" pos:column="9">/*
	 * We are not interested in anything but "merge.&lt;name&gt;.variable";
	 * especially, we do not want to look at variables such as
	 * "merge.summary", "merge.tool", and "merge.verbosity".
	 */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">parse_config_key<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">var<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="35">"merge"<pos:position pos:line="15" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="44">&amp;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="45">name<pos:position pos:line="15" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="51">&amp;<pos:position pos:line="15" pos:column="56"/></operator><name pos:line="15" pos:column="52">namelen<pos:position pos:line="15" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="61">&amp;<pos:position pos:line="15" pos:column="66"/></operator><name pos:line="15" pos:column="62">key<pos:position pos:line="15" pos:column="65"/></name></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call> <operator pos:line="15" pos:column="67">&lt;<pos:position pos:line="15" pos:column="71"/></operator> <literal type="number" pos:line="15" pos:column="69">0<pos:position pos:line="15" pos:column="70"/></literal> <operator pos:line="15" pos:column="71">||<pos:position pos:line="15" pos:column="73"/></operator> <operator pos:line="15" pos:column="74">!<pos:position pos:line="15" pos:column="75"/></operator><name pos:line="15" pos:column="75">name<pos:position pos:line="15" pos:column="79"/></name></expr>)<pos:position pos:line="15" pos:column="80"/></condition><then pos:line="15" pos:column="80">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><literal type="number" pos:line="16" pos:column="24">0<pos:position pos:line="16" pos:column="25"/></literal></expr>;<pos:position pos:line="16" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="18" pos:column="9">/*
	 * Find existing one as we might be processing merge.&lt;name&gt;.var2
	 * after seeing merge.&lt;name&gt;.var1.
	 */</comment>
	<for pos:line="22" pos:column="9">for <control pos:line="22" pos:column="13">(<init><expr><name pos:line="22" pos:column="14">fn<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <name pos:line="22" pos:column="19">ll_user_merge<pos:position pos:line="22" pos:column="32"/></name></expr>;<pos:position pos:line="22" pos:column="33"/></init> <condition><expr><name pos:line="22" pos:column="34">fn<pos:position pos:line="22" pos:column="36"/></name></expr>;<pos:position pos:line="22" pos:column="37"/></condition> <incr><expr><name pos:line="22" pos:column="38">fn<pos:position pos:line="22" pos:column="40"/></name> <operator pos:line="22" pos:column="41">=<pos:position pos:line="22" pos:column="42"/></operator> <name><name pos:line="22" pos:column="43">fn<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">-&gt;<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="47">next<pos:position pos:line="22" pos:column="51"/></name></name></expr></incr>)<pos:position pos:line="22" pos:column="52"/></control>
		<block type="pseudo"><if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">!<pos:position pos:line="23" pos:column="22"/></operator><call><name pos:line="23" pos:column="22">strncmp<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name><name pos:line="23" pos:column="30">fn<pos:position pos:line="23" pos:column="32"/></name><operator pos:line="23" pos:column="32">-&gt;<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="34">name<pos:position pos:line="23" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="40">name<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="46">namelen<pos:position pos:line="23" pos:column="53"/></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call> <operator pos:line="23" pos:column="55">&amp;&amp;<pos:position pos:line="23" pos:column="65"/></operator> <operator pos:line="23" pos:column="58">!<pos:position pos:line="23" pos:column="59"/></operator><name><name pos:line="23" pos:column="59">fn<pos:position pos:line="23" pos:column="61"/></name><operator pos:line="23" pos:column="61">-&gt;<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="63">name<pos:position pos:line="23" pos:column="67"/></name><index pos:line="23" pos:column="67">[<expr><name pos:line="23" pos:column="68">namelen<pos:position pos:line="23" pos:column="75"/></name></expr>]<pos:position pos:line="23" pos:column="76"/></index></name></expr>)<pos:position pos:line="23" pos:column="77"/></condition><then pos:line="23" pos:column="77">
			<block type="pseudo"><break pos:line="24" pos:column="25">break;<pos:position pos:line="24" pos:column="31"/></break></block></then></if></block></for>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">fn<pos:position pos:line="25" pos:column="16"/></name></expr>)<pos:position pos:line="25" pos:column="17"/></condition><then pos:line="25" pos:column="17"> <block pos:line="25" pos:column="18">{
		<expr_stmt><expr><name pos:line="26" pos:column="17">fn<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">xcalloc<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><literal type="number" pos:line="26" pos:column="30">1<pos:position pos:line="26" pos:column="31"/></literal></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="33">sizeof<argument_list pos:line="26" pos:column="39">(<argument><expr pos:line="26" pos:column="40">struct <name pos:line="26" pos:column="47">ll_merge_driver<pos:position pos:line="26" pos:column="62"/></name></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="27" pos:column="17">fn<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">-&gt;<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="21">name<pos:position pos:line="27" pos:column="25"/></name></name> <operator pos:line="27" pos:column="26">=<pos:position pos:line="27" pos:column="27"/></operator> <call><name pos:line="27" pos:column="28">xmemdupz<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><name pos:line="27" pos:column="37">name<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="43">namelen<pos:position pos:line="27" pos:column="50"/></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">fn<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">-&gt;<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="21">fn<pos:position pos:line="28" pos:column="23"/></name></name> <operator pos:line="28" pos:column="24">=<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="26">ll_ext_merge<pos:position pos:line="28" pos:column="38"/></name></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="29" pos:column="17">*<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">ll_user_merge_tail<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">=<pos:position pos:line="29" pos:column="38"/></operator> <name pos:line="29" pos:column="39">fn<pos:position pos:line="29" pos:column="41"/></name></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">ll_user_merge_tail<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">=<pos:position pos:line="30" pos:column="37"/></operator> <operator pos:line="30" pos:column="38">&amp;<pos:position pos:line="30" pos:column="43"/></operator><operator pos:line="30" pos:column="39">(<pos:position pos:line="30" pos:column="40"/></operator><name><name pos:line="30" pos:column="40">fn<pos:position pos:line="30" pos:column="42"/></name><operator pos:line="30" pos:column="42">-&gt;<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="44">next<pos:position pos:line="30" pos:column="48"/></name></name><operator pos:line="30" pos:column="48">)<pos:position pos:line="30" pos:column="49"/></operator></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><call><name pos:line="33" pos:column="14">strcmp<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><literal type="string" pos:line="33" pos:column="21">"name"<pos:position pos:line="33" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="29">key<pos:position pos:line="33" pos:column="32"/></name></expr></argument>)<pos:position pos:line="33" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="34"/></condition><then pos:line="33" pos:column="34">
		<block type="pseudo"><return pos:line="34" pos:column="17">return <expr><call><name pos:line="34" pos:column="24">git_config_string<pos:position pos:line="34" pos:column="41"/></name><argument_list pos:line="34" pos:column="41">(<argument><expr><operator pos:line="34" pos:column="42">&amp;<pos:position pos:line="34" pos:column="47"/></operator><name><name pos:line="34" pos:column="43">fn<pos:position pos:line="34" pos:column="45"/></name><operator pos:line="34" pos:column="45">-&gt;<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="47">description<pos:position pos:line="34" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="60">var<pos:position pos:line="34" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="65">value<pos:position pos:line="34" pos:column="70"/></name></expr></argument>)<pos:position pos:line="34" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="72"/></return></block></then></if>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><operator pos:line="36" pos:column="13">!<pos:position pos:line="36" pos:column="14"/></operator><call><name pos:line="36" pos:column="14">strcmp<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><literal type="string" pos:line="36" pos:column="21">"driver"<pos:position pos:line="36" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="31">key<pos:position pos:line="36" pos:column="34"/></name></expr></argument>)<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="36"/></condition><then pos:line="36" pos:column="36"> <block pos:line="36" pos:column="37">{
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><operator pos:line="37" pos:column="21">!<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">value<pos:position pos:line="37" pos:column="27"/></name></expr>)<pos:position pos:line="37" pos:column="28"/></condition><then pos:line="37" pos:column="28">
			<block type="pseudo"><return pos:line="38" pos:column="25">return <expr><call><name pos:line="38" pos:column="32">error<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><literal type="string" pos:line="38" pos:column="38">"%s: lacks value"<pos:position pos:line="38" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="57">var<pos:position pos:line="38" pos:column="60"/></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="62"/></return></block></then></if>
		<comment type="block" pos:line="39" pos:column="17">/*
		 * merge.&lt;name&gt;.driver specifies the command line:
		 *
		 *	command-line
		 *
		 * The command-line will be interpolated with the following
		 * tokens and is given to the shell:
		 *
		 *    %O - temporary file name for the merge base.
		 *    %A - temporary file name for our version.
		 *    %B - temporary file name for the other branches' version.
		 *    %L - conflict marker length
		 *
		 * The external merge driver should write the results in the
		 * file named by %A, and signal that it has done with zero exit
		 * status.
		 */</comment>
		<expr_stmt><expr><name><name pos:line="56" pos:column="17">fn<pos:position pos:line="56" pos:column="19"/></name><operator pos:line="56" pos:column="19">-&gt;<pos:position pos:line="56" pos:column="24"/></operator><name pos:line="56" pos:column="21">cmdline<pos:position pos:line="56" pos:column="28"/></name></name> <operator pos:line="56" pos:column="29">=<pos:position pos:line="56" pos:column="30"/></operator> <call><name pos:line="56" pos:column="31">xstrdup<pos:position pos:line="56" pos:column="38"/></name><argument_list pos:line="56" pos:column="38">(<argument><expr><name pos:line="56" pos:column="39">value<pos:position pos:line="56" pos:column="44"/></name></expr></argument>)<pos:position pos:line="56" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="46"/></expr_stmt>
		<return pos:line="57" pos:column="17">return <expr><literal type="number" pos:line="57" pos:column="24">0<pos:position pos:line="57" pos:column="25"/></literal></expr>;<pos:position pos:line="57" pos:column="26"/></return>
	}<pos:position pos:line="58" pos:column="10"/></block></then></if>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><operator pos:line="60" pos:column="13">!<pos:position pos:line="60" pos:column="14"/></operator><call><name pos:line="60" pos:column="14">strcmp<pos:position pos:line="60" pos:column="20"/></name><argument_list pos:line="60" pos:column="20">(<argument><expr><literal type="string" pos:line="60" pos:column="21">"recursive"<pos:position pos:line="60" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="34">key<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="39"/></condition><then pos:line="60" pos:column="39">
		<block type="pseudo"><return pos:line="61" pos:column="17">return <expr><call><name pos:line="61" pos:column="24">git_config_string<pos:position pos:line="61" pos:column="41"/></name><argument_list pos:line="61" pos:column="41">(<argument><expr><operator pos:line="61" pos:column="42">&amp;<pos:position pos:line="61" pos:column="47"/></operator><name><name pos:line="61" pos:column="43">fn<pos:position pos:line="61" pos:column="45"/></name><operator pos:line="61" pos:column="45">-&gt;<pos:position pos:line="61" pos:column="50"/></operator><name pos:line="61" pos:column="47">recursive<pos:position pos:line="61" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="58">var<pos:position pos:line="61" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="63">value<pos:position pos:line="61" pos:column="68"/></name></expr></argument>)<pos:position pos:line="61" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="70"/></return></block></then></if>

	<return pos:line="63" pos:column="9">return <expr><literal type="number" pos:line="63" pos:column="16">0<pos:position pos:line="63" pos:column="17"/></literal></expr>;<pos:position pos:line="63" pos:column="18"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
