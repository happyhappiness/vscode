<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3084_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">free_all<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">list_head<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">head<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">list_head<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">pos<pos:position pos:line="3" pos:column="30"/></name></decl>, <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="33">p<pos:position pos:line="3" pos:column="34"/></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<macro><name pos:line="4" pos:column="9">list_for_each_safe<pos:position pos:line="4" pos:column="27"/></name><argument_list pos:line="4" pos:column="27">(<argument pos:line="4" pos:column="28">pos<pos:position pos:line="4" pos:column="31"/></argument>, <argument pos:line="4" pos:column="33">p<pos:position pos:line="4" pos:column="34"/></argument>, <argument pos:line="4" pos:column="36">head<pos:position pos:line="4" pos:column="40"/></argument>)<pos:position pos:line="4" pos:column="41"/></argument_list></macro> <block pos:line="4" pos:column="42">{
		<expr_stmt><expr><call><name pos:line="5" pos:column="17">list_del<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">pos<pos:position pos:line="5" pos:column="29"/></name></expr></argument>)<pos:position pos:line="5" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">free_trailer_item<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">(<argument><expr><call><name pos:line="6" pos:column="35">list_entry<pos:position pos:line="6" pos:column="45"/></name><argument_list pos:line="6" pos:column="45">(<argument><expr><name pos:line="6" pos:column="46">pos<pos:position pos:line="6" pos:column="49"/></name></expr></argument>, <argument><expr pos:line="6" pos:column="51">struct <name pos:line="6" pos:column="58">trailer_item<pos:position pos:line="6" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="72">list<pos:position pos:line="6" pos:column="76"/></name></expr></argument>)<pos:position pos:line="6" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="79"/></expr_stmt>
	}<pos:position pos:line="7" pos:column="10"/></block>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
