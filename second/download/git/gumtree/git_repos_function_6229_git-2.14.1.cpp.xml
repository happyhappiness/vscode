<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6229_git-2.14.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">write_one_status<pos:position pos:line="1" pos:column="29"/></name></name></type> <name pos:line="1" pos:column="30">write_one<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">sha1file<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">f<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
				       <parameter><decl><type><name><name pos:line="2" pos:column="40">struct<pos:position pos:line="2" pos:column="46"/></name> <name pos:line="2" pos:column="47">object_entry<pos:position pos:line="2" pos:column="59"/></name></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">e<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>,
				       <parameter><decl><type><name pos:line="3" pos:column="40">off_t<pos:position pos:line="3" pos:column="45"/></name> <modifier pos:line="3" pos:column="46">*<pos:position pos:line="3" pos:column="47"/></modifier></type><name pos:line="3" pos:column="47">offset<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="54"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">off_t<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">size<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">recursing<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/*
	 * we set offset to 1 (which is an impossible value) to mark
	 * the fact that this object is involved in "write its base
	 * first before writing a deltified object" recursion.
	 */</comment>
	<expr_stmt><expr><name pos:line="13" pos:column="9">recursing<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <operator pos:line="13" pos:column="21">(<pos:position pos:line="13" pos:column="22"/></operator><name><name pos:line="13" pos:column="22">e<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">-&gt;<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="25">idx<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">.<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="29">offset<pos:position pos:line="13" pos:column="35"/></name></name> <operator pos:line="13" pos:column="36">==<pos:position pos:line="13" pos:column="38"/></operator> <literal type="number" pos:line="13" pos:column="39">1<pos:position pos:line="13" pos:column="40"/></literal><operator pos:line="13" pos:column="40">)<pos:position pos:line="13" pos:column="41"/></operator></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">recursing<pos:position pos:line="14" pos:column="22"/></name></expr>)<pos:position pos:line="14" pos:column="23"/></condition><then pos:line="14" pos:column="23"> <block pos:line="14" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">warning<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><literal type="string" pos:line="15" pos:column="25">"recursive delta detected for object %s"<pos:position pos:line="15" pos:column="65"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="16" pos:column="25">oid_to_hex<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><operator pos:line="16" pos:column="36">&amp;<pos:position pos:line="16" pos:column="41"/></operator><name><name pos:line="16" pos:column="37">e<pos:position pos:line="16" pos:column="38"/></name><operator pos:line="16" pos:column="38">-&gt;<pos:position pos:line="16" pos:column="43"/></operator><name pos:line="16" pos:column="40">idx<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">.<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="44">oid<pos:position pos:line="16" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><name pos:line="17" pos:column="24">WRITE_ONE_RECURSIVE<pos:position pos:line="17" pos:column="43"/></name></expr>;<pos:position pos:line="17" pos:column="44"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then> <elseif pos:line="18" pos:column="11">else <if pos:line="18" pos:column="16">if <condition pos:line="18" pos:column="19">(<expr><name><name pos:line="18" pos:column="20">e<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">-&gt;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="23">idx<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">.<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="27">offset<pos:position pos:line="18" pos:column="33"/></name></name> <operator pos:line="18" pos:column="34">||<pos:position pos:line="18" pos:column="36"/></operator> <name><name pos:line="18" pos:column="37">e<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">-&gt;<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="40">preferred_base<pos:position pos:line="18" pos:column="54"/></name></name></expr>)<pos:position pos:line="18" pos:column="55"/></condition><then pos:line="18" pos:column="55"> <block pos:line="18" pos:column="56">{
		<comment type="block" pos:line="19" pos:column="17">/* offset is non zero if object is written already. */</comment>
		<return pos:line="20" pos:column="17">return <expr><name pos:line="20" pos:column="24">WRITE_ONE_SKIP<pos:position pos:line="20" pos:column="38"/></name></expr>;<pos:position pos:line="20" pos:column="39"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if></elseif></if>

	<comment type="block" pos:line="23" pos:column="9">/* if we are deltified, write out base object first. */</comment>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">e<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">-&gt;<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="16">delta<pos:position pos:line="24" pos:column="21"/></name></name></expr>)<pos:position pos:line="24" pos:column="22"/></condition><then pos:line="24" pos:column="22"> <block pos:line="24" pos:column="23">{
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">e<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">-&gt;<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="20">idx<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">.<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">offset<pos:position pos:line="25" pos:column="30"/></name></name> <operator pos:line="25" pos:column="31">=<pos:position pos:line="25" pos:column="32"/></operator> <literal type="number" pos:line="25" pos:column="33">1<pos:position pos:line="25" pos:column="34"/></literal></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt> <comment type="block" pos:line="25" pos:column="36">/* now recurse */</comment>
		<switch pos:line="26" pos:column="17">switch <condition pos:line="26" pos:column="24">(<expr><call><name pos:line="26" pos:column="25">write_one<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">f<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="38">e<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">-&gt;<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="41">delta<pos:position pos:line="26" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="48">offset<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="56"/></condition> <block pos:line="26" pos:column="57">{
		<case pos:line="27" pos:column="17">case <expr><name pos:line="27" pos:column="22">WRITE_ONE_RECURSIVE<pos:position pos:line="27" pos:column="41"/></name></expr>:<pos:position pos:line="27" pos:column="42"/></case>
			<comment type="block" pos:line="28" pos:column="25">/* we cannot depend on this one */</comment>
			<expr_stmt><expr><name><name pos:line="29" pos:column="25">e<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">-&gt;<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="28">delta<pos:position pos:line="29" pos:column="33"/></name></name> <operator pos:line="29" pos:column="34">=<pos:position pos:line="29" pos:column="35"/></operator> <name pos:line="29" pos:column="36">NULL<pos:position pos:line="29" pos:column="40"/></name></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
			<break pos:line="30" pos:column="25">break;<pos:position pos:line="30" pos:column="31"/></break>
		<default pos:line="31" pos:column="17">default:<pos:position pos:line="31" pos:column="25"/></default>
			<break pos:line="32" pos:column="25">break;<pos:position pos:line="32" pos:column="31"/></break>
		<case pos:line="33" pos:column="17">case <expr><name pos:line="33" pos:column="22">WRITE_ONE_BREAK<pos:position pos:line="33" pos:column="37"/></name></expr>:<pos:position pos:line="33" pos:column="38"/></case>
			<expr_stmt><expr><name><name pos:line="34" pos:column="25">e<pos:position pos:line="34" pos:column="26"/></name><operator pos:line="34" pos:column="26">-&gt;<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="28">idx<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">.<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="32">offset<pos:position pos:line="34" pos:column="38"/></name></name> <operator pos:line="34" pos:column="39">=<pos:position pos:line="34" pos:column="40"/></operator> <name pos:line="34" pos:column="41">recursing<pos:position pos:line="34" pos:column="50"/></name></expr>;<pos:position pos:line="34" pos:column="51"/></expr_stmt>
			<return pos:line="35" pos:column="25">return <expr><name pos:line="35" pos:column="32">WRITE_ONE_BREAK<pos:position pos:line="35" pos:column="47"/></name></expr>;<pos:position pos:line="35" pos:column="48"/></return>
		}<pos:position pos:line="36" pos:column="18"/></block></switch>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="39" pos:column="9">e<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">-&gt;<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="12">idx<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">.<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="16">offset<pos:position pos:line="39" pos:column="22"/></name></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <operator pos:line="39" pos:column="25">*<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="26">offset<pos:position pos:line="39" pos:column="32"/></name></expr>;<pos:position pos:line="39" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="40" pos:column="9">size<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <call><name pos:line="40" pos:column="16">write_object<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">f<pos:position pos:line="40" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="32">e<pos:position pos:line="40" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="35">*<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="36">offset<pos:position pos:line="40" pos:column="42"/></name></expr></argument>)<pos:position pos:line="40" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="44"/></expr_stmt>
	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><operator pos:line="41" pos:column="13">!<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="14">size<pos:position pos:line="41" pos:column="18"/></name></expr>)<pos:position pos:line="41" pos:column="19"/></condition><then pos:line="41" pos:column="19"> <block pos:line="41" pos:column="20">{
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">e<pos:position pos:line="42" pos:column="18"/></name><operator pos:line="42" pos:column="18">-&gt;<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="20">idx<pos:position pos:line="42" pos:column="23"/></name><operator pos:line="42" pos:column="23">.<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="24">offset<pos:position pos:line="42" pos:column="30"/></name></name> <operator pos:line="42" pos:column="31">=<pos:position pos:line="42" pos:column="32"/></operator> <name pos:line="42" pos:column="33">recursing<pos:position pos:line="42" pos:column="42"/></name></expr>;<pos:position pos:line="42" pos:column="43"/></expr_stmt>
		<return pos:line="43" pos:column="17">return <expr><name pos:line="43" pos:column="24">WRITE_ONE_BREAK<pos:position pos:line="43" pos:column="39"/></name></expr>;<pos:position pos:line="43" pos:column="40"/></return>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="45" pos:column="9">written_list<pos:position pos:line="45" pos:column="21"/></name><index pos:line="45" pos:column="21">[<expr><name pos:line="45" pos:column="22">nr_written<pos:position pos:line="45" pos:column="32"/></name><operator pos:line="45" pos:column="32">++<pos:position pos:line="45" pos:column="34"/></operator></expr>]<pos:position pos:line="45" pos:column="35"/></index></name> <operator pos:line="45" pos:column="36">=<pos:position pos:line="45" pos:column="37"/></operator> <operator pos:line="45" pos:column="38">&amp;<pos:position pos:line="45" pos:column="43"/></operator><name><name pos:line="45" pos:column="39">e<pos:position pos:line="45" pos:column="40"/></name><operator pos:line="45" pos:column="40">-&gt;<pos:position pos:line="45" pos:column="45"/></operator><name pos:line="45" pos:column="42">idx<pos:position pos:line="45" pos:column="45"/></name></name></expr>;<pos:position pos:line="45" pos:column="46"/></expr_stmt>

	<comment type="block" pos:line="47" pos:column="9">/* make sure off_t is sufficiently large not to wrap */</comment>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><call><name pos:line="48" pos:column="13">signed_add_overflows<pos:position pos:line="48" pos:column="33"/></name><argument_list pos:line="48" pos:column="33">(<argument><expr><operator pos:line="48" pos:column="34">*<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="35">offset<pos:position pos:line="48" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="43">size<pos:position pos:line="48" pos:column="47"/></name></expr></argument>)<pos:position pos:line="48" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="49"/></condition><then pos:line="48" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="17">die<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><literal type="string" pos:line="49" pos:column="21">"pack too large for current definition of off_t"<pos:position pos:line="49" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="71"/></expr_stmt></block></then></if>
	<expr_stmt><expr><operator pos:line="50" pos:column="9">*<pos:position pos:line="50" pos:column="10"/></operator><name pos:line="50" pos:column="10">offset<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">+=<pos:position pos:line="50" pos:column="19"/></operator> <name pos:line="50" pos:column="20">size<pos:position pos:line="50" pos:column="24"/></name></expr>;<pos:position pos:line="50" pos:column="25"/></expr_stmt>
	<return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">WRITE_ONE_WRITTEN<pos:position pos:line="51" pos:column="33"/></name></expr>;<pos:position pos:line="51" pos:column="34"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
