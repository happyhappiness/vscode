<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2109_git-2.4.12.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">git_mkstemps_mode<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">pattern<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">suffix_len<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">int<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">mode<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> <name pos:line="3" pos:column="22">char<pos:position pos:line="3" pos:column="26"/></name></type> <name><name pos:line="3" pos:column="27">letters<pos:position pos:line="3" pos:column="34"/></name><index pos:line="3" pos:column="34">[]<pos:position pos:line="3" pos:column="36"/></index></name> <init pos:line="3" pos:column="37">=
		<expr><literal type="string" pos:line="4" pos:column="17">"abcdefghijklmnopqrstuvwxyz"<pos:position pos:line="4" pos:column="45"/></literal>
		<literal type="string" pos:line="5" pos:column="17">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"<pos:position pos:line="5" pos:column="45"/></literal>
		<literal type="string" pos:line="6" pos:column="17">"0123456789"<pos:position pos:line="6" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="7" pos:column="9">static<pos:position pos:line="7" pos:column="15"/></specifier> <type><specifier pos:line="7" pos:column="16">const<pos:position pos:line="7" pos:column="21"/></specifier> <name pos:line="7" pos:column="22">int<pos:position pos:line="7" pos:column="25"/></name></type> <name pos:line="7" pos:column="26">num_letters<pos:position pos:line="7" pos:column="37"/></name> <init pos:line="7" pos:column="38">= <expr><literal type="number" pos:line="7" pos:column="40">62<pos:position pos:line="7" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">uint64_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">value<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">timeval<pos:position pos:line="9" pos:column="23"/></name></name></type> <name pos:line="9" pos:column="24">tv<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier><specifier pos:line="10" pos:column="15">template<pos:position pos:line="10" pos:column="23"/></specifier></type></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">size_t<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">len<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">fd<pos:position pos:line="12" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="17">count<pos:position pos:line="12" pos:column="22"/></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">len<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <call><name pos:line="14" pos:column="15">strlen<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">pattern<pos:position pos:line="14" pos:column="29"/></name></expr></argument>)<pos:position pos:line="14" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">len<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">&lt;<pos:position pos:line="16" pos:column="21"/></operator> <literal type="number" pos:line="16" pos:column="19">6<pos:position pos:line="16" pos:column="20"/></literal> <operator pos:line="16" pos:column="21">+<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">suffix_len<pos:position pos:line="16" pos:column="33"/></name></expr>)<pos:position pos:line="16" pos:column="34"/></condition><then pos:line="16" pos:column="34"> <block pos:line="16" pos:column="35">{
		<expr_stmt><expr><name pos:line="17" pos:column="17">errno<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">EINVAL<pos:position pos:line="17" pos:column="31"/></name></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">-<pos:position pos:line="18" pos:column="25"/></operator><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal></expr>;<pos:position pos:line="18" pos:column="27"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">strncmp<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><operator pos:line="21" pos:column="21">&amp;<pos:position pos:line="21" pos:column="26"/></operator><name><name pos:line="21" pos:column="22">pattern<pos:position pos:line="21" pos:column="29"/></name><index pos:line="21" pos:column="29">[<expr><name pos:line="21" pos:column="30">len<pos:position pos:line="21" pos:column="33"/></name> <operator pos:line="21" pos:column="34">-<pos:position pos:line="21" pos:column="35"/></operator> <literal type="number" pos:line="21" pos:column="36">6<pos:position pos:line="21" pos:column="37"/></literal> <operator pos:line="21" pos:column="38">-<pos:position pos:line="21" pos:column="39"/></operator> <name pos:line="21" pos:column="40">suffix_len<pos:position pos:line="21" pos:column="50"/></name></expr>]<pos:position pos:line="21" pos:column="51"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="53">"XXXXXX"<pos:position pos:line="21" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="63">6<pos:position pos:line="21" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="66"/></condition><then pos:line="21" pos:column="66"> <block pos:line="21" pos:column="67">{
		<expr_stmt><expr><name pos:line="22" pos:column="17">errno<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">EINVAL<pos:position pos:line="22" pos:column="31"/></name></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
		<return pos:line="23" pos:column="17">return <expr><operator pos:line="23" pos:column="24">-<pos:position pos:line="23" pos:column="25"/></operator><literal type="number" pos:line="23" pos:column="25">1<pos:position pos:line="23" pos:column="26"/></literal></expr>;<pos:position pos:line="23" pos:column="27"/></return>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="26" pos:column="9">/*
	 * Replace pattern's XXXXXX characters with randomness.
	 * Try TMP_MAX different filenames.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">gettimeofday<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><operator pos:line="30" pos:column="22">&amp;<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="23">tv<pos:position pos:line="30" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="27">NULL<pos:position pos:line="30" pos:column="31"/></name></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="31" pos:column="9">value<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">=<pos:position pos:line="31" pos:column="16"/></operator> <operator pos:line="31" pos:column="17">(<pos:position pos:line="31" pos:column="18"/></operator><call pos:line="31" pos:column="18">(<name pos:line="31" pos:column="19">size_t<pos:position pos:line="31" pos:column="25"/></name>)<argument_list pos:line="31" pos:column="26">(<argument><expr><name><name pos:line="31" pos:column="27">tv<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">.<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">tv_usec<pos:position pos:line="31" pos:column="37"/></name></name> <operator pos:line="31" pos:column="38">&lt;&lt;<pos:position pos:line="31" pos:column="46"/></operator> <literal type="number" pos:line="31" pos:column="41">16<pos:position pos:line="31" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call><operator pos:line="31" pos:column="44">)<pos:position pos:line="31" pos:column="45"/></operator> <operator pos:line="31" pos:column="46">^<pos:position pos:line="31" pos:column="47"/></operator> <name><name pos:line="31" pos:column="48">tv<pos:position pos:line="31" pos:column="50"/></name><operator pos:line="31" pos:column="50">.<pos:position pos:line="31" pos:column="51"/></operator><name pos:line="31" pos:column="51">tv_sec<pos:position pos:line="31" pos:column="57"/></name></name> <operator pos:line="31" pos:column="58">^<pos:position pos:line="31" pos:column="59"/></operator> <call><name pos:line="31" pos:column="60">getpid<pos:position pos:line="31" pos:column="66"/></name><argument_list pos:line="31" pos:column="66">()<pos:position pos:line="31" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="69"/></expr_stmt>
	<template pos:line="32" pos:column="9">template = <parameter><type><modifier pos:line="32" pos:column="20">&amp;<pos:position pos:line="32" pos:column="25"/></modifier></type><name><name pos:line="32" pos:column="21">pattern<pos:position pos:line="32" pos:column="28"/></name><index pos:line="32" pos:column="28">[<expr><name pos:line="32" pos:column="29">len<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">-<pos:position pos:line="32" pos:column="34"/></operator> <literal type="number" pos:line="32" pos:column="35">6<pos:position pos:line="32" pos:column="36"/></literal> <operator pos:line="32" pos:column="37">-<pos:position pos:line="32" pos:column="38"/></operator> <name pos:line="32" pos:column="39">suffix_len<pos:position pos:line="32" pos:column="49"/></name></expr>]<pos:position pos:line="32" pos:column="50"/></index></name></parameter><empty_stmt pos:line="32" pos:column="50">;<pos:position pos:line="32" pos:column="51"/></empty_stmt></template>
	<for pos:line="33" pos:column="9">for <control pos:line="33" pos:column="13">(<init><expr><name pos:line="33" pos:column="14">count<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <literal type="number" pos:line="33" pos:column="22">0<pos:position pos:line="33" pos:column="23"/></literal></expr>;<pos:position pos:line="33" pos:column="24"/></init> <condition><expr><name pos:line="33" pos:column="25">count<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">&lt;<pos:position pos:line="33" pos:column="35"/></operator> <name pos:line="33" pos:column="33">TMP_MAX<pos:position pos:line="33" pos:column="40"/></name></expr>;<pos:position pos:line="33" pos:column="41"/></condition> <incr><expr><operator pos:line="33" pos:column="42">++<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="44">count<pos:position pos:line="33" pos:column="49"/></name></expr></incr>)<pos:position pos:line="33" pos:column="50"/></control> <block pos:line="33" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="34" pos:column="17">uint64_t<pos:position pos:line="34" pos:column="25"/></name></type> <name pos:line="34" pos:column="26">v<pos:position pos:line="34" pos:column="27"/></name> <init pos:line="34" pos:column="28">= <expr><name pos:line="34" pos:column="30">value<pos:position pos:line="34" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="36"/></decl_stmt>
		<comment type="block" pos:line="35" pos:column="17">/* Fill in the random bits. */</comment>
		<template pos:line="36" pos:column="17">template<parameter><type><pos:position pos:line="36" pos:column="25"/></type>[0] = letters[v % num_letters]<pos:position pos:line="36" pos:column="55"/></parameter><empty_stmt pos:line="36" pos:column="55">;<pos:position pos:line="36" pos:column="56"/></empty_stmt></template> <expr_stmt><expr><name pos:line="36" pos:column="57">v<pos:position pos:line="36" pos:column="58"/></name> <operator pos:line="36" pos:column="59">/=<pos:position pos:line="36" pos:column="61"/></operator> <name pos:line="36" pos:column="62">num_letters<pos:position pos:line="36" pos:column="73"/></name></expr>;<pos:position pos:line="36" pos:column="74"/></expr_stmt>
		<template pos:line="37" pos:column="17">template<parameter><type><pos:position pos:line="37" pos:column="25"/></type>[1] = letters[v % num_letters]<pos:position pos:line="37" pos:column="55"/></parameter><empty_stmt pos:line="37" pos:column="55">;<pos:position pos:line="37" pos:column="56"/></empty_stmt></template> <expr_stmt><expr><name pos:line="37" pos:column="57">v<pos:position pos:line="37" pos:column="58"/></name> <operator pos:line="37" pos:column="59">/=<pos:position pos:line="37" pos:column="61"/></operator> <name pos:line="37" pos:column="62">num_letters<pos:position pos:line="37" pos:column="73"/></name></expr>;<pos:position pos:line="37" pos:column="74"/></expr_stmt>
		<template pos:line="38" pos:column="17">template<parameter><type><pos:position pos:line="38" pos:column="25"/></type>[2] = letters[v % num_letters]<pos:position pos:line="38" pos:column="55"/></parameter><empty_stmt pos:line="38" pos:column="55">;<pos:position pos:line="38" pos:column="56"/></empty_stmt></template> <expr_stmt><expr><name pos:line="38" pos:column="57">v<pos:position pos:line="38" pos:column="58"/></name> <operator pos:line="38" pos:column="59">/=<pos:position pos:line="38" pos:column="61"/></operator> <name pos:line="38" pos:column="62">num_letters<pos:position pos:line="38" pos:column="73"/></name></expr>;<pos:position pos:line="38" pos:column="74"/></expr_stmt>
		<template pos:line="39" pos:column="17">template<parameter><type><pos:position pos:line="39" pos:column="25"/></type>[3] = letters[v % num_letters]<pos:position pos:line="39" pos:column="55"/></parameter><empty_stmt pos:line="39" pos:column="55">;<pos:position pos:line="39" pos:column="56"/></empty_stmt></template> <expr_stmt><expr><name pos:line="39" pos:column="57">v<pos:position pos:line="39" pos:column="58"/></name> <operator pos:line="39" pos:column="59">/=<pos:position pos:line="39" pos:column="61"/></operator> <name pos:line="39" pos:column="62">num_letters<pos:position pos:line="39" pos:column="73"/></name></expr>;<pos:position pos:line="39" pos:column="74"/></expr_stmt>
		<template pos:line="40" pos:column="17">template<parameter><type><pos:position pos:line="40" pos:column="25"/></type>[4] = letters[v % num_letters]<pos:position pos:line="40" pos:column="55"/></parameter><empty_stmt pos:line="40" pos:column="55">;<pos:position pos:line="40" pos:column="56"/></empty_stmt></template> <expr_stmt><expr><name pos:line="40" pos:column="57">v<pos:position pos:line="40" pos:column="58"/></name> <operator pos:line="40" pos:column="59">/=<pos:position pos:line="40" pos:column="61"/></operator> <name pos:line="40" pos:column="62">num_letters<pos:position pos:line="40" pos:column="73"/></name></expr>;<pos:position pos:line="40" pos:column="74"/></expr_stmt>
		<template pos:line="41" pos:column="17">template<parameter><type><pos:position pos:line="41" pos:column="25"/></type>[5] = letters[v % num_letters]<pos:position pos:line="41" pos:column="55"/></parameter><empty_stmt pos:line="41" pos:column="55">;<pos:position pos:line="41" pos:column="56"/></empty_stmt></template> <expr_stmt><expr><name pos:line="41" pos:column="57">v<pos:position pos:line="41" pos:column="58"/></name> <operator pos:line="41" pos:column="59">/=<pos:position pos:line="41" pos:column="61"/></operator> <name pos:line="41" pos:column="62">num_letters<pos:position pos:line="41" pos:column="73"/></name></expr>;<pos:position pos:line="41" pos:column="74"/></expr_stmt>

		<expr_stmt><expr><name pos:line="43" pos:column="17">fd<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">=<pos:position pos:line="43" pos:column="21"/></operator> <call><name pos:line="43" pos:column="22">open<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">(<argument><expr><name pos:line="43" pos:column="27">pattern<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="36">O_CREAT<pos:position pos:line="43" pos:column="43"/></name> <operator pos:line="43" pos:column="44">|<pos:position pos:line="43" pos:column="45"/></operator> <name pos:line="43" pos:column="46">O_EXCL<pos:position pos:line="43" pos:column="52"/></name> <operator pos:line="43" pos:column="53">|<pos:position pos:line="43" pos:column="54"/></operator> <name pos:line="43" pos:column="55">O_RDWR<pos:position pos:line="43" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="63">mode<pos:position pos:line="43" pos:column="67"/></name></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="69"/></expr_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">fd<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">&gt;=<pos:position pos:line="44" pos:column="29"/></operator> <literal type="number" pos:line="44" pos:column="27">0<pos:position pos:line="44" pos:column="28"/></literal></expr>)<pos:position pos:line="44" pos:column="29"/></condition><then pos:line="44" pos:column="29">
			<block type="pseudo"><return pos:line="45" pos:column="25">return <expr><name pos:line="45" pos:column="32">fd<pos:position pos:line="45" pos:column="34"/></name></expr>;<pos:position pos:line="45" pos:column="35"/></return></block></then></if>
		<comment type="block" pos:line="46" pos:column="17">/*
		 * Fatal error (EPERM, ENOSPC etc).
		 * It doesn't make sense to loop.
		 */</comment>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">errno<pos:position pos:line="50" pos:column="26"/></name> <operator pos:line="50" pos:column="27">!=<pos:position pos:line="50" pos:column="29"/></operator> <name pos:line="50" pos:column="30">EEXIST<pos:position pos:line="50" pos:column="36"/></name></expr>)<pos:position pos:line="50" pos:column="37"/></condition><then pos:line="50" pos:column="37">
			<block type="pseudo"><break pos:line="51" pos:column="25">break;<pos:position pos:line="51" pos:column="31"/></break></block></then></if>
		<comment type="block" pos:line="52" pos:column="17">/*
		 * This is a random value.  It is only necessary that
		 * the next TMP_MAX values generated by adding 7777 to
		 * VALUE are different with (module 2^32).
		 */</comment>
		<expr_stmt><expr><name pos:line="57" pos:column="17">value<pos:position pos:line="57" pos:column="22"/></name> <operator pos:line="57" pos:column="23">+=<pos:position pos:line="57" pos:column="25"/></operator> <literal type="number" pos:line="57" pos:column="26">7777<pos:position pos:line="57" pos:column="30"/></literal></expr>;<pos:position pos:line="57" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="58" pos:column="10"/></block></for>
	<comment type="block" pos:line="59" pos:column="9">/* We return the null string if we can't find a unique file name.  */</comment>
	<expr_stmt><expr><name><name pos:line="60" pos:column="9">pattern<pos:position pos:line="60" pos:column="16"/></name><index pos:line="60" pos:column="16">[<expr><literal type="number" pos:line="60" pos:column="17">0<pos:position pos:line="60" pos:column="18"/></literal></expr>]<pos:position pos:line="60" pos:column="19"/></index></name> <operator pos:line="60" pos:column="20">=<pos:position pos:line="60" pos:column="21"/></operator> <literal type="char" pos:line="60" pos:column="22">'\0'<pos:position pos:line="60" pos:column="26"/></literal></expr>;<pos:position pos:line="60" pos:column="27"/></expr_stmt>
	<return pos:line="61" pos:column="9">return <expr><operator pos:line="61" pos:column="16">-<pos:position pos:line="61" pos:column="17"/></operator><literal type="number" pos:line="61" pos:column="17">1<pos:position pos:line="61" pos:column="18"/></literal></expr>;<pos:position pos:line="61" pos:column="19"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
