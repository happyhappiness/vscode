<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5377_git-2.14.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cmd_reflog_delete<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">argc<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier><modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">argv<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="59">const<pos:position pos:line="1" pos:column="64"/></specifier> <name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">prefix<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">expire_reflog_policy_cb<pos:position pos:line="3" pos:column="39"/></name></name></type> <name pos:line="3" pos:column="40">cb<pos:position pos:line="3" pos:column="42"/></name></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">status<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><literal type="number" pos:line="4" pos:column="25">0<pos:position pos:line="4" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">int<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">flags<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><literal type="number" pos:line="5" pos:column="30">0<pos:position pos:line="5" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">memset<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><operator pos:line="7" pos:column="16">&amp;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="17">cb<pos:position pos:line="7" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="24">sizeof<argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">cb<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>

	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init><expr><name pos:line="9" pos:column="14">i<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <literal type="number" pos:line="9" pos:column="18">1<pos:position pos:line="9" pos:column="19"/></literal></expr>;<pos:position pos:line="9" pos:column="20"/></init> <condition><expr><name pos:line="9" pos:column="21">i<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&lt;<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="25">argc<pos:position pos:line="9" pos:column="29"/></name></expr>;<pos:position pos:line="9" pos:column="30"/></condition> <incr><expr><name pos:line="9" pos:column="31">i<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">++<pos:position pos:line="9" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="35"/></control> <block pos:line="9" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="10" pos:column="17">const<pos:position pos:line="10" pos:column="22"/></specifier> <name pos:line="10" pos:column="23">char<pos:position pos:line="10" pos:column="27"/></name> <modifier pos:line="10" pos:column="28">*<pos:position pos:line="10" pos:column="29"/></modifier></type><name pos:line="10" pos:column="29">arg<pos:position pos:line="10" pos:column="32"/></name> <init pos:line="10" pos:column="33">= <expr><name><name pos:line="10" pos:column="35">argv<pos:position pos:line="10" pos:column="39"/></name><index pos:line="10" pos:column="39">[<expr><name pos:line="10" pos:column="40">i<pos:position pos:line="10" pos:column="41"/></name></expr>]<pos:position pos:line="10" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="10" pos:column="43"/></decl_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><call><name pos:line="11" pos:column="22">strcmp<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">arg<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="34">"--dry-run"<pos:position pos:line="11" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></call> <operator pos:line="11" pos:column="47">||<pos:position pos:line="11" pos:column="49"/></operator> <operator pos:line="11" pos:column="50">!<pos:position pos:line="11" pos:column="51"/></operator><call><name pos:line="11" pos:column="51">strcmp<pos:position pos:line="11" pos:column="57"/></name><argument_list pos:line="11" pos:column="57">(<argument><expr><name pos:line="11" pos:column="58">arg<pos:position pos:line="11" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="63">"-n"<pos:position pos:line="11" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="69"/></condition><then pos:line="11" pos:column="69">
			<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="25">flags<pos:position pos:line="12" pos:column="30"/></name> <operator pos:line="12" pos:column="31">|=<pos:position pos:line="12" pos:column="33"/></operator> <name pos:line="12" pos:column="34">EXPIRE_REFLOGS_DRY_RUN<pos:position pos:line="12" pos:column="56"/></name></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt></block></then>
		<elseif pos:line="13" pos:column="17">else <if pos:line="13" pos:column="22">if <condition pos:line="13" pos:column="25">(<expr><operator pos:line="13" pos:column="26">!<pos:position pos:line="13" pos:column="27"/></operator><call><name pos:line="13" pos:column="27">strcmp<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">arg<pos:position pos:line="13" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="39">"--rewrite"<pos:position pos:line="13" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="52"/></condition><then pos:line="13" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">flags<pos:position pos:line="14" pos:column="30"/></name> <operator pos:line="14" pos:column="31">|=<pos:position pos:line="14" pos:column="33"/></operator> <name pos:line="14" pos:column="34">EXPIRE_REFLOGS_REWRITE<pos:position pos:line="14" pos:column="56"/></name></expr>;<pos:position pos:line="14" pos:column="57"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="15" pos:column="17">else <if pos:line="15" pos:column="22">if <condition pos:line="15" pos:column="25">(<expr><operator pos:line="15" pos:column="26">!<pos:position pos:line="15" pos:column="27"/></operator><call><name pos:line="15" pos:column="27">strcmp<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><name pos:line="15" pos:column="34">arg<pos:position pos:line="15" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="39">"--updateref"<pos:position pos:line="15" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="54"/></condition><then pos:line="15" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">flags<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">|=<pos:position pos:line="16" pos:column="33"/></operator> <name pos:line="16" pos:column="34">EXPIRE_REFLOGS_UPDATE_REF<pos:position pos:line="16" pos:column="59"/></name></expr>;<pos:position pos:line="16" pos:column="60"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="17" pos:column="17">else <if pos:line="17" pos:column="22">if <condition pos:line="17" pos:column="25">(<expr><operator pos:line="17" pos:column="26">!<pos:position pos:line="17" pos:column="27"/></operator><call><name pos:line="17" pos:column="27">strcmp<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">arg<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="39">"--verbose"<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="52"/></condition><then pos:line="17" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="25">flags<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">|=<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">EXPIRE_REFLOGS_VERBOSE<pos:position pos:line="18" pos:column="56"/></name></expr>;<pos:position pos:line="18" pos:column="57"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="19" pos:column="17">else <if pos:line="19" pos:column="22">if <condition pos:line="19" pos:column="25">(<expr><operator pos:line="19" pos:column="26">!<pos:position pos:line="19" pos:column="27"/></operator><call><name pos:line="19" pos:column="27">strcmp<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">arg<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="39">"--"<pos:position pos:line="19" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="45"/></condition><then pos:line="19" pos:column="45"> <block pos:line="19" pos:column="46">{
			<expr_stmt><expr><name pos:line="20" pos:column="25">i<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">++<pos:position pos:line="20" pos:column="28"/></operator></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
			<break pos:line="21" pos:column="25">break;<pos:position pos:line="21" pos:column="31"/></break>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="23" pos:column="17">else <if pos:line="23" pos:column="22">if <condition pos:line="23" pos:column="25">(<expr><name><name pos:line="23" pos:column="26">arg<pos:position pos:line="23" pos:column="29"/></name><index pos:line="23" pos:column="29">[<expr><literal type="number" pos:line="23" pos:column="30">0<pos:position pos:line="23" pos:column="31"/></literal></expr>]<pos:position pos:line="23" pos:column="32"/></index></name> <operator pos:line="23" pos:column="33">==<pos:position pos:line="23" pos:column="35"/></operator> <literal type="char" pos:line="23" pos:column="36">'-'<pos:position pos:line="23" pos:column="39"/></literal></expr>)<pos:position pos:line="23" pos:column="40"/></condition><then pos:line="23" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">usage<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name pos:line="24" pos:column="31">reflog_delete_usage<pos:position pos:line="24" pos:column="50"/></name></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt></block></then></if></elseif>
		<else pos:line="25" pos:column="17">else
			<block type="pseudo"><break pos:line="26" pos:column="25">break;<pos:position pos:line="26" pos:column="31"/></break></block></else></if>
	}<pos:position pos:line="27" pos:column="10"/></block></for>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">argc<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">-<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="20">i<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">&lt;<pos:position pos:line="29" pos:column="26"/></operator> <literal type="number" pos:line="29" pos:column="24">1<pos:position pos:line="29" pos:column="25"/></literal></expr>)<pos:position pos:line="29" pos:column="26"/></condition><then pos:line="29" pos:column="26">
		<block type="pseudo"><return pos:line="30" pos:column="17">return <expr><call><name pos:line="30" pos:column="24">error<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><literal type="string" pos:line="30" pos:column="30">"Nothing to delete?"<pos:position pos:line="30" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="52"/></return></block></then></if>

	<for pos:line="32" pos:column="9">for <control pos:line="32" pos:column="13">( <init pos:line="32" pos:column="15">;<pos:position pos:line="32" pos:column="16"/></init> <condition><expr><name pos:line="32" pos:column="17">i<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">&lt;<pos:position pos:line="32" pos:column="23"/></operator> <name pos:line="32" pos:column="21">argc<pos:position pos:line="32" pos:column="25"/></name></expr>;<pos:position pos:line="32" pos:column="26"/></condition> <incr><expr><name pos:line="32" pos:column="27">i<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">++<pos:position pos:line="32" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="32" pos:column="31"/></control> <block pos:line="32" pos:column="32">{
		<decl_stmt><decl><type><specifier pos:line="33" pos:column="17">const<pos:position pos:line="33" pos:column="22"/></specifier> <name pos:line="33" pos:column="23">char<pos:position pos:line="33" pos:column="27"/></name> <modifier pos:line="33" pos:column="28">*<pos:position pos:line="33" pos:column="29"/></modifier></type><name pos:line="33" pos:column="29">spec<pos:position pos:line="33" pos:column="33"/></name> <init pos:line="33" pos:column="34">= <expr><call><name pos:line="33" pos:column="36">strstr<pos:position pos:line="33" pos:column="42"/></name><argument_list pos:line="33" pos:column="42">(<argument><expr><name><name pos:line="33" pos:column="43">argv<pos:position pos:line="33" pos:column="47"/></name><index pos:line="33" pos:column="47">[<expr><name pos:line="33" pos:column="48">i<pos:position pos:line="33" pos:column="49"/></name></expr>]<pos:position pos:line="33" pos:column="50"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="52">"@{"<pos:position pos:line="33" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="58"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="34" pos:column="17">unsigned<pos:position pos:line="34" pos:column="25"/></name> <name pos:line="34" pos:column="26">char<pos:position pos:line="34" pos:column="30"/></name></type> <name><name pos:line="34" pos:column="31">sha1<pos:position pos:line="34" pos:column="35"/></name><index pos:line="34" pos:column="35">[<expr><literal type="number" pos:line="34" pos:column="36">20<pos:position pos:line="34" pos:column="38"/></literal></expr>]<pos:position pos:line="34" pos:column="39"/></index></name></decl>;<pos:position pos:line="34" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="35" pos:column="17">char<pos:position pos:line="35" pos:column="21"/></name> <modifier pos:line="35" pos:column="22">*<pos:position pos:line="35" pos:column="23"/></modifier></type><name pos:line="35" pos:column="23">ep<pos:position pos:line="35" pos:column="25"/></name></decl>, <modifier pos:line="35" pos:column="27">*<pos:position pos:line="35" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="35" pos:column="28">ref<pos:position pos:line="35" pos:column="31"/></name></decl>;<pos:position pos:line="35" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="36" pos:column="17">int<pos:position pos:line="36" pos:column="20"/></name></type> <name pos:line="36" pos:column="21">recno<pos:position pos:line="36" pos:column="26"/></name></decl>;<pos:position pos:line="36" pos:column="27"/></decl_stmt>

		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><operator pos:line="38" pos:column="21">!<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="22">spec<pos:position pos:line="38" pos:column="26"/></name></expr>)<pos:position pos:line="38" pos:column="27"/></condition><then pos:line="38" pos:column="27"> <block pos:line="38" pos:column="28">{
			<expr_stmt><expr><name pos:line="39" pos:column="25">status<pos:position pos:line="39" pos:column="31"/></name> <operator pos:line="39" pos:column="32">|=<pos:position pos:line="39" pos:column="34"/></operator> <call><name pos:line="39" pos:column="35">error<pos:position pos:line="39" pos:column="40"/></name><argument_list pos:line="39" pos:column="40">(<argument><expr><literal type="string" pos:line="39" pos:column="41">"Not a reflog: %s"<pos:position pos:line="39" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="61">argv<pos:position pos:line="39" pos:column="65"/></name><index pos:line="39" pos:column="65">[<expr><name pos:line="39" pos:column="66">i<pos:position pos:line="39" pos:column="67"/></name></expr>]<pos:position pos:line="39" pos:column="68"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="70"/></expr_stmt>
			<continue pos:line="40" pos:column="25">continue;<pos:position pos:line="40" pos:column="34"/></continue>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><operator pos:line="43" pos:column="21">!<pos:position pos:line="43" pos:column="22"/></operator><call><name pos:line="43" pos:column="22">dwim_log<pos:position pos:line="43" pos:column="30"/></name><argument_list pos:line="43" pos:column="30">(<argument><expr><name><name pos:line="43" pos:column="31">argv<pos:position pos:line="43" pos:column="35"/></name><index pos:line="43" pos:column="35">[<expr><name pos:line="43" pos:column="36">i<pos:position pos:line="43" pos:column="37"/></name></expr>]<pos:position pos:line="43" pos:column="38"/></index></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="40">spec<pos:position pos:line="43" pos:column="44"/></name> <operator pos:line="43" pos:column="45">-<pos:position pos:line="43" pos:column="46"/></operator> <name><name pos:line="43" pos:column="47">argv<pos:position pos:line="43" pos:column="51"/></name><index pos:line="43" pos:column="51">[<expr><name pos:line="43" pos:column="52">i<pos:position pos:line="43" pos:column="53"/></name></expr>]<pos:position pos:line="43" pos:column="54"/></index></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="56">sha1<pos:position pos:line="43" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="62">&amp;<pos:position pos:line="43" pos:column="67"/></operator><name pos:line="43" pos:column="63">ref<pos:position pos:line="43" pos:column="66"/></name></expr></argument>)<pos:position pos:line="43" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="68"/></condition><then pos:line="43" pos:column="68"> <block pos:line="43" pos:column="69">{
			<expr_stmt><expr><name pos:line="44" pos:column="25">status<pos:position pos:line="44" pos:column="31"/></name> <operator pos:line="44" pos:column="32">|=<pos:position pos:line="44" pos:column="34"/></operator> <call><name pos:line="44" pos:column="35">error<pos:position pos:line="44" pos:column="40"/></name><argument_list pos:line="44" pos:column="40">(<argument><expr><literal type="string" pos:line="44" pos:column="41">"no reflog for '%s'"<pos:position pos:line="44" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="63">argv<pos:position pos:line="44" pos:column="67"/></name><index pos:line="44" pos:column="67">[<expr><name pos:line="44" pos:column="68">i<pos:position pos:line="44" pos:column="69"/></name></expr>]<pos:position pos:line="44" pos:column="70"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="72"/></expr_stmt>
			<continue pos:line="45" pos:column="25">continue;<pos:position pos:line="45" pos:column="34"/></continue>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="48" pos:column="17">recno<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">=<pos:position pos:line="48" pos:column="24"/></operator> <call><name pos:line="48" pos:column="25">strtoul<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">spec<pos:position pos:line="48" pos:column="37"/></name> <operator pos:line="48" pos:column="38">+<pos:position pos:line="48" pos:column="39"/></operator> <literal type="number" pos:line="48" pos:column="40">2<pos:position pos:line="48" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="48" pos:column="43">&amp;<pos:position pos:line="48" pos:column="48"/></operator><name pos:line="48" pos:column="44">ep<pos:position pos:line="48" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="48">10<pos:position pos:line="48" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="52"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><operator pos:line="49" pos:column="21">*<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">ep<pos:position pos:line="49" pos:column="24"/></name> <operator pos:line="49" pos:column="25">==<pos:position pos:line="49" pos:column="27"/></operator> <literal type="char" pos:line="49" pos:column="28">'}'<pos:position pos:line="49" pos:column="31"/></literal></expr>)<pos:position pos:line="49" pos:column="32"/></condition><then pos:line="49" pos:column="32"> <block pos:line="49" pos:column="33">{
			<expr_stmt><expr><name><name pos:line="50" pos:column="25">cb<pos:position pos:line="50" pos:column="27"/></name><operator pos:line="50" pos:column="27">.<pos:position pos:line="50" pos:column="28"/></operator><name pos:line="50" pos:column="28">cmd<pos:position pos:line="50" pos:column="31"/></name><operator pos:line="50" pos:column="31">.<pos:position pos:line="50" pos:column="32"/></operator><name pos:line="50" pos:column="32">recno<pos:position pos:line="50" pos:column="37"/></name></name> <operator pos:line="50" pos:column="38">=<pos:position pos:line="50" pos:column="39"/></operator> <operator pos:line="50" pos:column="40">-<pos:position pos:line="50" pos:column="41"/></operator><name pos:line="50" pos:column="41">recno<pos:position pos:line="50" pos:column="46"/></name></expr>;<pos:position pos:line="50" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">for_each_reflog_ent<pos:position pos:line="51" pos:column="44"/></name><argument_list pos:line="51" pos:column="44">(<argument><expr><name pos:line="51" pos:column="45">ref<pos:position pos:line="51" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="50">count_reflog_ent<pos:position pos:line="51" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="68">&amp;<pos:position pos:line="51" pos:column="73"/></operator><name pos:line="51" pos:column="69">cb<pos:position pos:line="51" pos:column="71"/></name></expr></argument>)<pos:position pos:line="51" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="73"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></then> <else pos:line="52" pos:column="19">else <block pos:line="52" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="53" pos:column="25">cb<pos:position pos:line="53" pos:column="27"/></name><operator pos:line="53" pos:column="27">.<pos:position pos:line="53" pos:column="28"/></operator><name pos:line="53" pos:column="28">cmd<pos:position pos:line="53" pos:column="31"/></name><operator pos:line="53" pos:column="31">.<pos:position pos:line="53" pos:column="32"/></operator><name pos:line="53" pos:column="32">expire_total<pos:position pos:line="53" pos:column="44"/></name></name> <operator pos:line="53" pos:column="45">=<pos:position pos:line="53" pos:column="46"/></operator> <call><name pos:line="53" pos:column="47">approxidate<pos:position pos:line="53" pos:column="58"/></name><argument_list pos:line="53" pos:column="58">(<argument><expr><name pos:line="53" pos:column="59">spec<pos:position pos:line="53" pos:column="63"/></name> <operator pos:line="53" pos:column="64">+<pos:position pos:line="53" pos:column="65"/></operator> <literal type="number" pos:line="53" pos:column="66">2<pos:position pos:line="53" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="54" pos:column="25">for_each_reflog_ent<pos:position pos:line="54" pos:column="44"/></name><argument_list pos:line="54" pos:column="44">(<argument><expr><name pos:line="54" pos:column="45">ref<pos:position pos:line="54" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="50">count_reflog_ent<pos:position pos:line="54" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="68">&amp;<pos:position pos:line="54" pos:column="73"/></operator><name pos:line="54" pos:column="69">cb<pos:position pos:line="54" pos:column="71"/></name></expr></argument>)<pos:position pos:line="54" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="73"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="55" pos:column="25">cb<pos:position pos:line="55" pos:column="27"/></name><operator pos:line="55" pos:column="27">.<pos:position pos:line="55" pos:column="28"/></operator><name pos:line="55" pos:column="28">cmd<pos:position pos:line="55" pos:column="31"/></name><operator pos:line="55" pos:column="31">.<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="32">expire_total<pos:position pos:line="55" pos:column="44"/></name></name> <operator pos:line="55" pos:column="45">=<pos:position pos:line="55" pos:column="46"/></operator> <literal type="number" pos:line="55" pos:column="47">0<pos:position pos:line="55" pos:column="48"/></literal></expr>;<pos:position pos:line="55" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="56" pos:column="18"/></block></else></if>

		<expr_stmt><expr><name pos:line="58" pos:column="17">status<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">|=<pos:position pos:line="58" pos:column="26"/></operator> <call><name pos:line="58" pos:column="27">reflog_expire<pos:position pos:line="58" pos:column="40"/></name><argument_list pos:line="58" pos:column="40">(<argument><expr><name pos:line="58" pos:column="41">ref<pos:position pos:line="58" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="46">sha1<pos:position pos:line="58" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="52">flags<pos:position pos:line="58" pos:column="57"/></name></expr></argument>,
					<argument><expr><name pos:line="59" pos:column="41">reflog_expiry_prepare<pos:position pos:line="59" pos:column="62"/></name></expr></argument>,
					<argument><expr><name pos:line="60" pos:column="41">should_expire_reflog_ent<pos:position pos:line="60" pos:column="65"/></name></expr></argument>,
					<argument><expr><name pos:line="61" pos:column="41">reflog_expiry_cleanup<pos:position pos:line="61" pos:column="62"/></name></expr></argument>,
					<argument><expr><operator pos:line="62" pos:column="41">&amp;<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="42">cb<pos:position pos:line="62" pos:column="44"/></name></expr></argument>)<pos:position pos:line="62" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">free<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><name pos:line="63" pos:column="22">ref<pos:position pos:line="63" pos:column="25"/></name></expr></argument>)<pos:position pos:line="63" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="64" pos:column="10"/></block></for>
	<return pos:line="65" pos:column="9">return <expr><name pos:line="65" pos:column="16">status<pos:position pos:line="65" pos:column="22"/></name></expr>;<pos:position pos:line="65" pos:column="23"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
