<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_749.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">git_default_config<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">var<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">value<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">void<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">dummy<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><call><name pos:line="3" pos:column="13">starts_with<pos:position pos:line="3" pos:column="24"/></name><argument_list pos:line="3" pos:column="24">(<argument><expr><name pos:line="3" pos:column="25">var<pos:position pos:line="3" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="30">"core."<pos:position pos:line="3" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="39"/></condition><then pos:line="3" pos:column="39">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><call><name pos:line="4" pos:column="24">git_default_core_config<pos:position pos:line="4" pos:column="47"/></name><argument_list pos:line="4" pos:column="47">(<argument><expr><name pos:line="4" pos:column="48">var<pos:position pos:line="4" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="53">value<pos:position pos:line="4" pos:column="58"/></name></expr></argument>)<pos:position pos:line="4" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="60"/></return></block></then></if>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">starts_with<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">var<pos:position pos:line="6" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="30">"user."<pos:position pos:line="6" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><call><name pos:line="7" pos:column="24">git_ident_config<pos:position pos:line="7" pos:column="40"/></name><argument_list pos:line="7" pos:column="40">(<argument><expr><name pos:line="7" pos:column="41">var<pos:position pos:line="7" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="46">value<pos:position pos:line="7" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="53">dummy<pos:position pos:line="7" pos:column="58"/></name></expr></argument>)<pos:position pos:line="7" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="60"/></return></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">starts_with<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">var<pos:position pos:line="9" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="30">"i18n."<pos:position pos:line="9" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="39"/></condition><then pos:line="9" pos:column="39">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><call><name pos:line="10" pos:column="24">git_default_i18n_config<pos:position pos:line="10" pos:column="47"/></name><argument_list pos:line="10" pos:column="47">(<argument><expr><name pos:line="10" pos:column="48">var<pos:position pos:line="10" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="53">value<pos:position pos:line="10" pos:column="58"/></name></expr></argument>)<pos:position pos:line="10" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="60"/></return></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">starts_with<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">var<pos:position pos:line="12" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="30">"branch."<pos:position pos:line="12" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="41"/></condition><then pos:line="12" pos:column="41">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><call><name pos:line="13" pos:column="24">git_default_branch_config<pos:position pos:line="13" pos:column="49"/></name><argument_list pos:line="13" pos:column="49">(<argument><expr><name pos:line="13" pos:column="50">var<pos:position pos:line="13" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="55">value<pos:position pos:line="13" pos:column="60"/></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="62"/></return></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">starts_with<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">var<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="30">"push."<pos:position pos:line="15" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><call><name pos:line="16" pos:column="24">git_default_push_config<pos:position pos:line="16" pos:column="47"/></name><argument_list pos:line="16" pos:column="47">(<argument><expr><name pos:line="16" pos:column="48">var<pos:position pos:line="16" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="53">value<pos:position pos:line="16" pos:column="58"/></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="60"/></return></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">starts_with<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">var<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="30">"mailmap."<pos:position pos:line="18" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="42"/></condition><then pos:line="18" pos:column="42">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><call><name pos:line="19" pos:column="24">git_default_mailmap_config<pos:position pos:line="19" pos:column="50"/></name><argument_list pos:line="19" pos:column="50">(<argument><expr><name pos:line="19" pos:column="51">var<pos:position pos:line="19" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="56">value<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="63"/></return></block></then></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">starts_with<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">var<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="30">"advice."<pos:position pos:line="21" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="41"/></condition><then pos:line="21" pos:column="41">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><call><name pos:line="22" pos:column="24">git_default_advice_config<pos:position pos:line="22" pos:column="49"/></name><argument_list pos:line="22" pos:column="49">(<argument><expr><name pos:line="22" pos:column="50">var<pos:position pos:line="22" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="55">value<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="62"/></return></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><call><name pos:line="24" pos:column="14">strcmp<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">var<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="26">"pager.color"<pos:position pos:line="24" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call> <operator pos:line="24" pos:column="41">||<pos:position pos:line="24" pos:column="43"/></operator> <operator pos:line="24" pos:column="44">!<pos:position pos:line="24" pos:column="45"/></operator><call><name pos:line="24" pos:column="45">strcmp<pos:position pos:line="24" pos:column="51"/></name><argument_list pos:line="24" pos:column="51">(<argument><expr><name pos:line="24" pos:column="52">var<pos:position pos:line="24" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="57">"color.pager"<pos:position pos:line="24" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="72"/></condition><then pos:line="24" pos:column="72"> <block pos:line="24" pos:column="73">{
		<expr_stmt><expr><name pos:line="25" pos:column="17">pager_use_color<pos:position pos:line="25" pos:column="32"/></name> <operator pos:line="25" pos:column="33">=<pos:position pos:line="25" pos:column="34"/></operator> <call><name pos:line="25" pos:column="35">git_config_bool<pos:position pos:line="25" pos:column="50"/></name><argument_list pos:line="25" pos:column="50">(<argument><expr><name pos:line="25" pos:column="51">var<pos:position pos:line="25" pos:column="54"/></name></expr></argument>,<argument><expr><name pos:line="25" pos:column="55">value<pos:position pos:line="25" pos:column="60"/></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="62"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><call><name pos:line="29" pos:column="14">strcmp<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">var<pos:position pos:line="29" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="26">"pack.packsizelimit"<pos:position pos:line="29" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="48"/></condition><then pos:line="29" pos:column="48"> <block pos:line="29" pos:column="49">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">pack_size_limit_cfg<pos:position pos:line="30" pos:column="36"/></name> <operator pos:line="30" pos:column="37">=<pos:position pos:line="30" pos:column="38"/></operator> <call><name pos:line="30" pos:column="39">git_config_ulong<pos:position pos:line="30" pos:column="55"/></name><argument_list pos:line="30" pos:column="55">(<argument><expr><name pos:line="30" pos:column="56">var<pos:position pos:line="30" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="61">value<pos:position pos:line="30" pos:column="66"/></name></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt>
		<return pos:line="31" pos:column="17">return <expr><literal type="number" pos:line="31" pos:column="24">0<pos:position pos:line="31" pos:column="25"/></literal></expr>;<pos:position pos:line="31" pos:column="26"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><call><name pos:line="34" pos:column="14">strcmp<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><name pos:line="34" pos:column="21">var<pos:position pos:line="34" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="26">"pack.compression"<pos:position pos:line="34" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="46"/></condition><then pos:line="34" pos:column="46"> <block pos:line="34" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="35" pos:column="17">int<pos:position pos:line="35" pos:column="20"/></name></type> <name pos:line="35" pos:column="21">level<pos:position pos:line="35" pos:column="26"/></name> <init pos:line="35" pos:column="27">= <expr><call><name pos:line="35" pos:column="29">git_config_int<pos:position pos:line="35" pos:column="43"/></name><argument_list pos:line="35" pos:column="43">(<argument><expr><name pos:line="35" pos:column="44">var<pos:position pos:line="35" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="49">value<pos:position pos:line="35" pos:column="54"/></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="56"/></decl_stmt>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">level<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">==<pos:position pos:line="36" pos:column="29"/></operator> <operator pos:line="36" pos:column="30">-<pos:position pos:line="36" pos:column="31"/></operator><literal type="number" pos:line="36" pos:column="31">1<pos:position pos:line="36" pos:column="32"/></literal></expr>)<pos:position pos:line="36" pos:column="33"/></condition><then pos:line="36" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="25">level<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">=<pos:position pos:line="37" pos:column="32"/></operator> <name pos:line="37" pos:column="33">Z_DEFAULT_COMPRESSION<pos:position pos:line="37" pos:column="54"/></name></expr>;<pos:position pos:line="37" pos:column="55"/></expr_stmt></block></then>
		<elseif pos:line="38" pos:column="17">else <if pos:line="38" pos:column="22">if <condition pos:line="38" pos:column="25">(<expr><name><name pos:line="38" pos:column="26">level<pos:position pos:line="38" pos:column="31"/></name> <argument_list type="generic" pos:line="38" pos:column="32">&lt; <argument><expr><literal type="number" pos:line="38" pos:column="34">0<pos:position pos:line="38" pos:column="35"/></literal> <operator pos:line="38" pos:column="36">||<pos:position pos:line="38" pos:column="38"/></operator> <name pos:line="38" pos:column="39">level<pos:position pos:line="38" pos:column="44"/></name></expr></argument> &gt;<pos:position pos:line="38" pos:column="49"/></argument_list></name> <name pos:line="38" pos:column="47">Z_BEST_COMPRESSION<pos:position pos:line="38" pos:column="65"/></name></expr>)<pos:position pos:line="38" pos:column="66"/></condition><then pos:line="38" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="25">die<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><call><name pos:line="39" pos:column="29">_<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><literal type="string" pos:line="39" pos:column="31">"bad pack compression level %d"<pos:position pos:line="39" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="39" pos:column="65">level<pos:position pos:line="39" pos:column="70"/></name></expr></argument>)<pos:position pos:line="39" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="72"/></expr_stmt></block></then></if></elseif></if>
		<expr_stmt><expr><name pos:line="40" pos:column="17">pack_compression_level<pos:position pos:line="40" pos:column="39"/></name> <operator pos:line="40" pos:column="40">=<pos:position pos:line="40" pos:column="41"/></operator> <name pos:line="40" pos:column="42">level<pos:position pos:line="40" pos:column="47"/></name></expr>;<pos:position pos:line="40" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">pack_compression_seen<pos:position pos:line="41" pos:column="38"/></name> <operator pos:line="41" pos:column="39">=<pos:position pos:line="41" pos:column="40"/></operator> <literal type="number" pos:line="41" pos:column="41">1<pos:position pos:line="41" pos:column="42"/></literal></expr>;<pos:position pos:line="41" pos:column="43"/></expr_stmt>
		<return pos:line="42" pos:column="17">return <expr><literal type="number" pos:line="42" pos:column="24">0<pos:position pos:line="42" pos:column="25"/></literal></expr>;<pos:position pos:line="42" pos:column="26"/></return>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="45" pos:column="9">/* Add other config variables here and to Documentation/config.txt. */</comment>
	<return pos:line="46" pos:column="9">return <expr><literal type="number" pos:line="46" pos:column="16">0<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
