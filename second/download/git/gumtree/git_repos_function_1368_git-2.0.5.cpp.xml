<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1368_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">int<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">hash_obj<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">unsigned<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">sha1<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">unsigned<pos:position pos:line="1" pos:column="65"/></name> <name pos:line="1" pos:column="66">int<pos:position pos:line="1" pos:column="69"/></name></type> <name pos:line="1" pos:column="70">n<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">hash<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/*
	 * Since the sha1 is essentially random, we just take the
	 * required number of bits directly from the first
	 * sizeof(unsigned int) bytes of sha1.  First we have to copy
	 * the bytes into a properly aligned integer.  If we cared
	 * about getting consistent results across architectures, we
	 * would have to call ntohl() here, too.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">memcpy<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><operator pos:line="13" pos:column="16">&amp;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="17">hash<pos:position pos:line="13" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="23">sha1<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr pos:line="13" pos:column="29">sizeof<operator pos:line="13" pos:column="35">(<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="36">unsigned<pos:position pos:line="13" pos:column="44"/></name> <name pos:line="13" pos:column="45">int<pos:position pos:line="13" pos:column="48"/></name><operator pos:line="13" pos:column="48">)<pos:position pos:line="13" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>
	<return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">hash<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">&amp;<pos:position pos:line="14" pos:column="26"/></operator> <operator pos:line="14" pos:column="23">(<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">n<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">-<pos:position pos:line="14" pos:column="27"/></operator> <literal type="number" pos:line="14" pos:column="28">1<pos:position pos:line="14" pos:column="29"/></literal><operator pos:line="14" pos:column="29">)<pos:position pos:line="14" pos:column="30"/></operator></expr>;<pos:position pos:line="14" pos:column="31"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
