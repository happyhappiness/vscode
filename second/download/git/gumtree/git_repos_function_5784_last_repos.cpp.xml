<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5784_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">is_atom<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">atom<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">s<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">slen<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">alen<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><call><name pos:line="3" pos:column="20">strlen<pos:position pos:line="3" pos:column="26"/></name><argument_list pos:line="3" pos:column="26">(<argument><expr><name pos:line="3" pos:column="27">atom<pos:position pos:line="3" pos:column="31"/></name></expr></argument>)<pos:position pos:line="3" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
	<return pos:line="4" pos:column="9">return <expr><name pos:line="4" pos:column="16">alen<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">==<pos:position pos:line="4" pos:column="23"/></operator> <name pos:line="4" pos:column="24">slen<pos:position pos:line="4" pos:column="28"/></name> <operator pos:line="4" pos:column="29">&amp;&amp;<pos:position pos:line="4" pos:column="39"/></operator> <operator pos:line="4" pos:column="32">!<pos:position pos:line="4" pos:column="33"/></operator><call><name pos:line="4" pos:column="33">memcmp<pos:position pos:line="4" pos:column="39"/></name><argument_list pos:line="4" pos:column="39">(<argument><expr><name pos:line="4" pos:column="40">atom<pos:position pos:line="4" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="46">s<pos:position pos:line="4" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="49">alen<pos:position pos:line="4" pos:column="53"/></name></expr></argument>)<pos:position pos:line="4" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="55"/></return>
}<pos:position pos:line="5" pos:column="2"/></block></function></unit>
