<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1529_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">verify_ordered<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">unsigned<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">mode1<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">name1<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">unsigned<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">mode2<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="78">const<pos:position pos:line="1" pos:column="83"/></specifier> <name pos:line="1" pos:column="84">char<pos:position pos:line="1" pos:column="88"/></name> <modifier pos:line="1" pos:column="89">*<pos:position pos:line="1" pos:column="90"/></modifier></type><name pos:line="1" pos:column="90">name2<pos:position pos:line="1" pos:column="95"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="96"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">len1<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><call><name pos:line="3" pos:column="20">strlen<pos:position pos:line="3" pos:column="26"/></name><argument_list pos:line="3" pos:column="26">(<argument><expr><name pos:line="3" pos:column="27">name1<pos:position pos:line="3" pos:column="32"/></name></expr></argument>)<pos:position pos:line="3" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">len2<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name pos:line="4" pos:column="20">strlen<pos:position pos:line="4" pos:column="26"/></name><argument_list pos:line="4" pos:column="26">(<argument><expr><name pos:line="4" pos:column="27">name2<pos:position pos:line="4" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><ternary><condition><expr><name pos:line="5" pos:column="19">len1<pos:position pos:line="5" pos:column="23"/></name> <operator pos:line="5" pos:column="24">&lt;<pos:position pos:line="5" pos:column="28"/></operator> <name pos:line="5" pos:column="26">len2<pos:position pos:line="5" pos:column="30"/></name></expr> ?<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32"> <expr><name pos:line="5" pos:column="33">len1<pos:position pos:line="5" pos:column="37"/></name></expr> <pos:position pos:line="5" pos:column="38"/></then><else pos:line="5" pos:column="38">: <expr><name pos:line="5" pos:column="40">len2<pos:position pos:line="5" pos:column="44"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name></type> <name pos:line="6" pos:column="23">c1<pos:position pos:line="6" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="27">c2<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">cmp<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">cmp<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">memcmp<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">name1<pos:position pos:line="9" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="29">name2<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="36">len<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">cmp<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">&lt;<pos:position pos:line="10" pos:column="21"/></operator> <literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">cmp<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">&gt;<pos:position pos:line="12" pos:column="21"/></operator> <literal type="number" pos:line="12" pos:column="19">0<pos:position pos:line="12" pos:column="20"/></literal></expr>)<pos:position pos:line="12" pos:column="21"/></condition><then pos:line="12" pos:column="21">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><name pos:line="13" pos:column="24">TREE_UNORDERED<pos:position pos:line="13" pos:column="38"/></name></expr>;<pos:position pos:line="13" pos:column="39"/></return></block></then></if>

	<comment type="block" pos:line="15" pos:column="9">/*
	 * Ok, the first &lt;len&gt; characters are the same.
	 * Now we need to order the next one, but turn
	 * a '\0' into a '/' for a directory entry.
	 */</comment>
	<expr_stmt><expr><name pos:line="20" pos:column="9">c1<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name><name pos:line="20" pos:column="14">name1<pos:position pos:line="20" pos:column="19"/></name><index pos:line="20" pos:column="19">[<expr><name pos:line="20" pos:column="20">len<pos:position pos:line="20" pos:column="23"/></name></expr>]<pos:position pos:line="20" pos:column="24"/></index></name></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">c2<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <name><name pos:line="21" pos:column="14">name2<pos:position pos:line="21" pos:column="19"/></name><index pos:line="21" pos:column="19">[<expr><name pos:line="21" pos:column="20">len<pos:position pos:line="21" pos:column="23"/></name></expr>]<pos:position pos:line="21" pos:column="24"/></index></name></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">c1<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">&amp;&amp;<pos:position pos:line="22" pos:column="27"/></operator> <operator pos:line="22" pos:column="20">!<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">c2<pos:position pos:line="22" pos:column="23"/></name></expr>)<pos:position pos:line="22" pos:column="24"/></condition><then pos:line="22" pos:column="24">
		<comment type="block" pos:line="23" pos:column="17">/*
		 * git-write-tree used to write out a nonsense tree that has
		 * entries with the same name, one blob and one tree.  Make
		 * sure we do not have duplicate entries.
		 */</comment>
		<block type="pseudo"><return pos:line="28" pos:column="17">return <expr><name pos:line="28" pos:column="24">TREE_HAS_DUPS<pos:position pos:line="28" pos:column="37"/></name></expr>;<pos:position pos:line="28" pos:column="38"/></return></block></then></if>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">c1<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">&amp;&amp;<pos:position pos:line="29" pos:column="27"/></operator> <call><name pos:line="29" pos:column="20">S_ISDIR<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">mode1<pos:position pos:line="29" pos:column="33"/></name></expr></argument>)<pos:position pos:line="29" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="35"/></condition><then pos:line="29" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="17">c1<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <literal type="char" pos:line="30" pos:column="22">'/'<pos:position pos:line="30" pos:column="25"/></literal></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt></block></then></if>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">c2<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">&amp;&amp;<pos:position pos:line="31" pos:column="27"/></operator> <call><name pos:line="31" pos:column="20">S_ISDIR<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">mode2<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="17">c2<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <literal type="char" pos:line="32" pos:column="22">'/'<pos:position pos:line="32" pos:column="25"/></literal></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt></block></then></if>
	<return pos:line="33" pos:column="9">return <expr><ternary><condition><expr><name pos:line="33" pos:column="16">c1<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">&lt;<pos:position pos:line="33" pos:column="23"/></operator> <name pos:line="33" pos:column="21">c2<pos:position pos:line="33" pos:column="23"/></name></expr> ?<pos:position pos:line="33" pos:column="25"/></condition><then pos:line="33" pos:column="25"> <expr><literal type="number" pos:line="33" pos:column="26">0<pos:position pos:line="33" pos:column="27"/></literal></expr> <pos:position pos:line="33" pos:column="28"/></then><else pos:line="33" pos:column="28">: <expr><name pos:line="33" pos:column="30">TREE_UNORDERED<pos:position pos:line="33" pos:column="44"/></name></expr></else></ternary></expr>;<pos:position pos:line="33" pos:column="45"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
