<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_53.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">import_object<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">unsigned<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">sha1<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="48">enum<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">object_type<pos:position pos:line="1" pos:column="64"/></name></name></type> <name pos:line="1" pos:column="65">type<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="2" pos:column="27">int<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">raw<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">filename<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">fd<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">fd<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <call><name pos:line="6" pos:column="14">open<pos:position pos:line="6" pos:column="18"/></name><argument_list pos:line="6" pos:column="18">(<argument><expr><name pos:line="6" pos:column="19">filename<pos:position pos:line="6" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="29">O_RDONLY<pos:position pos:line="6" pos:column="37"/></name></expr></argument>)<pos:position pos:line="6" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="39"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">fd<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">&lt;<pos:position pos:line="7" pos:column="20"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="17">die_errno<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><literal type="string" pos:line="8" pos:column="27">"unable to open %s for reading"<pos:position pos:line="8" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="60">filename<pos:position pos:line="8" pos:column="68"/></name></expr></argument>)<pos:position pos:line="8" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="70"/></expr_stmt></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">raw<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">&amp;&amp;<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="21">type<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">==<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">OBJ_TREE<pos:position pos:line="10" pos:column="37"/></name></expr>)<pos:position pos:line="10" pos:column="38"/></condition><then pos:line="10" pos:column="38"> <block pos:line="10" pos:column="39">{
		<decl_stmt><decl><type><specifier pos:line="11" pos:column="17">const<pos:position pos:line="11" pos:column="22"/></specifier> <name pos:line="11" pos:column="23">char<pos:position pos:line="11" pos:column="27"/></name> <modifier pos:line="11" pos:column="28">*<pos:position pos:line="11" pos:column="29"/></modifier></type><name><name pos:line="11" pos:column="29">argv<pos:position pos:line="11" pos:column="33"/></name><index pos:line="11" pos:column="33">[]<pos:position pos:line="11" pos:column="35"/></index></name> <init pos:line="11" pos:column="36">= <expr><block pos:line="11" pos:column="38">{ <expr><literal type="string" pos:line="11" pos:column="40">"mktree"<pos:position pos:line="11" pos:column="48"/></literal></expr>, <expr><name pos:line="11" pos:column="50">NULL<pos:position pos:line="11" pos:column="54"/></name></expr> }<pos:position pos:line="11" pos:column="56"/></block></expr></init></decl>;<pos:position pos:line="11" pos:column="57"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">struct<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">child_process<pos:position pos:line="12" pos:column="37"/></name></name></type> <name pos:line="12" pos:column="38">cmd<pos:position pos:line="12" pos:column="41"/></name> <init pos:line="12" pos:column="42">= <expr><block pos:line="12" pos:column="44">{ <expr><name pos:line="12" pos:column="46">argv<pos:position pos:line="12" pos:column="50"/></name></expr> }<pos:position pos:line="12" pos:column="52"/></block></expr></init></decl>;<pos:position pos:line="12" pos:column="53"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">strbuf<pos:position pos:line="13" pos:column="30"/></name></name></type> <name pos:line="13" pos:column="31">result<pos:position pos:line="13" pos:column="37"/></name> <init pos:line="13" pos:column="38">= <expr><name pos:line="13" pos:column="40">STRBUF_INIT<pos:position pos:line="13" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="52"/></decl_stmt>

		<expr_stmt><expr><name><name pos:line="15" pos:column="17">cmd<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">.<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">argv<pos:position pos:line="15" pos:column="25"/></name></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">argv<pos:position pos:line="15" pos:column="32"/></name></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="16" pos:column="17">cmd<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">.<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="21">git_cmd<pos:position pos:line="16" pos:column="28"/></name></name> <operator pos:line="16" pos:column="29">=<pos:position pos:line="16" pos:column="30"/></operator> <literal type="number" pos:line="16" pos:column="31">1<pos:position pos:line="16" pos:column="32"/></literal></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="17" pos:column="17">cmd<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">.<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">in<pos:position pos:line="17" pos:column="23"/></name></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <name pos:line="17" pos:column="26">fd<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="18" pos:column="17">cmd<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">.<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">out<pos:position pos:line="18" pos:column="24"/></name></name> <operator pos:line="18" pos:column="25">=<pos:position pos:line="18" pos:column="26"/></operator> <operator pos:line="18" pos:column="27">-<pos:position pos:line="18" pos:column="28"/></operator><literal type="number" pos:line="18" pos:column="28">1<pos:position pos:line="18" pos:column="29"/></literal></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">start_command<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><operator pos:line="20" pos:column="35">&amp;<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="36">cmd<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="41"/></condition><then pos:line="20" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">die<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><literal type="string" pos:line="21" pos:column="29">"unable to spawn mktree"<pos:position pos:line="21" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="55"/></expr_stmt></block></then></if>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><call><name pos:line="23" pos:column="21">strbuf_read<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><operator pos:line="23" pos:column="33">&amp;<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="34">result<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="42">cmd<pos:position pos:line="23" pos:column="45"/></name><operator pos:line="23" pos:column="45">.<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="46">out<pos:position pos:line="23" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="51">41<pos:position pos:line="23" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call> <operator pos:line="23" pos:column="55">&lt;<pos:position pos:line="23" pos:column="59"/></operator> <literal type="number" pos:line="23" pos:column="57">0<pos:position pos:line="23" pos:column="58"/></literal></expr>)<pos:position pos:line="23" pos:column="59"/></condition><then pos:line="23" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">die_errno<pos:position pos:line="24" pos:column="34"/></name><argument_list pos:line="24" pos:column="34">(<argument><expr><literal type="string" pos:line="24" pos:column="35">"unable to read from mktree"<pos:position pos:line="24" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="65"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">close<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name><name pos:line="25" pos:column="23">cmd<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">.<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="27">out<pos:position pos:line="25" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">finish_command<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">(<argument><expr><operator pos:line="27" pos:column="36">&amp;<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="37">cmd<pos:position pos:line="27" pos:column="40"/></name></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="42"/></condition><then pos:line="27" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">die<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><literal type="string" pos:line="28" pos:column="29">"mktree reported failure"<pos:position pos:line="28" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt></block></then></if>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><call><name pos:line="29" pos:column="21">get_sha1_hex<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><name><name pos:line="29" pos:column="34">result<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">.<pos:position pos:line="29" pos:column="41"/></operator><name pos:line="29" pos:column="41">buf<pos:position pos:line="29" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="46">sha1<pos:position pos:line="29" pos:column="50"/></name></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></call> <operator pos:line="29" pos:column="52">&lt;<pos:position pos:line="29" pos:column="56"/></operator> <literal type="number" pos:line="29" pos:column="54">0<pos:position pos:line="29" pos:column="55"/></literal></expr>)<pos:position pos:line="29" pos:column="56"/></condition><then pos:line="29" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="25">die<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><literal type="string" pos:line="30" pos:column="29">"mktree did not return an object name"<pos:position pos:line="30" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="69"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="32" pos:column="17">strbuf_release<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><operator pos:line="32" pos:column="32">&amp;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="33">result<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="33" pos:column="10"/></block></then> <else pos:line="33" pos:column="11">else <block pos:line="33" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="34" pos:column="17">struct<pos:position pos:line="34" pos:column="23"/></name> <name pos:line="34" pos:column="24">stat<pos:position pos:line="34" pos:column="28"/></name></name></type> <name pos:line="34" pos:column="29">st<pos:position pos:line="34" pos:column="31"/></name></decl>;<pos:position pos:line="34" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="35" pos:column="17">int<pos:position pos:line="35" pos:column="20"/></name></type> <name pos:line="35" pos:column="21">flags<pos:position pos:line="35" pos:column="26"/></name> <init pos:line="35" pos:column="27">= <expr><name pos:line="35" pos:column="29">HASH_FORMAT_CHECK<pos:position pos:line="35" pos:column="46"/></name> <operator pos:line="35" pos:column="47">|<pos:position pos:line="35" pos:column="48"/></operator> <name pos:line="35" pos:column="49">HASH_WRITE_OBJECT<pos:position pos:line="35" pos:column="66"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="67"/></decl_stmt>

		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><call><name pos:line="37" pos:column="21">fstat<pos:position pos:line="37" pos:column="26"/></name><argument_list pos:line="37" pos:column="26">(<argument><expr><name pos:line="37" pos:column="27">fd<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="31">&amp;<pos:position pos:line="37" pos:column="36"/></operator><name pos:line="37" pos:column="32">st<pos:position pos:line="37" pos:column="34"/></name></expr></argument>)<pos:position pos:line="37" pos:column="35"/></argument_list></call> <operator pos:line="37" pos:column="36">&lt;<pos:position pos:line="37" pos:column="40"/></operator> <literal type="number" pos:line="37" pos:column="38">0<pos:position pos:line="37" pos:column="39"/></literal></expr>)<pos:position pos:line="37" pos:column="40"/></condition><then pos:line="37" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="25">die_errno<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><literal type="string" pos:line="38" pos:column="35">"unable to fstat %s"<pos:position pos:line="38" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="57">filename<pos:position pos:line="38" pos:column="65"/></name></expr></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="67"/></expr_stmt></block></then></if>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><call><name pos:line="39" pos:column="21">index_fd<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">sha1<pos:position pos:line="39" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="36">fd<pos:position pos:line="39" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="40">&amp;<pos:position pos:line="39" pos:column="45"/></operator><name pos:line="39" pos:column="41">st<pos:position pos:line="39" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="45">type<pos:position pos:line="39" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="51">NULL<pos:position pos:line="39" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="57">flags<pos:position pos:line="39" pos:column="62"/></name></expr></argument>)<pos:position pos:line="39" pos:column="63"/></argument_list></call> <operator pos:line="39" pos:column="64">&lt;<pos:position pos:line="39" pos:column="68"/></operator> <literal type="number" pos:line="39" pos:column="66">0<pos:position pos:line="39" pos:column="67"/></literal></expr>)<pos:position pos:line="39" pos:column="68"/></condition><then pos:line="39" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="25">die<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><literal type="string" pos:line="40" pos:column="29">"unable to write object to database"<pos:position pos:line="40" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="67"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="41" pos:column="17">/* index_fd close()s fd for us */</comment>
	}<pos:position pos:line="42" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="44" pos:column="9">/*
	 * No need to close(fd) here; both run-command and index-fd
	 * will have done it for us.
	 */</comment>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
