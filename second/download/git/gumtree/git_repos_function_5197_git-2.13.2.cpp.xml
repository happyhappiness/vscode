<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5197_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">run_rewrite_hook<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">object_id<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">oldoid<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name><name pos:line="2" pos:column="35">struct<pos:position pos:line="2" pos:column="41"/></name> <name pos:line="2" pos:column="42">object_id<pos:position pos:line="2" pos:column="51"/></name></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">newoid<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">child_process<pos:position pos:line="4" pos:column="29"/></name></name></type> <name pos:line="4" pos:column="30">proc<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name pos:line="4" pos:column="37">CHILD_PROCESS_INIT<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name><name pos:line="5" pos:column="21">argv<pos:position pos:line="5" pos:column="25"/></name><index pos:line="5" pos:column="25">[<expr><literal type="number" pos:line="5" pos:column="26">3<pos:position pos:line="5" pos:column="27"/></literal></expr>]<pos:position pos:line="5" pos:column="28"/></index></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">code<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">sb<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name pos:line="7" pos:column="28">STRBUF_INIT<pos:position pos:line="7" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="9" pos:column="9">argv<pos:position pos:line="9" pos:column="13"/></name><index pos:line="9" pos:column="13">[<expr><literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>]<pos:position pos:line="9" pos:column="16"/></index></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <call><name pos:line="9" pos:column="19">find_hook<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><literal type="string" pos:line="9" pos:column="29">"post-rewrite"<pos:position pos:line="9" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name><name pos:line="10" pos:column="14">argv<pos:position pos:line="10" pos:column="18"/></name><index pos:line="10" pos:column="18">[<expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr>]<pos:position pos:line="10" pos:column="21"/></index></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="13" pos:column="9">argv<pos:position pos:line="13" pos:column="13"/></name><index pos:line="13" pos:column="13">[<expr><literal type="number" pos:line="13" pos:column="14">1<pos:position pos:line="13" pos:column="15"/></literal></expr>]<pos:position pos:line="13" pos:column="16"/></index></name> <operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator> <literal type="string" pos:line="13" pos:column="19">"amend"<pos:position pos:line="13" pos:column="26"/></literal></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">argv<pos:position pos:line="14" pos:column="13"/></name><index pos:line="14" pos:column="13">[<expr><literal type="number" pos:line="14" pos:column="14">2<pos:position pos:line="14" pos:column="15"/></literal></expr>]<pos:position pos:line="14" pos:column="16"/></index></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <name pos:line="14" pos:column="19">NULL<pos:position pos:line="14" pos:column="23"/></name></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="16" pos:column="9">proc<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">.<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">argv<pos:position pos:line="16" pos:column="18"/></name></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="21">argv<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">proc<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">.<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">in<pos:position pos:line="17" pos:column="16"/></name></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <operator pos:line="17" pos:column="19">-<pos:position pos:line="17" pos:column="20"/></operator><literal type="number" pos:line="17" pos:column="20">1<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">proc<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">.<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">stdout_to_stderr<pos:position pos:line="18" pos:column="30"/></name></name> <operator pos:line="18" pos:column="31">=<pos:position pos:line="18" pos:column="32"/></operator> <literal type="number" pos:line="18" pos:column="33">1<pos:position pos:line="18" pos:column="34"/></literal></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><name pos:line="20" pos:column="9">code<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <call><name pos:line="20" pos:column="16">start_command<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><operator pos:line="20" pos:column="30">&amp;<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="31">proc<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">code<pos:position pos:line="21" pos:column="17"/></name></expr>)<pos:position pos:line="21" pos:column="18"/></condition><then pos:line="21" pos:column="18">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><name pos:line="22" pos:column="24">code<pos:position pos:line="22" pos:column="28"/></name></expr>;<pos:position pos:line="22" pos:column="29"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">strbuf_addf<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><operator pos:line="23" pos:column="21">&amp;<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="22">sb<pos:position pos:line="23" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="26">"%s %s\n"<pos:position pos:line="23" pos:column="35"/></literal></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="37">oid_to_hex<pos:position pos:line="23" pos:column="47"/></name><argument_list pos:line="23" pos:column="47">(<argument><expr><name pos:line="23" pos:column="48">oldoid<pos:position pos:line="23" pos:column="54"/></name></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="57">oid_to_hex<pos:position pos:line="23" pos:column="67"/></name><argument_list pos:line="23" pos:column="67">(<argument><expr><name pos:line="23" pos:column="68">newoid<pos:position pos:line="23" pos:column="74"/></name></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="77"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">sigchain_push<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">SIGPIPE<pos:position pos:line="24" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="32">SIG_IGN<pos:position pos:line="24" pos:column="39"/></name></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">write_in_full<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name><name pos:line="25" pos:column="23">proc<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">.<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="28">in<pos:position pos:line="25" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="32">sb<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">.<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="35">buf<pos:position pos:line="25" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="40">sb<pos:position pos:line="25" pos:column="42"/></name><operator pos:line="25" pos:column="42">.<pos:position pos:line="25" pos:column="43"/></operator><name pos:line="25" pos:column="43">len<pos:position pos:line="25" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">close<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><name><name pos:line="26" pos:column="15">proc<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">.<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">in<pos:position pos:line="26" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">strbuf_release<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><operator pos:line="27" pos:column="24">&amp;<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="25">sb<pos:position pos:line="27" pos:column="27"/></name></expr></argument>)<pos:position pos:line="27" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">sigchain_pop<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">SIGPIPE<pos:position pos:line="28" pos:column="29"/></name></expr></argument>)<pos:position pos:line="28" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>
	<return pos:line="29" pos:column="9">return <expr><call><name pos:line="29" pos:column="16">finish_command<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><operator pos:line="29" pos:column="31">&amp;<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="32">proc<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
