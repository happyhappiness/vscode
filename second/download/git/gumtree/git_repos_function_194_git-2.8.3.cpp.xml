<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_194_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">combine_diff<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">object_id<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">parent<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">unsigned<pos:position pos:line="1" pos:column="66"/></name> <name pos:line="1" pos:column="67">int<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">mode<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="2" pos:column="26">mmfile_t<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">result_file<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
			 <parameter><decl><type><name><name pos:line="3" pos:column="26">struct<pos:position pos:line="3" pos:column="32"/></name> <name pos:line="3" pos:column="33">sline<pos:position pos:line="3" pos:column="38"/></name></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">sline<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="47">unsigned<pos:position pos:line="3" pos:column="55"/></name> <name pos:line="3" pos:column="56">int<pos:position pos:line="3" pos:column="59"/></name></type> <name pos:line="3" pos:column="60">cnt<pos:position pos:line="3" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="65">int<pos:position pos:line="3" pos:column="68"/></name></type> <name pos:line="3" pos:column="69">n<pos:position pos:line="3" pos:column="70"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="4" pos:column="26">int<pos:position pos:line="4" pos:column="29"/></name></type> <name pos:line="4" pos:column="30">num_parent<pos:position pos:line="4" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="42">int<pos:position pos:line="4" pos:column="45"/></name></type> <name pos:line="4" pos:column="46">result_deleted<pos:position pos:line="4" pos:column="60"/></name></decl></parameter>,
			 <parameter><decl><type><name><name pos:line="5" pos:column="26">struct<pos:position pos:line="5" pos:column="32"/></name> <name pos:line="5" pos:column="33">userdiff_driver<pos:position pos:line="5" pos:column="48"/></name></name> <modifier pos:line="5" pos:column="49">*<pos:position pos:line="5" pos:column="50"/></modifier></type><name pos:line="5" pos:column="50">textconv<pos:position pos:line="5" pos:column="58"/></name></decl></parameter>,
			 <parameter><decl><type><specifier pos:line="6" pos:column="26">const<pos:position pos:line="6" pos:column="31"/></specifier> <name pos:line="6" pos:column="32">char<pos:position pos:line="6" pos:column="36"/></name> <modifier pos:line="6" pos:column="37">*<pos:position pos:line="6" pos:column="38"/></modifier></type><name pos:line="6" pos:column="38">path<pos:position pos:line="6" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="6" pos:column="44">long<pos:position pos:line="6" pos:column="48"/></name></type> <name pos:line="6" pos:column="49">flags<pos:position pos:line="6" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="55"/></parameter_list>
<block pos:line="7" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name> <name pos:line="8" pos:column="18">int<pos:position pos:line="8" pos:column="21"/></name></type> <name pos:line="8" pos:column="22">p_lno<pos:position pos:line="8" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="29">lno<pos:position pos:line="8" pos:column="32"/></name></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">long<pos:position pos:line="9" pos:column="22"/></name></type> <name pos:line="9" pos:column="23">nmask<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><operator pos:line="9" pos:column="31">(<pos:position pos:line="9" pos:column="32"/></operator><literal type="number" pos:line="9" pos:column="32">1UL<pos:position pos:line="9" pos:column="35"/></literal> <operator pos:line="9" pos:column="36">&lt;&lt;<pos:position pos:line="9" pos:column="44"/></operator> <name pos:line="9" pos:column="39">n<pos:position pos:line="9" pos:column="40"/></name><operator pos:line="9" pos:column="40">)<pos:position pos:line="9" pos:column="41"/></operator></expr></init></decl>;<pos:position pos:line="9" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">xpparam_t<pos:position pos:line="10" pos:column="18"/></name></type> <name pos:line="10" pos:column="19">xpp<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">xdemitconf_t<pos:position pos:line="11" pos:column="21"/></name></type> <name pos:line="11" pos:column="22">xecfg<pos:position pos:line="11" pos:column="27"/></name></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">mmfile_t<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">parent_file<pos:position pos:line="12" pos:column="29"/></name></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">struct<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">combine_diff_state<pos:position pos:line="13" pos:column="34"/></name></name></type> <name pos:line="13" pos:column="35">state<pos:position pos:line="13" pos:column="40"/></name></decl>;<pos:position pos:line="13" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">unsigned<pos:position pos:line="14" pos:column="17"/></name> <name pos:line="14" pos:column="18">long<pos:position pos:line="14" pos:column="22"/></name></type> <name pos:line="14" pos:column="23">sz<pos:position pos:line="14" pos:column="25"/></name></decl>;<pos:position pos:line="14" pos:column="26"/></decl_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">result_deleted<pos:position pos:line="16" pos:column="27"/></name></expr>)<pos:position pos:line="16" pos:column="28"/></condition><then pos:line="16" pos:column="28">
		<block type="pseudo"><return pos:line="17" pos:column="17">return;<pos:position pos:line="17" pos:column="24"/></return></block></then></if> <comment type="block" pos:line="17" pos:column="25">/* result deleted */</comment>

	<expr_stmt><expr><name><name pos:line="19" pos:column="9">parent_file<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">.<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">ptr<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <call><name pos:line="19" pos:column="27">grab_blob<pos:position pos:line="19" pos:column="36"/></name><argument_list pos:line="19" pos:column="36">(<argument><expr><name pos:line="19" pos:column="37">parent<pos:position pos:line="19" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">mode<pos:position pos:line="19" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="51">&amp;<pos:position pos:line="19" pos:column="56"/></operator><name pos:line="19" pos:column="52">sz<pos:position pos:line="19" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="56">textconv<pos:position pos:line="19" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="66">path<pos:position pos:line="19" pos:column="70"/></name></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="72"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">parent_file<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">.<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="21">size<pos:position pos:line="20" pos:column="25"/></name></name> <operator pos:line="20" pos:column="26">=<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="28">sz<pos:position pos:line="20" pos:column="30"/></name></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">memset<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><operator pos:line="21" pos:column="16">&amp;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="17">xpp<pos:position pos:line="21" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="22">0<pos:position pos:line="21" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="25">sizeof<argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">xpp<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">xpp<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">.<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">flags<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <name pos:line="22" pos:column="21">flags<pos:position pos:line="22" pos:column="26"/></name></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">memset<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><operator pos:line="23" pos:column="16">&amp;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="17">xecfg<pos:position pos:line="23" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="24">0<pos:position pos:line="23" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="27">sizeof<argument_list pos:line="23" pos:column="33">(<argument><expr><name pos:line="23" pos:column="34">xecfg<pos:position pos:line="23" pos:column="39"/></name></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">memset<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><operator pos:line="24" pos:column="16">&amp;<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="17">state<pos:position pos:line="24" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="24">0<pos:position pos:line="24" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="27">sizeof<argument_list pos:line="24" pos:column="33">(<argument><expr><name pos:line="24" pos:column="34">state<pos:position pos:line="24" pos:column="39"/></name></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="25" pos:column="9">state<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">.<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">nmask<pos:position pos:line="25" pos:column="20"/></name></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="23">nmask<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="26" pos:column="9">state<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">.<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">sline<pos:position pos:line="26" pos:column="20"/></name></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">sline<pos:position pos:line="26" pos:column="28"/></name></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="27" pos:column="9">state<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">.<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="15">lno<pos:position pos:line="27" pos:column="18"/></name></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <literal type="number" pos:line="27" pos:column="21">1<pos:position pos:line="27" pos:column="22"/></literal></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">state<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">.<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">num_parent<pos:position pos:line="28" pos:column="25"/></name></name> <operator pos:line="28" pos:column="26">=<pos:position pos:line="28" pos:column="27"/></operator> <name pos:line="28" pos:column="28">num_parent<pos:position pos:line="28" pos:column="38"/></name></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="29" pos:column="9">state<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">.<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="15">n<pos:position pos:line="29" pos:column="16"/></name></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <name pos:line="29" pos:column="19">n<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></expr_stmt>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">xdi_diff_outf<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><operator pos:line="31" pos:column="27">&amp;<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="28">parent_file<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="41">result_file<pos:position pos:line="31" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="54">consume_line<pos:position pos:line="31" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="68">&amp;<pos:position pos:line="31" pos:column="73"/></operator><name pos:line="31" pos:column="69">state<pos:position pos:line="31" pos:column="74"/></name></expr></argument>,
			  <argument><expr><operator pos:line="32" pos:column="27">&amp;<pos:position pos:line="32" pos:column="32"/></operator><name pos:line="32" pos:column="28">xpp<pos:position pos:line="32" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="33">&amp;<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="34">xecfg<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="41"/></condition><then pos:line="32" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="17">die<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><literal type="string" pos:line="33" pos:column="21">"unable to generate combined diff for %s"<pos:position pos:line="33" pos:column="62"/></literal></expr></argument>,
		    <argument><expr><call><name pos:line="34" pos:column="21">oid_to_hex<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name pos:line="34" pos:column="32">parent<pos:position pos:line="34" pos:column="38"/></name></expr></argument>)<pos:position pos:line="34" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="41"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">free<pos:position pos:line="35" pos:column="13"/></name><argument_list pos:line="35" pos:column="13">(<argument><expr><name><name pos:line="35" pos:column="14">parent_file<pos:position pos:line="35" pos:column="25"/></name><operator pos:line="35" pos:column="25">.<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="26">ptr<pos:position pos:line="35" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>

	<comment type="block" pos:line="37" pos:column="9">/* Assign line numbers for this parent.
	 *
	 * sline[lno].p_lno[n] records the first line number
	 * (counting from 1) for parent N if the final hunk display
	 * started by showing sline[lno] (possibly showing the lost
	 * lines attached to it first).
	 */</comment>
	<for pos:line="44" pos:column="9">for <control pos:line="44" pos:column="13">(<init><expr><name pos:line="44" pos:column="14">lno<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <literal type="number" pos:line="44" pos:column="20">0<pos:position pos:line="44" pos:column="21"/></literal></expr><operator pos:line="44" pos:column="21">,<pos:position pos:line="44" pos:column="22"/></operator>  <expr><name pos:line="44" pos:column="24">p_lno<pos:position pos:line="44" pos:column="29"/></name> <operator pos:line="44" pos:column="30">=<pos:position pos:line="44" pos:column="31"/></operator> <literal type="number" pos:line="44" pos:column="32">1<pos:position pos:line="44" pos:column="33"/></literal></expr>;<pos:position pos:line="44" pos:column="34"/></init> <condition><expr><name pos:line="44" pos:column="35">lno<pos:position pos:line="44" pos:column="38"/></name> <operator pos:line="44" pos:column="39">&lt;=<pos:position pos:line="44" pos:column="44"/></operator> <name pos:line="44" pos:column="42">cnt<pos:position pos:line="44" pos:column="45"/></name></expr>;<pos:position pos:line="44" pos:column="46"/></condition> <incr><expr><name pos:line="44" pos:column="47">lno<pos:position pos:line="44" pos:column="50"/></name><operator pos:line="44" pos:column="50">++<pos:position pos:line="44" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="44" pos:column="53"/></control> <block pos:line="44" pos:column="54">{
		<decl_stmt><decl><type><name><name pos:line="45" pos:column="17">struct<pos:position pos:line="45" pos:column="23"/></name> <name pos:line="45" pos:column="24">lline<pos:position pos:line="45" pos:column="29"/></name></name> <modifier pos:line="45" pos:column="30">*<pos:position pos:line="45" pos:column="31"/></modifier></type><name pos:line="45" pos:column="31">ll<pos:position pos:line="45" pos:column="33"/></name></decl>;<pos:position pos:line="45" pos:column="34"/></decl_stmt>
		<expr_stmt><expr><name><name pos:line="46" pos:column="17">sline<pos:position pos:line="46" pos:column="22"/></name><index pos:line="46" pos:column="22">[<expr><name pos:line="46" pos:column="23">lno<pos:position pos:line="46" pos:column="26"/></name></expr>]<pos:position pos:line="46" pos:column="27"/></index></name><operator pos:line="46" pos:column="27">.<pos:position pos:line="46" pos:column="28"/></operator><name><name pos:line="46" pos:column="28">p_lno<pos:position pos:line="46" pos:column="33"/></name><index pos:line="46" pos:column="33">[<expr><name pos:line="46" pos:column="34">n<pos:position pos:line="46" pos:column="35"/></name></expr>]<pos:position pos:line="46" pos:column="36"/></index></name> <operator pos:line="46" pos:column="37">=<pos:position pos:line="46" pos:column="38"/></operator> <name pos:line="46" pos:column="39">p_lno<pos:position pos:line="46" pos:column="44"/></name></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>

		<comment type="block" pos:line="48" pos:column="17">/* Coalesce new lines */</comment>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name><name pos:line="49" pos:column="21">sline<pos:position pos:line="49" pos:column="26"/></name><index pos:line="49" pos:column="26">[<expr><name pos:line="49" pos:column="27">lno<pos:position pos:line="49" pos:column="30"/></name></expr>]<pos:position pos:line="49" pos:column="31"/></index></name><operator pos:line="49" pos:column="31">.<pos:position pos:line="49" pos:column="32"/></operator><name><name pos:line="49" pos:column="32">plost<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">.<pos:position pos:line="49" pos:column="38"/></operator><name pos:line="49" pos:column="38">lost_head<pos:position pos:line="49" pos:column="47"/></name></name></expr>)<pos:position pos:line="49" pos:column="48"/></condition><then pos:line="49" pos:column="48"> <block pos:line="49" pos:column="49">{
			<decl_stmt><decl><type><name><name pos:line="50" pos:column="25">struct<pos:position pos:line="50" pos:column="31"/></name> <name pos:line="50" pos:column="32">sline<pos:position pos:line="50" pos:column="37"/></name></name> <modifier pos:line="50" pos:column="38">*<pos:position pos:line="50" pos:column="39"/></modifier></type><name pos:line="50" pos:column="39">sl<pos:position pos:line="50" pos:column="41"/></name> <init pos:line="50" pos:column="42">= <expr><operator pos:line="50" pos:column="44">&amp;<pos:position pos:line="50" pos:column="49"/></operator><name><name pos:line="50" pos:column="45">sline<pos:position pos:line="50" pos:column="50"/></name><index pos:line="50" pos:column="50">[<expr><name pos:line="50" pos:column="51">lno<pos:position pos:line="50" pos:column="54"/></name></expr>]<pos:position pos:line="50" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="50" pos:column="56"/></decl_stmt>
			<expr_stmt><expr><name><name pos:line="51" pos:column="25">sl<pos:position pos:line="51" pos:column="27"/></name><operator pos:line="51" pos:column="27">-&gt;<pos:position pos:line="51" pos:column="32"/></operator><name pos:line="51" pos:column="29">lost<pos:position pos:line="51" pos:column="33"/></name></name> <operator pos:line="51" pos:column="34">=<pos:position pos:line="51" pos:column="35"/></operator> <call><name pos:line="51" pos:column="36">coalesce_lines<pos:position pos:line="51" pos:column="50"/></name><argument_list pos:line="51" pos:column="50">(<argument><expr><name><name pos:line="51" pos:column="51">sl<pos:position pos:line="51" pos:column="53"/></name><operator pos:line="51" pos:column="53">-&gt;<pos:position pos:line="51" pos:column="58"/></operator><name pos:line="51" pos:column="55">lost<pos:position pos:line="51" pos:column="59"/></name></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="61">&amp;<pos:position pos:line="51" pos:column="66"/></operator><name><name pos:line="51" pos:column="62">sl<pos:position pos:line="51" pos:column="64"/></name><operator pos:line="51" pos:column="64">-&gt;<pos:position pos:line="51" pos:column="69"/></operator><name pos:line="51" pos:column="66">lenlost<pos:position pos:line="51" pos:column="73"/></name></name></expr></argument>,
						  <argument><expr><name><name pos:line="52" pos:column="51">sl<pos:position pos:line="52" pos:column="53"/></name><operator pos:line="52" pos:column="53">-&gt;<pos:position pos:line="52" pos:column="58"/></operator><name pos:line="52" pos:column="55">plost<pos:position pos:line="52" pos:column="60"/></name><operator pos:line="52" pos:column="60">.<pos:position pos:line="52" pos:column="61"/></operator><name pos:line="52" pos:column="61">lost_head<pos:position pos:line="52" pos:column="70"/></name></name></expr></argument>,
						  <argument><expr><name><name pos:line="53" pos:column="51">sl<pos:position pos:line="53" pos:column="53"/></name><operator pos:line="53" pos:column="53">-&gt;<pos:position pos:line="53" pos:column="58"/></operator><name pos:line="53" pos:column="55">plost<pos:position pos:line="53" pos:column="60"/></name><operator pos:line="53" pos:column="60">.<pos:position pos:line="53" pos:column="61"/></operator><name pos:line="53" pos:column="61">len<pos:position pos:line="53" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="66">n<pos:position pos:line="53" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="69">flags<pos:position pos:line="53" pos:column="74"/></name></expr></argument>)<pos:position pos:line="53" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="54" pos:column="25">sl<pos:position pos:line="54" pos:column="27"/></name><operator pos:line="54" pos:column="27">-&gt;<pos:position pos:line="54" pos:column="32"/></operator><name pos:line="54" pos:column="29">plost<pos:position pos:line="54" pos:column="34"/></name><operator pos:line="54" pos:column="34">.<pos:position pos:line="54" pos:column="35"/></operator><name pos:line="54" pos:column="35">lost_head<pos:position pos:line="54" pos:column="44"/></name></name> <operator pos:line="54" pos:column="45">=<pos:position pos:line="54" pos:column="46"/></operator> <name><name pos:line="54" pos:column="47">sl<pos:position pos:line="54" pos:column="49"/></name><operator pos:line="54" pos:column="49">-&gt;<pos:position pos:line="54" pos:column="54"/></operator><name pos:line="54" pos:column="51">plost<pos:position pos:line="54" pos:column="56"/></name><operator pos:line="54" pos:column="56">.<pos:position pos:line="54" pos:column="57"/></operator><name pos:line="54" pos:column="57">lost_tail<pos:position pos:line="54" pos:column="66"/></name></name> <operator pos:line="54" pos:column="67">=<pos:position pos:line="54" pos:column="68"/></operator> <name pos:line="54" pos:column="69">NULL<pos:position pos:line="54" pos:column="73"/></name></expr>;<pos:position pos:line="54" pos:column="74"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="55" pos:column="25">sl<pos:position pos:line="55" pos:column="27"/></name><operator pos:line="55" pos:column="27">-&gt;<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="29">plost<pos:position pos:line="55" pos:column="34"/></name><operator pos:line="55" pos:column="34">.<pos:position pos:line="55" pos:column="35"/></operator><name pos:line="55" pos:column="35">len<pos:position pos:line="55" pos:column="38"/></name></name> <operator pos:line="55" pos:column="39">=<pos:position pos:line="55" pos:column="40"/></operator> <literal type="number" pos:line="55" pos:column="41">0<pos:position pos:line="55" pos:column="42"/></literal></expr>;<pos:position pos:line="55" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="58" pos:column="17">/* How many lines would this sline advance the p_lno? */</comment>
		<expr_stmt><expr><name pos:line="59" pos:column="17">ll<pos:position pos:line="59" pos:column="19"/></name> <operator pos:line="59" pos:column="20">=<pos:position pos:line="59" pos:column="21"/></operator> <name><name pos:line="59" pos:column="22">sline<pos:position pos:line="59" pos:column="27"/></name><index pos:line="59" pos:column="27">[<expr><name pos:line="59" pos:column="28">lno<pos:position pos:line="59" pos:column="31"/></name></expr>]<pos:position pos:line="59" pos:column="32"/></index></name><operator pos:line="59" pos:column="32">.<pos:position pos:line="59" pos:column="33"/></operator><name pos:line="59" pos:column="33">lost<pos:position pos:line="59" pos:column="37"/></name></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>
		<while pos:line="60" pos:column="17">while <condition pos:line="60" pos:column="23">(<expr><name pos:line="60" pos:column="24">ll<pos:position pos:line="60" pos:column="26"/></name></expr>)<pos:position pos:line="60" pos:column="27"/></condition> <block pos:line="60" pos:column="28">{
			<if pos:line="61" pos:column="25">if <condition pos:line="61" pos:column="28">(<expr><name><name pos:line="61" pos:column="29">ll<pos:position pos:line="61" pos:column="31"/></name><operator pos:line="61" pos:column="31">-&gt;<pos:position pos:line="61" pos:column="36"/></operator><name pos:line="61" pos:column="33">parent_map<pos:position pos:line="61" pos:column="43"/></name></name> <operator pos:line="61" pos:column="44">&amp;<pos:position pos:line="61" pos:column="49"/></operator> <name pos:line="61" pos:column="46">nmask<pos:position pos:line="61" pos:column="51"/></name></expr>)<pos:position pos:line="61" pos:column="52"/></condition><then pos:line="61" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="33">p_lno<pos:position pos:line="62" pos:column="38"/></name><operator pos:line="62" pos:column="38">++<pos:position pos:line="62" pos:column="40"/></operator></expr>;<pos:position pos:line="62" pos:column="41"/></expr_stmt></block></then></if> <comment type="block" pos:line="62" pos:column="42">/* '-' means parent had it */</comment>
			<expr_stmt><expr><name pos:line="63" pos:column="25">ll<pos:position pos:line="63" pos:column="27"/></name> <operator pos:line="63" pos:column="28">=<pos:position pos:line="63" pos:column="29"/></operator> <name><name pos:line="63" pos:column="30">ll<pos:position pos:line="63" pos:column="32"/></name><operator pos:line="63" pos:column="32">-&gt;<pos:position pos:line="63" pos:column="37"/></operator><name pos:line="63" pos:column="34">next<pos:position pos:line="63" pos:column="38"/></name></name></expr>;<pos:position pos:line="63" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="64" pos:column="18"/></block></while>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><name pos:line="65" pos:column="21">lno<pos:position pos:line="65" pos:column="24"/></name> <operator pos:line="65" pos:column="25">&lt;<pos:position pos:line="65" pos:column="29"/></operator> <name pos:line="65" pos:column="27">cnt<pos:position pos:line="65" pos:column="30"/></name> <operator pos:line="65" pos:column="31">&amp;&amp;<pos:position pos:line="65" pos:column="41"/></operator> <operator pos:line="65" pos:column="34">!<pos:position pos:line="65" pos:column="35"/></operator><operator pos:line="65" pos:column="35">(<pos:position pos:line="65" pos:column="36"/></operator><name><name pos:line="65" pos:column="36">sline<pos:position pos:line="65" pos:column="41"/></name><index pos:line="65" pos:column="41">[<expr><name pos:line="65" pos:column="42">lno<pos:position pos:line="65" pos:column="45"/></name></expr>]<pos:position pos:line="65" pos:column="46"/></index></name><operator pos:line="65" pos:column="46">.<pos:position pos:line="65" pos:column="47"/></operator><name pos:line="65" pos:column="47">flag<pos:position pos:line="65" pos:column="51"/></name> <operator pos:line="65" pos:column="52">&amp;<pos:position pos:line="65" pos:column="57"/></operator> <name pos:line="65" pos:column="54">nmask<pos:position pos:line="65" pos:column="59"/></name><operator pos:line="65" pos:column="59">)<pos:position pos:line="65" pos:column="60"/></operator></expr>)<pos:position pos:line="65" pos:column="61"/></condition><then pos:line="65" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><name pos:line="66" pos:column="25">p_lno<pos:position pos:line="66" pos:column="30"/></name><operator pos:line="66" pos:column="30">++<pos:position pos:line="66" pos:column="32"/></operator></expr>;<pos:position pos:line="66" pos:column="33"/></expr_stmt></block></then></if> <comment type="block" pos:line="66" pos:column="34">/* no '+' means parent had it */</comment>
	}<pos:position pos:line="67" pos:column="10"/></block></for>
	<expr_stmt><expr><name><name pos:line="68" pos:column="9">sline<pos:position pos:line="68" pos:column="14"/></name><index pos:line="68" pos:column="14">[<expr><name pos:line="68" pos:column="15">lno<pos:position pos:line="68" pos:column="18"/></name></expr>]<pos:position pos:line="68" pos:column="19"/></index></name><operator pos:line="68" pos:column="19">.<pos:position pos:line="68" pos:column="20"/></operator><name><name pos:line="68" pos:column="20">p_lno<pos:position pos:line="68" pos:column="25"/></name><index pos:line="68" pos:column="25">[<expr><name pos:line="68" pos:column="26">n<pos:position pos:line="68" pos:column="27"/></name></expr>]<pos:position pos:line="68" pos:column="28"/></index></name> <operator pos:line="68" pos:column="29">=<pos:position pos:line="68" pos:column="30"/></operator> <name pos:line="68" pos:column="31">p_lno<pos:position pos:line="68" pos:column="36"/></name></expr>;<pos:position pos:line="68" pos:column="37"/></expr_stmt> <comment type="block" pos:line="68" pos:column="38">/* trailer */</comment>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
