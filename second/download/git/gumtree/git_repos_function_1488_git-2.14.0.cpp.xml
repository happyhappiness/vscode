<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1488_git-2.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">write_accept_language<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">strbuf<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">buf<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * MAX_DECIMAL_PLACES must not be larger than 3. If it is larger than
	 * that, q-value will be smaller than 0.001, the minimum q-value the
	 * HTTP specification allows. See
	 * http://tools.ietf.org/html/rfc7231#section-5.3.1 for q-value.
	 */</comment>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">int<pos:position pos:line="9" pos:column="18"/></name></type> <name pos:line="9" pos:column="19">MAX_DECIMAL_PLACES<pos:position pos:line="9" pos:column="37"/></name> <init pos:line="9" pos:column="38">= <expr><literal type="number" pos:line="9" pos:column="40">3<pos:position pos:line="9" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">int<pos:position pos:line="10" pos:column="18"/></name></type> <name pos:line="10" pos:column="19">MAX_LANGUAGE_TAGS<pos:position pos:line="10" pos:column="36"/></name> <init pos:line="10" pos:column="37">= <expr><literal type="number" pos:line="10" pos:column="39">1000<pos:position pos:line="10" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name pos:line="11" pos:column="15">int<pos:position pos:line="11" pos:column="18"/></name></type> <name pos:line="11" pos:column="19">MAX_ACCEPT_LANGUAGE_HEADER_SIZE<pos:position pos:line="11" pos:column="50"/></name> <init pos:line="11" pos:column="51">= <expr><literal type="number" pos:line="11" pos:column="53">4000<pos:position pos:line="11" pos:column="57"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier><modifier pos:line="12" pos:column="15">*<pos:position pos:line="12" pos:column="16"/></modifier></type><name pos:line="12" pos:column="16">language_tags<pos:position pos:line="12" pos:column="29"/></name> <init pos:line="12" pos:column="30">= <expr><name pos:line="12" pos:column="32">NULL<pos:position pos:line="12" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">num_langs<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><literal type="number" pos:line="13" pos:column="25">0<pos:position pos:line="13" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="14" pos:column="9">const<pos:position pos:line="14" pos:column="14"/></specifier> <name pos:line="14" pos:column="15">char<pos:position pos:line="14" pos:column="19"/></name> <modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier></type><name pos:line="14" pos:column="21">s<pos:position pos:line="14" pos:column="22"/></name> <init pos:line="14" pos:column="23">= <expr><call><name pos:line="14" pos:column="25">get_preferred_languages<pos:position pos:line="14" pos:column="48"/></name><argument_list pos:line="14" pos:column="48">()<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">i<pos:position pos:line="15" pos:column="14"/></name></decl>;<pos:position pos:line="15" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="16" pos:column="9">struct<pos:position pos:line="16" pos:column="15"/></name> <name pos:line="16" pos:column="16">strbuf<pos:position pos:line="16" pos:column="22"/></name></name></type> <name pos:line="16" pos:column="23">tag<pos:position pos:line="16" pos:column="26"/></name> <init pos:line="16" pos:column="27">= <expr><name pos:line="16" pos:column="29">STRBUF_INIT<pos:position pos:line="16" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="41"/></decl_stmt>

	<comment type="block" pos:line="18" pos:column="9">/* Don't add Accept-Language header if no language is preferred. */</comment>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">s<pos:position pos:line="19" pos:column="15"/></name></expr>)<pos:position pos:line="19" pos:column="16"/></condition><then pos:line="19" pos:column="16">
		<block type="pseudo"><return pos:line="20" pos:column="17">return;<pos:position pos:line="20" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="22" pos:column="9">/*
	 * Split the colon-separated string of preferred languages into
	 * language_tags array.
	 */</comment>
	<do pos:line="26" pos:column="9">do <block pos:line="26" pos:column="12">{
		<comment type="block" pos:line="27" pos:column="17">/* collect language tag */</comment>
		<for pos:line="28" pos:column="17">for <control pos:line="28" pos:column="21">(<init pos:line="28" pos:column="22">;<pos:position pos:line="28" pos:column="23"/></init> <condition><expr><operator pos:line="28" pos:column="24">*<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">s<pos:position pos:line="28" pos:column="26"/></name> <operator pos:line="28" pos:column="27">&amp;&amp;<pos:position pos:line="28" pos:column="37"/></operator> <operator pos:line="28" pos:column="30">(<pos:position pos:line="28" pos:column="31"/></operator><call><name pos:line="28" pos:column="31">isalnum<pos:position pos:line="28" pos:column="38"/></name><argument_list pos:line="28" pos:column="38">(<argument><expr><operator pos:line="28" pos:column="39">*<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="40">s<pos:position pos:line="28" pos:column="41"/></name></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call> <operator pos:line="28" pos:column="43">||<pos:position pos:line="28" pos:column="45"/></operator> <operator pos:line="28" pos:column="46">*<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="47">s<pos:position pos:line="28" pos:column="48"/></name> <operator pos:line="28" pos:column="49">==<pos:position pos:line="28" pos:column="51"/></operator> <literal type="char" pos:line="28" pos:column="52">'_'<pos:position pos:line="28" pos:column="55"/></literal><operator pos:line="28" pos:column="55">)<pos:position pos:line="28" pos:column="56"/></operator></expr>;<pos:position pos:line="28" pos:column="57"/></condition> <incr><expr><name pos:line="28" pos:column="58">s<pos:position pos:line="28" pos:column="59"/></name><operator pos:line="28" pos:column="59">++<pos:position pos:line="28" pos:column="61"/></operator></expr></incr>)<pos:position pos:line="28" pos:column="62"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">strbuf_addch<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><operator pos:line="29" pos:column="38">&amp;<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="39">tag<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="29" pos:column="44">*<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="45">s<pos:position pos:line="29" pos:column="46"/></name> <operator pos:line="29" pos:column="47">==<pos:position pos:line="29" pos:column="49"/></operator> <literal type="char" pos:line="29" pos:column="50">'_'<pos:position pos:line="29" pos:column="53"/></literal></expr> ?<pos:position pos:line="29" pos:column="55"/></condition><then pos:line="29" pos:column="55"> <expr><literal type="char" pos:line="29" pos:column="56">'-'<pos:position pos:line="29" pos:column="59"/></literal></expr> <pos:position pos:line="29" pos:column="60"/></then><else pos:line="29" pos:column="60">: <expr><operator pos:line="29" pos:column="62">*<pos:position pos:line="29" pos:column="63"/></operator><name pos:line="29" pos:column="63">s<pos:position pos:line="29" pos:column="64"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="29" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="66"/></expr_stmt></block></for>

		<comment type="block" pos:line="31" pos:column="17">/* skip .codeset, @modifier and any other unnecessary parts */</comment>
		<while pos:line="32" pos:column="17">while <condition pos:line="32" pos:column="23">(<expr><operator pos:line="32" pos:column="24">*<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="25">s<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">&amp;&amp;<pos:position pos:line="32" pos:column="37"/></operator> <operator pos:line="32" pos:column="30">*<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="31">s<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">!=<pos:position pos:line="32" pos:column="35"/></operator> <literal type="char" pos:line="32" pos:column="36">':'<pos:position pos:line="32" pos:column="39"/></literal></expr>)<pos:position pos:line="32" pos:column="40"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="25">s<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">++<pos:position pos:line="33" pos:column="28"/></operator></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt></block></while>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name><name pos:line="35" pos:column="21">tag<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">.<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="25">len<pos:position pos:line="35" pos:column="28"/></name></name></expr>)<pos:position pos:line="35" pos:column="29"/></condition><then pos:line="35" pos:column="29"> <block pos:line="35" pos:column="30">{
			<expr_stmt><expr><name pos:line="36" pos:column="25">num_langs<pos:position pos:line="36" pos:column="34"/></name><operator pos:line="36" pos:column="34">++<pos:position pos:line="36" pos:column="36"/></operator></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">REALLOC_ARRAY<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">language_tags<pos:position pos:line="37" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="54">num_langs<pos:position pos:line="37" pos:column="63"/></name></expr></argument>)<pos:position pos:line="37" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="38" pos:column="25">language_tags<pos:position pos:line="38" pos:column="38"/></name><index pos:line="38" pos:column="38">[<expr><name pos:line="38" pos:column="39">num_langs<pos:position pos:line="38" pos:column="48"/></name> <operator pos:line="38" pos:column="49">-<pos:position pos:line="38" pos:column="50"/></operator> <literal type="number" pos:line="38" pos:column="51">1<pos:position pos:line="38" pos:column="52"/></literal></expr>]<pos:position pos:line="38" pos:column="53"/></index></name> <operator pos:line="38" pos:column="54">=<pos:position pos:line="38" pos:column="55"/></operator> <call><name pos:line="38" pos:column="56">strbuf_detach<pos:position pos:line="38" pos:column="69"/></name><argument_list pos:line="38" pos:column="69">(<argument><expr><operator pos:line="38" pos:column="70">&amp;<pos:position pos:line="38" pos:column="75"/></operator><name pos:line="38" pos:column="71">tag<pos:position pos:line="38" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="76">NULL<pos:position pos:line="38" pos:column="80"/></name></expr></argument>)<pos:position pos:line="38" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="82"/></expr_stmt>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><name pos:line="39" pos:column="29">num_langs<pos:position pos:line="39" pos:column="38"/></name> <operator pos:line="39" pos:column="39">&gt;=<pos:position pos:line="39" pos:column="44"/></operator> <name pos:line="39" pos:column="42">MAX_LANGUAGE_TAGS<pos:position pos:line="39" pos:column="59"/></name> <operator pos:line="39" pos:column="60">-<pos:position pos:line="39" pos:column="61"/></operator> <literal type="number" pos:line="39" pos:column="62">1<pos:position pos:line="39" pos:column="63"/></literal></expr>)<pos:position pos:line="39" pos:column="64"/></condition><then pos:line="39" pos:column="64"> <comment type="block" pos:line="39" pos:column="65">/* -1 for '*' */</comment>
				<block type="pseudo"><break pos:line="40" pos:column="33">break;<pos:position pos:line="40" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>
	}<pos:position pos:line="42" pos:column="10"/></block> while <condition pos:line="42" pos:column="17">(<expr><operator pos:line="42" pos:column="18">*<pos:position pos:line="42" pos:column="19"/></operator><name pos:line="42" pos:column="19">s<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">++<pos:position pos:line="42" pos:column="22"/></operator></expr>)<pos:position pos:line="42" pos:column="23"/></condition>;<pos:position pos:line="42" pos:column="24"/></do>

	<comment type="block" pos:line="44" pos:column="9">/* write Accept-Language header into buf */</comment>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">num_langs<pos:position pos:line="45" pos:column="22"/></name></expr>)<pos:position pos:line="45" pos:column="23"/></condition><then pos:line="45" pos:column="23"> <block pos:line="45" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">int<pos:position pos:line="46" pos:column="20"/></name></type> <name pos:line="46" pos:column="21">last_buf_len<pos:position pos:line="46" pos:column="33"/></name> <init pos:line="46" pos:column="34">= <expr><literal type="number" pos:line="46" pos:column="36">0<pos:position pos:line="46" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="46" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="47" pos:column="17">int<pos:position pos:line="47" pos:column="20"/></name></type> <name pos:line="47" pos:column="21">max_q<pos:position pos:line="47" pos:column="26"/></name></decl>;<pos:position pos:line="47" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="48" pos:column="17">int<pos:position pos:line="48" pos:column="20"/></name></type> <name pos:line="48" pos:column="21">decimal_places<pos:position pos:line="48" pos:column="35"/></name></decl>;<pos:position pos:line="48" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="49" pos:column="17">char<pos:position pos:line="49" pos:column="21"/></name></type> <name><name pos:line="49" pos:column="22">q_format<pos:position pos:line="49" pos:column="30"/></name><index pos:line="49" pos:column="30">[<expr><literal type="number" pos:line="49" pos:column="31">32<pos:position pos:line="49" pos:column="33"/></literal></expr>]<pos:position pos:line="49" pos:column="34"/></index></name></decl>;<pos:position pos:line="49" pos:column="35"/></decl_stmt>

		<comment type="block" pos:line="51" pos:column="17">/* add '*' */</comment>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">REALLOC_ARRAY<pos:position pos:line="52" pos:column="30"/></name><argument_list pos:line="52" pos:column="30">(<argument><expr><name pos:line="52" pos:column="31">language_tags<pos:position pos:line="52" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="46">num_langs<pos:position pos:line="52" pos:column="55"/></name> <operator pos:line="52" pos:column="56">+<pos:position pos:line="52" pos:column="57"/></operator> <literal type="number" pos:line="52" pos:column="58">1<pos:position pos:line="52" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="53" pos:column="17">language_tags<pos:position pos:line="53" pos:column="30"/></name><index pos:line="53" pos:column="30">[<expr><name pos:line="53" pos:column="31">num_langs<pos:position pos:line="53" pos:column="40"/></name><operator pos:line="53" pos:column="40">++<pos:position pos:line="53" pos:column="42"/></operator></expr>]<pos:position pos:line="53" pos:column="43"/></index></name> <operator pos:line="53" pos:column="44">=<pos:position pos:line="53" pos:column="45"/></operator> <literal type="string" pos:line="53" pos:column="46">"*"<pos:position pos:line="53" pos:column="49"/></literal></expr>;<pos:position pos:line="53" pos:column="50"/></expr_stmt> <comment type="block" pos:line="53" pos:column="51">/* it's OK; this won't be freed */</comment>

		<comment type="block" pos:line="55" pos:column="17">/* compute decimal_places */</comment>
		<for pos:line="56" pos:column="17">for <control pos:line="56" pos:column="21">(<init><expr><name pos:line="56" pos:column="22">max_q<pos:position pos:line="56" pos:column="27"/></name> <operator pos:line="56" pos:column="28">=<pos:position pos:line="56" pos:column="29"/></operator> <literal type="number" pos:line="56" pos:column="30">1<pos:position pos:line="56" pos:column="31"/></literal></expr><operator pos:line="56" pos:column="31">,<pos:position pos:line="56" pos:column="32"/></operator> <expr><name pos:line="56" pos:column="33">decimal_places<pos:position pos:line="56" pos:column="47"/></name> <operator pos:line="56" pos:column="48">=<pos:position pos:line="56" pos:column="49"/></operator> <literal type="number" pos:line="56" pos:column="50">0<pos:position pos:line="56" pos:column="51"/></literal></expr>;<pos:position pos:line="56" pos:column="52"/></init>
		     <condition><expr><name pos:line="57" pos:column="22">max_q<pos:position pos:line="57" pos:column="27"/></name> <operator pos:line="57" pos:column="28">&lt;<pos:position pos:line="57" pos:column="32"/></operator> <name pos:line="57" pos:column="30">num_langs<pos:position pos:line="57" pos:column="39"/></name> <operator pos:line="57" pos:column="40">&amp;&amp;<pos:position pos:line="57" pos:column="50"/></operator> <name pos:line="57" pos:column="43">decimal_places<pos:position pos:line="57" pos:column="57"/></name> <operator pos:line="57" pos:column="58">&lt;=<pos:position pos:line="57" pos:column="63"/></operator> <name pos:line="57" pos:column="61">MAX_DECIMAL_PLACES<pos:position pos:line="57" pos:column="79"/></name></expr>;<pos:position pos:line="57" pos:column="80"/></condition>
		     <incr><expr><name pos:line="58" pos:column="22">decimal_places<pos:position pos:line="58" pos:column="36"/></name><operator pos:line="58" pos:column="36">++<pos:position pos:line="58" pos:column="38"/></operator></expr><operator pos:line="58" pos:column="38">,<pos:position pos:line="58" pos:column="39"/></operator> <expr><name pos:line="58" pos:column="40">max_q<pos:position pos:line="58" pos:column="45"/></name> <operator pos:line="58" pos:column="46">*=<pos:position pos:line="58" pos:column="48"/></operator> <literal type="number" pos:line="58" pos:column="49">10<pos:position pos:line="58" pos:column="51"/></literal></expr></incr>)<pos:position pos:line="58" pos:column="52"/></control>
			<block type="pseudo"><empty_stmt pos:line="59" pos:column="25">;<pos:position pos:line="59" pos:column="26"/></empty_stmt></block></for>

		<expr_stmt><expr><call><name pos:line="61" pos:column="17">xsnprintf<pos:position pos:line="61" pos:column="26"/></name><argument_list pos:line="61" pos:column="26">(<argument><expr><name pos:line="61" pos:column="27">q_format<pos:position pos:line="61" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="37">sizeof<argument_list pos:line="61" pos:column="43">(<argument><expr><name pos:line="61" pos:column="44">q_format<pos:position pos:line="61" pos:column="52"/></name></expr></argument>)<pos:position pos:line="61" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="55">";q=0.%%0%dd"<pos:position pos:line="61" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="70">decimal_places<pos:position pos:line="61" pos:column="84"/></name></expr></argument>)<pos:position pos:line="61" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="86"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="63" pos:column="17">strbuf_addstr<pos:position pos:line="63" pos:column="30"/></name><argument_list pos:line="63" pos:column="30">(<argument><expr><name pos:line="63" pos:column="31">buf<pos:position pos:line="63" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="36">"Accept-Language: "<pos:position pos:line="63" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="57"/></expr_stmt>

		<for pos:line="65" pos:column="17">for <control pos:line="65" pos:column="21">(<init><expr><name pos:line="65" pos:column="22">i<pos:position pos:line="65" pos:column="23"/></name> <operator pos:line="65" pos:column="24">=<pos:position pos:line="65" pos:column="25"/></operator> <literal type="number" pos:line="65" pos:column="26">0<pos:position pos:line="65" pos:column="27"/></literal></expr>;<pos:position pos:line="65" pos:column="28"/></init> <condition><expr><name pos:line="65" pos:column="29">i<pos:position pos:line="65" pos:column="30"/></name> <operator pos:line="65" pos:column="31">&lt;<pos:position pos:line="65" pos:column="35"/></operator> <name pos:line="65" pos:column="33">num_langs<pos:position pos:line="65" pos:column="42"/></name></expr>;<pos:position pos:line="65" pos:column="43"/></condition> <incr><expr><name pos:line="65" pos:column="44">i<pos:position pos:line="65" pos:column="45"/></name><operator pos:line="65" pos:column="45">++<pos:position pos:line="65" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="65" pos:column="48"/></control> <block pos:line="65" pos:column="49">{
			<if pos:line="66" pos:column="25">if <condition pos:line="66" pos:column="28">(<expr><name pos:line="66" pos:column="29">i<pos:position pos:line="66" pos:column="30"/></name> <operator pos:line="66" pos:column="31">&gt;<pos:position pos:line="66" pos:column="35"/></operator> <literal type="number" pos:line="66" pos:column="33">0<pos:position pos:line="66" pos:column="34"/></literal></expr>)<pos:position pos:line="66" pos:column="35"/></condition><then pos:line="66" pos:column="35">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="33">strbuf_addstr<pos:position pos:line="67" pos:column="46"/></name><argument_list pos:line="67" pos:column="46">(<argument><expr><name pos:line="67" pos:column="47">buf<pos:position pos:line="67" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="52">", "<pos:position pos:line="67" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="58"/></expr_stmt></block></then></if>

			<expr_stmt><expr><call><name pos:line="69" pos:column="25">strbuf_addstr<pos:position pos:line="69" pos:column="38"/></name><argument_list pos:line="69" pos:column="38">(<argument><expr><name pos:line="69" pos:column="39">buf<pos:position pos:line="69" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="44">language_tags<pos:position pos:line="69" pos:column="57"/></name><index pos:line="69" pos:column="57">[<expr><name pos:line="69" pos:column="58">i<pos:position pos:line="69" pos:column="59"/></name></expr>]<pos:position pos:line="69" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="69" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="62"/></expr_stmt>

			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><name pos:line="71" pos:column="29">i<pos:position pos:line="71" pos:column="30"/></name> <operator pos:line="71" pos:column="31">&gt;<pos:position pos:line="71" pos:column="35"/></operator> <literal type="number" pos:line="71" pos:column="33">0<pos:position pos:line="71" pos:column="34"/></literal></expr>)<pos:position pos:line="71" pos:column="35"/></condition><then pos:line="71" pos:column="35">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="33">strbuf_addf<pos:position pos:line="72" pos:column="44"/></name><argument_list pos:line="72" pos:column="44">(<argument><expr><name pos:line="72" pos:column="45">buf<pos:position pos:line="72" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="50">q_format<pos:position pos:line="72" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="60">max_q<pos:position pos:line="72" pos:column="65"/></name> <operator pos:line="72" pos:column="66">-<pos:position pos:line="72" pos:column="67"/></operator> <name pos:line="72" pos:column="68">i<pos:position pos:line="72" pos:column="69"/></name></expr></argument>)<pos:position pos:line="72" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="71"/></expr_stmt></block></then></if>

			<if pos:line="74" pos:column="25">if <condition pos:line="74" pos:column="28">(<expr><name><name pos:line="74" pos:column="29">buf<pos:position pos:line="74" pos:column="32"/></name><operator pos:line="74" pos:column="32">-&gt;<pos:position pos:line="74" pos:column="37"/></operator><name pos:line="74" pos:column="34">len<pos:position pos:line="74" pos:column="37"/></name></name> <operator pos:line="74" pos:column="38">&gt;<pos:position pos:line="74" pos:column="42"/></operator> <name pos:line="74" pos:column="40">MAX_ACCEPT_LANGUAGE_HEADER_SIZE<pos:position pos:line="74" pos:column="71"/></name></expr>)<pos:position pos:line="74" pos:column="72"/></condition><then pos:line="74" pos:column="72"> <block pos:line="74" pos:column="73">{
				<expr_stmt><expr><call><name pos:line="75" pos:column="33">strbuf_remove<pos:position pos:line="75" pos:column="46"/></name><argument_list pos:line="75" pos:column="46">(<argument><expr><name pos:line="75" pos:column="47">buf<pos:position pos:line="75" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="52">last_buf_len<pos:position pos:line="75" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="66">buf<pos:position pos:line="75" pos:column="69"/></name><operator pos:line="75" pos:column="69">-&gt;<pos:position pos:line="75" pos:column="74"/></operator><name pos:line="75" pos:column="71">len<pos:position pos:line="75" pos:column="74"/></name></name> <operator pos:line="75" pos:column="75">-<pos:position pos:line="75" pos:column="76"/></operator> <name pos:line="75" pos:column="77">last_buf_len<pos:position pos:line="75" pos:column="89"/></name></expr></argument>)<pos:position pos:line="75" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="91"/></expr_stmt>
				<break pos:line="76" pos:column="33">break;<pos:position pos:line="76" pos:column="39"/></break>
			}<pos:position pos:line="77" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name pos:line="79" pos:column="25">last_buf_len<pos:position pos:line="79" pos:column="37"/></name> <operator pos:line="79" pos:column="38">=<pos:position pos:line="79" pos:column="39"/></operator> <name><name pos:line="79" pos:column="40">buf<pos:position pos:line="79" pos:column="43"/></name><operator pos:line="79" pos:column="43">-&gt;<pos:position pos:line="79" pos:column="48"/></operator><name pos:line="79" pos:column="45">len<pos:position pos:line="79" pos:column="48"/></name></name></expr>;<pos:position pos:line="79" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="80" pos:column="18"/></block></for>
	}<pos:position pos:line="81" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="83" pos:column="9">/* free language tags -- last one is a static '*' */</comment>
	<for pos:line="84" pos:column="9">for <control pos:line="84" pos:column="13">(<init><expr><name pos:line="84" pos:column="14">i<pos:position pos:line="84" pos:column="15"/></name> <operator pos:line="84" pos:column="16">=<pos:position pos:line="84" pos:column="17"/></operator> <literal type="number" pos:line="84" pos:column="18">0<pos:position pos:line="84" pos:column="19"/></literal></expr>;<pos:position pos:line="84" pos:column="20"/></init> <condition><expr><name pos:line="84" pos:column="21">i<pos:position pos:line="84" pos:column="22"/></name> <operator pos:line="84" pos:column="23">&lt;<pos:position pos:line="84" pos:column="27"/></operator> <name pos:line="84" pos:column="25">num_langs<pos:position pos:line="84" pos:column="34"/></name> <operator pos:line="84" pos:column="35">-<pos:position pos:line="84" pos:column="36"/></operator> <literal type="number" pos:line="84" pos:column="37">1<pos:position pos:line="84" pos:column="38"/></literal></expr>;<pos:position pos:line="84" pos:column="39"/></condition> <incr><expr><name pos:line="84" pos:column="40">i<pos:position pos:line="84" pos:column="41"/></name><operator pos:line="84" pos:column="41">++<pos:position pos:line="84" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="84" pos:column="44"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="17">free<pos:position pos:line="85" pos:column="21"/></name><argument_list pos:line="85" pos:column="21">(<argument><expr><name><name pos:line="85" pos:column="22">language_tags<pos:position pos:line="85" pos:column="35"/></name><index pos:line="85" pos:column="35">[<expr><name pos:line="85" pos:column="36">i<pos:position pos:line="85" pos:column="37"/></name></expr>]<pos:position pos:line="85" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="85" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="40"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="86" pos:column="9">free<pos:position pos:line="86" pos:column="13"/></name><argument_list pos:line="86" pos:column="13">(<argument><expr><name pos:line="86" pos:column="14">language_tags<pos:position pos:line="86" pos:column="27"/></name></expr></argument>)<pos:position pos:line="86" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="29"/></expr_stmt>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
