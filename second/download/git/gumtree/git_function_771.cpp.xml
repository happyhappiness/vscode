<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_771.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">real_path_internal<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">path<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">int<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">die_on_error<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">strbuf<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">sb<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><name pos:line="3" pos:column="35">STRBUF_INIT<pos:position pos:line="3" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">retval<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name pos:line="4" pos:column="24">NULL<pos:position pos:line="4" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * If we have to temporarily chdir(), store the original CWD
	 * here so that we can chdir() back to it at the end of the
	 * function:
	 */</comment>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">strbuf<pos:position pos:line="11" pos:column="22"/></name></name></type> <name pos:line="11" pos:column="23">cwd<pos:position pos:line="11" pos:column="26"/></name> <init pos:line="11" pos:column="27">= <expr><name pos:line="11" pos:column="29">STRBUF_INIT<pos:position pos:line="11" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="41"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">depth<pos:position pos:line="13" pos:column="18"/></name> <init pos:line="13" pos:column="19">= <expr><name pos:line="13" pos:column="21">MAXDEPTH<pos:position pos:line="13" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">last_elem<pos:position pos:line="14" pos:column="24"/></name> <init pos:line="14" pos:column="25">= <expr><name pos:line="14" pos:column="27">NULL<pos:position pos:line="14" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="15" pos:column="9">struct<pos:position pos:line="15" pos:column="15"/></name> <name pos:line="15" pos:column="16">stat<pos:position pos:line="15" pos:column="20"/></name></name></type> <name pos:line="15" pos:column="21">st<pos:position pos:line="15" pos:column="23"/></name></decl>;<pos:position pos:line="15" pos:column="24"/></decl_stmt>

	<comment type="block" pos:line="17" pos:column="9">/* We've already done it */</comment>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">path<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">==<pos:position pos:line="18" pos:column="20"/></operator> <name><name pos:line="18" pos:column="21">sb<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">.<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">buf<pos:position pos:line="18" pos:column="27"/></name></name></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">path<pos:position pos:line="19" pos:column="28"/></name></expr>;<pos:position pos:line="19" pos:column="29"/></return></block></then></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">!<pos:position pos:line="21" pos:column="14"/></operator><operator pos:line="21" pos:column="14">*<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">path<pos:position pos:line="21" pos:column="19"/></name></expr>)<pos:position pos:line="21" pos:column="20"/></condition><then pos:line="21" pos:column="20"> <block pos:line="21" pos:column="21">{
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">die_on_error<pos:position pos:line="22" pos:column="33"/></name></expr>)<pos:position pos:line="22" pos:column="34"/></condition><then pos:line="22" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">die<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><literal type="string" pos:line="23" pos:column="29">"The empty string is not a valid path"<pos:position pos:line="23" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="69"/></expr_stmt></block></then>
		<else pos:line="24" pos:column="17">else
			<block type="pseudo"><goto pos:line="25" pos:column="25">goto <name pos:line="25" pos:column="30">error_out<pos:position pos:line="25" pos:column="39"/></name>;<pos:position pos:line="25" pos:column="40"/></goto></block></else></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="28" pos:column="9">strbuf_reset<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><operator pos:line="28" pos:column="22">&amp;<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="23">sb<pos:position pos:line="28" pos:column="25"/></name></expr></argument>)<pos:position pos:line="28" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">strbuf_addstr<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><operator pos:line="29" pos:column="23">&amp;<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="24">sb<pos:position pos:line="29" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="28">path<pos:position pos:line="29" pos:column="32"/></name></expr></argument>)<pos:position pos:line="29" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt>

	<while pos:line="31" pos:column="9">while <condition pos:line="31" pos:column="15">(<expr><name pos:line="31" pos:column="16">depth<pos:position pos:line="31" pos:column="21"/></name><operator pos:line="31" pos:column="21">--<pos:position pos:line="31" pos:column="23"/></operator></expr>)<pos:position pos:line="31" pos:column="24"/></condition> <block pos:line="31" pos:column="25">{
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><operator pos:line="32" pos:column="21">!<pos:position pos:line="32" pos:column="22"/></operator><call><name pos:line="32" pos:column="22">is_directory<pos:position pos:line="32" pos:column="34"/></name><argument_list pos:line="32" pos:column="34">(<argument><expr><name><name pos:line="32" pos:column="35">sb<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">.<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="38">buf<pos:position pos:line="32" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="43"/></condition><then pos:line="32" pos:column="43"> <block pos:line="32" pos:column="44">{
			<decl_stmt><decl><type><name pos:line="33" pos:column="25">char<pos:position pos:line="33" pos:column="29"/></name> <modifier pos:line="33" pos:column="30">*<pos:position pos:line="33" pos:column="31"/></modifier></type><name pos:line="33" pos:column="31">last_slash<pos:position pos:line="33" pos:column="41"/></name> <init pos:line="33" pos:column="42">= <expr><call><name pos:line="33" pos:column="44">find_last_dir_sep<pos:position pos:line="33" pos:column="61"/></name><argument_list pos:line="33" pos:column="61">(<argument><expr><name><name pos:line="33" pos:column="62">sb<pos:position pos:line="33" pos:column="64"/></name><operator pos:line="33" pos:column="64">.<pos:position pos:line="33" pos:column="65"/></operator><name pos:line="33" pos:column="65">buf<pos:position pos:line="33" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="70"/></decl_stmt>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">last_slash<pos:position pos:line="34" pos:column="39"/></name></expr>)<pos:position pos:line="34" pos:column="40"/></condition><then pos:line="34" pos:column="40"> <block pos:line="34" pos:column="41">{
				<expr_stmt><expr><name pos:line="35" pos:column="33">last_elem<pos:position pos:line="35" pos:column="42"/></name> <operator pos:line="35" pos:column="43">=<pos:position pos:line="35" pos:column="44"/></operator> <call><name pos:line="35" pos:column="45">xstrdup<pos:position pos:line="35" pos:column="52"/></name><argument_list pos:line="35" pos:column="52">(<argument><expr><name pos:line="35" pos:column="53">last_slash<pos:position pos:line="35" pos:column="63"/></name> <operator pos:line="35" pos:column="64">+<pos:position pos:line="35" pos:column="65"/></operator> <literal type="number" pos:line="35" pos:column="66">1<pos:position pos:line="35" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="69"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="36" pos:column="33">strbuf_setlen<pos:position pos:line="36" pos:column="46"/></name><argument_list pos:line="36" pos:column="46">(<argument><expr><operator pos:line="36" pos:column="47">&amp;<pos:position pos:line="36" pos:column="52"/></operator><name pos:line="36" pos:column="48">sb<pos:position pos:line="36" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="52">last_slash<pos:position pos:line="36" pos:column="62"/></name> <operator pos:line="36" pos:column="63">-<pos:position pos:line="36" pos:column="64"/></operator> <name><name pos:line="36" pos:column="65">sb<pos:position pos:line="36" pos:column="67"/></name><operator pos:line="36" pos:column="67">.<pos:position pos:line="36" pos:column="68"/></operator><name pos:line="36" pos:column="68">buf<pos:position pos:line="36" pos:column="71"/></name></name> <operator pos:line="36" pos:column="72">+<pos:position pos:line="36" pos:column="73"/></operator> <literal type="number" pos:line="36" pos:column="74">1<pos:position pos:line="36" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="77"/></expr_stmt>
			}<pos:position pos:line="37" pos:column="26"/></block></then> <else pos:line="37" pos:column="27">else <block pos:line="37" pos:column="32">{
				<expr_stmt><expr><name pos:line="38" pos:column="33">last_elem<pos:position pos:line="38" pos:column="42"/></name> <operator pos:line="38" pos:column="43">=<pos:position pos:line="38" pos:column="44"/></operator> <call><name pos:line="38" pos:column="45">xmemdupz<pos:position pos:line="38" pos:column="53"/></name><argument_list pos:line="38" pos:column="53">(<argument><expr><name><name pos:line="38" pos:column="54">sb<pos:position pos:line="38" pos:column="56"/></name><operator pos:line="38" pos:column="56">.<pos:position pos:line="38" pos:column="57"/></operator><name pos:line="38" pos:column="57">buf<pos:position pos:line="38" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="62">sb<pos:position pos:line="38" pos:column="64"/></name><operator pos:line="38" pos:column="64">.<pos:position pos:line="38" pos:column="65"/></operator><name pos:line="38" pos:column="65">len<pos:position pos:line="38" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="39" pos:column="33">strbuf_reset<pos:position pos:line="39" pos:column="45"/></name><argument_list pos:line="39" pos:column="45">(<argument><expr><operator pos:line="39" pos:column="46">&amp;<pos:position pos:line="39" pos:column="51"/></operator><name pos:line="39" pos:column="47">sb<pos:position pos:line="39" pos:column="49"/></name></expr></argument>)<pos:position pos:line="39" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="51"/></expr_stmt>
			}<pos:position pos:line="40" pos:column="26"/></block></else></if>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name><name pos:line="43" pos:column="21">sb<pos:position pos:line="43" pos:column="23"/></name><operator pos:line="43" pos:column="23">.<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="24">len<pos:position pos:line="43" pos:column="27"/></name></name></expr>)<pos:position pos:line="43" pos:column="28"/></condition><then pos:line="43" pos:column="28"> <block pos:line="43" pos:column="29">{
			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><operator pos:line="44" pos:column="29">!<pos:position pos:line="44" pos:column="30"/></operator><name><name pos:line="44" pos:column="30">cwd<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">.<pos:position pos:line="44" pos:column="34"/></operator><name pos:line="44" pos:column="34">len<pos:position pos:line="44" pos:column="37"/></name></name> <operator pos:line="44" pos:column="38">&amp;&amp;<pos:position pos:line="44" pos:column="48"/></operator> <call><name pos:line="44" pos:column="41">strbuf_getcwd<pos:position pos:line="44" pos:column="54"/></name><argument_list pos:line="44" pos:column="54">(<argument><expr><operator pos:line="44" pos:column="55">&amp;<pos:position pos:line="44" pos:column="60"/></operator><name pos:line="44" pos:column="56">cwd<pos:position pos:line="44" pos:column="59"/></name></expr></argument>)<pos:position pos:line="44" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="61"/></condition><then pos:line="44" pos:column="61"> <block pos:line="44" pos:column="62">{
				<if pos:line="45" pos:column="33">if <condition pos:line="45" pos:column="36">(<expr><name pos:line="45" pos:column="37">die_on_error<pos:position pos:line="45" pos:column="49"/></name></expr>)<pos:position pos:line="45" pos:column="50"/></condition><then pos:line="45" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="41">die_errno<pos:position pos:line="46" pos:column="50"/></name><argument_list pos:line="46" pos:column="50">(<argument><expr><literal type="string" pos:line="46" pos:column="51">"Could not get current working directory"<pos:position pos:line="46" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="94"/></expr_stmt></block></then>
				<else pos:line="47" pos:column="33">else
					<block type="pseudo"><goto pos:line="48" pos:column="41">goto <name pos:line="48" pos:column="46">error_out<pos:position pos:line="48" pos:column="55"/></name>;<pos:position pos:line="48" pos:column="56"/></goto></block></else></if>
			}<pos:position pos:line="49" pos:column="26"/></block></then></if>

			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><call><name pos:line="51" pos:column="29">chdir<pos:position pos:line="51" pos:column="34"/></name><argument_list pos:line="51" pos:column="34">(<argument><expr><name><name pos:line="51" pos:column="35">sb<pos:position pos:line="51" pos:column="37"/></name><operator pos:line="51" pos:column="37">.<pos:position pos:line="51" pos:column="38"/></operator><name pos:line="51" pos:column="38">buf<pos:position pos:line="51" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="43"/></condition><then pos:line="51" pos:column="43"> <block pos:line="51" pos:column="44">{
				<if pos:line="52" pos:column="33">if <condition pos:line="52" pos:column="36">(<expr><name pos:line="52" pos:column="37">die_on_error<pos:position pos:line="52" pos:column="49"/></name></expr>)<pos:position pos:line="52" pos:column="50"/></condition><then pos:line="52" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="41">die_errno<pos:position pos:line="53" pos:column="50"/></name><argument_list pos:line="53" pos:column="50">(<argument><expr><literal type="string" pos:line="53" pos:column="51">"Could not switch to '%s'"<pos:position pos:line="53" pos:column="77"/></literal></expr></argument>,
						  <argument><expr><name><name pos:line="54" pos:column="51">sb<pos:position pos:line="54" pos:column="53"/></name><operator pos:line="54" pos:column="53">.<pos:position pos:line="54" pos:column="54"/></operator><name pos:line="54" pos:column="54">buf<pos:position pos:line="54" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="59"/></expr_stmt></block></then>
				<else pos:line="55" pos:column="33">else
					<block type="pseudo"><goto pos:line="56" pos:column="41">goto <name pos:line="56" pos:column="46">error_out<pos:position pos:line="56" pos:column="55"/></name>;<pos:position pos:line="56" pos:column="56"/></goto></block></else></if>
			}<pos:position pos:line="57" pos:column="26"/></block></then></if>
		}<pos:position pos:line="58" pos:column="18"/></block></then></if>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><call><name pos:line="59" pos:column="21">strbuf_getcwd<pos:position pos:line="59" pos:column="34"/></name><argument_list pos:line="59" pos:column="34">(<argument><expr><operator pos:line="59" pos:column="35">&amp;<pos:position pos:line="59" pos:column="40"/></operator><name pos:line="59" pos:column="36">sb<pos:position pos:line="59" pos:column="38"/></name></expr></argument>)<pos:position pos:line="59" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="40"/></condition><then pos:line="59" pos:column="40"> <block pos:line="59" pos:column="41">{
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><name pos:line="60" pos:column="29">die_on_error<pos:position pos:line="60" pos:column="41"/></name></expr>)<pos:position pos:line="60" pos:column="42"/></condition><then pos:line="60" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="33">die_errno<pos:position pos:line="61" pos:column="42"/></name><argument_list pos:line="61" pos:column="42">(<argument><expr><literal type="string" pos:line="61" pos:column="43">"Could not get current working directory"<pos:position pos:line="61" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="86"/></expr_stmt></block></then>
			<else pos:line="62" pos:column="25">else
				<block type="pseudo"><goto pos:line="63" pos:column="33">goto <name pos:line="63" pos:column="38">error_out<pos:position pos:line="63" pos:column="47"/></name>;<pos:position pos:line="63" pos:column="48"/></goto></block></else></if>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>

		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">last_elem<pos:position pos:line="66" pos:column="30"/></name></expr>)<pos:position pos:line="66" pos:column="31"/></condition><then pos:line="66" pos:column="31"> <block pos:line="66" pos:column="32">{
			<if pos:line="67" pos:column="25">if <condition pos:line="67" pos:column="28">(<expr><name><name pos:line="67" pos:column="29">sb<pos:position pos:line="67" pos:column="31"/></name><operator pos:line="67" pos:column="31">.<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="32">len<pos:position pos:line="67" pos:column="35"/></name></name> <operator pos:line="67" pos:column="36">&amp;&amp;<pos:position pos:line="67" pos:column="46"/></operator> <operator pos:line="67" pos:column="39">!<pos:position pos:line="67" pos:column="40"/></operator><call><name pos:line="67" pos:column="40">is_dir_sep<pos:position pos:line="67" pos:column="50"/></name><argument_list pos:line="67" pos:column="50">(<argument><expr><name><name pos:line="67" pos:column="51">sb<pos:position pos:line="67" pos:column="53"/></name><operator pos:line="67" pos:column="53">.<pos:position pos:line="67" pos:column="54"/></operator><name pos:line="67" pos:column="54">buf<pos:position pos:line="67" pos:column="57"/></name><index pos:line="67" pos:column="57">[<expr><name><name pos:line="67" pos:column="58">sb<pos:position pos:line="67" pos:column="60"/></name><operator pos:line="67" pos:column="60">.<pos:position pos:line="67" pos:column="61"/></operator><name pos:line="67" pos:column="61">len<pos:position pos:line="67" pos:column="64"/></name></name> <operator pos:line="67" pos:column="65">-<pos:position pos:line="67" pos:column="66"/></operator> <literal type="number" pos:line="67" pos:column="67">1<pos:position pos:line="67" pos:column="68"/></literal></expr>]<pos:position pos:line="67" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="67" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="71"/></condition><then pos:line="67" pos:column="71">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="33">strbuf_addch<pos:position pos:line="68" pos:column="45"/></name><argument_list pos:line="68" pos:column="45">(<argument><expr><operator pos:line="68" pos:column="46">&amp;<pos:position pos:line="68" pos:column="51"/></operator><name pos:line="68" pos:column="47">sb<pos:position pos:line="68" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="68" pos:column="51">'/'<pos:position pos:line="68" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="56"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="69" pos:column="25">strbuf_addstr<pos:position pos:line="69" pos:column="38"/></name><argument_list pos:line="69" pos:column="38">(<argument><expr><operator pos:line="69" pos:column="39">&amp;<pos:position pos:line="69" pos:column="44"/></operator><name pos:line="69" pos:column="40">sb<pos:position pos:line="69" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="44">last_elem<pos:position pos:line="69" pos:column="53"/></name></expr></argument>)<pos:position pos:line="69" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="70" pos:column="25">free<pos:position pos:line="70" pos:column="29"/></name><argument_list pos:line="70" pos:column="29">(<argument><expr><name pos:line="70" pos:column="30">last_elem<pos:position pos:line="70" pos:column="39"/></name></expr></argument>)<pos:position pos:line="70" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="71" pos:column="25">last_elem<pos:position pos:line="71" pos:column="34"/></name> <operator pos:line="71" pos:column="35">=<pos:position pos:line="71" pos:column="36"/></operator> <name pos:line="71" pos:column="37">NULL<pos:position pos:line="71" pos:column="41"/></name></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="72" pos:column="18"/></block></then></if>

		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><operator pos:line="74" pos:column="21">!<pos:position pos:line="74" pos:column="22"/></operator><call><name pos:line="74" pos:column="22">lstat<pos:position pos:line="74" pos:column="27"/></name><argument_list pos:line="74" pos:column="27">(<argument><expr><name><name pos:line="74" pos:column="28">sb<pos:position pos:line="74" pos:column="30"/></name><operator pos:line="74" pos:column="30">.<pos:position pos:line="74" pos:column="31"/></operator><name pos:line="74" pos:column="31">buf<pos:position pos:line="74" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="36">&amp;<pos:position pos:line="74" pos:column="41"/></operator><name pos:line="74" pos:column="37">st<pos:position pos:line="74" pos:column="39"/></name></expr></argument>)<pos:position pos:line="74" pos:column="40"/></argument_list></call> <operator pos:line="74" pos:column="41">&amp;&amp;<pos:position pos:line="74" pos:column="51"/></operator> <call><name pos:line="74" pos:column="44">S_ISLNK<pos:position pos:line="74" pos:column="51"/></name><argument_list pos:line="74" pos:column="51">(<argument><expr><name><name pos:line="74" pos:column="52">st<pos:position pos:line="74" pos:column="54"/></name><operator pos:line="74" pos:column="54">.<pos:position pos:line="74" pos:column="55"/></operator><name pos:line="74" pos:column="55">st_mode<pos:position pos:line="74" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="64"/></condition><then pos:line="74" pos:column="64"> <block pos:line="74" pos:column="65">{
			<decl_stmt><decl><type><name><name pos:line="75" pos:column="25">struct<pos:position pos:line="75" pos:column="31"/></name> <name pos:line="75" pos:column="32">strbuf<pos:position pos:line="75" pos:column="38"/></name></name></type> <name pos:line="75" pos:column="39">next_sb<pos:position pos:line="75" pos:column="46"/></name> <init pos:line="75" pos:column="47">= <expr><name pos:line="75" pos:column="49">STRBUF_INIT<pos:position pos:line="75" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="75" pos:column="61"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="76" pos:column="25">ssize_t<pos:position pos:line="76" pos:column="32"/></name></type> <name pos:line="76" pos:column="33">len<pos:position pos:line="76" pos:column="36"/></name> <init pos:line="76" pos:column="37">= <expr><call><name pos:line="76" pos:column="39">strbuf_readlink<pos:position pos:line="76" pos:column="54"/></name><argument_list pos:line="76" pos:column="54">(<argument><expr><operator pos:line="76" pos:column="55">&amp;<pos:position pos:line="76" pos:column="60"/></operator><name pos:line="76" pos:column="56">next_sb<pos:position pos:line="76" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="65">sb<pos:position pos:line="76" pos:column="67"/></name><operator pos:line="76" pos:column="67">.<pos:position pos:line="76" pos:column="68"/></operator><name pos:line="76" pos:column="68">buf<pos:position pos:line="76" pos:column="71"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="73">0<pos:position pos:line="76" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="76" pos:column="76"/></decl_stmt>
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><name pos:line="77" pos:column="29">len<pos:position pos:line="77" pos:column="32"/></name> <operator pos:line="77" pos:column="33">&lt;<pos:position pos:line="77" pos:column="37"/></operator> <literal type="number" pos:line="77" pos:column="35">0<pos:position pos:line="77" pos:column="36"/></literal></expr>)<pos:position pos:line="77" pos:column="37"/></condition><then pos:line="77" pos:column="37"> <block pos:line="77" pos:column="38">{
				<if pos:line="78" pos:column="33">if <condition pos:line="78" pos:column="36">(<expr><name pos:line="78" pos:column="37">die_on_error<pos:position pos:line="78" pos:column="49"/></name></expr>)<pos:position pos:line="78" pos:column="50"/></condition><then pos:line="78" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="41">die_errno<pos:position pos:line="79" pos:column="50"/></name><argument_list pos:line="79" pos:column="50">(<argument><expr><literal type="string" pos:line="79" pos:column="51">"Invalid symlink '%s'"<pos:position pos:line="79" pos:column="73"/></literal></expr></argument>,
						  <argument><expr><name><name pos:line="80" pos:column="51">sb<pos:position pos:line="80" pos:column="53"/></name><operator pos:line="80" pos:column="53">.<pos:position pos:line="80" pos:column="54"/></operator><name pos:line="80" pos:column="54">buf<pos:position pos:line="80" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="59"/></expr_stmt></block></then>
				<else pos:line="81" pos:column="33">else
					<block type="pseudo"><goto pos:line="82" pos:column="41">goto <name pos:line="82" pos:column="46">error_out<pos:position pos:line="82" pos:column="55"/></name>;<pos:position pos:line="82" pos:column="56"/></goto></block></else></if>
			}<pos:position pos:line="83" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="84" pos:column="25">strbuf_swap<pos:position pos:line="84" pos:column="36"/></name><argument_list pos:line="84" pos:column="36">(<argument><expr><operator pos:line="84" pos:column="37">&amp;<pos:position pos:line="84" pos:column="42"/></operator><name pos:line="84" pos:column="38">sb<pos:position pos:line="84" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="42">&amp;<pos:position pos:line="84" pos:column="47"/></operator><name pos:line="84" pos:column="43">next_sb<pos:position pos:line="84" pos:column="50"/></name></expr></argument>)<pos:position pos:line="84" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="85" pos:column="25">strbuf_release<pos:position pos:line="85" pos:column="39"/></name><argument_list pos:line="85" pos:column="39">(<argument><expr><operator pos:line="85" pos:column="40">&amp;<pos:position pos:line="85" pos:column="45"/></operator><name pos:line="85" pos:column="41">next_sb<pos:position pos:line="85" pos:column="48"/></name></expr></argument>)<pos:position pos:line="85" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="86" pos:column="18"/></block></then> <else pos:line="86" pos:column="19">else
			<block type="pseudo"><break pos:line="87" pos:column="25">break;<pos:position pos:line="87" pos:column="31"/></break></block></else></if>
	}<pos:position pos:line="88" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="90" pos:column="9">retval<pos:position pos:line="90" pos:column="15"/></name> <operator pos:line="90" pos:column="16">=<pos:position pos:line="90" pos:column="17"/></operator> <name><name pos:line="90" pos:column="18">sb<pos:position pos:line="90" pos:column="20"/></name><operator pos:line="90" pos:column="20">.<pos:position pos:line="90" pos:column="21"/></operator><name pos:line="90" pos:column="21">buf<pos:position pos:line="90" pos:column="24"/></name></name></expr>;<pos:position pos:line="90" pos:column="25"/></expr_stmt>
<label><name pos:line="91" pos:column="1">error_out<pos:position pos:line="91" pos:column="10"/></name>:<pos:position pos:line="91" pos:column="11"/></label>
	<expr_stmt><expr><call><name pos:line="92" pos:column="9">free<pos:position pos:line="92" pos:column="13"/></name><argument_list pos:line="92" pos:column="13">(<argument><expr><name pos:line="92" pos:column="14">last_elem<pos:position pos:line="92" pos:column="23"/></name></expr></argument>)<pos:position pos:line="92" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="25"/></expr_stmt>
	<if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><name><name pos:line="93" pos:column="13">cwd<pos:position pos:line="93" pos:column="16"/></name><operator pos:line="93" pos:column="16">.<pos:position pos:line="93" pos:column="17"/></operator><name pos:line="93" pos:column="17">len<pos:position pos:line="93" pos:column="20"/></name></name> <operator pos:line="93" pos:column="21">&amp;&amp;<pos:position pos:line="93" pos:column="31"/></operator> <call><name pos:line="93" pos:column="24">chdir<pos:position pos:line="93" pos:column="29"/></name><argument_list pos:line="93" pos:column="29">(<argument><expr><name><name pos:line="93" pos:column="30">cwd<pos:position pos:line="93" pos:column="33"/></name><operator pos:line="93" pos:column="33">.<pos:position pos:line="93" pos:column="34"/></operator><name pos:line="93" pos:column="34">buf<pos:position pos:line="93" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="39"/></condition><then pos:line="93" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="94" pos:column="17">die_errno<pos:position pos:line="94" pos:column="26"/></name><argument_list pos:line="94" pos:column="26">(<argument><expr><literal type="string" pos:line="94" pos:column="27">"Could not change back to '%s'"<pos:position pos:line="94" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="60">cwd<pos:position pos:line="94" pos:column="63"/></name><operator pos:line="94" pos:column="63">.<pos:position pos:line="94" pos:column="64"/></operator><name pos:line="94" pos:column="64">buf<pos:position pos:line="94" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="69"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="95" pos:column="9">strbuf_release<pos:position pos:line="95" pos:column="23"/></name><argument_list pos:line="95" pos:column="23">(<argument><expr><operator pos:line="95" pos:column="24">&amp;<pos:position pos:line="95" pos:column="29"/></operator><name pos:line="95" pos:column="25">cwd<pos:position pos:line="95" pos:column="28"/></name></expr></argument>)<pos:position pos:line="95" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="30"/></expr_stmt>

	<return pos:line="97" pos:column="9">return <expr><name pos:line="97" pos:column="16">retval<pos:position pos:line="97" pos:column="22"/></name></expr>;<pos:position pos:line="97" pos:column="23"/></return>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
