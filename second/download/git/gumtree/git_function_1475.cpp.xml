<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1475.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">absolute_path<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">path<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name></type> <name><name pos:line="3" pos:column="21">buf<pos:position pos:line="3" pos:column="24"/></name><index pos:line="3" pos:column="24">[<expr><name pos:line="3" pos:column="25">PATH_MAX<pos:position pos:line="3" pos:column="33"/></name> <operator pos:line="3" pos:column="34">+<pos:position pos:line="3" pos:column="35"/></operator> <literal type="number" pos:line="3" pos:column="36">1<pos:position pos:line="3" pos:column="37"/></literal></expr>]<pos:position pos:line="3" pos:column="38"/></index></name></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><operator pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="15">path<pos:position pos:line="5" pos:column="19"/></name></expr>)<pos:position pos:line="5" pos:column="20"/></condition><then pos:line="5" pos:column="20"> <block pos:line="5" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">die<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><literal type="string" pos:line="6" pos:column="21">"The empty string is not a valid path"<pos:position pos:line="6" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="7" pos:column="10"/></block></then> <elseif pos:line="7" pos:column="11">else <if pos:line="7" pos:column="16">if <condition pos:line="7" pos:column="19">(<expr><call><name pos:line="7" pos:column="20">is_absolute_path<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">path<pos:position pos:line="7" pos:column="41"/></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43"> <block pos:line="7" pos:column="44">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><call><name pos:line="8" pos:column="21">strlcpy<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">buf<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="34">path<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">PATH_MAX<pos:position pos:line="8" pos:column="48"/></name></expr></argument>)<pos:position pos:line="8" pos:column="49"/></argument_list></call> <operator pos:line="8" pos:column="50">&gt;=<pos:position pos:line="8" pos:column="55"/></operator> <name pos:line="8" pos:column="53">PATH_MAX<pos:position pos:line="8" pos:column="61"/></name></expr>)<pos:position pos:line="8" pos:column="62"/></condition><then pos:line="8" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="25">die<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><literal type="string" pos:line="9" pos:column="29">"Too long path: %.*s"<pos:position pos:line="9" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="52">60<pos:position pos:line="9" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="56">path<pos:position pos:line="9" pos:column="60"/></name></expr></argument>)<pos:position pos:line="9" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="62"/></expr_stmt></block></then></if>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if></elseif> <else pos:line="10" pos:column="11">else <block pos:line="10" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">size_t<pos:position pos:line="11" pos:column="23"/></name></type> <name pos:line="11" pos:column="24">len<pos:position pos:line="11" pos:column="27"/></name></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="12" pos:column="17">const<pos:position pos:line="12" pos:column="22"/></specifier> <name pos:line="12" pos:column="23">char<pos:position pos:line="12" pos:column="27"/></name> <modifier pos:line="12" pos:column="28">*<pos:position pos:line="12" pos:column="29"/></modifier></type><name pos:line="12" pos:column="29">fmt<pos:position pos:line="12" pos:column="32"/></name></decl>;<pos:position pos:line="12" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="13" pos:column="17">const<pos:position pos:line="13" pos:column="22"/></specifier> <name pos:line="13" pos:column="23">char<pos:position pos:line="13" pos:column="27"/></name> <modifier pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></modifier></type><name pos:line="13" pos:column="29">cwd<pos:position pos:line="13" pos:column="32"/></name> <init pos:line="13" pos:column="33">= <expr><call><name pos:line="13" pos:column="35">get_pwd_cwd<pos:position pos:line="13" pos:column="46"/></name><argument_list pos:line="13" pos:column="46">()<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="49"/></decl_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><operator pos:line="14" pos:column="21">!<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">cwd<pos:position pos:line="14" pos:column="25"/></name></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="25">die_errno<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><literal type="string" pos:line="15" pos:column="35">"Cannot determine the current working directory"<pos:position pos:line="15" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="85"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="16" pos:column="17">len<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <call><name pos:line="16" pos:column="23">strlen<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">cwd<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="17" pos:column="17">fmt<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <ternary><condition><expr><operator pos:line="17" pos:column="23">(<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">len<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">&gt;<pos:position pos:line="17" pos:column="32"/></operator> <literal type="number" pos:line="17" pos:column="30">0<pos:position pos:line="17" pos:column="31"/></literal> <operator pos:line="17" pos:column="32">&amp;&amp;<pos:position pos:line="17" pos:column="42"/></operator> <call><name pos:line="17" pos:column="35">is_dir_sep<pos:position pos:line="17" pos:column="45"/></name><argument_list pos:line="17" pos:column="45">(<argument><expr><name><name pos:line="17" pos:column="46">cwd<pos:position pos:line="17" pos:column="49"/></name><index pos:line="17" pos:column="49">[<expr><name pos:line="17" pos:column="50">len<pos:position pos:line="17" pos:column="53"/></name> <operator pos:line="17" pos:column="54">-<pos:position pos:line="17" pos:column="55"/></operator> <literal type="number" pos:line="17" pos:column="56">1<pos:position pos:line="17" pos:column="57"/></literal></expr>]<pos:position pos:line="17" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call><operator pos:line="17" pos:column="59">)<pos:position pos:line="17" pos:column="60"/></operator></expr> ?<pos:position pos:line="17" pos:column="62"/></condition><then pos:line="17" pos:column="62"> <expr><literal type="string" pos:line="17" pos:column="63">"%s%s"<pos:position pos:line="17" pos:column="69"/></literal></expr> <pos:position pos:line="17" pos:column="70"/></then><else pos:line="17" pos:column="70">: <expr><literal type="string" pos:line="17" pos:column="72">"%s/%s"<pos:position pos:line="17" pos:column="79"/></literal></expr></else></ternary></expr>;<pos:position pos:line="17" pos:column="80"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><call><name pos:line="18" pos:column="21">snprintf<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">buf<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">PATH_MAX<pos:position pos:line="18" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="45">fmt<pos:position pos:line="18" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="50">cwd<pos:position pos:line="18" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="55">path<pos:position pos:line="18" pos:column="59"/></name></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call> <operator pos:line="18" pos:column="61">&gt;=<pos:position pos:line="18" pos:column="66"/></operator> <name pos:line="18" pos:column="64">PATH_MAX<pos:position pos:line="18" pos:column="72"/></name></expr>)<pos:position pos:line="18" pos:column="73"/></condition><then pos:line="18" pos:column="73">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="25">die<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><literal type="string" pos:line="19" pos:column="29">"Too long path: %.*s"<pos:position pos:line="19" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="52">60<pos:position pos:line="19" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="56">path<pos:position pos:line="19" pos:column="60"/></name></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="62"/></expr_stmt></block></then></if>
	}<pos:position pos:line="20" pos:column="10"/></block></else></if>
	<return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">buf<pos:position pos:line="21" pos:column="19"/></name></expr>;<pos:position pos:line="21" pos:column="20"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
