<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5433_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_mail<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">am_state<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">state<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">mail<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">FILE<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">fp<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">sb<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">STRBUF_INIT<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">msg<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">STRBUF_INIT<pos:position pos:line="5" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">author_name<pos:position pos:line="6" pos:column="34"/></name> <init pos:line="6" pos:column="35">= <expr><name pos:line="6" pos:column="37">STRBUF_INIT<pos:position pos:line="6" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">author_date<pos:position pos:line="7" pos:column="34"/></name> <init pos:line="7" pos:column="35">= <expr><name pos:line="7" pos:column="37">STRBUF_INIT<pos:position pos:line="7" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">author_email<pos:position pos:line="8" pos:column="35"/></name> <init pos:line="8" pos:column="36">= <expr><name pos:line="8" pos:column="38">STRBUF_INIT<pos:position pos:line="8" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">ret<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">mailinfo<pos:position pos:line="10" pos:column="24"/></name></name></type> <name pos:line="10" pos:column="25">mi<pos:position pos:line="10" pos:column="27"/></name></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">setup_mailinfo<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><operator pos:line="12" pos:column="24">&amp;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="25">mi<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">state<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">utf8<pos:position pos:line="14" pos:column="24"/></name></name></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="17">mi<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">.<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">metainfo_charset<pos:position pos:line="15" pos:column="36"/></name></name> <operator pos:line="15" pos:column="37">=<pos:position pos:line="15" pos:column="38"/></operator> <call><name pos:line="15" pos:column="39">get_commit_output_encoding<pos:position pos:line="15" pos:column="65"/></name><argument_list pos:line="15" pos:column="65">()<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="68"/></expr_stmt></block></then>
	<else pos:line="16" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="17" pos:column="17">mi<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">metainfo_charset<pos:position pos:line="17" pos:column="36"/></name></name> <operator pos:line="17" pos:column="37">=<pos:position pos:line="17" pos:column="38"/></operator> <name pos:line="17" pos:column="39">NULL<pos:position pos:line="17" pos:column="43"/></name></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt></block></else></if>

	<switch pos:line="19" pos:column="9">switch <condition pos:line="19" pos:column="16">(<expr><name><name pos:line="19" pos:column="17">state<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">-&gt;<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="24">keep<pos:position pos:line="19" pos:column="28"/></name></name></expr>)<pos:position pos:line="19" pos:column="29"/></condition> <block pos:line="19" pos:column="30">{
	<case pos:line="20" pos:column="9">case <expr><name pos:line="20" pos:column="14">KEEP_FALSE<pos:position pos:line="20" pos:column="24"/></name></expr>:<pos:position pos:line="20" pos:column="25"/></case>
		<break pos:line="21" pos:column="17">break;<pos:position pos:line="21" pos:column="23"/></break>
	<case pos:line="22" pos:column="9">case <expr><name pos:line="22" pos:column="14">KEEP_TRUE<pos:position pos:line="22" pos:column="23"/></name></expr>:<pos:position pos:line="22" pos:column="24"/></case>
		<expr_stmt><expr><name><name pos:line="23" pos:column="17">mi<pos:position pos:line="23" pos:column="19"/></name><operator pos:line="23" pos:column="19">.<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="20">keep_subject<pos:position pos:line="23" pos:column="32"/></name></name> <operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator> <literal type="number" pos:line="23" pos:column="35">1<pos:position pos:line="23" pos:column="36"/></literal></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
		<break pos:line="24" pos:column="17">break;<pos:position pos:line="24" pos:column="23"/></break>
	<case pos:line="25" pos:column="9">case <expr><name pos:line="25" pos:column="14">KEEP_NON_PATCH<pos:position pos:line="25" pos:column="28"/></name></expr>:<pos:position pos:line="25" pos:column="29"/></case>
		<expr_stmt><expr><name><name pos:line="26" pos:column="17">mi<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">.<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">keep_non_patch_brackets_in_subject<pos:position pos:line="26" pos:column="54"/></name></name> <operator pos:line="26" pos:column="55">=<pos:position pos:line="26" pos:column="56"/></operator> <literal type="number" pos:line="26" pos:column="57">1<pos:position pos:line="26" pos:column="58"/></literal></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
		<break pos:line="27" pos:column="17">break;<pos:position pos:line="27" pos:column="23"/></break>
	<default pos:line="28" pos:column="9">default:<pos:position pos:line="28" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">die<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><literal type="string" pos:line="29" pos:column="21">"BUG: invalid value for state-&gt;keep"<pos:position pos:line="29" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></switch>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name><name pos:line="32" pos:column="13">state<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">-&gt;<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="20">message_id<pos:position pos:line="32" pos:column="30"/></name></name></expr>)<pos:position pos:line="32" pos:column="31"/></condition><then pos:line="32" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="17">mi<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">.<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">add_message_id<pos:position pos:line="33" pos:column="34"/></name></name> <operator pos:line="33" pos:column="35">=<pos:position pos:line="33" pos:column="36"/></operator> <literal type="number" pos:line="33" pos:column="37">1<pos:position pos:line="33" pos:column="38"/></literal></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt></block></then></if>

	<switch pos:line="35" pos:column="9">switch <condition pos:line="35" pos:column="16">(<expr><name><name pos:line="35" pos:column="17">state<pos:position pos:line="35" pos:column="22"/></name><operator pos:line="35" pos:column="22">-&gt;<pos:position pos:line="35" pos:column="27"/></operator><name pos:line="35" pos:column="24">scissors<pos:position pos:line="35" pos:column="32"/></name></name></expr>)<pos:position pos:line="35" pos:column="33"/></condition> <block pos:line="35" pos:column="34">{
	<case pos:line="36" pos:column="9">case <expr><name pos:line="36" pos:column="14">SCISSORS_UNSET<pos:position pos:line="36" pos:column="28"/></name></expr>:<pos:position pos:line="36" pos:column="29"/></case>
		<break pos:line="37" pos:column="17">break;<pos:position pos:line="37" pos:column="23"/></break>
	<case pos:line="38" pos:column="9">case <expr><name pos:line="38" pos:column="14">SCISSORS_FALSE<pos:position pos:line="38" pos:column="28"/></name></expr>:<pos:position pos:line="38" pos:column="29"/></case>
		<expr_stmt><expr><name><name pos:line="39" pos:column="17">mi<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">.<pos:position pos:line="39" pos:column="20"/></operator><name pos:line="39" pos:column="20">use_scissors<pos:position pos:line="39" pos:column="32"/></name></name> <operator pos:line="39" pos:column="33">=<pos:position pos:line="39" pos:column="34"/></operator> <literal type="number" pos:line="39" pos:column="35">0<pos:position pos:line="39" pos:column="36"/></literal></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
		<break pos:line="40" pos:column="17">break;<pos:position pos:line="40" pos:column="23"/></break>
	<case pos:line="41" pos:column="9">case <expr><name pos:line="41" pos:column="14">SCISSORS_TRUE<pos:position pos:line="41" pos:column="27"/></name></expr>:<pos:position pos:line="41" pos:column="28"/></case>
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">mi<pos:position pos:line="42" pos:column="19"/></name><operator pos:line="42" pos:column="19">.<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="20">use_scissors<pos:position pos:line="42" pos:column="32"/></name></name> <operator pos:line="42" pos:column="33">=<pos:position pos:line="42" pos:column="34"/></operator> <literal type="number" pos:line="42" pos:column="35">1<pos:position pos:line="42" pos:column="36"/></literal></expr>;<pos:position pos:line="42" pos:column="37"/></expr_stmt>
		<break pos:line="43" pos:column="17">break;<pos:position pos:line="43" pos:column="23"/></break>
	<default pos:line="44" pos:column="9">default:<pos:position pos:line="44" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">die<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><literal type="string" pos:line="45" pos:column="21">"BUG: invalid value for state-&gt;scissors"<pos:position pos:line="45" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></switch>

	<expr_stmt><expr><name><name pos:line="48" pos:column="9">mi<pos:position pos:line="48" pos:column="11"/></name><operator pos:line="48" pos:column="11">.<pos:position pos:line="48" pos:column="12"/></operator><name pos:line="48" pos:column="12">input<pos:position pos:line="48" pos:column="17"/></name></name> <operator pos:line="48" pos:column="18">=<pos:position pos:line="48" pos:column="19"/></operator> <call><name pos:line="48" pos:column="20">xfopen<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">(<argument><expr><name pos:line="48" pos:column="27">mail<pos:position pos:line="48" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="33">"r"<pos:position pos:line="48" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="49" pos:column="9">mi<pos:position pos:line="49" pos:column="11"/></name><operator pos:line="49" pos:column="11">.<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="12">output<pos:position pos:line="49" pos:column="18"/></name></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <call><name pos:line="49" pos:column="21">xfopen<pos:position pos:line="49" pos:column="27"/></name><argument_list pos:line="49" pos:column="27">(<argument><expr><call><name pos:line="49" pos:column="28">am_path<pos:position pos:line="49" pos:column="35"/></name><argument_list pos:line="49" pos:column="35">(<argument><expr><name pos:line="49" pos:column="36">state<pos:position pos:line="49" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="43">"info"<pos:position pos:line="49" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="52">"w"<pos:position pos:line="49" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="57"/></expr_stmt>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><call><name pos:line="50" pos:column="13">mailinfo<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><operator pos:line="50" pos:column="22">&amp;<pos:position pos:line="50" pos:column="27"/></operator><name pos:line="50" pos:column="23">mi<pos:position pos:line="50" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="27">am_path<pos:position pos:line="50" pos:column="34"/></name><argument_list pos:line="50" pos:column="34">(<argument><expr><name pos:line="50" pos:column="35">state<pos:position pos:line="50" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="42">"msg"<pos:position pos:line="50" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="50">am_path<pos:position pos:line="50" pos:column="57"/></name><argument_list pos:line="50" pos:column="57">(<argument><expr><name pos:line="50" pos:column="58">state<pos:position pos:line="50" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="65">"patch"<pos:position pos:line="50" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="75"/></condition><then pos:line="50" pos:column="75">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="17">die<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><literal type="string" pos:line="51" pos:column="21">"could not parse patch"<pos:position pos:line="51" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="46"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="53" pos:column="9">fclose<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><name><name pos:line="53" pos:column="16">mi<pos:position pos:line="53" pos:column="18"/></name><operator pos:line="53" pos:column="18">.<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="19">input<pos:position pos:line="53" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="54" pos:column="9">fclose<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><name><name pos:line="54" pos:column="16">mi<pos:position pos:line="54" pos:column="18"/></name><operator pos:line="54" pos:column="18">.<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="19">output<pos:position pos:line="54" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="56" pos:column="9">/* Extract message and author information */</comment>
	<expr_stmt><expr><name pos:line="57" pos:column="9">fp<pos:position pos:line="57" pos:column="11"/></name> <operator pos:line="57" pos:column="12">=<pos:position pos:line="57" pos:column="13"/></operator> <call><name pos:line="57" pos:column="14">xfopen<pos:position pos:line="57" pos:column="20"/></name><argument_list pos:line="57" pos:column="20">(<argument><expr><call><name pos:line="57" pos:column="21">am_path<pos:position pos:line="57" pos:column="28"/></name><argument_list pos:line="57" pos:column="28">(<argument><expr><name pos:line="57" pos:column="29">state<pos:position pos:line="57" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="36">"info"<pos:position pos:line="57" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="45">"r"<pos:position pos:line="57" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="50"/></expr_stmt>
	<while pos:line="58" pos:column="9">while <condition pos:line="58" pos:column="15">(<expr><operator pos:line="58" pos:column="16">!<pos:position pos:line="58" pos:column="17"/></operator><call><name pos:line="58" pos:column="17">strbuf_getline_lf<pos:position pos:line="58" pos:column="34"/></name><argument_list pos:line="58" pos:column="34">(<argument><expr><operator pos:line="58" pos:column="35">&amp;<pos:position pos:line="58" pos:column="40"/></operator><name pos:line="58" pos:column="36">sb<pos:position pos:line="58" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="40">fp<pos:position pos:line="58" pos:column="42"/></name></expr></argument>)<pos:position pos:line="58" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="44"/></condition> <block pos:line="58" pos:column="45">{
		<decl_stmt><decl><type><specifier pos:line="59" pos:column="17">const<pos:position pos:line="59" pos:column="22"/></specifier> <name pos:line="59" pos:column="23">char<pos:position pos:line="59" pos:column="27"/></name> <modifier pos:line="59" pos:column="28">*<pos:position pos:line="59" pos:column="29"/></modifier></type><name pos:line="59" pos:column="29">x<pos:position pos:line="59" pos:column="30"/></name></decl>;<pos:position pos:line="59" pos:column="31"/></decl_stmt>

		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><call><name pos:line="61" pos:column="21">skip_prefix<pos:position pos:line="61" pos:column="32"/></name><argument_list pos:line="61" pos:column="32">(<argument><expr><name><name pos:line="61" pos:column="33">sb<pos:position pos:line="61" pos:column="35"/></name><operator pos:line="61" pos:column="35">.<pos:position pos:line="61" pos:column="36"/></operator><name pos:line="61" pos:column="36">buf<pos:position pos:line="61" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="41">"Subject: "<pos:position pos:line="61" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="61" pos:column="54">&amp;<pos:position pos:line="61" pos:column="59"/></operator><name pos:line="61" pos:column="55">x<pos:position pos:line="61" pos:column="56"/></name></expr></argument>)<pos:position pos:line="61" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="58"/></condition><then pos:line="61" pos:column="58"> <block pos:line="61" pos:column="59">{
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name><name pos:line="62" pos:column="29">msg<pos:position pos:line="62" pos:column="32"/></name><operator pos:line="62" pos:column="32">.<pos:position pos:line="62" pos:column="33"/></operator><name pos:line="62" pos:column="33">len<pos:position pos:line="62" pos:column="36"/></name></name></expr>)<pos:position pos:line="62" pos:column="37"/></condition><then pos:line="62" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="33">strbuf_addch<pos:position pos:line="63" pos:column="45"/></name><argument_list pos:line="63" pos:column="45">(<argument><expr><operator pos:line="63" pos:column="46">&amp;<pos:position pos:line="63" pos:column="51"/></operator><name pos:line="63" pos:column="47">msg<pos:position pos:line="63" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="63" pos:column="52">'\n'<pos:position pos:line="63" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="58"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">strbuf_addstr<pos:position pos:line="64" pos:column="38"/></name><argument_list pos:line="64" pos:column="38">(<argument><expr><operator pos:line="64" pos:column="39">&amp;<pos:position pos:line="64" pos:column="44"/></operator><name pos:line="64" pos:column="40">msg<pos:position pos:line="64" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="45">x<pos:position pos:line="64" pos:column="46"/></name></expr></argument>)<pos:position pos:line="64" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="65" pos:column="18"/></block></then> <elseif pos:line="65" pos:column="19">else <if pos:line="65" pos:column="24">if <condition pos:line="65" pos:column="27">(<expr><call><name pos:line="65" pos:column="28">skip_prefix<pos:position pos:line="65" pos:column="39"/></name><argument_list pos:line="65" pos:column="39">(<argument><expr><name><name pos:line="65" pos:column="40">sb<pos:position pos:line="65" pos:column="42"/></name><operator pos:line="65" pos:column="42">.<pos:position pos:line="65" pos:column="43"/></operator><name pos:line="65" pos:column="43">buf<pos:position pos:line="65" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="48">"Author: "<pos:position pos:line="65" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="65" pos:column="60">&amp;<pos:position pos:line="65" pos:column="65"/></operator><name pos:line="65" pos:column="61">x<pos:position pos:line="65" pos:column="62"/></name></expr></argument>)<pos:position pos:line="65" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="64"/></condition><then pos:line="65" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="25">strbuf_addstr<pos:position pos:line="66" pos:column="38"/></name><argument_list pos:line="66" pos:column="38">(<argument><expr><operator pos:line="66" pos:column="39">&amp;<pos:position pos:line="66" pos:column="44"/></operator><name pos:line="66" pos:column="40">author_name<pos:position pos:line="66" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="53">x<pos:position pos:line="66" pos:column="54"/></name></expr></argument>)<pos:position pos:line="66" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="56"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="67" pos:column="17">else <if pos:line="67" pos:column="22">if <condition pos:line="67" pos:column="25">(<expr><call><name pos:line="67" pos:column="26">skip_prefix<pos:position pos:line="67" pos:column="37"/></name><argument_list pos:line="67" pos:column="37">(<argument><expr><name><name pos:line="67" pos:column="38">sb<pos:position pos:line="67" pos:column="40"/></name><operator pos:line="67" pos:column="40">.<pos:position pos:line="67" pos:column="41"/></operator><name pos:line="67" pos:column="41">buf<pos:position pos:line="67" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="46">"Email: "<pos:position pos:line="67" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="67" pos:column="57">&amp;<pos:position pos:line="67" pos:column="62"/></operator><name pos:line="67" pos:column="58">x<pos:position pos:line="67" pos:column="59"/></name></expr></argument>)<pos:position pos:line="67" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="61"/></condition><then pos:line="67" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="25">strbuf_addstr<pos:position pos:line="68" pos:column="38"/></name><argument_list pos:line="68" pos:column="38">(<argument><expr><operator pos:line="68" pos:column="39">&amp;<pos:position pos:line="68" pos:column="44"/></operator><name pos:line="68" pos:column="40">author_email<pos:position pos:line="68" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="54">x<pos:position pos:line="68" pos:column="55"/></name></expr></argument>)<pos:position pos:line="68" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="57"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="69" pos:column="17">else <if pos:line="69" pos:column="22">if <condition pos:line="69" pos:column="25">(<expr><call><name pos:line="69" pos:column="26">skip_prefix<pos:position pos:line="69" pos:column="37"/></name><argument_list pos:line="69" pos:column="37">(<argument><expr><name><name pos:line="69" pos:column="38">sb<pos:position pos:line="69" pos:column="40"/></name><operator pos:line="69" pos:column="40">.<pos:position pos:line="69" pos:column="41"/></operator><name pos:line="69" pos:column="41">buf<pos:position pos:line="69" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="46">"Date: "<pos:position pos:line="69" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="69" pos:column="56">&amp;<pos:position pos:line="69" pos:column="61"/></operator><name pos:line="69" pos:column="57">x<pos:position pos:line="69" pos:column="58"/></name></expr></argument>)<pos:position pos:line="69" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="60"/></condition><then pos:line="69" pos:column="60">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="25">strbuf_addstr<pos:position pos:line="70" pos:column="38"/></name><argument_list pos:line="70" pos:column="38">(<argument><expr><operator pos:line="70" pos:column="39">&amp;<pos:position pos:line="70" pos:column="44"/></operator><name pos:line="70" pos:column="40">author_date<pos:position pos:line="70" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="53">x<pos:position pos:line="70" pos:column="54"/></name></expr></argument>)<pos:position pos:line="70" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="56"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="71" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="72" pos:column="9">fclose<pos:position pos:line="72" pos:column="15"/></name><argument_list pos:line="72" pos:column="15">(<argument><expr><name pos:line="72" pos:column="16">fp<pos:position pos:line="72" pos:column="18"/></name></expr></argument>)<pos:position pos:line="72" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="20"/></expr_stmt>

	<comment type="block" pos:line="74" pos:column="9">/* Skip pine's internal folder data */</comment>
	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><operator pos:line="75" pos:column="13">!<pos:position pos:line="75" pos:column="14"/></operator><call><name pos:line="75" pos:column="14">strcmp<pos:position pos:line="75" pos:column="20"/></name><argument_list pos:line="75" pos:column="20">(<argument><expr><name><name pos:line="75" pos:column="21">author_name<pos:position pos:line="75" pos:column="32"/></name><operator pos:line="75" pos:column="32">.<pos:position pos:line="75" pos:column="33"/></operator><name pos:line="75" pos:column="33">buf<pos:position pos:line="75" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="38">"Mail System Internal Data"<pos:position pos:line="75" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="67"/></condition><then pos:line="75" pos:column="67"> <block pos:line="75" pos:column="68">{
		<expr_stmt><expr><name pos:line="76" pos:column="17">ret<pos:position pos:line="76" pos:column="20"/></name> <operator pos:line="76" pos:column="21">=<pos:position pos:line="76" pos:column="22"/></operator> <literal type="number" pos:line="76" pos:column="23">1<pos:position pos:line="76" pos:column="24"/></literal></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt>
		<goto pos:line="77" pos:column="17">goto <name pos:line="77" pos:column="22">finish<pos:position pos:line="77" pos:column="28"/></name>;<pos:position pos:line="77" pos:column="29"/></goto>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>

	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><call><name pos:line="80" pos:column="13">is_empty_file<pos:position pos:line="80" pos:column="26"/></name><argument_list pos:line="80" pos:column="26">(<argument><expr><call><name pos:line="80" pos:column="27">am_path<pos:position pos:line="80" pos:column="34"/></name><argument_list pos:line="80" pos:column="34">(<argument><expr><name pos:line="80" pos:column="35">state<pos:position pos:line="80" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="42">"patch"<pos:position pos:line="80" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="52"/></condition><then pos:line="80" pos:column="52"> <block pos:line="80" pos:column="53">{
		<expr_stmt><expr><call><name pos:line="81" pos:column="17">printf_ln<pos:position pos:line="81" pos:column="26"/></name><argument_list pos:line="81" pos:column="26">(<argument><expr><call><name pos:line="81" pos:column="27">_<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><literal type="string" pos:line="81" pos:column="29">"Patch is empty."<pos:position pos:line="81" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="81" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">die_user_resolve<pos:position pos:line="82" pos:column="33"/></name><argument_list pos:line="82" pos:column="33">(<argument><expr><name pos:line="82" pos:column="34">state<pos:position pos:line="82" pos:column="39"/></name></expr></argument>)<pos:position pos:line="82" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="83" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="85" pos:column="9">strbuf_addstr<pos:position pos:line="85" pos:column="22"/></name><argument_list pos:line="85" pos:column="22">(<argument><expr><operator pos:line="85" pos:column="23">&amp;<pos:position pos:line="85" pos:column="28"/></operator><name pos:line="85" pos:column="24">msg<pos:position pos:line="85" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="29">"\n\n"<pos:position pos:line="85" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="86" pos:column="9">strbuf_addbuf<pos:position pos:line="86" pos:column="22"/></name><argument_list pos:line="86" pos:column="22">(<argument><expr><operator pos:line="86" pos:column="23">&amp;<pos:position pos:line="86" pos:column="28"/></operator><name pos:line="86" pos:column="24">msg<pos:position pos:line="86" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="29">&amp;<pos:position pos:line="86" pos:column="34"/></operator><name><name pos:line="86" pos:column="30">mi<pos:position pos:line="86" pos:column="32"/></name><operator pos:line="86" pos:column="32">.<pos:position pos:line="86" pos:column="33"/></operator><name pos:line="86" pos:column="33">log_message<pos:position pos:line="86" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="87" pos:column="9">strbuf_stripspace<pos:position pos:line="87" pos:column="26"/></name><argument_list pos:line="87" pos:column="26">(<argument><expr><operator pos:line="87" pos:column="27">&amp;<pos:position pos:line="87" pos:column="32"/></operator><name pos:line="87" pos:column="28">msg<pos:position pos:line="87" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="33">0<pos:position pos:line="87" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="89" pos:column="9">assert<pos:position pos:line="89" pos:column="15"/></name><argument_list pos:line="89" pos:column="15">(<argument><expr><operator pos:line="89" pos:column="16">!<pos:position pos:line="89" pos:column="17"/></operator><name><name pos:line="89" pos:column="17">state<pos:position pos:line="89" pos:column="22"/></name><operator pos:line="89" pos:column="22">-&gt;<pos:position pos:line="89" pos:column="27"/></operator><name pos:line="89" pos:column="24">author_name<pos:position pos:line="89" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="89" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="90" pos:column="9">state<pos:position pos:line="90" pos:column="14"/></name><operator pos:line="90" pos:column="14">-&gt;<pos:position pos:line="90" pos:column="19"/></operator><name pos:line="90" pos:column="16">author_name<pos:position pos:line="90" pos:column="27"/></name></name> <operator pos:line="90" pos:column="28">=<pos:position pos:line="90" pos:column="29"/></operator> <call><name pos:line="90" pos:column="30">strbuf_detach<pos:position pos:line="90" pos:column="43"/></name><argument_list pos:line="90" pos:column="43">(<argument><expr><operator pos:line="90" pos:column="44">&amp;<pos:position pos:line="90" pos:column="49"/></operator><name pos:line="90" pos:column="45">author_name<pos:position pos:line="90" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="58">NULL<pos:position pos:line="90" pos:column="62"/></name></expr></argument>)<pos:position pos:line="90" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="64"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="92" pos:column="9">assert<pos:position pos:line="92" pos:column="15"/></name><argument_list pos:line="92" pos:column="15">(<argument><expr><operator pos:line="92" pos:column="16">!<pos:position pos:line="92" pos:column="17"/></operator><name><name pos:line="92" pos:column="17">state<pos:position pos:line="92" pos:column="22"/></name><operator pos:line="92" pos:column="22">-&gt;<pos:position pos:line="92" pos:column="27"/></operator><name pos:line="92" pos:column="24">author_email<pos:position pos:line="92" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="93" pos:column="9">state<pos:position pos:line="93" pos:column="14"/></name><operator pos:line="93" pos:column="14">-&gt;<pos:position pos:line="93" pos:column="19"/></operator><name pos:line="93" pos:column="16">author_email<pos:position pos:line="93" pos:column="28"/></name></name> <operator pos:line="93" pos:column="29">=<pos:position pos:line="93" pos:column="30"/></operator> <call><name pos:line="93" pos:column="31">strbuf_detach<pos:position pos:line="93" pos:column="44"/></name><argument_list pos:line="93" pos:column="44">(<argument><expr><operator pos:line="93" pos:column="45">&amp;<pos:position pos:line="93" pos:column="50"/></operator><name pos:line="93" pos:column="46">author_email<pos:position pos:line="93" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="60">NULL<pos:position pos:line="93" pos:column="64"/></name></expr></argument>)<pos:position pos:line="93" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="66"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="95" pos:column="9">assert<pos:position pos:line="95" pos:column="15"/></name><argument_list pos:line="95" pos:column="15">(<argument><expr><operator pos:line="95" pos:column="16">!<pos:position pos:line="95" pos:column="17"/></operator><name><name pos:line="95" pos:column="17">state<pos:position pos:line="95" pos:column="22"/></name><operator pos:line="95" pos:column="22">-&gt;<pos:position pos:line="95" pos:column="27"/></operator><name pos:line="95" pos:column="24">author_date<pos:position pos:line="95" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="96" pos:column="9">state<pos:position pos:line="96" pos:column="14"/></name><operator pos:line="96" pos:column="14">-&gt;<pos:position pos:line="96" pos:column="19"/></operator><name pos:line="96" pos:column="16">author_date<pos:position pos:line="96" pos:column="27"/></name></name> <operator pos:line="96" pos:column="28">=<pos:position pos:line="96" pos:column="29"/></operator> <call><name pos:line="96" pos:column="30">strbuf_detach<pos:position pos:line="96" pos:column="43"/></name><argument_list pos:line="96" pos:column="43">(<argument><expr><operator pos:line="96" pos:column="44">&amp;<pos:position pos:line="96" pos:column="49"/></operator><name pos:line="96" pos:column="45">author_date<pos:position pos:line="96" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="58">NULL<pos:position pos:line="96" pos:column="62"/></name></expr></argument>)<pos:position pos:line="96" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="64"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="98" pos:column="9">assert<pos:position pos:line="98" pos:column="15"/></name><argument_list pos:line="98" pos:column="15">(<argument><expr><operator pos:line="98" pos:column="16">!<pos:position pos:line="98" pos:column="17"/></operator><name><name pos:line="98" pos:column="17">state<pos:position pos:line="98" pos:column="22"/></name><operator pos:line="98" pos:column="22">-&gt;<pos:position pos:line="98" pos:column="27"/></operator><name pos:line="98" pos:column="24">msg<pos:position pos:line="98" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="98" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="99" pos:column="9">state<pos:position pos:line="99" pos:column="14"/></name><operator pos:line="99" pos:column="14">-&gt;<pos:position pos:line="99" pos:column="19"/></operator><name pos:line="99" pos:column="16">msg<pos:position pos:line="99" pos:column="19"/></name></name> <operator pos:line="99" pos:column="20">=<pos:position pos:line="99" pos:column="21"/></operator> <call><name pos:line="99" pos:column="22">strbuf_detach<pos:position pos:line="99" pos:column="35"/></name><argument_list pos:line="99" pos:column="35">(<argument><expr><operator pos:line="99" pos:column="36">&amp;<pos:position pos:line="99" pos:column="41"/></operator><name pos:line="99" pos:column="37">msg<pos:position pos:line="99" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="42">&amp;<pos:position pos:line="99" pos:column="47"/></operator><name><name pos:line="99" pos:column="43">state<pos:position pos:line="99" pos:column="48"/></name><operator pos:line="99" pos:column="48">-&gt;<pos:position pos:line="99" pos:column="53"/></operator><name pos:line="99" pos:column="50">msg_len<pos:position pos:line="99" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="59"/></expr_stmt>

<label><name pos:line="101" pos:column="1">finish<pos:position pos:line="101" pos:column="7"/></name>:<pos:position pos:line="101" pos:column="8"/></label>
	<expr_stmt><expr><call><name pos:line="102" pos:column="9">strbuf_release<pos:position pos:line="102" pos:column="23"/></name><argument_list pos:line="102" pos:column="23">(<argument><expr><operator pos:line="102" pos:column="24">&amp;<pos:position pos:line="102" pos:column="29"/></operator><name pos:line="102" pos:column="25">msg<pos:position pos:line="102" pos:column="28"/></name></expr></argument>)<pos:position pos:line="102" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="103" pos:column="9">strbuf_release<pos:position pos:line="103" pos:column="23"/></name><argument_list pos:line="103" pos:column="23">(<argument><expr><operator pos:line="103" pos:column="24">&amp;<pos:position pos:line="103" pos:column="29"/></operator><name pos:line="103" pos:column="25">author_date<pos:position pos:line="103" pos:column="36"/></name></expr></argument>)<pos:position pos:line="103" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="104" pos:column="9">strbuf_release<pos:position pos:line="104" pos:column="23"/></name><argument_list pos:line="104" pos:column="23">(<argument><expr><operator pos:line="104" pos:column="24">&amp;<pos:position pos:line="104" pos:column="29"/></operator><name pos:line="104" pos:column="25">author_email<pos:position pos:line="104" pos:column="37"/></name></expr></argument>)<pos:position pos:line="104" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="105" pos:column="9">strbuf_release<pos:position pos:line="105" pos:column="23"/></name><argument_list pos:line="105" pos:column="23">(<argument><expr><operator pos:line="105" pos:column="24">&amp;<pos:position pos:line="105" pos:column="29"/></operator><name pos:line="105" pos:column="25">author_name<pos:position pos:line="105" pos:column="36"/></name></expr></argument>)<pos:position pos:line="105" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="106" pos:column="9">strbuf_release<pos:position pos:line="106" pos:column="23"/></name><argument_list pos:line="106" pos:column="23">(<argument><expr><operator pos:line="106" pos:column="24">&amp;<pos:position pos:line="106" pos:column="29"/></operator><name pos:line="106" pos:column="25">sb<pos:position pos:line="106" pos:column="27"/></name></expr></argument>)<pos:position pos:line="106" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="107" pos:column="9">clear_mailinfo<pos:position pos:line="107" pos:column="23"/></name><argument_list pos:line="107" pos:column="23">(<argument><expr><operator pos:line="107" pos:column="24">&amp;<pos:position pos:line="107" pos:column="29"/></operator><name pos:line="107" pos:column="25">mi<pos:position pos:line="107" pos:column="27"/></name></expr></argument>)<pos:position pos:line="107" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="29"/></expr_stmt>
	<return pos:line="108" pos:column="9">return <expr><name pos:line="108" pos:column="16">ret<pos:position pos:line="108" pos:column="19"/></name></expr>;<pos:position pos:line="108" pos:column="20"/></return>
}<pos:position pos:line="109" pos:column="2"/></block></function></unit>
