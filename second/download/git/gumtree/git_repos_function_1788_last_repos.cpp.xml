<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1788_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">gfi_unpack_entry<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(
	<parameter><decl><type><name><name pos:line="2" pos:column="9">struct<pos:position pos:line="2" pos:column="15"/></name> <name pos:line="2" pos:column="16">object_entry<pos:position pos:line="2" pos:column="28"/></name></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">oe<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>,
	<parameter><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">long<pos:position pos:line="3" pos:column="22"/></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">sizep<pos:position pos:line="3" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="30"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">enum<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">object_type<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">type<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">packed_git<pos:position pos:line="6" pos:column="26"/></name></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier></type><name pos:line="6" pos:column="28">p<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name><name pos:line="6" pos:column="32">all_packs<pos:position pos:line="6" pos:column="41"/></name><index pos:line="6" pos:column="41">[<expr><name><name pos:line="6" pos:column="42">oe<pos:position pos:line="6" pos:column="44"/></name><operator pos:line="6" pos:column="44">-&gt;<pos:position pos:line="6" pos:column="49"/></operator><name pos:line="6" pos:column="46">pack_id<pos:position pos:line="6" pos:column="53"/></name></name></expr>]<pos:position pos:line="6" pos:column="54"/></index></name></expr></init></decl>;<pos:position pos:line="6" pos:column="55"/></decl_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">p<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">==<pos:position pos:line="7" pos:column="17"/></operator> <name pos:line="7" pos:column="18">pack_data<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">&amp;&amp;<pos:position pos:line="7" pos:column="38"/></operator> <name><name pos:line="7" pos:column="31">p<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">pack_size<pos:position pos:line="7" pos:column="43"/></name></name> <operator pos:line="7" pos:column="44">&lt;<pos:position pos:line="7" pos:column="48"/></operator> <operator pos:line="7" pos:column="46">(<pos:position pos:line="7" pos:column="47"/></operator><name pos:line="7" pos:column="47">pack_size<pos:position pos:line="7" pos:column="56"/></name> <operator pos:line="7" pos:column="57">+<pos:position pos:line="7" pos:column="58"/></operator> <literal type="number" pos:line="7" pos:column="59">20<pos:position pos:line="7" pos:column="61"/></literal><operator pos:line="7" pos:column="61">)<pos:position pos:line="7" pos:column="62"/></operator></expr>)<pos:position pos:line="7" pos:column="63"/></condition><then pos:line="7" pos:column="63"> <block pos:line="7" pos:column="64">{
		<comment type="block" pos:line="8" pos:column="17">/* The object is stored in the packfile we are writing to
		 * and we have modified it since the last time we scanned
		 * back to read a previously written object.  If an old
		 * window covered [p-&gt;pack_size, p-&gt;pack_size + 20) its
		 * data is stale and is not valid.  Closing all windows
		 * and updating the packfile length ensures we can read
		 * the newly written data.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">close_pack_windows<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">p<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">sha1flush<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">pack_file<pos:position pos:line="17" pos:column="36"/></name></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="38"/></expr_stmt>

		<comment type="block" pos:line="19" pos:column="17">/* We have to offer 20 bytes additional on the end of
		 * the packfile as the core unpacker code assumes the
		 * footer is present at the file end and must promise
		 * at least 20 bytes within any window it maps.  But
		 * we don't actually create the footer here.
		 */</comment>
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">p<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">-&gt;<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="20">pack_size<pos:position pos:line="25" pos:column="29"/></name></name> <operator pos:line="25" pos:column="30">=<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="32">pack_size<pos:position pos:line="25" pos:column="41"/></name> <operator pos:line="25" pos:column="42">+<pos:position pos:line="25" pos:column="43"/></operator> <literal type="number" pos:line="25" pos:column="44">20<pos:position pos:line="25" pos:column="46"/></literal></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<return pos:line="27" pos:column="9">return <expr><call><name pos:line="27" pos:column="16">unpack_entry<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">p<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="32">oe<pos:position pos:line="27" pos:column="34"/></name><operator pos:line="27" pos:column="34">-&gt;<pos:position pos:line="27" pos:column="39"/></operator><name pos:line="27" pos:column="36">idx<pos:position pos:line="27" pos:column="39"/></name><operator pos:line="27" pos:column="39">.<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="40">offset<pos:position pos:line="27" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="48">&amp;<pos:position pos:line="27" pos:column="53"/></operator><name pos:line="27" pos:column="49">type<pos:position pos:line="27" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="55">sizep<pos:position pos:line="27" pos:column="60"/></name></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="62"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
