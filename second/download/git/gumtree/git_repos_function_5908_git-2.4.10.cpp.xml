<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5908_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bin_tree_t<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type>
<name pos:line="2" pos:column="1">parse<pos:position pos:line="2" pos:column="6"/></name> <parameter_list pos:line="2" pos:column="7">(<parameter><decl><type><name pos:line="2" pos:column="8">re_string_t<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">regexp<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="29">regex_t<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">preg<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">reg_syntax_t<pos:position pos:line="2" pos:column="56"/></name></type> <name pos:line="2" pos:column="57">syntax<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>,
       <parameter><decl><type><name pos:line="3" pos:column="8">reg_errcode_t<pos:position pos:line="3" pos:column="21"/></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier></type><name pos:line="3" pos:column="23">err<pos:position pos:line="3" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="27"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">re_dfa_t<pos:position pos:line="5" pos:column="11"/></name> <modifier pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></modifier></type><name pos:line="5" pos:column="13">dfa<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><operator pos:line="5" pos:column="19">(<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="20">re_dfa_t<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator><operator pos:line="5" pos:column="30">)<pos:position pos:line="5" pos:column="31"/></operator> <name><name pos:line="5" pos:column="32">preg<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">buffer<pos:position pos:line="5" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bin_tree_t<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">tree<pos:position pos:line="6" pos:column="19"/></name></decl>, <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="22">eor<pos:position pos:line="6" pos:column="25"/></name></decl>, <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="28">root<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">re_token_t<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">current_token<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="8" pos:column="3">dfa<pos:position pos:line="8" pos:column="6"/></name><operator pos:line="8" pos:column="6">-&gt;<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="8">syntax<pos:position pos:line="8" pos:column="14"/></name></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">syntax<pos:position pos:line="8" pos:column="23"/></name></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">fetch_token<pos:position pos:line="9" pos:column="14"/></name> <argument_list pos:line="9" pos:column="15">(<argument><expr><operator pos:line="9" pos:column="16">&amp;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="17">current_token<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="32">regexp<pos:position pos:line="9" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="40">syntax<pos:position pos:line="9" pos:column="46"/></name> <operator pos:line="9" pos:column="47">|<pos:position pos:line="9" pos:column="48"/></operator> <name pos:line="9" pos:column="49">RE_CARET_ANCHORS_HERE<pos:position pos:line="9" pos:column="70"/></name></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="72"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">tree<pos:position pos:line="10" pos:column="7"/></name> <operator pos:line="10" pos:column="8">=<pos:position pos:line="10" pos:column="9"/></operator> <call><name pos:line="10" pos:column="10">parse_reg_exp<pos:position pos:line="10" pos:column="23"/></name> <argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">regexp<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="33">preg<pos:position pos:line="10" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="39">&amp;<pos:position pos:line="10" pos:column="44"/></operator><name pos:line="10" pos:column="40">current_token<pos:position pos:line="10" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="55">syntax<pos:position pos:line="10" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="63">0<pos:position pos:line="10" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="66">err<pos:position pos:line="10" pos:column="69"/></name></expr></argument>)<pos:position pos:line="10" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="71"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><call><name pos:line="11" pos:column="7">BE<pos:position pos:line="11" pos:column="9"/></name> <argument_list pos:line="11" pos:column="10">(<argument><expr><operator pos:line="11" pos:column="11">*<pos:position pos:line="11" pos:column="12"/></operator><name pos:line="11" pos:column="12">err<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">!=<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">REG_NOERROR<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">&amp;&amp;<pos:position pos:line="11" pos:column="41"/></operator> <name pos:line="11" pos:column="34">tree<pos:position pos:line="11" pos:column="38"/></name> <operator pos:line="11" pos:column="39">==<pos:position pos:line="11" pos:column="41"/></operator> <name pos:line="11" pos:column="42">NULL<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="48">0<pos:position pos:line="11" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="51"/></condition><then pos:line="11" pos:column="51">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="13" pos:column="3">eor<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <call><name pos:line="13" pos:column="9">create_tree<pos:position pos:line="13" pos:column="20"/></name> <argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">dfa<pos:position pos:line="13" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="27">NULL<pos:position pos:line="13" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="33">NULL<pos:position pos:line="13" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="39">END_OF_RE<pos:position pos:line="13" pos:column="48"/></name></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">tree<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">!=<pos:position pos:line="14" pos:column="14"/></operator> <name pos:line="14" pos:column="15">NULL<pos:position pos:line="14" pos:column="19"/></name></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="5">root<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">create_tree<pos:position pos:line="15" pos:column="23"/></name> <argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">dfa<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="30">tree<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">eor<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="41">CONCAT<pos:position pos:line="15" pos:column="47"/></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt></block></then>
  <else pos:line="16" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="5">root<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <name pos:line="17" pos:column="12">eor<pos:position pos:line="17" pos:column="15"/></name></expr>;<pos:position pos:line="17" pos:column="16"/></expr_stmt></block></else></if>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><call><name pos:line="18" pos:column="7">BE<pos:position pos:line="18" pos:column="9"/></name> <argument_list pos:line="18" pos:column="10">(<argument><expr><name pos:line="18" pos:column="11">eor<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">==<pos:position pos:line="18" pos:column="17"/></operator> <name pos:line="18" pos:column="18">NULL<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">||<pos:position pos:line="18" pos:column="25"/></operator> <name pos:line="18" pos:column="26">root<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">==<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">NULL<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="40">0<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43">
    <block pos:line="19" pos:column="5">{
      <expr_stmt><expr><operator pos:line="20" pos:column="7">*<pos:position pos:line="20" pos:column="8"/></operator><name pos:line="20" pos:column="8">err<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name pos:line="20" pos:column="14">REG_ESPACE<pos:position pos:line="20" pos:column="24"/></name></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>
      <return pos:line="21" pos:column="7">return <expr><name pos:line="21" pos:column="14">NULL<pos:position pos:line="21" pos:column="18"/></name></expr>;<pos:position pos:line="21" pos:column="19"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
  <return pos:line="23" pos:column="3">return <expr><name pos:line="23" pos:column="10">root<pos:position pos:line="23" pos:column="14"/></name></expr>;<pos:position pos:line="23" pos:column="15"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
