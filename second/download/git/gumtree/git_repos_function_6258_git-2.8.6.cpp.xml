<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6258_git-2.8.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">build_sifted_states<pos:position pos:line="3" pos:column="20"/></name> <parameter_list pos:line="3" pos:column="21">(<parameter><decl><type><specifier pos:line="3" pos:column="22">const<pos:position pos:line="3" pos:column="27"/></specifier> <name pos:line="3" pos:column="28">re_match_context_t<pos:position pos:line="3" pos:column="46"/></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">mctx<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="54">re_sift_context_t<pos:position pos:line="3" pos:column="71"/></name> <modifier pos:line="3" pos:column="72">*<pos:position pos:line="3" pos:column="73"/></modifier></type><name pos:line="3" pos:column="73">sctx<pos:position pos:line="3" pos:column="77"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="4" pos:column="22">int<pos:position pos:line="4" pos:column="25"/></name></type> <name pos:line="4" pos:column="26">str_idx<pos:position pos:line="4" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="35">re_node_set<pos:position pos:line="4" pos:column="46"/></name> <modifier pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></modifier></type><name pos:line="4" pos:column="48">cur_dest<pos:position pos:line="4" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="57"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">re_dfa_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier><specifier pos:line="6" pos:column="19">const<pos:position pos:line="6" pos:column="24"/></specifier></type> <name pos:line="6" pos:column="25">dfa<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name><name pos:line="6" pos:column="31">mctx<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">dfa<pos:position pos:line="6" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">re_node_set<pos:position pos:line="7" pos:column="20"/></name> <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier></type><name pos:line="7" pos:column="22">cur_src<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><operator pos:line="7" pos:column="32">&amp;<pos:position pos:line="7" pos:column="37"/></operator><name><name pos:line="7" pos:column="33">mctx<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">-&gt;<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="39">state_log<pos:position pos:line="7" pos:column="48"/></name><index pos:line="7" pos:column="48">[<expr><name pos:line="7" pos:column="49">str_idx<pos:position pos:line="7" pos:column="56"/></name></expr>]<pos:position pos:line="7" pos:column="57"/></index></name><operator pos:line="7" pos:column="57">-&gt;<pos:position pos:line="7" pos:column="62"/></operator><name pos:line="7" pos:column="59">non_eps_nodes<pos:position pos:line="7" pos:column="72"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="73"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">i<pos:position pos:line="8" pos:column="8"/></name></decl>;<pos:position pos:line="8" pos:column="9"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* Then build the next sifted state.
     We build the next sifted state on `cur_dest', and update
     `sifted_states[str_idx]' with `cur_dest'.
     Note:
     `cur_dest' is the sifted state from `state_log[str_idx + 1]'.
     `cur_src' points the node_set of the old `state_log[str_idx]'
     (with the epsilon nodes pre-filtered out).  */</comment>
  <for pos:line="17" pos:column="3">for <control pos:line="17" pos:column="7">(<init><expr><name pos:line="17" pos:column="8">i<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <literal type="number" pos:line="17" pos:column="12">0<pos:position pos:line="17" pos:column="13"/></literal></expr>;<pos:position pos:line="17" pos:column="14"/></init> <condition><expr><name pos:line="17" pos:column="15">i<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">&lt;<pos:position pos:line="17" pos:column="21"/></operator> <name><name pos:line="17" pos:column="19">cur_src<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">-&gt;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="28">nelem<pos:position pos:line="17" pos:column="33"/></name></name></expr>;<pos:position pos:line="17" pos:column="34"/></condition> <incr><expr><name pos:line="17" pos:column="35">i<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">++<pos:position pos:line="17" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="39"/></control>
    <block pos:line="18" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="19" pos:column="7">int<pos:position pos:line="19" pos:column="10"/></name></type> <name pos:line="19" pos:column="11">prev_node<pos:position pos:line="19" pos:column="20"/></name> <init pos:line="19" pos:column="21">= <expr><name><name pos:line="19" pos:column="23">cur_src<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">elems<pos:position pos:line="19" pos:column="37"/></name><index pos:line="19" pos:column="37">[<expr><name pos:line="19" pos:column="38">i<pos:position pos:line="19" pos:column="39"/></name></expr>]<pos:position pos:line="19" pos:column="40"/></index></name></expr></init></decl>;<pos:position pos:line="19" pos:column="41"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="20" pos:column="7">int<pos:position pos:line="20" pos:column="10"/></name></type> <name pos:line="20" pos:column="11">naccepted<pos:position pos:line="20" pos:column="20"/></name> <init pos:line="20" pos:column="21">= <expr><literal type="number" pos:line="20" pos:column="23">0<pos:position pos:line="20" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="21" pos:column="7">int<pos:position pos:line="21" pos:column="10"/></name></type> <name pos:line="21" pos:column="11">ret<pos:position pos:line="21" pos:column="14"/></name></decl>;<pos:position pos:line="21" pos:column="15"/></decl_stmt>

<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">DEBUG<pos:position pos:line="23" pos:column="13"/></name></cpp:ifdef>
      <decl_stmt><decl><type><name pos:line="24" pos:column="7">re_token_type_t<pos:position pos:line="24" pos:column="22"/></name></type> <name pos:line="24" pos:column="23">type<pos:position pos:line="24" pos:column="27"/></name> <init pos:line="24" pos:column="28">= <expr><name><name pos:line="24" pos:column="30">dfa<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">-&gt;<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="35">nodes<pos:position pos:line="24" pos:column="40"/></name><index pos:line="24" pos:column="40">[<expr><name pos:line="24" pos:column="41">prev_node<pos:position pos:line="24" pos:column="50"/></name></expr>]<pos:position pos:line="24" pos:column="51"/></index></name><operator pos:line="24" pos:column="51">.<pos:position pos:line="24" pos:column="52"/></operator><name pos:line="24" pos:column="52">type<pos:position pos:line="24" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="57"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">assert<pos:position pos:line="25" pos:column="13"/></name> <argument_list pos:line="25" pos:column="14">(<argument><expr><operator pos:line="25" pos:column="15">!<pos:position pos:line="25" pos:column="16"/></operator><call><name pos:line="25" pos:column="16">IS_EPSILON_NODE<pos:position pos:line="25" pos:column="31"/></name> <argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">type<pos:position pos:line="25" pos:column="37"/></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="27" pos:column="22"/></name></cpp:ifdef>
      <comment type="block" pos:line="28" pos:column="7">/* If the node may accept `multi byte'.  */</comment>
      <if pos:line="29" pos:column="7">if <condition pos:line="29" pos:column="10">(<expr><name><name pos:line="29" pos:column="11">dfa<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">-&gt;<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="16">nodes<pos:position pos:line="29" pos:column="21"/></name><index pos:line="29" pos:column="21">[<expr><name pos:line="29" pos:column="22">prev_node<pos:position pos:line="29" pos:column="31"/></name></expr>]<pos:position pos:line="29" pos:column="32"/></index></name><operator pos:line="29" pos:column="32">.<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="33">accept_mb<pos:position pos:line="29" pos:column="42"/></name></expr>)<pos:position pos:line="29" pos:column="43"/></condition><then pos:line="29" pos:column="43">
	<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="9">naccepted<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <call><name pos:line="30" pos:column="21">sift_states_iter_mb<pos:position pos:line="30" pos:column="40"/></name> <argument_list pos:line="30" pos:column="41">(<argument><expr><name pos:line="30" pos:column="42">mctx<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">sctx<pos:position pos:line="30" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="54">prev_node<pos:position pos:line="30" pos:column="63"/></name></expr></argument>,
					 <argument><expr><name pos:line="31" pos:column="42">str_idx<pos:position pos:line="31" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="51">sctx<pos:position pos:line="31" pos:column="55"/></name><operator pos:line="31" pos:column="55">-&gt;<pos:position pos:line="31" pos:column="60"/></operator><name pos:line="31" pos:column="57">last_str_idx<pos:position pos:line="31" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="71"/></expr_stmt></block></then></if>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="32" pos:column="8">/* RE_ENABLE_I18N */</comment>

      <comment type="block" pos:line="34" pos:column="7">/* We don't check backreferences here.
	 See update_cur_sifted_state().  */</comment>
      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><operator pos:line="36" pos:column="11">!<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">naccepted<pos:position pos:line="36" pos:column="21"/></name>
	  <operator pos:line="37" pos:column="11">&amp;&amp;<pos:position pos:line="37" pos:column="21"/></operator> <call><name pos:line="37" pos:column="14">check_node_accept<pos:position pos:line="37" pos:column="31"/></name> <argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">mctx<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="39">dfa<pos:position pos:line="37" pos:column="42"/></name><operator pos:line="37" pos:column="42">-&gt;<pos:position pos:line="37" pos:column="47"/></operator><name pos:line="37" pos:column="44">nodes<pos:position pos:line="37" pos:column="49"/></name></name> <operator pos:line="37" pos:column="50">+<pos:position pos:line="37" pos:column="51"/></operator> <name pos:line="37" pos:column="52">prev_node<pos:position pos:line="37" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="63">str_idx<pos:position pos:line="37" pos:column="70"/></name></expr></argument>)<pos:position pos:line="37" pos:column="71"/></argument_list></call>
	  <operator pos:line="38" pos:column="11">&amp;&amp;<pos:position pos:line="38" pos:column="21"/></operator> <call><name pos:line="38" pos:column="14">STATE_NODE_CONTAINS<pos:position pos:line="38" pos:column="33"/></name> <argument_list pos:line="38" pos:column="34">(<argument><expr><name><name pos:line="38" pos:column="35">sctx<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">-&gt;<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="41">sifted_states<pos:position pos:line="38" pos:column="54"/></name><index pos:line="38" pos:column="54">[<expr><name pos:line="38" pos:column="55">str_idx<pos:position pos:line="38" pos:column="62"/></name> <operator pos:line="38" pos:column="63">+<pos:position pos:line="38" pos:column="64"/></operator> <literal type="number" pos:line="38" pos:column="65">1<pos:position pos:line="38" pos:column="66"/></literal></expr>]<pos:position pos:line="38" pos:column="67"/></index></name></expr></argument>,
				  <argument><expr><name><name pos:line="39" pos:column="35">dfa<pos:position pos:line="39" pos:column="38"/></name><operator pos:line="39" pos:column="38">-&gt;<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="40">nexts<pos:position pos:line="39" pos:column="45"/></name><index pos:line="39" pos:column="45">[<expr><name pos:line="39" pos:column="46">prev_node<pos:position pos:line="39" pos:column="55"/></name></expr>]<pos:position pos:line="39" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="58"/></condition><then pos:line="39" pos:column="58">
	<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="9">naccepted<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <literal type="number" pos:line="40" pos:column="21">1<pos:position pos:line="40" pos:column="22"/></literal></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt></block></then></if>

      <if pos:line="42" pos:column="7">if <condition pos:line="42" pos:column="10">(<expr><name pos:line="42" pos:column="11">naccepted<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">==<pos:position pos:line="42" pos:column="23"/></operator> <literal type="number" pos:line="42" pos:column="24">0<pos:position pos:line="42" pos:column="25"/></literal></expr>)<pos:position pos:line="42" pos:column="26"/></condition><then pos:line="42" pos:column="26">
	<block type="pseudo"><continue pos:line="43" pos:column="9">continue;<pos:position pos:line="43" pos:column="18"/></continue></block></then></if>

      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><name><name pos:line="45" pos:column="11">sctx<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">-&gt;<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="17">limits<pos:position pos:line="45" pos:column="23"/></name><operator pos:line="45" pos:column="23">.<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="24">nelem<pos:position pos:line="45" pos:column="29"/></name></name></expr>)<pos:position pos:line="45" pos:column="30"/></condition><then pos:line="45" pos:column="30">
	<block pos:line="46" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="47" pos:column="11">int<pos:position pos:line="47" pos:column="14"/></name></type> <name pos:line="47" pos:column="15">to_idx<pos:position pos:line="47" pos:column="21"/></name> <init pos:line="47" pos:column="22">= <expr><name pos:line="47" pos:column="24">str_idx<pos:position pos:line="47" pos:column="31"/></name> <operator pos:line="47" pos:column="32">+<pos:position pos:line="47" pos:column="33"/></operator> <name pos:line="47" pos:column="34">naccepted<pos:position pos:line="47" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="47" pos:column="44"/></decl_stmt>
	  <if pos:line="48" pos:column="11">if <condition pos:line="48" pos:column="14">(<expr><call><name pos:line="48" pos:column="15">check_dst_limits<pos:position pos:line="48" pos:column="31"/></name> <argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">mctx<pos:position pos:line="48" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="39">&amp;<pos:position pos:line="48" pos:column="44"/></operator><name><name pos:line="48" pos:column="40">sctx<pos:position pos:line="48" pos:column="44"/></name><operator pos:line="48" pos:column="44">-&gt;<pos:position pos:line="48" pos:column="49"/></operator><name pos:line="48" pos:column="46">limits<pos:position pos:line="48" pos:column="52"/></name></name></expr></argument>,
				<argument><expr><name><name pos:line="49" pos:column="33">dfa<pos:position pos:line="49" pos:column="36"/></name><operator pos:line="49" pos:column="36">-&gt;<pos:position pos:line="49" pos:column="41"/></operator><name pos:line="49" pos:column="38">nexts<pos:position pos:line="49" pos:column="43"/></name><index pos:line="49" pos:column="43">[<expr><name pos:line="49" pos:column="44">prev_node<pos:position pos:line="49" pos:column="53"/></name></expr>]<pos:position pos:line="49" pos:column="54"/></index></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="56">to_idx<pos:position pos:line="49" pos:column="62"/></name></expr></argument>,
				<argument><expr><name pos:line="50" pos:column="33">prev_node<pos:position pos:line="50" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="44">str_idx<pos:position pos:line="50" pos:column="51"/></name></expr></argument>)<pos:position pos:line="50" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="53"/></condition><then pos:line="50" pos:column="53">
	    <block type="pseudo"><continue pos:line="51" pos:column="13">continue;<pos:position pos:line="51" pos:column="22"/></continue></block></then></if>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name pos:line="53" pos:column="7">ret<pos:position pos:line="53" pos:column="10"/></name> <operator pos:line="53" pos:column="11">=<pos:position pos:line="53" pos:column="12"/></operator> <call><name pos:line="53" pos:column="13">re_node_set_insert<pos:position pos:line="53" pos:column="31"/></name> <argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">cur_dest<pos:position pos:line="53" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="43">prev_node<pos:position pos:line="53" pos:column="52"/></name></expr></argument>)<pos:position pos:line="53" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="54"/></expr_stmt>
      <if pos:line="54" pos:column="7">if <condition pos:line="54" pos:column="10">(<expr><call><name pos:line="54" pos:column="11">BE<pos:position pos:line="54" pos:column="13"/></name> <argument_list pos:line="54" pos:column="14">(<argument><expr><name pos:line="54" pos:column="15">ret<pos:position pos:line="54" pos:column="18"/></name> <operator pos:line="54" pos:column="19">==<pos:position pos:line="54" pos:column="21"/></operator> <operator pos:line="54" pos:column="22">-<pos:position pos:line="54" pos:column="23"/></operator><literal type="number" pos:line="54" pos:column="23">1<pos:position pos:line="54" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="26">0<pos:position pos:line="54" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="29"/></condition><then pos:line="54" pos:column="29">
	<block type="pseudo"><return pos:line="55" pos:column="9">return <expr><name pos:line="55" pos:column="16">REG_ESPACE<pos:position pos:line="55" pos:column="26"/></name></expr>;<pos:position pos:line="55" pos:column="27"/></return></block></then></if>
    }<pos:position pos:line="56" pos:column="6"/></block></for>

  <return pos:line="58" pos:column="3">return <expr><name pos:line="58" pos:column="10">REG_NOERROR<pos:position pos:line="58" pos:column="21"/></name></expr>;<pos:position pos:line="58" pos:column="22"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
