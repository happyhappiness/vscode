<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6983_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">check_node_accept<pos:position pos:line="3" pos:column="18"/></name> <parameter_list pos:line="3" pos:column="19">(<parameter><decl><type><specifier pos:line="3" pos:column="20">const<pos:position pos:line="3" pos:column="25"/></specifier> <name pos:line="3" pos:column="26">re_match_context_t<pos:position pos:line="3" pos:column="44"/></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">mctx<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="52">const<pos:position pos:line="3" pos:column="57"/></specifier> <name pos:line="3" pos:column="58">re_token_t<pos:position pos:line="3" pos:column="68"/></name> <modifier pos:line="3" pos:column="69">*<pos:position pos:line="3" pos:column="70"/></modifier></type><name pos:line="3" pos:column="70">node<pos:position pos:line="3" pos:column="74"/></name></decl></parameter>,
		   <parameter><decl><type><name pos:line="4" pos:column="20">int<pos:position pos:line="4" pos:column="23"/></name></type> <name pos:line="4" pos:column="24">idx<pos:position pos:line="4" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="28"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">ch<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <expr_stmt><expr><name pos:line="7" pos:column="3">ch<pos:position pos:line="7" pos:column="5"/></name> <operator pos:line="7" pos:column="6">=<pos:position pos:line="7" pos:column="7"/></operator> <call><name pos:line="7" pos:column="8">re_string_byte_at<pos:position pos:line="7" pos:column="25"/></name> <argument_list pos:line="7" pos:column="26">(<argument><expr><operator pos:line="7" pos:column="27">&amp;<pos:position pos:line="7" pos:column="32"/></operator><name><name pos:line="7" pos:column="28">mctx<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">input<pos:position pos:line="7" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="41">idx<pos:position pos:line="7" pos:column="44"/></name></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="46"/></expr_stmt>
  <switch pos:line="8" pos:column="3">switch <condition pos:line="8" pos:column="10">(<expr><name><name pos:line="8" pos:column="11">node<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">-&gt;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="17">type<pos:position pos:line="8" pos:column="21"/></name></name></expr>)<pos:position pos:line="8" pos:column="22"/></condition>
    <block pos:line="9" pos:column="5">{
    <case pos:line="10" pos:column="5">case <expr><name pos:line="10" pos:column="10">CHARACTER<pos:position pos:line="10" pos:column="19"/></name></expr>:<pos:position pos:line="10" pos:column="20"/></case>
      <if pos:line="11" pos:column="7">if <condition pos:line="11" pos:column="10">(<expr><name><name pos:line="11" pos:column="11">node<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">opr<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">.<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">c<pos:position pos:line="11" pos:column="22"/></name></name> <operator pos:line="11" pos:column="23">!=<pos:position pos:line="11" pos:column="25"/></operator> <name pos:line="11" pos:column="26">ch<pos:position pos:line="11" pos:column="28"/></name></expr>)<pos:position pos:line="11" pos:column="29"/></condition><then pos:line="11" pos:column="29">
	<block type="pseudo"><return pos:line="12" pos:column="9">return <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return></block></then></if>
      <break pos:line="13" pos:column="7">break;<pos:position pos:line="13" pos:column="13"/></break>

    <case pos:line="15" pos:column="5">case <expr><name pos:line="15" pos:column="10">SIMPLE_BRACKET<pos:position pos:line="15" pos:column="24"/></name></expr>:<pos:position pos:line="15" pos:column="25"/></case>
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><operator pos:line="16" pos:column="11">!<pos:position pos:line="16" pos:column="12"/></operator><call><name pos:line="16" pos:column="12">bitset_contain<pos:position pos:line="16" pos:column="26"/></name> <argument_list pos:line="16" pos:column="27">(<argument><expr><name><name pos:line="16" pos:column="28">node<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">-&gt;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="34">opr<pos:position pos:line="16" pos:column="37"/></name><operator pos:line="16" pos:column="37">.<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="38">sbcset<pos:position pos:line="16" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">ch<pos:position pos:line="16" pos:column="48"/></name></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="50"/></condition><then pos:line="16" pos:column="50">
	<block type="pseudo"><return pos:line="17" pos:column="9">return <expr><literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr>;<pos:position pos:line="17" pos:column="18"/></return></block></then></if>
      <break pos:line="18" pos:column="7">break;<pos:position pos:line="18" pos:column="13"/></break>

<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef<pos:position pos:line="20" pos:column="7"/></cpp:directive> <name pos:line="20" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="20" pos:column="22"/></name></cpp:ifdef>
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">OP_UTF8_PERIOD<pos:position pos:line="21" pos:column="24"/></name></expr>:<pos:position pos:line="21" pos:column="25"/></case>
      <if pos:line="22" pos:column="7">if <condition pos:line="22" pos:column="10">(<expr><name pos:line="22" pos:column="11">ch<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">&gt;=<pos:position pos:line="22" pos:column="19"/></operator> <literal type="number" pos:line="22" pos:column="17">0x80<pos:position pos:line="22" pos:column="21"/></literal></expr>)<pos:position pos:line="22" pos:column="22"/></condition><then pos:line="22" pos:column="22">
	<block type="pseudo"><return pos:line="23" pos:column="9">return <expr><literal type="number" pos:line="23" pos:column="16">0<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></return></block></then></if>
      <comment type="block" pos:line="24" pos:column="7">/* FALLTHROUGH */</comment>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
    <case pos:line="26" pos:column="5">case <expr><name pos:line="26" pos:column="10">OP_PERIOD<pos:position pos:line="26" pos:column="19"/></name></expr>:<pos:position pos:line="26" pos:column="20"/></case>
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><operator pos:line="27" pos:column="11">(<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">ch<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">==<pos:position pos:line="27" pos:column="17"/></operator> <literal type="char" pos:line="27" pos:column="18">'\n'<pos:position pos:line="27" pos:column="22"/></literal> <operator pos:line="27" pos:column="23">&amp;&amp;<pos:position pos:line="27" pos:column="33"/></operator> <operator pos:line="27" pos:column="26">!<pos:position pos:line="27" pos:column="27"/></operator><operator pos:line="27" pos:column="27">(<pos:position pos:line="27" pos:column="28"/></operator><name><name pos:line="27" pos:column="28">mctx<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">-&gt;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="34">dfa<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">-&gt;<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="39">syntax<pos:position pos:line="27" pos:column="45"/></name></name> <operator pos:line="27" pos:column="46">&amp;<pos:position pos:line="27" pos:column="51"/></operator> <name pos:line="27" pos:column="48">RE_DOT_NEWLINE<pos:position pos:line="27" pos:column="62"/></name><operator pos:line="27" pos:column="62">)<pos:position pos:line="27" pos:column="63"/></operator><operator pos:line="27" pos:column="63">)<pos:position pos:line="27" pos:column="64"/></operator>
	  <operator pos:line="28" pos:column="11">||<pos:position pos:line="28" pos:column="13"/></operator> <operator pos:line="28" pos:column="14">(<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">ch<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">==<pos:position pos:line="28" pos:column="20"/></operator> <literal type="char" pos:line="28" pos:column="21">'\0'<pos:position pos:line="28" pos:column="25"/></literal> <operator pos:line="28" pos:column="26">&amp;&amp;<pos:position pos:line="28" pos:column="36"/></operator> <operator pos:line="28" pos:column="29">(<pos:position pos:line="28" pos:column="30"/></operator><name><name pos:line="28" pos:column="30">mctx<pos:position pos:line="28" pos:column="34"/></name><operator pos:line="28" pos:column="34">-&gt;<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="36">dfa<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">-&gt;<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="41">syntax<pos:position pos:line="28" pos:column="47"/></name></name> <operator pos:line="28" pos:column="48">&amp;<pos:position pos:line="28" pos:column="53"/></operator> <name pos:line="28" pos:column="50">RE_DOT_NOT_NULL<pos:position pos:line="28" pos:column="65"/></name><operator pos:line="28" pos:column="65">)<pos:position pos:line="28" pos:column="66"/></operator><operator pos:line="28" pos:column="66">)<pos:position pos:line="28" pos:column="67"/></operator></expr>)<pos:position pos:line="28" pos:column="68"/></condition><then pos:line="28" pos:column="68">
	<block type="pseudo"><return pos:line="29" pos:column="9">return <expr><literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr>;<pos:position pos:line="29" pos:column="18"/></return></block></then></if>
      <break pos:line="30" pos:column="7">break;<pos:position pos:line="30" pos:column="13"/></break>

    <default pos:line="32" pos:column="5">default:<pos:position pos:line="32" pos:column="13"/></default>
      <return pos:line="33" pos:column="7">return <expr><literal type="number" pos:line="33" pos:column="14">0<pos:position pos:line="33" pos:column="15"/></literal></expr>;<pos:position pos:line="33" pos:column="16"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></switch>

  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><name><name pos:line="36" pos:column="7">node<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">-&gt;<pos:position pos:line="36" pos:column="16"/></operator><name pos:line="36" pos:column="13">constraint<pos:position pos:line="36" pos:column="23"/></name></name></expr>)<pos:position pos:line="36" pos:column="24"/></condition><then pos:line="36" pos:column="24">
    <block pos:line="37" pos:column="5">{
      <comment type="block" pos:line="38" pos:column="7">/* The node has constraints.  Check whether the current context
	 satisfies the constraints.  */</comment>
      <decl_stmt><decl><type><name pos:line="40" pos:column="7">unsigned<pos:position pos:line="40" pos:column="15"/></name> <name pos:line="40" pos:column="16">int<pos:position pos:line="40" pos:column="19"/></name></type> <name pos:line="40" pos:column="20">context<pos:position pos:line="40" pos:column="27"/></name> <init pos:line="40" pos:column="28">= <expr><call><name pos:line="40" pos:column="30">re_string_context_at<pos:position pos:line="40" pos:column="50"/></name> <argument_list pos:line="40" pos:column="51">(<argument><expr><operator pos:line="40" pos:column="52">&amp;<pos:position pos:line="40" pos:column="57"/></operator><name><name pos:line="40" pos:column="53">mctx<pos:position pos:line="40" pos:column="57"/></name><operator pos:line="40" pos:column="57">-&gt;<pos:position pos:line="40" pos:column="62"/></operator><name pos:line="40" pos:column="59">input<pos:position pos:line="40" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="66">idx<pos:position pos:line="40" pos:column="69"/></name></expr></argument>,
						   <argument><expr><name><name pos:line="41" pos:column="52">mctx<pos:position pos:line="41" pos:column="56"/></name><operator pos:line="41" pos:column="56">-&gt;<pos:position pos:line="41" pos:column="61"/></operator><name pos:line="41" pos:column="58">eflags<pos:position pos:line="41" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="66"/></decl_stmt>
      <if pos:line="42" pos:column="7">if <condition pos:line="42" pos:column="10">(<expr><call><name pos:line="42" pos:column="11">NOT_SATISFY_NEXT_CONSTRAINT<pos:position pos:line="42" pos:column="38"/></name> <argument_list pos:line="42" pos:column="39">(<argument><expr><name><name pos:line="42" pos:column="40">node<pos:position pos:line="42" pos:column="44"/></name><operator pos:line="42" pos:column="44">-&gt;<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="46">constraint<pos:position pos:line="42" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="58">context<pos:position pos:line="42" pos:column="65"/></name></expr></argument>)<pos:position pos:line="42" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="67"/></condition><then pos:line="42" pos:column="67">
	<block type="pseudo"><return pos:line="43" pos:column="9">return <expr><literal type="number" pos:line="43" pos:column="16">0<pos:position pos:line="43" pos:column="17"/></literal></expr>;<pos:position pos:line="43" pos:column="18"/></return></block></then></if>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

  <return pos:line="46" pos:column="3">return <expr><literal type="number" pos:line="46" pos:column="10">1<pos:position pos:line="46" pos:column="11"/></literal></expr>;<pos:position pos:line="46" pos:column="12"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
