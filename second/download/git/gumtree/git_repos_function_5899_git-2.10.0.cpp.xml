<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5899_git-2.10.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">peel_ref<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><specifier pos:line="1" pos:column="14">const<pos:position pos:line="1" pos:column="19"/></specifier> <name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">refname<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">unsigned<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">sha1<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">flag<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">base<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">current_ref_iter<pos:position pos:line="6" pos:column="29"/></name> <operator pos:line="6" pos:column="30">&amp;&amp;<pos:position pos:line="6" pos:column="40"/></operator> <name><name pos:line="6" pos:column="33">current_ref_iter<pos:position pos:line="6" pos:column="49"/></name><operator pos:line="6" pos:column="49">-&gt;<pos:position pos:line="6" pos:column="54"/></operator><name pos:line="6" pos:column="51">refname<pos:position pos:line="6" pos:column="58"/></name></name> <operator pos:line="6" pos:column="59">==<pos:position pos:line="6" pos:column="61"/></operator> <name pos:line="6" pos:column="62">refname<pos:position pos:line="6" pos:column="69"/></name></expr>)<pos:position pos:line="6" pos:column="70"/></condition><then pos:line="6" pos:column="70"> <block pos:line="6" pos:column="71">{
		<decl_stmt><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">object_id<pos:position pos:line="7" pos:column="33"/></name></name></type> <name pos:line="7" pos:column="34">peeled<pos:position pos:line="7" pos:column="40"/></name></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>

		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><call><name pos:line="9" pos:column="21">ref_iterator_peel<pos:position pos:line="9" pos:column="38"/></name><argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">current_ref_iter<pos:position pos:line="9" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="57">&amp;<pos:position pos:line="9" pos:column="62"/></operator><name pos:line="9" pos:column="58">peeled<pos:position pos:line="9" pos:column="64"/></name></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="66"/></condition><then pos:line="9" pos:column="66">
			<block type="pseudo"><return pos:line="10" pos:column="25">return <expr><operator pos:line="10" pos:column="32">-<pos:position pos:line="10" pos:column="33"/></operator><literal type="number" pos:line="10" pos:column="33">1<pos:position pos:line="10" pos:column="34"/></literal></expr>;<pos:position pos:line="10" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">hashcpy<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">sha1<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="31">peeled<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">.<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="38">hash<pos:position pos:line="11" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">read_ref_full<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">refname<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">RESOLVE_REF_READING<pos:position pos:line="15" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="57">base<pos:position pos:line="15" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="63">&amp;<pos:position pos:line="15" pos:column="68"/></operator><name pos:line="15" pos:column="64">flag<pos:position pos:line="15" pos:column="68"/></name></expr></argument>)<pos:position pos:line="15" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="70"/></condition><then pos:line="15" pos:column="70">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">-<pos:position pos:line="16" pos:column="25"/></operator><literal type="number" pos:line="16" pos:column="25">1<pos:position pos:line="16" pos:column="26"/></literal></expr>;<pos:position pos:line="16" pos:column="27"/></return></block></then></if>

	<comment type="block" pos:line="18" pos:column="9">/*
	 * If the reference is packed, read its ref_entry from the
	 * cache in the hope that we already know its peeled value.
	 * We only try this optimization on packed references because
	 * (a) forcing the filling of the loose reference cache could
	 * be expensive and (b) loose references anyway usually do not
	 * have REF_KNOWS_PEELED.
	 */</comment>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">flag<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">&amp;<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="20">REF_ISPACKED<pos:position pos:line="26" pos:column="32"/></name></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33"> <block pos:line="26" pos:column="34">{
		<decl_stmt><decl><type><name><name pos:line="27" pos:column="17">struct<pos:position pos:line="27" pos:column="23"/></name> <name pos:line="27" pos:column="24">ref_entry<pos:position pos:line="27" pos:column="33"/></name></name> <modifier pos:line="27" pos:column="34">*<pos:position pos:line="27" pos:column="35"/></modifier></type><name pos:line="27" pos:column="35">r<pos:position pos:line="27" pos:column="36"/></name> <init pos:line="27" pos:column="37">= <expr><call><name pos:line="27" pos:column="39">get_packed_ref<pos:position pos:line="27" pos:column="53"/></name><argument_list pos:line="27" pos:column="53">(<argument><expr><name pos:line="27" pos:column="54">refname<pos:position pos:line="27" pos:column="61"/></name></expr></argument>)<pos:position pos:line="27" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="63"/></decl_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">r<pos:position pos:line="28" pos:column="22"/></name></expr>)<pos:position pos:line="28" pos:column="23"/></condition><then pos:line="28" pos:column="23"> <block pos:line="28" pos:column="24">{
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><call><name pos:line="29" pos:column="29">peel_entry<pos:position pos:line="29" pos:column="39"/></name><argument_list pos:line="29" pos:column="39">(<argument><expr><name pos:line="29" pos:column="40">r<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="43">0<pos:position pos:line="29" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="46"/></condition><then pos:line="29" pos:column="46">
				<block type="pseudo"><return pos:line="30" pos:column="33">return <expr><operator pos:line="30" pos:column="40">-<pos:position pos:line="30" pos:column="41"/></operator><literal type="number" pos:line="30" pos:column="41">1<pos:position pos:line="30" pos:column="42"/></literal></expr>;<pos:position pos:line="30" pos:column="43"/></return></block></then></if>
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">hashcpy<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">sha1<pos:position pos:line="31" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="39">r<pos:position pos:line="31" pos:column="40"/></name><operator pos:line="31" pos:column="40">-&gt;<pos:position pos:line="31" pos:column="45"/></operator><name pos:line="31" pos:column="42">u<pos:position pos:line="31" pos:column="43"/></name><operator pos:line="31" pos:column="43">.<pos:position pos:line="31" pos:column="44"/></operator><name pos:line="31" pos:column="44">value<pos:position pos:line="31" pos:column="49"/></name><operator pos:line="31" pos:column="49">.<pos:position pos:line="31" pos:column="50"/></operator><name pos:line="31" pos:column="50">peeled<pos:position pos:line="31" pos:column="56"/></name><operator pos:line="31" pos:column="56">.<pos:position pos:line="31" pos:column="57"/></operator><name pos:line="31" pos:column="57">hash<pos:position pos:line="31" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="63"/></expr_stmt>
			<return pos:line="32" pos:column="25">return <expr><literal type="number" pos:line="32" pos:column="32">0<pos:position pos:line="32" pos:column="33"/></literal></expr>;<pos:position pos:line="32" pos:column="34"/></return>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<return pos:line="36" pos:column="9">return <expr><call><name pos:line="36" pos:column="16">peel_object<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">(<argument><expr><name pos:line="36" pos:column="28">base<pos:position pos:line="36" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="34">sha1<pos:position pos:line="36" pos:column="38"/></name></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
