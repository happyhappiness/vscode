<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_473.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">add_possible_reference_from_superproject<pos:position pos:line="1" pos:column="52"/></name><parameter_list pos:line="1" pos:column="52">(
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">alternate_object_database<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">alt<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">void<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">sas_cb<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">submodule_alternate_setup<pos:position pos:line="4" pos:column="41"/></name></name> <modifier pos:line="4" pos:column="42">*<pos:position pos:line="4" pos:column="43"/></modifier></type><name pos:line="4" pos:column="43">sas<pos:position pos:line="4" pos:column="46"/></name> <init pos:line="4" pos:column="47">= <expr><name pos:line="4" pos:column="49">sas_cb<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * If the alternate object store is another repository, try the
	 * standard layout with .git/modules/&lt;name&gt;/objects
	 */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">ends_with<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name><name pos:line="10" pos:column="23">alt<pos:position pos:line="10" pos:column="26"/></name><operator pos:line="10" pos:column="26">-&gt;<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="28">path<pos:position pos:line="10" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="34">".git/objects"<pos:position pos:line="10" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="50"/></condition><then pos:line="10" pos:column="50"> <block pos:line="10" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">char<pos:position pos:line="11" pos:column="21"/></name> <modifier pos:line="11" pos:column="22">*<pos:position pos:line="11" pos:column="23"/></modifier></type><name pos:line="11" pos:column="23">sm_alternate<pos:position pos:line="11" pos:column="35"/></name></decl>;<pos:position pos:line="11" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">struct<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">strbuf<pos:position pos:line="12" pos:column="30"/></name></name></type> <name pos:line="12" pos:column="31">sb<pos:position pos:line="12" pos:column="33"/></name> <init pos:line="12" pos:column="34">= <expr><name pos:line="12" pos:column="36">STRBUF_INIT<pos:position pos:line="12" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="48"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">strbuf<pos:position pos:line="13" pos:column="30"/></name></name></type> <name pos:line="13" pos:column="31">err<pos:position pos:line="13" pos:column="34"/></name> <init pos:line="13" pos:column="35">= <expr><name pos:line="13" pos:column="37">STRBUF_INIT<pos:position pos:line="13" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="49"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_add<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><operator pos:line="14" pos:column="28">&amp;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="29">sb<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="33">alt<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">-&gt;<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="38">path<pos:position pos:line="14" pos:column="42"/></name></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="44">strlen<pos:position pos:line="14" pos:column="50"/></name><argument_list pos:line="14" pos:column="50">(<argument><expr><name><name pos:line="14" pos:column="51">alt<pos:position pos:line="14" pos:column="54"/></name><operator pos:line="14" pos:column="54">-&gt;<pos:position pos:line="14" pos:column="59"/></operator><name pos:line="14" pos:column="56">path<pos:position pos:line="14" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="61"/></argument_list></call> <operator pos:line="14" pos:column="62">-<pos:position pos:line="14" pos:column="63"/></operator> <call><name pos:line="14" pos:column="64">strlen<pos:position pos:line="14" pos:column="70"/></name><argument_list pos:line="14" pos:column="70">(<argument><expr><literal type="string" pos:line="14" pos:column="71">"objects"<pos:position pos:line="14" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="83"/></expr_stmt>

		<comment type="block" pos:line="16" pos:column="17">/*
		 * We need to end the new path with '/' to mark it as a dir,
		 * otherwise a submodule name containing '/' will be broken
		 * as the last part of a missing submodule reference would
		 * be taken as a file name.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">strbuf_addf<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><operator pos:line="22" pos:column="29">&amp;<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="30">sb<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="34">"modules/%s/"<pos:position pos:line="22" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="49">sas<pos:position pos:line="22" pos:column="52"/></name><operator pos:line="22" pos:column="52">-&gt;<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="54">submodule_name<pos:position pos:line="22" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="70"/></expr_stmt>

		<expr_stmt><expr><name pos:line="24" pos:column="17">sm_alternate<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">=<pos:position pos:line="24" pos:column="31"/></operator> <call><name pos:line="24" pos:column="32">compute_alternate_path<pos:position pos:line="24" pos:column="54"/></name><argument_list pos:line="24" pos:column="54">(<argument><expr><name><name pos:line="24" pos:column="55">sb<pos:position pos:line="24" pos:column="57"/></name><operator pos:line="24" pos:column="57">.<pos:position pos:line="24" pos:column="58"/></operator><name pos:line="24" pos:column="58">buf<pos:position pos:line="24" pos:column="61"/></name></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="63">&amp;<pos:position pos:line="24" pos:column="68"/></operator><name pos:line="24" pos:column="64">err<pos:position pos:line="24" pos:column="67"/></name></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">sm_alternate<pos:position pos:line="25" pos:column="33"/></name></expr>)<pos:position pos:line="25" pos:column="34"/></condition><then pos:line="25" pos:column="34"> <block pos:line="25" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">string_list_append<pos:position pos:line="26" pos:column="43"/></name><argument_list pos:line="26" pos:column="43">(<argument><expr><name><name pos:line="26" pos:column="44">sas<pos:position pos:line="26" pos:column="47"/></name><operator pos:line="26" pos:column="47">-&gt;<pos:position pos:line="26" pos:column="52"/></operator><name pos:line="26" pos:column="49">reference<pos:position pos:line="26" pos:column="58"/></name></name></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="60">xstrdup<pos:position pos:line="26" pos:column="67"/></name><argument_list pos:line="26" pos:column="67">(<argument><expr><name><name pos:line="26" pos:column="68">sb<pos:position pos:line="26" pos:column="70"/></name><operator pos:line="26" pos:column="70">.<pos:position pos:line="26" pos:column="71"/></operator><name pos:line="26" pos:column="71">buf<pos:position pos:line="26" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">free<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">sm_alternate<pos:position pos:line="27" pos:column="42"/></name></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="28" pos:column="18"/></block></then> <else pos:line="28" pos:column="19">else <block pos:line="28" pos:column="24">{
			<switch pos:line="29" pos:column="25">switch <condition pos:line="29" pos:column="32">(<expr><name><name pos:line="29" pos:column="33">sas<pos:position pos:line="29" pos:column="36"/></name><operator pos:line="29" pos:column="36">-&gt;<pos:position pos:line="29" pos:column="41"/></operator><name pos:line="29" pos:column="38">error_mode<pos:position pos:line="29" pos:column="48"/></name></name></expr>)<pos:position pos:line="29" pos:column="49"/></condition> <block pos:line="29" pos:column="50">{
			<case pos:line="30" pos:column="25">case <expr><name pos:line="30" pos:column="30">SUBMODULE_ALTERNATE_ERROR_DIE<pos:position pos:line="30" pos:column="59"/></name></expr>:<pos:position pos:line="30" pos:column="60"/></case>
				<expr_stmt><expr><call><name pos:line="31" pos:column="33">die<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><call><name pos:line="31" pos:column="37">_<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><literal type="string" pos:line="31" pos:column="39">"submodule '%s' cannot add alternate: %s"<pos:position pos:line="31" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="81"/></argument_list></call></expr></argument>,
				    <argument><expr><name><name pos:line="32" pos:column="37">sas<pos:position pos:line="32" pos:column="40"/></name><operator pos:line="32" pos:column="40">-&gt;<pos:position pos:line="32" pos:column="45"/></operator><name pos:line="32" pos:column="42">submodule_name<pos:position pos:line="32" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="58">err<pos:position pos:line="32" pos:column="61"/></name><operator pos:line="32" pos:column="61">.<pos:position pos:line="32" pos:column="62"/></operator><name pos:line="32" pos:column="62">buf<pos:position pos:line="32" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="67"/></expr_stmt>
			<case pos:line="33" pos:column="25">case <expr><name pos:line="33" pos:column="30">SUBMODULE_ALTERNATE_ERROR_INFO<pos:position pos:line="33" pos:column="60"/></name></expr>:<pos:position pos:line="33" pos:column="61"/></case>
				<expr_stmt><expr><call><name pos:line="34" pos:column="33">fprintf<pos:position pos:line="34" pos:column="40"/></name><argument_list pos:line="34" pos:column="40">(<argument><expr><name pos:line="34" pos:column="41">stderr<pos:position pos:line="34" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="49">_<pos:position pos:line="34" pos:column="50"/></name><argument_list pos:line="34" pos:column="50">(<argument><expr><literal type="string" pos:line="34" pos:column="51">"submodule '%s' cannot add alternate: %s"<pos:position pos:line="34" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="93"/></argument_list></call></expr></argument>,
					<argument><expr><name><name pos:line="35" pos:column="41">sas<pos:position pos:line="35" pos:column="44"/></name><operator pos:line="35" pos:column="44">-&gt;<pos:position pos:line="35" pos:column="49"/></operator><name pos:line="35" pos:column="46">submodule_name<pos:position pos:line="35" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="62">err<pos:position pos:line="35" pos:column="65"/></name><operator pos:line="35" pos:column="65">.<pos:position pos:line="35" pos:column="66"/></operator><name pos:line="35" pos:column="66">buf<pos:position pos:line="35" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="71"/></expr_stmt>
			<case pos:line="36" pos:column="25">case <expr><name pos:line="36" pos:column="30">SUBMODULE_ALTERNATE_ERROR_IGNORE<pos:position pos:line="36" pos:column="62"/></name></expr>:<pos:position pos:line="36" pos:column="63"/></case>
				<empty_stmt pos:line="37" pos:column="33">;<pos:position pos:line="37" pos:column="34"/></empty_stmt> <comment type="block" pos:line="37" pos:column="35">/* nothing */</comment>
			}<pos:position pos:line="38" pos:column="26"/></block></switch>
		}<pos:position pos:line="39" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">strbuf_release<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><operator pos:line="40" pos:column="32">&amp;<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="33">sb<pos:position pos:line="40" pos:column="35"/></name></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<return pos:line="43" pos:column="9">return <expr><literal type="number" pos:line="43" pos:column="16">0<pos:position pos:line="43" pos:column="17"/></literal></expr>;<pos:position pos:line="43" pos:column="18"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
