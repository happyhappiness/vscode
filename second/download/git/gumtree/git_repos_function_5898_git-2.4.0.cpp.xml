<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5898_git-2.4.0.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<cpp:ifdef pos:line="3" pos:column="1"># <cpp:directive pos:line="3" pos:column="3">ifdef<pos:position pos:line="3" pos:column="8"/></cpp:directive> <name pos:line="3" pos:column="9">RE_ENABLE_I18N<pos:position pos:line="3" pos:column="23"/></name></cpp:ifdef>
<name pos:line="4" pos:column="1">build_collating_symbol<pos:position pos:line="4" pos:column="23"/></name> <argument_list pos:line="4" pos:column="24">(<argument><expr><name pos:line="4" pos:column="25">bitset_t<pos:position pos:line="4" pos:column="33"/></name> <name pos:line="4" pos:column="34">sbcset<pos:position pos:line="4" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="42">re_charset_t<pos:position pos:line="4" pos:column="54"/></name> <operator pos:line="4" pos:column="55">*<pos:position pos:line="4" pos:column="56"/></operator><name pos:line="4" pos:column="56">mbcset<pos:position pos:line="4" pos:column="62"/></name></expr></argument>,
			<argument><expr><name pos:line="5" pos:column="25">int<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="30">coll_sym_alloc<pos:position pos:line="5" pos:column="44"/></name></expr></argument>, <argument><expr><specifier pos:line="5" pos:column="46">const<pos:position pos:line="5" pos:column="51"/></specifier> <name pos:line="5" pos:column="52">unsigned<pos:position pos:line="5" pos:column="60"/></name> <name pos:line="5" pos:column="61">char<pos:position pos:line="5" pos:column="65"/></name> <operator pos:line="5" pos:column="66">*<pos:position pos:line="5" pos:column="67"/></operator><name pos:line="5" pos:column="67">name<pos:position pos:line="5" pos:column="71"/></name></expr></argument>)<pos:position pos:line="5" pos:column="72"/></argument_list>
<cpp:else pos:line="6" pos:column="1"># <cpp:directive pos:line="6" pos:column="3">else<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:else> <comment type="block" pos:line="6" pos:column="8">/* not RE_ENABLE_I18N */</comment>
<name pos:line="7" pos:column="1">build_collating_symbol<pos:position pos:line="7" pos:column="23"/></name> <argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">bitset_t<pos:position pos:line="7" pos:column="33"/></name> <name pos:line="7" pos:column="34">sbcset<pos:position pos:line="7" pos:column="40"/></name></expr></argument>, <argument><expr><specifier pos:line="7" pos:column="42">const<pos:position pos:line="7" pos:column="47"/></specifier> <name pos:line="7" pos:column="48">unsigned<pos:position pos:line="7" pos:column="56"/></name> <name pos:line="7" pos:column="57">char<pos:position pos:line="7" pos:column="61"/></name> <operator pos:line="7" pos:column="62">*<pos:position pos:line="7" pos:column="63"/></operator><name pos:line="7" pos:column="63">name<pos:position pos:line="7" pos:column="67"/></name></expr></argument>)<pos:position pos:line="7" pos:column="68"/></argument_list>
<cpp:endif pos:line="8" pos:column="1"># <cpp:directive pos:line="8" pos:column="3">endif<pos:position pos:line="8" pos:column="8"/></cpp:directive></cpp:endif> <comment type="block" pos:line="8" pos:column="9">/* not RE_ENABLE_I18N */</comment>
<argument_list pos:line="9" pos:column="1">{
  <argument><expr><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">name_len<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">strlen<pos:position pos:line="10" pos:column="27"/></name> <argument_list pos:line="10" pos:column="28">(<argument><expr><operator pos:line="10" pos:column="29">(<pos:position pos:line="10" pos:column="30"/></operator><specifier pos:line="10" pos:column="30">const<pos:position pos:line="10" pos:column="35"/></specifier> <name pos:line="10" pos:column="36">char<pos:position pos:line="10" pos:column="40"/></name> <operator pos:line="10" pos:column="41">*<pos:position pos:line="10" pos:column="42"/></operator><operator pos:line="10" pos:column="42">)<pos:position pos:line="10" pos:column="43"/></operator> <name pos:line="10" pos:column="44">name<pos:position pos:line="10" pos:column="48"/></name></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr></argument>;
  if <argument><expr><operator pos:line="11" pos:column="6">(<pos:position pos:line="11" pos:column="7"/></operator><call><name pos:line="11" pos:column="7">BE<pos:position pos:line="11" pos:column="9"/></name> <argument_list pos:line="11" pos:column="10">(<argument><expr><name pos:line="11" pos:column="11">name_len<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">!=<pos:position pos:line="11" pos:column="22"/></operator> <literal type="number" pos:line="11" pos:column="23">1<pos:position pos:line="11" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="26">0<pos:position pos:line="11" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="28"/></argument_list></call><operator pos:line="11" pos:column="28">)<pos:position pos:line="11" pos:column="29"/></operator></expr></argument>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">REG_ECOLLATE<pos:position pos:line="12" pos:column="24"/></name></expr>;<pos:position pos:line="12" pos:column="25"/></return></argument_list></decl></decl_stmt>
  <else pos:line="13" pos:column="3">else
    <block pos:line="14" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">bitset_set<pos:position pos:line="15" pos:column="17"/></name> <argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">sbcset<pos:position pos:line="15" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="27">name<pos:position pos:line="15" pos:column="31"/></name><index pos:line="15" pos:column="31">[<expr><literal type="number" pos:line="15" pos:column="32">0<pos:position pos:line="15" pos:column="33"/></literal></expr>]<pos:position pos:line="15" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
      <return pos:line="16" pos:column="7">return <expr><name pos:line="16" pos:column="14">REG_NOERROR<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></else>
}</unit>
