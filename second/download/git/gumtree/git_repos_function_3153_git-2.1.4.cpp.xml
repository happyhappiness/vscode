<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3153_git-2.1.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_sha1_basic<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">str<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">len<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">unsigned<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">sha1<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> <name pos:line="3" pos:column="22">char<pos:position pos:line="3" pos:column="26"/></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier></type><name pos:line="3" pos:column="28">warn_msg<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><literal type="string" pos:line="3" pos:column="39">"refname '%.*s' is ambiguous."<pos:position pos:line="3" pos:column="69"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="70"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><specifier pos:line="4" pos:column="16">const<pos:position pos:line="4" pos:column="21"/></specifier> <name pos:line="4" pos:column="22">char<pos:position pos:line="4" pos:column="26"/></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">object_name_msg<pos:position pos:line="4" pos:column="43"/></name> <init pos:line="4" pos:column="44">= <expr><call><name pos:line="4" pos:column="46">N_<pos:position pos:line="4" pos:column="48"/></name><argument_list pos:line="4" pos:column="48">(
	<argument><expr><literal type="string" pos:line="5" pos:column="9">"Git normally never creates a ref that ends with 40 hex characters\n"<pos:position pos:line="5" pos:column="78"/></literal>
	<literal type="string" pos:line="6" pos:column="9">"because it will be ignored when you just specify 40-hex. These refs\n"<pos:position pos:line="6" pos:column="80"/></literal>
	<literal type="string" pos:line="7" pos:column="9">"may be created by mistake. For example,\n"<pos:position pos:line="7" pos:column="52"/></literal>
	<literal type="string" pos:line="8" pos:column="9">"\n"<pos:position pos:line="8" pos:column="13"/></literal>
	<literal type="string" pos:line="9" pos:column="9">"  git checkout -b $br $(git rev-parse ...)\n"<pos:position pos:line="9" pos:column="55"/></literal>
	<literal type="string" pos:line="10" pos:column="9">"\n"<pos:position pos:line="10" pos:column="13"/></literal>
	<literal type="string" pos:line="11" pos:column="9">"where \"$br\" is somehow empty and a 40-hex ref is created. Please\n"<pos:position pos:line="11" pos:column="79"/></literal>
	<literal type="string" pos:line="12" pos:column="9">"examine these refs and maybe delete them. Turn this message off by\n"<pos:position pos:line="12" pos:column="79"/></literal>
	<literal type="string" pos:line="13" pos:column="9">"running \"git config advice.objectNameWarning false\""<pos:position pos:line="13" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="66"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">unsigned<pos:position pos:line="14" pos:column="17"/></name> <name pos:line="14" pos:column="18">char<pos:position pos:line="14" pos:column="22"/></name></type> <name><name pos:line="14" pos:column="23">tmp_sha1<pos:position pos:line="14" pos:column="31"/></name><index pos:line="14" pos:column="31">[<expr><literal type="number" pos:line="14" pos:column="32">20<pos:position pos:line="14" pos:column="34"/></literal></expr>]<pos:position pos:line="14" pos:column="35"/></index></name></decl>;<pos:position pos:line="14" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">char<pos:position pos:line="15" pos:column="13"/></name> <modifier pos:line="15" pos:column="14">*<pos:position pos:line="15" pos:column="15"/></modifier></type><name pos:line="15" pos:column="15">real_ref<pos:position pos:line="15" pos:column="23"/></name> <init pos:line="15" pos:column="24">= <expr><name pos:line="15" pos:column="26">NULL<pos:position pos:line="15" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int<pos:position pos:line="16" pos:column="12"/></name></type> <name pos:line="16" pos:column="13">refs_found<pos:position pos:line="16" pos:column="23"/></name> <init pos:line="16" pos:column="24">= <expr><literal type="number" pos:line="16" pos:column="26">0<pos:position pos:line="16" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">int<pos:position pos:line="17" pos:column="12"/></name></type> <name pos:line="17" pos:column="13">at<pos:position pos:line="17" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="17" pos:column="17">reflog_len<pos:position pos:line="17" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="17" pos:column="29">nth_prior<pos:position pos:line="17" pos:column="38"/></name> <init pos:line="17" pos:column="39">= <expr><literal type="number" pos:line="17" pos:column="41">0<pos:position pos:line="17" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="43"/></decl_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">len<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">==<pos:position pos:line="19" pos:column="19"/></operator> <literal type="number" pos:line="19" pos:column="20">40<pos:position pos:line="19" pos:column="22"/></literal> <operator pos:line="19" pos:column="23">&amp;&amp;<pos:position pos:line="19" pos:column="33"/></operator> <operator pos:line="19" pos:column="26">!<pos:position pos:line="19" pos:column="27"/></operator><call><name pos:line="19" pos:column="27">get_sha1_hex<pos:position pos:line="19" pos:column="39"/></name><argument_list pos:line="19" pos:column="39">(<argument><expr><name pos:line="19" pos:column="40">str<pos:position pos:line="19" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">sha1<pos:position pos:line="19" pos:column="49"/></name></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="51"/></condition><then pos:line="19" pos:column="51"> <block pos:line="19" pos:column="52">{
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">warn_ambiguous_refs<pos:position pos:line="20" pos:column="40"/></name> <operator pos:line="20" pos:column="41">&amp;&amp;<pos:position pos:line="20" pos:column="51"/></operator> <name pos:line="20" pos:column="44">warn_on_object_refname_ambiguity<pos:position pos:line="20" pos:column="76"/></name></expr>)<pos:position pos:line="20" pos:column="77"/></condition><then pos:line="20" pos:column="77"> <block pos:line="20" pos:column="78">{
			<expr_stmt><expr><name pos:line="21" pos:column="25">refs_found<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">=<pos:position pos:line="21" pos:column="37"/></operator> <call><name pos:line="21" pos:column="38">dwim_ref<pos:position pos:line="21" pos:column="46"/></name><argument_list pos:line="21" pos:column="46">(<argument><expr><name pos:line="21" pos:column="47">str<pos:position pos:line="21" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="52">len<pos:position pos:line="21" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="57">tmp_sha1<pos:position pos:line="21" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="67">&amp;<pos:position pos:line="21" pos:column="72"/></operator><name pos:line="21" pos:column="68">real_ref<pos:position pos:line="21" pos:column="76"/></name></expr></argument>)<pos:position pos:line="21" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="78"/></expr_stmt>
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name pos:line="22" pos:column="29">refs_found<pos:position pos:line="22" pos:column="39"/></name> <operator pos:line="22" pos:column="40">&gt;<pos:position pos:line="22" pos:column="44"/></operator> <literal type="number" pos:line="22" pos:column="42">0<pos:position pos:line="22" pos:column="43"/></literal></expr>)<pos:position pos:line="22" pos:column="44"/></condition><then pos:line="22" pos:column="44"> <block pos:line="22" pos:column="45">{
				<expr_stmt><expr><call><name pos:line="23" pos:column="33">warning<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">(<argument><expr><name pos:line="23" pos:column="41">warn_msg<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="51">len<pos:position pos:line="23" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="56">str<pos:position pos:line="23" pos:column="59"/></name></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="61"/></expr_stmt>
				<if pos:line="24" pos:column="33">if <condition pos:line="24" pos:column="36">(<expr><name pos:line="24" pos:column="37">advice_object_name_warning<pos:position pos:line="24" pos:column="63"/></name></expr>)<pos:position pos:line="24" pos:column="64"/></condition><then pos:line="24" pos:column="64">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="41">fprintf<pos:position pos:line="25" pos:column="48"/></name><argument_list pos:line="25" pos:column="48">(<argument><expr><name pos:line="25" pos:column="49">stderr<pos:position pos:line="25" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="57">"%s\n"<pos:position pos:line="25" pos:column="63"/></literal></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="65">_<pos:position pos:line="25" pos:column="66"/></name><argument_list pos:line="25" pos:column="66">(<argument><expr><name pos:line="25" pos:column="67">object_name_msg<pos:position pos:line="25" pos:column="82"/></name></expr></argument>)<pos:position pos:line="25" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="85"/></expr_stmt></block></then></if>
			}<pos:position pos:line="26" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">free<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">real_ref<pos:position pos:line="27" pos:column="38"/></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>
		<return pos:line="29" pos:column="17">return <expr><literal type="number" pos:line="29" pos:column="24">0<pos:position pos:line="29" pos:column="25"/></literal></expr>;<pos:position pos:line="29" pos:column="26"/></return>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="32" pos:column="9">/* basic@{time or number or -number} format to query ref-log */</comment>
	<expr_stmt><expr><name pos:line="33" pos:column="9">reflog_len<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <name pos:line="33" pos:column="22">at<pos:position pos:line="33" pos:column="24"/></name> <operator pos:line="33" pos:column="25">=<pos:position pos:line="33" pos:column="26"/></operator> <literal type="number" pos:line="33" pos:column="27">0<pos:position pos:line="33" pos:column="28"/></literal></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">len<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">&amp;&amp;<pos:position pos:line="34" pos:column="27"/></operator> <name><name pos:line="34" pos:column="20">str<pos:position pos:line="34" pos:column="23"/></name><index pos:line="34" pos:column="23">[<expr><name pos:line="34" pos:column="24">len<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">-<pos:position pos:line="34" pos:column="28"/></operator><literal type="number" pos:line="34" pos:column="28">1<pos:position pos:line="34" pos:column="29"/></literal></expr>]<pos:position pos:line="34" pos:column="30"/></index></name> <operator pos:line="34" pos:column="31">==<pos:position pos:line="34" pos:column="33"/></operator> <literal type="char" pos:line="34" pos:column="34">'}'<pos:position pos:line="34" pos:column="37"/></literal></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38"> <block pos:line="34" pos:column="39">{
		<for pos:line="35" pos:column="17">for <control pos:line="35" pos:column="21">(<init><expr><name pos:line="35" pos:column="22">at<pos:position pos:line="35" pos:column="24"/></name> <operator pos:line="35" pos:column="25">=<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="27">len<pos:position pos:line="35" pos:column="30"/></name><operator pos:line="35" pos:column="30">-<pos:position pos:line="35" pos:column="31"/></operator><literal type="number" pos:line="35" pos:column="31">4<pos:position pos:line="35" pos:column="32"/></literal></expr>;<pos:position pos:line="35" pos:column="33"/></init> <condition><expr><name pos:line="35" pos:column="34">at<pos:position pos:line="35" pos:column="36"/></name> <operator pos:line="35" pos:column="37">&gt;=<pos:position pos:line="35" pos:column="42"/></operator> <literal type="number" pos:line="35" pos:column="40">0<pos:position pos:line="35" pos:column="41"/></literal></expr>;<pos:position pos:line="35" pos:column="42"/></condition> <incr><expr><name pos:line="35" pos:column="43">at<pos:position pos:line="35" pos:column="45"/></name><operator pos:line="35" pos:column="45">--<pos:position pos:line="35" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="48"/></control> <block pos:line="35" pos:column="49">{
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name><name pos:line="36" pos:column="29">str<pos:position pos:line="36" pos:column="32"/></name><index pos:line="36" pos:column="32">[<expr><name pos:line="36" pos:column="33">at<pos:position pos:line="36" pos:column="35"/></name></expr>]<pos:position pos:line="36" pos:column="36"/></index></name> <operator pos:line="36" pos:column="37">==<pos:position pos:line="36" pos:column="39"/></operator> <literal type="char" pos:line="36" pos:column="40">'@'<pos:position pos:line="36" pos:column="43"/></literal> <operator pos:line="36" pos:column="44">&amp;&amp;<pos:position pos:line="36" pos:column="54"/></operator> <name><name pos:line="36" pos:column="47">str<pos:position pos:line="36" pos:column="50"/></name><index pos:line="36" pos:column="50">[<expr><name pos:line="36" pos:column="51">at<pos:position pos:line="36" pos:column="53"/></name><operator pos:line="36" pos:column="53">+<pos:position pos:line="36" pos:column="54"/></operator><literal type="number" pos:line="36" pos:column="54">1<pos:position pos:line="36" pos:column="55"/></literal></expr>]<pos:position pos:line="36" pos:column="56"/></index></name> <operator pos:line="36" pos:column="57">==<pos:position pos:line="36" pos:column="59"/></operator> <literal type="char" pos:line="36" pos:column="60">'{'<pos:position pos:line="36" pos:column="63"/></literal></expr>)<pos:position pos:line="36" pos:column="64"/></condition><then pos:line="36" pos:column="64"> <block pos:line="36" pos:column="65">{
				<if pos:line="37" pos:column="33">if <condition pos:line="37" pos:column="36">(<expr><name><name pos:line="37" pos:column="37">str<pos:position pos:line="37" pos:column="40"/></name><index pos:line="37" pos:column="40">[<expr><name pos:line="37" pos:column="41">at<pos:position pos:line="37" pos:column="43"/></name><operator pos:line="37" pos:column="43">+<pos:position pos:line="37" pos:column="44"/></operator><literal type="number" pos:line="37" pos:column="44">2<pos:position pos:line="37" pos:column="45"/></literal></expr>]<pos:position pos:line="37" pos:column="46"/></index></name> <operator pos:line="37" pos:column="47">==<pos:position pos:line="37" pos:column="49"/></operator> <literal type="char" pos:line="37" pos:column="50">'-'<pos:position pos:line="37" pos:column="53"/></literal></expr>)<pos:position pos:line="37" pos:column="54"/></condition><then pos:line="37" pos:column="54"> <block pos:line="37" pos:column="55">{
					<if pos:line="38" pos:column="41">if <condition pos:line="38" pos:column="44">(<expr><name pos:line="38" pos:column="45">at<pos:position pos:line="38" pos:column="47"/></name> <operator pos:line="38" pos:column="48">!=<pos:position pos:line="38" pos:column="50"/></operator> <literal type="number" pos:line="38" pos:column="51">0<pos:position pos:line="38" pos:column="52"/></literal></expr>)<pos:position pos:line="38" pos:column="53"/></condition><then pos:line="38" pos:column="53">
						<comment type="block" pos:line="39" pos:column="49">/* @{-N} not at start */</comment>
						<block type="pseudo"><return pos:line="40" pos:column="49">return <expr><operator pos:line="40" pos:column="56">-<pos:position pos:line="40" pos:column="57"/></operator><literal type="number" pos:line="40" pos:column="57">1<pos:position pos:line="40" pos:column="58"/></literal></expr>;<pos:position pos:line="40" pos:column="59"/></return></block></then></if>
					<expr_stmt><expr><name pos:line="41" pos:column="41">nth_prior<pos:position pos:line="41" pos:column="50"/></name> <operator pos:line="41" pos:column="51">=<pos:position pos:line="41" pos:column="52"/></operator> <literal type="number" pos:line="41" pos:column="53">1<pos:position pos:line="41" pos:column="54"/></literal></expr>;<pos:position pos:line="41" pos:column="55"/></expr_stmt>
					<continue pos:line="42" pos:column="41">continue;<pos:position pos:line="42" pos:column="50"/></continue>
				}<pos:position pos:line="43" pos:column="34"/></block></then></if>
				<if pos:line="44" pos:column="33">if <condition pos:line="44" pos:column="36">(<expr><operator pos:line="44" pos:column="37">!<pos:position pos:line="44" pos:column="38"/></operator><call><name pos:line="44" pos:column="38">upstream_mark<pos:position pos:line="44" pos:column="51"/></name><argument_list pos:line="44" pos:column="51">(<argument><expr><name pos:line="44" pos:column="52">str<pos:position pos:line="44" pos:column="55"/></name> <operator pos:line="44" pos:column="56">+<pos:position pos:line="44" pos:column="57"/></operator> <name pos:line="44" pos:column="58">at<pos:position pos:line="44" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="62">len<pos:position pos:line="44" pos:column="65"/></name> <operator pos:line="44" pos:column="66">-<pos:position pos:line="44" pos:column="67"/></operator> <name pos:line="44" pos:column="68">at<pos:position pos:line="44" pos:column="70"/></name></expr></argument>)<pos:position pos:line="44" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="72"/></condition><then pos:line="44" pos:column="72"> <block pos:line="44" pos:column="73">{
					<expr_stmt><expr><name pos:line="45" pos:column="41">reflog_len<pos:position pos:line="45" pos:column="51"/></name> <operator pos:line="45" pos:column="52">=<pos:position pos:line="45" pos:column="53"/></operator> <operator pos:line="45" pos:column="54">(<pos:position pos:line="45" pos:column="55"/></operator><name pos:line="45" pos:column="55">len<pos:position pos:line="45" pos:column="58"/></name><operator pos:line="45" pos:column="58">-<pos:position pos:line="45" pos:column="59"/></operator><literal type="number" pos:line="45" pos:column="59">1<pos:position pos:line="45" pos:column="60"/></literal><operator pos:line="45" pos:column="60">)<pos:position pos:line="45" pos:column="61"/></operator> <operator pos:line="45" pos:column="62">-<pos:position pos:line="45" pos:column="63"/></operator> <operator pos:line="45" pos:column="64">(<pos:position pos:line="45" pos:column="65"/></operator><name pos:line="45" pos:column="65">at<pos:position pos:line="45" pos:column="67"/></name><operator pos:line="45" pos:column="67">+<pos:position pos:line="45" pos:column="68"/></operator><literal type="number" pos:line="45" pos:column="68">2<pos:position pos:line="45" pos:column="69"/></literal><operator pos:line="45" pos:column="69">)<pos:position pos:line="45" pos:column="70"/></operator></expr>;<pos:position pos:line="45" pos:column="71"/></expr_stmt>
					<expr_stmt><expr><name pos:line="46" pos:column="41">len<pos:position pos:line="46" pos:column="44"/></name> <operator pos:line="46" pos:column="45">=<pos:position pos:line="46" pos:column="46"/></operator> <name pos:line="46" pos:column="47">at<pos:position pos:line="46" pos:column="49"/></name></expr>;<pos:position pos:line="46" pos:column="50"/></expr_stmt>
				}<pos:position pos:line="47" pos:column="34"/></block></then></if>
				<break pos:line="48" pos:column="33">break;<pos:position pos:line="48" pos:column="39"/></break>
			}<pos:position pos:line="49" pos:column="26"/></block></then></if>
		}<pos:position pos:line="50" pos:column="18"/></block></for>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="53" pos:column="9">/* Accept only unambiguous ref paths. */</comment>
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">len<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">&amp;&amp;<pos:position pos:line="54" pos:column="27"/></operator> <call><name pos:line="54" pos:column="20">ambiguous_path<pos:position pos:line="54" pos:column="34"/></name><argument_list pos:line="54" pos:column="34">(<argument><expr><name pos:line="54" pos:column="35">str<pos:position pos:line="54" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="40">len<pos:position pos:line="54" pos:column="43"/></name></expr></argument>)<pos:position pos:line="54" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="45"/></condition><then pos:line="54" pos:column="45">
		<block type="pseudo"><return pos:line="55" pos:column="17">return <expr><operator pos:line="55" pos:column="24">-<pos:position pos:line="55" pos:column="25"/></operator><literal type="number" pos:line="55" pos:column="25">1<pos:position pos:line="55" pos:column="26"/></literal></expr>;<pos:position pos:line="55" pos:column="27"/></return></block></then></if>

	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">nth_prior<pos:position pos:line="57" pos:column="22"/></name></expr>)<pos:position pos:line="57" pos:column="23"/></condition><then pos:line="57" pos:column="23"> <block pos:line="57" pos:column="24">{
		<decl_stmt><decl><type><name><name pos:line="58" pos:column="17">struct<pos:position pos:line="58" pos:column="23"/></name> <name pos:line="58" pos:column="24">strbuf<pos:position pos:line="58" pos:column="30"/></name></name></type> <name pos:line="58" pos:column="31">buf<pos:position pos:line="58" pos:column="34"/></name> <init pos:line="58" pos:column="35">= <expr><name pos:line="58" pos:column="37">STRBUF_INIT<pos:position pos:line="58" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="58" pos:column="49"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">int<pos:position pos:line="59" pos:column="20"/></name></type> <name pos:line="59" pos:column="21">detached<pos:position pos:line="59" pos:column="29"/></name></decl>;<pos:position pos:line="59" pos:column="30"/></decl_stmt>

		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><call><name pos:line="61" pos:column="21">interpret_nth_prior_checkout<pos:position pos:line="61" pos:column="49"/></name><argument_list pos:line="61" pos:column="49">(<argument><expr><name pos:line="61" pos:column="50">str<pos:position pos:line="61" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="55">len<pos:position pos:line="61" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="60">&amp;<pos:position pos:line="61" pos:column="65"/></operator><name pos:line="61" pos:column="61">buf<pos:position pos:line="61" pos:column="64"/></name></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></call> <operator pos:line="61" pos:column="66">&gt;<pos:position pos:line="61" pos:column="70"/></operator> <literal type="number" pos:line="61" pos:column="68">0<pos:position pos:line="61" pos:column="69"/></literal></expr>)<pos:position pos:line="61" pos:column="70"/></condition><then pos:line="61" pos:column="70"> <block pos:line="61" pos:column="71">{
			<expr_stmt><expr><name pos:line="62" pos:column="25">detached<pos:position pos:line="62" pos:column="33"/></name> <operator pos:line="62" pos:column="34">=<pos:position pos:line="62" pos:column="35"/></operator> <operator pos:line="62" pos:column="36">(<pos:position pos:line="62" pos:column="37"/></operator><name><name pos:line="62" pos:column="37">buf<pos:position pos:line="62" pos:column="40"/></name><operator pos:line="62" pos:column="40">.<pos:position pos:line="62" pos:column="41"/></operator><name pos:line="62" pos:column="41">len<pos:position pos:line="62" pos:column="44"/></name></name> <operator pos:line="62" pos:column="45">==<pos:position pos:line="62" pos:column="47"/></operator> <literal type="number" pos:line="62" pos:column="48">40<pos:position pos:line="62" pos:column="50"/></literal> <operator pos:line="62" pos:column="51">&amp;&amp;<pos:position pos:line="62" pos:column="61"/></operator> <operator pos:line="62" pos:column="54">!<pos:position pos:line="62" pos:column="55"/></operator><call><name pos:line="62" pos:column="55">get_sha1_hex<pos:position pos:line="62" pos:column="67"/></name><argument_list pos:line="62" pos:column="67">(<argument><expr><name><name pos:line="62" pos:column="68">buf<pos:position pos:line="62" pos:column="71"/></name><operator pos:line="62" pos:column="71">.<pos:position pos:line="62" pos:column="72"/></operator><name pos:line="62" pos:column="72">buf<pos:position pos:line="62" pos:column="75"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="77">sha1<pos:position pos:line="62" pos:column="81"/></name></expr></argument>)<pos:position pos:line="62" pos:column="82"/></argument_list></call><operator pos:line="62" pos:column="82">)<pos:position pos:line="62" pos:column="83"/></operator></expr>;<pos:position pos:line="62" pos:column="84"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">strbuf_release<pos:position pos:line="63" pos:column="39"/></name><argument_list pos:line="63" pos:column="39">(<argument><expr><operator pos:line="63" pos:column="40">&amp;<pos:position pos:line="63" pos:column="45"/></operator><name pos:line="63" pos:column="41">buf<pos:position pos:line="63" pos:column="44"/></name></expr></argument>)<pos:position pos:line="63" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="46"/></expr_stmt>
			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><name pos:line="64" pos:column="29">detached<pos:position pos:line="64" pos:column="37"/></name></expr>)<pos:position pos:line="64" pos:column="38"/></condition><then pos:line="64" pos:column="38">
				<block type="pseudo"><return pos:line="65" pos:column="33">return <expr><literal type="number" pos:line="65" pos:column="40">0<pos:position pos:line="65" pos:column="41"/></literal></expr>;<pos:position pos:line="65" pos:column="42"/></return></block></then></if>
		}<pos:position pos:line="66" pos:column="18"/></block></then></if>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if>

	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><operator pos:line="69" pos:column="13">!<pos:position pos:line="69" pos:column="14"/></operator><name pos:line="69" pos:column="14">len<pos:position pos:line="69" pos:column="17"/></name> <operator pos:line="69" pos:column="18">&amp;&amp;<pos:position pos:line="69" pos:column="28"/></operator> <name pos:line="69" pos:column="21">reflog_len<pos:position pos:line="69" pos:column="31"/></name></expr>)<pos:position pos:line="69" pos:column="32"/></condition><then pos:line="69" pos:column="32">
		<comment type="block" pos:line="70" pos:column="17">/* allow "@{...}" to mean the current branch reflog */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="17">refs_found<pos:position pos:line="71" pos:column="27"/></name> <operator pos:line="71" pos:column="28">=<pos:position pos:line="71" pos:column="29"/></operator> <call><name pos:line="71" pos:column="30">dwim_ref<pos:position pos:line="71" pos:column="38"/></name><argument_list pos:line="71" pos:column="38">(<argument><expr><literal type="string" pos:line="71" pos:column="39">"HEAD"<pos:position pos:line="71" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="47">4<pos:position pos:line="71" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="50">sha1<pos:position pos:line="71" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="56">&amp;<pos:position pos:line="71" pos:column="61"/></operator><name pos:line="71" pos:column="57">real_ref<pos:position pos:line="71" pos:column="65"/></name></expr></argument>)<pos:position pos:line="71" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="67"/></expr_stmt></block></then>
	<elseif pos:line="72" pos:column="9">else <if pos:line="72" pos:column="14">if <condition pos:line="72" pos:column="17">(<expr><name pos:line="72" pos:column="18">reflog_len<pos:position pos:line="72" pos:column="28"/></name></expr>)<pos:position pos:line="72" pos:column="29"/></condition><then pos:line="72" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="17">refs_found<pos:position pos:line="73" pos:column="27"/></name> <operator pos:line="73" pos:column="28">=<pos:position pos:line="73" pos:column="29"/></operator> <call><name pos:line="73" pos:column="30">dwim_log<pos:position pos:line="73" pos:column="38"/></name><argument_list pos:line="73" pos:column="38">(<argument><expr><name pos:line="73" pos:column="39">str<pos:position pos:line="73" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="44">len<pos:position pos:line="73" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="49">sha1<pos:position pos:line="73" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="55">&amp;<pos:position pos:line="73" pos:column="60"/></operator><name pos:line="73" pos:column="56">real_ref<pos:position pos:line="73" pos:column="64"/></name></expr></argument>)<pos:position pos:line="73" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="66"/></expr_stmt></block></then></if></elseif>
	<else pos:line="74" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="75" pos:column="17">refs_found<pos:position pos:line="75" pos:column="27"/></name> <operator pos:line="75" pos:column="28">=<pos:position pos:line="75" pos:column="29"/></operator> <call><name pos:line="75" pos:column="30">dwim_ref<pos:position pos:line="75" pos:column="38"/></name><argument_list pos:line="75" pos:column="38">(<argument><expr><name pos:line="75" pos:column="39">str<pos:position pos:line="75" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="44">len<pos:position pos:line="75" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="49">sha1<pos:position pos:line="75" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="55">&amp;<pos:position pos:line="75" pos:column="60"/></operator><name pos:line="75" pos:column="56">real_ref<pos:position pos:line="75" pos:column="64"/></name></expr></argument>)<pos:position pos:line="75" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="66"/></expr_stmt></block></else></if>

	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><operator pos:line="77" pos:column="13">!<pos:position pos:line="77" pos:column="14"/></operator><name pos:line="77" pos:column="14">refs_found<pos:position pos:line="77" pos:column="24"/></name></expr>)<pos:position pos:line="77" pos:column="25"/></condition><then pos:line="77" pos:column="25">
		<block type="pseudo"><return pos:line="78" pos:column="17">return <expr><operator pos:line="78" pos:column="24">-<pos:position pos:line="78" pos:column="25"/></operator><literal type="number" pos:line="78" pos:column="25">1<pos:position pos:line="78" pos:column="26"/></literal></expr>;<pos:position pos:line="78" pos:column="27"/></return></block></then></if>

	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">warn_ambiguous_refs<pos:position pos:line="80" pos:column="32"/></name> <operator pos:line="80" pos:column="33">&amp;&amp;<pos:position pos:line="80" pos:column="43"/></operator>
	    <operator pos:line="81" pos:column="13">(<pos:position pos:line="81" pos:column="14"/></operator><name pos:line="81" pos:column="14">refs_found<pos:position pos:line="81" pos:column="24"/></name> <operator pos:line="81" pos:column="25">&gt;<pos:position pos:line="81" pos:column="29"/></operator> <literal type="number" pos:line="81" pos:column="27">1<pos:position pos:line="81" pos:column="28"/></literal> <operator pos:line="81" pos:column="29">||<pos:position pos:line="81" pos:column="31"/></operator>
	     <operator pos:line="82" pos:column="14">!<pos:position pos:line="82" pos:column="15"/></operator><call><name pos:line="82" pos:column="15">get_short_sha1<pos:position pos:line="82" pos:column="29"/></name><argument_list pos:line="82" pos:column="29">(<argument><expr><name pos:line="82" pos:column="30">str<pos:position pos:line="82" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="35">len<pos:position pos:line="82" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="40">tmp_sha1<pos:position pos:line="82" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="50">GET_SHA1_QUIETLY<pos:position pos:line="82" pos:column="66"/></name></expr></argument>)<pos:position pos:line="82" pos:column="67"/></argument_list></call><operator pos:line="82" pos:column="67">)<pos:position pos:line="82" pos:column="68"/></operator></expr>)<pos:position pos:line="82" pos:column="69"/></condition><then pos:line="82" pos:column="69">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="17">warning<pos:position pos:line="83" pos:column="24"/></name><argument_list pos:line="83" pos:column="24">(<argument><expr><name pos:line="83" pos:column="25">warn_msg<pos:position pos:line="83" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="35">len<pos:position pos:line="83" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="40">str<pos:position pos:line="83" pos:column="43"/></name></expr></argument>)<pos:position pos:line="83" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="45"/></expr_stmt></block></then></if>

	<if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name pos:line="85" pos:column="13">reflog_len<pos:position pos:line="85" pos:column="23"/></name></expr>)<pos:position pos:line="85" pos:column="24"/></condition><then pos:line="85" pos:column="24"> <block pos:line="85" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="86" pos:column="17">int<pos:position pos:line="86" pos:column="20"/></name></type> <name pos:line="86" pos:column="21">nth<pos:position pos:line="86" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="86" pos:column="26">i<pos:position pos:line="86" pos:column="27"/></name></decl>;<pos:position pos:line="86" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="87" pos:column="17">unsigned<pos:position pos:line="87" pos:column="25"/></name> <name pos:line="87" pos:column="26">long<pos:position pos:line="87" pos:column="30"/></name></type> <name pos:line="87" pos:column="31">at_time<pos:position pos:line="87" pos:column="38"/></name></decl>;<pos:position pos:line="87" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="88" pos:column="17">unsigned<pos:position pos:line="88" pos:column="25"/></name> <name pos:line="88" pos:column="26">long<pos:position pos:line="88" pos:column="30"/></name></type> <name pos:line="88" pos:column="31">co_time<pos:position pos:line="88" pos:column="38"/></name></decl>;<pos:position pos:line="88" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="89" pos:column="17">int<pos:position pos:line="89" pos:column="20"/></name></type> <name pos:line="89" pos:column="21">co_tz<pos:position pos:line="89" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="89" pos:column="28">co_cnt<pos:position pos:line="89" pos:column="34"/></name></decl>;<pos:position pos:line="89" pos:column="35"/></decl_stmt>

		<comment type="block" pos:line="91" pos:column="17">/* Is it asking for N-th entry, or approxidate? */</comment>
		<for pos:line="92" pos:column="17">for <control pos:line="92" pos:column="21">(<init><expr><name pos:line="92" pos:column="22">i<pos:position pos:line="92" pos:column="23"/></name> <operator pos:line="92" pos:column="24">=<pos:position pos:line="92" pos:column="25"/></operator> <name pos:line="92" pos:column="26">nth<pos:position pos:line="92" pos:column="29"/></name> <operator pos:line="92" pos:column="30">=<pos:position pos:line="92" pos:column="31"/></operator> <literal type="number" pos:line="92" pos:column="32">0<pos:position pos:line="92" pos:column="33"/></literal></expr>;<pos:position pos:line="92" pos:column="34"/></init> <condition><expr><literal type="number" pos:line="92" pos:column="35">0<pos:position pos:line="92" pos:column="36"/></literal> <operator pos:line="92" pos:column="37">&lt;=<pos:position pos:line="92" pos:column="42"/></operator> <name pos:line="92" pos:column="40">nth<pos:position pos:line="92" pos:column="43"/></name> <operator pos:line="92" pos:column="44">&amp;&amp;<pos:position pos:line="92" pos:column="54"/></operator> <name pos:line="92" pos:column="47">i<pos:position pos:line="92" pos:column="48"/></name> <operator pos:line="92" pos:column="49">&lt;<pos:position pos:line="92" pos:column="53"/></operator> <name pos:line="92" pos:column="51">reflog_len<pos:position pos:line="92" pos:column="61"/></name></expr>;<pos:position pos:line="92" pos:column="62"/></condition> <incr><expr><name pos:line="92" pos:column="63">i<pos:position pos:line="92" pos:column="64"/></name><operator pos:line="92" pos:column="64">++<pos:position pos:line="92" pos:column="66"/></operator></expr></incr>)<pos:position pos:line="92" pos:column="67"/></control> <block pos:line="92" pos:column="68">{
			<decl_stmt><decl><type><name pos:line="93" pos:column="25">char<pos:position pos:line="93" pos:column="29"/></name></type> <name pos:line="93" pos:column="30">ch<pos:position pos:line="93" pos:column="32"/></name> <init pos:line="93" pos:column="33">= <expr><name><name pos:line="93" pos:column="35">str<pos:position pos:line="93" pos:column="38"/></name><index pos:line="93" pos:column="38">[<expr><name pos:line="93" pos:column="39">at<pos:position pos:line="93" pos:column="41"/></name><operator pos:line="93" pos:column="41">+<pos:position pos:line="93" pos:column="42"/></operator><literal type="number" pos:line="93" pos:column="42">2<pos:position pos:line="93" pos:column="43"/></literal><operator pos:line="93" pos:column="43">+<pos:position pos:line="93" pos:column="44"/></operator><name pos:line="93" pos:column="44">i<pos:position pos:line="93" pos:column="45"/></name></expr>]<pos:position pos:line="93" pos:column="46"/></index></name></expr></init></decl>;<pos:position pos:line="93" pos:column="47"/></decl_stmt>
			<if pos:line="94" pos:column="25">if <condition pos:line="94" pos:column="28">(<expr><literal type="char" pos:line="94" pos:column="29">'0'<pos:position pos:line="94" pos:column="32"/></literal> <operator pos:line="94" pos:column="33">&lt;=<pos:position pos:line="94" pos:column="38"/></operator> <name pos:line="94" pos:column="36">ch<pos:position pos:line="94" pos:column="38"/></name> <operator pos:line="94" pos:column="39">&amp;&amp;<pos:position pos:line="94" pos:column="49"/></operator> <name pos:line="94" pos:column="42">ch<pos:position pos:line="94" pos:column="44"/></name> <operator pos:line="94" pos:column="45">&lt;=<pos:position pos:line="94" pos:column="50"/></operator> <literal type="char" pos:line="94" pos:column="48">'9'<pos:position pos:line="94" pos:column="51"/></literal></expr>)<pos:position pos:line="94" pos:column="52"/></condition><then pos:line="94" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><name pos:line="95" pos:column="33">nth<pos:position pos:line="95" pos:column="36"/></name> <operator pos:line="95" pos:column="37">=<pos:position pos:line="95" pos:column="38"/></operator> <name pos:line="95" pos:column="39">nth<pos:position pos:line="95" pos:column="42"/></name> <operator pos:line="95" pos:column="43">*<pos:position pos:line="95" pos:column="44"/></operator> <literal type="number" pos:line="95" pos:column="45">10<pos:position pos:line="95" pos:column="47"/></literal> <operator pos:line="95" pos:column="48">+<pos:position pos:line="95" pos:column="49"/></operator> <name pos:line="95" pos:column="50">ch<pos:position pos:line="95" pos:column="52"/></name> <operator pos:line="95" pos:column="53">-<pos:position pos:line="95" pos:column="54"/></operator> <literal type="char" pos:line="95" pos:column="55">'0'<pos:position pos:line="95" pos:column="58"/></literal></expr>;<pos:position pos:line="95" pos:column="59"/></expr_stmt></block></then>
			<else pos:line="96" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="97" pos:column="33">nth<pos:position pos:line="97" pos:column="36"/></name> <operator pos:line="97" pos:column="37">=<pos:position pos:line="97" pos:column="38"/></operator> <operator pos:line="97" pos:column="39">-<pos:position pos:line="97" pos:column="40"/></operator><literal type="number" pos:line="97" pos:column="40">1<pos:position pos:line="97" pos:column="41"/></literal></expr>;<pos:position pos:line="97" pos:column="42"/></expr_stmt></block></else></if>
		}<pos:position pos:line="98" pos:column="18"/></block></for>
		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><literal type="number" pos:line="99" pos:column="21">100000000<pos:position pos:line="99" pos:column="30"/></literal> <operator pos:line="99" pos:column="31">&lt;=<pos:position pos:line="99" pos:column="36"/></operator> <name pos:line="99" pos:column="34">nth<pos:position pos:line="99" pos:column="37"/></name></expr>)<pos:position pos:line="99" pos:column="38"/></condition><then pos:line="99" pos:column="38"> <block pos:line="99" pos:column="39">{
			<expr_stmt><expr><name pos:line="100" pos:column="25">at_time<pos:position pos:line="100" pos:column="32"/></name> <operator pos:line="100" pos:column="33">=<pos:position pos:line="100" pos:column="34"/></operator> <name pos:line="100" pos:column="35">nth<pos:position pos:line="100" pos:column="38"/></name></expr>;<pos:position pos:line="100" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="101" pos:column="25">nth<pos:position pos:line="101" pos:column="28"/></name> <operator pos:line="101" pos:column="29">=<pos:position pos:line="101" pos:column="30"/></operator> <operator pos:line="101" pos:column="31">-<pos:position pos:line="101" pos:column="32"/></operator><literal type="number" pos:line="101" pos:column="32">1<pos:position pos:line="101" pos:column="33"/></literal></expr>;<pos:position pos:line="101" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="102" pos:column="18"/></block></then> <elseif pos:line="102" pos:column="19">else <if pos:line="102" pos:column="24">if <condition pos:line="102" pos:column="27">(<expr><literal type="number" pos:line="102" pos:column="28">0<pos:position pos:line="102" pos:column="29"/></literal> <operator pos:line="102" pos:column="30">&lt;=<pos:position pos:line="102" pos:column="35"/></operator> <name pos:line="102" pos:column="33">nth<pos:position pos:line="102" pos:column="36"/></name></expr>)<pos:position pos:line="102" pos:column="37"/></condition><then pos:line="102" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><name pos:line="103" pos:column="25">at_time<pos:position pos:line="103" pos:column="32"/></name> <operator pos:line="103" pos:column="33">=<pos:position pos:line="103" pos:column="34"/></operator> <literal type="number" pos:line="103" pos:column="35">0<pos:position pos:line="103" pos:column="36"/></literal></expr>;<pos:position pos:line="103" pos:column="37"/></expr_stmt></block></then></if></elseif>
		<else pos:line="104" pos:column="17">else <block pos:line="104" pos:column="22">{
			<decl_stmt><decl><type><name pos:line="105" pos:column="25">int<pos:position pos:line="105" pos:column="28"/></name></type> <name pos:line="105" pos:column="29">errors<pos:position pos:line="105" pos:column="35"/></name> <init pos:line="105" pos:column="36">= <expr><literal type="number" pos:line="105" pos:column="38">0<pos:position pos:line="105" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="105" pos:column="40"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="106" pos:column="25">char<pos:position pos:line="106" pos:column="29"/></name> <modifier pos:line="106" pos:column="30">*<pos:position pos:line="106" pos:column="31"/></modifier></type><name pos:line="106" pos:column="31">tmp<pos:position pos:line="106" pos:column="34"/></name> <init pos:line="106" pos:column="35">= <expr><call><name pos:line="106" pos:column="37">xstrndup<pos:position pos:line="106" pos:column="45"/></name><argument_list pos:line="106" pos:column="45">(<argument><expr><name pos:line="106" pos:column="46">str<pos:position pos:line="106" pos:column="49"/></name> <operator pos:line="106" pos:column="50">+<pos:position pos:line="106" pos:column="51"/></operator> <name pos:line="106" pos:column="52">at<pos:position pos:line="106" pos:column="54"/></name> <operator pos:line="106" pos:column="55">+<pos:position pos:line="106" pos:column="56"/></operator> <literal type="number" pos:line="106" pos:column="57">2<pos:position pos:line="106" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="60">reflog_len<pos:position pos:line="106" pos:column="70"/></name></expr></argument>)<pos:position pos:line="106" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="106" pos:column="72"/></decl_stmt>
			<expr_stmt><expr><name pos:line="107" pos:column="25">at_time<pos:position pos:line="107" pos:column="32"/></name> <operator pos:line="107" pos:column="33">=<pos:position pos:line="107" pos:column="34"/></operator> <call><name pos:line="107" pos:column="35">approxidate_careful<pos:position pos:line="107" pos:column="54"/></name><argument_list pos:line="107" pos:column="54">(<argument><expr><name pos:line="107" pos:column="55">tmp<pos:position pos:line="107" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="107" pos:column="60">&amp;<pos:position pos:line="107" pos:column="65"/></operator><name pos:line="107" pos:column="61">errors<pos:position pos:line="107" pos:column="67"/></name></expr></argument>)<pos:position pos:line="107" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="108" pos:column="25">free<pos:position pos:line="108" pos:column="29"/></name><argument_list pos:line="108" pos:column="29">(<argument><expr><name pos:line="108" pos:column="30">tmp<pos:position pos:line="108" pos:column="33"/></name></expr></argument>)<pos:position pos:line="108" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="35"/></expr_stmt>
			<if pos:line="109" pos:column="25">if <condition pos:line="109" pos:column="28">(<expr><name pos:line="109" pos:column="29">errors<pos:position pos:line="109" pos:column="35"/></name></expr>)<pos:position pos:line="109" pos:column="36"/></condition><then pos:line="109" pos:column="36"> <block pos:line="109" pos:column="37">{
				<expr_stmt><expr><call><name pos:line="110" pos:column="33">free<pos:position pos:line="110" pos:column="37"/></name><argument_list pos:line="110" pos:column="37">(<argument><expr><name pos:line="110" pos:column="38">real_ref<pos:position pos:line="110" pos:column="46"/></name></expr></argument>)<pos:position pos:line="110" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="48"/></expr_stmt>
				<return pos:line="111" pos:column="33">return <expr><operator pos:line="111" pos:column="40">-<pos:position pos:line="111" pos:column="41"/></operator><literal type="number" pos:line="111" pos:column="41">1<pos:position pos:line="111" pos:column="42"/></literal></expr>;<pos:position pos:line="111" pos:column="43"/></return>
			}<pos:position pos:line="112" pos:column="26"/></block></then></if>
		}<pos:position pos:line="113" pos:column="18"/></block></else></if>
		<if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">(<expr><call><name pos:line="114" pos:column="21">read_ref_at<pos:position pos:line="114" pos:column="32"/></name><argument_list pos:line="114" pos:column="32">(<argument><expr><name pos:line="114" pos:column="33">real_ref<pos:position pos:line="114" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="43">at_time<pos:position pos:line="114" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="52">nth<pos:position pos:line="114" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="57">sha1<pos:position pos:line="114" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="63">NULL<pos:position pos:line="114" pos:column="67"/></name></expr></argument>,
				<argument><expr><operator pos:line="115" pos:column="33">&amp;<pos:position pos:line="115" pos:column="38"/></operator><name pos:line="115" pos:column="34">co_time<pos:position pos:line="115" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="115" pos:column="43">&amp;<pos:position pos:line="115" pos:column="48"/></operator><name pos:line="115" pos:column="44">co_tz<pos:position pos:line="115" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="115" pos:column="51">&amp;<pos:position pos:line="115" pos:column="56"/></operator><name pos:line="115" pos:column="52">co_cnt<pos:position pos:line="115" pos:column="58"/></name></expr></argument>)<pos:position pos:line="115" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="115" pos:column="60"/></condition><then pos:line="115" pos:column="60"> <block pos:line="115" pos:column="61">{
			<if pos:line="116" pos:column="25">if <condition pos:line="116" pos:column="28">(<expr><operator pos:line="116" pos:column="29">!<pos:position pos:line="116" pos:column="30"/></operator><name pos:line="116" pos:column="30">len<pos:position pos:line="116" pos:column="33"/></name></expr>)<pos:position pos:line="116" pos:column="34"/></condition><then pos:line="116" pos:column="34"> <block pos:line="116" pos:column="35">{
				<if pos:line="117" pos:column="33">if <condition pos:line="117" pos:column="36">(<expr><call><name pos:line="117" pos:column="37">starts_with<pos:position pos:line="117" pos:column="48"/></name><argument_list pos:line="117" pos:column="48">(<argument><expr><name pos:line="117" pos:column="49">real_ref<pos:position pos:line="117" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="117" pos:column="59">"refs/heads/"<pos:position pos:line="117" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="117" pos:column="74"/></condition><then pos:line="117" pos:column="74"> <block pos:line="117" pos:column="75">{
					<expr_stmt><expr><name pos:line="118" pos:column="41">str<pos:position pos:line="118" pos:column="44"/></name> <operator pos:line="118" pos:column="45">=<pos:position pos:line="118" pos:column="46"/></operator> <name pos:line="118" pos:column="47">real_ref<pos:position pos:line="118" pos:column="55"/></name> <operator pos:line="118" pos:column="56">+<pos:position pos:line="118" pos:column="57"/></operator> <literal type="number" pos:line="118" pos:column="58">11<pos:position pos:line="118" pos:column="60"/></literal></expr>;<pos:position pos:line="118" pos:column="61"/></expr_stmt>
					<expr_stmt><expr><name pos:line="119" pos:column="41">len<pos:position pos:line="119" pos:column="44"/></name> <operator pos:line="119" pos:column="45">=<pos:position pos:line="119" pos:column="46"/></operator> <call><name pos:line="119" pos:column="47">strlen<pos:position pos:line="119" pos:column="53"/></name><argument_list pos:line="119" pos:column="53">(<argument><expr><name pos:line="119" pos:column="54">real_ref<pos:position pos:line="119" pos:column="62"/></name> <operator pos:line="119" pos:column="63">+<pos:position pos:line="119" pos:column="64"/></operator> <literal type="number" pos:line="119" pos:column="65">11<pos:position pos:line="119" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="69"/></expr_stmt>
				}<pos:position pos:line="120" pos:column="34"/></block></then> <else pos:line="120" pos:column="35">else <block pos:line="120" pos:column="40">{
					<comment type="block" pos:line="121" pos:column="41">/* detached HEAD */</comment>
					<expr_stmt><expr><name pos:line="122" pos:column="41">str<pos:position pos:line="122" pos:column="44"/></name> <operator pos:line="122" pos:column="45">=<pos:position pos:line="122" pos:column="46"/></operator> <literal type="string" pos:line="122" pos:column="47">"HEAD"<pos:position pos:line="122" pos:column="53"/></literal></expr>;<pos:position pos:line="122" pos:column="54"/></expr_stmt>
					<expr_stmt><expr><name pos:line="123" pos:column="41">len<pos:position pos:line="123" pos:column="44"/></name> <operator pos:line="123" pos:column="45">=<pos:position pos:line="123" pos:column="46"/></operator> <literal type="number" pos:line="123" pos:column="47">4<pos:position pos:line="123" pos:column="48"/></literal></expr>;<pos:position pos:line="123" pos:column="49"/></expr_stmt>
				}<pos:position pos:line="124" pos:column="34"/></block></else></if>
			}<pos:position pos:line="125" pos:column="26"/></block></then></if>
			<if pos:line="126" pos:column="25">if <condition pos:line="126" pos:column="28">(<expr><name pos:line="126" pos:column="29">at_time<pos:position pos:line="126" pos:column="36"/></name></expr>)<pos:position pos:line="126" pos:column="37"/></condition><then pos:line="126" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="127" pos:column="33">warning<pos:position pos:line="127" pos:column="40"/></name><argument_list pos:line="127" pos:column="40">(<argument><expr><literal type="string" pos:line="127" pos:column="41">"Log for '%.*s' only goes "<pos:position pos:line="127" pos:column="68"/></literal>
					<literal type="string" pos:line="128" pos:column="41">"back to %s."<pos:position pos:line="128" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="128" pos:column="56">len<pos:position pos:line="128" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="61">str<pos:position pos:line="128" pos:column="64"/></name></expr></argument>,
					<argument><expr><call><name pos:line="129" pos:column="41">show_date<pos:position pos:line="129" pos:column="50"/></name><argument_list pos:line="129" pos:column="50">(<argument><expr><name pos:line="129" pos:column="51">co_time<pos:position pos:line="129" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="60">co_tz<pos:position pos:line="129" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="67">DATE_RFC2822<pos:position pos:line="129" pos:column="79"/></name></expr></argument>)<pos:position pos:line="129" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="129" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="82"/></expr_stmt></block></then>
			<else pos:line="130" pos:column="25">else <block pos:line="130" pos:column="30">{
				<expr_stmt><expr><call><name pos:line="131" pos:column="33">die<pos:position pos:line="131" pos:column="36"/></name><argument_list pos:line="131" pos:column="36">(<argument><expr><literal type="string" pos:line="131" pos:column="37">"Log for '%.*s' only has %d entries."<pos:position pos:line="131" pos:column="74"/></literal></expr></argument>,
				    <argument><expr><name pos:line="132" pos:column="37">len<pos:position pos:line="132" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="42">str<pos:position pos:line="132" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="47">co_cnt<pos:position pos:line="132" pos:column="53"/></name></expr></argument>)<pos:position pos:line="132" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="55"/></expr_stmt>
			}<pos:position pos:line="133" pos:column="26"/></block></else></if>
		}<pos:position pos:line="134" pos:column="18"/></block></then></if>
	}<pos:position pos:line="135" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="137" pos:column="9">free<pos:position pos:line="137" pos:column="13"/></name><argument_list pos:line="137" pos:column="13">(<argument><expr><name pos:line="137" pos:column="14">real_ref<pos:position pos:line="137" pos:column="22"/></name></expr></argument>)<pos:position pos:line="137" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="24"/></expr_stmt>
	<return pos:line="138" pos:column="9">return <expr><literal type="number" pos:line="138" pos:column="16">0<pos:position pos:line="138" pos:column="17"/></literal></expr>;<pos:position pos:line="138" pos:column="18"/></return>
}<pos:position pos:line="139" pos:column="2"/></block></function></unit>
