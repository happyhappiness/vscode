<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2581_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">decode_header<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">mailinfo<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">mi<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">strbuf<pos:position pos:line="1" pos:column="61"/></name></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">it<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">in<pos:position pos:line="3" pos:column="17"/></name></decl>, <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="20">ep<pos:position pos:line="3" pos:column="22"/></name></decl>, <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="25">cp<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">outbuf<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name pos:line="4" pos:column="32">STRBUF_INIT<pos:position pos:line="4" pos:column="43"/></name></expr></init></decl>, <modifier pos:line="4" pos:column="45">*<pos:position pos:line="4" pos:column="46"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="46">dec<pos:position pos:line="4" pos:column="49"/></name></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">charset_q<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><name pos:line="5" pos:column="35">STRBUF_INIT<pos:position pos:line="5" pos:column="46"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="48">piecebuf<pos:position pos:line="5" pos:column="56"/></name> <init pos:line="5" pos:column="57">= <expr><name pos:line="5" pos:column="59">STRBUF_INIT<pos:position pos:line="5" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="71"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">found_error<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><literal type="number" pos:line="6" pos:column="27">1<pos:position pos:line="6" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt> <comment type="block" pos:line="6" pos:column="30">/* pessimism */</comment>

	<expr_stmt><expr><name pos:line="8" pos:column="9">in<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <name><name pos:line="8" pos:column="14">it<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">-&gt;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="18">buf<pos:position pos:line="8" pos:column="21"/></name></name></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>
	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><name pos:line="9" pos:column="16">in<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">-<pos:position pos:line="9" pos:column="20"/></operator> <name><name pos:line="9" pos:column="21">it<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">-&gt;<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="25">buf<pos:position pos:line="9" pos:column="28"/></name></name> <operator pos:line="9" pos:column="29">&lt;=<pos:position pos:line="9" pos:column="34"/></operator> <name><name pos:line="9" pos:column="32">it<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">-&gt;<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="36">len<pos:position pos:line="9" pos:column="39"/></name></name> <operator pos:line="9" pos:column="40">&amp;&amp;<pos:position pos:line="9" pos:column="50"/></operator> <operator pos:line="9" pos:column="43">(<pos:position pos:line="9" pos:column="44"/></operator><name pos:line="9" pos:column="44">ep<pos:position pos:line="9" pos:column="46"/></name> <operator pos:line="9" pos:column="47">=<pos:position pos:line="9" pos:column="48"/></operator> <call><name pos:line="9" pos:column="49">strstr<pos:position pos:line="9" pos:column="55"/></name><argument_list pos:line="9" pos:column="55">(<argument><expr><name pos:line="9" pos:column="56">in<pos:position pos:line="9" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="60">"=?"<pos:position pos:line="9" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call><operator pos:line="9" pos:column="65">)<pos:position pos:line="9" pos:column="66"/></operator> <operator pos:line="9" pos:column="67">!=<pos:position pos:line="9" pos:column="69"/></operator> <name pos:line="9" pos:column="70">NULL<pos:position pos:line="9" pos:column="74"/></name></expr>)<pos:position pos:line="9" pos:column="75"/></condition> <block pos:line="9" pos:column="76">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">encoding<pos:position pos:line="10" pos:column="29"/></name></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">strbuf_reset<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><operator pos:line="11" pos:column="30">&amp;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="31">charset_q<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">strbuf_reset<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><operator pos:line="12" pos:column="30">&amp;<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="31">piecebuf<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>

		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">in<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">!=<pos:position pos:line="14" pos:column="26"/></operator> <name pos:line="14" pos:column="27">ep<pos:position pos:line="14" pos:column="29"/></name></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30"> <block pos:line="14" pos:column="31">{
			<comment type="block" pos:line="15" pos:column="25">/*
			 * We are about to process an encoded-word
			 * that begins at ep, but there is something
			 * before the encoded word.
			 */</comment>
			<decl_stmt><decl><type><name pos:line="20" pos:column="25">char<pos:position pos:line="20" pos:column="29"/></name> <modifier pos:line="20" pos:column="30">*<pos:position pos:line="20" pos:column="31"/></modifier></type><name pos:line="20" pos:column="31">scan<pos:position pos:line="20" pos:column="35"/></name></decl>;<pos:position pos:line="20" pos:column="36"/></decl_stmt>
			<for pos:line="21" pos:column="25">for <control pos:line="21" pos:column="29">(<init><expr><name pos:line="21" pos:column="30">scan<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">=<pos:position pos:line="21" pos:column="36"/></operator> <name pos:line="21" pos:column="37">in<pos:position pos:line="21" pos:column="39"/></name></expr>;<pos:position pos:line="21" pos:column="40"/></init> <condition><expr><name pos:line="21" pos:column="41">scan<pos:position pos:line="21" pos:column="45"/></name> <operator pos:line="21" pos:column="46">&lt;<pos:position pos:line="21" pos:column="50"/></operator> <name pos:line="21" pos:column="48">ep<pos:position pos:line="21" pos:column="50"/></name></expr>;<pos:position pos:line="21" pos:column="51"/></condition> <incr><expr><name pos:line="21" pos:column="52">scan<pos:position pos:line="21" pos:column="56"/></name><operator pos:line="21" pos:column="56">++<pos:position pos:line="21" pos:column="58"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="59"/></control>
				<block type="pseudo"><if pos:line="22" pos:column="33">if <condition pos:line="22" pos:column="36">(<expr><operator pos:line="22" pos:column="37">!<pos:position pos:line="22" pos:column="38"/></operator><call><name pos:line="22" pos:column="38">isspace<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><operator pos:line="22" pos:column="46">*<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="47">scan<pos:position pos:line="22" pos:column="51"/></name></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="53"/></condition><then pos:line="22" pos:column="53">
					<block type="pseudo"><break pos:line="23" pos:column="41">break;<pos:position pos:line="23" pos:column="47"/></break></block></then></if></block></for>

			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><name pos:line="25" pos:column="29">scan<pos:position pos:line="25" pos:column="33"/></name> <operator pos:line="25" pos:column="34">!=<pos:position pos:line="25" pos:column="36"/></operator> <name pos:line="25" pos:column="37">ep<pos:position pos:line="25" pos:column="39"/></name> <operator pos:line="25" pos:column="40">||<pos:position pos:line="25" pos:column="42"/></operator> <name pos:line="25" pos:column="43">in<pos:position pos:line="25" pos:column="45"/></name> <operator pos:line="25" pos:column="46">==<pos:position pos:line="25" pos:column="48"/></operator> <name><name pos:line="25" pos:column="49">it<pos:position pos:line="25" pos:column="51"/></name><operator pos:line="25" pos:column="51">-&gt;<pos:position pos:line="25" pos:column="56"/></operator><name pos:line="25" pos:column="53">buf<pos:position pos:line="25" pos:column="56"/></name></name></expr>)<pos:position pos:line="25" pos:column="57"/></condition><then pos:line="25" pos:column="57"> <block pos:line="25" pos:column="58">{
				<comment type="block" pos:line="26" pos:column="33">/*
				 * We should not lose that "something",
				 * unless we have just processed an
				 * encoded-word, and there is only LWS
				 * before the one we are about to process.
				 */</comment>
				<expr_stmt><expr><call><name pos:line="32" pos:column="33">strbuf_add<pos:position pos:line="32" pos:column="43"/></name><argument_list pos:line="32" pos:column="43">(<argument><expr><operator pos:line="32" pos:column="44">&amp;<pos:position pos:line="32" pos:column="49"/></operator><name pos:line="32" pos:column="45">outbuf<pos:position pos:line="32" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="53">in<pos:position pos:line="32" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="57">ep<pos:position pos:line="32" pos:column="59"/></name> <operator pos:line="32" pos:column="60">-<pos:position pos:line="32" pos:column="61"/></operator> <name pos:line="32" pos:column="62">in<pos:position pos:line="32" pos:column="64"/></name></expr></argument>)<pos:position pos:line="32" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="66"/></expr_stmt>
			}<pos:position pos:line="33" pos:column="26"/></block></then></if>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="35" pos:column="17">/* E.g.
		 * ep : "=?iso-2022-jp?B?GyR...?= foo"
		 * ep : "=?ISO-8859-1?Q?Foo=FCbar?= baz"
		 */</comment>
		<expr_stmt><expr><name pos:line="39" pos:column="17">ep<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">+=<pos:position pos:line="39" pos:column="22"/></operator> <literal type="number" pos:line="39" pos:column="23">2<pos:position pos:line="39" pos:column="24"/></literal></expr>;<pos:position pos:line="39" pos:column="25"/></expr_stmt>

		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">ep<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">-<pos:position pos:line="41" pos:column="25"/></operator> <name><name pos:line="41" pos:column="26">it<pos:position pos:line="41" pos:column="28"/></name><operator pos:line="41" pos:column="28">-&gt;<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="30">buf<pos:position pos:line="41" pos:column="33"/></name></name> <operator pos:line="41" pos:column="34">&gt;=<pos:position pos:line="41" pos:column="39"/></operator> <name><name pos:line="41" pos:column="37">it<pos:position pos:line="41" pos:column="39"/></name><operator pos:line="41" pos:column="39">-&gt;<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="41">len<pos:position pos:line="41" pos:column="44"/></name></name> <operator pos:line="41" pos:column="45">||<pos:position pos:line="41" pos:column="47"/></operator> <operator pos:line="41" pos:column="48">!<pos:position pos:line="41" pos:column="49"/></operator><operator pos:line="41" pos:column="49">(<pos:position pos:line="41" pos:column="50"/></operator><name pos:line="41" pos:column="50">cp<pos:position pos:line="41" pos:column="52"/></name> <operator pos:line="41" pos:column="53">=<pos:position pos:line="41" pos:column="54"/></operator> <call><name pos:line="41" pos:column="55">strchr<pos:position pos:line="41" pos:column="61"/></name><argument_list pos:line="41" pos:column="61">(<argument><expr><name pos:line="41" pos:column="62">ep<pos:position pos:line="41" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="66">'?'<pos:position pos:line="41" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call><operator pos:line="41" pos:column="70">)<pos:position pos:line="41" pos:column="71"/></operator></expr>)<pos:position pos:line="41" pos:column="72"/></condition><then pos:line="41" pos:column="72">
			<block type="pseudo"><goto pos:line="42" pos:column="25">goto <name pos:line="42" pos:column="30">release_return<pos:position pos:line="42" pos:column="44"/></name>;<pos:position pos:line="42" pos:column="45"/></goto></block></then></if>

		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">cp<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">+<pos:position pos:line="44" pos:column="25"/></operator> <literal type="number" pos:line="44" pos:column="26">3<pos:position pos:line="44" pos:column="27"/></literal> <operator pos:line="44" pos:column="28">-<pos:position pos:line="44" pos:column="29"/></operator> <name><name pos:line="44" pos:column="30">it<pos:position pos:line="44" pos:column="32"/></name><operator pos:line="44" pos:column="32">-&gt;<pos:position pos:line="44" pos:column="37"/></operator><name pos:line="44" pos:column="34">buf<pos:position pos:line="44" pos:column="37"/></name></name> <operator pos:line="44" pos:column="38">&gt;<pos:position pos:line="44" pos:column="42"/></operator> <name><name pos:line="44" pos:column="40">it<pos:position pos:line="44" pos:column="42"/></name><operator pos:line="44" pos:column="42">-&gt;<pos:position pos:line="44" pos:column="47"/></operator><name pos:line="44" pos:column="44">len<pos:position pos:line="44" pos:column="47"/></name></name></expr>)<pos:position pos:line="44" pos:column="48"/></condition><then pos:line="44" pos:column="48">
			<block type="pseudo"><goto pos:line="45" pos:column="25">goto <name pos:line="45" pos:column="30">release_return<pos:position pos:line="45" pos:column="44"/></name>;<pos:position pos:line="45" pos:column="45"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">strbuf_add<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><operator pos:line="46" pos:column="28">&amp;<pos:position pos:line="46" pos:column="33"/></operator><name pos:line="46" pos:column="29">charset_q<pos:position pos:line="46" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="40">ep<pos:position pos:line="46" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="44">cp<pos:position pos:line="46" pos:column="46"/></name> <operator pos:line="46" pos:column="47">-<pos:position pos:line="46" pos:column="48"/></operator> <name pos:line="46" pos:column="49">ep<pos:position pos:line="46" pos:column="51"/></name></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="53"/></expr_stmt>

		<expr_stmt><expr><name pos:line="48" pos:column="17">encoding<pos:position pos:line="48" pos:column="25"/></name> <operator pos:line="48" pos:column="26">=<pos:position pos:line="48" pos:column="27"/></operator> <name><name pos:line="48" pos:column="28">cp<pos:position pos:line="48" pos:column="30"/></name><index pos:line="48" pos:column="30">[<expr><literal type="number" pos:line="48" pos:column="31">1<pos:position pos:line="48" pos:column="32"/></literal></expr>]<pos:position pos:line="48" pos:column="33"/></index></name></expr>;<pos:position pos:line="48" pos:column="34"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><operator pos:line="49" pos:column="21">!<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">encoding<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">||<pos:position pos:line="49" pos:column="33"/></operator> <name><name pos:line="49" pos:column="34">cp<pos:position pos:line="49" pos:column="36"/></name><index pos:line="49" pos:column="36">[<expr><literal type="number" pos:line="49" pos:column="37">2<pos:position pos:line="49" pos:column="38"/></literal></expr>]<pos:position pos:line="49" pos:column="39"/></index></name> <operator pos:line="49" pos:column="40">!=<pos:position pos:line="49" pos:column="42"/></operator> <literal type="char" pos:line="49" pos:column="43">'?'<pos:position pos:line="49" pos:column="46"/></literal></expr>)<pos:position pos:line="49" pos:column="47"/></condition><then pos:line="49" pos:column="47">
			<block type="pseudo"><goto pos:line="50" pos:column="25">goto <name pos:line="50" pos:column="30">release_return<pos:position pos:line="50" pos:column="44"/></name>;<pos:position pos:line="50" pos:column="45"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="51" pos:column="17">ep<pos:position pos:line="51" pos:column="19"/></name> <operator pos:line="51" pos:column="20">=<pos:position pos:line="51" pos:column="21"/></operator> <call><name pos:line="51" pos:column="22">strstr<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">cp<pos:position pos:line="51" pos:column="31"/></name> <operator pos:line="51" pos:column="32">+<pos:position pos:line="51" pos:column="33"/></operator> <literal type="number" pos:line="51" pos:column="34">3<pos:position pos:line="51" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="37">"?="<pos:position pos:line="51" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><operator pos:line="52" pos:column="21">!<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="22">ep<pos:position pos:line="52" pos:column="24"/></name></expr>)<pos:position pos:line="52" pos:column="25"/></condition><then pos:line="52" pos:column="25">
			<block type="pseudo"><goto pos:line="53" pos:column="25">goto <name pos:line="53" pos:column="30">release_return<pos:position pos:line="53" pos:column="44"/></name>;<pos:position pos:line="53" pos:column="45"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">strbuf_add<pos:position pos:line="54" pos:column="27"/></name><argument_list pos:line="54" pos:column="27">(<argument><expr><operator pos:line="54" pos:column="28">&amp;<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="29">piecebuf<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="39">cp<pos:position pos:line="54" pos:column="41"/></name> <operator pos:line="54" pos:column="42">+<pos:position pos:line="54" pos:column="43"/></operator> <literal type="number" pos:line="54" pos:column="44">3<pos:position pos:line="54" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="47">ep<pos:position pos:line="54" pos:column="49"/></name> <operator pos:line="54" pos:column="50">-<pos:position pos:line="54" pos:column="51"/></operator> <name pos:line="54" pos:column="52">cp<pos:position pos:line="54" pos:column="54"/></name> <operator pos:line="54" pos:column="55">-<pos:position pos:line="54" pos:column="56"/></operator> <literal type="number" pos:line="54" pos:column="57">3<pos:position pos:line="54" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="60"/></expr_stmt>
		<switch pos:line="55" pos:column="17">switch <condition pos:line="55" pos:column="24">(<expr><call><name pos:line="55" pos:column="25">tolower<pos:position pos:line="55" pos:column="32"/></name><argument_list pos:line="55" pos:column="32">(<argument><expr><name pos:line="55" pos:column="33">encoding<pos:position pos:line="55" pos:column="41"/></name></expr></argument>)<pos:position pos:line="55" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="43"/></condition> <block pos:line="55" pos:column="44">{
		<default pos:line="56" pos:column="17">default:<pos:position pos:line="56" pos:column="25"/></default>
			<goto pos:line="57" pos:column="25">goto <name pos:line="57" pos:column="30">release_return<pos:position pos:line="57" pos:column="44"/></name>;<pos:position pos:line="57" pos:column="45"/></goto>
		<case pos:line="58" pos:column="17">case <expr><literal type="char" pos:line="58" pos:column="22">'b'<pos:position pos:line="58" pos:column="25"/></literal></expr>:<pos:position pos:line="58" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="59" pos:column="25">dec<pos:position pos:line="59" pos:column="28"/></name> <operator pos:line="59" pos:column="29">=<pos:position pos:line="59" pos:column="30"/></operator> <call><name pos:line="59" pos:column="31">decode_b_segment<pos:position pos:line="59" pos:column="47"/></name><argument_list pos:line="59" pos:column="47">(<argument><expr><operator pos:line="59" pos:column="48">&amp;<pos:position pos:line="59" pos:column="53"/></operator><name pos:line="59" pos:column="49">piecebuf<pos:position pos:line="59" pos:column="57"/></name></expr></argument>)<pos:position pos:line="59" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="59"/></expr_stmt>
			<break pos:line="60" pos:column="25">break;<pos:position pos:line="60" pos:column="31"/></break>
		<case pos:line="61" pos:column="17">case <expr><literal type="char" pos:line="61" pos:column="22">'q'<pos:position pos:line="61" pos:column="25"/></literal></expr>:<pos:position pos:line="61" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="62" pos:column="25">dec<pos:position pos:line="62" pos:column="28"/></name> <operator pos:line="62" pos:column="29">=<pos:position pos:line="62" pos:column="30"/></operator> <call><name pos:line="62" pos:column="31">decode_q_segment<pos:position pos:line="62" pos:column="47"/></name><argument_list pos:line="62" pos:column="47">(<argument><expr><operator pos:line="62" pos:column="48">&amp;<pos:position pos:line="62" pos:column="53"/></operator><name pos:line="62" pos:column="49">piecebuf<pos:position pos:line="62" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="59">1<pos:position pos:line="62" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="62"/></expr_stmt>
			<break pos:line="63" pos:column="25">break;<pos:position pos:line="63" pos:column="31"/></break>
		}<pos:position pos:line="64" pos:column="18"/></block></switch>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><call><name pos:line="65" pos:column="21">convert_to_utf8<pos:position pos:line="65" pos:column="36"/></name><argument_list pos:line="65" pos:column="36">(<argument><expr><name pos:line="65" pos:column="37">mi<pos:position pos:line="65" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="41">dec<pos:position pos:line="65" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="46">charset_q<pos:position pos:line="65" pos:column="55"/></name><operator pos:line="65" pos:column="55">.<pos:position pos:line="65" pos:column="56"/></operator><name pos:line="65" pos:column="56">buf<pos:position pos:line="65" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="61"/></condition><then pos:line="65" pos:column="61">
			<block type="pseudo"><goto pos:line="66" pos:column="25">goto <name pos:line="66" pos:column="30">release_return<pos:position pos:line="66" pos:column="44"/></name>;<pos:position pos:line="66" pos:column="45"/></goto></block></then></if>

		<expr_stmt><expr><call><name pos:line="68" pos:column="17">strbuf_addbuf<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><operator pos:line="68" pos:column="31">&amp;<pos:position pos:line="68" pos:column="36"/></operator><name pos:line="68" pos:column="32">outbuf<pos:position pos:line="68" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="40">dec<pos:position pos:line="68" pos:column="43"/></name></expr></argument>)<pos:position pos:line="68" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">strbuf_release<pos:position pos:line="69" pos:column="31"/></name><argument_list pos:line="69" pos:column="31">(<argument><expr><name pos:line="69" pos:column="32">dec<pos:position pos:line="69" pos:column="35"/></name></expr></argument>)<pos:position pos:line="69" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">free<pos:position pos:line="70" pos:column="21"/></name><argument_list pos:line="70" pos:column="21">(<argument><expr><name pos:line="70" pos:column="22">dec<pos:position pos:line="70" pos:column="25"/></name></expr></argument>)<pos:position pos:line="70" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="71" pos:column="17">in<pos:position pos:line="71" pos:column="19"/></name> <operator pos:line="71" pos:column="20">=<pos:position pos:line="71" pos:column="21"/></operator> <name pos:line="71" pos:column="22">ep<pos:position pos:line="71" pos:column="24"/></name> <operator pos:line="71" pos:column="25">+<pos:position pos:line="71" pos:column="26"/></operator> <literal type="number" pos:line="71" pos:column="27">2<pos:position pos:line="71" pos:column="28"/></literal></expr>;<pos:position pos:line="71" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="72" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="73" pos:column="9">strbuf_addstr<pos:position pos:line="73" pos:column="22"/></name><argument_list pos:line="73" pos:column="22">(<argument><expr><operator pos:line="73" pos:column="23">&amp;<pos:position pos:line="73" pos:column="28"/></operator><name pos:line="73" pos:column="24">outbuf<pos:position pos:line="73" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="32">in<pos:position pos:line="73" pos:column="34"/></name></expr></argument>)<pos:position pos:line="73" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="74" pos:column="9">strbuf_reset<pos:position pos:line="74" pos:column="21"/></name><argument_list pos:line="74" pos:column="21">(<argument><expr><name pos:line="74" pos:column="22">it<pos:position pos:line="74" pos:column="24"/></name></expr></argument>)<pos:position pos:line="74" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="75" pos:column="9">strbuf_addbuf<pos:position pos:line="75" pos:column="22"/></name><argument_list pos:line="75" pos:column="22">(<argument><expr><name pos:line="75" pos:column="23">it<pos:position pos:line="75" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="27">&amp;<pos:position pos:line="75" pos:column="32"/></operator><name pos:line="75" pos:column="28">outbuf<pos:position pos:line="75" pos:column="34"/></name></expr></argument>)<pos:position pos:line="75" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="76" pos:column="9">found_error<pos:position pos:line="76" pos:column="20"/></name> <operator pos:line="76" pos:column="21">=<pos:position pos:line="76" pos:column="22"/></operator> <literal type="number" pos:line="76" pos:column="23">0<pos:position pos:line="76" pos:column="24"/></literal></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt>
<label><name pos:line="77" pos:column="1">release_return<pos:position pos:line="77" pos:column="15"/></name>:<pos:position pos:line="77" pos:column="16"/></label>
	<expr_stmt><expr><call><name pos:line="78" pos:column="9">strbuf_release<pos:position pos:line="78" pos:column="23"/></name><argument_list pos:line="78" pos:column="23">(<argument><expr><operator pos:line="78" pos:column="24">&amp;<pos:position pos:line="78" pos:column="29"/></operator><name pos:line="78" pos:column="25">outbuf<pos:position pos:line="78" pos:column="31"/></name></expr></argument>)<pos:position pos:line="78" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="79" pos:column="9">strbuf_release<pos:position pos:line="79" pos:column="23"/></name><argument_list pos:line="79" pos:column="23">(<argument><expr><operator pos:line="79" pos:column="24">&amp;<pos:position pos:line="79" pos:column="29"/></operator><name pos:line="79" pos:column="25">charset_q<pos:position pos:line="79" pos:column="34"/></name></expr></argument>)<pos:position pos:line="79" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">strbuf_release<pos:position pos:line="80" pos:column="23"/></name><argument_list pos:line="80" pos:column="23">(<argument><expr><operator pos:line="80" pos:column="24">&amp;<pos:position pos:line="80" pos:column="29"/></operator><name pos:line="80" pos:column="25">piecebuf<pos:position pos:line="80" pos:column="33"/></name></expr></argument>)<pos:position pos:line="80" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="35"/></expr_stmt>

	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">found_error<pos:position pos:line="82" pos:column="24"/></name></expr>)<pos:position pos:line="82" pos:column="25"/></condition><then pos:line="82" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="83" pos:column="17">mi<pos:position pos:line="83" pos:column="19"/></name><operator pos:line="83" pos:column="19">-&gt;<pos:position pos:line="83" pos:column="24"/></operator><name pos:line="83" pos:column="21">input_error<pos:position pos:line="83" pos:column="32"/></name></name> <operator pos:line="83" pos:column="33">=<pos:position pos:line="83" pos:column="34"/></operator> <operator pos:line="83" pos:column="35">-<pos:position pos:line="83" pos:column="36"/></operator><literal type="number" pos:line="83" pos:column="36">1<pos:position pos:line="83" pos:column="37"/></literal></expr>;<pos:position pos:line="83" pos:column="38"/></expr_stmt></block></then></if>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
