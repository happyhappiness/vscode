<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_128_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">pp_remainder<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">pretty_print_context<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">pp<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
		  <parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier><modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">msg_p<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>,
		  <parameter><decl><type><name><name pos:line="3" pos:column="19">struct<pos:position pos:line="3" pos:column="25"/></name> <name pos:line="3" pos:column="26">strbuf<pos:position pos:line="3" pos:column="32"/></name></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">sb<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>,
		  <parameter><decl><type><name pos:line="4" pos:column="19">int<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">indent<pos:position pos:line="4" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="30"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">first<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">1<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init pos:line="7" pos:column="14">;<pos:position pos:line="7" pos:column="15"/></init><condition pos:line="7" pos:column="15">;<pos:position pos:line="7" pos:column="16"/></condition><incr/>)<pos:position pos:line="7" pos:column="17"/></control> <block pos:line="7" pos:column="18">{
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">line<pos:position pos:line="8" pos:column="33"/></name> <init pos:line="8" pos:column="34">= <expr><operator pos:line="8" pos:column="36">*<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="37">msg_p<pos:position pos:line="8" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">linelen<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><call><name pos:line="9" pos:column="31">get_one_line<pos:position pos:line="9" pos:column="43"/></name><argument_list pos:line="9" pos:column="43">(<argument><expr><name pos:line="9" pos:column="44">line<pos:position pos:line="9" pos:column="48"/></name></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="50"/></decl_stmt>
		<expr_stmt><expr><operator pos:line="10" pos:column="17">*<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="18">msg_p<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">+=<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="27">linelen<pos:position pos:line="10" pos:column="34"/></name></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>

		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">linelen<pos:position pos:line="12" pos:column="29"/></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
			<block type="pseudo"><break pos:line="13" pos:column="25">break;<pos:position pos:line="13" pos:column="31"/></break></block></then></if>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">is_blank_line<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><name pos:line="15" pos:column="35">line<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="41">&amp;<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="42">linelen<pos:position pos:line="15" pos:column="49"/></name></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="51"/></condition><then pos:line="15" pos:column="51"> <block pos:line="15" pos:column="52">{
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><name pos:line="16" pos:column="29">first<pos:position pos:line="16" pos:column="34"/></name></expr>)<pos:position pos:line="16" pos:column="35"/></condition><then pos:line="16" pos:column="35">
				<block type="pseudo"><continue pos:line="17" pos:column="33">continue;<pos:position pos:line="17" pos:column="42"/></continue></block></then></if>
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><name><name pos:line="18" pos:column="29">pp<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">-&gt;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="33">fmt<pos:position pos:line="18" pos:column="36"/></name></name> <operator pos:line="18" pos:column="37">==<pos:position pos:line="18" pos:column="39"/></operator> <name pos:line="18" pos:column="40">CMIT_FMT_SHORT<pos:position pos:line="18" pos:column="54"/></name></expr>)<pos:position pos:line="18" pos:column="55"/></condition><then pos:line="18" pos:column="55">
				<block type="pseudo"><break pos:line="19" pos:column="33">break;<pos:position pos:line="19" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="21" pos:column="17">first<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <literal type="number" pos:line="21" pos:column="25">0<pos:position pos:line="21" pos:column="26"/></literal></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="23" pos:column="17">strbuf_grow<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">sb<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="33">linelen<pos:position pos:line="23" pos:column="40"/></name> <operator pos:line="23" pos:column="41">+<pos:position pos:line="23" pos:column="42"/></operator> <name pos:line="23" pos:column="43">indent<pos:position pos:line="23" pos:column="49"/></name> <operator pos:line="23" pos:column="50">+<pos:position pos:line="23" pos:column="51"/></operator> <literal type="number" pos:line="23" pos:column="52">20<pos:position pos:line="23" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="56"/></expr_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">indent<pos:position pos:line="24" pos:column="27"/></name></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">pp_handle_indent<pos:position pos:line="25" pos:column="41"/></name><argument_list pos:line="25" pos:column="41">(<argument><expr><name pos:line="25" pos:column="42">pp<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">sb<pos:position pos:line="25" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="50">indent<pos:position pos:line="25" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="58">line<pos:position pos:line="25" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="64">linelen<pos:position pos:line="25" pos:column="71"/></name></expr></argument>)<pos:position pos:line="25" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="73"/></expr_stmt></block></then>
		<elseif pos:line="26" pos:column="17">else <if pos:line="26" pos:column="22">if <condition pos:line="26" pos:column="25">(<expr><name><name pos:line="26" pos:column="26">pp<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">-&gt;<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="30">expand_tabs_in_log<pos:position pos:line="26" pos:column="48"/></name></name></expr>)<pos:position pos:line="26" pos:column="49"/></condition><then pos:line="26" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">strbuf_add_tabexpand<pos:position pos:line="27" pos:column="45"/></name><argument_list pos:line="27" pos:column="45">(<argument><expr><name pos:line="27" pos:column="46">sb<pos:position pos:line="27" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="50">pp<pos:position pos:line="27" pos:column="52"/></name><operator pos:line="27" pos:column="52">-&gt;<pos:position pos:line="27" pos:column="57"/></operator><name pos:line="27" pos:column="54">expand_tabs_in_log<pos:position pos:line="27" pos:column="72"/></name></name></expr></argument>,
					     <argument><expr><name pos:line="28" pos:column="46">line<pos:position pos:line="28" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="52">linelen<pos:position pos:line="28" pos:column="59"/></name></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="61"/></expr_stmt></block></then></if></elseif>
		<else pos:line="29" pos:column="17">else <block pos:line="29" pos:column="22">{
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name><name pos:line="30" pos:column="29">pp<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">-&gt;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="33">fmt<pos:position pos:line="30" pos:column="36"/></name></name> <operator pos:line="30" pos:column="37">==<pos:position pos:line="30" pos:column="39"/></operator> <name pos:line="30" pos:column="40">CMIT_FMT_MBOXRD<pos:position pos:line="30" pos:column="55"/></name> <operator pos:line="30" pos:column="56">&amp;&amp;<pos:position pos:line="30" pos:column="66"/></operator>
					<call><name pos:line="31" pos:column="41">is_mboxrd_from<pos:position pos:line="31" pos:column="55"/></name><argument_list pos:line="31" pos:column="55">(<argument><expr><name pos:line="31" pos:column="56">line<pos:position pos:line="31" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="62">linelen<pos:position pos:line="31" pos:column="69"/></name></expr></argument>)<pos:position pos:line="31" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="71"/></condition><then pos:line="31" pos:column="71">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="33">strbuf_addch<pos:position pos:line="32" pos:column="45"/></name><argument_list pos:line="32" pos:column="45">(<argument><expr><name pos:line="32" pos:column="46">sb<pos:position pos:line="32" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="50">'&gt;'<pos:position pos:line="32" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt></block></then></if>

			<expr_stmt><expr><call><name pos:line="34" pos:column="25">strbuf_add<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><name pos:line="34" pos:column="36">sb<pos:position pos:line="34" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="40">line<pos:position pos:line="34" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="46">linelen<pos:position pos:line="34" pos:column="53"/></name></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">strbuf_addch<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">sb<pos:position pos:line="36" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="36" pos:column="34">'\n'<pos:position pos:line="36" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></for>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
