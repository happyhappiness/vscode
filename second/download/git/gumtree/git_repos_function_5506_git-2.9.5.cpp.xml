<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5506_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parse_args<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">pathspec<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">pathspec<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
		       <parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier><modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">argv<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <name pos:line="2" pos:column="49">char<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">prefix<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>,
		       <parameter><decl><type><name pos:line="3" pos:column="24">int<pos:position pos:line="3" pos:column="27"/></name></type> <name pos:line="3" pos:column="28">patch_mode<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>,
		       <parameter><decl><type><specifier pos:line="4" pos:column="24">const<pos:position pos:line="4" pos:column="29"/></specifier> <name pos:line="4" pos:column="30">char<pos:position pos:line="4" pos:column="34"/></name> <modifier pos:line="4" pos:column="35">*<pos:position pos:line="4" pos:column="36"/></modifier><modifier pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></modifier></type><name pos:line="4" pos:column="37">rev_ret<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="45"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">rev<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><literal type="string" pos:line="6" pos:column="27">"HEAD"<pos:position pos:line="6" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name></type> <name><name pos:line="7" pos:column="23">unused<pos:position pos:line="7" pos:column="29"/></name><index pos:line="7" pos:column="29">[<expr><literal type="number" pos:line="7" pos:column="30">20<pos:position pos:line="7" pos:column="32"/></literal></expr>]<pos:position pos:line="7" pos:column="33"/></index></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
	<comment type="block" pos:line="8" pos:column="9">/*
	 * Possible arguments are:
	 *
	 * git reset [-opts] [&lt;rev&gt;]
	 * git reset [-opts] &lt;tree&gt; [&lt;paths&gt;...]
	 * git reset [-opts] &lt;tree&gt; -- [&lt;paths&gt;...]
	 * git reset [-opts] -- [&lt;paths&gt;...]
	 * git reset [-opts] &lt;paths&gt;...
	 *
	 * At this point, argv points immediately after [-opts].
	 */</comment>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name><name pos:line="20" pos:column="13">argv<pos:position pos:line="20" pos:column="17"/></name><index pos:line="20" pos:column="17">[<expr><literal type="number" pos:line="20" pos:column="18">0<pos:position pos:line="20" pos:column="19"/></literal></expr>]<pos:position pos:line="20" pos:column="20"/></index></name></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21"> <block pos:line="20" pos:column="22">{
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><call><name pos:line="21" pos:column="22">strcmp<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name><name pos:line="21" pos:column="29">argv<pos:position pos:line="21" pos:column="33"/></name><index pos:line="21" pos:column="33">[<expr><literal type="number" pos:line="21" pos:column="34">0<pos:position pos:line="21" pos:column="35"/></literal></expr>]<pos:position pos:line="21" pos:column="36"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="38">"--"<pos:position pos:line="21" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="44"/></condition><then pos:line="21" pos:column="44"> <block pos:line="21" pos:column="45">{
			<expr_stmt><expr><name pos:line="22" pos:column="25">argv<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">++<pos:position pos:line="22" pos:column="31"/></operator></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt> <comment type="block" pos:line="22" pos:column="33">/* reset to HEAD, possibly with paths */</comment>
		}<pos:position pos:line="23" pos:column="18"/></block></then> <elseif pos:line="23" pos:column="19">else <if pos:line="23" pos:column="24">if <condition pos:line="23" pos:column="27">(<expr><name><name pos:line="23" pos:column="28">argv<pos:position pos:line="23" pos:column="32"/></name><index pos:line="23" pos:column="32">[<expr><literal type="number" pos:line="23" pos:column="33">1<pos:position pos:line="23" pos:column="34"/></literal></expr>]<pos:position pos:line="23" pos:column="35"/></index></name> <operator pos:line="23" pos:column="36">&amp;&amp;<pos:position pos:line="23" pos:column="46"/></operator> <operator pos:line="23" pos:column="39">!<pos:position pos:line="23" pos:column="40"/></operator><call><name pos:line="23" pos:column="40">strcmp<pos:position pos:line="23" pos:column="46"/></name><argument_list pos:line="23" pos:column="46">(<argument><expr><name><name pos:line="23" pos:column="47">argv<pos:position pos:line="23" pos:column="51"/></name><index pos:line="23" pos:column="51">[<expr><literal type="number" pos:line="23" pos:column="52">1<pos:position pos:line="23" pos:column="53"/></literal></expr>]<pos:position pos:line="23" pos:column="54"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="56">"--"<pos:position pos:line="23" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="62"/></condition><then pos:line="23" pos:column="62"> <block pos:line="23" pos:column="63">{
			<expr_stmt><expr><name pos:line="24" pos:column="25">rev<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <name><name pos:line="24" pos:column="31">argv<pos:position pos:line="24" pos:column="35"/></name><index pos:line="24" pos:column="35">[<expr><literal type="number" pos:line="24" pos:column="36">0<pos:position pos:line="24" pos:column="37"/></literal></expr>]<pos:position pos:line="24" pos:column="38"/></index></name></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="25" pos:column="25">argv<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">+=<pos:position pos:line="25" pos:column="32"/></operator> <literal type="number" pos:line="25" pos:column="33">2<pos:position pos:line="25" pos:column="34"/></literal></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if></elseif>
		<comment type="block" pos:line="27" pos:column="17">/*
		 * Otherwise, argv[0] could be either &lt;rev&gt; or &lt;paths&gt; and
		 * has to be unambiguous. If there is a single argument, it
		 * can not be a tree
		 */</comment>
		<elseif pos:line="32" pos:column="17">else <if pos:line="32" pos:column="22">if <condition pos:line="32" pos:column="25">(<expr><operator pos:line="32" pos:column="26">(<pos:position pos:line="32" pos:column="27"/></operator><operator pos:line="32" pos:column="27">!<pos:position pos:line="32" pos:column="28"/></operator><name><name pos:line="32" pos:column="28">argv<pos:position pos:line="32" pos:column="32"/></name><index pos:line="32" pos:column="32">[<expr><literal type="number" pos:line="32" pos:column="33">1<pos:position pos:line="32" pos:column="34"/></literal></expr>]<pos:position pos:line="32" pos:column="35"/></index></name> <operator pos:line="32" pos:column="36">&amp;&amp;<pos:position pos:line="32" pos:column="46"/></operator> <operator pos:line="32" pos:column="39">!<pos:position pos:line="32" pos:column="40"/></operator><call><name pos:line="32" pos:column="40">get_sha1_committish<pos:position pos:line="32" pos:column="59"/></name><argument_list pos:line="32" pos:column="59">(<argument><expr><name><name pos:line="32" pos:column="60">argv<pos:position pos:line="32" pos:column="64"/></name><index pos:line="32" pos:column="64">[<expr><literal type="number" pos:line="32" pos:column="65">0<pos:position pos:line="32" pos:column="66"/></literal></expr>]<pos:position pos:line="32" pos:column="67"/></index></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="69">unused<pos:position pos:line="32" pos:column="75"/></name></expr></argument>)<pos:position pos:line="32" pos:column="76"/></argument_list></call><operator pos:line="32" pos:column="76">)<pos:position pos:line="32" pos:column="77"/></operator> <operator pos:line="32" pos:column="78">||<pos:position pos:line="32" pos:column="80"/></operator>
			 <operator pos:line="33" pos:column="26">(<pos:position pos:line="33" pos:column="27"/></operator><name><name pos:line="33" pos:column="27">argv<pos:position pos:line="33" pos:column="31"/></name><index pos:line="33" pos:column="31">[<expr><literal type="number" pos:line="33" pos:column="32">1<pos:position pos:line="33" pos:column="33"/></literal></expr>]<pos:position pos:line="33" pos:column="34"/></index></name> <operator pos:line="33" pos:column="35">&amp;&amp;<pos:position pos:line="33" pos:column="45"/></operator> <operator pos:line="33" pos:column="38">!<pos:position pos:line="33" pos:column="39"/></operator><call><name pos:line="33" pos:column="39">get_sha1_treeish<pos:position pos:line="33" pos:column="55"/></name><argument_list pos:line="33" pos:column="55">(<argument><expr><name><name pos:line="33" pos:column="56">argv<pos:position pos:line="33" pos:column="60"/></name><index pos:line="33" pos:column="60">[<expr><literal type="number" pos:line="33" pos:column="61">0<pos:position pos:line="33" pos:column="62"/></literal></expr>]<pos:position pos:line="33" pos:column="63"/></index></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="65">unused<pos:position pos:line="33" pos:column="71"/></name></expr></argument>)<pos:position pos:line="33" pos:column="72"/></argument_list></call><operator pos:line="33" pos:column="72">)<pos:position pos:line="33" pos:column="73"/></operator></expr>)<pos:position pos:line="33" pos:column="74"/></condition><then pos:line="33" pos:column="74"> <block pos:line="33" pos:column="75">{
			<comment type="block" pos:line="34" pos:column="25">/*
			 * Ok, argv[0] looks like a commit/tree; it should not
			 * be a filename.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">verify_non_filename<pos:position pos:line="38" pos:column="44"/></name><argument_list pos:line="38" pos:column="44">(<argument><expr><name pos:line="38" pos:column="45">prefix<pos:position pos:line="38" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="53">argv<pos:position pos:line="38" pos:column="57"/></name><index pos:line="38" pos:column="57">[<expr><literal type="number" pos:line="38" pos:column="58">0<pos:position pos:line="38" pos:column="59"/></literal></expr>]<pos:position pos:line="38" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="39" pos:column="25">rev<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">=<pos:position pos:line="39" pos:column="30"/></operator> <operator pos:line="39" pos:column="31">*<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="32">argv<pos:position pos:line="39" pos:column="36"/></name><operator pos:line="39" pos:column="36">++<pos:position pos:line="39" pos:column="38"/></operator></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if></elseif> <else pos:line="40" pos:column="19">else <block pos:line="40" pos:column="24">{
			<comment type="block" pos:line="41" pos:column="25">/* Otherwise we treat this as a filename */</comment>
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">verify_filename<pos:position pos:line="42" pos:column="40"/></name><argument_list pos:line="42" pos:column="40">(<argument><expr><name pos:line="42" pos:column="41">prefix<pos:position pos:line="42" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="49">argv<pos:position pos:line="42" pos:column="53"/></name><index pos:line="42" pos:column="53">[<expr><literal type="number" pos:line="42" pos:column="54">0<pos:position pos:line="42" pos:column="55"/></literal></expr>]<pos:position pos:line="42" pos:column="56"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="58">1<pos:position pos:line="42" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="43" pos:column="18"/></block></else></if>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>
	<expr_stmt><expr><operator pos:line="45" pos:column="9">*<pos:position pos:line="45" pos:column="10"/></operator><name pos:line="45" pos:column="10">rev_ret<pos:position pos:line="45" pos:column="17"/></name> <operator pos:line="45" pos:column="18">=<pos:position pos:line="45" pos:column="19"/></operator> <name pos:line="45" pos:column="20">rev<pos:position pos:line="45" pos:column="23"/></name></expr>;<pos:position pos:line="45" pos:column="24"/></expr_stmt>

	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><call><name pos:line="47" pos:column="13">read_cache<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">()<pos:position pos:line="47" pos:column="25"/></argument_list></call> <operator pos:line="47" pos:column="26">&lt;<pos:position pos:line="47" pos:column="30"/></operator> <literal type="number" pos:line="47" pos:column="28">0<pos:position pos:line="47" pos:column="29"/></literal></expr>)<pos:position pos:line="47" pos:column="30"/></condition><then pos:line="47" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="17">die<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><call><name pos:line="48" pos:column="21">_<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><literal type="string" pos:line="48" pos:column="23">"index file corrupt"<pos:position pos:line="48" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="46"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="50" pos:column="9">parse_pathspec<pos:position pos:line="50" pos:column="23"/></name><argument_list pos:line="50" pos:column="23">(<argument><expr><name pos:line="50" pos:column="24">pathspec<pos:position pos:line="50" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="34">0<pos:position pos:line="50" pos:column="35"/></literal></expr></argument>,
		       <argument><expr><name pos:line="51" pos:column="24">PATHSPEC_PREFER_FULL<pos:position pos:line="51" pos:column="44"/></name> <operator pos:line="51" pos:column="45">|<pos:position pos:line="51" pos:column="46"/></operator>
		       <name pos:line="52" pos:column="24">PATHSPEC_STRIP_SUBMODULE_SLASH_CHEAP<pos:position pos:line="52" pos:column="60"/></name> <operator pos:line="52" pos:column="61">|<pos:position pos:line="52" pos:column="62"/></operator>
		       <operator pos:line="53" pos:column="24">(<pos:position pos:line="53" pos:column="25"/></operator><ternary><condition><expr><name pos:line="53" pos:column="25">patch_mode<pos:position pos:line="53" pos:column="35"/></name></expr> ?<pos:position pos:line="53" pos:column="37"/></condition><then pos:line="53" pos:column="37"> <expr><name pos:line="53" pos:column="38">PATHSPEC_PREFIX_ORIGIN<pos:position pos:line="53" pos:column="60"/></name></expr> <pos:position pos:line="53" pos:column="61"/></then><else pos:line="53" pos:column="61">: <expr><literal type="number" pos:line="53" pos:column="63">0<pos:position pos:line="53" pos:column="64"/></literal></expr></else></ternary><operator pos:line="53" pos:column="64">)<pos:position pos:line="53" pos:column="65"/></operator></expr></argument>,
		       <argument><expr><name pos:line="54" pos:column="24">prefix<pos:position pos:line="54" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="32">argv<pos:position pos:line="54" pos:column="36"/></name></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
