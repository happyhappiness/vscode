<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4462_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">command<pos:position pos:line="1" pos:column="22"/></name></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">read_head_info<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">sha1_array<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">shallow<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">command<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">commands<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name pos:line="3" pos:column="36">NULL<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">command<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier><modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">p<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><operator pos:line="4" pos:column="30">&amp;<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="31">commands<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<for pos:line="5" pos:column="9">for <control pos:line="5" pos:column="13">(<init pos:line="5" pos:column="14">;<pos:position pos:line="5" pos:column="15"/></init><condition pos:line="5" pos:column="15">;<pos:position pos:line="5" pos:column="16"/></condition><incr/>)<pos:position pos:line="5" pos:column="17"/></control> <block pos:line="5" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">char<pos:position pos:line="6" pos:column="21"/></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">line<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">unsigned<pos:position pos:line="7" pos:column="25"/></name> <name pos:line="7" pos:column="26">char<pos:position pos:line="7" pos:column="30"/></name></type> <name><name pos:line="7" pos:column="31">old_sha1<pos:position pos:line="7" pos:column="39"/></name><index pos:line="7" pos:column="39">[<expr><literal type="number" pos:line="7" pos:column="40">20<pos:position pos:line="7" pos:column="42"/></literal></expr>]<pos:position pos:line="7" pos:column="43"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="7" pos:column="45">new_sha1<pos:position pos:line="7" pos:column="53"/></name><index pos:line="7" pos:column="53">[<expr><literal type="number" pos:line="7" pos:column="54">20<pos:position pos:line="7" pos:column="56"/></literal></expr>]<pos:position pos:line="7" pos:column="57"/></index></name></decl>;<pos:position pos:line="7" pos:column="58"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="8" pos:column="17">struct<pos:position pos:line="8" pos:column="23"/></name> <name pos:line="8" pos:column="24">command<pos:position pos:line="8" pos:column="31"/></name></name> <modifier pos:line="8" pos:column="32">*<pos:position pos:line="8" pos:column="33"/></modifier></type><name pos:line="8" pos:column="33">cmd<pos:position pos:line="8" pos:column="36"/></name></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">char<pos:position pos:line="9" pos:column="21"/></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">refname<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">len<pos:position pos:line="10" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="26">reflen<pos:position pos:line="10" pos:column="32"/></name></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>

		<expr_stmt><expr><name pos:line="12" pos:column="17">line<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <call><name pos:line="12" pos:column="24">packet_read_line<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><literal type="number" pos:line="12" pos:column="41">0<pos:position pos:line="12" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="44">&amp;<pos:position pos:line="12" pos:column="49"/></operator><name pos:line="12" pos:column="45">len<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="50"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">line<pos:position pos:line="13" pos:column="26"/></name></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27">
			<block type="pseudo"><break pos:line="14" pos:column="25">break;<pos:position pos:line="14" pos:column="31"/></break></block></then></if>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">len<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">==<pos:position pos:line="16" pos:column="27"/></operator> <literal type="number" pos:line="16" pos:column="28">48<pos:position pos:line="16" pos:column="30"/></literal> <operator pos:line="16" pos:column="31">&amp;&amp;<pos:position pos:line="16" pos:column="41"/></operator> <call><name pos:line="16" pos:column="34">starts_with<pos:position pos:line="16" pos:column="45"/></name><argument_list pos:line="16" pos:column="45">(<argument><expr><name pos:line="16" pos:column="46">line<pos:position pos:line="16" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="52">"shallow "<pos:position pos:line="16" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="64"/></condition><then pos:line="16" pos:column="64"> <block pos:line="16" pos:column="65">{
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><call><name pos:line="17" pos:column="29">get_sha1_hex<pos:position pos:line="17" pos:column="41"/></name><argument_list pos:line="17" pos:column="41">(<argument><expr><name pos:line="17" pos:column="42">line<pos:position pos:line="17" pos:column="46"/></name> <operator pos:line="17" pos:column="47">+<pos:position pos:line="17" pos:column="48"/></operator> <literal type="number" pos:line="17" pos:column="49">8<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="52">old_sha1<pos:position pos:line="17" pos:column="60"/></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="62"/></condition><then pos:line="17" pos:column="62">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="33">die<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">(<argument><expr><literal type="string" pos:line="18" pos:column="37">"protocol error: expected shallow sha, got '%s'"<pos:position pos:line="18" pos:column="85"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="87">line<pos:position pos:line="18" pos:column="91"/></name> <operator pos:line="18" pos:column="92">+<pos:position pos:line="18" pos:column="93"/></operator> <literal type="number" pos:line="18" pos:column="94">8<pos:position pos:line="18" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="97"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">sha1_array_append<pos:position pos:line="19" pos:column="42"/></name><argument_list pos:line="19" pos:column="42">(<argument><expr><name pos:line="19" pos:column="43">shallow<pos:position pos:line="19" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="52">old_sha1<pos:position pos:line="19" pos:column="60"/></name></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="62"/></expr_stmt>
			<continue pos:line="20" pos:column="25">continue;<pos:position pos:line="20" pos:column="34"/></continue>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">len<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">&lt;<pos:position pos:line="23" pos:column="29"/></operator> <literal type="number" pos:line="23" pos:column="27">83<pos:position pos:line="23" pos:column="29"/></literal> <operator pos:line="23" pos:column="30">||<pos:position pos:line="23" pos:column="32"/></operator>
		    <name><name pos:line="24" pos:column="21">line<pos:position pos:line="24" pos:column="25"/></name><index pos:line="24" pos:column="25">[<expr><literal type="number" pos:line="24" pos:column="26">40<pos:position pos:line="24" pos:column="28"/></literal></expr>]<pos:position pos:line="24" pos:column="29"/></index></name> <operator pos:line="24" pos:column="30">!=<pos:position pos:line="24" pos:column="32"/></operator> <literal type="char" pos:line="24" pos:column="33">' '<pos:position pos:line="24" pos:column="36"/></literal> <operator pos:line="24" pos:column="37">||<pos:position pos:line="24" pos:column="39"/></operator>
		    <name><name pos:line="25" pos:column="21">line<pos:position pos:line="25" pos:column="25"/></name><index pos:line="25" pos:column="25">[<expr><literal type="number" pos:line="25" pos:column="26">81<pos:position pos:line="25" pos:column="28"/></literal></expr>]<pos:position pos:line="25" pos:column="29"/></index></name> <operator pos:line="25" pos:column="30">!=<pos:position pos:line="25" pos:column="32"/></operator> <literal type="char" pos:line="25" pos:column="33">' '<pos:position pos:line="25" pos:column="36"/></literal> <operator pos:line="25" pos:column="37">||<pos:position pos:line="25" pos:column="39"/></operator>
		    <call><name pos:line="26" pos:column="21">get_sha1_hex<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">line<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="40">old_sha1<pos:position pos:line="26" pos:column="48"/></name></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call> <operator pos:line="26" pos:column="50">||<pos:position pos:line="26" pos:column="52"/></operator>
		    <call><name pos:line="27" pos:column="21">get_sha1_hex<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">line<pos:position pos:line="27" pos:column="38"/></name> <operator pos:line="27" pos:column="39">+<pos:position pos:line="27" pos:column="40"/></operator> <literal type="number" pos:line="27" pos:column="41">41<pos:position pos:line="27" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="45">new_sha1<pos:position pos:line="27" pos:column="53"/></name></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="55"/></condition><then pos:line="27" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">die<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><literal type="string" pos:line="28" pos:column="29">"protocol error: expected old/new/ref, got '%s'"<pos:position pos:line="28" pos:column="77"/></literal></expr></argument>,
			    <argument><expr><name pos:line="29" pos:column="29">line<pos:position pos:line="29" pos:column="33"/></name></expr></argument>)<pos:position pos:line="29" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="31" pos:column="17">refname<pos:position pos:line="31" pos:column="24"/></name> <operator pos:line="31" pos:column="25">=<pos:position pos:line="31" pos:column="26"/></operator> <name pos:line="31" pos:column="27">line<pos:position pos:line="31" pos:column="31"/></name> <operator pos:line="31" pos:column="32">+<pos:position pos:line="31" pos:column="33"/></operator> <literal type="number" pos:line="31" pos:column="34">82<pos:position pos:line="31" pos:column="36"/></literal></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">reflen<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <call><name pos:line="32" pos:column="26">strlen<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">refname<pos:position pos:line="32" pos:column="40"/></name></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="42"/></expr_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">reflen<pos:position pos:line="33" pos:column="27"/></name> <operator pos:line="33" pos:column="28">+<pos:position pos:line="33" pos:column="29"/></operator> <literal type="number" pos:line="33" pos:column="30">82<pos:position pos:line="33" pos:column="32"/></literal> <operator pos:line="33" pos:column="33">&lt;<pos:position pos:line="33" pos:column="37"/></operator> <name pos:line="33" pos:column="35">len<pos:position pos:line="33" pos:column="38"/></name></expr>)<pos:position pos:line="33" pos:column="39"/></condition><then pos:line="33" pos:column="39"> <block pos:line="33" pos:column="40">{
			<decl_stmt><decl><type><specifier pos:line="34" pos:column="25">const<pos:position pos:line="34" pos:column="30"/></specifier> <name pos:line="34" pos:column="31">char<pos:position pos:line="34" pos:column="35"/></name> <modifier pos:line="34" pos:column="36">*<pos:position pos:line="34" pos:column="37"/></modifier></type><name pos:line="34" pos:column="37">feature_list<pos:position pos:line="34" pos:column="49"/></name> <init pos:line="34" pos:column="50">= <expr><name pos:line="34" pos:column="52">refname<pos:position pos:line="34" pos:column="59"/></name> <operator pos:line="34" pos:column="60">+<pos:position pos:line="34" pos:column="61"/></operator> <name pos:line="34" pos:column="62">reflen<pos:position pos:line="34" pos:column="68"/></name> <operator pos:line="34" pos:column="69">+<pos:position pos:line="34" pos:column="70"/></operator> <literal type="number" pos:line="34" pos:column="71">1<pos:position pos:line="34" pos:column="72"/></literal></expr></init></decl>;<pos:position pos:line="34" pos:column="73"/></decl_stmt>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><call><name pos:line="35" pos:column="29">parse_feature_request<pos:position pos:line="35" pos:column="50"/></name><argument_list pos:line="35" pos:column="50">(<argument><expr><name pos:line="35" pos:column="51">feature_list<pos:position pos:line="35" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="65">"report-status"<pos:position pos:line="35" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="82"/></condition><then pos:line="35" pos:column="82">
				<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="33">report_status<pos:position pos:line="36" pos:column="46"/></name> <operator pos:line="36" pos:column="47">=<pos:position pos:line="36" pos:column="48"/></operator> <literal type="number" pos:line="36" pos:column="49">1<pos:position pos:line="36" pos:column="50"/></literal></expr>;<pos:position pos:line="36" pos:column="51"/></expr_stmt></block></then></if>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><call><name pos:line="37" pos:column="29">parse_feature_request<pos:position pos:line="37" pos:column="50"/></name><argument_list pos:line="37" pos:column="50">(<argument><expr><name pos:line="37" pos:column="51">feature_list<pos:position pos:line="37" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="65">"side-band-64k"<pos:position pos:line="37" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="82"/></condition><then pos:line="37" pos:column="82">
				<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="33">use_sideband<pos:position pos:line="38" pos:column="45"/></name> <operator pos:line="38" pos:column="46">=<pos:position pos:line="38" pos:column="47"/></operator> <name pos:line="38" pos:column="48">LARGE_PACKET_MAX<pos:position pos:line="38" pos:column="64"/></name></expr>;<pos:position pos:line="38" pos:column="65"/></expr_stmt></block></then></if>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><call><name pos:line="39" pos:column="29">parse_feature_request<pos:position pos:line="39" pos:column="50"/></name><argument_list pos:line="39" pos:column="50">(<argument><expr><name pos:line="39" pos:column="51">feature_list<pos:position pos:line="39" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="65">"quiet"<pos:position pos:line="39" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="74"/></condition><then pos:line="39" pos:column="74">
				<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="33">quiet<pos:position pos:line="40" pos:column="38"/></name> <operator pos:line="40" pos:column="39">=<pos:position pos:line="40" pos:column="40"/></operator> <literal type="number" pos:line="40" pos:column="41">1<pos:position pos:line="40" pos:column="42"/></literal></expr>;<pos:position pos:line="40" pos:column="43"/></expr_stmt></block></then></if>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="42" pos:column="17">cmd<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <call><name pos:line="42" pos:column="23">xcalloc<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><literal type="number" pos:line="42" pos:column="31">1<pos:position pos:line="42" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="34">sizeof<argument_list pos:line="42" pos:column="40">(<argument><expr pos:line="42" pos:column="41">struct <name pos:line="42" pos:column="48">command<pos:position pos:line="42" pos:column="55"/></name></expr></argument>)<pos:position pos:line="42" pos:column="56"/></argument_list></sizeof> <operator pos:line="42" pos:column="57">+<pos:position pos:line="42" pos:column="58"/></operator> <name pos:line="42" pos:column="59">len<pos:position pos:line="42" pos:column="62"/></name> <operator pos:line="42" pos:column="63">-<pos:position pos:line="42" pos:column="64"/></operator> <literal type="number" pos:line="42" pos:column="65">80<pos:position pos:line="42" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">hashcpy<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><name><name pos:line="43" pos:column="25">cmd<pos:position pos:line="43" pos:column="28"/></name><operator pos:line="43" pos:column="28">-&gt;<pos:position pos:line="43" pos:column="33"/></operator><name pos:line="43" pos:column="30">old_sha1<pos:position pos:line="43" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="40">old_sha1<pos:position pos:line="43" pos:column="48"/></name></expr></argument>)<pos:position pos:line="43" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">hashcpy<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><name><name pos:line="44" pos:column="25">cmd<pos:position pos:line="44" pos:column="28"/></name><operator pos:line="44" pos:column="28">-&gt;<pos:position pos:line="44" pos:column="33"/></operator><name pos:line="44" pos:column="30">new_sha1<pos:position pos:line="44" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="40">new_sha1<pos:position pos:line="44" pos:column="48"/></name></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">memcpy<pos:position pos:line="45" pos:column="23"/></name><argument_list pos:line="45" pos:column="23">(<argument><expr><name><name pos:line="45" pos:column="24">cmd<pos:position pos:line="45" pos:column="27"/></name><operator pos:line="45" pos:column="27">-&gt;<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="29">ref_name<pos:position pos:line="45" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="39">line<pos:position pos:line="45" pos:column="43"/></name> <operator pos:line="45" pos:column="44">+<pos:position pos:line="45" pos:column="45"/></operator> <literal type="number" pos:line="45" pos:column="46">82<pos:position pos:line="45" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="50">len<pos:position pos:line="45" pos:column="53"/></name> <operator pos:line="45" pos:column="54">-<pos:position pos:line="45" pos:column="55"/></operator> <literal type="number" pos:line="45" pos:column="56">81<pos:position pos:line="45" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="46" pos:column="17">*<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="18">p<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">=<pos:position pos:line="46" pos:column="21"/></operator> <name pos:line="46" pos:column="22">cmd<pos:position pos:line="46" pos:column="25"/></name></expr>;<pos:position pos:line="46" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="47" pos:column="17">p<pos:position pos:line="47" pos:column="18"/></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator> <operator pos:line="47" pos:column="21">&amp;<pos:position pos:line="47" pos:column="26"/></operator><name><name pos:line="47" pos:column="22">cmd<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">-&gt;<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="27">next<pos:position pos:line="47" pos:column="31"/></name></name></expr>;<pos:position pos:line="47" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></for>
	<return pos:line="49" pos:column="9">return <expr><name pos:line="49" pos:column="16">commands<pos:position pos:line="49" pos:column="24"/></name></expr>;<pos:position pos:line="49" pos:column="25"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
