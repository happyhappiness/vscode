<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3038_git-2.8.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">get_sha1_hex<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><specifier pos:line="1" pos:column="18">const<pos:position pos:line="1" pos:column="23"/></specifier> <name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">hex<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">unsigned<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">sha1<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<for pos:line="4" pos:column="9">for <control pos:line="4" pos:column="13">(<init><expr><name pos:line="4" pos:column="14">i<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <literal type="number" pos:line="4" pos:column="18">0<pos:position pos:line="4" pos:column="19"/></literal></expr>;<pos:position pos:line="4" pos:column="20"/></init> <condition><expr><name pos:line="4" pos:column="21">i<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;<pos:position pos:line="4" pos:column="27"/></operator> <name pos:line="4" pos:column="25">GIT_SHA1_RAWSZ<pos:position pos:line="4" pos:column="39"/></name></expr>;<pos:position pos:line="4" pos:column="40"/></condition> <incr><expr><name pos:line="4" pos:column="41">i<pos:position pos:line="4" pos:column="42"/></name><operator pos:line="4" pos:column="42">++<pos:position pos:line="4" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="4" pos:column="45"/></control> <block pos:line="4" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">unsigned<pos:position pos:line="5" pos:column="25"/></name> <name pos:line="5" pos:column="26">int<pos:position pos:line="5" pos:column="29"/></name></type> <name pos:line="5" pos:column="30">val<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
		<comment type="block" pos:line="6" pos:column="17">/*
		 * hex[1]=='\0' is caught when val is checked below,
		 * but if hex[0] is NUL we have to avoid reading
		 * past the end of the string:
		 */</comment>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name><name pos:line="11" pos:column="22">hex<pos:position pos:line="11" pos:column="25"/></name><index pos:line="11" pos:column="25">[<expr><literal type="number" pos:line="11" pos:column="26">0<pos:position pos:line="11" pos:column="27"/></literal></expr>]<pos:position pos:line="11" pos:column="28"/></index></name></expr>)<pos:position pos:line="11" pos:column="29"/></condition><then pos:line="11" pos:column="29">
			<block type="pseudo"><return pos:line="12" pos:column="25">return <expr><operator pos:line="12" pos:column="32">-<pos:position pos:line="12" pos:column="33"/></operator><literal type="number" pos:line="12" pos:column="33">1<pos:position pos:line="12" pos:column="34"/></literal></expr>;<pos:position pos:line="12" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="13" pos:column="17">val<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <operator pos:line="13" pos:column="23">(<pos:position pos:line="13" pos:column="24"/></operator><call><name pos:line="13" pos:column="24">hexval<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name><name pos:line="13" pos:column="31">hex<pos:position pos:line="13" pos:column="34"/></name><index pos:line="13" pos:column="34">[<expr><literal type="number" pos:line="13" pos:column="35">0<pos:position pos:line="13" pos:column="36"/></literal></expr>]<pos:position pos:line="13" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="38"/></argument_list></call> <operator pos:line="13" pos:column="39">&lt;&lt;<pos:position pos:line="13" pos:column="47"/></operator> <literal type="number" pos:line="13" pos:column="42">4<pos:position pos:line="13" pos:column="43"/></literal><operator pos:line="13" pos:column="43">)<pos:position pos:line="13" pos:column="44"/></operator> <operator pos:line="13" pos:column="45">|<pos:position pos:line="13" pos:column="46"/></operator> <call><name pos:line="13" pos:column="47">hexval<pos:position pos:line="13" pos:column="53"/></name><argument_list pos:line="13" pos:column="53">(<argument><expr><name><name pos:line="13" pos:column="54">hex<pos:position pos:line="13" pos:column="57"/></name><index pos:line="13" pos:column="57">[<expr><literal type="number" pos:line="13" pos:column="58">1<pos:position pos:line="13" pos:column="59"/></literal></expr>]<pos:position pos:line="13" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="62"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">val<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">&amp;<pos:position pos:line="14" pos:column="30"/></operator> <operator pos:line="14" pos:column="27">~<pos:position pos:line="14" pos:column="28"/></operator><literal type="number" pos:line="14" pos:column="28">0xff<pos:position pos:line="14" pos:column="32"/></literal></expr>)<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33">
			<block type="pseudo"><return pos:line="15" pos:column="25">return <expr><operator pos:line="15" pos:column="32">-<pos:position pos:line="15" pos:column="33"/></operator><literal type="number" pos:line="15" pos:column="33">1<pos:position pos:line="15" pos:column="34"/></literal></expr>;<pos:position pos:line="15" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><operator pos:line="16" pos:column="17">*<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">sha1<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">++<pos:position pos:line="16" pos:column="24"/></operator> <operator pos:line="16" pos:column="25">=<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="27">val<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="17" pos:column="17">hex<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">+=<pos:position pos:line="17" pos:column="23"/></operator> <literal type="number" pos:line="17" pos:column="24">2<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></for>
	<return pos:line="19" pos:column="9">return <expr><literal type="number" pos:line="19" pos:column="16">0<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
