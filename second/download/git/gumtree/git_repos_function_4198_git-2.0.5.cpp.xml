<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4198_git-2.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_upload_archive_writer<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">argc<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier><modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">argv<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="60">const<pos:position pos:line="1" pos:column="65"/></specifier> <name pos:line="1" pos:column="66">char<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">prefix<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">argv_array<pos:position pos:line="3" pos:column="26"/></name></name></type> <name pos:line="3" pos:column="27">sent_argv<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><name pos:line="3" pos:column="39">ARGV_ARRAY_INIT<pos:position pos:line="3" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="55"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">arg_cmd<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><literal type="string" pos:line="4" pos:column="31">"argument "<pos:position pos:line="4" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">argc<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">!=<pos:position pos:line="6" pos:column="20"/></operator> <literal type="number" pos:line="6" pos:column="21">2<pos:position pos:line="6" pos:column="22"/></literal></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">usage<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">upload_archive_usage<pos:position pos:line="7" pos:column="43"/></name></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">enter_repo<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name><name pos:line="9" pos:column="25">argv<pos:position pos:line="9" pos:column="29"/></name><index pos:line="9" pos:column="29">[<expr><literal type="number" pos:line="9" pos:column="30">1<pos:position pos:line="9" pos:column="31"/></literal></expr>]<pos:position pos:line="9" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="34">0<pos:position pos:line="9" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">die<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><literal type="string" pos:line="10" pos:column="21">"'%s' does not appear to be a git repository"<pos:position pos:line="10" pos:column="66"/></literal></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="68">argv<pos:position pos:line="10" pos:column="72"/></name><index pos:line="10" pos:column="72">[<expr><literal type="number" pos:line="10" pos:column="73">1<pos:position pos:line="10" pos:column="74"/></literal></expr>]<pos:position pos:line="10" pos:column="75"/></index></name></expr></argument>)<pos:position pos:line="10" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="77"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="12" pos:column="9">/* put received options in sent_argv[] */</comment>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">argv_array_push<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><operator pos:line="13" pos:column="25">&amp;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="26">sent_argv<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="37">"git-upload-archive"<pos:position pos:line="13" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
	<for pos:line="14" pos:column="9">for <control pos:line="14" pos:column="13">(<init pos:line="14" pos:column="14">;<pos:position pos:line="14" pos:column="15"/></init><condition pos:line="14" pos:column="15">;<pos:position pos:line="14" pos:column="16"/></condition><incr/>)<pos:position pos:line="14" pos:column="17"/></control> <block pos:line="14" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">char<pos:position pos:line="15" pos:column="21"/></name> <modifier pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></modifier></type><name pos:line="15" pos:column="23">buf<pos:position pos:line="15" pos:column="26"/></name> <init pos:line="15" pos:column="27">= <expr><call><name pos:line="15" pos:column="29">packet_read_line<pos:position pos:line="15" pos:column="45"/></name><argument_list pos:line="15" pos:column="45">(<argument><expr><literal type="number" pos:line="15" pos:column="46">0<pos:position pos:line="15" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="49">NULL<pos:position pos:line="15" pos:column="53"/></name></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="55"/></decl_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">buf<pos:position pos:line="16" pos:column="25"/></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26">
			<block type="pseudo"><break pos:line="17" pos:column="25">break;<pos:position pos:line="17" pos:column="31"/></break></block></then></if>	<comment type="block" pos:line="17" pos:column="33">/* got a flush */</comment>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name><name pos:line="18" pos:column="21">sent_argv<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">.<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">argc<pos:position pos:line="18" pos:column="35"/></name></name> <operator pos:line="18" pos:column="36">&gt;<pos:position pos:line="18" pos:column="40"/></operator> <name pos:line="18" pos:column="38">MAX_ARGS<pos:position pos:line="18" pos:column="46"/></name></expr>)<pos:position pos:line="18" pos:column="47"/></condition><then pos:line="18" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="25">die<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><literal type="string" pos:line="19" pos:column="29">"Too many options (&gt;%d)"<pos:position pos:line="19" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="55">MAX_ARGS<pos:position pos:line="19" pos:column="63"/></name> <operator pos:line="19" pos:column="64">-<pos:position pos:line="19" pos:column="65"/></operator> <literal type="number" pos:line="19" pos:column="66">1<pos:position pos:line="19" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="69"/></expr_stmt></block></then></if>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><call><name pos:line="21" pos:column="22">starts_with<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">buf<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="39">arg_cmd<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="48"/></condition><then pos:line="21" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">die<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><literal type="string" pos:line="22" pos:column="29">"'argument' token or flush expected"<pos:position pos:line="22" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="67"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">argv_array_push<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><operator pos:line="23" pos:column="33">&amp;<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="34">sent_argv<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="45">buf<pos:position pos:line="23" pos:column="48"/></name> <operator pos:line="23" pos:column="49">+<pos:position pos:line="23" pos:column="50"/></operator> <call><name pos:line="23" pos:column="51">strlen<pos:position pos:line="23" pos:column="57"/></name><argument_list pos:line="23" pos:column="57">(<argument><expr><name pos:line="23" pos:column="58">arg_cmd<pos:position pos:line="23" pos:column="65"/></name></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="68"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></for>

	<comment type="block" pos:line="26" pos:column="9">/* parse all options sent by the client */</comment>
	<return pos:line="27" pos:column="9">return <expr><call><name pos:line="27" pos:column="16">write_archive<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name><name pos:line="27" pos:column="30">sent_argv<pos:position pos:line="27" pos:column="39"/></name><operator pos:line="27" pos:column="39">.<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="40">argc<pos:position pos:line="27" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="46">sent_argv<pos:position pos:line="27" pos:column="55"/></name><operator pos:line="27" pos:column="55">.<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="56">argv<pos:position pos:line="27" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="62">prefix<pos:position pos:line="27" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="70">0<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="73">NULL<pos:position pos:line="27" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="79">1<pos:position pos:line="27" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="82"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
