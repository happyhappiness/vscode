<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3306_git-2.4.10.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">shift_tree_by<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">unsigned<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">hash1<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>,
		   <parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">unsigned<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">hash2<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>,
		   <parameter><decl><type><name pos:line="3" pos:column="20">unsigned<pos:position pos:line="3" pos:column="28"/></name> <name pos:line="3" pos:column="29">char<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">shifted<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>,
		   <parameter><decl><type><specifier pos:line="4" pos:column="20">const<pos:position pos:line="4" pos:column="25"/></specifier> <name pos:line="4" pos:column="26">char<pos:position pos:line="4" pos:column="30"/></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">shift_prefix<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="45"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name></type> <name><name pos:line="6" pos:column="23">sub1<pos:position pos:line="6" pos:column="27"/></name><index pos:line="6" pos:column="27">[<expr><literal type="number" pos:line="6" pos:column="28">20<pos:position pos:line="6" pos:column="30"/></literal></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="6" pos:column="33">sub2<pos:position pos:line="6" pos:column="37"/></name><index pos:line="6" pos:column="37">[<expr><literal type="number" pos:line="6" pos:column="38">20<pos:position pos:line="6" pos:column="40"/></literal></expr>]<pos:position pos:line="6" pos:column="41"/></index></name></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">mode1<pos:position pos:line="7" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="25">mode2<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">candidate<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><literal type="number" pos:line="8" pos:column="30">0<pos:position pos:line="8" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/* Can hash2 be a tree at shift_prefix in tree hash1? */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><call><name pos:line="11" pos:column="14">get_tree_entry<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">hash1<pos:position pos:line="11" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="36">shift_prefix<pos:position pos:line="11" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="50">sub1<pos:position pos:line="11" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="56">&amp;<pos:position pos:line="11" pos:column="61"/></operator><name pos:line="11" pos:column="57">mode1<pos:position pos:line="11" pos:column="62"/></name></expr></argument>)<pos:position pos:line="11" pos:column="63"/></argument_list></call> <operator pos:line="11" pos:column="64">&amp;&amp;<pos:position pos:line="11" pos:column="74"/></operator>
	    <call><name pos:line="12" pos:column="13">S_ISDIR<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">mode1<pos:position pos:line="12" pos:column="26"/></name></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="17">candidate<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">|=<pos:position pos:line="13" pos:column="29"/></operator> <literal type="number" pos:line="13" pos:column="30">1<pos:position pos:line="13" pos:column="31"/></literal></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="15" pos:column="9">/* Can hash1 be a tree at shift_prefix in tree hash2? */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><call><name pos:line="16" pos:column="14">get_tree_entry<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">hash2<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="36">shift_prefix<pos:position pos:line="16" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="50">sub2<pos:position pos:line="16" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="56">&amp;<pos:position pos:line="16" pos:column="61"/></operator><name pos:line="16" pos:column="57">mode2<pos:position pos:line="16" pos:column="62"/></name></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call> <operator pos:line="16" pos:column="64">&amp;&amp;<pos:position pos:line="16" pos:column="74"/></operator>
	    <call><name pos:line="17" pos:column="13">S_ISDIR<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">mode2<pos:position pos:line="17" pos:column="26"/></name></expr></argument>)<pos:position pos:line="17" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="28"/></condition><then pos:line="17" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">candidate<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">|=<pos:position pos:line="18" pos:column="29"/></operator> <literal type="number" pos:line="18" pos:column="30">2<pos:position pos:line="18" pos:column="31"/></literal></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">candidate<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">==<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="26">3<pos:position pos:line="20" pos:column="27"/></literal></expr>)<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28"> <block pos:line="20" pos:column="29">{
		<comment type="block" pos:line="21" pos:column="17">/* Both are plausible -- we need to evaluate the score */</comment>
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">int<pos:position pos:line="22" pos:column="20"/></name></type> <name pos:line="22" pos:column="21">best_score<pos:position pos:line="22" pos:column="31"/></name> <init pos:line="22" pos:column="32">= <expr><call><name pos:line="22" pos:column="34">score_trees<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><name pos:line="22" pos:column="46">hash1<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="53">hash2<pos:position pos:line="22" pos:column="58"/></name></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="60"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">int<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">score<pos:position pos:line="23" pos:column="26"/></name></decl>;<pos:position pos:line="23" pos:column="27"/></decl_stmt>

		<expr_stmt><expr><name pos:line="25" pos:column="17">candidate<pos:position pos:line="25" pos:column="26"/></name> <operator pos:line="25" pos:column="27">=<pos:position pos:line="25" pos:column="28"/></operator> <literal type="number" pos:line="25" pos:column="29">0<pos:position pos:line="25" pos:column="30"/></literal></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="26" pos:column="17">score<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">=<pos:position pos:line="26" pos:column="24"/></operator> <call><name pos:line="26" pos:column="25">score_trees<pos:position pos:line="26" pos:column="36"/></name><argument_list pos:line="26" pos:column="36">(<argument><expr><name pos:line="26" pos:column="37">sub1<pos:position pos:line="26" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="43">hash2<pos:position pos:line="26" pos:column="48"/></name></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="50"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">score<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">&gt;<pos:position pos:line="27" pos:column="31"/></operator> <name pos:line="27" pos:column="29">best_score<pos:position pos:line="27" pos:column="39"/></name></expr>)<pos:position pos:line="27" pos:column="40"/></condition><then pos:line="27" pos:column="40"> <block pos:line="27" pos:column="41">{
			<expr_stmt><expr><name pos:line="28" pos:column="25">candidate<pos:position pos:line="28" pos:column="34"/></name> <operator pos:line="28" pos:column="35">=<pos:position pos:line="28" pos:column="36"/></operator> <literal type="number" pos:line="28" pos:column="37">1<pos:position pos:line="28" pos:column="38"/></literal></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="29" pos:column="25">best_score<pos:position pos:line="29" pos:column="35"/></name> <operator pos:line="29" pos:column="36">=<pos:position pos:line="29" pos:column="37"/></operator> <name pos:line="29" pos:column="38">score<pos:position pos:line="29" pos:column="43"/></name></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="31" pos:column="17">score<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <call><name pos:line="31" pos:column="25">score_trees<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><name pos:line="31" pos:column="37">sub2<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">hash1<pos:position pos:line="31" pos:column="48"/></name></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">score<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">&gt;<pos:position pos:line="32" pos:column="31"/></operator> <name pos:line="32" pos:column="29">best_score<pos:position pos:line="32" pos:column="39"/></name></expr>)<pos:position pos:line="32" pos:column="40"/></condition><then pos:line="32" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="25">candidate<pos:position pos:line="33" pos:column="34"/></name> <operator pos:line="33" pos:column="35">=<pos:position pos:line="33" pos:column="36"/></operator> <literal type="number" pos:line="33" pos:column="37">2<pos:position pos:line="33" pos:column="38"/></literal></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><operator pos:line="36" pos:column="13">!<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">candidate<pos:position pos:line="36" pos:column="23"/></name></expr>)<pos:position pos:line="36" pos:column="24"/></condition><then pos:line="36" pos:column="24"> <block pos:line="36" pos:column="25">{
		<comment type="block" pos:line="37" pos:column="17">/* Neither is plausible -- do not shift */</comment>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">hashcpy<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">shifted<pos:position pos:line="38" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="34">hash2<pos:position pos:line="38" pos:column="39"/></name></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
		<return pos:line="39" pos:column="17">return;<pos:position pos:line="39" pos:column="24"/></return>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">candidate<pos:position pos:line="42" pos:column="22"/></name> <operator pos:line="42" pos:column="23">==<pos:position pos:line="42" pos:column="25"/></operator> <literal type="number" pos:line="42" pos:column="26">1<pos:position pos:line="42" pos:column="27"/></literal></expr>)<pos:position pos:line="42" pos:column="28"/></condition><then pos:line="42" pos:column="28">
		<comment type="block" pos:line="43" pos:column="17">/*
		 * shift tree2 down by adding shift_prefix above it
		 * to match tree1.
		 */</comment>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">splice_tree<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">hash1<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="36">shift_prefix<pos:position pos:line="47" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="50">hash2<pos:position pos:line="47" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="57">shifted<pos:position pos:line="47" pos:column="64"/></name></expr></argument>)<pos:position pos:line="47" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="66"/></expr_stmt></block></then>
	<else pos:line="48" pos:column="9">else
		<comment type="block" pos:line="49" pos:column="17">/*
		 * shift tree2 up by removing shift_prefix from it
		 * to match tree1.
		 */</comment>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="17">hashcpy<pos:position pos:line="53" pos:column="24"/></name><argument_list pos:line="53" pos:column="24">(<argument><expr><name pos:line="53" pos:column="25">shifted<pos:position pos:line="53" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="34">sub2<pos:position pos:line="53" pos:column="38"/></name></expr></argument>)<pos:position pos:line="53" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="40"/></expr_stmt></block></else></if>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
