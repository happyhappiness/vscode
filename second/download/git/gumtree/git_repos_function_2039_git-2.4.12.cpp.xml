<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2039_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">append_normalized_escapes<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">strbuf<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">buf<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
				     <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">from<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
				     <parameter><decl><type><name pos:line="3" pos:column="38">size_t<pos:position pos:line="3" pos:column="44"/></name></type> <name pos:line="3" pos:column="45">from_len<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>,
				     <parameter><decl><type><specifier pos:line="4" pos:column="38">const<pos:position pos:line="4" pos:column="43"/></specifier> <name pos:line="4" pos:column="44">char<pos:position pos:line="4" pos:column="48"/></name> <modifier pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></modifier></type><name pos:line="4" pos:column="50">esc_extra<pos:position pos:line="4" pos:column="59"/></name></decl></parameter>,
				     <parameter><decl><type><specifier pos:line="5" pos:column="38">const<pos:position pos:line="5" pos:column="43"/></specifier> <name pos:line="5" pos:column="44">char<pos:position pos:line="5" pos:column="48"/></name> <modifier pos:line="5" pos:column="49">*<pos:position pos:line="5" pos:column="50"/></modifier></type><name pos:line="5" pos:column="50">esc_ok<pos:position pos:line="5" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="57"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<comment type="block" pos:line="7" pos:column="9">/*
	 * Append to strbuf 'buf' characters from string 'from' with length
	 * 'from_len' while unescaping characters that do not need to be escaped
	 * and escaping characters that do.  The set of characters to escape
	 * (the complement of which is unescaped) starts out as the RFC 3986
	 * unsafe characters (0x00-0x1F,0x7F-0xFF," &lt;&gt;\"#%{}|\\^`").  If
	 * 'esc_extra' is not NULL, those additional characters will also always
	 * be escaped.  If 'esc_ok' is not NULL, those characters will be left
	 * escaped if found that way, but will not be unescaped otherwise (used
	 * for delimiters).  If a %-escape sequence is encountered that is not
	 * followed by 2 hexadecimal digits, the sequence is invalid and
	 * false (0) will be returned.  Otherwise true (1) will be returned for
	 * success.
	 *
	 * Note that all %-escape sequences will be normalized to UPPERCASE
	 * as indicated in RFC 3986.  Unless included in esc_extra or esc_ok
	 * alphanumerics and "-._~" will always be unescaped as per RFC 3986.
	 */</comment>

	<while pos:line="26" pos:column="9">while <condition pos:line="26" pos:column="15">(<expr><name pos:line="26" pos:column="16">from_len<pos:position pos:line="26" pos:column="24"/></name></expr>)<pos:position pos:line="26" pos:column="25"/></condition> <block pos:line="26" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">int<pos:position pos:line="27" pos:column="20"/></name></type> <name pos:line="27" pos:column="21">ch<pos:position pos:line="27" pos:column="23"/></name> <init pos:line="27" pos:column="24">= <expr><operator pos:line="27" pos:column="26">*<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="27">from<pos:position pos:line="27" pos:column="31"/></name><operator pos:line="27" pos:column="31">++<pos:position pos:line="27" pos:column="33"/></operator></expr></init></decl>;<pos:position pos:line="27" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">int<pos:position pos:line="28" pos:column="20"/></name></type> <name pos:line="28" pos:column="21">was_esc<pos:position pos:line="28" pos:column="28"/></name> <init pos:line="28" pos:column="29">= <expr><literal type="number" pos:line="28" pos:column="31">0<pos:position pos:line="28" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="33"/></decl_stmt>

		<expr_stmt><expr><name pos:line="30" pos:column="17">from_len<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">--<pos:position pos:line="30" pos:column="27"/></operator></expr>;<pos:position pos:line="30" pos:column="28"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">ch<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">==<pos:position pos:line="31" pos:column="26"/></operator> <literal type="char" pos:line="31" pos:column="27">'%'<pos:position pos:line="31" pos:column="30"/></literal></expr>)<pos:position pos:line="31" pos:column="31"/></condition><then pos:line="31" pos:column="31"> <block pos:line="31" pos:column="32">{
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><name pos:line="32" pos:column="29">from_len<pos:position pos:line="32" pos:column="37"/></name> <operator pos:line="32" pos:column="38">&lt;<pos:position pos:line="32" pos:column="42"/></operator> <literal type="number" pos:line="32" pos:column="40">2<pos:position pos:line="32" pos:column="41"/></literal> <operator pos:line="32" pos:column="42">||<pos:position pos:line="32" pos:column="44"/></operator>
			    <operator pos:line="33" pos:column="29">!<pos:position pos:line="33" pos:column="30"/></operator><call><name pos:line="33" pos:column="30">isxdigit<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name><name pos:line="33" pos:column="39">from<pos:position pos:line="33" pos:column="43"/></name><index pos:line="33" pos:column="43">[<expr><literal type="number" pos:line="33" pos:column="44">0<pos:position pos:line="33" pos:column="45"/></literal></expr>]<pos:position pos:line="33" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call> <operator pos:line="33" pos:column="48">||<pos:position pos:line="33" pos:column="50"/></operator>
			    <operator pos:line="34" pos:column="29">!<pos:position pos:line="34" pos:column="30"/></operator><call><name pos:line="34" pos:column="30">isxdigit<pos:position pos:line="34" pos:column="38"/></name><argument_list pos:line="34" pos:column="38">(<argument><expr><name><name pos:line="34" pos:column="39">from<pos:position pos:line="34" pos:column="43"/></name><index pos:line="34" pos:column="43">[<expr><literal type="number" pos:line="34" pos:column="44">1<pos:position pos:line="34" pos:column="45"/></literal></expr>]<pos:position pos:line="34" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="48"/></condition><then pos:line="34" pos:column="48">
				<block type="pseudo"><return pos:line="35" pos:column="33">return <expr><literal type="number" pos:line="35" pos:column="40">0<pos:position pos:line="35" pos:column="41"/></literal></expr>;<pos:position pos:line="35" pos:column="42"/></return></block></then></if>
			<expr_stmt><expr><name pos:line="36" pos:column="25">ch<pos:position pos:line="36" pos:column="27"/></name> <operator pos:line="36" pos:column="28">=<pos:position pos:line="36" pos:column="29"/></operator> <call><name pos:line="36" pos:column="30">hexval<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><operator pos:line="36" pos:column="37">*<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="38">from<pos:position pos:line="36" pos:column="42"/></name><operator pos:line="36" pos:column="42">++<pos:position pos:line="36" pos:column="44"/></operator></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call> <operator pos:line="36" pos:column="46">&lt;&lt;<pos:position pos:line="36" pos:column="54"/></operator> <literal type="number" pos:line="36" pos:column="49">4<pos:position pos:line="36" pos:column="50"/></literal></expr>;<pos:position pos:line="36" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name pos:line="37" pos:column="25">ch<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">|=<pos:position pos:line="37" pos:column="30"/></operator> <call><name pos:line="37" pos:column="31">hexval<pos:position pos:line="37" pos:column="37"/></name><argument_list pos:line="37" pos:column="37">(<argument><expr><operator pos:line="37" pos:column="38">*<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="39">from<pos:position pos:line="37" pos:column="43"/></name><operator pos:line="37" pos:column="43">++<pos:position pos:line="37" pos:column="45"/></operator></expr></argument>)<pos:position pos:line="37" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="38" pos:column="25">from_len<pos:position pos:line="38" pos:column="33"/></name> <operator pos:line="38" pos:column="34">-=<pos:position pos:line="38" pos:column="36"/></operator> <literal type="number" pos:line="38" pos:column="37">2<pos:position pos:line="38" pos:column="38"/></literal></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="39" pos:column="25">was_esc<pos:position pos:line="39" pos:column="32"/></name> <operator pos:line="39" pos:column="33">=<pos:position pos:line="39" pos:column="34"/></operator> <literal type="number" pos:line="39" pos:column="35">1<pos:position pos:line="39" pos:column="36"/></literal></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><operator pos:line="41" pos:column="21">(<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">unsigned<pos:position pos:line="41" pos:column="30"/></name> <name pos:line="41" pos:column="31">char<pos:position pos:line="41" pos:column="35"/></name><operator pos:line="41" pos:column="35">)<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="36">ch<pos:position pos:line="41" pos:column="38"/></name> <operator pos:line="41" pos:column="39">&lt;=<pos:position pos:line="41" pos:column="44"/></operator> <literal type="number" pos:line="41" pos:column="42">0x1F<pos:position pos:line="41" pos:column="46"/></literal> <operator pos:line="41" pos:column="47">||<pos:position pos:line="41" pos:column="49"/></operator> <operator pos:line="41" pos:column="50">(<pos:position pos:line="41" pos:column="51"/></operator><name pos:line="41" pos:column="51">unsigned<pos:position pos:line="41" pos:column="59"/></name> <name pos:line="41" pos:column="60">char<pos:position pos:line="41" pos:column="64"/></name><operator pos:line="41" pos:column="64">)<pos:position pos:line="41" pos:column="65"/></operator><name pos:line="41" pos:column="65">ch<pos:position pos:line="41" pos:column="67"/></name> <operator pos:line="41" pos:column="68">&gt;=<pos:position pos:line="41" pos:column="73"/></operator> <literal type="number" pos:line="41" pos:column="71">0x7F<pos:position pos:line="41" pos:column="75"/></literal> <operator pos:line="41" pos:column="76">||<pos:position pos:line="41" pos:column="78"/></operator>
		    <call><name pos:line="42" pos:column="21">strchr<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">URL_UNSAFE_CHARS<pos:position pos:line="42" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="46">ch<pos:position pos:line="42" pos:column="48"/></name></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call> <operator pos:line="42" pos:column="50">||<pos:position pos:line="42" pos:column="52"/></operator>
		    <operator pos:line="43" pos:column="21">(<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">esc_extra<pos:position pos:line="43" pos:column="31"/></name> <operator pos:line="43" pos:column="32">&amp;&amp;<pos:position pos:line="43" pos:column="42"/></operator> <call><name pos:line="43" pos:column="35">strchr<pos:position pos:line="43" pos:column="41"/></name><argument_list pos:line="43" pos:column="41">(<argument><expr><name pos:line="43" pos:column="42">esc_extra<pos:position pos:line="43" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="53">ch<pos:position pos:line="43" pos:column="55"/></name></expr></argument>)<pos:position pos:line="43" pos:column="56"/></argument_list></call><operator pos:line="43" pos:column="56">)<pos:position pos:line="43" pos:column="57"/></operator> <operator pos:line="43" pos:column="58">||<pos:position pos:line="43" pos:column="60"/></operator>
		    <operator pos:line="44" pos:column="21">(<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">was_esc<pos:position pos:line="44" pos:column="29"/></name> <operator pos:line="44" pos:column="30">&amp;&amp;<pos:position pos:line="44" pos:column="40"/></operator> <call><name pos:line="44" pos:column="33">strchr<pos:position pos:line="44" pos:column="39"/></name><argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">esc_ok<pos:position pos:line="44" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="48">ch<pos:position pos:line="44" pos:column="50"/></name></expr></argument>)<pos:position pos:line="44" pos:column="51"/></argument_list></call><operator pos:line="44" pos:column="51">)<pos:position pos:line="44" pos:column="52"/></operator></expr>)<pos:position pos:line="44" pos:column="53"/></condition><then pos:line="44" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">strbuf_addf<pos:position pos:line="45" pos:column="36"/></name><argument_list pos:line="45" pos:column="36">(<argument><expr><name pos:line="45" pos:column="37">buf<pos:position pos:line="45" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="42">"%%%02X"<pos:position pos:line="45" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="52">(<pos:position pos:line="45" pos:column="53"/></operator><name pos:line="45" pos:column="53">unsigned<pos:position pos:line="45" pos:column="61"/></name> <name pos:line="45" pos:column="62">char<pos:position pos:line="45" pos:column="66"/></name><operator pos:line="45" pos:column="66">)<pos:position pos:line="45" pos:column="67"/></operator><name pos:line="45" pos:column="67">ch<pos:position pos:line="45" pos:column="69"/></name></expr></argument>)<pos:position pos:line="45" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="71"/></expr_stmt></block></then>
		<else pos:line="46" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="25">strbuf_addch<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">buf<pos:position pos:line="47" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="43">ch<pos:position pos:line="47" pos:column="45"/></name></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt></block></else></if>
	}<pos:position pos:line="48" pos:column="10"/></block></while>

	<return pos:line="50" pos:column="9">return <expr><literal type="number" pos:line="50" pos:column="16">1<pos:position pos:line="50" pos:column="17"/></literal></expr>;<pos:position pos:line="50" pos:column="18"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
