<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4019_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">env_append<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">argv_array<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">env<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">key<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="65">const<pos:position pos:line="1" pos:column="70"/></specifier> <name pos:line="1" pos:column="71">char<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">val<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">quoted<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name pos:line="3" pos:column="32">STRBUF_INIT<pos:position pos:line="3" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">old<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * Avoid quoting if it's not necessary, for maximum compatibility
	 * with older parsers which don't understand the quoting.
	 */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">*<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">val<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">==<pos:position pos:line="10" pos:column="20"/></operator> <literal type="char" pos:line="10" pos:column="21">'"'<pos:position pos:line="10" pos:column="24"/></literal> <operator pos:line="10" pos:column="25">||<pos:position pos:line="10" pos:column="27"/></operator> <call><name pos:line="10" pos:column="28">strchr<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><name pos:line="10" pos:column="35">val<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="40">PATH_SEP<pos:position pos:line="10" pos:column="48"/></name></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="50"/></condition><then pos:line="10" pos:column="50"> <block pos:line="10" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">strbuf_addch<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><operator pos:line="11" pos:column="30">&amp;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="31">quoted<pos:position pos:line="11" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="39">'"'<pos:position pos:line="11" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">quote_c_style<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><name pos:line="12" pos:column="31">val<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="36">&amp;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="37">quoted<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">NULL<pos:position pos:line="12" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="51">1<pos:position pos:line="12" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_addch<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><operator pos:line="13" pos:column="30">&amp;<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="31">quoted<pos:position pos:line="13" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="39">'"'<pos:position pos:line="13" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">val<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <name><name pos:line="14" pos:column="23">quoted<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">.<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="30">buf<pos:position pos:line="14" pos:column="33"/></name></name></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="17" pos:column="9">old<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">getenv<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">key<pos:position pos:line="17" pos:column="25"/></name></expr></argument>)<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">old<pos:position pos:line="18" pos:column="17"/></name></expr>)<pos:position pos:line="18" pos:column="18"/></condition><then pos:line="18" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="17">argv_array_pushf<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">env<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="39">"%s=%s"<pos:position pos:line="19" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="48">key<pos:position pos:line="19" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="53">val<pos:position pos:line="19" pos:column="56"/></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt></block></then>
	<else pos:line="20" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">argv_array_pushf<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">env<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="39">"%s=%s%c%s"<pos:position pos:line="21" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="52">key<pos:position pos:line="21" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="57">old<pos:position pos:line="21" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="62">PATH_SEP<pos:position pos:line="21" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="72">val<pos:position pos:line="21" pos:column="75"/></name></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="77"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">strbuf_release<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><operator pos:line="23" pos:column="24">&amp;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="25">quoted<pos:position pos:line="23" pos:column="31"/></name></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
