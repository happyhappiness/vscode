<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6441_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier><modifier pos:line="1" pos:column="14">*<pos:position pos:line="1" pos:column="15"/></modifier></type><name pos:line="1" pos:column="15">get_path_split<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">p<pos:position pos:line="3" pos:column="16"/></name></decl>, <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier><modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="20">path<pos:position pos:line="3" pos:column="24"/></name></decl>, <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="27">envpath<pos:position pos:line="3" pos:column="34"/></name> <init pos:line="3" pos:column="35">= <expr><call><name pos:line="3" pos:column="37">mingw_getenv<pos:position pos:line="3" pos:column="49"/></name><argument_list pos:line="3" pos:column="49">(<argument><expr><literal type="string" pos:line="3" pos:column="50">"PATH"<pos:position pos:line="3" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">n<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">envpath<pos:position pos:line="6" pos:column="21"/></name> <operator pos:line="6" pos:column="22">||<pos:position pos:line="6" pos:column="24"/></operator> <operator pos:line="6" pos:column="25">!<pos:position pos:line="6" pos:column="26"/></operator><operator pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></operator><name pos:line="6" pos:column="27">envpath<pos:position pos:line="6" pos:column="34"/></name></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><name pos:line="7" pos:column="24">NULL<pos:position pos:line="7" pos:column="28"/></name></expr>;<pos:position pos:line="7" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="9" pos:column="9">envpath<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <call><name pos:line="9" pos:column="19">xstrdup<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">envpath<pos:position pos:line="9" pos:column="34"/></name></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="10" pos:column="9">p<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <name pos:line="10" pos:column="13">envpath<pos:position pos:line="10" pos:column="20"/></name></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>
	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><name pos:line="11" pos:column="16">p<pos:position pos:line="11" pos:column="17"/></name></expr>)<pos:position pos:line="11" pos:column="18"/></condition> <block pos:line="11" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">char<pos:position pos:line="12" pos:column="21"/></name> <modifier pos:line="12" pos:column="22">*<pos:position pos:line="12" pos:column="23"/></modifier></type><name pos:line="12" pos:column="23">dir<pos:position pos:line="12" pos:column="26"/></name> <init pos:line="12" pos:column="27">= <expr><name pos:line="12" pos:column="29">p<pos:position pos:line="12" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">p<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <call><name pos:line="13" pos:column="21">strchr<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">p<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="31">';'<pos:position pos:line="13" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">p<pos:position pos:line="14" pos:column="22"/></name></expr>)<pos:position pos:line="14" pos:column="23"/></condition><then pos:line="14" pos:column="23"> <block type="pseudo"><expr_stmt><expr><operator pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">p<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">++<pos:position pos:line="14" pos:column="28"/></operator> <operator pos:line="14" pos:column="29">=<pos:position pos:line="14" pos:column="30"/></operator> <literal type="char" pos:line="14" pos:column="31">'\0'<pos:position pos:line="14" pos:column="35"/></literal></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt></block></then></if>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">dir<pos:position pos:line="15" pos:column="25"/></name></expr>)<pos:position pos:line="15" pos:column="26"/></condition><then pos:line="15" pos:column="26"> <block pos:line="15" pos:column="27">{	<comment type="block" pos:line="15" pos:column="33">/* not earlier, catches series of ; */</comment>
			<expr_stmt><expr><operator pos:line="16" pos:column="25">++<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">n<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if>
	}<pos:position pos:line="18" pos:column="10"/></block></while>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">n<pos:position pos:line="19" pos:column="15"/></name></expr>)<pos:position pos:line="19" pos:column="16"/></condition><then pos:line="19" pos:column="16">
		<block type="pseudo"><return pos:line="20" pos:column="17">return <expr><name pos:line="20" pos:column="24">NULL<pos:position pos:line="20" pos:column="28"/></name></expr>;<pos:position pos:line="20" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">ALLOC_ARRAY<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">path<pos:position pos:line="22" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="27">n<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">+<pos:position pos:line="22" pos:column="30"/></operator> <literal type="number" pos:line="22" pos:column="31">1<pos:position pos:line="22" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">p<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <name pos:line="23" pos:column="13">envpath<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="24" pos:column="9">i<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">=<pos:position pos:line="24" pos:column="12"/></operator> <literal type="number" pos:line="24" pos:column="13">0<pos:position pos:line="24" pos:column="14"/></literal></expr>;<pos:position pos:line="24" pos:column="15"/></expr_stmt>
	<do pos:line="25" pos:column="9">do <block pos:line="25" pos:column="12">{
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">*<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="22">p<pos:position pos:line="26" pos:column="23"/></name></expr>)<pos:position pos:line="26" pos:column="24"/></condition><then pos:line="26" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="25">path<pos:position pos:line="27" pos:column="29"/></name><index pos:line="27" pos:column="29">[<expr><name pos:line="27" pos:column="30">i<pos:position pos:line="27" pos:column="31"/></name><operator pos:line="27" pos:column="31">++<pos:position pos:line="27" pos:column="33"/></operator></expr>]<pos:position pos:line="27" pos:column="34"/></index></name> <operator pos:line="27" pos:column="35">=<pos:position pos:line="27" pos:column="36"/></operator> <call><name pos:line="27" pos:column="37">xstrdup<pos:position pos:line="27" pos:column="44"/></name><argument_list pos:line="27" pos:column="44">(<argument><expr><name pos:line="27" pos:column="45">p<pos:position pos:line="27" pos:column="46"/></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="28" pos:column="17">p<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <name pos:line="28" pos:column="21">p<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">+<pos:position pos:line="28" pos:column="23"/></operator><call><name pos:line="28" pos:column="23">strlen<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">p<pos:position pos:line="28" pos:column="31"/></name></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></call><operator pos:line="28" pos:column="32">+<pos:position pos:line="28" pos:column="33"/></operator><literal type="number" pos:line="28" pos:column="33">1<pos:position pos:line="28" pos:column="34"/></literal></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block> while <condition pos:line="29" pos:column="17">(<expr><name pos:line="29" pos:column="18">i<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">&lt;<pos:position pos:line="29" pos:column="24"/></operator> <name pos:line="29" pos:column="22">n<pos:position pos:line="29" pos:column="23"/></name></expr>)<pos:position pos:line="29" pos:column="24"/></condition>;<pos:position pos:line="29" pos:column="25"/></do>
	<expr_stmt><expr><name><name pos:line="30" pos:column="9">path<pos:position pos:line="30" pos:column="13"/></name><index pos:line="30" pos:column="13">[<expr><name pos:line="30" pos:column="14">i<pos:position pos:line="30" pos:column="15"/></name></expr>]<pos:position pos:line="30" pos:column="16"/></index></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <name pos:line="30" pos:column="19">NULL<pos:position pos:line="30" pos:column="23"/></name></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="32" pos:column="9">free<pos:position pos:line="32" pos:column="13"/></name><argument_list pos:line="32" pos:column="13">(<argument><expr><name pos:line="32" pos:column="14">envpath<pos:position pos:line="32" pos:column="21"/></name></expr></argument>)<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>

	<return pos:line="34" pos:column="9">return <expr><name pos:line="34" pos:column="16">path<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
