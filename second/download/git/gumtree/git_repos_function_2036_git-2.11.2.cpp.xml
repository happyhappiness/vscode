<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2036_git-2.11.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">prepare_packed_git_one<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">objdir<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">local<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">path<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><name pos:line="3" pos:column="30">STRBUF_INIT<pos:position pos:line="3" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">dirnamelen<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">DIR<pos:position pos:line="5" pos:column="12"/></name> <modifier pos:line="5" pos:column="13">*<pos:position pos:line="5" pos:column="14"/></modifier></type><name pos:line="5" pos:column="14">dir<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">dirent<pos:position pos:line="6" pos:column="22"/></name></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">de<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">string_list<pos:position pos:line="7" pos:column="27"/></name></name></type> <name pos:line="7" pos:column="28">garbage<pos:position pos:line="7" pos:column="35"/></name> <init pos:line="7" pos:column="36">= <expr><name pos:line="7" pos:column="38">STRING_LIST_INIT_DUP<pos:position pos:line="7" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="59"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">strbuf_addstr<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><operator pos:line="9" pos:column="23">&amp;<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="24">path<pos:position pos:line="9" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="30">objdir<pos:position pos:line="9" pos:column="36"/></name></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">strbuf_addstr<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><operator pos:line="10" pos:column="23">&amp;<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="24">path<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="30">"/pack"<pos:position pos:line="10" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">dir<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <call><name pos:line="11" pos:column="15">opendir<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name><name pos:line="11" pos:column="23">path<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">.<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">buf<pos:position pos:line="11" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">dir<pos:position pos:line="12" pos:column="17"/></name></expr>)<pos:position pos:line="12" pos:column="18"/></condition><then pos:line="12" pos:column="18"> <block pos:line="12" pos:column="19">{
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">errno<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">!=<pos:position pos:line="13" pos:column="29"/></operator> <name pos:line="13" pos:column="30">ENOENT<pos:position pos:line="13" pos:column="36"/></name></expr>)<pos:position pos:line="13" pos:column="37"/></condition><then pos:line="13" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="25">error_errno<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><literal type="string" pos:line="14" pos:column="37">"unable to open object pack directory: %s"<pos:position pos:line="14" pos:column="79"/></literal></expr></argument>,
				    <argument><expr><name><name pos:line="15" pos:column="37">path<pos:position pos:line="15" pos:column="41"/></name><operator pos:line="15" pos:column="41">.<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="42">buf<pos:position pos:line="15" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">strbuf_release<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><operator pos:line="16" pos:column="32">&amp;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="33">path<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>
		<return pos:line="17" pos:column="17">return;<pos:position pos:line="17" pos:column="24"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">strbuf_addch<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><operator pos:line="19" pos:column="22">&amp;<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="23">path<pos:position pos:line="19" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="29">'/'<pos:position pos:line="19" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">dirnamelen<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name><name pos:line="20" pos:column="22">path<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">.<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="27">len<pos:position pos:line="20" pos:column="30"/></name></name></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><operator pos:line="21" pos:column="16">(<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">de<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <call><name pos:line="21" pos:column="22">readdir<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">dir<pos:position pos:line="21" pos:column="33"/></name></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call><operator pos:line="21" pos:column="34">)<pos:position pos:line="21" pos:column="35"/></operator> <operator pos:line="21" pos:column="36">!=<pos:position pos:line="21" pos:column="38"/></operator> <name pos:line="21" pos:column="39">NULL<pos:position pos:line="21" pos:column="43"/></name></expr>)<pos:position pos:line="21" pos:column="44"/></condition> <block pos:line="21" pos:column="45">{
		<decl_stmt><decl><type><name><name pos:line="22" pos:column="17">struct<pos:position pos:line="22" pos:column="23"/></name> <name pos:line="22" pos:column="24">packed_git<pos:position pos:line="22" pos:column="34"/></name></name> <modifier pos:line="22" pos:column="35">*<pos:position pos:line="22" pos:column="36"/></modifier></type><name pos:line="22" pos:column="36">p<pos:position pos:line="22" pos:column="37"/></name></decl>;<pos:position pos:line="22" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">size_t<pos:position pos:line="23" pos:column="23"/></name></type> <name pos:line="23" pos:column="24">base_len<pos:position pos:line="23" pos:column="32"/></name></decl>;<pos:position pos:line="23" pos:column="33"/></decl_stmt>

		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">is_dot_or_dotdot<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><name><name pos:line="25" pos:column="38">de<pos:position pos:line="25" pos:column="40"/></name><operator pos:line="25" pos:column="40">-&gt;<pos:position pos:line="25" pos:column="45"/></operator><name pos:line="25" pos:column="42">d_name<pos:position pos:line="25" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="50"/></condition><then pos:line="25" pos:column="50">
			<block type="pseudo"><continue pos:line="26" pos:column="25">continue;<pos:position pos:line="26" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="28" pos:column="17">strbuf_setlen<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><operator pos:line="28" pos:column="31">&amp;<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="32">path<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="38">dirnamelen<pos:position pos:line="28" pos:column="48"/></name></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">strbuf_addstr<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><operator pos:line="29" pos:column="31">&amp;<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="32">path<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="38">de<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">-&gt;<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="42">d_name<pos:position pos:line="29" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>

		<expr_stmt><expr><name pos:line="31" pos:column="17">base_len<pos:position pos:line="31" pos:column="25"/></name> <operator pos:line="31" pos:column="26">=<pos:position pos:line="31" pos:column="27"/></operator> <name><name pos:line="31" pos:column="28">path<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">.<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="33">len<pos:position pos:line="31" pos:column="36"/></name></name></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><call><name pos:line="32" pos:column="21">strip_suffix_mem<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><name><name pos:line="32" pos:column="38">path<pos:position pos:line="32" pos:column="42"/></name><operator pos:line="32" pos:column="42">.<pos:position pos:line="32" pos:column="43"/></operator><name pos:line="32" pos:column="43">buf<pos:position pos:line="32" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="48">&amp;<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="49">base_len<pos:position pos:line="32" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="59">".idx"<pos:position pos:line="32" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="67"/></condition><then pos:line="32" pos:column="67"> <block pos:line="32" pos:column="68">{
			<comment type="block" pos:line="33" pos:column="25">/* Don't reopen a pack we already have. */</comment>
			<for pos:line="34" pos:column="25">for <control pos:line="34" pos:column="29">(<init><expr><name pos:line="34" pos:column="30">p<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">=<pos:position pos:line="34" pos:column="33"/></operator> <name pos:line="34" pos:column="34">packed_git<pos:position pos:line="34" pos:column="44"/></name></expr>;<pos:position pos:line="34" pos:column="45"/></init> <condition><expr><name pos:line="34" pos:column="46">p<pos:position pos:line="34" pos:column="47"/></name></expr>;<pos:position pos:line="34" pos:column="48"/></condition> <incr><expr><name pos:line="34" pos:column="49">p<pos:position pos:line="34" pos:column="50"/></name> <operator pos:line="34" pos:column="51">=<pos:position pos:line="34" pos:column="52"/></operator> <name><name pos:line="34" pos:column="53">p<pos:position pos:line="34" pos:column="54"/></name><operator pos:line="34" pos:column="54">-&gt;<pos:position pos:line="34" pos:column="59"/></operator><name pos:line="34" pos:column="56">next<pos:position pos:line="34" pos:column="60"/></name></name></expr></incr>)<pos:position pos:line="34" pos:column="61"/></control> <block pos:line="34" pos:column="62">{
				<decl_stmt><decl><type><name pos:line="35" pos:column="33">size_t<pos:position pos:line="35" pos:column="39"/></name></type> <name pos:line="35" pos:column="40">len<pos:position pos:line="35" pos:column="43"/></name></decl>;<pos:position pos:line="35" pos:column="44"/></decl_stmt>
				<if pos:line="36" pos:column="33">if <condition pos:line="36" pos:column="36">(<expr><call><name pos:line="36" pos:column="37">strip_suffix<pos:position pos:line="36" pos:column="49"/></name><argument_list pos:line="36" pos:column="49">(<argument><expr><name><name pos:line="36" pos:column="50">p<pos:position pos:line="36" pos:column="51"/></name><operator pos:line="36" pos:column="51">-&gt;<pos:position pos:line="36" pos:column="56"/></operator><name pos:line="36" pos:column="53">pack_name<pos:position pos:line="36" pos:column="62"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="64">".pack"<pos:position pos:line="36" pos:column="71"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="73">&amp;<pos:position pos:line="36" pos:column="78"/></operator><name pos:line="36" pos:column="74">len<pos:position pos:line="36" pos:column="77"/></name></expr></argument>)<pos:position pos:line="36" pos:column="78"/></argument_list></call> <operator pos:line="36" pos:column="79">&amp;&amp;<pos:position pos:line="36" pos:column="89"/></operator>
				    <name pos:line="37" pos:column="37">len<pos:position pos:line="37" pos:column="40"/></name> <operator pos:line="37" pos:column="41">==<pos:position pos:line="37" pos:column="43"/></operator> <name pos:line="37" pos:column="44">base_len<pos:position pos:line="37" pos:column="52"/></name> <operator pos:line="37" pos:column="53">&amp;&amp;<pos:position pos:line="37" pos:column="63"/></operator>
				    <operator pos:line="38" pos:column="37">!<pos:position pos:line="38" pos:column="38"/></operator><call><name pos:line="38" pos:column="38">memcmp<pos:position pos:line="38" pos:column="44"/></name><argument_list pos:line="38" pos:column="44">(<argument><expr><name><name pos:line="38" pos:column="45">p<pos:position pos:line="38" pos:column="46"/></name><operator pos:line="38" pos:column="46">-&gt;<pos:position pos:line="38" pos:column="51"/></operator><name pos:line="38" pos:column="48">pack_name<pos:position pos:line="38" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="59">path<pos:position pos:line="38" pos:column="63"/></name><operator pos:line="38" pos:column="63">.<pos:position pos:line="38" pos:column="64"/></operator><name pos:line="38" pos:column="64">buf<pos:position pos:line="38" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="69">len<pos:position pos:line="38" pos:column="72"/></name></expr></argument>)<pos:position pos:line="38" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="74"/></condition><then pos:line="38" pos:column="74">
					<block type="pseudo"><break pos:line="39" pos:column="41">break;<pos:position pos:line="39" pos:column="47"/></break></block></then></if>
			}<pos:position pos:line="40" pos:column="26"/></block></for>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><name pos:line="41" pos:column="29">p<pos:position pos:line="41" pos:column="30"/></name> <operator pos:line="41" pos:column="31">==<pos:position pos:line="41" pos:column="33"/></operator> <name pos:line="41" pos:column="34">NULL<pos:position pos:line="41" pos:column="38"/></name> <operator pos:line="41" pos:column="39">&amp;&amp;<pos:position pos:line="41" pos:column="49"/></operator>
			    <comment type="block" pos:line="42" pos:column="29">/*
			     * See if it really is a valid .idx file with
			     * corresponding .pack file that we can map.
			     */</comment>
			    <operator pos:line="46" pos:column="29">(<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="30">p<pos:position pos:line="46" pos:column="31"/></name> <operator pos:line="46" pos:column="32">=<pos:position pos:line="46" pos:column="33"/></operator> <call><name pos:line="46" pos:column="34">add_packed_git<pos:position pos:line="46" pos:column="48"/></name><argument_list pos:line="46" pos:column="48">(<argument><expr><name><name pos:line="46" pos:column="49">path<pos:position pos:line="46" pos:column="53"/></name><operator pos:line="46" pos:column="53">.<pos:position pos:line="46" pos:column="54"/></operator><name pos:line="46" pos:column="54">buf<pos:position pos:line="46" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="59">path<pos:position pos:line="46" pos:column="63"/></name><operator pos:line="46" pos:column="63">.<pos:position pos:line="46" pos:column="64"/></operator><name pos:line="46" pos:column="64">len<pos:position pos:line="46" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="69">local<pos:position pos:line="46" pos:column="74"/></name></expr></argument>)<pos:position pos:line="46" pos:column="75"/></argument_list></call><operator pos:line="46" pos:column="75">)<pos:position pos:line="46" pos:column="76"/></operator> <operator pos:line="46" pos:column="77">!=<pos:position pos:line="46" pos:column="79"/></operator> <name pos:line="46" pos:column="80">NULL<pos:position pos:line="46" pos:column="84"/></name></expr>)<pos:position pos:line="46" pos:column="85"/></condition><then pos:line="46" pos:column="85">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="33">install_packed_git<pos:position pos:line="47" pos:column="51"/></name><argument_list pos:line="47" pos:column="51">(<argument><expr><name pos:line="47" pos:column="52">p<pos:position pos:line="47" pos:column="53"/></name></expr></argument>)<pos:position pos:line="47" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="55"/></expr_stmt></block></then></if>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>

		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><operator pos:line="50" pos:column="21">!<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">report_garbage<pos:position pos:line="50" pos:column="36"/></name></expr>)<pos:position pos:line="50" pos:column="37"/></condition><then pos:line="50" pos:column="37">
			<block type="pseudo"><continue pos:line="51" pos:column="25">continue;<pos:position pos:line="51" pos:column="34"/></continue></block></then></if>

		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><call><name pos:line="53" pos:column="21">ends_with<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><name><name pos:line="53" pos:column="31">de<pos:position pos:line="53" pos:column="33"/></name><operator pos:line="53" pos:column="33">-&gt;<pos:position pos:line="53" pos:column="38"/></operator><name pos:line="53" pos:column="35">d_name<pos:position pos:line="53" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="43">".idx"<pos:position pos:line="53" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="50"/></argument_list></call> <operator pos:line="53" pos:column="51">||<pos:position pos:line="53" pos:column="53"/></operator>
		    <call><name pos:line="54" pos:column="21">ends_with<pos:position pos:line="54" pos:column="30"/></name><argument_list pos:line="54" pos:column="30">(<argument><expr><name><name pos:line="54" pos:column="31">de<pos:position pos:line="54" pos:column="33"/></name><operator pos:line="54" pos:column="33">-&gt;<pos:position pos:line="54" pos:column="38"/></operator><name pos:line="54" pos:column="35">d_name<pos:position pos:line="54" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="43">".pack"<pos:position pos:line="54" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="51"/></argument_list></call> <operator pos:line="54" pos:column="52">||<pos:position pos:line="54" pos:column="54"/></operator>
		    <call><name pos:line="55" pos:column="21">ends_with<pos:position pos:line="55" pos:column="30"/></name><argument_list pos:line="55" pos:column="30">(<argument><expr><name><name pos:line="55" pos:column="31">de<pos:position pos:line="55" pos:column="33"/></name><operator pos:line="55" pos:column="33">-&gt;<pos:position pos:line="55" pos:column="38"/></operator><name pos:line="55" pos:column="35">d_name<pos:position pos:line="55" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="43">".bitmap"<pos:position pos:line="55" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="53"/></argument_list></call> <operator pos:line="55" pos:column="54">||<pos:position pos:line="55" pos:column="56"/></operator>
		    <call><name pos:line="56" pos:column="21">ends_with<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name><name pos:line="56" pos:column="31">de<pos:position pos:line="56" pos:column="33"/></name><operator pos:line="56" pos:column="33">-&gt;<pos:position pos:line="56" pos:column="38"/></operator><name pos:line="56" pos:column="35">d_name<pos:position pos:line="56" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="43">".keep"<pos:position pos:line="56" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="52"/></condition><then pos:line="56" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="25">string_list_append<pos:position pos:line="57" pos:column="43"/></name><argument_list pos:line="57" pos:column="43">(<argument><expr><operator pos:line="57" pos:column="44">&amp;<pos:position pos:line="57" pos:column="49"/></operator><name pos:line="57" pos:column="45">garbage<pos:position pos:line="57" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="54">path<pos:position pos:line="57" pos:column="58"/></name><operator pos:line="57" pos:column="58">.<pos:position pos:line="57" pos:column="59"/></operator><name pos:line="57" pos:column="59">buf<pos:position pos:line="57" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="64"/></expr_stmt></block></then>
		<else pos:line="58" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="25">report_garbage<pos:position pos:line="59" pos:column="39"/></name><argument_list pos:line="59" pos:column="39">(<argument><expr><name pos:line="59" pos:column="40">PACKDIR_FILE_GARBAGE<pos:position pos:line="59" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="62">path<pos:position pos:line="59" pos:column="66"/></name><operator pos:line="59" pos:column="66">.<pos:position pos:line="59" pos:column="67"/></operator><name pos:line="59" pos:column="67">buf<pos:position pos:line="59" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="72"/></expr_stmt></block></else></if>
	}<pos:position pos:line="60" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">closedir<pos:position pos:line="61" pos:column="17"/></name><argument_list pos:line="61" pos:column="17">(<argument><expr><name pos:line="61" pos:column="18">dir<pos:position pos:line="61" pos:column="21"/></name></expr></argument>)<pos:position pos:line="61" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">report_pack_garbage<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><operator pos:line="62" pos:column="29">&amp;<pos:position pos:line="62" pos:column="34"/></operator><name pos:line="62" pos:column="30">garbage<pos:position pos:line="62" pos:column="37"/></name></expr></argument>)<pos:position pos:line="62" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="63" pos:column="9">string_list_clear<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><operator pos:line="63" pos:column="27">&amp;<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="28">garbage<pos:position pos:line="63" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="37">0<pos:position pos:line="63" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="64" pos:column="9">strbuf_release<pos:position pos:line="64" pos:column="23"/></name><argument_list pos:line="64" pos:column="23">(<argument><expr><operator pos:line="64" pos:column="24">&amp;<pos:position pos:line="64" pos:column="29"/></operator><name pos:line="64" pos:column="25">path<pos:position pos:line="64" pos:column="29"/></name></expr></argument>)<pos:position pos:line="64" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="31"/></expr_stmt>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
