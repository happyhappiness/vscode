<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_25.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">split_blame<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">scoreboard<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">sb<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="2" pos:column="25">struct<pos:position pos:line="2" pos:column="31"/></name> <name pos:line="2" pos:column="32">blame_entry<pos:position pos:line="2" pos:column="43"/></name></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">split<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="3" pos:column="25">struct<pos:position pos:line="3" pos:column="31"/></name> <name pos:line="3" pos:column="32">blame_entry<pos:position pos:line="3" pos:column="43"/></name></name> <modifier pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></modifier></type><name pos:line="3" pos:column="45">e<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">blame_entry<pos:position pos:line="5" pos:column="27"/></name></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">new_entry<pos:position pos:line="5" pos:column="38"/></name></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">split<pos:position pos:line="7" pos:column="18"/></name><index pos:line="7" pos:column="18">[<expr><literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr>]<pos:position pos:line="7" pos:column="21"/></index></name><operator pos:line="7" pos:column="21">.<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">suspect<pos:position pos:line="7" pos:column="29"/></name> <operator pos:line="7" pos:column="30">&amp;&amp;<pos:position pos:line="7" pos:column="40"/></operator> <name><name pos:line="7" pos:column="33">split<pos:position pos:line="7" pos:column="38"/></name><index pos:line="7" pos:column="38">[<expr><literal type="number" pos:line="7" pos:column="39">2<pos:position pos:line="7" pos:column="40"/></literal></expr>]<pos:position pos:line="7" pos:column="41"/></index></name><operator pos:line="7" pos:column="41">.<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="42">suspect<pos:position pos:line="7" pos:column="49"/></name></expr>)<pos:position pos:line="7" pos:column="50"/></condition><then pos:line="7" pos:column="50"> <block pos:line="7" pos:column="51">{
		<comment type="block" pos:line="8" pos:column="17">/* The first part (reuse storage for the existing entry e) */</comment>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">dup_entry<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">e<pos:position pos:line="9" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="30">&amp;<pos:position pos:line="9" pos:column="35"/></operator><name><name pos:line="9" pos:column="31">split<pos:position pos:line="9" pos:column="36"/></name><index pos:line="9" pos:column="36">[<expr><literal type="number" pos:line="9" pos:column="37">0<pos:position pos:line="9" pos:column="38"/></literal></expr>]<pos:position pos:line="9" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>

		<comment type="block" pos:line="11" pos:column="17">/* The last part -- me */</comment>
		<expr_stmt><expr><name pos:line="12" pos:column="17">new_entry<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">=<pos:position pos:line="12" pos:column="28"/></operator> <call><name pos:line="12" pos:column="29">xmalloc<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><sizeof pos:line="12" pos:column="37">sizeof<argument_list pos:line="12" pos:column="43">(<argument><expr><operator pos:line="12" pos:column="44">*<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="45">new_entry<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">memcpy<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">new_entry<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="35">&amp;<pos:position pos:line="13" pos:column="40"/></operator><operator pos:line="13" pos:column="36">(<pos:position pos:line="13" pos:column="37"/></operator><name><name pos:line="13" pos:column="37">split<pos:position pos:line="13" pos:column="42"/></name><index pos:line="13" pos:column="42">[<expr><literal type="number" pos:line="13" pos:column="43">2<pos:position pos:line="13" pos:column="44"/></literal></expr>]<pos:position pos:line="13" pos:column="45"/></index></name><operator pos:line="13" pos:column="45">)<pos:position pos:line="13" pos:column="46"/></operator></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="48">sizeof<argument_list pos:line="13" pos:column="54">(<argument><expr pos:line="13" pos:column="55">struct <name pos:line="13" pos:column="62">blame_entry<pos:position pos:line="13" pos:column="73"/></name></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">add_blame_entry<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">sb<pos:position pos:line="14" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="37">new_entry<pos:position pos:line="14" pos:column="46"/></name></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>

		<comment type="block" pos:line="16" pos:column="17">/* ... and the middle part -- parent */</comment>
		<expr_stmt><expr><name pos:line="17" pos:column="17">new_entry<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">=<pos:position pos:line="17" pos:column="28"/></operator> <call><name pos:line="17" pos:column="29">xmalloc<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><sizeof pos:line="17" pos:column="37">sizeof<argument_list pos:line="17" pos:column="43">(<argument><expr><operator pos:line="17" pos:column="44">*<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="45">new_entry<pos:position pos:line="17" pos:column="54"/></name></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">memcpy<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">new_entry<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="35">&amp;<pos:position pos:line="18" pos:column="40"/></operator><operator pos:line="18" pos:column="36">(<pos:position pos:line="18" pos:column="37"/></operator><name><name pos:line="18" pos:column="37">split<pos:position pos:line="18" pos:column="42"/></name><index pos:line="18" pos:column="42">[<expr><literal type="number" pos:line="18" pos:column="43">1<pos:position pos:line="18" pos:column="44"/></literal></expr>]<pos:position pos:line="18" pos:column="45"/></index></name><operator pos:line="18" pos:column="45">)<pos:position pos:line="18" pos:column="46"/></operator></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="48">sizeof<argument_list pos:line="18" pos:column="54">(<argument><expr pos:line="18" pos:column="55">struct <name pos:line="18" pos:column="62">blame_entry<pos:position pos:line="18" pos:column="73"/></name></expr></argument>)<pos:position pos:line="18" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">add_blame_entry<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">sb<pos:position pos:line="19" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="37">new_entry<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then>
	<elseif pos:line="21" pos:column="9">else <if pos:line="21" pos:column="14">if <condition pos:line="21" pos:column="17">(<expr><operator pos:line="21" pos:column="18">!<pos:position pos:line="21" pos:column="19"/></operator><name><name pos:line="21" pos:column="19">split<pos:position pos:line="21" pos:column="24"/></name><index pos:line="21" pos:column="24">[<expr><literal type="number" pos:line="21" pos:column="25">0<pos:position pos:line="21" pos:column="26"/></literal></expr>]<pos:position pos:line="21" pos:column="27"/></index></name><operator pos:line="21" pos:column="27">.<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="28">suspect<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">&amp;&amp;<pos:position pos:line="21" pos:column="46"/></operator> <operator pos:line="21" pos:column="39">!<pos:position pos:line="21" pos:column="40"/></operator><name><name pos:line="21" pos:column="40">split<pos:position pos:line="21" pos:column="45"/></name><index pos:line="21" pos:column="45">[<expr><literal type="number" pos:line="21" pos:column="46">2<pos:position pos:line="21" pos:column="47"/></literal></expr>]<pos:position pos:line="21" pos:column="48"/></index></name><operator pos:line="21" pos:column="48">.<pos:position pos:line="21" pos:column="49"/></operator><name pos:line="21" pos:column="49">suspect<pos:position pos:line="21" pos:column="56"/></name></expr>)<pos:position pos:line="21" pos:column="57"/></condition><then pos:line="21" pos:column="57">
		<comment type="block" pos:line="22" pos:column="17">/*
		 * The parent covers the entire area; reuse storage for
		 * e and replace it with the parent.
		 */</comment>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">dup_entry<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><name pos:line="26" pos:column="27">e<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="30">&amp;<pos:position pos:line="26" pos:column="35"/></operator><name><name pos:line="26" pos:column="31">split<pos:position pos:line="26" pos:column="36"/></name><index pos:line="26" pos:column="36">[<expr><literal type="number" pos:line="26" pos:column="37">1<pos:position pos:line="26" pos:column="38"/></literal></expr>]<pos:position pos:line="26" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="27" pos:column="9">else <if pos:line="27" pos:column="14">if <condition pos:line="27" pos:column="17">(<expr><name><name pos:line="27" pos:column="18">split<pos:position pos:line="27" pos:column="23"/></name><index pos:line="27" pos:column="23">[<expr><literal type="number" pos:line="27" pos:column="24">0<pos:position pos:line="27" pos:column="25"/></literal></expr>]<pos:position pos:line="27" pos:column="26"/></index></name><operator pos:line="27" pos:column="26">.<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="27">suspect<pos:position pos:line="27" pos:column="34"/></name></expr>)<pos:position pos:line="27" pos:column="35"/></condition><then pos:line="27" pos:column="35"> <block pos:line="27" pos:column="36">{
		<comment type="block" pos:line="28" pos:column="17">/* me and then parent */</comment>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">dup_entry<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">e<pos:position pos:line="29" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="30">&amp;<pos:position pos:line="29" pos:column="35"/></operator><name><name pos:line="29" pos:column="31">split<pos:position pos:line="29" pos:column="36"/></name><index pos:line="29" pos:column="36">[<expr><literal type="number" pos:line="29" pos:column="37">0<pos:position pos:line="29" pos:column="38"/></literal></expr>]<pos:position pos:line="29" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>

		<expr_stmt><expr><name pos:line="31" pos:column="17">new_entry<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <call><name pos:line="31" pos:column="29">xmalloc<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><sizeof pos:line="31" pos:column="37">sizeof<argument_list pos:line="31" pos:column="43">(<argument><expr><operator pos:line="31" pos:column="44">*<pos:position pos:line="31" pos:column="45"/></operator><name pos:line="31" pos:column="45">new_entry<pos:position pos:line="31" pos:column="54"/></name></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">memcpy<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">new_entry<pos:position pos:line="32" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="35">&amp;<pos:position pos:line="32" pos:column="40"/></operator><operator pos:line="32" pos:column="36">(<pos:position pos:line="32" pos:column="37"/></operator><name><name pos:line="32" pos:column="37">split<pos:position pos:line="32" pos:column="42"/></name><index pos:line="32" pos:column="42">[<expr><literal type="number" pos:line="32" pos:column="43">1<pos:position pos:line="32" pos:column="44"/></literal></expr>]<pos:position pos:line="32" pos:column="45"/></index></name><operator pos:line="32" pos:column="45">)<pos:position pos:line="32" pos:column="46"/></operator></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="48">sizeof<argument_list pos:line="32" pos:column="54">(<argument><expr pos:line="32" pos:column="55">struct <name pos:line="32" pos:column="62">blame_entry<pos:position pos:line="32" pos:column="73"/></name></expr></argument>)<pos:position pos:line="32" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">add_blame_entry<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">sb<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">new_entry<pos:position pos:line="33" pos:column="46"/></name></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if></elseif>
	<else pos:line="35" pos:column="9">else <block pos:line="35" pos:column="14">{
		<comment type="block" pos:line="36" pos:column="17">/* parent and then me */</comment>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">dup_entry<pos:position pos:line="37" pos:column="26"/></name><argument_list pos:line="37" pos:column="26">(<argument><expr><name pos:line="37" pos:column="27">e<pos:position pos:line="37" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="30">&amp;<pos:position pos:line="37" pos:column="35"/></operator><name><name pos:line="37" pos:column="31">split<pos:position pos:line="37" pos:column="36"/></name><index pos:line="37" pos:column="36">[<expr><literal type="number" pos:line="37" pos:column="37">1<pos:position pos:line="37" pos:column="38"/></literal></expr>]<pos:position pos:line="37" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="37" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="41"/></expr_stmt>

		<expr_stmt><expr><name pos:line="39" pos:column="17">new_entry<pos:position pos:line="39" pos:column="26"/></name> <operator pos:line="39" pos:column="27">=<pos:position pos:line="39" pos:column="28"/></operator> <call><name pos:line="39" pos:column="29">xmalloc<pos:position pos:line="39" pos:column="36"/></name><argument_list pos:line="39" pos:column="36">(<argument><expr><sizeof pos:line="39" pos:column="37">sizeof<argument_list pos:line="39" pos:column="43">(<argument><expr><operator pos:line="39" pos:column="44">*<pos:position pos:line="39" pos:column="45"/></operator><name pos:line="39" pos:column="45">new_entry<pos:position pos:line="39" pos:column="54"/></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">memcpy<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">new_entry<pos:position pos:line="40" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="35">&amp;<pos:position pos:line="40" pos:column="40"/></operator><operator pos:line="40" pos:column="36">(<pos:position pos:line="40" pos:column="37"/></operator><name><name pos:line="40" pos:column="37">split<pos:position pos:line="40" pos:column="42"/></name><index pos:line="40" pos:column="42">[<expr><literal type="number" pos:line="40" pos:column="43">2<pos:position pos:line="40" pos:column="44"/></literal></expr>]<pos:position pos:line="40" pos:column="45"/></index></name><operator pos:line="40" pos:column="45">)<pos:position pos:line="40" pos:column="46"/></operator></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="48">sizeof<argument_list pos:line="40" pos:column="54">(<argument><expr pos:line="40" pos:column="55">struct <name pos:line="40" pos:column="62">blame_entry<pos:position pos:line="40" pos:column="73"/></name></expr></argument>)<pos:position pos:line="40" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">add_blame_entry<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><name pos:line="41" pos:column="33">sb<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="37">new_entry<pos:position pos:line="41" pos:column="46"/></name></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></else></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">DEBUG<pos:position pos:line="44" pos:column="18"/></name></expr>)<pos:position pos:line="44" pos:column="19"/></condition><then pos:line="44" pos:column="19"> <block pos:line="44" pos:column="20">{ <comment type="block" pos:line="44" pos:column="22">/* sanity */</comment>
		<decl_stmt><decl><type><name><name pos:line="45" pos:column="17">struct<pos:position pos:line="45" pos:column="23"/></name> <name pos:line="45" pos:column="24">blame_entry<pos:position pos:line="45" pos:column="35"/></name></name> <modifier pos:line="45" pos:column="36">*<pos:position pos:line="45" pos:column="37"/></modifier></type><name pos:line="45" pos:column="37">ent<pos:position pos:line="45" pos:column="40"/></name></decl>;<pos:position pos:line="45" pos:column="41"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">int<pos:position pos:line="46" pos:column="20"/></name></type> <name pos:line="46" pos:column="21">lno<pos:position pos:line="46" pos:column="24"/></name> <init pos:line="46" pos:column="25">= <expr><name><name pos:line="46" pos:column="27">sb<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">-&gt;<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="31">ent<pos:position pos:line="46" pos:column="34"/></name><operator pos:line="46" pos:column="34">-&gt;<pos:position pos:line="46" pos:column="39"/></operator><name pos:line="46" pos:column="36">lno<pos:position pos:line="46" pos:column="39"/></name></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="46" pos:column="41">corrupt<pos:position pos:line="46" pos:column="48"/></name> <init pos:line="46" pos:column="49">= <expr><literal type="number" pos:line="46" pos:column="51">0<pos:position pos:line="46" pos:column="52"/></literal></expr></init></decl>;<pos:position pos:line="46" pos:column="53"/></decl_stmt>

		<for pos:line="48" pos:column="17">for <control pos:line="48" pos:column="21">(<init><expr><name pos:line="48" pos:column="22">ent<pos:position pos:line="48" pos:column="25"/></name> <operator pos:line="48" pos:column="26">=<pos:position pos:line="48" pos:column="27"/></operator> <name><name pos:line="48" pos:column="28">sb<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">-&gt;<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="32">ent<pos:position pos:line="48" pos:column="35"/></name></name></expr>;<pos:position pos:line="48" pos:column="36"/></init> <condition><expr><name pos:line="48" pos:column="37">ent<pos:position pos:line="48" pos:column="40"/></name></expr>;<pos:position pos:line="48" pos:column="41"/></condition> <incr><expr><name pos:line="48" pos:column="42">ent<pos:position pos:line="48" pos:column="45"/></name> <operator pos:line="48" pos:column="46">=<pos:position pos:line="48" pos:column="47"/></operator> <name><name pos:line="48" pos:column="48">ent<pos:position pos:line="48" pos:column="51"/></name><operator pos:line="48" pos:column="51">-&gt;<pos:position pos:line="48" pos:column="56"/></operator><name pos:line="48" pos:column="53">next<pos:position pos:line="48" pos:column="57"/></name></name></expr></incr>)<pos:position pos:line="48" pos:column="58"/></control> <block pos:line="48" pos:column="59">{
			<if pos:line="49" pos:column="25">if <condition pos:line="49" pos:column="28">(<expr><name pos:line="49" pos:column="29">lno<pos:position pos:line="49" pos:column="32"/></name> <operator pos:line="49" pos:column="33">!=<pos:position pos:line="49" pos:column="35"/></operator> <name><name pos:line="49" pos:column="36">ent<pos:position pos:line="49" pos:column="39"/></name><operator pos:line="49" pos:column="39">-&gt;<pos:position pos:line="49" pos:column="44"/></operator><name pos:line="49" pos:column="41">lno<pos:position pos:line="49" pos:column="44"/></name></name></expr>)<pos:position pos:line="49" pos:column="45"/></condition><then pos:line="49" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="33">corrupt<pos:position pos:line="50" pos:column="40"/></name> <operator pos:line="50" pos:column="41">=<pos:position pos:line="50" pos:column="42"/></operator> <literal type="number" pos:line="50" pos:column="43">1<pos:position pos:line="50" pos:column="44"/></literal></expr>;<pos:position pos:line="50" pos:column="45"/></expr_stmt></block></then></if>
			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><name><name pos:line="51" pos:column="29">ent<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">-&gt;<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="34">s_lno<pos:position pos:line="51" pos:column="39"/></name></name> <operator pos:line="51" pos:column="40">&lt;<pos:position pos:line="51" pos:column="44"/></operator> <literal type="number" pos:line="51" pos:column="42">0<pos:position pos:line="51" pos:column="43"/></literal></expr>)<pos:position pos:line="51" pos:column="44"/></condition><then pos:line="51" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="33">corrupt<pos:position pos:line="52" pos:column="40"/></name> <operator pos:line="52" pos:column="41">=<pos:position pos:line="52" pos:column="42"/></operator> <literal type="number" pos:line="52" pos:column="43">1<pos:position pos:line="52" pos:column="44"/></literal></expr>;<pos:position pos:line="52" pos:column="45"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="53" pos:column="25">lno<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">+=<pos:position pos:line="53" pos:column="31"/></operator> <name><name pos:line="53" pos:column="32">ent<pos:position pos:line="53" pos:column="35"/></name><operator pos:line="53" pos:column="35">-&gt;<pos:position pos:line="53" pos:column="40"/></operator><name pos:line="53" pos:column="37">num_lines<pos:position pos:line="53" pos:column="46"/></name></name></expr>;<pos:position pos:line="53" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="54" pos:column="18"/></block></for>
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name pos:line="55" pos:column="21">corrupt<pos:position pos:line="55" pos:column="28"/></name></expr>)<pos:position pos:line="55" pos:column="29"/></condition><then pos:line="55" pos:column="29"> <block pos:line="55" pos:column="30">{
			<expr_stmt><expr><name pos:line="56" pos:column="25">lno<pos:position pos:line="56" pos:column="28"/></name> <operator pos:line="56" pos:column="29">=<pos:position pos:line="56" pos:column="30"/></operator> <name><name pos:line="56" pos:column="31">sb<pos:position pos:line="56" pos:column="33"/></name><operator pos:line="56" pos:column="33">-&gt;<pos:position pos:line="56" pos:column="38"/></operator><name pos:line="56" pos:column="35">ent<pos:position pos:line="56" pos:column="38"/></name><operator pos:line="56" pos:column="38">-&gt;<pos:position pos:line="56" pos:column="43"/></operator><name pos:line="56" pos:column="40">lno<pos:position pos:line="56" pos:column="43"/></name></name></expr>;<pos:position pos:line="56" pos:column="44"/></expr_stmt>
			<for pos:line="57" pos:column="25">for <control pos:line="57" pos:column="29">(<init><expr><name pos:line="57" pos:column="30">ent<pos:position pos:line="57" pos:column="33"/></name> <operator pos:line="57" pos:column="34">=<pos:position pos:line="57" pos:column="35"/></operator> <name><name pos:line="57" pos:column="36">sb<pos:position pos:line="57" pos:column="38"/></name><operator pos:line="57" pos:column="38">-&gt;<pos:position pos:line="57" pos:column="43"/></operator><name pos:line="57" pos:column="40">ent<pos:position pos:line="57" pos:column="43"/></name></name></expr>;<pos:position pos:line="57" pos:column="44"/></init> <condition><expr><name pos:line="57" pos:column="45">ent<pos:position pos:line="57" pos:column="48"/></name></expr>;<pos:position pos:line="57" pos:column="49"/></condition> <incr><expr><name pos:line="57" pos:column="50">ent<pos:position pos:line="57" pos:column="53"/></name> <operator pos:line="57" pos:column="54">=<pos:position pos:line="57" pos:column="55"/></operator> <name><name pos:line="57" pos:column="56">ent<pos:position pos:line="57" pos:column="59"/></name><operator pos:line="57" pos:column="59">-&gt;<pos:position pos:line="57" pos:column="64"/></operator><name pos:line="57" pos:column="61">next<pos:position pos:line="57" pos:column="65"/></name></name></expr></incr>)<pos:position pos:line="57" pos:column="66"/></control> <block pos:line="57" pos:column="67">{
				<expr_stmt><expr><call><name pos:line="58" pos:column="33">printf<pos:position pos:line="58" pos:column="39"/></name><argument_list pos:line="58" pos:column="39">(<argument><expr><literal type="string" pos:line="58" pos:column="40">"L %8d l %8d n %8d\n"<pos:position pos:line="58" pos:column="61"/></literal></expr></argument>,
				       <argument><expr><name pos:line="59" pos:column="40">lno<pos:position pos:line="59" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="45">ent<pos:position pos:line="59" pos:column="48"/></name><operator pos:line="59" pos:column="48">-&gt;<pos:position pos:line="59" pos:column="53"/></operator><name pos:line="59" pos:column="50">lno<pos:position pos:line="59" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="55">ent<pos:position pos:line="59" pos:column="58"/></name><operator pos:line="59" pos:column="58">-&gt;<pos:position pos:line="59" pos:column="63"/></operator><name pos:line="59" pos:column="60">num_lines<pos:position pos:line="59" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="71"/></expr_stmt>
				<expr_stmt><expr><name pos:line="60" pos:column="33">lno<pos:position pos:line="60" pos:column="36"/></name> <operator pos:line="60" pos:column="37">=<pos:position pos:line="60" pos:column="38"/></operator> <name><name pos:line="60" pos:column="39">ent<pos:position pos:line="60" pos:column="42"/></name><operator pos:line="60" pos:column="42">-&gt;<pos:position pos:line="60" pos:column="47"/></operator><name pos:line="60" pos:column="44">lno<pos:position pos:line="60" pos:column="47"/></name></name> <operator pos:line="60" pos:column="48">+<pos:position pos:line="60" pos:column="49"/></operator> <name><name pos:line="60" pos:column="50">ent<pos:position pos:line="60" pos:column="53"/></name><operator pos:line="60" pos:column="53">-&gt;<pos:position pos:line="60" pos:column="58"/></operator><name pos:line="60" pos:column="55">num_lines<pos:position pos:line="60" pos:column="64"/></name></name></expr>;<pos:position pos:line="60" pos:column="65"/></expr_stmt>
			}<pos:position pos:line="61" pos:column="26"/></block></for>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">die<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><literal type="string" pos:line="62" pos:column="29">"oops"<pos:position pos:line="62" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="63" pos:column="18"/></block></then></if>
	}<pos:position pos:line="64" pos:column="10"/></block></then></if>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
