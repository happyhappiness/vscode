<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1228_git-2.4.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">stream_blob<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">uintmax_t<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">len<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">unsigned<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">sha1out<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">uintmax_t<pos:position pos:line="1" pos:column="73"/></name></type> <name pos:line="1" pos:column="74">mark<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">in_sz<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><literal type="number" pos:line="3" pos:column="24">64<pos:position pos:line="3" pos:column="26"/></literal> <operator pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></operator> <literal type="number" pos:line="3" pos:column="29">1024<pos:position pos:line="3" pos:column="33"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="35">out_sz<pos:position pos:line="3" pos:column="41"/></name> <init pos:line="3" pos:column="42">= <expr><literal type="number" pos:line="3" pos:column="44">64<pos:position pos:line="3" pos:column="46"/></literal> <operator pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></operator> <literal type="number" pos:line="3" pos:column="49">1024<pos:position pos:line="3" pos:column="53"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">in_buf<pos:position pos:line="4" pos:column="30"/></name> <init pos:line="4" pos:column="31">= <expr><call><name pos:line="4" pos:column="33">xmalloc<pos:position pos:line="4" pos:column="40"/></name><argument_list pos:line="4" pos:column="40">(<argument><expr><name pos:line="4" pos:column="41">in_sz<pos:position pos:line="4" pos:column="46"/></name></expr></argument>)<pos:position pos:line="4" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">out_buf<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><call><name pos:line="5" pos:column="34">xmalloc<pos:position pos:line="5" pos:column="41"/></name><argument_list pos:line="5" pos:column="41">(<argument><expr><name pos:line="5" pos:column="42">out_sz<pos:position pos:line="5" pos:column="48"/></name></expr></argument>)<pos:position pos:line="5" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object_entry<pos:position pos:line="6" pos:column="28"/></name></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></type><name pos:line="6" pos:column="30">e<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name></type> <name><name pos:line="7" pos:column="23">sha1<pos:position pos:line="7" pos:column="27"/></name><index pos:line="7" pos:column="27">[<expr><literal type="number" pos:line="7" pos:column="28">20<pos:position pos:line="7" pos:column="30"/></literal></expr>]<pos:position pos:line="7" pos:column="31"/></index></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name> <name pos:line="8" pos:column="18">long<pos:position pos:line="8" pos:column="22"/></name></type> <name pos:line="8" pos:column="23">hdrlen<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">off_t<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">offset<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">git_SHA_CTX<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">c<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">git_zstream<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">s<pos:position pos:line="11" pos:column="22"/></name></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">sha1file_checkpoint<pos:position pos:line="12" pos:column="35"/></name></name></type> <name pos:line="12" pos:column="36">checkpoint<pos:position pos:line="12" pos:column="46"/></name></decl>;<pos:position pos:line="12" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">status<pos:position pos:line="13" pos:column="19"/></name> <init pos:line="13" pos:column="20">= <expr><name pos:line="13" pos:column="22">Z_OK<pos:position pos:line="13" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>

	<comment type="block" pos:line="15" pos:column="9">/* Determine if we should auto-checkpoint. */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">max_packsize<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">&amp;&amp;<pos:position pos:line="16" pos:column="37"/></operator> <operator pos:line="16" pos:column="30">(<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="31">pack_size<pos:position pos:line="16" pos:column="40"/></name> <operator pos:line="16" pos:column="41">+<pos:position pos:line="16" pos:column="42"/></operator> <literal type="number" pos:line="16" pos:column="43">60<pos:position pos:line="16" pos:column="45"/></literal> <operator pos:line="16" pos:column="46">+<pos:position pos:line="16" pos:column="47"/></operator> <name pos:line="16" pos:column="48">len<pos:position pos:line="16" pos:column="51"/></name><operator pos:line="16" pos:column="51">)<pos:position pos:line="16" pos:column="52"/></operator> <operator pos:line="16" pos:column="53">&gt;<pos:position pos:line="16" pos:column="57"/></operator> <name pos:line="16" pos:column="55">max_packsize<pos:position pos:line="16" pos:column="67"/></name><operator pos:line="16" pos:column="67">)<pos:position pos:line="16" pos:column="68"/></operator>
		<operator pos:line="17" pos:column="17">||<pos:position pos:line="17" pos:column="19"/></operator> <operator pos:line="17" pos:column="20">(<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">pack_size<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">+<pos:position pos:line="17" pos:column="32"/></operator> <literal type="number" pos:line="17" pos:column="33">60<pos:position pos:line="17" pos:column="35"/></literal> <operator pos:line="17" pos:column="36">+<pos:position pos:line="17" pos:column="37"/></operator> <name pos:line="17" pos:column="38">len<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">)<pos:position pos:line="17" pos:column="42"/></operator> <operator pos:line="17" pos:column="43">&lt;<pos:position pos:line="17" pos:column="47"/></operator> <name pos:line="17" pos:column="45">pack_size<pos:position pos:line="17" pos:column="54"/></name></expr>)<pos:position pos:line="17" pos:column="55"/></condition><then pos:line="17" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">cycle_packfile<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">()<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="20" pos:column="9">sha1file_checkpoint<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name pos:line="20" pos:column="29">pack_file<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="40">&amp;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="41">checkpoint<pos:position pos:line="20" pos:column="51"/></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">offset<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <name><name pos:line="21" pos:column="18">checkpoint<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">.<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">offset<pos:position pos:line="21" pos:column="35"/></name></name></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><name pos:line="23" pos:column="9">hdrlen<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <call><name pos:line="23" pos:column="18">snprintf<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><operator pos:line="23" pos:column="27">(<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="28">char<pos:position pos:line="23" pos:column="32"/></name> <operator pos:line="23" pos:column="33">*<pos:position pos:line="23" pos:column="34"/></operator><operator pos:line="23" pos:column="34">)<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="35">out_buf<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="44">out_sz<pos:position pos:line="23" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="52">"blob %"<pos:position pos:line="23" pos:column="60"/></literal> <name pos:line="23" pos:column="61">PRIuMAX<pos:position pos:line="23" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="70">len<pos:position pos:line="23" pos:column="73"/></name></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call> <operator pos:line="23" pos:column="75">+<pos:position pos:line="23" pos:column="76"/></operator> <literal type="number" pos:line="23" pos:column="77">1<pos:position pos:line="23" pos:column="78"/></literal></expr>;<pos:position pos:line="23" pos:column="79"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">out_sz<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">&lt;=<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="23">hdrlen<pos:position pos:line="24" pos:column="29"/></name></expr>)<pos:position pos:line="24" pos:column="30"/></condition><then pos:line="24" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="17">die<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><literal type="string" pos:line="25" pos:column="21">"impossibly large object header"<pos:position pos:line="25" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">git_SHA1_Init<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><operator pos:line="27" pos:column="23">&amp;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="24">c<pos:position pos:line="27" pos:column="25"/></name></expr></argument>)<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">git_SHA1_Update<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><operator pos:line="28" pos:column="25">&amp;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="26">c<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">out_buf<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="38">hdrlen<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="30" pos:column="9">crc32_begin<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">pack_file<pos:position pos:line="30" pos:column="30"/></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="32" pos:column="9">git_deflate_init<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><operator pos:line="32" pos:column="26">&amp;<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="27">s<pos:position pos:line="32" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="30">pack_compression_level<pos:position pos:line="32" pos:column="52"/></name></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="54"/></expr_stmt>

	<expr_stmt><expr><name pos:line="34" pos:column="9">hdrlen<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <call><name pos:line="34" pos:column="18">encode_in_pack_object_header<pos:position pos:line="34" pos:column="46"/></name><argument_list pos:line="34" pos:column="46">(<argument><expr><name pos:line="34" pos:column="47">OBJ_BLOB<pos:position pos:line="34" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="57">len<pos:position pos:line="34" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="62">out_buf<pos:position pos:line="34" pos:column="69"/></name></expr></argument>)<pos:position pos:line="34" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="71"/></expr_stmt>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">out_sz<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">&lt;=<pos:position pos:line="35" pos:column="25"/></operator> <name pos:line="35" pos:column="23">hdrlen<pos:position pos:line="35" pos:column="29"/></name></expr>)<pos:position pos:line="35" pos:column="30"/></condition><then pos:line="35" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="17">die<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><literal type="string" pos:line="36" pos:column="21">"impossibly large object header"<pos:position pos:line="36" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="55"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="38" pos:column="9">s<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">.<pos:position pos:line="38" pos:column="11"/></operator><name pos:line="38" pos:column="11">next_out<pos:position pos:line="38" pos:column="19"/></name></name> <operator pos:line="38" pos:column="20">=<pos:position pos:line="38" pos:column="21"/></operator> <name pos:line="38" pos:column="22">out_buf<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">+<pos:position pos:line="38" pos:column="31"/></operator> <name pos:line="38" pos:column="32">hdrlen<pos:position pos:line="38" pos:column="38"/></name></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="39" pos:column="9">s<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">.<pos:position pos:line="39" pos:column="11"/></operator><name pos:line="39" pos:column="11">avail_out<pos:position pos:line="39" pos:column="20"/></name></name> <operator pos:line="39" pos:column="21">=<pos:position pos:line="39" pos:column="22"/></operator> <name pos:line="39" pos:column="23">out_sz<pos:position pos:line="39" pos:column="29"/></name> <operator pos:line="39" pos:column="30">-<pos:position pos:line="39" pos:column="31"/></operator> <name pos:line="39" pos:column="32">hdrlen<pos:position pos:line="39" pos:column="38"/></name></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt>

	<while pos:line="41" pos:column="9">while <condition pos:line="41" pos:column="15">(<expr><name pos:line="41" pos:column="16">status<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">!=<pos:position pos:line="41" pos:column="25"/></operator> <name pos:line="41" pos:column="26">Z_STREAM_END<pos:position pos:line="41" pos:column="38"/></name></expr>)<pos:position pos:line="41" pos:column="39"/></condition> <block pos:line="41" pos:column="40">{
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><literal type="number" pos:line="42" pos:column="21">0<pos:position pos:line="42" pos:column="22"/></literal> <operator pos:line="42" pos:column="23">&lt;<pos:position pos:line="42" pos:column="27"/></operator> <name pos:line="42" pos:column="25">len<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">&amp;&amp;<pos:position pos:line="42" pos:column="39"/></operator> <operator pos:line="42" pos:column="32">!<pos:position pos:line="42" pos:column="33"/></operator><name><name pos:line="42" pos:column="33">s<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">.<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="35">avail_in<pos:position pos:line="42" pos:column="43"/></name></name></expr>)<pos:position pos:line="42" pos:column="44"/></condition><then pos:line="42" pos:column="44"> <block pos:line="42" pos:column="45">{
			<decl_stmt><decl><type><name pos:line="43" pos:column="25">size_t<pos:position pos:line="43" pos:column="31"/></name></type> <name pos:line="43" pos:column="32">cnt<pos:position pos:line="43" pos:column="35"/></name> <init pos:line="43" pos:column="36">= <expr><ternary><condition><expr><name pos:line="43" pos:column="38">in_sz<pos:position pos:line="43" pos:column="43"/></name> <operator pos:line="43" pos:column="44">&lt;<pos:position pos:line="43" pos:column="48"/></operator> <name pos:line="43" pos:column="46">len<pos:position pos:line="43" pos:column="49"/></name></expr> ?<pos:position pos:line="43" pos:column="51"/></condition><then pos:line="43" pos:column="51"> <expr><name pos:line="43" pos:column="52">in_sz<pos:position pos:line="43" pos:column="57"/></name></expr> <pos:position pos:line="43" pos:column="58"/></then><else pos:line="43" pos:column="58">: <expr><operator pos:line="43" pos:column="60">(<pos:position pos:line="43" pos:column="61"/></operator><name pos:line="43" pos:column="61">size_t<pos:position pos:line="43" pos:column="67"/></name><operator pos:line="43" pos:column="67">)<pos:position pos:line="43" pos:column="68"/></operator><name pos:line="43" pos:column="68">len<pos:position pos:line="43" pos:column="71"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="43" pos:column="72"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="44" pos:column="25">size_t<pos:position pos:line="44" pos:column="31"/></name></type> <name pos:line="44" pos:column="32">n<pos:position pos:line="44" pos:column="33"/></name> <init pos:line="44" pos:column="34">= <expr><call><name pos:line="44" pos:column="36">fread<pos:position pos:line="44" pos:column="41"/></name><argument_list pos:line="44" pos:column="41">(<argument><expr><name pos:line="44" pos:column="42">in_buf<pos:position pos:line="44" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="50">1<pos:position pos:line="44" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="53">cnt<pos:position pos:line="44" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="58">stdin<pos:position pos:line="44" pos:column="63"/></name></expr></argument>)<pos:position pos:line="44" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="44" pos:column="65"/></decl_stmt>
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><operator pos:line="45" pos:column="29">!<pos:position pos:line="45" pos:column="30"/></operator><name pos:line="45" pos:column="30">n<pos:position pos:line="45" pos:column="31"/></name> <operator pos:line="45" pos:column="32">&amp;&amp;<pos:position pos:line="45" pos:column="42"/></operator> <call><name pos:line="45" pos:column="35">feof<pos:position pos:line="45" pos:column="39"/></name><argument_list pos:line="45" pos:column="39">(<argument><expr><name pos:line="45" pos:column="40">stdin<pos:position pos:line="45" pos:column="45"/></name></expr></argument>)<pos:position pos:line="45" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="47"/></condition><then pos:line="45" pos:column="47">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="33">die<pos:position pos:line="46" pos:column="36"/></name><argument_list pos:line="46" pos:column="36">(<argument><expr><literal type="string" pos:line="46" pos:column="37">"EOF in data (%"<pos:position pos:line="46" pos:column="53"/></literal> <name pos:line="46" pos:column="54">PRIuMAX<pos:position pos:line="46" pos:column="61"/></name> <literal type="string" pos:line="46" pos:column="62">" bytes remaining)"<pos:position pos:line="46" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="83">len<pos:position pos:line="46" pos:column="86"/></name></expr></argument>)<pos:position pos:line="46" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="88"/></expr_stmt></block></then></if>

			<expr_stmt><expr><call><name pos:line="48" pos:column="25">git_SHA1_Update<pos:position pos:line="48" pos:column="40"/></name><argument_list pos:line="48" pos:column="40">(<argument><expr><operator pos:line="48" pos:column="41">&amp;<pos:position pos:line="48" pos:column="46"/></operator><name pos:line="48" pos:column="42">c<pos:position pos:line="48" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="45">in_buf<pos:position pos:line="48" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="53">n<pos:position pos:line="48" pos:column="54"/></name></expr></argument>)<pos:position pos:line="48" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="49" pos:column="25">s<pos:position pos:line="49" pos:column="26"/></name><operator pos:line="49" pos:column="26">.<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="27">next_in<pos:position pos:line="49" pos:column="34"/></name></name> <operator pos:line="49" pos:column="35">=<pos:position pos:line="49" pos:column="36"/></operator> <name pos:line="49" pos:column="37">in_buf<pos:position pos:line="49" pos:column="43"/></name></expr>;<pos:position pos:line="49" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="50" pos:column="25">s<pos:position pos:line="50" pos:column="26"/></name><operator pos:line="50" pos:column="26">.<pos:position pos:line="50" pos:column="27"/></operator><name pos:line="50" pos:column="27">avail_in<pos:position pos:line="50" pos:column="35"/></name></name> <operator pos:line="50" pos:column="36">=<pos:position pos:line="50" pos:column="37"/></operator> <name pos:line="50" pos:column="38">n<pos:position pos:line="50" pos:column="39"/></name></expr>;<pos:position pos:line="50" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="51" pos:column="25">len<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">-=<pos:position pos:line="51" pos:column="31"/></operator> <name pos:line="51" pos:column="32">n<pos:position pos:line="51" pos:column="33"/></name></expr>;<pos:position pos:line="51" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="54" pos:column="17">status<pos:position pos:line="54" pos:column="23"/></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <call><name pos:line="54" pos:column="26">git_deflate<pos:position pos:line="54" pos:column="37"/></name><argument_list pos:line="54" pos:column="37">(<argument><expr><operator pos:line="54" pos:column="38">&amp;<pos:position pos:line="54" pos:column="43"/></operator><name pos:line="54" pos:column="39">s<pos:position pos:line="54" pos:column="40"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="54" pos:column="42">len<pos:position pos:line="54" pos:column="45"/></name></expr> ?<pos:position pos:line="54" pos:column="47"/></condition><then pos:line="54" pos:column="47"> <expr><literal type="number" pos:line="54" pos:column="48">0<pos:position pos:line="54" pos:column="49"/></literal></expr> <pos:position pos:line="54" pos:column="50"/></then><else pos:line="54" pos:column="50">: <expr><name pos:line="54" pos:column="52">Z_FINISH<pos:position pos:line="54" pos:column="60"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="54" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="62"/></expr_stmt>

		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><operator pos:line="56" pos:column="21">!<pos:position pos:line="56" pos:column="22"/></operator><name><name pos:line="56" pos:column="22">s<pos:position pos:line="56" pos:column="23"/></name><operator pos:line="56" pos:column="23">.<pos:position pos:line="56" pos:column="24"/></operator><name pos:line="56" pos:column="24">avail_out<pos:position pos:line="56" pos:column="33"/></name></name> <operator pos:line="56" pos:column="34">||<pos:position pos:line="56" pos:column="36"/></operator> <name pos:line="56" pos:column="37">status<pos:position pos:line="56" pos:column="43"/></name> <operator pos:line="56" pos:column="44">==<pos:position pos:line="56" pos:column="46"/></operator> <name pos:line="56" pos:column="47">Z_STREAM_END<pos:position pos:line="56" pos:column="59"/></name></expr>)<pos:position pos:line="56" pos:column="60"/></condition><then pos:line="56" pos:column="60"> <block pos:line="56" pos:column="61">{
			<decl_stmt><decl><type><name pos:line="57" pos:column="25">size_t<pos:position pos:line="57" pos:column="31"/></name></type> <name pos:line="57" pos:column="32">n<pos:position pos:line="57" pos:column="33"/></name> <init pos:line="57" pos:column="34">= <expr><name><name pos:line="57" pos:column="36">s<pos:position pos:line="57" pos:column="37"/></name><operator pos:line="57" pos:column="37">.<pos:position pos:line="57" pos:column="38"/></operator><name pos:line="57" pos:column="38">next_out<pos:position pos:line="57" pos:column="46"/></name></name> <operator pos:line="57" pos:column="47">-<pos:position pos:line="57" pos:column="48"/></operator> <name pos:line="57" pos:column="49">out_buf<pos:position pos:line="57" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="57" pos:column="57"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">sha1write<pos:position pos:line="58" pos:column="34"/></name><argument_list pos:line="58" pos:column="34">(<argument><expr><name pos:line="58" pos:column="35">pack_file<pos:position pos:line="58" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="46">out_buf<pos:position pos:line="58" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="55">n<pos:position pos:line="58" pos:column="56"/></name></expr></argument>)<pos:position pos:line="58" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name pos:line="59" pos:column="25">pack_size<pos:position pos:line="59" pos:column="34"/></name> <operator pos:line="59" pos:column="35">+=<pos:position pos:line="59" pos:column="37"/></operator> <name pos:line="59" pos:column="38">n<pos:position pos:line="59" pos:column="39"/></name></expr>;<pos:position pos:line="59" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="60" pos:column="25">s<pos:position pos:line="60" pos:column="26"/></name><operator pos:line="60" pos:column="26">.<pos:position pos:line="60" pos:column="27"/></operator><name pos:line="60" pos:column="27">next_out<pos:position pos:line="60" pos:column="35"/></name></name> <operator pos:line="60" pos:column="36">=<pos:position pos:line="60" pos:column="37"/></operator> <name pos:line="60" pos:column="38">out_buf<pos:position pos:line="60" pos:column="45"/></name></expr>;<pos:position pos:line="60" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="61" pos:column="25">s<pos:position pos:line="61" pos:column="26"/></name><operator pos:line="61" pos:column="26">.<pos:position pos:line="61" pos:column="27"/></operator><name pos:line="61" pos:column="27">avail_out<pos:position pos:line="61" pos:column="36"/></name></name> <operator pos:line="61" pos:column="37">=<pos:position pos:line="61" pos:column="38"/></operator> <name pos:line="61" pos:column="39">out_sz<pos:position pos:line="61" pos:column="45"/></name></expr>;<pos:position pos:line="61" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="62" pos:column="18"/></block></then></if>

		<switch pos:line="64" pos:column="17">switch <condition pos:line="64" pos:column="24">(<expr><name pos:line="64" pos:column="25">status<pos:position pos:line="64" pos:column="31"/></name></expr>)<pos:position pos:line="64" pos:column="32"/></condition> <block pos:line="64" pos:column="33">{
		<case pos:line="65" pos:column="17">case <expr><name pos:line="65" pos:column="22">Z_OK<pos:position pos:line="65" pos:column="26"/></name></expr>:<pos:position pos:line="65" pos:column="27"/></case>
		<case pos:line="66" pos:column="17">case <expr><name pos:line="66" pos:column="22">Z_BUF_ERROR<pos:position pos:line="66" pos:column="33"/></name></expr>:<pos:position pos:line="66" pos:column="34"/></case>
		<case pos:line="67" pos:column="17">case <expr><name pos:line="67" pos:column="22">Z_STREAM_END<pos:position pos:line="67" pos:column="34"/></name></expr>:<pos:position pos:line="67" pos:column="35"/></case>
			<continue pos:line="68" pos:column="25">continue;<pos:position pos:line="68" pos:column="34"/></continue>
		<default pos:line="69" pos:column="17">default:<pos:position pos:line="69" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="70" pos:column="25">die<pos:position pos:line="70" pos:column="28"/></name><argument_list pos:line="70" pos:column="28">(<argument><expr><literal type="string" pos:line="70" pos:column="29">"unexpected deflate failure: %d"<pos:position pos:line="70" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="63">status<pos:position pos:line="70" pos:column="69"/></name></expr></argument>)<pos:position pos:line="70" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="71"/></expr_stmt>
		}<pos:position pos:line="71" pos:column="18"/></block></switch>
	}<pos:position pos:line="72" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="73" pos:column="9">git_deflate_end<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><operator pos:line="73" pos:column="25">&amp;<pos:position pos:line="73" pos:column="30"/></operator><name pos:line="73" pos:column="26">s<pos:position pos:line="73" pos:column="27"/></name></expr></argument>)<pos:position pos:line="73" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="74" pos:column="9">git_SHA1_Final<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><name pos:line="74" pos:column="24">sha1<pos:position pos:line="74" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="30">&amp;<pos:position pos:line="74" pos:column="35"/></operator><name pos:line="74" pos:column="31">c<pos:position pos:line="74" pos:column="32"/></name></expr></argument>)<pos:position pos:line="74" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="34"/></expr_stmt>

	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><name pos:line="76" pos:column="13">sha1out<pos:position pos:line="76" pos:column="20"/></name></expr>)<pos:position pos:line="76" pos:column="21"/></condition><then pos:line="76" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="17">hashcpy<pos:position pos:line="77" pos:column="24"/></name><argument_list pos:line="77" pos:column="24">(<argument><expr><name pos:line="77" pos:column="25">sha1out<pos:position pos:line="77" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="34">sha1<pos:position pos:line="77" pos:column="38"/></name></expr></argument>)<pos:position pos:line="77" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="40"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="79" pos:column="9">e<pos:position pos:line="79" pos:column="10"/></name> <operator pos:line="79" pos:column="11">=<pos:position pos:line="79" pos:column="12"/></operator> <call><name pos:line="79" pos:column="13">insert_object<pos:position pos:line="79" pos:column="26"/></name><argument_list pos:line="79" pos:column="26">(<argument><expr><name pos:line="79" pos:column="27">sha1<pos:position pos:line="79" pos:column="31"/></name></expr></argument>)<pos:position pos:line="79" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="33"/></expr_stmt>

	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">mark<pos:position pos:line="81" pos:column="17"/></name></expr>)<pos:position pos:line="81" pos:column="18"/></condition><then pos:line="81" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="17">insert_mark<pos:position pos:line="82" pos:column="28"/></name><argument_list pos:line="82" pos:column="28">(<argument><expr><name pos:line="82" pos:column="29">mark<pos:position pos:line="82" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="35">e<pos:position pos:line="82" pos:column="36"/></name></expr></argument>)<pos:position pos:line="82" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="38"/></expr_stmt></block></then></if>

	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name><name pos:line="84" pos:column="13">e<pos:position pos:line="84" pos:column="14"/></name><operator pos:line="84" pos:column="14">-&gt;<pos:position pos:line="84" pos:column="19"/></operator><name pos:line="84" pos:column="16">idx<pos:position pos:line="84" pos:column="19"/></name><operator pos:line="84" pos:column="19">.<pos:position pos:line="84" pos:column="20"/></operator><name pos:line="84" pos:column="20">offset<pos:position pos:line="84" pos:column="26"/></name></name></expr>)<pos:position pos:line="84" pos:column="27"/></condition><then pos:line="84" pos:column="27"> <block pos:line="84" pos:column="28">{
		<expr_stmt><expr><name><name pos:line="85" pos:column="17">duplicate_count_by_type<pos:position pos:line="85" pos:column="40"/></name><index pos:line="85" pos:column="40">[<expr><name pos:line="85" pos:column="41">OBJ_BLOB<pos:position pos:line="85" pos:column="49"/></name></expr>]<pos:position pos:line="85" pos:column="50"/></index></name><operator pos:line="85" pos:column="50">++<pos:position pos:line="85" pos:column="52"/></operator></expr>;<pos:position pos:line="85" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="86" pos:column="17">truncate_pack<pos:position pos:line="86" pos:column="30"/></name><argument_list pos:line="86" pos:column="30">(<argument><expr><operator pos:line="86" pos:column="31">&amp;<pos:position pos:line="86" pos:column="36"/></operator><name pos:line="86" pos:column="32">checkpoint<pos:position pos:line="86" pos:column="42"/></name></expr></argument>)<pos:position pos:line="86" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="44"/></expr_stmt>

	}<pos:position pos:line="88" pos:column="10"/></block></then> <elseif pos:line="88" pos:column="11">else <if pos:line="88" pos:column="16">if <condition pos:line="88" pos:column="19">(<expr><call><name pos:line="88" pos:column="20">find_sha1_pack<pos:position pos:line="88" pos:column="34"/></name><argument_list pos:line="88" pos:column="34">(<argument><expr><name pos:line="88" pos:column="35">sha1<pos:position pos:line="88" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="41">packed_git<pos:position pos:line="88" pos:column="51"/></name></expr></argument>)<pos:position pos:line="88" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="53"/></condition><then pos:line="88" pos:column="53"> <block pos:line="88" pos:column="54">{
		<expr_stmt><expr><name><name pos:line="89" pos:column="17">e<pos:position pos:line="89" pos:column="18"/></name><operator pos:line="89" pos:column="18">-&gt;<pos:position pos:line="89" pos:column="23"/></operator><name pos:line="89" pos:column="20">type<pos:position pos:line="89" pos:column="24"/></name></name> <operator pos:line="89" pos:column="25">=<pos:position pos:line="89" pos:column="26"/></operator> <name pos:line="89" pos:column="27">OBJ_BLOB<pos:position pos:line="89" pos:column="35"/></name></expr>;<pos:position pos:line="89" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="90" pos:column="17">e<pos:position pos:line="90" pos:column="18"/></name><operator pos:line="90" pos:column="18">-&gt;<pos:position pos:line="90" pos:column="23"/></operator><name pos:line="90" pos:column="20">pack_id<pos:position pos:line="90" pos:column="27"/></name></name> <operator pos:line="90" pos:column="28">=<pos:position pos:line="90" pos:column="29"/></operator> <name pos:line="90" pos:column="30">MAX_PACK_ID<pos:position pos:line="90" pos:column="41"/></name></expr>;<pos:position pos:line="90" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="91" pos:column="17">e<pos:position pos:line="91" pos:column="18"/></name><operator pos:line="91" pos:column="18">-&gt;<pos:position pos:line="91" pos:column="23"/></operator><name pos:line="91" pos:column="20">idx<pos:position pos:line="91" pos:column="23"/></name><operator pos:line="91" pos:column="23">.<pos:position pos:line="91" pos:column="24"/></operator><name pos:line="91" pos:column="24">offset<pos:position pos:line="91" pos:column="30"/></name></name> <operator pos:line="91" pos:column="31">=<pos:position pos:line="91" pos:column="32"/></operator> <literal type="number" pos:line="91" pos:column="33">1<pos:position pos:line="91" pos:column="34"/></literal></expr>;<pos:position pos:line="91" pos:column="35"/></expr_stmt> <comment type="block" pos:line="91" pos:column="36">/* just not zero! */</comment>
		<expr_stmt><expr><name><name pos:line="92" pos:column="17">duplicate_count_by_type<pos:position pos:line="92" pos:column="40"/></name><index pos:line="92" pos:column="40">[<expr><name pos:line="92" pos:column="41">OBJ_BLOB<pos:position pos:line="92" pos:column="49"/></name></expr>]<pos:position pos:line="92" pos:column="50"/></index></name><operator pos:line="92" pos:column="50">++<pos:position pos:line="92" pos:column="52"/></operator></expr>;<pos:position pos:line="92" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">truncate_pack<pos:position pos:line="93" pos:column="30"/></name><argument_list pos:line="93" pos:column="30">(<argument><expr><operator pos:line="93" pos:column="31">&amp;<pos:position pos:line="93" pos:column="36"/></operator><name pos:line="93" pos:column="32">checkpoint<pos:position pos:line="93" pos:column="42"/></name></expr></argument>)<pos:position pos:line="93" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="44"/></expr_stmt>

	}<pos:position pos:line="95" pos:column="10"/></block></then></if></elseif> <else pos:line="95" pos:column="11">else <block pos:line="95" pos:column="16">{
		<expr_stmt><expr><name><name pos:line="96" pos:column="17">e<pos:position pos:line="96" pos:column="18"/></name><operator pos:line="96" pos:column="18">-&gt;<pos:position pos:line="96" pos:column="23"/></operator><name pos:line="96" pos:column="20">depth<pos:position pos:line="96" pos:column="25"/></name></name> <operator pos:line="96" pos:column="26">=<pos:position pos:line="96" pos:column="27"/></operator> <literal type="number" pos:line="96" pos:column="28">0<pos:position pos:line="96" pos:column="29"/></literal></expr>;<pos:position pos:line="96" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="97" pos:column="17">e<pos:position pos:line="97" pos:column="18"/></name><operator pos:line="97" pos:column="18">-&gt;<pos:position pos:line="97" pos:column="23"/></operator><name pos:line="97" pos:column="20">type<pos:position pos:line="97" pos:column="24"/></name></name> <operator pos:line="97" pos:column="25">=<pos:position pos:line="97" pos:column="26"/></operator> <name pos:line="97" pos:column="27">OBJ_BLOB<pos:position pos:line="97" pos:column="35"/></name></expr>;<pos:position pos:line="97" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="98" pos:column="17">e<pos:position pos:line="98" pos:column="18"/></name><operator pos:line="98" pos:column="18">-&gt;<pos:position pos:line="98" pos:column="23"/></operator><name pos:line="98" pos:column="20">pack_id<pos:position pos:line="98" pos:column="27"/></name></name> <operator pos:line="98" pos:column="28">=<pos:position pos:line="98" pos:column="29"/></operator> <name pos:line="98" pos:column="30">pack_id<pos:position pos:line="98" pos:column="37"/></name></expr>;<pos:position pos:line="98" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="99" pos:column="17">e<pos:position pos:line="99" pos:column="18"/></name><operator pos:line="99" pos:column="18">-&gt;<pos:position pos:line="99" pos:column="23"/></operator><name pos:line="99" pos:column="20">idx<pos:position pos:line="99" pos:column="23"/></name><operator pos:line="99" pos:column="23">.<pos:position pos:line="99" pos:column="24"/></operator><name pos:line="99" pos:column="24">offset<pos:position pos:line="99" pos:column="30"/></name></name> <operator pos:line="99" pos:column="31">=<pos:position pos:line="99" pos:column="32"/></operator> <name pos:line="99" pos:column="33">offset<pos:position pos:line="99" pos:column="39"/></name></expr>;<pos:position pos:line="99" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="100" pos:column="17">e<pos:position pos:line="100" pos:column="18"/></name><operator pos:line="100" pos:column="18">-&gt;<pos:position pos:line="100" pos:column="23"/></operator><name pos:line="100" pos:column="20">idx<pos:position pos:line="100" pos:column="23"/></name><operator pos:line="100" pos:column="23">.<pos:position pos:line="100" pos:column="24"/></operator><name pos:line="100" pos:column="24">crc32<pos:position pos:line="100" pos:column="29"/></name></name> <operator pos:line="100" pos:column="30">=<pos:position pos:line="100" pos:column="31"/></operator> <call><name pos:line="100" pos:column="32">crc32_end<pos:position pos:line="100" pos:column="41"/></name><argument_list pos:line="100" pos:column="41">(<argument><expr><name pos:line="100" pos:column="42">pack_file<pos:position pos:line="100" pos:column="51"/></name></expr></argument>)<pos:position pos:line="100" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name pos:line="101" pos:column="17">object_count<pos:position pos:line="101" pos:column="29"/></name><operator pos:line="101" pos:column="29">++<pos:position pos:line="101" pos:column="31"/></operator></expr>;<pos:position pos:line="101" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="102" pos:column="17">object_count_by_type<pos:position pos:line="102" pos:column="37"/></name><index pos:line="102" pos:column="37">[<expr><name pos:line="102" pos:column="38">OBJ_BLOB<pos:position pos:line="102" pos:column="46"/></name></expr>]<pos:position pos:line="102" pos:column="47"/></index></name><operator pos:line="102" pos:column="47">++<pos:position pos:line="102" pos:column="49"/></operator></expr>;<pos:position pos:line="102" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="103" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="105" pos:column="9">free<pos:position pos:line="105" pos:column="13"/></name><argument_list pos:line="105" pos:column="13">(<argument><expr><name pos:line="105" pos:column="14">in_buf<pos:position pos:line="105" pos:column="20"/></name></expr></argument>)<pos:position pos:line="105" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="106" pos:column="9">free<pos:position pos:line="106" pos:column="13"/></name><argument_list pos:line="106" pos:column="13">(<argument><expr><name pos:line="106" pos:column="14">out_buf<pos:position pos:line="106" pos:column="21"/></name></expr></argument>)<pos:position pos:line="106" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="23"/></expr_stmt>
}<pos:position pos:line="107" pos:column="2"/></block></function></unit>
