<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1960_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_attr<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">name<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">size_t<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">len<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<struct><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> struct <block pos:line="3" pos:column="29">{<public type="default" pos:line="3" pos:column="30">
		<decl_stmt><decl><type><specifier pos:line="4" pos:column="17">const<pos:position pos:line="4" pos:column="22"/></specifier> <name pos:line="4" pos:column="23">char<pos:position pos:line="4" pos:column="27"/></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">name<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">size_t<pos:position pos:line="5" pos:column="23"/></name></type> <name pos:line="5" pos:column="24">len<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">int<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">val<pos:position pos:line="6" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="26">neg<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<pos:position pos:line="7" pos:column="2"/></public>}<pos:position pos:line="7" pos:column="10"/></block> <decl><name><name pos:line="7" pos:column="11">attrs<pos:position pos:line="7" pos:column="16"/></name><index pos:line="7" pos:column="16">[]<pos:position pos:line="7" pos:column="18"/></index></name> <init pos:line="7" pos:column="19">= <expr><block pos:line="7" pos:column="21">{
<cpp:define pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">define<pos:position pos:line="8" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="8" pos:column="9">ATTR<pos:position pos:line="8" pos:column="13"/></name><parameter_list pos:line="8" pos:column="13">(<parameter><type><name pos:line="8" pos:column="14">x<pos:position pos:line="8" pos:column="15"/></name></type></parameter>, <parameter><type><name pos:line="8" pos:column="17">val<pos:position pos:line="8" pos:column="20"/></name></type></parameter>, <parameter><type><name pos:line="8" pos:column="22">neg<pos:position pos:line="8" pos:column="25"/></name></type></parameter>)<pos:position pos:line="8" pos:column="26"/></parameter_list></cpp:macro> <cpp:value pos:line="8" pos:column="27">{ (x), sizeof(x)-1, (val), (neg) }<pos:position pos:line="8" pos:column="61"/></cpp:value></cpp:define>
		<expr><call><name pos:line="9" pos:column="17">ATTR<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><literal type="string" pos:line="9" pos:column="22">"bold"<pos:position pos:line="9" pos:column="28"/></literal></expr></argument>,      <argument><expr><literal type="number" pos:line="9" pos:column="35">1<pos:position pos:line="9" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="38">22<pos:position pos:line="9" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>,
		<expr><call><name pos:line="10" pos:column="17">ATTR<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><literal type="string" pos:line="10" pos:column="22">"dim"<pos:position pos:line="10" pos:column="27"/></literal></expr></argument>,       <argument><expr><literal type="number" pos:line="10" pos:column="35">2<pos:position pos:line="10" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="38">22<pos:position pos:line="10" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>,
		<expr><call><name pos:line="11" pos:column="17">ATTR<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><literal type="string" pos:line="11" pos:column="22">"italic"<pos:position pos:line="11" pos:column="30"/></literal></expr></argument>,    <argument><expr><literal type="number" pos:line="11" pos:column="35">3<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="38">23<pos:position pos:line="11" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>,
		<expr><call><name pos:line="12" pos:column="17">ATTR<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><literal type="string" pos:line="12" pos:column="22">"ul"<pos:position pos:line="12" pos:column="26"/></literal></expr></argument>,        <argument><expr><literal type="number" pos:line="12" pos:column="35">4<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="38">24<pos:position pos:line="12" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>,
		<expr><call><name pos:line="13" pos:column="17">ATTR<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><literal type="string" pos:line="13" pos:column="22">"blink"<pos:position pos:line="13" pos:column="29"/></literal></expr></argument>,     <argument><expr><literal type="number" pos:line="13" pos:column="35">5<pos:position pos:line="13" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="38">25<pos:position pos:line="13" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>,
		<expr><call><name pos:line="14" pos:column="17">ATTR<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><literal type="string" pos:line="14" pos:column="22">"reverse"<pos:position pos:line="14" pos:column="31"/></literal></expr></argument>,   <argument><expr><literal type="number" pos:line="14" pos:column="35">7<pos:position pos:line="14" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="38">27<pos:position pos:line="14" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr>,
		<macro><name pos:line="15" pos:column="17">ATTR<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><literal type="string" pos:line="15" pos:column="22">"strike"<pos:position pos:line="15" pos:column="30"/></literal></argument>,    <argument><literal type="number" pos:line="15" pos:column="35">9<pos:position pos:line="15" pos:column="36"/></literal></argument>, <argument><literal type="number" pos:line="15" pos:column="38">29<pos:position pos:line="15" pos:column="40"/></literal></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></macro>
<cpp:undef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">undef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">ATTR<pos:position pos:line="16" pos:column="12"/></name></cpp:undef>
	}<pos:position pos:line="17" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="17" pos:column="11"/></struct>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">negate<pos:position pos:line="18" pos:column="19"/></name> <init pos:line="18" pos:column="20">= <expr><literal type="number" pos:line="18" pos:column="22">0<pos:position pos:line="18" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">int<pos:position pos:line="19" pos:column="12"/></name></type> <name pos:line="19" pos:column="13">i<pos:position pos:line="19" pos:column="14"/></name></decl>;<pos:position pos:line="19" pos:column="15"/></decl_stmt>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">skip_prefix_mem<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">name<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">len<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="40">"no"<pos:position pos:line="21" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="46">&amp;<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="47">name<pos:position pos:line="21" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="53">&amp;<pos:position pos:line="21" pos:column="58"/></operator><name pos:line="21" pos:column="54">len<pos:position pos:line="21" pos:column="57"/></name></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="59"/></condition><then pos:line="21" pos:column="59"> <block pos:line="21" pos:column="60">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">skip_prefix_mem<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">name<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="39">len<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="44">"-"<pos:position pos:line="22" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="49">&amp;<pos:position pos:line="22" pos:column="54"/></operator><name pos:line="22" pos:column="50">name<pos:position pos:line="22" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="56">&amp;<pos:position pos:line="22" pos:column="61"/></operator><name pos:line="22" pos:column="57">len<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">negate<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <literal type="number" pos:line="23" pos:column="26">1<pos:position pos:line="23" pos:column="27"/></literal></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init><expr><name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">0<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></init> <condition><expr><name pos:line="26" pos:column="21">i<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">&lt;<pos:position pos:line="26" pos:column="27"/></operator> <call><name pos:line="26" pos:column="25">ARRAY_SIZE<pos:position pos:line="26" pos:column="35"/></name><argument_list pos:line="26" pos:column="35">(<argument><expr><name pos:line="26" pos:column="36">attrs<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></condition> <incr><expr><name pos:line="26" pos:column="44">i<pos:position pos:line="26" pos:column="45"/></name><operator pos:line="26" pos:column="45">++<pos:position pos:line="26" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="48"/></control> <block pos:line="26" pos:column="49">{
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name><name pos:line="27" pos:column="21">attrs<pos:position pos:line="27" pos:column="26"/></name><index pos:line="27" pos:column="26">[<expr><name pos:line="27" pos:column="27">i<pos:position pos:line="27" pos:column="28"/></name></expr>]<pos:position pos:line="27" pos:column="29"/></index></name><operator pos:line="27" pos:column="29">.<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="30">len<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">==<pos:position pos:line="27" pos:column="36"/></operator> <name pos:line="27" pos:column="37">len<pos:position pos:line="27" pos:column="40"/></name> <operator pos:line="27" pos:column="41">&amp;&amp;<pos:position pos:line="27" pos:column="51"/></operator> <operator pos:line="27" pos:column="44">!<pos:position pos:line="27" pos:column="45"/></operator><call><name pos:line="27" pos:column="45">memcmp<pos:position pos:line="27" pos:column="51"/></name><argument_list pos:line="27" pos:column="51">(<argument><expr><name><name pos:line="27" pos:column="52">attrs<pos:position pos:line="27" pos:column="57"/></name><index pos:line="27" pos:column="57">[<expr><name pos:line="27" pos:column="58">i<pos:position pos:line="27" pos:column="59"/></name></expr>]<pos:position pos:line="27" pos:column="60"/></index></name><operator pos:line="27" pos:column="60">.<pos:position pos:line="27" pos:column="61"/></operator><name pos:line="27" pos:column="61">name<pos:position pos:line="27" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="67">name<pos:position pos:line="27" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="73">len<pos:position pos:line="27" pos:column="76"/></name></expr></argument>)<pos:position pos:line="27" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="78"/></condition><then pos:line="27" pos:column="78">
			<block type="pseudo"><return pos:line="28" pos:column="25">return <expr><ternary><condition><expr><name pos:line="28" pos:column="32">negate<pos:position pos:line="28" pos:column="38"/></name></expr> ?<pos:position pos:line="28" pos:column="40"/></condition><then pos:line="28" pos:column="40"> <expr><name><name pos:line="28" pos:column="41">attrs<pos:position pos:line="28" pos:column="46"/></name><index pos:line="28" pos:column="46">[<expr><name pos:line="28" pos:column="47">i<pos:position pos:line="28" pos:column="48"/></name></expr>]<pos:position pos:line="28" pos:column="49"/></index></name><operator pos:line="28" pos:column="49">.<pos:position pos:line="28" pos:column="50"/></operator><name pos:line="28" pos:column="50">neg<pos:position pos:line="28" pos:column="53"/></name></expr> <pos:position pos:line="28" pos:column="54"/></then><else pos:line="28" pos:column="54">: <expr><name><name pos:line="28" pos:column="56">attrs<pos:position pos:line="28" pos:column="61"/></name><index pos:line="28" pos:column="61">[<expr><name pos:line="28" pos:column="62">i<pos:position pos:line="28" pos:column="63"/></name></expr>]<pos:position pos:line="28" pos:column="64"/></index></name><operator pos:line="28" pos:column="64">.<pos:position pos:line="28" pos:column="65"/></operator><name pos:line="28" pos:column="65">val<pos:position pos:line="28" pos:column="68"/></name></expr></else></ternary></expr>;<pos:position pos:line="28" pos:column="69"/></return></block></then></if>
	}<pos:position pos:line="29" pos:column="10"/></block></for>
	<return pos:line="30" pos:column="9">return <expr><operator pos:line="30" pos:column="16">-<pos:position pos:line="30" pos:column="17"/></operator><literal type="number" pos:line="30" pos:column="17">1<pos:position pos:line="30" pos:column="18"/></literal></expr>;<pos:position pos:line="30" pos:column="19"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
