<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2917_git-2.8.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">update_one<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">cache_tree<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">it<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>,
		      <parameter><decl><type><name><name pos:line="2" pos:column="23">struct<pos:position pos:line="2" pos:column="29"/></name> <name pos:line="2" pos:column="30">cache_entry<pos:position pos:line="2" pos:column="41"/></name></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier><modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">cache<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="3" pos:column="23">int<pos:position pos:line="3" pos:column="26"/></name></type> <name pos:line="3" pos:column="27">entries<pos:position pos:line="3" pos:column="34"/></name></decl></parameter>,
		      <parameter><decl><type><specifier pos:line="4" pos:column="23">const<pos:position pos:line="4" pos:column="28"/></specifier> <name pos:line="4" pos:column="29">char<pos:position pos:line="4" pos:column="33"/></name> <modifier pos:line="4" pos:column="34">*<pos:position pos:line="4" pos:column="35"/></modifier></type><name pos:line="4" pos:column="35">base<pos:position pos:line="4" pos:column="39"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="5" pos:column="23">int<pos:position pos:line="5" pos:column="26"/></name></type> <name pos:line="5" pos:column="27">baselen<pos:position pos:line="5" pos:column="34"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="6" pos:column="23">int<pos:position pos:line="6" pos:column="26"/></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier></type><name pos:line="6" pos:column="28">skip_count<pos:position pos:line="6" pos:column="38"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="7" pos:column="23">int<pos:position pos:line="7" pos:column="26"/></name></type> <name pos:line="7" pos:column="27">flags<pos:position pos:line="7" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="33"/></parameter_list>
<block pos:line="8" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> <name pos:line="9" pos:column="23">buffer<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">missing_ok<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><name pos:line="10" pos:column="26">flags<pos:position pos:line="10" pos:column="31"/></name> <operator pos:line="10" pos:column="32">&amp;<pos:position pos:line="10" pos:column="37"/></operator> <name pos:line="10" pos:column="34">WRITE_TREE_MISSING_OK<pos:position pos:line="10" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">dryrun<pos:position pos:line="11" pos:column="19"/></name> <init pos:line="11" pos:column="20">= <expr><name pos:line="11" pos:column="22">flags<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">&amp;<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="30">WRITE_TREE_DRY_RUN<pos:position pos:line="11" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">repair<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><name pos:line="12" pos:column="22">flags<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">&amp;<pos:position pos:line="12" pos:column="33"/></operator> <name pos:line="12" pos:column="30">WRITE_TREE_REPAIR<pos:position pos:line="12" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">to_invalidate<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><literal type="number" pos:line="13" pos:column="29">0<pos:position pos:line="13" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">i<pos:position pos:line="14" pos:column="14"/></name></decl>;<pos:position pos:line="14" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">assert<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><operator pos:line="16" pos:column="16">!<pos:position pos:line="16" pos:column="17"/></operator><operator pos:line="16" pos:column="17">(<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">dryrun<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">&amp;&amp;<pos:position pos:line="16" pos:column="35"/></operator> <name pos:line="16" pos:column="28">repair<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">)<pos:position pos:line="16" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><operator pos:line="18" pos:column="9">*<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">skip_count<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <literal type="number" pos:line="18" pos:column="23">0<pos:position pos:line="18" pos:column="24"/></literal></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><literal type="number" pos:line="20" pos:column="13">0<pos:position pos:line="20" pos:column="14"/></literal> <operator pos:line="20" pos:column="15">&lt;=<pos:position pos:line="20" pos:column="20"/></operator> <name><name pos:line="20" pos:column="18">it<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">entry_count<pos:position pos:line="20" pos:column="33"/></name></name> <operator pos:line="20" pos:column="34">&amp;&amp;<pos:position pos:line="20" pos:column="44"/></operator> <call><name pos:line="20" pos:column="37">has_sha1_file<pos:position pos:line="20" pos:column="50"/></name><argument_list pos:line="20" pos:column="50">(<argument><expr><name><name pos:line="20" pos:column="51">it<pos:position pos:line="20" pos:column="53"/></name><operator pos:line="20" pos:column="53">-&gt;<pos:position pos:line="20" pos:column="58"/></operator><name pos:line="20" pos:column="55">sha1<pos:position pos:line="20" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="61"/></condition><then pos:line="20" pos:column="61">
		<block type="pseudo"><return pos:line="21" pos:column="17">return <expr><name><name pos:line="21" pos:column="24">it<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">-&gt;<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="28">entry_count<pos:position pos:line="21" pos:column="39"/></name></name></expr>;<pos:position pos:line="21" pos:column="40"/></return></block></then></if>

	<comment type="block" pos:line="23" pos:column="9">/*
	 * We first scan for subtrees and update them; we start by
	 * marking existing subtrees -- the ones that are unmarked
	 * should not be in the result.
	 */</comment>
	<for pos:line="28" pos:column="9">for <control pos:line="28" pos:column="13">(<init><expr><name pos:line="28" pos:column="14">i<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal></expr>;<pos:position pos:line="28" pos:column="20"/></init> <condition><expr><name pos:line="28" pos:column="21">i<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">&lt;<pos:position pos:line="28" pos:column="27"/></operator> <name><name pos:line="28" pos:column="25">it<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">-&gt;<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="29">subtree_nr<pos:position pos:line="28" pos:column="39"/></name></name></expr>;<pos:position pos:line="28" pos:column="40"/></condition> <incr><expr><name pos:line="28" pos:column="41">i<pos:position pos:line="28" pos:column="42"/></name><operator pos:line="28" pos:column="42">++<pos:position pos:line="28" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="28" pos:column="45"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="17">it<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">-&gt;<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="21">down<pos:position pos:line="29" pos:column="25"/></name><index pos:line="29" pos:column="25">[<expr><name pos:line="29" pos:column="26">i<pos:position pos:line="29" pos:column="27"/></name></expr>]<pos:position pos:line="29" pos:column="28"/></index></name><operator pos:line="29" pos:column="28">-&gt;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="30">used<pos:position pos:line="29" pos:column="34"/></name> <operator pos:line="29" pos:column="35">=<pos:position pos:line="29" pos:column="36"/></operator> <literal type="number" pos:line="29" pos:column="37">0<pos:position pos:line="29" pos:column="38"/></literal></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt></block></for>

	<comment type="block" pos:line="31" pos:column="9">/*
	 * Find the subtrees and update them.
	 */</comment>
	<expr_stmt><expr><name pos:line="34" pos:column="9">i<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">=<pos:position pos:line="34" pos:column="12"/></operator> <literal type="number" pos:line="34" pos:column="13">0<pos:position pos:line="34" pos:column="14"/></literal></expr>;<pos:position pos:line="34" pos:column="15"/></expr_stmt>
	<while pos:line="35" pos:column="9">while <condition pos:line="35" pos:column="15">(<expr><name pos:line="35" pos:column="16">i<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">&lt;<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="20">entries<pos:position pos:line="35" pos:column="27"/></name></expr>)<pos:position pos:line="35" pos:column="28"/></condition> <block pos:line="35" pos:column="29">{
		<decl_stmt><decl><type><specifier pos:line="36" pos:column="17">const<pos:position pos:line="36" pos:column="22"/></specifier> <name><name pos:line="36" pos:column="23">struct<pos:position pos:line="36" pos:column="29"/></name> <name pos:line="36" pos:column="30">cache_entry<pos:position pos:line="36" pos:column="41"/></name></name> <modifier pos:line="36" pos:column="42">*<pos:position pos:line="36" pos:column="43"/></modifier></type><name pos:line="36" pos:column="43">ce<pos:position pos:line="36" pos:column="45"/></name> <init pos:line="36" pos:column="46">= <expr><name><name pos:line="36" pos:column="48">cache<pos:position pos:line="36" pos:column="53"/></name><index pos:line="36" pos:column="53">[<expr><name pos:line="36" pos:column="54">i<pos:position pos:line="36" pos:column="55"/></name></expr>]<pos:position pos:line="36" pos:column="56"/></index></name></expr></init></decl>;<pos:position pos:line="36" pos:column="57"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="37" pos:column="17">struct<pos:position pos:line="37" pos:column="23"/></name> <name pos:line="37" pos:column="24">cache_tree_sub<pos:position pos:line="37" pos:column="38"/></name></name> <modifier pos:line="37" pos:column="39">*<pos:position pos:line="37" pos:column="40"/></modifier></type><name pos:line="37" pos:column="40">sub<pos:position pos:line="37" pos:column="43"/></name></decl>;<pos:position pos:line="37" pos:column="44"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="38" pos:column="17">const<pos:position pos:line="38" pos:column="22"/></specifier> <name pos:line="38" pos:column="23">char<pos:position pos:line="38" pos:column="27"/></name> <modifier pos:line="38" pos:column="28">*<pos:position pos:line="38" pos:column="29"/></modifier></type><name pos:line="38" pos:column="29">path<pos:position pos:line="38" pos:column="33"/></name></decl>, <modifier pos:line="38" pos:column="35">*<pos:position pos:line="38" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="38" pos:column="36">slash<pos:position pos:line="38" pos:column="41"/></name></decl>;<pos:position pos:line="38" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">int<pos:position pos:line="39" pos:column="20"/></name></type> <name pos:line="39" pos:column="21">pathlen<pos:position pos:line="39" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="39" pos:column="30">sublen<pos:position pos:line="39" pos:column="36"/></name></decl>, <decl><type ref="prev"/><name pos:line="39" pos:column="38">subcnt<pos:position pos:line="39" pos:column="44"/></name></decl>, <decl><type ref="prev"/><name pos:line="39" pos:column="46">subskip<pos:position pos:line="39" pos:column="53"/></name></decl>;<pos:position pos:line="39" pos:column="54"/></decl_stmt>

		<expr_stmt><expr><name pos:line="41" pos:column="17">path<pos:position pos:line="41" pos:column="21"/></name> <operator pos:line="41" pos:column="22">=<pos:position pos:line="41" pos:column="23"/></operator> <name><name pos:line="41" pos:column="24">ce<pos:position pos:line="41" pos:column="26"/></name><operator pos:line="41" pos:column="26">-&gt;<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="28">name<pos:position pos:line="41" pos:column="32"/></name></name></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="42" pos:column="17">pathlen<pos:position pos:line="42" pos:column="24"/></name> <operator pos:line="42" pos:column="25">=<pos:position pos:line="42" pos:column="26"/></operator> <call><name pos:line="42" pos:column="27">ce_namelen<pos:position pos:line="42" pos:column="37"/></name><argument_list pos:line="42" pos:column="37">(<argument><expr><name pos:line="42" pos:column="38">ce<pos:position pos:line="42" pos:column="40"/></name></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">pathlen<pos:position pos:line="43" pos:column="28"/></name> <operator pos:line="43" pos:column="29">&lt;=<pos:position pos:line="43" pos:column="34"/></operator> <name pos:line="43" pos:column="32">baselen<pos:position pos:line="43" pos:column="39"/></name> <operator pos:line="43" pos:column="40">||<pos:position pos:line="43" pos:column="42"/></operator> <call><name pos:line="43" pos:column="43">memcmp<pos:position pos:line="43" pos:column="49"/></name><argument_list pos:line="43" pos:column="49">(<argument><expr><name pos:line="43" pos:column="50">base<pos:position pos:line="43" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="56">path<pos:position pos:line="43" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="62">baselen<pos:position pos:line="43" pos:column="69"/></name></expr></argument>)<pos:position pos:line="43" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="71"/></condition><then pos:line="43" pos:column="71">
			<block type="pseudo"><break pos:line="44" pos:column="25">break;<pos:position pos:line="44" pos:column="31"/></break></block></then></if> <comment type="block" pos:line="44" pos:column="32">/* at the end of this level */</comment>

		<expr_stmt><expr><name pos:line="46" pos:column="17">slash<pos:position pos:line="46" pos:column="22"/></name> <operator pos:line="46" pos:column="23">=<pos:position pos:line="46" pos:column="24"/></operator> <call><name pos:line="46" pos:column="25">strchr<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">(<argument><expr><name pos:line="46" pos:column="32">path<pos:position pos:line="46" pos:column="36"/></name> <operator pos:line="46" pos:column="37">+<pos:position pos:line="46" pos:column="38"/></operator> <name pos:line="46" pos:column="39">baselen<pos:position pos:line="46" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="46" pos:column="48">'/'<pos:position pos:line="46" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="53"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><operator pos:line="47" pos:column="21">!<pos:position pos:line="47" pos:column="22"/></operator><name pos:line="47" pos:column="22">slash<pos:position pos:line="47" pos:column="27"/></name></expr>)<pos:position pos:line="47" pos:column="28"/></condition><then pos:line="47" pos:column="28"> <block pos:line="47" pos:column="29">{
			<expr_stmt><expr><name pos:line="48" pos:column="25">i<pos:position pos:line="48" pos:column="26"/></name><operator pos:line="48" pos:column="26">++<pos:position pos:line="48" pos:column="28"/></operator></expr>;<pos:position pos:line="48" pos:column="29"/></expr_stmt>
			<continue pos:line="49" pos:column="25">continue;<pos:position pos:line="49" pos:column="34"/></continue>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="51" pos:column="17">/*
		 * a/bbb/c (base = a/, slash = /c)
		 * ==&gt;
		 * path+baselen = bbb/c, sublen = 3
		 */</comment>
		<expr_stmt><expr><name pos:line="56" pos:column="17">sublen<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">=<pos:position pos:line="56" pos:column="25"/></operator> <name pos:line="56" pos:column="26">slash<pos:position pos:line="56" pos:column="31"/></name> <operator pos:line="56" pos:column="32">-<pos:position pos:line="56" pos:column="33"/></operator> <operator pos:line="56" pos:column="34">(<pos:position pos:line="56" pos:column="35"/></operator><name pos:line="56" pos:column="35">path<pos:position pos:line="56" pos:column="39"/></name> <operator pos:line="56" pos:column="40">+<pos:position pos:line="56" pos:column="41"/></operator> <name pos:line="56" pos:column="42">baselen<pos:position pos:line="56" pos:column="49"/></name><operator pos:line="56" pos:column="49">)<pos:position pos:line="56" pos:column="50"/></operator></expr>;<pos:position pos:line="56" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="57" pos:column="17">sub<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <call><name pos:line="57" pos:column="23">find_subtree<pos:position pos:line="57" pos:column="35"/></name><argument_list pos:line="57" pos:column="35">(<argument><expr><name pos:line="57" pos:column="36">it<pos:position pos:line="57" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="40">path<pos:position pos:line="57" pos:column="44"/></name> <operator pos:line="57" pos:column="45">+<pos:position pos:line="57" pos:column="46"/></operator> <name pos:line="57" pos:column="47">baselen<pos:position pos:line="57" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="56">sublen<pos:position pos:line="57" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="64">1<pos:position pos:line="57" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="67"/></expr_stmt>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><operator pos:line="58" pos:column="21">!<pos:position pos:line="58" pos:column="22"/></operator><name><name pos:line="58" pos:column="22">sub<pos:position pos:line="58" pos:column="25"/></name><operator pos:line="58" pos:column="25">-&gt;<pos:position pos:line="58" pos:column="30"/></operator><name pos:line="58" pos:column="27">cache_tree<pos:position pos:line="58" pos:column="37"/></name></name></expr>)<pos:position pos:line="58" pos:column="38"/></condition><then pos:line="58" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="59" pos:column="25">sub<pos:position pos:line="59" pos:column="28"/></name><operator pos:line="59" pos:column="28">-&gt;<pos:position pos:line="59" pos:column="33"/></operator><name pos:line="59" pos:column="30">cache_tree<pos:position pos:line="59" pos:column="40"/></name></name> <operator pos:line="59" pos:column="41">=<pos:position pos:line="59" pos:column="42"/></operator> <call><name pos:line="59" pos:column="43">cache_tree<pos:position pos:line="59" pos:column="53"/></name><argument_list pos:line="59" pos:column="53">()<pos:position pos:line="59" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="56"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="60" pos:column="17">subcnt<pos:position pos:line="60" pos:column="23"/></name> <operator pos:line="60" pos:column="24">=<pos:position pos:line="60" pos:column="25"/></operator> <call><name pos:line="60" pos:column="26">update_one<pos:position pos:line="60" pos:column="36"/></name><argument_list pos:line="60" pos:column="36">(<argument><expr><name><name pos:line="60" pos:column="37">sub<pos:position pos:line="60" pos:column="40"/></name><operator pos:line="60" pos:column="40">-&gt;<pos:position pos:line="60" pos:column="45"/></operator><name pos:line="60" pos:column="42">cache_tree<pos:position pos:line="60" pos:column="52"/></name></name></expr></argument>,
				    <argument><expr><name pos:line="61" pos:column="37">cache<pos:position pos:line="61" pos:column="42"/></name> <operator pos:line="61" pos:column="43">+<pos:position pos:line="61" pos:column="44"/></operator> <name pos:line="61" pos:column="45">i<pos:position pos:line="61" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="48">entries<pos:position pos:line="61" pos:column="55"/></name> <operator pos:line="61" pos:column="56">-<pos:position pos:line="61" pos:column="57"/></operator> <name pos:line="61" pos:column="58">i<pos:position pos:line="61" pos:column="59"/></name></expr></argument>,
				    <argument><expr><name pos:line="62" pos:column="37">path<pos:position pos:line="62" pos:column="41"/></name></expr></argument>,
				    <argument><expr><name pos:line="63" pos:column="37">baselen<pos:position pos:line="63" pos:column="44"/></name> <operator pos:line="63" pos:column="45">+<pos:position pos:line="63" pos:column="46"/></operator> <name pos:line="63" pos:column="47">sublen<pos:position pos:line="63" pos:column="53"/></name> <operator pos:line="63" pos:column="54">+<pos:position pos:line="63" pos:column="55"/></operator> <literal type="number" pos:line="63" pos:column="56">1<pos:position pos:line="63" pos:column="57"/></literal></expr></argument>,
				    <argument><expr><operator pos:line="64" pos:column="37">&amp;<pos:position pos:line="64" pos:column="42"/></operator><name pos:line="64" pos:column="38">subskip<pos:position pos:line="64" pos:column="45"/></name></expr></argument>,
				    <argument><expr><name pos:line="65" pos:column="37">flags<pos:position pos:line="65" pos:column="42"/></name></expr></argument>)<pos:position pos:line="65" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="44"/></expr_stmt>
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">subcnt<pos:position pos:line="66" pos:column="27"/></name> <operator pos:line="66" pos:column="28">&lt;<pos:position pos:line="66" pos:column="32"/></operator> <literal type="number" pos:line="66" pos:column="30">0<pos:position pos:line="66" pos:column="31"/></literal></expr>)<pos:position pos:line="66" pos:column="32"/></condition><then pos:line="66" pos:column="32">
			<block type="pseudo"><return pos:line="67" pos:column="25">return <expr><name pos:line="67" pos:column="32">subcnt<pos:position pos:line="67" pos:column="38"/></name></expr>;<pos:position pos:line="67" pos:column="39"/></return></block></then></if>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><operator pos:line="68" pos:column="21">!<pos:position pos:line="68" pos:column="22"/></operator><name pos:line="68" pos:column="22">subcnt<pos:position pos:line="68" pos:column="28"/></name></expr>)<pos:position pos:line="68" pos:column="29"/></condition><then pos:line="68" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="25">die<pos:position pos:line="69" pos:column="28"/></name><argument_list pos:line="69" pos:column="28">(<argument><expr><literal type="string" pos:line="69" pos:column="29">"index cache-tree records empty sub-tree"<pos:position pos:line="69" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="72"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="70" pos:column="17">i<pos:position pos:line="70" pos:column="18"/></name> <operator pos:line="70" pos:column="19">+=<pos:position pos:line="70" pos:column="21"/></operator> <name pos:line="70" pos:column="22">subcnt<pos:position pos:line="70" pos:column="28"/></name></expr>;<pos:position pos:line="70" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="71" pos:column="17">sub<pos:position pos:line="71" pos:column="20"/></name><operator pos:line="71" pos:column="20">-&gt;<pos:position pos:line="71" pos:column="25"/></operator><name pos:line="71" pos:column="22">count<pos:position pos:line="71" pos:column="27"/></name></name> <operator pos:line="71" pos:column="28">=<pos:position pos:line="71" pos:column="29"/></operator> <name pos:line="71" pos:column="30">subcnt<pos:position pos:line="71" pos:column="36"/></name></expr>;<pos:position pos:line="71" pos:column="37"/></expr_stmt> <comment type="block" pos:line="71" pos:column="38">/* to be used in the next loop */</comment>
		<expr_stmt><expr><operator pos:line="72" pos:column="17">*<pos:position pos:line="72" pos:column="18"/></operator><name pos:line="72" pos:column="18">skip_count<pos:position pos:line="72" pos:column="28"/></name> <operator pos:line="72" pos:column="29">+=<pos:position pos:line="72" pos:column="31"/></operator> <name pos:line="72" pos:column="32">subskip<pos:position pos:line="72" pos:column="39"/></name></expr>;<pos:position pos:line="72" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="73" pos:column="17">sub<pos:position pos:line="73" pos:column="20"/></name><operator pos:line="73" pos:column="20">-&gt;<pos:position pos:line="73" pos:column="25"/></operator><name pos:line="73" pos:column="22">used<pos:position pos:line="73" pos:column="26"/></name></name> <operator pos:line="73" pos:column="27">=<pos:position pos:line="73" pos:column="28"/></operator> <literal type="number" pos:line="73" pos:column="29">1<pos:position pos:line="73" pos:column="30"/></literal></expr>;<pos:position pos:line="73" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="74" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="76" pos:column="9">discard_unused_subtrees<pos:position pos:line="76" pos:column="32"/></name><argument_list pos:line="76" pos:column="32">(<argument><expr><name pos:line="76" pos:column="33">it<pos:position pos:line="76" pos:column="35"/></name></expr></argument>)<pos:position pos:line="76" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="37"/></expr_stmt>

	<comment type="block" pos:line="78" pos:column="9">/*
	 * Then write out the tree object for this level.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="81" pos:column="9">strbuf_init<pos:position pos:line="81" pos:column="20"/></name><argument_list pos:line="81" pos:column="20">(<argument><expr><operator pos:line="81" pos:column="21">&amp;<pos:position pos:line="81" pos:column="26"/></operator><name pos:line="81" pos:column="22">buffer<pos:position pos:line="81" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="30">8192<pos:position pos:line="81" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><name pos:line="83" pos:column="9">i<pos:position pos:line="83" pos:column="10"/></name> <operator pos:line="83" pos:column="11">=<pos:position pos:line="83" pos:column="12"/></operator> <literal type="number" pos:line="83" pos:column="13">0<pos:position pos:line="83" pos:column="14"/></literal></expr>;<pos:position pos:line="83" pos:column="15"/></expr_stmt>
	<while pos:line="84" pos:column="9">while <condition pos:line="84" pos:column="15">(<expr><name pos:line="84" pos:column="16">i<pos:position pos:line="84" pos:column="17"/></name> <operator pos:line="84" pos:column="18">&lt;<pos:position pos:line="84" pos:column="22"/></operator> <name pos:line="84" pos:column="20">entries<pos:position pos:line="84" pos:column="27"/></name></expr>)<pos:position pos:line="84" pos:column="28"/></condition> <block pos:line="84" pos:column="29">{
		<decl_stmt><decl><type><specifier pos:line="85" pos:column="17">const<pos:position pos:line="85" pos:column="22"/></specifier> <name><name pos:line="85" pos:column="23">struct<pos:position pos:line="85" pos:column="29"/></name> <name pos:line="85" pos:column="30">cache_entry<pos:position pos:line="85" pos:column="41"/></name></name> <modifier pos:line="85" pos:column="42">*<pos:position pos:line="85" pos:column="43"/></modifier></type><name pos:line="85" pos:column="43">ce<pos:position pos:line="85" pos:column="45"/></name> <init pos:line="85" pos:column="46">= <expr><name><name pos:line="85" pos:column="48">cache<pos:position pos:line="85" pos:column="53"/></name><index pos:line="85" pos:column="53">[<expr><name pos:line="85" pos:column="54">i<pos:position pos:line="85" pos:column="55"/></name></expr>]<pos:position pos:line="85" pos:column="56"/></index></name></expr></init></decl>;<pos:position pos:line="85" pos:column="57"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="86" pos:column="17">struct<pos:position pos:line="86" pos:column="23"/></name> <name pos:line="86" pos:column="24">cache_tree_sub<pos:position pos:line="86" pos:column="38"/></name></name> <modifier pos:line="86" pos:column="39">*<pos:position pos:line="86" pos:column="40"/></modifier></type><name pos:line="86" pos:column="40">sub<pos:position pos:line="86" pos:column="43"/></name></decl>;<pos:position pos:line="86" pos:column="44"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="87" pos:column="17">const<pos:position pos:line="87" pos:column="22"/></specifier> <name pos:line="87" pos:column="23">char<pos:position pos:line="87" pos:column="27"/></name> <modifier pos:line="87" pos:column="28">*<pos:position pos:line="87" pos:column="29"/></modifier></type><name pos:line="87" pos:column="29">path<pos:position pos:line="87" pos:column="33"/></name></decl>, <modifier pos:line="87" pos:column="35">*<pos:position pos:line="87" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="87" pos:column="36">slash<pos:position pos:line="87" pos:column="41"/></name></decl>;<pos:position pos:line="87" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="88" pos:column="17">int<pos:position pos:line="88" pos:column="20"/></name></type> <name pos:line="88" pos:column="21">pathlen<pos:position pos:line="88" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="88" pos:column="30">entlen<pos:position pos:line="88" pos:column="36"/></name></decl>;<pos:position pos:line="88" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="89" pos:column="17">const<pos:position pos:line="89" pos:column="22"/></specifier> <name pos:line="89" pos:column="23">unsigned<pos:position pos:line="89" pos:column="31"/></name> <name pos:line="89" pos:column="32">char<pos:position pos:line="89" pos:column="36"/></name> <modifier pos:line="89" pos:column="37">*<pos:position pos:line="89" pos:column="38"/></modifier></type><name pos:line="89" pos:column="38">sha1<pos:position pos:line="89" pos:column="42"/></name></decl>;<pos:position pos:line="89" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="90" pos:column="17">unsigned<pos:position pos:line="90" pos:column="25"/></name></type> <name pos:line="90" pos:column="26">mode<pos:position pos:line="90" pos:column="30"/></name></decl>;<pos:position pos:line="90" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="91" pos:column="17">int<pos:position pos:line="91" pos:column="20"/></name></type> <name pos:line="91" pos:column="21">expected_missing<pos:position pos:line="91" pos:column="37"/></name> <init pos:line="91" pos:column="38">= <expr><literal type="number" pos:line="91" pos:column="40">0<pos:position pos:line="91" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="91" pos:column="42"/></decl_stmt>

		<expr_stmt><expr><name pos:line="93" pos:column="17">path<pos:position pos:line="93" pos:column="21"/></name> <operator pos:line="93" pos:column="22">=<pos:position pos:line="93" pos:column="23"/></operator> <name><name pos:line="93" pos:column="24">ce<pos:position pos:line="93" pos:column="26"/></name><operator pos:line="93" pos:column="26">-&gt;<pos:position pos:line="93" pos:column="31"/></operator><name pos:line="93" pos:column="28">name<pos:position pos:line="93" pos:column="32"/></name></name></expr>;<pos:position pos:line="93" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="94" pos:column="17">pathlen<pos:position pos:line="94" pos:column="24"/></name> <operator pos:line="94" pos:column="25">=<pos:position pos:line="94" pos:column="26"/></operator> <call><name pos:line="94" pos:column="27">ce_namelen<pos:position pos:line="94" pos:column="37"/></name><argument_list pos:line="94" pos:column="37">(<argument><expr><name pos:line="94" pos:column="38">ce<pos:position pos:line="94" pos:column="40"/></name></expr></argument>)<pos:position pos:line="94" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="42"/></expr_stmt>
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name pos:line="95" pos:column="21">pathlen<pos:position pos:line="95" pos:column="28"/></name> <operator pos:line="95" pos:column="29">&lt;=<pos:position pos:line="95" pos:column="34"/></operator> <name pos:line="95" pos:column="32">baselen<pos:position pos:line="95" pos:column="39"/></name> <operator pos:line="95" pos:column="40">||<pos:position pos:line="95" pos:column="42"/></operator> <call><name pos:line="95" pos:column="43">memcmp<pos:position pos:line="95" pos:column="49"/></name><argument_list pos:line="95" pos:column="49">(<argument><expr><name pos:line="95" pos:column="50">base<pos:position pos:line="95" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="56">path<pos:position pos:line="95" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="62">baselen<pos:position pos:line="95" pos:column="69"/></name></expr></argument>)<pos:position pos:line="95" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="95" pos:column="71"/></condition><then pos:line="95" pos:column="71">
			<block type="pseudo"><break pos:line="96" pos:column="25">break;<pos:position pos:line="96" pos:column="31"/></break></block></then></if> <comment type="block" pos:line="96" pos:column="32">/* at the end of this level */</comment>

		<expr_stmt><expr><name pos:line="98" pos:column="17">slash<pos:position pos:line="98" pos:column="22"/></name> <operator pos:line="98" pos:column="23">=<pos:position pos:line="98" pos:column="24"/></operator> <call><name pos:line="98" pos:column="25">strchr<pos:position pos:line="98" pos:column="31"/></name><argument_list pos:line="98" pos:column="31">(<argument><expr><name pos:line="98" pos:column="32">path<pos:position pos:line="98" pos:column="36"/></name> <operator pos:line="98" pos:column="37">+<pos:position pos:line="98" pos:column="38"/></operator> <name pos:line="98" pos:column="39">baselen<pos:position pos:line="98" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="98" pos:column="48">'/'<pos:position pos:line="98" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="53"/></expr_stmt>
		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><name pos:line="99" pos:column="21">slash<pos:position pos:line="99" pos:column="26"/></name></expr>)<pos:position pos:line="99" pos:column="27"/></condition><then pos:line="99" pos:column="27"> <block pos:line="99" pos:column="28">{
			<expr_stmt><expr><name pos:line="100" pos:column="25">entlen<pos:position pos:line="100" pos:column="31"/></name> <operator pos:line="100" pos:column="32">=<pos:position pos:line="100" pos:column="33"/></operator> <name pos:line="100" pos:column="34">slash<pos:position pos:line="100" pos:column="39"/></name> <operator pos:line="100" pos:column="40">-<pos:position pos:line="100" pos:column="41"/></operator> <operator pos:line="100" pos:column="42">(<pos:position pos:line="100" pos:column="43"/></operator><name pos:line="100" pos:column="43">path<pos:position pos:line="100" pos:column="47"/></name> <operator pos:line="100" pos:column="48">+<pos:position pos:line="100" pos:column="49"/></operator> <name pos:line="100" pos:column="50">baselen<pos:position pos:line="100" pos:column="57"/></name><operator pos:line="100" pos:column="57">)<pos:position pos:line="100" pos:column="58"/></operator></expr>;<pos:position pos:line="100" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><name pos:line="101" pos:column="25">sub<pos:position pos:line="101" pos:column="28"/></name> <operator pos:line="101" pos:column="29">=<pos:position pos:line="101" pos:column="30"/></operator> <call><name pos:line="101" pos:column="31">find_subtree<pos:position pos:line="101" pos:column="43"/></name><argument_list pos:line="101" pos:column="43">(<argument><expr><name pos:line="101" pos:column="44">it<pos:position pos:line="101" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="48">path<pos:position pos:line="101" pos:column="52"/></name> <operator pos:line="101" pos:column="53">+<pos:position pos:line="101" pos:column="54"/></operator> <name pos:line="101" pos:column="55">baselen<pos:position pos:line="101" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="64">entlen<pos:position pos:line="101" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="101" pos:column="72">0<pos:position pos:line="101" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="75"/></expr_stmt>
			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><operator pos:line="102" pos:column="29">!<pos:position pos:line="102" pos:column="30"/></operator><name pos:line="102" pos:column="30">sub<pos:position pos:line="102" pos:column="33"/></name></expr>)<pos:position pos:line="102" pos:column="34"/></condition><then pos:line="102" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="33">die<pos:position pos:line="103" pos:column="36"/></name><argument_list pos:line="103" pos:column="36">(<argument><expr><literal type="string" pos:line="103" pos:column="37">"cache-tree.c: '%.*s' in '%s' not found"<pos:position pos:line="103" pos:column="77"/></literal></expr></argument>,
				    <argument><expr><name pos:line="104" pos:column="37">entlen<pos:position pos:line="104" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="45">path<pos:position pos:line="104" pos:column="49"/></name> <operator pos:line="104" pos:column="50">+<pos:position pos:line="104" pos:column="51"/></operator> <name pos:line="104" pos:column="52">baselen<pos:position pos:line="104" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="61">path<pos:position pos:line="104" pos:column="65"/></name></expr></argument>)<pos:position pos:line="104" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="67"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="105" pos:column="25">i<pos:position pos:line="105" pos:column="26"/></name> <operator pos:line="105" pos:column="27">+=<pos:position pos:line="105" pos:column="29"/></operator> <name><name pos:line="105" pos:column="30">sub<pos:position pos:line="105" pos:column="33"/></name><operator pos:line="105" pos:column="33">-&gt;<pos:position pos:line="105" pos:column="38"/></operator><name pos:line="105" pos:column="35">count<pos:position pos:line="105" pos:column="40"/></name></name></expr>;<pos:position pos:line="105" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="106" pos:column="25">sha1<pos:position pos:line="106" pos:column="29"/></name> <operator pos:line="106" pos:column="30">=<pos:position pos:line="106" pos:column="31"/></operator> <name><name pos:line="106" pos:column="32">sub<pos:position pos:line="106" pos:column="35"/></name><operator pos:line="106" pos:column="35">-&gt;<pos:position pos:line="106" pos:column="40"/></operator><name pos:line="106" pos:column="37">cache_tree<pos:position pos:line="106" pos:column="47"/></name><operator pos:line="106" pos:column="47">-&gt;<pos:position pos:line="106" pos:column="52"/></operator><name pos:line="106" pos:column="49">sha1<pos:position pos:line="106" pos:column="53"/></name></name></expr>;<pos:position pos:line="106" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><name pos:line="107" pos:column="25">mode<pos:position pos:line="107" pos:column="29"/></name> <operator pos:line="107" pos:column="30">=<pos:position pos:line="107" pos:column="31"/></operator> <name pos:line="107" pos:column="32">S_IFDIR<pos:position pos:line="107" pos:column="39"/></name></expr>;<pos:position pos:line="107" pos:column="40"/></expr_stmt>
			<if pos:line="108" pos:column="25">if <condition pos:line="108" pos:column="28">(<expr><name><name pos:line="108" pos:column="29">sub<pos:position pos:line="108" pos:column="32"/></name><operator pos:line="108" pos:column="32">-&gt;<pos:position pos:line="108" pos:column="37"/></operator><name pos:line="108" pos:column="34">cache_tree<pos:position pos:line="108" pos:column="44"/></name><operator pos:line="108" pos:column="44">-&gt;<pos:position pos:line="108" pos:column="49"/></operator><name pos:line="108" pos:column="46">entry_count<pos:position pos:line="108" pos:column="57"/></name></name> <operator pos:line="108" pos:column="58">&lt;<pos:position pos:line="108" pos:column="62"/></operator> <literal type="number" pos:line="108" pos:column="60">0<pos:position pos:line="108" pos:column="61"/></literal></expr>)<pos:position pos:line="108" pos:column="62"/></condition><then pos:line="108" pos:column="62"> <block pos:line="108" pos:column="63">{
				<expr_stmt><expr><name pos:line="109" pos:column="33">to_invalidate<pos:position pos:line="109" pos:column="46"/></name> <operator pos:line="109" pos:column="47">=<pos:position pos:line="109" pos:column="48"/></operator> <literal type="number" pos:line="109" pos:column="49">1<pos:position pos:line="109" pos:column="50"/></literal></expr>;<pos:position pos:line="109" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><name pos:line="110" pos:column="33">expected_missing<pos:position pos:line="110" pos:column="49"/></name> <operator pos:line="110" pos:column="50">=<pos:position pos:line="110" pos:column="51"/></operator> <literal type="number" pos:line="110" pos:column="52">1<pos:position pos:line="110" pos:column="53"/></literal></expr>;<pos:position pos:line="110" pos:column="54"/></expr_stmt>
			}<pos:position pos:line="111" pos:column="26"/></block></then></if>
		}<pos:position pos:line="112" pos:column="18"/></block></then>
		<else pos:line="113" pos:column="17">else <block pos:line="113" pos:column="22">{
			<expr_stmt><expr><name pos:line="114" pos:column="25">sha1<pos:position pos:line="114" pos:column="29"/></name> <operator pos:line="114" pos:column="30">=<pos:position pos:line="114" pos:column="31"/></operator> <name><name pos:line="114" pos:column="32">ce<pos:position pos:line="114" pos:column="34"/></name><operator pos:line="114" pos:column="34">-&gt;<pos:position pos:line="114" pos:column="39"/></operator><name pos:line="114" pos:column="36">sha1<pos:position pos:line="114" pos:column="40"/></name></name></expr>;<pos:position pos:line="114" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="115" pos:column="25">mode<pos:position pos:line="115" pos:column="29"/></name> <operator pos:line="115" pos:column="30">=<pos:position pos:line="115" pos:column="31"/></operator> <name><name pos:line="115" pos:column="32">ce<pos:position pos:line="115" pos:column="34"/></name><operator pos:line="115" pos:column="34">-&gt;<pos:position pos:line="115" pos:column="39"/></operator><name pos:line="115" pos:column="36">ce_mode<pos:position pos:line="115" pos:column="43"/></name></name></expr>;<pos:position pos:line="115" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="116" pos:column="25">entlen<pos:position pos:line="116" pos:column="31"/></name> <operator pos:line="116" pos:column="32">=<pos:position pos:line="116" pos:column="33"/></operator> <name pos:line="116" pos:column="34">pathlen<pos:position pos:line="116" pos:column="41"/></name> <operator pos:line="116" pos:column="42">-<pos:position pos:line="116" pos:column="43"/></operator> <name pos:line="116" pos:column="44">baselen<pos:position pos:line="116" pos:column="51"/></name></expr>;<pos:position pos:line="116" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name pos:line="117" pos:column="25">i<pos:position pos:line="117" pos:column="26"/></name><operator pos:line="117" pos:column="26">++<pos:position pos:line="117" pos:column="28"/></operator></expr>;<pos:position pos:line="117" pos:column="29"/></expr_stmt>
		}<pos:position pos:line="118" pos:column="18"/></block></else></if>
		<if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><name pos:line="119" pos:column="21">mode<pos:position pos:line="119" pos:column="25"/></name> <operator pos:line="119" pos:column="26">!=<pos:position pos:line="119" pos:column="28"/></operator> <name pos:line="119" pos:column="29">S_IFGITLINK<pos:position pos:line="119" pos:column="40"/></name> <operator pos:line="119" pos:column="41">&amp;&amp;<pos:position pos:line="119" pos:column="51"/></operator> <operator pos:line="119" pos:column="44">!<pos:position pos:line="119" pos:column="45"/></operator><name pos:line="119" pos:column="45">missing_ok<pos:position pos:line="119" pos:column="55"/></name> <operator pos:line="119" pos:column="56">&amp;&amp;<pos:position pos:line="119" pos:column="66"/></operator> <operator pos:line="119" pos:column="59">!<pos:position pos:line="119" pos:column="60"/></operator><call><name pos:line="119" pos:column="60">has_sha1_file<pos:position pos:line="119" pos:column="73"/></name><argument_list pos:line="119" pos:column="73">(<argument><expr><name pos:line="119" pos:column="74">sha1<pos:position pos:line="119" pos:column="78"/></name></expr></argument>)<pos:position pos:line="119" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="119" pos:column="80"/></condition><then pos:line="119" pos:column="80"> <block pos:line="119" pos:column="81">{
			<expr_stmt><expr><call><name pos:line="120" pos:column="25">strbuf_release<pos:position pos:line="120" pos:column="39"/></name><argument_list pos:line="120" pos:column="39">(<argument><expr><operator pos:line="120" pos:column="40">&amp;<pos:position pos:line="120" pos:column="45"/></operator><name pos:line="120" pos:column="41">buffer<pos:position pos:line="120" pos:column="47"/></name></expr></argument>)<pos:position pos:line="120" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="49"/></expr_stmt>
			<if pos:line="121" pos:column="25">if <condition pos:line="121" pos:column="28">(<expr><name pos:line="121" pos:column="29">expected_missing<pos:position pos:line="121" pos:column="45"/></name></expr>)<pos:position pos:line="121" pos:column="46"/></condition><then pos:line="121" pos:column="46">
				<block type="pseudo"><return pos:line="122" pos:column="33">return <expr><operator pos:line="122" pos:column="40">-<pos:position pos:line="122" pos:column="41"/></operator><literal type="number" pos:line="122" pos:column="41">1<pos:position pos:line="122" pos:column="42"/></literal></expr>;<pos:position pos:line="122" pos:column="43"/></return></block></then></if>
			<return pos:line="123" pos:column="25">return <expr><call><name pos:line="123" pos:column="32">error<pos:position pos:line="123" pos:column="37"/></name><argument_list pos:line="123" pos:column="37">(<argument><expr><literal type="string" pos:line="123" pos:column="38">"invalid object %06o %s for '%.*s'"<pos:position pos:line="123" pos:column="73"/></literal></expr></argument>,
				<argument><expr><name pos:line="124" pos:column="33">mode<pos:position pos:line="124" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="124" pos:column="39">sha1_to_hex<pos:position pos:line="124" pos:column="50"/></name><argument_list pos:line="124" pos:column="50">(<argument><expr><name pos:line="124" pos:column="51">sha1<pos:position pos:line="124" pos:column="55"/></name></expr></argument>)<pos:position pos:line="124" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="124" pos:column="58">entlen<pos:position pos:line="124" pos:column="64"/></name><operator pos:line="124" pos:column="64">+<pos:position pos:line="124" pos:column="65"/></operator><name pos:line="124" pos:column="65">baselen<pos:position pos:line="124" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="74">path<pos:position pos:line="124" pos:column="78"/></name></expr></argument>)<pos:position pos:line="124" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="80"/></return>
		}<pos:position pos:line="125" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="127" pos:column="17">/*
		 * CE_REMOVE entries are removed before the index is
		 * written to disk. Skip them to remain consistent
		 * with the future on-disk index.
		 */</comment>
		<if pos:line="132" pos:column="17">if <condition pos:line="132" pos:column="20">(<expr><name><name pos:line="132" pos:column="21">ce<pos:position pos:line="132" pos:column="23"/></name><operator pos:line="132" pos:column="23">-&gt;<pos:position pos:line="132" pos:column="28"/></operator><name pos:line="132" pos:column="25">ce_flags<pos:position pos:line="132" pos:column="33"/></name></name> <operator pos:line="132" pos:column="34">&amp;<pos:position pos:line="132" pos:column="39"/></operator> <name pos:line="132" pos:column="36">CE_REMOVE<pos:position pos:line="132" pos:column="45"/></name></expr>)<pos:position pos:line="132" pos:column="46"/></condition><then pos:line="132" pos:column="46"> <block pos:line="132" pos:column="47">{
			<expr_stmt><expr><operator pos:line="133" pos:column="25">*<pos:position pos:line="133" pos:column="26"/></operator><name pos:line="133" pos:column="26">skip_count<pos:position pos:line="133" pos:column="36"/></name> <operator pos:line="133" pos:column="37">=<pos:position pos:line="133" pos:column="38"/></operator> <operator pos:line="133" pos:column="39">*<pos:position pos:line="133" pos:column="40"/></operator><name pos:line="133" pos:column="40">skip_count<pos:position pos:line="133" pos:column="50"/></name> <operator pos:line="133" pos:column="51">+<pos:position pos:line="133" pos:column="52"/></operator> <literal type="number" pos:line="133" pos:column="53">1<pos:position pos:line="133" pos:column="54"/></literal></expr>;<pos:position pos:line="133" pos:column="55"/></expr_stmt>
			<continue pos:line="134" pos:column="25">continue;<pos:position pos:line="134" pos:column="34"/></continue>
		}<pos:position pos:line="135" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="137" pos:column="17">/*
		 * CE_INTENT_TO_ADD entries exist on on-disk index but
		 * they are not part of generated trees. Invalidate up
		 * to root to force cache-tree users to read elsewhere.
		 */</comment>
		<if pos:line="142" pos:column="17">if <condition pos:line="142" pos:column="20">(<expr><call><name pos:line="142" pos:column="21">ce_intent_to_add<pos:position pos:line="142" pos:column="37"/></name><argument_list pos:line="142" pos:column="37">(<argument><expr><name pos:line="142" pos:column="38">ce<pos:position pos:line="142" pos:column="40"/></name></expr></argument>)<pos:position pos:line="142" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="142" pos:column="42"/></condition><then pos:line="142" pos:column="42"> <block pos:line="142" pos:column="43">{
			<expr_stmt><expr><name pos:line="143" pos:column="25">to_invalidate<pos:position pos:line="143" pos:column="38"/></name> <operator pos:line="143" pos:column="39">=<pos:position pos:line="143" pos:column="40"/></operator> <literal type="number" pos:line="143" pos:column="41">1<pos:position pos:line="143" pos:column="42"/></literal></expr>;<pos:position pos:line="143" pos:column="43"/></expr_stmt>
			<continue pos:line="144" pos:column="25">continue;<pos:position pos:line="144" pos:column="34"/></continue>
		}<pos:position pos:line="145" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="147" pos:column="17">strbuf_grow<pos:position pos:line="147" pos:column="28"/></name><argument_list pos:line="147" pos:column="28">(<argument><expr><operator pos:line="147" pos:column="29">&amp;<pos:position pos:line="147" pos:column="34"/></operator><name pos:line="147" pos:column="30">buffer<pos:position pos:line="147" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="38">entlen<pos:position pos:line="147" pos:column="44"/></name> <operator pos:line="147" pos:column="45">+<pos:position pos:line="147" pos:column="46"/></operator> <literal type="number" pos:line="147" pos:column="47">100<pos:position pos:line="147" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="148" pos:column="17">strbuf_addf<pos:position pos:line="148" pos:column="28"/></name><argument_list pos:line="148" pos:column="28">(<argument><expr><operator pos:line="148" pos:column="29">&amp;<pos:position pos:line="148" pos:column="34"/></operator><name pos:line="148" pos:column="30">buffer<pos:position pos:line="148" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="148" pos:column="38">"%o %.*s%c"<pos:position pos:line="148" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="148" pos:column="51">mode<pos:position pos:line="148" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="57">entlen<pos:position pos:line="148" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="65">path<pos:position pos:line="148" pos:column="69"/></name> <operator pos:line="148" pos:column="70">+<pos:position pos:line="148" pos:column="71"/></operator> <name pos:line="148" pos:column="72">baselen<pos:position pos:line="148" pos:column="79"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="148" pos:column="81">'\0'<pos:position pos:line="148" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="87"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="149" pos:column="17">strbuf_add<pos:position pos:line="149" pos:column="27"/></name><argument_list pos:line="149" pos:column="27">(<argument><expr><operator pos:line="149" pos:column="28">&amp;<pos:position pos:line="149" pos:column="33"/></operator><name pos:line="149" pos:column="29">buffer<pos:position pos:line="149" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="37">sha1<pos:position pos:line="149" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="149" pos:column="43">20<pos:position pos:line="149" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="47"/></expr_stmt>

<cpp:if pos:line="151" pos:column="1">#<cpp:directive pos:line="151" pos:column="2">if<pos:position pos:line="151" pos:column="4"/></cpp:directive> <expr><name pos:line="151" pos:column="5">DEBUG<pos:position pos:line="151" pos:column="10"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="152" pos:column="17">fprintf<pos:position pos:line="152" pos:column="24"/></name><argument_list pos:line="152" pos:column="24">(<argument><expr><name pos:line="152" pos:column="25">stderr<pos:position pos:line="152" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="152" pos:column="33">"cache-tree update-one %o %.*s\n"<pos:position pos:line="152" pos:column="66"/></literal></expr></argument>,
			<argument><expr><name pos:line="153" pos:column="25">mode<pos:position pos:line="153" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="31">entlen<pos:position pos:line="153" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="39">path<pos:position pos:line="153" pos:column="43"/></name> <operator pos:line="153" pos:column="44">+<pos:position pos:line="153" pos:column="45"/></operator> <name pos:line="153" pos:column="46">baselen<pos:position pos:line="153" pos:column="53"/></name></expr></argument>)<pos:position pos:line="153" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="55"/></expr_stmt>
<cpp:endif pos:line="154" pos:column="1">#<cpp:directive pos:line="154" pos:column="2">endif<pos:position pos:line="154" pos:column="7"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="155" pos:column="10"/></block></while>

	<if pos:line="157" pos:column="9">if <condition pos:line="157" pos:column="12">(<expr><name pos:line="157" pos:column="13">repair<pos:position pos:line="157" pos:column="19"/></name></expr>)<pos:position pos:line="157" pos:column="20"/></condition><then pos:line="157" pos:column="20"> <block pos:line="157" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="158" pos:column="17">unsigned<pos:position pos:line="158" pos:column="25"/></name> <name pos:line="158" pos:column="26">char<pos:position pos:line="158" pos:column="30"/></name></type> <name><name pos:line="158" pos:column="31">sha1<pos:position pos:line="158" pos:column="35"/></name><index pos:line="158" pos:column="35">[<expr><literal type="number" pos:line="158" pos:column="36">20<pos:position pos:line="158" pos:column="38"/></literal></expr>]<pos:position pos:line="158" pos:column="39"/></index></name></decl>;<pos:position pos:line="158" pos:column="40"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="159" pos:column="17">hash_sha1_file<pos:position pos:line="159" pos:column="31"/></name><argument_list pos:line="159" pos:column="31">(<argument><expr><name><name pos:line="159" pos:column="32">buffer<pos:position pos:line="159" pos:column="38"/></name><operator pos:line="159" pos:column="38">.<pos:position pos:line="159" pos:column="39"/></operator><name pos:line="159" pos:column="39">buf<pos:position pos:line="159" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="159" pos:column="44">buffer<pos:position pos:line="159" pos:column="50"/></name><operator pos:line="159" pos:column="50">.<pos:position pos:line="159" pos:column="51"/></operator><name pos:line="159" pos:column="51">len<pos:position pos:line="159" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="56">tree_type<pos:position pos:line="159" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="67">sha1<pos:position pos:line="159" pos:column="71"/></name></expr></argument>)<pos:position pos:line="159" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="73"/></expr_stmt>
		<if pos:line="160" pos:column="17">if <condition pos:line="160" pos:column="20">(<expr><call><name pos:line="160" pos:column="21">has_sha1_file<pos:position pos:line="160" pos:column="34"/></name><argument_list pos:line="160" pos:column="34">(<argument><expr><name pos:line="160" pos:column="35">sha1<pos:position pos:line="160" pos:column="39"/></name></expr></argument>)<pos:position pos:line="160" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="160" pos:column="41"/></condition><then pos:line="160" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="161" pos:column="25">hashcpy<pos:position pos:line="161" pos:column="32"/></name><argument_list pos:line="161" pos:column="32">(<argument><expr><name><name pos:line="161" pos:column="33">it<pos:position pos:line="161" pos:column="35"/></name><operator pos:line="161" pos:column="35">-&gt;<pos:position pos:line="161" pos:column="40"/></operator><name pos:line="161" pos:column="37">sha1<pos:position pos:line="161" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="43">sha1<pos:position pos:line="161" pos:column="47"/></name></expr></argument>)<pos:position pos:line="161" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="49"/></expr_stmt></block></then>
		<else pos:line="162" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="163" pos:column="25">to_invalidate<pos:position pos:line="163" pos:column="38"/></name> <operator pos:line="163" pos:column="39">=<pos:position pos:line="163" pos:column="40"/></operator> <literal type="number" pos:line="163" pos:column="41">1<pos:position pos:line="163" pos:column="42"/></literal></expr>;<pos:position pos:line="163" pos:column="43"/></expr_stmt></block></else></if>
	}<pos:position pos:line="164" pos:column="10"/></block></then> <elseif pos:line="164" pos:column="11">else <if pos:line="164" pos:column="16">if <condition pos:line="164" pos:column="19">(<expr><name pos:line="164" pos:column="20">dryrun<pos:position pos:line="164" pos:column="26"/></name></expr>)<pos:position pos:line="164" pos:column="27"/></condition><then pos:line="164" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="165" pos:column="17">hash_sha1_file<pos:position pos:line="165" pos:column="31"/></name><argument_list pos:line="165" pos:column="31">(<argument><expr><name><name pos:line="165" pos:column="32">buffer<pos:position pos:line="165" pos:column="38"/></name><operator pos:line="165" pos:column="38">.<pos:position pos:line="165" pos:column="39"/></operator><name pos:line="165" pos:column="39">buf<pos:position pos:line="165" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="165" pos:column="44">buffer<pos:position pos:line="165" pos:column="50"/></name><operator pos:line="165" pos:column="50">.<pos:position pos:line="165" pos:column="51"/></operator><name pos:line="165" pos:column="51">len<pos:position pos:line="165" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="56">tree_type<pos:position pos:line="165" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="165" pos:column="67">it<pos:position pos:line="165" pos:column="69"/></name><operator pos:line="165" pos:column="69">-&gt;<pos:position pos:line="165" pos:column="74"/></operator><name pos:line="165" pos:column="71">sha1<pos:position pos:line="165" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="165" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="77"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="166" pos:column="9">else <if pos:line="166" pos:column="14">if <condition pos:line="166" pos:column="17">(<expr><call><name pos:line="166" pos:column="18">write_sha1_file<pos:position pos:line="166" pos:column="33"/></name><argument_list pos:line="166" pos:column="33">(<argument><expr><name><name pos:line="166" pos:column="34">buffer<pos:position pos:line="166" pos:column="40"/></name><operator pos:line="166" pos:column="40">.<pos:position pos:line="166" pos:column="41"/></operator><name pos:line="166" pos:column="41">buf<pos:position pos:line="166" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="166" pos:column="46">buffer<pos:position pos:line="166" pos:column="52"/></name><operator pos:line="166" pos:column="52">.<pos:position pos:line="166" pos:column="53"/></operator><name pos:line="166" pos:column="53">len<pos:position pos:line="166" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="58">tree_type<pos:position pos:line="166" pos:column="67"/></name></expr></argument>, <argument><expr><name><name pos:line="166" pos:column="69">it<pos:position pos:line="166" pos:column="71"/></name><operator pos:line="166" pos:column="71">-&gt;<pos:position pos:line="166" pos:column="76"/></operator><name pos:line="166" pos:column="73">sha1<pos:position pos:line="166" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="166" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="166" pos:column="79"/></condition><then pos:line="166" pos:column="79"> <block pos:line="166" pos:column="80">{
		<expr_stmt><expr><call><name pos:line="167" pos:column="17">strbuf_release<pos:position pos:line="167" pos:column="31"/></name><argument_list pos:line="167" pos:column="31">(<argument><expr><operator pos:line="167" pos:column="32">&amp;<pos:position pos:line="167" pos:column="37"/></operator><name pos:line="167" pos:column="33">buffer<pos:position pos:line="167" pos:column="39"/></name></expr></argument>)<pos:position pos:line="167" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="41"/></expr_stmt>
		<return pos:line="168" pos:column="17">return <expr><operator pos:line="168" pos:column="24">-<pos:position pos:line="168" pos:column="25"/></operator><literal type="number" pos:line="168" pos:column="25">1<pos:position pos:line="168" pos:column="26"/></literal></expr>;<pos:position pos:line="168" pos:column="27"/></return>
	}<pos:position pos:line="169" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="171" pos:column="9">strbuf_release<pos:position pos:line="171" pos:column="23"/></name><argument_list pos:line="171" pos:column="23">(<argument><expr><operator pos:line="171" pos:column="24">&amp;<pos:position pos:line="171" pos:column="29"/></operator><name pos:line="171" pos:column="25">buffer<pos:position pos:line="171" pos:column="31"/></name></expr></argument>)<pos:position pos:line="171" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="172" pos:column="9">it<pos:position pos:line="172" pos:column="11"/></name><operator pos:line="172" pos:column="11">-&gt;<pos:position pos:line="172" pos:column="16"/></operator><name pos:line="172" pos:column="13">entry_count<pos:position pos:line="172" pos:column="24"/></name></name> <operator pos:line="172" pos:column="25">=<pos:position pos:line="172" pos:column="26"/></operator> <ternary><condition><expr><name pos:line="172" pos:column="27">to_invalidate<pos:position pos:line="172" pos:column="40"/></name></expr> ?<pos:position pos:line="172" pos:column="42"/></condition><then pos:line="172" pos:column="42"> <expr><operator pos:line="172" pos:column="43">-<pos:position pos:line="172" pos:column="44"/></operator><literal type="number" pos:line="172" pos:column="44">1<pos:position pos:line="172" pos:column="45"/></literal></expr> <pos:position pos:line="172" pos:column="46"/></then><else pos:line="172" pos:column="46">: <expr><name pos:line="172" pos:column="48">i<pos:position pos:line="172" pos:column="49"/></name> <operator pos:line="172" pos:column="50">-<pos:position pos:line="172" pos:column="51"/></operator> <operator pos:line="172" pos:column="52">*<pos:position pos:line="172" pos:column="53"/></operator><name pos:line="172" pos:column="53">skip_count<pos:position pos:line="172" pos:column="63"/></name></expr></else></ternary></expr>;<pos:position pos:line="172" pos:column="64"/></expr_stmt>
<cpp:if pos:line="173" pos:column="1">#<cpp:directive pos:line="173" pos:column="2">if<pos:position pos:line="173" pos:column="4"/></cpp:directive> <expr><name pos:line="173" pos:column="5">DEBUG<pos:position pos:line="173" pos:column="10"/></name></expr></cpp:if>
	<expr_stmt><expr><call><name pos:line="174" pos:column="9">fprintf<pos:position pos:line="174" pos:column="16"/></name><argument_list pos:line="174" pos:column="16">(<argument><expr><name pos:line="174" pos:column="17">stderr<pos:position pos:line="174" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="174" pos:column="25">"cache-tree update-one (%d ent, %d subtree) %s\n"<pos:position pos:line="174" pos:column="74"/></literal></expr></argument>,
		<argument><expr><name><name pos:line="175" pos:column="17">it<pos:position pos:line="175" pos:column="19"/></name><operator pos:line="175" pos:column="19">-&gt;<pos:position pos:line="175" pos:column="24"/></operator><name pos:line="175" pos:column="21">entry_count<pos:position pos:line="175" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="175" pos:column="34">it<pos:position pos:line="175" pos:column="36"/></name><operator pos:line="175" pos:column="36">-&gt;<pos:position pos:line="175" pos:column="41"/></operator><name pos:line="175" pos:column="38">subtree_nr<pos:position pos:line="175" pos:column="48"/></name></name></expr></argument>,
		<argument><expr><call><name pos:line="176" pos:column="17">sha1_to_hex<pos:position pos:line="176" pos:column="28"/></name><argument_list pos:line="176" pos:column="28">(<argument><expr><name><name pos:line="176" pos:column="29">it<pos:position pos:line="176" pos:column="31"/></name><operator pos:line="176" pos:column="31">-&gt;<pos:position pos:line="176" pos:column="36"/></operator><name pos:line="176" pos:column="33">sha1<pos:position pos:line="176" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="176" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="176" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="177" pos:column="1">#<cpp:directive pos:line="177" pos:column="2">endif<pos:position pos:line="177" pos:column="7"/></cpp:directive></cpp:endif>
	<return pos:line="178" pos:column="9">return <expr><name pos:line="178" pos:column="16">i<pos:position pos:line="178" pos:column="17"/></name></expr>;<pos:position pos:line="178" pos:column="18"/></return>
}<pos:position pos:line="179" pos:column="2"/></block></function></unit>
