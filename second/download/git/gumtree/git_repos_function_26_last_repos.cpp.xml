<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_26_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">git_tcp_connect_sock<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">host<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">flags<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">error_message<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><name pos:line="3" pos:column="39">STRBUF_INIT<pos:position pos:line="3" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">sockfd<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><operator pos:line="4" pos:column="22">-<pos:position pos:line="4" pos:column="23"/></operator><literal type="number" pos:line="4" pos:column="23">1<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">port<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><call><name pos:line="5" pos:column="28">STR<pos:position pos:line="5" pos:column="31"/></name><argument_list pos:line="5" pos:column="31">(<argument><expr><name pos:line="5" pos:column="32">DEFAULT_GIT_PORT<pos:position pos:line="5" pos:column="48"/></name></expr></argument>)<pos:position pos:line="5" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">ep<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">hostent<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">he<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">sockaddr_in<pos:position pos:line="8" pos:column="27"/></name></name></type> <name pos:line="8" pos:column="28">sa<pos:position pos:line="8" pos:column="30"/></name></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier><modifier pos:line="9" pos:column="15">*<pos:position pos:line="9" pos:column="16"/></modifier></type><name pos:line="9" pos:column="16">ap<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">unsigned<pos:position pos:line="10" pos:column="17"/></name> <name pos:line="10" pos:column="18">int<pos:position pos:line="10" pos:column="21"/></name></type> <name pos:line="10" pos:column="22">nport<pos:position pos:line="10" pos:column="27"/></name></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">cnt<pos:position pos:line="11" pos:column="16"/></name></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">get_host_and_port<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><operator pos:line="13" pos:column="27">&amp;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="28">host<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="34">&amp;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="35">port<pos:position pos:line="13" pos:column="39"/></name></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">flags<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">&amp;<pos:position pos:line="15" pos:column="24"/></operator> <name pos:line="15" pos:column="21">CONNECT_VERBOSE<pos:position pos:line="15" pos:column="36"/></name></expr>)<pos:position pos:line="15" pos:column="37"/></condition><then pos:line="15" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">fprintf<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">stderr<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="33">"Looking up %s ... "<pos:position pos:line="16" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="55">host<pos:position pos:line="16" pos:column="59"/></name></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="61"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="18" pos:column="9">he<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">gethostbyname<pos:position pos:line="18" pos:column="27"/></name><argument_list pos:line="18" pos:column="27">(<argument><expr><name pos:line="18" pos:column="28">host<pos:position pos:line="18" pos:column="32"/></name></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">he<pos:position pos:line="19" pos:column="16"/></name></expr>)<pos:position pos:line="19" pos:column="17"/></condition><then pos:line="19" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">die<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><literal type="string" pos:line="20" pos:column="21">"Unable to look up %s (%s)"<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="50">host<pos:position pos:line="20" pos:column="54"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="56">hstrerror<pos:position pos:line="20" pos:column="65"/></name><argument_list pos:line="20" pos:column="65">(<argument><expr><name pos:line="20" pos:column="66">h_errno<pos:position pos:line="20" pos:column="73"/></name></expr></argument>)<pos:position pos:line="20" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="76"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="21" pos:column="9">nport<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">strtoul<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">port<pos:position pos:line="21" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="31">&amp;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="32">ep<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="36">10<pos:position pos:line="21" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">( <expr><name pos:line="22" pos:column="14">ep<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">==<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">port<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">||<pos:position pos:line="22" pos:column="27"/></operator> <operator pos:line="22" pos:column="28">*<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="29">ep<pos:position pos:line="22" pos:column="31"/></name></expr> )<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33"> <block pos:line="22" pos:column="34">{
		<comment type="block" pos:line="23" pos:column="17">/* Not numeric */</comment>
		<decl_stmt><decl><type><name><name pos:line="24" pos:column="17">struct<pos:position pos:line="24" pos:column="23"/></name> <name pos:line="24" pos:column="24">servent<pos:position pos:line="24" pos:column="31"/></name></name> <modifier pos:line="24" pos:column="32">*<pos:position pos:line="24" pos:column="33"/></modifier></type><name pos:line="24" pos:column="33">se<pos:position pos:line="24" pos:column="35"/></name> <init pos:line="24" pos:column="36">= <expr><call><name pos:line="24" pos:column="38">getservbyname<pos:position pos:line="24" pos:column="51"/></name><argument_list pos:line="24" pos:column="51">(<argument><expr><name pos:line="24" pos:column="52">port<pos:position pos:line="24" pos:column="56"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="24" pos:column="57">"tcp"<pos:position pos:line="24" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="64"/></decl_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">( <expr><operator pos:line="25" pos:column="22">!<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="23">se<pos:position pos:line="25" pos:column="25"/></name></expr> )<pos:position pos:line="25" pos:column="27"/></condition><then pos:line="25" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="25">die<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><literal type="string" pos:line="26" pos:column="29">"Unknown port %s"<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="48">port<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="27" pos:column="17">nport<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name><name pos:line="27" pos:column="25">se<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">-&gt;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="29">s_port<pos:position pos:line="27" pos:column="35"/></name></name></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">flags<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">&amp;<pos:position pos:line="30" pos:column="24"/></operator> <name pos:line="30" pos:column="21">CONNECT_VERBOSE<pos:position pos:line="30" pos:column="36"/></name></expr>)<pos:position pos:line="30" pos:column="37"/></condition><then pos:line="30" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">fprintf<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">stderr<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="33">"done.\nConnecting to %s (port %s) ... "<pos:position pos:line="31" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="75">host<pos:position pos:line="31" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="81">port<pos:position pos:line="31" pos:column="85"/></name></expr></argument>)<pos:position pos:line="31" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="87"/></expr_stmt></block></then></if>

	<for pos:line="33" pos:column="9">for <control pos:line="33" pos:column="13">(<init><expr><name pos:line="33" pos:column="14">cnt<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">=<pos:position pos:line="33" pos:column="19"/></operator> <literal type="number" pos:line="33" pos:column="20">0<pos:position pos:line="33" pos:column="21"/></literal></expr><operator pos:line="33" pos:column="21">,<pos:position pos:line="33" pos:column="22"/></operator> <expr><name pos:line="33" pos:column="23">ap<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">=<pos:position pos:line="33" pos:column="27"/></operator> <name><name pos:line="33" pos:column="28">he<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">-&gt;<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="32">h_addr_list<pos:position pos:line="33" pos:column="43"/></name></name></expr>;<pos:position pos:line="33" pos:column="44"/></init> <condition><expr><operator pos:line="33" pos:column="45">*<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="46">ap<pos:position pos:line="33" pos:column="48"/></name></expr>;<pos:position pos:line="33" pos:column="49"/></condition> <incr><expr><name pos:line="33" pos:column="50">ap<pos:position pos:line="33" pos:column="52"/></name><operator pos:line="33" pos:column="52">++<pos:position pos:line="33" pos:column="54"/></operator></expr><operator pos:line="33" pos:column="54">,<pos:position pos:line="33" pos:column="55"/></operator> <expr><name pos:line="33" pos:column="56">cnt<pos:position pos:line="33" pos:column="59"/></name><operator pos:line="33" pos:column="59">++<pos:position pos:line="33" pos:column="61"/></operator></expr></incr>)<pos:position pos:line="33" pos:column="62"/></control> <block pos:line="33" pos:column="63">{
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">memset<pos:position pos:line="34" pos:column="23"/></name><argument_list pos:line="34" pos:column="23">(<argument><expr><operator pos:line="34" pos:column="24">&amp;<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="25">sa<pos:position pos:line="34" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="29">0<pos:position pos:line="34" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="32">sizeof <name pos:line="34" pos:column="39">sa<pos:position pos:line="34" pos:column="41"/></name></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">sa<pos:position pos:line="35" pos:column="19"/></name><operator pos:line="35" pos:column="19">.<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="20">sin_family<pos:position pos:line="35" pos:column="30"/></name></name> <operator pos:line="35" pos:column="31">=<pos:position pos:line="35" pos:column="32"/></operator> <name><name pos:line="35" pos:column="33">he<pos:position pos:line="35" pos:column="35"/></name><operator pos:line="35" pos:column="35">-&gt;<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="37">h_addrtype<pos:position pos:line="35" pos:column="47"/></name></name></expr>;<pos:position pos:line="35" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="36" pos:column="17">sa<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">.<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="20">sin_port<pos:position pos:line="36" pos:column="28"/></name></name> <operator pos:line="36" pos:column="29">=<pos:position pos:line="36" pos:column="30"/></operator> <call><name pos:line="36" pos:column="31">htons<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><name pos:line="36" pos:column="37">nport<pos:position pos:line="36" pos:column="42"/></name></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">memcpy<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><operator pos:line="37" pos:column="24">&amp;<pos:position pos:line="37" pos:column="29"/></operator><name><name pos:line="37" pos:column="25">sa<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">.<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="28">sin_addr<pos:position pos:line="37" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="38">*<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="39">ap<pos:position pos:line="37" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="43">he<pos:position pos:line="37" pos:column="45"/></name><operator pos:line="37" pos:column="45">-&gt;<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="47">h_length<pos:position pos:line="37" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt>

		<expr_stmt><expr><name pos:line="39" pos:column="17">sockfd<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">=<pos:position pos:line="39" pos:column="25"/></operator> <call><name pos:line="39" pos:column="26">socket<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><name><name pos:line="39" pos:column="33">he<pos:position pos:line="39" pos:column="35"/></name><operator pos:line="39" pos:column="35">-&gt;<pos:position pos:line="39" pos:column="40"/></operator><name pos:line="39" pos:column="37">h_addrtype<pos:position pos:line="39" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="49">SOCK_STREAM<pos:position pos:line="39" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="62">0<pos:position pos:line="39" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="65"/></expr_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">(<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="22">sockfd<pos:position pos:line="40" pos:column="28"/></name> <operator pos:line="40" pos:column="29">&lt;<pos:position pos:line="40" pos:column="33"/></operator> <literal type="number" pos:line="40" pos:column="31">0<pos:position pos:line="40" pos:column="32"/></literal><operator pos:line="40" pos:column="32">)<pos:position pos:line="40" pos:column="33"/></operator> <operator pos:line="40" pos:column="34">||<pos:position pos:line="40" pos:column="36"/></operator>
		    <call><name pos:line="41" pos:column="21">connect<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">sockfd<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="37">(<pos:position pos:line="41" pos:column="38"/></operator>struct <name pos:line="41" pos:column="45">sockaddr<pos:position pos:line="41" pos:column="53"/></name> <operator pos:line="41" pos:column="54">*<pos:position pos:line="41" pos:column="55"/></operator><operator pos:line="41" pos:column="55">)<pos:position pos:line="41" pos:column="56"/></operator><operator pos:line="41" pos:column="56">&amp;<pos:position pos:line="41" pos:column="61"/></operator><name pos:line="41" pos:column="57">sa<pos:position pos:line="41" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="61">sizeof <name pos:line="41" pos:column="68">sa<pos:position pos:line="41" pos:column="70"/></name></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="71"/></argument_list></call> <operator pos:line="41" pos:column="72">&lt;<pos:position pos:line="41" pos:column="76"/></operator> <literal type="number" pos:line="41" pos:column="74">0<pos:position pos:line="41" pos:column="75"/></literal></expr>)<pos:position pos:line="41" pos:column="76"/></condition><then pos:line="41" pos:column="76"> <block pos:line="41" pos:column="77">{
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">strbuf_addf<pos:position pos:line="42" pos:column="36"/></name><argument_list pos:line="42" pos:column="36">(<argument><expr><operator pos:line="42" pos:column="37">&amp;<pos:position pos:line="42" pos:column="42"/></operator><name pos:line="42" pos:column="38">error_message<pos:position pos:line="42" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="53">"%s[%d: %s]: errno=%s\n"<pos:position pos:line="42" pos:column="77"/></literal></expr></argument>,
				<argument><expr><name pos:line="43" pos:column="33">host<pos:position pos:line="43" pos:column="37"/></name></expr></argument>,
				<argument><expr><name pos:line="44" pos:column="33">cnt<pos:position pos:line="44" pos:column="36"/></name></expr></argument>,
				<argument><expr><call><name pos:line="45" pos:column="33">inet_ntoa<pos:position pos:line="45" pos:column="42"/></name><argument_list pos:line="45" pos:column="42">(<argument><expr><operator pos:line="45" pos:column="43">*<pos:position pos:line="45" pos:column="44"/></operator><operator pos:line="45" pos:column="44">(<pos:position pos:line="45" pos:column="45"/></operator>struct <name pos:line="45" pos:column="52">in_addr<pos:position pos:line="45" pos:column="59"/></name> <operator pos:line="45" pos:column="60">*<pos:position pos:line="45" pos:column="61"/></operator><operator pos:line="45" pos:column="61">)<pos:position pos:line="45" pos:column="62"/></operator><operator pos:line="45" pos:column="62">&amp;<pos:position pos:line="45" pos:column="67"/></operator><name><name pos:line="45" pos:column="63">sa<pos:position pos:line="45" pos:column="65"/></name><operator pos:line="45" pos:column="65">.<pos:position pos:line="45" pos:column="66"/></operator><name pos:line="45" pos:column="66">sin_addr<pos:position pos:line="45" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="75"/></argument_list></call></expr></argument>,
				<argument><expr><call><name pos:line="46" pos:column="33">strerror<pos:position pos:line="46" pos:column="41"/></name><argument_list pos:line="46" pos:column="41">(<argument><expr><name pos:line="46" pos:column="42">errno<pos:position pos:line="46" pos:column="47"/></name></expr></argument>)<pos:position pos:line="46" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="50"/></expr_stmt>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><literal type="number" pos:line="47" pos:column="29">0<pos:position pos:line="47" pos:column="30"/></literal> <operator pos:line="47" pos:column="31">&lt;=<pos:position pos:line="47" pos:column="36"/></operator> <name pos:line="47" pos:column="34">sockfd<pos:position pos:line="47" pos:column="40"/></name></expr>)<pos:position pos:line="47" pos:column="41"/></condition><then pos:line="47" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="33">close<pos:position pos:line="48" pos:column="38"/></name><argument_list pos:line="48" pos:column="38">(<argument><expr><name pos:line="48" pos:column="39">sockfd<pos:position pos:line="48" pos:column="45"/></name></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="49" pos:column="25">sockfd<pos:position pos:line="49" pos:column="31"/></name> <operator pos:line="49" pos:column="32">=<pos:position pos:line="49" pos:column="33"/></operator> <operator pos:line="49" pos:column="34">-<pos:position pos:line="49" pos:column="35"/></operator><literal type="number" pos:line="49" pos:column="35">1<pos:position pos:line="49" pos:column="36"/></literal></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt>
			<continue pos:line="50" pos:column="25">continue;<pos:position pos:line="50" pos:column="34"/></continue>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">flags<pos:position pos:line="52" pos:column="26"/></name> <operator pos:line="52" pos:column="27">&amp;<pos:position pos:line="52" pos:column="32"/></operator> <name pos:line="52" pos:column="29">CONNECT_VERBOSE<pos:position pos:line="52" pos:column="44"/></name></expr>)<pos:position pos:line="52" pos:column="45"/></condition><then pos:line="52" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="25">fprintf<pos:position pos:line="53" pos:column="32"/></name><argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">stderr<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="41">"%s "<pos:position pos:line="53" pos:column="46"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="54" pos:column="33">inet_ntoa<pos:position pos:line="54" pos:column="42"/></name><argument_list pos:line="54" pos:column="42">(<argument><expr><operator pos:line="54" pos:column="43">*<pos:position pos:line="54" pos:column="44"/></operator><operator pos:line="54" pos:column="44">(<pos:position pos:line="54" pos:column="45"/></operator>struct <name pos:line="54" pos:column="52">in_addr<pos:position pos:line="54" pos:column="59"/></name> <operator pos:line="54" pos:column="60">*<pos:position pos:line="54" pos:column="61"/></operator><operator pos:line="54" pos:column="61">)<pos:position pos:line="54" pos:column="62"/></operator><operator pos:line="54" pos:column="62">&amp;<pos:position pos:line="54" pos:column="67"/></operator><name><name pos:line="54" pos:column="63">sa<pos:position pos:line="54" pos:column="65"/></name><operator pos:line="54" pos:column="65">.<pos:position pos:line="54" pos:column="66"/></operator><name pos:line="54" pos:column="66">sin_addr<pos:position pos:line="54" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="77"/></expr_stmt></block></then></if>
		<break pos:line="55" pos:column="17">break;<pos:position pos:line="55" pos:column="23"/></break>
	}<pos:position pos:line="56" pos:column="10"/></block></for>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">sockfd<pos:position pos:line="58" pos:column="19"/></name> <operator pos:line="58" pos:column="20">&lt;<pos:position pos:line="58" pos:column="24"/></operator> <literal type="number" pos:line="58" pos:column="22">0<pos:position pos:line="58" pos:column="23"/></literal></expr>)<pos:position pos:line="58" pos:column="24"/></condition><then pos:line="58" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">die<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><literal type="string" pos:line="59" pos:column="21">"unable to connect to %s:\n%s"<pos:position pos:line="59" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="53">host<pos:position pos:line="59" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="59">error_message<pos:position pos:line="59" pos:column="72"/></name><operator pos:line="59" pos:column="72">.<pos:position pos:line="59" pos:column="73"/></operator><name pos:line="59" pos:column="73">buf<pos:position pos:line="59" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="78"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="61" pos:column="9">enable_keepalive<pos:position pos:line="61" pos:column="25"/></name><argument_list pos:line="61" pos:column="25">(<argument><expr><name pos:line="61" pos:column="26">sockfd<pos:position pos:line="61" pos:column="32"/></name></expr></argument>)<pos:position pos:line="61" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="34"/></expr_stmt>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">flags<pos:position pos:line="63" pos:column="18"/></name> <operator pos:line="63" pos:column="19">&amp;<pos:position pos:line="63" pos:column="24"/></operator> <name pos:line="63" pos:column="21">CONNECT_VERBOSE<pos:position pos:line="63" pos:column="36"/></name></expr>)<pos:position pos:line="63" pos:column="37"/></condition><then pos:line="63" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="17">fprintf<pos:position pos:line="64" pos:column="24"/></name><argument_list pos:line="64" pos:column="24">(<argument><expr><name pos:line="64" pos:column="25">stderr<pos:position pos:line="64" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="33">"done.\n"<pos:position pos:line="64" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="44"/></expr_stmt></block></then></if>

	<return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">sockfd<pos:position pos:line="66" pos:column="22"/></name></expr>;<pos:position pos:line="66" pos:column="23"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
