<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4742_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">for_each_note_helper<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">notes_tree<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">t<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="55">struct<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">int_node<pos:position pos:line="1" pos:column="70"/></name></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">tree<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">unsigned<pos:position pos:line="2" pos:column="25"/></name> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">n<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">unsigned<pos:position pos:line="2" pos:column="42"/></name> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">fanout<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">int<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">flags<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="3" pos:column="17">each_note_fn<pos:position pos:line="3" pos:column="29"/></name></type> <name pos:line="3" pos:column="30">fn<pos:position pos:line="3" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="34">void<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">cb_data<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="48"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">int<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">i<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">void<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">p<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ret<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">leaf_node<pos:position pos:line="8" pos:column="25"/></name></name> <modifier pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></modifier></type><name pos:line="8" pos:column="27">l<pos:position pos:line="8" pos:column="28"/></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="9" pos:column="9">static<pos:position pos:line="9" pos:column="15"/></specifier> <type><name pos:line="9" pos:column="16">char<pos:position pos:line="9" pos:column="20"/></name></type> <name><name pos:line="9" pos:column="21">path<pos:position pos:line="9" pos:column="25"/></name><index pos:line="9" pos:column="25">[<expr><name pos:line="9" pos:column="26">FANOUT_PATH_MAX<pos:position pos:line="9" pos:column="41"/></name></expr>]<pos:position pos:line="9" pos:column="42"/></index></name></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">fanout<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <call><name pos:line="11" pos:column="18">determine_fanout<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">tree<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="41">n<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">fanout<pos:position pos:line="11" pos:column="50"/></name></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt>
	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">i<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>;<pos:position pos:line="12" pos:column="20"/></init> <condition><expr><name pos:line="12" pos:column="21">i<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">&lt;<pos:position pos:line="12" pos:column="27"/></operator> <literal type="number" pos:line="12" pos:column="25">16<pos:position pos:line="12" pos:column="27"/></literal></expr>;<pos:position pos:line="12" pos:column="28"/></condition> <incr><expr><name pos:line="12" pos:column="29">i<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">++<pos:position pos:line="12" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="33"/></control> <block pos:line="12" pos:column="34">{
<label><name pos:line="13" pos:column="1">redo<pos:position pos:line="13" pos:column="5"/></name>:<pos:position pos:line="13" pos:column="6"/></label>
		<expr_stmt><expr><name pos:line="14" pos:column="17">p<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <name><name pos:line="14" pos:column="21">tree<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">-&gt;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="27">a<pos:position pos:line="14" pos:column="28"/></name><index pos:line="14" pos:column="28">[<expr><name pos:line="14" pos:column="29">i<pos:position pos:line="14" pos:column="30"/></name></expr>]<pos:position pos:line="14" pos:column="31"/></index></name></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
		<switch pos:line="15" pos:column="17">switch <condition pos:line="15" pos:column="24">(<expr><call><name pos:line="15" pos:column="25">GET_PTR_TYPE<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">p<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="41"/></condition> <block pos:line="15" pos:column="42">{
		<case pos:line="16" pos:column="17">case <expr><name pos:line="16" pos:column="22">PTR_TYPE_INTERNAL<pos:position pos:line="16" pos:column="39"/></name></expr>:<pos:position pos:line="16" pos:column="40"/></case>
			<comment type="block" pos:line="17" pos:column="25">/* recurse into int_node */</comment>
			<expr_stmt><expr><name pos:line="18" pos:column="25">ret<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">=<pos:position pos:line="18" pos:column="30"/></operator> <call><name pos:line="18" pos:column="31">for_each_note_helper<pos:position pos:line="18" pos:column="51"/></name><argument_list pos:line="18" pos:column="51">(<argument><expr><name pos:line="18" pos:column="52">t<pos:position pos:line="18" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="55">CLR_PTR_TYPE<pos:position pos:line="18" pos:column="67"/></name><argument_list pos:line="18" pos:column="67">(<argument><expr><name pos:line="18" pos:column="68">p<pos:position pos:line="18" pos:column="69"/></name></expr></argument>)<pos:position pos:line="18" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="18" pos:column="72">n<pos:position pos:line="18" pos:column="73"/></name> <operator pos:line="18" pos:column="74">+<pos:position pos:line="18" pos:column="75"/></operator> <literal type="number" pos:line="18" pos:column="76">1<pos:position pos:line="18" pos:column="77"/></literal></expr></argument>,
				<argument><expr><name pos:line="19" pos:column="33">fanout<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="41">flags<pos:position pos:line="19" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="48">fn<pos:position pos:line="19" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="52">cb_data<pos:position pos:line="19" pos:column="59"/></name></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="61"/></expr_stmt>
			<break pos:line="20" pos:column="25">break;<pos:position pos:line="20" pos:column="31"/></break>
		<case pos:line="21" pos:column="17">case <expr><name pos:line="21" pos:column="22">PTR_TYPE_SUBTREE<pos:position pos:line="21" pos:column="38"/></name></expr>:<pos:position pos:line="21" pos:column="39"/></case>
			<expr_stmt><expr><name pos:line="22" pos:column="25">l<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <operator pos:line="22" pos:column="29">(<pos:position pos:line="22" pos:column="30"/></operator>struct <name pos:line="22" pos:column="37">leaf_node<pos:position pos:line="22" pos:column="46"/></name> <operator pos:line="22" pos:column="47">*<pos:position pos:line="22" pos:column="48"/></operator><operator pos:line="22" pos:column="48">)<pos:position pos:line="22" pos:column="49"/></operator> <call><name pos:line="22" pos:column="50">CLR_PTR_TYPE<pos:position pos:line="22" pos:column="62"/></name><argument_list pos:line="22" pos:column="62">(<argument><expr><name pos:line="22" pos:column="63">p<pos:position pos:line="22" pos:column="64"/></name></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
			<comment type="block" pos:line="23" pos:column="25">/*
			 * Subtree entries in the note tree represent parts of
			 * the note tree that have not yet been explored. There
			 * is a direct relationship between subtree entries at
			 * level 'n' in the tree, and the 'fanout' variable:
			 * Subtree entries at level 'n &lt;= 2 * fanout' should be
			 * preserved, since they correspond exactly to a fanout
			 * directory in the on-disk structure. However, subtree
			 * entries at level 'n &gt; 2 * fanout' should NOT be
			 * preserved, but rather consolidated into the above
			 * notes tree level. We achieve this by unconditionally
			 * unpacking subtree entries that exist below the
			 * threshold level at 'n = 2 * fanout'.
			 */</comment>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><name pos:line="37" pos:column="29">n<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">&lt;=<pos:position pos:line="37" pos:column="36"/></operator> <literal type="number" pos:line="37" pos:column="34">2<pos:position pos:line="37" pos:column="35"/></literal> <operator pos:line="37" pos:column="36">*<pos:position pos:line="37" pos:column="37"/></operator> <name pos:line="37" pos:column="38">fanout<pos:position pos:line="37" pos:column="44"/></name> <operator pos:line="37" pos:column="45">&amp;&amp;<pos:position pos:line="37" pos:column="55"/></operator>
			    <name pos:line="38" pos:column="29">flags<pos:position pos:line="38" pos:column="34"/></name> <operator pos:line="38" pos:column="35">&amp;<pos:position pos:line="38" pos:column="40"/></operator> <name pos:line="38" pos:column="37">FOR_EACH_NOTE_YIELD_SUBTREES<pos:position pos:line="38" pos:column="65"/></name></expr>)<pos:position pos:line="38" pos:column="66"/></condition><then pos:line="38" pos:column="66"> <block pos:line="38" pos:column="67">{
				<comment type="block" pos:line="39" pos:column="33">/* invoke callback with subtree */</comment>
				<decl_stmt><decl><type><name pos:line="40" pos:column="33">unsigned<pos:position pos:line="40" pos:column="41"/></name> <name pos:line="40" pos:column="42">int<pos:position pos:line="40" pos:column="45"/></name></type> <name pos:line="40" pos:column="46">path_len<pos:position pos:line="40" pos:column="54"/></name> <init pos:line="40" pos:column="55">=
					<expr><name><name pos:line="41" pos:column="41">l<pos:position pos:line="41" pos:column="42"/></name><operator pos:line="41" pos:column="42">-&gt;<pos:position pos:line="41" pos:column="47"/></operator><name pos:line="41" pos:column="44">key_oid<pos:position pos:line="41" pos:column="51"/></name><operator pos:line="41" pos:column="51">.<pos:position pos:line="41" pos:column="52"/></operator><name pos:line="41" pos:column="52">hash<pos:position pos:line="41" pos:column="56"/></name><index pos:line="41" pos:column="56">[<expr><name pos:line="41" pos:column="57">KEY_INDEX<pos:position pos:line="41" pos:column="66"/></name></expr>]<pos:position pos:line="41" pos:column="67"/></index></name> <operator pos:line="41" pos:column="68">*<pos:position pos:line="41" pos:column="69"/></operator> <literal type="number" pos:line="41" pos:column="70">2<pos:position pos:line="41" pos:column="71"/></literal> <operator pos:line="41" pos:column="72">+<pos:position pos:line="41" pos:column="73"/></operator> <name pos:line="41" pos:column="74">fanout<pos:position pos:line="41" pos:column="80"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="81"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="42" pos:column="33">assert<pos:position pos:line="42" pos:column="39"/></name><argument_list pos:line="42" pos:column="39">(<argument><expr><name pos:line="42" pos:column="40">path_len<pos:position pos:line="42" pos:column="48"/></name> <operator pos:line="42" pos:column="49">&lt;<pos:position pos:line="42" pos:column="53"/></operator> <name pos:line="42" pos:column="51">FANOUT_PATH_MAX<pos:position pos:line="42" pos:column="66"/></name> <operator pos:line="42" pos:column="67">-<pos:position pos:line="42" pos:column="68"/></operator> <literal type="number" pos:line="42" pos:column="69">1<pos:position pos:line="42" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="72"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="43" pos:column="33">construct_path_with_fanout<pos:position pos:line="43" pos:column="59"/></name><argument_list pos:line="43" pos:column="59">(<argument><expr><name><name pos:line="43" pos:column="60">l<pos:position pos:line="43" pos:column="61"/></name><operator pos:line="43" pos:column="61">-&gt;<pos:position pos:line="43" pos:column="66"/></operator><name pos:line="43" pos:column="63">key_oid<pos:position pos:line="43" pos:column="70"/></name><operator pos:line="43" pos:column="70">.<pos:position pos:line="43" pos:column="71"/></operator><name pos:line="43" pos:column="71">hash<pos:position pos:line="43" pos:column="75"/></name></name></expr></argument>,
							   <argument><expr><name pos:line="44" pos:column="60">fanout<pos:position pos:line="44" pos:column="66"/></name></expr></argument>,
							   <argument><expr><name pos:line="45" pos:column="60">path<pos:position pos:line="45" pos:column="64"/></name></expr></argument>)<pos:position pos:line="45" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="66"/></expr_stmt>
				<comment type="block" pos:line="46" pos:column="33">/* Create trailing slash, if needed */</comment>
				<if pos:line="47" pos:column="33">if <condition pos:line="47" pos:column="36">(<expr><name><name pos:line="47" pos:column="37">path<pos:position pos:line="47" pos:column="41"/></name><index pos:line="47" pos:column="41">[<expr><name pos:line="47" pos:column="42">path_len<pos:position pos:line="47" pos:column="50"/></name> <operator pos:line="47" pos:column="51">-<pos:position pos:line="47" pos:column="52"/></operator> <literal type="number" pos:line="47" pos:column="53">1<pos:position pos:line="47" pos:column="54"/></literal></expr>]<pos:position pos:line="47" pos:column="55"/></index></name> <operator pos:line="47" pos:column="56">!=<pos:position pos:line="47" pos:column="58"/></operator> <literal type="char" pos:line="47" pos:column="59">'/'<pos:position pos:line="47" pos:column="62"/></literal></expr>)<pos:position pos:line="47" pos:column="63"/></condition><then pos:line="47" pos:column="63">
					<block type="pseudo"><expr_stmt><expr><name><name pos:line="48" pos:column="41">path<pos:position pos:line="48" pos:column="45"/></name><index pos:line="48" pos:column="45">[<expr><name pos:line="48" pos:column="46">path_len<pos:position pos:line="48" pos:column="54"/></name><operator pos:line="48" pos:column="54">++<pos:position pos:line="48" pos:column="56"/></operator></expr>]<pos:position pos:line="48" pos:column="57"/></index></name> <operator pos:line="48" pos:column="58">=<pos:position pos:line="48" pos:column="59"/></operator> <literal type="char" pos:line="48" pos:column="60">'/'<pos:position pos:line="48" pos:column="63"/></literal></expr>;<pos:position pos:line="48" pos:column="64"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name><name pos:line="49" pos:column="33">path<pos:position pos:line="49" pos:column="37"/></name><index pos:line="49" pos:column="37">[<expr><name pos:line="49" pos:column="38">path_len<pos:position pos:line="49" pos:column="46"/></name></expr>]<pos:position pos:line="49" pos:column="47"/></index></name> <operator pos:line="49" pos:column="48">=<pos:position pos:line="49" pos:column="49"/></operator> <literal type="char" pos:line="49" pos:column="50">'\0'<pos:position pos:line="49" pos:column="54"/></literal></expr>;<pos:position pos:line="49" pos:column="55"/></expr_stmt>
				<expr_stmt><expr><name pos:line="50" pos:column="33">ret<pos:position pos:line="50" pos:column="36"/></name> <operator pos:line="50" pos:column="37">=<pos:position pos:line="50" pos:column="38"/></operator> <call><name pos:line="50" pos:column="39">fn<pos:position pos:line="50" pos:column="41"/></name><argument_list pos:line="50" pos:column="41">(<argument><expr><operator pos:line="50" pos:column="42">&amp;<pos:position pos:line="50" pos:column="47"/></operator><name><name pos:line="50" pos:column="43">l<pos:position pos:line="50" pos:column="44"/></name><operator pos:line="50" pos:column="44">-&gt;<pos:position pos:line="50" pos:column="49"/></operator><name pos:line="50" pos:column="46">key_oid<pos:position pos:line="50" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="55">&amp;<pos:position pos:line="50" pos:column="60"/></operator><name><name pos:line="50" pos:column="56">l<pos:position pos:line="50" pos:column="57"/></name><operator pos:line="50" pos:column="57">-&gt;<pos:position pos:line="50" pos:column="62"/></operator><name pos:line="50" pos:column="59">val_oid<pos:position pos:line="50" pos:column="66"/></name></name></expr></argument>,
					 <argument><expr><name pos:line="51" pos:column="42">path<pos:position pos:line="51" pos:column="46"/></name></expr></argument>,
					 <argument><expr><name pos:line="52" pos:column="42">cb_data<pos:position pos:line="52" pos:column="49"/></name></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="51"/></expr_stmt>
			}<pos:position pos:line="53" pos:column="26"/></block></then></if>
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><name pos:line="54" pos:column="29">n<pos:position pos:line="54" pos:column="30"/></name> <operator pos:line="54" pos:column="31">&gt;<pos:position pos:line="54" pos:column="35"/></operator> <name pos:line="54" pos:column="33">fanout<pos:position pos:line="54" pos:column="39"/></name> <operator pos:line="54" pos:column="40">*<pos:position pos:line="54" pos:column="41"/></operator> <literal type="number" pos:line="54" pos:column="42">2<pos:position pos:line="54" pos:column="43"/></literal> <operator pos:line="54" pos:column="44">||<pos:position pos:line="54" pos:column="46"/></operator>
			    <operator pos:line="55" pos:column="29">!<pos:position pos:line="55" pos:column="30"/></operator><operator pos:line="55" pos:column="30">(<pos:position pos:line="55" pos:column="31"/></operator><name pos:line="55" pos:column="31">flags<pos:position pos:line="55" pos:column="36"/></name> <operator pos:line="55" pos:column="37">&amp;<pos:position pos:line="55" pos:column="42"/></operator> <name pos:line="55" pos:column="39">FOR_EACH_NOTE_DONT_UNPACK_SUBTREES<pos:position pos:line="55" pos:column="73"/></name><operator pos:line="55" pos:column="73">)<pos:position pos:line="55" pos:column="74"/></operator></expr>)<pos:position pos:line="55" pos:column="75"/></condition><then pos:line="55" pos:column="75"> <block pos:line="55" pos:column="76">{
				<comment type="block" pos:line="56" pos:column="33">/* unpack subtree and resume traversal */</comment>
				<expr_stmt><expr><name><name pos:line="57" pos:column="33">tree<pos:position pos:line="57" pos:column="37"/></name><operator pos:line="57" pos:column="37">-&gt;<pos:position pos:line="57" pos:column="42"/></operator><name pos:line="57" pos:column="39">a<pos:position pos:line="57" pos:column="40"/></name><index pos:line="57" pos:column="40">[<expr><name pos:line="57" pos:column="41">i<pos:position pos:line="57" pos:column="42"/></name></expr>]<pos:position pos:line="57" pos:column="43"/></index></name> <operator pos:line="57" pos:column="44">=<pos:position pos:line="57" pos:column="45"/></operator> <name pos:line="57" pos:column="46">NULL<pos:position pos:line="57" pos:column="50"/></name></expr>;<pos:position pos:line="57" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="58" pos:column="33">load_subtree<pos:position pos:line="58" pos:column="45"/></name><argument_list pos:line="58" pos:column="45">(<argument><expr><name pos:line="58" pos:column="46">t<pos:position pos:line="58" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="49">l<pos:position pos:line="58" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="52">tree<pos:position pos:line="58" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="58">n<pos:position pos:line="58" pos:column="59"/></name></expr></argument>)<pos:position pos:line="58" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="61"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="59" pos:column="33">free<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><name pos:line="59" pos:column="38">l<pos:position pos:line="59" pos:column="39"/></name></expr></argument>)<pos:position pos:line="59" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="41"/></expr_stmt>
				<goto pos:line="60" pos:column="33">goto <name pos:line="60" pos:column="38">redo<pos:position pos:line="60" pos:column="42"/></name>;<pos:position pos:line="60" pos:column="43"/></goto>
			}<pos:position pos:line="61" pos:column="26"/></block></then></if>
			<break pos:line="62" pos:column="25">break;<pos:position pos:line="62" pos:column="31"/></break>
		<case pos:line="63" pos:column="17">case <expr><name pos:line="63" pos:column="22">PTR_TYPE_NOTE<pos:position pos:line="63" pos:column="35"/></name></expr>:<pos:position pos:line="63" pos:column="36"/></case>
			<expr_stmt><expr><name pos:line="64" pos:column="25">l<pos:position pos:line="64" pos:column="26"/></name> <operator pos:line="64" pos:column="27">=<pos:position pos:line="64" pos:column="28"/></operator> <operator pos:line="64" pos:column="29">(<pos:position pos:line="64" pos:column="30"/></operator>struct <name pos:line="64" pos:column="37">leaf_node<pos:position pos:line="64" pos:column="46"/></name> <operator pos:line="64" pos:column="47">*<pos:position pos:line="64" pos:column="48"/></operator><operator pos:line="64" pos:column="48">)<pos:position pos:line="64" pos:column="49"/></operator> <call><name pos:line="64" pos:column="50">CLR_PTR_TYPE<pos:position pos:line="64" pos:column="62"/></name><argument_list pos:line="64" pos:column="62">(<argument><expr><name pos:line="64" pos:column="63">p<pos:position pos:line="64" pos:column="64"/></name></expr></argument>)<pos:position pos:line="64" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="65" pos:column="25">construct_path_with_fanout<pos:position pos:line="65" pos:column="51"/></name><argument_list pos:line="65" pos:column="51">(<argument><expr><name><name pos:line="65" pos:column="52">l<pos:position pos:line="65" pos:column="53"/></name><operator pos:line="65" pos:column="53">-&gt;<pos:position pos:line="65" pos:column="58"/></operator><name pos:line="65" pos:column="55">key_oid<pos:position pos:line="65" pos:column="62"/></name><operator pos:line="65" pos:column="62">.<pos:position pos:line="65" pos:column="63"/></operator><name pos:line="65" pos:column="63">hash<pos:position pos:line="65" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="69">fanout<pos:position pos:line="65" pos:column="75"/></name></expr></argument>,
						   <argument><expr><name pos:line="66" pos:column="52">path<pos:position pos:line="66" pos:column="56"/></name></expr></argument>)<pos:position pos:line="66" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name pos:line="67" pos:column="25">ret<pos:position pos:line="67" pos:column="28"/></name> <operator pos:line="67" pos:column="29">=<pos:position pos:line="67" pos:column="30"/></operator> <call><name pos:line="67" pos:column="31">fn<pos:position pos:line="67" pos:column="33"/></name><argument_list pos:line="67" pos:column="33">(<argument><expr><operator pos:line="67" pos:column="34">&amp;<pos:position pos:line="67" pos:column="39"/></operator><name><name pos:line="67" pos:column="35">l<pos:position pos:line="67" pos:column="36"/></name><operator pos:line="67" pos:column="36">-&gt;<pos:position pos:line="67" pos:column="41"/></operator><name pos:line="67" pos:column="38">key_oid<pos:position pos:line="67" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="47">&amp;<pos:position pos:line="67" pos:column="52"/></operator><name><name pos:line="67" pos:column="48">l<pos:position pos:line="67" pos:column="49"/></name><operator pos:line="67" pos:column="49">-&gt;<pos:position pos:line="67" pos:column="54"/></operator><name pos:line="67" pos:column="51">val_oid<pos:position pos:line="67" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="60">path<pos:position pos:line="67" pos:column="64"/></name></expr></argument>,
				 <argument><expr><name pos:line="68" pos:column="34">cb_data<pos:position pos:line="68" pos:column="41"/></name></expr></argument>)<pos:position pos:line="68" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="43"/></expr_stmt>
			<break pos:line="69" pos:column="25">break;<pos:position pos:line="69" pos:column="31"/></break>
		}<pos:position pos:line="70" pos:column="18"/></block></switch>
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name pos:line="71" pos:column="21">ret<pos:position pos:line="71" pos:column="24"/></name></expr>)<pos:position pos:line="71" pos:column="25"/></condition><then pos:line="71" pos:column="25">
			<block type="pseudo"><return pos:line="72" pos:column="25">return <expr><name pos:line="72" pos:column="32">ret<pos:position pos:line="72" pos:column="35"/></name></expr>;<pos:position pos:line="72" pos:column="36"/></return></block></then></if>
	}<pos:position pos:line="73" pos:column="10"/></block></for>
	<return pos:line="74" pos:column="9">return <expr><literal type="number" pos:line="74" pos:column="16">0<pos:position pos:line="74" pos:column="17"/></literal></expr>;<pos:position pos:line="74" pos:column="18"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
