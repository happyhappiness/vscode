<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1241_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">builtin_checkdiff<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">name_a<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">name_b<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">attr_path<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="3" pos:column="31">struct<pos:position pos:line="3" pos:column="37"/></name> <name pos:line="3" pos:column="38">diff_filespec<pos:position pos:line="3" pos:column="51"/></name></name> <modifier pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></modifier></type><name pos:line="3" pos:column="53">one<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="4" pos:column="31">struct<pos:position pos:line="4" pos:column="37"/></name> <name pos:line="4" pos:column="38">diff_filespec<pos:position pos:line="4" pos:column="51"/></name></name> <modifier pos:line="4" pos:column="52">*<pos:position pos:line="4" pos:column="53"/></modifier></type><name pos:line="4" pos:column="53">two<pos:position pos:line="4" pos:column="56"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="5" pos:column="31">struct<pos:position pos:line="5" pos:column="37"/></name> <name pos:line="5" pos:column="38">diff_options<pos:position pos:line="5" pos:column="50"/></name></name> <modifier pos:line="5" pos:column="51">*<pos:position pos:line="5" pos:column="52"/></modifier></type><name pos:line="5" pos:column="52">o<pos:position pos:line="5" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="54"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">mmfile_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">mf1<pos:position pos:line="7" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="23">mf2<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">checkdiff_t<pos:position pos:line="8" pos:column="27"/></name></name></type> <name pos:line="8" pos:column="28">data<pos:position pos:line="8" pos:column="32"/></name></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">two<pos:position pos:line="10" pos:column="17"/></name></expr>)<pos:position pos:line="10" pos:column="18"/></condition><then pos:line="10" pos:column="18">
		<block type="pseudo"><return pos:line="11" pos:column="17">return;<pos:position pos:line="11" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">memset<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><operator pos:line="13" pos:column="16">&amp;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="17">data<pos:position pos:line="13" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="23">0<pos:position pos:line="13" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="26">sizeof<argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">data<pos:position pos:line="13" pos:column="37"/></name></expr></argument>)<pos:position pos:line="13" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">data<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">.<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">filename<pos:position pos:line="14" pos:column="22"/></name></name> <operator pos:line="14" pos:column="23">=<pos:position pos:line="14" pos:column="24"/></operator> <ternary><condition><expr><name pos:line="14" pos:column="25">name_b<pos:position pos:line="14" pos:column="31"/></name></expr> ?<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33"> <expr><name pos:line="14" pos:column="34">name_b<pos:position pos:line="14" pos:column="40"/></name></expr> <pos:position pos:line="14" pos:column="41"/></then><else pos:line="14" pos:column="41">: <expr><name pos:line="14" pos:column="43">name_a<pos:position pos:line="14" pos:column="49"/></name></expr></else></ternary></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">data<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">.<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">lineno<pos:position pos:line="15" pos:column="20"/></name></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <literal type="number" pos:line="15" pos:column="23">0<pos:position pos:line="15" pos:column="24"/></literal></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">data<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">.<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">o<pos:position pos:line="16" pos:column="15"/></name></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="18">o<pos:position pos:line="16" pos:column="19"/></name></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">data<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">.<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">ws_rule<pos:position pos:line="17" pos:column="21"/></name></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <call><name pos:line="17" pos:column="24">whitespace_rule<pos:position pos:line="17" pos:column="39"/></name><argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">attr_path<pos:position pos:line="17" pos:column="49"/></name></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">data<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">.<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">conflict_marker_size<pos:position pos:line="18" pos:column="34"/></name></name> <operator pos:line="18" pos:column="35">=<pos:position pos:line="18" pos:column="36"/></operator> <call><name pos:line="18" pos:column="37">ll_merge_marker_size<pos:position pos:line="18" pos:column="57"/></name><argument_list pos:line="18" pos:column="57">(<argument><expr><name pos:line="18" pos:column="58">attr_path<pos:position pos:line="18" pos:column="67"/></name></expr></argument>)<pos:position pos:line="18" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="69"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">fill_mmfile<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><operator pos:line="20" pos:column="25">&amp;<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="26">mf1<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="31">one<pos:position pos:line="20" pos:column="34"/></name></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call> <operator pos:line="20" pos:column="36">&lt;<pos:position pos:line="20" pos:column="40"/></operator> <literal type="number" pos:line="20" pos:column="38">0<pos:position pos:line="20" pos:column="39"/></literal> <operator pos:line="20" pos:column="40">||<pos:position pos:line="20" pos:column="42"/></operator> <call><name pos:line="20" pos:column="43">fill_mmfile<pos:position pos:line="20" pos:column="54"/></name><argument_list pos:line="20" pos:column="54">(<argument><expr><operator pos:line="20" pos:column="55">&amp;<pos:position pos:line="20" pos:column="60"/></operator><name pos:line="20" pos:column="56">mf2<pos:position pos:line="20" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="61">two<pos:position pos:line="20" pos:column="64"/></name></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call> <operator pos:line="20" pos:column="66">&lt;<pos:position pos:line="20" pos:column="70"/></operator> <literal type="number" pos:line="20" pos:column="68">0<pos:position pos:line="20" pos:column="69"/></literal></expr>)<pos:position pos:line="20" pos:column="70"/></condition><then pos:line="20" pos:column="70">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">die<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><literal type="string" pos:line="21" pos:column="21">"unable to read files to diff"<pos:position pos:line="21" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="23" pos:column="9">/*
	 * All the other codepaths check both sides, but not checking
	 * the "old" side here is deliberate.  We are checking the newly
	 * introduced changes, and as long as the "new" side is text, we
	 * can and should check what it introduces.
	 */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">diff_filespec_is_binary<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">(<argument><expr><name pos:line="29" pos:column="37">two<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42">
		<block type="pseudo"><goto pos:line="30" pos:column="17">goto <name pos:line="30" pos:column="22">free_and_return<pos:position pos:line="30" pos:column="37"/></name>;<pos:position pos:line="30" pos:column="38"/></goto></block></then>
	<else pos:line="31" pos:column="9">else <block pos:line="31" pos:column="14">{
		<comment type="block" pos:line="32" pos:column="17">/* Crazy xdl interfaces.. */</comment>
		<decl_stmt><decl><type><name pos:line="33" pos:column="17">xpparam_t<pos:position pos:line="33" pos:column="26"/></name></type> <name pos:line="33" pos:column="27">xpp<pos:position pos:line="33" pos:column="30"/></name></decl>;<pos:position pos:line="33" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="34" pos:column="17">xdemitconf_t<pos:position pos:line="34" pos:column="29"/></name></type> <name pos:line="34" pos:column="30">xecfg<pos:position pos:line="34" pos:column="35"/></name></decl>;<pos:position pos:line="34" pos:column="36"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="36" pos:column="17">memset<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><operator pos:line="36" pos:column="24">&amp;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="25">xpp<pos:position pos:line="36" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="30">0<pos:position pos:line="36" pos:column="31"/></literal></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="33">sizeof<argument_list pos:line="36" pos:column="39">(<argument><expr><name pos:line="36" pos:column="40">xpp<pos:position pos:line="36" pos:column="43"/></name></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">memset<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><operator pos:line="37" pos:column="24">&amp;<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="25">xecfg<pos:position pos:line="37" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="32">0<pos:position pos:line="37" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="35">sizeof<argument_list pos:line="37" pos:column="41">(<argument><expr><name pos:line="37" pos:column="42">xecfg<pos:position pos:line="37" pos:column="47"/></name></expr></argument>)<pos:position pos:line="37" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="38" pos:column="17">xecfg<pos:position pos:line="38" pos:column="22"/></name><operator pos:line="38" pos:column="22">.<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">ctxlen<pos:position pos:line="38" pos:column="29"/></name></name> <operator pos:line="38" pos:column="30">=<pos:position pos:line="38" pos:column="31"/></operator> <literal type="number" pos:line="38" pos:column="32">1<pos:position pos:line="38" pos:column="33"/></literal></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt> <comment type="block" pos:line="38" pos:column="35">/* at least one context line */</comment>
		<expr_stmt><expr><name><name pos:line="39" pos:column="17">xpp<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">.<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="21">flags<pos:position pos:line="39" pos:column="26"/></name></name> <operator pos:line="39" pos:column="27">=<pos:position pos:line="39" pos:column="28"/></operator> <literal type="number" pos:line="39" pos:column="29">0<pos:position pos:line="39" pos:column="30"/></literal></expr>;<pos:position pos:line="39" pos:column="31"/></expr_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><call><name pos:line="40" pos:column="21">xdi_diff_outf<pos:position pos:line="40" pos:column="34"/></name><argument_list pos:line="40" pos:column="34">(<argument><expr><operator pos:line="40" pos:column="35">&amp;<pos:position pos:line="40" pos:column="40"/></operator><name pos:line="40" pos:column="36">mf1<pos:position pos:line="40" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="41">&amp;<pos:position pos:line="40" pos:column="46"/></operator><name pos:line="40" pos:column="42">mf2<pos:position pos:line="40" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="47">checkdiff_consume<pos:position pos:line="40" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="66">&amp;<pos:position pos:line="40" pos:column="71"/></operator><name pos:line="40" pos:column="67">data<pos:position pos:line="40" pos:column="71"/></name></expr></argument>,
				  <argument><expr><operator pos:line="41" pos:column="35">&amp;<pos:position pos:line="41" pos:column="40"/></operator><name pos:line="41" pos:column="36">xpp<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="41">&amp;<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="42">xecfg<pos:position pos:line="41" pos:column="47"/></name></expr></argument>)<pos:position pos:line="41" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="49"/></condition><then pos:line="41" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">die<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><literal type="string" pos:line="42" pos:column="29">"unable to generate checkdiff for %s"<pos:position pos:line="42" pos:column="66"/></literal></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="68">one<pos:position pos:line="42" pos:column="71"/></name><operator pos:line="42" pos:column="71">-&gt;<pos:position pos:line="42" pos:column="76"/></operator><name pos:line="42" pos:column="73">path<pos:position pos:line="42" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="79"/></expr_stmt></block></then></if>

		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name><name pos:line="44" pos:column="21">data<pos:position pos:line="44" pos:column="25"/></name><operator pos:line="44" pos:column="25">.<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="26">ws_rule<pos:position pos:line="44" pos:column="33"/></name></name> <operator pos:line="44" pos:column="34">&amp;<pos:position pos:line="44" pos:column="39"/></operator> <name pos:line="44" pos:column="36">WS_BLANK_AT_EOF<pos:position pos:line="44" pos:column="51"/></name></expr>)<pos:position pos:line="44" pos:column="52"/></condition><then pos:line="44" pos:column="52"> <block pos:line="44" pos:column="53">{
			<decl_stmt><decl><type><name><name pos:line="45" pos:column="25">struct<pos:position pos:line="45" pos:column="31"/></name> <name pos:line="45" pos:column="32">emit_callback<pos:position pos:line="45" pos:column="45"/></name></name></type> <name pos:line="45" pos:column="46">ecbdata<pos:position pos:line="45" pos:column="53"/></name></decl>;<pos:position pos:line="45" pos:column="54"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="46" pos:column="25">int<pos:position pos:line="46" pos:column="28"/></name></type> <name pos:line="46" pos:column="29">blank_at_eof<pos:position pos:line="46" pos:column="41"/></name></decl>;<pos:position pos:line="46" pos:column="42"/></decl_stmt>

			<expr_stmt><expr><name><name pos:line="48" pos:column="25">ecbdata<pos:position pos:line="48" pos:column="32"/></name><operator pos:line="48" pos:column="32">.<pos:position pos:line="48" pos:column="33"/></operator><name pos:line="48" pos:column="33">ws_rule<pos:position pos:line="48" pos:column="40"/></name></name> <operator pos:line="48" pos:column="41">=<pos:position pos:line="48" pos:column="42"/></operator> <name><name pos:line="48" pos:column="43">data<pos:position pos:line="48" pos:column="47"/></name><operator pos:line="48" pos:column="47">.<pos:position pos:line="48" pos:column="48"/></operator><name pos:line="48" pos:column="48">ws_rule<pos:position pos:line="48" pos:column="55"/></name></name></expr>;<pos:position pos:line="48" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">check_blank_at_eof<pos:position pos:line="49" pos:column="43"/></name><argument_list pos:line="49" pos:column="43">(<argument><expr><operator pos:line="49" pos:column="44">&amp;<pos:position pos:line="49" pos:column="49"/></operator><name pos:line="49" pos:column="45">mf1<pos:position pos:line="49" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="50">&amp;<pos:position pos:line="49" pos:column="55"/></operator><name pos:line="49" pos:column="51">mf2<pos:position pos:line="49" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="56">&amp;<pos:position pos:line="49" pos:column="61"/></operator><name pos:line="49" pos:column="57">ecbdata<pos:position pos:line="49" pos:column="64"/></name></expr></argument>)<pos:position pos:line="49" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><name pos:line="50" pos:column="25">blank_at_eof<pos:position pos:line="50" pos:column="37"/></name> <operator pos:line="50" pos:column="38">=<pos:position pos:line="50" pos:column="39"/></operator> <name><name pos:line="50" pos:column="40">ecbdata<pos:position pos:line="50" pos:column="47"/></name><operator pos:line="50" pos:column="47">.<pos:position pos:line="50" pos:column="48"/></operator><name pos:line="50" pos:column="48">blank_at_eof_in_postimage<pos:position pos:line="50" pos:column="73"/></name></name></expr>;<pos:position pos:line="50" pos:column="74"/></expr_stmt>

			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><name pos:line="52" pos:column="29">blank_at_eof<pos:position pos:line="52" pos:column="41"/></name></expr>)<pos:position pos:line="52" pos:column="42"/></condition><then pos:line="52" pos:column="42"> <block pos:line="52" pos:column="43">{
				<decl_stmt><decl><specifier pos:line="53" pos:column="33">static<pos:position pos:line="53" pos:column="39"/></specifier> <type><name pos:line="53" pos:column="40">char<pos:position pos:line="53" pos:column="44"/></name> <modifier pos:line="53" pos:column="45">*<pos:position pos:line="53" pos:column="46"/></modifier></type><name pos:line="53" pos:column="46">err<pos:position pos:line="53" pos:column="49"/></name></decl>;<pos:position pos:line="53" pos:column="50"/></decl_stmt>
				<if pos:line="54" pos:column="33">if <condition pos:line="54" pos:column="36">(<expr><operator pos:line="54" pos:column="37">!<pos:position pos:line="54" pos:column="38"/></operator><name pos:line="54" pos:column="38">err<pos:position pos:line="54" pos:column="41"/></name></expr>)<pos:position pos:line="54" pos:column="42"/></condition><then pos:line="54" pos:column="42">
					<block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="41">err<pos:position pos:line="55" pos:column="44"/></name> <operator pos:line="55" pos:column="45">=<pos:position pos:line="55" pos:column="46"/></operator> <call><name pos:line="55" pos:column="47">whitespace_error_string<pos:position pos:line="55" pos:column="70"/></name><argument_list pos:line="55" pos:column="70">(<argument><expr><name pos:line="55" pos:column="71">WS_BLANK_AT_EOF<pos:position pos:line="55" pos:column="86"/></name></expr></argument>)<pos:position pos:line="55" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="88"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="56" pos:column="33">fprintf<pos:position pos:line="56" pos:column="40"/></name><argument_list pos:line="56" pos:column="40">(<argument><expr><name><name pos:line="56" pos:column="41">o<pos:position pos:line="56" pos:column="42"/></name><operator pos:line="56" pos:column="42">-&gt;<pos:position pos:line="56" pos:column="47"/></operator><name pos:line="56" pos:column="44">file<pos:position pos:line="56" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="50">"%s:%d: %s.\n"<pos:position pos:line="56" pos:column="64"/></literal></expr></argument>,
					<argument><expr><name><name pos:line="57" pos:column="41">data<pos:position pos:line="57" pos:column="45"/></name><operator pos:line="57" pos:column="45">.<pos:position pos:line="57" pos:column="46"/></operator><name pos:line="57" pos:column="46">filename<pos:position pos:line="57" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="56">blank_at_eof<pos:position pos:line="57" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="70">err<pos:position pos:line="57" pos:column="73"/></name></expr></argument>)<pos:position pos:line="57" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="58" pos:column="33">data<pos:position pos:line="58" pos:column="37"/></name><operator pos:line="58" pos:column="37">.<pos:position pos:line="58" pos:column="38"/></operator><name pos:line="58" pos:column="38">status<pos:position pos:line="58" pos:column="44"/></name></name> <operator pos:line="58" pos:column="45">=<pos:position pos:line="58" pos:column="46"/></operator> <literal type="number" pos:line="58" pos:column="47">1<pos:position pos:line="58" pos:column="48"/></literal></expr>;<pos:position pos:line="58" pos:column="49"/></expr_stmt> <comment type="block" pos:line="58" pos:column="50">/* report errors */</comment>
			}<pos:position pos:line="59" pos:column="26"/></block></then></if>
		}<pos:position pos:line="60" pos:column="18"/></block></then></if>
	}<pos:position pos:line="61" pos:column="10"/></block></else></if>
 <label><name pos:line="62" pos:column="2">free_and_return<pos:position pos:line="62" pos:column="17"/></name>:<pos:position pos:line="62" pos:column="18"/></label>
	<expr_stmt><expr><call><name pos:line="63" pos:column="9">diff_free_filespec_data<pos:position pos:line="63" pos:column="32"/></name><argument_list pos:line="63" pos:column="32">(<argument><expr><name pos:line="63" pos:column="33">one<pos:position pos:line="63" pos:column="36"/></name></expr></argument>)<pos:position pos:line="63" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="64" pos:column="9">diff_free_filespec_data<pos:position pos:line="64" pos:column="32"/></name><argument_list pos:line="64" pos:column="32">(<argument><expr><name pos:line="64" pos:column="33">two<pos:position pos:line="64" pos:column="36"/></name></expr></argument>)<pos:position pos:line="64" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="38"/></expr_stmt>
	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name><name pos:line="65" pos:column="13">data<pos:position pos:line="65" pos:column="17"/></name><operator pos:line="65" pos:column="17">.<pos:position pos:line="65" pos:column="18"/></operator><name pos:line="65" pos:column="18">status<pos:position pos:line="65" pos:column="24"/></name></name></expr>)<pos:position pos:line="65" pos:column="25"/></condition><then pos:line="65" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="17">DIFF_OPT_SET<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">(<argument><expr><name pos:line="66" pos:column="30">o<pos:position pos:line="66" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="33">CHECK_FAILED<pos:position pos:line="66" pos:column="45"/></name></expr></argument>)<pos:position pos:line="66" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="47"/></expr_stmt></block></then></if>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
