<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4598_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">launch_editor<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">path<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">strbuf<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">buffer<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="60">const<pos:position pos:line="1" pos:column="65"/></specifier> <name pos:line="1" pos:column="66">char<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier><specifier pos:line="1" pos:column="72">const<pos:position pos:line="1" pos:column="77"/></specifier> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">env<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="83"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">editor<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><call><name pos:line="3" pos:column="30">git_editor<pos:position pos:line="3" pos:column="40"/></name><argument_list pos:line="3" pos:column="40">()<pos:position pos:line="3" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">editor<pos:position pos:line="5" pos:column="20"/></name></expr>)<pos:position pos:line="5" pos:column="21"/></condition><then pos:line="5" pos:column="21">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><call><name pos:line="6" pos:column="24">error<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><literal type="string" pos:line="6" pos:column="30">"Terminal is dumb, but EDITOR unset"<pos:position pos:line="6" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="68"/></return></block></then></if>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">strcmp<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">editor<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="28">":"<pos:position pos:line="8" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="33"/></condition><then pos:line="8" pos:column="33"> <block pos:line="8" pos:column="34">{
		<decl_stmt><decl><type><specifier pos:line="9" pos:column="17">const<pos:position pos:line="9" pos:column="22"/></specifier> <name pos:line="9" pos:column="23">char<pos:position pos:line="9" pos:column="27"/></name> <modifier pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></modifier></type><name><name pos:line="9" pos:column="29">args<pos:position pos:line="9" pos:column="33"/></name><index pos:line="9" pos:column="33">[]<pos:position pos:line="9" pos:column="35"/></index></name> <init pos:line="9" pos:column="36">= <expr><block pos:line="9" pos:column="38">{ <expr><name pos:line="9" pos:column="40">editor<pos:position pos:line="9" pos:column="46"/></name></expr>, <expr><call><name pos:line="9" pos:column="48">real_path<pos:position pos:line="9" pos:column="57"/></name><argument_list pos:line="9" pos:column="57">(<argument><expr><name pos:line="9" pos:column="58">path<pos:position pos:line="9" pos:column="62"/></name></expr></argument>)<pos:position pos:line="9" pos:column="63"/></argument_list></call></expr>, <expr><name pos:line="9" pos:column="65">NULL<pos:position pos:line="9" pos:column="69"/></name></expr> }<pos:position pos:line="9" pos:column="71"/></block></expr></init></decl>;<pos:position pos:line="9" pos:column="72"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">child_process<pos:position pos:line="10" pos:column="37"/></name></name></type> <name pos:line="10" pos:column="38">p<pos:position pos:line="10" pos:column="39"/></name> <init pos:line="10" pos:column="40">= <expr><name pos:line="10" pos:column="42">CHILD_PROCESS_INIT<pos:position pos:line="10" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="61"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">ret<pos:position pos:line="11" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="26">sig<pos:position pos:line="11" pos:column="29"/></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>

		<expr_stmt><expr><name><name pos:line="13" pos:column="17">p<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">argv<pos:position pos:line="13" pos:column="23"/></name></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <name pos:line="13" pos:column="26">args<pos:position pos:line="13" pos:column="30"/></name></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="14" pos:column="17">p<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">.<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">env<pos:position pos:line="14" pos:column="22"/></name></name> <operator pos:line="14" pos:column="23">=<pos:position pos:line="14" pos:column="24"/></operator> <name pos:line="14" pos:column="25">env<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="15" pos:column="17">p<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">.<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">use_shell<pos:position pos:line="15" pos:column="28"/></name></name> <operator pos:line="15" pos:column="29">=<pos:position pos:line="15" pos:column="30"/></operator> <literal type="number" pos:line="15" pos:column="31">1<pos:position pos:line="15" pos:column="32"/></literal></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">start_command<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><operator pos:line="16" pos:column="35">&amp;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="36">p<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call> <operator pos:line="16" pos:column="39">&lt;<pos:position pos:line="16" pos:column="43"/></operator> <literal type="number" pos:line="16" pos:column="41">0<pos:position pos:line="16" pos:column="42"/></literal></expr>)<pos:position pos:line="16" pos:column="43"/></condition><then pos:line="16" pos:column="43">
			<block type="pseudo"><return pos:line="17" pos:column="25">return <expr><call><name pos:line="17" pos:column="32">error<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><literal type="string" pos:line="17" pos:column="38">"unable to start editor '%s'"<pos:position pos:line="17" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="69">editor<pos:position pos:line="17" pos:column="75"/></name></expr></argument>)<pos:position pos:line="17" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="77"/></return></block></then></if>

		<expr_stmt><expr><call><name pos:line="19" pos:column="17">sigchain_push<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">SIGINT<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="39">SIG_IGN<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">sigchain_push<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">SIGQUIT<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="40">SIG_IGN<pos:position pos:line="20" pos:column="47"/></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="21" pos:column="17">ret<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">finish_command<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><operator pos:line="21" pos:column="38">&amp;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="39">p<pos:position pos:line="21" pos:column="40"/></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">sig<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <name pos:line="22" pos:column="23">ret<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">-<pos:position pos:line="22" pos:column="28"/></operator> <literal type="number" pos:line="22" pos:column="29">128<pos:position pos:line="22" pos:column="32"/></literal></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">sigchain_pop<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">SIGINT<pos:position pos:line="23" pos:column="36"/></name></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">sigchain_pop<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">SIGQUIT<pos:position pos:line="24" pos:column="37"/></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">sig<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">==<pos:position pos:line="25" pos:column="27"/></operator> <name pos:line="25" pos:column="28">SIGINT<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">||<pos:position pos:line="25" pos:column="37"/></operator> <name pos:line="25" pos:column="38">sig<pos:position pos:line="25" pos:column="41"/></name> <operator pos:line="25" pos:column="42">==<pos:position pos:line="25" pos:column="44"/></operator> <name pos:line="25" pos:column="45">SIGQUIT<pos:position pos:line="25" pos:column="52"/></name></expr>)<pos:position pos:line="25" pos:column="53"/></condition><then pos:line="25" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="25">raise<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><name pos:line="26" pos:column="31">sig<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">ret<pos:position pos:line="27" pos:column="24"/></name></expr>)<pos:position pos:line="27" pos:column="25"/></condition><then pos:line="27" pos:column="25">
			<block type="pseudo"><return pos:line="28" pos:column="25">return <expr><call><name pos:line="28" pos:column="32">error<pos:position pos:line="28" pos:column="37"/></name><argument_list pos:line="28" pos:column="37">(<argument><expr><literal type="string" pos:line="28" pos:column="38">"There was a problem with the editor '%s'."<pos:position pos:line="28" pos:column="81"/></literal></expr></argument>,
					<argument><expr><name pos:line="29" pos:column="41">editor<pos:position pos:line="29" pos:column="47"/></name></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="49"/></return></block></then></if>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">buffer<pos:position pos:line="32" pos:column="20"/></name></expr>)<pos:position pos:line="32" pos:column="21"/></condition><then pos:line="32" pos:column="21">
		<block type="pseudo"><return pos:line="33" pos:column="17">return <expr><literal type="number" pos:line="33" pos:column="24">0<pos:position pos:line="33" pos:column="25"/></literal></expr>;<pos:position pos:line="33" pos:column="26"/></return></block></then></if>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name pos:line="34" pos:column="13">strbuf_read_file<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">buffer<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="38">path<pos:position pos:line="34" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="44">0<pos:position pos:line="34" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="46"/></argument_list></call> <operator pos:line="34" pos:column="47">&lt;<pos:position pos:line="34" pos:column="51"/></operator> <literal type="number" pos:line="34" pos:column="49">0<pos:position pos:line="34" pos:column="50"/></literal></expr>)<pos:position pos:line="34" pos:column="51"/></condition><then pos:line="34" pos:column="51">
		<block type="pseudo"><return pos:line="35" pos:column="17">return <expr><call><name pos:line="35" pos:column="24">error_errno<pos:position pos:line="35" pos:column="35"/></name><argument_list pos:line="35" pos:column="35">(<argument><expr><literal type="string" pos:line="35" pos:column="36">"could not read file '%s'"<pos:position pos:line="35" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="64">path<pos:position pos:line="35" pos:column="68"/></name></expr></argument>)<pos:position pos:line="35" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="70"/></return></block></then></if>
	<return pos:line="36" pos:column="9">return <expr><literal type="number" pos:line="36" pos:column="16">0<pos:position pos:line="36" pos:column="17"/></literal></expr>;<pos:position pos:line="36" pos:column="18"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
