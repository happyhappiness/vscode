<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2629_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ident_to_worktree<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">path<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">src<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">size_t<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">len<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>,
                             <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">strbuf<pos:position pos:line="2" pos:column="43"/></name></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">buf<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">ident<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">sha1<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">to_free<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name pos:line="5" pos:column="25">NULL<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>, <modifier pos:line="5" pos:column="31">*<pos:position pos:line="5" pos:column="32"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="32">dollar<pos:position pos:line="5" pos:column="38"/></name></decl>, <modifier pos:line="5" pos:column="40">*<pos:position pos:line="5" pos:column="41"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="41">spc<pos:position pos:line="5" pos:column="44"/></name></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">cnt<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">ident<pos:position pos:line="8" pos:column="19"/></name></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">cnt<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <call><name pos:line="11" pos:column="15">count_ident<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">src<pos:position pos:line="11" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="32">len<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">cnt<pos:position pos:line="12" pos:column="17"/></name></expr>)<pos:position pos:line="12" pos:column="18"/></condition><then pos:line="12" pos:column="18">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="15" pos:column="9">/* are we "faking" in place editing ? */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">src<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">==<pos:position pos:line="16" pos:column="19"/></operator> <name><name pos:line="16" pos:column="20">buf<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">-&gt;<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="25">buf<pos:position pos:line="16" pos:column="28"/></name></name></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">to_free<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">=<pos:position pos:line="17" pos:column="26"/></operator> <call><name pos:line="17" pos:column="27">strbuf_detach<pos:position pos:line="17" pos:column="40"/></name><argument_list pos:line="17" pos:column="40">(<argument><expr><name pos:line="17" pos:column="41">buf<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="46">NULL<pos:position pos:line="17" pos:column="50"/></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">hash_sha1_file<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">src<pos:position pos:line="18" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="29">len<pos:position pos:line="18" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="34">"blob"<pos:position pos:line="18" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="42">sha1<pos:position pos:line="18" pos:column="46"/></name></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="20" pos:column="9">strbuf_grow<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">buf<pos:position pos:line="20" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="26">len<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">+<pos:position pos:line="20" pos:column="31"/></operator> <name pos:line="20" pos:column="32">cnt<pos:position pos:line="20" pos:column="35"/></name> <operator pos:line="20" pos:column="36">*<pos:position pos:line="20" pos:column="37"/></operator> <literal type="number" pos:line="20" pos:column="38">43<pos:position pos:line="20" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt>
	<for pos:line="21" pos:column="9">for <control pos:line="21" pos:column="13">(<init pos:line="21" pos:column="14">;<pos:position pos:line="21" pos:column="15"/></init><condition pos:line="21" pos:column="15">;<pos:position pos:line="21" pos:column="16"/></condition><incr/>)<pos:position pos:line="21" pos:column="17"/></control> <block pos:line="21" pos:column="18">{
		<comment type="block" pos:line="22" pos:column="17">/* step 1: run to the next '$' */</comment>
		<expr_stmt><expr><name pos:line="23" pos:column="17">dollar<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <call><name pos:line="23" pos:column="26">memchr<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">src<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="38">'$'<pos:position pos:line="23" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="43">len<pos:position pos:line="23" pos:column="46"/></name></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">dollar<pos:position pos:line="24" pos:column="28"/></name></expr>)<pos:position pos:line="24" pos:column="29"/></condition><then pos:line="24" pos:column="29">
			<block type="pseudo"><break pos:line="25" pos:column="25">break;<pos:position pos:line="25" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">strbuf_add<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">buf<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="33">src<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="38">dollar<pos:position pos:line="26" pos:column="44"/></name> <operator pos:line="26" pos:column="45">+<pos:position pos:line="26" pos:column="46"/></operator> <literal type="number" pos:line="26" pos:column="47">1<pos:position pos:line="26" pos:column="48"/></literal> <operator pos:line="26" pos:column="49">-<pos:position pos:line="26" pos:column="50"/></operator> <name pos:line="26" pos:column="51">src<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="27" pos:column="17">len<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">-=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">dollar<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">+<pos:position pos:line="27" pos:column="32"/></operator> <literal type="number" pos:line="27" pos:column="33">1<pos:position pos:line="27" pos:column="34"/></literal> <operator pos:line="27" pos:column="35">-<pos:position pos:line="27" pos:column="36"/></operator> <name pos:line="27" pos:column="37">src<pos:position pos:line="27" pos:column="40"/></name></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">src<pos:position pos:line="28" pos:column="20"/></name>  <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <name pos:line="28" pos:column="24">dollar<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">+<pos:position pos:line="28" pos:column="32"/></operator> <literal type="number" pos:line="28" pos:column="33">1<pos:position pos:line="28" pos:column="34"/></literal></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>

		<comment type="block" pos:line="30" pos:column="17">/* step 2: does it looks like a bit like Id:xxx$ or Id$ ? */</comment>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">len<pos:position pos:line="31" pos:column="24"/></name> <operator pos:line="31" pos:column="25">&lt;<pos:position pos:line="31" pos:column="29"/></operator> <literal type="number" pos:line="31" pos:column="27">3<pos:position pos:line="31" pos:column="28"/></literal> <operator pos:line="31" pos:column="29">||<pos:position pos:line="31" pos:column="31"/></operator> <call><name pos:line="31" pos:column="32">memcmp<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><literal type="string" pos:line="31" pos:column="39">"Id"<pos:position pos:line="31" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="45">src<pos:position pos:line="31" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="50">2<pos:position pos:line="31" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="53"/></condition><then pos:line="31" pos:column="53">
			<block type="pseudo"><continue pos:line="32" pos:column="25">continue;<pos:position pos:line="32" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="34" pos:column="17">/* step 3: skip over Id$ or Id:xxxxx$ */</comment>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name><name pos:line="35" pos:column="21">src<pos:position pos:line="35" pos:column="24"/></name><index pos:line="35" pos:column="24">[<expr><literal type="number" pos:line="35" pos:column="25">2<pos:position pos:line="35" pos:column="26"/></literal></expr>]<pos:position pos:line="35" pos:column="27"/></index></name> <operator pos:line="35" pos:column="28">==<pos:position pos:line="35" pos:column="30"/></operator> <literal type="char" pos:line="35" pos:column="31">'$'<pos:position pos:line="35" pos:column="34"/></literal></expr>)<pos:position pos:line="35" pos:column="35"/></condition><then pos:line="35" pos:column="35"> <block pos:line="35" pos:column="36">{
			<expr_stmt><expr><name pos:line="36" pos:column="25">src<pos:position pos:line="36" pos:column="28"/></name> <operator pos:line="36" pos:column="29">+=<pos:position pos:line="36" pos:column="31"/></operator> <literal type="number" pos:line="36" pos:column="32">3<pos:position pos:line="36" pos:column="33"/></literal></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="37" pos:column="25">len<pos:position pos:line="37" pos:column="28"/></name> <operator pos:line="37" pos:column="29">-=<pos:position pos:line="37" pos:column="31"/></operator> <literal type="number" pos:line="37" pos:column="32">3<pos:position pos:line="37" pos:column="33"/></literal></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></then> <elseif pos:line="38" pos:column="19">else <if pos:line="38" pos:column="24">if <condition pos:line="38" pos:column="27">(<expr><name><name pos:line="38" pos:column="28">src<pos:position pos:line="38" pos:column="31"/></name><index pos:line="38" pos:column="31">[<expr><literal type="number" pos:line="38" pos:column="32">2<pos:position pos:line="38" pos:column="33"/></literal></expr>]<pos:position pos:line="38" pos:column="34"/></index></name> <operator pos:line="38" pos:column="35">==<pos:position pos:line="38" pos:column="37"/></operator> <literal type="char" pos:line="38" pos:column="38">':'<pos:position pos:line="38" pos:column="41"/></literal></expr>)<pos:position pos:line="38" pos:column="42"/></condition><then pos:line="38" pos:column="42"> <block pos:line="38" pos:column="43">{
			<comment type="block" pos:line="39" pos:column="25">/*
			 * It's possible that an expanded Id has crept its way into the
			 * repository, we cope with that by stripping the expansion out.
			 * This is probably not a good idea, since it will cause changes
			 * on checkout, which won't go away by stash, but let's keep it
			 * for git-style ids.
			 */</comment>
			<expr_stmt><expr><name pos:line="46" pos:column="25">dollar<pos:position pos:line="46" pos:column="31"/></name> <operator pos:line="46" pos:column="32">=<pos:position pos:line="46" pos:column="33"/></operator> <call><name pos:line="46" pos:column="34">memchr<pos:position pos:line="46" pos:column="40"/></name><argument_list pos:line="46" pos:column="40">(<argument><expr><name pos:line="46" pos:column="41">src<pos:position pos:line="46" pos:column="44"/></name> <operator pos:line="46" pos:column="45">+<pos:position pos:line="46" pos:column="46"/></operator> <literal type="number" pos:line="46" pos:column="47">3<pos:position pos:line="46" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="46" pos:column="50">'$'<pos:position pos:line="46" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="55">len<pos:position pos:line="46" pos:column="58"/></name> <operator pos:line="46" pos:column="59">-<pos:position pos:line="46" pos:column="60"/></operator> <literal type="number" pos:line="46" pos:column="61">3<pos:position pos:line="46" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="64"/></expr_stmt>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><operator pos:line="47" pos:column="29">!<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="30">dollar<pos:position pos:line="47" pos:column="36"/></name></expr>)<pos:position pos:line="47" pos:column="37"/></condition><then pos:line="47" pos:column="37"> <block pos:line="47" pos:column="38">{
				<comment type="block" pos:line="48" pos:column="33">/* incomplete keyword, no more '$', so just quit the loop */</comment>
				<break pos:line="49" pos:column="33">break;<pos:position pos:line="49" pos:column="39"/></break>
			}<pos:position pos:line="50" pos:column="26"/></block></then></if>

			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><call><name pos:line="52" pos:column="29">memchr<pos:position pos:line="52" pos:column="35"/></name><argument_list pos:line="52" pos:column="35">(<argument><expr><name pos:line="52" pos:column="36">src<pos:position pos:line="52" pos:column="39"/></name> <operator pos:line="52" pos:column="40">+<pos:position pos:line="52" pos:column="41"/></operator> <literal type="number" pos:line="52" pos:column="42">3<pos:position pos:line="52" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="52" pos:column="45">'\n'<pos:position pos:line="52" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="51">dollar<pos:position pos:line="52" pos:column="57"/></name> <operator pos:line="52" pos:column="58">-<pos:position pos:line="52" pos:column="59"/></operator> <name pos:line="52" pos:column="60">src<pos:position pos:line="52" pos:column="63"/></name> <operator pos:line="52" pos:column="64">-<pos:position pos:line="52" pos:column="65"/></operator> <literal type="number" pos:line="52" pos:column="66">3<pos:position pos:line="52" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="69"/></condition><then pos:line="52" pos:column="69"> <block pos:line="52" pos:column="70">{
				<comment type="block" pos:line="53" pos:column="33">/* Line break before the next dollar. */</comment>
				<continue pos:line="54" pos:column="33">continue;<pos:position pos:line="54" pos:column="42"/></continue>
			}<pos:position pos:line="55" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name pos:line="57" pos:column="25">spc<pos:position pos:line="57" pos:column="28"/></name> <operator pos:line="57" pos:column="29">=<pos:position pos:line="57" pos:column="30"/></operator> <call><name pos:line="57" pos:column="31">memchr<pos:position pos:line="57" pos:column="37"/></name><argument_list pos:line="57" pos:column="37">(<argument><expr><name pos:line="57" pos:column="38">src<pos:position pos:line="57" pos:column="41"/></name> <operator pos:line="57" pos:column="42">+<pos:position pos:line="57" pos:column="43"/></operator> <literal type="number" pos:line="57" pos:column="44">4<pos:position pos:line="57" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="57" pos:column="47">' '<pos:position pos:line="57" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="52">dollar<pos:position pos:line="57" pos:column="58"/></name> <operator pos:line="57" pos:column="59">-<pos:position pos:line="57" pos:column="60"/></operator> <name pos:line="57" pos:column="61">src<pos:position pos:line="57" pos:column="64"/></name> <operator pos:line="57" pos:column="65">-<pos:position pos:line="57" pos:column="66"/></operator> <literal type="number" pos:line="57" pos:column="67">4<pos:position pos:line="57" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="70"/></expr_stmt>
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><name pos:line="58" pos:column="29">spc<pos:position pos:line="58" pos:column="32"/></name> <operator pos:line="58" pos:column="33">&amp;&amp;<pos:position pos:line="58" pos:column="43"/></operator> <name pos:line="58" pos:column="36">spc<pos:position pos:line="58" pos:column="39"/></name> <operator pos:line="58" pos:column="40">&lt;<pos:position pos:line="58" pos:column="44"/></operator> <name pos:line="58" pos:column="42">dollar<pos:position pos:line="58" pos:column="48"/></name><operator pos:line="58" pos:column="48">-<pos:position pos:line="58" pos:column="49"/></operator><literal type="number" pos:line="58" pos:column="49">1<pos:position pos:line="58" pos:column="50"/></literal></expr>)<pos:position pos:line="58" pos:column="51"/></condition><then pos:line="58" pos:column="51"> <block pos:line="58" pos:column="52">{
				<comment type="block" pos:line="59" pos:column="33">/* There are spaces in unexpected places.
				 * This is probably an id from some other
				 * versioning system. Keep it for now.
				 */</comment>
				<continue pos:line="63" pos:column="33">continue;<pos:position pos:line="63" pos:column="42"/></continue>
			}<pos:position pos:line="64" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name pos:line="66" pos:column="25">len<pos:position pos:line="66" pos:column="28"/></name> <operator pos:line="66" pos:column="29">-=<pos:position pos:line="66" pos:column="31"/></operator> <name pos:line="66" pos:column="32">dollar<pos:position pos:line="66" pos:column="38"/></name> <operator pos:line="66" pos:column="39">+<pos:position pos:line="66" pos:column="40"/></operator> <literal type="number" pos:line="66" pos:column="41">1<pos:position pos:line="66" pos:column="42"/></literal> <operator pos:line="66" pos:column="43">-<pos:position pos:line="66" pos:column="44"/></operator> <name pos:line="66" pos:column="45">src<pos:position pos:line="66" pos:column="48"/></name></expr>;<pos:position pos:line="66" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><name pos:line="67" pos:column="25">src<pos:position pos:line="67" pos:column="28"/></name>  <operator pos:line="67" pos:column="30">=<pos:position pos:line="67" pos:column="31"/></operator> <name pos:line="67" pos:column="32">dollar<pos:position pos:line="67" pos:column="38"/></name> <operator pos:line="67" pos:column="39">+<pos:position pos:line="67" pos:column="40"/></operator> <literal type="number" pos:line="67" pos:column="41">1<pos:position pos:line="67" pos:column="42"/></literal></expr>;<pos:position pos:line="67" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="68" pos:column="18"/></block></then></if></elseif> <else pos:line="68" pos:column="19">else <block pos:line="68" pos:column="24">{
			<comment type="block" pos:line="69" pos:column="25">/* it wasn't a "Id$" or "Id:xxxx$" */</comment>
			<continue pos:line="70" pos:column="25">continue;<pos:position pos:line="70" pos:column="34"/></continue>
		}<pos:position pos:line="71" pos:column="18"/></block></else></if>

		<comment type="block" pos:line="73" pos:column="17">/* step 4: substitute */</comment>
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">strbuf_addstr<pos:position pos:line="74" pos:column="30"/></name><argument_list pos:line="74" pos:column="30">(<argument><expr><name pos:line="74" pos:column="31">buf<pos:position pos:line="74" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="36">"Id: "<pos:position pos:line="74" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="75" pos:column="17">strbuf_add<pos:position pos:line="75" pos:column="27"/></name><argument_list pos:line="75" pos:column="27">(<argument><expr><name pos:line="75" pos:column="28">buf<pos:position pos:line="75" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="75" pos:column="33">sha1_to_hex<pos:position pos:line="75" pos:column="44"/></name><argument_list pos:line="75" pos:column="44">(<argument><expr><name pos:line="75" pos:column="45">sha1<pos:position pos:line="75" pos:column="49"/></name></expr></argument>)<pos:position pos:line="75" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="52">40<pos:position pos:line="75" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">strbuf_addstr<pos:position pos:line="76" pos:column="30"/></name><argument_list pos:line="76" pos:column="30">(<argument><expr><name pos:line="76" pos:column="31">buf<pos:position pos:line="76" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="36">" $"<pos:position pos:line="76" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="77" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="78" pos:column="9">strbuf_add<pos:position pos:line="78" pos:column="19"/></name><argument_list pos:line="78" pos:column="19">(<argument><expr><name pos:line="78" pos:column="20">buf<pos:position pos:line="78" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="25">src<pos:position pos:line="78" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="30">len<pos:position pos:line="78" pos:column="33"/></name></expr></argument>)<pos:position pos:line="78" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="80" pos:column="9">free<pos:position pos:line="80" pos:column="13"/></name><argument_list pos:line="80" pos:column="13">(<argument><expr><name pos:line="80" pos:column="14">to_free<pos:position pos:line="80" pos:column="21"/></name></expr></argument>)<pos:position pos:line="80" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="23"/></expr_stmt>
	<return pos:line="81" pos:column="9">return <expr><literal type="number" pos:line="81" pos:column="16">1<pos:position pos:line="81" pos:column="17"/></literal></expr>;<pos:position pos:line="81" pos:column="18"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
