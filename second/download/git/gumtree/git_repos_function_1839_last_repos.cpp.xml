<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1839_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">object_entry<pos:position pos:line="1" pos:column="27"/></name></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">parse_treeish_dataref<pos:position pos:line="1" pos:column="50"/></name><parameter_list pos:line="1" pos:column="50">(<parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier><modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">p<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object_id<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">oid<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">object_entry<pos:position pos:line="4" pos:column="28"/></name></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">e<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">*<pos:position pos:line="6" pos:column="14"/></operator><operator pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">p<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <literal type="char" pos:line="6" pos:column="20">':'<pos:position pos:line="6" pos:column="23"/></literal></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24"> <block pos:line="6" pos:column="25">{	<comment type="block" pos:line="6" pos:column="33">/* &lt;mark&gt; */</comment>
		<expr_stmt><expr><name pos:line="7" pos:column="17">e<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">=<pos:position pos:line="7" pos:column="20"/></operator> <call><name pos:line="7" pos:column="21">find_mark<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><call><name pos:line="7" pos:column="31">parse_mark_ref_space<pos:position pos:line="7" pos:column="51"/></name><argument_list pos:line="7" pos:column="51">(<argument><expr><name pos:line="7" pos:column="52">p<pos:position pos:line="7" pos:column="53"/></name></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="56"/></expr_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">e<pos:position pos:line="8" pos:column="23"/></name></expr>)<pos:position pos:line="8" pos:column="24"/></condition><then pos:line="8" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="25">die<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><literal type="string" pos:line="9" pos:column="29">"Unknown mark: %s"<pos:position pos:line="9" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="49">command_buf<pos:position pos:line="9" pos:column="60"/></name><operator pos:line="9" pos:column="60">.<pos:position pos:line="9" pos:column="61"/></operator><name pos:line="9" pos:column="61">buf<pos:position pos:line="9" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="66"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">oidcpy<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><operator pos:line="10" pos:column="24">&amp;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="25">oid<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="30">&amp;<pos:position pos:line="10" pos:column="35"/></operator><name><name pos:line="10" pos:column="31">e<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">idx<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">.<pos:position pos:line="10" pos:column="38"/></operator><name pos:line="10" pos:column="38">oid<pos:position pos:line="10" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then> <else pos:line="11" pos:column="11">else <block pos:line="11" pos:column="16">{	<comment type="block" pos:line="11" pos:column="25">/* &lt;sha1&gt; */</comment>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">parse_oid_hex<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><operator pos:line="12" pos:column="35">*<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="36">p<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="39">&amp;<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="40">oid<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">p<pos:position pos:line="12" pos:column="46"/></name></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="48"/></condition><then pos:line="12" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">die<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><literal type="string" pos:line="13" pos:column="29">"Invalid dataref: %s"<pos:position pos:line="13" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="52">command_buf<pos:position pos:line="13" pos:column="63"/></name><operator pos:line="13" pos:column="63">.<pos:position pos:line="13" pos:column="64"/></operator><name pos:line="13" pos:column="64">buf<pos:position pos:line="13" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="69"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="14" pos:column="17">e<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <call><name pos:line="14" pos:column="21">find_object<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><operator pos:line="14" pos:column="33">&amp;<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="34">oid<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></operator><operator pos:line="15" pos:column="22">(<pos:position pos:line="15" pos:column="23"/></operator><operator pos:line="15" pos:column="23">*<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="24">p<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">)<pos:position pos:line="15" pos:column="26"/></operator><operator pos:line="15" pos:column="26">++<pos:position pos:line="15" pos:column="28"/></operator> <operator pos:line="15" pos:column="29">!=<pos:position pos:line="15" pos:column="31"/></operator> <literal type="char" pos:line="15" pos:column="32">' '<pos:position pos:line="15" pos:column="35"/></literal></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">die<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><literal type="string" pos:line="16" pos:column="29">"Missing space after tree-ish: %s"<pos:position pos:line="16" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="65">command_buf<pos:position pos:line="16" pos:column="76"/></name><operator pos:line="16" pos:column="76">.<pos:position pos:line="16" pos:column="77"/></operator><name pos:line="16" pos:column="77">buf<pos:position pos:line="16" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="82"/></expr_stmt></block></then></if>
	}<pos:position pos:line="17" pos:column="10"/></block></else></if>

	<while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><operator pos:line="19" pos:column="16">!<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">e<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">||<pos:position pos:line="19" pos:column="21"/></operator> <name><name pos:line="19" pos:column="22">e<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">-&gt;<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="25">type<pos:position pos:line="19" pos:column="29"/></name></name> <operator pos:line="19" pos:column="30">!=<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="33">OBJ_TREE<pos:position pos:line="19" pos:column="41"/></name></expr>)<pos:position pos:line="19" pos:column="42"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="17">e<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <call><name pos:line="20" pos:column="21">dereference<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">e<pos:position pos:line="20" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="36">&amp;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="37">oid<pos:position pos:line="20" pos:column="40"/></name></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt></block></while>
	<return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">e<pos:position pos:line="21" pos:column="17"/></name></expr>;<pos:position pos:line="21" pos:column="18"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
