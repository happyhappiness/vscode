<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2991.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">gpg_verify_tag<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">unsigned<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">sha1<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">name_to_report<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">unsigned<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">flags<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">enum<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">object_type<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">type<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">buf<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">long<pos:position pos:line="6" pos:column="22"/></name></type> <name pos:line="6" pos:column="23">size<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ret<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">type<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <call><name pos:line="9" pos:column="16">sha1_object_info<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">sha1<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="39">NULL<pos:position pos:line="9" pos:column="43"/></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">type<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">!=<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">OBJ_TAG<pos:position pos:line="10" pos:column="28"/></name></expr>)<pos:position pos:line="10" pos:column="29"/></condition><then pos:line="10" pos:column="29">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><call><name pos:line="11" pos:column="24">error<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><literal type="string" pos:line="11" pos:column="30">"%s: cannot verify a non-tag object of type %s."<pos:position pos:line="11" pos:column="78"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="12" pos:column="33">name_to_report<pos:position pos:line="12" pos:column="47"/></name></expr> ?<pos:position pos:line="12" pos:column="49"/></condition><then pos:line="12" pos:column="49">
				<expr><name pos:line="13" pos:column="33">name_to_report<pos:position pos:line="13" pos:column="47"/></name></expr> <pos:position pos:line="13" pos:column="48"/></then><else pos:line="13" pos:column="48">:
				<expr><call><name pos:line="14" pos:column="33">find_unique_abbrev<pos:position pos:line="14" pos:column="51"/></name><argument_list pos:line="14" pos:column="51">(<argument><expr><name pos:line="14" pos:column="52">sha1<pos:position pos:line="14" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="58">DEFAULT_ABBREV<pos:position pos:line="14" pos:column="72"/></name></expr></argument>)<pos:position pos:line="14" pos:column="73"/></argument_list></call></expr></else></ternary></expr></argument>,
				<argument><expr><name><typename pos:line="15" pos:column="33">typename<pos:position pos:line="15" pos:column="41"/></typename></name><operator pos:line="15" pos:column="41">(<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="42">type<pos:position pos:line="15" pos:column="46"/></name><operator pos:line="15" pos:column="46">)<pos:position pos:line="15" pos:column="47"/></operator></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="49"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="17" pos:column="9">buf<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">read_sha1_file<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">sha1<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="36">&amp;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="37">type<pos:position pos:line="17" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="43">&amp;<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="44">size<pos:position pos:line="17" pos:column="48"/></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">buf<pos:position pos:line="18" pos:column="17"/></name></expr>)<pos:position pos:line="18" pos:column="18"/></condition><then pos:line="18" pos:column="18">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><call><name pos:line="19" pos:column="24">error<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><literal type="string" pos:line="19" pos:column="30">"%s: unable to read file."<pos:position pos:line="19" pos:column="56"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="20" pos:column="33">name_to_report<pos:position pos:line="20" pos:column="47"/></name></expr> ?<pos:position pos:line="20" pos:column="49"/></condition><then pos:line="20" pos:column="49">
				<expr><name pos:line="21" pos:column="33">name_to_report<pos:position pos:line="21" pos:column="47"/></name></expr> <pos:position pos:line="21" pos:column="48"/></then><else pos:line="21" pos:column="48">:
				<expr><call><name pos:line="22" pos:column="33">find_unique_abbrev<pos:position pos:line="22" pos:column="51"/></name><argument_list pos:line="22" pos:column="51">(<argument><expr><name pos:line="22" pos:column="52">sha1<pos:position pos:line="22" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="58">DEFAULT_ABBREV<pos:position pos:line="22" pos:column="72"/></name></expr></argument>)<pos:position pos:line="22" pos:column="73"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="22" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="75"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="24" pos:column="9">ret<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <call><name pos:line="24" pos:column="15">run_gpg_verify<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">buf<pos:position pos:line="24" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="35">size<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">flags<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="26" pos:column="9">free<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><name pos:line="26" pos:column="14">buf<pos:position pos:line="26" pos:column="17"/></name></expr></argument>)<pos:position pos:line="26" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="19"/></expr_stmt>
	<return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">ret<pos:position pos:line="27" pos:column="19"/></name></expr>;<pos:position pos:line="27" pos:column="20"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
