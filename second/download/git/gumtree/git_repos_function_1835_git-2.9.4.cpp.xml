<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1835_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">unpack_sha1_header_to_strbuf<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">git_zstream<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">stream<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">unsigned<pos:position pos:line="1" pos:column="70"/></name> <name pos:line="1" pos:column="71">char<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">map<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>,
					<parameter><decl><type><name pos:line="2" pos:column="41">unsigned<pos:position pos:line="2" pos:column="49"/></name> <name pos:line="2" pos:column="50">long<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">mapsize<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="64">void<pos:position pos:line="2" pos:column="68"/></name> <modifier pos:line="2" pos:column="69">*<pos:position pos:line="2" pos:column="70"/></modifier></type><name pos:line="2" pos:column="70">buffer<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>,
					<parameter><decl><type><name pos:line="3" pos:column="41">unsigned<pos:position pos:line="3" pos:column="49"/></name> <name pos:line="3" pos:column="50">long<pos:position pos:line="3" pos:column="54"/></name></type> <name pos:line="3" pos:column="55">bufsiz<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="3" pos:column="63">struct<pos:position pos:line="3" pos:column="69"/></name> <name pos:line="3" pos:column="70">strbuf<pos:position pos:line="3" pos:column="76"/></name></name> <modifier pos:line="3" pos:column="77">*<pos:position pos:line="3" pos:column="78"/></modifier></type><name pos:line="3" pos:column="78">header<pos:position pos:line="3" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="85"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">status<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <call><name pos:line="7" pos:column="18">unpack_sha1_header<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">stream<pos:position pos:line="7" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="45">map<pos:position pos:line="7" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="50">mapsize<pos:position pos:line="7" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="59">buffer<pos:position pos:line="7" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="67">bufsiz<pos:position pos:line="7" pos:column="73"/></name></expr></argument>)<pos:position pos:line="7" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="75"/></expr_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * Check if entire header is unpacked in the first iteration.
	 */</comment>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">memchr<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name pos:line="12" pos:column="20">buffer<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="28">'\0'<pos:position pos:line="12" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="34">stream<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">-&gt;<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="42">next_out<pos:position pos:line="12" pos:column="50"/></name></name> <operator pos:line="12" pos:column="51">-<pos:position pos:line="12" pos:column="52"/></operator> <operator pos:line="12" pos:column="53">(<pos:position pos:line="12" pos:column="54"/></operator><name pos:line="12" pos:column="54">unsigned<pos:position pos:line="12" pos:column="62"/></name> <name pos:line="12" pos:column="63">char<pos:position pos:line="12" pos:column="67"/></name> <operator pos:line="12" pos:column="68">*<pos:position pos:line="12" pos:column="69"/></operator><operator pos:line="12" pos:column="69">)<pos:position pos:line="12" pos:column="70"/></operator><name pos:line="12" pos:column="70">buffer<pos:position pos:line="12" pos:column="76"/></name></expr></argument>)<pos:position pos:line="12" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="78"/></condition><then pos:line="12" pos:column="78">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="15" pos:column="9">/*
	 * buffer[0..bufsiz] was not large enough.  Copy the partial
	 * result out to header, and then append the result of further
	 * reading the stream.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">strbuf_add<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">header<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="28">buffer<pos:position pos:line="20" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="36">stream<pos:position pos:line="20" pos:column="42"/></name><operator pos:line="20" pos:column="42">-&gt;<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="44">next_out<pos:position pos:line="20" pos:column="52"/></name></name> <operator pos:line="20" pos:column="53">-<pos:position pos:line="20" pos:column="54"/></operator> <operator pos:line="20" pos:column="55">(<pos:position pos:line="20" pos:column="56"/></operator><name pos:line="20" pos:column="56">unsigned<pos:position pos:line="20" pos:column="64"/></name> <name pos:line="20" pos:column="65">char<pos:position pos:line="20" pos:column="69"/></name> <operator pos:line="20" pos:column="70">*<pos:position pos:line="20" pos:column="71"/></operator><operator pos:line="20" pos:column="71">)<pos:position pos:line="20" pos:column="72"/></operator><name pos:line="20" pos:column="72">buffer<pos:position pos:line="20" pos:column="78"/></name></expr></argument>)<pos:position pos:line="20" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="80"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">stream<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">next_out<pos:position pos:line="21" pos:column="25"/></name></name> <operator pos:line="21" pos:column="26">=<pos:position pos:line="21" pos:column="27"/></operator> <name pos:line="21" pos:column="28">buffer<pos:position pos:line="21" pos:column="34"/></name></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">stream<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">-&gt;<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="17">avail_out<pos:position pos:line="22" pos:column="26"/></name></name> <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="29">bufsiz<pos:position pos:line="22" pos:column="35"/></name></expr>;<pos:position pos:line="22" pos:column="36"/></expr_stmt>

	<do pos:line="24" pos:column="9">do <block pos:line="24" pos:column="12">{
		<expr_stmt><expr><name pos:line="25" pos:column="17">status<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">=<pos:position pos:line="25" pos:column="25"/></operator> <call><name pos:line="25" pos:column="26">git_inflate<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><name pos:line="25" pos:column="38">stream<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="46">0<pos:position pos:line="25" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">strbuf_add<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">header<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="36">buffer<pos:position pos:line="26" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="44">stream<pos:position pos:line="26" pos:column="50"/></name><operator pos:line="26" pos:column="50">-&gt;<pos:position pos:line="26" pos:column="55"/></operator><name pos:line="26" pos:column="52">next_out<pos:position pos:line="26" pos:column="60"/></name></name> <operator pos:line="26" pos:column="61">-<pos:position pos:line="26" pos:column="62"/></operator> <operator pos:line="26" pos:column="63">(<pos:position pos:line="26" pos:column="64"/></operator><name pos:line="26" pos:column="64">unsigned<pos:position pos:line="26" pos:column="72"/></name> <name pos:line="26" pos:column="73">char<pos:position pos:line="26" pos:column="77"/></name> <operator pos:line="26" pos:column="78">*<pos:position pos:line="26" pos:column="79"/></operator><operator pos:line="26" pos:column="79">)<pos:position pos:line="26" pos:column="80"/></operator><name pos:line="26" pos:column="80">buffer<pos:position pos:line="26" pos:column="86"/></name></expr></argument>)<pos:position pos:line="26" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="88"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">memchr<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><name pos:line="27" pos:column="28">buffer<pos:position pos:line="27" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="27" pos:column="36">'\0'<pos:position pos:line="27" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="42">stream<pos:position pos:line="27" pos:column="48"/></name><operator pos:line="27" pos:column="48">-&gt;<pos:position pos:line="27" pos:column="53"/></operator><name pos:line="27" pos:column="50">next_out<pos:position pos:line="27" pos:column="58"/></name></name> <operator pos:line="27" pos:column="59">-<pos:position pos:line="27" pos:column="60"/></operator> <operator pos:line="27" pos:column="61">(<pos:position pos:line="27" pos:column="62"/></operator><name pos:line="27" pos:column="62">unsigned<pos:position pos:line="27" pos:column="70"/></name> <name pos:line="27" pos:column="71">char<pos:position pos:line="27" pos:column="75"/></name> <operator pos:line="27" pos:column="76">*<pos:position pos:line="27" pos:column="77"/></operator><operator pos:line="27" pos:column="77">)<pos:position pos:line="27" pos:column="78"/></operator><name pos:line="27" pos:column="78">buffer<pos:position pos:line="27" pos:column="84"/></name></expr></argument>)<pos:position pos:line="27" pos:column="85"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="86"/></condition><then pos:line="27" pos:column="86">
			<block type="pseudo"><return pos:line="28" pos:column="25">return <expr><literal type="number" pos:line="28" pos:column="32">0<pos:position pos:line="28" pos:column="33"/></literal></expr>;<pos:position pos:line="28" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><name><name pos:line="29" pos:column="17">stream<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">-&gt;<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="25">next_out<pos:position pos:line="29" pos:column="33"/></name></name> <operator pos:line="29" pos:column="34">=<pos:position pos:line="29" pos:column="35"/></operator> <name pos:line="29" pos:column="36">buffer<pos:position pos:line="29" pos:column="42"/></name></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">stream<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">-&gt;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="25">avail_out<pos:position pos:line="30" pos:column="34"/></name></name> <operator pos:line="30" pos:column="35">=<pos:position pos:line="30" pos:column="36"/></operator> <name pos:line="30" pos:column="37">bufsiz<pos:position pos:line="30" pos:column="43"/></name></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block> while <condition pos:line="31" pos:column="17">(<expr><name pos:line="31" pos:column="18">status<pos:position pos:line="31" pos:column="24"/></name> <operator pos:line="31" pos:column="25">!=<pos:position pos:line="31" pos:column="27"/></operator> <name pos:line="31" pos:column="28">Z_STREAM_END<pos:position pos:line="31" pos:column="40"/></name></expr>)<pos:position pos:line="31" pos:column="41"/></condition>;<pos:position pos:line="31" pos:column="42"/></do>
	<return pos:line="32" pos:column="9">return <expr><operator pos:line="32" pos:column="16">-<pos:position pos:line="32" pos:column="17"/></operator><literal type="number" pos:line="32" pos:column="17">1<pos:position pos:line="32" pos:column="18"/></literal></expr>;<pos:position pos:line="32" pos:column="19"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
