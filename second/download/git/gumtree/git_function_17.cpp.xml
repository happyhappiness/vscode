<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_17.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">blob<pos:position pos:line="1" pos:column="12"/></name></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">lookup_blob<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">unsigned<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">sha1<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">obj<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><call><name pos:line="3" pos:column="30">lookup_object<pos:position pos:line="3" pos:column="43"/></name><argument_list pos:line="3" pos:column="43">(<argument><expr><name pos:line="3" pos:column="44">sha1<pos:position pos:line="3" pos:column="48"/></name></expr></argument>)<pos:position pos:line="3" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="50"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">obj<pos:position pos:line="4" pos:column="17"/></name></expr>)<pos:position pos:line="4" pos:column="18"/></condition><then pos:line="4" pos:column="18">
		<block type="pseudo"><return pos:line="5" pos:column="17">return <expr><call><name pos:line="5" pos:column="24">create_object<pos:position pos:line="5" pos:column="37"/></name><argument_list pos:line="5" pos:column="37">(<argument><expr><name pos:line="5" pos:column="38">sha1<pos:position pos:line="5" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="44">OBJ_BLOB<pos:position pos:line="5" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="5" pos:column="54">alloc_blob_node<pos:position pos:line="5" pos:column="69"/></name><argument_list pos:line="5" pos:column="69">()<pos:position pos:line="5" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="73"/></return></block></then></if>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name><name pos:line="6" pos:column="14">obj<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">type<pos:position pos:line="6" pos:column="23"/></name></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="7" pos:column="17">obj<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">-&gt;<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="22">type<pos:position pos:line="7" pos:column="26"/></name></name> <operator pos:line="7" pos:column="27">=<pos:position pos:line="7" pos:column="28"/></operator> <name pos:line="7" pos:column="29">OBJ_BLOB<pos:position pos:line="7" pos:column="37"/></name></expr>;<pos:position pos:line="7" pos:column="38"/></expr_stmt></block></then></if>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">obj<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">-&gt;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="18">type<pos:position pos:line="8" pos:column="22"/></name></name> <operator pos:line="8" pos:column="23">!=<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">OBJ_BLOB<pos:position pos:line="8" pos:column="34"/></name></expr>)<pos:position pos:line="8" pos:column="35"/></condition><then pos:line="8" pos:column="35"> <block pos:line="8" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">error<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><literal type="string" pos:line="9" pos:column="23">"Object %s is a %s, not a blob"<pos:position pos:line="9" pos:column="54"/></literal></expr></argument>,
		      <argument><expr><call><name pos:line="10" pos:column="23">sha1_to_hex<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><name pos:line="10" pos:column="35">sha1<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name><typename pos:line="10" pos:column="42">typename<pos:position pos:line="10" pos:column="50"/></typename></name><operator pos:line="10" pos:column="50">(<pos:position pos:line="10" pos:column="51"/></operator><name><name pos:line="10" pos:column="51">obj<pos:position pos:line="10" pos:column="54"/></name><operator pos:line="10" pos:column="54">-&gt;<pos:position pos:line="10" pos:column="59"/></operator><name pos:line="10" pos:column="56">type<pos:position pos:line="10" pos:column="60"/></name></name><operator pos:line="10" pos:column="60">)<pos:position pos:line="10" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="10" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="63"/></expr_stmt>
		<return pos:line="11" pos:column="17">return <expr><name pos:line="11" pos:column="24">NULL<pos:position pos:line="11" pos:column="28"/></name></expr>;<pos:position pos:line="11" pos:column="29"/></return>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>
	<return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator>struct <name pos:line="13" pos:column="24">blob<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">*<pos:position pos:line="13" pos:column="30"/></operator><operator pos:line="13" pos:column="30">)<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="32">obj<pos:position pos:line="13" pos:column="35"/></name></expr>;<pos:position pos:line="13" pos:column="36"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
