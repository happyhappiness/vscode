<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3845_git-2.12.5.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">cache_entry<pos:position pos:line="1" pos:column="19"/></name></name> <modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier></type><name pos:line="1" pos:column="21">index_file_exists<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">index_state<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">istate<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="67">const<pos:position pos:line="1" pos:column="72"/></specifier> <name pos:line="1" pos:column="73">char<pos:position pos:line="1" pos:column="77"/></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">name<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="85">int<pos:position pos:line="1" pos:column="88"/></name></type> <name pos:line="1" pos:column="89">namelen<pos:position pos:line="1" pos:column="96"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="98">int<pos:position pos:line="1" pos:column="101"/></name></type> <name pos:line="1" pos:column="102">icase<pos:position pos:line="1" pos:column="107"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="108"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">cache_entry<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">ce<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">lazy_init_name_hash<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">istate<pos:position pos:line="5" pos:column="35"/></name></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">ce<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">hashmap_get_from_hash<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><operator pos:line="7" pos:column="36">&amp;<pos:position pos:line="7" pos:column="41"/></operator><name><name pos:line="7" pos:column="37">istate<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">-&gt;<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="45">name_hash<pos:position pos:line="7" pos:column="54"/></name></name></expr></argument>,
				   <argument><expr><call><name pos:line="8" pos:column="36">memihash<pos:position pos:line="8" pos:column="44"/></name><argument_list pos:line="8" pos:column="44">(<argument><expr><name pos:line="8" pos:column="45">name<pos:position pos:line="8" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="51">namelen<pos:position pos:line="8" pos:column="58"/></name></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="8" pos:column="61">NULL<pos:position pos:line="8" pos:column="65"/></name></expr></argument>)<pos:position pos:line="8" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="67"/></expr_stmt>
	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><name pos:line="9" pos:column="16">ce<pos:position pos:line="9" pos:column="18"/></name></expr>)<pos:position pos:line="9" pos:column="19"/></condition> <block pos:line="9" pos:column="20">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">same_name<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">ce<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="35">name<pos:position pos:line="10" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="41">namelen<pos:position pos:line="10" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="50">icase<pos:position pos:line="10" pos:column="55"/></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="57"/></condition><then pos:line="10" pos:column="57">
			<block type="pseudo"><return pos:line="11" pos:column="25">return <expr><name pos:line="11" pos:column="32">ce<pos:position pos:line="11" pos:column="34"/></name></expr>;<pos:position pos:line="11" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="12" pos:column="17">ce<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <call><name pos:line="12" pos:column="22">hashmap_get_next<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><operator pos:line="12" pos:column="39">&amp;<pos:position pos:line="12" pos:column="44"/></operator><name><name pos:line="12" pos:column="40">istate<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">-&gt;<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="48">name_hash<pos:position pos:line="12" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="59">ce<pos:position pos:line="12" pos:column="61"/></name></expr></argument>)<pos:position pos:line="12" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></while>
	<return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">NULL<pos:position pos:line="14" pos:column="20"/></name></expr>;<pos:position pos:line="14" pos:column="21"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
