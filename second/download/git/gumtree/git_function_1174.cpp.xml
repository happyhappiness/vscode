<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1174.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">atfork_prepare<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">atfork_state<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">as<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">sigset_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">all<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">sigfillset<pos:position pos:line="5" pos:column="23"/></name><argument_list pos:line="5" pos:column="23">(<argument><expr><operator pos:line="5" pos:column="24">&amp;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="25">all<pos:position pos:line="5" pos:column="28"/></name></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="30"/></condition><then pos:line="5" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="17">die_errno<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><literal type="string" pos:line="6" pos:column="27">"sigfillset"<pos:position pos:line="6" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="41"/></expr_stmt></block></then></if>
<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">NO_PTHREADS<pos:position pos:line="7" pos:column="19"/></name></cpp:ifdef>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">sigprocmask<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">SIG_SETMASK<pos:position pos:line="8" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="38">&amp;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="39">all<pos:position pos:line="8" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="44">&amp;<pos:position pos:line="8" pos:column="49"/></operator><name><name pos:line="8" pos:column="45">as<pos:position pos:line="8" pos:column="47"/></name><operator pos:line="8" pos:column="47">-&gt;<pos:position pos:line="8" pos:column="52"/></operator><name pos:line="8" pos:column="49">old<pos:position pos:line="8" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="54"/></condition><then pos:line="8" pos:column="54">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">die_errno<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><literal type="string" pos:line="9" pos:column="27">"sigprocmask"<pos:position pos:line="9" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt></block></then></if>
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">bug_die<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><call><name pos:line="11" pos:column="17">pthread_sigmask<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><name pos:line="11" pos:column="33">SIG_SETMASK<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="46">&amp;<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="47">all<pos:position pos:line="11" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="52">&amp;<pos:position pos:line="11" pos:column="57"/></operator><name><name pos:line="11" pos:column="53">as<pos:position pos:line="11" pos:column="55"/></name><operator pos:line="11" pos:column="55">-&gt;<pos:position pos:line="11" pos:column="60"/></operator><name pos:line="11" pos:column="57">old<pos:position pos:line="11" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr></argument>,
		<argument><expr><literal type="string" pos:line="12" pos:column="17">"blocking all signals"<pos:position pos:line="12" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">bug_die<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><call><name pos:line="13" pos:column="17">pthread_setcancelstate<pos:position pos:line="13" pos:column="39"/></name><argument_list pos:line="13" pos:column="39">(<argument><expr><name pos:line="13" pos:column="40">PTHREAD_CANCEL_DISABLE<pos:position pos:line="13" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="64">&amp;<pos:position pos:line="13" pos:column="69"/></operator><name><name pos:line="13" pos:column="65">as<pos:position pos:line="13" pos:column="67"/></name><operator pos:line="13" pos:column="67">-&gt;<pos:position pos:line="13" pos:column="72"/></operator><name pos:line="13" pos:column="69">cs<pos:position pos:line="13" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="72"/></argument_list></call></expr></argument>,
		<argument><expr><literal type="string" pos:line="14" pos:column="17">"disabling cancellation"<pos:position pos:line="14" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
