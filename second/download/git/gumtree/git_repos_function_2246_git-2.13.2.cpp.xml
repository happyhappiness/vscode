<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2246_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fill<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">path<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">pathlen<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">basename_offset<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name><name pos:line="2" pos:column="23">struct<pos:position pos:line="2" pos:column="29"/></name> <name pos:line="2" pos:column="30">attr_stack<pos:position pos:line="2" pos:column="40"/></name></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">stack<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="3" pos:column="17">struct<pos:position pos:line="3" pos:column="23"/></name> <name pos:line="3" pos:column="24">all_attrs_item<pos:position pos:line="3" pos:column="38"/></name></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">all_attrs<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="51">int<pos:position pos:line="3" pos:column="54"/></name></type> <name pos:line="3" pos:column="55">rem<pos:position pos:line="3" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="59"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<for pos:line="5" pos:column="9">for <control pos:line="5" pos:column="13">(<init pos:line="5" pos:column="14">;<pos:position pos:line="5" pos:column="15"/></init> <condition><expr><name pos:line="5" pos:column="16">rem<pos:position pos:line="5" pos:column="19"/></name> <operator pos:line="5" pos:column="20">&gt;<pos:position pos:line="5" pos:column="24"/></operator> <literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal> <operator pos:line="5" pos:column="24">&amp;&amp;<pos:position pos:line="5" pos:column="34"/></operator> <name pos:line="5" pos:column="27">stack<pos:position pos:line="5" pos:column="32"/></name></expr>;<pos:position pos:line="5" pos:column="33"/></condition> <incr><expr><name pos:line="5" pos:column="34">stack<pos:position pos:line="5" pos:column="39"/></name> <operator pos:line="5" pos:column="40">=<pos:position pos:line="5" pos:column="41"/></operator> <name><name pos:line="5" pos:column="42">stack<pos:position pos:line="5" pos:column="47"/></name><operator pos:line="5" pos:column="47">-&gt;<pos:position pos:line="5" pos:column="52"/></operator><name pos:line="5" pos:column="49">prev<pos:position pos:line="5" pos:column="53"/></name></name></expr></incr>)<pos:position pos:line="5" pos:column="54"/></control> <block pos:line="5" pos:column="55">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">int<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">i<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="7" pos:column="17">const<pos:position pos:line="7" pos:column="22"/></specifier> <name pos:line="7" pos:column="23">char<pos:position pos:line="7" pos:column="27"/></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">base<pos:position pos:line="7" pos:column="33"/></name> <init pos:line="7" pos:column="34">= <expr><ternary><condition><expr><name><name pos:line="7" pos:column="36">stack<pos:position pos:line="7" pos:column="41"/></name><operator pos:line="7" pos:column="41">-&gt;<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="43">origin<pos:position pos:line="7" pos:column="49"/></name></name></expr> ?<pos:position pos:line="7" pos:column="51"/></condition><then pos:line="7" pos:column="51"> <expr><name><name pos:line="7" pos:column="52">stack<pos:position pos:line="7" pos:column="57"/></name><operator pos:line="7" pos:column="57">-&gt;<pos:position pos:line="7" pos:column="62"/></operator><name pos:line="7" pos:column="59">origin<pos:position pos:line="7" pos:column="65"/></name></name></expr> <pos:position pos:line="7" pos:column="66"/></then><else pos:line="7" pos:column="66">: <expr><literal type="string" pos:line="7" pos:column="68">""<pos:position pos:line="7" pos:column="70"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="7" pos:column="71"/></decl_stmt>

		<for pos:line="9" pos:column="17">for <control pos:line="9" pos:column="21">(<init><expr><name pos:line="9" pos:column="22">i<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">=<pos:position pos:line="9" pos:column="25"/></operator> <name><name pos:line="9" pos:column="26">stack<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">num_matches<pos:position pos:line="9" pos:column="44"/></name></name> <operator pos:line="9" pos:column="45">-<pos:position pos:line="9" pos:column="46"/></operator> <literal type="number" pos:line="9" pos:column="47">1<pos:position pos:line="9" pos:column="48"/></literal></expr>;<pos:position pos:line="9" pos:column="49"/></init> <condition><expr><literal type="number" pos:line="9" pos:column="50">0<pos:position pos:line="9" pos:column="51"/></literal> <operator pos:line="9" pos:column="52">&lt;<pos:position pos:line="9" pos:column="56"/></operator> <name pos:line="9" pos:column="54">rem<pos:position pos:line="9" pos:column="57"/></name> <operator pos:line="9" pos:column="58">&amp;&amp;<pos:position pos:line="9" pos:column="68"/></operator> <literal type="number" pos:line="9" pos:column="61">0<pos:position pos:line="9" pos:column="62"/></literal> <operator pos:line="9" pos:column="63">&lt;=<pos:position pos:line="9" pos:column="68"/></operator> <name pos:line="9" pos:column="66">i<pos:position pos:line="9" pos:column="67"/></name></expr>;<pos:position pos:line="9" pos:column="68"/></condition> <incr><expr><name pos:line="9" pos:column="69">i<pos:position pos:line="9" pos:column="70"/></name><operator pos:line="9" pos:column="70">--<pos:position pos:line="9" pos:column="72"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="73"/></control> <block pos:line="9" pos:column="74">{
			<decl_stmt><decl><type><specifier pos:line="10" pos:column="25">const<pos:position pos:line="10" pos:column="30"/></specifier> <name><name pos:line="10" pos:column="31">struct<pos:position pos:line="10" pos:column="37"/></name> <name pos:line="10" pos:column="38">match_attr<pos:position pos:line="10" pos:column="48"/></name></name> <modifier pos:line="10" pos:column="49">*<pos:position pos:line="10" pos:column="50"/></modifier></type><name pos:line="10" pos:column="50">a<pos:position pos:line="10" pos:column="51"/></name> <init pos:line="10" pos:column="52">= <expr><name><name pos:line="10" pos:column="54">stack<pos:position pos:line="10" pos:column="59"/></name><operator pos:line="10" pos:column="59">-&gt;<pos:position pos:line="10" pos:column="64"/></operator><name pos:line="10" pos:column="61">attrs<pos:position pos:line="10" pos:column="66"/></name><index pos:line="10" pos:column="66">[<expr><name pos:line="10" pos:column="67">i<pos:position pos:line="10" pos:column="68"/></name></expr>]<pos:position pos:line="10" pos:column="69"/></index></name></expr></init></decl>;<pos:position pos:line="10" pos:column="70"/></decl_stmt>
			<if pos:line="11" pos:column="25">if <condition pos:line="11" pos:column="28">(<expr><name><name pos:line="11" pos:column="29">a<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">-&gt;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="32">is_macro<pos:position pos:line="11" pos:column="40"/></name></name></expr>)<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41">
				<block type="pseudo"><continue pos:line="12" pos:column="33">continue;<pos:position pos:line="12" pos:column="42"/></continue></block></then></if>
			<if pos:line="13" pos:column="25">if <condition pos:line="13" pos:column="28">(<expr><call><name pos:line="13" pos:column="29">path_matches<pos:position pos:line="13" pos:column="41"/></name><argument_list pos:line="13" pos:column="41">(<argument><expr><name pos:line="13" pos:column="42">path<pos:position pos:line="13" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="48">pathlen<pos:position pos:line="13" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="57">basename_offset<pos:position pos:line="13" pos:column="72"/></name></expr></argument>,
					 <argument><expr><operator pos:line="14" pos:column="42">&amp;<pos:position pos:line="14" pos:column="47"/></operator><name><name pos:line="14" pos:column="43">a<pos:position pos:line="14" pos:column="44"/></name><operator pos:line="14" pos:column="44">-&gt;<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="46">u<pos:position pos:line="14" pos:column="47"/></name><operator pos:line="14" pos:column="47">.<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="48">pat<pos:position pos:line="14" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="53">base<pos:position pos:line="14" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="59">stack<pos:position pos:line="14" pos:column="64"/></name><operator pos:line="14" pos:column="64">-&gt;<pos:position pos:line="14" pos:column="69"/></operator><name pos:line="14" pos:column="66">originlen<pos:position pos:line="14" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="77"/></condition><then pos:line="14" pos:column="77">
				<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="33">rem<pos:position pos:line="15" pos:column="36"/></name> <operator pos:line="15" pos:column="37">=<pos:position pos:line="15" pos:column="38"/></operator> <call><name pos:line="15" pos:column="39">fill_one<pos:position pos:line="15" pos:column="47"/></name><argument_list pos:line="15" pos:column="47">(<argument><expr><literal type="string" pos:line="15" pos:column="48">"fill"<pos:position pos:line="15" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="56">all_attrs<pos:position pos:line="15" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="67">a<pos:position pos:line="15" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="70">rem<pos:position pos:line="15" pos:column="73"/></name></expr></argument>)<pos:position pos:line="15" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="75"/></expr_stmt></block></then></if>
		}<pos:position pos:line="16" pos:column="18"/></block></for>
	}<pos:position pos:line="17" pos:column="10"/></block></for>

	<return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">rem<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
