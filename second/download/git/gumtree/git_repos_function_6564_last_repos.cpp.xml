<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6564_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_props<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">strbuf<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">key<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name pos:line="3" pos:column="36">STRBUF_INIT<pos:position pos:line="3" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name><name pos:line="4" pos:column="16">struct<pos:position pos:line="4" pos:column="22"/></name> <name pos:line="4" pos:column="23">strbuf<pos:position pos:line="4" pos:column="29"/></name></name></type> <name pos:line="4" pos:column="30">val<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><name pos:line="4" pos:column="36">STRBUF_INIT<pos:position pos:line="4" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">t<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<comment type="block" pos:line="6" pos:column="9">/*
	 * NEEDSWORK: to support simple mode changes like
	 *	K 11
	 *	svn:special
	 *	V 1
	 *	*
	 *	D 14
	 *	svn:executable
	 * we keep track of whether a mode has been set and reset to
	 * plain file only if not.  We should be keeping track of the
	 * symlink and executable bits separately instead.
	 */</comment>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">uint32_t<pos:position pos:line="18" pos:column="17"/></name></type> <name pos:line="18" pos:column="18">type_set<pos:position pos:line="18" pos:column="26"/></name> <init pos:line="18" pos:column="27">= <expr><literal type="number" pos:line="18" pos:column="29">0<pos:position pos:line="18" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="31"/></decl_stmt>
	<while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">t<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <call><name pos:line="19" pos:column="21">buffer_read_line<pos:position pos:line="19" pos:column="37"/></name><argument_list pos:line="19" pos:column="37">(<argument><expr><operator pos:line="19" pos:column="38">&amp;<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="39">input<pos:position pos:line="19" pos:column="44"/></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call><operator pos:line="19" pos:column="45">)<pos:position pos:line="19" pos:column="46"/></operator> <operator pos:line="19" pos:column="47">&amp;&amp;<pos:position pos:line="19" pos:column="57"/></operator> <call><name pos:line="19" pos:column="50">strcmp<pos:position pos:line="19" pos:column="56"/></name><argument_list pos:line="19" pos:column="56">(<argument><expr><name pos:line="19" pos:column="57">t<pos:position pos:line="19" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="60">"PROPS-END"<pos:position pos:line="19" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="73"/></condition> <block pos:line="19" pos:column="74">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">uint32_t<pos:position pos:line="20" pos:column="25"/></name></type> <name pos:line="20" pos:column="26">len<pos:position pos:line="20" pos:column="29"/></name></decl>;<pos:position pos:line="20" pos:column="30"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="21" pos:column="17">const<pos:position pos:line="21" pos:column="22"/></specifier> <name pos:line="21" pos:column="23">char<pos:position pos:line="21" pos:column="27"/></name></type> <name pos:line="21" pos:column="28">type<pos:position pos:line="21" pos:column="32"/></name> <init pos:line="21" pos:column="33">= <expr><name><name pos:line="21" pos:column="35">t<pos:position pos:line="21" pos:column="36"/></name><index pos:line="21" pos:column="36">[<expr><literal type="number" pos:line="21" pos:column="37">0<pos:position pos:line="21" pos:column="38"/></literal></expr>]<pos:position pos:line="21" pos:column="39"/></index></name></expr></init></decl>;<pos:position pos:line="21" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">int<pos:position pos:line="22" pos:column="20"/></name></type> <name pos:line="22" pos:column="21">ch<pos:position pos:line="22" pos:column="23"/></name></decl>;<pos:position pos:line="22" pos:column="24"/></decl_stmt>

		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">type<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">||<pos:position pos:line="24" pos:column="29"/></operator> <name><name pos:line="24" pos:column="30">t<pos:position pos:line="24" pos:column="31"/></name><index pos:line="24" pos:column="31">[<expr><literal type="number" pos:line="24" pos:column="32">1<pos:position pos:line="24" pos:column="33"/></literal></expr>]<pos:position pos:line="24" pos:column="34"/></index></name> <operator pos:line="24" pos:column="35">!=<pos:position pos:line="24" pos:column="37"/></operator> <literal type="char" pos:line="24" pos:column="38">' '<pos:position pos:line="24" pos:column="41"/></literal></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">die<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><literal type="string" pos:line="25" pos:column="29">"invalid property line: %s"<pos:position pos:line="25" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="58">t<pos:position pos:line="25" pos:column="59"/></name></expr></argument>)<pos:position pos:line="25" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="61"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="26" pos:column="17">len<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <call><name pos:line="26" pos:column="23">atoi<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><operator pos:line="26" pos:column="28">&amp;<pos:position pos:line="26" pos:column="33"/></operator><name><name pos:line="26" pos:column="29">t<pos:position pos:line="26" pos:column="30"/></name><index pos:line="26" pos:column="30">[<expr><literal type="number" pos:line="26" pos:column="31">2<pos:position pos:line="26" pos:column="32"/></literal></expr>]<pos:position pos:line="26" pos:column="33"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">strbuf_reset<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><operator pos:line="27" pos:column="30">&amp;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="31">val<pos:position pos:line="27" pos:column="34"/></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">buffer_read_binary<pos:position pos:line="28" pos:column="35"/></name><argument_list pos:line="28" pos:column="35">(<argument><expr><operator pos:line="28" pos:column="36">&amp;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="37">input<pos:position pos:line="28" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="44">&amp;<pos:position pos:line="28" pos:column="49"/></operator><name pos:line="28" pos:column="45">val<pos:position pos:line="28" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="50">len<pos:position pos:line="28" pos:column="53"/></name></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="55"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name><name pos:line="29" pos:column="21">val<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">.<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">len<pos:position pos:line="29" pos:column="28"/></name></name> <operator pos:line="29" pos:column="29">&lt;<pos:position pos:line="29" pos:column="33"/></operator> <name pos:line="29" pos:column="31">len<pos:position pos:line="29" pos:column="34"/></name></expr>)<pos:position pos:line="29" pos:column="35"/></condition><then pos:line="29" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="25">die_short_read<pos:position pos:line="30" pos:column="39"/></name><argument_list pos:line="30" pos:column="39">()<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="32" pos:column="17">/* Discard trailing newline. */</comment>
		<expr_stmt><expr><name pos:line="33" pos:column="17">ch<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <call><name pos:line="33" pos:column="22">buffer_read_char<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><operator pos:line="33" pos:column="39">&amp;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="40">input<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">ch<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">==<pos:position pos:line="34" pos:column="26"/></operator> <name pos:line="34" pos:column="27">EOF<pos:position pos:line="34" pos:column="30"/></name></expr>)<pos:position pos:line="34" pos:column="31"/></condition><then pos:line="34" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="25">die_short_read<pos:position pos:line="35" pos:column="39"/></name><argument_list pos:line="35" pos:column="39">()<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt></block></then></if>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">ch<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">!=<pos:position pos:line="36" pos:column="26"/></operator> <literal type="char" pos:line="36" pos:column="27">'\n'<pos:position pos:line="36" pos:column="31"/></literal></expr>)<pos:position pos:line="36" pos:column="32"/></condition><then pos:line="36" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="25">die<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><literal type="string" pos:line="37" pos:column="29">"invalid dump: expected newline after %s"<pos:position pos:line="37" pos:column="70"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="72">val<pos:position pos:line="37" pos:column="75"/></name><operator pos:line="37" pos:column="75">.<pos:position pos:line="37" pos:column="76"/></operator><name pos:line="37" pos:column="76">buf<pos:position pos:line="37" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="81"/></expr_stmt></block></then></if>

		<switch pos:line="39" pos:column="17">switch <condition pos:line="39" pos:column="24">(<expr><name pos:line="39" pos:column="25">type<pos:position pos:line="39" pos:column="29"/></name></expr>)<pos:position pos:line="39" pos:column="30"/></condition> <block pos:line="39" pos:column="31">{
		<case pos:line="40" pos:column="17">case <expr><literal type="char" pos:line="40" pos:column="22">'K'<pos:position pos:line="40" pos:column="25"/></literal></expr>:<pos:position pos:line="40" pos:column="26"/></case>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">strbuf_swap<pos:position pos:line="41" pos:column="36"/></name><argument_list pos:line="41" pos:column="36">(<argument><expr><operator pos:line="41" pos:column="37">&amp;<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="38">key<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="43">&amp;<pos:position pos:line="41" pos:column="48"/></operator><name pos:line="41" pos:column="44">val<pos:position pos:line="41" pos:column="47"/></name></expr></argument>)<pos:position pos:line="41" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="49"/></expr_stmt>
			<continue pos:line="42" pos:column="25">continue;<pos:position pos:line="42" pos:column="34"/></continue>
		<case pos:line="43" pos:column="17">case <expr><literal type="char" pos:line="43" pos:column="22">'D'<pos:position pos:line="43" pos:column="25"/></literal></expr>:<pos:position pos:line="43" pos:column="26"/></case>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">handle_property<pos:position pos:line="44" pos:column="40"/></name><argument_list pos:line="44" pos:column="40">(<argument><expr><operator pos:line="44" pos:column="41">&amp;<pos:position pos:line="44" pos:column="46"/></operator><name pos:line="44" pos:column="42">val<pos:position pos:line="44" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="47">NULL<pos:position pos:line="44" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="53">&amp;<pos:position pos:line="44" pos:column="58"/></operator><name pos:line="44" pos:column="54">type_set<pos:position pos:line="44" pos:column="62"/></name></expr></argument>)<pos:position pos:line="44" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="64"/></expr_stmt>
			<continue pos:line="45" pos:column="25">continue;<pos:position pos:line="45" pos:column="34"/></continue>
		<case pos:line="46" pos:column="17">case <expr><literal type="char" pos:line="46" pos:column="22">'V'<pos:position pos:line="46" pos:column="25"/></literal></expr>:<pos:position pos:line="46" pos:column="26"/></case>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">handle_property<pos:position pos:line="47" pos:column="40"/></name><argument_list pos:line="47" pos:column="40">(<argument><expr><operator pos:line="47" pos:column="41">&amp;<pos:position pos:line="47" pos:column="46"/></operator><name pos:line="47" pos:column="42">key<pos:position pos:line="47" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="47">&amp;<pos:position pos:line="47" pos:column="52"/></operator><name pos:line="47" pos:column="48">val<pos:position pos:line="47" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="53">&amp;<pos:position pos:line="47" pos:column="58"/></operator><name pos:line="47" pos:column="54">type_set<pos:position pos:line="47" pos:column="62"/></name></expr></argument>)<pos:position pos:line="47" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">strbuf_reset<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><operator pos:line="48" pos:column="38">&amp;<pos:position pos:line="48" pos:column="43"/></operator><name pos:line="48" pos:column="39">key<pos:position pos:line="48" pos:column="42"/></name></expr></argument>)<pos:position pos:line="48" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="44"/></expr_stmt>
			<continue pos:line="49" pos:column="25">continue;<pos:position pos:line="49" pos:column="34"/></continue>
		<default pos:line="50" pos:column="17">default:<pos:position pos:line="50" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">die<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><literal type="string" pos:line="51" pos:column="29">"invalid property line: %s"<pos:position pos:line="51" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="58">t<pos:position pos:line="51" pos:column="59"/></name></expr></argument>)<pos:position pos:line="51" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></switch>
	}<pos:position pos:line="53" pos:column="10"/></block></while>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
