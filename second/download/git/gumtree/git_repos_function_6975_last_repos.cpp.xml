<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6975_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">check_arrival_add_next_nodes<pos:position pos:line="3" pos:column="29"/></name> <parameter_list pos:line="3" pos:column="30">(<parameter><decl><type><name pos:line="3" pos:column="31">re_match_context_t<pos:position pos:line="3" pos:column="49"/></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">mctx<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="57">int<pos:position pos:line="3" pos:column="60"/></name></type> <name pos:line="3" pos:column="61">str_idx<pos:position pos:line="3" pos:column="68"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="4" pos:column="31">re_node_set<pos:position pos:line="4" pos:column="42"/></name> <modifier pos:line="4" pos:column="43">*<pos:position pos:line="4" pos:column="44"/></modifier></type><name pos:line="4" pos:column="44">cur_nodes<pos:position pos:line="4" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="55">re_node_set<pos:position pos:line="4" pos:column="66"/></name> <modifier pos:line="4" pos:column="67">*<pos:position pos:line="4" pos:column="68"/></modifier></type><name pos:line="4" pos:column="68">next_nodes<pos:position pos:line="4" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="79"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">re_dfa_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier><specifier pos:line="6" pos:column="19">const<pos:position pos:line="6" pos:column="24"/></specifier></type> <name pos:line="6" pos:column="25">dfa<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name><name pos:line="6" pos:column="31">mctx<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">dfa<pos:position pos:line="6" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">result<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">cur_idx<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="9" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">reg_errcode_t<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">err<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><name pos:line="10" pos:column="23">REG_NOERROR<pos:position pos:line="10" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">re_node_set<pos:position pos:line="12" pos:column="14"/></name></type> <name pos:line="12" pos:column="15">union_set<pos:position pos:line="12" pos:column="24"/></name></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">re_node_set_init_empty<pos:position pos:line="13" pos:column="25"/></name> <argument_list pos:line="13" pos:column="26">(<argument><expr><operator pos:line="13" pos:column="27">&amp;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="28">union_set<pos:position pos:line="13" pos:column="37"/></name></expr></argument>)<pos:position pos:line="13" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="39"/></expr_stmt>
  <for pos:line="14" pos:column="3">for <control pos:line="14" pos:column="7">(<init><expr><name pos:line="14" pos:column="8">cur_idx<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <literal type="number" pos:line="14" pos:column="18">0<pos:position pos:line="14" pos:column="19"/></literal></expr>;<pos:position pos:line="14" pos:column="20"/></init> <condition><expr><name pos:line="14" pos:column="21">cur_idx<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">&lt;<pos:position pos:line="14" pos:column="33"/></operator> <name><name pos:line="14" pos:column="31">cur_nodes<pos:position pos:line="14" pos:column="40"/></name><operator pos:line="14" pos:column="40">-&gt;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="42">nelem<pos:position pos:line="14" pos:column="47"/></name></name></expr>;<pos:position pos:line="14" pos:column="48"/></condition> <incr><expr><operator pos:line="14" pos:column="49">++<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="51">cur_idx<pos:position pos:line="14" pos:column="58"/></name></expr></incr>)<pos:position pos:line="14" pos:column="59"/></control>
    <block pos:line="15" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="16" pos:column="7">int<pos:position pos:line="16" pos:column="10"/></name></type> <name pos:line="16" pos:column="11">naccepted<pos:position pos:line="16" pos:column="20"/></name> <init pos:line="16" pos:column="21">= <expr><literal type="number" pos:line="16" pos:column="23">0<pos:position pos:line="16" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="17" pos:column="7">int<pos:position pos:line="17" pos:column="10"/></name></type> <name pos:line="17" pos:column="11">cur_node<pos:position pos:line="17" pos:column="19"/></name> <init pos:line="17" pos:column="20">= <expr><name><name pos:line="17" pos:column="22">cur_nodes<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">elems<pos:position pos:line="17" pos:column="38"/></name><index pos:line="17" pos:column="38">[<expr><name pos:line="17" pos:column="39">cur_idx<pos:position pos:line="17" pos:column="46"/></name></expr>]<pos:position pos:line="17" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="17" pos:column="48"/></decl_stmt>
<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef<pos:position pos:line="18" pos:column="7"/></cpp:directive> <name pos:line="18" pos:column="8">DEBUG<pos:position pos:line="18" pos:column="13"/></name></cpp:ifdef>
      <decl_stmt><decl><type><name pos:line="19" pos:column="7">re_token_type_t<pos:position pos:line="19" pos:column="22"/></name></type> <name pos:line="19" pos:column="23">type<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><name><name pos:line="19" pos:column="30">dfa<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">-&gt;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="35">nodes<pos:position pos:line="19" pos:column="40"/></name><index pos:line="19" pos:column="40">[<expr><name pos:line="19" pos:column="41">cur_node<pos:position pos:line="19" pos:column="49"/></name></expr>]<pos:position pos:line="19" pos:column="50"/></index></name><operator pos:line="19" pos:column="50">.<pos:position pos:line="19" pos:column="51"/></operator><name pos:line="19" pos:column="51">type<pos:position pos:line="19" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="56"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">assert<pos:position pos:line="20" pos:column="13"/></name> <argument_list pos:line="20" pos:column="14">(<argument><expr><operator pos:line="20" pos:column="15">!<pos:position pos:line="20" pos:column="16"/></operator><call><name pos:line="20" pos:column="16">IS_EPSILON_NODE<pos:position pos:line="20" pos:column="31"/></name> <argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">type<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifdef<pos:position pos:line="22" pos:column="7"/></cpp:directive> <name pos:line="22" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="22" pos:column="22"/></name></cpp:ifdef>
      <comment type="block" pos:line="23" pos:column="7">/* If the node may accept `multi byte'.  */</comment>
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><name><name pos:line="24" pos:column="11">dfa<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">-&gt;<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="16">nodes<pos:position pos:line="24" pos:column="21"/></name><index pos:line="24" pos:column="21">[<expr><name pos:line="24" pos:column="22">cur_node<pos:position pos:line="24" pos:column="30"/></name></expr>]<pos:position pos:line="24" pos:column="31"/></index></name><operator pos:line="24" pos:column="31">.<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="32">accept_mb<pos:position pos:line="24" pos:column="41"/></name></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42">
	<block pos:line="25" pos:column="9">{
	  <expr_stmt><expr><name pos:line="26" pos:column="11">naccepted<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <call><name pos:line="26" pos:column="23">check_node_accept_bytes<pos:position pos:line="26" pos:column="46"/></name> <argument_list pos:line="26" pos:column="47">(<argument><expr><name pos:line="26" pos:column="48">dfa<pos:position pos:line="26" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="53">cur_node<pos:position pos:line="26" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="63">&amp;<pos:position pos:line="26" pos:column="68"/></operator><name><name pos:line="26" pos:column="64">mctx<pos:position pos:line="26" pos:column="68"/></name><operator pos:line="26" pos:column="68">-&gt;<pos:position pos:line="26" pos:column="73"/></operator><name pos:line="26" pos:column="70">input<pos:position pos:line="26" pos:column="75"/></name></name></expr></argument>,
					       <argument><expr><name pos:line="27" pos:column="48">str_idx<pos:position pos:line="27" pos:column="55"/></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="57"/></expr_stmt>
	  <if pos:line="28" pos:column="11">if <condition pos:line="28" pos:column="14">(<expr><name pos:line="28" pos:column="15">naccepted<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">&gt;<pos:position pos:line="28" pos:column="29"/></operator> <literal type="number" pos:line="28" pos:column="27">1<pos:position pos:line="28" pos:column="28"/></literal></expr>)<pos:position pos:line="28" pos:column="29"/></condition><then pos:line="28" pos:column="29">
	    <block pos:line="29" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="30" pos:column="15">re_dfastate_t<pos:position pos:line="30" pos:column="28"/></name> <modifier pos:line="30" pos:column="29">*<pos:position pos:line="30" pos:column="30"/></modifier></type><name pos:line="30" pos:column="30">dest_state<pos:position pos:line="30" pos:column="40"/></name></decl>;<pos:position pos:line="30" pos:column="41"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="31" pos:column="15">int<pos:position pos:line="31" pos:column="18"/></name></type> <name pos:line="31" pos:column="19">next_node<pos:position pos:line="31" pos:column="28"/></name> <init pos:line="31" pos:column="29">= <expr><name><name pos:line="31" pos:column="31">dfa<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">-&gt;<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="36">nexts<pos:position pos:line="31" pos:column="41"/></name><index pos:line="31" pos:column="41">[<expr><name pos:line="31" pos:column="42">cur_node<pos:position pos:line="31" pos:column="50"/></name></expr>]<pos:position pos:line="31" pos:column="51"/></index></name></expr></init></decl>;<pos:position pos:line="31" pos:column="52"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="32" pos:column="15">int<pos:position pos:line="32" pos:column="18"/></name></type> <name pos:line="32" pos:column="19">next_idx<pos:position pos:line="32" pos:column="27"/></name> <init pos:line="32" pos:column="28">= <expr><name pos:line="32" pos:column="30">str_idx<pos:position pos:line="32" pos:column="37"/></name> <operator pos:line="32" pos:column="38">+<pos:position pos:line="32" pos:column="39"/></operator> <name pos:line="32" pos:column="40">naccepted<pos:position pos:line="32" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="50"/></decl_stmt>
	      <expr_stmt><expr><name pos:line="33" pos:column="15">dest_state<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">=<pos:position pos:line="33" pos:column="27"/></operator> <name><name pos:line="33" pos:column="28">mctx<pos:position pos:line="33" pos:column="32"/></name><operator pos:line="33" pos:column="32">-&gt;<pos:position pos:line="33" pos:column="37"/></operator><name pos:line="33" pos:column="34">state_log<pos:position pos:line="33" pos:column="43"/></name><index pos:line="33" pos:column="43">[<expr><name pos:line="33" pos:column="44">next_idx<pos:position pos:line="33" pos:column="52"/></name></expr>]<pos:position pos:line="33" pos:column="53"/></index></name></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
	      <expr_stmt><expr><call><name pos:line="34" pos:column="15">re_node_set_empty<pos:position pos:line="34" pos:column="32"/></name> <argument_list pos:line="34" pos:column="33">(<argument><expr><operator pos:line="34" pos:column="34">&amp;<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="35">union_set<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>
	      <if pos:line="35" pos:column="15">if <condition pos:line="35" pos:column="18">(<expr><name pos:line="35" pos:column="19">dest_state<pos:position pos:line="35" pos:column="29"/></name></expr>)<pos:position pos:line="35" pos:column="30"/></condition><then pos:line="35" pos:column="30">
		<block pos:line="36" pos:column="17">{
		  <expr_stmt><expr><name pos:line="37" pos:column="19">err<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">=<pos:position pos:line="37" pos:column="24"/></operator> <call><name pos:line="37" pos:column="25">re_node_set_merge<pos:position pos:line="37" pos:column="42"/></name> <argument_list pos:line="37" pos:column="43">(<argument><expr><operator pos:line="37" pos:column="44">&amp;<pos:position pos:line="37" pos:column="49"/></operator><name pos:line="37" pos:column="45">union_set<pos:position pos:line="37" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="56">&amp;<pos:position pos:line="37" pos:column="61"/></operator><name><name pos:line="37" pos:column="57">dest_state<pos:position pos:line="37" pos:column="67"/></name><operator pos:line="37" pos:column="67">-&gt;<pos:position pos:line="37" pos:column="72"/></operator><name pos:line="37" pos:column="69">nodes<pos:position pos:line="37" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="76"/></expr_stmt>
		  <if pos:line="38" pos:column="19">if <condition pos:line="38" pos:column="22">(<expr><call><name pos:line="38" pos:column="23">BE<pos:position pos:line="38" pos:column="25"/></name> <argument_list pos:line="38" pos:column="26">(<argument><expr><name pos:line="38" pos:column="27">err<pos:position pos:line="38" pos:column="30"/></name> <operator pos:line="38" pos:column="31">!=<pos:position pos:line="38" pos:column="33"/></operator> <name pos:line="38" pos:column="34">REG_NOERROR<pos:position pos:line="38" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="47">0<pos:position pos:line="38" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="50"/></condition><then pos:line="38" pos:column="50">
		    <block pos:line="39" pos:column="21">{
		      <expr_stmt><expr><call><name pos:line="40" pos:column="23">re_node_set_free<pos:position pos:line="40" pos:column="39"/></name> <argument_list pos:line="40" pos:column="40">(<argument><expr><operator pos:line="40" pos:column="41">&amp;<pos:position pos:line="40" pos:column="46"/></operator><name pos:line="40" pos:column="42">union_set<pos:position pos:line="40" pos:column="51"/></name></expr></argument>)<pos:position pos:line="40" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="53"/></expr_stmt>
		      <return pos:line="41" pos:column="23">return <expr><name pos:line="41" pos:column="30">err<pos:position pos:line="41" pos:column="33"/></name></expr>;<pos:position pos:line="41" pos:column="34"/></return>
		    }<pos:position pos:line="42" pos:column="22"/></block></then></if>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>
	      <expr_stmt><expr><name pos:line="44" pos:column="15">result<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">=<pos:position pos:line="44" pos:column="23"/></operator> <call><name pos:line="44" pos:column="24">re_node_set_insert<pos:position pos:line="44" pos:column="42"/></name> <argument_list pos:line="44" pos:column="43">(<argument><expr><operator pos:line="44" pos:column="44">&amp;<pos:position pos:line="44" pos:column="49"/></operator><name pos:line="44" pos:column="45">union_set<pos:position pos:line="44" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="56">next_node<pos:position pos:line="44" pos:column="65"/></name></expr></argument>)<pos:position pos:line="44" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="67"/></expr_stmt>
	      <if pos:line="45" pos:column="15">if <condition pos:line="45" pos:column="18">(<expr><call><name pos:line="45" pos:column="19">BE<pos:position pos:line="45" pos:column="21"/></name> <argument_list pos:line="45" pos:column="22">(<argument><expr><name pos:line="45" pos:column="23">result<pos:position pos:line="45" pos:column="29"/></name> <operator pos:line="45" pos:column="30">&lt;<pos:position pos:line="45" pos:column="34"/></operator> <literal type="number" pos:line="45" pos:column="32">0<pos:position pos:line="45" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="35">0<pos:position pos:line="45" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="38"/></condition><then pos:line="45" pos:column="38">
		<block pos:line="46" pos:column="17">{
		  <expr_stmt><expr><call><name pos:line="47" pos:column="19">re_node_set_free<pos:position pos:line="47" pos:column="35"/></name> <argument_list pos:line="47" pos:column="36">(<argument><expr><operator pos:line="47" pos:column="37">&amp;<pos:position pos:line="47" pos:column="42"/></operator><name pos:line="47" pos:column="38">union_set<pos:position pos:line="47" pos:column="47"/></name></expr></argument>)<pos:position pos:line="47" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="49"/></expr_stmt>
		  <return pos:line="48" pos:column="19">return <expr><name pos:line="48" pos:column="26">REG_ESPACE<pos:position pos:line="48" pos:column="36"/></name></expr>;<pos:position pos:line="48" pos:column="37"/></return>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if>
	      <expr_stmt><expr><name><name pos:line="50" pos:column="15">mctx<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">-&gt;<pos:position pos:line="50" pos:column="24"/></operator><name pos:line="50" pos:column="21">state_log<pos:position pos:line="50" pos:column="30"/></name><index pos:line="50" pos:column="30">[<expr><name pos:line="50" pos:column="31">next_idx<pos:position pos:line="50" pos:column="39"/></name></expr>]<pos:position pos:line="50" pos:column="40"/></index></name> <operator pos:line="50" pos:column="41">=<pos:position pos:line="50" pos:column="42"/></operator> <call><name pos:line="50" pos:column="43">re_acquire_state<pos:position pos:line="50" pos:column="59"/></name> <argument_list pos:line="50" pos:column="60">(<argument><expr><operator pos:line="50" pos:column="61">&amp;<pos:position pos:line="50" pos:column="66"/></operator><name pos:line="50" pos:column="62">err<pos:position pos:line="50" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="67">dfa<pos:position pos:line="50" pos:column="70"/></name></expr></argument>,
							    <argument><expr><operator pos:line="51" pos:column="61">&amp;<pos:position pos:line="51" pos:column="66"/></operator><name pos:line="51" pos:column="62">union_set<pos:position pos:line="51" pos:column="71"/></name></expr></argument>)<pos:position pos:line="51" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="73"/></expr_stmt>
	      <if pos:line="52" pos:column="15">if <condition pos:line="52" pos:column="18">(<expr><call><name pos:line="52" pos:column="19">BE<pos:position pos:line="52" pos:column="21"/></name> <argument_list pos:line="52" pos:column="22">(<argument><expr><name><name pos:line="52" pos:column="23">mctx<pos:position pos:line="52" pos:column="27"/></name><operator pos:line="52" pos:column="27">-&gt;<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="29">state_log<pos:position pos:line="52" pos:column="38"/></name><index pos:line="52" pos:column="38">[<expr><name pos:line="52" pos:column="39">next_idx<pos:position pos:line="52" pos:column="47"/></name></expr>]<pos:position pos:line="52" pos:column="48"/></index></name> <operator pos:line="52" pos:column="49">==<pos:position pos:line="52" pos:column="51"/></operator> <name pos:line="52" pos:column="52">NULL<pos:position pos:line="52" pos:column="56"/></name>
		      <operator pos:line="53" pos:column="23">&amp;&amp;<pos:position pos:line="53" pos:column="33"/></operator> <name pos:line="53" pos:column="26">err<pos:position pos:line="53" pos:column="29"/></name> <operator pos:line="53" pos:column="30">!=<pos:position pos:line="53" pos:column="32"/></operator> <name pos:line="53" pos:column="33">REG_NOERROR<pos:position pos:line="53" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="46">0<pos:position pos:line="53" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="49"/></condition><then pos:line="53" pos:column="49">
		<block pos:line="54" pos:column="17">{
		  <expr_stmt><expr><call><name pos:line="55" pos:column="19">re_node_set_free<pos:position pos:line="55" pos:column="35"/></name> <argument_list pos:line="55" pos:column="36">(<argument><expr><operator pos:line="55" pos:column="37">&amp;<pos:position pos:line="55" pos:column="42"/></operator><name pos:line="55" pos:column="38">union_set<pos:position pos:line="55" pos:column="47"/></name></expr></argument>)<pos:position pos:line="55" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="49"/></expr_stmt>
		  <return pos:line="56" pos:column="19">return <expr><name pos:line="56" pos:column="26">err<pos:position pos:line="56" pos:column="29"/></name></expr>;<pos:position pos:line="56" pos:column="30"/></return>
		}<pos:position pos:line="57" pos:column="18"/></block></then></if>
	    }<pos:position pos:line="58" pos:column="14"/></block></then></if>
	}<pos:position pos:line="59" pos:column="10"/></block></then></if>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="60" pos:column="8">/* RE_ENABLE_I18N */</comment>
      <if pos:line="61" pos:column="7">if <condition pos:line="61" pos:column="10">(<expr><name pos:line="61" pos:column="11">naccepted<pos:position pos:line="61" pos:column="20"/></name>
	  <operator pos:line="62" pos:column="11">||<pos:position pos:line="62" pos:column="13"/></operator> <call><name pos:line="62" pos:column="14">check_node_accept<pos:position pos:line="62" pos:column="31"/></name> <argument_list pos:line="62" pos:column="32">(<argument><expr><name pos:line="62" pos:column="33">mctx<pos:position pos:line="62" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="39">dfa<pos:position pos:line="62" pos:column="42"/></name><operator pos:line="62" pos:column="42">-&gt;<pos:position pos:line="62" pos:column="47"/></operator><name pos:line="62" pos:column="44">nodes<pos:position pos:line="62" pos:column="49"/></name></name> <operator pos:line="62" pos:column="50">+<pos:position pos:line="62" pos:column="51"/></operator> <name pos:line="62" pos:column="52">cur_node<pos:position pos:line="62" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="62">str_idx<pos:position pos:line="62" pos:column="69"/></name></expr></argument>)<pos:position pos:line="62" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="71"/></condition><then pos:line="62" pos:column="71">
	<block pos:line="63" pos:column="9">{
	  <expr_stmt><expr><name pos:line="64" pos:column="11">result<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">=<pos:position pos:line="64" pos:column="19"/></operator> <call><name pos:line="64" pos:column="20">re_node_set_insert<pos:position pos:line="64" pos:column="38"/></name> <argument_list pos:line="64" pos:column="39">(<argument><expr><name pos:line="64" pos:column="40">next_nodes<pos:position pos:line="64" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="52">dfa<pos:position pos:line="64" pos:column="55"/></name><operator pos:line="64" pos:column="55">-&gt;<pos:position pos:line="64" pos:column="60"/></operator><name pos:line="64" pos:column="57">nexts<pos:position pos:line="64" pos:column="62"/></name><index pos:line="64" pos:column="62">[<expr><name pos:line="64" pos:column="63">cur_node<pos:position pos:line="64" pos:column="71"/></name></expr>]<pos:position pos:line="64" pos:column="72"/></index></name></expr></argument>)<pos:position pos:line="64" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="74"/></expr_stmt>
	  <if pos:line="65" pos:column="11">if <condition pos:line="65" pos:column="14">(<expr><call><name pos:line="65" pos:column="15">BE<pos:position pos:line="65" pos:column="17"/></name> <argument_list pos:line="65" pos:column="18">(<argument><expr><name pos:line="65" pos:column="19">result<pos:position pos:line="65" pos:column="25"/></name> <operator pos:line="65" pos:column="26">&lt;<pos:position pos:line="65" pos:column="30"/></operator> <literal type="number" pos:line="65" pos:column="28">0<pos:position pos:line="65" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="31">0<pos:position pos:line="65" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="34"/></condition><then pos:line="65" pos:column="34">
	    <block pos:line="66" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="67" pos:column="15">re_node_set_free<pos:position pos:line="67" pos:column="31"/></name> <argument_list pos:line="67" pos:column="32">(<argument><expr><operator pos:line="67" pos:column="33">&amp;<pos:position pos:line="67" pos:column="38"/></operator><name pos:line="67" pos:column="34">union_set<pos:position pos:line="67" pos:column="43"/></name></expr></argument>)<pos:position pos:line="67" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt>
	      <return pos:line="68" pos:column="15">return <expr><name pos:line="68" pos:column="22">REG_ESPACE<pos:position pos:line="68" pos:column="32"/></name></expr>;<pos:position pos:line="68" pos:column="33"/></return>
	    }<pos:position pos:line="69" pos:column="14"/></block></then></if>
	}<pos:position pos:line="70" pos:column="10"/></block></then></if>
    }<pos:position pos:line="71" pos:column="6"/></block></for>
  <expr_stmt><expr><call><name pos:line="72" pos:column="3">re_node_set_free<pos:position pos:line="72" pos:column="19"/></name> <argument_list pos:line="72" pos:column="20">(<argument><expr><operator pos:line="72" pos:column="21">&amp;<pos:position pos:line="72" pos:column="26"/></operator><name pos:line="72" pos:column="22">union_set<pos:position pos:line="72" pos:column="31"/></name></expr></argument>)<pos:position pos:line="72" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="33"/></expr_stmt>
  <return pos:line="73" pos:column="3">return <expr><name pos:line="73" pos:column="10">REG_NOERROR<pos:position pos:line="73" pos:column="21"/></name></expr>;<pos:position pos:line="73" pos:column="22"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
