<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3323_git-2.7.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">traverse_trees<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">n<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">tree_desc<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">t<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">traverse_info<pos:position pos:line="1" pos:column="68"/></name></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">info<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">error<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><literal type="number" pos:line="3" pos:column="21">0<pos:position pos:line="3" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">name_entry<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">entry<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><call><name pos:line="4" pos:column="36">xmalloc<pos:position pos:line="4" pos:column="43"/></name><argument_list pos:line="4" pos:column="43">(<argument><expr><name pos:line="4" pos:column="44">n<pos:position pos:line="4" pos:column="45"/></name><operator pos:line="4" pos:column="45">*<pos:position pos:line="4" pos:column="46"/></operator><sizeof pos:line="4" pos:column="46">sizeof<argument_list pos:line="4" pos:column="52">(<argument><expr><operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator><name pos:line="4" pos:column="54">entry<pos:position pos:line="4" pos:column="59"/></name></expr></argument>)<pos:position pos:line="4" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="4" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">tree_desc_x<pos:position pos:line="6" pos:column="27"/></name></name> <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">tx<pos:position pos:line="6" pos:column="31"/></name> <init pos:line="6" pos:column="32">= <expr><call><name pos:line="6" pos:column="34">xcalloc<pos:position pos:line="6" pos:column="41"/></name><argument_list pos:line="6" pos:column="41">(<argument><expr><name pos:line="6" pos:column="42">n<pos:position pos:line="6" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="45">sizeof<argument_list pos:line="6" pos:column="51">(<argument><expr><operator pos:line="6" pos:column="52">*<pos:position pos:line="6" pos:column="53"/></operator><name pos:line="6" pos:column="53">tx<pos:position pos:line="6" pos:column="55"/></name></expr></argument>)<pos:position pos:line="6" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">base<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><name pos:line="7" pos:column="30">STRBUF_INIT<pos:position pos:line="7" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">interesting<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><literal type="number" pos:line="8" pos:column="27">1<pos:position pos:line="8" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>

	<for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init><expr><name pos:line="10" pos:column="14">i<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr>;<pos:position pos:line="10" pos:column="20"/></init> <condition><expr><name pos:line="10" pos:column="21">i<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">&lt;<pos:position pos:line="10" pos:column="27"/></operator> <name pos:line="10" pos:column="25">n<pos:position pos:line="10" pos:column="26"/></name></expr>;<pos:position pos:line="10" pos:column="27"/></condition> <incr><expr><name pos:line="10" pos:column="28">i<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">++<pos:position pos:line="10" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="10" pos:column="32"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="11" pos:column="17">tx<pos:position pos:line="11" pos:column="19"/></name><index pos:line="11" pos:column="19">[<expr><name pos:line="11" pos:column="20">i<pos:position pos:line="11" pos:column="21"/></name></expr>]<pos:position pos:line="11" pos:column="22"/></index></name><operator pos:line="11" pos:column="22">.<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">d<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <name><name pos:line="11" pos:column="27">t<pos:position pos:line="11" pos:column="28"/></name><index pos:line="11" pos:column="28">[<expr><name pos:line="11" pos:column="29">i<pos:position pos:line="11" pos:column="30"/></name></expr>]<pos:position pos:line="11" pos:column="31"/></index></name></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt></block></for>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name><name pos:line="13" pos:column="13">info<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">prev<pos:position pos:line="13" pos:column="23"/></name></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24"> <block pos:line="13" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_grow<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><operator pos:line="14" pos:column="29">&amp;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="30">base<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="36">info<pos:position pos:line="14" pos:column="40"/></name><operator pos:line="14" pos:column="40">-&gt;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="42">pathlen<pos:position pos:line="14" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">make_traverse_path<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><name><name pos:line="15" pos:column="36">base<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">.<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="41">buf<pos:position pos:line="15" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="46">info<pos:position pos:line="15" pos:column="50"/></name><operator pos:line="15" pos:column="50">-&gt;<pos:position pos:line="15" pos:column="55"/></operator><name pos:line="15" pos:column="52">prev<pos:position pos:line="15" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="58">&amp;<pos:position pos:line="15" pos:column="63"/></operator><name><name pos:line="15" pos:column="59">info<pos:position pos:line="15" pos:column="63"/></name><operator pos:line="15" pos:column="63">-&gt;<pos:position pos:line="15" pos:column="68"/></operator><name pos:line="15" pos:column="65">name<pos:position pos:line="15" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="71"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="16" pos:column="17">base<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">.<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">buf<pos:position pos:line="16" pos:column="25"/></name><index pos:line="16" pos:column="25">[<expr><name><name pos:line="16" pos:column="26">info<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">-&gt;<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="32">pathlen<pos:position pos:line="16" pos:column="39"/></name></name><operator pos:line="16" pos:column="39">-<pos:position pos:line="16" pos:column="40"/></operator><literal type="number" pos:line="16" pos:column="40">1<pos:position pos:line="16" pos:column="41"/></literal></expr>]<pos:position pos:line="16" pos:column="42"/></index></name> <operator pos:line="16" pos:column="43">=<pos:position pos:line="16" pos:column="44"/></operator> <literal type="char" pos:line="16" pos:column="45">'/'<pos:position pos:line="16" pos:column="48"/></literal></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">strbuf_setlen<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><operator pos:line="17" pos:column="31">&amp;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="32">base<pos:position pos:line="17" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="38">info<pos:position pos:line="17" pos:column="42"/></name><operator pos:line="17" pos:column="42">-&gt;<pos:position pos:line="17" pos:column="47"/></operator><name pos:line="17" pos:column="44">pathlen<pos:position pos:line="17" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>
	<for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">(<init pos:line="19" pos:column="14">;<pos:position pos:line="19" pos:column="15"/></init><condition pos:line="19" pos:column="15">;<pos:position pos:line="19" pos:column="16"/></condition><incr/>)<pos:position pos:line="19" pos:column="17"/></control> <block pos:line="19" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">int<pos:position pos:line="20" pos:column="20"/></name></type> <name pos:line="20" pos:column="21">trees_used<pos:position pos:line="20" pos:column="31"/></name></decl>;<pos:position pos:line="20" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">unsigned<pos:position pos:line="21" pos:column="25"/></name> <name pos:line="21" pos:column="26">long<pos:position pos:line="21" pos:column="30"/></name></type> <name pos:line="21" pos:column="31">mask<pos:position pos:line="21" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="21" pos:column="37">dirmask<pos:position pos:line="21" pos:column="44"/></name></decl>;<pos:position pos:line="21" pos:column="45"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="22" pos:column="17">const<pos:position pos:line="22" pos:column="22"/></specifier> <name pos:line="22" pos:column="23">char<pos:position pos:line="22" pos:column="27"/></name> <modifier pos:line="22" pos:column="28">*<pos:position pos:line="22" pos:column="29"/></modifier></type><name pos:line="22" pos:column="29">first<pos:position pos:line="22" pos:column="34"/></name> <init pos:line="22" pos:column="35">= <expr><name pos:line="22" pos:column="37">NULL<pos:position pos:line="22" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">int<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">first_len<pos:position pos:line="23" pos:column="30"/></name> <init pos:line="23" pos:column="31">= <expr><literal type="number" pos:line="23" pos:column="33">0<pos:position pos:line="23" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="24" pos:column="17">struct<pos:position pos:line="24" pos:column="23"/></name> <name pos:line="24" pos:column="24">name_entry<pos:position pos:line="24" pos:column="34"/></name></name> <modifier pos:line="24" pos:column="35">*<pos:position pos:line="24" pos:column="36"/></modifier></type><name pos:line="24" pos:column="36">e<pos:position pos:line="24" pos:column="37"/></name> <init pos:line="24" pos:column="38">= <expr><name pos:line="24" pos:column="40">NULL<pos:position pos:line="24" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="45"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">int<pos:position pos:line="25" pos:column="20"/></name></type> <name pos:line="25" pos:column="21">len<pos:position pos:line="25" pos:column="24"/></name></decl>;<pos:position pos:line="25" pos:column="25"/></decl_stmt>

		<for pos:line="27" pos:column="17">for <control pos:line="27" pos:column="21">(<init><expr><name pos:line="27" pos:column="22">i<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <literal type="number" pos:line="27" pos:column="26">0<pos:position pos:line="27" pos:column="27"/></literal></expr>;<pos:position pos:line="27" pos:column="28"/></init> <condition><expr><name pos:line="27" pos:column="29">i<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">&lt;<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="33">n<pos:position pos:line="27" pos:column="34"/></name></expr>;<pos:position pos:line="27" pos:column="35"/></condition> <incr><expr><name pos:line="27" pos:column="36">i<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">++<pos:position pos:line="27" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="40"/></control> <block pos:line="27" pos:column="41">{
			<expr_stmt><expr><name pos:line="28" pos:column="25">e<pos:position pos:line="28" pos:column="26"/></name> <operator pos:line="28" pos:column="27">=<pos:position pos:line="28" pos:column="28"/></operator> <name pos:line="28" pos:column="29">entry<pos:position pos:line="28" pos:column="34"/></name> <operator pos:line="28" pos:column="35">+<pos:position pos:line="28" pos:column="36"/></operator> <name pos:line="28" pos:column="37">i<pos:position pos:line="28" pos:column="38"/></name></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">extended_entry_extract<pos:position pos:line="29" pos:column="47"/></name><argument_list pos:line="29" pos:column="47">(<argument><expr><name pos:line="29" pos:column="48">tx<pos:position pos:line="29" pos:column="50"/></name> <operator pos:line="29" pos:column="51">+<pos:position pos:line="29" pos:column="52"/></operator> <name pos:line="29" pos:column="53">i<pos:position pos:line="29" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="56">e<pos:position pos:line="29" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="59">NULL<pos:position pos:line="29" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="65">0<pos:position pos:line="29" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></for>

		<comment type="block" pos:line="32" pos:column="17">/*
		 * A tree may have "t-2" at the current location even
		 * though it may have "t" that is a subtree behind it,
		 * and another tree may return "t".  We want to grab
		 * all "t" from all trees to match in such a case.
		 */</comment>
		<for pos:line="38" pos:column="17">for <control pos:line="38" pos:column="21">(<init><expr><name pos:line="38" pos:column="22">i<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <literal type="number" pos:line="38" pos:column="26">0<pos:position pos:line="38" pos:column="27"/></literal></expr>;<pos:position pos:line="38" pos:column="28"/></init> <condition><expr><name pos:line="38" pos:column="29">i<pos:position pos:line="38" pos:column="30"/></name> <operator pos:line="38" pos:column="31">&lt;<pos:position pos:line="38" pos:column="35"/></operator> <name pos:line="38" pos:column="33">n<pos:position pos:line="38" pos:column="34"/></name></expr>;<pos:position pos:line="38" pos:column="35"/></condition> <incr><expr><name pos:line="38" pos:column="36">i<pos:position pos:line="38" pos:column="37"/></name><operator pos:line="38" pos:column="37">++<pos:position pos:line="38" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="38" pos:column="40"/></control> <block pos:line="38" pos:column="41">{
			<expr_stmt><expr><name pos:line="39" pos:column="25">e<pos:position pos:line="39" pos:column="26"/></name> <operator pos:line="39" pos:column="27">=<pos:position pos:line="39" pos:column="28"/></operator> <name pos:line="39" pos:column="29">entry<pos:position pos:line="39" pos:column="34"/></name> <operator pos:line="39" pos:column="35">+<pos:position pos:line="39" pos:column="36"/></operator> <name pos:line="39" pos:column="37">i<pos:position pos:line="39" pos:column="38"/></name></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><operator pos:line="40" pos:column="29">!<pos:position pos:line="40" pos:column="30"/></operator><name><name pos:line="40" pos:column="30">e<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">-&gt;<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="33">path<pos:position pos:line="40" pos:column="37"/></name></name></expr>)<pos:position pos:line="40" pos:column="38"/></condition><then pos:line="40" pos:column="38">
				<block type="pseudo"><continue pos:line="41" pos:column="33">continue;<pos:position pos:line="41" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="42" pos:column="25">len<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">=<pos:position pos:line="42" pos:column="30"/></operator> <call><name pos:line="42" pos:column="31">tree_entry_len<pos:position pos:line="42" pos:column="45"/></name><argument_list pos:line="42" pos:column="45">(<argument><expr><name pos:line="42" pos:column="46">e<pos:position pos:line="42" pos:column="47"/></name></expr></argument>)<pos:position pos:line="42" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="49"/></expr_stmt>
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><operator pos:line="43" pos:column="29">!<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="30">first<pos:position pos:line="43" pos:column="35"/></name></expr>)<pos:position pos:line="43" pos:column="36"/></condition><then pos:line="43" pos:column="36"> <block pos:line="43" pos:column="37">{
				<expr_stmt><expr><name pos:line="44" pos:column="33">first<pos:position pos:line="44" pos:column="38"/></name> <operator pos:line="44" pos:column="39">=<pos:position pos:line="44" pos:column="40"/></operator> <name><name pos:line="44" pos:column="41">e<pos:position pos:line="44" pos:column="42"/></name><operator pos:line="44" pos:column="42">-&gt;<pos:position pos:line="44" pos:column="47"/></operator><name pos:line="44" pos:column="44">path<pos:position pos:line="44" pos:column="48"/></name></name></expr>;<pos:position pos:line="44" pos:column="49"/></expr_stmt>
				<expr_stmt><expr><name pos:line="45" pos:column="33">first_len<pos:position pos:line="45" pos:column="42"/></name> <operator pos:line="45" pos:column="43">=<pos:position pos:line="45" pos:column="44"/></operator> <name pos:line="45" pos:column="45">len<pos:position pos:line="45" pos:column="48"/></name></expr>;<pos:position pos:line="45" pos:column="49"/></expr_stmt>
				<continue pos:line="46" pos:column="33">continue;<pos:position pos:line="46" pos:column="42"/></continue>
			}<pos:position pos:line="47" pos:column="26"/></block></then></if>
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><call><name pos:line="48" pos:column="29">name_compare<pos:position pos:line="48" pos:column="41"/></name><argument_list pos:line="48" pos:column="41">(<argument><expr><name><name pos:line="48" pos:column="42">e<pos:position pos:line="48" pos:column="43"/></name><operator pos:line="48" pos:column="43">-&gt;<pos:position pos:line="48" pos:column="48"/></operator><name pos:line="48" pos:column="45">path<pos:position pos:line="48" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="51">len<pos:position pos:line="48" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="56">first<pos:position pos:line="48" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="63">first_len<pos:position pos:line="48" pos:column="72"/></name></expr></argument>)<pos:position pos:line="48" pos:column="73"/></argument_list></call> <operator pos:line="48" pos:column="74">&lt;<pos:position pos:line="48" pos:column="78"/></operator> <literal type="number" pos:line="48" pos:column="76">0<pos:position pos:line="48" pos:column="77"/></literal></expr>)<pos:position pos:line="48" pos:column="78"/></condition><then pos:line="48" pos:column="78"> <block pos:line="48" pos:column="79">{
				<expr_stmt><expr><name pos:line="49" pos:column="33">first<pos:position pos:line="49" pos:column="38"/></name> <operator pos:line="49" pos:column="39">=<pos:position pos:line="49" pos:column="40"/></operator> <name><name pos:line="49" pos:column="41">e<pos:position pos:line="49" pos:column="42"/></name><operator pos:line="49" pos:column="42">-&gt;<pos:position pos:line="49" pos:column="47"/></operator><name pos:line="49" pos:column="44">path<pos:position pos:line="49" pos:column="48"/></name></name></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt>
				<expr_stmt><expr><name pos:line="50" pos:column="33">first_len<pos:position pos:line="50" pos:column="42"/></name> <operator pos:line="50" pos:column="43">=<pos:position pos:line="50" pos:column="44"/></operator> <name pos:line="50" pos:column="45">len<pos:position pos:line="50" pos:column="48"/></name></expr>;<pos:position pos:line="50" pos:column="49"/></expr_stmt>
			}<pos:position pos:line="51" pos:column="26"/></block></then></if>
		}<pos:position pos:line="52" pos:column="18"/></block></for>

		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name pos:line="54" pos:column="21">first<pos:position pos:line="54" pos:column="26"/></name></expr>)<pos:position pos:line="54" pos:column="27"/></condition><then pos:line="54" pos:column="27"> <block pos:line="54" pos:column="28">{
			<for pos:line="55" pos:column="25">for <control pos:line="55" pos:column="29">(<init><expr><name pos:line="55" pos:column="30">i<pos:position pos:line="55" pos:column="31"/></name> <operator pos:line="55" pos:column="32">=<pos:position pos:line="55" pos:column="33"/></operator> <literal type="number" pos:line="55" pos:column="34">0<pos:position pos:line="55" pos:column="35"/></literal></expr>;<pos:position pos:line="55" pos:column="36"/></init> <condition><expr><name pos:line="55" pos:column="37">i<pos:position pos:line="55" pos:column="38"/></name> <operator pos:line="55" pos:column="39">&lt;<pos:position pos:line="55" pos:column="43"/></operator> <name pos:line="55" pos:column="41">n<pos:position pos:line="55" pos:column="42"/></name></expr>;<pos:position pos:line="55" pos:column="43"/></condition> <incr><expr><name pos:line="55" pos:column="44">i<pos:position pos:line="55" pos:column="45"/></name><operator pos:line="55" pos:column="45">++<pos:position pos:line="55" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="55" pos:column="48"/></control> <block pos:line="55" pos:column="49">{
				<expr_stmt><expr><name pos:line="56" pos:column="33">e<pos:position pos:line="56" pos:column="34"/></name> <operator pos:line="56" pos:column="35">=<pos:position pos:line="56" pos:column="36"/></operator> <name pos:line="56" pos:column="37">entry<pos:position pos:line="56" pos:column="42"/></name> <operator pos:line="56" pos:column="43">+<pos:position pos:line="56" pos:column="44"/></operator> <name pos:line="56" pos:column="45">i<pos:position pos:line="56" pos:column="46"/></name></expr>;<pos:position pos:line="56" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="57" pos:column="33">extended_entry_extract<pos:position pos:line="57" pos:column="55"/></name><argument_list pos:line="57" pos:column="55">(<argument><expr><name pos:line="57" pos:column="56">tx<pos:position pos:line="57" pos:column="58"/></name> <operator pos:line="57" pos:column="59">+<pos:position pos:line="57" pos:column="60"/></operator> <name pos:line="57" pos:column="61">i<pos:position pos:line="57" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="64">e<pos:position pos:line="57" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="67">first<pos:position pos:line="57" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="74">first_len<pos:position pos:line="57" pos:column="83"/></name></expr></argument>)<pos:position pos:line="57" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="85"/></expr_stmt>
				<comment type="block" pos:line="58" pos:column="33">/* Cull the ones that are not the earliest */</comment>
				<if pos:line="59" pos:column="33">if <condition pos:line="59" pos:column="36">(<expr><operator pos:line="59" pos:column="37">!<pos:position pos:line="59" pos:column="38"/></operator><name><name pos:line="59" pos:column="38">e<pos:position pos:line="59" pos:column="39"/></name><operator pos:line="59" pos:column="39">-&gt;<pos:position pos:line="59" pos:column="44"/></operator><name pos:line="59" pos:column="41">path<pos:position pos:line="59" pos:column="45"/></name></name></expr>)<pos:position pos:line="59" pos:column="46"/></condition><then pos:line="59" pos:column="46">
					<block type="pseudo"><continue pos:line="60" pos:column="41">continue;<pos:position pos:line="60" pos:column="50"/></continue></block></then></if>
				<expr_stmt><expr><name pos:line="61" pos:column="33">len<pos:position pos:line="61" pos:column="36"/></name> <operator pos:line="61" pos:column="37">=<pos:position pos:line="61" pos:column="38"/></operator> <call><name pos:line="61" pos:column="39">tree_entry_len<pos:position pos:line="61" pos:column="53"/></name><argument_list pos:line="61" pos:column="53">(<argument><expr><name pos:line="61" pos:column="54">e<pos:position pos:line="61" pos:column="55"/></name></expr></argument>)<pos:position pos:line="61" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="57"/></expr_stmt>
				<if pos:line="62" pos:column="33">if <condition pos:line="62" pos:column="36">(<expr><call><name pos:line="62" pos:column="37">name_compare<pos:position pos:line="62" pos:column="49"/></name><argument_list pos:line="62" pos:column="49">(<argument><expr><name><name pos:line="62" pos:column="50">e<pos:position pos:line="62" pos:column="51"/></name><operator pos:line="62" pos:column="51">-&gt;<pos:position pos:line="62" pos:column="56"/></operator><name pos:line="62" pos:column="53">path<pos:position pos:line="62" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="59">len<pos:position pos:line="62" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="64">first<pos:position pos:line="62" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="71">first_len<pos:position pos:line="62" pos:column="80"/></name></expr></argument>)<pos:position pos:line="62" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="82"/></condition><then pos:line="62" pos:column="82">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="41">entry_clear<pos:position pos:line="63" pos:column="52"/></name><argument_list pos:line="63" pos:column="52">(<argument><expr><name pos:line="63" pos:column="53">e<pos:position pos:line="63" pos:column="54"/></name></expr></argument>)<pos:position pos:line="63" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="56"/></expr_stmt></block></then></if>
			}<pos:position pos:line="64" pos:column="26"/></block></for>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="67" pos:column="17">/* Now we have in entry[i] the earliest name from the trees */</comment>
		<expr_stmt><expr><name pos:line="68" pos:column="17">mask<pos:position pos:line="68" pos:column="21"/></name> <operator pos:line="68" pos:column="22">=<pos:position pos:line="68" pos:column="23"/></operator> <literal type="number" pos:line="68" pos:column="24">0<pos:position pos:line="68" pos:column="25"/></literal></expr>;<pos:position pos:line="68" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="69" pos:column="17">dirmask<pos:position pos:line="69" pos:column="24"/></name> <operator pos:line="69" pos:column="25">=<pos:position pos:line="69" pos:column="26"/></operator> <literal type="number" pos:line="69" pos:column="27">0<pos:position pos:line="69" pos:column="28"/></literal></expr>;<pos:position pos:line="69" pos:column="29"/></expr_stmt>
		<for pos:line="70" pos:column="17">for <control pos:line="70" pos:column="21">(<init><expr><name pos:line="70" pos:column="22">i<pos:position pos:line="70" pos:column="23"/></name> <operator pos:line="70" pos:column="24">=<pos:position pos:line="70" pos:column="25"/></operator> <literal type="number" pos:line="70" pos:column="26">0<pos:position pos:line="70" pos:column="27"/></literal></expr>;<pos:position pos:line="70" pos:column="28"/></init> <condition><expr><name pos:line="70" pos:column="29">i<pos:position pos:line="70" pos:column="30"/></name> <operator pos:line="70" pos:column="31">&lt;<pos:position pos:line="70" pos:column="35"/></operator> <name pos:line="70" pos:column="33">n<pos:position pos:line="70" pos:column="34"/></name></expr>;<pos:position pos:line="70" pos:column="35"/></condition> <incr><expr><name pos:line="70" pos:column="36">i<pos:position pos:line="70" pos:column="37"/></name><operator pos:line="70" pos:column="37">++<pos:position pos:line="70" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="70" pos:column="40"/></control> <block pos:line="70" pos:column="41">{
			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><operator pos:line="71" pos:column="29">!<pos:position pos:line="71" pos:column="30"/></operator><name><name pos:line="71" pos:column="30">entry<pos:position pos:line="71" pos:column="35"/></name><index pos:line="71" pos:column="35">[<expr><name pos:line="71" pos:column="36">i<pos:position pos:line="71" pos:column="37"/></name></expr>]<pos:position pos:line="71" pos:column="38"/></index></name><operator pos:line="71" pos:column="38">.<pos:position pos:line="71" pos:column="39"/></operator><name pos:line="71" pos:column="39">path<pos:position pos:line="71" pos:column="43"/></name></expr>)<pos:position pos:line="71" pos:column="44"/></condition><then pos:line="71" pos:column="44">
				<block type="pseudo"><continue pos:line="72" pos:column="33">continue;<pos:position pos:line="72" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="73" pos:column="25">mask<pos:position pos:line="73" pos:column="29"/></name> <operator pos:line="73" pos:column="30">|=<pos:position pos:line="73" pos:column="32"/></operator> <literal type="number" pos:line="73" pos:column="33">1ul<pos:position pos:line="73" pos:column="36"/></literal> <operator pos:line="73" pos:column="37">&lt;&lt;<pos:position pos:line="73" pos:column="45"/></operator> <name pos:line="73" pos:column="40">i<pos:position pos:line="73" pos:column="41"/></name></expr>;<pos:position pos:line="73" pos:column="42"/></expr_stmt>
			<if pos:line="74" pos:column="25">if <condition pos:line="74" pos:column="28">(<expr><call><name pos:line="74" pos:column="29">S_ISDIR<pos:position pos:line="74" pos:column="36"/></name><argument_list pos:line="74" pos:column="36">(<argument><expr><name><name pos:line="74" pos:column="37">entry<pos:position pos:line="74" pos:column="42"/></name><index pos:line="74" pos:column="42">[<expr><name pos:line="74" pos:column="43">i<pos:position pos:line="74" pos:column="44"/></name></expr>]<pos:position pos:line="74" pos:column="45"/></index></name><operator pos:line="74" pos:column="45">.<pos:position pos:line="74" pos:column="46"/></operator><name pos:line="74" pos:column="46">mode<pos:position pos:line="74" pos:column="50"/></name></expr></argument>)<pos:position pos:line="74" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="52"/></condition><then pos:line="74" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><name pos:line="75" pos:column="33">dirmask<pos:position pos:line="75" pos:column="40"/></name> <operator pos:line="75" pos:column="41">|=<pos:position pos:line="75" pos:column="43"/></operator> <literal type="number" pos:line="75" pos:column="44">1ul<pos:position pos:line="75" pos:column="47"/></literal> <operator pos:line="75" pos:column="48">&lt;&lt;<pos:position pos:line="75" pos:column="56"/></operator> <name pos:line="75" pos:column="51">i<pos:position pos:line="75" pos:column="52"/></name></expr>;<pos:position pos:line="75" pos:column="53"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="76" pos:column="25">e<pos:position pos:line="76" pos:column="26"/></name> <operator pos:line="76" pos:column="27">=<pos:position pos:line="76" pos:column="28"/></operator> <operator pos:line="76" pos:column="29">&amp;<pos:position pos:line="76" pos:column="34"/></operator><name><name pos:line="76" pos:column="30">entry<pos:position pos:line="76" pos:column="35"/></name><index pos:line="76" pos:column="35">[<expr><name pos:line="76" pos:column="36">i<pos:position pos:line="76" pos:column="37"/></name></expr>]<pos:position pos:line="76" pos:column="38"/></index></name></expr>;<pos:position pos:line="76" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="77" pos:column="18"/></block></for>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><operator pos:line="78" pos:column="21">!<pos:position pos:line="78" pos:column="22"/></operator><name pos:line="78" pos:column="22">mask<pos:position pos:line="78" pos:column="26"/></name></expr>)<pos:position pos:line="78" pos:column="27"/></condition><then pos:line="78" pos:column="27">
			<block type="pseudo"><break pos:line="79" pos:column="25">break;<pos:position pos:line="79" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="80" pos:column="17">interesting<pos:position pos:line="80" pos:column="28"/></name> <operator pos:line="80" pos:column="29">=<pos:position pos:line="80" pos:column="30"/></operator> <call><name pos:line="80" pos:column="31">prune_traversal<pos:position pos:line="80" pos:column="46"/></name><argument_list pos:line="80" pos:column="46">(<argument><expr><name pos:line="80" pos:column="47">e<pos:position pos:line="80" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="50">info<pos:position pos:line="80" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="56">&amp;<pos:position pos:line="80" pos:column="61"/></operator><name pos:line="80" pos:column="57">base<pos:position pos:line="80" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="63">interesting<pos:position pos:line="80" pos:column="74"/></name></expr></argument>)<pos:position pos:line="80" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="76"/></expr_stmt>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name pos:line="81" pos:column="21">interesting<pos:position pos:line="81" pos:column="32"/></name> <operator pos:line="81" pos:column="33">&lt;<pos:position pos:line="81" pos:column="37"/></operator> <literal type="number" pos:line="81" pos:column="35">0<pos:position pos:line="81" pos:column="36"/></literal></expr>)<pos:position pos:line="81" pos:column="37"/></condition><then pos:line="81" pos:column="37">
			<block type="pseudo"><break pos:line="82" pos:column="25">break;<pos:position pos:line="82" pos:column="31"/></break></block></then></if>
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name pos:line="83" pos:column="21">interesting<pos:position pos:line="83" pos:column="32"/></name></expr>)<pos:position pos:line="83" pos:column="33"/></condition><then pos:line="83" pos:column="33"> <block pos:line="83" pos:column="34">{
			<expr_stmt><expr><name pos:line="84" pos:column="25">trees_used<pos:position pos:line="84" pos:column="35"/></name> <operator pos:line="84" pos:column="36">=<pos:position pos:line="84" pos:column="37"/></operator> <call><name><name pos:line="84" pos:column="38">info<pos:position pos:line="84" pos:column="42"/></name><operator pos:line="84" pos:column="42">-&gt;<pos:position pos:line="84" pos:column="47"/></operator><name pos:line="84" pos:column="44">fn<pos:position pos:line="84" pos:column="46"/></name></name><argument_list pos:line="84" pos:column="46">(<argument><expr><name pos:line="84" pos:column="47">n<pos:position pos:line="84" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="50">mask<pos:position pos:line="84" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="56">dirmask<pos:position pos:line="84" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="65">entry<pos:position pos:line="84" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="72">info<pos:position pos:line="84" pos:column="76"/></name></expr></argument>)<pos:position pos:line="84" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="78"/></expr_stmt>
			<if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">(<expr><name pos:line="85" pos:column="29">trees_used<pos:position pos:line="85" pos:column="39"/></name> <operator pos:line="85" pos:column="40">&lt;<pos:position pos:line="85" pos:column="44"/></operator> <literal type="number" pos:line="85" pos:column="42">0<pos:position pos:line="85" pos:column="43"/></literal></expr>)<pos:position pos:line="85" pos:column="44"/></condition><then pos:line="85" pos:column="44"> <block pos:line="85" pos:column="45">{
				<expr_stmt><expr><name pos:line="86" pos:column="33">error<pos:position pos:line="86" pos:column="38"/></name> <operator pos:line="86" pos:column="39">=<pos:position pos:line="86" pos:column="40"/></operator> <name pos:line="86" pos:column="41">trees_used<pos:position pos:line="86" pos:column="51"/></name></expr>;<pos:position pos:line="86" pos:column="52"/></expr_stmt>
				<if pos:line="87" pos:column="33">if <condition pos:line="87" pos:column="36">(<expr><operator pos:line="87" pos:column="37">!<pos:position pos:line="87" pos:column="38"/></operator><name><name pos:line="87" pos:column="38">info<pos:position pos:line="87" pos:column="42"/></name><operator pos:line="87" pos:column="42">-&gt;<pos:position pos:line="87" pos:column="47"/></operator><name pos:line="87" pos:column="44">show_all_errors<pos:position pos:line="87" pos:column="59"/></name></name></expr>)<pos:position pos:line="87" pos:column="60"/></condition><then pos:line="87" pos:column="60">
					<block type="pseudo"><break pos:line="88" pos:column="41">break;<pos:position pos:line="88" pos:column="47"/></break></block></then></if>
			}<pos:position pos:line="89" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="90" pos:column="25">mask<pos:position pos:line="90" pos:column="29"/></name> <operator pos:line="90" pos:column="30">&amp;=<pos:position pos:line="90" pos:column="36"/></operator> <name pos:line="90" pos:column="33">trees_used<pos:position pos:line="90" pos:column="43"/></name></expr>;<pos:position pos:line="90" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="91" pos:column="18"/></block></then></if>
		<for pos:line="92" pos:column="17">for <control pos:line="92" pos:column="21">(<init><expr><name pos:line="92" pos:column="22">i<pos:position pos:line="92" pos:column="23"/></name> <operator pos:line="92" pos:column="24">=<pos:position pos:line="92" pos:column="25"/></operator> <literal type="number" pos:line="92" pos:column="26">0<pos:position pos:line="92" pos:column="27"/></literal></expr>;<pos:position pos:line="92" pos:column="28"/></init> <condition><expr><name pos:line="92" pos:column="29">i<pos:position pos:line="92" pos:column="30"/></name> <operator pos:line="92" pos:column="31">&lt;<pos:position pos:line="92" pos:column="35"/></operator> <name pos:line="92" pos:column="33">n<pos:position pos:line="92" pos:column="34"/></name></expr>;<pos:position pos:line="92" pos:column="35"/></condition> <incr><expr><name pos:line="92" pos:column="36">i<pos:position pos:line="92" pos:column="37"/></name><operator pos:line="92" pos:column="37">++<pos:position pos:line="92" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="92" pos:column="40"/></control>
			<block type="pseudo"><if pos:line="93" pos:column="25">if <condition pos:line="93" pos:column="28">(<expr><name pos:line="93" pos:column="29">mask<pos:position pos:line="93" pos:column="33"/></name> <operator pos:line="93" pos:column="34">&amp;<pos:position pos:line="93" pos:column="39"/></operator> <operator pos:line="93" pos:column="36">(<pos:position pos:line="93" pos:column="37"/></operator><literal type="number" pos:line="93" pos:column="37">1ul<pos:position pos:line="93" pos:column="40"/></literal> <operator pos:line="93" pos:column="41">&lt;&lt;<pos:position pos:line="93" pos:column="49"/></operator> <name pos:line="93" pos:column="44">i<pos:position pos:line="93" pos:column="45"/></name><operator pos:line="93" pos:column="45">)<pos:position pos:line="93" pos:column="46"/></operator></expr>)<pos:position pos:line="93" pos:column="47"/></condition><then pos:line="93" pos:column="47">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="94" pos:column="33">update_extended_entry<pos:position pos:line="94" pos:column="54"/></name><argument_list pos:line="94" pos:column="54">(<argument><expr><name pos:line="94" pos:column="55">tx<pos:position pos:line="94" pos:column="57"/></name> <operator pos:line="94" pos:column="58">+<pos:position pos:line="94" pos:column="59"/></operator> <name pos:line="94" pos:column="60">i<pos:position pos:line="94" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="63">entry<pos:position pos:line="94" pos:column="68"/></name> <operator pos:line="94" pos:column="69">+<pos:position pos:line="94" pos:column="70"/></operator> <name pos:line="94" pos:column="71">i<pos:position pos:line="94" pos:column="72"/></name></expr></argument>)<pos:position pos:line="94" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="74"/></expr_stmt></block></then></if></block></for>
	}<pos:position pos:line="95" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="96" pos:column="9">free<pos:position pos:line="96" pos:column="13"/></name><argument_list pos:line="96" pos:column="13">(<argument><expr><name pos:line="96" pos:column="14">entry<pos:position pos:line="96" pos:column="19"/></name></expr></argument>)<pos:position pos:line="96" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="21"/></expr_stmt>
	<for pos:line="97" pos:column="9">for <control pos:line="97" pos:column="13">(<init><expr><name pos:line="97" pos:column="14">i<pos:position pos:line="97" pos:column="15"/></name> <operator pos:line="97" pos:column="16">=<pos:position pos:line="97" pos:column="17"/></operator> <literal type="number" pos:line="97" pos:column="18">0<pos:position pos:line="97" pos:column="19"/></literal></expr>;<pos:position pos:line="97" pos:column="20"/></init> <condition><expr><name pos:line="97" pos:column="21">i<pos:position pos:line="97" pos:column="22"/></name> <operator pos:line="97" pos:column="23">&lt;<pos:position pos:line="97" pos:column="27"/></operator> <name pos:line="97" pos:column="25">n<pos:position pos:line="97" pos:column="26"/></name></expr>;<pos:position pos:line="97" pos:column="27"/></condition> <incr><expr><name pos:line="97" pos:column="28">i<pos:position pos:line="97" pos:column="29"/></name><operator pos:line="97" pos:column="29">++<pos:position pos:line="97" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="97" pos:column="32"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="98" pos:column="17">free_extended_entry<pos:position pos:line="98" pos:column="36"/></name><argument_list pos:line="98" pos:column="36">(<argument><expr><name pos:line="98" pos:column="37">tx<pos:position pos:line="98" pos:column="39"/></name> <operator pos:line="98" pos:column="40">+<pos:position pos:line="98" pos:column="41"/></operator> <name pos:line="98" pos:column="42">i<pos:position pos:line="98" pos:column="43"/></name></expr></argument>)<pos:position pos:line="98" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="45"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="99" pos:column="9">free<pos:position pos:line="99" pos:column="13"/></name><argument_list pos:line="99" pos:column="13">(<argument><expr><name pos:line="99" pos:column="14">tx<pos:position pos:line="99" pos:column="16"/></name></expr></argument>)<pos:position pos:line="99" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="100" pos:column="9">strbuf_release<pos:position pos:line="100" pos:column="23"/></name><argument_list pos:line="100" pos:column="23">(<argument><expr><operator pos:line="100" pos:column="24">&amp;<pos:position pos:line="100" pos:column="29"/></operator><name pos:line="100" pos:column="25">base<pos:position pos:line="100" pos:column="29"/></name></expr></argument>)<pos:position pos:line="100" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="31"/></expr_stmt>
	<return pos:line="101" pos:column="9">return <expr><name pos:line="101" pos:column="16">error<pos:position pos:line="101" pos:column="21"/></name></expr>;<pos:position pos:line="101" pos:column="22"/></return>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
