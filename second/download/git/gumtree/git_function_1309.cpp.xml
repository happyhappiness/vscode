<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1309.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">unpack_delta_entry<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">enum<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">object_type<pos:position pos:line="1" pos:column="48"/></name></name></type> <name pos:line="1" pos:column="49">type<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">unsigned<pos:position pos:line="1" pos:column="63"/></name> <name pos:line="1" pos:column="64">long<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">delta_size<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
			       <parameter><decl><type><name pos:line="2" pos:column="32">unsigned<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">nr<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">void<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">delta_data<pos:position pos:line="4" pos:column="25"/></name></decl>, <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="28">base<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">base_size<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name></type> <name><name pos:line="6" pos:column="23">base_sha1<pos:position pos:line="6" pos:column="32"/></name><index pos:line="6" pos:column="32">[<expr><literal type="number" pos:line="6" pos:column="33">20<pos:position pos:line="6" pos:column="35"/></literal></expr>]<pos:position pos:line="6" pos:column="36"/></index></name></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">type<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">==<pos:position pos:line="8" pos:column="20"/></operator> <name pos:line="8" pos:column="21">OBJ_REF_DELTA<pos:position pos:line="8" pos:column="34"/></name></expr>)<pos:position pos:line="8" pos:column="35"/></condition><then pos:line="8" pos:column="35"> <block pos:line="8" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">hashcpy<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">base_sha1<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="36">fill<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">(<argument><expr><literal type="number" pos:line="9" pos:column="41">20<pos:position pos:line="9" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">use<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><literal type="number" pos:line="10" pos:column="21">20<pos:position pos:line="10" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="25"/></expr_stmt>
		<expr_stmt><expr><name pos:line="11" pos:column="17">delta_data<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">=<pos:position pos:line="11" pos:column="29"/></operator> <call><name pos:line="11" pos:column="30">get_data<pos:position pos:line="11" pos:column="38"/></name><argument_list pos:line="11" pos:column="38">(<argument><expr><name pos:line="11" pos:column="39">delta_size<pos:position pos:line="11" pos:column="49"/></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">dry_run<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">||<pos:position pos:line="12" pos:column="31"/></operator> <operator pos:line="12" pos:column="32">!<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">delta_data<pos:position pos:line="12" pos:column="43"/></name></expr>)<pos:position pos:line="12" pos:column="44"/></condition><then pos:line="12" pos:column="44"> <block pos:line="12" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">free<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">delta_data<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>
			<return pos:line="14" pos:column="25">return;<pos:position pos:line="14" pos:column="32"/></return>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">has_sha1_file<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">base_sha1<pos:position pos:line="16" pos:column="44"/></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="46"/></condition><then pos:line="16" pos:column="46">
			<block type="pseudo"><empty_stmt pos:line="17" pos:column="25">;<pos:position pos:line="17" pos:column="26"/></empty_stmt></block></then> <comment type="block" pos:line="17" pos:column="27">/* Ok we have this one */</comment>
		<elseif pos:line="18" pos:column="17">else <if pos:line="18" pos:column="22">if <condition pos:line="18" pos:column="25">(<expr><call><name pos:line="18" pos:column="26">resolve_against_held<pos:position pos:line="18" pos:column="46"/></name><argument_list pos:line="18" pos:column="46">(<argument><expr><name pos:line="18" pos:column="47">nr<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">base_sha1<pos:position pos:line="18" pos:column="60"/></name></expr></argument>,
					      <argument><expr><name pos:line="19" pos:column="47">delta_data<pos:position pos:line="19" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="59">delta_size<pos:position pos:line="19" pos:column="69"/></name></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="71"/></condition><then pos:line="19" pos:column="71">
			<block type="pseudo"><return pos:line="20" pos:column="25">return;<pos:position pos:line="20" pos:column="32"/></return></block></then></if></elseif> <comment type="block" pos:line="20" pos:column="33">/* we are done */</comment>
		<else pos:line="21" pos:column="17">else <block pos:line="21" pos:column="22">{
			<comment type="block" pos:line="22" pos:column="25">/* cannot resolve yet --- queue it */</comment>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">hashclr<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name><name pos:line="23" pos:column="33">obj_list<pos:position pos:line="23" pos:column="41"/></name><index pos:line="23" pos:column="41">[<expr><name pos:line="23" pos:column="42">nr<pos:position pos:line="23" pos:column="44"/></name></expr>]<pos:position pos:line="23" pos:column="45"/></index></name><operator pos:line="23" pos:column="45">.<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="46">sha1<pos:position pos:line="23" pos:column="50"/></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">add_delta_to_list<pos:position pos:line="24" pos:column="42"/></name><argument_list pos:line="24" pos:column="42">(<argument><expr><name pos:line="24" pos:column="43">nr<pos:position pos:line="24" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="47">base_sha1<pos:position pos:line="24" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="58">0<pos:position pos:line="24" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="61">delta_data<pos:position pos:line="24" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="73">delta_size<pos:position pos:line="24" pos:column="83"/></name></expr></argument>)<pos:position pos:line="24" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="85"/></expr_stmt>
			<return pos:line="25" pos:column="25">return;<pos:position pos:line="25" pos:column="32"/></return>
		}<pos:position pos:line="26" pos:column="18"/></block></else></if>
	}<pos:position pos:line="27" pos:column="10"/></block></then> <else pos:line="27" pos:column="11">else <block pos:line="27" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">unsigned<pos:position pos:line="28" pos:column="25"/></name></type> <name pos:line="28" pos:column="26">base_found<pos:position pos:line="28" pos:column="36"/></name> <init pos:line="28" pos:column="37">= <expr><literal type="number" pos:line="28" pos:column="39">0<pos:position pos:line="28" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="41"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="29" pos:column="17">unsigned<pos:position pos:line="29" pos:column="25"/></name> <name pos:line="29" pos:column="26">char<pos:position pos:line="29" pos:column="30"/></name> <modifier pos:line="29" pos:column="31">*<pos:position pos:line="29" pos:column="32"/></modifier></type><name pos:line="29" pos:column="32">pack<pos:position pos:line="29" pos:column="36"/></name></decl>, <decl><type ref="prev"/><name pos:line="29" pos:column="38">c<pos:position pos:line="29" pos:column="39"/></name></decl>;<pos:position pos:line="29" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">off_t<pos:position pos:line="30" pos:column="22"/></name></type> <name pos:line="30" pos:column="23">base_offset<pos:position pos:line="30" pos:column="34"/></name></decl>;<pos:position pos:line="30" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">unsigned<pos:position pos:line="31" pos:column="25"/></name></type> <name pos:line="31" pos:column="26">lo<pos:position pos:line="31" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="31" pos:column="30">mid<pos:position pos:line="31" pos:column="33"/></name></decl>, <decl><type ref="prev"/><name pos:line="31" pos:column="35">hi<pos:position pos:line="31" pos:column="37"/></name></decl>;<pos:position pos:line="31" pos:column="38"/></decl_stmt>

		<expr_stmt><expr><name pos:line="33" pos:column="17">pack<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">=<pos:position pos:line="33" pos:column="23"/></operator> <call><name pos:line="33" pos:column="24">fill<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><literal type="number" pos:line="33" pos:column="29">1<pos:position pos:line="33" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">c<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <operator pos:line="34" pos:column="21">*<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">pack<pos:position pos:line="34" pos:column="26"/></name></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">use<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><literal type="number" pos:line="35" pos:column="21">1<pos:position pos:line="35" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name pos:line="36" pos:column="17">base_offset<pos:position pos:line="36" pos:column="28"/></name> <operator pos:line="36" pos:column="29">=<pos:position pos:line="36" pos:column="30"/></operator> <name pos:line="36" pos:column="31">c<pos:position pos:line="36" pos:column="32"/></name> <operator pos:line="36" pos:column="33">&amp;<pos:position pos:line="36" pos:column="38"/></operator> <literal type="number" pos:line="36" pos:column="35">127<pos:position pos:line="36" pos:column="38"/></literal></expr>;<pos:position pos:line="36" pos:column="39"/></expr_stmt>
		<while pos:line="37" pos:column="17">while <condition pos:line="37" pos:column="23">(<expr><name pos:line="37" pos:column="24">c<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">&amp;<pos:position pos:line="37" pos:column="31"/></operator> <literal type="number" pos:line="37" pos:column="28">128<pos:position pos:line="37" pos:column="31"/></literal></expr>)<pos:position pos:line="37" pos:column="32"/></condition> <block pos:line="37" pos:column="33">{
			<expr_stmt><expr><name pos:line="38" pos:column="25">base_offset<pos:position pos:line="38" pos:column="36"/></name> <operator pos:line="38" pos:column="37">+=<pos:position pos:line="38" pos:column="39"/></operator> <literal type="number" pos:line="38" pos:column="40">1<pos:position pos:line="38" pos:column="41"/></literal></expr>;<pos:position pos:line="38" pos:column="42"/></expr_stmt>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><operator pos:line="39" pos:column="29">!<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="30">base_offset<pos:position pos:line="39" pos:column="41"/></name> <operator pos:line="39" pos:column="42">||<pos:position pos:line="39" pos:column="44"/></operator> <call><name pos:line="39" pos:column="45">MSB<pos:position pos:line="39" pos:column="48"/></name><argument_list pos:line="39" pos:column="48">(<argument><expr><name pos:line="39" pos:column="49">base_offset<pos:position pos:line="39" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="62">7<pos:position pos:line="39" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="65"/></condition><then pos:line="39" pos:column="65">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="33">die<pos:position pos:line="40" pos:column="36"/></name><argument_list pos:line="40" pos:column="36">(<argument><expr><literal type="string" pos:line="40" pos:column="37">"offset value overflow for delta base object"<pos:position pos:line="40" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="84"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="41" pos:column="25">pack<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">=<pos:position pos:line="41" pos:column="31"/></operator> <call><name pos:line="41" pos:column="32">fill<pos:position pos:line="41" pos:column="36"/></name><argument_list pos:line="41" pos:column="36">(<argument><expr><literal type="number" pos:line="41" pos:column="37">1<pos:position pos:line="41" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="42" pos:column="25">c<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">=<pos:position pos:line="42" pos:column="28"/></operator> <operator pos:line="42" pos:column="29">*<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="30">pack<pos:position pos:line="42" pos:column="34"/></name></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">use<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><literal type="number" pos:line="43" pos:column="29">1<pos:position pos:line="43" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="32"/></expr_stmt>
			<expr_stmt><expr><name pos:line="44" pos:column="25">base_offset<pos:position pos:line="44" pos:column="36"/></name> <operator pos:line="44" pos:column="37">=<pos:position pos:line="44" pos:column="38"/></operator> <operator pos:line="44" pos:column="39">(<pos:position pos:line="44" pos:column="40"/></operator><name pos:line="44" pos:column="40">base_offset<pos:position pos:line="44" pos:column="51"/></name> <operator pos:line="44" pos:column="52">&lt;&lt;<pos:position pos:line="44" pos:column="60"/></operator> <literal type="number" pos:line="44" pos:column="55">7<pos:position pos:line="44" pos:column="56"/></literal><operator pos:line="44" pos:column="56">)<pos:position pos:line="44" pos:column="57"/></operator> <operator pos:line="44" pos:column="58">+<pos:position pos:line="44" pos:column="59"/></operator> <operator pos:line="44" pos:column="60">(<pos:position pos:line="44" pos:column="61"/></operator><name pos:line="44" pos:column="61">c<pos:position pos:line="44" pos:column="62"/></name> <operator pos:line="44" pos:column="63">&amp;<pos:position pos:line="44" pos:column="68"/></operator> <literal type="number" pos:line="44" pos:column="65">127<pos:position pos:line="44" pos:column="68"/></literal><operator pos:line="44" pos:column="68">)<pos:position pos:line="44" pos:column="69"/></operator></expr>;<pos:position pos:line="44" pos:column="70"/></expr_stmt>
		}<pos:position pos:line="45" pos:column="18"/></block></while>
		<expr_stmt><expr><name pos:line="46" pos:column="17">base_offset<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">=<pos:position pos:line="46" pos:column="30"/></operator> <name><name pos:line="46" pos:column="31">obj_list<pos:position pos:line="46" pos:column="39"/></name><index pos:line="46" pos:column="39">[<expr><name pos:line="46" pos:column="40">nr<pos:position pos:line="46" pos:column="42"/></name></expr>]<pos:position pos:line="46" pos:column="43"/></index></name><operator pos:line="46" pos:column="43">.<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="44">offset<pos:position pos:line="46" pos:column="50"/></name> <operator pos:line="46" pos:column="51">-<pos:position pos:line="46" pos:column="52"/></operator> <name pos:line="46" pos:column="53">base_offset<pos:position pos:line="46" pos:column="64"/></name></expr>;<pos:position pos:line="46" pos:column="65"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">base_offset<pos:position pos:line="47" pos:column="32"/></name> <operator pos:line="47" pos:column="33">&lt;=<pos:position pos:line="47" pos:column="38"/></operator> <literal type="number" pos:line="47" pos:column="36">0<pos:position pos:line="47" pos:column="37"/></literal> <operator pos:line="47" pos:column="38">||<pos:position pos:line="47" pos:column="40"/></operator> <name pos:line="47" pos:column="41">base_offset<pos:position pos:line="47" pos:column="52"/></name> <operator pos:line="47" pos:column="53">&gt;=<pos:position pos:line="47" pos:column="58"/></operator> <name><name pos:line="47" pos:column="56">obj_list<pos:position pos:line="47" pos:column="64"/></name><index pos:line="47" pos:column="64">[<expr><name pos:line="47" pos:column="65">nr<pos:position pos:line="47" pos:column="67"/></name></expr>]<pos:position pos:line="47" pos:column="68"/></index></name><operator pos:line="47" pos:column="68">.<pos:position pos:line="47" pos:column="69"/></operator><name pos:line="47" pos:column="69">offset<pos:position pos:line="47" pos:column="75"/></name></expr>)<pos:position pos:line="47" pos:column="76"/></condition><then pos:line="47" pos:column="76">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="25">die<pos:position pos:line="48" pos:column="28"/></name><argument_list pos:line="48" pos:column="28">(<argument><expr><literal type="string" pos:line="48" pos:column="29">"offset value out of bound for delta base object"<pos:position pos:line="48" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="80"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="50" pos:column="17">delta_data<pos:position pos:line="50" pos:column="27"/></name> <operator pos:line="50" pos:column="28">=<pos:position pos:line="50" pos:column="29"/></operator> <call><name pos:line="50" pos:column="30">get_data<pos:position pos:line="50" pos:column="38"/></name><argument_list pos:line="50" pos:column="38">(<argument><expr><name pos:line="50" pos:column="39">delta_size<pos:position pos:line="50" pos:column="49"/></name></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><name pos:line="51" pos:column="21">dry_run<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">||<pos:position pos:line="51" pos:column="31"/></operator> <operator pos:line="51" pos:column="32">!<pos:position pos:line="51" pos:column="33"/></operator><name pos:line="51" pos:column="33">delta_data<pos:position pos:line="51" pos:column="43"/></name></expr>)<pos:position pos:line="51" pos:column="44"/></condition><then pos:line="51" pos:column="44"> <block pos:line="51" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="52" pos:column="25">free<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><name pos:line="52" pos:column="30">delta_data<pos:position pos:line="52" pos:column="40"/></name></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
			<return pos:line="53" pos:column="25">return;<pos:position pos:line="53" pos:column="32"/></return>
		}<pos:position pos:line="54" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="55" pos:column="17">lo<pos:position pos:line="55" pos:column="19"/></name> <operator pos:line="55" pos:column="20">=<pos:position pos:line="55" pos:column="21"/></operator> <literal type="number" pos:line="55" pos:column="22">0<pos:position pos:line="55" pos:column="23"/></literal></expr>;<pos:position pos:line="55" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name pos:line="56" pos:column="17">hi<pos:position pos:line="56" pos:column="19"/></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <name pos:line="56" pos:column="22">nr<pos:position pos:line="56" pos:column="24"/></name></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>
		<while pos:line="57" pos:column="17">while <condition pos:line="57" pos:column="23">(<expr><name pos:line="57" pos:column="24">lo<pos:position pos:line="57" pos:column="26"/></name> <operator pos:line="57" pos:column="27">&lt;<pos:position pos:line="57" pos:column="31"/></operator> <name pos:line="57" pos:column="29">hi<pos:position pos:line="57" pos:column="31"/></name></expr>)<pos:position pos:line="57" pos:column="32"/></condition> <block pos:line="57" pos:column="33">{
			<expr_stmt><expr><name pos:line="58" pos:column="25">mid<pos:position pos:line="58" pos:column="28"/></name> <operator pos:line="58" pos:column="29">=<pos:position pos:line="58" pos:column="30"/></operator> <operator pos:line="58" pos:column="31">(<pos:position pos:line="58" pos:column="32"/></operator><name pos:line="58" pos:column="32">lo<pos:position pos:line="58" pos:column="34"/></name> <operator pos:line="58" pos:column="35">+<pos:position pos:line="58" pos:column="36"/></operator> <name pos:line="58" pos:column="37">hi<pos:position pos:line="58" pos:column="39"/></name><operator pos:line="58" pos:column="39">)<pos:position pos:line="58" pos:column="40"/></operator><operator pos:line="58" pos:column="40">/<pos:position pos:line="58" pos:column="41"/></operator><literal type="number" pos:line="58" pos:column="41">2<pos:position pos:line="58" pos:column="42"/></literal></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt>
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name pos:line="59" pos:column="29">base_offset<pos:position pos:line="59" pos:column="40"/></name> <operator pos:line="59" pos:column="41">&lt;<pos:position pos:line="59" pos:column="45"/></operator> <name><name pos:line="59" pos:column="43">obj_list<pos:position pos:line="59" pos:column="51"/></name><index pos:line="59" pos:column="51">[<expr><name pos:line="59" pos:column="52">mid<pos:position pos:line="59" pos:column="55"/></name></expr>]<pos:position pos:line="59" pos:column="56"/></index></name><operator pos:line="59" pos:column="56">.<pos:position pos:line="59" pos:column="57"/></operator><name pos:line="59" pos:column="57">offset<pos:position pos:line="59" pos:column="63"/></name></expr>)<pos:position pos:line="59" pos:column="64"/></condition><then pos:line="59" pos:column="64"> <block pos:line="59" pos:column="65">{
				<expr_stmt><expr><name pos:line="60" pos:column="33">hi<pos:position pos:line="60" pos:column="35"/></name> <operator pos:line="60" pos:column="36">=<pos:position pos:line="60" pos:column="37"/></operator> <name pos:line="60" pos:column="38">mid<pos:position pos:line="60" pos:column="41"/></name></expr>;<pos:position pos:line="60" pos:column="42"/></expr_stmt>
			}<pos:position pos:line="61" pos:column="26"/></block></then> <elseif pos:line="61" pos:column="27">else <if pos:line="61" pos:column="32">if <condition pos:line="61" pos:column="35">(<expr><name pos:line="61" pos:column="36">base_offset<pos:position pos:line="61" pos:column="47"/></name> <operator pos:line="61" pos:column="48">&gt;<pos:position pos:line="61" pos:column="52"/></operator> <name><name pos:line="61" pos:column="50">obj_list<pos:position pos:line="61" pos:column="58"/></name><index pos:line="61" pos:column="58">[<expr><name pos:line="61" pos:column="59">mid<pos:position pos:line="61" pos:column="62"/></name></expr>]<pos:position pos:line="61" pos:column="63"/></index></name><operator pos:line="61" pos:column="63">.<pos:position pos:line="61" pos:column="64"/></operator><name pos:line="61" pos:column="64">offset<pos:position pos:line="61" pos:column="70"/></name></expr>)<pos:position pos:line="61" pos:column="71"/></condition><then pos:line="61" pos:column="71"> <block pos:line="61" pos:column="72">{
				<expr_stmt><expr><name pos:line="62" pos:column="33">lo<pos:position pos:line="62" pos:column="35"/></name> <operator pos:line="62" pos:column="36">=<pos:position pos:line="62" pos:column="37"/></operator> <name pos:line="62" pos:column="38">mid<pos:position pos:line="62" pos:column="41"/></name> <operator pos:line="62" pos:column="42">+<pos:position pos:line="62" pos:column="43"/></operator> <literal type="number" pos:line="62" pos:column="44">1<pos:position pos:line="62" pos:column="45"/></literal></expr>;<pos:position pos:line="62" pos:column="46"/></expr_stmt>
			}<pos:position pos:line="63" pos:column="26"/></block></then></if></elseif> <else pos:line="63" pos:column="27">else <block pos:line="63" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="64" pos:column="33">hashcpy<pos:position pos:line="64" pos:column="40"/></name><argument_list pos:line="64" pos:column="40">(<argument><expr><name pos:line="64" pos:column="41">base_sha1<pos:position pos:line="64" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="52">obj_list<pos:position pos:line="64" pos:column="60"/></name><index pos:line="64" pos:column="60">[<expr><name pos:line="64" pos:column="61">mid<pos:position pos:line="64" pos:column="64"/></name></expr>]<pos:position pos:line="64" pos:column="65"/></index></name><operator pos:line="64" pos:column="65">.<pos:position pos:line="64" pos:column="66"/></operator><name pos:line="64" pos:column="66">sha1<pos:position pos:line="64" pos:column="70"/></name></expr></argument>)<pos:position pos:line="64" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="72"/></expr_stmt>
				<expr_stmt><expr><name pos:line="65" pos:column="33">base_found<pos:position pos:line="65" pos:column="43"/></name> <operator pos:line="65" pos:column="44">=<pos:position pos:line="65" pos:column="45"/></operator> <operator pos:line="65" pos:column="46">!<pos:position pos:line="65" pos:column="47"/></operator><call><name pos:line="65" pos:column="47">is_null_sha1<pos:position pos:line="65" pos:column="59"/></name><argument_list pos:line="65" pos:column="59">(<argument><expr><name pos:line="65" pos:column="60">base_sha1<pos:position pos:line="65" pos:column="69"/></name></expr></argument>)<pos:position pos:line="65" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="71"/></expr_stmt>
				<break pos:line="66" pos:column="33">break;<pos:position pos:line="66" pos:column="39"/></break>
			}<pos:position pos:line="67" pos:column="26"/></block></else></if>
		}<pos:position pos:line="68" pos:column="18"/></block></while>
		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><operator pos:line="69" pos:column="21">!<pos:position pos:line="69" pos:column="22"/></operator><name pos:line="69" pos:column="22">base_found<pos:position pos:line="69" pos:column="32"/></name></expr>)<pos:position pos:line="69" pos:column="33"/></condition><then pos:line="69" pos:column="33"> <block pos:line="69" pos:column="34">{
			<comment type="block" pos:line="70" pos:column="25">/*
			 * The delta base object is itself a delta that
			 * has not been resolved yet.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">hashclr<pos:position pos:line="74" pos:column="32"/></name><argument_list pos:line="74" pos:column="32">(<argument><expr><name><name pos:line="74" pos:column="33">obj_list<pos:position pos:line="74" pos:column="41"/></name><index pos:line="74" pos:column="41">[<expr><name pos:line="74" pos:column="42">nr<pos:position pos:line="74" pos:column="44"/></name></expr>]<pos:position pos:line="74" pos:column="45"/></index></name><operator pos:line="74" pos:column="45">.<pos:position pos:line="74" pos:column="46"/></operator><name pos:line="74" pos:column="46">sha1<pos:position pos:line="74" pos:column="50"/></name></expr></argument>)<pos:position pos:line="74" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="75" pos:column="25">add_delta_to_list<pos:position pos:line="75" pos:column="42"/></name><argument_list pos:line="75" pos:column="42">(<argument><expr><name pos:line="75" pos:column="43">nr<pos:position pos:line="75" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="47">null_sha1<pos:position pos:line="75" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="58">base_offset<pos:position pos:line="75" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="71">delta_data<pos:position pos:line="75" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="83">delta_size<pos:position pos:line="75" pos:column="93"/></name></expr></argument>)<pos:position pos:line="75" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="95"/></expr_stmt>
			<return pos:line="76" pos:column="25">return;<pos:position pos:line="76" pos:column="32"/></return>
		}<pos:position pos:line="77" pos:column="18"/></block></then></if>
	}<pos:position pos:line="78" pos:column="10"/></block></else></if>

	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><call><name pos:line="80" pos:column="13">resolve_against_held<pos:position pos:line="80" pos:column="33"/></name><argument_list pos:line="80" pos:column="33">(<argument><expr><name pos:line="80" pos:column="34">nr<pos:position pos:line="80" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="38">base_sha1<pos:position pos:line="80" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="49">delta_data<pos:position pos:line="80" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="61">delta_size<pos:position pos:line="80" pos:column="71"/></name></expr></argument>)<pos:position pos:line="80" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="73"/></condition><then pos:line="80" pos:column="73">
		<block type="pseudo"><return pos:line="81" pos:column="17">return;<pos:position pos:line="81" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="83" pos:column="9">base<pos:position pos:line="83" pos:column="13"/></name> <operator pos:line="83" pos:column="14">=<pos:position pos:line="83" pos:column="15"/></operator> <call><name pos:line="83" pos:column="16">read_sha1_file<pos:position pos:line="83" pos:column="30"/></name><argument_list pos:line="83" pos:column="30">(<argument><expr><name pos:line="83" pos:column="31">base_sha1<pos:position pos:line="83" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="42">&amp;<pos:position pos:line="83" pos:column="47"/></operator><name pos:line="83" pos:column="43">type<pos:position pos:line="83" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="49">&amp;<pos:position pos:line="83" pos:column="54"/></operator><name pos:line="83" pos:column="50">base_size<pos:position pos:line="83" pos:column="59"/></name></expr></argument>)<pos:position pos:line="83" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="61"/></expr_stmt>
	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><operator pos:line="84" pos:column="13">!<pos:position pos:line="84" pos:column="14"/></operator><name pos:line="84" pos:column="14">base<pos:position pos:line="84" pos:column="18"/></name></expr>)<pos:position pos:line="84" pos:column="19"/></condition><then pos:line="84" pos:column="19"> <block pos:line="84" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">error<pos:position pos:line="85" pos:column="22"/></name><argument_list pos:line="85" pos:column="22">(<argument><expr><literal type="string" pos:line="85" pos:column="23">"failed to read delta-pack base object %s"<pos:position pos:line="85" pos:column="65"/></literal></expr></argument>,
		      <argument><expr><call><name pos:line="86" pos:column="23">sha1_to_hex<pos:position pos:line="86" pos:column="34"/></name><argument_list pos:line="86" pos:column="34">(<argument><expr><name pos:line="86" pos:column="35">base_sha1<pos:position pos:line="86" pos:column="44"/></name></expr></argument>)<pos:position pos:line="86" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="86" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="47"/></expr_stmt>
		<if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><operator pos:line="87" pos:column="21">!<pos:position pos:line="87" pos:column="22"/></operator><name pos:line="87" pos:column="22">recover<pos:position pos:line="87" pos:column="29"/></name></expr>)<pos:position pos:line="87" pos:column="30"/></condition><then pos:line="87" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="25">exit<pos:position pos:line="88" pos:column="29"/></name><argument_list pos:line="88" pos:column="29">(<argument><expr><literal type="number" pos:line="88" pos:column="30">1<pos:position pos:line="88" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="33"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="89" pos:column="17">has_errors<pos:position pos:line="89" pos:column="27"/></name> <operator pos:line="89" pos:column="28">=<pos:position pos:line="89" pos:column="29"/></operator> <literal type="number" pos:line="89" pos:column="30">1<pos:position pos:line="89" pos:column="31"/></literal></expr>;<pos:position pos:line="89" pos:column="32"/></expr_stmt>
		<return pos:line="90" pos:column="17">return;<pos:position pos:line="90" pos:column="24"/></return>
	}<pos:position pos:line="91" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="92" pos:column="9">resolve_delta<pos:position pos:line="92" pos:column="22"/></name><argument_list pos:line="92" pos:column="22">(<argument><expr><name pos:line="92" pos:column="23">nr<pos:position pos:line="92" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="27">type<pos:position pos:line="92" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="33">base<pos:position pos:line="92" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="39">base_size<pos:position pos:line="92" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="50">delta_data<pos:position pos:line="92" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="62">delta_size<pos:position pos:line="92" pos:column="72"/></name></expr></argument>)<pos:position pos:line="92" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="74"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="93" pos:column="9">free<pos:position pos:line="93" pos:column="13"/></name><argument_list pos:line="93" pos:column="13">(<argument><expr><name pos:line="93" pos:column="14">base<pos:position pos:line="93" pos:column="18"/></name></expr></argument>)<pos:position pos:line="93" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="20"/></expr_stmt>
}<pos:position pos:line="94" pos:column="2"/></block></function></unit>
