<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2872_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">read_populate_opts<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">replay_opts<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">opts<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><call><name pos:line="3" pos:column="13">is_rebase_i<pos:position pos:line="3" pos:column="24"/></name><argument_list pos:line="3" pos:column="24">(<argument><expr><name pos:line="3" pos:column="25">opts<pos:position pos:line="3" pos:column="29"/></name></expr></argument>)<pos:position pos:line="3" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="31"/></condition><then pos:line="3" pos:column="31"> <block pos:line="3" pos:column="32">{
		<decl_stmt><decl><type><name><name pos:line="4" pos:column="17">struct<pos:position pos:line="4" pos:column="23"/></name> <name pos:line="4" pos:column="24">strbuf<pos:position pos:line="4" pos:column="30"/></name></name></type> <name pos:line="4" pos:column="31">buf<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name pos:line="4" pos:column="37">STRBUF_INIT<pos:position pos:line="4" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>

		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><call><name pos:line="6" pos:column="21">read_oneliner<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">(<argument><expr><operator pos:line="6" pos:column="35">&amp;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="36">buf<pos:position pos:line="6" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="41">rebase_path_gpg_sign_opt<pos:position pos:line="6" pos:column="65"/></name><argument_list pos:line="6" pos:column="65">()<pos:position pos:line="6" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="69">1<pos:position pos:line="6" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="72"/></condition><then pos:line="6" pos:column="72"> <block pos:line="6" pos:column="73">{
			<if pos:line="7" pos:column="25">if <condition pos:line="7" pos:column="28">(<expr><operator pos:line="7" pos:column="29">!<pos:position pos:line="7" pos:column="30"/></operator><call><name pos:line="7" pos:column="30">starts_with<pos:position pos:line="7" pos:column="41"/></name><argument_list pos:line="7" pos:column="41">(<argument><expr><name><name pos:line="7" pos:column="42">buf<pos:position pos:line="7" pos:column="45"/></name><operator pos:line="7" pos:column="45">.<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="46">buf<pos:position pos:line="7" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="51">"-S"<pos:position pos:line="7" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="57"/></condition><then pos:line="7" pos:column="57">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="33">strbuf_reset<pos:position pos:line="8" pos:column="45"/></name><argument_list pos:line="8" pos:column="45">(<argument><expr><operator pos:line="8" pos:column="46">&amp;<pos:position pos:line="8" pos:column="51"/></operator><name pos:line="8" pos:column="47">buf<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="52"/></expr_stmt></block></then>
			<else pos:line="9" pos:column="25">else <block pos:line="9" pos:column="30">{
				<expr_stmt><expr><call><name pos:line="10" pos:column="33">free<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><name><name pos:line="10" pos:column="38">opts<pos:position pos:line="10" pos:column="42"/></name><operator pos:line="10" pos:column="42">-&gt;<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="44">gpg_sign<pos:position pos:line="10" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="11" pos:column="33">opts<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">-&gt;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="39">gpg_sign<pos:position pos:line="11" pos:column="47"/></name></name> <operator pos:line="11" pos:column="48">=<pos:position pos:line="11" pos:column="49"/></operator> <call><name pos:line="11" pos:column="50">xstrdup<pos:position pos:line="11" pos:column="57"/></name><argument_list pos:line="11" pos:column="57">(<argument><expr><name><name pos:line="11" pos:column="58">buf<pos:position pos:line="11" pos:column="61"/></name><operator pos:line="11" pos:column="61">.<pos:position pos:line="11" pos:column="62"/></operator><name pos:line="11" pos:column="62">buf<pos:position pos:line="11" pos:column="65"/></name></name> <operator pos:line="11" pos:column="66">+<pos:position pos:line="11" pos:column="67"/></operator> <literal type="number" pos:line="11" pos:column="68">2<pos:position pos:line="11" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="71"/></expr_stmt>
			}<pos:position pos:line="12" pos:column="26"/></block></else></if>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">file_exists<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><call><name pos:line="15" pos:column="33">rebase_path_verbose<pos:position pos:line="15" pos:column="52"/></name><argument_list pos:line="15" pos:column="52">()<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="56"/></condition><then pos:line="15" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="16" pos:column="25">opts<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">-&gt;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="31">verbose<pos:position pos:line="16" pos:column="38"/></name></name> <operator pos:line="16" pos:column="39">=<pos:position pos:line="16" pos:column="40"/></operator> <literal type="number" pos:line="16" pos:column="41">1<pos:position pos:line="16" pos:column="42"/></literal></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="18" pos:column="17">read_strategy_opts<pos:position pos:line="18" pos:column="35"/></name><argument_list pos:line="18" pos:column="35">(<argument><expr><name pos:line="18" pos:column="36">opts<pos:position pos:line="18" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="42">&amp;<pos:position pos:line="18" pos:column="47"/></operator><name pos:line="18" pos:column="43">buf<pos:position pos:line="18" pos:column="46"/></name></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">strbuf_release<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><operator pos:line="19" pos:column="32">&amp;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="33">buf<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>

		<return pos:line="21" pos:column="17">return <expr><literal type="number" pos:line="21" pos:column="24">0<pos:position pos:line="21" pos:column="25"/></literal></expr>;<pos:position pos:line="21" pos:column="26"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><call><name pos:line="24" pos:column="14">file_exists<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><call><name pos:line="24" pos:column="26">git_path_opts_file<pos:position pos:line="24" pos:column="44"/></name><argument_list pos:line="24" pos:column="44">()<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="48"/></condition><then pos:line="24" pos:column="48">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><literal type="number" pos:line="25" pos:column="24">0<pos:position pos:line="25" pos:column="25"/></literal></expr>;<pos:position pos:line="25" pos:column="26"/></return></block></then></if>
	<comment type="block" pos:line="26" pos:column="9">/*
	 * The function git_parse_source(), called from git_config_from_file(),
	 * may die() in case of a syntactically incorrect file. We do not care
	 * about this case, though, because we wrote that file ourselves, so we
	 * are pretty certain that it is syntactically correct.
	 */</comment>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">git_config_from_file<pos:position pos:line="32" pos:column="33"/></name><argument_list pos:line="32" pos:column="33">(<argument><expr><name pos:line="32" pos:column="34">populate_opts_cb<pos:position pos:line="32" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="52">git_path_opts_file<pos:position pos:line="32" pos:column="70"/></name><argument_list pos:line="32" pos:column="70">()<pos:position pos:line="32" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="32" pos:column="74">opts<pos:position pos:line="32" pos:column="78"/></name></expr></argument>)<pos:position pos:line="32" pos:column="79"/></argument_list></call> <operator pos:line="32" pos:column="80">&lt;<pos:position pos:line="32" pos:column="84"/></operator> <literal type="number" pos:line="32" pos:column="82">0<pos:position pos:line="32" pos:column="83"/></literal></expr>)<pos:position pos:line="32" pos:column="84"/></condition><then pos:line="32" pos:column="84">
		<block type="pseudo"><return pos:line="33" pos:column="17">return <expr><call><name pos:line="33" pos:column="24">error<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><call><name pos:line="33" pos:column="30">_<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><literal type="string" pos:line="33" pos:column="32">"malformed options sheet: '%s'"<pos:position pos:line="33" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="64"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="34" pos:column="25">git_path_opts_file<pos:position pos:line="34" pos:column="43"/></name><argument_list pos:line="34" pos:column="43">()<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="47"/></return></block></then></if>
	<return pos:line="35" pos:column="9">return <expr><literal type="number" pos:line="35" pos:column="16">0<pos:position pos:line="35" pos:column="17"/></literal></expr>;<pos:position pos:line="35" pos:column="18"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
