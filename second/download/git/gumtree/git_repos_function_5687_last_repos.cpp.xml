<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5687_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">show_tag_object<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">object_id<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">oid<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="57">struct<pos:position pos:line="1" pos:column="63"/></name> <name pos:line="1" pos:column="64">rev_info<pos:position pos:line="1" pos:column="72"/></name></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">rev<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">long<pos:position pos:line="3" pos:column="22"/></name></type> <name pos:line="3" pos:column="23">size<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">enum<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">object_type<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">type<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">buf<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><call><name pos:line="5" pos:column="21">read_sha1_file<pos:position pos:line="5" pos:column="35"/></name><argument_list pos:line="5" pos:column="35">(<argument><expr><name><name pos:line="5" pos:column="36">oid<pos:position pos:line="5" pos:column="39"/></name><operator pos:line="5" pos:column="39">-&gt;<pos:position pos:line="5" pos:column="44"/></operator><name pos:line="5" pos:column="41">hash<pos:position pos:line="5" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="47">&amp;<pos:position pos:line="5" pos:column="52"/></operator><name pos:line="5" pos:column="48">type<pos:position pos:line="5" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="54">&amp;<pos:position pos:line="5" pos:column="59"/></operator><name pos:line="5" pos:column="55">size<pos:position pos:line="5" pos:column="59"/></name></expr></argument>)<pos:position pos:line="5" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="61"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">offset<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">buf<pos:position pos:line="8" pos:column="17"/></name></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><call><name pos:line="9" pos:column="24">error<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><call><name pos:line="9" pos:column="30">_<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><literal type="string" pos:line="9" pos:column="32">"Could not read object %s"<pos:position pos:line="9" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="61">oid_to_hex<pos:position pos:line="9" pos:column="71"/></name><argument_list pos:line="9" pos:column="71">(<argument><expr><name pos:line="9" pos:column="72">oid<pos:position pos:line="9" pos:column="75"/></name></expr></argument>)<pos:position pos:line="9" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="78"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">type<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">==<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="24">OBJ_TAG<pos:position pos:line="11" pos:column="31"/></name></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><name pos:line="12" pos:column="16">offset<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">&lt;<pos:position pos:line="12" pos:column="27"/></operator> <name pos:line="12" pos:column="25">size<pos:position pos:line="12" pos:column="29"/></name> <operator pos:line="12" pos:column="30">&amp;&amp;<pos:position pos:line="12" pos:column="40"/></operator> <name><name pos:line="12" pos:column="33">buf<pos:position pos:line="12" pos:column="36"/></name><index pos:line="12" pos:column="36">[<expr><name pos:line="12" pos:column="37">offset<pos:position pos:line="12" pos:column="43"/></name></expr>]<pos:position pos:line="12" pos:column="44"/></index></name> <operator pos:line="12" pos:column="45">!=<pos:position pos:line="12" pos:column="47"/></operator> <literal type="char" pos:line="12" pos:column="48">'\n'<pos:position pos:line="12" pos:column="52"/></literal></expr>)<pos:position pos:line="12" pos:column="53"/></condition> <block pos:line="12" pos:column="54">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">new_offset<pos:position pos:line="13" pos:column="31"/></name> <init pos:line="13" pos:column="32">= <expr><name pos:line="13" pos:column="34">offset<pos:position pos:line="13" pos:column="40"/></name> <operator pos:line="13" pos:column="41">+<pos:position pos:line="13" pos:column="42"/></operator> <literal type="number" pos:line="13" pos:column="43">1<pos:position pos:line="13" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="45"/></decl_stmt>
		<while pos:line="14" pos:column="17">while <condition pos:line="14" pos:column="23">(<expr><name pos:line="14" pos:column="24">new_offset<pos:position pos:line="14" pos:column="34"/></name> <operator pos:line="14" pos:column="35">&lt;<pos:position pos:line="14" pos:column="39"/></operator> <name pos:line="14" pos:column="37">size<pos:position pos:line="14" pos:column="41"/></name> <operator pos:line="14" pos:column="42">&amp;&amp;<pos:position pos:line="14" pos:column="52"/></operator> <name><name pos:line="14" pos:column="45">buf<pos:position pos:line="14" pos:column="48"/></name><index pos:line="14" pos:column="48">[<expr><name pos:line="14" pos:column="49">new_offset<pos:position pos:line="14" pos:column="59"/></name><operator pos:line="14" pos:column="59">++<pos:position pos:line="14" pos:column="61"/></operator></expr>]<pos:position pos:line="14" pos:column="62"/></index></name> <operator pos:line="14" pos:column="63">!=<pos:position pos:line="14" pos:column="65"/></operator> <literal type="char" pos:line="14" pos:column="66">'\n'<pos:position pos:line="14" pos:column="70"/></literal></expr>)<pos:position pos:line="14" pos:column="71"/></condition>
			<block type="pseudo"><empty_stmt pos:line="15" pos:column="25">;<pos:position pos:line="15" pos:column="26"/></empty_stmt></block></while> <comment type="block" pos:line="15" pos:column="27">/* do nothing */</comment>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">starts_with<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">buf<pos:position pos:line="16" pos:column="36"/></name> <operator pos:line="16" pos:column="37">+<pos:position pos:line="16" pos:column="38"/></operator> <name pos:line="16" pos:column="39">offset<pos:position pos:line="16" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="47">"tagger "<pos:position pos:line="16" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="58"/></condition><then pos:line="16" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="25">show_tagger<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">buf<pos:position pos:line="17" pos:column="40"/></name> <operator pos:line="17" pos:column="41">+<pos:position pos:line="17" pos:column="42"/></operator> <name pos:line="17" pos:column="43">offset<pos:position pos:line="17" pos:column="49"/></name> <operator pos:line="17" pos:column="50">+<pos:position pos:line="17" pos:column="51"/></operator> <literal type="number" pos:line="17" pos:column="52">7<pos:position pos:line="17" pos:column="53"/></literal></expr></argument>,
				    <argument><expr><name pos:line="18" pos:column="37">new_offset<pos:position pos:line="18" pos:column="47"/></name> <operator pos:line="18" pos:column="48">-<pos:position pos:line="18" pos:column="49"/></operator> <name pos:line="18" pos:column="50">offset<pos:position pos:line="18" pos:column="56"/></name> <operator pos:line="18" pos:column="57">-<pos:position pos:line="18" pos:column="58"/></operator> <literal type="number" pos:line="18" pos:column="59">7<pos:position pos:line="18" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="62">rev<pos:position pos:line="18" pos:column="65"/></name></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="67"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="19" pos:column="17">offset<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">new_offset<pos:position pos:line="19" pos:column="36"/></name></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></while>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">offset<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">&lt;<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="22">size<pos:position pos:line="22" pos:column="26"/></name></expr>)<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">fwrite<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><name pos:line="23" pos:column="24">buf<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">+<pos:position pos:line="23" pos:column="29"/></operator> <name pos:line="23" pos:column="30">offset<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="38">size<pos:position pos:line="23" pos:column="42"/></name> <operator pos:line="23" pos:column="43">-<pos:position pos:line="23" pos:column="44"/></operator> <name pos:line="23" pos:column="45">offset<pos:position pos:line="23" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="53">1<pos:position pos:line="23" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="56">rev<pos:position pos:line="23" pos:column="59"/></name><operator pos:line="23" pos:column="59">-&gt;<pos:position pos:line="23" pos:column="64"/></operator><name pos:line="23" pos:column="61">diffopt<pos:position pos:line="23" pos:column="68"/></name><operator pos:line="23" pos:column="68">.<pos:position pos:line="23" pos:column="69"/></operator><name pos:line="23" pos:column="69">file<pos:position pos:line="23" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="75"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">free<pos:position pos:line="24" pos:column="13"/></name><argument_list pos:line="24" pos:column="13">(<argument><expr><name pos:line="24" pos:column="14">buf<pos:position pos:line="24" pos:column="17"/></name></expr></argument>)<pos:position pos:line="24" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt>
	<return pos:line="25" pos:column="9">return <expr><literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
