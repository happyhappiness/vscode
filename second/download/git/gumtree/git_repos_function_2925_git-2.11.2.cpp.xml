<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2925_git-2.11.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cascade_filter_fn<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">stream_filter<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">filter<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">input<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">size_t<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">isize_p<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="3" pos:column="30">char<pos:position pos:line="3" pos:column="34"/></name> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier></type><name pos:line="3" pos:column="36">output<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="44">size_t<pos:position pos:line="3" pos:column="50"/></name> <modifier pos:line="3" pos:column="51">*<pos:position pos:line="3" pos:column="52"/></modifier></type><name pos:line="3" pos:column="52">osize_p<pos:position pos:line="3" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="60"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">cascade_filter<pos:position pos:line="5" pos:column="30"/></name></name> <modifier pos:line="5" pos:column="31">*<pos:position pos:line="5" pos:column="32"/></modifier></type><name pos:line="5" pos:column="32">cas<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><operator pos:line="5" pos:column="38">(<pos:position pos:line="5" pos:column="39"/></operator>struct <name pos:line="5" pos:column="46">cascade_filter<pos:position pos:line="5" pos:column="60"/></name> <operator pos:line="5" pos:column="61">*<pos:position pos:line="5" pos:column="62"/></operator><operator pos:line="5" pos:column="62">)<pos:position pos:line="5" pos:column="63"/></operator> <name pos:line="5" pos:column="64">filter<pos:position pos:line="5" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="71"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">filled<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">sz<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><operator pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">osize_p<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">to_feed<pos:position pos:line="8" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="25">remaining<pos:position pos:line="8" pos:column="34"/></name></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/*
	 * input -- (one) --&gt; buf -- (two) --&gt; output
	 */</comment>
	<while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><name pos:line="13" pos:column="16">filled<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">&lt;<pos:position pos:line="13" pos:column="27"/></operator> <name pos:line="13" pos:column="25">sz<pos:position pos:line="13" pos:column="27"/></name></expr>)<pos:position pos:line="13" pos:column="28"/></condition> <block pos:line="13" pos:column="29">{
		<expr_stmt><expr><name pos:line="14" pos:column="17">remaining<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">=<pos:position pos:line="14" pos:column="28"/></operator> <name pos:line="14" pos:column="29">sz<pos:position pos:line="14" pos:column="31"/></name> <operator pos:line="14" pos:column="32">-<pos:position pos:line="14" pos:column="33"/></operator> <name pos:line="14" pos:column="34">filled<pos:position pos:line="14" pos:column="40"/></name></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>

		<comment type="block" pos:line="16" pos:column="17">/* do we already have something to feed two with? */</comment>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">cas<pos:position pos:line="17" pos:column="24"/></name><operator pos:line="17" pos:column="24">-&gt;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="26">ptr<pos:position pos:line="17" pos:column="29"/></name></name> <operator pos:line="17" pos:column="30">&lt;<pos:position pos:line="17" pos:column="34"/></operator> <name><name pos:line="17" pos:column="32">cas<pos:position pos:line="17" pos:column="35"/></name><operator pos:line="17" pos:column="35">-&gt;<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="37">end<pos:position pos:line="17" pos:column="40"/></name></name></expr>)<pos:position pos:line="17" pos:column="41"/></condition><then pos:line="17" pos:column="41"> <block pos:line="17" pos:column="42">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">to_feed<pos:position pos:line="18" pos:column="32"/></name> <operator pos:line="18" pos:column="33">=<pos:position pos:line="18" pos:column="34"/></operator> <name><name pos:line="18" pos:column="35">cas<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">-&gt;<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="40">end<pos:position pos:line="18" pos:column="43"/></name></name> <operator pos:line="18" pos:column="44">-<pos:position pos:line="18" pos:column="45"/></operator> <name><name pos:line="18" pos:column="46">cas<pos:position pos:line="18" pos:column="49"/></name><operator pos:line="18" pos:column="49">-&gt;<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="51">ptr<pos:position pos:line="18" pos:column="54"/></name></name></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><call><name pos:line="19" pos:column="29">stream_filter<pos:position pos:line="19" pos:column="42"/></name><argument_list pos:line="19" pos:column="42">(<argument><expr><name><name pos:line="19" pos:column="43">cas<pos:position pos:line="19" pos:column="46"/></name><operator pos:line="19" pos:column="46">-&gt;<pos:position pos:line="19" pos:column="51"/></operator><name pos:line="19" pos:column="48">two<pos:position pos:line="19" pos:column="51"/></name></name></expr></argument>,
					  <argument><expr><name><name pos:line="20" pos:column="43">cas<pos:position pos:line="20" pos:column="46"/></name><operator pos:line="20" pos:column="46">-&gt;<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="48">buf<pos:position pos:line="20" pos:column="51"/></name></name> <operator pos:line="20" pos:column="52">+<pos:position pos:line="20" pos:column="53"/></operator> <name><name pos:line="20" pos:column="54">cas<pos:position pos:line="20" pos:column="57"/></name><operator pos:line="20" pos:column="57">-&gt;<pos:position pos:line="20" pos:column="62"/></operator><name pos:line="20" pos:column="59">ptr<pos:position pos:line="20" pos:column="62"/></name></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="64">&amp;<pos:position pos:line="20" pos:column="69"/></operator><name pos:line="20" pos:column="65">to_feed<pos:position pos:line="20" pos:column="72"/></name></expr></argument>,
					  <argument><expr><name pos:line="21" pos:column="43">output<pos:position pos:line="21" pos:column="49"/></name> <operator pos:line="21" pos:column="50">+<pos:position pos:line="21" pos:column="51"/></operator> <name pos:line="21" pos:column="52">filled<pos:position pos:line="21" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="60">&amp;<pos:position pos:line="21" pos:column="65"/></operator><name pos:line="21" pos:column="61">remaining<pos:position pos:line="21" pos:column="70"/></name></expr></argument>)<pos:position pos:line="21" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="72"/></condition><then pos:line="21" pos:column="72">
				<block type="pseudo"><return pos:line="22" pos:column="33">return <expr><operator pos:line="22" pos:column="40">-<pos:position pos:line="22" pos:column="41"/></operator><literal type="number" pos:line="22" pos:column="41">1<pos:position pos:line="22" pos:column="42"/></literal></expr>;<pos:position pos:line="22" pos:column="43"/></return></block></then></if>
			<expr_stmt><expr><name><name pos:line="23" pos:column="25">cas<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">-&gt;<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="30">ptr<pos:position pos:line="23" pos:column="33"/></name></name> <operator pos:line="23" pos:column="34">+=<pos:position pos:line="23" pos:column="36"/></operator> <operator pos:line="23" pos:column="37">(<pos:position pos:line="23" pos:column="38"/></operator><name><name pos:line="23" pos:column="38">cas<pos:position pos:line="23" pos:column="41"/></name><operator pos:line="23" pos:column="41">-&gt;<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="43">end<pos:position pos:line="23" pos:column="46"/></name></name> <operator pos:line="23" pos:column="47">-<pos:position pos:line="23" pos:column="48"/></operator> <name><name pos:line="23" pos:column="49">cas<pos:position pos:line="23" pos:column="52"/></name><operator pos:line="23" pos:column="52">-&gt;<pos:position pos:line="23" pos:column="57"/></operator><name pos:line="23" pos:column="54">ptr<pos:position pos:line="23" pos:column="57"/></name></name><operator pos:line="23" pos:column="57">)<pos:position pos:line="23" pos:column="58"/></operator> <operator pos:line="23" pos:column="59">-<pos:position pos:line="23" pos:column="60"/></operator> <name pos:line="23" pos:column="61">to_feed<pos:position pos:line="23" pos:column="68"/></name></expr>;<pos:position pos:line="23" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">filled<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="34">sz<pos:position pos:line="24" pos:column="36"/></name> <operator pos:line="24" pos:column="37">-<pos:position pos:line="24" pos:column="38"/></operator> <name pos:line="24" pos:column="39">remaining<pos:position pos:line="24" pos:column="48"/></name></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt>
			<continue pos:line="25" pos:column="25">continue;<pos:position pos:line="25" pos:column="34"/></continue>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="28" pos:column="17">/* feed one from upstream and have it emit into our buffer */</comment>
		<expr_stmt><expr><name pos:line="29" pos:column="17">to_feed<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <ternary><condition><expr><name pos:line="29" pos:column="27">input<pos:position pos:line="29" pos:column="32"/></name></expr> ?<pos:position pos:line="29" pos:column="34"/></condition><then pos:line="29" pos:column="34"> <expr><operator pos:line="29" pos:column="35">*<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="36">isize_p<pos:position pos:line="29" pos:column="43"/></name></expr> <pos:position pos:line="29" pos:column="44"/></then><else pos:line="29" pos:column="44">: <expr><literal type="number" pos:line="29" pos:column="46">0<pos:position pos:line="29" pos:column="47"/></literal></expr></else></ternary></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">input<pos:position pos:line="30" pos:column="26"/></name> <operator pos:line="30" pos:column="27">&amp;&amp;<pos:position pos:line="30" pos:column="37"/></operator> <operator pos:line="30" pos:column="30">!<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="31">to_feed<pos:position pos:line="30" pos:column="38"/></name></expr>)<pos:position pos:line="30" pos:column="39"/></condition><then pos:line="30" pos:column="39">
			<block type="pseudo"><break pos:line="31" pos:column="25">break;<pos:position pos:line="31" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="32" pos:column="17">remaining<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">=<pos:position pos:line="32" pos:column="28"/></operator> <sizeof pos:line="32" pos:column="29">sizeof<argument_list pos:line="32" pos:column="35">(<argument><expr><name><name pos:line="32" pos:column="36">cas<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">-&gt;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="41">buf<pos:position pos:line="32" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="45"/></argument_list></sizeof></expr>;<pos:position pos:line="32" pos:column="46"/></expr_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><call><name pos:line="33" pos:column="21">stream_filter<pos:position pos:line="33" pos:column="34"/></name><argument_list pos:line="33" pos:column="34">(<argument><expr><name><name pos:line="33" pos:column="35">cas<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">-&gt;<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="40">one<pos:position pos:line="33" pos:column="43"/></name></name></expr></argument>,
				  <argument><expr><name pos:line="34" pos:column="35">input<pos:position pos:line="34" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="42">&amp;<pos:position pos:line="34" pos:column="47"/></operator><name pos:line="34" pos:column="43">to_feed<pos:position pos:line="34" pos:column="50"/></name></expr></argument>,
				  <argument><expr><name><name pos:line="35" pos:column="35">cas<pos:position pos:line="35" pos:column="38"/></name><operator pos:line="35" pos:column="38">-&gt;<pos:position pos:line="35" pos:column="43"/></operator><name pos:line="35" pos:column="40">buf<pos:position pos:line="35" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="45">&amp;<pos:position pos:line="35" pos:column="50"/></operator><name pos:line="35" pos:column="46">remaining<pos:position pos:line="35" pos:column="55"/></name></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="57"/></condition><then pos:line="35" pos:column="57">
			<block type="pseudo"><return pos:line="36" pos:column="25">return <expr><operator pos:line="36" pos:column="32">-<pos:position pos:line="36" pos:column="33"/></operator><literal type="number" pos:line="36" pos:column="33">1<pos:position pos:line="36" pos:column="34"/></literal></expr>;<pos:position pos:line="36" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><name><name pos:line="37" pos:column="17">cas<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">-&gt;<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="22">end<pos:position pos:line="37" pos:column="25"/></name></name> <operator pos:line="37" pos:column="26">=<pos:position pos:line="37" pos:column="27"/></operator> <sizeof pos:line="37" pos:column="28">sizeof<argument_list pos:line="37" pos:column="34">(<argument><expr><name><name pos:line="37" pos:column="35">cas<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">-&gt;<pos:position pos:line="37" pos:column="43"/></operator><name pos:line="37" pos:column="40">buf<pos:position pos:line="37" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></sizeof> <operator pos:line="37" pos:column="45">-<pos:position pos:line="37" pos:column="46"/></operator> <name pos:line="37" pos:column="47">remaining<pos:position pos:line="37" pos:column="56"/></name></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="38" pos:column="17">cas<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">-&gt;<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="22">ptr<pos:position pos:line="38" pos:column="25"/></name></name> <operator pos:line="38" pos:column="26">=<pos:position pos:line="38" pos:column="27"/></operator> <literal type="number" pos:line="38" pos:column="28">0<pos:position pos:line="38" pos:column="29"/></literal></expr>;<pos:position pos:line="38" pos:column="30"/></expr_stmt>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">input<pos:position pos:line="39" pos:column="26"/></name></expr>)<pos:position pos:line="39" pos:column="27"/></condition><then pos:line="39" pos:column="27"> <block pos:line="39" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="40" pos:column="25">size_t<pos:position pos:line="40" pos:column="31"/></name></type> <name pos:line="40" pos:column="32">fed<pos:position pos:line="40" pos:column="35"/></name> <init pos:line="40" pos:column="36">= <expr><operator pos:line="40" pos:column="38">*<pos:position pos:line="40" pos:column="39"/></operator><name pos:line="40" pos:column="39">isize_p<pos:position pos:line="40" pos:column="46"/></name> <operator pos:line="40" pos:column="47">-<pos:position pos:line="40" pos:column="48"/></operator> <name pos:line="40" pos:column="49">to_feed<pos:position pos:line="40" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="57"/></decl_stmt>
			<expr_stmt><expr><operator pos:line="41" pos:column="25">*<pos:position pos:line="41" pos:column="26"/></operator><name pos:line="41" pos:column="26">isize_p<pos:position pos:line="41" pos:column="33"/></name> <operator pos:line="41" pos:column="34">-=<pos:position pos:line="41" pos:column="36"/></operator> <name pos:line="41" pos:column="37">fed<pos:position pos:line="41" pos:column="40"/></name></expr>;<pos:position pos:line="41" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="42" pos:column="25">input<pos:position pos:line="42" pos:column="30"/></name> <operator pos:line="42" pos:column="31">+=<pos:position pos:line="42" pos:column="33"/></operator> <name pos:line="42" pos:column="34">fed<pos:position pos:line="42" pos:column="37"/></name></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="45" pos:column="17">/* do we know that we drained one completely? */</comment>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">input<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">||<pos:position pos:line="46" pos:column="29"/></operator> <name><name pos:line="46" pos:column="30">cas<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">-&gt;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="35">end<pos:position pos:line="46" pos:column="38"/></name></name></expr>)<pos:position pos:line="46" pos:column="39"/></condition><then pos:line="46" pos:column="39">
			<block type="pseudo"><continue pos:line="47" pos:column="25">continue;<pos:position pos:line="47" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="49" pos:column="17">/* tell two to drain; we have nothing more to give it */</comment>
		<expr_stmt><expr><name pos:line="50" pos:column="17">to_feed<pos:position pos:line="50" pos:column="24"/></name> <operator pos:line="50" pos:column="25">=<pos:position pos:line="50" pos:column="26"/></operator> <literal type="number" pos:line="50" pos:column="27">0<pos:position pos:line="50" pos:column="28"/></literal></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="51" pos:column="17">remaining<pos:position pos:line="51" pos:column="26"/></name> <operator pos:line="51" pos:column="27">=<pos:position pos:line="51" pos:column="28"/></operator> <name pos:line="51" pos:column="29">sz<pos:position pos:line="51" pos:column="31"/></name> <operator pos:line="51" pos:column="32">-<pos:position pos:line="51" pos:column="33"/></operator> <name pos:line="51" pos:column="34">filled<pos:position pos:line="51" pos:column="40"/></name></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><call><name pos:line="52" pos:column="21">stream_filter<pos:position pos:line="52" pos:column="34"/></name><argument_list pos:line="52" pos:column="34">(<argument><expr><name><name pos:line="52" pos:column="35">cas<pos:position pos:line="52" pos:column="38"/></name><operator pos:line="52" pos:column="38">-&gt;<pos:position pos:line="52" pos:column="43"/></operator><name pos:line="52" pos:column="40">two<pos:position pos:line="52" pos:column="43"/></name></name></expr></argument>,
				  <argument><expr><name pos:line="53" pos:column="35">NULL<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="41">&amp;<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="42">to_feed<pos:position pos:line="53" pos:column="49"/></name></expr></argument>,
				  <argument><expr><name pos:line="54" pos:column="35">output<pos:position pos:line="54" pos:column="41"/></name> <operator pos:line="54" pos:column="42">+<pos:position pos:line="54" pos:column="43"/></operator> <name pos:line="54" pos:column="44">filled<pos:position pos:line="54" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="52">&amp;<pos:position pos:line="54" pos:column="57"/></operator><name pos:line="54" pos:column="53">remaining<pos:position pos:line="54" pos:column="62"/></name></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="64"/></condition><then pos:line="54" pos:column="64">
			<block type="pseudo"><return pos:line="55" pos:column="25">return <expr><operator pos:line="55" pos:column="32">-<pos:position pos:line="55" pos:column="33"/></operator><literal type="number" pos:line="55" pos:column="33">1<pos:position pos:line="55" pos:column="34"/></literal></expr>;<pos:position pos:line="55" pos:column="35"/></return></block></then></if>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">remaining<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">==<pos:position pos:line="56" pos:column="33"/></operator> <operator pos:line="56" pos:column="34">(<pos:position pos:line="56" pos:column="35"/></operator><name pos:line="56" pos:column="35">sz<pos:position pos:line="56" pos:column="37"/></name> <operator pos:line="56" pos:column="38">-<pos:position pos:line="56" pos:column="39"/></operator> <name pos:line="56" pos:column="40">filled<pos:position pos:line="56" pos:column="46"/></name><operator pos:line="56" pos:column="46">)<pos:position pos:line="56" pos:column="47"/></operator></expr>)<pos:position pos:line="56" pos:column="48"/></condition><then pos:line="56" pos:column="48">
			<block type="pseudo"><break pos:line="57" pos:column="25">break;<pos:position pos:line="57" pos:column="31"/></break></block></then></if> <comment type="block" pos:line="57" pos:column="32">/* completely drained two */</comment>
		<expr_stmt><expr><name pos:line="58" pos:column="17">filled<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">=<pos:position pos:line="58" pos:column="25"/></operator> <name pos:line="58" pos:column="26">sz<pos:position pos:line="58" pos:column="28"/></name> <operator pos:line="58" pos:column="29">-<pos:position pos:line="58" pos:column="30"/></operator> <name pos:line="58" pos:column="31">remaining<pos:position pos:line="58" pos:column="40"/></name></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="59" pos:column="10"/></block></while>
	<expr_stmt><expr><operator pos:line="60" pos:column="9">*<pos:position pos:line="60" pos:column="10"/></operator><name pos:line="60" pos:column="10">osize_p<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">-=<pos:position pos:line="60" pos:column="20"/></operator> <name pos:line="60" pos:column="21">filled<pos:position pos:line="60" pos:column="27"/></name></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt>
	<return pos:line="61" pos:column="9">return <expr><literal type="number" pos:line="61" pos:column="16">0<pos:position pos:line="61" pos:column="17"/></literal></expr>;<pos:position pos:line="61" pos:column="18"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
