<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2180_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">compute_alternate_path<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">path<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">strbuf<pos:position pos:line="1" pos:column="61"/></name></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">err<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">ref_git<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><name pos:line="3" pos:column="25">NULL<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">repo<pos:position pos:line="4" pos:column="25"/></name></decl>, <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="28">ref_git_s<pos:position pos:line="4" pos:column="37"/></name></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">seen_error<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><literal type="number" pos:line="5" pos:column="26">0<pos:position pos:line="5" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">ref_git_s<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">=<pos:position pos:line="7" pos:column="20"/></operator> <call><name pos:line="7" pos:column="21">real_path_if_valid<pos:position pos:line="7" pos:column="39"/></name><argument_list pos:line="7" pos:column="39">(<argument><expr><name pos:line="7" pos:column="40">path<pos:position pos:line="7" pos:column="44"/></name></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="46"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">ref_git_s<pos:position pos:line="8" pos:column="23"/></name></expr>)<pos:position pos:line="8" pos:column="24"/></condition><then pos:line="8" pos:column="24"> <block pos:line="8" pos:column="25">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">seen_error<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">=<pos:position pos:line="9" pos:column="29"/></operator> <literal type="number" pos:line="9" pos:column="30">1<pos:position pos:line="9" pos:column="31"/></literal></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">strbuf_addf<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">err<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="34">_<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><literal type="string" pos:line="10" pos:column="36">"path '%s' does not exist"<pos:position pos:line="10" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="10" pos:column="65">path<pos:position pos:line="10" pos:column="69"/></name></expr></argument>)<pos:position pos:line="10" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="71"/></expr_stmt>
		<goto pos:line="11" pos:column="17">goto <name pos:line="11" pos:column="22">out<pos:position pos:line="11" pos:column="25"/></name>;<pos:position pos:line="11" pos:column="26"/></goto>
	}<pos:position pos:line="12" pos:column="10"/></block></then> <else pos:line="12" pos:column="11">else
		<comment type="block" pos:line="13" pos:column="17">/*
		 * Beware: read_gitfile(), real_path() and mkpath()
		 * return static buffer
		 */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">ref_git<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">=<pos:position pos:line="17" pos:column="26"/></operator> <call><name pos:line="17" pos:column="27">xstrdup<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">ref_git_s<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">repo<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">read_gitfile<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><name pos:line="19" pos:column="29">ref_git<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">repo<pos:position pos:line="20" pos:column="18"/></name></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">repo<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <call><name pos:line="21" pos:column="24">read_gitfile<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><call><name pos:line="21" pos:column="37">mkpath<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">(<argument><expr><literal type="string" pos:line="21" pos:column="44">"%s/.git"<pos:position pos:line="21" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="55">ref_git<pos:position pos:line="21" pos:column="62"/></name></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="65"/></expr_stmt></block></then></if>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">repo<pos:position pos:line="22" pos:column="17"/></name></expr>)<pos:position pos:line="22" pos:column="18"/></condition><then pos:line="22" pos:column="18"> <block pos:line="22" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">free<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">ref_git<pos:position pos:line="23" pos:column="29"/></name></expr></argument>)<pos:position pos:line="23" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="24" pos:column="17">ref_git<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <call><name pos:line="24" pos:column="27">xstrdup<pos:position pos:line="24" pos:column="34"/></name><argument_list pos:line="24" pos:column="34">(<argument><expr><name pos:line="24" pos:column="35">repo<pos:position pos:line="24" pos:column="39"/></name></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">repo<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">&amp;&amp;<pos:position pos:line="27" pos:column="29"/></operator> <call><name pos:line="27" pos:column="22">is_directory<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><call><name pos:line="27" pos:column="35">mkpath<pos:position pos:line="27" pos:column="41"/></name><argument_list pos:line="27" pos:column="41">(<argument><expr><literal type="string" pos:line="27" pos:column="42">"%s/.git/objects"<pos:position pos:line="27" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="61">ref_git<pos:position pos:line="27" pos:column="68"/></name></expr></argument>)<pos:position pos:line="27" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="71"/></condition><then pos:line="27" pos:column="71"> <block pos:line="27" pos:column="72">{
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">char<pos:position pos:line="28" pos:column="21"/></name> <modifier pos:line="28" pos:column="22">*<pos:position pos:line="28" pos:column="23"/></modifier></type><name pos:line="28" pos:column="23">ref_git_git<pos:position pos:line="28" pos:column="34"/></name> <init pos:line="28" pos:column="35">= <expr><call><name pos:line="28" pos:column="37">mkpathdup<pos:position pos:line="28" pos:column="46"/></name><argument_list pos:line="28" pos:column="46">(<argument><expr><literal type="string" pos:line="28" pos:column="47">"%s/.git"<pos:position pos:line="28" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="58">ref_git<pos:position pos:line="28" pos:column="65"/></name></expr></argument>)<pos:position pos:line="28" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="67"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">free<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name pos:line="29" pos:column="22">ref_git<pos:position pos:line="29" pos:column="29"/></name></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">ref_git<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="27">ref_git_git<pos:position pos:line="30" pos:column="38"/></name></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then> <elseif pos:line="31" pos:column="11">else <if pos:line="31" pos:column="16">if <condition pos:line="31" pos:column="19">(<expr><operator pos:line="31" pos:column="20">!<pos:position pos:line="31" pos:column="21"/></operator><call><name pos:line="31" pos:column="21">is_directory<pos:position pos:line="31" pos:column="33"/></name><argument_list pos:line="31" pos:column="33">(<argument><expr><call><name pos:line="31" pos:column="34">mkpath<pos:position pos:line="31" pos:column="40"/></name><argument_list pos:line="31" pos:column="40">(<argument><expr><literal type="string" pos:line="31" pos:column="41">"%s/objects"<pos:position pos:line="31" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="55">ref_git<pos:position pos:line="31" pos:column="62"/></name></expr></argument>)<pos:position pos:line="31" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="65"/></condition><then pos:line="31" pos:column="65"> <block pos:line="31" pos:column="66">{
		<decl_stmt><decl><type><name><name pos:line="32" pos:column="17">struct<pos:position pos:line="32" pos:column="23"/></name> <name pos:line="32" pos:column="24">strbuf<pos:position pos:line="32" pos:column="30"/></name></name></type> <name pos:line="32" pos:column="31">sb<pos:position pos:line="32" pos:column="33"/></name> <init pos:line="32" pos:column="34">= <expr><name pos:line="32" pos:column="36">STRBUF_INIT<pos:position pos:line="32" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="48"/></decl_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">seen_error<pos:position pos:line="33" pos:column="27"/></name> <operator pos:line="33" pos:column="28">=<pos:position pos:line="33" pos:column="29"/></operator> <literal type="number" pos:line="33" pos:column="30">1<pos:position pos:line="33" pos:column="31"/></literal></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">get_common_dir<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><operator pos:line="34" pos:column="36">&amp;<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="37">sb<pos:position pos:line="34" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="41">ref_git<pos:position pos:line="34" pos:column="48"/></name></expr></argument>)<pos:position pos:line="34" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="50"/></condition><then pos:line="34" pos:column="50"> <block pos:line="34" pos:column="51">{
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">strbuf_addf<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><name pos:line="35" pos:column="37">err<pos:position pos:line="35" pos:column="40"/></name></expr></argument>,
				    <argument><expr><call><name pos:line="36" pos:column="37">_<pos:position pos:line="36" pos:column="38"/></name><argument_list pos:line="36" pos:column="38">(<argument><expr><literal type="string" pos:line="36" pos:column="39">"reference repository '%s' as a linked "<pos:position pos:line="36" pos:column="79"/></literal>
				      <literal type="string" pos:line="37" pos:column="39">"checkout is not supported yet."<pos:position pos:line="37" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="72"/></argument_list></call></expr></argument>,
				    <argument><expr><name pos:line="38" pos:column="37">path<pos:position pos:line="38" pos:column="41"/></name></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
			<goto pos:line="39" pos:column="25">goto <name pos:line="39" pos:column="30">out<pos:position pos:line="39" pos:column="33"/></name>;<pos:position pos:line="39" pos:column="34"/></goto>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="42" pos:column="17">strbuf_addf<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">err<pos:position pos:line="42" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="34">_<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><literal type="string" pos:line="42" pos:column="36">"reference repository '%s' is not a "<pos:position pos:line="42" pos:column="73"/></literal>
					<literal type="string" pos:line="43" pos:column="41">"local repository."<pos:position pos:line="43" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="43" pos:column="63">path<pos:position pos:line="43" pos:column="67"/></name></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="69"/></expr_stmt>
		<goto pos:line="44" pos:column="17">goto <name pos:line="44" pos:column="22">out<pos:position pos:line="44" pos:column="25"/></name>;<pos:position pos:line="44" pos:column="26"/></goto>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if></elseif></if>

	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">!<pos:position pos:line="47" pos:column="14"/></operator><call><name pos:line="47" pos:column="14">access<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><call><name pos:line="47" pos:column="21">mkpath<pos:position pos:line="47" pos:column="27"/></name><argument_list pos:line="47" pos:column="27">(<argument><expr><literal type="string" pos:line="47" pos:column="28">"%s/shallow"<pos:position pos:line="47" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="42">ref_git<pos:position pos:line="47" pos:column="49"/></name></expr></argument>)<pos:position pos:line="47" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="47" pos:column="52">F_OK<pos:position pos:line="47" pos:column="56"/></name></expr></argument>)<pos:position pos:line="47" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="58"/></condition><then pos:line="47" pos:column="58"> <block pos:line="47" pos:column="59">{
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">strbuf_addf<pos:position pos:line="48" pos:column="28"/></name><argument_list pos:line="48" pos:column="28">(<argument><expr><name pos:line="48" pos:column="29">err<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="34">_<pos:position pos:line="48" pos:column="35"/></name><argument_list pos:line="48" pos:column="35">(<argument><expr><literal type="string" pos:line="48" pos:column="36">"reference repository '%s' is shallow"<pos:position pos:line="48" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="75"/></argument_list></call></expr></argument>,
			    <argument><expr><name pos:line="49" pos:column="29">path<pos:position pos:line="49" pos:column="33"/></name></expr></argument>)<pos:position pos:line="49" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="50" pos:column="17">seen_error<pos:position pos:line="50" pos:column="27"/></name> <operator pos:line="50" pos:column="28">=<pos:position pos:line="50" pos:column="29"/></operator> <literal type="number" pos:line="50" pos:column="30">1<pos:position pos:line="50" pos:column="31"/></literal></expr>;<pos:position pos:line="50" pos:column="32"/></expr_stmt>
		<goto pos:line="51" pos:column="17">goto <name pos:line="51" pos:column="22">out<pos:position pos:line="51" pos:column="25"/></name>;<pos:position pos:line="51" pos:column="26"/></goto>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><operator pos:line="54" pos:column="13">!<pos:position pos:line="54" pos:column="14"/></operator><call><name pos:line="54" pos:column="14">access<pos:position pos:line="54" pos:column="20"/></name><argument_list pos:line="54" pos:column="20">(<argument><expr><call><name pos:line="54" pos:column="21">mkpath<pos:position pos:line="54" pos:column="27"/></name><argument_list pos:line="54" pos:column="27">(<argument><expr><literal type="string" pos:line="54" pos:column="28">"%s/info/grafts"<pos:position pos:line="54" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="46">ref_git<pos:position pos:line="54" pos:column="53"/></name></expr></argument>)<pos:position pos:line="54" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="54" pos:column="56">F_OK<pos:position pos:line="54" pos:column="60"/></name></expr></argument>)<pos:position pos:line="54" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="62"/></condition><then pos:line="54" pos:column="62"> <block pos:line="54" pos:column="63">{
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">strbuf_addf<pos:position pos:line="55" pos:column="28"/></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">err<pos:position pos:line="55" pos:column="32"/></name></expr></argument>,
			    <argument><expr><call><name pos:line="56" pos:column="29">_<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><literal type="string" pos:line="56" pos:column="31">"reference repository '%s' is grafted"<pos:position pos:line="56" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="70"/></argument_list></call></expr></argument>,
			    <argument><expr><name pos:line="57" pos:column="29">path<pos:position pos:line="57" pos:column="33"/></name></expr></argument>)<pos:position pos:line="57" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="58" pos:column="17">seen_error<pos:position pos:line="58" pos:column="27"/></name> <operator pos:line="58" pos:column="28">=<pos:position pos:line="58" pos:column="29"/></operator> <literal type="number" pos:line="58" pos:column="30">1<pos:position pos:line="58" pos:column="31"/></literal></expr>;<pos:position pos:line="58" pos:column="32"/></expr_stmt>
		<goto pos:line="59" pos:column="17">goto <name pos:line="59" pos:column="22">out<pos:position pos:line="59" pos:column="25"/></name>;<pos:position pos:line="59" pos:column="26"/></goto>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

<label><name pos:line="62" pos:column="1">out<pos:position pos:line="62" pos:column="4"/></name>:<pos:position pos:line="62" pos:column="5"/></label>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">seen_error<pos:position pos:line="63" pos:column="23"/></name></expr>)<pos:position pos:line="63" pos:column="24"/></condition><then pos:line="63" pos:column="24"> <block pos:line="63" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">FREE_AND_NULL<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><name pos:line="64" pos:column="31">ref_git<pos:position pos:line="64" pos:column="38"/></name></expr></argument>)<pos:position pos:line="64" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="65" pos:column="10"/></block></then></if>

	<return pos:line="67" pos:column="9">return <expr><name pos:line="67" pos:column="16">ref_git<pos:position pos:line="67" pos:column="23"/></name></expr>;<pos:position pos:line="67" pos:column="24"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
