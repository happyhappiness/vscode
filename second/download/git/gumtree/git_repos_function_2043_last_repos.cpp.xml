<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2043_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">object<pos:position pos:line="1" pos:column="14"/></name></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">parse_object_buffer<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">object_id<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">oid<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="65">enum<pos:position pos:line="1" pos:column="69"/></name> <name pos:line="1" pos:column="70">object_type<pos:position pos:line="1" pos:column="81"/></name></name></type> <name pos:line="1" pos:column="82">type<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="88">unsigned<pos:position pos:line="1" pos:column="96"/></name> <name pos:line="1" pos:column="97">long<pos:position pos:line="1" pos:column="101"/></name></type> <name pos:line="1" pos:column="102">size<pos:position pos:line="1" pos:column="106"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="108">void<pos:position pos:line="1" pos:column="112"/></name> <modifier pos:line="1" pos:column="113">*<pos:position pos:line="1" pos:column="114"/></modifier></type><name pos:line="1" pos:column="114">buffer<pos:position pos:line="1" pos:column="120"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="122">int<pos:position pos:line="1" pos:column="125"/></name> <modifier pos:line="1" pos:column="126">*<pos:position pos:line="1" pos:column="127"/></modifier></type><name pos:line="1" pos:column="127">eaten_p<pos:position pos:line="1" pos:column="134"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="135"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">obj<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<expr_stmt><expr><operator pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">eaten_p<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">=<pos:position pos:line="4" pos:column="19"/></operator> <literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr>;<pos:position pos:line="4" pos:column="22"/></expr_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">obj<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <name pos:line="6" pos:column="15">NULL<pos:position pos:line="6" pos:column="19"/></name></expr>;<pos:position pos:line="6" pos:column="20"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">type<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">==<pos:position pos:line="7" pos:column="20"/></operator> <name pos:line="7" pos:column="21">OBJ_BLOB<pos:position pos:line="7" pos:column="29"/></name></expr>)<pos:position pos:line="7" pos:column="30"/></condition><then pos:line="7" pos:column="30"> <block pos:line="7" pos:column="31">{
		<decl_stmt><decl><type><name><name pos:line="8" pos:column="17">struct<pos:position pos:line="8" pos:column="23"/></name> <name pos:line="8" pos:column="24">blob<pos:position pos:line="8" pos:column="28"/></name></name> <modifier pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></modifier></type><name pos:line="8" pos:column="30">blob<pos:position pos:line="8" pos:column="34"/></name> <init pos:line="8" pos:column="35">= <expr><call><name pos:line="8" pos:column="37">lookup_blob<pos:position pos:line="8" pos:column="48"/></name><argument_list pos:line="8" pos:column="48">(<argument><expr><name pos:line="8" pos:column="49">oid<pos:position pos:line="8" pos:column="52"/></name></expr></argument>)<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="54"/></decl_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">blob<pos:position pos:line="9" pos:column="25"/></name></expr>)<pos:position pos:line="9" pos:column="26"/></condition><then pos:line="9" pos:column="26"> <block pos:line="9" pos:column="27">{
			<if pos:line="10" pos:column="25">if <condition pos:line="10" pos:column="28">(<expr><call><name pos:line="10" pos:column="29">parse_blob_buffer<pos:position pos:line="10" pos:column="46"/></name><argument_list pos:line="10" pos:column="46">(<argument><expr><name pos:line="10" pos:column="47">blob<pos:position pos:line="10" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="53">buffer<pos:position pos:line="10" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="61">size<pos:position pos:line="10" pos:column="65"/></name></expr></argument>)<pos:position pos:line="10" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="67"/></condition><then pos:line="10" pos:column="67">
				<block type="pseudo"><return pos:line="11" pos:column="33">return <expr><name pos:line="11" pos:column="40">NULL<pos:position pos:line="11" pos:column="44"/></name></expr>;<pos:position pos:line="11" pos:column="45"/></return></block></then></if>
			<expr_stmt><expr><name pos:line="12" pos:column="25">obj<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">=<pos:position pos:line="12" pos:column="30"/></operator> <operator pos:line="12" pos:column="31">&amp;<pos:position pos:line="12" pos:column="36"/></operator><name><name pos:line="12" pos:column="32">blob<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">object<pos:position pos:line="12" pos:column="44"/></name></name></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>
	}<pos:position pos:line="14" pos:column="10"/></block></then> <elseif pos:line="14" pos:column="11">else <if pos:line="14" pos:column="16">if <condition pos:line="14" pos:column="19">(<expr><name pos:line="14" pos:column="20">type<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">==<pos:position pos:line="14" pos:column="27"/></operator> <name pos:line="14" pos:column="28">OBJ_TREE<pos:position pos:line="14" pos:column="36"/></name></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37"> <block pos:line="14" pos:column="38">{
		<decl_stmt><decl><type><name><name pos:line="15" pos:column="17">struct<pos:position pos:line="15" pos:column="23"/></name> <name pos:line="15" pos:column="24">tree<pos:position pos:line="15" pos:column="28"/></name></name> <modifier pos:line="15" pos:column="29">*<pos:position pos:line="15" pos:column="30"/></modifier></type><name pos:line="15" pos:column="30">tree<pos:position pos:line="15" pos:column="34"/></name> <init pos:line="15" pos:column="35">= <expr><call><name pos:line="15" pos:column="37">lookup_tree<pos:position pos:line="15" pos:column="48"/></name><argument_list pos:line="15" pos:column="48">(<argument><expr><name pos:line="15" pos:column="49">oid<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="54"/></decl_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">tree<pos:position pos:line="16" pos:column="25"/></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26"> <block pos:line="16" pos:column="27">{
			<expr_stmt><expr><name pos:line="17" pos:column="25">obj<pos:position pos:line="17" pos:column="28"/></name> <operator pos:line="17" pos:column="29">=<pos:position pos:line="17" pos:column="30"/></operator> <operator pos:line="17" pos:column="31">&amp;<pos:position pos:line="17" pos:column="36"/></operator><name><name pos:line="17" pos:column="32">tree<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">-&gt;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="38">object<pos:position pos:line="17" pos:column="44"/></name></name></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><operator pos:line="18" pos:column="29">!<pos:position pos:line="18" pos:column="30"/></operator><name><name pos:line="18" pos:column="30">tree<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">-&gt;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="36">buffer<pos:position pos:line="18" pos:column="42"/></name></name></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="19" pos:column="33">tree<pos:position pos:line="19" pos:column="37"/></name><operator pos:line="19" pos:column="37">-&gt;<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="39">object<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">.<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="46">parsed<pos:position pos:line="19" pos:column="52"/></name></name> <operator pos:line="19" pos:column="53">=<pos:position pos:line="19" pos:column="54"/></operator> <literal type="number" pos:line="19" pos:column="55">0<pos:position pos:line="19" pos:column="56"/></literal></expr>;<pos:position pos:line="19" pos:column="57"/></expr_stmt></block></then></if>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><operator pos:line="20" pos:column="29">!<pos:position pos:line="20" pos:column="30"/></operator><name><name pos:line="20" pos:column="30">tree<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">-&gt;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="36">object<pos:position pos:line="20" pos:column="42"/></name><operator pos:line="20" pos:column="42">.<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="43">parsed<pos:position pos:line="20" pos:column="49"/></name></name></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50"> <block pos:line="20" pos:column="51">{
				<if pos:line="21" pos:column="33">if <condition pos:line="21" pos:column="36">(<expr><call><name pos:line="21" pos:column="37">parse_tree_buffer<pos:position pos:line="21" pos:column="54"/></name><argument_list pos:line="21" pos:column="54">(<argument><expr><name pos:line="21" pos:column="55">tree<pos:position pos:line="21" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="61">buffer<pos:position pos:line="21" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="69">size<pos:position pos:line="21" pos:column="73"/></name></expr></argument>)<pos:position pos:line="21" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="75"/></condition><then pos:line="21" pos:column="75">
					<block type="pseudo"><return pos:line="22" pos:column="41">return <expr><name pos:line="22" pos:column="48">NULL<pos:position pos:line="22" pos:column="52"/></name></expr>;<pos:position pos:line="22" pos:column="53"/></return></block></then></if>
				<expr_stmt><expr><operator pos:line="23" pos:column="33">*<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="34">eaten_p<pos:position pos:line="23" pos:column="41"/></name> <operator pos:line="23" pos:column="42">=<pos:position pos:line="23" pos:column="43"/></operator> <literal type="number" pos:line="23" pos:column="44">1<pos:position pos:line="23" pos:column="45"/></literal></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt>
			}<pos:position pos:line="24" pos:column="26"/></block></then></if>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if></elseif> <elseif pos:line="26" pos:column="11">else <if pos:line="26" pos:column="16">if <condition pos:line="26" pos:column="19">(<expr><name pos:line="26" pos:column="20">type<pos:position pos:line="26" pos:column="24"/></name> <operator pos:line="26" pos:column="25">==<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="28">OBJ_COMMIT<pos:position pos:line="26" pos:column="38"/></name></expr>)<pos:position pos:line="26" pos:column="39"/></condition><then pos:line="26" pos:column="39"> <block pos:line="26" pos:column="40">{
		<decl_stmt><decl><type><name><name pos:line="27" pos:column="17">struct<pos:position pos:line="27" pos:column="23"/></name> <name pos:line="27" pos:column="24">commit<pos:position pos:line="27" pos:column="30"/></name></name> <modifier pos:line="27" pos:column="31">*<pos:position pos:line="27" pos:column="32"/></modifier></type><name pos:line="27" pos:column="32">commit<pos:position pos:line="27" pos:column="38"/></name> <init pos:line="27" pos:column="39">= <expr><call><name pos:line="27" pos:column="41">lookup_commit<pos:position pos:line="27" pos:column="54"/></name><argument_list pos:line="27" pos:column="54">(<argument><expr><name pos:line="27" pos:column="55">oid<pos:position pos:line="27" pos:column="58"/></name></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="60"/></decl_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">commit<pos:position pos:line="28" pos:column="27"/></name></expr>)<pos:position pos:line="28" pos:column="28"/></condition><then pos:line="28" pos:column="28"> <block pos:line="28" pos:column="29">{
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><call><name pos:line="29" pos:column="29">parse_commit_buffer<pos:position pos:line="29" pos:column="48"/></name><argument_list pos:line="29" pos:column="48">(<argument><expr><name pos:line="29" pos:column="49">commit<pos:position pos:line="29" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="57">buffer<pos:position pos:line="29" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="65">size<pos:position pos:line="29" pos:column="69"/></name></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="71"/></condition><then pos:line="29" pos:column="71">
				<block type="pseudo"><return pos:line="30" pos:column="33">return <expr><name pos:line="30" pos:column="40">NULL<pos:position pos:line="30" pos:column="44"/></name></expr>;<pos:position pos:line="30" pos:column="45"/></return></block></then></if>
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><operator pos:line="31" pos:column="29">!<pos:position pos:line="31" pos:column="30"/></operator><call><name pos:line="31" pos:column="30">get_cached_commit_buffer<pos:position pos:line="31" pos:column="54"/></name><argument_list pos:line="31" pos:column="54">(<argument><expr><name pos:line="31" pos:column="55">commit<pos:position pos:line="31" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="63">NULL<pos:position pos:line="31" pos:column="67"/></name></expr></argument>)<pos:position pos:line="31" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="69"/></condition><then pos:line="31" pos:column="69"> <block pos:line="31" pos:column="70">{
				<expr_stmt><expr><call><name pos:line="32" pos:column="33">set_commit_buffer<pos:position pos:line="32" pos:column="50"/></name><argument_list pos:line="32" pos:column="50">(<argument><expr><name pos:line="32" pos:column="51">commit<pos:position pos:line="32" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="59">buffer<pos:position pos:line="32" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="67">size<pos:position pos:line="32" pos:column="71"/></name></expr></argument>)<pos:position pos:line="32" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="73"/></expr_stmt>
				<expr_stmt><expr><operator pos:line="33" pos:column="33">*<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">eaten_p<pos:position pos:line="33" pos:column="41"/></name> <operator pos:line="33" pos:column="42">=<pos:position pos:line="33" pos:column="43"/></operator> <literal type="number" pos:line="33" pos:column="44">1<pos:position pos:line="33" pos:column="45"/></literal></expr>;<pos:position pos:line="33" pos:column="46"/></expr_stmt>
			}<pos:position pos:line="34" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="35" pos:column="25">obj<pos:position pos:line="35" pos:column="28"/></name> <operator pos:line="35" pos:column="29">=<pos:position pos:line="35" pos:column="30"/></operator> <operator pos:line="35" pos:column="31">&amp;<pos:position pos:line="35" pos:column="36"/></operator><name><name pos:line="35" pos:column="32">commit<pos:position pos:line="35" pos:column="38"/></name><operator pos:line="35" pos:column="38">-&gt;<pos:position pos:line="35" pos:column="43"/></operator><name pos:line="35" pos:column="40">object<pos:position pos:line="35" pos:column="46"/></name></name></expr>;<pos:position pos:line="35" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if></elseif> <elseif pos:line="37" pos:column="11">else <if pos:line="37" pos:column="16">if <condition pos:line="37" pos:column="19">(<expr><name pos:line="37" pos:column="20">type<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">==<pos:position pos:line="37" pos:column="27"/></operator> <name pos:line="37" pos:column="28">OBJ_TAG<pos:position pos:line="37" pos:column="35"/></name></expr>)<pos:position pos:line="37" pos:column="36"/></condition><then pos:line="37" pos:column="36"> <block pos:line="37" pos:column="37">{
		<decl_stmt><decl><type><name><name pos:line="38" pos:column="17">struct<pos:position pos:line="38" pos:column="23"/></name> <name pos:line="38" pos:column="24">tag<pos:position pos:line="38" pos:column="27"/></name></name> <modifier pos:line="38" pos:column="28">*<pos:position pos:line="38" pos:column="29"/></modifier></type><name pos:line="38" pos:column="29">tag<pos:position pos:line="38" pos:column="32"/></name> <init pos:line="38" pos:column="33">= <expr><call><name pos:line="38" pos:column="35">lookup_tag<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><name pos:line="38" pos:column="46">oid<pos:position pos:line="38" pos:column="49"/></name></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="51"/></decl_stmt>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">tag<pos:position pos:line="39" pos:column="24"/></name></expr>)<pos:position pos:line="39" pos:column="25"/></condition><then pos:line="39" pos:column="25"> <block pos:line="39" pos:column="26">{
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><call><name pos:line="40" pos:column="29">parse_tag_buffer<pos:position pos:line="40" pos:column="45"/></name><argument_list pos:line="40" pos:column="45">(<argument><expr><name pos:line="40" pos:column="46">tag<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="51">buffer<pos:position pos:line="40" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="59">size<pos:position pos:line="40" pos:column="63"/></name></expr></argument>)<pos:position pos:line="40" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="65"/></condition><then pos:line="40" pos:column="65">
			       <block type="pseudo"><return pos:line="41" pos:column="32">return <expr><name pos:line="41" pos:column="39">NULL<pos:position pos:line="41" pos:column="43"/></name></expr>;<pos:position pos:line="41" pos:column="44"/></return></block></then></if>
			<expr_stmt><expr><name pos:line="42" pos:column="25">obj<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">=<pos:position pos:line="42" pos:column="30"/></operator> <operator pos:line="42" pos:column="31">&amp;<pos:position pos:line="42" pos:column="36"/></operator><name><name pos:line="42" pos:column="32">tag<pos:position pos:line="42" pos:column="35"/></name><operator pos:line="42" pos:column="35">-&gt;<pos:position pos:line="42" pos:column="40"/></operator><name pos:line="42" pos:column="37">object<pos:position pos:line="42" pos:column="43"/></name></name></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if></elseif> <else pos:line="44" pos:column="11">else <block pos:line="44" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">warning<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><literal type="string" pos:line="45" pos:column="25">"object %s has unknown type id %d"<pos:position pos:line="45" pos:column="59"/></literal></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="61">oid_to_hex<pos:position pos:line="45" pos:column="71"/></name><argument_list pos:line="45" pos:column="71">(<argument><expr><name pos:line="45" pos:column="72">oid<pos:position pos:line="45" pos:column="75"/></name></expr></argument>)<pos:position pos:line="45" pos:column="76"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="45" pos:column="78">type<pos:position pos:line="45" pos:column="82"/></name></expr></argument>)<pos:position pos:line="45" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="84"/></expr_stmt>
		<expr_stmt><expr><name pos:line="46" pos:column="17">obj<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">NULL<pos:position pos:line="46" pos:column="27"/></name></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></else></if>
	<return pos:line="48" pos:column="9">return <expr><name pos:line="48" pos:column="16">obj<pos:position pos:line="48" pos:column="19"/></name></expr>;<pos:position pos:line="48" pos:column="20"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
