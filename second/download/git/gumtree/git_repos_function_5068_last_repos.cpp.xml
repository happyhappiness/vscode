<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5068_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">verify_object<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">unsigned<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">sha1<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">expected_type<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><operator pos:line="3" pos:column="19">-<pos:position pos:line="3" pos:column="20"/></operator><literal type="number" pos:line="3" pos:column="20">1<pos:position pos:line="3" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">enum<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">object_type<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">type<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">size<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">void<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">buffer<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><call><name pos:line="6" pos:column="24">read_sha1_file<pos:position pos:line="6" pos:column="38"/></name><argument_list pos:line="6" pos:column="38">(<argument><expr><name pos:line="6" pos:column="39">sha1<pos:position pos:line="6" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="45">&amp;<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="46">type<pos:position pos:line="6" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="52">&amp;<pos:position pos:line="6" pos:column="57"/></operator><name pos:line="6" pos:column="53">size<pos:position pos:line="6" pos:column="57"/></name></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">unsigned<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">char<pos:position pos:line="7" pos:column="28"/></name> <modifier pos:line="7" pos:column="29">*<pos:position pos:line="7" pos:column="30"/></modifier></type><name pos:line="7" pos:column="30">repl<pos:position pos:line="7" pos:column="34"/></name> <init pos:line="7" pos:column="35">= <expr><call><name pos:line="7" pos:column="37">lookup_replace_object<pos:position pos:line="7" pos:column="58"/></name><argument_list pos:line="7" pos:column="58">(<argument><expr><name pos:line="7" pos:column="59">sha1<pos:position pos:line="7" pos:column="63"/></name></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="65"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">buffer<pos:position pos:line="9" pos:column="19"/></name></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20"> <block pos:line="9" pos:column="21">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name pos:line="10" pos:column="21">type<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">==<pos:position pos:line="10" pos:column="28"/></operator> <call><name pos:line="10" pos:column="29">type_from_string<pos:position pos:line="10" pos:column="45"/></name><argument_list pos:line="10" pos:column="45">(<argument><expr><name pos:line="10" pos:column="46">expected_type<pos:position pos:line="10" pos:column="59"/></name></expr></argument>)<pos:position pos:line="10" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="61"/></condition><then pos:line="10" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="25">ret<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">=<pos:position pos:line="11" pos:column="30"/></operator> <call><name pos:line="11" pos:column="31">check_sha1_signature<pos:position pos:line="11" pos:column="51"/></name><argument_list pos:line="11" pos:column="51">(<argument><expr><name pos:line="11" pos:column="52">repl<pos:position pos:line="11" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="58">buffer<pos:position pos:line="11" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="66">size<pos:position pos:line="11" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="72">expected_type<pos:position pos:line="11" pos:column="85"/></name></expr></argument>)<pos:position pos:line="11" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="87"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">free<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">buffer<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">ret<pos:position pos:line="14" pos:column="19"/></name></expr>;<pos:position pos:line="14" pos:column="20"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
