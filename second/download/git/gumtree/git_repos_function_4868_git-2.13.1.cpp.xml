<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4868_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">run_rebase<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">object_id<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">curr_head<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name><name pos:line="2" pos:column="23">struct<pos:position pos:line="2" pos:column="29"/></name> <name pos:line="2" pos:column="30">object_id<pos:position pos:line="2" pos:column="39"/></name></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">merge_head<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name><name pos:line="3" pos:column="23">struct<pos:position pos:line="3" pos:column="29"/></name> <name pos:line="3" pos:column="30">object_id<pos:position pos:line="3" pos:column="39"/></name></name> <modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier></type><name pos:line="3" pos:column="41">fork_point<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="52"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">ret<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object_id<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">oct_merge_base<pos:position pos:line="6" pos:column="40"/></name></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">argv_array<pos:position pos:line="7" pos:column="26"/></name></name></type> <name pos:line="7" pos:column="27">args<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><name pos:line="7" pos:column="34">ARGV_ARRAY_INIT<pos:position pos:line="7" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="50"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">get_octopus_merge_base<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><operator pos:line="9" pos:column="37">&amp;<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="38">oct_merge_base<pos:position pos:line="9" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="54">curr_head<pos:position pos:line="9" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="65">merge_head<pos:position pos:line="9" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="77">fork_point<pos:position pos:line="9" pos:column="87"/></name></expr></argument>)<pos:position pos:line="9" pos:column="88"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="89"/></condition><then pos:line="9" pos:column="89">
		<block type="pseudo"><if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><call><name pos:line="10" pos:column="22">is_null_oid<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">fork_point<pos:position pos:line="10" pos:column="44"/></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call> <operator pos:line="10" pos:column="46">&amp;&amp;<pos:position pos:line="10" pos:column="56"/></operator> <operator pos:line="10" pos:column="49">!<pos:position pos:line="10" pos:column="50"/></operator><call><name pos:line="10" pos:column="50">oidcmp<pos:position pos:line="10" pos:column="56"/></name><argument_list pos:line="10" pos:column="56">(<argument><expr><operator pos:line="10" pos:column="57">&amp;<pos:position pos:line="10" pos:column="62"/></operator><name pos:line="10" pos:column="58">oct_merge_base<pos:position pos:line="10" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="74">fork_point<pos:position pos:line="10" pos:column="84"/></name></expr></argument>)<pos:position pos:line="10" pos:column="85"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="86"/></condition><then pos:line="10" pos:column="86">
			<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="25">fork_point<pos:position pos:line="11" pos:column="35"/></name> <operator pos:line="11" pos:column="36">=<pos:position pos:line="11" pos:column="37"/></operator> <name pos:line="11" pos:column="38">NULL<pos:position pos:line="11" pos:column="42"/></name></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt></block></then></if></block></then></if>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">argv_array_push<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><operator pos:line="13" pos:column="25">&amp;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="26">args<pos:position pos:line="13" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="32">"rebase"<pos:position pos:line="13" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>

	<comment type="block" pos:line="15" pos:column="9">/* Shared options */</comment>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">argv_push_verbosity<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><operator pos:line="16" pos:column="29">&amp;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="30">args<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>

	<comment type="block" pos:line="18" pos:column="9">/* Options passed to git-rebase */</comment>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">opt_rebase<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">==<pos:position pos:line="19" pos:column="26"/></operator> <name pos:line="19" pos:column="27">REBASE_PRESERVE<pos:position pos:line="19" pos:column="42"/></name></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">argv_array_push<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><operator pos:line="20" pos:column="33">&amp;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="34">args<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="40">"--preserve-merges"<pos:position pos:line="20" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt></block></then>
	<elseif pos:line="21" pos:column="9">else <if pos:line="21" pos:column="14">if <condition pos:line="21" pos:column="17">(<expr><name pos:line="21" pos:column="18">opt_rebase<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">==<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">REBASE_INTERACTIVE<pos:position pos:line="21" pos:column="50"/></name></expr>)<pos:position pos:line="21" pos:column="51"/></condition><then pos:line="21" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="17">argv_array_push<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><operator pos:line="22" pos:column="33">&amp;<pos:position pos:line="22" pos:column="38"/></operator><name pos:line="22" pos:column="34">args<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="40">"--interactive"<pos:position pos:line="22" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="57"/></expr_stmt></block></then></if></elseif></if>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">opt_diffstat<pos:position pos:line="23" pos:column="25"/></name></expr>)<pos:position pos:line="23" pos:column="26"/></condition><then pos:line="23" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="17">argv_array_push<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><operator pos:line="24" pos:column="33">&amp;<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="34">args<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="40">opt_diffstat<pos:position pos:line="24" pos:column="52"/></name></expr></argument>)<pos:position pos:line="24" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="54"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">argv_array_pushv<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><operator pos:line="25" pos:column="26">&amp;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="27">args<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="33">opt_strategies<pos:position pos:line="25" pos:column="47"/></name><operator pos:line="25" pos:column="47">.<pos:position pos:line="25" pos:column="48"/></operator><name pos:line="25" pos:column="48">argv<pos:position pos:line="25" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">argv_array_pushv<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">(<argument><expr><operator pos:line="26" pos:column="26">&amp;<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="27">args<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="33">opt_strategy_opts<pos:position pos:line="26" pos:column="50"/></name><operator pos:line="26" pos:column="50">.<pos:position pos:line="26" pos:column="51"/></operator><name pos:line="26" pos:column="51">argv<pos:position pos:line="26" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="57"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">opt_gpg_sign<pos:position pos:line="27" pos:column="25"/></name></expr>)<pos:position pos:line="27" pos:column="26"/></condition><then pos:line="27" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">argv_array_push<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><operator pos:line="28" pos:column="33">&amp;<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="34">args<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">opt_gpg_sign<pos:position pos:line="28" pos:column="52"/></name></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt></block></then></if>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">opt_autostash<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">==<pos:position pos:line="29" pos:column="29"/></operator> <literal type="number" pos:line="29" pos:column="30">0<pos:position pos:line="29" pos:column="31"/></literal></expr>)<pos:position pos:line="29" pos:column="32"/></condition><then pos:line="29" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="17">argv_array_push<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><operator pos:line="30" pos:column="33">&amp;<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="34">args<pos:position pos:line="30" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="40">"--no-autostash"<pos:position pos:line="30" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="58"/></expr_stmt></block></then>
	<elseif pos:line="31" pos:column="9">else <if pos:line="31" pos:column="14">if <condition pos:line="31" pos:column="17">(<expr><name pos:line="31" pos:column="18">opt_autostash<pos:position pos:line="31" pos:column="31"/></name> <operator pos:line="31" pos:column="32">==<pos:position pos:line="31" pos:column="34"/></operator> <literal type="number" pos:line="31" pos:column="35">1<pos:position pos:line="31" pos:column="36"/></literal></expr>)<pos:position pos:line="31" pos:column="37"/></condition><then pos:line="31" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="17">argv_array_push<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><operator pos:line="32" pos:column="33">&amp;<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="34">args<pos:position pos:line="32" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="40">"--autostash"<pos:position pos:line="32" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt></block></then></if></elseif></if>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">opt_verify_signatures<pos:position pos:line="33" pos:column="34"/></name> <operator pos:line="33" pos:column="35">&amp;&amp;<pos:position pos:line="33" pos:column="45"/></operator>
	    <operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><call><name pos:line="34" pos:column="14">strcmp<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><name pos:line="34" pos:column="21">opt_verify_signatures<pos:position pos:line="34" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="44">"--verify-signatures"<pos:position pos:line="34" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="67"/></condition><then pos:line="34" pos:column="67">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="17">warning<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><call><name pos:line="35" pos:column="25">_<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><literal type="string" pos:line="35" pos:column="27">"ignoring --verify-signatures for rebase"<pos:position pos:line="35" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="71"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="37" pos:column="9">argv_array_push<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><operator pos:line="37" pos:column="25">&amp;<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="26">args<pos:position pos:line="37" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="32">"--onto"<pos:position pos:line="37" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">argv_array_push<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><operator pos:line="38" pos:column="25">&amp;<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="26">args<pos:position pos:line="38" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="32">oid_to_hex<pos:position pos:line="38" pos:column="42"/></name><argument_list pos:line="38" pos:column="42">(<argument><expr><name pos:line="38" pos:column="43">merge_head<pos:position pos:line="38" pos:column="53"/></name></expr></argument>)<pos:position pos:line="38" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="56"/></expr_stmt>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">fork_point<pos:position pos:line="40" pos:column="23"/></name> <operator pos:line="40" pos:column="24">&amp;&amp;<pos:position pos:line="40" pos:column="34"/></operator> <operator pos:line="40" pos:column="27">!<pos:position pos:line="40" pos:column="28"/></operator><call><name pos:line="40" pos:column="28">is_null_oid<pos:position pos:line="40" pos:column="39"/></name><argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">fork_point<pos:position pos:line="40" pos:column="50"/></name></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="52"/></condition><then pos:line="40" pos:column="52">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="17">argv_array_push<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><operator pos:line="41" pos:column="33">&amp;<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="34">args<pos:position pos:line="41" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="40">oid_to_hex<pos:position pos:line="41" pos:column="50"/></name><argument_list pos:line="41" pos:column="50">(<argument><expr><name pos:line="41" pos:column="51">fork_point<pos:position pos:line="41" pos:column="61"/></name></expr></argument>)<pos:position pos:line="41" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="64"/></expr_stmt></block></then>
	<else pos:line="42" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="17">argv_array_push<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><operator pos:line="43" pos:column="33">&amp;<pos:position pos:line="43" pos:column="38"/></operator><name pos:line="43" pos:column="34">args<pos:position pos:line="43" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="40">oid_to_hex<pos:position pos:line="43" pos:column="50"/></name><argument_list pos:line="43" pos:column="50">(<argument><expr><name pos:line="43" pos:column="51">merge_head<pos:position pos:line="43" pos:column="61"/></name></expr></argument>)<pos:position pos:line="43" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="64"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="45" pos:column="9">ret<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <call><name pos:line="45" pos:column="15">run_command_v_opt<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><name><name pos:line="45" pos:column="33">args<pos:position pos:line="45" pos:column="37"/></name><operator pos:line="45" pos:column="37">.<pos:position pos:line="45" pos:column="38"/></operator><name pos:line="45" pos:column="38">argv<pos:position pos:line="45" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="44">RUN_GIT_CMD<pos:position pos:line="45" pos:column="55"/></name></expr></argument>)<pos:position pos:line="45" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">argv_array_clear<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><operator pos:line="46" pos:column="26">&amp;<pos:position pos:line="46" pos:column="31"/></operator><name pos:line="46" pos:column="27">args<pos:position pos:line="46" pos:column="31"/></name></expr></argument>)<pos:position pos:line="46" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="33"/></expr_stmt>
	<return pos:line="47" pos:column="9">return <expr><name pos:line="47" pos:column="16">ret<pos:position pos:line="47" pos:column="19"/></name></expr>;<pos:position pos:line="47" pos:column="20"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
