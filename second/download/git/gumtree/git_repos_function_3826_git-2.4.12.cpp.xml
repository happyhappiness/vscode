<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3826_git-2.4.12.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">unsigned<pos:position pos:line="1" pos:column="9"/></name> <name pos:line="1" pos:column="10">long<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">xdl_hash_record<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier><modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">data<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">top<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">long<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">flags<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list> <block pos:line="1" pos:column="79">{
	<decl_stmt><decl><type><name pos:line="2" pos:column="9">unsigned<pos:position pos:line="2" pos:column="17"/></name> <name pos:line="2" pos:column="18">long<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">ha<pos:position pos:line="2" pos:column="25"/></name> <init pos:line="2" pos:column="26">= <expr><literal type="number" pos:line="2" pos:column="28">5381<pos:position pos:line="2" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <specifier pos:line="3" pos:column="14">const<pos:position pos:line="3" pos:column="19"/></specifier> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">ptr<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><operator pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></operator><name pos:line="3" pos:column="28">data<pos:position pos:line="3" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">flags<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">&amp;<pos:position pos:line="5" pos:column="24"/></operator> <name pos:line="5" pos:column="21">XDF_WHITESPACE_FLAGS<pos:position pos:line="5" pos:column="41"/></name></expr>)<pos:position pos:line="5" pos:column="42"/></condition><then pos:line="5" pos:column="42">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><call><name pos:line="6" pos:column="24">xdl_hash_record_with_whitespace<pos:position pos:line="6" pos:column="55"/></name><argument_list pos:line="6" pos:column="55">(<argument><expr><name pos:line="6" pos:column="56">data<pos:position pos:line="6" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="62">top<pos:position pos:line="6" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="67">flags<pos:position pos:line="6" pos:column="72"/></name></expr></argument>)<pos:position pos:line="6" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="74"/></return></block></then></if>

	<for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init pos:line="8" pos:column="14">;<pos:position pos:line="8" pos:column="15"/></init> <condition><expr><name pos:line="8" pos:column="16">ptr<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">&lt;<pos:position pos:line="8" pos:column="24"/></operator> <name pos:line="8" pos:column="22">top<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">&amp;&amp;<pos:position pos:line="8" pos:column="36"/></operator> <operator pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="30">ptr<pos:position pos:line="8" pos:column="33"/></name> <operator pos:line="8" pos:column="34">!=<pos:position pos:line="8" pos:column="36"/></operator> <literal type="char" pos:line="8" pos:column="37">'\n'<pos:position pos:line="8" pos:column="41"/></literal></expr>;<pos:position pos:line="8" pos:column="42"/></condition> <incr><expr><name pos:line="8" pos:column="43">ptr<pos:position pos:line="8" pos:column="46"/></name><operator pos:line="8" pos:column="46">++<pos:position pos:line="8" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="8" pos:column="49"/></control> <block pos:line="8" pos:column="50">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">ha<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">+=<pos:position pos:line="9" pos:column="22"/></operator> <operator pos:line="9" pos:column="23">(<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="24">ha<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">&lt;&lt;<pos:position pos:line="9" pos:column="35"/></operator> <literal type="number" pos:line="9" pos:column="30">5<pos:position pos:line="9" pos:column="31"/></literal><operator pos:line="9" pos:column="31">)<pos:position pos:line="9" pos:column="32"/></operator></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">ha<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">^=<pos:position pos:line="10" pos:column="22"/></operator> <operator pos:line="10" pos:column="23">(<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="24">unsigned<pos:position pos:line="10" pos:column="32"/></name> <name pos:line="10" pos:column="33">long<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">)<pos:position pos:line="10" pos:column="38"/></operator> <operator pos:line="10" pos:column="39">*<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="40">ptr<pos:position pos:line="10" pos:column="43"/></name></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></for>
	<expr_stmt><expr><operator pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">data<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <ternary><condition><expr><name pos:line="12" pos:column="17">ptr<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">&lt;<pos:position pos:line="12" pos:column="25"/></operator> <name pos:line="12" pos:column="23">top<pos:position pos:line="12" pos:column="26"/></name></expr> ?<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28"> <expr><name pos:line="12" pos:column="29">ptr<pos:position pos:line="12" pos:column="32"/></name> <operator pos:line="12" pos:column="33">+<pos:position pos:line="12" pos:column="34"/></operator> <literal type="number" pos:line="12" pos:column="35">1<pos:position pos:line="12" pos:column="36"/></literal></expr></then><else pos:line="12" pos:column="36">: <expr><name pos:line="12" pos:column="38">ptr<pos:position pos:line="12" pos:column="41"/></name></expr></else></ternary></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>

	<return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">ha<pos:position pos:line="14" pos:column="18"/></name></expr>;<pos:position pos:line="14" pos:column="19"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
