<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_250_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">bitmap_position<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">unsigned<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">sha1<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">pos<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><call><name pos:line="3" pos:column="19">bitmap_position_packfile<pos:position pos:line="3" pos:column="43"/></name><argument_list pos:line="3" pos:column="43">(<argument><expr><name pos:line="3" pos:column="44">sha1<pos:position pos:line="3" pos:column="48"/></name></expr></argument>)<pos:position pos:line="3" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="50"/></decl_stmt>
	<return pos:line="4" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="4" pos:column="16">(<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">pos<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">&gt;=<pos:position pos:line="4" pos:column="26"/></operator> <literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal><operator pos:line="4" pos:column="25">)<pos:position pos:line="4" pos:column="26"/></operator></expr> ?<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28"> <expr><name pos:line="4" pos:column="29">pos<pos:position pos:line="4" pos:column="32"/></name></expr> <pos:position pos:line="4" pos:column="33"/></then><else pos:line="4" pos:column="33">: <expr><call><name pos:line="4" pos:column="35">bitmap_position_extended<pos:position pos:line="4" pos:column="59"/></name><argument_list pos:line="4" pos:column="59">(<argument><expr><name pos:line="4" pos:column="60">sha1<pos:position pos:line="4" pos:column="64"/></name></expr></argument>)<pos:position pos:line="4" pos:column="65"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="4" pos:column="66"/></return>
}<pos:position pos:line="5" pos:column="2"/></block></function></unit>
