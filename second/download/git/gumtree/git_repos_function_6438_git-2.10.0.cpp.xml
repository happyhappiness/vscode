<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6438_git-2.10.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">check_arrival<pos:position pos:line="3" pos:column="14"/></name> <parameter_list pos:line="3" pos:column="15">(<parameter><decl><type><name pos:line="3" pos:column="16">re_match_context_t<pos:position pos:line="3" pos:column="34"/></name> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier></type><name pos:line="3" pos:column="36">mctx<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="42">state_array_t<pos:position pos:line="3" pos:column="55"/></name> <modifier pos:line="3" pos:column="56">*<pos:position pos:line="3" pos:column="57"/></modifier></type><name pos:line="3" pos:column="57">path<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="63">int<pos:position pos:line="3" pos:column="66"/></name></type> <name pos:line="3" pos:column="67">top_node<pos:position pos:line="3" pos:column="75"/></name></decl></parameter>,
	       <parameter><decl><type><name pos:line="4" pos:column="16">int<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">top_str<pos:position pos:line="4" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="29">int<pos:position pos:line="4" pos:column="32"/></name></type> <name pos:line="4" pos:column="33">last_node<pos:position pos:line="4" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="44">int<pos:position pos:line="4" pos:column="47"/></name></type> <name pos:line="4" pos:column="48">last_str<pos:position pos:line="4" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="58">int<pos:position pos:line="4" pos:column="61"/></name></type> <name pos:line="4" pos:column="62">type<pos:position pos:line="4" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="67"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">re_dfa_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier><specifier pos:line="6" pos:column="19">const<pos:position pos:line="6" pos:column="24"/></specifier></type> <name pos:line="6" pos:column="25">dfa<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name><name pos:line="6" pos:column="31">mctx<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">dfa<pos:position pos:line="6" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">reg_errcode_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">err<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">REG_NOERROR<pos:position pos:line="7" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">subexp_num<pos:position pos:line="8" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="19">backup_cur_idx<pos:position pos:line="8" pos:column="33"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="35">str_idx<pos:position pos:line="8" pos:column="42"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="44">null_cnt<pos:position pos:line="8" pos:column="52"/></name></decl>;<pos:position pos:line="8" pos:column="53"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">re_dfastate_t<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">cur_state<pos:position pos:line="9" pos:column="27"/></name> <init pos:line="9" pos:column="28">= <expr><name pos:line="9" pos:column="30">NULL<pos:position pos:line="9" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">re_node_set<pos:position pos:line="10" pos:column="14"/></name> <modifier pos:line="10" pos:column="15">*<pos:position pos:line="10" pos:column="16"/></modifier></type><name pos:line="10" pos:column="16">cur_nodes<pos:position pos:line="10" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="27">next_nodes<pos:position pos:line="10" pos:column="37"/></name></decl>;<pos:position pos:line="10" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">re_dfastate_t<pos:position pos:line="11" pos:column="16"/></name> <modifier pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></modifier><modifier pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></modifier></type><name pos:line="11" pos:column="19">backup_state_log<pos:position pos:line="11" pos:column="35"/></name></decl>;<pos:position pos:line="11" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">unsigned<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">int<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">context<pos:position pos:line="12" pos:column="23"/></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">subexp_num<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <name><name pos:line="14" pos:column="16">dfa<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">-&gt;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="21">nodes<pos:position pos:line="14" pos:column="26"/></name><index pos:line="14" pos:column="26">[<expr><name pos:line="14" pos:column="27">top_node<pos:position pos:line="14" pos:column="35"/></name></expr>]<pos:position pos:line="14" pos:column="36"/></index></name><operator pos:line="14" pos:column="36">.<pos:position pos:line="14" pos:column="37"/></operator><name><name pos:line="14" pos:column="37">opr<pos:position pos:line="14" pos:column="40"/></name><operator pos:line="14" pos:column="40">.<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="41">idx<pos:position pos:line="14" pos:column="44"/></name></name></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
  <comment type="block" pos:line="15" pos:column="3">/* Extend the buffer if we need.  */</comment>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><call><name pos:line="16" pos:column="7">BE<pos:position pos:line="16" pos:column="9"/></name> <argument_list pos:line="16" pos:column="10">(<argument><expr><name><name pos:line="16" pos:column="11">path<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">-&gt;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="17">alloc<pos:position pos:line="16" pos:column="22"/></name></name> <operator pos:line="16" pos:column="23">&lt;<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="25">last_str<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">+<pos:position pos:line="16" pos:column="35"/></operator> <name><name pos:line="16" pos:column="36">mctx<pos:position pos:line="16" pos:column="40"/></name><operator pos:line="16" pos:column="40">-&gt;<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="42">max_mb_elem_len<pos:position pos:line="16" pos:column="57"/></name></name> <operator pos:line="16" pos:column="58">+<pos:position pos:line="16" pos:column="59"/></operator> <literal type="number" pos:line="16" pos:column="60">1<pos:position pos:line="16" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="63">0<pos:position pos:line="16" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="66"/></condition><then pos:line="16" pos:column="66">
    <block pos:line="17" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="18" pos:column="7">re_dfastate_t<pos:position pos:line="18" pos:column="20"/></name> <modifier pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></modifier><modifier pos:line="18" pos:column="22">*<pos:position pos:line="18" pos:column="23"/></modifier></type><name pos:line="18" pos:column="23">new_array<pos:position pos:line="18" pos:column="32"/></name></decl>;<pos:position pos:line="18" pos:column="33"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="19" pos:column="7">int<pos:position pos:line="19" pos:column="10"/></name></type> <name pos:line="19" pos:column="11">old_alloc<pos:position pos:line="19" pos:column="20"/></name> <init pos:line="19" pos:column="21">= <expr><name><name pos:line="19" pos:column="23">path<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">alloc<pos:position pos:line="19" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="35"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="20" pos:column="7">path<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">-&gt;<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="13">alloc<pos:position pos:line="20" pos:column="18"/></name></name> <operator pos:line="20" pos:column="19">+=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">last_str<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">+<pos:position pos:line="20" pos:column="32"/></operator> <name><name pos:line="20" pos:column="33">mctx<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">-&gt;<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="39">max_mb_elem_len<pos:position pos:line="20" pos:column="54"/></name></name> <operator pos:line="20" pos:column="55">+<pos:position pos:line="20" pos:column="56"/></operator> <literal type="number" pos:line="20" pos:column="57">1<pos:position pos:line="20" pos:column="58"/></literal></expr>;<pos:position pos:line="20" pos:column="59"/></expr_stmt>
      <expr_stmt><expr><name pos:line="21" pos:column="7">new_array<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <call><name pos:line="21" pos:column="19">re_realloc<pos:position pos:line="21" pos:column="29"/></name> <argument_list pos:line="21" pos:column="30">(<argument><expr><name><name pos:line="21" pos:column="31">path<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">-&gt;<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="37">array<pos:position pos:line="21" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="44">re_dfastate_t<pos:position pos:line="21" pos:column="57"/></name> <operator pos:line="21" pos:column="58">*<pos:position pos:line="21" pos:column="59"/></operator></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="61">path<pos:position pos:line="21" pos:column="65"/></name><operator pos:line="21" pos:column="65">-&gt;<pos:position pos:line="21" pos:column="70"/></operator><name pos:line="21" pos:column="67">alloc<pos:position pos:line="21" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="74"/></expr_stmt>
      <if pos:line="22" pos:column="7">if <condition pos:line="22" pos:column="10">(<expr><call><name pos:line="22" pos:column="11">BE<pos:position pos:line="22" pos:column="13"/></name> <argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">new_array<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">==<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="28">NULL<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="34">0<pos:position pos:line="22" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="37"/></condition><then pos:line="22" pos:column="37">
	<block pos:line="23" pos:column="9">{
	  <expr_stmt><expr><name><name pos:line="24" pos:column="11">path<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">alloc<pos:position pos:line="24" pos:column="22"/></name></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="25">old_alloc<pos:position pos:line="24" pos:column="34"/></name></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
	  <return pos:line="25" pos:column="11">return <expr><name pos:line="25" pos:column="18">REG_ESPACE<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">path<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">-&gt;<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="13">array<pos:position pos:line="27" pos:column="18"/></name></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <name pos:line="27" pos:column="21">new_array<pos:position pos:line="27" pos:column="30"/></name></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">memset<pos:position pos:line="28" pos:column="13"/></name> <argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">new_array<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">+<pos:position pos:line="28" pos:column="26"/></operator> <name pos:line="28" pos:column="27">old_alloc<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="38">'\0'<pos:position pos:line="28" pos:column="42"/></literal></expr></argument>,
	      <argument><expr><sizeof pos:line="29" pos:column="15">sizeof <argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">re_dfastate_t<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">*<pos:position pos:line="29" pos:column="38"/></operator></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></sizeof> <operator pos:line="29" pos:column="40">*<pos:position pos:line="29" pos:column="41"/></operator> <operator pos:line="29" pos:column="42">(<pos:position pos:line="29" pos:column="43"/></operator><name><name pos:line="29" pos:column="43">path<pos:position pos:line="29" pos:column="47"/></name><operator pos:line="29" pos:column="47">-&gt;<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="49">alloc<pos:position pos:line="29" pos:column="54"/></name></name> <operator pos:line="29" pos:column="55">-<pos:position pos:line="29" pos:column="56"/></operator> <name pos:line="29" pos:column="57">old_alloc<pos:position pos:line="29" pos:column="66"/></name><operator pos:line="29" pos:column="66">)<pos:position pos:line="29" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="32" pos:column="3">str_idx<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <ternary><condition><expr><name><name pos:line="32" pos:column="13">path<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">-&gt;<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="19">next_idx<pos:position pos:line="32" pos:column="27"/></name></name></expr> ?<pos:position pos:line="32" pos:column="29"/></condition><then pos:line="32" pos:column="29"> <expr><name><name pos:line="32" pos:column="30">path<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">-&gt;<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="36">next_idx<pos:position pos:line="32" pos:column="44"/></name></name></expr> <pos:position pos:line="32" pos:column="45"/></then><else pos:line="32" pos:column="45">: <expr><name pos:line="32" pos:column="47">top_str<pos:position pos:line="32" pos:column="54"/></name></expr></else></ternary></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt>

  <comment type="block" pos:line="34" pos:column="3">/* Temporary modify MCTX.  */</comment>
  <expr_stmt><expr><name pos:line="35" pos:column="3">backup_state_log<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <name><name pos:line="35" pos:column="22">mctx<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">-&gt;<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="28">state_log<pos:position pos:line="35" pos:column="37"/></name></name></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name pos:line="36" pos:column="3">backup_cur_idx<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <name><name pos:line="36" pos:column="20">mctx<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">input<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">.<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="32">cur_idx<pos:position pos:line="36" pos:column="39"/></name></name></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="37" pos:column="3">mctx<pos:position pos:line="37" pos:column="7"/></name><operator pos:line="37" pos:column="7">-&gt;<pos:position pos:line="37" pos:column="12"/></operator><name pos:line="37" pos:column="9">state_log<pos:position pos:line="37" pos:column="18"/></name></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <name><name pos:line="37" pos:column="21">path<pos:position pos:line="37" pos:column="25"/></name><operator pos:line="37" pos:column="25">-&gt;<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="27">array<pos:position pos:line="37" pos:column="32"/></name></name></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="38" pos:column="3">mctx<pos:position pos:line="38" pos:column="7"/></name><operator pos:line="38" pos:column="7">-&gt;<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="9">input<pos:position pos:line="38" pos:column="14"/></name><operator pos:line="38" pos:column="14">.<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="15">cur_idx<pos:position pos:line="38" pos:column="22"/></name></name> <operator pos:line="38" pos:column="23">=<pos:position pos:line="38" pos:column="24"/></operator> <name pos:line="38" pos:column="25">str_idx<pos:position pos:line="38" pos:column="32"/></name></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="40" pos:column="3">/* Setup initial node set.  */</comment>
  <expr_stmt><expr><name pos:line="41" pos:column="3">context<pos:position pos:line="41" pos:column="10"/></name> <operator pos:line="41" pos:column="11">=<pos:position pos:line="41" pos:column="12"/></operator> <call><name pos:line="41" pos:column="13">re_string_context_at<pos:position pos:line="41" pos:column="33"/></name> <argument_list pos:line="41" pos:column="34">(<argument><expr><operator pos:line="41" pos:column="35">&amp;<pos:position pos:line="41" pos:column="40"/></operator><name><name pos:line="41" pos:column="36">mctx<pos:position pos:line="41" pos:column="40"/></name><operator pos:line="41" pos:column="40">-&gt;<pos:position pos:line="41" pos:column="45"/></operator><name pos:line="41" pos:column="42">input<pos:position pos:line="41" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="49">str_idx<pos:position pos:line="41" pos:column="56"/></name> <operator pos:line="41" pos:column="57">-<pos:position pos:line="41" pos:column="58"/></operator> <literal type="number" pos:line="41" pos:column="59">1<pos:position pos:line="41" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="62">mctx<pos:position pos:line="41" pos:column="66"/></name><operator pos:line="41" pos:column="66">-&gt;<pos:position pos:line="41" pos:column="71"/></operator><name pos:line="41" pos:column="68">eflags<pos:position pos:line="41" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="76"/></expr_stmt>
  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><name pos:line="42" pos:column="7">str_idx<pos:position pos:line="42" pos:column="14"/></name> <operator pos:line="42" pos:column="15">==<pos:position pos:line="42" pos:column="17"/></operator> <name pos:line="42" pos:column="18">top_str<pos:position pos:line="42" pos:column="25"/></name></expr>)<pos:position pos:line="42" pos:column="26"/></condition><then pos:line="42" pos:column="26">
    <block pos:line="43" pos:column="5">{
      <expr_stmt><expr><name pos:line="44" pos:column="7">err<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <call><name pos:line="44" pos:column="13">re_node_set_init_1<pos:position pos:line="44" pos:column="31"/></name> <argument_list pos:line="44" pos:column="32">(<argument><expr><operator pos:line="44" pos:column="33">&amp;<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="34">next_nodes<pos:position pos:line="44" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="46">top_node<pos:position pos:line="44" pos:column="54"/></name></expr></argument>)<pos:position pos:line="44" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="56"/></expr_stmt>
      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><call><name pos:line="45" pos:column="11">BE<pos:position pos:line="45" pos:column="13"/></name> <argument_list pos:line="45" pos:column="14">(<argument><expr><name pos:line="45" pos:column="15">err<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">!=<pos:position pos:line="45" pos:column="21"/></operator> <name pos:line="45" pos:column="22">REG_NOERROR<pos:position pos:line="45" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="35">0<pos:position pos:line="45" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="38"/></condition><then pos:line="45" pos:column="38">
	<block type="pseudo"><return pos:line="46" pos:column="9">return <expr><name pos:line="46" pos:column="16">err<pos:position pos:line="46" pos:column="19"/></name></expr>;<pos:position pos:line="46" pos:column="20"/></return></block></then></if>
      <expr_stmt><expr><name pos:line="47" pos:column="7">err<pos:position pos:line="47" pos:column="10"/></name> <operator pos:line="47" pos:column="11">=<pos:position pos:line="47" pos:column="12"/></operator> <call><name pos:line="47" pos:column="13">check_arrival_expand_ecl<pos:position pos:line="47" pos:column="37"/></name> <argument_list pos:line="47" pos:column="38">(<argument><expr><name pos:line="47" pos:column="39">dfa<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="44">&amp;<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="45">next_nodes<pos:position pos:line="47" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="57">subexp_num<pos:position pos:line="47" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="69">type<pos:position pos:line="47" pos:column="73"/></name></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="75"/></expr_stmt>
      <if pos:line="48" pos:column="7">if <condition pos:line="48" pos:column="10">(<expr><call><name pos:line="48" pos:column="11">BE<pos:position pos:line="48" pos:column="13"/></name> <argument_list pos:line="48" pos:column="14">(<argument><expr><name pos:line="48" pos:column="15">err<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">!=<pos:position pos:line="48" pos:column="21"/></operator> <name pos:line="48" pos:column="22">REG_NOERROR<pos:position pos:line="48" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="35">0<pos:position pos:line="48" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="38"/></condition><then pos:line="48" pos:column="38">
	<block pos:line="49" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="50" pos:column="11">re_node_set_free<pos:position pos:line="50" pos:column="27"/></name> <argument_list pos:line="50" pos:column="28">(<argument><expr><operator pos:line="50" pos:column="29">&amp;<pos:position pos:line="50" pos:column="34"/></operator><name pos:line="50" pos:column="30">next_nodes<pos:position pos:line="50" pos:column="40"/></name></expr></argument>)<pos:position pos:line="50" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="42"/></expr_stmt>
	  <return pos:line="51" pos:column="11">return <expr><name pos:line="51" pos:column="18">err<pos:position pos:line="51" pos:column="21"/></name></expr>;<pos:position pos:line="51" pos:column="22"/></return>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>
    }<pos:position pos:line="53" pos:column="6"/></block></then>
  <else pos:line="54" pos:column="3">else
    <block pos:line="55" pos:column="5">{
      <expr_stmt><expr><name pos:line="56" pos:column="7">cur_state<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <name><name pos:line="56" pos:column="19">mctx<pos:position pos:line="56" pos:column="23"/></name><operator pos:line="56" pos:column="23">-&gt;<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="25">state_log<pos:position pos:line="56" pos:column="34"/></name><index pos:line="56" pos:column="34">[<expr><name pos:line="56" pos:column="35">str_idx<pos:position pos:line="56" pos:column="42"/></name></expr>]<pos:position pos:line="56" pos:column="43"/></index></name></expr>;<pos:position pos:line="56" pos:column="44"/></expr_stmt>
      <if pos:line="57" pos:column="7">if <condition pos:line="57" pos:column="10">(<expr><name pos:line="57" pos:column="11">cur_state<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">&amp;&amp;<pos:position pos:line="57" pos:column="31"/></operator> <name><name pos:line="57" pos:column="24">cur_state<pos:position pos:line="57" pos:column="33"/></name><operator pos:line="57" pos:column="33">-&gt;<pos:position pos:line="57" pos:column="38"/></operator><name pos:line="57" pos:column="35">has_backref<pos:position pos:line="57" pos:column="46"/></name></name></expr>)<pos:position pos:line="57" pos:column="47"/></condition><then pos:line="57" pos:column="47">
	<block pos:line="58" pos:column="9">{
	  <expr_stmt><expr><name pos:line="59" pos:column="11">err<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator> <call><name pos:line="59" pos:column="17">re_node_set_init_copy<pos:position pos:line="59" pos:column="38"/></name> <argument_list pos:line="59" pos:column="39">(<argument><expr><operator pos:line="59" pos:column="40">&amp;<pos:position pos:line="59" pos:column="45"/></operator><name pos:line="59" pos:column="41">next_nodes<pos:position pos:line="59" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="53">&amp;<pos:position pos:line="59" pos:column="58"/></operator><name><name pos:line="59" pos:column="54">cur_state<pos:position pos:line="59" pos:column="63"/></name><operator pos:line="59" pos:column="63">-&gt;<pos:position pos:line="59" pos:column="68"/></operator><name pos:line="59" pos:column="65">nodes<pos:position pos:line="59" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="72"/></expr_stmt>
	  <if pos:line="60" pos:column="11">if <condition pos:line="60" pos:column="14">(<expr><call><name pos:line="60" pos:column="15">BE<pos:position pos:line="60" pos:column="17"/></name> <argument_list pos:line="60" pos:column="18">(<argument><expr><name pos:line="60" pos:column="19">err<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">!=<pos:position pos:line="60" pos:column="25"/></operator> <name pos:line="60" pos:column="26">REG_NOERROR<pos:position pos:line="60" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="39">0<pos:position pos:line="60" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="42"/></condition><then pos:line="60" pos:column="42">
	    <block type="pseudo"><return pos:line="61" pos:column="13">return <expr><name pos:line="61" pos:column="20">err<pos:position pos:line="61" pos:column="23"/></name></expr>;<pos:position pos:line="61" pos:column="24"/></return></block></then></if>
	}<pos:position pos:line="62" pos:column="10"/></block></then>
      <else pos:line="63" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="9">re_node_set_init_empty<pos:position pos:line="64" pos:column="31"/></name> <argument_list pos:line="64" pos:column="32">(<argument><expr><operator pos:line="64" pos:column="33">&amp;<pos:position pos:line="64" pos:column="38"/></operator><name pos:line="64" pos:column="34">next_nodes<pos:position pos:line="64" pos:column="44"/></name></expr></argument>)<pos:position pos:line="64" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="46"/></expr_stmt></block></else></if>
    }<pos:position pos:line="65" pos:column="6"/></block></else></if>
  <if pos:line="66" pos:column="3">if <condition pos:line="66" pos:column="6">(<expr><name pos:line="66" pos:column="7">str_idx<pos:position pos:line="66" pos:column="14"/></name> <operator pos:line="66" pos:column="15">==<pos:position pos:line="66" pos:column="17"/></operator> <name pos:line="66" pos:column="18">top_str<pos:position pos:line="66" pos:column="25"/></name> <operator pos:line="66" pos:column="26">||<pos:position pos:line="66" pos:column="28"/></operator> <operator pos:line="66" pos:column="29">(<pos:position pos:line="66" pos:column="30"/></operator><name pos:line="66" pos:column="30">cur_state<pos:position pos:line="66" pos:column="39"/></name> <operator pos:line="66" pos:column="40">&amp;&amp;<pos:position pos:line="66" pos:column="50"/></operator> <name><name pos:line="66" pos:column="43">cur_state<pos:position pos:line="66" pos:column="52"/></name><operator pos:line="66" pos:column="52">-&gt;<pos:position pos:line="66" pos:column="57"/></operator><name pos:line="66" pos:column="54">has_backref<pos:position pos:line="66" pos:column="65"/></name></name><operator pos:line="66" pos:column="65">)<pos:position pos:line="66" pos:column="66"/></operator></expr>)<pos:position pos:line="66" pos:column="67"/></condition><then pos:line="66" pos:column="67">
    <block pos:line="67" pos:column="5">{
      <if pos:line="68" pos:column="7">if <condition pos:line="68" pos:column="10">(<expr><name><name pos:line="68" pos:column="11">next_nodes<pos:position pos:line="68" pos:column="21"/></name><operator pos:line="68" pos:column="21">.<pos:position pos:line="68" pos:column="22"/></operator><name pos:line="68" pos:column="22">nelem<pos:position pos:line="68" pos:column="27"/></name></name></expr>)<pos:position pos:line="68" pos:column="28"/></condition><then pos:line="68" pos:column="28">
	<block pos:line="69" pos:column="9">{
	  <expr_stmt><expr><name pos:line="70" pos:column="11">err<pos:position pos:line="70" pos:column="14"/></name> <operator pos:line="70" pos:column="15">=<pos:position pos:line="70" pos:column="16"/></operator> <call><name pos:line="70" pos:column="17">expand_bkref_cache<pos:position pos:line="70" pos:column="35"/></name> <argument_list pos:line="70" pos:column="36">(<argument><expr><name pos:line="70" pos:column="37">mctx<pos:position pos:line="70" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="43">&amp;<pos:position pos:line="70" pos:column="48"/></operator><name pos:line="70" pos:column="44">next_nodes<pos:position pos:line="70" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="56">str_idx<pos:position pos:line="70" pos:column="63"/></name></expr></argument>,
				    <argument><expr><name pos:line="71" pos:column="37">subexp_num<pos:position pos:line="71" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="49">type<pos:position pos:line="71" pos:column="53"/></name></expr></argument>)<pos:position pos:line="71" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="55"/></expr_stmt>
	  <if pos:line="72" pos:column="11">if <condition pos:line="72" pos:column="14">(<expr><call><name pos:line="72" pos:column="15">BE<pos:position pos:line="72" pos:column="17"/></name> <argument_list pos:line="72" pos:column="18">(<argument><expr><name pos:line="72" pos:column="19">err<pos:position pos:line="72" pos:column="22"/></name> <operator pos:line="72" pos:column="23">!=<pos:position pos:line="72" pos:column="25"/></operator> <name pos:line="72" pos:column="26">REG_NOERROR<pos:position pos:line="72" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="39">0<pos:position pos:line="72" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="42"/></condition><then pos:line="72" pos:column="42">
	    <block pos:line="73" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="74" pos:column="15">re_node_set_free<pos:position pos:line="74" pos:column="31"/></name> <argument_list pos:line="74" pos:column="32">(<argument><expr><operator pos:line="74" pos:column="33">&amp;<pos:position pos:line="74" pos:column="38"/></operator><name pos:line="74" pos:column="34">next_nodes<pos:position pos:line="74" pos:column="44"/></name></expr></argument>)<pos:position pos:line="74" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="46"/></expr_stmt>
	      <return pos:line="75" pos:column="15">return <expr><name pos:line="75" pos:column="22">err<pos:position pos:line="75" pos:column="25"/></name></expr>;<pos:position pos:line="75" pos:column="26"/></return>
	    }<pos:position pos:line="76" pos:column="14"/></block></then></if>
	}<pos:position pos:line="77" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name pos:line="78" pos:column="7">cur_state<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">=<pos:position pos:line="78" pos:column="18"/></operator> <call><name pos:line="78" pos:column="19">re_acquire_state_context<pos:position pos:line="78" pos:column="43"/></name> <argument_list pos:line="78" pos:column="44">(<argument><expr><operator pos:line="78" pos:column="45">&amp;<pos:position pos:line="78" pos:column="50"/></operator><name pos:line="78" pos:column="46">err<pos:position pos:line="78" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="51">dfa<pos:position pos:line="78" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="56">&amp;<pos:position pos:line="78" pos:column="61"/></operator><name pos:line="78" pos:column="57">next_nodes<pos:position pos:line="78" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="69">context<pos:position pos:line="78" pos:column="76"/></name></expr></argument>)<pos:position pos:line="78" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="78"/></expr_stmt>
      <if pos:line="79" pos:column="7">if <condition pos:line="79" pos:column="10">(<expr><call><name pos:line="79" pos:column="11">BE<pos:position pos:line="79" pos:column="13"/></name> <argument_list pos:line="79" pos:column="14">(<argument><expr><name pos:line="79" pos:column="15">cur_state<pos:position pos:line="79" pos:column="24"/></name> <operator pos:line="79" pos:column="25">==<pos:position pos:line="79" pos:column="27"/></operator> <name pos:line="79" pos:column="28">NULL<pos:position pos:line="79" pos:column="32"/></name> <operator pos:line="79" pos:column="33">&amp;&amp;<pos:position pos:line="79" pos:column="43"/></operator> <name pos:line="79" pos:column="36">err<pos:position pos:line="79" pos:column="39"/></name> <operator pos:line="79" pos:column="40">!=<pos:position pos:line="79" pos:column="42"/></operator> <name pos:line="79" pos:column="43">REG_NOERROR<pos:position pos:line="79" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="56">0<pos:position pos:line="79" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="59"/></condition><then pos:line="79" pos:column="59">
	<block pos:line="80" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="81" pos:column="11">re_node_set_free<pos:position pos:line="81" pos:column="27"/></name> <argument_list pos:line="81" pos:column="28">(<argument><expr><operator pos:line="81" pos:column="29">&amp;<pos:position pos:line="81" pos:column="34"/></operator><name pos:line="81" pos:column="30">next_nodes<pos:position pos:line="81" pos:column="40"/></name></expr></argument>)<pos:position pos:line="81" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="42"/></expr_stmt>
	  <return pos:line="82" pos:column="11">return <expr><name pos:line="82" pos:column="18">err<pos:position pos:line="82" pos:column="21"/></name></expr>;<pos:position pos:line="82" pos:column="22"/></return>
	}<pos:position pos:line="83" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="84" pos:column="7">mctx<pos:position pos:line="84" pos:column="11"/></name><operator pos:line="84" pos:column="11">-&gt;<pos:position pos:line="84" pos:column="16"/></operator><name pos:line="84" pos:column="13">state_log<pos:position pos:line="84" pos:column="22"/></name><index pos:line="84" pos:column="22">[<expr><name pos:line="84" pos:column="23">str_idx<pos:position pos:line="84" pos:column="30"/></name></expr>]<pos:position pos:line="84" pos:column="31"/></index></name> <operator pos:line="84" pos:column="32">=<pos:position pos:line="84" pos:column="33"/></operator> <name pos:line="84" pos:column="34">cur_state<pos:position pos:line="84" pos:column="43"/></name></expr>;<pos:position pos:line="84" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if>

  <for pos:line="87" pos:column="3">for <control pos:line="87" pos:column="7">(<init><expr><name pos:line="87" pos:column="8">null_cnt<pos:position pos:line="87" pos:column="16"/></name> <operator pos:line="87" pos:column="17">=<pos:position pos:line="87" pos:column="18"/></operator> <literal type="number" pos:line="87" pos:column="19">0<pos:position pos:line="87" pos:column="20"/></literal></expr>;<pos:position pos:line="87" pos:column="21"/></init> <condition><expr><name pos:line="87" pos:column="22">str_idx<pos:position pos:line="87" pos:column="29"/></name> <operator pos:line="87" pos:column="30">&lt;<pos:position pos:line="87" pos:column="34"/></operator> <name pos:line="87" pos:column="32">last_str<pos:position pos:line="87" pos:column="40"/></name> <operator pos:line="87" pos:column="41">&amp;&amp;<pos:position pos:line="87" pos:column="51"/></operator> <name pos:line="87" pos:column="44">null_cnt<pos:position pos:line="87" pos:column="52"/></name> <operator pos:line="87" pos:column="53">&lt;=<pos:position pos:line="87" pos:column="58"/></operator> <name><name pos:line="87" pos:column="56">mctx<pos:position pos:line="87" pos:column="60"/></name><operator pos:line="87" pos:column="60">-&gt;<pos:position pos:line="87" pos:column="65"/></operator><name pos:line="87" pos:column="62">max_mb_elem_len<pos:position pos:line="87" pos:column="77"/></name></name></expr>;<pos:position pos:line="87" pos:column="78"/></condition><incr/>)<pos:position pos:line="87" pos:column="79"/></control>
    <block pos:line="88" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="89" pos:column="7">re_node_set_empty<pos:position pos:line="89" pos:column="24"/></name> <argument_list pos:line="89" pos:column="25">(<argument><expr><operator pos:line="89" pos:column="26">&amp;<pos:position pos:line="89" pos:column="31"/></operator><name pos:line="89" pos:column="27">next_nodes<pos:position pos:line="89" pos:column="37"/></name></expr></argument>)<pos:position pos:line="89" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="39"/></expr_stmt>
      <if pos:line="90" pos:column="7">if <condition pos:line="90" pos:column="10">(<expr><name><name pos:line="90" pos:column="11">mctx<pos:position pos:line="90" pos:column="15"/></name><operator pos:line="90" pos:column="15">-&gt;<pos:position pos:line="90" pos:column="20"/></operator><name pos:line="90" pos:column="17">state_log<pos:position pos:line="90" pos:column="26"/></name><index pos:line="90" pos:column="26">[<expr><name pos:line="90" pos:column="27">str_idx<pos:position pos:line="90" pos:column="34"/></name> <operator pos:line="90" pos:column="35">+<pos:position pos:line="90" pos:column="36"/></operator> <literal type="number" pos:line="90" pos:column="37">1<pos:position pos:line="90" pos:column="38"/></literal></expr>]<pos:position pos:line="90" pos:column="39"/></index></name></expr>)<pos:position pos:line="90" pos:column="40"/></condition><then pos:line="90" pos:column="40">
	<block pos:line="91" pos:column="9">{
	  <expr_stmt><expr><name pos:line="92" pos:column="11">err<pos:position pos:line="92" pos:column="14"/></name> <operator pos:line="92" pos:column="15">=<pos:position pos:line="92" pos:column="16"/></operator> <call><name pos:line="92" pos:column="17">re_node_set_merge<pos:position pos:line="92" pos:column="34"/></name> <argument_list pos:line="92" pos:column="35">(<argument><expr><operator pos:line="92" pos:column="36">&amp;<pos:position pos:line="92" pos:column="41"/></operator><name pos:line="92" pos:column="37">next_nodes<pos:position pos:line="92" pos:column="47"/></name></expr></argument>,
				   <argument><expr><operator pos:line="93" pos:column="36">&amp;<pos:position pos:line="93" pos:column="41"/></operator><name><name pos:line="93" pos:column="37">mctx<pos:position pos:line="93" pos:column="41"/></name><operator pos:line="93" pos:column="41">-&gt;<pos:position pos:line="93" pos:column="46"/></operator><name pos:line="93" pos:column="43">state_log<pos:position pos:line="93" pos:column="52"/></name><index pos:line="93" pos:column="52">[<expr><name pos:line="93" pos:column="53">str_idx<pos:position pos:line="93" pos:column="60"/></name> <operator pos:line="93" pos:column="61">+<pos:position pos:line="93" pos:column="62"/></operator> <literal type="number" pos:line="93" pos:column="63">1<pos:position pos:line="93" pos:column="64"/></literal></expr>]<pos:position pos:line="93" pos:column="65"/></index></name><operator pos:line="93" pos:column="65">-&gt;<pos:position pos:line="93" pos:column="70"/></operator><name pos:line="93" pos:column="67">nodes<pos:position pos:line="93" pos:column="72"/></name></expr></argument>)<pos:position pos:line="93" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="74"/></expr_stmt>
	  <if pos:line="94" pos:column="11">if <condition pos:line="94" pos:column="14">(<expr><call><name pos:line="94" pos:column="15">BE<pos:position pos:line="94" pos:column="17"/></name> <argument_list pos:line="94" pos:column="18">(<argument><expr><name pos:line="94" pos:column="19">err<pos:position pos:line="94" pos:column="22"/></name> <operator pos:line="94" pos:column="23">!=<pos:position pos:line="94" pos:column="25"/></operator> <name pos:line="94" pos:column="26">REG_NOERROR<pos:position pos:line="94" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="94" pos:column="39">0<pos:position pos:line="94" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="42"/></condition><then pos:line="94" pos:column="42">
	    <block pos:line="95" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="96" pos:column="15">re_node_set_free<pos:position pos:line="96" pos:column="31"/></name> <argument_list pos:line="96" pos:column="32">(<argument><expr><operator pos:line="96" pos:column="33">&amp;<pos:position pos:line="96" pos:column="38"/></operator><name pos:line="96" pos:column="34">next_nodes<pos:position pos:line="96" pos:column="44"/></name></expr></argument>)<pos:position pos:line="96" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="46"/></expr_stmt>
	      <return pos:line="97" pos:column="15">return <expr><name pos:line="97" pos:column="22">err<pos:position pos:line="97" pos:column="25"/></name></expr>;<pos:position pos:line="97" pos:column="26"/></return>
	    }<pos:position pos:line="98" pos:column="14"/></block></then></if>
	}<pos:position pos:line="99" pos:column="10"/></block></then></if>
      <if pos:line="100" pos:column="7">if <condition pos:line="100" pos:column="10">(<expr><name pos:line="100" pos:column="11">cur_state<pos:position pos:line="100" pos:column="20"/></name></expr>)<pos:position pos:line="100" pos:column="21"/></condition><then pos:line="100" pos:column="21">
	<block pos:line="101" pos:column="9">{
	  <expr_stmt><expr><name pos:line="102" pos:column="11">err<pos:position pos:line="102" pos:column="14"/></name> <operator pos:line="102" pos:column="15">=<pos:position pos:line="102" pos:column="16"/></operator> <call><name pos:line="102" pos:column="17">check_arrival_add_next_nodes<pos:position pos:line="102" pos:column="45"/></name> <argument_list pos:line="102" pos:column="46">(<argument><expr><name pos:line="102" pos:column="47">mctx<pos:position pos:line="102" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="53">str_idx<pos:position pos:line="102" pos:column="60"/></name></expr></argument>,
					      <argument><expr><operator pos:line="103" pos:column="47">&amp;<pos:position pos:line="103" pos:column="52"/></operator><name><name pos:line="103" pos:column="48">cur_state<pos:position pos:line="103" pos:column="57"/></name><operator pos:line="103" pos:column="57">-&gt;<pos:position pos:line="103" pos:column="62"/></operator><name pos:line="103" pos:column="59">non_eps_nodes<pos:position pos:line="103" pos:column="72"/></name></name></expr></argument>,
					      <argument><expr><operator pos:line="104" pos:column="47">&amp;<pos:position pos:line="104" pos:column="52"/></operator><name pos:line="104" pos:column="48">next_nodes<pos:position pos:line="104" pos:column="58"/></name></expr></argument>)<pos:position pos:line="104" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="60"/></expr_stmt>
	  <if pos:line="105" pos:column="11">if <condition pos:line="105" pos:column="14">(<expr><call><name pos:line="105" pos:column="15">BE<pos:position pos:line="105" pos:column="17"/></name> <argument_list pos:line="105" pos:column="18">(<argument><expr><name pos:line="105" pos:column="19">err<pos:position pos:line="105" pos:column="22"/></name> <operator pos:line="105" pos:column="23">!=<pos:position pos:line="105" pos:column="25"/></operator> <name pos:line="105" pos:column="26">REG_NOERROR<pos:position pos:line="105" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="105" pos:column="39">0<pos:position pos:line="105" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="105" pos:column="42"/></condition><then pos:line="105" pos:column="42">
	    <block pos:line="106" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="107" pos:column="15">re_node_set_free<pos:position pos:line="107" pos:column="31"/></name> <argument_list pos:line="107" pos:column="32">(<argument><expr><operator pos:line="107" pos:column="33">&amp;<pos:position pos:line="107" pos:column="38"/></operator><name pos:line="107" pos:column="34">next_nodes<pos:position pos:line="107" pos:column="44"/></name></expr></argument>)<pos:position pos:line="107" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="46"/></expr_stmt>
	      <return pos:line="108" pos:column="15">return <expr><name pos:line="108" pos:column="22">err<pos:position pos:line="108" pos:column="25"/></name></expr>;<pos:position pos:line="108" pos:column="26"/></return>
	    }<pos:position pos:line="109" pos:column="14"/></block></then></if>
	}<pos:position pos:line="110" pos:column="10"/></block></then></if>
      <expr_stmt><expr><operator pos:line="111" pos:column="7">++<pos:position pos:line="111" pos:column="9"/></operator><name pos:line="111" pos:column="9">str_idx<pos:position pos:line="111" pos:column="16"/></name></expr>;<pos:position pos:line="111" pos:column="17"/></expr_stmt>
      <if pos:line="112" pos:column="7">if <condition pos:line="112" pos:column="10">(<expr><name><name pos:line="112" pos:column="11">next_nodes<pos:position pos:line="112" pos:column="21"/></name><operator pos:line="112" pos:column="21">.<pos:position pos:line="112" pos:column="22"/></operator><name pos:line="112" pos:column="22">nelem<pos:position pos:line="112" pos:column="27"/></name></name></expr>)<pos:position pos:line="112" pos:column="28"/></condition><then pos:line="112" pos:column="28">
	<block pos:line="113" pos:column="9">{
	  <expr_stmt><expr><name pos:line="114" pos:column="11">err<pos:position pos:line="114" pos:column="14"/></name> <operator pos:line="114" pos:column="15">=<pos:position pos:line="114" pos:column="16"/></operator> <call><name pos:line="114" pos:column="17">check_arrival_expand_ecl<pos:position pos:line="114" pos:column="41"/></name> <argument_list pos:line="114" pos:column="42">(<argument><expr><name pos:line="114" pos:column="43">dfa<pos:position pos:line="114" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="114" pos:column="48">&amp;<pos:position pos:line="114" pos:column="53"/></operator><name pos:line="114" pos:column="49">next_nodes<pos:position pos:line="114" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="61">subexp_num<pos:position pos:line="114" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="73">type<pos:position pos:line="114" pos:column="77"/></name></expr></argument>)<pos:position pos:line="114" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="79"/></expr_stmt>
	  <if pos:line="115" pos:column="11">if <condition pos:line="115" pos:column="14">(<expr><call><name pos:line="115" pos:column="15">BE<pos:position pos:line="115" pos:column="17"/></name> <argument_list pos:line="115" pos:column="18">(<argument><expr><name pos:line="115" pos:column="19">err<pos:position pos:line="115" pos:column="22"/></name> <operator pos:line="115" pos:column="23">!=<pos:position pos:line="115" pos:column="25"/></operator> <name pos:line="115" pos:column="26">REG_NOERROR<pos:position pos:line="115" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="115" pos:column="39">0<pos:position pos:line="115" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="115" pos:column="42"/></condition><then pos:line="115" pos:column="42">
	    <block pos:line="116" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="117" pos:column="15">re_node_set_free<pos:position pos:line="117" pos:column="31"/></name> <argument_list pos:line="117" pos:column="32">(<argument><expr><operator pos:line="117" pos:column="33">&amp;<pos:position pos:line="117" pos:column="38"/></operator><name pos:line="117" pos:column="34">next_nodes<pos:position pos:line="117" pos:column="44"/></name></expr></argument>)<pos:position pos:line="117" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="46"/></expr_stmt>
	      <return pos:line="118" pos:column="15">return <expr><name pos:line="118" pos:column="22">err<pos:position pos:line="118" pos:column="25"/></name></expr>;<pos:position pos:line="118" pos:column="26"/></return>
	    }<pos:position pos:line="119" pos:column="14"/></block></then></if>
	  <expr_stmt><expr><name pos:line="120" pos:column="11">err<pos:position pos:line="120" pos:column="14"/></name> <operator pos:line="120" pos:column="15">=<pos:position pos:line="120" pos:column="16"/></operator> <call><name pos:line="120" pos:column="17">expand_bkref_cache<pos:position pos:line="120" pos:column="35"/></name> <argument_list pos:line="120" pos:column="36">(<argument><expr><name pos:line="120" pos:column="37">mctx<pos:position pos:line="120" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="43">&amp;<pos:position pos:line="120" pos:column="48"/></operator><name pos:line="120" pos:column="44">next_nodes<pos:position pos:line="120" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="56">str_idx<pos:position pos:line="120" pos:column="63"/></name></expr></argument>,
				    <argument><expr><name pos:line="121" pos:column="37">subexp_num<pos:position pos:line="121" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="49">type<pos:position pos:line="121" pos:column="53"/></name></expr></argument>)<pos:position pos:line="121" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="55"/></expr_stmt>
	  <if pos:line="122" pos:column="11">if <condition pos:line="122" pos:column="14">(<expr><call><name pos:line="122" pos:column="15">BE<pos:position pos:line="122" pos:column="17"/></name> <argument_list pos:line="122" pos:column="18">(<argument><expr><name pos:line="122" pos:column="19">err<pos:position pos:line="122" pos:column="22"/></name> <operator pos:line="122" pos:column="23">!=<pos:position pos:line="122" pos:column="25"/></operator> <name pos:line="122" pos:column="26">REG_NOERROR<pos:position pos:line="122" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="39">0<pos:position pos:line="122" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="42"/></condition><then pos:line="122" pos:column="42">
	    <block pos:line="123" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="124" pos:column="15">re_node_set_free<pos:position pos:line="124" pos:column="31"/></name> <argument_list pos:line="124" pos:column="32">(<argument><expr><operator pos:line="124" pos:column="33">&amp;<pos:position pos:line="124" pos:column="38"/></operator><name pos:line="124" pos:column="34">next_nodes<pos:position pos:line="124" pos:column="44"/></name></expr></argument>)<pos:position pos:line="124" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="46"/></expr_stmt>
	      <return pos:line="125" pos:column="15">return <expr><name pos:line="125" pos:column="22">err<pos:position pos:line="125" pos:column="25"/></name></expr>;<pos:position pos:line="125" pos:column="26"/></return>
	    }<pos:position pos:line="126" pos:column="14"/></block></then></if>
	}<pos:position pos:line="127" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name pos:line="128" pos:column="7">context<pos:position pos:line="128" pos:column="14"/></name> <operator pos:line="128" pos:column="15">=<pos:position pos:line="128" pos:column="16"/></operator> <call><name pos:line="128" pos:column="17">re_string_context_at<pos:position pos:line="128" pos:column="37"/></name> <argument_list pos:line="128" pos:column="38">(<argument><expr><operator pos:line="128" pos:column="39">&amp;<pos:position pos:line="128" pos:column="44"/></operator><name><name pos:line="128" pos:column="40">mctx<pos:position pos:line="128" pos:column="44"/></name><operator pos:line="128" pos:column="44">-&gt;<pos:position pos:line="128" pos:column="49"/></operator><name pos:line="128" pos:column="46">input<pos:position pos:line="128" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="53">str_idx<pos:position pos:line="128" pos:column="60"/></name> <operator pos:line="128" pos:column="61">-<pos:position pos:line="128" pos:column="62"/></operator> <literal type="number" pos:line="128" pos:column="63">1<pos:position pos:line="128" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="66">mctx<pos:position pos:line="128" pos:column="70"/></name><operator pos:line="128" pos:column="70">-&gt;<pos:position pos:line="128" pos:column="75"/></operator><name pos:line="128" pos:column="72">eflags<pos:position pos:line="128" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="128" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="80"/></expr_stmt>
      <expr_stmt><expr><name pos:line="129" pos:column="7">cur_state<pos:position pos:line="129" pos:column="16"/></name> <operator pos:line="129" pos:column="17">=<pos:position pos:line="129" pos:column="18"/></operator> <call><name pos:line="129" pos:column="19">re_acquire_state_context<pos:position pos:line="129" pos:column="43"/></name> <argument_list pos:line="129" pos:column="44">(<argument><expr><operator pos:line="129" pos:column="45">&amp;<pos:position pos:line="129" pos:column="50"/></operator><name pos:line="129" pos:column="46">err<pos:position pos:line="129" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="51">dfa<pos:position pos:line="129" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="129" pos:column="56">&amp;<pos:position pos:line="129" pos:column="61"/></operator><name pos:line="129" pos:column="57">next_nodes<pos:position pos:line="129" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="69">context<pos:position pos:line="129" pos:column="76"/></name></expr></argument>)<pos:position pos:line="129" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="78"/></expr_stmt>
      <if pos:line="130" pos:column="7">if <condition pos:line="130" pos:column="10">(<expr><call><name pos:line="130" pos:column="11">BE<pos:position pos:line="130" pos:column="13"/></name> <argument_list pos:line="130" pos:column="14">(<argument><expr><name pos:line="130" pos:column="15">cur_state<pos:position pos:line="130" pos:column="24"/></name> <operator pos:line="130" pos:column="25">==<pos:position pos:line="130" pos:column="27"/></operator> <name pos:line="130" pos:column="28">NULL<pos:position pos:line="130" pos:column="32"/></name> <operator pos:line="130" pos:column="33">&amp;&amp;<pos:position pos:line="130" pos:column="43"/></operator> <name pos:line="130" pos:column="36">err<pos:position pos:line="130" pos:column="39"/></name> <operator pos:line="130" pos:column="40">!=<pos:position pos:line="130" pos:column="42"/></operator> <name pos:line="130" pos:column="43">REG_NOERROR<pos:position pos:line="130" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="130" pos:column="56">0<pos:position pos:line="130" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="59"/></condition><then pos:line="130" pos:column="59">
	<block pos:line="131" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="132" pos:column="11">re_node_set_free<pos:position pos:line="132" pos:column="27"/></name> <argument_list pos:line="132" pos:column="28">(<argument><expr><operator pos:line="132" pos:column="29">&amp;<pos:position pos:line="132" pos:column="34"/></operator><name pos:line="132" pos:column="30">next_nodes<pos:position pos:line="132" pos:column="40"/></name></expr></argument>)<pos:position pos:line="132" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="42"/></expr_stmt>
	  <return pos:line="133" pos:column="11">return <expr><name pos:line="133" pos:column="18">err<pos:position pos:line="133" pos:column="21"/></name></expr>;<pos:position pos:line="133" pos:column="22"/></return>
	}<pos:position pos:line="134" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="135" pos:column="7">mctx<pos:position pos:line="135" pos:column="11"/></name><operator pos:line="135" pos:column="11">-&gt;<pos:position pos:line="135" pos:column="16"/></operator><name pos:line="135" pos:column="13">state_log<pos:position pos:line="135" pos:column="22"/></name><index pos:line="135" pos:column="22">[<expr><name pos:line="135" pos:column="23">str_idx<pos:position pos:line="135" pos:column="30"/></name></expr>]<pos:position pos:line="135" pos:column="31"/></index></name> <operator pos:line="135" pos:column="32">=<pos:position pos:line="135" pos:column="33"/></operator> <name pos:line="135" pos:column="34">cur_state<pos:position pos:line="135" pos:column="43"/></name></expr>;<pos:position pos:line="135" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><name pos:line="136" pos:column="7">null_cnt<pos:position pos:line="136" pos:column="15"/></name> <operator pos:line="136" pos:column="16">=<pos:position pos:line="136" pos:column="17"/></operator> <ternary><condition><expr><name pos:line="136" pos:column="18">cur_state<pos:position pos:line="136" pos:column="27"/></name> <operator pos:line="136" pos:column="28">==<pos:position pos:line="136" pos:column="30"/></operator> <name pos:line="136" pos:column="31">NULL<pos:position pos:line="136" pos:column="35"/></name></expr> ?<pos:position pos:line="136" pos:column="37"/></condition><then pos:line="136" pos:column="37"> <expr><name pos:line="136" pos:column="38">null_cnt<pos:position pos:line="136" pos:column="46"/></name> <operator pos:line="136" pos:column="47">+<pos:position pos:line="136" pos:column="48"/></operator> <literal type="number" pos:line="136" pos:column="49">1<pos:position pos:line="136" pos:column="50"/></literal></expr> <pos:position pos:line="136" pos:column="51"/></then><else pos:line="136" pos:column="51">: <expr><literal type="number" pos:line="136" pos:column="53">0<pos:position pos:line="136" pos:column="54"/></literal></expr></else></ternary></expr>;<pos:position pos:line="136" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="137" pos:column="6"/></block></for>
  <expr_stmt><expr><call><name pos:line="138" pos:column="3">re_node_set_free<pos:position pos:line="138" pos:column="19"/></name> <argument_list pos:line="138" pos:column="20">(<argument><expr><operator pos:line="138" pos:column="21">&amp;<pos:position pos:line="138" pos:column="26"/></operator><name pos:line="138" pos:column="22">next_nodes<pos:position pos:line="138" pos:column="32"/></name></expr></argument>)<pos:position pos:line="138" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="139" pos:column="3">cur_nodes<pos:position pos:line="139" pos:column="12"/></name> <operator pos:line="139" pos:column="13">=<pos:position pos:line="139" pos:column="14"/></operator> <operator pos:line="139" pos:column="15">(<pos:position pos:line="139" pos:column="16"/></operator><ternary><condition><expr><name><name pos:line="139" pos:column="16">mctx<pos:position pos:line="139" pos:column="20"/></name><operator pos:line="139" pos:column="20">-&gt;<pos:position pos:line="139" pos:column="25"/></operator><name pos:line="139" pos:column="22">state_log<pos:position pos:line="139" pos:column="31"/></name><index pos:line="139" pos:column="31">[<expr><name pos:line="139" pos:column="32">last_str<pos:position pos:line="139" pos:column="40"/></name></expr>]<pos:position pos:line="139" pos:column="41"/></index></name> <operator pos:line="139" pos:column="42">==<pos:position pos:line="139" pos:column="44"/></operator> <name pos:line="139" pos:column="45">NULL<pos:position pos:line="139" pos:column="49"/></name></expr> ?<pos:position pos:line="139" pos:column="51"/></condition><then pos:line="139" pos:column="51"> <expr><name pos:line="139" pos:column="52">NULL<pos:position pos:line="139" pos:column="56"/></name></expr>
	       <pos:position pos:line="140" pos:column="9"/></then><else pos:line="140" pos:column="16">: <expr><operator pos:line="140" pos:column="18">&amp;<pos:position pos:line="140" pos:column="23"/></operator><name><name pos:line="140" pos:column="19">mctx<pos:position pos:line="140" pos:column="23"/></name><operator pos:line="140" pos:column="23">-&gt;<pos:position pos:line="140" pos:column="28"/></operator><name pos:line="140" pos:column="25">state_log<pos:position pos:line="140" pos:column="34"/></name><index pos:line="140" pos:column="34">[<expr><name pos:line="140" pos:column="35">last_str<pos:position pos:line="140" pos:column="43"/></name></expr>]<pos:position pos:line="140" pos:column="44"/></index></name><operator pos:line="140" pos:column="44">-&gt;<pos:position pos:line="140" pos:column="49"/></operator><name pos:line="140" pos:column="46">nodes<pos:position pos:line="140" pos:column="51"/></name></expr></else></ternary><operator pos:line="140" pos:column="51">)<pos:position pos:line="140" pos:column="52"/></operator></expr>;<pos:position pos:line="140" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="141" pos:column="3">path<pos:position pos:line="141" pos:column="7"/></name><operator pos:line="141" pos:column="7">-&gt;<pos:position pos:line="141" pos:column="12"/></operator><name pos:line="141" pos:column="9">next_idx<pos:position pos:line="141" pos:column="17"/></name></name> <operator pos:line="141" pos:column="18">=<pos:position pos:line="141" pos:column="19"/></operator> <name pos:line="141" pos:column="20">str_idx<pos:position pos:line="141" pos:column="27"/></name></expr>;<pos:position pos:line="141" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="143" pos:column="3">/* Fix MCTX.  */</comment>
  <expr_stmt><expr><name><name pos:line="144" pos:column="3">mctx<pos:position pos:line="144" pos:column="7"/></name><operator pos:line="144" pos:column="7">-&gt;<pos:position pos:line="144" pos:column="12"/></operator><name pos:line="144" pos:column="9">state_log<pos:position pos:line="144" pos:column="18"/></name></name> <operator pos:line="144" pos:column="19">=<pos:position pos:line="144" pos:column="20"/></operator> <name pos:line="144" pos:column="21">backup_state_log<pos:position pos:line="144" pos:column="37"/></name></expr>;<pos:position pos:line="144" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="145" pos:column="3">mctx<pos:position pos:line="145" pos:column="7"/></name><operator pos:line="145" pos:column="7">-&gt;<pos:position pos:line="145" pos:column="12"/></operator><name pos:line="145" pos:column="9">input<pos:position pos:line="145" pos:column="14"/></name><operator pos:line="145" pos:column="14">.<pos:position pos:line="145" pos:column="15"/></operator><name pos:line="145" pos:column="15">cur_idx<pos:position pos:line="145" pos:column="22"/></name></name> <operator pos:line="145" pos:column="23">=<pos:position pos:line="145" pos:column="24"/></operator> <name pos:line="145" pos:column="25">backup_cur_idx<pos:position pos:line="145" pos:column="39"/></name></expr>;<pos:position pos:line="145" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="147" pos:column="3">/* Then check the current node set has the node LAST_NODE.  */</comment>
  <if pos:line="148" pos:column="3">if <condition pos:line="148" pos:column="6">(<expr><name pos:line="148" pos:column="7">cur_nodes<pos:position pos:line="148" pos:column="16"/></name> <operator pos:line="148" pos:column="17">!=<pos:position pos:line="148" pos:column="19"/></operator> <name pos:line="148" pos:column="20">NULL<pos:position pos:line="148" pos:column="24"/></name> <operator pos:line="148" pos:column="25">&amp;&amp;<pos:position pos:line="148" pos:column="35"/></operator> <call><name pos:line="148" pos:column="28">re_node_set_contains<pos:position pos:line="148" pos:column="48"/></name> <argument_list pos:line="148" pos:column="49">(<argument><expr><name pos:line="148" pos:column="50">cur_nodes<pos:position pos:line="148" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="61">last_node<pos:position pos:line="148" pos:column="70"/></name></expr></argument>)<pos:position pos:line="148" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="148" pos:column="72"/></condition><then pos:line="148" pos:column="72">
    <block type="pseudo"><return pos:line="149" pos:column="5">return <expr><name pos:line="149" pos:column="12">REG_NOERROR<pos:position pos:line="149" pos:column="23"/></name></expr>;<pos:position pos:line="149" pos:column="24"/></return></block></then></if>

  <return pos:line="151" pos:column="3">return <expr><name pos:line="151" pos:column="10">REG_NOMATCH<pos:position pos:line="151" pos:column="21"/></name></expr>;<pos:position pos:line="151" pos:column="22"/></return>
}<pos:position pos:line="152" pos:column="2"/></block></function></unit>
