<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5891_git-2.3.10.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<cpp:ifdef pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">ifdef<pos:position pos:line="2" pos:column="7"/></cpp:directive> <name pos:line="2" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="2" pos:column="22"/></name></cpp:ifdef>
<name pos:line="3" pos:column="1">build_equiv_class<pos:position pos:line="3" pos:column="18"/></name> <argument_list pos:line="3" pos:column="19">(<argument><expr><name pos:line="3" pos:column="20">bitset_t<pos:position pos:line="3" pos:column="28"/></name> <name pos:line="3" pos:column="29">sbcset<pos:position pos:line="3" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="37">re_charset_t<pos:position pos:line="3" pos:column="49"/></name> <operator pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></operator><name pos:line="3" pos:column="51">mbcset<pos:position pos:line="3" pos:column="57"/></name></expr></argument>,
		   <argument><expr><name pos:line="4" pos:column="20">int<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">equiv_class_alloc<pos:position pos:line="4" pos:column="42"/></name></expr></argument>, <argument><expr><specifier pos:line="4" pos:column="44">const<pos:position pos:line="4" pos:column="49"/></specifier> <name pos:line="4" pos:column="50">unsigned<pos:position pos:line="4" pos:column="58"/></name> <name pos:line="4" pos:column="59">char<pos:position pos:line="4" pos:column="63"/></name> <operator pos:line="4" pos:column="64">*<pos:position pos:line="4" pos:column="65"/></operator><name pos:line="4" pos:column="65">name<pos:position pos:line="4" pos:column="69"/></name></expr></argument>)<pos:position pos:line="4" pos:column="70"/></argument_list>
<cpp:else pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">else<pos:position pos:line="5" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="5" pos:column="7">/* not RE_ENABLE_I18N */</comment>
<name pos:line="6" pos:column="1">build_equiv_class<pos:position pos:line="6" pos:column="18"/></name> <argument_list pos:line="6" pos:column="19">(<argument><expr><name pos:line="6" pos:column="20">bitset_t<pos:position pos:line="6" pos:column="28"/></name> <name pos:line="6" pos:column="29">sbcset<pos:position pos:line="6" pos:column="35"/></name></expr></argument>, <argument><expr><specifier pos:line="6" pos:column="37">const<pos:position pos:line="6" pos:column="42"/></specifier> <name pos:line="6" pos:column="43">unsigned<pos:position pos:line="6" pos:column="51"/></name> <name pos:line="6" pos:column="52">char<pos:position pos:line="6" pos:column="56"/></name> <operator pos:line="6" pos:column="57">*<pos:position pos:line="6" pos:column="58"/></operator><name pos:line="6" pos:column="58">name<pos:position pos:line="6" pos:column="62"/></name></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="7" pos:column="8">/* not RE_ENABLE_I18N */</comment>
<argument_list pos:line="8" pos:column="1">{
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">_LIBC<pos:position pos:line="9" pos:column="13"/></name></cpp:ifdef>
  <argument><expr><name pos:line="10" pos:column="3">uint32_t<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">nrules<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">_NL_CURRENT_WORD<pos:position pos:line="10" pos:column="37"/></name> <argument_list pos:line="10" pos:column="38">(<argument><expr><name pos:line="10" pos:column="39">LC_COLLATE<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="51">_NL_COLLATE_NRULES<pos:position pos:line="10" pos:column="69"/></name></expr></argument>)<pos:position pos:line="10" pos:column="70"/></argument_list></call></expr></argument>;
  if <argument><expr><operator pos:line="11" pos:column="6">(<pos:position pos:line="11" pos:column="7"/></operator><name pos:line="11" pos:column="7">nrules<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">!=<pos:position pos:line="11" pos:column="16"/></operator> <literal type="number" pos:line="11" pos:column="17">0<pos:position pos:line="11" pos:column="18"/></literal><operator pos:line="11" pos:column="18">)<pos:position pos:line="11" pos:column="19"/></operator>
    <block pos:line="12" pos:column="5">{
      <expr><specifier pos:line="13" pos:column="7">const<pos:position pos:line="13" pos:column="12"/></specifier> <name pos:line="13" pos:column="13">int32_t<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">*<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">table<pos:position pos:line="13" pos:column="27"/></name></expr>, <expr><operator pos:line="13" pos:column="29">*<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">indirect<pos:position pos:line="13" pos:column="38"/></name></expr>;
      <expr><specifier pos:line="14" pos:column="7">const<pos:position pos:line="14" pos:column="12"/></specifier> <name pos:line="14" pos:column="13">unsigned<pos:position pos:line="14" pos:column="21"/></name> <name pos:line="14" pos:column="22">char<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">*<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="28">weights<pos:position pos:line="14" pos:column="35"/></name></expr>, <expr><operator pos:line="14" pos:column="37">*<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="38">extra<pos:position pos:line="14" pos:column="43"/></name></expr>, <expr><operator pos:line="14" pos:column="45">*<pos:position pos:line="14" pos:column="46"/></operator><name pos:line="14" pos:column="46">cp<pos:position pos:line="14" pos:column="48"/></name></expr>;
      <expr><name pos:line="15" pos:column="7">unsigned<pos:position pos:line="15" pos:column="15"/></name> <name pos:line="15" pos:column="16">char<pos:position pos:line="15" pos:column="20"/></name> <name><name pos:line="15" pos:column="21">char_buf<pos:position pos:line="15" pos:column="29"/></name><index pos:line="15" pos:column="29">[<expr><literal type="number" pos:line="15" pos:column="30">2<pos:position pos:line="15" pos:column="31"/></literal></expr>]<pos:position pos:line="15" pos:column="32"/></index></name></expr>;
      <expr><name pos:line="16" pos:column="7">int32_t<pos:position pos:line="16" pos:column="14"/></name> <name pos:line="16" pos:column="15">idx1<pos:position pos:line="16" pos:column="19"/></name></expr>, <expr><name pos:line="16" pos:column="21">idx2<pos:position pos:line="16" pos:column="25"/></name></expr>;
      <expr><name pos:line="17" pos:column="7">unsigned<pos:position pos:line="17" pos:column="15"/></name> <name pos:line="17" pos:column="16">int<pos:position pos:line="17" pos:column="19"/></name> <name pos:line="17" pos:column="20">ch<pos:position pos:line="17" pos:column="22"/></name></expr>;
      <expr><name pos:line="18" pos:column="7">size_t<pos:position pos:line="18" pos:column="13"/></name> <name pos:line="18" pos:column="14">len<pos:position pos:line="18" pos:column="17"/></name></expr>;
      <comment type="block" pos:line="19" pos:column="7">/* This #include defines a local function!  */</comment>
<cpp:include pos:line="20" pos:column="1"># <cpp:directive pos:line="20" pos:column="3">include<pos:position pos:line="20" pos:column="10"/></cpp:directive> <cpp:file pos:line="20" pos:column="11">&lt;locale/weight.h&gt;<pos:position pos:line="20" pos:column="31"/></cpp:file></cpp:include>
      <comment type="block" pos:line="21" pos:column="7">/* Calculate the index for equivalence class.  */</comment>
      <expr><name pos:line="22" pos:column="7">cp<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <name pos:line="22" pos:column="12">name<pos:position pos:line="22" pos:column="16"/></name></expr>;
      <expr><name pos:line="23" pos:column="7">table<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <operator pos:line="23" pos:column="15">(<pos:position pos:line="23" pos:column="16"/></operator><specifier pos:line="23" pos:column="16">const<pos:position pos:line="23" pos:column="21"/></specifier> <name pos:line="23" pos:column="22">int32_t<pos:position pos:line="23" pos:column="29"/></name> <operator pos:line="23" pos:column="30">*<pos:position pos:line="23" pos:column="31"/></operator><operator pos:line="23" pos:column="31">)<pos:position pos:line="23" pos:column="32"/></operator> <call><name pos:line="23" pos:column="33">_NL_CURRENT<pos:position pos:line="23" pos:column="44"/></name> <argument_list pos:line="23" pos:column="45">(<argument><expr><name pos:line="23" pos:column="46">LC_COLLATE<pos:position pos:line="23" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="58">_NL_COLLATE_TABLEMB<pos:position pos:line="23" pos:column="77"/></name></expr></argument>)<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr>;
      <expr><name pos:line="24" pos:column="7">weights<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <operator pos:line="24" pos:column="17">(<pos:position pos:line="24" pos:column="18"/></operator><specifier pos:line="24" pos:column="18">const<pos:position pos:line="24" pos:column="23"/></specifier> <name pos:line="24" pos:column="24">unsigned<pos:position pos:line="24" pos:column="32"/></name> <name pos:line="24" pos:column="33">char<pos:position pos:line="24" pos:column="37"/></name> <operator pos:line="24" pos:column="38">*<pos:position pos:line="24" pos:column="39"/></operator><operator pos:line="24" pos:column="39">)<pos:position pos:line="24" pos:column="40"/></operator> <call><name pos:line="24" pos:column="41">_NL_CURRENT<pos:position pos:line="24" pos:column="52"/></name> <argument_list pos:line="24" pos:column="53">(<argument><expr><name pos:line="24" pos:column="54">LC_COLLATE<pos:position pos:line="24" pos:column="64"/></name></expr></argument>,
					       <argument><expr><name pos:line="25" pos:column="48">_NL_COLLATE_WEIGHTMB<pos:position pos:line="25" pos:column="68"/></name></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr>;
      <expr><name pos:line="26" pos:column="7">extra<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <operator pos:line="26" pos:column="15">(<pos:position pos:line="26" pos:column="16"/></operator><specifier pos:line="26" pos:column="16">const<pos:position pos:line="26" pos:column="21"/></specifier> <name pos:line="26" pos:column="22">unsigned<pos:position pos:line="26" pos:column="30"/></name> <name pos:line="26" pos:column="31">char<pos:position pos:line="26" pos:column="35"/></name> <operator pos:line="26" pos:column="36">*<pos:position pos:line="26" pos:column="37"/></operator><operator pos:line="26" pos:column="37">)<pos:position pos:line="26" pos:column="38"/></operator> <call><name pos:line="26" pos:column="39">_NL_CURRENT<pos:position pos:line="26" pos:column="50"/></name> <argument_list pos:line="26" pos:column="51">(<argument><expr><name pos:line="26" pos:column="52">LC_COLLATE<pos:position pos:line="26" pos:column="62"/></name></expr></argument>,
						   <argument><expr><name pos:line="27" pos:column="52">_NL_COLLATE_EXTRAMB<pos:position pos:line="27" pos:column="71"/></name></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call></expr>;
      <expr><name pos:line="28" pos:column="7">indirect<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <operator pos:line="28" pos:column="18">(<pos:position pos:line="28" pos:column="19"/></operator><specifier pos:line="28" pos:column="19">const<pos:position pos:line="28" pos:column="24"/></specifier> <name pos:line="28" pos:column="25">int32_t<pos:position pos:line="28" pos:column="32"/></name> <operator pos:line="28" pos:column="33">*<pos:position pos:line="28" pos:column="34"/></operator><operator pos:line="28" pos:column="34">)<pos:position pos:line="28" pos:column="35"/></operator> <call><name pos:line="28" pos:column="36">_NL_CURRENT<pos:position pos:line="28" pos:column="47"/></name> <argument_list pos:line="28" pos:column="48">(<argument><expr><name pos:line="28" pos:column="49">LC_COLLATE<pos:position pos:line="28" pos:column="59"/></name></expr></argument>,
						<argument><expr><name pos:line="29" pos:column="49">_NL_COLLATE_INDIRECTMB<pos:position pos:line="29" pos:column="71"/></name></expr></argument>)<pos:position pos:line="29" pos:column="72"/></argument_list></call></expr>;
      <expr><name pos:line="30" pos:column="7">idx1<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">findidx<pos:position pos:line="30" pos:column="21"/></name> <argument_list pos:line="30" pos:column="22">(<argument><expr><operator pos:line="30" pos:column="23">&amp;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="24">cp<pos:position pos:line="30" pos:column="26"/></name></expr></argument>)<pos:position pos:line="30" pos:column="27"/></argument_list></call></expr>;
      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><call><name pos:line="31" pos:column="11">BE<pos:position pos:line="31" pos:column="13"/></name> <argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">idx1<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">==<pos:position pos:line="31" pos:column="22"/></operator> <literal type="number" pos:line="31" pos:column="23">0<pos:position pos:line="31" pos:column="24"/></literal> <operator pos:line="31" pos:column="25">||<pos:position pos:line="31" pos:column="27"/></operator> <name pos:line="31" pos:column="28">cp<pos:position pos:line="31" pos:column="30"/></name> <operator pos:line="31" pos:column="31">&lt;<pos:position pos:line="31" pos:column="35"/></operator> <name pos:line="31" pos:column="33">name<pos:position pos:line="31" pos:column="37"/></name> <operator pos:line="31" pos:column="38">+<pos:position pos:line="31" pos:column="39"/></operator> <call><name pos:line="31" pos:column="40">strlen<pos:position pos:line="31" pos:column="46"/></name> <argument_list pos:line="31" pos:column="47">(<argument><expr><operator pos:line="31" pos:column="48">(<pos:position pos:line="31" pos:column="49"/></operator><specifier pos:line="31" pos:column="49">const<pos:position pos:line="31" pos:column="54"/></specifier> <name pos:line="31" pos:column="55">char<pos:position pos:line="31" pos:column="59"/></name> <operator pos:line="31" pos:column="60">*<pos:position pos:line="31" pos:column="61"/></operator><operator pos:line="31" pos:column="61">)<pos:position pos:line="31" pos:column="62"/></operator> <name pos:line="31" pos:column="63">name<pos:position pos:line="31" pos:column="67"/></name></expr></argument>)<pos:position pos:line="31" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="70">0<pos:position pos:line="31" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="73"/></condition><then pos:line="31" pos:column="73">
	<comment type="block" pos:line="32" pos:column="9">/* This isn't a valid character.  */</comment>
	<block type="pseudo"><return pos:line="33" pos:column="9">return <expr><name pos:line="33" pos:column="16">REG_ECOLLATE<pos:position pos:line="33" pos:column="28"/></name></expr>;<pos:position pos:line="33" pos:column="29"/></return></block></then></if>

      <comment type="block" pos:line="35" pos:column="7">/* Build single byte matcing table for this equivalence class.  */</comment>
      <name><name pos:line="36" pos:column="7">char_buf<pos:position pos:line="36" pos:column="15"/></name><index pos:line="36" pos:column="15">[<expr><literal type="number" pos:line="36" pos:column="16">1<pos:position pos:line="36" pos:column="17"/></literal></expr>]<pos:position pos:line="36" pos:column="18"/></index></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <operator pos:line="36" pos:column="21">(<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="22">unsigned<pos:position pos:line="36" pos:column="30"/></name> <name pos:line="36" pos:column="31">char<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">)<pos:position pos:line="36" pos:column="36"/></operator> <literal type="char" pos:line="36" pos:column="37">'\0'<pos:position pos:line="36" pos:column="41"/></literal></block></expr></argument>;
      <argument><expr><name pos:line="37" pos:column="7">len<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <name><name pos:line="37" pos:column="13">weights<pos:position pos:line="37" pos:column="20"/></name><index pos:line="37" pos:column="20">[<expr><name pos:line="37" pos:column="21">idx1<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">&amp;<pos:position pos:line="37" pos:column="31"/></operator> <literal type="number" pos:line="37" pos:column="28">0xffffff<pos:position pos:line="37" pos:column="36"/></literal></expr>]<pos:position pos:line="37" pos:column="37"/></index></name></expr></argument>;
      for <argument><expr><operator pos:line="38" pos:column="11">(<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="12">ch<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">=<pos:position pos:line="38" pos:column="16"/></operator> <literal type="number" pos:line="38" pos:column="17">0<pos:position pos:line="38" pos:column="18"/></literal>; <name pos:line="38" pos:column="20">ch<pos:position pos:line="38" pos:column="22"/></name> <operator pos:line="38" pos:column="23">&lt;<pos:position pos:line="38" pos:column="27"/></operator> <name pos:line="38" pos:column="25">SBC_MAX<pos:position pos:line="38" pos:column="32"/></name>; <operator pos:line="38" pos:column="34">++<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="36">ch<pos:position pos:line="38" pos:column="38"/></name><operator pos:line="38" pos:column="38">)<pos:position pos:line="38" pos:column="39"/></operator>
	<block pos:line="39" pos:column="9">{
	  <expr><name><name pos:line="40" pos:column="11">char_buf<pos:position pos:line="40" pos:column="19"/></name><index pos:line="40" pos:column="19">[<expr><literal type="number" pos:line="40" pos:column="20">0<pos:position pos:line="40" pos:column="21"/></literal></expr>]<pos:position pos:line="40" pos:column="22"/></index></name> <operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator> <name pos:line="40" pos:column="25">ch<pos:position pos:line="40" pos:column="27"/></name></expr>;
	  <expr><name pos:line="41" pos:column="11">cp<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <name pos:line="41" pos:column="16">char_buf<pos:position pos:line="41" pos:column="24"/></name></expr>;
	  <expr><name pos:line="42" pos:column="11">idx2<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <call><name pos:line="42" pos:column="18">findidx<pos:position pos:line="42" pos:column="25"/></name> <argument_list pos:line="42" pos:column="26">(<argument><expr><operator pos:line="42" pos:column="27">&amp;<pos:position pos:line="42" pos:column="32"/></operator><name pos:line="42" pos:column="28">cp<pos:position pos:line="42" pos:column="30"/></name></expr></argument>)<pos:position pos:line="42" pos:column="31"/></argument_list></call></expr>;
<comment type="block" pos:line="43" pos:column="1">/*
	  idx2 = table[ch];
*/</comment>
	  <if pos:line="46" pos:column="11">if <condition pos:line="46" pos:column="14">(<expr><name pos:line="46" pos:column="15">idx2<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">==<pos:position pos:line="46" pos:column="22"/></operator> <literal type="number" pos:line="46" pos:column="23">0<pos:position pos:line="46" pos:column="24"/></literal></expr>)<pos:position pos:line="46" pos:column="25"/></condition><then pos:line="46" pos:column="25">
	    <comment type="block" pos:line="47" pos:column="13">/* This isn't a valid character.  */</comment>
	    <block type="pseudo"><continue pos:line="48" pos:column="13">continue;<pos:position pos:line="48" pos:column="22"/></continue></block></then></if></block></expr></argument>
	  <comment type="block" pos:line="49" pos:column="11">/* Compare only if the length matches and the collation rule
	     index is the same.  */</comment>
	  <if pos:line="51" pos:column="11">if <condition pos:line="51" pos:column="14">(<expr><name pos:line="51" pos:column="15">len<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">==<pos:position pos:line="51" pos:column="21"/></operator> <name><name pos:line="51" pos:column="22">weights<pos:position pos:line="51" pos:column="29"/></name><index pos:line="51" pos:column="29">[<expr><name pos:line="51" pos:column="30">idx2<pos:position pos:line="51" pos:column="34"/></name> <operator pos:line="51" pos:column="35">&amp;<pos:position pos:line="51" pos:column="40"/></operator> <literal type="number" pos:line="51" pos:column="37">0xffffff<pos:position pos:line="51" pos:column="45"/></literal></expr>]<pos:position pos:line="51" pos:column="46"/></index></name> <operator pos:line="51" pos:column="47">&amp;&amp;<pos:position pos:line="51" pos:column="57"/></operator> <operator pos:line="51" pos:column="50">(<pos:position pos:line="51" pos:column="51"/></operator><name pos:line="51" pos:column="51">idx1<pos:position pos:line="51" pos:column="55"/></name> <operator pos:line="51" pos:column="56">&gt;&gt;<pos:position pos:line="51" pos:column="61"/></operator> <literal type="number" pos:line="51" pos:column="59">24<pos:position pos:line="51" pos:column="61"/></literal><operator pos:line="51" pos:column="61">)<pos:position pos:line="51" pos:column="62"/></operator> <operator pos:line="51" pos:column="63">==<pos:position pos:line="51" pos:column="65"/></operator> <operator pos:line="51" pos:column="66">(<pos:position pos:line="51" pos:column="67"/></operator><name pos:line="51" pos:column="67">idx2<pos:position pos:line="51" pos:column="71"/></name> <operator pos:line="51" pos:column="72">&gt;&gt;<pos:position pos:line="51" pos:column="77"/></operator> <literal type="number" pos:line="51" pos:column="75">24<pos:position pos:line="51" pos:column="77"/></literal><operator pos:line="51" pos:column="77">)<pos:position pos:line="51" pos:column="78"/></operator></expr>)<pos:position pos:line="51" pos:column="79"/></condition><then pos:line="51" pos:column="79">
	    <expr_stmt><expr><block pos:line="52" pos:column="13">{
	      <expr><name pos:line="53" pos:column="15">int<pos:position pos:line="53" pos:column="18"/></name> <name pos:line="53" pos:column="19">cnt<pos:position pos:line="53" pos:column="22"/></name> <operator pos:line="53" pos:column="23">=<pos:position pos:line="53" pos:column="24"/></operator> <literal type="number" pos:line="53" pos:column="25">0<pos:position pos:line="53" pos:column="26"/></literal></expr>;<pos:position pos:line="53" pos:column="27"/></block></expr></expr_stmt></then></if></argument_list></decl></decl_stmt>

	      <while pos:line="55" pos:column="15">while <condition pos:line="55" pos:column="21">(<expr><name pos:line="55" pos:column="22">cnt<pos:position pos:line="55" pos:column="25"/></name> <operator pos:line="55" pos:column="26">&lt;=<pos:position pos:line="55" pos:column="31"/></operator> <name pos:line="55" pos:column="29">len<pos:position pos:line="55" pos:column="32"/></name> <operator pos:line="55" pos:column="33">&amp;&amp;<pos:position pos:line="55" pos:column="43"/></operator>
		     <name><name pos:line="56" pos:column="22">weights<pos:position pos:line="56" pos:column="29"/></name><index pos:line="56" pos:column="29">[<expr><operator pos:line="56" pos:column="30">(<pos:position pos:line="56" pos:column="31"/></operator><name pos:line="56" pos:column="31">idx1<pos:position pos:line="56" pos:column="35"/></name> <operator pos:line="56" pos:column="36">&amp;<pos:position pos:line="56" pos:column="41"/></operator> <literal type="number" pos:line="56" pos:column="38">0xffffff<pos:position pos:line="56" pos:column="46"/></literal><operator pos:line="56" pos:column="46">)<pos:position pos:line="56" pos:column="47"/></operator> <operator pos:line="56" pos:column="48">+<pos:position pos:line="56" pos:column="49"/></operator> <literal type="number" pos:line="56" pos:column="50">1<pos:position pos:line="56" pos:column="51"/></literal> <operator pos:line="56" pos:column="52">+<pos:position pos:line="56" pos:column="53"/></operator> <name pos:line="56" pos:column="54">cnt<pos:position pos:line="56" pos:column="57"/></name></expr>]<pos:position pos:line="56" pos:column="58"/></index></name>
		     <operator pos:line="57" pos:column="22">==<pos:position pos:line="57" pos:column="24"/></operator> <name><name pos:line="57" pos:column="25">weights<pos:position pos:line="57" pos:column="32"/></name><index pos:line="57" pos:column="32">[<expr><operator pos:line="57" pos:column="33">(<pos:position pos:line="57" pos:column="34"/></operator><name pos:line="57" pos:column="34">idx2<pos:position pos:line="57" pos:column="38"/></name> <operator pos:line="57" pos:column="39">&amp;<pos:position pos:line="57" pos:column="44"/></operator> <literal type="number" pos:line="57" pos:column="41">0xffffff<pos:position pos:line="57" pos:column="49"/></literal><operator pos:line="57" pos:column="49">)<pos:position pos:line="57" pos:column="50"/></operator> <operator pos:line="57" pos:column="51">+<pos:position pos:line="57" pos:column="52"/></operator> <literal type="number" pos:line="57" pos:column="53">1<pos:position pos:line="57" pos:column="54"/></literal> <operator pos:line="57" pos:column="55">+<pos:position pos:line="57" pos:column="56"/></operator> <name pos:line="57" pos:column="57">cnt<pos:position pos:line="57" pos:column="60"/></name></expr>]<pos:position pos:line="57" pos:column="61"/></index></name></expr>)<pos:position pos:line="57" pos:column="62"/></condition>
		<block type="pseudo"><expr_stmt><expr><operator pos:line="58" pos:column="17">++<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="19">cnt<pos:position pos:line="58" pos:column="22"/></name></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt></block></while>

	      <if pos:line="60" pos:column="15">if <condition pos:line="60" pos:column="18">(<expr><name pos:line="60" pos:column="19">cnt<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">&gt;<pos:position pos:line="60" pos:column="27"/></operator> <name pos:line="60" pos:column="25">len<pos:position pos:line="60" pos:column="28"/></name></expr>)<pos:position pos:line="60" pos:column="29"/></condition><then pos:line="60" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="17">bitset_set<pos:position pos:line="61" pos:column="27"/></name> <argument_list pos:line="61" pos:column="28">(<argument><expr><name pos:line="61" pos:column="29">sbcset<pos:position pos:line="61" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="37">ch<pos:position pos:line="61" pos:column="39"/></name></expr></argument>)<pos:position pos:line="61" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="41"/></expr_stmt></block></then></if>
	    }
	}
      <comment type="block" pos:line="64" pos:column="7">/* Check whether the array has enough space.  */</comment>
      <if pos:line="65" pos:column="7">if <condition pos:line="65" pos:column="10">(<expr><call><name pos:line="65" pos:column="11">BE<pos:position pos:line="65" pos:column="13"/></name> <argument_list pos:line="65" pos:column="14">(<argument><expr><operator pos:line="65" pos:column="15">*<pos:position pos:line="65" pos:column="16"/></operator><name pos:line="65" pos:column="16">equiv_class_alloc<pos:position pos:line="65" pos:column="33"/></name> <operator pos:line="65" pos:column="34">==<pos:position pos:line="65" pos:column="36"/></operator> <name><name pos:line="65" pos:column="37">mbcset<pos:position pos:line="65" pos:column="43"/></name><operator pos:line="65" pos:column="43">-&gt;<pos:position pos:line="65" pos:column="48"/></operator><name pos:line="65" pos:column="45">nequiv_classes<pos:position pos:line="65" pos:column="59"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="61">0<pos:position pos:line="65" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="64"/></condition><then pos:line="65" pos:column="64">
	<block pos:line="66" pos:column="9">{
	  <comment type="block" pos:line="67" pos:column="11">/* Not enough, realloc it.  */</comment>
	  <comment type="block" pos:line="68" pos:column="11">/* +1 in case of mbcset-&gt;nequiv_classes is 0.  */</comment>
	  <decl_stmt><decl><type><name pos:line="69" pos:column="11">int<pos:position pos:line="69" pos:column="14"/></name></type> <name pos:line="69" pos:column="15">new_equiv_class_alloc<pos:position pos:line="69" pos:column="36"/></name> <init pos:line="69" pos:column="37">= <expr><literal type="number" pos:line="69" pos:column="39">2<pos:position pos:line="69" pos:column="40"/></literal> <operator pos:line="69" pos:column="41">*<pos:position pos:line="69" pos:column="42"/></operator> <name><name pos:line="69" pos:column="43">mbcset<pos:position pos:line="69" pos:column="49"/></name><operator pos:line="69" pos:column="49">-&gt;<pos:position pos:line="69" pos:column="54"/></operator><name pos:line="69" pos:column="51">nequiv_classes<pos:position pos:line="69" pos:column="65"/></name></name> <operator pos:line="69" pos:column="66">+<pos:position pos:line="69" pos:column="67"/></operator> <literal type="number" pos:line="69" pos:column="68">1<pos:position pos:line="69" pos:column="69"/></literal></expr></init></decl>;<pos:position pos:line="69" pos:column="70"/></decl_stmt>
	  <comment type="block" pos:line="70" pos:column="11">/* Use realloc since the array is NULL if *alloc == 0.  */</comment>
	  <decl_stmt><decl><type><name pos:line="71" pos:column="11">int32_t<pos:position pos:line="71" pos:column="18"/></name> <modifier pos:line="71" pos:column="19">*<pos:position pos:line="71" pos:column="20"/></modifier></type><name pos:line="71" pos:column="20">new_equiv_classes<pos:position pos:line="71" pos:column="37"/></name> <init pos:line="71" pos:column="38">= <expr><call><name pos:line="71" pos:column="40">re_realloc<pos:position pos:line="71" pos:column="50"/></name> <argument_list pos:line="71" pos:column="51">(<argument><expr><name><name pos:line="71" pos:column="52">mbcset<pos:position pos:line="71" pos:column="58"/></name><operator pos:line="71" pos:column="58">-&gt;<pos:position pos:line="71" pos:column="63"/></operator><name pos:line="71" pos:column="60">equiv_classes<pos:position pos:line="71" pos:column="73"/></name></name></expr></argument>,
						   <argument><expr><name pos:line="72" pos:column="52">int32_t<pos:position pos:line="72" pos:column="59"/></name></expr></argument>,
						   <argument><expr><name pos:line="73" pos:column="52">new_equiv_class_alloc<pos:position pos:line="73" pos:column="73"/></name></expr></argument>)<pos:position pos:line="73" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="73" pos:column="75"/></decl_stmt>
	  <if pos:line="74" pos:column="11">if <condition pos:line="74" pos:column="14">(<expr><call><name pos:line="74" pos:column="15">BE<pos:position pos:line="74" pos:column="17"/></name> <argument_list pos:line="74" pos:column="18">(<argument><expr><name pos:line="74" pos:column="19">new_equiv_classes<pos:position pos:line="74" pos:column="36"/></name> <operator pos:line="74" pos:column="37">==<pos:position pos:line="74" pos:column="39"/></operator> <name pos:line="74" pos:column="40">NULL<pos:position pos:line="74" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="46">0<pos:position pos:line="74" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="49"/></condition><then pos:line="74" pos:column="49">
	    <block type="pseudo"><return pos:line="75" pos:column="13">return <expr><name pos:line="75" pos:column="20">REG_ESPACE<pos:position pos:line="75" pos:column="30"/></name></expr>;<pos:position pos:line="75" pos:column="31"/></return></block></then></if>
	  <expr_stmt><expr><name><name pos:line="76" pos:column="11">mbcset<pos:position pos:line="76" pos:column="17"/></name><operator pos:line="76" pos:column="17">-&gt;<pos:position pos:line="76" pos:column="22"/></operator><name pos:line="76" pos:column="19">equiv_classes<pos:position pos:line="76" pos:column="32"/></name></name> <operator pos:line="76" pos:column="33">=<pos:position pos:line="76" pos:column="34"/></operator> <name pos:line="76" pos:column="35">new_equiv_classes<pos:position pos:line="76" pos:column="52"/></name></expr>;<pos:position pos:line="76" pos:column="53"/></expr_stmt>
	  <expr_stmt><expr><operator pos:line="77" pos:column="11">*<pos:position pos:line="77" pos:column="12"/></operator><name pos:line="77" pos:column="12">equiv_class_alloc<pos:position pos:line="77" pos:column="29"/></name> <operator pos:line="77" pos:column="30">=<pos:position pos:line="77" pos:column="31"/></operator> <name pos:line="77" pos:column="32">new_equiv_class_alloc<pos:position pos:line="77" pos:column="53"/></name></expr>;<pos:position pos:line="77" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="79" pos:column="7">mbcset<pos:position pos:line="79" pos:column="13"/></name><operator pos:line="79" pos:column="13">-&gt;<pos:position pos:line="79" pos:column="18"/></operator><name pos:line="79" pos:column="15">equiv_classes<pos:position pos:line="79" pos:column="28"/></name><index pos:line="79" pos:column="28">[<expr><name><name pos:line="79" pos:column="29">mbcset<pos:position pos:line="79" pos:column="35"/></name><operator pos:line="79" pos:column="35">-&gt;<pos:position pos:line="79" pos:column="40"/></operator><name pos:line="79" pos:column="37">nequiv_classes<pos:position pos:line="79" pos:column="51"/></name></name><operator pos:line="79" pos:column="51">++<pos:position pos:line="79" pos:column="53"/></operator></expr>]<pos:position pos:line="79" pos:column="54"/></index></name> <operator pos:line="79" pos:column="55">=<pos:position pos:line="79" pos:column="56"/></operator> <name pos:line="79" pos:column="57">idx1<pos:position pos:line="79" pos:column="61"/></name></expr>;<pos:position pos:line="79" pos:column="62"/></expr_stmt>
    }
  else
<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif<pos:position pos:line="82" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="82" pos:column="8">/* _LIBC */</comment>
    <block pos:line="83" pos:column="5">{
      <if pos:line="84" pos:column="7">if <condition pos:line="84" pos:column="10">(<expr><call><name pos:line="84" pos:column="11">BE<pos:position pos:line="84" pos:column="13"/></name> <argument_list pos:line="84" pos:column="14">(<argument><expr><call><name pos:line="84" pos:column="15">strlen<pos:position pos:line="84" pos:column="21"/></name> <argument_list pos:line="84" pos:column="22">(<argument><expr><operator pos:line="84" pos:column="23">(<pos:position pos:line="84" pos:column="24"/></operator><specifier pos:line="84" pos:column="24">const<pos:position pos:line="84" pos:column="29"/></specifier> <name pos:line="84" pos:column="30">char<pos:position pos:line="84" pos:column="34"/></name> <operator pos:line="84" pos:column="35">*<pos:position pos:line="84" pos:column="36"/></operator><operator pos:line="84" pos:column="36">)<pos:position pos:line="84" pos:column="37"/></operator> <name pos:line="84" pos:column="38">name<pos:position pos:line="84" pos:column="42"/></name></expr></argument>)<pos:position pos:line="84" pos:column="43"/></argument_list></call> <operator pos:line="84" pos:column="44">!=<pos:position pos:line="84" pos:column="46"/></operator> <literal type="number" pos:line="84" pos:column="47">1<pos:position pos:line="84" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="50">0<pos:position pos:line="84" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="53"/></condition><then pos:line="84" pos:column="53">
	<block type="pseudo"><return pos:line="85" pos:column="9">return <expr><name pos:line="85" pos:column="16">REG_ECOLLATE<pos:position pos:line="85" pos:column="28"/></name></expr>;<pos:position pos:line="85" pos:column="29"/></return></block></then></if>
      <expr_stmt><expr><call><name pos:line="86" pos:column="7">bitset_set<pos:position pos:line="86" pos:column="17"/></name> <argument_list pos:line="86" pos:column="18">(<argument><expr><name pos:line="86" pos:column="19">sbcset<pos:position pos:line="86" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="27">*<pos:position pos:line="86" pos:column="28"/></operator><name pos:line="86" pos:column="28">name<pos:position pos:line="86" pos:column="32"/></name></expr></argument>)<pos:position pos:line="86" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="87" pos:column="6"/></block>
  <return pos:line="88" pos:column="3">return <expr><name pos:line="88" pos:column="10">REG_NOERROR<pos:position pos:line="88" pos:column="21"/></name></expr>;<pos:position pos:line="88" pos:column="22"/></return>
}</unit>
