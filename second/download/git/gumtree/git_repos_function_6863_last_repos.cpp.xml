<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6863_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_check_mmapped_chunk<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">mstate<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">m<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">mchunkptr<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">p<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list> <block pos:line="1" pos:column="59">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">size_t<pos:position pos:line="2" pos:column="9"/></name></type>  <name pos:line="2" pos:column="11">sz<pos:position pos:line="2" pos:column="13"/></name> <init pos:line="2" pos:column="14">= <expr><call><name pos:line="2" pos:column="16">chunksize<pos:position pos:line="2" pos:column="25"/></name><argument_list pos:line="2" pos:column="25">(<argument><expr><name pos:line="2" pos:column="26">p<pos:position pos:line="2" pos:column="27"/></name></expr></argument>)<pos:position pos:line="2" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="2" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">len<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><operator pos:line="3" pos:column="16">(<pos:position pos:line="3" pos:column="17"/></operator><name pos:line="3" pos:column="17">sz<pos:position pos:line="3" pos:column="19"/></name> <operator pos:line="3" pos:column="20">+<pos:position pos:line="3" pos:column="21"/></operator> <operator pos:line="3" pos:column="22">(<pos:position pos:line="3" pos:column="23"/></operator><name><name pos:line="3" pos:column="23">p<pos:position pos:line="3" pos:column="24"/></name><operator pos:line="3" pos:column="24">-&gt;<pos:position pos:line="3" pos:column="29"/></operator><name pos:line="3" pos:column="26">prev_foot<pos:position pos:line="3" pos:column="35"/></name></name> <operator pos:line="3" pos:column="36">&amp;<pos:position pos:line="3" pos:column="41"/></operator> <operator pos:line="3" pos:column="38">~<pos:position pos:line="3" pos:column="39"/></operator><name pos:line="3" pos:column="39">IS_MMAPPED_BIT<pos:position pos:line="3" pos:column="53"/></name><operator pos:line="3" pos:column="53">)<pos:position pos:line="3" pos:column="54"/></operator> <operator pos:line="3" pos:column="55">+<pos:position pos:line="3" pos:column="56"/></operator> <name pos:line="3" pos:column="57">MMAP_FOOT_PAD<pos:position pos:line="3" pos:column="70"/></name><operator pos:line="3" pos:column="70">)<pos:position pos:line="3" pos:column="71"/></operator></expr></init></decl>;<pos:position pos:line="3" pos:column="72"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">assert<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><call><name pos:line="4" pos:column="10">is_mmapped<pos:position pos:line="4" pos:column="20"/></name><argument_list pos:line="4" pos:column="20">(<argument><expr><name pos:line="4" pos:column="21">p<pos:position pos:line="4" pos:column="22"/></name></expr></argument>)<pos:position pos:line="4" pos:column="23"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5" pos:column="3">assert<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><call><name pos:line="5" pos:column="10">use_mmap<pos:position pos:line="5" pos:column="18"/></name><argument_list pos:line="5" pos:column="18">(<argument><expr><name pos:line="5" pos:column="19">m<pos:position pos:line="5" pos:column="20"/></name></expr></argument>)<pos:position pos:line="5" pos:column="21"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">assert<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><operator pos:line="6" pos:column="10">(<pos:position pos:line="6" pos:column="11"/></operator><call><name pos:line="6" pos:column="11">is_aligned<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><call><name pos:line="6" pos:column="22">chunk2mem<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name pos:line="6" pos:column="32">p<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call><operator pos:line="6" pos:column="35">)<pos:position pos:line="6" pos:column="36"/></operator> <operator pos:line="6" pos:column="37">||<pos:position pos:line="6" pos:column="39"/></operator> <operator pos:line="6" pos:column="40">(<pos:position pos:line="6" pos:column="41"/></operator><name><name pos:line="6" pos:column="41">p<pos:position pos:line="6" pos:column="42"/></name><operator pos:line="6" pos:column="42">-&gt;<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="44">head<pos:position pos:line="6" pos:column="48"/></name></name> <operator pos:line="6" pos:column="49">==<pos:position pos:line="6" pos:column="51"/></operator> <name pos:line="6" pos:column="52">FENCEPOST_HEAD<pos:position pos:line="6" pos:column="66"/></name><operator pos:line="6" pos:column="66">)<pos:position pos:line="6" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="6" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="69"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">assert<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><call><name pos:line="7" pos:column="10">ok_address<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">m<pos:position pos:line="7" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="24">p<pos:position pos:line="7" pos:column="25"/></name></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">assert<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><operator pos:line="8" pos:column="10">!<pos:position pos:line="8" pos:column="11"/></operator><call><name pos:line="8" pos:column="11">is_small<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">sz<pos:position pos:line="8" pos:column="22"/></name></expr></argument>)<pos:position pos:line="8" pos:column="23"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">assert<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><operator pos:line="9" pos:column="10">(<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">len<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">&amp;<pos:position pos:line="9" pos:column="20"/></operator> <operator pos:line="9" pos:column="17">(<pos:position pos:line="9" pos:column="18"/></operator><name><name pos:line="9" pos:column="18">mparams<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">.<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">page_size<pos:position pos:line="9" pos:column="35"/></name></name><operator pos:line="9" pos:column="35">-<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="36">SIZE_T_ONE<pos:position pos:line="9" pos:column="46"/></name><operator pos:line="9" pos:column="46">)<pos:position pos:line="9" pos:column="47"/></operator><operator pos:line="9" pos:column="47">)<pos:position pos:line="9" pos:column="48"/></operator> <operator pos:line="9" pos:column="49">==<pos:position pos:line="9" pos:column="51"/></operator> <literal type="number" pos:line="9" pos:column="52">0<pos:position pos:line="9" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">assert<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><call><name pos:line="10" pos:column="10">chunk_plus_offset<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">p<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="31">sz<pos:position pos:line="10" pos:column="33"/></name></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">head<pos:position pos:line="10" pos:column="40"/></name> <operator pos:line="10" pos:column="41">==<pos:position pos:line="10" pos:column="43"/></operator> <name pos:line="10" pos:column="44">FENCEPOST_HEAD<pos:position pos:line="10" pos:column="58"/></name></expr></argument>)<pos:position pos:line="10" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">assert<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><call><name pos:line="11" pos:column="10">chunk_plus_offset<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">p<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="31">sz<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">+<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">SIZE_T_SIZE<pos:position pos:line="11" pos:column="45"/></name></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></call><operator pos:line="11" pos:column="46">-&gt;<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="48">head<pos:position pos:line="11" pos:column="52"/></name> <operator pos:line="11" pos:column="53">==<pos:position pos:line="11" pos:column="55"/></operator> <literal type="number" pos:line="11" pos:column="56">0<pos:position pos:line="11" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="59"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
