<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5905_git-2.10.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lock_raw_ref<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">refname<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">mustexist<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">string_list<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">extras<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="3" pos:column="25">const<pos:position pos:line="3" pos:column="30"/></specifier> <name><name pos:line="3" pos:column="31">struct<pos:position pos:line="3" pos:column="37"/></name> <name pos:line="3" pos:column="38">string_list<pos:position pos:line="3" pos:column="49"/></name></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">skip<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="4" pos:column="25">struct<pos:position pos:line="4" pos:column="31"/></name> <name pos:line="4" pos:column="32">ref_lock<pos:position pos:line="4" pos:column="40"/></name></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier><modifier pos:line="4" pos:column="42">*<pos:position pos:line="4" pos:column="43"/></modifier></type><name pos:line="4" pos:column="43">lock_p<pos:position pos:line="4" pos:column="49"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="5" pos:column="25">struct<pos:position pos:line="5" pos:column="31"/></name> <name pos:line="5" pos:column="32">strbuf<pos:position pos:line="5" pos:column="38"/></name></name> <modifier pos:line="5" pos:column="39">*<pos:position pos:line="5" pos:column="40"/></modifier></type><name pos:line="5" pos:column="40">referent<pos:position pos:line="5" pos:column="48"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="6" pos:column="25">unsigned<pos:position pos:line="6" pos:column="33"/></name> <name pos:line="6" pos:column="34">int<pos:position pos:line="6" pos:column="37"/></name> <modifier pos:line="6" pos:column="38">*<pos:position pos:line="6" pos:column="39"/></modifier></type><name pos:line="6" pos:column="39">type<pos:position pos:line="6" pos:column="43"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="7" pos:column="25">struct<pos:position pos:line="7" pos:column="31"/></name> <name pos:line="7" pos:column="32">strbuf<pos:position pos:line="7" pos:column="38"/></name></name> <modifier pos:line="7" pos:column="39">*<pos:position pos:line="7" pos:column="40"/></modifier></type><name pos:line="7" pos:column="40">err<pos:position pos:line="7" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="44"/></parameter_list>
<block pos:line="8" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">ref_lock<pos:position pos:line="9" pos:column="24"/></name></name> <modifier pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></modifier></type><name pos:line="9" pos:column="26">lock<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">strbuf<pos:position pos:line="10" pos:column="22"/></name></name></type> <name pos:line="10" pos:column="23">ref_file<pos:position pos:line="10" pos:column="31"/></name> <init pos:line="10" pos:column="32">= <expr><name pos:line="10" pos:column="34">STRBUF_INIT<pos:position pos:line="10" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">attempts_remaining<pos:position pos:line="11" pos:column="31"/></name> <init pos:line="11" pos:column="32">= <expr><literal type="number" pos:line="11" pos:column="34">3<pos:position pos:line="11" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">ret<pos:position pos:line="12" pos:column="16"/></name> <init pos:line="12" pos:column="17">= <expr><name pos:line="12" pos:column="19">TRANSACTION_GENERIC_ERROR<pos:position pos:line="12" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="45"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">assert<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">err<pos:position pos:line="14" pos:column="19"/></name></expr></argument>)<pos:position pos:line="14" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="15" pos:column="9">*<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">type<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <literal type="number" pos:line="15" pos:column="17">0<pos:position pos:line="15" pos:column="18"/></literal></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>

	<comment type="block" pos:line="17" pos:column="9">/* First lock the file so it can't change out from under us. */</comment>

	<expr_stmt><expr><operator pos:line="19" pos:column="9">*<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">lock_p<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <name pos:line="19" pos:column="19">lock<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <call><name pos:line="19" pos:column="26">xcalloc<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">(<argument><expr><literal type="number" pos:line="19" pos:column="34">1<pos:position pos:line="19" pos:column="35"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="37">sizeof<argument_list pos:line="19" pos:column="43">(<argument><expr><operator pos:line="19" pos:column="44">*<pos:position pos:line="19" pos:column="45"/></operator><name pos:line="19" pos:column="45">lock<pos:position pos:line="19" pos:column="49"/></name></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="21" pos:column="9">lock<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">ref_name<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <call><name pos:line="21" pos:column="26">xstrdup<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">refname<pos:position pos:line="21" pos:column="41"/></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">strbuf_git_path<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><operator pos:line="22" pos:column="25">&amp;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="26">ref_file<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="36">"%s"<pos:position pos:line="22" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="42">refname<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>

<label><name pos:line="24" pos:column="1">retry<pos:position pos:line="24" pos:column="6"/></name>:<pos:position pos:line="24" pos:column="7"/></label>
	<switch pos:line="25" pos:column="9">switch <condition pos:line="25" pos:column="16">(<expr><call><name pos:line="25" pos:column="17">safe_create_leading_directories<pos:position pos:line="25" pos:column="48"/></name><argument_list pos:line="25" pos:column="48">(<argument><expr><name><name pos:line="25" pos:column="49">ref_file<pos:position pos:line="25" pos:column="57"/></name><operator pos:line="25" pos:column="57">.<pos:position pos:line="25" pos:column="58"/></operator><name pos:line="25" pos:column="58">buf<pos:position pos:line="25" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="63"/></condition> <block pos:line="25" pos:column="64">{
	<case pos:line="26" pos:column="9">case <expr><name pos:line="26" pos:column="14">SCLD_OK<pos:position pos:line="26" pos:column="21"/></name></expr>:<pos:position pos:line="26" pos:column="22"/></case>
		<break pos:line="27" pos:column="17">break;<pos:position pos:line="27" pos:column="23"/></break> <comment type="block" pos:line="27" pos:column="24">/* success */</comment>
	<case pos:line="28" pos:column="9">case <expr><name pos:line="28" pos:column="14">SCLD_EXISTS<pos:position pos:line="28" pos:column="25"/></name></expr>:<pos:position pos:line="28" pos:column="26"/></case>
		<comment type="block" pos:line="29" pos:column="17">/*
		 * Suppose refname is "refs/foo/bar". We just failed
		 * to create the containing directory, "refs/foo",
		 * because there was a non-directory in the way. This
		 * indicates a D/F conflict, probably because of
		 * another reference such as "refs/foo". There is no
		 * reason to expect this error to be transitory.
		 */</comment>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><call><name pos:line="37" pos:column="21">verify_refname_available<pos:position pos:line="37" pos:column="45"/></name><argument_list pos:line="37" pos:column="45">(<argument><expr><name pos:line="37" pos:column="46">refname<pos:position pos:line="37" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="55">extras<pos:position pos:line="37" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="63">skip<pos:position pos:line="37" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="69">err<pos:position pos:line="37" pos:column="72"/></name></expr></argument>)<pos:position pos:line="37" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="74"/></condition><then pos:line="37" pos:column="74"> <block pos:line="37" pos:column="75">{
			<if pos:line="38" pos:column="25">if <condition pos:line="38" pos:column="28">(<expr><name pos:line="38" pos:column="29">mustexist<pos:position pos:line="38" pos:column="38"/></name></expr>)<pos:position pos:line="38" pos:column="39"/></condition><then pos:line="38" pos:column="39"> <block pos:line="38" pos:column="40">{
				<comment type="block" pos:line="39" pos:column="33">/*
				 * To the user the relevant error is
				 * that the "mustexist" reference is
				 * missing:
				 */</comment>
				<expr_stmt><expr><call><name pos:line="44" pos:column="33">strbuf_reset<pos:position pos:line="44" pos:column="45"/></name><argument_list pos:line="44" pos:column="45">(<argument><expr><name pos:line="44" pos:column="46">err<pos:position pos:line="44" pos:column="49"/></name></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="45" pos:column="33">strbuf_addf<pos:position pos:line="45" pos:column="44"/></name><argument_list pos:line="45" pos:column="44">(<argument><expr><name pos:line="45" pos:column="45">err<pos:position pos:line="45" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="50">"unable to resolve reference '%s'"<pos:position pos:line="45" pos:column="84"/></literal></expr></argument>,
					    <argument><expr><name pos:line="46" pos:column="45">refname<pos:position pos:line="46" pos:column="52"/></name></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="54"/></expr_stmt>
			}<pos:position pos:line="47" pos:column="26"/></block></then> <else pos:line="47" pos:column="27">else <block pos:line="47" pos:column="32">{
				<comment type="block" pos:line="48" pos:column="33">/*
				 * The error message set by
				 * verify_refname_available_dir() is OK.
				 */</comment>
				<expr_stmt><expr><name pos:line="52" pos:column="33">ret<pos:position pos:line="52" pos:column="36"/></name> <operator pos:line="52" pos:column="37">=<pos:position pos:line="52" pos:column="38"/></operator> <name pos:line="52" pos:column="39">TRANSACTION_NAME_CONFLICT<pos:position pos:line="52" pos:column="64"/></name></expr>;<pos:position pos:line="52" pos:column="65"/></expr_stmt>
			}<pos:position pos:line="53" pos:column="26"/></block></else></if>
		}<pos:position pos:line="54" pos:column="18"/></block></then> <else pos:line="54" pos:column="19">else <block pos:line="54" pos:column="24">{
			<comment type="block" pos:line="55" pos:column="25">/*
			 * The file that is in the way isn't a loose
			 * reference. Report it as a low-level
			 * failure.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">strbuf_addf<pos:position pos:line="60" pos:column="36"/></name><argument_list pos:line="60" pos:column="36">(<argument><expr><name pos:line="60" pos:column="37">err<pos:position pos:line="60" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="42">"unable to create lock file %s.lock; "<pos:position pos:line="60" pos:column="80"/></literal>
				    <literal type="string" pos:line="61" pos:column="37">"non-directory in the way"<pos:position pos:line="61" pos:column="63"/></literal></expr></argument>,
				    <argument><expr><name><name pos:line="62" pos:column="37">ref_file<pos:position pos:line="62" pos:column="45"/></name><operator pos:line="62" pos:column="45">.<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="46">buf<pos:position pos:line="62" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="63" pos:column="18"/></block></else></if>
		<goto pos:line="64" pos:column="17">goto <name pos:line="64" pos:column="22">error_return<pos:position pos:line="64" pos:column="34"/></name>;<pos:position pos:line="64" pos:column="35"/></goto>
	<case pos:line="65" pos:column="9">case <expr><name pos:line="65" pos:column="14">SCLD_VANISHED<pos:position pos:line="65" pos:column="27"/></name></expr>:<pos:position pos:line="65" pos:column="28"/></case>
		<comment type="block" pos:line="66" pos:column="17">/* Maybe another process was tidying up. Try again. */</comment>
		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><operator pos:line="67" pos:column="21">--<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="23">attempts_remaining<pos:position pos:line="67" pos:column="41"/></name> <operator pos:line="67" pos:column="42">&gt;<pos:position pos:line="67" pos:column="46"/></operator> <literal type="number" pos:line="67" pos:column="44">0<pos:position pos:line="67" pos:column="45"/></literal></expr>)<pos:position pos:line="67" pos:column="46"/></condition><then pos:line="67" pos:column="46">
			<block type="pseudo"><goto pos:line="68" pos:column="25">goto <name pos:line="68" pos:column="30">retry<pos:position pos:line="68" pos:column="35"/></name>;<pos:position pos:line="68" pos:column="36"/></goto></block></then></if>
		<comment type="block" pos:line="69" pos:column="17">/* fall through */</comment>
	<default pos:line="70" pos:column="9">default:<pos:position pos:line="70" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">strbuf_addf<pos:position pos:line="71" pos:column="28"/></name><argument_list pos:line="71" pos:column="28">(<argument><expr><name pos:line="71" pos:column="29">err<pos:position pos:line="71" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="34">"unable to create directory for %s"<pos:position pos:line="71" pos:column="69"/></literal></expr></argument>,
			    <argument><expr><name><name pos:line="72" pos:column="29">ref_file<pos:position pos:line="72" pos:column="37"/></name><operator pos:line="72" pos:column="37">.<pos:position pos:line="72" pos:column="38"/></operator><name pos:line="72" pos:column="38">buf<pos:position pos:line="72" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="43"/></expr_stmt>
		<goto pos:line="73" pos:column="17">goto <name pos:line="73" pos:column="22">error_return<pos:position pos:line="73" pos:column="34"/></name>;<pos:position pos:line="73" pos:column="35"/></goto>
	}<pos:position pos:line="74" pos:column="10"/></block></switch>

	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><operator pos:line="76" pos:column="13">!<pos:position pos:line="76" pos:column="14"/></operator><name><name pos:line="76" pos:column="14">lock<pos:position pos:line="76" pos:column="18"/></name><operator pos:line="76" pos:column="18">-&gt;<pos:position pos:line="76" pos:column="23"/></operator><name pos:line="76" pos:column="20">lk<pos:position pos:line="76" pos:column="22"/></name></name></expr>)<pos:position pos:line="76" pos:column="23"/></condition><then pos:line="76" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="77" pos:column="17">lock<pos:position pos:line="77" pos:column="21"/></name><operator pos:line="77" pos:column="21">-&gt;<pos:position pos:line="77" pos:column="26"/></operator><name pos:line="77" pos:column="23">lk<pos:position pos:line="77" pos:column="25"/></name></name> <operator pos:line="77" pos:column="26">=<pos:position pos:line="77" pos:column="27"/></operator> <call><name pos:line="77" pos:column="28">xcalloc<pos:position pos:line="77" pos:column="35"/></name><argument_list pos:line="77" pos:column="35">(<argument><expr><literal type="number" pos:line="77" pos:column="36">1<pos:position pos:line="77" pos:column="37"/></literal></expr></argument>, <argument><expr><sizeof pos:line="77" pos:column="39">sizeof<argument_list pos:line="77" pos:column="45">(<argument><expr pos:line="77" pos:column="46">struct <name pos:line="77" pos:column="53">lock_file<pos:position pos:line="77" pos:column="62"/></name></expr></argument>)<pos:position pos:line="77" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="77" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="65"/></expr_stmt></block></then></if>

	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><call><name pos:line="79" pos:column="13">hold_lock_file_for_update<pos:position pos:line="79" pos:column="38"/></name><argument_list pos:line="79" pos:column="38">(<argument><expr><name><name pos:line="79" pos:column="39">lock<pos:position pos:line="79" pos:column="43"/></name><operator pos:line="79" pos:column="43">-&gt;<pos:position pos:line="79" pos:column="48"/></operator><name pos:line="79" pos:column="45">lk<pos:position pos:line="79" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="49">ref_file<pos:position pos:line="79" pos:column="57"/></name><operator pos:line="79" pos:column="57">.<pos:position pos:line="79" pos:column="58"/></operator><name pos:line="79" pos:column="58">buf<pos:position pos:line="79" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="63">LOCK_NO_DEREF<pos:position pos:line="79" pos:column="76"/></name></expr></argument>)<pos:position pos:line="79" pos:column="77"/></argument_list></call> <operator pos:line="79" pos:column="78">&lt;<pos:position pos:line="79" pos:column="82"/></operator> <literal type="number" pos:line="79" pos:column="80">0<pos:position pos:line="79" pos:column="81"/></literal></expr>)<pos:position pos:line="79" pos:column="82"/></condition><then pos:line="79" pos:column="82"> <block pos:line="79" pos:column="83">{
		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><name pos:line="80" pos:column="21">errno<pos:position pos:line="80" pos:column="26"/></name> <operator pos:line="80" pos:column="27">==<pos:position pos:line="80" pos:column="29"/></operator> <name pos:line="80" pos:column="30">ENOENT<pos:position pos:line="80" pos:column="36"/></name> <operator pos:line="80" pos:column="37">&amp;&amp;<pos:position pos:line="80" pos:column="47"/></operator> <operator pos:line="80" pos:column="40">--<pos:position pos:line="80" pos:column="42"/></operator><name pos:line="80" pos:column="42">attempts_remaining<pos:position pos:line="80" pos:column="60"/></name> <operator pos:line="80" pos:column="61">&gt;<pos:position pos:line="80" pos:column="65"/></operator> <literal type="number" pos:line="80" pos:column="63">0<pos:position pos:line="80" pos:column="64"/></literal></expr>)<pos:position pos:line="80" pos:column="65"/></condition><then pos:line="80" pos:column="65"> <block pos:line="80" pos:column="66">{
			<comment type="block" pos:line="81" pos:column="25">/*
			 * Maybe somebody just deleted one of the
			 * directories leading to ref_file.  Try
			 * again:
			 */</comment>
			<goto pos:line="86" pos:column="25">goto <name pos:line="86" pos:column="30">retry<pos:position pos:line="86" pos:column="35"/></name>;<pos:position pos:line="86" pos:column="36"/></goto>
		}<pos:position pos:line="87" pos:column="18"/></block></then> <else pos:line="87" pos:column="19">else <block pos:line="87" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="88" pos:column="25">unable_to_lock_message<pos:position pos:line="88" pos:column="47"/></name><argument_list pos:line="88" pos:column="47">(<argument><expr><name><name pos:line="88" pos:column="48">ref_file<pos:position pos:line="88" pos:column="56"/></name><operator pos:line="88" pos:column="56">.<pos:position pos:line="88" pos:column="57"/></operator><name pos:line="88" pos:column="57">buf<pos:position pos:line="88" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="62">errno<pos:position pos:line="88" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="69">err<pos:position pos:line="88" pos:column="72"/></name></expr></argument>)<pos:position pos:line="88" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="74"/></expr_stmt>
			<goto pos:line="89" pos:column="25">goto <name pos:line="89" pos:column="30">error_return<pos:position pos:line="89" pos:column="42"/></name>;<pos:position pos:line="89" pos:column="43"/></goto>
		}<pos:position pos:line="90" pos:column="18"/></block></else></if>
	}<pos:position pos:line="91" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="93" pos:column="9">/*
	 * Now we hold the lock and can read the reference without
	 * fear that its value will change.
	 */</comment>

	<if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><call><name pos:line="98" pos:column="13">read_raw_ref<pos:position pos:line="98" pos:column="25"/></name><argument_list pos:line="98" pos:column="25">(<argument><expr><name pos:line="98" pos:column="26">refname<pos:position pos:line="98" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="35">lock<pos:position pos:line="98" pos:column="39"/></name><operator pos:line="98" pos:column="39">-&gt;<pos:position pos:line="98" pos:column="44"/></operator><name pos:line="98" pos:column="41">old_oid<pos:position pos:line="98" pos:column="48"/></name><operator pos:line="98" pos:column="48">.<pos:position pos:line="98" pos:column="49"/></operator><name pos:line="98" pos:column="49">hash<pos:position pos:line="98" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="55">referent<pos:position pos:line="98" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="65">type<pos:position pos:line="98" pos:column="69"/></name></expr></argument>)<pos:position pos:line="98" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="98" pos:column="71"/></condition><then pos:line="98" pos:column="71"> <block pos:line="98" pos:column="72">{
		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><name pos:line="99" pos:column="21">errno<pos:position pos:line="99" pos:column="26"/></name> <operator pos:line="99" pos:column="27">==<pos:position pos:line="99" pos:column="29"/></operator> <name pos:line="99" pos:column="30">ENOENT<pos:position pos:line="99" pos:column="36"/></name></expr>)<pos:position pos:line="99" pos:column="37"/></condition><then pos:line="99" pos:column="37"> <block pos:line="99" pos:column="38">{
			<if pos:line="100" pos:column="25">if <condition pos:line="100" pos:column="28">(<expr><name pos:line="100" pos:column="29">mustexist<pos:position pos:line="100" pos:column="38"/></name></expr>)<pos:position pos:line="100" pos:column="39"/></condition><then pos:line="100" pos:column="39"> <block pos:line="100" pos:column="40">{
				<comment type="block" pos:line="101" pos:column="33">/* Garden variety missing reference. */</comment>
				<expr_stmt><expr><call><name pos:line="102" pos:column="33">strbuf_addf<pos:position pos:line="102" pos:column="44"/></name><argument_list pos:line="102" pos:column="44">(<argument><expr><name pos:line="102" pos:column="45">err<pos:position pos:line="102" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="50">"unable to resolve reference '%s'"<pos:position pos:line="102" pos:column="84"/></literal></expr></argument>,
					    <argument><expr><name pos:line="103" pos:column="45">refname<pos:position pos:line="103" pos:column="52"/></name></expr></argument>)<pos:position pos:line="103" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="54"/></expr_stmt>
				<goto pos:line="104" pos:column="33">goto <name pos:line="104" pos:column="38">error_return<pos:position pos:line="104" pos:column="50"/></name>;<pos:position pos:line="104" pos:column="51"/></goto>
			}<pos:position pos:line="105" pos:column="26"/></block></then> <else pos:line="105" pos:column="27">else <block pos:line="105" pos:column="32">{
				<comment type="block" pos:line="106" pos:column="33">/*
				 * Reference is missing, but that's OK. We
				 * know that there is not a conflict with
				 * another loose reference because
				 * (supposing that we are trying to lock
				 * reference "refs/foo/bar"):
				 *
				 * - We were successfully able to create
				 *   the lockfile refs/foo/bar.lock, so we
				 *   know there cannot be a loose reference
				 *   named "refs/foo".
				 *
				 * - We got ENOENT and not EISDIR, so we
				 *   know that there cannot be a loose
				 *   reference named "refs/foo/bar/baz".
				 */</comment>
			}<pos:position pos:line="122" pos:column="26"/></block></else></if>
		}<pos:position pos:line="123" pos:column="18"/></block></then> <elseif pos:line="123" pos:column="19">else <if pos:line="123" pos:column="24">if <condition pos:line="123" pos:column="27">(<expr><name pos:line="123" pos:column="28">errno<pos:position pos:line="123" pos:column="33"/></name> <operator pos:line="123" pos:column="34">==<pos:position pos:line="123" pos:column="36"/></operator> <name pos:line="123" pos:column="37">EISDIR<pos:position pos:line="123" pos:column="43"/></name></expr>)<pos:position pos:line="123" pos:column="44"/></condition><then pos:line="123" pos:column="44"> <block pos:line="123" pos:column="45">{
			<comment type="block" pos:line="124" pos:column="25">/*
			 * There is a directory in the way. It might have
			 * contained references that have been deleted. If
			 * we don't require that the reference already
			 * exists, try to remove the directory so that it
			 * doesn't cause trouble when we want to rename the
			 * lockfile into place later.
			 */</comment>
			<if pos:line="132" pos:column="25">if <condition pos:line="132" pos:column="28">(<expr><name pos:line="132" pos:column="29">mustexist<pos:position pos:line="132" pos:column="38"/></name></expr>)<pos:position pos:line="132" pos:column="39"/></condition><then pos:line="132" pos:column="39"> <block pos:line="132" pos:column="40">{
				<comment type="block" pos:line="133" pos:column="33">/* Garden variety missing reference. */</comment>
				<expr_stmt><expr><call><name pos:line="134" pos:column="33">strbuf_addf<pos:position pos:line="134" pos:column="44"/></name><argument_list pos:line="134" pos:column="44">(<argument><expr><name pos:line="134" pos:column="45">err<pos:position pos:line="134" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="134" pos:column="50">"unable to resolve reference '%s'"<pos:position pos:line="134" pos:column="84"/></literal></expr></argument>,
					    <argument><expr><name pos:line="135" pos:column="45">refname<pos:position pos:line="135" pos:column="52"/></name></expr></argument>)<pos:position pos:line="135" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="54"/></expr_stmt>
				<goto pos:line="136" pos:column="33">goto <name pos:line="136" pos:column="38">error_return<pos:position pos:line="136" pos:column="50"/></name>;<pos:position pos:line="136" pos:column="51"/></goto>
			}<pos:position pos:line="137" pos:column="26"/></block></then> <elseif pos:line="137" pos:column="27">else <if pos:line="137" pos:column="32">if <condition pos:line="137" pos:column="35">(<expr><call><name pos:line="137" pos:column="36">remove_dir_recursively<pos:position pos:line="137" pos:column="58"/></name><argument_list pos:line="137" pos:column="58">(<argument><expr><operator pos:line="137" pos:column="59">&amp;<pos:position pos:line="137" pos:column="64"/></operator><name pos:line="137" pos:column="60">ref_file<pos:position pos:line="137" pos:column="68"/></name></expr></argument>,
							  <argument><expr><name pos:line="138" pos:column="59">REMOVE_DIR_EMPTY_ONLY<pos:position pos:line="138" pos:column="80"/></name></expr></argument>)<pos:position pos:line="138" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="138" pos:column="82"/></condition><then pos:line="138" pos:column="82"> <block pos:line="138" pos:column="83">{
				<if pos:line="139" pos:column="33">if <condition pos:line="139" pos:column="36">(<expr><call><name pos:line="139" pos:column="37">verify_refname_available_dir<pos:position pos:line="139" pos:column="65"/></name><argument_list pos:line="139" pos:column="65">(
						    <argument><expr><name pos:line="140" pos:column="53">refname<pos:position pos:line="140" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="62">extras<pos:position pos:line="140" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="70">skip<pos:position pos:line="140" pos:column="74"/></name></expr></argument>,
						    <argument><expr><call><name pos:line="141" pos:column="53">get_loose_refs<pos:position pos:line="141" pos:column="67"/></name><argument_list pos:line="141" pos:column="67">(<argument><expr><operator pos:line="141" pos:column="68">&amp;<pos:position pos:line="141" pos:column="73"/></operator><name pos:line="141" pos:column="69">ref_cache<pos:position pos:line="141" pos:column="78"/></name></expr></argument>)<pos:position pos:line="141" pos:column="79"/></argument_list></call></expr></argument>,
						    <argument><expr><name pos:line="142" pos:column="53">err<pos:position pos:line="142" pos:column="56"/></name></expr></argument>)<pos:position pos:line="142" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="142" pos:column="58"/></condition><then pos:line="142" pos:column="58"> <block pos:line="142" pos:column="59">{
					<comment type="block" pos:line="143" pos:column="41">/*
					 * The error message set by
					 * verify_refname_available() is OK.
					 */</comment>
					<expr_stmt><expr><name pos:line="147" pos:column="41">ret<pos:position pos:line="147" pos:column="44"/></name> <operator pos:line="147" pos:column="45">=<pos:position pos:line="147" pos:column="46"/></operator> <name pos:line="147" pos:column="47">TRANSACTION_NAME_CONFLICT<pos:position pos:line="147" pos:column="72"/></name></expr>;<pos:position pos:line="147" pos:column="73"/></expr_stmt>
					<goto pos:line="148" pos:column="41">goto <name pos:line="148" pos:column="46">error_return<pos:position pos:line="148" pos:column="58"/></name>;<pos:position pos:line="148" pos:column="59"/></goto>
				}<pos:position pos:line="149" pos:column="34"/></block></then> <else pos:line="149" pos:column="35">else <block pos:line="149" pos:column="40">{
					<comment type="block" pos:line="150" pos:column="41">/*
					 * We can't delete the directory,
					 * but we also don't know of any
					 * references that it should
					 * contain.
					 */</comment>
					<expr_stmt><expr><call><name pos:line="156" pos:column="41">strbuf_addf<pos:position pos:line="156" pos:column="52"/></name><argument_list pos:line="156" pos:column="52">(<argument><expr><name pos:line="156" pos:column="53">err<pos:position pos:line="156" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="156" pos:column="58">"there is a non-empty directory '%s' "<pos:position pos:line="156" pos:column="96"/></literal>
						    <literal type="string" pos:line="157" pos:column="53">"blocking reference '%s'"<pos:position pos:line="157" pos:column="78"/></literal></expr></argument>,
						    <argument><expr><name><name pos:line="158" pos:column="53">ref_file<pos:position pos:line="158" pos:column="61"/></name><operator pos:line="158" pos:column="61">.<pos:position pos:line="158" pos:column="62"/></operator><name pos:line="158" pos:column="62">buf<pos:position pos:line="158" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="67">refname<pos:position pos:line="158" pos:column="74"/></name></expr></argument>)<pos:position pos:line="158" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="76"/></expr_stmt>
					<goto pos:line="159" pos:column="41">goto <name pos:line="159" pos:column="46">error_return<pos:position pos:line="159" pos:column="58"/></name>;<pos:position pos:line="159" pos:column="59"/></goto>
				}<pos:position pos:line="160" pos:column="34"/></block></else></if>
			}<pos:position pos:line="161" pos:column="26"/></block></then></if></elseif></if>
		}<pos:position pos:line="162" pos:column="18"/></block></then></if></elseif> <elseif pos:line="162" pos:column="19">else <if pos:line="162" pos:column="24">if <condition pos:line="162" pos:column="27">(<expr><name pos:line="162" pos:column="28">errno<pos:position pos:line="162" pos:column="33"/></name> <operator pos:line="162" pos:column="34">==<pos:position pos:line="162" pos:column="36"/></operator> <name pos:line="162" pos:column="37">EINVAL<pos:position pos:line="162" pos:column="43"/></name> <operator pos:line="162" pos:column="44">&amp;&amp;<pos:position pos:line="162" pos:column="54"/></operator> <operator pos:line="162" pos:column="47">(<pos:position pos:line="162" pos:column="48"/></operator><operator pos:line="162" pos:column="48">*<pos:position pos:line="162" pos:column="49"/></operator><name pos:line="162" pos:column="49">type<pos:position pos:line="162" pos:column="53"/></name> <operator pos:line="162" pos:column="54">&amp;<pos:position pos:line="162" pos:column="59"/></operator> <name pos:line="162" pos:column="56">REF_ISBROKEN<pos:position pos:line="162" pos:column="68"/></name><operator pos:line="162" pos:column="68">)<pos:position pos:line="162" pos:column="69"/></operator></expr>)<pos:position pos:line="162" pos:column="70"/></condition><then pos:line="162" pos:column="70"> <block pos:line="162" pos:column="71">{
			<expr_stmt><expr><call><name pos:line="163" pos:column="25">strbuf_addf<pos:position pos:line="163" pos:column="36"/></name><argument_list pos:line="163" pos:column="36">(<argument><expr><name pos:line="163" pos:column="37">err<pos:position pos:line="163" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="163" pos:column="42">"unable to resolve reference '%s': "<pos:position pos:line="163" pos:column="78"/></literal>
				    <literal type="string" pos:line="164" pos:column="37">"reference broken"<pos:position pos:line="164" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="57">refname<pos:position pos:line="164" pos:column="64"/></name></expr></argument>)<pos:position pos:line="164" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="66"/></expr_stmt>
			<goto pos:line="165" pos:column="25">goto <name pos:line="165" pos:column="30">error_return<pos:position pos:line="165" pos:column="42"/></name>;<pos:position pos:line="165" pos:column="43"/></goto>
		}<pos:position pos:line="166" pos:column="18"/></block></then></if></elseif> <else pos:line="166" pos:column="19">else <block pos:line="166" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="167" pos:column="25">strbuf_addf<pos:position pos:line="167" pos:column="36"/></name><argument_list pos:line="167" pos:column="36">(<argument><expr><name pos:line="167" pos:column="37">err<pos:position pos:line="167" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="167" pos:column="42">"unable to resolve reference '%s': %s"<pos:position pos:line="167" pos:column="80"/></literal></expr></argument>,
				    <argument><expr><name pos:line="168" pos:column="37">refname<pos:position pos:line="168" pos:column="44"/></name></expr></argument>, <argument><expr><call><name pos:line="168" pos:column="46">strerror<pos:position pos:line="168" pos:column="54"/></name><argument_list pos:line="168" pos:column="54">(<argument><expr><name pos:line="168" pos:column="55">errno<pos:position pos:line="168" pos:column="60"/></name></expr></argument>)<pos:position pos:line="168" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="168" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="63"/></expr_stmt>
			<goto pos:line="169" pos:column="25">goto <name pos:line="169" pos:column="30">error_return<pos:position pos:line="169" pos:column="42"/></name>;<pos:position pos:line="169" pos:column="43"/></goto>
		}<pos:position pos:line="170" pos:column="18"/></block></else></if>

		<comment type="block" pos:line="172" pos:column="17">/*
		 * If the ref did not exist and we are creating it,
		 * make sure there is no existing packed ref whose
		 * name begins with our refname, nor a packed ref
		 * whose name is a proper prefix of our refname.
		 */</comment>
		<if pos:line="178" pos:column="17">if <condition pos:line="178" pos:column="20">(<expr><call><name pos:line="178" pos:column="21">verify_refname_available_dir<pos:position pos:line="178" pos:column="49"/></name><argument_list pos:line="178" pos:column="49">(
				    <argument><expr><name pos:line="179" pos:column="37">refname<pos:position pos:line="179" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="46">extras<pos:position pos:line="179" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="54">skip<pos:position pos:line="179" pos:column="58"/></name></expr></argument>,
				    <argument><expr><call><name pos:line="180" pos:column="37">get_packed_refs<pos:position pos:line="180" pos:column="52"/></name><argument_list pos:line="180" pos:column="52">(<argument><expr><operator pos:line="180" pos:column="53">&amp;<pos:position pos:line="180" pos:column="58"/></operator><name pos:line="180" pos:column="54">ref_cache<pos:position pos:line="180" pos:column="63"/></name></expr></argument>)<pos:position pos:line="180" pos:column="64"/></argument_list></call></expr></argument>,
				    <argument><expr><name pos:line="181" pos:column="37">err<pos:position pos:line="181" pos:column="40"/></name></expr></argument>)<pos:position pos:line="181" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="181" pos:column="42"/></condition><then pos:line="181" pos:column="42"> <block pos:line="181" pos:column="43">{
			<goto pos:line="182" pos:column="25">goto <name pos:line="182" pos:column="30">error_return<pos:position pos:line="182" pos:column="42"/></name>;<pos:position pos:line="182" pos:column="43"/></goto>
		}<pos:position pos:line="183" pos:column="18"/></block></then></if>
	}<pos:position pos:line="184" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="186" pos:column="9">ret<pos:position pos:line="186" pos:column="12"/></name> <operator pos:line="186" pos:column="13">=<pos:position pos:line="186" pos:column="14"/></operator> <literal type="number" pos:line="186" pos:column="15">0<pos:position pos:line="186" pos:column="16"/></literal></expr>;<pos:position pos:line="186" pos:column="17"/></expr_stmt>
	<goto pos:line="187" pos:column="9">goto <name pos:line="187" pos:column="14">out<pos:position pos:line="187" pos:column="17"/></name>;<pos:position pos:line="187" pos:column="18"/></goto>

<label><name pos:line="189" pos:column="1">error_return<pos:position pos:line="189" pos:column="13"/></name>:<pos:position pos:line="189" pos:column="14"/></label>
	<expr_stmt><expr><call><name pos:line="190" pos:column="9">unlock_ref<pos:position pos:line="190" pos:column="19"/></name><argument_list pos:line="190" pos:column="19">(<argument><expr><name pos:line="190" pos:column="20">lock<pos:position pos:line="190" pos:column="24"/></name></expr></argument>)<pos:position pos:line="190" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="191" pos:column="9">*<pos:position pos:line="191" pos:column="10"/></operator><name pos:line="191" pos:column="10">lock_p<pos:position pos:line="191" pos:column="16"/></name> <operator pos:line="191" pos:column="17">=<pos:position pos:line="191" pos:column="18"/></operator> <name pos:line="191" pos:column="19">NULL<pos:position pos:line="191" pos:column="23"/></name></expr>;<pos:position pos:line="191" pos:column="24"/></expr_stmt>

<label><name pos:line="193" pos:column="1">out<pos:position pos:line="193" pos:column="4"/></name>:<pos:position pos:line="193" pos:column="5"/></label>
	<expr_stmt><expr><call><name pos:line="194" pos:column="9">strbuf_release<pos:position pos:line="194" pos:column="23"/></name><argument_list pos:line="194" pos:column="23">(<argument><expr><operator pos:line="194" pos:column="24">&amp;<pos:position pos:line="194" pos:column="29"/></operator><name pos:line="194" pos:column="25">ref_file<pos:position pos:line="194" pos:column="33"/></name></expr></argument>)<pos:position pos:line="194" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="35"/></expr_stmt>
	<return pos:line="195" pos:column="9">return <expr><name pos:line="195" pos:column="16">ret<pos:position pos:line="195" pos:column="19"/></name></expr>;<pos:position pos:line="195" pos:column="20"/></return>
}<pos:position pos:line="196" pos:column="2"/></block></function></unit>
