<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2794.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">git_default_branch_config<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">var<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">value<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><call><name pos:line="3" pos:column="14">strcmp<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><name pos:line="3" pos:column="21">var<pos:position pos:line="3" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="26">"branch.autosetupmerge"<pos:position pos:line="3" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="51"/></condition><then pos:line="3" pos:column="51"> <block pos:line="3" pos:column="52">{
		<if pos:line="4" pos:column="17">if <condition pos:line="4" pos:column="20">(<expr><name pos:line="4" pos:column="21">value<pos:position pos:line="4" pos:column="26"/></name> <operator pos:line="4" pos:column="27">&amp;&amp;<pos:position pos:line="4" pos:column="37"/></operator> <operator pos:line="4" pos:column="30">!<pos:position pos:line="4" pos:column="31"/></operator><call><name pos:line="4" pos:column="31">strcasecmp<pos:position pos:line="4" pos:column="41"/></name><argument_list pos:line="4" pos:column="41">(<argument><expr><name pos:line="4" pos:column="42">value<pos:position pos:line="4" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="49">"always"<pos:position pos:line="4" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="59"/></condition><then pos:line="4" pos:column="59"> <block pos:line="4" pos:column="60">{
			<expr_stmt><expr><name pos:line="5" pos:column="25">git_branch_track<pos:position pos:line="5" pos:column="41"/></name> <operator pos:line="5" pos:column="42">=<pos:position pos:line="5" pos:column="43"/></operator> <name pos:line="5" pos:column="44">BRANCH_TRACK_ALWAYS<pos:position pos:line="5" pos:column="63"/></name></expr>;<pos:position pos:line="5" pos:column="64"/></expr_stmt>
			<return pos:line="6" pos:column="25">return <expr><literal type="number" pos:line="6" pos:column="32">0<pos:position pos:line="6" pos:column="33"/></literal></expr>;<pos:position pos:line="6" pos:column="34"/></return>
		}<pos:position pos:line="7" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="8" pos:column="17">git_branch_track<pos:position pos:line="8" pos:column="33"/></name> <operator pos:line="8" pos:column="34">=<pos:position pos:line="8" pos:column="35"/></operator> <call><name pos:line="8" pos:column="36">git_config_bool<pos:position pos:line="8" pos:column="51"/></name><argument_list pos:line="8" pos:column="51">(<argument><expr><name pos:line="8" pos:column="52">var<pos:position pos:line="8" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="57">value<pos:position pos:line="8" pos:column="62"/></name></expr></argument>)<pos:position pos:line="8" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="64"/></expr_stmt>
		<return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><call><name pos:line="11" pos:column="14">strcmp<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">var<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="26">"branch.autosetuprebase"<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="52"/></condition><then pos:line="11" pos:column="52"> <block pos:line="11" pos:column="53">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">value<pos:position pos:line="12" pos:column="27"/></name></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28">
			<block type="pseudo"><return pos:line="13" pos:column="25">return <expr><call><name pos:line="13" pos:column="32">config_error_nonbool<pos:position pos:line="13" pos:column="52"/></name><argument_list pos:line="13" pos:column="52">(<argument><expr><name pos:line="13" pos:column="53">var<pos:position pos:line="13" pos:column="56"/></name></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="58"/></return></block></then>
		<elseif pos:line="14" pos:column="17">else <if pos:line="14" pos:column="22">if <condition pos:line="14" pos:column="25">(<expr><operator pos:line="14" pos:column="26">!<pos:position pos:line="14" pos:column="27"/></operator><call><name pos:line="14" pos:column="27">strcmp<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">value<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="41">"never"<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="50"/></condition><then pos:line="14" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="25">autorebase<pos:position pos:line="15" pos:column="35"/></name> <operator pos:line="15" pos:column="36">=<pos:position pos:line="15" pos:column="37"/></operator> <name pos:line="15" pos:column="38">AUTOREBASE_NEVER<pos:position pos:line="15" pos:column="54"/></name></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="16" pos:column="17">else <if pos:line="16" pos:column="22">if <condition pos:line="16" pos:column="25">(<expr><operator pos:line="16" pos:column="26">!<pos:position pos:line="16" pos:column="27"/></operator><call><name pos:line="16" pos:column="27">strcmp<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><name pos:line="16" pos:column="34">value<pos:position pos:line="16" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="41">"local"<pos:position pos:line="16" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="50"/></condition><then pos:line="16" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="25">autorebase<pos:position pos:line="17" pos:column="35"/></name> <operator pos:line="17" pos:column="36">=<pos:position pos:line="17" pos:column="37"/></operator> <name pos:line="17" pos:column="38">AUTOREBASE_LOCAL<pos:position pos:line="17" pos:column="54"/></name></expr>;<pos:position pos:line="17" pos:column="55"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="18" pos:column="17">else <if pos:line="18" pos:column="22">if <condition pos:line="18" pos:column="25">(<expr><operator pos:line="18" pos:column="26">!<pos:position pos:line="18" pos:column="27"/></operator><call><name pos:line="18" pos:column="27">strcmp<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">value<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="41">"remote"<pos:position pos:line="18" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="51"/></condition><then pos:line="18" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="25">autorebase<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">=<pos:position pos:line="19" pos:column="37"/></operator> <name pos:line="19" pos:column="38">AUTOREBASE_REMOTE<pos:position pos:line="19" pos:column="55"/></name></expr>;<pos:position pos:line="19" pos:column="56"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="20" pos:column="17">else <if pos:line="20" pos:column="22">if <condition pos:line="20" pos:column="25">(<expr><operator pos:line="20" pos:column="26">!<pos:position pos:line="20" pos:column="27"/></operator><call><name pos:line="20" pos:column="27">strcmp<pos:position pos:line="20" pos:column="33"/></name><argument_list pos:line="20" pos:column="33">(<argument><expr><name pos:line="20" pos:column="34">value<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="41">"always"<pos:position pos:line="20" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="51"/></condition><then pos:line="20" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="25">autorebase<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">=<pos:position pos:line="21" pos:column="37"/></operator> <name pos:line="21" pos:column="38">AUTOREBASE_ALWAYS<pos:position pos:line="21" pos:column="55"/></name></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt></block></then></if></elseif>
		<else pos:line="22" pos:column="17">else
			<block type="pseudo"><return pos:line="23" pos:column="25">return <expr><call><name pos:line="23" pos:column="32">error<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><literal type="string" pos:line="23" pos:column="38">"Malformed value for %s"<pos:position pos:line="23" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="64">var<pos:position pos:line="23" pos:column="67"/></name></expr></argument>)<pos:position pos:line="23" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="69"/></return></block></else></if>
		<return pos:line="24" pos:column="17">return <expr><literal type="number" pos:line="24" pos:column="24">0<pos:position pos:line="24" pos:column="25"/></literal></expr>;<pos:position pos:line="24" pos:column="26"/></return>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="27" pos:column="9">/* Add other config variables here and to Documentation/config.txt. */</comment>
	<return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">0<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
