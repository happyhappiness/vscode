<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3809_git-2.7.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">setup_alternate_shallow<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">lock_file<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">shallow_lock<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier><modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">alternate_shallow_file<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="3" pos:column="30">const<pos:position pos:line="3" pos:column="35"/></specifier> <name><name pos:line="3" pos:column="36">struct<pos:position pos:line="3" pos:column="42"/></name> <name pos:line="3" pos:column="43">sha1_array<pos:position pos:line="3" pos:column="53"/></name></name> <modifier pos:line="3" pos:column="54">*<pos:position pos:line="3" pos:column="55"/></modifier></type><name pos:line="3" pos:column="55">extra<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="61"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">sb<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">STRBUF_INIT<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">fd<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">fd<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">hold_lock_file_for_update<pos:position pos:line="8" pos:column="39"/></name><argument_list pos:line="8" pos:column="39">(<argument><expr><name pos:line="8" pos:column="40">shallow_lock<pos:position pos:line="8" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="54">git_path_shallow<pos:position pos:line="8" pos:column="70"/></name><argument_list pos:line="8" pos:column="70">()<pos:position pos:line="8" pos:column="72"/></argument_list></call></expr></argument>,
				       <argument><expr><name pos:line="9" pos:column="40">LOCK_DIE_ON_ERROR<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">check_shallow_file_for_update<pos:position pos:line="10" pos:column="38"/></name><argument_list pos:line="10" pos:column="38">()<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">write_shallow_commits<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><operator pos:line="11" pos:column="35">&amp;<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="36">sb<pos:position pos:line="11" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="40">0<pos:position pos:line="11" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="43">extra<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="50"/></condition><then pos:line="11" pos:column="50"> <block pos:line="11" pos:column="51">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">write_in_full<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">fd<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="39">sb<pos:position pos:line="12" pos:column="41"/></name><operator pos:line="12" pos:column="41">.<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="42">buf<pos:position pos:line="12" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="47">sb<pos:position pos:line="12" pos:column="49"/></name><operator pos:line="12" pos:column="49">.<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="50">len<pos:position pos:line="12" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call> <operator pos:line="12" pos:column="55">!=<pos:position pos:line="12" pos:column="57"/></operator> <name><name pos:line="12" pos:column="58">sb<pos:position pos:line="12" pos:column="60"/></name><operator pos:line="12" pos:column="60">.<pos:position pos:line="12" pos:column="61"/></operator><name pos:line="12" pos:column="61">len<pos:position pos:line="12" pos:column="64"/></name></name></expr>)<pos:position pos:line="12" pos:column="65"/></condition><then pos:line="12" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">die_errno<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><literal type="string" pos:line="13" pos:column="35">"failed to write to %s"<pos:position pos:line="13" pos:column="58"/></literal></expr></argument>,
				  <argument><expr><call><name pos:line="14" pos:column="35">get_lock_file_path<pos:position pos:line="14" pos:column="53"/></name><argument_list pos:line="14" pos:column="53">(<argument><expr><name pos:line="14" pos:column="54">shallow_lock<pos:position pos:line="14" pos:column="66"/></name></expr></argument>)<pos:position pos:line="14" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="69"/></expr_stmt></block></then></if>
		<expr_stmt><expr><operator pos:line="15" pos:column="17">*<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">alternate_shallow_file<pos:position pos:line="15" pos:column="40"/></name> <operator pos:line="15" pos:column="41">=<pos:position pos:line="15" pos:column="42"/></operator> <call><name pos:line="15" pos:column="43">get_lock_file_path<pos:position pos:line="15" pos:column="61"/></name><argument_list pos:line="15" pos:column="61">(<argument><expr><name pos:line="15" pos:column="62">shallow_lock<pos:position pos:line="15" pos:column="74"/></name></expr></argument>)<pos:position pos:line="15" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="76"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then> <else pos:line="16" pos:column="11">else
		<comment type="block" pos:line="17" pos:column="17">/*
		 * is_repository_shallow() sees empty string as "no
		 * shallow file".
		 */</comment>
		<block type="pseudo"><expr_stmt><expr><operator pos:line="21" pos:column="17">*<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">alternate_shallow_file<pos:position pos:line="21" pos:column="40"/></name> <operator pos:line="21" pos:column="41">=<pos:position pos:line="21" pos:column="42"/></operator> <literal type="string" pos:line="21" pos:column="43">""<pos:position pos:line="21" pos:column="45"/></literal></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">strbuf_release<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><operator pos:line="22" pos:column="24">&amp;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="25">sb<pos:position pos:line="22" pos:column="27"/></name></expr></argument>)<pos:position pos:line="22" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
