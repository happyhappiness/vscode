<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6739_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name> <name pos:line="1" pos:column="12">WSAAPI<pos:position pos:line="1" pos:column="18"/></name></type> <name pos:line="1" pos:column="19">getaddrinfo_stub<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">node<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">service<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
				   <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name><name pos:line="2" pos:column="42">struct<pos:position pos:line="2" pos:column="48"/></name> <name pos:line="2" pos:column="49">addrinfo<pos:position pos:line="2" pos:column="57"/></name></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">hints<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
				   <parameter><decl><type><name><name pos:line="3" pos:column="36">struct<pos:position pos:line="3" pos:column="42"/></name> <name pos:line="3" pos:column="43">addrinfo<pos:position pos:line="3" pos:column="51"/></name></name> <modifier pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></modifier><modifier pos:line="3" pos:column="53">*<pos:position pos:line="3" pos:column="54"/></modifier></type><name pos:line="3" pos:column="54">res<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="58"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">hostent<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">h<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">NULL<pos:position pos:line="5" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">addrinfo<pos:position pos:line="6" pos:column="24"/></name></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">ai<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">sockaddr_in<pos:position pos:line="7" pos:column="27"/></name></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">sin<pos:position pos:line="7" pos:column="32"/></name></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">node<pos:position pos:line="9" pos:column="17"/></name></expr>)<pos:position pos:line="9" pos:column="18"/></condition><then pos:line="9" pos:column="18"> <block pos:line="9" pos:column="19">{
		<expr_stmt><expr><name pos:line="10" pos:column="17">h<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">gethostbyname<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><name pos:line="10" pos:column="35">node<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">h<pos:position pos:line="11" pos:column="23"/></name></expr>)<pos:position pos:line="11" pos:column="24"/></condition><then pos:line="11" pos:column="24">
			<block type="pseudo"><return pos:line="12" pos:column="25">return <expr><call><name pos:line="12" pos:column="32">WSAGetLastError<pos:position pos:line="12" pos:column="47"/></name><argument_list pos:line="12" pos:column="47">()<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="50"/></return></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="15" pos:column="9">ai<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <call><name pos:line="15" pos:column="14">xmalloc<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><sizeof pos:line="15" pos:column="22">sizeof<argument_list pos:line="15" pos:column="28">(<argument><expr pos:line="15" pos:column="29">struct <name pos:line="15" pos:column="36">addrinfo<pos:position pos:line="15" pos:column="44"/></name></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="16" pos:column="9">*<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">res<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <name pos:line="16" pos:column="16">ai<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">ai<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">ai_flags<pos:position pos:line="17" pos:column="21"/></name></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">ai<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">-&gt;<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="13">ai_family<pos:position pos:line="18" pos:column="22"/></name></name> <operator pos:line="18" pos:column="23">=<pos:position pos:line="18" pos:column="24"/></operator> <name pos:line="18" pos:column="25">AF_INET<pos:position pos:line="18" pos:column="32"/></name></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">ai<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">-&gt;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="13">ai_socktype<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <ternary><condition><expr><name pos:line="19" pos:column="27">hints<pos:position pos:line="19" pos:column="32"/></name></expr> ?<pos:position pos:line="19" pos:column="34"/></condition><then pos:line="19" pos:column="34"> <expr><name><name pos:line="19" pos:column="35">hints<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">-&gt;<pos:position pos:line="19" pos:column="45"/></operator><name pos:line="19" pos:column="42">ai_socktype<pos:position pos:line="19" pos:column="53"/></name></name></expr> <pos:position pos:line="19" pos:column="54"/></then><else pos:line="19" pos:column="54">: <expr><literal type="number" pos:line="19" pos:column="56">0<pos:position pos:line="19" pos:column="57"/></literal></expr></else></ternary></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt>
	<switch pos:line="20" pos:column="9">switch <condition pos:line="20" pos:column="16">(<expr><name><name pos:line="20" pos:column="17">ai<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">-&gt;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="21">ai_socktype<pos:position pos:line="20" pos:column="32"/></name></name></expr>)<pos:position pos:line="20" pos:column="33"/></condition> <block pos:line="20" pos:column="34">{
	<case pos:line="21" pos:column="9">case <expr><name pos:line="21" pos:column="14">SOCK_STREAM<pos:position pos:line="21" pos:column="25"/></name></expr>:<pos:position pos:line="21" pos:column="26"/></case>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">ai<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">-&gt;<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="21">ai_protocol<pos:position pos:line="22" pos:column="32"/></name></name> <operator pos:line="22" pos:column="33">=<pos:position pos:line="22" pos:column="34"/></operator> <name pos:line="22" pos:column="35">IPPROTO_TCP<pos:position pos:line="22" pos:column="46"/></name></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt>
		<break pos:line="23" pos:column="17">break;<pos:position pos:line="23" pos:column="23"/></break>
	<case pos:line="24" pos:column="9">case <expr><name pos:line="24" pos:column="14">SOCK_DGRAM<pos:position pos:line="24" pos:column="24"/></name></expr>:<pos:position pos:line="24" pos:column="25"/></case>
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">ai<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">-&gt;<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="21">ai_protocol<pos:position pos:line="25" pos:column="32"/></name></name> <operator pos:line="25" pos:column="33">=<pos:position pos:line="25" pos:column="34"/></operator> <name pos:line="25" pos:column="35">IPPROTO_UDP<pos:position pos:line="25" pos:column="46"/></name></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>
		<break pos:line="26" pos:column="17">break;<pos:position pos:line="26" pos:column="23"/></break>
	<default pos:line="27" pos:column="9">default:<pos:position pos:line="27" pos:column="17"/></default>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">ai<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">-&gt;<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="21">ai_protocol<pos:position pos:line="28" pos:column="32"/></name></name> <operator pos:line="28" pos:column="33">=<pos:position pos:line="28" pos:column="34"/></operator> <literal type="number" pos:line="28" pos:column="35">0<pos:position pos:line="28" pos:column="36"/></literal></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>
		<break pos:line="29" pos:column="17">break;<pos:position pos:line="29" pos:column="23"/></break>
	}<pos:position pos:line="30" pos:column="10"/></block></switch>
	<expr_stmt><expr><name><name pos:line="31" pos:column="9">ai<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">-&gt;<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="13">ai_addrlen<pos:position pos:line="31" pos:column="23"/></name></name> <operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator> <sizeof pos:line="31" pos:column="26">sizeof<argument_list pos:line="31" pos:column="32">(<argument><expr pos:line="31" pos:column="33">struct <name pos:line="31" pos:column="40">sockaddr_in<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></sizeof></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">hints<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">&amp;&amp;<pos:position pos:line="32" pos:column="29"/></operator> <operator pos:line="32" pos:column="22">(<pos:position pos:line="32" pos:column="23"/></operator><name><name pos:line="32" pos:column="23">hints<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">-&gt;<pos:position pos:line="32" pos:column="33"/></operator><name pos:line="32" pos:column="30">ai_flags<pos:position pos:line="32" pos:column="38"/></name></name> <operator pos:line="32" pos:column="39">&amp;<pos:position pos:line="32" pos:column="44"/></operator> <name pos:line="32" pos:column="41">AI_CANONNAME<pos:position pos:line="32" pos:column="53"/></name><operator pos:line="32" pos:column="53">)<pos:position pos:line="32" pos:column="54"/></operator></expr>)<pos:position pos:line="32" pos:column="55"/></condition><then pos:line="32" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="17">ai<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">-&gt;<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="21">ai_canonname<pos:position pos:line="33" pos:column="33"/></name></name> <operator pos:line="33" pos:column="34">=<pos:position pos:line="33" pos:column="35"/></operator> <ternary><condition><expr><name pos:line="33" pos:column="36">h<pos:position pos:line="33" pos:column="37"/></name></expr> ?<pos:position pos:line="33" pos:column="39"/></condition><then pos:line="33" pos:column="39"> <expr><call><name pos:line="33" pos:column="40">xstrdup<pos:position pos:line="33" pos:column="47"/></name><argument_list pos:line="33" pos:column="47">(<argument><expr><name><name pos:line="33" pos:column="48">h<pos:position pos:line="33" pos:column="49"/></name><operator pos:line="33" pos:column="49">-&gt;<pos:position pos:line="33" pos:column="54"/></operator><name pos:line="33" pos:column="51">h_name<pos:position pos:line="33" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="58"/></argument_list></call></expr> <pos:position pos:line="33" pos:column="59"/></then><else pos:line="33" pos:column="59">: <expr><name pos:line="33" pos:column="61">NULL<pos:position pos:line="33" pos:column="65"/></name></expr></else></ternary></expr>;<pos:position pos:line="33" pos:column="66"/></expr_stmt></block></then>
	<else pos:line="34" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="17">ai<pos:position pos:line="35" pos:column="19"/></name><operator pos:line="35" pos:column="19">-&gt;<pos:position pos:line="35" pos:column="24"/></operator><name pos:line="35" pos:column="21">ai_canonname<pos:position pos:line="35" pos:column="33"/></name></name> <operator pos:line="35" pos:column="34">=<pos:position pos:line="35" pos:column="35"/></operator> <name pos:line="35" pos:column="36">NULL<pos:position pos:line="35" pos:column="40"/></name></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="37" pos:column="9">sin<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <call><name pos:line="37" pos:column="15">xcalloc<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><literal type="number" pos:line="37" pos:column="23">1<pos:position pos:line="37" pos:column="24"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="26">ai<pos:position pos:line="37" pos:column="28"/></name><operator pos:line="37" pos:column="28">-&gt;<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="30">ai_addrlen<pos:position pos:line="37" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="38" pos:column="9">sin<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">-&gt;<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="14">sin_family<pos:position pos:line="38" pos:column="24"/></name></name> <operator pos:line="38" pos:column="25">=<pos:position pos:line="38" pos:column="26"/></operator> <name pos:line="38" pos:column="27">AF_INET<pos:position pos:line="38" pos:column="34"/></name></expr>;<pos:position pos:line="38" pos:column="35"/></expr_stmt>
	<comment type="block" pos:line="39" pos:column="9">/* Note: getaddrinfo is supposed to allow service to be a string,
	 * which should be looked up using getservbyname. This is
	 * currently not implemented */</comment>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">service<pos:position pos:line="42" pos:column="20"/></name></expr>)<pos:position pos:line="42" pos:column="21"/></condition><then pos:line="42" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="43" pos:column="17">sin<pos:position pos:line="43" pos:column="20"/></name><operator pos:line="43" pos:column="20">-&gt;<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="22">sin_port<pos:position pos:line="43" pos:column="30"/></name></name> <operator pos:line="43" pos:column="31">=<pos:position pos:line="43" pos:column="32"/></operator> <call><name pos:line="43" pos:column="33">htons<pos:position pos:line="43" pos:column="38"/></name><argument_list pos:line="43" pos:column="38">(<argument><expr><call><name pos:line="43" pos:column="39">atoi<pos:position pos:line="43" pos:column="43"/></name><argument_list pos:line="43" pos:column="43">(<argument><expr><name pos:line="43" pos:column="44">service<pos:position pos:line="43" pos:column="51"/></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="54"/></expr_stmt></block></then></if>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">h<pos:position pos:line="44" pos:column="14"/></name></expr>)<pos:position pos:line="44" pos:column="15"/></condition><then pos:line="44" pos:column="15">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="45" pos:column="17">sin<pos:position pos:line="45" pos:column="20"/></name><operator pos:line="45" pos:column="20">-&gt;<pos:position pos:line="45" pos:column="25"/></operator><name pos:line="45" pos:column="22">sin_addr<pos:position pos:line="45" pos:column="30"/></name></name> <operator pos:line="45" pos:column="31">=<pos:position pos:line="45" pos:column="32"/></operator> <operator pos:line="45" pos:column="33">*<pos:position pos:line="45" pos:column="34"/></operator><operator pos:line="45" pos:column="34">(<pos:position pos:line="45" pos:column="35"/></operator>struct <name pos:line="45" pos:column="42">in_addr<pos:position pos:line="45" pos:column="49"/></name> <operator pos:line="45" pos:column="50">*<pos:position pos:line="45" pos:column="51"/></operator><operator pos:line="45" pos:column="51">)<pos:position pos:line="45" pos:column="52"/></operator><name><name pos:line="45" pos:column="52">h<pos:position pos:line="45" pos:column="53"/></name><operator pos:line="45" pos:column="53">-&gt;<pos:position pos:line="45" pos:column="58"/></operator><name pos:line="45" pos:column="55">h_addr<pos:position pos:line="45" pos:column="61"/></name></name></expr>;<pos:position pos:line="45" pos:column="62"/></expr_stmt></block></then>
	<elseif pos:line="46" pos:column="9">else <if pos:line="46" pos:column="14">if <condition pos:line="46" pos:column="17">(<expr><name pos:line="46" pos:column="18">hints<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">&amp;&amp;<pos:position pos:line="46" pos:column="34"/></operator> <operator pos:line="46" pos:column="27">(<pos:position pos:line="46" pos:column="28"/></operator><name><name pos:line="46" pos:column="28">hints<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">-&gt;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="35">ai_flags<pos:position pos:line="46" pos:column="43"/></name></name> <operator pos:line="46" pos:column="44">&amp;<pos:position pos:line="46" pos:column="49"/></operator> <name pos:line="46" pos:column="46">AI_PASSIVE<pos:position pos:line="46" pos:column="56"/></name><operator pos:line="46" pos:column="56">)<pos:position pos:line="46" pos:column="57"/></operator></expr>)<pos:position pos:line="46" pos:column="58"/></condition><then pos:line="46" pos:column="58">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="17">sin<pos:position pos:line="47" pos:column="20"/></name><operator pos:line="47" pos:column="20">-&gt;<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="22">sin_addr<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">.<pos:position pos:line="47" pos:column="31"/></operator><name pos:line="47" pos:column="31">s_addr<pos:position pos:line="47" pos:column="37"/></name></name> <operator pos:line="47" pos:column="38">=<pos:position pos:line="47" pos:column="39"/></operator> <name pos:line="47" pos:column="40">INADDR_ANY<pos:position pos:line="47" pos:column="50"/></name></expr>;<pos:position pos:line="47" pos:column="51"/></expr_stmt></block></then></if></elseif>
	<else pos:line="48" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="49" pos:column="17">sin<pos:position pos:line="49" pos:column="20"/></name><operator pos:line="49" pos:column="20">-&gt;<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="22">sin_addr<pos:position pos:line="49" pos:column="30"/></name><operator pos:line="49" pos:column="30">.<pos:position pos:line="49" pos:column="31"/></operator><name pos:line="49" pos:column="31">s_addr<pos:position pos:line="49" pos:column="37"/></name></name> <operator pos:line="49" pos:column="38">=<pos:position pos:line="49" pos:column="39"/></operator> <name pos:line="49" pos:column="40">INADDR_LOOPBACK<pos:position pos:line="49" pos:column="55"/></name></expr>;<pos:position pos:line="49" pos:column="56"/></expr_stmt></block></else></if>
	<expr_stmt><expr><name><name pos:line="50" pos:column="9">ai<pos:position pos:line="50" pos:column="11"/></name><operator pos:line="50" pos:column="11">-&gt;<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="13">ai_addr<pos:position pos:line="50" pos:column="20"/></name></name> <operator pos:line="50" pos:column="21">=<pos:position pos:line="50" pos:column="22"/></operator> <operator pos:line="50" pos:column="23">(<pos:position pos:line="50" pos:column="24"/></operator>struct <name pos:line="50" pos:column="31">sockaddr<pos:position pos:line="50" pos:column="39"/></name> <operator pos:line="50" pos:column="40">*<pos:position pos:line="50" pos:column="41"/></operator><operator pos:line="50" pos:column="41">)<pos:position pos:line="50" pos:column="42"/></operator><name pos:line="50" pos:column="42">sin<pos:position pos:line="50" pos:column="45"/></name></expr>;<pos:position pos:line="50" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="51" pos:column="9">ai<pos:position pos:line="51" pos:column="11"/></name><operator pos:line="51" pos:column="11">-&gt;<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="13">ai_next<pos:position pos:line="51" pos:column="20"/></name></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <name pos:line="51" pos:column="23">NULL<pos:position pos:line="51" pos:column="27"/></name></expr>;<pos:position pos:line="51" pos:column="28"/></expr_stmt>
	<return pos:line="52" pos:column="9">return <expr><literal type="number" pos:line="52" pos:column="16">0<pos:position pos:line="52" pos:column="17"/></literal></expr>;<pos:position pos:line="52" pos:column="18"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
