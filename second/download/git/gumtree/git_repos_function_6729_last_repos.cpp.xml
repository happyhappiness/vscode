<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6729_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">pid_t<pos:position pos:line="1" pos:column="6"/></name></type> <name pos:line="1" pos:column="7">mingw_spawnvpe<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">cmd<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier><modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">argv<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier><modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">deltaenv<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
		     <parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">dir<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="3" pos:column="22">int<pos:position pos:line="3" pos:column="25"/></name></type> <name pos:line="3" pos:column="26">fhin<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="32">int<pos:position pos:line="3" pos:column="35"/></name></type> <name pos:line="3" pos:column="36">fhout<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="43">int<pos:position pos:line="3" pos:column="46"/></name></type> <name pos:line="3" pos:column="47">fherr<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="53"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">pid_t<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">pid<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">prog<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><call><name pos:line="6" pos:column="22">path_lookup<pos:position pos:line="6" pos:column="33"/></name><argument_list pos:line="6" pos:column="33">(<argument><expr><name pos:line="6" pos:column="34">cmd<pos:position pos:line="6" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="39">0<pos:position pos:line="6" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">prog<pos:position pos:line="8" pos:column="18"/></name></expr>)<pos:position pos:line="8" pos:column="19"/></condition><then pos:line="8" pos:column="19"> <block pos:line="8" pos:column="20">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">errno<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">=<pos:position pos:line="9" pos:column="24"/></operator> <name pos:line="9" pos:column="25">ENOENT<pos:position pos:line="9" pos:column="31"/></name></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">pid<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">=<pos:position pos:line="10" pos:column="22"/></operator> <operator pos:line="10" pos:column="23">-<pos:position pos:line="10" pos:column="24"/></operator><literal type="number" pos:line="10" pos:column="24">1<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then>
	<else pos:line="12" pos:column="9">else <block pos:line="12" pos:column="14">{
		<decl_stmt><decl><type><specifier pos:line="13" pos:column="17">const<pos:position pos:line="13" pos:column="22"/></specifier> <name pos:line="13" pos:column="23">char<pos:position pos:line="13" pos:column="27"/></name> <modifier pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></modifier></type><name pos:line="13" pos:column="29">interpr<pos:position pos:line="13" pos:column="36"/></name> <init pos:line="13" pos:column="37">= <expr><call><name pos:line="13" pos:column="39">parse_interpreter<pos:position pos:line="13" pos:column="56"/></name><argument_list pos:line="13" pos:column="56">(<argument><expr><name pos:line="13" pos:column="57">prog<pos:position pos:line="13" pos:column="61"/></name></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="63"/></decl_stmt>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">interpr<pos:position pos:line="15" pos:column="28"/></name></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29"> <block pos:line="15" pos:column="30">{
			<decl_stmt><decl><type><specifier pos:line="16" pos:column="25">const<pos:position pos:line="16" pos:column="30"/></specifier> <name pos:line="16" pos:column="31">char<pos:position pos:line="16" pos:column="35"/></name> <modifier pos:line="16" pos:column="36">*<pos:position pos:line="16" pos:column="37"/></modifier></type><name pos:line="16" pos:column="37">argv0<pos:position pos:line="16" pos:column="42"/></name> <init pos:line="16" pos:column="43">= <expr><name><name pos:line="16" pos:column="45">argv<pos:position pos:line="16" pos:column="49"/></name><index pos:line="16" pos:column="49">[<expr><literal type="number" pos:line="16" pos:column="50">0<pos:position pos:line="16" pos:column="51"/></literal></expr>]<pos:position pos:line="16" pos:column="52"/></index></name></expr></init></decl>;<pos:position pos:line="16" pos:column="53"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="17" pos:column="25">char<pos:position pos:line="17" pos:column="29"/></name> <modifier pos:line="17" pos:column="30">*<pos:position pos:line="17" pos:column="31"/></modifier></type><name pos:line="17" pos:column="31">iprog<pos:position pos:line="17" pos:column="36"/></name> <init pos:line="17" pos:column="37">= <expr><call><name pos:line="17" pos:column="39">path_lookup<pos:position pos:line="17" pos:column="50"/></name><argument_list pos:line="17" pos:column="50">(<argument><expr><name pos:line="17" pos:column="51">interpr<pos:position pos:line="17" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="60">1<pos:position pos:line="17" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="63"/></decl_stmt>
			<expr_stmt><expr><name><name pos:line="18" pos:column="25">argv<pos:position pos:line="18" pos:column="29"/></name><index pos:line="18" pos:column="29">[<expr><literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr>]<pos:position pos:line="18" pos:column="32"/></index></name> <operator pos:line="18" pos:column="33">=<pos:position pos:line="18" pos:column="34"/></operator> <name pos:line="18" pos:column="35">prog<pos:position pos:line="18" pos:column="39"/></name></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><operator pos:line="19" pos:column="29">!<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">iprog<pos:position pos:line="19" pos:column="35"/></name></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36"> <block pos:line="19" pos:column="37">{
				<expr_stmt><expr><name pos:line="20" pos:column="33">errno<pos:position pos:line="20" pos:column="38"/></name> <operator pos:line="20" pos:column="39">=<pos:position pos:line="20" pos:column="40"/></operator> <name pos:line="20" pos:column="41">ENOENT<pos:position pos:line="20" pos:column="47"/></name></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><name pos:line="21" pos:column="33">pid<pos:position pos:line="21" pos:column="36"/></name> <operator pos:line="21" pos:column="37">=<pos:position pos:line="21" pos:column="38"/></operator> <operator pos:line="21" pos:column="39">-<pos:position pos:line="21" pos:column="40"/></operator><literal type="number" pos:line="21" pos:column="40">1<pos:position pos:line="21" pos:column="41"/></literal></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
			}<pos:position pos:line="22" pos:column="26"/></block></then>
			<else pos:line="23" pos:column="25">else <block pos:line="23" pos:column="30">{
				<expr_stmt><expr><name pos:line="24" pos:column="33">pid<pos:position pos:line="24" pos:column="36"/></name> <operator pos:line="24" pos:column="37">=<pos:position pos:line="24" pos:column="38"/></operator> <call><name pos:line="24" pos:column="39">mingw_spawnve_fd<pos:position pos:line="24" pos:column="55"/></name><argument_list pos:line="24" pos:column="55">(<argument><expr><name pos:line="24" pos:column="56">iprog<pos:position pos:line="24" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="63">argv<pos:position pos:line="24" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="69">deltaenv<pos:position pos:line="24" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="79">dir<pos:position pos:line="24" pos:column="82"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="84">1<pos:position pos:line="24" pos:column="85"/></literal></expr></argument>,
						       <argument><expr><name pos:line="25" pos:column="56">fhin<pos:position pos:line="25" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="62">fhout<pos:position pos:line="25" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="69">fherr<pos:position pos:line="25" pos:column="74"/></name></expr></argument>)<pos:position pos:line="25" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="76"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="26" pos:column="33">free<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><name pos:line="26" pos:column="38">iprog<pos:position pos:line="26" pos:column="43"/></name></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="45"/></expr_stmt>
			}<pos:position pos:line="27" pos:column="26"/></block></else></if>
			<expr_stmt><expr><name><name pos:line="28" pos:column="25">argv<pos:position pos:line="28" pos:column="29"/></name><index pos:line="28" pos:column="29">[<expr><literal type="number" pos:line="28" pos:column="30">0<pos:position pos:line="28" pos:column="31"/></literal></expr>]<pos:position pos:line="28" pos:column="32"/></index></name> <operator pos:line="28" pos:column="33">=<pos:position pos:line="28" pos:column="34"/></operator> <name pos:line="28" pos:column="35">argv0<pos:position pos:line="28" pos:column="40"/></name></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="29" pos:column="18"/></block></then>
		<else pos:line="30" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="25">pid<pos:position pos:line="31" pos:column="28"/></name> <operator pos:line="31" pos:column="29">=<pos:position pos:line="31" pos:column="30"/></operator> <call><name pos:line="31" pos:column="31">mingw_spawnve_fd<pos:position pos:line="31" pos:column="47"/></name><argument_list pos:line="31" pos:column="47">(<argument><expr><name pos:line="31" pos:column="48">prog<pos:position pos:line="31" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="54">argv<pos:position pos:line="31" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="60">deltaenv<pos:position pos:line="31" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="70">dir<pos:position pos:line="31" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="75">0<pos:position pos:line="31" pos:column="76"/></literal></expr></argument>,
					       <argument><expr><name pos:line="32" pos:column="48">fhin<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="54">fhout<pos:position pos:line="32" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="61">fherr<pos:position pos:line="32" pos:column="66"/></name></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="68"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">free<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">prog<pos:position pos:line="33" pos:column="26"/></name></expr></argument>)<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></else></if>
	<return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">pid<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
