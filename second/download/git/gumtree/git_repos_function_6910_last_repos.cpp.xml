<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6910_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">destroy_mspace<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">mspace<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">msp<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list> <block pos:line="1" pos:column="35">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">size_t<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">freed<pos:position pos:line="2" pos:column="15"/></name> <init pos:line="2" pos:column="16">= <expr><literal type="number" pos:line="2" pos:column="18">0<pos:position pos:line="2" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">mstate<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">ms<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><operator pos:line="3" pos:column="15">(<pos:position pos:line="3" pos:column="16"/></operator><name pos:line="3" pos:column="16">mstate<pos:position pos:line="3" pos:column="22"/></name><operator pos:line="3" pos:column="22">)<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="23">msp<pos:position pos:line="3" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><call><name pos:line="4" pos:column="7">ok_magic<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">ms<pos:position pos:line="4" pos:column="18"/></name></expr></argument>)<pos:position pos:line="4" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20"> <block pos:line="4" pos:column="21">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">msegmentptr<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">sp<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><operator pos:line="5" pos:column="22">&amp;<pos:position pos:line="5" pos:column="27"/></operator><name><name pos:line="5" pos:column="23">ms<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">-&gt;<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="27">seg<pos:position pos:line="5" pos:column="30"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><name pos:line="6" pos:column="12">sp<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">!=<pos:position pos:line="6" pos:column="17"/></operator> <literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr>)<pos:position pos:line="6" pos:column="20"/></condition> <block pos:line="6" pos:column="21">{
      <decl_stmt><decl><type><name pos:line="7" pos:column="7">char<pos:position pos:line="7" pos:column="11"/></name><modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier></type> <name pos:line="7" pos:column="13">base<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><name><name pos:line="7" pos:column="20">sp<pos:position pos:line="7" pos:column="22"/></name><operator pos:line="7" pos:column="22">-&gt;<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="24">base<pos:position pos:line="7" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="8" pos:column="7">size_t<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">size<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><name><name pos:line="8" pos:column="21">sp<pos:position pos:line="8" pos:column="23"/></name><operator pos:line="8" pos:column="23">-&gt;<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="25">size<pos:position pos:line="8" pos:column="29"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="9" pos:column="7">flag_t<pos:position pos:line="9" pos:column="13"/></name></type> <name pos:line="9" pos:column="14">flag<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><name><name pos:line="9" pos:column="21">sp<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">-&gt;<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="25">sflags<pos:position pos:line="9" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>
      <expr_stmt><expr><name pos:line="10" pos:column="7">sp<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <name><name pos:line="10" pos:column="12">sp<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">-&gt;<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="16">next<pos:position pos:line="10" pos:column="20"/></name></name></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>
      <if pos:line="11" pos:column="7">if <condition pos:line="11" pos:column="10">(<expr><operator pos:line="11" pos:column="11">(<pos:position pos:line="11" pos:column="12"/></operator><name pos:line="11" pos:column="12">flag<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">&amp;<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="19">IS_MMAPPED_BIT<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">)<pos:position pos:line="11" pos:column="34"/></operator> <operator pos:line="11" pos:column="35">&amp;&amp;<pos:position pos:line="11" pos:column="45"/></operator> <operator pos:line="11" pos:column="38">!<pos:position pos:line="11" pos:column="39"/></operator><operator pos:line="11" pos:column="39">(<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="40">flag<pos:position pos:line="11" pos:column="44"/></name> <operator pos:line="11" pos:column="45">&amp;<pos:position pos:line="11" pos:column="50"/></operator> <name pos:line="11" pos:column="47">EXTERN_BIT<pos:position pos:line="11" pos:column="57"/></name><operator pos:line="11" pos:column="57">)<pos:position pos:line="11" pos:column="58"/></operator> <operator pos:line="11" pos:column="59">&amp;&amp;<pos:position pos:line="11" pos:column="69"/></operator>
	  <call><name pos:line="12" pos:column="11">CALL_MUNMAP<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">base<pos:position pos:line="12" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="29">size<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call> <operator pos:line="12" pos:column="35">==<pos:position pos:line="12" pos:column="37"/></operator> <literal type="number" pos:line="12" pos:column="38">0<pos:position pos:line="12" pos:column="39"/></literal></expr>)<pos:position pos:line="12" pos:column="40"/></condition><then pos:line="12" pos:column="40">
	<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="9">freed<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">+=<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">size<pos:position pos:line="13" pos:column="22"/></name></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt></block></then></if>
    }<pos:position pos:line="14" pos:column="6"/></block></while>
  }<pos:position pos:line="15" pos:column="4"/></block></then>
  <else pos:line="16" pos:column="3">else <block pos:line="16" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">USAGE_ERROR_ACTION<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">ms<pos:position pos:line="17" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="17" pos:column="27">ms<pos:position pos:line="17" pos:column="29"/></name></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></else></if>
  <return pos:line="19" pos:column="3">return <expr><name pos:line="19" pos:column="10">freed<pos:position pos:line="19" pos:column="15"/></name></expr>;<pos:position pos:line="19" pos:column="16"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
