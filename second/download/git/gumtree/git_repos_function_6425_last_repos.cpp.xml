<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6425_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">files_pack_refs<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">ref_store<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">ref_store<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">unsigned<pos:position pos:line="1" pos:column="65"/></name> <name pos:line="1" pos:column="66">int<pos:position pos:line="1" pos:column="69"/></name></type> <name pos:line="1" pos:column="70">flags<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">files_ref_store<pos:position pos:line="3" pos:column="31"/></name></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">refs<pos:position pos:line="3" pos:column="37"/></name> <init pos:line="3" pos:column="38">=
		<expr><call><name pos:line="4" pos:column="17">files_downcast<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">(<argument><expr><name pos:line="4" pos:column="32">ref_store<pos:position pos:line="4" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="43">REF_STORE_WRITE<pos:position pos:line="4" pos:column="58"/></name> <operator pos:line="4" pos:column="59">|<pos:position pos:line="4" pos:column="60"/></operator> <name pos:line="4" pos:column="61">REF_STORE_ODB<pos:position pos:line="4" pos:column="74"/></name></expr></argument>,
			       <argument><expr><literal type="string" pos:line="5" pos:column="32">"pack_refs"<pos:position pos:line="5" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ref_iterator<pos:position pos:line="6" pos:column="28"/></name></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></type><name pos:line="6" pos:column="30">iter<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">ref_dir<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">packed_refs<pos:position pos:line="7" pos:column="36"/></name></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">ok<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">ref_to_prune<pos:position pos:line="9" pos:column="28"/></name></name> <modifier pos:line="9" pos:column="29">*<pos:position pos:line="9" pos:column="30"/></modifier></type><name pos:line="9" pos:column="30">refs_to_prune<pos:position pos:line="9" pos:column="43"/></name> <init pos:line="9" pos:column="44">= <expr><name pos:line="9" pos:column="46">NULL<pos:position pos:line="9" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="51"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">lock_packed_refs<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">refs<pos:position pos:line="11" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="32">LOCK_DIE_ON_ERROR<pos:position pos:line="11" pos:column="49"/></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">packed_refs<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <call><name pos:line="12" pos:column="23">get_packed_refs<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><name pos:line="12" pos:column="39">refs<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">iter<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <call><name pos:line="14" pos:column="16">cache_ref_iterator_begin<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><call><name pos:line="14" pos:column="41">get_loose_ref_cache<pos:position pos:line="14" pos:column="60"/></name><argument_list pos:line="14" pos:column="60">(<argument><expr><name pos:line="14" pos:column="61">refs<pos:position pos:line="14" pos:column="65"/></name></expr></argument>)<pos:position pos:line="14" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="14" pos:column="68">NULL<pos:position pos:line="14" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="74">0<pos:position pos:line="14" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="77"/></expr_stmt>
	<while pos:line="15" pos:column="9">while <condition pos:line="15" pos:column="15">(<expr><operator pos:line="15" pos:column="16">(<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">ok<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">=<pos:position pos:line="15" pos:column="21"/></operator> <call><name pos:line="15" pos:column="22">ref_iterator_advance<pos:position pos:line="15" pos:column="42"/></name><argument_list pos:line="15" pos:column="42">(<argument><expr><name pos:line="15" pos:column="43">iter<pos:position pos:line="15" pos:column="47"/></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call><operator pos:line="15" pos:column="48">)<pos:position pos:line="15" pos:column="49"/></operator> <operator pos:line="15" pos:column="50">==<pos:position pos:line="15" pos:column="52"/></operator> <name pos:line="15" pos:column="53">ITER_OK<pos:position pos:line="15" pos:column="60"/></name></expr>)<pos:position pos:line="15" pos:column="61"/></condition> <block pos:line="15" pos:column="62">{
		<comment type="block" pos:line="16" pos:column="17">/*
		 * If the loose reference can be packed, add an entry
		 * in the packed ref cache. If the reference should be
		 * pruned, also add it to refs_to_prune.
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="21" pos:column="17">struct<pos:position pos:line="21" pos:column="23"/></name> <name pos:line="21" pos:column="24">ref_entry<pos:position pos:line="21" pos:column="33"/></name></name> <modifier pos:line="21" pos:column="34">*<pos:position pos:line="21" pos:column="35"/></modifier></type><name pos:line="21" pos:column="35">packed_entry<pos:position pos:line="21" pos:column="47"/></name></decl>;<pos:position pos:line="21" pos:column="48"/></decl_stmt>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">!<pos:position pos:line="23" pos:column="22"/></operator><call><name pos:line="23" pos:column="22">should_pack_ref<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><name><name pos:line="23" pos:column="38">iter<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">-&gt;<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="44">refname<pos:position pos:line="23" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="53">iter<pos:position pos:line="23" pos:column="57"/></name><operator pos:line="23" pos:column="57">-&gt;<pos:position pos:line="23" pos:column="62"/></operator><name pos:line="23" pos:column="59">oid<pos:position pos:line="23" pos:column="62"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="64">iter<pos:position pos:line="23" pos:column="68"/></name><operator pos:line="23" pos:column="68">-&gt;<pos:position pos:line="23" pos:column="73"/></operator><name pos:line="23" pos:column="70">flags<pos:position pos:line="23" pos:column="75"/></name></name></expr></argument>,
				     <argument><expr><name pos:line="24" pos:column="38">flags<pos:position pos:line="24" pos:column="43"/></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="45"/></condition><then pos:line="24" pos:column="45">
			<block type="pseudo"><continue pos:line="25" pos:column="25">continue;<pos:position pos:line="25" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="27" pos:column="17">/*
		 * Create an entry in the packed-refs cache equivalent
		 * to the one from the loose ref cache, except that
		 * we don't copy the peeled status, because we want it
		 * to be re-peeled.
		 */</comment>
		<expr_stmt><expr><name pos:line="33" pos:column="17">packed_entry<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">=<pos:position pos:line="33" pos:column="31"/></operator> <call><name pos:line="33" pos:column="32">find_ref_entry<pos:position pos:line="33" pos:column="46"/></name><argument_list pos:line="33" pos:column="46">(<argument><expr><name pos:line="33" pos:column="47">packed_refs<pos:position pos:line="33" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="60">iter<pos:position pos:line="33" pos:column="64"/></name><operator pos:line="33" pos:column="64">-&gt;<pos:position pos:line="33" pos:column="69"/></operator><name pos:line="33" pos:column="66">refname<pos:position pos:line="33" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="75"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">packed_entry<pos:position pos:line="34" pos:column="33"/></name></expr>)<pos:position pos:line="34" pos:column="34"/></condition><then pos:line="34" pos:column="34"> <block pos:line="34" pos:column="35">{
			<comment type="block" pos:line="35" pos:column="25">/* Overwrite existing packed entry with info from loose entry */</comment>
			<expr_stmt><expr><name><name pos:line="36" pos:column="25">packed_entry<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">-&gt;<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="39">flag<pos:position pos:line="36" pos:column="43"/></name></name> <operator pos:line="36" pos:column="44">=<pos:position pos:line="36" pos:column="45"/></operator> <name pos:line="36" pos:column="46">REF_ISPACKED<pos:position pos:line="36" pos:column="58"/></name></expr>;<pos:position pos:line="36" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">oidcpy<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><operator pos:line="37" pos:column="32">&amp;<pos:position pos:line="37" pos:column="37"/></operator><name><name pos:line="37" pos:column="33">packed_entry<pos:position pos:line="37" pos:column="45"/></name><operator pos:line="37" pos:column="45">-&gt;<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="47">u<pos:position pos:line="37" pos:column="48"/></name><operator pos:line="37" pos:column="48">.<pos:position pos:line="37" pos:column="49"/></operator><name pos:line="37" pos:column="49">value<pos:position pos:line="37" pos:column="54"/></name><operator pos:line="37" pos:column="54">.<pos:position pos:line="37" pos:column="55"/></operator><name pos:line="37" pos:column="55">oid<pos:position pos:line="37" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="60">iter<pos:position pos:line="37" pos:column="64"/></name><operator pos:line="37" pos:column="64">-&gt;<pos:position pos:line="37" pos:column="69"/></operator><name pos:line="37" pos:column="66">oid<pos:position pos:line="37" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="71"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></then> <else pos:line="38" pos:column="19">else <block pos:line="38" pos:column="24">{
			<expr_stmt><expr><name pos:line="39" pos:column="25">packed_entry<pos:position pos:line="39" pos:column="37"/></name> <operator pos:line="39" pos:column="38">=<pos:position pos:line="39" pos:column="39"/></operator> <call><name pos:line="39" pos:column="40">create_ref_entry<pos:position pos:line="39" pos:column="56"/></name><argument_list pos:line="39" pos:column="56">(<argument><expr><name><name pos:line="39" pos:column="57">iter<pos:position pos:line="39" pos:column="61"/></name><operator pos:line="39" pos:column="61">-&gt;<pos:position pos:line="39" pos:column="66"/></operator><name pos:line="39" pos:column="63">refname<pos:position pos:line="39" pos:column="70"/></name></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="72">iter<pos:position pos:line="39" pos:column="76"/></name><operator pos:line="39" pos:column="76">-&gt;<pos:position pos:line="39" pos:column="81"/></operator><name pos:line="39" pos:column="78">oid<pos:position pos:line="39" pos:column="81"/></name></name></expr></argument>,
							<argument><expr><name pos:line="40" pos:column="57">REF_ISPACKED<pos:position pos:line="40" pos:column="69"/></name></expr></argument>)<pos:position pos:line="40" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="71"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">add_ref_entry<pos:position pos:line="41" pos:column="38"/></name><argument_list pos:line="41" pos:column="38">(<argument><expr><name pos:line="41" pos:column="39">packed_refs<pos:position pos:line="41" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="52">packed_entry<pos:position pos:line="41" pos:column="64"/></name></expr></argument>)<pos:position pos:line="41" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="66"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">oidclr<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><operator pos:line="43" pos:column="24">&amp;<pos:position pos:line="43" pos:column="29"/></operator><name><name pos:line="43" pos:column="25">packed_entry<pos:position pos:line="43" pos:column="37"/></name><operator pos:line="43" pos:column="37">-&gt;<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="39">u<pos:position pos:line="43" pos:column="40"/></name><operator pos:line="43" pos:column="40">.<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="41">value<pos:position pos:line="43" pos:column="46"/></name><operator pos:line="43" pos:column="46">.<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="47">peeled<pos:position pos:line="43" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="55"/></expr_stmt>

		<comment type="block" pos:line="45" pos:column="17">/* Schedule the loose reference for pruning if requested. */</comment>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><operator pos:line="46" pos:column="21">(<pos:position pos:line="46" pos:column="22"/></operator><name pos:line="46" pos:column="22">flags<pos:position pos:line="46" pos:column="27"/></name> <operator pos:line="46" pos:column="28">&amp;<pos:position pos:line="46" pos:column="33"/></operator> <name pos:line="46" pos:column="30">PACK_REFS_PRUNE<pos:position pos:line="46" pos:column="45"/></name><operator pos:line="46" pos:column="45">)<pos:position pos:line="46" pos:column="46"/></operator></expr>)<pos:position pos:line="46" pos:column="47"/></condition><then pos:line="46" pos:column="47"> <block pos:line="46" pos:column="48">{
			<decl_stmt><decl><type><name><name pos:line="47" pos:column="25">struct<pos:position pos:line="47" pos:column="31"/></name> <name pos:line="47" pos:column="32">ref_to_prune<pos:position pos:line="47" pos:column="44"/></name></name> <modifier pos:line="47" pos:column="45">*<pos:position pos:line="47" pos:column="46"/></modifier></type><name pos:line="47" pos:column="46">n<pos:position pos:line="47" pos:column="47"/></name></decl>;<pos:position pos:line="47" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">FLEX_ALLOC_STR<pos:position pos:line="48" pos:column="39"/></name><argument_list pos:line="48" pos:column="39">(<argument><expr><name pos:line="48" pos:column="40">n<pos:position pos:line="48" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="43">name<pos:position pos:line="48" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="49">iter<pos:position pos:line="48" pos:column="53"/></name><operator pos:line="48" pos:column="53">-&gt;<pos:position pos:line="48" pos:column="58"/></operator><name pos:line="48" pos:column="55">refname<pos:position pos:line="48" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">hashcpy<pos:position pos:line="49" pos:column="32"/></name><argument_list pos:line="49" pos:column="32">(<argument><expr><name><name pos:line="49" pos:column="33">n<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">-&gt;<pos:position pos:line="49" pos:column="39"/></operator><name pos:line="49" pos:column="36">sha1<pos:position pos:line="49" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="42">iter<pos:position pos:line="49" pos:column="46"/></name><operator pos:line="49" pos:column="46">-&gt;<pos:position pos:line="49" pos:column="51"/></operator><name pos:line="49" pos:column="48">oid<pos:position pos:line="49" pos:column="51"/></name><operator pos:line="49" pos:column="51">-&gt;<pos:position pos:line="49" pos:column="56"/></operator><name pos:line="49" pos:column="53">hash<pos:position pos:line="49" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="50" pos:column="25">n<pos:position pos:line="50" pos:column="26"/></name><operator pos:line="50" pos:column="26">-&gt;<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="28">next<pos:position pos:line="50" pos:column="32"/></name></name> <operator pos:line="50" pos:column="33">=<pos:position pos:line="50" pos:column="34"/></operator> <name pos:line="50" pos:column="35">refs_to_prune<pos:position pos:line="50" pos:column="48"/></name></expr>;<pos:position pos:line="50" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><name pos:line="51" pos:column="25">refs_to_prune<pos:position pos:line="51" pos:column="38"/></name> <operator pos:line="51" pos:column="39">=<pos:position pos:line="51" pos:column="40"/></operator> <name pos:line="51" pos:column="41">n<pos:position pos:line="51" pos:column="42"/></name></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if>
	}<pos:position pos:line="53" pos:column="10"/></block></while>
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">ok<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">!=<pos:position pos:line="54" pos:column="18"/></operator> <name pos:line="54" pos:column="19">ITER_DONE<pos:position pos:line="54" pos:column="28"/></name></expr>)<pos:position pos:line="54" pos:column="29"/></condition><then pos:line="54" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="17">die<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">(<argument><expr><literal type="string" pos:line="55" pos:column="21">"error while iterating over references"<pos:position pos:line="55" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="62"/></expr_stmt></block></then></if>

	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><call><name pos:line="57" pos:column="13">commit_packed_refs<pos:position pos:line="57" pos:column="31"/></name><argument_list pos:line="57" pos:column="31">(<argument><expr><name pos:line="57" pos:column="32">refs<pos:position pos:line="57" pos:column="36"/></name></expr></argument>)<pos:position pos:line="57" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="38"/></condition><then pos:line="57" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="17">die_errno<pos:position pos:line="58" pos:column="26"/></name><argument_list pos:line="58" pos:column="26">(<argument><expr><literal type="string" pos:line="58" pos:column="27">"unable to overwrite old ref-pack file"<pos:position pos:line="58" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="68"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="60" pos:column="9">prune_refs<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><name pos:line="60" pos:column="20">refs<pos:position pos:line="60" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="26">refs_to_prune<pos:position pos:line="60" pos:column="39"/></name></expr></argument>)<pos:position pos:line="60" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="41"/></expr_stmt>
	<return pos:line="61" pos:column="9">return <expr><literal type="number" pos:line="61" pos:column="16">0<pos:position pos:line="61" pos:column="17"/></literal></expr>;<pos:position pos:line="61" pos:column="18"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
