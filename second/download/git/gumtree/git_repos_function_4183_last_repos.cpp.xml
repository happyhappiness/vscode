<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4183_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parse_capability<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">imap<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">imap<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">cmd<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">arg<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">i<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="6" pos:column="9">imap<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">-&gt;<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="15">caps<pos:position pos:line="6" pos:column="19"/></name></name> <operator pos:line="6" pos:column="20">=<pos:position pos:line="6" pos:column="21"/></operator> <literal type="number" pos:line="6" pos:column="22">0x80000000<pos:position pos:line="6" pos:column="32"/></literal></expr>;<pos:position pos:line="6" pos:column="33"/></expr_stmt>
	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><operator pos:line="7" pos:column="16">(<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">arg<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">=<pos:position pos:line="7" pos:column="22"/></operator> <call><name pos:line="7" pos:column="23">next_arg<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><operator pos:line="7" pos:column="32">&amp;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="33">cmd<pos:position pos:line="7" pos:column="36"/></name></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call><operator pos:line="7" pos:column="37">)<pos:position pos:line="7" pos:column="38"/></operator></expr>)<pos:position pos:line="7" pos:column="39"/></condition>
		<block type="pseudo"><for pos:line="8" pos:column="17">for <control pos:line="8" pos:column="21">(<init><expr><name pos:line="8" pos:column="22">i<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <literal type="number" pos:line="8" pos:column="26">0<pos:position pos:line="8" pos:column="27"/></literal></expr>;<pos:position pos:line="8" pos:column="28"/></init> <condition><expr><name pos:line="8" pos:column="29">i<pos:position pos:line="8" pos:column="30"/></name> <operator pos:line="8" pos:column="31">&lt;<pos:position pos:line="8" pos:column="35"/></operator> <call><name pos:line="8" pos:column="33">ARRAY_SIZE<pos:position pos:line="8" pos:column="43"/></name><argument_list pos:line="8" pos:column="43">(<argument><expr><name pos:line="8" pos:column="44">cap_list<pos:position pos:line="8" pos:column="52"/></name></expr></argument>)<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="54"/></condition> <incr><expr><name pos:line="8" pos:column="55">i<pos:position pos:line="8" pos:column="56"/></name><operator pos:line="8" pos:column="56">++<pos:position pos:line="8" pos:column="58"/></operator></expr></incr>)<pos:position pos:line="8" pos:column="59"/></control>
			<block type="pseudo"><if pos:line="9" pos:column="25">if <condition pos:line="9" pos:column="28">(<expr><operator pos:line="9" pos:column="29">!<pos:position pos:line="9" pos:column="30"/></operator><call><name pos:line="9" pos:column="30">strcmp<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><name><name pos:line="9" pos:column="37">cap_list<pos:position pos:line="9" pos:column="45"/></name><index pos:line="9" pos:column="45">[<expr><name pos:line="9" pos:column="46">i<pos:position pos:line="9" pos:column="47"/></name></expr>]<pos:position pos:line="9" pos:column="48"/></index></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="50">arg<pos:position pos:line="9" pos:column="53"/></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="55"/></condition><then pos:line="9" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="10" pos:column="33">imap<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">-&gt;<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="39">caps<pos:position pos:line="10" pos:column="43"/></name></name> <operator pos:line="10" pos:column="44">|=<pos:position pos:line="10" pos:column="46"/></operator> <literal type="number" pos:line="10" pos:column="47">1<pos:position pos:line="10" pos:column="48"/></literal> <operator pos:line="10" pos:column="49">&lt;&lt;<pos:position pos:line="10" pos:column="57"/></operator> <name pos:line="10" pos:column="52">i<pos:position pos:line="10" pos:column="53"/></name></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt></block></then></if></block></for></block></while>
	<expr_stmt><expr><name><name pos:line="11" pos:column="9">imap<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">-&gt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">rcaps<pos:position pos:line="11" pos:column="20"/></name></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <name><name pos:line="11" pos:column="23">imap<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">-&gt;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="29">caps<pos:position pos:line="11" pos:column="33"/></name></name></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
