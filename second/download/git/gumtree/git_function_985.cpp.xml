<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_985.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">get_symlink<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">object_id<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">oid<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">path<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">data<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><call><name pos:line="4" pos:column="13">is_null_oid<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">(<argument><expr><name pos:line="4" pos:column="25">oid<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="30"/></condition><then pos:line="4" pos:column="30"> <block pos:line="4" pos:column="31">{
		<comment type="block" pos:line="5" pos:column="17">/* The symlink is unknown to Git so read from the filesystem */</comment>
		<decl_stmt><decl><type><name><name pos:line="6" pos:column="17">struct<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">strbuf<pos:position pos:line="6" pos:column="30"/></name></name></type> <name pos:line="6" pos:column="31">link<pos:position pos:line="6" pos:column="35"/></name> <init pos:line="6" pos:column="36">= <expr><name pos:line="6" pos:column="38">STRBUF_INIT<pos:position pos:line="6" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="50"/></decl_stmt>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">has_symlinks<pos:position pos:line="7" pos:column="33"/></name></expr>)<pos:position pos:line="7" pos:column="34"/></condition><then pos:line="7" pos:column="34"> <block pos:line="7" pos:column="35">{
			<if pos:line="8" pos:column="25">if <condition pos:line="8" pos:column="28">(<expr><call><name pos:line="8" pos:column="29">strbuf_readlink<pos:position pos:line="8" pos:column="44"/></name><argument_list pos:line="8" pos:column="44">(<argument><expr><operator pos:line="8" pos:column="45">&amp;<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="46">link<pos:position pos:line="8" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="52">path<pos:position pos:line="8" pos:column="56"/></name></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="58">strlen<pos:position pos:line="8" pos:column="64"/></name><argument_list pos:line="8" pos:column="64">(<argument><expr><name pos:line="8" pos:column="65">path<pos:position pos:line="8" pos:column="69"/></name></expr></argument>)<pos:position pos:line="8" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="72"/></condition><then pos:line="8" pos:column="72">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="33">die<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><call><name pos:line="9" pos:column="37">_<pos:position pos:line="9" pos:column="38"/></name><argument_list pos:line="9" pos:column="38">(<argument><expr><literal type="string" pos:line="9" pos:column="39">"could not read symlink %s"<pos:position pos:line="9" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="9" pos:column="69">path<pos:position pos:line="9" pos:column="73"/></name></expr></argument>)<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="75"/></expr_stmt></block></then></if>
		}<pos:position pos:line="10" pos:column="18"/></block></then> <elseif pos:line="10" pos:column="19">else <if pos:line="10" pos:column="24">if <condition pos:line="10" pos:column="27">(<expr><call><name pos:line="10" pos:column="28">strbuf_read_file<pos:position pos:line="10" pos:column="44"/></name><argument_list pos:line="10" pos:column="44">(<argument><expr><operator pos:line="10" pos:column="45">&amp;<pos:position pos:line="10" pos:column="50"/></operator><name pos:line="10" pos:column="46">link<pos:position pos:line="10" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="52">path<pos:position pos:line="10" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="58">128<pos:position pos:line="10" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="63"/></condition><then pos:line="10" pos:column="63">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">die<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><call><name pos:line="11" pos:column="29">_<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><literal type="string" pos:line="11" pos:column="31">"could not read symlink file %s"<pos:position pos:line="11" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="11" pos:column="66">path<pos:position pos:line="11" pos:column="70"/></name></expr></argument>)<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="72"/></expr_stmt></block></then></if></elseif></if>

		<expr_stmt><expr><name pos:line="13" pos:column="17">data<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <call><name pos:line="13" pos:column="24">strbuf_detach<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><operator pos:line="13" pos:column="38">&amp;<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="39">link<pos:position pos:line="13" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="45">NULL<pos:position pos:line="13" pos:column="49"/></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then> <else pos:line="14" pos:column="11">else <block pos:line="14" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="15" pos:column="17">enum<pos:position pos:line="15" pos:column="21"/></name> <name pos:line="15" pos:column="22">object_type<pos:position pos:line="15" pos:column="33"/></name></name></type> <name pos:line="15" pos:column="34">type<pos:position pos:line="15" pos:column="38"/></name></decl>;<pos:position pos:line="15" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">unsigned<pos:position pos:line="16" pos:column="25"/></name> <name pos:line="16" pos:column="26">long<pos:position pos:line="16" pos:column="30"/></name></type> <name pos:line="16" pos:column="31">size<pos:position pos:line="16" pos:column="35"/></name></decl>;<pos:position pos:line="16" pos:column="36"/></decl_stmt>
		<expr_stmt><expr><name pos:line="17" pos:column="17">data<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <call><name pos:line="17" pos:column="24">read_sha1_file<pos:position pos:line="17" pos:column="38"/></name><argument_list pos:line="17" pos:column="38">(<argument><expr><name><name pos:line="17" pos:column="39">oid<pos:position pos:line="17" pos:column="42"/></name><operator pos:line="17" pos:column="42">-&gt;<pos:position pos:line="17" pos:column="47"/></operator><name pos:line="17" pos:column="44">hash<pos:position pos:line="17" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="50">&amp;<pos:position pos:line="17" pos:column="55"/></operator><name pos:line="17" pos:column="51">type<pos:position pos:line="17" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="57">&amp;<pos:position pos:line="17" pos:column="62"/></operator><name pos:line="17" pos:column="58">size<pos:position pos:line="17" pos:column="62"/></name></expr></argument>)<pos:position pos:line="17" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="64"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">data<pos:position pos:line="18" pos:column="26"/></name></expr>)<pos:position pos:line="18" pos:column="27"/></condition><then pos:line="18" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="25">die<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><call><name pos:line="19" pos:column="29">_<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><literal type="string" pos:line="19" pos:column="31">"could not read object %s for symlink %s"<pos:position pos:line="19" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="73"/></argument_list></call></expr></argument>,
				<argument><expr><call><name pos:line="20" pos:column="33">oid_to_hex<pos:position pos:line="20" pos:column="43"/></name><argument_list pos:line="20" pos:column="43">(<argument><expr><name pos:line="20" pos:column="44">oid<pos:position pos:line="20" pos:column="47"/></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="20" pos:column="50">path<pos:position pos:line="20" pos:column="54"/></name></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="56"/></expr_stmt></block></then></if>
	}<pos:position pos:line="21" pos:column="10"/></block></else></if>

	<return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">data<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
