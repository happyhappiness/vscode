<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6345_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">files_log_ref_write<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">files_ref_store<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">refs<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
			       <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">refname<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier> <name pos:line="2" pos:column="59">unsigned<pos:position pos:line="2" pos:column="67"/></name> <name pos:line="2" pos:column="68">char<pos:position pos:line="2" pos:column="72"/></name> <modifier pos:line="2" pos:column="73">*<pos:position pos:line="2" pos:column="74"/></modifier></type><name pos:line="2" pos:column="74">old_sha1<pos:position pos:line="2" pos:column="82"/></name></decl></parameter>,
			       <parameter><decl><type><specifier pos:line="3" pos:column="32">const<pos:position pos:line="3" pos:column="37"/></specifier> <name pos:line="3" pos:column="38">unsigned<pos:position pos:line="3" pos:column="46"/></name> <name pos:line="3" pos:column="47">char<pos:position pos:line="3" pos:column="51"/></name> <modifier pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></modifier></type><name pos:line="3" pos:column="53">new_sha1<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="63">const<pos:position pos:line="3" pos:column="68"/></specifier> <name pos:line="3" pos:column="69">char<pos:position pos:line="3" pos:column="73"/></name> <modifier pos:line="3" pos:column="74">*<pos:position pos:line="3" pos:column="75"/></modifier></type><name pos:line="3" pos:column="75">msg<pos:position pos:line="3" pos:column="78"/></name></decl></parameter>,
			       <parameter><decl><type><name pos:line="4" pos:column="32">int<pos:position pos:line="4" pos:column="35"/></name></type> <name pos:line="4" pos:column="36">flags<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="4" pos:column="43">struct<pos:position pos:line="4" pos:column="49"/></name> <name pos:line="4" pos:column="50">strbuf<pos:position pos:line="4" pos:column="56"/></name></name> <modifier pos:line="4" pos:column="57">*<pos:position pos:line="4" pos:column="58"/></modifier></type><name pos:line="4" pos:column="58">err<pos:position pos:line="4" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="62"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">logfd<pos:position pos:line="6" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="20">result<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">log_all_ref_updates<pos:position pos:line="8" pos:column="32"/></name> <operator pos:line="8" pos:column="33">==<pos:position pos:line="8" pos:column="35"/></operator> <name pos:line="8" pos:column="36">LOG_REFS_UNSET<pos:position pos:line="8" pos:column="50"/></name></expr>)<pos:position pos:line="8" pos:column="51"/></condition><then pos:line="8" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">log_all_ref_updates<pos:position pos:line="9" pos:column="36"/></name> <operator pos:line="9" pos:column="37">=<pos:position pos:line="9" pos:column="38"/></operator> <ternary><condition><expr><call><name pos:line="9" pos:column="39">is_bare_repository<pos:position pos:line="9" pos:column="57"/></name><argument_list pos:line="9" pos:column="57">()<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr> ?<pos:position pos:line="9" pos:column="61"/></condition><then pos:line="9" pos:column="61"> <expr><name pos:line="9" pos:column="62">LOG_REFS_NONE<pos:position pos:line="9" pos:column="75"/></name></expr> <pos:position pos:line="9" pos:column="76"/></then><else pos:line="9" pos:column="76">: <expr><name pos:line="9" pos:column="78">LOG_REFS_NORMAL<pos:position pos:line="9" pos:column="93"/></name></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="94"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">result<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <call><name pos:line="11" pos:column="18">log_ref_setup<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">refs<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">refname<pos:position pos:line="11" pos:column="45"/></name></expr></argument>,
			       <argument><expr><name pos:line="12" pos:column="32">flags<pos:position pos:line="12" pos:column="37"/></name> <operator pos:line="12" pos:column="38">&amp;<pos:position pos:line="12" pos:column="43"/></operator> <name pos:line="12" pos:column="40">REF_FORCE_CREATE_REFLOG<pos:position pos:line="12" pos:column="63"/></name></expr></argument>,
			       <argument><expr><operator pos:line="13" pos:column="32">&amp;<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="33">logfd<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">err<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">result<pos:position pos:line="15" pos:column="19"/></name></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">result<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></return></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">logfd<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&lt;<pos:position pos:line="18" pos:column="23"/></operator> <literal type="number" pos:line="18" pos:column="21">0<pos:position pos:line="18" pos:column="22"/></literal></expr>)<pos:position pos:line="18" pos:column="23"/></condition><then pos:line="18" pos:column="23">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="20" pos:column="9">result<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <call><name pos:line="20" pos:column="18">log_ref_write_fd<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><name pos:line="20" pos:column="35">logfd<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">old_sha1<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="52">new_sha1<pos:position pos:line="20" pos:column="60"/></name></expr></argument>,
				  <argument><expr><call><name pos:line="21" pos:column="35">git_committer_info<pos:position pos:line="21" pos:column="53"/></name><argument_list pos:line="21" pos:column="53">(<argument><expr><literal type="number" pos:line="21" pos:column="54">0<pos:position pos:line="21" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="21" pos:column="58">msg<pos:position pos:line="21" pos:column="61"/></name></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">result<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20"> <block pos:line="22" pos:column="21">{
		<decl_stmt><decl><type><name><name pos:line="23" pos:column="17">struct<pos:position pos:line="23" pos:column="23"/></name> <name pos:line="23" pos:column="24">strbuf<pos:position pos:line="23" pos:column="30"/></name></name></type> <name pos:line="23" pos:column="31">sb<pos:position pos:line="23" pos:column="33"/></name> <init pos:line="23" pos:column="34">= <expr><name pos:line="23" pos:column="36">STRBUF_INIT<pos:position pos:line="23" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="48"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">int<pos:position pos:line="24" pos:column="20"/></name></type> <name pos:line="24" pos:column="21">save_errno<pos:position pos:line="24" pos:column="31"/></name> <init pos:line="24" pos:column="32">= <expr><name pos:line="24" pos:column="34">errno<pos:position pos:line="24" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="40"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="26" pos:column="17">files_reflog_path<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">refs<pos:position pos:line="26" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="41">&amp;<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="42">sb<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="46">refname<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">strbuf_addf<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">err<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="34">"unable to append to '%s': %s"<pos:position pos:line="27" pos:column="64"/></literal></expr></argument>,
			    <argument><expr><name><name pos:line="28" pos:column="29">sb<pos:position pos:line="28" pos:column="31"/></name><operator pos:line="28" pos:column="31">.<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="32">buf<pos:position pos:line="28" pos:column="35"/></name></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="37">strerror<pos:position pos:line="28" pos:column="45"/></name><argument_list pos:line="28" pos:column="45">(<argument><expr><name pos:line="28" pos:column="46">save_errno<pos:position pos:line="28" pos:column="56"/></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">strbuf_release<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><operator pos:line="29" pos:column="32">&amp;<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="33">sb<pos:position pos:line="29" pos:column="35"/></name></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">close<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><name pos:line="30" pos:column="23">logfd<pos:position pos:line="30" pos:column="28"/></name></expr></argument>)<pos:position pos:line="30" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt>
		<return pos:line="31" pos:column="17">return <expr><operator pos:line="31" pos:column="24">-<pos:position pos:line="31" pos:column="25"/></operator><literal type="number" pos:line="31" pos:column="25">1<pos:position pos:line="31" pos:column="26"/></literal></expr>;<pos:position pos:line="31" pos:column="27"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">close<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><name pos:line="33" pos:column="19">logfd<pos:position pos:line="33" pos:column="24"/></name></expr></argument>)<pos:position pos:line="33" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="26"/></condition><then pos:line="33" pos:column="26"> <block pos:line="33" pos:column="27">{
		<decl_stmt><decl><type><name><name pos:line="34" pos:column="17">struct<pos:position pos:line="34" pos:column="23"/></name> <name pos:line="34" pos:column="24">strbuf<pos:position pos:line="34" pos:column="30"/></name></name></type> <name pos:line="34" pos:column="31">sb<pos:position pos:line="34" pos:column="33"/></name> <init pos:line="34" pos:column="34">= <expr><name pos:line="34" pos:column="36">STRBUF_INIT<pos:position pos:line="34" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="48"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="35" pos:column="17">int<pos:position pos:line="35" pos:column="20"/></name></type> <name pos:line="35" pos:column="21">save_errno<pos:position pos:line="35" pos:column="31"/></name> <init pos:line="35" pos:column="32">= <expr><name pos:line="35" pos:column="34">errno<pos:position pos:line="35" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="40"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="37" pos:column="17">files_reflog_path<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">refs<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="41">&amp;<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="42">sb<pos:position pos:line="37" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="46">refname<pos:position pos:line="37" pos:column="53"/></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">strbuf_addf<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><name pos:line="38" pos:column="29">err<pos:position pos:line="38" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="34">"unable to append to '%s': %s"<pos:position pos:line="38" pos:column="64"/></literal></expr></argument>,
			    <argument><expr><name><name pos:line="39" pos:column="29">sb<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">.<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="32">buf<pos:position pos:line="39" pos:column="35"/></name></name></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="37">strerror<pos:position pos:line="39" pos:column="45"/></name><argument_list pos:line="39" pos:column="45">(<argument><expr><name pos:line="39" pos:column="46">save_errno<pos:position pos:line="39" pos:column="56"/></name></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">strbuf_release<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><operator pos:line="40" pos:column="32">&amp;<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="33">sb<pos:position pos:line="40" pos:column="35"/></name></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
		<return pos:line="41" pos:column="17">return <expr><operator pos:line="41" pos:column="24">-<pos:position pos:line="41" pos:column="25"/></operator><literal type="number" pos:line="41" pos:column="25">1<pos:position pos:line="41" pos:column="26"/></literal></expr>;<pos:position pos:line="41" pos:column="27"/></return>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>
	<return pos:line="43" pos:column="9">return <expr><literal type="number" pos:line="43" pos:column="16">0<pos:position pos:line="43" pos:column="17"/></literal></expr>;<pos:position pos:line="43" pos:column="18"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
