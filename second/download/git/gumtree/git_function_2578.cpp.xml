<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2578.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">output_refs<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">ref<pos:position pos:line="1" pos:column="35"/></name></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">refs<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ref<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">posn<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<for pos:line="4" pos:column="9">for <control pos:line="4" pos:column="13">(<init><expr><name pos:line="4" pos:column="14">posn<pos:position pos:line="4" pos:column="18"/></name> <operator pos:line="4" pos:column="19">=<pos:position pos:line="4" pos:column="20"/></operator> <name pos:line="4" pos:column="21">refs<pos:position pos:line="4" pos:column="25"/></name></expr>;<pos:position pos:line="4" pos:column="26"/></init> <condition><expr><name pos:line="4" pos:column="27">posn<pos:position pos:line="4" pos:column="31"/></name></expr>;<pos:position pos:line="4" pos:column="32"/></condition> <incr><expr><name pos:line="4" pos:column="33">posn<pos:position pos:line="4" pos:column="37"/></name> <operator pos:line="4" pos:column="38">=<pos:position pos:line="4" pos:column="39"/></operator> <name><name pos:line="4" pos:column="40">posn<pos:position pos:line="4" pos:column="44"/></name><operator pos:line="4" pos:column="44">-&gt;<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="46">next<pos:position pos:line="4" pos:column="50"/></name></name></expr></incr>)<pos:position pos:line="4" pos:column="51"/></control> <block pos:line="4" pos:column="52">{
		<if pos:line="5" pos:column="17">if <condition pos:line="5" pos:column="20">(<expr><name><name pos:line="5" pos:column="21">posn<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">-&gt;<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="27">symref<pos:position pos:line="5" pos:column="33"/></name></name></expr>)<pos:position pos:line="5" pos:column="34"/></condition><then pos:line="5" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="25">printf<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><literal type="string" pos:line="6" pos:column="32">"@%s %s\n"<pos:position pos:line="6" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="44">posn<pos:position pos:line="6" pos:column="48"/></name><operator pos:line="6" pos:column="48">-&gt;<pos:position pos:line="6" pos:column="53"/></operator><name pos:line="6" pos:column="50">symref<pos:position pos:line="6" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="58">posn<pos:position pos:line="6" pos:column="62"/></name><operator pos:line="6" pos:column="62">-&gt;<pos:position pos:line="6" pos:column="67"/></operator><name pos:line="6" pos:column="64">name<pos:position pos:line="6" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="70"/></expr_stmt></block></then>
		<else pos:line="7" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="25">printf<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><literal type="string" pos:line="8" pos:column="32">"%s %s\n"<pos:position pos:line="8" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="43">sha1_to_hex<pos:position pos:line="8" pos:column="54"/></name><argument_list pos:line="8" pos:column="54">(<argument><expr><name><name pos:line="8" pos:column="55">posn<pos:position pos:line="8" pos:column="59"/></name><operator pos:line="8" pos:column="59">-&gt;<pos:position pos:line="8" pos:column="64"/></operator><name pos:line="8" pos:column="61">old_sha1<pos:position pos:line="8" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="72">posn<pos:position pos:line="8" pos:column="76"/></name><operator pos:line="8" pos:column="76">-&gt;<pos:position pos:line="8" pos:column="81"/></operator><name pos:line="8" pos:column="78">name<pos:position pos:line="8" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="84"/></expr_stmt></block></else></if>
	}<pos:position pos:line="9" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">printf<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="string" pos:line="10" pos:column="16">"\n"<pos:position pos:line="10" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">fflush<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">stdout<pos:position pos:line="11" pos:column="22"/></name></expr></argument>)<pos:position pos:line="11" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
