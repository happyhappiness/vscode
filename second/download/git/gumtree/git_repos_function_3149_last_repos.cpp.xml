<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3149_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">filter_buffer_or_fd<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">in<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">out<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">void<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">data<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * Spawn cmd and feed the buffer contents through its stdin.
	 */</comment>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">child_process<pos:position pos:line="6" pos:column="29"/></name></name></type> <name pos:line="6" pos:column="30">child_process<pos:position pos:line="6" pos:column="43"/></name> <init pos:line="6" pos:column="44">= <expr><name pos:line="6" pos:column="46">CHILD_PROCESS_INIT<pos:position pos:line="6" pos:column="64"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="65"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">filter_params<pos:position pos:line="7" pos:column="29"/></name></name> <modifier pos:line="7" pos:column="30">*<pos:position pos:line="7" pos:column="31"/></modifier></type><name pos:line="7" pos:column="31">params<pos:position pos:line="7" pos:column="37"/></name> <init pos:line="7" pos:column="38">= <expr><operator pos:line="7" pos:column="40">(<pos:position pos:line="7" pos:column="41"/></operator>struct <name pos:line="7" pos:column="48">filter_params<pos:position pos:line="7" pos:column="61"/></name> <operator pos:line="7" pos:column="62">*<pos:position pos:line="7" pos:column="63"/></operator><operator pos:line="7" pos:column="63">)<pos:position pos:line="7" pos:column="64"/></operator><name pos:line="7" pos:column="64">data<pos:position pos:line="7" pos:column="68"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="69"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">write_err<pos:position pos:line="8" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="24">status<pos:position pos:line="8" pos:column="30"/></name></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name><name pos:line="9" pos:column="21">argv<pos:position pos:line="9" pos:column="25"/></name><index pos:line="9" pos:column="25">[]<pos:position pos:line="9" pos:column="27"/></index></name> <init pos:line="9" pos:column="28">= <expr><block pos:line="9" pos:column="30">{ <expr><name pos:line="9" pos:column="32">NULL<pos:position pos:line="9" pos:column="36"/></name></expr>, <expr><name pos:line="9" pos:column="38">NULL<pos:position pos:line="9" pos:column="42"/></name></expr> }<pos:position pos:line="9" pos:column="44"/></block></expr></init></decl>;<pos:position pos:line="9" pos:column="45"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/* apply % substitution to cmd */</comment>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">strbuf<pos:position pos:line="12" pos:column="22"/></name></name></type> <name pos:line="12" pos:column="23">cmd<pos:position pos:line="12" pos:column="26"/></name> <init pos:line="12" pos:column="27">= <expr><name pos:line="12" pos:column="29">STRBUF_INIT<pos:position pos:line="12" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">struct<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">strbuf<pos:position pos:line="13" pos:column="22"/></name></name></type> <name pos:line="13" pos:column="23">path<pos:position pos:line="13" pos:column="27"/></name> <init pos:line="13" pos:column="28">= <expr><name pos:line="13" pos:column="30">STRBUF_INIT<pos:position pos:line="13" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="14" pos:column="9">struct<pos:position pos:line="14" pos:column="15"/></name> <name pos:line="14" pos:column="16">strbuf_expand_dict_entry<pos:position pos:line="14" pos:column="40"/></name></name></type> <name><name pos:line="14" pos:column="41">dict<pos:position pos:line="14" pos:column="45"/></name><index pos:line="14" pos:column="45">[]<pos:position pos:line="14" pos:column="47"/></index></name> <init pos:line="14" pos:column="48">= <expr><block pos:line="14" pos:column="50">{
		<expr><block pos:line="15" pos:column="17">{ <expr><literal type="string" pos:line="15" pos:column="19">"f"<pos:position pos:line="15" pos:column="22"/></literal></expr>, <expr><name pos:line="15" pos:column="24">NULL<pos:position pos:line="15" pos:column="28"/></name></expr>, }<pos:position pos:line="15" pos:column="31"/></block></expr>,
		<expr><block pos:line="16" pos:column="17">{ <expr><name pos:line="16" pos:column="19">NULL<pos:position pos:line="16" pos:column="23"/></name></expr>, <expr><name pos:line="16" pos:column="25">NULL<pos:position pos:line="16" pos:column="29"/></name></expr>, }<pos:position pos:line="16" pos:column="32"/></block></expr>,
	}<pos:position pos:line="17" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="17" pos:column="11"/></decl_stmt>

	<comment type="block" pos:line="19" pos:column="9">/* quote the path to preserve spaces, etc. */</comment>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">sq_quote_buf<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><operator pos:line="20" pos:column="22">&amp;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="23">path<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="29">params<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">-&gt;<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="37">path<pos:position pos:line="20" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">dict<pos:position pos:line="21" pos:column="13"/></name><index pos:line="21" pos:column="13">[<expr><literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>]<pos:position pos:line="21" pos:column="16"/></index></name><operator pos:line="21" pos:column="16">.<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">value<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <name><name pos:line="21" pos:column="25">path<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">.<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="30">buf<pos:position pos:line="21" pos:column="33"/></name></name></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>

	<comment type="block" pos:line="23" pos:column="9">/* expand all %f with the quoted path */</comment>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">strbuf_expand<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><operator pos:line="24" pos:column="23">&amp;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="24">cmd<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="29">params<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">-&gt;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="37">cmd<pos:position pos:line="24" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="42">strbuf_expand_dict_cb<pos:position pos:line="24" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="65">&amp;<pos:position pos:line="24" pos:column="70"/></operator><name pos:line="24" pos:column="66">dict<pos:position pos:line="24" pos:column="70"/></name></expr></argument>)<pos:position pos:line="24" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="72"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">strbuf_release<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><operator pos:line="25" pos:column="24">&amp;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="25">path<pos:position pos:line="25" pos:column="29"/></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="27" pos:column="9">argv<pos:position pos:line="27" pos:column="13"/></name><index pos:line="27" pos:column="13">[<expr><literal type="number" pos:line="27" pos:column="14">0<pos:position pos:line="27" pos:column="15"/></literal></expr>]<pos:position pos:line="27" pos:column="16"/></index></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name><name pos:line="27" pos:column="19">cmd<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">.<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">buf<pos:position pos:line="27" pos:column="26"/></name></name></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="29" pos:column="9">child_process<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">.<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="23">argv<pos:position pos:line="29" pos:column="27"/></name></name> <operator pos:line="29" pos:column="28">=<pos:position pos:line="29" pos:column="29"/></operator> <name pos:line="29" pos:column="30">argv<pos:position pos:line="29" pos:column="34"/></name></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="30" pos:column="9">child_process<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">.<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="23">use_shell<pos:position pos:line="30" pos:column="32"/></name></name> <operator pos:line="30" pos:column="33">=<pos:position pos:line="30" pos:column="34"/></operator> <literal type="number" pos:line="30" pos:column="35">1<pos:position pos:line="30" pos:column="36"/></literal></expr>;<pos:position pos:line="30" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="31" pos:column="9">child_process<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">.<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="23">in<pos:position pos:line="31" pos:column="25"/></name></name> <operator pos:line="31" pos:column="26">=<pos:position pos:line="31" pos:column="27"/></operator> <operator pos:line="31" pos:column="28">-<pos:position pos:line="31" pos:column="29"/></operator><literal type="number" pos:line="31" pos:column="29">1<pos:position pos:line="31" pos:column="30"/></literal></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="32" pos:column="9">child_process<pos:position pos:line="32" pos:column="22"/></name><operator pos:line="32" pos:column="22">.<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="23">out<pos:position pos:line="32" pos:column="26"/></name></name> <operator pos:line="32" pos:column="27">=<pos:position pos:line="32" pos:column="28"/></operator> <name pos:line="32" pos:column="29">out<pos:position pos:line="32" pos:column="32"/></name></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name pos:line="34" pos:column="13">start_command<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><operator pos:line="34" pos:column="27">&amp;<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="28">child_process<pos:position pos:line="34" pos:column="41"/></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="43"/></condition><then pos:line="34" pos:column="43">
		<block type="pseudo"><return pos:line="35" pos:column="17">return <expr><call><name pos:line="35" pos:column="24">error<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><literal type="string" pos:line="35" pos:column="30">"cannot fork to run external filter '%s'"<pos:position pos:line="35" pos:column="71"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="73">params<pos:position pos:line="35" pos:column="79"/></name><operator pos:line="35" pos:column="79">-&gt;<pos:position pos:line="35" pos:column="84"/></operator><name pos:line="35" pos:column="81">cmd<pos:position pos:line="35" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="86"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="37" pos:column="9">sigchain_push<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">SIGPIPE<pos:position pos:line="37" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="32">SIG_IGN<pos:position pos:line="37" pos:column="39"/></name></expr></argument>)<pos:position pos:line="37" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="41"/></expr_stmt>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name><name pos:line="39" pos:column="13">params<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">-&gt;<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="21">src<pos:position pos:line="39" pos:column="24"/></name></name></expr>)<pos:position pos:line="39" pos:column="25"/></condition><then pos:line="39" pos:column="25"> <block pos:line="39" pos:column="26">{
		<expr_stmt><expr><name pos:line="40" pos:column="17">write_err<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">=<pos:position pos:line="40" pos:column="28"/></operator> <operator pos:line="40" pos:column="29">(<pos:position pos:line="40" pos:column="30"/></operator><call><name pos:line="40" pos:column="30">write_in_full<pos:position pos:line="40" pos:column="43"/></name><argument_list pos:line="40" pos:column="43">(<argument><expr><name><name pos:line="40" pos:column="44">child_process<pos:position pos:line="40" pos:column="57"/></name><operator pos:line="40" pos:column="57">.<pos:position pos:line="40" pos:column="58"/></operator><name pos:line="40" pos:column="58">in<pos:position pos:line="40" pos:column="60"/></name></name></expr></argument>,
					   <argument><expr><name><name pos:line="41" pos:column="44">params<pos:position pos:line="41" pos:column="50"/></name><operator pos:line="41" pos:column="50">-&gt;<pos:position pos:line="41" pos:column="55"/></operator><name pos:line="41" pos:column="52">src<pos:position pos:line="41" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="57">params<pos:position pos:line="41" pos:column="63"/></name><operator pos:line="41" pos:column="63">-&gt;<pos:position pos:line="41" pos:column="68"/></operator><name pos:line="41" pos:column="65">size<pos:position pos:line="41" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call> <operator pos:line="41" pos:column="71">&lt;<pos:position pos:line="41" pos:column="75"/></operator> <literal type="number" pos:line="41" pos:column="73">0<pos:position pos:line="41" pos:column="74"/></literal><operator pos:line="41" pos:column="74">)<pos:position pos:line="41" pos:column="75"/></operator></expr>;<pos:position pos:line="41" pos:column="76"/></expr_stmt>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">errno<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">==<pos:position pos:line="42" pos:column="29"/></operator> <name pos:line="42" pos:column="30">EPIPE<pos:position pos:line="42" pos:column="35"/></name></expr>)<pos:position pos:line="42" pos:column="36"/></condition><then pos:line="42" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="25">write_err<pos:position pos:line="43" pos:column="34"/></name> <operator pos:line="43" pos:column="35">=<pos:position pos:line="43" pos:column="36"/></operator> <literal type="number" pos:line="43" pos:column="37">0<pos:position pos:line="43" pos:column="38"/></literal></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt></block></then></if>
	}<pos:position pos:line="44" pos:column="10"/></block></then> <else pos:line="44" pos:column="11">else <block pos:line="44" pos:column="16">{
		<expr_stmt><expr><name pos:line="45" pos:column="17">write_err<pos:position pos:line="45" pos:column="26"/></name> <operator pos:line="45" pos:column="27">=<pos:position pos:line="45" pos:column="28"/></operator> <call><name pos:line="45" pos:column="29">copy_fd<pos:position pos:line="45" pos:column="36"/></name><argument_list pos:line="45" pos:column="36">(<argument><expr><name><name pos:line="45" pos:column="37">params<pos:position pos:line="45" pos:column="43"/></name><operator pos:line="45" pos:column="43">-&gt;<pos:position pos:line="45" pos:column="48"/></operator><name pos:line="45" pos:column="45">fd<pos:position pos:line="45" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="49">child_process<pos:position pos:line="45" pos:column="62"/></name><operator pos:line="45" pos:column="62">.<pos:position pos:line="45" pos:column="63"/></operator><name pos:line="45" pos:column="63">in<pos:position pos:line="45" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="67"/></expr_stmt>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">write_err<pos:position pos:line="46" pos:column="30"/></name> <operator pos:line="46" pos:column="31">==<pos:position pos:line="46" pos:column="33"/></operator> <name pos:line="46" pos:column="34">COPY_WRITE_ERROR<pos:position pos:line="46" pos:column="50"/></name> <operator pos:line="46" pos:column="51">&amp;&amp;<pos:position pos:line="46" pos:column="61"/></operator> <name pos:line="46" pos:column="54">errno<pos:position pos:line="46" pos:column="59"/></name> <operator pos:line="46" pos:column="60">==<pos:position pos:line="46" pos:column="62"/></operator> <name pos:line="46" pos:column="63">EPIPE<pos:position pos:line="46" pos:column="68"/></name></expr>)<pos:position pos:line="46" pos:column="69"/></condition><then pos:line="46" pos:column="69">
			<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="25">write_err<pos:position pos:line="47" pos:column="34"/></name> <operator pos:line="47" pos:column="35">=<pos:position pos:line="47" pos:column="36"/></operator> <literal type="number" pos:line="47" pos:column="37">0<pos:position pos:line="47" pos:column="38"/></literal></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt></block></then></if>
	}<pos:position pos:line="48" pos:column="10"/></block></else></if>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><call><name pos:line="50" pos:column="13">close<pos:position pos:line="50" pos:column="18"/></name><argument_list pos:line="50" pos:column="18">(<argument><expr><name><name pos:line="50" pos:column="19">child_process<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">.<pos:position pos:line="50" pos:column="33"/></operator><name pos:line="50" pos:column="33">in<pos:position pos:line="50" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="37"/></condition><then pos:line="50" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="17">write_err<pos:position pos:line="51" pos:column="26"/></name> <operator pos:line="51" pos:column="27">=<pos:position pos:line="51" pos:column="28"/></operator> <literal type="number" pos:line="51" pos:column="29">1<pos:position pos:line="51" pos:column="30"/></literal></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt></block></then></if>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">write_err<pos:position pos:line="52" pos:column="22"/></name></expr>)<pos:position pos:line="52" pos:column="23"/></condition><then pos:line="52" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="17">error<pos:position pos:line="53" pos:column="22"/></name><argument_list pos:line="53" pos:column="22">(<argument><expr><literal type="string" pos:line="53" pos:column="23">"cannot feed the input to external filter '%s'"<pos:position pos:line="53" pos:column="70"/></literal></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="72">params<pos:position pos:line="53" pos:column="78"/></name><operator pos:line="53" pos:column="78">-&gt;<pos:position pos:line="53" pos:column="83"/></operator><name pos:line="53" pos:column="80">cmd<pos:position pos:line="53" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="85"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="55" pos:column="9">sigchain_pop<pos:position pos:line="55" pos:column="21"/></name><argument_list pos:line="55" pos:column="21">(<argument><expr><name pos:line="55" pos:column="22">SIGPIPE<pos:position pos:line="55" pos:column="29"/></name></expr></argument>)<pos:position pos:line="55" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="31"/></expr_stmt>

	<expr_stmt><expr><name pos:line="57" pos:column="9">status<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">=<pos:position pos:line="57" pos:column="17"/></operator> <call><name pos:line="57" pos:column="18">finish_command<pos:position pos:line="57" pos:column="32"/></name><argument_list pos:line="57" pos:column="32">(<argument><expr><operator pos:line="57" pos:column="33">&amp;<pos:position pos:line="57" pos:column="38"/></operator><name pos:line="57" pos:column="34">child_process<pos:position pos:line="57" pos:column="47"/></name></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="49"/></expr_stmt>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">status<pos:position pos:line="58" pos:column="19"/></name></expr>)<pos:position pos:line="58" pos:column="20"/></condition><then pos:line="58" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">error<pos:position pos:line="59" pos:column="22"/></name><argument_list pos:line="59" pos:column="22">(<argument><expr><literal type="string" pos:line="59" pos:column="23">"external filter '%s' failed %d"<pos:position pos:line="59" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="57">params<pos:position pos:line="59" pos:column="63"/></name><operator pos:line="59" pos:column="63">-&gt;<pos:position pos:line="59" pos:column="68"/></operator><name pos:line="59" pos:column="65">cmd<pos:position pos:line="59" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="70">status<pos:position pos:line="59" pos:column="76"/></name></expr></argument>)<pos:position pos:line="59" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="78"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="61" pos:column="9">strbuf_release<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><operator pos:line="61" pos:column="24">&amp;<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="25">cmd<pos:position pos:line="61" pos:column="28"/></name></expr></argument>)<pos:position pos:line="61" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="30"/></expr_stmt>
	<return pos:line="62" pos:column="9">return <expr><operator pos:line="62" pos:column="16">(<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="17">write_err<pos:position pos:line="62" pos:column="26"/></name> <operator pos:line="62" pos:column="27">||<pos:position pos:line="62" pos:column="29"/></operator> <name pos:line="62" pos:column="30">status<pos:position pos:line="62" pos:column="36"/></name><operator pos:line="62" pos:column="36">)<pos:position pos:line="62" pos:column="37"/></operator></expr>;<pos:position pos:line="62" pos:column="38"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
