<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2340.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_fetch_pack<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">argc<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier><modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">argv<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">prefix<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">ret<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ref<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">ref<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><name pos:line="4" pos:column="27">NULL<pos:position pos:line="4" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">dest<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">NULL<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ref<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier><modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">sought<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name pos:line="6" pos:column="31">NULL<pos:position pos:line="6" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">nr_sought<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><literal type="number" pos:line="7" pos:column="25">0<pos:position pos:line="7" pos:column="26"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="28">alloc_sought<pos:position pos:line="7" pos:column="40"/></name> <init pos:line="7" pos:column="41">= <expr><literal type="number" pos:line="7" pos:column="43">0<pos:position pos:line="7" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name><name pos:line="8" pos:column="13">fd<pos:position pos:line="8" pos:column="15"/></name><index pos:line="8" pos:column="15">[<expr><literal type="number" pos:line="8" pos:column="16">2<pos:position pos:line="8" pos:column="17"/></literal></expr>]<pos:position pos:line="8" pos:column="18"/></index></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">pack_lockfile<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><name pos:line="9" pos:column="31">NULL<pos:position pos:line="9" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier><modifier pos:line="10" pos:column="15">*<pos:position pos:line="10" pos:column="16"/></modifier></type><name pos:line="10" pos:column="16">pack_lockfile_ptr<pos:position pos:line="10" pos:column="33"/></name> <init pos:line="10" pos:column="34">= <expr><name pos:line="10" pos:column="36">NULL<pos:position pos:line="10" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">child_process<pos:position pos:line="11" pos:column="29"/></name></name> <modifier pos:line="11" pos:column="30">*<pos:position pos:line="11" pos:column="31"/></modifier></type><name pos:line="11" pos:column="31">conn<pos:position pos:line="11" pos:column="35"/></name></decl>;<pos:position pos:line="11" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">fetch_pack_args<pos:position pos:line="12" pos:column="31"/></name></name></type> <name pos:line="12" pos:column="32">args<pos:position pos:line="12" pos:column="36"/></name></decl>;<pos:position pos:line="12" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">struct<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">sha1_array<pos:position pos:line="13" pos:column="26"/></name></name></type> <name pos:line="13" pos:column="27">shallow<pos:position pos:line="13" pos:column="34"/></name> <init pos:line="13" pos:column="35">= <expr><name pos:line="13" pos:column="37">SHA1_ARRAY_INIT<pos:position pos:line="13" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="53"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">packet_trace_identity<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><literal type="string" pos:line="15" pos:column="31">"fetch-pack"<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">memset<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><operator pos:line="17" pos:column="16">&amp;<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="17">args<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="23">0<pos:position pos:line="17" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="26">sizeof<argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">args<pos:position pos:line="17" pos:column="37"/></name></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">args<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">.<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">uploadpack<pos:position pos:line="18" pos:column="24"/></name></name> <operator pos:line="18" pos:column="25">=<pos:position pos:line="18" pos:column="26"/></operator> <literal type="string" pos:line="18" pos:column="27">"git-upload-pack"<pos:position pos:line="18" pos:column="44"/></literal></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>

	<for pos:line="20" pos:column="9">for <control pos:line="20" pos:column="13">(<init><expr><name pos:line="20" pos:column="14">i<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="number" pos:line="20" pos:column="18">1<pos:position pos:line="20" pos:column="19"/></literal></expr>;<pos:position pos:line="20" pos:column="20"/></init> <condition><expr><name pos:line="20" pos:column="21">i<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">&lt;<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="25">argc<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">&amp;&amp;<pos:position pos:line="20" pos:column="40"/></operator> <operator pos:line="20" pos:column="33">*<pos:position pos:line="20" pos:column="34"/></operator><name><name pos:line="20" pos:column="34">argv<pos:position pos:line="20" pos:column="38"/></name><index pos:line="20" pos:column="38">[<expr><name pos:line="20" pos:column="39">i<pos:position pos:line="20" pos:column="40"/></name></expr>]<pos:position pos:line="20" pos:column="41"/></index></name> <operator pos:line="20" pos:column="42">==<pos:position pos:line="20" pos:column="44"/></operator> <literal type="char" pos:line="20" pos:column="45">'-'<pos:position pos:line="20" pos:column="48"/></literal></expr>;<pos:position pos:line="20" pos:column="49"/></condition> <incr><expr><name pos:line="20" pos:column="50">i<pos:position pos:line="20" pos:column="51"/></name><operator pos:line="20" pos:column="51">++<pos:position pos:line="20" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="54"/></control> <block pos:line="20" pos:column="55">{
		<decl_stmt><decl><type><specifier pos:line="21" pos:column="17">const<pos:position pos:line="21" pos:column="22"/></specifier> <name pos:line="21" pos:column="23">char<pos:position pos:line="21" pos:column="27"/></name> <modifier pos:line="21" pos:column="28">*<pos:position pos:line="21" pos:column="29"/></modifier></type><name pos:line="21" pos:column="29">arg<pos:position pos:line="21" pos:column="32"/></name> <init pos:line="21" pos:column="33">= <expr><name><name pos:line="21" pos:column="35">argv<pos:position pos:line="21" pos:column="39"/></name><index pos:line="21" pos:column="39">[<expr><name pos:line="21" pos:column="40">i<pos:position pos:line="21" pos:column="41"/></name></expr>]<pos:position pos:line="21" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="21" pos:column="43"/></decl_stmt>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><call><name pos:line="23" pos:column="21">starts_with<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">arg<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="38">"--upload-pack="<pos:position pos:line="23" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="56"/></condition><then pos:line="23" pos:column="56"> <block pos:line="23" pos:column="57">{
			<expr_stmt><expr><name><name pos:line="24" pos:column="25">args<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">.<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="30">uploadpack<pos:position pos:line="24" pos:column="40"/></name></name> <operator pos:line="24" pos:column="41">=<pos:position pos:line="24" pos:column="42"/></operator> <name pos:line="24" pos:column="43">arg<pos:position pos:line="24" pos:column="46"/></name> <operator pos:line="24" pos:column="47">+<pos:position pos:line="24" pos:column="48"/></operator> <literal type="number" pos:line="24" pos:column="49">14<pos:position pos:line="24" pos:column="51"/></literal></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt>
			<continue pos:line="25" pos:column="25">continue;<pos:position pos:line="25" pos:column="34"/></continue>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">starts_with<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><name pos:line="27" pos:column="33">arg<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="38">"--exec="<pos:position pos:line="27" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="49"/></condition><then pos:line="27" pos:column="49"> <block pos:line="27" pos:column="50">{
			<expr_stmt><expr><name><name pos:line="28" pos:column="25">args<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">.<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="30">uploadpack<pos:position pos:line="28" pos:column="40"/></name></name> <operator pos:line="28" pos:column="41">=<pos:position pos:line="28" pos:column="42"/></operator> <name pos:line="28" pos:column="43">arg<pos:position pos:line="28" pos:column="46"/></name> <operator pos:line="28" pos:column="47">+<pos:position pos:line="28" pos:column="48"/></operator> <literal type="number" pos:line="28" pos:column="49">7<pos:position pos:line="28" pos:column="50"/></literal></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
			<continue pos:line="29" pos:column="25">continue;<pos:position pos:line="29" pos:column="34"/></continue>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><operator pos:line="31" pos:column="21">!<pos:position pos:line="31" pos:column="22"/></operator><call><name pos:line="31" pos:column="22">strcmp<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">(<argument><expr><literal type="string" pos:line="31" pos:column="29">"--quiet"<pos:position pos:line="31" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="40">arg<pos:position pos:line="31" pos:column="43"/></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call> <operator pos:line="31" pos:column="45">||<pos:position pos:line="31" pos:column="47"/></operator> <operator pos:line="31" pos:column="48">!<pos:position pos:line="31" pos:column="49"/></operator><call><name pos:line="31" pos:column="49">strcmp<pos:position pos:line="31" pos:column="55"/></name><argument_list pos:line="31" pos:column="55">(<argument><expr><literal type="string" pos:line="31" pos:column="56">"-q"<pos:position pos:line="31" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="62">arg<pos:position pos:line="31" pos:column="65"/></name></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="67"/></condition><then pos:line="31" pos:column="67"> <block pos:line="31" pos:column="68">{
			<expr_stmt><expr><name><name pos:line="32" pos:column="25">args<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">.<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="30">quiet<pos:position pos:line="32" pos:column="35"/></name></name> <operator pos:line="32" pos:column="36">=<pos:position pos:line="32" pos:column="37"/></operator> <literal type="number" pos:line="32" pos:column="38">1<pos:position pos:line="32" pos:column="39"/></literal></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>
			<continue pos:line="33" pos:column="25">continue;<pos:position pos:line="33" pos:column="34"/></continue>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">!<pos:position pos:line="35" pos:column="22"/></operator><call><name pos:line="35" pos:column="22">strcmp<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><literal type="string" pos:line="35" pos:column="29">"--keep"<pos:position pos:line="35" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="39">arg<pos:position pos:line="35" pos:column="42"/></name></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call> <operator pos:line="35" pos:column="44">||<pos:position pos:line="35" pos:column="46"/></operator> <operator pos:line="35" pos:column="47">!<pos:position pos:line="35" pos:column="48"/></operator><call><name pos:line="35" pos:column="48">strcmp<pos:position pos:line="35" pos:column="54"/></name><argument_list pos:line="35" pos:column="54">(<argument><expr><literal type="string" pos:line="35" pos:column="55">"-k"<pos:position pos:line="35" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="61">arg<pos:position pos:line="35" pos:column="64"/></name></expr></argument>)<pos:position pos:line="35" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="66"/></condition><then pos:line="35" pos:column="66"> <block pos:line="35" pos:column="67">{
			<expr_stmt><expr><name><name pos:line="36" pos:column="25">args<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">.<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="30">lock_pack<pos:position pos:line="36" pos:column="39"/></name></name> <operator pos:line="36" pos:column="40">=<pos:position pos:line="36" pos:column="41"/></operator> <name><name pos:line="36" pos:column="42">args<pos:position pos:line="36" pos:column="46"/></name><operator pos:line="36" pos:column="46">.<pos:position pos:line="36" pos:column="47"/></operator><name pos:line="36" pos:column="47">keep_pack<pos:position pos:line="36" pos:column="56"/></name></name></expr>;<pos:position pos:line="36" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="37" pos:column="25">args<pos:position pos:line="37" pos:column="29"/></name><operator pos:line="37" pos:column="29">.<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="30">keep_pack<pos:position pos:line="37" pos:column="39"/></name></name> <operator pos:line="37" pos:column="40">=<pos:position pos:line="37" pos:column="41"/></operator> <literal type="number" pos:line="37" pos:column="42">1<pos:position pos:line="37" pos:column="43"/></literal></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
			<continue pos:line="38" pos:column="25">continue;<pos:position pos:line="38" pos:column="34"/></continue>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">!<pos:position pos:line="40" pos:column="22"/></operator><call><name pos:line="40" pos:column="22">strcmp<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><literal type="string" pos:line="40" pos:column="29">"--thin"<pos:position pos:line="40" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="39">arg<pos:position pos:line="40" pos:column="42"/></name></expr></argument>)<pos:position pos:line="40" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="44"/></condition><then pos:line="40" pos:column="44"> <block pos:line="40" pos:column="45">{
			<expr_stmt><expr><name><name pos:line="41" pos:column="25">args<pos:position pos:line="41" pos:column="29"/></name><operator pos:line="41" pos:column="29">.<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">use_thin_pack<pos:position pos:line="41" pos:column="43"/></name></name> <operator pos:line="41" pos:column="44">=<pos:position pos:line="41" pos:column="45"/></operator> <literal type="number" pos:line="41" pos:column="46">1<pos:position pos:line="41" pos:column="47"/></literal></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt>
			<continue pos:line="42" pos:column="25">continue;<pos:position pos:line="42" pos:column="34"/></continue>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><operator pos:line="44" pos:column="21">!<pos:position pos:line="44" pos:column="22"/></operator><call><name pos:line="44" pos:column="22">strcmp<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><literal type="string" pos:line="44" pos:column="29">"--include-tag"<pos:position pos:line="44" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="46">arg<pos:position pos:line="44" pos:column="49"/></name></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="51"/></condition><then pos:line="44" pos:column="51"> <block pos:line="44" pos:column="52">{
			<expr_stmt><expr><name><name pos:line="45" pos:column="25">args<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">.<pos:position pos:line="45" pos:column="30"/></operator><name pos:line="45" pos:column="30">include_tag<pos:position pos:line="45" pos:column="41"/></name></name> <operator pos:line="45" pos:column="42">=<pos:position pos:line="45" pos:column="43"/></operator> <literal type="number" pos:line="45" pos:column="44">1<pos:position pos:line="45" pos:column="45"/></literal></expr>;<pos:position pos:line="45" pos:column="46"/></expr_stmt>
			<continue pos:line="46" pos:column="25">continue;<pos:position pos:line="46" pos:column="34"/></continue>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><operator pos:line="48" pos:column="21">!<pos:position pos:line="48" pos:column="22"/></operator><call><name pos:line="48" pos:column="22">strcmp<pos:position pos:line="48" pos:column="28"/></name><argument_list pos:line="48" pos:column="28">(<argument><expr><literal type="string" pos:line="48" pos:column="29">"--all"<pos:position pos:line="48" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="38">arg<pos:position pos:line="48" pos:column="41"/></name></expr></argument>)<pos:position pos:line="48" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="43"/></condition><then pos:line="48" pos:column="43"> <block pos:line="48" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="49" pos:column="25">args<pos:position pos:line="49" pos:column="29"/></name><operator pos:line="49" pos:column="29">.<pos:position pos:line="49" pos:column="30"/></operator><name pos:line="49" pos:column="30">fetch_all<pos:position pos:line="49" pos:column="39"/></name></name> <operator pos:line="49" pos:column="40">=<pos:position pos:line="49" pos:column="41"/></operator> <literal type="number" pos:line="49" pos:column="42">1<pos:position pos:line="49" pos:column="43"/></literal></expr>;<pos:position pos:line="49" pos:column="44"/></expr_stmt>
			<continue pos:line="50" pos:column="25">continue;<pos:position pos:line="50" pos:column="34"/></continue>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><operator pos:line="52" pos:column="21">!<pos:position pos:line="52" pos:column="22"/></operator><call><name pos:line="52" pos:column="22">strcmp<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">(<argument><expr><literal type="string" pos:line="52" pos:column="29">"--stdin"<pos:position pos:line="52" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="40">arg<pos:position pos:line="52" pos:column="43"/></name></expr></argument>)<pos:position pos:line="52" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="45"/></condition><then pos:line="52" pos:column="45"> <block pos:line="52" pos:column="46">{
			<expr_stmt><expr><name><name pos:line="53" pos:column="25">args<pos:position pos:line="53" pos:column="29"/></name><operator pos:line="53" pos:column="29">.<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="30">stdin_refs<pos:position pos:line="53" pos:column="40"/></name></name> <operator pos:line="53" pos:column="41">=<pos:position pos:line="53" pos:column="42"/></operator> <literal type="number" pos:line="53" pos:column="43">1<pos:position pos:line="53" pos:column="44"/></literal></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt>
			<continue pos:line="54" pos:column="25">continue;<pos:position pos:line="54" pos:column="34"/></continue>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><operator pos:line="56" pos:column="21">!<pos:position pos:line="56" pos:column="22"/></operator><call><name pos:line="56" pos:column="22">strcmp<pos:position pos:line="56" pos:column="28"/></name><argument_list pos:line="56" pos:column="28">(<argument><expr><literal type="string" pos:line="56" pos:column="29">"--diag-url"<pos:position pos:line="56" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="43">arg<pos:position pos:line="56" pos:column="46"/></name></expr></argument>)<pos:position pos:line="56" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="48"/></condition><then pos:line="56" pos:column="48"> <block pos:line="56" pos:column="49">{
			<expr_stmt><expr><name><name pos:line="57" pos:column="25">args<pos:position pos:line="57" pos:column="29"/></name><operator pos:line="57" pos:column="29">.<pos:position pos:line="57" pos:column="30"/></operator><name pos:line="57" pos:column="30">diag_url<pos:position pos:line="57" pos:column="38"/></name></name> <operator pos:line="57" pos:column="39">=<pos:position pos:line="57" pos:column="40"/></operator> <literal type="number" pos:line="57" pos:column="41">1<pos:position pos:line="57" pos:column="42"/></literal></expr>;<pos:position pos:line="57" pos:column="43"/></expr_stmt>
			<continue pos:line="58" pos:column="25">continue;<pos:position pos:line="58" pos:column="34"/></continue>
		}<pos:position pos:line="59" pos:column="18"/></block></then></if>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><operator pos:line="60" pos:column="21">!<pos:position pos:line="60" pos:column="22"/></operator><call><name pos:line="60" pos:column="22">strcmp<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><literal type="string" pos:line="60" pos:column="29">"-v"<pos:position pos:line="60" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="35">arg<pos:position pos:line="60" pos:column="38"/></name></expr></argument>)<pos:position pos:line="60" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="40"/></condition><then pos:line="60" pos:column="40"> <block pos:line="60" pos:column="41">{
			<expr_stmt><expr><name><name pos:line="61" pos:column="25">args<pos:position pos:line="61" pos:column="29"/></name><operator pos:line="61" pos:column="29">.<pos:position pos:line="61" pos:column="30"/></operator><name pos:line="61" pos:column="30">verbose<pos:position pos:line="61" pos:column="37"/></name></name> <operator pos:line="61" pos:column="38">=<pos:position pos:line="61" pos:column="39"/></operator> <literal type="number" pos:line="61" pos:column="40">1<pos:position pos:line="61" pos:column="41"/></literal></expr>;<pos:position pos:line="61" pos:column="42"/></expr_stmt>
			<continue pos:line="62" pos:column="25">continue;<pos:position pos:line="62" pos:column="34"/></continue>
		}<pos:position pos:line="63" pos:column="18"/></block></then></if>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><call><name pos:line="64" pos:column="21">starts_with<pos:position pos:line="64" pos:column="32"/></name><argument_list pos:line="64" pos:column="32">(<argument><expr><name pos:line="64" pos:column="33">arg<pos:position pos:line="64" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="38">"--depth="<pos:position pos:line="64" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="50"/></condition><then pos:line="64" pos:column="50"> <block pos:line="64" pos:column="51">{
			<expr_stmt><expr><name><name pos:line="65" pos:column="25">args<pos:position pos:line="65" pos:column="29"/></name><operator pos:line="65" pos:column="29">.<pos:position pos:line="65" pos:column="30"/></operator><name pos:line="65" pos:column="30">depth<pos:position pos:line="65" pos:column="35"/></name></name> <operator pos:line="65" pos:column="36">=<pos:position pos:line="65" pos:column="37"/></operator> <call><name pos:line="65" pos:column="38">strtol<pos:position pos:line="65" pos:column="44"/></name><argument_list pos:line="65" pos:column="44">(<argument><expr><name pos:line="65" pos:column="45">arg<pos:position pos:line="65" pos:column="48"/></name> <operator pos:line="65" pos:column="49">+<pos:position pos:line="65" pos:column="50"/></operator> <literal type="number" pos:line="65" pos:column="51">8<pos:position pos:line="65" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="54">NULL<pos:position pos:line="65" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="60">0<pos:position pos:line="65" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="63"/></expr_stmt>
			<continue pos:line="66" pos:column="25">continue;<pos:position pos:line="66" pos:column="34"/></continue>
		}<pos:position pos:line="67" pos:column="18"/></block></then></if>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><operator pos:line="68" pos:column="21">!<pos:position pos:line="68" pos:column="22"/></operator><call><name pos:line="68" pos:column="22">strcmp<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><literal type="string" pos:line="68" pos:column="29">"--no-progress"<pos:position pos:line="68" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="46">arg<pos:position pos:line="68" pos:column="49"/></name></expr></argument>)<pos:position pos:line="68" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="51"/></condition><then pos:line="68" pos:column="51"> <block pos:line="68" pos:column="52">{
			<expr_stmt><expr><name><name pos:line="69" pos:column="25">args<pos:position pos:line="69" pos:column="29"/></name><operator pos:line="69" pos:column="29">.<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="30">no_progress<pos:position pos:line="69" pos:column="41"/></name></name> <operator pos:line="69" pos:column="42">=<pos:position pos:line="69" pos:column="43"/></operator> <literal type="number" pos:line="69" pos:column="44">1<pos:position pos:line="69" pos:column="45"/></literal></expr>;<pos:position pos:line="69" pos:column="46"/></expr_stmt>
			<continue pos:line="70" pos:column="25">continue;<pos:position pos:line="70" pos:column="34"/></continue>
		}<pos:position pos:line="71" pos:column="18"/></block></then></if>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><operator pos:line="72" pos:column="21">!<pos:position pos:line="72" pos:column="22"/></operator><call><name pos:line="72" pos:column="22">strcmp<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">(<argument><expr><literal type="string" pos:line="72" pos:column="29">"--stateless-rpc"<pos:position pos:line="72" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="48">arg<pos:position pos:line="72" pos:column="51"/></name></expr></argument>)<pos:position pos:line="72" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="53"/></condition><then pos:line="72" pos:column="53"> <block pos:line="72" pos:column="54">{
			<expr_stmt><expr><name><name pos:line="73" pos:column="25">args<pos:position pos:line="73" pos:column="29"/></name><operator pos:line="73" pos:column="29">.<pos:position pos:line="73" pos:column="30"/></operator><name pos:line="73" pos:column="30">stateless_rpc<pos:position pos:line="73" pos:column="43"/></name></name> <operator pos:line="73" pos:column="44">=<pos:position pos:line="73" pos:column="45"/></operator> <literal type="number" pos:line="73" pos:column="46">1<pos:position pos:line="73" pos:column="47"/></literal></expr>;<pos:position pos:line="73" pos:column="48"/></expr_stmt>
			<continue pos:line="74" pos:column="25">continue;<pos:position pos:line="74" pos:column="34"/></continue>
		}<pos:position pos:line="75" pos:column="18"/></block></then></if>
		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><operator pos:line="76" pos:column="21">!<pos:position pos:line="76" pos:column="22"/></operator><call><name pos:line="76" pos:column="22">strcmp<pos:position pos:line="76" pos:column="28"/></name><argument_list pos:line="76" pos:column="28">(<argument><expr><literal type="string" pos:line="76" pos:column="29">"--lock-pack"<pos:position pos:line="76" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="44">arg<pos:position pos:line="76" pos:column="47"/></name></expr></argument>)<pos:position pos:line="76" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="49"/></condition><then pos:line="76" pos:column="49"> <block pos:line="76" pos:column="50">{
			<expr_stmt><expr><name><name pos:line="77" pos:column="25">args<pos:position pos:line="77" pos:column="29"/></name><operator pos:line="77" pos:column="29">.<pos:position pos:line="77" pos:column="30"/></operator><name pos:line="77" pos:column="30">lock_pack<pos:position pos:line="77" pos:column="39"/></name></name> <operator pos:line="77" pos:column="40">=<pos:position pos:line="77" pos:column="41"/></operator> <literal type="number" pos:line="77" pos:column="42">1<pos:position pos:line="77" pos:column="43"/></literal></expr>;<pos:position pos:line="77" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="78" pos:column="25">pack_lockfile_ptr<pos:position pos:line="78" pos:column="42"/></name> <operator pos:line="78" pos:column="43">=<pos:position pos:line="78" pos:column="44"/></operator> <operator pos:line="78" pos:column="45">&amp;<pos:position pos:line="78" pos:column="50"/></operator><name pos:line="78" pos:column="46">pack_lockfile<pos:position pos:line="78" pos:column="59"/></name></expr>;<pos:position pos:line="78" pos:column="60"/></expr_stmt>
			<continue pos:line="79" pos:column="25">continue;<pos:position pos:line="79" pos:column="34"/></continue>
		}<pos:position pos:line="80" pos:column="18"/></block></then></if>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><operator pos:line="81" pos:column="21">!<pos:position pos:line="81" pos:column="22"/></operator><call><name pos:line="81" pos:column="22">strcmp<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><literal type="string" pos:line="81" pos:column="29">"--check-self-contained-and-connected"<pos:position pos:line="81" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="69">arg<pos:position pos:line="81" pos:column="72"/></name></expr></argument>)<pos:position pos:line="81" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="74"/></condition><then pos:line="81" pos:column="74"> <block pos:line="81" pos:column="75">{
			<expr_stmt><expr><name><name pos:line="82" pos:column="25">args<pos:position pos:line="82" pos:column="29"/></name><operator pos:line="82" pos:column="29">.<pos:position pos:line="82" pos:column="30"/></operator><name pos:line="82" pos:column="30">check_self_contained_and_connected<pos:position pos:line="82" pos:column="64"/></name></name> <operator pos:line="82" pos:column="65">=<pos:position pos:line="82" pos:column="66"/></operator> <literal type="number" pos:line="82" pos:column="67">1<pos:position pos:line="82" pos:column="68"/></literal></expr>;<pos:position pos:line="82" pos:column="69"/></expr_stmt>
			<continue pos:line="83" pos:column="25">continue;<pos:position pos:line="83" pos:column="34"/></continue>
		}<pos:position pos:line="84" pos:column="18"/></block></then></if>
		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><operator pos:line="85" pos:column="21">!<pos:position pos:line="85" pos:column="22"/></operator><call><name pos:line="85" pos:column="22">strcmp<pos:position pos:line="85" pos:column="28"/></name><argument_list pos:line="85" pos:column="28">(<argument><expr><literal type="string" pos:line="85" pos:column="29">"--cloning"<pos:position pos:line="85" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="42">arg<pos:position pos:line="85" pos:column="45"/></name></expr></argument>)<pos:position pos:line="85" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="47"/></condition><then pos:line="85" pos:column="47"> <block pos:line="85" pos:column="48">{
			<expr_stmt><expr><name><name pos:line="86" pos:column="25">args<pos:position pos:line="86" pos:column="29"/></name><operator pos:line="86" pos:column="29">.<pos:position pos:line="86" pos:column="30"/></operator><name pos:line="86" pos:column="30">cloning<pos:position pos:line="86" pos:column="37"/></name></name> <operator pos:line="86" pos:column="38">=<pos:position pos:line="86" pos:column="39"/></operator> <literal type="number" pos:line="86" pos:column="40">1<pos:position pos:line="86" pos:column="41"/></literal></expr>;<pos:position pos:line="86" pos:column="42"/></expr_stmt>
			<continue pos:line="87" pos:column="25">continue;<pos:position pos:line="87" pos:column="34"/></continue>
		}<pos:position pos:line="88" pos:column="18"/></block></then></if>
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><operator pos:line="89" pos:column="21">!<pos:position pos:line="89" pos:column="22"/></operator><call><name pos:line="89" pos:column="22">strcmp<pos:position pos:line="89" pos:column="28"/></name><argument_list pos:line="89" pos:column="28">(<argument><expr><literal type="string" pos:line="89" pos:column="29">"--update-shallow"<pos:position pos:line="89" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="49">arg<pos:position pos:line="89" pos:column="52"/></name></expr></argument>)<pos:position pos:line="89" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="54"/></condition><then pos:line="89" pos:column="54"> <block pos:line="89" pos:column="55">{
			<expr_stmt><expr><name><name pos:line="90" pos:column="25">args<pos:position pos:line="90" pos:column="29"/></name><operator pos:line="90" pos:column="29">.<pos:position pos:line="90" pos:column="30"/></operator><name pos:line="90" pos:column="30">update_shallow<pos:position pos:line="90" pos:column="44"/></name></name> <operator pos:line="90" pos:column="45">=<pos:position pos:line="90" pos:column="46"/></operator> <literal type="number" pos:line="90" pos:column="47">1<pos:position pos:line="90" pos:column="48"/></literal></expr>;<pos:position pos:line="90" pos:column="49"/></expr_stmt>
			<continue pos:line="91" pos:column="25">continue;<pos:position pos:line="91" pos:column="34"/></continue>
		}<pos:position pos:line="92" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">usage<pos:position pos:line="93" pos:column="22"/></name><argument_list pos:line="93" pos:column="22">(<argument><expr><name pos:line="93" pos:column="23">fetch_pack_usage<pos:position pos:line="93" pos:column="39"/></name></expr></argument>)<pos:position pos:line="93" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="94" pos:column="10"/></block></for>

	<if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><name pos:line="96" pos:column="13">i<pos:position pos:line="96" pos:column="14"/></name> <operator pos:line="96" pos:column="15">&lt;<pos:position pos:line="96" pos:column="19"/></operator> <name pos:line="96" pos:column="17">argc<pos:position pos:line="96" pos:column="21"/></name></expr>)<pos:position pos:line="96" pos:column="22"/></condition><then pos:line="96" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name pos:line="97" pos:column="17">dest<pos:position pos:line="97" pos:column="21"/></name> <operator pos:line="97" pos:column="22">=<pos:position pos:line="97" pos:column="23"/></operator> <name><name pos:line="97" pos:column="24">argv<pos:position pos:line="97" pos:column="28"/></name><index pos:line="97" pos:column="28">[<expr><name pos:line="97" pos:column="29">i<pos:position pos:line="97" pos:column="30"/></name><operator pos:line="97" pos:column="30">++<pos:position pos:line="97" pos:column="32"/></operator></expr>]<pos:position pos:line="97" pos:column="33"/></index></name></expr>;<pos:position pos:line="97" pos:column="34"/></expr_stmt></block></then>
	<else pos:line="98" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="99" pos:column="17">usage<pos:position pos:line="99" pos:column="22"/></name><argument_list pos:line="99" pos:column="22">(<argument><expr><name pos:line="99" pos:column="23">fetch_pack_usage<pos:position pos:line="99" pos:column="39"/></name></expr></argument>)<pos:position pos:line="99" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="41"/></expr_stmt></block></else></if>

	<comment type="block" pos:line="101" pos:column="9">/*
	 * Copy refs from cmdline to growable list, then append any
	 * refs from the standard input:
	 */</comment>
	<for pos:line="105" pos:column="9">for <control pos:line="105" pos:column="13">(<init pos:line="105" pos:column="14">;<pos:position pos:line="105" pos:column="15"/></init> <condition><expr><name pos:line="105" pos:column="16">i<pos:position pos:line="105" pos:column="17"/></name> <operator pos:line="105" pos:column="18">&lt;<pos:position pos:line="105" pos:column="22"/></operator> <name pos:line="105" pos:column="20">argc<pos:position pos:line="105" pos:column="24"/></name></expr>;<pos:position pos:line="105" pos:column="25"/></condition> <incr><expr><name pos:line="105" pos:column="26">i<pos:position pos:line="105" pos:column="27"/></name><operator pos:line="105" pos:column="27">++<pos:position pos:line="105" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="105" pos:column="30"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="106" pos:column="17">add_sought_entry<pos:position pos:line="106" pos:column="33"/></name><argument_list pos:line="106" pos:column="33">(<argument><expr><operator pos:line="106" pos:column="34">&amp;<pos:position pos:line="106" pos:column="39"/></operator><name pos:line="106" pos:column="35">sought<pos:position pos:line="106" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="43">&amp;<pos:position pos:line="106" pos:column="48"/></operator><name pos:line="106" pos:column="44">nr_sought<pos:position pos:line="106" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="55">&amp;<pos:position pos:line="106" pos:column="60"/></operator><name pos:line="106" pos:column="56">alloc_sought<pos:position pos:line="106" pos:column="68"/></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="70">argv<pos:position pos:line="106" pos:column="74"/></name><index pos:line="106" pos:column="74">[<expr><name pos:line="106" pos:column="75">i<pos:position pos:line="106" pos:column="76"/></name></expr>]<pos:position pos:line="106" pos:column="77"/></index></name></expr></argument>)<pos:position pos:line="106" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="79"/></expr_stmt></block></for>
	<if pos:line="107" pos:column="9">if <condition pos:line="107" pos:column="12">(<expr><name><name pos:line="107" pos:column="13">args<pos:position pos:line="107" pos:column="17"/></name><operator pos:line="107" pos:column="17">.<pos:position pos:line="107" pos:column="18"/></operator><name pos:line="107" pos:column="18">stdin_refs<pos:position pos:line="107" pos:column="28"/></name></name></expr>)<pos:position pos:line="107" pos:column="29"/></condition><then pos:line="107" pos:column="29"> <block pos:line="107" pos:column="30">{
		<if pos:line="108" pos:column="17">if <condition pos:line="108" pos:column="20">(<expr><name><name pos:line="108" pos:column="21">args<pos:position pos:line="108" pos:column="25"/></name><operator pos:line="108" pos:column="25">.<pos:position pos:line="108" pos:column="26"/></operator><name pos:line="108" pos:column="26">stateless_rpc<pos:position pos:line="108" pos:column="39"/></name></name></expr>)<pos:position pos:line="108" pos:column="40"/></condition><then pos:line="108" pos:column="40"> <block pos:line="108" pos:column="41">{
			<comment type="block" pos:line="109" pos:column="25">/* in stateless RPC mode we use pkt-line to read
			 * from stdin, until we get a flush packet
			 */</comment>
			<for pos:line="112" pos:column="25">for <control pos:line="112" pos:column="29">(<init pos:line="112" pos:column="30">;<pos:position pos:line="112" pos:column="31"/></init><condition pos:line="112" pos:column="31">;<pos:position pos:line="112" pos:column="32"/></condition><incr/>)<pos:position pos:line="112" pos:column="33"/></control> <block pos:line="112" pos:column="34">{
				<decl_stmt><decl><type><name pos:line="113" pos:column="33">char<pos:position pos:line="113" pos:column="37"/></name> <modifier pos:line="113" pos:column="38">*<pos:position pos:line="113" pos:column="39"/></modifier></type><name pos:line="113" pos:column="39">line<pos:position pos:line="113" pos:column="43"/></name> <init pos:line="113" pos:column="44">= <expr><call><name pos:line="113" pos:column="46">packet_read_line<pos:position pos:line="113" pos:column="62"/></name><argument_list pos:line="113" pos:column="62">(<argument><expr><literal type="number" pos:line="113" pos:column="63">0<pos:position pos:line="113" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="66">NULL<pos:position pos:line="113" pos:column="70"/></name></expr></argument>)<pos:position pos:line="113" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="113" pos:column="72"/></decl_stmt>
				<if pos:line="114" pos:column="33">if <condition pos:line="114" pos:column="36">(<expr><operator pos:line="114" pos:column="37">!<pos:position pos:line="114" pos:column="38"/></operator><name pos:line="114" pos:column="38">line<pos:position pos:line="114" pos:column="42"/></name></expr>)<pos:position pos:line="114" pos:column="43"/></condition><then pos:line="114" pos:column="43">
					<block type="pseudo"><break pos:line="115" pos:column="41">break;<pos:position pos:line="115" pos:column="47"/></break></block></then></if>
				<expr_stmt><expr><call><name pos:line="116" pos:column="33">add_sought_entry<pos:position pos:line="116" pos:column="49"/></name><argument_list pos:line="116" pos:column="49">(<argument><expr><operator pos:line="116" pos:column="50">&amp;<pos:position pos:line="116" pos:column="55"/></operator><name pos:line="116" pos:column="51">sought<pos:position pos:line="116" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="116" pos:column="59">&amp;<pos:position pos:line="116" pos:column="64"/></operator><name pos:line="116" pos:column="60">nr_sought<pos:position pos:line="116" pos:column="69"/></name></expr></argument>,  <argument><expr><operator pos:line="116" pos:column="72">&amp;<pos:position pos:line="116" pos:column="77"/></operator><name pos:line="116" pos:column="73">alloc_sought<pos:position pos:line="116" pos:column="85"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="87">line<pos:position pos:line="116" pos:column="91"/></name></expr></argument>)<pos:position pos:line="116" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="93"/></expr_stmt>
			}<pos:position pos:line="117" pos:column="26"/></block></for>
		}<pos:position pos:line="118" pos:column="18"/></block></then>
		<else pos:line="119" pos:column="17">else <block pos:line="119" pos:column="22">{
			<comment type="block" pos:line="120" pos:column="25">/* read from stdin one ref per line, until EOF */</comment>
			<decl_stmt><decl><type><name><name pos:line="121" pos:column="25">struct<pos:position pos:line="121" pos:column="31"/></name> <name pos:line="121" pos:column="32">strbuf<pos:position pos:line="121" pos:column="38"/></name></name></type> <name pos:line="121" pos:column="39">line<pos:position pos:line="121" pos:column="43"/></name> <init pos:line="121" pos:column="44">= <expr><name pos:line="121" pos:column="46">STRBUF_INIT<pos:position pos:line="121" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="121" pos:column="58"/></decl_stmt>
			<while pos:line="122" pos:column="25">while <condition pos:line="122" pos:column="31">(<expr><call><name pos:line="122" pos:column="32">strbuf_getline<pos:position pos:line="122" pos:column="46"/></name><argument_list pos:line="122" pos:column="46">(<argument><expr><operator pos:line="122" pos:column="47">&amp;<pos:position pos:line="122" pos:column="52"/></operator><name pos:line="122" pos:column="48">line<pos:position pos:line="122" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="54">stdin<pos:position pos:line="122" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="122" pos:column="61">'\n'<pos:position pos:line="122" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="66"/></argument_list></call> <operator pos:line="122" pos:column="67">!=<pos:position pos:line="122" pos:column="69"/></operator> <name pos:line="122" pos:column="70">EOF<pos:position pos:line="122" pos:column="73"/></name></expr>)<pos:position pos:line="122" pos:column="74"/></condition>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="123" pos:column="33">add_sought_entry<pos:position pos:line="123" pos:column="49"/></name><argument_list pos:line="123" pos:column="49">(<argument><expr><operator pos:line="123" pos:column="50">&amp;<pos:position pos:line="123" pos:column="55"/></operator><name pos:line="123" pos:column="51">sought<pos:position pos:line="123" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="123" pos:column="59">&amp;<pos:position pos:line="123" pos:column="64"/></operator><name pos:line="123" pos:column="60">nr_sought<pos:position pos:line="123" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="123" pos:column="71">&amp;<pos:position pos:line="123" pos:column="76"/></operator><name pos:line="123" pos:column="72">alloc_sought<pos:position pos:line="123" pos:column="84"/></name></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="86">line<pos:position pos:line="123" pos:column="90"/></name><operator pos:line="123" pos:column="90">.<pos:position pos:line="123" pos:column="91"/></operator><name pos:line="123" pos:column="91">buf<pos:position pos:line="123" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="96"/></expr_stmt></block></while>
			<expr_stmt><expr><call><name pos:line="124" pos:column="25">strbuf_release<pos:position pos:line="124" pos:column="39"/></name><argument_list pos:line="124" pos:column="39">(<argument><expr><operator pos:line="124" pos:column="40">&amp;<pos:position pos:line="124" pos:column="45"/></operator><name pos:line="124" pos:column="41">line<pos:position pos:line="124" pos:column="45"/></name></expr></argument>)<pos:position pos:line="124" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="125" pos:column="18"/></block></else></if>
	}<pos:position pos:line="126" pos:column="10"/></block></then></if>

	<if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">(<expr><name><name pos:line="128" pos:column="13">args<pos:position pos:line="128" pos:column="17"/></name><operator pos:line="128" pos:column="17">.<pos:position pos:line="128" pos:column="18"/></operator><name pos:line="128" pos:column="18">stateless_rpc<pos:position pos:line="128" pos:column="31"/></name></name></expr>)<pos:position pos:line="128" pos:column="32"/></condition><then pos:line="128" pos:column="32"> <block pos:line="128" pos:column="33">{
		<expr_stmt><expr><name pos:line="129" pos:column="17">conn<pos:position pos:line="129" pos:column="21"/></name> <operator pos:line="129" pos:column="22">=<pos:position pos:line="129" pos:column="23"/></operator> <name pos:line="129" pos:column="24">NULL<pos:position pos:line="129" pos:column="28"/></name></expr>;<pos:position pos:line="129" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="130" pos:column="17">fd<pos:position pos:line="130" pos:column="19"/></name><index pos:line="130" pos:column="19">[<expr><literal type="number" pos:line="130" pos:column="20">0<pos:position pos:line="130" pos:column="21"/></literal></expr>]<pos:position pos:line="130" pos:column="22"/></index></name> <operator pos:line="130" pos:column="23">=<pos:position pos:line="130" pos:column="24"/></operator> <literal type="number" pos:line="130" pos:column="25">0<pos:position pos:line="130" pos:column="26"/></literal></expr>;<pos:position pos:line="130" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="131" pos:column="17">fd<pos:position pos:line="131" pos:column="19"/></name><index pos:line="131" pos:column="19">[<expr><literal type="number" pos:line="131" pos:column="20">1<pos:position pos:line="131" pos:column="21"/></literal></expr>]<pos:position pos:line="131" pos:column="22"/></index></name> <operator pos:line="131" pos:column="23">=<pos:position pos:line="131" pos:column="24"/></operator> <literal type="number" pos:line="131" pos:column="25">1<pos:position pos:line="131" pos:column="26"/></literal></expr>;<pos:position pos:line="131" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="132" pos:column="10"/></block></then> <else pos:line="132" pos:column="11">else <block pos:line="132" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="133" pos:column="17">int<pos:position pos:line="133" pos:column="20"/></name></type> <name pos:line="133" pos:column="21">flags<pos:position pos:line="133" pos:column="26"/></name> <init pos:line="133" pos:column="27">= <expr><ternary><condition><expr><name><name pos:line="133" pos:column="29">args<pos:position pos:line="133" pos:column="33"/></name><operator pos:line="133" pos:column="33">.<pos:position pos:line="133" pos:column="34"/></operator><name pos:line="133" pos:column="34">verbose<pos:position pos:line="133" pos:column="41"/></name></name></expr> ?<pos:position pos:line="133" pos:column="43"/></condition><then pos:line="133" pos:column="43"> <expr><name pos:line="133" pos:column="44">CONNECT_VERBOSE<pos:position pos:line="133" pos:column="59"/></name></expr> <pos:position pos:line="133" pos:column="60"/></then><else pos:line="133" pos:column="60">: <expr><literal type="number" pos:line="133" pos:column="62">0<pos:position pos:line="133" pos:column="63"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="133" pos:column="64"/></decl_stmt>
		<if pos:line="134" pos:column="17">if <condition pos:line="134" pos:column="20">(<expr><name><name pos:line="134" pos:column="21">args<pos:position pos:line="134" pos:column="25"/></name><operator pos:line="134" pos:column="25">.<pos:position pos:line="134" pos:column="26"/></operator><name pos:line="134" pos:column="26">diag_url<pos:position pos:line="134" pos:column="34"/></name></name></expr>)<pos:position pos:line="134" pos:column="35"/></condition><then pos:line="134" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="135" pos:column="25">flags<pos:position pos:line="135" pos:column="30"/></name> <operator pos:line="135" pos:column="31">|=<pos:position pos:line="135" pos:column="33"/></operator> <name pos:line="135" pos:column="34">CONNECT_DIAG_URL<pos:position pos:line="135" pos:column="50"/></name></expr>;<pos:position pos:line="135" pos:column="51"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="136" pos:column="17">conn<pos:position pos:line="136" pos:column="21"/></name> <operator pos:line="136" pos:column="22">=<pos:position pos:line="136" pos:column="23"/></operator> <call><name pos:line="136" pos:column="24">git_connect<pos:position pos:line="136" pos:column="35"/></name><argument_list pos:line="136" pos:column="35">(<argument><expr><name pos:line="136" pos:column="36">fd<pos:position pos:line="136" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="40">dest<pos:position pos:line="136" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="136" pos:column="46">args<pos:position pos:line="136" pos:column="50"/></name><operator pos:line="136" pos:column="50">.<pos:position pos:line="136" pos:column="51"/></operator><name pos:line="136" pos:column="51">uploadpack<pos:position pos:line="136" pos:column="61"/></name></name></expr></argument>,
				   <argument><expr><name pos:line="137" pos:column="36">flags<pos:position pos:line="137" pos:column="41"/></name></expr></argument>)<pos:position pos:line="137" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="43"/></expr_stmt>
		<if pos:line="138" pos:column="17">if <condition pos:line="138" pos:column="20">(<expr><operator pos:line="138" pos:column="21">!<pos:position pos:line="138" pos:column="22"/></operator><name pos:line="138" pos:column="22">conn<pos:position pos:line="138" pos:column="26"/></name></expr>)<pos:position pos:line="138" pos:column="27"/></condition><then pos:line="138" pos:column="27">
			<block type="pseudo"><return pos:line="139" pos:column="25">return <expr><ternary><condition><expr><name><name pos:line="139" pos:column="32">args<pos:position pos:line="139" pos:column="36"/></name><operator pos:line="139" pos:column="36">.<pos:position pos:line="139" pos:column="37"/></operator><name pos:line="139" pos:column="37">diag_url<pos:position pos:line="139" pos:column="45"/></name></name></expr> ?<pos:position pos:line="139" pos:column="47"/></condition><then pos:line="139" pos:column="47"> <expr><literal type="number" pos:line="139" pos:column="48">0<pos:position pos:line="139" pos:column="49"/></literal></expr> <pos:position pos:line="139" pos:column="50"/></then><else pos:line="139" pos:column="50">: <expr><literal type="number" pos:line="139" pos:column="52">1<pos:position pos:line="139" pos:column="53"/></literal></expr></else></ternary></expr>;<pos:position pos:line="139" pos:column="54"/></return></block></then></if>
	}<pos:position pos:line="140" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="141" pos:column="9">get_remote_heads<pos:position pos:line="141" pos:column="25"/></name><argument_list pos:line="141" pos:column="25">(<argument><expr><name><name pos:line="141" pos:column="26">fd<pos:position pos:line="141" pos:column="28"/></name><index pos:line="141" pos:column="28">[<expr><literal type="number" pos:line="141" pos:column="29">0<pos:position pos:line="141" pos:column="30"/></literal></expr>]<pos:position pos:line="141" pos:column="31"/></index></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="33">NULL<pos:position pos:line="141" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="141" pos:column="39">0<pos:position pos:line="141" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="141" pos:column="42">&amp;<pos:position pos:line="141" pos:column="47"/></operator><name pos:line="141" pos:column="43">ref<pos:position pos:line="141" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="141" pos:column="48">0<pos:position pos:line="141" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="51">NULL<pos:position pos:line="141" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="141" pos:column="57">&amp;<pos:position pos:line="141" pos:column="62"/></operator><name pos:line="141" pos:column="58">shallow<pos:position pos:line="141" pos:column="65"/></name></expr></argument>)<pos:position pos:line="141" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="67"/></expr_stmt>

	<expr_stmt><expr><name pos:line="143" pos:column="9">ref<pos:position pos:line="143" pos:column="12"/></name> <operator pos:line="143" pos:column="13">=<pos:position pos:line="143" pos:column="14"/></operator> <call><name pos:line="143" pos:column="15">fetch_pack<pos:position pos:line="143" pos:column="25"/></name><argument_list pos:line="143" pos:column="25">(<argument><expr><operator pos:line="143" pos:column="26">&amp;<pos:position pos:line="143" pos:column="31"/></operator><name pos:line="143" pos:column="27">args<pos:position pos:line="143" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="33">fd<pos:position pos:line="143" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="37">conn<pos:position pos:line="143" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="43">ref<pos:position pos:line="143" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="48">dest<pos:position pos:line="143" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="54">sought<pos:position pos:line="143" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="62">nr_sought<pos:position pos:line="143" pos:column="71"/></name></expr></argument>,
			 <argument><expr><operator pos:line="144" pos:column="26">&amp;<pos:position pos:line="144" pos:column="31"/></operator><name pos:line="144" pos:column="27">shallow<pos:position pos:line="144" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="36">pack_lockfile_ptr<pos:position pos:line="144" pos:column="53"/></name></expr></argument>)<pos:position pos:line="144" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="55"/></expr_stmt>
	<if pos:line="145" pos:column="9">if <condition pos:line="145" pos:column="12">(<expr><name pos:line="145" pos:column="13">pack_lockfile<pos:position pos:line="145" pos:column="26"/></name></expr>)<pos:position pos:line="145" pos:column="27"/></condition><then pos:line="145" pos:column="27"> <block pos:line="145" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="146" pos:column="17">printf<pos:position pos:line="146" pos:column="23"/></name><argument_list pos:line="146" pos:column="23">(<argument><expr><literal type="string" pos:line="146" pos:column="24">"lock %s\n"<pos:position pos:line="146" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="37">pack_lockfile<pos:position pos:line="146" pos:column="50"/></name></expr></argument>)<pos:position pos:line="146" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="147" pos:column="17">fflush<pos:position pos:line="147" pos:column="23"/></name><argument_list pos:line="147" pos:column="23">(<argument><expr><name pos:line="147" pos:column="24">stdout<pos:position pos:line="147" pos:column="30"/></name></expr></argument>)<pos:position pos:line="147" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="148" pos:column="10"/></block></then></if>
	<if pos:line="149" pos:column="9">if <condition pos:line="149" pos:column="12">(<expr><name><name pos:line="149" pos:column="13">args<pos:position pos:line="149" pos:column="17"/></name><operator pos:line="149" pos:column="17">.<pos:position pos:line="149" pos:column="18"/></operator><name pos:line="149" pos:column="18">check_self_contained_and_connected<pos:position pos:line="149" pos:column="52"/></name></name> <operator pos:line="149" pos:column="53">&amp;&amp;<pos:position pos:line="149" pos:column="63"/></operator>
	    <name><name pos:line="150" pos:column="13">args<pos:position pos:line="150" pos:column="17"/></name><operator pos:line="150" pos:column="17">.<pos:position pos:line="150" pos:column="18"/></operator><name pos:line="150" pos:column="18">self_contained_and_connected<pos:position pos:line="150" pos:column="46"/></name></name></expr>)<pos:position pos:line="150" pos:column="47"/></condition><then pos:line="150" pos:column="47"> <block pos:line="150" pos:column="48">{
		<expr_stmt><expr><call><name pos:line="151" pos:column="17">printf<pos:position pos:line="151" pos:column="23"/></name><argument_list pos:line="151" pos:column="23">(<argument><expr><literal type="string" pos:line="151" pos:column="24">"connectivity-ok\n"<pos:position pos:line="151" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="151" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="152" pos:column="17">fflush<pos:position pos:line="152" pos:column="23"/></name><argument_list pos:line="152" pos:column="23">(<argument><expr><name pos:line="152" pos:column="24">stdout<pos:position pos:line="152" pos:column="30"/></name></expr></argument>)<pos:position pos:line="152" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="153" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="154" pos:column="9">close<pos:position pos:line="154" pos:column="14"/></name><argument_list pos:line="154" pos:column="14">(<argument><expr><name><name pos:line="154" pos:column="15">fd<pos:position pos:line="154" pos:column="17"/></name><index pos:line="154" pos:column="17">[<expr><literal type="number" pos:line="154" pos:column="18">0<pos:position pos:line="154" pos:column="19"/></literal></expr>]<pos:position pos:line="154" pos:column="20"/></index></name></expr></argument>)<pos:position pos:line="154" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="155" pos:column="9">close<pos:position pos:line="155" pos:column="14"/></name><argument_list pos:line="155" pos:column="14">(<argument><expr><name><name pos:line="155" pos:column="15">fd<pos:position pos:line="155" pos:column="17"/></name><index pos:line="155" pos:column="17">[<expr><literal type="number" pos:line="155" pos:column="18">1<pos:position pos:line="155" pos:column="19"/></literal></expr>]<pos:position pos:line="155" pos:column="20"/></index></name></expr></argument>)<pos:position pos:line="155" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="22"/></expr_stmt>
	<if pos:line="156" pos:column="9">if <condition pos:line="156" pos:column="12">(<expr><call><name pos:line="156" pos:column="13">finish_connect<pos:position pos:line="156" pos:column="27"/></name><argument_list pos:line="156" pos:column="27">(<argument><expr><name pos:line="156" pos:column="28">conn<pos:position pos:line="156" pos:column="32"/></name></expr></argument>)<pos:position pos:line="156" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="156" pos:column="34"/></condition><then pos:line="156" pos:column="34">
		<block type="pseudo"><return pos:line="157" pos:column="17">return <expr><literal type="number" pos:line="157" pos:column="24">1<pos:position pos:line="157" pos:column="25"/></literal></expr>;<pos:position pos:line="157" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="159" pos:column="9">ret<pos:position pos:line="159" pos:column="12"/></name> <operator pos:line="159" pos:column="13">=<pos:position pos:line="159" pos:column="14"/></operator> <operator pos:line="159" pos:column="15">!<pos:position pos:line="159" pos:column="16"/></operator><name pos:line="159" pos:column="16">ref<pos:position pos:line="159" pos:column="19"/></name></expr>;<pos:position pos:line="159" pos:column="20"/></expr_stmt>

	<comment type="block" pos:line="161" pos:column="9">/*
	 * If the heads to pull were given, we should have consumed
	 * all of them by matching the remote.  Otherwise, 'git fetch
	 * remote no-such-ref' would silently succeed without issuing
	 * an error.
	 */</comment>
	<for pos:line="167" pos:column="9">for <control pos:line="167" pos:column="13">(<init><expr><name pos:line="167" pos:column="14">i<pos:position pos:line="167" pos:column="15"/></name> <operator pos:line="167" pos:column="16">=<pos:position pos:line="167" pos:column="17"/></operator> <literal type="number" pos:line="167" pos:column="18">0<pos:position pos:line="167" pos:column="19"/></literal></expr>;<pos:position pos:line="167" pos:column="20"/></init> <condition><expr><name pos:line="167" pos:column="21">i<pos:position pos:line="167" pos:column="22"/></name> <operator pos:line="167" pos:column="23">&lt;<pos:position pos:line="167" pos:column="27"/></operator> <name pos:line="167" pos:column="25">nr_sought<pos:position pos:line="167" pos:column="34"/></name></expr>;<pos:position pos:line="167" pos:column="35"/></condition> <incr><expr><name pos:line="167" pos:column="36">i<pos:position pos:line="167" pos:column="37"/></name><operator pos:line="167" pos:column="37">++<pos:position pos:line="167" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="167" pos:column="40"/></control> <block pos:line="167" pos:column="41">{
		<if pos:line="168" pos:column="17">if <condition pos:line="168" pos:column="20">(<expr><operator pos:line="168" pos:column="21">!<pos:position pos:line="168" pos:column="22"/></operator><name><name pos:line="168" pos:column="22">sought<pos:position pos:line="168" pos:column="28"/></name><index pos:line="168" pos:column="28">[<expr><name pos:line="168" pos:column="29">i<pos:position pos:line="168" pos:column="30"/></name></expr>]<pos:position pos:line="168" pos:column="31"/></index></name> <operator pos:line="168" pos:column="32">||<pos:position pos:line="168" pos:column="34"/></operator> <name><name pos:line="168" pos:column="35">sought<pos:position pos:line="168" pos:column="41"/></name><index pos:line="168" pos:column="41">[<expr><name pos:line="168" pos:column="42">i<pos:position pos:line="168" pos:column="43"/></name></expr>]<pos:position pos:line="168" pos:column="44"/></index></name><operator pos:line="168" pos:column="44">-&gt;<pos:position pos:line="168" pos:column="49"/></operator><name pos:line="168" pos:column="46">matched<pos:position pos:line="168" pos:column="53"/></name></expr>)<pos:position pos:line="168" pos:column="54"/></condition><then pos:line="168" pos:column="54">
			<block type="pseudo"><continue pos:line="169" pos:column="25">continue;<pos:position pos:line="169" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><call><name pos:line="170" pos:column="17">error<pos:position pos:line="170" pos:column="22"/></name><argument_list pos:line="170" pos:column="22">(<argument><expr><literal type="string" pos:line="170" pos:column="23">"no such remote ref %s"<pos:position pos:line="170" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="170" pos:column="48">sought<pos:position pos:line="170" pos:column="54"/></name><index pos:line="170" pos:column="54">[<expr><name pos:line="170" pos:column="55">i<pos:position pos:line="170" pos:column="56"/></name></expr>]<pos:position pos:line="170" pos:column="57"/></index></name><operator pos:line="170" pos:column="57">-&gt;<pos:position pos:line="170" pos:column="62"/></operator><name pos:line="170" pos:column="59">name<pos:position pos:line="170" pos:column="63"/></name></expr></argument>)<pos:position pos:line="170" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><name pos:line="171" pos:column="17">ret<pos:position pos:line="171" pos:column="20"/></name> <operator pos:line="171" pos:column="21">=<pos:position pos:line="171" pos:column="22"/></operator> <literal type="number" pos:line="171" pos:column="23">1<pos:position pos:line="171" pos:column="24"/></literal></expr>;<pos:position pos:line="171" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="172" pos:column="10"/></block></for>

	<while pos:line="174" pos:column="9">while <condition pos:line="174" pos:column="15">(<expr><name pos:line="174" pos:column="16">ref<pos:position pos:line="174" pos:column="19"/></name></expr>)<pos:position pos:line="174" pos:column="20"/></condition> <block pos:line="174" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="175" pos:column="17">printf<pos:position pos:line="175" pos:column="23"/></name><argument_list pos:line="175" pos:column="23">(<argument><expr><literal type="string" pos:line="175" pos:column="24">"%s %s\n"<pos:position pos:line="175" pos:column="33"/></literal></expr></argument>,
		       <argument><expr><call><name pos:line="176" pos:column="24">sha1_to_hex<pos:position pos:line="176" pos:column="35"/></name><argument_list pos:line="176" pos:column="35">(<argument><expr><name><name pos:line="176" pos:column="36">ref<pos:position pos:line="176" pos:column="39"/></name><operator pos:line="176" pos:column="39">-&gt;<pos:position pos:line="176" pos:column="44"/></operator><name pos:line="176" pos:column="41">old_sha1<pos:position pos:line="176" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="176" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="176" pos:column="52">ref<pos:position pos:line="176" pos:column="55"/></name><operator pos:line="176" pos:column="55">-&gt;<pos:position pos:line="176" pos:column="60"/></operator><name pos:line="176" pos:column="57">name<pos:position pos:line="176" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="176" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><name pos:line="177" pos:column="17">ref<pos:position pos:line="177" pos:column="20"/></name> <operator pos:line="177" pos:column="21">=<pos:position pos:line="177" pos:column="22"/></operator> <name><name pos:line="177" pos:column="23">ref<pos:position pos:line="177" pos:column="26"/></name><operator pos:line="177" pos:column="26">-&gt;<pos:position pos:line="177" pos:column="31"/></operator><name pos:line="177" pos:column="28">next<pos:position pos:line="177" pos:column="32"/></name></name></expr>;<pos:position pos:line="177" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="178" pos:column="10"/></block></while>

	<return pos:line="180" pos:column="9">return <expr><name pos:line="180" pos:column="16">ret<pos:position pos:line="180" pos:column="19"/></name></expr>;<pos:position pos:line="180" pos:column="20"/></return>
}<pos:position pos:line="181" pos:column="2"/></block></function></unit>
