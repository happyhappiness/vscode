<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1775_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">tree_entry<pos:position pos:line="1" pos:column="25"/></name></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">new_tree_entry<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name pos:line="1" pos:column="42">void<pos:position pos:line="1" pos:column="46"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">tree_entry<pos:position pos:line="3" pos:column="26"/></name></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier></type><name pos:line="3" pos:column="28">e<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">avail_tree_entry<pos:position pos:line="5" pos:column="30"/></name></expr>)<pos:position pos:line="5" pos:column="31"/></condition><then pos:line="5" pos:column="31"> <block pos:line="5" pos:column="32">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">unsigned<pos:position pos:line="6" pos:column="25"/></name> <name pos:line="6" pos:column="26">int<pos:position pos:line="6" pos:column="29"/></name></type> <name pos:line="6" pos:column="30">n<pos:position pos:line="6" pos:column="31"/></name> <init pos:line="6" pos:column="32">= <expr><name pos:line="6" pos:column="34">tree_entry_alloc<pos:position pos:line="6" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="51"/></decl_stmt>
		<expr_stmt><expr><name pos:line="7" pos:column="17">total_allocd<pos:position pos:line="7" pos:column="29"/></name> <operator pos:line="7" pos:column="30">+=<pos:position pos:line="7" pos:column="32"/></operator> <name pos:line="7" pos:column="33">n<pos:position pos:line="7" pos:column="34"/></name> <operator pos:line="7" pos:column="35">*<pos:position pos:line="7" pos:column="36"/></operator> <sizeof pos:line="7" pos:column="37">sizeof<argument_list pos:line="7" pos:column="43">(<argument><expr pos:line="7" pos:column="44">struct <name pos:line="7" pos:column="51">tree_entry<pos:position pos:line="7" pos:column="61"/></name></expr></argument>)<pos:position pos:line="7" pos:column="62"/></argument_list></sizeof></expr>;<pos:position pos:line="7" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">ALLOC_ARRAY<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">e<pos:position pos:line="8" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="32">n<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="9" pos:column="17">avail_tree_entry<pos:position pos:line="9" pos:column="33"/></name> <operator pos:line="9" pos:column="34">=<pos:position pos:line="9" pos:column="35"/></operator> <name pos:line="9" pos:column="36">e<pos:position pos:line="9" pos:column="37"/></name></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>
		<while pos:line="10" pos:column="17">while <condition pos:line="10" pos:column="23">(<expr><name pos:line="10" pos:column="24">n<pos:position pos:line="10" pos:column="25"/></name><operator pos:line="10" pos:column="25">--<pos:position pos:line="10" pos:column="27"/></operator> <operator pos:line="10" pos:column="28">&gt;<pos:position pos:line="10" pos:column="32"/></operator> <literal type="number" pos:line="10" pos:column="30">1<pos:position pos:line="10" pos:column="31"/></literal></expr>)<pos:position pos:line="10" pos:column="32"/></condition> <block pos:line="10" pos:column="33">{
			<expr_stmt><expr><operator pos:line="11" pos:column="25">*<pos:position pos:line="11" pos:column="26"/></operator><operator pos:line="11" pos:column="26">(<pos:position pos:line="11" pos:column="27"/></operator><operator pos:line="11" pos:column="27">(<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">void<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">*<pos:position pos:line="11" pos:column="33"/></operator><operator pos:line="11" pos:column="33">*<pos:position pos:line="11" pos:column="34"/></operator><operator pos:line="11" pos:column="34">)<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="35">e<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">)<pos:position pos:line="11" pos:column="37"/></operator> <operator pos:line="11" pos:column="38">=<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="40">e<pos:position pos:line="11" pos:column="41"/></name> <operator pos:line="11" pos:column="42">+<pos:position pos:line="11" pos:column="43"/></operator> <literal type="number" pos:line="11" pos:column="44">1<pos:position pos:line="11" pos:column="45"/></literal></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="12" pos:column="25">e<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">++<pos:position pos:line="12" pos:column="28"/></operator></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
		}<pos:position pos:line="13" pos:column="18"/></block></while>
		<expr_stmt><expr><operator pos:line="14" pos:column="17">*<pos:position pos:line="14" pos:column="18"/></operator><operator pos:line="14" pos:column="18">(<pos:position pos:line="14" pos:column="19"/></operator><operator pos:line="14" pos:column="19">(<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">void<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></operator><operator pos:line="14" pos:column="25">*<pos:position pos:line="14" pos:column="26"/></operator><operator pos:line="14" pos:column="26">)<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">e<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">)<pos:position pos:line="14" pos:column="29"/></operator> <operator pos:line="14" pos:column="30">=<pos:position pos:line="14" pos:column="31"/></operator> <name pos:line="14" pos:column="32">NULL<pos:position pos:line="14" pos:column="36"/></name></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="17" pos:column="9">e<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <name pos:line="17" pos:column="13">avail_tree_entry<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="18" pos:column="9">avail_tree_entry<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <operator pos:line="18" pos:column="28">*<pos:position pos:line="18" pos:column="29"/></operator><operator pos:line="18" pos:column="29">(<pos:position pos:line="18" pos:column="30"/></operator><operator pos:line="18" pos:column="30">(<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">void<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">*<pos:position pos:line="18" pos:column="36"/></operator><operator pos:line="18" pos:column="36">*<pos:position pos:line="18" pos:column="37"/></operator><operator pos:line="18" pos:column="37">)<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="38">e<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">)<pos:position pos:line="18" pos:column="40"/></operator></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
	<return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">e<pos:position pos:line="19" pos:column="17"/></name></expr>;<pos:position pos:line="19" pos:column="18"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
