<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1480_git-2.11.4.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">diff_aligned_abbrev<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">object_id<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">oid<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">int<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">len<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">abblen<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">abbrev<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">len<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <name pos:line="6" pos:column="20">GIT_SHA1_HEXSZ<pos:position pos:line="6" pos:column="34"/></name></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><call><name pos:line="7" pos:column="24">oid_to_hex<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">oid<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="9" pos:column="9">abbrev<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">diff_abbrev_oid<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument><expr><name pos:line="9" pos:column="34">oid<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="39">len<pos:position pos:line="9" pos:column="42"/></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name pos:line="10" pos:column="9">abblen<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <call><name pos:line="10" pos:column="18">strlen<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">abbrev<pos:position pos:line="10" pos:column="31"/></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>

	<comment type="block" pos:line="12" pos:column="9">/*
	 * In well-behaved cases, where the abbbreviated result is the
	 * same as the requested length, append three dots after the
	 * abbreviation (hence the whole logic is limited to the case
	 * where abblen &lt; 37); when the actual abbreviated result is a
	 * bit longer than the requested length, we reduce the number
	 * of dots so that they match the well-behaved ones.  However,
	 * if the actual abbreviation is longer than the requested
	 * length by more than three, we give up on aligning, and add
	 * three dots anyway, to indicate that the output is not the
	 * full object name.  Yes, this may be suboptimal, but this
	 * appears only in "diff --raw --abbrev" output and it is not
	 * worth the effort to change it now.  Note that this would
	 * likely to work fine when the automatic sizing of default
	 * abbreviation length is used--we would be fed -1 in "len" in
	 * that case, and will end up always appending three-dots, but
	 * the automatic sizing is supposed to give abblen that ensures
	 * uniqueness across all objects (statistically speaking).
	 */</comment>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">abblen<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">&lt;<pos:position pos:line="31" pos:column="24"/></operator> <name pos:line="31" pos:column="22">GIT_SHA1_HEXSZ<pos:position pos:line="31" pos:column="36"/></name> <operator pos:line="31" pos:column="37">-<pos:position pos:line="31" pos:column="38"/></operator> <literal type="number" pos:line="31" pos:column="39">3<pos:position pos:line="31" pos:column="40"/></literal></expr>)<pos:position pos:line="31" pos:column="41"/></condition><then pos:line="31" pos:column="41"> <block pos:line="31" pos:column="42">{
		<decl_stmt><decl><specifier pos:line="32" pos:column="17">static<pos:position pos:line="32" pos:column="23"/></specifier> <type><name pos:line="32" pos:column="24">char<pos:position pos:line="32" pos:column="28"/></name></type> <name><name pos:line="32" pos:column="29">hex<pos:position pos:line="32" pos:column="32"/></name><index pos:line="32" pos:column="32">[<expr><name pos:line="32" pos:column="33">GIT_SHA1_HEXSZ<pos:position pos:line="32" pos:column="47"/></name> <operator pos:line="32" pos:column="48">+<pos:position pos:line="32" pos:column="49"/></operator> <literal type="number" pos:line="32" pos:column="50">1<pos:position pos:line="32" pos:column="51"/></literal></expr>]<pos:position pos:line="32" pos:column="52"/></index></name></decl>;<pos:position pos:line="32" pos:column="53"/></decl_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">len<pos:position pos:line="33" pos:column="24"/></name> <operator pos:line="33" pos:column="25">&lt;<pos:position pos:line="33" pos:column="29"/></operator> <name pos:line="33" pos:column="27">abblen<pos:position pos:line="33" pos:column="33"/></name> <operator pos:line="33" pos:column="34">&amp;&amp;<pos:position pos:line="33" pos:column="44"/></operator> <name pos:line="33" pos:column="37">abblen<pos:position pos:line="33" pos:column="43"/></name> <operator pos:line="33" pos:column="44">&lt;=<pos:position pos:line="33" pos:column="49"/></operator> <name pos:line="33" pos:column="47">len<pos:position pos:line="33" pos:column="50"/></name> <operator pos:line="33" pos:column="51">+<pos:position pos:line="33" pos:column="52"/></operator> <literal type="number" pos:line="33" pos:column="53">2<pos:position pos:line="33" pos:column="54"/></literal></expr>)<pos:position pos:line="33" pos:column="55"/></condition><then pos:line="33" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">xsnprintf<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">hex<pos:position pos:line="34" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="40">sizeof<argument_list pos:line="34" pos:column="46">(<argument><expr><name pos:line="34" pos:column="47">hex<pos:position pos:line="34" pos:column="50"/></name></expr></argument>)<pos:position pos:line="34" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="53">"%s%.*s"<pos:position pos:line="34" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="63">abbrev<pos:position pos:line="34" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="71">len<pos:position pos:line="34" pos:column="74"/></name><operator pos:line="34" pos:column="74">+<pos:position pos:line="34" pos:column="75"/></operator><literal type="number" pos:line="34" pos:column="75">3<pos:position pos:line="34" pos:column="76"/></literal><operator pos:line="34" pos:column="76">-<pos:position pos:line="34" pos:column="77"/></operator><name pos:line="34" pos:column="77">abblen<pos:position pos:line="34" pos:column="83"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="85">".."<pos:position pos:line="34" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="91"/></expr_stmt></block></then>
		<else pos:line="35" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="25">xsnprintf<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><name pos:line="36" pos:column="35">hex<pos:position pos:line="36" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="40">sizeof<argument_list pos:line="36" pos:column="46">(<argument><expr><name pos:line="36" pos:column="47">hex<pos:position pos:line="36" pos:column="50"/></name></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="53">"%s..."<pos:position pos:line="36" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="62">abbrev<pos:position pos:line="36" pos:column="68"/></name></expr></argument>)<pos:position pos:line="36" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="70"/></expr_stmt></block></else></if>
		<return pos:line="37" pos:column="17">return <expr><name pos:line="37" pos:column="24">hex<pos:position pos:line="37" pos:column="27"/></name></expr>;<pos:position pos:line="37" pos:column="28"/></return>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>

	<return pos:line="40" pos:column="9">return <expr><call><name pos:line="40" pos:column="16">oid_to_hex<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">(<argument><expr><name pos:line="40" pos:column="27">oid<pos:position pos:line="40" pos:column="30"/></name></expr></argument>)<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="32"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
