<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6833_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type> <name pos:line="1" pos:column="8">nedpcalloc<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">nedpool<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">p<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">size_t<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">no<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">size_t<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">size<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list> <name pos:line="1" pos:column="55">THROWSPEC<pos:position pos:line="1" pos:column="64"/></name>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">rsize<pos:position pos:line="3" pos:column="21"/></name><init pos:line="3" pos:column="21">=<expr><name pos:line="3" pos:column="22">size<pos:position pos:line="3" pos:column="26"/></name><operator pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></operator><name pos:line="3" pos:column="27">no<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">void<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">ret<pos:position pos:line="4" pos:column="18"/></name><init pos:line="4" pos:column="18">=<expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">threadcache<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">tc<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">mymspace<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">GetThreadCache<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><operator pos:line="7" pos:column="24">&amp;<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="25">p<pos:position pos:line="7" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="28">&amp;<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="29">tc<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="33">&amp;<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="34">mymspace<pos:position pos:line="7" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="44">&amp;<pos:position pos:line="7" pos:column="49"/></operator><name pos:line="7" pos:column="45">rsize<pos:position pos:line="7" pos:column="50"/></name></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="52"/></expr_stmt>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">THREADCACHEMAX<pos:position pos:line="8" pos:column="19"/></name></expr></cpp:if>
	<if pos:line="9" pos:column="9">if<condition pos:line="9" pos:column="11">(<expr><name pos:line="9" pos:column="12">tc<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">&amp;&amp;<pos:position pos:line="9" pos:column="25"/></operator> <name pos:line="9" pos:column="18">rsize<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">&lt;=<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="25">THREADCACHEMAX<pos:position pos:line="9" pos:column="39"/></name></expr>)<pos:position pos:line="9" pos:column="40"/></condition><then pos:line="9" pos:column="40">
	<block pos:line="10" pos:column="9">{	<comment type="block" pos:line="10" pos:column="17">/* Use the thread cache */</comment>
		<if pos:line="11" pos:column="17">if<condition pos:line="11" pos:column="19">(<expr><operator pos:line="11" pos:column="20">(<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">ret<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator><call><name pos:line="11" pos:column="25">threadcache_malloc<pos:position pos:line="11" pos:column="43"/></name><argument_list pos:line="11" pos:column="43">(<argument><expr><name pos:line="11" pos:column="44">p<pos:position pos:line="11" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="47">tc<pos:position pos:line="11" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="51">&amp;<pos:position pos:line="11" pos:column="56"/></operator><name pos:line="11" pos:column="52">rsize<pos:position pos:line="11" pos:column="57"/></name></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call><operator pos:line="11" pos:column="58">)<pos:position pos:line="11" pos:column="59"/></operator></expr>)<pos:position pos:line="11" pos:column="60"/></condition><then pos:line="11" pos:column="60">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">memset<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">ret<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="37">0<pos:position pos:line="12" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="40">rsize<pos:position pos:line="12" pos:column="45"/></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
	<if pos:line="15" pos:column="9">if<condition pos:line="15" pos:column="11">(<expr><operator pos:line="15" pos:column="12">!<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">ret<pos:position pos:line="15" pos:column="16"/></name></expr>)<pos:position pos:line="15" pos:column="17"/></condition><then pos:line="15" pos:column="17">
	<block pos:line="16" pos:column="9">{	<comment type="block" pos:line="16" pos:column="17">/* Use this thread's mspace */</comment>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">GETMSPACE<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">m<pos:position pos:line="17" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="22">p<pos:position pos:line="17" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="25">tc<pos:position pos:line="17" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="29">mymspace<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">rsize<pos:position pos:line="17" pos:column="44"/></name></expr></argument>,
		  <argument><expr><name pos:line="18" pos:column="19">ret<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator><call><name pos:line="18" pos:column="23">mspace_calloc<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">(<argument><expr><name pos:line="18" pos:column="37">m<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="40">1<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="43">rsize<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">ret<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
