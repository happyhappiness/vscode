<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4903_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">lock_repo_for_gc<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">int<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">force<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">pid_t<pos:position pos:line="1" pos:column="53"/></name><modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type> <name pos:line="1" pos:column="55">ret_pid<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">lock_file<pos:position pos:line="3" pos:column="32"/></name></name></type> <name pos:line="3" pos:column="33">lock<pos:position pos:line="3" pos:column="37"/></name></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">my_host<pos:position pos:line="4" pos:column="21"/></name><index pos:line="4" pos:column="21">[<expr><name pos:line="4" pos:column="22">HOST_NAME_MAX<pos:position pos:line="4" pos:column="35"/></name> <operator pos:line="4" pos:column="36">+<pos:position pos:line="4" pos:column="37"/></operator> <literal type="number" pos:line="4" pos:column="38">1<pos:position pos:line="4" pos:column="39"/></literal></expr>]<pos:position pos:line="4" pos:column="40"/></index></name></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">sb<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">STRBUF_INIT<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">stat<pos:position pos:line="6" pos:column="20"/></name></name></type> <name pos:line="6" pos:column="21">st<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">uintmax_t<pos:position pos:line="7" pos:column="18"/></name></type> <name pos:line="7" pos:column="19">pid<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">FILE<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">fp<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">fd<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">pidfile_path<pos:position pos:line="10" pos:column="27"/></name></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">is_tempfile_active<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><operator pos:line="12" pos:column="32">&amp;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="33">pidfile<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42">
		<comment type="block" pos:line="13" pos:column="17">/* already locked */</comment>
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><name pos:line="14" pos:column="24">NULL<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></return></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">xgethostname<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">my_host<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="35">sizeof<argument_list pos:line="16" pos:column="41">(<argument><expr><name pos:line="16" pos:column="42">my_host<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="52"/></condition><then pos:line="16" pos:column="52">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">xsnprintf<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">my_host<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="36">sizeof<argument_list pos:line="17" pos:column="42">(<argument><expr><name pos:line="17" pos:column="43">my_host<pos:position pos:line="17" pos:column="50"/></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="53">"unknown"<pos:position pos:line="17" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="64"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">pidfile_path<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <call><name pos:line="19" pos:column="24">git_pathdup<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><literal type="string" pos:line="19" pos:column="36">"gc.pid"<pos:position pos:line="19" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">fd<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <call><name pos:line="20" pos:column="14">hold_lock_file_for_update<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><operator pos:line="20" pos:column="40">&amp;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="41">lock<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">pidfile_path<pos:position pos:line="20" pos:column="59"/></name></expr></argument>,
				       <argument><expr><name pos:line="21" pos:column="40">LOCK_DIE_ON_ERROR<pos:position pos:line="21" pos:column="57"/></name></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">force<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20"> <block pos:line="22" pos:column="21">{
		<decl_stmt><decl><specifier pos:line="23" pos:column="17">static<pos:position pos:line="23" pos:column="23"/></specifier> <type><name pos:line="23" pos:column="24">char<pos:position pos:line="23" pos:column="28"/></name></type> <name><name pos:line="23" pos:column="29">locking_host<pos:position pos:line="23" pos:column="41"/></name><index pos:line="23" pos:column="41">[<expr><name pos:line="23" pos:column="42">HOST_NAME_MAX<pos:position pos:line="23" pos:column="55"/></name> <operator pos:line="23" pos:column="56">+<pos:position pos:line="23" pos:column="57"/></operator> <literal type="number" pos:line="23" pos:column="58">1<pos:position pos:line="23" pos:column="59"/></literal></expr>]<pos:position pos:line="23" pos:column="60"/></index></name></decl>;<pos:position pos:line="23" pos:column="61"/></decl_stmt>
		<decl_stmt><decl><specifier pos:line="24" pos:column="17">static<pos:position pos:line="24" pos:column="23"/></specifier> <type><name pos:line="24" pos:column="24">char<pos:position pos:line="24" pos:column="28"/></name> <modifier pos:line="24" pos:column="29">*<pos:position pos:line="24" pos:column="30"/></modifier></type><name pos:line="24" pos:column="30">scan_fmt<pos:position pos:line="24" pos:column="38"/></name></decl>;<pos:position pos:line="24" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">int<pos:position pos:line="25" pos:column="20"/></name></type> <name pos:line="25" pos:column="21">should_exit<pos:position pos:line="25" pos:column="32"/></name></decl>;<pos:position pos:line="25" pos:column="33"/></decl_stmt>

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="22">scan_fmt<pos:position pos:line="27" pos:column="30"/></name></expr>)<pos:position pos:line="27" pos:column="31"/></condition><then pos:line="27" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="25">scan_fmt<pos:position pos:line="28" pos:column="33"/></name> <operator pos:line="28" pos:column="34">=<pos:position pos:line="28" pos:column="35"/></operator> <call><name pos:line="28" pos:column="36">xstrfmt<pos:position pos:line="28" pos:column="43"/></name><argument_list pos:line="28" pos:column="43">(<argument><expr><literal type="string" pos:line="28" pos:column="44">"%s %%%dc"<pos:position pos:line="28" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="56">"%"<pos:position pos:line="28" pos:column="59"/></literal><name pos:line="28" pos:column="59">SCNuMAX<pos:position pos:line="28" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="68">HOST_NAME_MAX<pos:position pos:line="28" pos:column="81"/></name></expr></argument>)<pos:position pos:line="28" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="83"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="29" pos:column="17">fp<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <call><name pos:line="29" pos:column="22">fopen<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">pidfile_path<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="42">"r"<pos:position pos:line="29" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">memset<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><name pos:line="30" pos:column="24">locking_host<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="38">0<pos:position pos:line="30" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="41">sizeof<argument_list pos:line="30" pos:column="47">(<argument><expr><name pos:line="30" pos:column="48">locking_host<pos:position pos:line="30" pos:column="60"/></name></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">should_exit<pos:position pos:line="31" pos:column="28"/></name> <operator pos:line="31" pos:column="29">=<pos:position pos:line="31" pos:column="30"/></operator>
			<name pos:line="32" pos:column="25">fp<pos:position pos:line="32" pos:column="27"/></name> <operator pos:line="32" pos:column="28">!=<pos:position pos:line="32" pos:column="30"/></operator> <name pos:line="32" pos:column="31">NULL<pos:position pos:line="32" pos:column="35"/></name> <operator pos:line="32" pos:column="36">&amp;&amp;<pos:position pos:line="32" pos:column="46"/></operator>
			<operator pos:line="33" pos:column="25">!<pos:position pos:line="33" pos:column="26"/></operator><call><name pos:line="33" pos:column="26">fstat<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><call><name pos:line="33" pos:column="32">fileno<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name pos:line="33" pos:column="39">fp<pos:position pos:line="33" pos:column="41"/></name></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="33" pos:column="44">&amp;<pos:position pos:line="33" pos:column="49"/></operator><name pos:line="33" pos:column="45">st<pos:position pos:line="33" pos:column="47"/></name></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></call> <operator pos:line="33" pos:column="49">&amp;&amp;<pos:position pos:line="33" pos:column="59"/></operator>
			<comment type="block" pos:line="34" pos:column="25">/*
			 * 12 hour limit is very generous as gc should
			 * never take that long. On the other hand we
			 * don't really need a strict limit here,
			 * running gc --auto one day late is not a big
			 * problem. --force can be used in manual gc
			 * after the user verifies that no gc is
			 * running.
			 */</comment>
			<call><name pos:line="43" pos:column="25">time<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><name pos:line="43" pos:column="30">NULL<pos:position pos:line="43" pos:column="34"/></name></expr></argument>)<pos:position pos:line="43" pos:column="35"/></argument_list></call> <operator pos:line="43" pos:column="36">-<pos:position pos:line="43" pos:column="37"/></operator> <name><name pos:line="43" pos:column="38">st<pos:position pos:line="43" pos:column="40"/></name><operator pos:line="43" pos:column="40">.<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="41">st_mtime<pos:position pos:line="43" pos:column="49"/></name></name> <operator pos:line="43" pos:column="50">&lt;=<pos:position pos:line="43" pos:column="55"/></operator> <literal type="number" pos:line="43" pos:column="53">12<pos:position pos:line="43" pos:column="55"/></literal> <operator pos:line="43" pos:column="56">*<pos:position pos:line="43" pos:column="57"/></operator> <literal type="number" pos:line="43" pos:column="58">3600<pos:position pos:line="43" pos:column="62"/></literal> <operator pos:line="43" pos:column="63">&amp;&amp;<pos:position pos:line="43" pos:column="73"/></operator>
			<call><name pos:line="44" pos:column="25">fscanf<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><name pos:line="44" pos:column="32">fp<pos:position pos:line="44" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="36">scan_fmt<pos:position pos:line="44" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="46">&amp;<pos:position pos:line="44" pos:column="51"/></operator><name pos:line="44" pos:column="47">pid<pos:position pos:line="44" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="52">locking_host<pos:position pos:line="44" pos:column="64"/></name></expr></argument>)<pos:position pos:line="44" pos:column="65"/></argument_list></call> <operator pos:line="44" pos:column="66">==<pos:position pos:line="44" pos:column="68"/></operator> <literal type="number" pos:line="44" pos:column="69">2<pos:position pos:line="44" pos:column="70"/></literal> <operator pos:line="44" pos:column="71">&amp;&amp;<pos:position pos:line="44" pos:column="81"/></operator>
			<comment type="block" pos:line="45" pos:column="25">/* be gentle to concurrent "gc" on remote hosts */</comment>
			<operator pos:line="46" pos:column="25">(<pos:position pos:line="46" pos:column="26"/></operator><call><name pos:line="46" pos:column="26">strcmp<pos:position pos:line="46" pos:column="32"/></name><argument_list pos:line="46" pos:column="32">(<argument><expr><name pos:line="46" pos:column="33">locking_host<pos:position pos:line="46" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">my_host<pos:position pos:line="46" pos:column="54"/></name></expr></argument>)<pos:position pos:line="46" pos:column="55"/></argument_list></call> <operator pos:line="46" pos:column="56">||<pos:position pos:line="46" pos:column="58"/></operator> <operator pos:line="46" pos:column="59">!<pos:position pos:line="46" pos:column="60"/></operator><call><name pos:line="46" pos:column="60">kill<pos:position pos:line="46" pos:column="64"/></name><argument_list pos:line="46" pos:column="64">(<argument><expr><name pos:line="46" pos:column="65">pid<pos:position pos:line="46" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="70">0<pos:position pos:line="46" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="72"/></argument_list></call> <operator pos:line="46" pos:column="73">||<pos:position pos:line="46" pos:column="75"/></operator> <name pos:line="46" pos:column="76">errno<pos:position pos:line="46" pos:column="81"/></name> <operator pos:line="46" pos:column="82">==<pos:position pos:line="46" pos:column="84"/></operator> <name pos:line="46" pos:column="85">EPERM<pos:position pos:line="46" pos:column="90"/></name><operator pos:line="46" pos:column="90">)<pos:position pos:line="46" pos:column="91"/></operator></expr>;<pos:position pos:line="46" pos:column="92"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">fp<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">!=<pos:position pos:line="47" pos:column="26"/></operator> <name pos:line="47" pos:column="27">NULL<pos:position pos:line="47" pos:column="31"/></name></expr>)<pos:position pos:line="47" pos:column="32"/></condition><then pos:line="47" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="25">fclose<pos:position pos:line="48" pos:column="31"/></name><argument_list pos:line="48" pos:column="31">(<argument><expr><name pos:line="48" pos:column="32">fp<pos:position pos:line="48" pos:column="34"/></name></expr></argument>)<pos:position pos:line="48" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="36"/></expr_stmt></block></then></if>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">should_exit<pos:position pos:line="49" pos:column="32"/></name></expr>)<pos:position pos:line="49" pos:column="33"/></condition><then pos:line="49" pos:column="33"> <block pos:line="49" pos:column="34">{
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><name pos:line="50" pos:column="29">fd<pos:position pos:line="50" pos:column="31"/></name> <operator pos:line="50" pos:column="32">&gt;=<pos:position pos:line="50" pos:column="37"/></operator> <literal type="number" pos:line="50" pos:column="35">0<pos:position pos:line="50" pos:column="36"/></literal></expr>)<pos:position pos:line="50" pos:column="37"/></condition><then pos:line="50" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="33">rollback_lock_file<pos:position pos:line="51" pos:column="51"/></name><argument_list pos:line="51" pos:column="51">(<argument><expr><operator pos:line="51" pos:column="52">&amp;<pos:position pos:line="51" pos:column="57"/></operator><name pos:line="51" pos:column="53">lock<pos:position pos:line="51" pos:column="57"/></name></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="59"/></expr_stmt></block></then></if>
			<expr_stmt><expr><operator pos:line="52" pos:column="25">*<pos:position pos:line="52" pos:column="26"/></operator><name pos:line="52" pos:column="26">ret_pid<pos:position pos:line="52" pos:column="33"/></name> <operator pos:line="52" pos:column="34">=<pos:position pos:line="52" pos:column="35"/></operator> <name pos:line="52" pos:column="36">pid<pos:position pos:line="52" pos:column="39"/></name></expr>;<pos:position pos:line="52" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">free<pos:position pos:line="53" pos:column="29"/></name><argument_list pos:line="53" pos:column="29">(<argument><expr><name pos:line="53" pos:column="30">pidfile_path<pos:position pos:line="53" pos:column="42"/></name></expr></argument>)<pos:position pos:line="53" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="44"/></expr_stmt>
			<return pos:line="54" pos:column="25">return <expr><name pos:line="54" pos:column="32">locking_host<pos:position pos:line="54" pos:column="44"/></name></expr>;<pos:position pos:line="54" pos:column="45"/></return>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="58" pos:column="9">strbuf_addf<pos:position pos:line="58" pos:column="20"/></name><argument_list pos:line="58" pos:column="20">(<argument><expr><operator pos:line="58" pos:column="21">&amp;<pos:position pos:line="58" pos:column="26"/></operator><name pos:line="58" pos:column="22">sb<pos:position pos:line="58" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="26">"%"<pos:position pos:line="58" pos:column="29"/></literal><name pos:line="58" pos:column="29">PRIuMAX<pos:position pos:line="58" pos:column="36"/></name><literal type="string" pos:line="58" pos:column="36">" %s"<pos:position pos:line="58" pos:column="41"/></literal></expr></argument>,
		    <argument><expr><operator pos:line="59" pos:column="21">(<pos:position pos:line="59" pos:column="22"/></operator><name pos:line="59" pos:column="22">uintmax_t<pos:position pos:line="59" pos:column="31"/></name><operator pos:line="59" pos:column="31">)<pos:position pos:line="59" pos:column="32"/></operator> <call><name pos:line="59" pos:column="33">getpid<pos:position pos:line="59" pos:column="39"/></name><argument_list pos:line="59" pos:column="39">()<pos:position pos:line="59" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="59" pos:column="43">my_host<pos:position pos:line="59" pos:column="50"/></name></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">write_in_full<pos:position pos:line="60" pos:column="22"/></name><argument_list pos:line="60" pos:column="22">(<argument><expr><name pos:line="60" pos:column="23">fd<pos:position pos:line="60" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="27">sb<pos:position pos:line="60" pos:column="29"/></name><operator pos:line="60" pos:column="29">.<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="30">buf<pos:position pos:line="60" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="35">sb<pos:position pos:line="60" pos:column="37"/></name><operator pos:line="60" pos:column="37">.<pos:position pos:line="60" pos:column="38"/></operator><name pos:line="60" pos:column="38">len<pos:position pos:line="60" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">strbuf_release<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><operator pos:line="61" pos:column="24">&amp;<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="25">sb<pos:position pos:line="61" pos:column="27"/></name></expr></argument>)<pos:position pos:line="61" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">commit_lock_file<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><operator pos:line="62" pos:column="26">&amp;<pos:position pos:line="62" pos:column="31"/></operator><name pos:line="62" pos:column="27">lock<pos:position pos:line="62" pos:column="31"/></name></expr></argument>)<pos:position pos:line="62" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="63" pos:column="9">register_tempfile<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><operator pos:line="63" pos:column="27">&amp;<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="28">pidfile<pos:position pos:line="63" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="37">pidfile_path<pos:position pos:line="63" pos:column="49"/></name></expr></argument>)<pos:position pos:line="63" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="64" pos:column="9">free<pos:position pos:line="64" pos:column="13"/></name><argument_list pos:line="64" pos:column="13">(<argument><expr><name pos:line="64" pos:column="14">pidfile_path<pos:position pos:line="64" pos:column="26"/></name></expr></argument>)<pos:position pos:line="64" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="28"/></expr_stmt>
	<return pos:line="65" pos:column="9">return <expr><name pos:line="65" pos:column="16">NULL<pos:position pos:line="65" pos:column="20"/></name></expr>;<pos:position pos:line="65" pos:column="21"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
