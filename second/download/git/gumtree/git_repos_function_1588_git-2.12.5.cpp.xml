<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1588_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">pool_alloc<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">size_t<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">len<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">mem_pool<pos:position pos:line="3" pos:column="24"/></name></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">p<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">void<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">r<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* round up to a 'uintmax_t' alignment */</comment>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">len<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">&amp;<pos:position pos:line="7" pos:column="22"/></operator> <operator pos:line="7" pos:column="19">(<pos:position pos:line="7" pos:column="20"/></operator><sizeof pos:line="7" pos:column="20">sizeof<argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">uintmax_t<pos:position pos:line="7" pos:column="36"/></name></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></sizeof> <operator pos:line="7" pos:column="38">-<pos:position pos:line="7" pos:column="39"/></operator> <literal type="number" pos:line="7" pos:column="40">1<pos:position pos:line="7" pos:column="41"/></literal><operator pos:line="7" pos:column="41">)<pos:position pos:line="7" pos:column="42"/></operator></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="17">len<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">+=<pos:position pos:line="8" pos:column="23"/></operator> <sizeof pos:line="8" pos:column="24">sizeof<argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">uintmax_t<pos:position pos:line="8" pos:column="40"/></name></expr></argument>)<pos:position pos:line="8" pos:column="41"/></argument_list></sizeof> <operator pos:line="8" pos:column="42">-<pos:position pos:line="8" pos:column="43"/></operator> <operator pos:line="8" pos:column="44">(<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="45">len<pos:position pos:line="8" pos:column="48"/></name> <operator pos:line="8" pos:column="49">&amp;<pos:position pos:line="8" pos:column="54"/></operator> <operator pos:line="8" pos:column="51">(<pos:position pos:line="8" pos:column="52"/></operator><sizeof pos:line="8" pos:column="52">sizeof<argument_list pos:line="8" pos:column="58">(<argument><expr><name pos:line="8" pos:column="59">uintmax_t<pos:position pos:line="8" pos:column="68"/></name></expr></argument>)<pos:position pos:line="8" pos:column="69"/></argument_list></sizeof> <operator pos:line="8" pos:column="70">-<pos:position pos:line="8" pos:column="71"/></operator> <literal type="number" pos:line="8" pos:column="72">1<pos:position pos:line="8" pos:column="73"/></literal><operator pos:line="8" pos:column="73">)<pos:position pos:line="8" pos:column="74"/></operator><operator pos:line="8" pos:column="74">)<pos:position pos:line="8" pos:column="75"/></operator></expr>;<pos:position pos:line="8" pos:column="76"/></expr_stmt></block></then></if>

	<for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init><expr><name pos:line="10" pos:column="14">p<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">mem_pool<pos:position pos:line="10" pos:column="26"/></name></expr>;<pos:position pos:line="10" pos:column="27"/></init> <condition><expr><name pos:line="10" pos:column="28">p<pos:position pos:line="10" pos:column="29"/></name></expr>;<pos:position pos:line="10" pos:column="30"/></condition> <incr><expr><name pos:line="10" pos:column="31">p<pos:position pos:line="10" pos:column="32"/></name> <operator pos:line="10" pos:column="33">=<pos:position pos:line="10" pos:column="34"/></operator> <name><name pos:line="10" pos:column="35">p<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">-&gt;<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="38">next_pool<pos:position pos:line="10" pos:column="47"/></name></name></expr></incr>)<pos:position pos:line="10" pos:column="48"/></control>
		<block type="pseudo"><if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">(<pos:position pos:line="11" pos:column="22"/></operator><name><name pos:line="11" pos:column="22">p<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">-&gt;<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="25">end<pos:position pos:line="11" pos:column="28"/></name></name> <operator pos:line="11" pos:column="29">-<pos:position pos:line="11" pos:column="30"/></operator> <name><name pos:line="11" pos:column="31">p<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">-&gt;<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="34">next_free<pos:position pos:line="11" pos:column="43"/></name></name> <operator pos:line="11" pos:column="44">&gt;=<pos:position pos:line="11" pos:column="49"/></operator> <name pos:line="11" pos:column="47">len<pos:position pos:line="11" pos:column="50"/></name><operator pos:line="11" pos:column="50">)<pos:position pos:line="11" pos:column="51"/></operator></expr>)<pos:position pos:line="11" pos:column="52"/></condition><then pos:line="11" pos:column="52">
			<block type="pseudo"><break pos:line="12" pos:column="25">break;<pos:position pos:line="12" pos:column="31"/></break></block></then></if></block></for>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">p<pos:position pos:line="14" pos:column="15"/></name></expr>)<pos:position pos:line="14" pos:column="16"/></condition><then pos:line="14" pos:column="16"> <block pos:line="14" pos:column="17">{
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">len<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">&gt;=<pos:position pos:line="15" pos:column="30"/></operator> <operator pos:line="15" pos:column="28">(<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="29">mem_pool_alloc<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">/<pos:position pos:line="15" pos:column="44"/></operator><literal type="number" pos:line="15" pos:column="44">2<pos:position pos:line="15" pos:column="45"/></literal><operator pos:line="15" pos:column="45">)<pos:position pos:line="15" pos:column="46"/></operator></expr>)<pos:position pos:line="15" pos:column="47"/></condition><then pos:line="15" pos:column="47"> <block pos:line="15" pos:column="48">{
			<expr_stmt><expr><name pos:line="16" pos:column="25">total_allocd<pos:position pos:line="16" pos:column="37"/></name> <operator pos:line="16" pos:column="38">+=<pos:position pos:line="16" pos:column="40"/></operator> <name pos:line="16" pos:column="41">len<pos:position pos:line="16" pos:column="44"/></name></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt>
			<return pos:line="17" pos:column="25">return <expr><call><name pos:line="17" pos:column="32">xmalloc<pos:position pos:line="17" pos:column="39"/></name><argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">len<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="45"/></return>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="19" pos:column="17">total_allocd<pos:position pos:line="19" pos:column="29"/></name> <operator pos:line="19" pos:column="30">+=<pos:position pos:line="19" pos:column="32"/></operator> <sizeof pos:line="19" pos:column="33">sizeof<argument_list pos:line="19" pos:column="39">(<argument><expr pos:line="19" pos:column="40">struct <name pos:line="19" pos:column="47">mem_pool<pos:position pos:line="19" pos:column="55"/></name></expr></argument>)<pos:position pos:line="19" pos:column="56"/></argument_list></sizeof> <operator pos:line="19" pos:column="57">+<pos:position pos:line="19" pos:column="58"/></operator> <name pos:line="19" pos:column="59">mem_pool_alloc<pos:position pos:line="19" pos:column="73"/></name></expr>;<pos:position pos:line="19" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">p<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <call><name pos:line="20" pos:column="21">xmalloc<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><call><name pos:line="20" pos:column="29">st_add<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><sizeof pos:line="20" pos:column="36">sizeof<argument_list pos:line="20" pos:column="42">(<argument><expr pos:line="20" pos:column="43">struct <name pos:line="20" pos:column="50">mem_pool<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="20" pos:column="61">mem_pool_alloc<pos:position pos:line="20" pos:column="75"/></name></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="21" pos:column="17">p<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">-&gt;<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="20">next_pool<pos:position pos:line="21" pos:column="29"/></name></name> <operator pos:line="21" pos:column="30">=<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">mem_pool<pos:position pos:line="21" pos:column="40"/></name></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">p<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">-&gt;<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="20">next_free<pos:position pos:line="22" pos:column="29"/></name></name> <operator pos:line="22" pos:column="30">=<pos:position pos:line="22" pos:column="31"/></operator> <operator pos:line="22" pos:column="32">(<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="33">char<pos:position pos:line="22" pos:column="37"/></name> <operator pos:line="22" pos:column="38">*<pos:position pos:line="22" pos:column="39"/></operator><operator pos:line="22" pos:column="39">)<pos:position pos:line="22" pos:column="40"/></operator> <name><name pos:line="22" pos:column="41">p<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">-&gt;<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="44">space<pos:position pos:line="22" pos:column="49"/></name></name></expr>;<pos:position pos:line="22" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="23" pos:column="17">p<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-&gt;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="20">end<pos:position pos:line="23" pos:column="23"/></name></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <name><name pos:line="23" pos:column="26">p<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">next_free<pos:position pos:line="23" pos:column="38"/></name></name> <operator pos:line="23" pos:column="39">+<pos:position pos:line="23" pos:column="40"/></operator> <name pos:line="23" pos:column="41">mem_pool_alloc<pos:position pos:line="23" pos:column="55"/></name></expr>;<pos:position pos:line="23" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="24" pos:column="17">mem_pool<pos:position pos:line="24" pos:column="25"/></name> <operator pos:line="24" pos:column="26">=<pos:position pos:line="24" pos:column="27"/></operator> <name pos:line="24" pos:column="28">p<pos:position pos:line="24" pos:column="29"/></name></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="27" pos:column="9">r<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <name><name pos:line="27" pos:column="13">p<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">-&gt;<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="16">next_free<pos:position pos:line="27" pos:column="25"/></name></name></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">p<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">next_free<pos:position pos:line="28" pos:column="21"/></name></name> <operator pos:line="28" pos:column="22">+=<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">len<pos:position pos:line="28" pos:column="28"/></name></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
	<return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">r<pos:position pos:line="29" pos:column="17"/></name></expr>;<pos:position pos:line="29" pos:column="18"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
