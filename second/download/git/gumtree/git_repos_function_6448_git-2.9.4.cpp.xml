<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6448_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">re_dfastate_t<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">re_acquire_state_context<pos:position pos:line="3" pos:column="25"/></name> <parameter_list pos:line="3" pos:column="26">(<parameter><decl><type><name pos:line="3" pos:column="27">reg_errcode_t<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">err<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="47">const<pos:position pos:line="3" pos:column="52"/></specifier> <name pos:line="3" pos:column="53">re_dfa_t<pos:position pos:line="3" pos:column="61"/></name> <modifier pos:line="3" pos:column="62">*<pos:position pos:line="3" pos:column="63"/></modifier></type><name pos:line="3" pos:column="63">dfa<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>,
			  <parameter><decl><type><specifier pos:line="4" pos:column="27">const<pos:position pos:line="4" pos:column="32"/></specifier> <name pos:line="4" pos:column="33">re_node_set<pos:position pos:line="4" pos:column="44"/></name> <modifier pos:line="4" pos:column="45">*<pos:position pos:line="4" pos:column="46"/></modifier></type><name pos:line="4" pos:column="46">nodes<pos:position pos:line="4" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="53">unsigned<pos:position pos:line="4" pos:column="61"/></name> <name pos:line="4" pos:column="62">int<pos:position pos:line="4" pos:column="65"/></name></type> <name pos:line="4" pos:column="66">context<pos:position pos:line="4" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="74"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">int<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">hash<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">re_dfastate_t<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">new_state<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">re_state_table_entry<pos:position pos:line="8" pos:column="30"/></name></name> <modifier pos:line="8" pos:column="31">*<pos:position pos:line="8" pos:column="32"/></modifier></type><name pos:line="8" pos:column="32">spot<pos:position pos:line="8" pos:column="36"/></name></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">i<pos:position pos:line="9" pos:column="8"/></name></decl>;<pos:position pos:line="9" pos:column="9"/></decl_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name><name pos:line="10" pos:column="7">nodes<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">nelem<pos:position pos:line="10" pos:column="19"/></name></name> <operator pos:line="10" pos:column="20">==<pos:position pos:line="10" pos:column="22"/></operator> <literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25">
    <block pos:line="11" pos:column="5">{
      <expr_stmt><expr><operator pos:line="12" pos:column="7">*<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">err<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <name pos:line="12" pos:column="14">REG_NOERROR<pos:position pos:line="12" pos:column="25"/></name></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
      <return pos:line="13" pos:column="7">return <expr><name pos:line="13" pos:column="14">NULL<pos:position pos:line="13" pos:column="18"/></name></expr>;<pos:position pos:line="13" pos:column="19"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
  <expr_stmt><expr><name pos:line="15" pos:column="3">hash<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <call><name pos:line="15" pos:column="10">calc_state_hash<pos:position pos:line="15" pos:column="25"/></name> <argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">nodes<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="34">context<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="16" pos:column="3">spot<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <name><name pos:line="16" pos:column="10">dfa<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">state_table<pos:position pos:line="16" pos:column="26"/></name></name> <operator pos:line="16" pos:column="27">+<pos:position pos:line="16" pos:column="28"/></operator> <operator pos:line="16" pos:column="29">(<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="30">hash<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">&amp;<pos:position pos:line="16" pos:column="40"/></operator> <name><name pos:line="16" pos:column="37">dfa<pos:position pos:line="16" pos:column="40"/></name><operator pos:line="16" pos:column="40">-&gt;<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="42">state_hash_mask<pos:position pos:line="16" pos:column="57"/></name></name><operator pos:line="16" pos:column="57">)<pos:position pos:line="16" pos:column="58"/></operator></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt>

  <for pos:line="18" pos:column="3">for <control pos:line="18" pos:column="7">(<init><expr><name pos:line="18" pos:column="8">i<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <literal type="number" pos:line="18" pos:column="12">0<pos:position pos:line="18" pos:column="13"/></literal></expr> ;<pos:position pos:line="18" pos:column="15"/></init> <condition><expr><name pos:line="18" pos:column="16">i<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">&lt;<pos:position pos:line="18" pos:column="22"/></operator> <name><name pos:line="18" pos:column="20">spot<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">-&gt;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="26">num<pos:position pos:line="18" pos:column="29"/></name></name></expr> ;<pos:position pos:line="18" pos:column="31"/></condition> <incr><expr><name pos:line="18" pos:column="32">i<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">++<pos:position pos:line="18" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="36"/></control>
    <block pos:line="19" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="20" pos:column="7">re_dfastate_t<pos:position pos:line="20" pos:column="20"/></name> <modifier pos:line="20" pos:column="21">*<pos:position pos:line="20" pos:column="22"/></modifier></type><name pos:line="20" pos:column="22">state<pos:position pos:line="20" pos:column="27"/></name> <init pos:line="20" pos:column="28">= <expr><name><name pos:line="20" pos:column="30">spot<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">-&gt;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="36">array<pos:position pos:line="20" pos:column="41"/></name><index pos:line="20" pos:column="41">[<expr><name pos:line="20" pos:column="42">i<pos:position pos:line="20" pos:column="43"/></name></expr>]<pos:position pos:line="20" pos:column="44"/></index></name></expr></init></decl>;<pos:position pos:line="20" pos:column="45"/></decl_stmt>
      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><name><name pos:line="21" pos:column="11">state<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">hash<pos:position pos:line="21" pos:column="22"/></name></name> <operator pos:line="21" pos:column="23">==<pos:position pos:line="21" pos:column="25"/></operator> <name pos:line="21" pos:column="26">hash<pos:position pos:line="21" pos:column="30"/></name>
	  <operator pos:line="22" pos:column="11">&amp;&amp;<pos:position pos:line="22" pos:column="21"/></operator> <name><name pos:line="22" pos:column="14">state<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">-&gt;<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="21">context<pos:position pos:line="22" pos:column="28"/></name></name> <operator pos:line="22" pos:column="29">==<pos:position pos:line="22" pos:column="31"/></operator> <name pos:line="22" pos:column="32">context<pos:position pos:line="22" pos:column="39"/></name>
	  <operator pos:line="23" pos:column="11">&amp;&amp;<pos:position pos:line="23" pos:column="21"/></operator> <call><name pos:line="23" pos:column="14">re_node_set_compare<pos:position pos:line="23" pos:column="33"/></name> <argument_list pos:line="23" pos:column="34">(<argument><expr><name><name pos:line="23" pos:column="35">state<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">-&gt;<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="42">entrance_nodes<pos:position pos:line="23" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="58">nodes<pos:position pos:line="23" pos:column="63"/></name></expr></argument>)<pos:position pos:line="23" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="65"/></condition><then pos:line="23" pos:column="65">
	<block type="pseudo"><return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">state<pos:position pos:line="24" pos:column="21"/></name></expr>;<pos:position pos:line="24" pos:column="22"/></return></block></then></if>
    }<pos:position pos:line="25" pos:column="6"/></block></for>
  <comment type="block" pos:line="26" pos:column="3">/* There are no appropriate state in `dfa', create the new one.  */</comment>
  <expr_stmt><expr><name pos:line="27" pos:column="3">new_state<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <call><name pos:line="27" pos:column="15">create_cd_newstate<pos:position pos:line="27" pos:column="33"/></name> <argument_list pos:line="27" pos:column="34">(<argument><expr><name pos:line="27" pos:column="35">dfa<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="40">nodes<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">context<pos:position pos:line="27" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="56">hash<pos:position pos:line="27" pos:column="60"/></name></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="62"/></expr_stmt>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><call><name pos:line="28" pos:column="7">BE<pos:position pos:line="28" pos:column="9"/></name> <argument_list pos:line="28" pos:column="10">(<argument><expr><name pos:line="28" pos:column="11">new_state<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">==<pos:position pos:line="28" pos:column="23"/></operator> <name pos:line="28" pos:column="24">NULL<pos:position pos:line="28" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="30">0<pos:position pos:line="28" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="33"/></condition><then pos:line="28" pos:column="33">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="29" pos:column="5">*<pos:position pos:line="29" pos:column="6"/></operator><name pos:line="29" pos:column="6">err<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">=<pos:position pos:line="29" pos:column="11"/></operator> <name pos:line="29" pos:column="12">REG_ESPACE<pos:position pos:line="29" pos:column="22"/></name></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt></block></then></if>

  <return pos:line="31" pos:column="3">return <expr><name pos:line="31" pos:column="10">new_state<pos:position pos:line="31" pos:column="19"/></name></expr>;<pos:position pos:line="31" pos:column="20"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
