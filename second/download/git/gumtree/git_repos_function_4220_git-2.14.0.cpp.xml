<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4220_git-2.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">write_archive_entries<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">archiver_args<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">args<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">write_archive_entry_fn_t<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">write_entry<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">archiver_context<pos:position pos:line="4" pos:column="32"/></name></name></type> <name pos:line="4" pos:column="33">context<pos:position pos:line="4" pos:column="40"/></name></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">unpack_trees_options<pos:position pos:line="5" pos:column="36"/></name></name></type> <name pos:line="5" pos:column="37">opts<pos:position pos:line="5" pos:column="41"/></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">tree_desc<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">t<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">err<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name><name pos:line="9" pos:column="13">args<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">-&gt;<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="19">baselen<pos:position pos:line="9" pos:column="26"/></name></name> <operator pos:line="9" pos:column="27">&gt;<pos:position pos:line="9" pos:column="31"/></operator> <literal type="number" pos:line="9" pos:column="29">0<pos:position pos:line="9" pos:column="30"/></literal> <operator pos:line="9" pos:column="31">&amp;&amp;<pos:position pos:line="9" pos:column="41"/></operator> <name><name pos:line="9" pos:column="34">args<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">-&gt;<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="40">base<pos:position pos:line="9" pos:column="44"/></name><index pos:line="9" pos:column="44">[<expr><name><name pos:line="9" pos:column="45">args<pos:position pos:line="9" pos:column="49"/></name><operator pos:line="9" pos:column="49">-&gt;<pos:position pos:line="9" pos:column="54"/></operator><name pos:line="9" pos:column="51">baselen<pos:position pos:line="9" pos:column="58"/></name></name> <operator pos:line="9" pos:column="59">-<pos:position pos:line="9" pos:column="60"/></operator> <literal type="number" pos:line="9" pos:column="61">1<pos:position pos:line="9" pos:column="62"/></literal></expr>]<pos:position pos:line="9" pos:column="63"/></index></name> <operator pos:line="9" pos:column="64">==<pos:position pos:line="9" pos:column="66"/></operator> <literal type="char" pos:line="9" pos:column="67">'/'<pos:position pos:line="9" pos:column="70"/></literal></expr>)<pos:position pos:line="9" pos:column="71"/></condition><then pos:line="9" pos:column="71"> <block pos:line="9" pos:column="72">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">size_t<pos:position pos:line="10" pos:column="23"/></name></type> <name pos:line="10" pos:column="24">len<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><name><name pos:line="10" pos:column="30">args<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">baselen<pos:position pos:line="10" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt>

		<while pos:line="12" pos:column="17">while <condition pos:line="12" pos:column="23">(<expr><name pos:line="12" pos:column="24">len<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">&gt;<pos:position pos:line="12" pos:column="32"/></operator> <literal type="number" pos:line="12" pos:column="30">1<pos:position pos:line="12" pos:column="31"/></literal> <operator pos:line="12" pos:column="32">&amp;&amp;<pos:position pos:line="12" pos:column="42"/></operator> <name><name pos:line="12" pos:column="35">args<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">-&gt;<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="41">base<pos:position pos:line="12" pos:column="45"/></name><index pos:line="12" pos:column="45">[<expr><name pos:line="12" pos:column="46">len<pos:position pos:line="12" pos:column="49"/></name> <operator pos:line="12" pos:column="50">-<pos:position pos:line="12" pos:column="51"/></operator> <literal type="number" pos:line="12" pos:column="52">2<pos:position pos:line="12" pos:column="53"/></literal></expr>]<pos:position pos:line="12" pos:column="54"/></index></name> <operator pos:line="12" pos:column="55">==<pos:position pos:line="12" pos:column="57"/></operator> <literal type="char" pos:line="12" pos:column="58">'/'<pos:position pos:line="12" pos:column="61"/></literal></expr>)<pos:position pos:line="12" pos:column="62"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="25">len<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">--<pos:position pos:line="13" pos:column="30"/></operator></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt></block></while>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name><name pos:line="14" pos:column="21">args<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">-&gt;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="27">verbose<pos:position pos:line="14" pos:column="34"/></name></name></expr>)<pos:position pos:line="14" pos:column="35"/></condition><then pos:line="14" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="25">fprintf<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">stderr<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="41">"%.*s\n"<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="51">(<pos:position pos:line="15" pos:column="52"/></operator><name pos:line="15" pos:column="52">int<pos:position pos:line="15" pos:column="55"/></name><operator pos:line="15" pos:column="55">)<pos:position pos:line="15" pos:column="56"/></operator><name pos:line="15" pos:column="56">len<pos:position pos:line="15" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="61">args<pos:position pos:line="15" pos:column="65"/></name><operator pos:line="15" pos:column="65">-&gt;<pos:position pos:line="15" pos:column="70"/></operator><name pos:line="15" pos:column="67">base<pos:position pos:line="15" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="73"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="16" pos:column="17">err<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <call><name pos:line="16" pos:column="23">write_entry<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">args<pos:position pos:line="16" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="41">args<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">-&gt;<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="47">tree<pos:position pos:line="16" pos:column="51"/></name><operator pos:line="16" pos:column="51">-&gt;<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="53">object<pos:position pos:line="16" pos:column="59"/></name><operator pos:line="16" pos:column="59">.<pos:position pos:line="16" pos:column="60"/></operator><name pos:line="16" pos:column="60">oid<pos:position pos:line="16" pos:column="63"/></name><operator pos:line="16" pos:column="63">.<pos:position pos:line="16" pos:column="64"/></operator><name pos:line="16" pos:column="64">hash<pos:position pos:line="16" pos:column="68"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="70">args<pos:position pos:line="16" pos:column="74"/></name><operator pos:line="16" pos:column="74">-&gt;<pos:position pos:line="16" pos:column="79"/></operator><name pos:line="16" pos:column="76">base<pos:position pos:line="16" pos:column="80"/></name></name></expr></argument>,
				  <argument><expr><name pos:line="17" pos:column="35">len<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="40">040777<pos:position pos:line="17" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">err<pos:position pos:line="18" pos:column="24"/></name></expr>)<pos:position pos:line="18" pos:column="25"/></condition><then pos:line="18" pos:column="25">
			<block type="pseudo"><return pos:line="19" pos:column="25">return <expr><name pos:line="19" pos:column="32">err<pos:position pos:line="19" pos:column="35"/></name></expr>;<pos:position pos:line="19" pos:column="36"/></return></block></then></if>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">memset<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><operator pos:line="22" pos:column="16">&amp;<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="17">context<pos:position pos:line="22" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="26">0<pos:position pos:line="22" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="29">sizeof<argument_list pos:line="22" pos:column="35">(<argument><expr><name pos:line="22" pos:column="36">context<pos:position pos:line="22" pos:column="43"/></name></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">context<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">.<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">args<pos:position pos:line="23" pos:column="21"/></name></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <name pos:line="23" pos:column="24">args<pos:position pos:line="23" pos:column="28"/></name></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">context<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">.<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">write_entry<pos:position pos:line="24" pos:column="28"/></name></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <name pos:line="24" pos:column="31">write_entry<pos:position pos:line="24" pos:column="42"/></name></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>

	<comment type="block" pos:line="26" pos:column="9">/*
	 * Setup index and instruct attr to read index only
	 */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><name><name pos:line="29" pos:column="14">args<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">worktree_attributes<pos:position pos:line="29" pos:column="39"/></name></name></expr>)<pos:position pos:line="29" pos:column="40"/></condition><then pos:line="29" pos:column="40"> <block pos:line="29" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">memset<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><operator pos:line="30" pos:column="24">&amp;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="25">opts<pos:position pos:line="30" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="31">0<pos:position pos:line="30" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="34">sizeof<argument_list pos:line="30" pos:column="40">(<argument><expr><name pos:line="30" pos:column="41">opts<pos:position pos:line="30" pos:column="45"/></name></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">opts<pos:position pos:line="31" pos:column="21"/></name><operator pos:line="31" pos:column="21">.<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">index_only<pos:position pos:line="31" pos:column="32"/></name></name> <operator pos:line="31" pos:column="33">=<pos:position pos:line="31" pos:column="34"/></operator> <literal type="number" pos:line="31" pos:column="35">1<pos:position pos:line="31" pos:column="36"/></literal></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="32" pos:column="17">opts<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">.<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">head_idx<pos:position pos:line="32" pos:column="30"/></name></name> <operator pos:line="32" pos:column="31">=<pos:position pos:line="32" pos:column="32"/></operator> <operator pos:line="32" pos:column="33">-<pos:position pos:line="32" pos:column="34"/></operator><literal type="number" pos:line="32" pos:column="34">1<pos:position pos:line="32" pos:column="35"/></literal></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">opts<pos:position pos:line="33" pos:column="21"/></name><operator pos:line="33" pos:column="21">.<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">src_index<pos:position pos:line="33" pos:column="31"/></name></name> <operator pos:line="33" pos:column="32">=<pos:position pos:line="33" pos:column="33"/></operator> <operator pos:line="33" pos:column="34">&amp;<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="35">the_index<pos:position pos:line="33" pos:column="44"/></name></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">opts<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">.<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">dst_index<pos:position pos:line="34" pos:column="31"/></name></name> <operator pos:line="34" pos:column="32">=<pos:position pos:line="34" pos:column="33"/></operator> <operator pos:line="34" pos:column="34">&amp;<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="35">the_index<pos:position pos:line="34" pos:column="44"/></name></expr>;<pos:position pos:line="34" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">opts<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">.<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">fn<pos:position pos:line="35" pos:column="24"/></name></name> <operator pos:line="35" pos:column="25">=<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="27">oneway_merge<pos:position pos:line="35" pos:column="39"/></name></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">init_tree_desc<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">(<argument><expr><operator pos:line="36" pos:column="32">&amp;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="33">t<pos:position pos:line="36" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="36">args<pos:position pos:line="36" pos:column="40"/></name><operator pos:line="36" pos:column="40">-&gt;<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="42">tree<pos:position pos:line="36" pos:column="46"/></name><operator pos:line="36" pos:column="46">-&gt;<pos:position pos:line="36" pos:column="51"/></operator><name pos:line="36" pos:column="48">buffer<pos:position pos:line="36" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="56">args<pos:position pos:line="36" pos:column="60"/></name><operator pos:line="36" pos:column="60">-&gt;<pos:position pos:line="36" pos:column="65"/></operator><name pos:line="36" pos:column="62">tree<pos:position pos:line="36" pos:column="66"/></name><operator pos:line="36" pos:column="66">-&gt;<pos:position pos:line="36" pos:column="71"/></operator><name pos:line="36" pos:column="68">size<pos:position pos:line="36" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="74"/></expr_stmt>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><call><name pos:line="37" pos:column="21">unpack_trees<pos:position pos:line="37" pos:column="33"/></name><argument_list pos:line="37" pos:column="33">(<argument><expr><literal type="number" pos:line="37" pos:column="34">1<pos:position pos:line="37" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="37" pos:column="37">&amp;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="38">t<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="41">&amp;<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="42">opts<pos:position pos:line="37" pos:column="46"/></name></expr></argument>)<pos:position pos:line="37" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="48"/></condition><then pos:line="37" pos:column="48">
			<block type="pseudo"><return pos:line="38" pos:column="25">return <expr><operator pos:line="38" pos:column="32">-<pos:position pos:line="38" pos:column="33"/></operator><literal type="number" pos:line="38" pos:column="33">1<pos:position pos:line="38" pos:column="34"/></literal></expr>;<pos:position pos:line="38" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">git_attr_set_direction<pos:position pos:line="39" pos:column="39"/></name><argument_list pos:line="39" pos:column="39">(<argument><expr><name pos:line="39" pos:column="40">GIT_ATTR_INDEX<pos:position pos:line="39" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="56">&amp;<pos:position pos:line="39" pos:column="61"/></operator><name pos:line="39" pos:column="57">the_index<pos:position pos:line="39" pos:column="66"/></name></expr></argument>)<pos:position pos:line="39" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="68"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="42" pos:column="9">err<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <call><name pos:line="42" pos:column="15">read_tree_recursive<pos:position pos:line="42" pos:column="34"/></name><argument_list pos:line="42" pos:column="34">(<argument><expr><name><name pos:line="42" pos:column="35">args<pos:position pos:line="42" pos:column="39"/></name><operator pos:line="42" pos:column="39">-&gt;<pos:position pos:line="42" pos:column="44"/></operator><name pos:line="42" pos:column="41">tree<pos:position pos:line="42" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="47">""<pos:position pos:line="42" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="51">0<pos:position pos:line="42" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="54">0<pos:position pos:line="42" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="42" pos:column="57">&amp;<pos:position pos:line="42" pos:column="62"/></operator><name><name pos:line="42" pos:column="58">args<pos:position pos:line="42" pos:column="62"/></name><operator pos:line="42" pos:column="62">-&gt;<pos:position pos:line="42" pos:column="67"/></operator><name pos:line="42" pos:column="64">pathspec<pos:position pos:line="42" pos:column="72"/></name></name></expr></argument>,
				  <argument><expr><ternary><condition><expr><name><name pos:line="43" pos:column="35">args<pos:position pos:line="43" pos:column="39"/></name><operator pos:line="43" pos:column="39">-&gt;<pos:position pos:line="43" pos:column="44"/></operator><name pos:line="43" pos:column="41">pathspec<pos:position pos:line="43" pos:column="49"/></name><operator pos:line="43" pos:column="49">.<pos:position pos:line="43" pos:column="50"/></operator><name pos:line="43" pos:column="50">has_wildcard<pos:position pos:line="43" pos:column="62"/></name></name></expr> ?<pos:position pos:line="43" pos:column="64"/></condition><then pos:line="43" pos:column="64">
				  <expr><name pos:line="44" pos:column="35">queue_or_write_archive_entry<pos:position pos:line="44" pos:column="63"/></name></expr> <pos:position pos:line="44" pos:column="64"/></then><else pos:line="44" pos:column="64">:
				  <expr><name pos:line="45" pos:column="35">write_archive_entry_buf<pos:position pos:line="45" pos:column="58"/></name></expr></else></ternary></expr></argument>,
				  <argument><expr><operator pos:line="46" pos:column="35">&amp;<pos:position pos:line="46" pos:column="40"/></operator><name pos:line="46" pos:column="36">context<pos:position pos:line="46" pos:column="43"/></name></expr></argument>)<pos:position pos:line="46" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">err<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">==<pos:position pos:line="47" pos:column="19"/></operator> <name pos:line="47" pos:column="20">READ_TREE_RECURSIVE<pos:position pos:line="47" pos:column="39"/></name></expr>)<pos:position pos:line="47" pos:column="40"/></condition><then pos:line="47" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="17">err<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <literal type="number" pos:line="48" pos:column="23">0<pos:position pos:line="48" pos:column="24"/></literal></expr>;<pos:position pos:line="48" pos:column="25"/></expr_stmt></block></then></if>
	<while pos:line="49" pos:column="9">while <condition pos:line="49" pos:column="15">(<expr><name><name pos:line="49" pos:column="16">context<pos:position pos:line="49" pos:column="23"/></name><operator pos:line="49" pos:column="23">.<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="24">bottom<pos:position pos:line="49" pos:column="30"/></name></name></expr>)<pos:position pos:line="49" pos:column="31"/></condition> <block pos:line="49" pos:column="32">{
		<decl_stmt><decl><type><name><name pos:line="50" pos:column="17">struct<pos:position pos:line="50" pos:column="23"/></name> <name pos:line="50" pos:column="24">directory<pos:position pos:line="50" pos:column="33"/></name></name> <modifier pos:line="50" pos:column="34">*<pos:position pos:line="50" pos:column="35"/></modifier></type><name pos:line="50" pos:column="35">next<pos:position pos:line="50" pos:column="39"/></name> <init pos:line="50" pos:column="40">= <expr><name><name pos:line="50" pos:column="42">context<pos:position pos:line="50" pos:column="49"/></name><operator pos:line="50" pos:column="49">.<pos:position pos:line="50" pos:column="50"/></operator><name pos:line="50" pos:column="50">bottom<pos:position pos:line="50" pos:column="56"/></name><operator pos:line="50" pos:column="56">-&gt;<pos:position pos:line="50" pos:column="61"/></operator><name pos:line="50" pos:column="58">up<pos:position pos:line="50" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="50" pos:column="61"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">free<pos:position pos:line="51" pos:column="21"/></name><argument_list pos:line="51" pos:column="21">(<argument><expr><name><name pos:line="51" pos:column="22">context<pos:position pos:line="51" pos:column="29"/></name><operator pos:line="51" pos:column="29">.<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="30">bottom<pos:position pos:line="51" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="52" pos:column="17">context<pos:position pos:line="52" pos:column="24"/></name><operator pos:line="52" pos:column="24">.<pos:position pos:line="52" pos:column="25"/></operator><name pos:line="52" pos:column="25">bottom<pos:position pos:line="52" pos:column="31"/></name></name> <operator pos:line="52" pos:column="32">=<pos:position pos:line="52" pos:column="33"/></operator> <name pos:line="52" pos:column="34">next<pos:position pos:line="52" pos:column="38"/></name></expr>;<pos:position pos:line="52" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="53" pos:column="10"/></block></while>
	<return pos:line="54" pos:column="9">return <expr><name pos:line="54" pos:column="16">err<pos:position pos:line="54" pos:column="19"/></name></expr>;<pos:position pos:line="54" pos:column="20"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
