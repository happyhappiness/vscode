<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_184.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_trace_fd<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">key<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">need_close<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">trace<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><call><name pos:line="3" pos:column="23">getenv<pos:position pos:line="3" pos:column="29"/></name><argument_list pos:line="3" pos:column="29">(<argument><expr><name pos:line="3" pos:column="30">key<pos:position pos:line="3" pos:column="33"/></name></expr></argument>)<pos:position pos:line="3" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">trace<pos:position pos:line="5" pos:column="19"/></name> <operator pos:line="5" pos:column="20">||<pos:position pos:line="5" pos:column="22"/></operator> <operator pos:line="5" pos:column="23">!<pos:position pos:line="5" pos:column="24"/></operator><call><name pos:line="5" pos:column="24">strcmp<pos:position pos:line="5" pos:column="30"/></name><argument_list pos:line="5" pos:column="30">(<argument><expr><name pos:line="5" pos:column="31">trace<pos:position pos:line="5" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="38">""<pos:position pos:line="5" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call> <operator pos:line="5" pos:column="42">||<pos:position pos:line="5" pos:column="44"/></operator>
	    <operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">strcmp<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">trace<pos:position pos:line="6" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="28">"0"<pos:position pos:line="6" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call> <operator pos:line="6" pos:column="33">||<pos:position pos:line="6" pos:column="35"/></operator> <operator pos:line="6" pos:column="36">!<pos:position pos:line="6" pos:column="37"/></operator><call><name pos:line="6" pos:column="37">strcasecmp<pos:position pos:line="6" pos:column="47"/></name><argument_list pos:line="6" pos:column="47">(<argument><expr><name pos:line="6" pos:column="48">trace<pos:position pos:line="6" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="55">"false"<pos:position pos:line="6" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="64"/></condition><then pos:line="6" pos:column="64">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></return></block></then></if>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><call><name pos:line="8" pos:column="14">strcmp<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">trace<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="28">"1"<pos:position pos:line="8" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call> <operator pos:line="8" pos:column="33">||<pos:position pos:line="8" pos:column="35"/></operator> <operator pos:line="8" pos:column="36">!<pos:position pos:line="8" pos:column="37"/></operator><call><name pos:line="8" pos:column="37">strcasecmp<pos:position pos:line="8" pos:column="47"/></name><argument_list pos:line="8" pos:column="47">(<argument><expr><name pos:line="8" pos:column="48">trace<pos:position pos:line="8" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="55">"true"<pos:position pos:line="8" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="63"/></condition><then pos:line="8" pos:column="63">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><name pos:line="9" pos:column="24">STDERR_FILENO<pos:position pos:line="9" pos:column="37"/></name></expr>;<pos:position pos:line="9" pos:column="38"/></return></block></then></if>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">strlen<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">trace<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call> <operator pos:line="10" pos:column="27">==<pos:position pos:line="10" pos:column="29"/></operator> <literal type="number" pos:line="10" pos:column="30">1<pos:position pos:line="10" pos:column="31"/></literal> <operator pos:line="10" pos:column="32">&amp;&amp;<pos:position pos:line="10" pos:column="42"/></operator> <call><name pos:line="10" pos:column="35">isdigit<pos:position pos:line="10" pos:column="42"/></name><argument_list pos:line="10" pos:column="42">(<argument><expr><operator pos:line="10" pos:column="43">*<pos:position pos:line="10" pos:column="44"/></operator><name pos:line="10" pos:column="44">trace<pos:position pos:line="10" pos:column="49"/></name></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="51"/></condition><then pos:line="10" pos:column="51">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><call><name pos:line="11" pos:column="24">atoi<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">trace<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></return></block></then></if>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">is_absolute_path<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">trace<pos:position pos:line="12" pos:column="35"/></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="37"/></condition><then pos:line="12" pos:column="37"> <block pos:line="12" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">fd<pos:position pos:line="13" pos:column="23"/></name> <init pos:line="13" pos:column="24">= <expr><call><name pos:line="13" pos:column="26">open<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">trace<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="38">O_WRONLY<pos:position pos:line="13" pos:column="46"/></name> <operator pos:line="13" pos:column="47">|<pos:position pos:line="13" pos:column="48"/></operator> <name pos:line="13" pos:column="49">O_APPEND<pos:position pos:line="13" pos:column="57"/></name> <operator pos:line="13" pos:column="58">|<pos:position pos:line="13" pos:column="59"/></operator> <name pos:line="13" pos:column="60">O_CREAT<pos:position pos:line="13" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="69">0666<pos:position pos:line="13" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="75"/></decl_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">fd<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">==<pos:position pos:line="14" pos:column="26"/></operator> <operator pos:line="14" pos:column="27">-<pos:position pos:line="14" pos:column="28"/></operator><literal type="number" pos:line="14" pos:column="28">1<pos:position pos:line="14" pos:column="29"/></literal></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30"> <block pos:line="14" pos:column="31">{
			<expr_stmt><expr><call><name pos:line="15" pos:column="25">fprintf<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">stderr<pos:position pos:line="15" pos:column="39"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="16" pos:column="33">"Could not open '%s' for tracing: %s\n"<pos:position pos:line="16" pos:column="72"/></literal>
				<literal type="string" pos:line="17" pos:column="33">"Defaulting to tracing on stderr...\n"<pos:position pos:line="17" pos:column="71"/></literal></expr></argument>,
				<argument><expr><name pos:line="18" pos:column="33">trace<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="40">strerror<pos:position pos:line="18" pos:column="48"/></name><argument_list pos:line="18" pos:column="48">(<argument><expr><name pos:line="18" pos:column="49">errno<pos:position pos:line="18" pos:column="54"/></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="57"/></expr_stmt>
			<return pos:line="19" pos:column="25">return <expr><name pos:line="19" pos:column="32">STDERR_FILENO<pos:position pos:line="19" pos:column="45"/></name></expr>;<pos:position pos:line="19" pos:column="46"/></return>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="21" pos:column="17">*<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">need_close<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">=<pos:position pos:line="21" pos:column="30"/></operator> <literal type="number" pos:line="21" pos:column="31">1<pos:position pos:line="21" pos:column="32"/></literal></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
		<return pos:line="22" pos:column="17">return <expr><name pos:line="22" pos:column="24">fd<pos:position pos:line="22" pos:column="26"/></name></expr>;<pos:position pos:line="22" pos:column="27"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">fprintf<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">(<argument><expr><name pos:line="25" pos:column="17">stderr<pos:position pos:line="25" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="25">"What does '%s' for %s mean?\n"<pos:position pos:line="25" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="58">trace<pos:position pos:line="25" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="65">key<pos:position pos:line="25" pos:column="68"/></name></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="70"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">fprintf<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">stderr<pos:position pos:line="26" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="25">"If you want to trace into a file, "<pos:position pos:line="26" pos:column="61"/></literal>
		<literal type="string" pos:line="27" pos:column="17">"then please set %s to an absolute pathname "<pos:position pos:line="27" pos:column="62"/></literal>
		<literal type="string" pos:line="28" pos:column="17">"(starting with /).\n"<pos:position pos:line="28" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">key<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">fprintf<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">stderr<pos:position pos:line="29" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="25">"Defaulting to tracing on stderr...\n"<pos:position pos:line="29" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="65"/></expr_stmt>

	<return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">STDERR_FILENO<pos:position pos:line="31" pos:column="29"/></name></expr>;<pos:position pos:line="31" pos:column="30"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
