<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_545_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_ref_filter_atom<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">ref_format<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">format<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
				 <parameter><decl><type><specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <name pos:line="2" pos:column="40">char<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">atom<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="52">const<pos:position pos:line="2" pos:column="57"/></specifier> <name pos:line="2" pos:column="58">char<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">ep<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">sp<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">arg<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="16">at<pos:position pos:line="6" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="20">atom_len<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">sp<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <name pos:line="8" pos:column="14">atom<pos:position pos:line="8" pos:column="18"/></name></expr>;<pos:position pos:line="8" pos:column="19"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">*<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">sp<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">==<pos:position pos:line="9" pos:column="19"/></operator> <literal type="char" pos:line="9" pos:column="20">'*'<pos:position pos:line="9" pos:column="23"/></literal> <operator pos:line="9" pos:column="24">&amp;&amp;<pos:position pos:line="9" pos:column="34"/></operator> <name pos:line="9" pos:column="27">sp<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">&lt;<pos:position pos:line="9" pos:column="34"/></operator> <name pos:line="9" pos:column="32">ep<pos:position pos:line="9" pos:column="34"/></name></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="17">sp<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">++<pos:position pos:line="10" pos:column="21"/></operator></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt></block></then></if> <comment type="block" pos:line="10" pos:column="23">/* deref */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">ep<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">&lt;=<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="19">sp<pos:position pos:line="11" pos:column="21"/></name></expr>)<pos:position pos:line="11" pos:column="22"/></condition><then pos:line="11" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">die<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><call><name pos:line="12" pos:column="21">_<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><literal type="string" pos:line="12" pos:column="23">"malformed field name: %.*s"<pos:position pos:line="12" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><call pos:line="12" pos:column="54">(<name pos:line="12" pos:column="55">int<pos:position pos:line="12" pos:column="58"/></name>)<argument_list pos:line="12" pos:column="59">(<argument><expr><name pos:line="12" pos:column="60">ep<pos:position pos:line="12" pos:column="62"/></name><operator pos:line="12" pos:column="62">-<pos:position pos:line="12" pos:column="63"/></operator><name pos:line="12" pos:column="63">atom<pos:position pos:line="12" pos:column="67"/></name></expr></argument>)<pos:position pos:line="12" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="12" pos:column="70">atom<pos:position pos:line="12" pos:column="74"/></name></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="76"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="14" pos:column="9">/* Do we have the atom already used elsewhere? */</comment>
	<for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init><expr><name pos:line="15" pos:column="14">i<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>;<pos:position pos:line="15" pos:column="20"/></init> <condition><expr><name pos:line="15" pos:column="21">i<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&lt;<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="25">used_atom_cnt<pos:position pos:line="15" pos:column="38"/></name></expr>;<pos:position pos:line="15" pos:column="39"/></condition> <incr><expr><name pos:line="15" pos:column="40">i<pos:position pos:line="15" pos:column="41"/></name><operator pos:line="15" pos:column="41">++<pos:position pos:line="15" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="44"/></control> <block pos:line="15" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">int<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">len<pos:position pos:line="16" pos:column="24"/></name> <init pos:line="16" pos:column="25">= <expr><call><name pos:line="16" pos:column="27">strlen<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><name><name pos:line="16" pos:column="34">used_atom<pos:position pos:line="16" pos:column="43"/></name><index pos:line="16" pos:column="43">[<expr><name pos:line="16" pos:column="44">i<pos:position pos:line="16" pos:column="45"/></name></expr>]<pos:position pos:line="16" pos:column="46"/></index></name><operator pos:line="16" pos:column="46">.<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="47">name<pos:position pos:line="16" pos:column="51"/></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="53"/></decl_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">len<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">==<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="28">ep<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">-<pos:position pos:line="17" pos:column="32"/></operator> <name pos:line="17" pos:column="33">atom<pos:position pos:line="17" pos:column="37"/></name> <operator pos:line="17" pos:column="38">&amp;&amp;<pos:position pos:line="17" pos:column="48"/></operator> <operator pos:line="17" pos:column="41">!<pos:position pos:line="17" pos:column="42"/></operator><call><name pos:line="17" pos:column="42">memcmp<pos:position pos:line="17" pos:column="48"/></name><argument_list pos:line="17" pos:column="48">(<argument><expr><name><name pos:line="17" pos:column="49">used_atom<pos:position pos:line="17" pos:column="58"/></name><index pos:line="17" pos:column="58">[<expr><name pos:line="17" pos:column="59">i<pos:position pos:line="17" pos:column="60"/></name></expr>]<pos:position pos:line="17" pos:column="61"/></index></name><operator pos:line="17" pos:column="61">.<pos:position pos:line="17" pos:column="62"/></operator><name pos:line="17" pos:column="62">name<pos:position pos:line="17" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="68">atom<pos:position pos:line="17" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="74">len<pos:position pos:line="17" pos:column="77"/></name></expr></argument>)<pos:position pos:line="17" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="79"/></condition><then pos:line="17" pos:column="79">
			<block type="pseudo"><return pos:line="18" pos:column="25">return <expr><name pos:line="18" pos:column="32">i<pos:position pos:line="18" pos:column="33"/></name></expr>;<pos:position pos:line="18" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="19" pos:column="10"/></block></for>

	<comment type="block" pos:line="21" pos:column="9">/*
	 * If the atom name has a colon, strip it and everything after
	 * it off - it specifies the format for this entry, and
	 * shouldn't be used for checking against the valid_atom
	 * table.
	 */</comment>
	<expr_stmt><expr><name pos:line="27" pos:column="9">arg<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <call><name pos:line="27" pos:column="15">memchr<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">sp<pos:position pos:line="27" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="27" pos:column="26">':'<pos:position pos:line="27" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="31">ep<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">-<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="36">sp<pos:position pos:line="27" pos:column="38"/></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">atom_len<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <operator pos:line="28" pos:column="20">(<pos:position pos:line="28" pos:column="21"/></operator><ternary><condition><expr><name pos:line="28" pos:column="21">arg<pos:position pos:line="28" pos:column="24"/></name></expr> ?<pos:position pos:line="28" pos:column="26"/></condition><then pos:line="28" pos:column="26"> <expr><name pos:line="28" pos:column="27">arg<pos:position pos:line="28" pos:column="30"/></name></expr> <pos:position pos:line="28" pos:column="31"/></then><else pos:line="28" pos:column="31">: <expr><name pos:line="28" pos:column="33">ep<pos:position pos:line="28" pos:column="35"/></name></expr></else></ternary><operator pos:line="28" pos:column="35">)<pos:position pos:line="28" pos:column="36"/></operator> <operator pos:line="28" pos:column="37">-<pos:position pos:line="28" pos:column="38"/></operator> <name pos:line="28" pos:column="39">sp<pos:position pos:line="28" pos:column="41"/></name></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>

	<comment type="block" pos:line="30" pos:column="9">/* Is the atom a valid one? */</comment>
	<for pos:line="31" pos:column="9">for <control pos:line="31" pos:column="13">(<init><expr><name pos:line="31" pos:column="14">i<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <literal type="number" pos:line="31" pos:column="18">0<pos:position pos:line="31" pos:column="19"/></literal></expr>;<pos:position pos:line="31" pos:column="20"/></init> <condition><expr><name pos:line="31" pos:column="21">i<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&lt;<pos:position pos:line="31" pos:column="27"/></operator> <call><name pos:line="31" pos:column="25">ARRAY_SIZE<pos:position pos:line="31" pos:column="35"/></name><argument_list pos:line="31" pos:column="35">(<argument><expr><name pos:line="31" pos:column="36">valid_atom<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></condition> <incr><expr><name pos:line="31" pos:column="49">i<pos:position pos:line="31" pos:column="50"/></name><operator pos:line="31" pos:column="50">++<pos:position pos:line="31" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="31" pos:column="53"/></control> <block pos:line="31" pos:column="54">{
		<decl_stmt><decl><type><name pos:line="32" pos:column="17">int<pos:position pos:line="32" pos:column="20"/></name></type> <name pos:line="32" pos:column="21">len<pos:position pos:line="32" pos:column="24"/></name> <init pos:line="32" pos:column="25">= <expr><call><name pos:line="32" pos:column="27">strlen<pos:position pos:line="32" pos:column="33"/></name><argument_list pos:line="32" pos:column="33">(<argument><expr><name><name pos:line="32" pos:column="34">valid_atom<pos:position pos:line="32" pos:column="44"/></name><index pos:line="32" pos:column="44">[<expr><name pos:line="32" pos:column="45">i<pos:position pos:line="32" pos:column="46"/></name></expr>]<pos:position pos:line="32" pos:column="47"/></index></name><operator pos:line="32" pos:column="47">.<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="48">name<pos:position pos:line="32" pos:column="52"/></name></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="54"/></decl_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">len<pos:position pos:line="33" pos:column="24"/></name> <operator pos:line="33" pos:column="25">==<pos:position pos:line="33" pos:column="27"/></operator> <name pos:line="33" pos:column="28">atom_len<pos:position pos:line="33" pos:column="36"/></name> <operator pos:line="33" pos:column="37">&amp;&amp;<pos:position pos:line="33" pos:column="47"/></operator> <operator pos:line="33" pos:column="40">!<pos:position pos:line="33" pos:column="41"/></operator><call><name pos:line="33" pos:column="41">memcmp<pos:position pos:line="33" pos:column="47"/></name><argument_list pos:line="33" pos:column="47">(<argument><expr><name><name pos:line="33" pos:column="48">valid_atom<pos:position pos:line="33" pos:column="58"/></name><index pos:line="33" pos:column="58">[<expr><name pos:line="33" pos:column="59">i<pos:position pos:line="33" pos:column="60"/></name></expr>]<pos:position pos:line="33" pos:column="61"/></index></name><operator pos:line="33" pos:column="61">.<pos:position pos:line="33" pos:column="62"/></operator><name pos:line="33" pos:column="62">name<pos:position pos:line="33" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="68">sp<pos:position pos:line="33" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="72">len<pos:position pos:line="33" pos:column="75"/></name></expr></argument>)<pos:position pos:line="33" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="77"/></condition><then pos:line="33" pos:column="77">
			<block type="pseudo"><break pos:line="34" pos:column="25">break;<pos:position pos:line="34" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></for>

	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">ARRAY_SIZE<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><name pos:line="37" pos:column="24">valid_atom<pos:position pos:line="37" pos:column="34"/></name></expr></argument>)<pos:position pos:line="37" pos:column="35"/></argument_list></call> <operator pos:line="37" pos:column="36">&lt;=<pos:position pos:line="37" pos:column="41"/></operator> <name pos:line="37" pos:column="39">i<pos:position pos:line="37" pos:column="40"/></name></expr>)<pos:position pos:line="37" pos:column="41"/></condition><then pos:line="37" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="17">die<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><call><name pos:line="38" pos:column="21">_<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><literal type="string" pos:line="38" pos:column="23">"unknown field name: %.*s"<pos:position pos:line="38" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><call pos:line="38" pos:column="52">(<name pos:line="38" pos:column="53">int<pos:position pos:line="38" pos:column="56"/></name>)<argument_list pos:line="38" pos:column="57">(<argument><expr><name pos:line="38" pos:column="58">ep<pos:position pos:line="38" pos:column="60"/></name><operator pos:line="38" pos:column="60">-<pos:position pos:line="38" pos:column="61"/></operator><name pos:line="38" pos:column="61">atom<pos:position pos:line="38" pos:column="65"/></name></expr></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="38" pos:column="68">atom<pos:position pos:line="38" pos:column="72"/></name></expr></argument>)<pos:position pos:line="38" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="74"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="40" pos:column="9">/* Add it in, including the deref prefix */</comment>
	<expr_stmt><expr><name pos:line="41" pos:column="9">at<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">=<pos:position pos:line="41" pos:column="13"/></operator> <name pos:line="41" pos:column="14">used_atom_cnt<pos:position pos:line="41" pos:column="27"/></name></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="42" pos:column="9">used_atom_cnt<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">++<pos:position pos:line="42" pos:column="24"/></operator></expr>;<pos:position pos:line="42" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">REALLOC_ARRAY<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><name pos:line="43" pos:column="23">used_atom<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="34">used_atom_cnt<pos:position pos:line="43" pos:column="47"/></name></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="44" pos:column="9">used_atom<pos:position pos:line="44" pos:column="18"/></name><index pos:line="44" pos:column="18">[<expr><name pos:line="44" pos:column="19">at<pos:position pos:line="44" pos:column="21"/></name></expr>]<pos:position pos:line="44" pos:column="22"/></index></name><operator pos:line="44" pos:column="22">.<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="23">name<pos:position pos:line="44" pos:column="27"/></name> <operator pos:line="44" pos:column="28">=<pos:position pos:line="44" pos:column="29"/></operator> <call><name pos:line="44" pos:column="30">xmemdupz<pos:position pos:line="44" pos:column="38"/></name><argument_list pos:line="44" pos:column="38">(<argument><expr><name pos:line="44" pos:column="39">atom<pos:position pos:line="44" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="45">ep<pos:position pos:line="44" pos:column="47"/></name> <operator pos:line="44" pos:column="48">-<pos:position pos:line="44" pos:column="49"/></operator> <name pos:line="44" pos:column="50">atom<pos:position pos:line="44" pos:column="54"/></name></expr></argument>)<pos:position pos:line="44" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="45" pos:column="9">used_atom<pos:position pos:line="45" pos:column="18"/></name><index pos:line="45" pos:column="18">[<expr><name pos:line="45" pos:column="19">at<pos:position pos:line="45" pos:column="21"/></name></expr>]<pos:position pos:line="45" pos:column="22"/></index></name><operator pos:line="45" pos:column="22">.<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="23">type<pos:position pos:line="45" pos:column="27"/></name> <operator pos:line="45" pos:column="28">=<pos:position pos:line="45" pos:column="29"/></operator> <name><name pos:line="45" pos:column="30">valid_atom<pos:position pos:line="45" pos:column="40"/></name><index pos:line="45" pos:column="40">[<expr><name pos:line="45" pos:column="41">i<pos:position pos:line="45" pos:column="42"/></name></expr>]<pos:position pos:line="45" pos:column="43"/></index></name><operator pos:line="45" pos:column="43">.<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="44">cmp_type<pos:position pos:line="45" pos:column="52"/></name></expr>;<pos:position pos:line="45" pos:column="53"/></expr_stmt>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">arg<pos:position pos:line="46" pos:column="16"/></name></expr>)<pos:position pos:line="46" pos:column="17"/></condition><then pos:line="46" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="17">arg<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">=<pos:position pos:line="47" pos:column="22"/></operator> <name><name pos:line="47" pos:column="23">used_atom<pos:position pos:line="47" pos:column="32"/></name><index pos:line="47" pos:column="32">[<expr><name pos:line="47" pos:column="33">at<pos:position pos:line="47" pos:column="35"/></name></expr>]<pos:position pos:line="47" pos:column="36"/></index></name><operator pos:line="47" pos:column="36">.<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="37">name<pos:position pos:line="47" pos:column="41"/></name> <operator pos:line="47" pos:column="42">+<pos:position pos:line="47" pos:column="43"/></operator> <operator pos:line="47" pos:column="44">(<pos:position pos:line="47" pos:column="45"/></operator><name pos:line="47" pos:column="45">arg<pos:position pos:line="47" pos:column="48"/></name> <operator pos:line="47" pos:column="49">-<pos:position pos:line="47" pos:column="50"/></operator> <name pos:line="47" pos:column="51">atom<pos:position pos:line="47" pos:column="55"/></name><operator pos:line="47" pos:column="55">)<pos:position pos:line="47" pos:column="56"/></operator> <operator pos:line="47" pos:column="57">+<pos:position pos:line="47" pos:column="58"/></operator> <literal type="number" pos:line="47" pos:column="59">1<pos:position pos:line="47" pos:column="60"/></literal></expr>;<pos:position pos:line="47" pos:column="61"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">memset<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><operator pos:line="48" pos:column="16">&amp;<pos:position pos:line="48" pos:column="21"/></operator><name><name pos:line="48" pos:column="17">used_atom<pos:position pos:line="48" pos:column="26"/></name><index pos:line="48" pos:column="26">[<expr><name pos:line="48" pos:column="27">at<pos:position pos:line="48" pos:column="29"/></name></expr>]<pos:position pos:line="48" pos:column="30"/></index></name><operator pos:line="48" pos:column="30">.<pos:position pos:line="48" pos:column="31"/></operator><name pos:line="48" pos:column="31">u<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="34">0<pos:position pos:line="48" pos:column="35"/></literal></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="37">sizeof<argument_list pos:line="48" pos:column="43">(<argument><expr><name><name pos:line="48" pos:column="44">used_atom<pos:position pos:line="48" pos:column="53"/></name><index pos:line="48" pos:column="53">[<expr><name pos:line="48" pos:column="54">at<pos:position pos:line="48" pos:column="56"/></name></expr>]<pos:position pos:line="48" pos:column="57"/></index></name><operator pos:line="48" pos:column="57">.<pos:position pos:line="48" pos:column="58"/></operator><name pos:line="48" pos:column="58">u<pos:position pos:line="48" pos:column="59"/></name></expr></argument>)<pos:position pos:line="48" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="62"/></expr_stmt>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name><name pos:line="49" pos:column="13">valid_atom<pos:position pos:line="49" pos:column="23"/></name><index pos:line="49" pos:column="23">[<expr><name pos:line="49" pos:column="24">i<pos:position pos:line="49" pos:column="25"/></name></expr>]<pos:position pos:line="49" pos:column="26"/></index></name><operator pos:line="49" pos:column="26">.<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="27">parser<pos:position pos:line="49" pos:column="33"/></name></expr>)<pos:position pos:line="49" pos:column="34"/></condition><then pos:line="49" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="50" pos:column="17">valid_atom<pos:position pos:line="50" pos:column="27"/></name><index pos:line="50" pos:column="27">[<expr><name pos:line="50" pos:column="28">i<pos:position pos:line="50" pos:column="29"/></name></expr>]<pos:position pos:line="50" pos:column="30"/></index></name><operator pos:line="50" pos:column="30">.<pos:position pos:line="50" pos:column="31"/></operator><call><name pos:line="50" pos:column="31">parser<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name pos:line="50" pos:column="38">format<pos:position pos:line="50" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="46">&amp;<pos:position pos:line="50" pos:column="51"/></operator><name><name pos:line="50" pos:column="47">used_atom<pos:position pos:line="50" pos:column="56"/></name><index pos:line="50" pos:column="56">[<expr><name pos:line="50" pos:column="57">at<pos:position pos:line="50" pos:column="59"/></name></expr>]<pos:position pos:line="50" pos:column="60"/></index></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="62">arg<pos:position pos:line="50" pos:column="65"/></name></expr></argument>)<pos:position pos:line="50" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="67"/></expr_stmt></block></then></if>
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><operator pos:line="51" pos:column="13">*<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">atom<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">==<pos:position pos:line="51" pos:column="21"/></operator> <literal type="char" pos:line="51" pos:column="22">'*'<pos:position pos:line="51" pos:column="25"/></literal></expr>)<pos:position pos:line="51" pos:column="26"/></condition><then pos:line="51" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="17">need_tagged<pos:position pos:line="52" pos:column="28"/></name> <operator pos:line="52" pos:column="29">=<pos:position pos:line="52" pos:column="30"/></operator> <literal type="number" pos:line="52" pos:column="31">1<pos:position pos:line="52" pos:column="32"/></literal></expr>;<pos:position pos:line="52" pos:column="33"/></expr_stmt></block></then></if>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><operator pos:line="53" pos:column="13">!<pos:position pos:line="53" pos:column="14"/></operator><call><name pos:line="53" pos:column="14">strcmp<pos:position pos:line="53" pos:column="20"/></name><argument_list pos:line="53" pos:column="20">(<argument><expr><name><name pos:line="53" pos:column="21">valid_atom<pos:position pos:line="53" pos:column="31"/></name><index pos:line="53" pos:column="31">[<expr><name pos:line="53" pos:column="32">i<pos:position pos:line="53" pos:column="33"/></name></expr>]<pos:position pos:line="53" pos:column="34"/></index></name><operator pos:line="53" pos:column="34">.<pos:position pos:line="53" pos:column="35"/></operator><name pos:line="53" pos:column="35">name<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="41">"symref"<pos:position pos:line="53" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="51"/></condition><then pos:line="53" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="17">need_symref<pos:position pos:line="54" pos:column="28"/></name> <operator pos:line="54" pos:column="29">=<pos:position pos:line="54" pos:column="30"/></operator> <literal type="number" pos:line="54" pos:column="31">1<pos:position pos:line="54" pos:column="32"/></literal></expr>;<pos:position pos:line="54" pos:column="33"/></expr_stmt></block></then></if>
	<return pos:line="55" pos:column="9">return <expr><name pos:line="55" pos:column="16">at<pos:position pos:line="55" pos:column="18"/></name></expr>;<pos:position pos:line="55" pos:column="19"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
