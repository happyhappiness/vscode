<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_30_git-2.6.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">protocol<pos:position pos:line="1" pos:column="21"/></name></name></type> <name pos:line="1" pos:column="22">parse_connect_url<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">url_orig<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier><modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">ret_host<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>,
				       <parameter><decl><type><name pos:line="2" pos:column="40">char<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier><modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">ret_path<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">url<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">host<pos:position pos:line="5" pos:column="19"/></name></decl>, <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="22">path<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">end<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">separator<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><literal type="char" pos:line="7" pos:column="25">'/'<pos:position pos:line="7" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">enum<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">protocol<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">protocol<pos:position pos:line="8" pos:column="31"/></name> <init pos:line="8" pos:column="32">= <expr><name pos:line="8" pos:column="34">PROTO_LOCAL<pos:position pos:line="8" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="46"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">is_url<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">url_orig<pos:position pos:line="10" pos:column="28"/></name></expr></argument>)<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">url<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <call><name pos:line="11" pos:column="23">url_decode<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name pos:line="11" pos:column="34">url_orig<pos:position pos:line="11" pos:column="42"/></name></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt></block></then>
	<else pos:line="12" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="17">url<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <call><name pos:line="13" pos:column="23">xstrdup<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">url_orig<pos:position pos:line="13" pos:column="39"/></name></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="15" pos:column="9">host<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <call><name pos:line="15" pos:column="16">strstr<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">url<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="28">"://"<pos:position pos:line="15" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">host<pos:position pos:line="16" pos:column="17"/></name></expr>)<pos:position pos:line="16" pos:column="18"/></condition><then pos:line="16" pos:column="18"> <block pos:line="16" pos:column="19">{
		<expr_stmt><expr><operator pos:line="17" pos:column="17">*<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">host<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <literal type="char" pos:line="17" pos:column="25">'\0'<pos:position pos:line="17" pos:column="29"/></literal></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name pos:line="18" pos:column="17">protocol<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <call><name pos:line="18" pos:column="28">get_protocol<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">url<pos:position pos:line="18" pos:column="44"/></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">host<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">+=<pos:position pos:line="19" pos:column="24"/></operator> <literal type="number" pos:line="19" pos:column="25">3<pos:position pos:line="19" pos:column="26"/></literal></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then> <else pos:line="20" pos:column="11">else <block pos:line="20" pos:column="16">{
		<expr_stmt><expr><name pos:line="21" pos:column="17">host<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <name pos:line="21" pos:column="24">url<pos:position pos:line="21" pos:column="27"/></name></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><call><name pos:line="22" pos:column="22">url_is_local_not_ssh<pos:position pos:line="22" pos:column="42"/></name><argument_list pos:line="22" pos:column="42">(<argument><expr><name pos:line="22" pos:column="43">url<pos:position pos:line="22" pos:column="46"/></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48"> <block pos:line="22" pos:column="49">{
			<expr_stmt><expr><name pos:line="23" pos:column="25">protocol<pos:position pos:line="23" pos:column="33"/></name> <operator pos:line="23" pos:column="34">=<pos:position pos:line="23" pos:column="35"/></operator> <name pos:line="23" pos:column="36">PROTO_SSH<pos:position pos:line="23" pos:column="45"/></name></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">separator<pos:position pos:line="24" pos:column="34"/></name> <operator pos:line="24" pos:column="35">=<pos:position pos:line="24" pos:column="36"/></operator> <literal type="char" pos:line="24" pos:column="37">':'<pos:position pos:line="24" pos:column="40"/></literal></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="28" pos:column="9">/*
	 * Don't do destructive transforms as protocol code does
	 * '[]' unwrapping in get_host_and_port()
	 */</comment>
	<expr_stmt><expr><name pos:line="32" pos:column="9">end<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <call><name pos:line="32" pos:column="15">host_end<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><operator pos:line="32" pos:column="24">&amp;<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="25">host<pos:position pos:line="32" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="31">0<pos:position pos:line="32" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">protocol<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">==<pos:position pos:line="34" pos:column="24"/></operator> <name pos:line="34" pos:column="25">PROTO_LOCAL<pos:position pos:line="34" pos:column="36"/></name></expr>)<pos:position pos:line="34" pos:column="37"/></condition><then pos:line="34" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="17">path<pos:position pos:line="35" pos:column="21"/></name> <operator pos:line="35" pos:column="22">=<pos:position pos:line="35" pos:column="23"/></operator> <name pos:line="35" pos:column="24">end<pos:position pos:line="35" pos:column="27"/></name></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt></block></then>
	<elseif pos:line="36" pos:column="9">else <if pos:line="36" pos:column="14">if <condition pos:line="36" pos:column="17">(<expr><name pos:line="36" pos:column="18">protocol<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">==<pos:position pos:line="36" pos:column="29"/></operator> <name pos:line="36" pos:column="30">PROTO_FILE<pos:position pos:line="36" pos:column="40"/></name> <operator pos:line="36" pos:column="41">&amp;&amp;<pos:position pos:line="36" pos:column="51"/></operator> <call><name pos:line="36" pos:column="44">has_dos_drive_prefix<pos:position pos:line="36" pos:column="64"/></name><argument_list pos:line="36" pos:column="64">(<argument><expr><name pos:line="36" pos:column="65">end<pos:position pos:line="36" pos:column="68"/></name></expr></argument>)<pos:position pos:line="36" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="70"/></condition><then pos:line="36" pos:column="70">
		<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="17">path<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">end<pos:position pos:line="37" pos:column="27"/></name></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt></block></then></if></elseif> <comment type="block" pos:line="37" pos:column="29">/* "file://$(pwd)" may be "file://C:/projects/repo" */</comment>
	<else pos:line="38" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="17">path<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <call><name pos:line="39" pos:column="24">strchr<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><name pos:line="39" pos:column="31">end<pos:position pos:line="39" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="36">separator<pos:position pos:line="39" pos:column="45"/></name></expr></argument>)<pos:position pos:line="39" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="47"/></expr_stmt></block></else></if>

	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><operator pos:line="41" pos:column="13">!<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="14">path<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">||<pos:position pos:line="41" pos:column="21"/></operator> <operator pos:line="41" pos:column="22">!<pos:position pos:line="41" pos:column="23"/></operator><operator pos:line="41" pos:column="23">*<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="24">path<pos:position pos:line="41" pos:column="28"/></name></expr>)<pos:position pos:line="41" pos:column="29"/></condition><then pos:line="41" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="17">die<pos:position pos:line="42" pos:column="20"/></name><argument_list pos:line="42" pos:column="20">(<argument><expr><literal type="string" pos:line="42" pos:column="21">"No path specified. See 'man git-pull' for valid url syntax"<pos:position pos:line="42" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="83"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="44" pos:column="9">/*
	 * null-terminate hostname and point path to ~ for URL's like this:
	 *    ssh://host.xz/~user/repo
	 */</comment>

	<expr_stmt><expr><name pos:line="49" pos:column="9">end<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">=<pos:position pos:line="49" pos:column="14"/></operator> <name pos:line="49" pos:column="15">path<pos:position pos:line="49" pos:column="19"/></name></expr>;<pos:position pos:line="49" pos:column="20"/></expr_stmt> <comment type="block" pos:line="49" pos:column="21">/* Need to \0 terminate host here */</comment>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">separator<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">==<pos:position pos:line="50" pos:column="25"/></operator> <literal type="char" pos:line="50" pos:column="26">':'<pos:position pos:line="50" pos:column="29"/></literal></expr>)<pos:position pos:line="50" pos:column="30"/></condition><then pos:line="50" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="17">path<pos:position pos:line="51" pos:column="21"/></name><operator pos:line="51" pos:column="21">++<pos:position pos:line="51" pos:column="23"/></operator></expr>;<pos:position pos:line="51" pos:column="24"/></expr_stmt></block></then></if> <comment type="block" pos:line="51" pos:column="25">/* path starts after ':' */</comment>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">protocol<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">==<pos:position pos:line="52" pos:column="24"/></operator> <name pos:line="52" pos:column="25">PROTO_GIT<pos:position pos:line="52" pos:column="34"/></name> <operator pos:line="52" pos:column="35">||<pos:position pos:line="52" pos:column="37"/></operator> <name pos:line="52" pos:column="38">protocol<pos:position pos:line="52" pos:column="46"/></name> <operator pos:line="52" pos:column="47">==<pos:position pos:line="52" pos:column="49"/></operator> <name pos:line="52" pos:column="50">PROTO_SSH<pos:position pos:line="52" pos:column="59"/></name></expr>)<pos:position pos:line="52" pos:column="60"/></condition><then pos:line="52" pos:column="60"> <block pos:line="52" pos:column="61">{
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name><name pos:line="53" pos:column="21">path<pos:position pos:line="53" pos:column="25"/></name><index pos:line="53" pos:column="25">[<expr><literal type="number" pos:line="53" pos:column="26">1<pos:position pos:line="53" pos:column="27"/></literal></expr>]<pos:position pos:line="53" pos:column="28"/></index></name> <operator pos:line="53" pos:column="29">==<pos:position pos:line="53" pos:column="31"/></operator> <literal type="char" pos:line="53" pos:column="32">'~'<pos:position pos:line="53" pos:column="35"/></literal></expr>)<pos:position pos:line="53" pos:column="36"/></condition><then pos:line="53" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="25">path<pos:position pos:line="54" pos:column="29"/></name><operator pos:line="54" pos:column="29">++<pos:position pos:line="54" pos:column="31"/></operator></expr>;<pos:position pos:line="54" pos:column="32"/></expr_stmt></block></then></if>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="57" pos:column="9">path<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">=<pos:position pos:line="57" pos:column="15"/></operator> <call><name pos:line="57" pos:column="16">xstrdup<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><name pos:line="57" pos:column="24">path<pos:position pos:line="57" pos:column="28"/></name></expr></argument>)<pos:position pos:line="57" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="58" pos:column="9">*<pos:position pos:line="58" pos:column="10"/></operator><name pos:line="58" pos:column="10">end<pos:position pos:line="58" pos:column="13"/></name> <operator pos:line="58" pos:column="14">=<pos:position pos:line="58" pos:column="15"/></operator> <literal type="char" pos:line="58" pos:column="16">'\0'<pos:position pos:line="58" pos:column="20"/></literal></expr>;<pos:position pos:line="58" pos:column="21"/></expr_stmt>

	<expr_stmt><expr><operator pos:line="60" pos:column="9">*<pos:position pos:line="60" pos:column="10"/></operator><name pos:line="60" pos:column="10">ret_host<pos:position pos:line="60" pos:column="18"/></name> <operator pos:line="60" pos:column="19">=<pos:position pos:line="60" pos:column="20"/></operator> <call><name pos:line="60" pos:column="21">xstrdup<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">host<pos:position pos:line="60" pos:column="33"/></name></expr></argument>)<pos:position pos:line="60" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="61" pos:column="9">*<pos:position pos:line="61" pos:column="10"/></operator><name pos:line="61" pos:column="10">ret_path<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">=<pos:position pos:line="61" pos:column="20"/></operator> <name pos:line="61" pos:column="21">path<pos:position pos:line="61" pos:column="25"/></name></expr>;<pos:position pos:line="61" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">free<pos:position pos:line="62" pos:column="13"/></name><argument_list pos:line="62" pos:column="13">(<argument><expr><name pos:line="62" pos:column="14">url<pos:position pos:line="62" pos:column="17"/></name></expr></argument>)<pos:position pos:line="62" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="19"/></expr_stmt>
	<return pos:line="63" pos:column="9">return <expr><name pos:line="63" pos:column="16">protocol<pos:position pos:line="63" pos:column="24"/></name></expr>;<pos:position pos:line="63" pos:column="25"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
