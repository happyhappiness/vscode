<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3590_git-2.7.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">grep_expr<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">grep_splice_or<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">grep_expr<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">x<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="62">struct<pos:position pos:line="1" pos:column="68"/></name> <name pos:line="1" pos:column="69">grep_expr<pos:position pos:line="1" pos:column="78"/></name></name> <modifier pos:line="1" pos:column="79">*<pos:position pos:line="1" pos:column="80"/></modifier></type><name pos:line="1" pos:column="80">y<pos:position pos:line="1" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="82"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">grep_expr<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">z<pos:position pos:line="3" pos:column="28"/></name> <init pos:line="3" pos:column="29">= <expr><name pos:line="3" pos:column="31">x<pos:position pos:line="3" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>

	<while pos:line="5" pos:column="9">while <condition pos:line="5" pos:column="15">(<expr><name pos:line="5" pos:column="16">x<pos:position pos:line="5" pos:column="17"/></name></expr>)<pos:position pos:line="5" pos:column="18"/></condition> <block pos:line="5" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">assert<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><name><name pos:line="6" pos:column="24">x<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">-&gt;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="27">node<pos:position pos:line="6" pos:column="31"/></name></name> <operator pos:line="6" pos:column="32">==<pos:position pos:line="6" pos:column="34"/></operator> <name pos:line="6" pos:column="35">GREP_NODE_OR<pos:position pos:line="6" pos:column="47"/></name></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="49"/></expr_stmt>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name><name pos:line="7" pos:column="21">x<pos:position pos:line="7" pos:column="22"/></name><operator pos:line="7" pos:column="22">-&gt;<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="24">u<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">.<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="26">binary<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">.<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="33">right<pos:position pos:line="7" pos:column="38"/></name></name> <operator pos:line="7" pos:column="39">&amp;&amp;<pos:position pos:line="7" pos:column="49"/></operator>
		    <name><name pos:line="8" pos:column="21">x<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">-&gt;<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="24">u<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">.<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="26">binary<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">.<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="33">right<pos:position pos:line="8" pos:column="38"/></name><operator pos:line="8" pos:column="38">-&gt;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="40">node<pos:position pos:line="8" pos:column="44"/></name></name> <operator pos:line="8" pos:column="45">==<pos:position pos:line="8" pos:column="47"/></operator> <name pos:line="8" pos:column="48">GREP_NODE_TRUE<pos:position pos:line="8" pos:column="62"/></name></expr>)<pos:position pos:line="8" pos:column="63"/></condition><then pos:line="8" pos:column="63"> <block pos:line="8" pos:column="64">{
			<expr_stmt><expr><name><name pos:line="9" pos:column="25">x<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">-&gt;<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="28">u<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">.<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="30">binary<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">.<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="37">right<pos:position pos:line="9" pos:column="42"/></name></name> <operator pos:line="9" pos:column="43">=<pos:position pos:line="9" pos:column="44"/></operator> <name pos:line="9" pos:column="45">y<pos:position pos:line="9" pos:column="46"/></name></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>
			<break pos:line="10" pos:column="25">break;<pos:position pos:line="10" pos:column="31"/></break>
		}<pos:position pos:line="11" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="12" pos:column="17">x<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <name><name pos:line="12" pos:column="21">x<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">-&gt;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="24">u<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">.<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">binary<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">.<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">right<pos:position pos:line="12" pos:column="38"/></name></name></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></while>
	<return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">z<pos:position pos:line="14" pos:column="17"/></name></expr>;<pos:position pos:line="14" pos:column="18"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
