<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6753_git-2.13.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">FORCEINLINE<pos:position pos:line="1" pos:column="19"/></name> <name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">pthread_acquire_lock<pos:position pos:line="1" pos:column="44"/></name> <parameter_list pos:line="1" pos:column="45">(<parameter><decl><type><name pos:line="1" pos:column="46">MLOCK_T<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">sl<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list> <block pos:line="1" pos:column="59">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">spins<pos:position pos:line="2" pos:column="12"/></name> <init pos:line="2" pos:column="13">= <expr><literal type="number" pos:line="2" pos:column="15">0<pos:position pos:line="2" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">volatile<pos:position pos:line="3" pos:column="11"/></specifier> <name pos:line="3" pos:column="12">unsigned<pos:position pos:line="3" pos:column="20"/></name> <name pos:line="3" pos:column="21">int<pos:position pos:line="3" pos:column="24"/></name><modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type> <name pos:line="3" pos:column="26">lp<pos:position pos:line="3" pos:column="28"/></name> <init pos:line="3" pos:column="29">= <expr><operator pos:line="3" pos:column="31">&amp;<pos:position pos:line="3" pos:column="36"/></operator><name><name pos:line="3" pos:column="32">sl<pos:position pos:line="3" pos:column="34"/></name><operator pos:line="3" pos:column="34">-&gt;<pos:position pos:line="3" pos:column="39"/></operator><name pos:line="3" pos:column="36">l<pos:position pos:line="3" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
  <for pos:line="4" pos:column="3">for <control pos:line="4" pos:column="7">(<init pos:line="4" pos:column="8">;<pos:position pos:line="4" pos:column="9"/></init><condition pos:line="4" pos:column="9">;<pos:position pos:line="4" pos:column="10"/></condition><incr/>)<pos:position pos:line="4" pos:column="11"/></control> <block pos:line="4" pos:column="12">{
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">lp<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">!=<pos:position pos:line="5" pos:column="15"/></operator> <literal type="number" pos:line="5" pos:column="16">0<pos:position pos:line="5" pos:column="17"/></literal></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18"> <block pos:line="5" pos:column="19">{
      <if pos:line="6" pos:column="7">if <condition pos:line="6" pos:column="10">(<expr><name><name pos:line="6" pos:column="11">sl<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">-&gt;<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="15">threadid<pos:position pos:line="6" pos:column="23"/></name></name> <operator pos:line="6" pos:column="24">==<pos:position pos:line="6" pos:column="26"/></operator> <name pos:line="6" pos:column="27">CURRENT_THREAD<pos:position pos:line="6" pos:column="41"/></name></expr>)<pos:position pos:line="6" pos:column="42"/></condition><then pos:line="6" pos:column="42"> <block pos:line="6" pos:column="43">{
	<expr_stmt><expr><operator pos:line="7" pos:column="9">++<pos:position pos:line="7" pos:column="11"/></operator><name><name pos:line="7" pos:column="11">sl<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">-&gt;<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="15">c<pos:position pos:line="7" pos:column="16"/></name></name></expr>;<pos:position pos:line="7" pos:column="17"/></expr_stmt>
	<return pos:line="8" pos:column="9">return <expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>;<pos:position pos:line="8" pos:column="18"/></return>
      }<pos:position pos:line="9" pos:column="8"/></block></then></if>
    }<pos:position pos:line="10" pos:column="6"/></block></then>
    <else pos:line="11" pos:column="5">else <block pos:line="11" pos:column="10">{
      <comment type="block" pos:line="12" pos:column="7">/* place args to cmpxchgl in locals to evade oddities in some gccs */</comment>
      <decl_stmt><decl><type><name pos:line="13" pos:column="7">int<pos:position pos:line="13" pos:column="10"/></name></type> <name pos:line="13" pos:column="11">cmp<pos:position pos:line="13" pos:column="14"/></name> <init pos:line="13" pos:column="15">= <expr><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="14" pos:column="7">int<pos:position pos:line="14" pos:column="10"/></name></type> <name pos:line="14" pos:column="11">val<pos:position pos:line="14" pos:column="14"/></name> <init pos:line="14" pos:column="15">= <expr><literal type="number" pos:line="14" pos:column="17">1<pos:position pos:line="14" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="19"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="15" pos:column="7">int<pos:position pos:line="15" pos:column="10"/></name></type> <name pos:line="15" pos:column="11">ret<pos:position pos:line="15" pos:column="14"/></name></decl>;<pos:position pos:line="15" pos:column="15"/></decl_stmt>
      <asm pos:line="16" pos:column="7">__asm__ <specifier pos:line="16" pos:column="15">__volatile__<pos:position pos:line="16" pos:column="27"/></specifier>  ("lock; cmpxchgl %1, %2"
			     : "=a" (ret)
			     : "r" (val), "m" (*(lp)), "0"(cmp)
			     : "memory", "cc");<pos:position pos:line="19" pos:column="48"/></asm>
      <if pos:line="20" pos:column="7">if <condition pos:line="20" pos:column="10">(<expr><operator pos:line="20" pos:column="11">!<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="12">ret<pos:position pos:line="20" pos:column="15"/></name></expr>)<pos:position pos:line="20" pos:column="16"/></condition><then pos:line="20" pos:column="16"> <block pos:line="20" pos:column="17">{
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">assert<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><operator pos:line="21" pos:column="16">!<pos:position pos:line="21" pos:column="17"/></operator><name><name pos:line="21" pos:column="17">sl<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">-&gt;<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="21">threadid<pos:position pos:line="21" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">sl<pos:position pos:line="22" pos:column="11"/></name><operator pos:line="22" pos:column="11">-&gt;<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="13">c<pos:position pos:line="22" pos:column="14"/></name></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <literal type="number" pos:line="22" pos:column="17">1<pos:position pos:line="22" pos:column="18"/></literal></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">sl<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">-&gt;<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="13">threadid<pos:position pos:line="23" pos:column="21"/></name></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <name pos:line="23" pos:column="24">CURRENT_THREAD<pos:position pos:line="23" pos:column="38"/></name></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt>
	<return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return>
      }<pos:position pos:line="25" pos:column="8"/></block></then></if>
      <if pos:line="26" pos:column="7">if <condition pos:line="26" pos:column="10">(<expr><operator pos:line="26" pos:column="11">(<pos:position pos:line="26" pos:column="12"/></operator><operator pos:line="26" pos:column="12">++<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">spins<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">&amp;<pos:position pos:line="26" pos:column="25"/></operator> <name pos:line="26" pos:column="22">SPINS_PER_YIELD<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">)<pos:position pos:line="26" pos:column="38"/></operator> <operator pos:line="26" pos:column="39">==<pos:position pos:line="26" pos:column="41"/></operator> <literal type="number" pos:line="26" pos:column="42">0<pos:position pos:line="26" pos:column="43"/></literal></expr>)<pos:position pos:line="26" pos:column="44"/></condition><then pos:line="26" pos:column="44"> <block pos:line="26" pos:column="45">{
<cpp:if pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">if<pos:position pos:line="27" pos:column="4"/></cpp:directive> <expr><call><name pos:line="27" pos:column="5">defined<pos:position pos:line="27" pos:column="12"/></name> <argument_list pos:line="27" pos:column="13">(<argument><expr><name pos:line="27" pos:column="14">__SVR4<pos:position pos:line="27" pos:column="20"/></name></expr></argument>)<pos:position pos:line="27" pos:column="21"/></argument_list></call> <operator pos:line="27" pos:column="22">&amp;&amp;<pos:position pos:line="27" pos:column="32"/></operator> <call><name pos:line="27" pos:column="25">defined<pos:position pos:line="27" pos:column="32"/></name> <argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">__sun<pos:position pos:line="27" pos:column="39"/></name></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr></cpp:if> <comment type="block" pos:line="27" pos:column="41">/* solaris */</comment>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">thr_yield<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">()<pos:position pos:line="28" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>
<cpp:else pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">else<pos:position pos:line="29" pos:column="6"/></cpp:directive></cpp:else>
<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><call><name pos:line="30" pos:column="5">defined<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><name pos:line="30" pos:column="13">__linux__<pos:position pos:line="30" pos:column="22"/></name></expr></argument>)<pos:position pos:line="30" pos:column="23"/></argument_list></call> <operator pos:line="30" pos:column="24">||<pos:position pos:line="30" pos:column="26"/></operator> <call><name pos:line="30" pos:column="27">defined<pos:position pos:line="30" pos:column="34"/></name><argument_list pos:line="30" pos:column="34">(<argument><expr><name pos:line="30" pos:column="35">__FreeBSD__<pos:position pos:line="30" pos:column="46"/></name></expr></argument>)<pos:position pos:line="30" pos:column="47"/></argument_list></call> <operator pos:line="30" pos:column="48">||<pos:position pos:line="30" pos:column="50"/></operator> <call><name pos:line="30" pos:column="51">defined<pos:position pos:line="30" pos:column="58"/></name><argument_list pos:line="30" pos:column="58">(<argument><expr><name pos:line="30" pos:column="59">__APPLE__<pos:position pos:line="30" pos:column="68"/></name></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">sched_yield<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">()<pos:position pos:line="31" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else>  <comment type="block" pos:line="32" pos:column="8">/* no-op yield on unknown systems */</comment>
	<empty_stmt pos:line="33" pos:column="9">;<pos:position pos:line="33" pos:column="10"/></empty_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="34" pos:column="8">/* __linux__ || __FreeBSD__ || __APPLE__ */</comment>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="35" pos:column="8">/* solaris */</comment>
      }<pos:position pos:line="36" pos:column="8"/></block></then></if>
    }<pos:position pos:line="37" pos:column="6"/></block></else></if>
  }<pos:position pos:line="38" pos:column="4"/></block></for>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
