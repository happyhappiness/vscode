<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_48_git-2.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">fixup_pack_header_footer<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">pack_fd<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="2" pos:column="26">unsigned<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">new_pack_sha1<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
			 <parameter><decl><type><specifier pos:line="3" pos:column="26">const<pos:position pos:line="3" pos:column="31"/></specifier> <name pos:line="3" pos:column="32">char<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">pack_name<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="4" pos:column="26">uint32_t<pos:position pos:line="4" pos:column="34"/></name></type> <name pos:line="4" pos:column="35">object_count<pos:position pos:line="4" pos:column="47"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="5" pos:column="26">unsigned<pos:position pos:line="5" pos:column="34"/></name> <name pos:line="5" pos:column="35">char<pos:position pos:line="5" pos:column="39"/></name> <modifier pos:line="5" pos:column="40">*<pos:position pos:line="5" pos:column="41"/></modifier></type><name pos:line="5" pos:column="41">partial_pack_sha1<pos:position pos:line="5" pos:column="58"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="6" pos:column="26">off_t<pos:position pos:line="6" pos:column="31"/></name></type> <name pos:line="6" pos:column="32">partial_pack_offset<pos:position pos:line="6" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="52"/></parameter_list>
<block pos:line="7" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">aligned_sz<pos:position pos:line="8" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="25">buf_sz<pos:position pos:line="8" pos:column="31"/></name> <init pos:line="8" pos:column="32">= <expr><literal type="number" pos:line="8" pos:column="34">8<pos:position pos:line="8" pos:column="35"/></literal> <operator pos:line="8" pos:column="36">*<pos:position pos:line="8" pos:column="37"/></operator> <literal type="number" pos:line="8" pos:column="38">1024<pos:position pos:line="8" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">git_SHA_CTX<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">old_sha1_ctx<pos:position pos:line="9" pos:column="33"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="35">new_sha1_ctx<pos:position pos:line="9" pos:column="47"/></name></decl>;<pos:position pos:line="9" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">pack_header<pos:position pos:line="10" pos:column="27"/></name></name></type> <name pos:line="10" pos:column="28">hdr<pos:position pos:line="10" pos:column="31"/></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">buf<pos:position pos:line="11" pos:column="18"/></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">git_SHA1_Init<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><operator pos:line="13" pos:column="23">&amp;<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="24">old_sha1_ctx<pos:position pos:line="13" pos:column="36"/></name></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">git_SHA1_Init<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><operator pos:line="14" pos:column="23">&amp;<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="24">new_sha1_ctx<pos:position pos:line="14" pos:column="36"/></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">lseek<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><name pos:line="16" pos:column="19">pack_fd<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="28">0<pos:position pos:line="16" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="31">SEEK_SET<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call> <operator pos:line="16" pos:column="41">!=<pos:position pos:line="16" pos:column="43"/></operator> <literal type="number" pos:line="16" pos:column="44">0<pos:position pos:line="16" pos:column="45"/></literal></expr>)<pos:position pos:line="16" pos:column="46"/></condition><then pos:line="16" pos:column="46">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">die_errno<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><literal type="string" pos:line="17" pos:column="27">"Failed seeking to start of '%s'"<pos:position pos:line="17" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="62">pack_name<pos:position pos:line="17" pos:column="71"/></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="73"/></expr_stmt></block></then></if>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">read_in_full<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><name pos:line="18" pos:column="26">pack_fd<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="35">&amp;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="36">hdr<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="41">sizeof<argument_list pos:line="18" pos:column="47">(<argument><expr><name pos:line="18" pos:column="48">hdr<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call> <operator pos:line="18" pos:column="54">!=<pos:position pos:line="18" pos:column="56"/></operator> <sizeof pos:line="18" pos:column="57">sizeof<argument_list pos:line="18" pos:column="63">(<argument><expr><name pos:line="18" pos:column="64">hdr<pos:position pos:line="18" pos:column="67"/></name></expr></argument>)<pos:position pos:line="18" pos:column="68"/></argument_list></sizeof></expr>)<pos:position pos:line="18" pos:column="69"/></condition><then pos:line="18" pos:column="69">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="17">die_errno<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><literal type="string" pos:line="19" pos:column="27">"Unable to reread header of '%s'"<pos:position pos:line="19" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="62">pack_name<pos:position pos:line="19" pos:column="71"/></name></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="73"/></expr_stmt></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">lseek<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">pack_fd<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="28">0<pos:position pos:line="20" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="31">SEEK_SET<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call> <operator pos:line="20" pos:column="41">!=<pos:position pos:line="20" pos:column="43"/></operator> <literal type="number" pos:line="20" pos:column="44">0<pos:position pos:line="20" pos:column="45"/></literal></expr>)<pos:position pos:line="20" pos:column="46"/></condition><then pos:line="20" pos:column="46">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">die_errno<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><literal type="string" pos:line="21" pos:column="27">"Failed seeking to start of '%s'"<pos:position pos:line="21" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="62">pack_name<pos:position pos:line="21" pos:column="71"/></name></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="73"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">git_SHA1_Update<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><operator pos:line="22" pos:column="25">&amp;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="26">old_sha1_ctx<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="40">&amp;<pos:position pos:line="22" pos:column="45"/></operator><name pos:line="22" pos:column="41">hdr<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="46">sizeof<argument_list pos:line="22" pos:column="52">(<argument><expr><name pos:line="22" pos:column="53">hdr<pos:position pos:line="22" pos:column="56"/></name></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">hdr<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">.<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="13">hdr_entries<pos:position pos:line="23" pos:column="24"/></name></name> <operator pos:line="23" pos:column="25">=<pos:position pos:line="23" pos:column="26"/></operator> <call><name pos:line="23" pos:column="27">htonl<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">object_count<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">git_SHA1_Update<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><operator pos:line="24" pos:column="25">&amp;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="26">new_sha1_ctx<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="40">&amp;<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="41">hdr<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="46">sizeof<argument_list pos:line="24" pos:column="52">(<argument><expr><name pos:line="24" pos:column="53">hdr<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">write_or_die<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><name pos:line="25" pos:column="22">pack_fd<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="31">&amp;<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="32">hdr<pos:position pos:line="25" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="37">sizeof<argument_list pos:line="25" pos:column="43">(<argument><expr><name pos:line="25" pos:column="44">hdr<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">partial_pack_offset<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">-=<pos:position pos:line="26" pos:column="31"/></operator> <sizeof pos:line="26" pos:column="32">sizeof<argument_list pos:line="26" pos:column="38">(<argument><expr><name pos:line="26" pos:column="39">hdr<pos:position pos:line="26" pos:column="42"/></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></sizeof></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><name pos:line="28" pos:column="9">buf<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <call><name pos:line="28" pos:column="15">xmalloc<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">buf_sz<pos:position pos:line="28" pos:column="29"/></name></expr></argument>)<pos:position pos:line="28" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">aligned_sz<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <name pos:line="29" pos:column="22">buf_sz<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">-<pos:position pos:line="29" pos:column="30"/></operator> <sizeof pos:line="29" pos:column="31">sizeof<argument_list pos:line="29" pos:column="37">(<argument><expr><name pos:line="29" pos:column="38">hdr<pos:position pos:line="29" pos:column="41"/></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></sizeof></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
	<for pos:line="30" pos:column="9">for <control pos:line="30" pos:column="13">(<init pos:line="30" pos:column="14">;<pos:position pos:line="30" pos:column="15"/></init><condition pos:line="30" pos:column="15">;<pos:position pos:line="30" pos:column="16"/></condition><incr/>)<pos:position pos:line="30" pos:column="17"/></control> <block pos:line="30" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">ssize_t<pos:position pos:line="31" pos:column="24"/></name></type> <name pos:line="31" pos:column="25">m<pos:position pos:line="31" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="31" pos:column="28">n<pos:position pos:line="31" pos:column="29"/></name></decl>;<pos:position pos:line="31" pos:column="30"/></decl_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">m<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <ternary><condition><expr><operator pos:line="32" pos:column="21">(<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">partial_pack_sha1<pos:position pos:line="32" pos:column="39"/></name> <operator pos:line="32" pos:column="40">&amp;&amp;<pos:position pos:line="32" pos:column="50"/></operator> <name pos:line="32" pos:column="43">partial_pack_offset<pos:position pos:line="32" pos:column="62"/></name> <operator pos:line="32" pos:column="63">&lt;<pos:position pos:line="32" pos:column="67"/></operator> <name pos:line="32" pos:column="65">aligned_sz<pos:position pos:line="32" pos:column="75"/></name><operator pos:line="32" pos:column="75">)<pos:position pos:line="32" pos:column="76"/></operator></expr> ?<pos:position pos:line="32" pos:column="78"/></condition><then pos:line="32" pos:column="78">
			<expr><name pos:line="33" pos:column="25">partial_pack_offset<pos:position pos:line="33" pos:column="44"/></name></expr> <pos:position pos:line="33" pos:column="45"/></then><else pos:line="33" pos:column="45">: <expr><name pos:line="33" pos:column="47">aligned_sz<pos:position pos:line="33" pos:column="57"/></name></expr></else></ternary></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">n<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <call><name pos:line="34" pos:column="21">xread<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">pack_fd<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="36">buf<pos:position pos:line="34" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="41">m<pos:position pos:line="34" pos:column="42"/></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">!<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">n<pos:position pos:line="35" pos:column="23"/></name></expr>)<pos:position pos:line="35" pos:column="24"/></condition><then pos:line="35" pos:column="24">
			<block type="pseudo"><break pos:line="36" pos:column="25">break;<pos:position pos:line="36" pos:column="31"/></break></block></then></if>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">n<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">&lt;<pos:position pos:line="37" pos:column="27"/></operator> <literal type="number" pos:line="37" pos:column="25">0<pos:position pos:line="37" pos:column="26"/></literal></expr>)<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="25">die_errno<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><literal type="string" pos:line="38" pos:column="35">"Failed to checksum '%s'"<pos:position pos:line="38" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="62">pack_name<pos:position pos:line="38" pos:column="71"/></name></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="73"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">git_SHA1_Update<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><operator pos:line="39" pos:column="33">&amp;<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="34">new_sha1_ctx<pos:position pos:line="39" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="48">buf<pos:position pos:line="39" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="53">n<pos:position pos:line="39" pos:column="54"/></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>

		<expr_stmt><expr><name pos:line="41" pos:column="17">aligned_sz<pos:position pos:line="41" pos:column="27"/></name> <operator pos:line="41" pos:column="28">-=<pos:position pos:line="41" pos:column="30"/></operator> <name pos:line="41" pos:column="31">n<pos:position pos:line="41" pos:column="32"/></name></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="22">aligned_sz<pos:position pos:line="42" pos:column="32"/></name></expr>)<pos:position pos:line="42" pos:column="33"/></condition><then pos:line="42" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="25">aligned_sz<pos:position pos:line="43" pos:column="35"/></name> <operator pos:line="43" pos:column="36">=<pos:position pos:line="43" pos:column="37"/></operator> <name pos:line="43" pos:column="38">buf_sz<pos:position pos:line="43" pos:column="44"/></name></expr>;<pos:position pos:line="43" pos:column="45"/></expr_stmt></block></then></if>

		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><operator pos:line="45" pos:column="21">!<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">partial_pack_sha1<pos:position pos:line="45" pos:column="39"/></name></expr>)<pos:position pos:line="45" pos:column="40"/></condition><then pos:line="45" pos:column="40">
			<block type="pseudo"><continue pos:line="46" pos:column="25">continue;<pos:position pos:line="46" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="48" pos:column="17">git_SHA1_Update<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">(<argument><expr><operator pos:line="48" pos:column="33">&amp;<pos:position pos:line="48" pos:column="38"/></operator><name pos:line="48" pos:column="34">old_sha1_ctx<pos:position pos:line="48" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="48">buf<pos:position pos:line="48" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="53">n<pos:position pos:line="48" pos:column="54"/></name></expr></argument>)<pos:position pos:line="48" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">partial_pack_offset<pos:position pos:line="49" pos:column="36"/></name> <operator pos:line="49" pos:column="37">-=<pos:position pos:line="49" pos:column="39"/></operator> <name pos:line="49" pos:column="40">n<pos:position pos:line="49" pos:column="41"/></name></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">partial_pack_offset<pos:position pos:line="50" pos:column="40"/></name> <operator pos:line="50" pos:column="41">==<pos:position pos:line="50" pos:column="43"/></operator> <literal type="number" pos:line="50" pos:column="44">0<pos:position pos:line="50" pos:column="45"/></literal></expr>)<pos:position pos:line="50" pos:column="46"/></condition><then pos:line="50" pos:column="46"> <block pos:line="50" pos:column="47">{
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">unsigned<pos:position pos:line="51" pos:column="33"/></name> <name pos:line="51" pos:column="34">char<pos:position pos:line="51" pos:column="38"/></name></type> <name><name pos:line="51" pos:column="39">sha1<pos:position pos:line="51" pos:column="43"/></name><index pos:line="51" pos:column="43">[<expr><literal type="number" pos:line="51" pos:column="44">20<pos:position pos:line="51" pos:column="46"/></literal></expr>]<pos:position pos:line="51" pos:column="47"/></index></name></decl>;<pos:position pos:line="51" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="52" pos:column="25">git_SHA1_Final<pos:position pos:line="52" pos:column="39"/></name><argument_list pos:line="52" pos:column="39">(<argument><expr><name pos:line="52" pos:column="40">sha1<pos:position pos:line="52" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="46">&amp;<pos:position pos:line="52" pos:column="51"/></operator><name pos:line="52" pos:column="47">old_sha1_ctx<pos:position pos:line="52" pos:column="59"/></name></expr></argument>)<pos:position pos:line="52" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="61"/></expr_stmt>
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><call><name pos:line="53" pos:column="29">hashcmp<pos:position pos:line="53" pos:column="36"/></name><argument_list pos:line="53" pos:column="36">(<argument><expr><name pos:line="53" pos:column="37">sha1<pos:position pos:line="53" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="43">partial_pack_sha1<pos:position pos:line="53" pos:column="60"/></name></expr></argument>)<pos:position pos:line="53" pos:column="61"/></argument_list></call> <operator pos:line="53" pos:column="62">!=<pos:position pos:line="53" pos:column="64"/></operator> <literal type="number" pos:line="53" pos:column="65">0<pos:position pos:line="53" pos:column="66"/></literal></expr>)<pos:position pos:line="53" pos:column="67"/></condition><then pos:line="53" pos:column="67">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="33">die<pos:position pos:line="54" pos:column="36"/></name><argument_list pos:line="54" pos:column="36">(<argument><expr><literal type="string" pos:line="54" pos:column="37">"Unexpected checksum for %s "<pos:position pos:line="54" pos:column="66"/></literal>
				    <literal type="string" pos:line="55" pos:column="37">"(disk corruption?)"<pos:position pos:line="55" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="59">pack_name<pos:position pos:line="55" pos:column="68"/></name></expr></argument>)<pos:position pos:line="55" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="70"/></expr_stmt></block></then></if>
			<comment type="block" pos:line="56" pos:column="25">/*
			 * Now let's compute the SHA1 of the remainder of the
			 * pack, which also means making partial_pack_offset
			 * big enough not to matter anymore.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="61" pos:column="25">git_SHA1_Init<pos:position pos:line="61" pos:column="38"/></name><argument_list pos:line="61" pos:column="38">(<argument><expr><operator pos:line="61" pos:column="39">&amp;<pos:position pos:line="61" pos:column="44"/></operator><name pos:line="61" pos:column="40">old_sha1_ctx<pos:position pos:line="61" pos:column="52"/></name></expr></argument>)<pos:position pos:line="61" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><name pos:line="62" pos:column="25">partial_pack_offset<pos:position pos:line="62" pos:column="44"/></name> <operator pos:line="62" pos:column="45">=<pos:position pos:line="62" pos:column="46"/></operator> <operator pos:line="62" pos:column="47">~<pos:position pos:line="62" pos:column="48"/></operator><name pos:line="62" pos:column="48">partial_pack_offset<pos:position pos:line="62" pos:column="67"/></name></expr>;<pos:position pos:line="62" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><name pos:line="63" pos:column="25">partial_pack_offset<pos:position pos:line="63" pos:column="44"/></name> <operator pos:line="63" pos:column="45">-=<pos:position pos:line="63" pos:column="47"/></operator> <call><name pos:line="63" pos:column="48">MSB<pos:position pos:line="63" pos:column="51"/></name><argument_list pos:line="63" pos:column="51">(<argument><expr><name pos:line="63" pos:column="52">partial_pack_offset<pos:position pos:line="63" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="73">1<pos:position pos:line="63" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="76"/></expr_stmt>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>
	}<pos:position pos:line="65" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="66" pos:column="9">free<pos:position pos:line="66" pos:column="13"/></name><argument_list pos:line="66" pos:column="13">(<argument><expr><name pos:line="66" pos:column="14">buf<pos:position pos:line="66" pos:column="17"/></name></expr></argument>)<pos:position pos:line="66" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="19"/></expr_stmt>

	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">partial_pack_sha1<pos:position pos:line="68" pos:column="30"/></name></expr>)<pos:position pos:line="68" pos:column="31"/></condition><then pos:line="68" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="17">git_SHA1_Final<pos:position pos:line="69" pos:column="31"/></name><argument_list pos:line="69" pos:column="31">(<argument><expr><name pos:line="69" pos:column="32">partial_pack_sha1<pos:position pos:line="69" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="51">&amp;<pos:position pos:line="69" pos:column="56"/></operator><name pos:line="69" pos:column="52">old_sha1_ctx<pos:position pos:line="69" pos:column="64"/></name></expr></argument>)<pos:position pos:line="69" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="66"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="70" pos:column="9">git_SHA1_Final<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><name pos:line="70" pos:column="24">new_pack_sha1<pos:position pos:line="70" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="39">&amp;<pos:position pos:line="70" pos:column="44"/></operator><name pos:line="70" pos:column="40">new_sha1_ctx<pos:position pos:line="70" pos:column="52"/></name></expr></argument>)<pos:position pos:line="70" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">write_or_die<pos:position pos:line="71" pos:column="21"/></name><argument_list pos:line="71" pos:column="21">(<argument><expr><name pos:line="71" pos:column="22">pack_fd<pos:position pos:line="71" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="31">new_pack_sha1<pos:position pos:line="71" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="46">20<pos:position pos:line="71" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="72" pos:column="9">fsync_or_die<pos:position pos:line="72" pos:column="21"/></name><argument_list pos:line="72" pos:column="21">(<argument><expr><name pos:line="72" pos:column="22">pack_fd<pos:position pos:line="72" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="31">pack_name<pos:position pos:line="72" pos:column="40"/></name></expr></argument>)<pos:position pos:line="72" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="42"/></expr_stmt>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
