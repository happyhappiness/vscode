<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2549_git-2.10.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sequencer_pick_revisions<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">replay_opts<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">opts<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">commit_list<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">todo_list<pos:position pos:line="3" pos:column="38"/></name> <init pos:line="3" pos:column="39">= <expr><name pos:line="3" pos:column="41">NULL<pos:position pos:line="3" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">sha1<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">opts<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">-&gt;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="19">subcommand<pos:position pos:line="7" pos:column="29"/></name></name> <operator pos:line="7" pos:column="30">==<pos:position pos:line="7" pos:column="32"/></operator> <name pos:line="7" pos:column="33">REPLAY_NONE<pos:position pos:line="7" pos:column="44"/></name></expr>)<pos:position pos:line="7" pos:column="45"/></condition><then pos:line="7" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="17">assert<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><name><name pos:line="8" pos:column="24">opts<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">-&gt;<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="30">revs<pos:position pos:line="8" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">read_and_refresh_cache<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><name pos:line="10" pos:column="32">opts<pos:position pos:line="10" pos:column="36"/></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>

	<comment type="block" pos:line="12" pos:column="9">/*
	 * Decide what to do depending on the arguments; a fresh
	 * cherry-pick should be handled differently from an existing
	 * one that is being continued
	 */</comment>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">opts<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">-&gt;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="19">subcommand<pos:position pos:line="17" pos:column="29"/></name></name> <operator pos:line="17" pos:column="30">==<pos:position pos:line="17" pos:column="32"/></operator> <name pos:line="17" pos:column="33">REPLAY_REMOVE_STATE<pos:position pos:line="17" pos:column="52"/></name></expr>)<pos:position pos:line="17" pos:column="53"/></condition><then pos:line="17" pos:column="53"> <block pos:line="17" pos:column="54">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">remove_sequencer_state<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">()<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name><name pos:line="21" pos:column="13">opts<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">-&gt;<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="19">subcommand<pos:position pos:line="21" pos:column="29"/></name></name> <operator pos:line="21" pos:column="30">==<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="33">REPLAY_ROLLBACK<pos:position pos:line="21" pos:column="48"/></name></expr>)<pos:position pos:line="21" pos:column="49"/></condition><then pos:line="21" pos:column="49">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><call><name pos:line="22" pos:column="24">sequencer_rollback<pos:position pos:line="22" pos:column="42"/></name><argument_list pos:line="22" pos:column="42">(<argument><expr><name pos:line="22" pos:column="43">opts<pos:position pos:line="22" pos:column="47"/></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></return></block></then></if>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name><name pos:line="23" pos:column="13">opts<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">subcommand<pos:position pos:line="23" pos:column="29"/></name></name> <operator pos:line="23" pos:column="30">==<pos:position pos:line="23" pos:column="32"/></operator> <name pos:line="23" pos:column="33">REPLAY_CONTINUE<pos:position pos:line="23" pos:column="48"/></name></expr>)<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49">
		<block type="pseudo"><return pos:line="24" pos:column="17">return <expr><call><name pos:line="24" pos:column="24">sequencer_continue<pos:position pos:line="24" pos:column="42"/></name><argument_list pos:line="24" pos:column="42">(<argument><expr><name pos:line="24" pos:column="43">opts<pos:position pos:line="24" pos:column="47"/></name></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="49"/></return></block></then></if>

	<for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init><expr><name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">0<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></init> <condition><expr><name pos:line="26" pos:column="21">i<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">&lt;<pos:position pos:line="26" pos:column="27"/></operator> <name><name pos:line="26" pos:column="25">opts<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">-&gt;<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="31">revs<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">-&gt;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="37">pending<pos:position pos:line="26" pos:column="44"/></name><operator pos:line="26" pos:column="44">.<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="45">nr<pos:position pos:line="26" pos:column="47"/></name></name></expr>;<pos:position pos:line="26" pos:column="48"/></condition> <incr><expr><name pos:line="26" pos:column="49">i<pos:position pos:line="26" pos:column="50"/></name><operator pos:line="26" pos:column="50">++<pos:position pos:line="26" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="53"/></control> <block pos:line="26" pos:column="54">{
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">unsigned<pos:position pos:line="27" pos:column="25"/></name> <name pos:line="27" pos:column="26">char<pos:position pos:line="27" pos:column="30"/></name></type> <name><name pos:line="27" pos:column="31">sha1<pos:position pos:line="27" pos:column="35"/></name><index pos:line="27" pos:column="35">[<expr><literal type="number" pos:line="27" pos:column="36">20<pos:position pos:line="27" pos:column="38"/></literal></expr>]<pos:position pos:line="27" pos:column="39"/></index></name></decl>;<pos:position pos:line="27" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="28" pos:column="17">const<pos:position pos:line="28" pos:column="22"/></specifier> <name pos:line="28" pos:column="23">char<pos:position pos:line="28" pos:column="27"/></name> <modifier pos:line="28" pos:column="28">*<pos:position pos:line="28" pos:column="29"/></modifier></type><name pos:line="28" pos:column="29">name<pos:position pos:line="28" pos:column="33"/></name> <init pos:line="28" pos:column="34">= <expr><name><name pos:line="28" pos:column="36">opts<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="42">revs<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">-&gt;<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="48">pending<pos:position pos:line="28" pos:column="55"/></name><operator pos:line="28" pos:column="55">.<pos:position pos:line="28" pos:column="56"/></operator><name pos:line="28" pos:column="56">objects<pos:position pos:line="28" pos:column="63"/></name><index pos:line="28" pos:column="63">[<expr><name pos:line="28" pos:column="64">i<pos:position pos:line="28" pos:column="65"/></name></expr>]<pos:position pos:line="28" pos:column="66"/></index></name><operator pos:line="28" pos:column="66">.<pos:position pos:line="28" pos:column="67"/></operator><name pos:line="28" pos:column="67">name<pos:position pos:line="28" pos:column="71"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="72"/></decl_stmt>

		<comment type="block" pos:line="30" pos:column="17">/* This happens when using --stdin. */</comment>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><operator pos:line="31" pos:column="21">!<pos:position pos:line="31" pos:column="22"/></operator><call><name pos:line="31" pos:column="22">strlen<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">(<argument><expr><name pos:line="31" pos:column="29">name<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35">
			<block type="pseudo"><continue pos:line="32" pos:column="25">continue;<pos:position pos:line="32" pos:column="34"/></continue></block></then></if>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><operator pos:line="34" pos:column="21">!<pos:position pos:line="34" pos:column="22"/></operator><call><name pos:line="34" pos:column="22">get_sha1<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><name pos:line="34" pos:column="31">name<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">sha1<pos:position pos:line="34" pos:column="41"/></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="43"/></condition><then pos:line="34" pos:column="43"> <block pos:line="34" pos:column="44">{
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><operator pos:line="35" pos:column="29">!<pos:position pos:line="35" pos:column="30"/></operator><call><name pos:line="35" pos:column="30">lookup_commit_reference_gently<pos:position pos:line="35" pos:column="60"/></name><argument_list pos:line="35" pos:column="60">(<argument><expr><name pos:line="35" pos:column="61">sha1<pos:position pos:line="35" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="67">1<pos:position pos:line="35" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="70"/></condition><then pos:line="35" pos:column="70"> <block pos:line="35" pos:column="71">{
				<decl_stmt><decl><type><name><name pos:line="36" pos:column="33">enum<pos:position pos:line="36" pos:column="37"/></name> <name pos:line="36" pos:column="38">object_type<pos:position pos:line="36" pos:column="49"/></name></name></type> <name pos:line="36" pos:column="50">type<pos:position pos:line="36" pos:column="54"/></name> <init pos:line="36" pos:column="55">= <expr><call><name pos:line="36" pos:column="57">sha1_object_info<pos:position pos:line="36" pos:column="73"/></name><argument_list pos:line="36" pos:column="73">(<argument><expr><name pos:line="36" pos:column="74">sha1<pos:position pos:line="36" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="80">NULL<pos:position pos:line="36" pos:column="84"/></name></expr></argument>)<pos:position pos:line="36" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="86"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="37" pos:column="33">die<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><call><name pos:line="37" pos:column="37">_<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><literal type="string" pos:line="37" pos:column="39">"%s: can't cherry-pick a %s"<pos:position pos:line="37" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="37" pos:column="70">name<pos:position pos:line="37" pos:column="74"/></name></expr></argument>, <argument><expr><name><typename pos:line="37" pos:column="76">typename<pos:position pos:line="37" pos:column="84"/></typename></name><operator pos:line="37" pos:column="84">(<pos:position pos:line="37" pos:column="85"/></operator><name pos:line="37" pos:column="85">type<pos:position pos:line="37" pos:column="89"/></name><operator pos:line="37" pos:column="89">)<pos:position pos:line="37" pos:column="90"/></operator></expr></argument>)<pos:position pos:line="37" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="92"/></expr_stmt>
			}<pos:position pos:line="38" pos:column="26"/></block></then></if>
		}<pos:position pos:line="39" pos:column="18"/></block></then> <else pos:line="39" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="25">die<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><call><name pos:line="40" pos:column="29">_<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><literal type="string" pos:line="40" pos:column="31">"%s: bad revision"<pos:position pos:line="40" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="40" pos:column="52">name<pos:position pos:line="40" pos:column="56"/></name></expr></argument>)<pos:position pos:line="40" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt></block></else></if>
	}<pos:position pos:line="41" pos:column="10"/></block></for>

	<comment type="block" pos:line="43" pos:column="9">/*
	 * If we were called as "git cherry-pick &lt;commit&gt;", just
	 * cherry-pick/revert it, set CHERRY_PICK_HEAD /
	 * REVERT_HEAD, and don't touch the sequencer state.
	 * This means it is possible to cherry-pick in the middle
	 * of a cherry-pick sequence.
	 */</comment>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name><name pos:line="50" pos:column="13">opts<pos:position pos:line="50" pos:column="17"/></name><operator pos:line="50" pos:column="17">-&gt;<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="19">revs<pos:position pos:line="50" pos:column="23"/></name><operator pos:line="50" pos:column="23">-&gt;<pos:position pos:line="50" pos:column="28"/></operator><name pos:line="50" pos:column="25">cmdline<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">.<pos:position pos:line="50" pos:column="33"/></operator><name pos:line="50" pos:column="33">nr<pos:position pos:line="50" pos:column="35"/></name></name> <operator pos:line="50" pos:column="36">==<pos:position pos:line="50" pos:column="38"/></operator> <literal type="number" pos:line="50" pos:column="39">1<pos:position pos:line="50" pos:column="40"/></literal> <operator pos:line="50" pos:column="41">&amp;&amp;<pos:position pos:line="50" pos:column="51"/></operator>
	    <name><name pos:line="51" pos:column="13">opts<pos:position pos:line="51" pos:column="17"/></name><operator pos:line="51" pos:column="17">-&gt;<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="19">revs<pos:position pos:line="51" pos:column="23"/></name><operator pos:line="51" pos:column="23">-&gt;<pos:position pos:line="51" pos:column="28"/></operator><name pos:line="51" pos:column="25">cmdline<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">.<pos:position pos:line="51" pos:column="33"/></operator><name pos:line="51" pos:column="33">rev<pos:position pos:line="51" pos:column="36"/></name><operator pos:line="51" pos:column="36">-&gt;<pos:position pos:line="51" pos:column="41"/></operator><name pos:line="51" pos:column="38">whence<pos:position pos:line="51" pos:column="44"/></name></name> <operator pos:line="51" pos:column="45">==<pos:position pos:line="51" pos:column="47"/></operator> <name pos:line="51" pos:column="48">REV_CMD_REV<pos:position pos:line="51" pos:column="59"/></name> <operator pos:line="51" pos:column="60">&amp;&amp;<pos:position pos:line="51" pos:column="70"/></operator>
	    <name><name pos:line="52" pos:column="13">opts<pos:position pos:line="52" pos:column="17"/></name><operator pos:line="52" pos:column="17">-&gt;<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="19">revs<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">-&gt;<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="25">no_walk<pos:position pos:line="52" pos:column="32"/></name></name> <operator pos:line="52" pos:column="33">&amp;&amp;<pos:position pos:line="52" pos:column="43"/></operator>
	    <operator pos:line="53" pos:column="13">!<pos:position pos:line="53" pos:column="14"/></operator><name><name pos:line="53" pos:column="14">opts<pos:position pos:line="53" pos:column="18"/></name><operator pos:line="53" pos:column="18">-&gt;<pos:position pos:line="53" pos:column="23"/></operator><name pos:line="53" pos:column="20">revs<pos:position pos:line="53" pos:column="24"/></name><operator pos:line="53" pos:column="24">-&gt;<pos:position pos:line="53" pos:column="29"/></operator><name pos:line="53" pos:column="26">cmdline<pos:position pos:line="53" pos:column="33"/></name><operator pos:line="53" pos:column="33">.<pos:position pos:line="53" pos:column="34"/></operator><name pos:line="53" pos:column="34">rev<pos:position pos:line="53" pos:column="37"/></name><operator pos:line="53" pos:column="37">-&gt;<pos:position pos:line="53" pos:column="42"/></operator><name pos:line="53" pos:column="39">flags<pos:position pos:line="53" pos:column="44"/></name></name></expr>)<pos:position pos:line="53" pos:column="45"/></condition><then pos:line="53" pos:column="45"> <block pos:line="53" pos:column="46">{
		<decl_stmt><decl><type><name><name pos:line="54" pos:column="17">struct<pos:position pos:line="54" pos:column="23"/></name> <name pos:line="54" pos:column="24">commit<pos:position pos:line="54" pos:column="30"/></name></name> <modifier pos:line="54" pos:column="31">*<pos:position pos:line="54" pos:column="32"/></modifier></type><name pos:line="54" pos:column="32">cmit<pos:position pos:line="54" pos:column="36"/></name></decl>;<pos:position pos:line="54" pos:column="37"/></decl_stmt>
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><call><name pos:line="55" pos:column="21">prepare_revision_walk<pos:position pos:line="55" pos:column="42"/></name><argument_list pos:line="55" pos:column="42">(<argument><expr><name><name pos:line="55" pos:column="43">opts<pos:position pos:line="55" pos:column="47"/></name><operator pos:line="55" pos:column="47">-&gt;<pos:position pos:line="55" pos:column="52"/></operator><name pos:line="55" pos:column="49">revs<pos:position pos:line="55" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="55"/></condition><then pos:line="55" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="25">die<pos:position pos:line="56" pos:column="28"/></name><argument_list pos:line="56" pos:column="28">(<argument><expr><call><name pos:line="56" pos:column="29">_<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><literal type="string" pos:line="56" pos:column="31">"revision walk setup failed"<pos:position pos:line="56" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="62"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="57" pos:column="17">cmit<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">=<pos:position pos:line="57" pos:column="23"/></operator> <call><name pos:line="57" pos:column="24">get_revision<pos:position pos:line="57" pos:column="36"/></name><argument_list pos:line="57" pos:column="36">(<argument><expr><name><name pos:line="57" pos:column="37">opts<pos:position pos:line="57" pos:column="41"/></name><operator pos:line="57" pos:column="41">-&gt;<pos:position pos:line="57" pos:column="46"/></operator><name pos:line="57" pos:column="43">revs<pos:position pos:line="57" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="49"/></expr_stmt>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><operator pos:line="58" pos:column="21">!<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="22">cmit<pos:position pos:line="58" pos:column="26"/></name> <operator pos:line="58" pos:column="27">||<pos:position pos:line="58" pos:column="29"/></operator> <call><name pos:line="58" pos:column="30">get_revision<pos:position pos:line="58" pos:column="42"/></name><argument_list pos:line="58" pos:column="42">(<argument><expr><name><name pos:line="58" pos:column="43">opts<pos:position pos:line="58" pos:column="47"/></name><operator pos:line="58" pos:column="47">-&gt;<pos:position pos:line="58" pos:column="52"/></operator><name pos:line="58" pos:column="49">revs<pos:position pos:line="58" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="55"/></condition><then pos:line="58" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="25">die<pos:position pos:line="59" pos:column="28"/></name><argument_list pos:line="59" pos:column="28">(<argument><expr><literal type="string" pos:line="59" pos:column="29">"BUG: expected exactly one commit from walk"<pos:position pos:line="59" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="75"/></expr_stmt></block></then></if>
		<return pos:line="60" pos:column="17">return <expr><call><name pos:line="60" pos:column="24">single_pick<pos:position pos:line="60" pos:column="35"/></name><argument_list pos:line="60" pos:column="35">(<argument><expr><name pos:line="60" pos:column="36">cmit<pos:position pos:line="60" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="42">opts<pos:position pos:line="60" pos:column="46"/></name></expr></argument>)<pos:position pos:line="60" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="48"/></return>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="63" pos:column="9">/*
	 * Start a new cherry-pick/ revert sequence; but
	 * first, make sure that an existing one isn't in
	 * progress
	 */</comment>

	<expr_stmt><expr><call><name pos:line="69" pos:column="9">walk_revs_populate_todo<pos:position pos:line="69" pos:column="32"/></name><argument_list pos:line="69" pos:column="32">(<argument><expr><operator pos:line="69" pos:column="33">&amp;<pos:position pos:line="69" pos:column="38"/></operator><name pos:line="69" pos:column="34">todo_list<pos:position pos:line="69" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="45">opts<pos:position pos:line="69" pos:column="49"/></name></expr></argument>)<pos:position pos:line="69" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="51"/></expr_stmt>
	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><call><name pos:line="70" pos:column="13">create_seq_dir<pos:position pos:line="70" pos:column="27"/></name><argument_list pos:line="70" pos:column="27">()<pos:position pos:line="70" pos:column="29"/></argument_list></call> <operator pos:line="70" pos:column="30">&lt;<pos:position pos:line="70" pos:column="34"/></operator> <literal type="number" pos:line="70" pos:column="32">0<pos:position pos:line="70" pos:column="33"/></literal></expr>)<pos:position pos:line="70" pos:column="34"/></condition><then pos:line="70" pos:column="34">
		<block type="pseudo"><return pos:line="71" pos:column="17">return <expr><operator pos:line="71" pos:column="24">-<pos:position pos:line="71" pos:column="25"/></operator><literal type="number" pos:line="71" pos:column="25">1<pos:position pos:line="71" pos:column="26"/></literal></expr>;<pos:position pos:line="71" pos:column="27"/></return></block></then></if>
	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><call><name pos:line="72" pos:column="13">get_sha1<pos:position pos:line="72" pos:column="21"/></name><argument_list pos:line="72" pos:column="21">(<argument><expr><literal type="string" pos:line="72" pos:column="22">"HEAD"<pos:position pos:line="72" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="30">sha1<pos:position pos:line="72" pos:column="34"/></name></expr></argument>)<pos:position pos:line="72" pos:column="35"/></argument_list></call> <operator pos:line="72" pos:column="36">&amp;&amp;<pos:position pos:line="72" pos:column="46"/></operator> <operator pos:line="72" pos:column="39">(<pos:position pos:line="72" pos:column="40"/></operator><name><name pos:line="72" pos:column="40">opts<pos:position pos:line="72" pos:column="44"/></name><operator pos:line="72" pos:column="44">-&gt;<pos:position pos:line="72" pos:column="49"/></operator><name pos:line="72" pos:column="46">action<pos:position pos:line="72" pos:column="52"/></name></name> <operator pos:line="72" pos:column="53">==<pos:position pos:line="72" pos:column="55"/></operator> <name pos:line="72" pos:column="56">REPLAY_REVERT<pos:position pos:line="72" pos:column="69"/></name><operator pos:line="72" pos:column="69">)<pos:position pos:line="72" pos:column="70"/></operator></expr>)<pos:position pos:line="72" pos:column="71"/></condition><then pos:line="72" pos:column="71">
		<block type="pseudo"><return pos:line="73" pos:column="17">return <expr><call><name pos:line="73" pos:column="24">error<pos:position pos:line="73" pos:column="29"/></name><argument_list pos:line="73" pos:column="29">(<argument><expr><call><name pos:line="73" pos:column="30">_<pos:position pos:line="73" pos:column="31"/></name><argument_list pos:line="73" pos:column="31">(<argument><expr><literal type="string" pos:line="73" pos:column="32">"Can't revert as initial commit"<pos:position pos:line="73" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="67"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="74" pos:column="9">save_head<pos:position pos:line="74" pos:column="18"/></name><argument_list pos:line="74" pos:column="18">(<argument><expr><call><name pos:line="74" pos:column="19">sha1_to_hex<pos:position pos:line="74" pos:column="30"/></name><argument_list pos:line="74" pos:column="30">(<argument><expr><name pos:line="74" pos:column="31">sha1<pos:position pos:line="74" pos:column="35"/></name></expr></argument>)<pos:position pos:line="74" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="75" pos:column="9">save_opts<pos:position pos:line="75" pos:column="18"/></name><argument_list pos:line="75" pos:column="18">(<argument><expr><name pos:line="75" pos:column="19">opts<pos:position pos:line="75" pos:column="23"/></name></expr></argument>)<pos:position pos:line="75" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="25"/></expr_stmt>
	<return pos:line="76" pos:column="9">return <expr><call><name pos:line="76" pos:column="16">pick_commits<pos:position pos:line="76" pos:column="28"/></name><argument_list pos:line="76" pos:column="28">(<argument><expr><name pos:line="76" pos:column="29">todo_list<pos:position pos:line="76" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="40">opts<pos:position pos:line="76" pos:column="44"/></name></expr></argument>)<pos:position pos:line="76" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="46"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
