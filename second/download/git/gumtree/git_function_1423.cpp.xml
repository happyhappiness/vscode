<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1423.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">calculate_changed_submodule_paths<pos:position pos:line="1" pos:column="46"/></name><parameter_list pos:line="1" pos:column="46">(<parameter><decl><type><name pos:line="1" pos:column="47">void<pos:position pos:line="1" pos:column="51"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">rev_info<pos:position pos:line="3" pos:column="24"/></name></name></type> <name pos:line="3" pos:column="25">rev<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">commit<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">commit<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">argv_array<pos:position pos:line="5" pos:column="26"/></name></name></type> <name pos:line="5" pos:column="27">argv<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><name pos:line="5" pos:column="34">ARGV_ARRAY_INIT<pos:position pos:line="5" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* No need to check if there are no submodules configured */</comment>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><call><name pos:line="8" pos:column="14">submodule_from_path<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">NULL<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">NULL<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="46"/></condition><then pos:line="8" pos:column="46">
		<block type="pseudo"><return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">init_revisions<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><operator pos:line="11" pos:column="24">&amp;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="25">rev<pos:position pos:line="11" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="30">NULL<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">argv_array_push<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><operator pos:line="12" pos:column="25">&amp;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="26">argv<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="32">"--"<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt> <comment type="block" pos:line="12" pos:column="39">/* argv[0] program name */</comment>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">oid_array_for_each_unique<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><operator pos:line="13" pos:column="35">&amp;<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="36">ref_tips_after_fetch<pos:position pos:line="13" pos:column="56"/></name></expr></argument>,
				   <argument><expr><name pos:line="14" pos:column="36">add_oid_to_argv<pos:position pos:line="14" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="53">&amp;<pos:position pos:line="14" pos:column="58"/></operator><name pos:line="14" pos:column="54">argv<pos:position pos:line="14" pos:column="58"/></name></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">argv_array_push<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><operator pos:line="15" pos:column="25">&amp;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="26">argv<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="32">"--not"<pos:position pos:line="15" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">oid_array_for_each_unique<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><operator pos:line="16" pos:column="35">&amp;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="36">ref_tips_before_fetch<pos:position pos:line="16" pos:column="57"/></name></expr></argument>,
				   <argument><expr><name pos:line="17" pos:column="36">add_oid_to_argv<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="53">&amp;<pos:position pos:line="17" pos:column="58"/></operator><name pos:line="17" pos:column="54">argv<pos:position pos:line="17" pos:column="58"/></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">setup_revisions<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name><name pos:line="18" pos:column="25">argv<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">.<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="30">argc<pos:position pos:line="18" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="36">argv<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">.<pos:position pos:line="18" pos:column="41"/></operator><name pos:line="18" pos:column="41">argv<pos:position pos:line="18" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="47">&amp;<pos:position pos:line="18" pos:column="52"/></operator><name pos:line="18" pos:column="48">rev<pos:position pos:line="18" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="53">NULL<pos:position pos:line="18" pos:column="57"/></name></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="59"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">prepare_revision_walk<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><operator pos:line="19" pos:column="35">&amp;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="36">rev<pos:position pos:line="19" pos:column="39"/></name></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="41"/></condition><then pos:line="19" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">die<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><literal type="string" pos:line="20" pos:column="21">"revision walk setup failed"<pos:position pos:line="20" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="22" pos:column="9">/*
	 * Collect all submodules (whether checked out or not) for which new
	 * commits have been recorded upstream in "changed_submodule_paths".
	 */</comment>
	<while pos:line="26" pos:column="9">while <condition pos:line="26" pos:column="15">(<expr><operator pos:line="26" pos:column="16">(<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">commit<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">=<pos:position pos:line="26" pos:column="25"/></operator> <call><name pos:line="26" pos:column="26">get_revision<pos:position pos:line="26" pos:column="38"/></name><argument_list pos:line="26" pos:column="38">(<argument><expr><operator pos:line="26" pos:column="39">&amp;<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="40">rev<pos:position pos:line="26" pos:column="43"/></name></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></call><operator pos:line="26" pos:column="44">)<pos:position pos:line="26" pos:column="45"/></operator></expr>)<pos:position pos:line="26" pos:column="46"/></condition> <block pos:line="26" pos:column="47">{
		<decl_stmt><decl><type><name><name pos:line="27" pos:column="17">struct<pos:position pos:line="27" pos:column="23"/></name> <name pos:line="27" pos:column="24">commit_list<pos:position pos:line="27" pos:column="35"/></name></name> <modifier pos:line="27" pos:column="36">*<pos:position pos:line="27" pos:column="37"/></modifier></type><name pos:line="27" pos:column="37">parent<pos:position pos:line="27" pos:column="43"/></name> <init pos:line="27" pos:column="44">= <expr><name><name pos:line="27" pos:column="46">commit<pos:position pos:line="27" pos:column="52"/></name><operator pos:line="27" pos:column="52">-&gt;<pos:position pos:line="27" pos:column="57"/></operator><name pos:line="27" pos:column="54">parents<pos:position pos:line="27" pos:column="61"/></name></name></expr></init></decl>;<pos:position pos:line="27" pos:column="62"/></decl_stmt>
		<while pos:line="28" pos:column="17">while <condition pos:line="28" pos:column="23">(<expr><name pos:line="28" pos:column="24">parent<pos:position pos:line="28" pos:column="30"/></name></expr>)<pos:position pos:line="28" pos:column="31"/></condition> <block pos:line="28" pos:column="32">{
			<decl_stmt><decl><type><name><name pos:line="29" pos:column="25">struct<pos:position pos:line="29" pos:column="31"/></name> <name pos:line="29" pos:column="32">diff_options<pos:position pos:line="29" pos:column="44"/></name></name></type> <name pos:line="29" pos:column="45">diff_opts<pos:position pos:line="29" pos:column="54"/></name></decl>;<pos:position pos:line="29" pos:column="55"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">diff_setup<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">(<argument><expr><operator pos:line="30" pos:column="36">&amp;<pos:position pos:line="30" pos:column="41"/></operator><name pos:line="30" pos:column="37">diff_opts<pos:position pos:line="30" pos:column="46"/></name></expr></argument>)<pos:position pos:line="30" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">DIFF_OPT_SET<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><operator pos:line="31" pos:column="38">&amp;<pos:position pos:line="31" pos:column="43"/></operator><name pos:line="31" pos:column="39">diff_opts<pos:position pos:line="31" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="50">RECURSIVE<pos:position pos:line="31" pos:column="59"/></name></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="32" pos:column="25">diff_opts<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">.<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">output_format<pos:position pos:line="32" pos:column="48"/></name></name> <operator pos:line="32" pos:column="49">|=<pos:position pos:line="32" pos:column="51"/></operator> <name pos:line="32" pos:column="52">DIFF_FORMAT_CALLBACK<pos:position pos:line="32" pos:column="72"/></name></expr>;<pos:position pos:line="32" pos:column="73"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="33" pos:column="25">diff_opts<pos:position pos:line="33" pos:column="34"/></name><operator pos:line="33" pos:column="34">.<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="35">format_callback<pos:position pos:line="33" pos:column="50"/></name></name> <operator pos:line="33" pos:column="51">=<pos:position pos:line="33" pos:column="52"/></operator> <name pos:line="33" pos:column="53">submodule_collect_changed_cb<pos:position pos:line="33" pos:column="81"/></name></expr>;<pos:position pos:line="33" pos:column="82"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">diff_setup_done<pos:position pos:line="34" pos:column="40"/></name><argument_list pos:line="34" pos:column="40">(<argument><expr><operator pos:line="34" pos:column="41">&amp;<pos:position pos:line="34" pos:column="46"/></operator><name pos:line="34" pos:column="42">diff_opts<pos:position pos:line="34" pos:column="51"/></name></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">diff_tree_sha1<pos:position pos:line="35" pos:column="39"/></name><argument_list pos:line="35" pos:column="39">(<argument><expr><name><name pos:line="35" pos:column="40">parent<pos:position pos:line="35" pos:column="46"/></name><operator pos:line="35" pos:column="46">-&gt;<pos:position pos:line="35" pos:column="51"/></operator><name pos:line="35" pos:column="48">item<pos:position pos:line="35" pos:column="52"/></name><operator pos:line="35" pos:column="52">-&gt;<pos:position pos:line="35" pos:column="57"/></operator><name pos:line="35" pos:column="54">object<pos:position pos:line="35" pos:column="60"/></name><operator pos:line="35" pos:column="60">.<pos:position pos:line="35" pos:column="61"/></operator><name pos:line="35" pos:column="61">oid<pos:position pos:line="35" pos:column="64"/></name><operator pos:line="35" pos:column="64">.<pos:position pos:line="35" pos:column="65"/></operator><name pos:line="35" pos:column="65">hash<pos:position pos:line="35" pos:column="69"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="71">commit<pos:position pos:line="35" pos:column="77"/></name><operator pos:line="35" pos:column="77">-&gt;<pos:position pos:line="35" pos:column="82"/></operator><name pos:line="35" pos:column="79">object<pos:position pos:line="35" pos:column="85"/></name><operator pos:line="35" pos:column="85">.<pos:position pos:line="35" pos:column="86"/></operator><name pos:line="35" pos:column="86">oid<pos:position pos:line="35" pos:column="89"/></name><operator pos:line="35" pos:column="89">.<pos:position pos:line="35" pos:column="90"/></operator><name pos:line="35" pos:column="90">hash<pos:position pos:line="35" pos:column="94"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="96">""<pos:position pos:line="35" pos:column="98"/></literal></expr></argument>, <argument><expr><operator pos:line="35" pos:column="100">&amp;<pos:position pos:line="35" pos:column="105"/></operator><name pos:line="35" pos:column="101">diff_opts<pos:position pos:line="35" pos:column="110"/></name></expr></argument>)<pos:position pos:line="35" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="112"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">diffcore_std<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><operator pos:line="36" pos:column="38">&amp;<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="39">diff_opts<pos:position pos:line="36" pos:column="48"/></name></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">diff_flush<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><operator pos:line="37" pos:column="36">&amp;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="37">diff_opts<pos:position pos:line="37" pos:column="46"/></name></expr></argument>)<pos:position pos:line="37" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name pos:line="38" pos:column="25">parent<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">=<pos:position pos:line="38" pos:column="33"/></operator> <name><name pos:line="38" pos:column="34">parent<pos:position pos:line="38" pos:column="40"/></name><operator pos:line="38" pos:column="40">-&gt;<pos:position pos:line="38" pos:column="45"/></operator><name pos:line="38" pos:column="42">next<pos:position pos:line="38" pos:column="46"/></name></name></expr>;<pos:position pos:line="38" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="39" pos:column="18"/></block></while>
	}<pos:position pos:line="40" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="42" pos:column="9">argv_array_clear<pos:position pos:line="42" pos:column="25"/></name><argument_list pos:line="42" pos:column="25">(<argument><expr><operator pos:line="42" pos:column="26">&amp;<pos:position pos:line="42" pos:column="31"/></operator><name pos:line="42" pos:column="27">argv<pos:position pos:line="42" pos:column="31"/></name></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">oid_array_clear<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><operator pos:line="43" pos:column="25">&amp;<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="26">ref_tips_before_fetch<pos:position pos:line="43" pos:column="47"/></name></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">oid_array_clear<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><operator pos:line="44" pos:column="25">&amp;<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="26">ref_tips_after_fetch<pos:position pos:line="44" pos:column="46"/></name></expr></argument>)<pos:position pos:line="44" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name pos:line="45" pos:column="9">initialized_fetch_ref_tips<pos:position pos:line="45" pos:column="35"/></name> <operator pos:line="45" pos:column="36">=<pos:position pos:line="45" pos:column="37"/></operator> <literal type="number" pos:line="45" pos:column="38">0<pos:position pos:line="45" pos:column="39"/></literal></expr>;<pos:position pos:line="45" pos:column="40"/></expr_stmt>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
