<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4728_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">run_shell<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">done<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><literal type="number" pos:line="3" pos:column="20">0<pos:position pos:line="3" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><specifier pos:line="4" pos:column="16">const<pos:position pos:line="4" pos:column="21"/></specifier> <name pos:line="4" pos:column="22">char<pos:position pos:line="4" pos:column="26"/></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name><name pos:line="4" pos:column="28">help_argv<pos:position pos:line="4" pos:column="37"/></name><index pos:line="4" pos:column="37">[]<pos:position pos:line="4" pos:column="39"/></index></name> <init pos:line="4" pos:column="40">= <expr><block pos:line="4" pos:column="42">{ <expr><name pos:line="4" pos:column="44">HELP_COMMAND<pos:position pos:line="4" pos:column="56"/></name></expr>, <expr><name pos:line="4" pos:column="58">NULL<pos:position pos:line="4" pos:column="62"/></name></expr> }<pos:position pos:line="4" pos:column="64"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="65"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">access<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">NOLOGIN_COMMAND<pos:position pos:line="6" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="38">F_OK<pos:position pos:line="6" pos:column="42"/></name></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="44"/></condition><then pos:line="6" pos:column="44"> <block pos:line="6" pos:column="45">{
		<comment type="block" pos:line="7" pos:column="17">/* Interactive login disabled. */</comment>
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name><name pos:line="8" pos:column="29">argv<pos:position pos:line="8" pos:column="33"/></name><index pos:line="8" pos:column="33">[]<pos:position pos:line="8" pos:column="35"/></index></name> <init pos:line="8" pos:column="36">= <expr><block pos:line="8" pos:column="38">{ <expr><name pos:line="8" pos:column="40">NOLOGIN_COMMAND<pos:position pos:line="8" pos:column="55"/></name></expr>, <expr><name pos:line="8" pos:column="57">NULL<pos:position pos:line="8" pos:column="61"/></name></expr> }<pos:position pos:line="8" pos:column="63"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="64"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">status<pos:position pos:line="9" pos:column="27"/></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>

		<expr_stmt><expr><name pos:line="11" pos:column="17">status<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator> <call><name pos:line="11" pos:column="26">run_command_v_opt<pos:position pos:line="11" pos:column="43"/></name><argument_list pos:line="11" pos:column="43">(<argument><expr><name pos:line="11" pos:column="44">argv<pos:position pos:line="11" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="50">0<pos:position pos:line="11" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="53"/></expr_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">status<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">&lt;<pos:position pos:line="12" pos:column="32"/></operator> <literal type="number" pos:line="12" pos:column="30">0<pos:position pos:line="12" pos:column="31"/></literal></expr>)<pos:position pos:line="12" pos:column="32"/></condition><then pos:line="12" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">exit<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><literal type="number" pos:line="13" pos:column="30">127<pos:position pos:line="13" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">exit<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">status<pos:position pos:line="14" pos:column="28"/></name></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="17" pos:column="9">/* Print help if enabled */</comment>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">run_command_v_opt<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">help_argv<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="38">RUN_SILENT_EXEC_FAILURE<pos:position pos:line="18" pos:column="61"/></name></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt>

	<do pos:line="20" pos:column="9">do <block pos:line="20" pos:column="12">{
		<decl_stmt><decl><type><name><name pos:line="21" pos:column="17">struct<pos:position pos:line="21" pos:column="23"/></name> <name pos:line="21" pos:column="24">strbuf<pos:position pos:line="21" pos:column="30"/></name></name></type> <name pos:line="21" pos:column="31">line<pos:position pos:line="21" pos:column="35"/></name> <init pos:line="21" pos:column="36">= <expr><name pos:line="21" pos:column="38">STRBUF_INIT<pos:position pos:line="21" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="50"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="22" pos:column="17">const<pos:position pos:line="22" pos:column="22"/></specifier> <name pos:line="22" pos:column="23">char<pos:position pos:line="22" pos:column="27"/></name> <modifier pos:line="22" pos:column="28">*<pos:position pos:line="22" pos:column="29"/></modifier></type><name pos:line="22" pos:column="29">prog<pos:position pos:line="22" pos:column="33"/></name></decl>;<pos:position pos:line="22" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">char<pos:position pos:line="23" pos:column="21"/></name> <modifier pos:line="23" pos:column="22">*<pos:position pos:line="23" pos:column="23"/></modifier></type><name pos:line="23" pos:column="23">full_cmd<pos:position pos:line="23" pos:column="31"/></name></decl>;<pos:position pos:line="23" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">char<pos:position pos:line="24" pos:column="21"/></name> <modifier pos:line="24" pos:column="22">*<pos:position pos:line="24" pos:column="23"/></modifier></type><name pos:line="24" pos:column="23">rawargs<pos:position pos:line="24" pos:column="30"/></name></decl>;<pos:position pos:line="24" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">char<pos:position pos:line="25" pos:column="21"/></name> <modifier pos:line="25" pos:column="22">*<pos:position pos:line="25" pos:column="23"/></modifier></type><name pos:line="25" pos:column="23">split_args<pos:position pos:line="25" pos:column="33"/></name></decl>;<pos:position pos:line="25" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">const<pos:position pos:line="26" pos:column="22"/></specifier> <name pos:line="26" pos:column="23">char<pos:position pos:line="26" pos:column="27"/></name> <modifier pos:line="26" pos:column="28">*<pos:position pos:line="26" pos:column="29"/></modifier><modifier pos:line="26" pos:column="29">*<pos:position pos:line="26" pos:column="30"/></modifier></type><name pos:line="26" pos:column="30">argv<pos:position pos:line="26" pos:column="34"/></name></decl>;<pos:position pos:line="26" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">int<pos:position pos:line="27" pos:column="20"/></name></type> <name pos:line="27" pos:column="21">code<pos:position pos:line="27" pos:column="25"/></name></decl>;<pos:position pos:line="27" pos:column="26"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">int<pos:position pos:line="28" pos:column="20"/></name></type> <name pos:line="28" pos:column="21">count<pos:position pos:line="28" pos:column="26"/></name></decl>;<pos:position pos:line="28" pos:column="27"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="30" pos:column="17">fprintf<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name pos:line="30" pos:column="25">stderr<pos:position pos:line="30" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="33">"git&gt; "<pos:position pos:line="30" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><call><name pos:line="31" pos:column="21">strbuf_getline_lf<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><operator pos:line="31" pos:column="39">&amp;<pos:position pos:line="31" pos:column="44"/></operator><name pos:line="31" pos:column="40">line<pos:position pos:line="31" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="46">stdin<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call> <operator pos:line="31" pos:column="53">==<pos:position pos:line="31" pos:column="55"/></operator> <name pos:line="31" pos:column="56">EOF<pos:position pos:line="31" pos:column="59"/></name></expr>)<pos:position pos:line="31" pos:column="60"/></condition><then pos:line="31" pos:column="60"> <block pos:line="31" pos:column="61">{
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">fprintf<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">stderr<pos:position pos:line="32" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="41">"\n"<pos:position pos:line="32" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">strbuf_release<pos:position pos:line="33" pos:column="39"/></name><argument_list pos:line="33" pos:column="39">(<argument><expr><operator pos:line="33" pos:column="40">&amp;<pos:position pos:line="33" pos:column="45"/></operator><name pos:line="33" pos:column="41">line<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt>
			<break pos:line="34" pos:column="25">break;<pos:position pos:line="34" pos:column="31"/></break>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">strbuf_trim<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><operator pos:line="36" pos:column="29">&amp;<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="30">line<pos:position pos:line="36" pos:column="34"/></name></expr></argument>)<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="37" pos:column="17">rawargs<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">=<pos:position pos:line="37" pos:column="26"/></operator> <call><name pos:line="37" pos:column="27">strbuf_detach<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><operator pos:line="37" pos:column="41">&amp;<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="42">line<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">NULL<pos:position pos:line="37" pos:column="52"/></name></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name pos:line="38" pos:column="17">split_args<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">=<pos:position pos:line="38" pos:column="29"/></operator> <call><name pos:line="38" pos:column="30">xstrdup<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><name pos:line="38" pos:column="38">rawargs<pos:position pos:line="38" pos:column="45"/></name></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name pos:line="39" pos:column="17">count<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <call><name pos:line="39" pos:column="25">split_cmdline<pos:position pos:line="39" pos:column="38"/></name><argument_list pos:line="39" pos:column="38">(<argument><expr><name pos:line="39" pos:column="39">split_args<pos:position pos:line="39" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="51">&amp;<pos:position pos:line="39" pos:column="56"/></operator><name pos:line="39" pos:column="52">argv<pos:position pos:line="39" pos:column="56"/></name></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="58"/></expr_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">count<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">&lt;<pos:position pos:line="40" pos:column="31"/></operator> <literal type="number" pos:line="40" pos:column="29">0<pos:position pos:line="40" pos:column="30"/></literal></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31"> <block pos:line="40" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">fprintf<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><name pos:line="41" pos:column="33">stderr<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="41">"invalid command format '%s': %s\n"<pos:position pos:line="41" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="78">rawargs<pos:position pos:line="41" pos:column="85"/></name></expr></argument>,
				<argument><expr><call><name pos:line="42" pos:column="33">split_cmdline_strerror<pos:position pos:line="42" pos:column="55"/></name><argument_list pos:line="42" pos:column="55">(<argument><expr><name pos:line="42" pos:column="56">count<pos:position pos:line="42" pos:column="61"/></name></expr></argument>)<pos:position pos:line="42" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">free<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><name pos:line="43" pos:column="30">split_args<pos:position pos:line="43" pos:column="40"/></name></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">free<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">rawargs<pos:position pos:line="44" pos:column="37"/></name></expr></argument>)<pos:position pos:line="44" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="39"/></expr_stmt>
			<continue pos:line="45" pos:column="25">continue;<pos:position pos:line="45" pos:column="34"/></continue>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="48" pos:column="17">prog<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <name><name pos:line="48" pos:column="24">argv<pos:position pos:line="48" pos:column="28"/></name><index pos:line="48" pos:column="28">[<expr><literal type="number" pos:line="48" pos:column="29">0<pos:position pos:line="48" pos:column="30"/></literal></expr>]<pos:position pos:line="48" pos:column="31"/></index></name></expr>;<pos:position pos:line="48" pos:column="32"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><operator pos:line="49" pos:column="21">!<pos:position pos:line="49" pos:column="22"/></operator><call><name pos:line="49" pos:column="22">strcmp<pos:position pos:line="49" pos:column="28"/></name><argument_list pos:line="49" pos:column="28">(<argument><expr><name pos:line="49" pos:column="29">prog<pos:position pos:line="49" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="35">""<pos:position pos:line="49" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="39"/></condition><then pos:line="49" pos:column="39"> <block pos:line="49" pos:column="40">{
		}<pos:position pos:line="50" pos:column="18"/></block></then> <elseif pos:line="50" pos:column="19">else <if pos:line="50" pos:column="24">if <condition pos:line="50" pos:column="27">(<expr><operator pos:line="50" pos:column="28">!<pos:position pos:line="50" pos:column="29"/></operator><call><name pos:line="50" pos:column="29">strcmp<pos:position pos:line="50" pos:column="35"/></name><argument_list pos:line="50" pos:column="35">(<argument><expr><name pos:line="50" pos:column="36">prog<pos:position pos:line="50" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="42">"quit"<pos:position pos:line="50" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></call> <operator pos:line="50" pos:column="50">||<pos:position pos:line="50" pos:column="52"/></operator> <operator pos:line="50" pos:column="53">!<pos:position pos:line="50" pos:column="54"/></operator><call><name pos:line="50" pos:column="54">strcmp<pos:position pos:line="50" pos:column="60"/></name><argument_list pos:line="50" pos:column="60">(<argument><expr><name pos:line="50" pos:column="61">prog<pos:position pos:line="50" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="67">"logout"<pos:position pos:line="50" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="76"/></argument_list></call> <operator pos:line="50" pos:column="77">||<pos:position pos:line="50" pos:column="79"/></operator>
			   <operator pos:line="51" pos:column="28">!<pos:position pos:line="51" pos:column="29"/></operator><call><name pos:line="51" pos:column="29">strcmp<pos:position pos:line="51" pos:column="35"/></name><argument_list pos:line="51" pos:column="35">(<argument><expr><name pos:line="51" pos:column="36">prog<pos:position pos:line="51" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="42">"exit"<pos:position pos:line="51" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="49"/></argument_list></call> <operator pos:line="51" pos:column="50">||<pos:position pos:line="51" pos:column="52"/></operator> <operator pos:line="51" pos:column="53">!<pos:position pos:line="51" pos:column="54"/></operator><call><name pos:line="51" pos:column="54">strcmp<pos:position pos:line="51" pos:column="60"/></name><argument_list pos:line="51" pos:column="60">(<argument><expr><name pos:line="51" pos:column="61">prog<pos:position pos:line="51" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="67">"bye"<pos:position pos:line="51" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="74"/></condition><then pos:line="51" pos:column="74"> <block pos:line="51" pos:column="75">{
			<expr_stmt><expr><name pos:line="52" pos:column="25">done<pos:position pos:line="52" pos:column="29"/></name> <operator pos:line="52" pos:column="30">=<pos:position pos:line="52" pos:column="31"/></operator> <literal type="number" pos:line="52" pos:column="32">1<pos:position pos:line="52" pos:column="33"/></literal></expr>;<pos:position pos:line="52" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="53" pos:column="18"/></block></then></if></elseif> <elseif pos:line="53" pos:column="19">else <if pos:line="53" pos:column="24">if <condition pos:line="53" pos:column="27">(<expr><call><name pos:line="53" pos:column="28">is_valid_cmd_name<pos:position pos:line="53" pos:column="45"/></name><argument_list pos:line="53" pos:column="45">(<argument><expr><name pos:line="53" pos:column="46">prog<pos:position pos:line="53" pos:column="50"/></name></expr></argument>)<pos:position pos:line="53" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="52"/></condition><then pos:line="53" pos:column="52"> <block pos:line="53" pos:column="53">{
			<expr_stmt><expr><name pos:line="54" pos:column="25">full_cmd<pos:position pos:line="54" pos:column="33"/></name> <operator pos:line="54" pos:column="34">=<pos:position pos:line="54" pos:column="35"/></operator> <call><name pos:line="54" pos:column="36">make_cmd<pos:position pos:line="54" pos:column="44"/></name><argument_list pos:line="54" pos:column="44">(<argument><expr><name pos:line="54" pos:column="45">prog<pos:position pos:line="54" pos:column="49"/></name></expr></argument>)<pos:position pos:line="54" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="55" pos:column="25">argv<pos:position pos:line="55" pos:column="29"/></name><index pos:line="55" pos:column="29">[<expr><literal type="number" pos:line="55" pos:column="30">0<pos:position pos:line="55" pos:column="31"/></literal></expr>]<pos:position pos:line="55" pos:column="32"/></index></name> <operator pos:line="55" pos:column="33">=<pos:position pos:line="55" pos:column="34"/></operator> <name pos:line="55" pos:column="35">full_cmd<pos:position pos:line="55" pos:column="43"/></name></expr>;<pos:position pos:line="55" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="56" pos:column="25">code<pos:position pos:line="56" pos:column="29"/></name> <operator pos:line="56" pos:column="30">=<pos:position pos:line="56" pos:column="31"/></operator> <call><name pos:line="56" pos:column="32">run_command_v_opt<pos:position pos:line="56" pos:column="49"/></name><argument_list pos:line="56" pos:column="49">(<argument><expr><name pos:line="56" pos:column="50">argv<pos:position pos:line="56" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="56">RUN_SILENT_EXEC_FAILURE<pos:position pos:line="56" pos:column="79"/></name></expr></argument>)<pos:position pos:line="56" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="81"/></expr_stmt>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name pos:line="57" pos:column="29">code<pos:position pos:line="57" pos:column="33"/></name> <operator pos:line="57" pos:column="34">==<pos:position pos:line="57" pos:column="36"/></operator> <operator pos:line="57" pos:column="37">-<pos:position pos:line="57" pos:column="38"/></operator><literal type="number" pos:line="57" pos:column="38">1<pos:position pos:line="57" pos:column="39"/></literal> <operator pos:line="57" pos:column="40">&amp;&amp;<pos:position pos:line="57" pos:column="50"/></operator> <name pos:line="57" pos:column="43">errno<pos:position pos:line="57" pos:column="48"/></name> <operator pos:line="57" pos:column="49">==<pos:position pos:line="57" pos:column="51"/></operator> <name pos:line="57" pos:column="52">ENOENT<pos:position pos:line="57" pos:column="58"/></name></expr>)<pos:position pos:line="57" pos:column="59"/></condition><then pos:line="57" pos:column="59"> <block pos:line="57" pos:column="60">{
				<expr_stmt><expr><call><name pos:line="58" pos:column="33">fprintf<pos:position pos:line="58" pos:column="40"/></name><argument_list pos:line="58" pos:column="40">(<argument><expr><name pos:line="58" pos:column="41">stderr<pos:position pos:line="58" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="49">"unrecognized command '%s'\n"<pos:position pos:line="58" pos:column="78"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="80">prog<pos:position pos:line="58" pos:column="84"/></name></expr></argument>)<pos:position pos:line="58" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="86"/></expr_stmt>
			}<pos:position pos:line="59" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">free<pos:position pos:line="60" pos:column="29"/></name><argument_list pos:line="60" pos:column="29">(<argument><expr><name pos:line="60" pos:column="30">full_cmd<pos:position pos:line="60" pos:column="38"/></name></expr></argument>)<pos:position pos:line="60" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if></elseif> <else pos:line="61" pos:column="19">else <block pos:line="61" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">fprintf<pos:position pos:line="62" pos:column="32"/></name><argument_list pos:line="62" pos:column="32">(<argument><expr><name pos:line="62" pos:column="33">stderr<pos:position pos:line="62" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="41">"invalid command format '%s'\n"<pos:position pos:line="62" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="74">prog<pos:position pos:line="62" pos:column="78"/></name></expr></argument>)<pos:position pos:line="62" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="80"/></expr_stmt>
		}<pos:position pos:line="63" pos:column="18"/></block></else></if>

		<expr_stmt><expr><call><name pos:line="65" pos:column="17">free<pos:position pos:line="65" pos:column="21"/></name><argument_list pos:line="65" pos:column="21">(<argument><expr><name pos:line="65" pos:column="22">argv<pos:position pos:line="65" pos:column="26"/></name></expr></argument>)<pos:position pos:line="65" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">free<pos:position pos:line="66" pos:column="21"/></name><argument_list pos:line="66" pos:column="21">(<argument><expr><name pos:line="66" pos:column="22">rawargs<pos:position pos:line="66" pos:column="29"/></name></expr></argument>)<pos:position pos:line="66" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block> while <condition pos:line="67" pos:column="17">(<expr><operator pos:line="67" pos:column="18">!<pos:position pos:line="67" pos:column="19"/></operator><name pos:line="67" pos:column="19">done<pos:position pos:line="67" pos:column="23"/></name></expr>)<pos:position pos:line="67" pos:column="24"/></condition>;<pos:position pos:line="67" pos:column="25"/></do>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
