<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_176.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_config<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">var<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">value<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">void<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">data<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">parse_config_parameter<pos:position pos:line="3" pos:column="38"/></name></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">me<pos:position pos:line="3" pos:column="42"/></name> <init pos:line="3" pos:column="43">= <expr><name pos:line="3" pos:column="45">data<pos:position pos:line="3" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">submodule<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">submodule<pos:position pos:line="4" pos:column="36"/></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">name<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><name pos:line="5" pos:column="30">STRBUF_INIT<pos:position pos:line="5" pos:column="41"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="43">item<pos:position pos:line="5" pos:column="47"/></name> <init pos:line="5" pos:column="48">= <expr><name pos:line="5" pos:column="50">STRBUF_INIT<pos:position pos:line="5" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="62"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">ret<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/* this also ensures that we only parse submodule entries */</comment>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">name_and_item_from_var<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><name pos:line="9" pos:column="37">var<pos:position pos:line="9" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="42">&amp;<pos:position pos:line="9" pos:column="47"/></operator><name pos:line="9" pos:column="43">name<pos:position pos:line="9" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="49">&amp;<pos:position pos:line="9" pos:column="54"/></operator><name pos:line="9" pos:column="50">item<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="56"/></condition><then pos:line="9" pos:column="56">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="12" pos:column="9">submodule<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <call><name pos:line="12" pos:column="21">lookup_or_create_by_name<pos:position pos:line="12" pos:column="45"/></name><argument_list pos:line="12" pos:column="45">(<argument><expr><name><name pos:line="12" pos:column="46">me<pos:position pos:line="12" pos:column="48"/></name><operator pos:line="12" pos:column="48">-&gt;<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="50">cache<pos:position pos:line="12" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="57">me<pos:position pos:line="12" pos:column="59"/></name><operator pos:line="12" pos:column="59">-&gt;<pos:position pos:line="12" pos:column="64"/></operator><name pos:line="12" pos:column="61">gitmodules_sha1<pos:position pos:line="12" pos:column="76"/></name></name></expr></argument>,
			<argument><expr><name><name pos:line="13" pos:column="25">name<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">.<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">buf<pos:position pos:line="13" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><call><name pos:line="15" pos:column="14">strcmp<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name><name pos:line="15" pos:column="21">item<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">.<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">buf<pos:position pos:line="15" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="31">"path"<pos:position pos:line="15" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39"> <block pos:line="15" pos:column="40">{
		<decl_stmt><decl><type><name><name pos:line="16" pos:column="17">struct<pos:position pos:line="16" pos:column="23"/></name> <name pos:line="16" pos:column="24">strbuf<pos:position pos:line="16" pos:column="30"/></name></name></type> <name pos:line="16" pos:column="31">path<pos:position pos:line="16" pos:column="35"/></name> <init pos:line="16" pos:column="36">= <expr><name pos:line="16" pos:column="38">STRBUF_INIT<pos:position pos:line="16" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="50"/></decl_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">value<pos:position pos:line="17" pos:column="27"/></name></expr>)<pos:position pos:line="17" pos:column="28"/></condition><then pos:line="17" pos:column="28"> <block pos:line="17" pos:column="29">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">ret<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">=<pos:position pos:line="18" pos:column="30"/></operator> <call><name pos:line="18" pos:column="31">config_error_nonbool<pos:position pos:line="18" pos:column="51"/></name><argument_list pos:line="18" pos:column="51">(<argument><expr><name pos:line="18" pos:column="52">var<pos:position pos:line="18" pos:column="55"/></name></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="57"/></expr_stmt>
			<goto pos:line="19" pos:column="25">goto <name pos:line="19" pos:column="30">release_return<pos:position pos:line="19" pos:column="44"/></name>;<pos:position pos:line="19" pos:column="45"/></goto>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><name><name pos:line="21" pos:column="22">me<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">-&gt;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="26">overwrite<pos:position pos:line="21" pos:column="35"/></name></name> <operator pos:line="21" pos:column="36">&amp;&amp;<pos:position pos:line="21" pos:column="46"/></operator> <name><name pos:line="21" pos:column="39">submodule<pos:position pos:line="21" pos:column="48"/></name><operator pos:line="21" pos:column="48">-&gt;<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="50">path<pos:position pos:line="21" pos:column="54"/></name></name> <operator pos:line="21" pos:column="55">!=<pos:position pos:line="21" pos:column="57"/></operator> <name pos:line="21" pos:column="58">NULL<pos:position pos:line="21" pos:column="62"/></name></expr>)<pos:position pos:line="21" pos:column="63"/></condition><then pos:line="21" pos:column="63"> <block pos:line="21" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">warn_multiple_config<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><name><name pos:line="22" pos:column="46">me<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">-&gt;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="50">commit_sha1<pos:position pos:line="22" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="63">submodule<pos:position pos:line="22" pos:column="72"/></name><operator pos:line="22" pos:column="72">-&gt;<pos:position pos:line="22" pos:column="77"/></operator><name pos:line="22" pos:column="74">name<pos:position pos:line="22" pos:column="78"/></name></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="23" pos:column="41">"path"<pos:position pos:line="23" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt>
			<goto pos:line="24" pos:column="25">goto <name pos:line="24" pos:column="30">release_return<pos:position pos:line="24" pos:column="44"/></name>;<pos:position pos:line="24" pos:column="45"/></goto>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name><name pos:line="27" pos:column="21">submodule<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">-&gt;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="32">path<pos:position pos:line="27" pos:column="36"/></name></name></expr>)<pos:position pos:line="27" pos:column="37"/></condition><then pos:line="27" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">cache_remove_path<pos:position pos:line="28" pos:column="42"/></name><argument_list pos:line="28" pos:column="42">(<argument><expr><name><name pos:line="28" pos:column="43">me<pos:position pos:line="28" pos:column="45"/></name><operator pos:line="28" pos:column="45">-&gt;<pos:position pos:line="28" pos:column="50"/></operator><name pos:line="28" pos:column="47">cache<pos:position pos:line="28" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="54">submodule<pos:position pos:line="28" pos:column="63"/></name></expr></argument>)<pos:position pos:line="28" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="65"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">free<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><operator pos:line="29" pos:column="22">(<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="23">void<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">*<pos:position pos:line="29" pos:column="29"/></operator><operator pos:line="29" pos:column="29">)<pos:position pos:line="29" pos:column="30"/></operator> <name><name pos:line="29" pos:column="31">submodule<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">-&gt;<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="42">path<pos:position pos:line="29" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">strbuf_addstr<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><operator pos:line="30" pos:column="31">&amp;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="32">path<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="38">value<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">submodule<pos:position pos:line="31" pos:column="26"/></name><operator pos:line="31" pos:column="26">-&gt;<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="28">path<pos:position pos:line="31" pos:column="32"/></name></name> <operator pos:line="31" pos:column="33">=<pos:position pos:line="31" pos:column="34"/></operator> <call><name pos:line="31" pos:column="35">strbuf_detach<pos:position pos:line="31" pos:column="48"/></name><argument_list pos:line="31" pos:column="48">(<argument><expr><operator pos:line="31" pos:column="49">&amp;<pos:position pos:line="31" pos:column="54"/></operator><name pos:line="31" pos:column="50">path<pos:position pos:line="31" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="56">NULL<pos:position pos:line="31" pos:column="60"/></name></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">cache_put_path<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><name><name pos:line="32" pos:column="32">me<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">-&gt;<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="36">cache<pos:position pos:line="32" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="43">submodule<pos:position pos:line="32" pos:column="52"/></name></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="33" pos:column="10"/></block></then> <elseif pos:line="33" pos:column="11">else <if pos:line="33" pos:column="16">if <condition pos:line="33" pos:column="19">(<expr><operator pos:line="33" pos:column="20">!<pos:position pos:line="33" pos:column="21"/></operator><call><name pos:line="33" pos:column="21">strcmp<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name><name pos:line="33" pos:column="28">item<pos:position pos:line="33" pos:column="32"/></name><operator pos:line="33" pos:column="32">.<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="33">buf<pos:position pos:line="33" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="38">"fetchrecursesubmodules"<pos:position pos:line="33" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="64"/></condition><then pos:line="33" pos:column="64"> <block pos:line="33" pos:column="65">{
		<comment type="block" pos:line="34" pos:column="17">/* when parsing worktree configurations we can die early */</comment>
		<decl_stmt><decl><type><name pos:line="35" pos:column="17">int<pos:position pos:line="35" pos:column="20"/></name></type> <name pos:line="35" pos:column="21">die_on_error<pos:position pos:line="35" pos:column="33"/></name> <init pos:line="35" pos:column="34">= <expr><call><name pos:line="35" pos:column="36">is_null_sha1<pos:position pos:line="35" pos:column="48"/></name><argument_list pos:line="35" pos:column="48">(<argument><expr><name><name pos:line="35" pos:column="49">me<pos:position pos:line="35" pos:column="51"/></name><operator pos:line="35" pos:column="51">-&gt;<pos:position pos:line="35" pos:column="56"/></operator><name pos:line="35" pos:column="53">gitmodules_sha1<pos:position pos:line="35" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="70"/></decl_stmt>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><operator pos:line="36" pos:column="21">!<pos:position pos:line="36" pos:column="22"/></operator><name><name pos:line="36" pos:column="22">me<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">overwrite<pos:position pos:line="36" pos:column="35"/></name></name> <operator pos:line="36" pos:column="36">&amp;&amp;<pos:position pos:line="36" pos:column="46"/></operator>
		    <name><name pos:line="37" pos:column="21">submodule<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">-&gt;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="32">fetch_recurse<pos:position pos:line="37" pos:column="45"/></name></name> <operator pos:line="37" pos:column="46">!=<pos:position pos:line="37" pos:column="48"/></operator> <name pos:line="37" pos:column="49">RECURSE_SUBMODULES_NONE<pos:position pos:line="37" pos:column="72"/></name></expr>)<pos:position pos:line="37" pos:column="73"/></condition><then pos:line="37" pos:column="73"> <block pos:line="37" pos:column="74">{
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">warn_multiple_config<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><name><name pos:line="38" pos:column="46">me<pos:position pos:line="38" pos:column="48"/></name><operator pos:line="38" pos:column="48">-&gt;<pos:position pos:line="38" pos:column="53"/></operator><name pos:line="38" pos:column="50">commit_sha1<pos:position pos:line="38" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="63">submodule<pos:position pos:line="38" pos:column="72"/></name><operator pos:line="38" pos:column="72">-&gt;<pos:position pos:line="38" pos:column="77"/></operator><name pos:line="38" pos:column="74">name<pos:position pos:line="38" pos:column="78"/></name></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="39" pos:column="41">"fetchrecursesubmodules"<pos:position pos:line="39" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="67"/></expr_stmt>
			<goto pos:line="40" pos:column="25">goto <name pos:line="40" pos:column="30">release_return<pos:position pos:line="40" pos:column="44"/></name>;<pos:position pos:line="40" pos:column="45"/></goto>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="43" pos:column="17">submodule<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">-&gt;<pos:position pos:line="43" pos:column="31"/></operator><name pos:line="43" pos:column="28">fetch_recurse<pos:position pos:line="43" pos:column="41"/></name></name> <operator pos:line="43" pos:column="42">=<pos:position pos:line="43" pos:column="43"/></operator> <call><name pos:line="43" pos:column="44">parse_fetch_recurse<pos:position pos:line="43" pos:column="63"/></name><argument_list pos:line="43" pos:column="63">(<argument><expr><name pos:line="43" pos:column="64">var<pos:position pos:line="43" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="69">value<pos:position pos:line="43" pos:column="74"/></name></expr></argument>,
								<argument><expr><name pos:line="44" pos:column="65">die_on_error<pos:position pos:line="44" pos:column="77"/></name></expr></argument>)<pos:position pos:line="44" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="79"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if></elseif> <elseif pos:line="45" pos:column="11">else <if pos:line="45" pos:column="16">if <condition pos:line="45" pos:column="19">(<expr><operator pos:line="45" pos:column="20">!<pos:position pos:line="45" pos:column="21"/></operator><call><name pos:line="45" pos:column="21">strcmp<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><name><name pos:line="45" pos:column="28">item<pos:position pos:line="45" pos:column="32"/></name><operator pos:line="45" pos:column="32">.<pos:position pos:line="45" pos:column="33"/></operator><name pos:line="45" pos:column="33">buf<pos:position pos:line="45" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="38">"ignore"<pos:position pos:line="45" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="48"/></condition><then pos:line="45" pos:column="48"> <block pos:line="45" pos:column="49">{
		<decl_stmt><decl><type><name><name pos:line="46" pos:column="17">struct<pos:position pos:line="46" pos:column="23"/></name> <name pos:line="46" pos:column="24">strbuf<pos:position pos:line="46" pos:column="30"/></name></name></type> <name pos:line="46" pos:column="31">ignore<pos:position pos:line="46" pos:column="37"/></name> <init pos:line="46" pos:column="38">= <expr><name pos:line="46" pos:column="40">STRBUF_INIT<pos:position pos:line="46" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="46" pos:column="52"/></decl_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><operator pos:line="47" pos:column="21">!<pos:position pos:line="47" pos:column="22"/></operator><name><name pos:line="47" pos:column="22">me<pos:position pos:line="47" pos:column="24"/></name><operator pos:line="47" pos:column="24">-&gt;<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="26">overwrite<pos:position pos:line="47" pos:column="35"/></name></name> <operator pos:line="47" pos:column="36">&amp;&amp;<pos:position pos:line="47" pos:column="46"/></operator> <name><name pos:line="47" pos:column="39">submodule<pos:position pos:line="47" pos:column="48"/></name><operator pos:line="47" pos:column="48">-&gt;<pos:position pos:line="47" pos:column="53"/></operator><name pos:line="47" pos:column="50">ignore<pos:position pos:line="47" pos:column="56"/></name></name> <operator pos:line="47" pos:column="57">!=<pos:position pos:line="47" pos:column="59"/></operator> <name pos:line="47" pos:column="60">NULL<pos:position pos:line="47" pos:column="64"/></name></expr>)<pos:position pos:line="47" pos:column="65"/></condition><then pos:line="47" pos:column="65"> <block pos:line="47" pos:column="66">{
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">warn_multiple_config<pos:position pos:line="48" pos:column="45"/></name><argument_list pos:line="48" pos:column="45">(<argument><expr><name><name pos:line="48" pos:column="46">me<pos:position pos:line="48" pos:column="48"/></name><operator pos:line="48" pos:column="48">-&gt;<pos:position pos:line="48" pos:column="53"/></operator><name pos:line="48" pos:column="50">commit_sha1<pos:position pos:line="48" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="63">submodule<pos:position pos:line="48" pos:column="72"/></name><operator pos:line="48" pos:column="72">-&gt;<pos:position pos:line="48" pos:column="77"/></operator><name pos:line="48" pos:column="74">name<pos:position pos:line="48" pos:column="78"/></name></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="49" pos:column="41">"ignore"<pos:position pos:line="49" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="51"/></expr_stmt>
			<goto pos:line="50" pos:column="25">goto <name pos:line="50" pos:column="30">release_return<pos:position pos:line="50" pos:column="44"/></name>;<pos:position pos:line="50" pos:column="45"/></goto>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><operator pos:line="52" pos:column="21">!<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="22">value<pos:position pos:line="52" pos:column="27"/></name></expr>)<pos:position pos:line="52" pos:column="28"/></condition><then pos:line="52" pos:column="28"> <block pos:line="52" pos:column="29">{
			<expr_stmt><expr><name pos:line="53" pos:column="25">ret<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">=<pos:position pos:line="53" pos:column="30"/></operator> <call><name pos:line="53" pos:column="31">config_error_nonbool<pos:position pos:line="53" pos:column="51"/></name><argument_list pos:line="53" pos:column="51">(<argument><expr><name pos:line="53" pos:column="52">var<pos:position pos:line="53" pos:column="55"/></name></expr></argument>)<pos:position pos:line="53" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="57"/></expr_stmt>
			<goto pos:line="54" pos:column="25">goto <name pos:line="54" pos:column="30">release_return<pos:position pos:line="54" pos:column="44"/></name>;<pos:position pos:line="54" pos:column="45"/></goto>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><call><name pos:line="56" pos:column="21">strcmp<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">(<argument><expr><name pos:line="56" pos:column="28">value<pos:position pos:line="56" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="35">"untracked"<pos:position pos:line="56" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="47"/></argument_list></call> <operator pos:line="56" pos:column="48">&amp;&amp;<pos:position pos:line="56" pos:column="58"/></operator> <call><name pos:line="56" pos:column="51">strcmp<pos:position pos:line="56" pos:column="57"/></name><argument_list pos:line="56" pos:column="57">(<argument><expr><name pos:line="56" pos:column="58">value<pos:position pos:line="56" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="65">"dirty"<pos:position pos:line="56" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="73"/></argument_list></call> <operator pos:line="56" pos:column="74">&amp;&amp;<pos:position pos:line="56" pos:column="84"/></operator>
		    <call><name pos:line="57" pos:column="21">strcmp<pos:position pos:line="57" pos:column="27"/></name><argument_list pos:line="57" pos:column="27">(<argument><expr><name pos:line="57" pos:column="28">value<pos:position pos:line="57" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="35">"all"<pos:position pos:line="57" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="41"/></argument_list></call> <operator pos:line="57" pos:column="42">&amp;&amp;<pos:position pos:line="57" pos:column="52"/></operator> <call><name pos:line="57" pos:column="45">strcmp<pos:position pos:line="57" pos:column="51"/></name><argument_list pos:line="57" pos:column="51">(<argument><expr><name pos:line="57" pos:column="52">value<pos:position pos:line="57" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="59">"none"<pos:position pos:line="57" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="67"/></condition><then pos:line="57" pos:column="67"> <block pos:line="57" pos:column="68">{
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">warning<pos:position pos:line="58" pos:column="32"/></name><argument_list pos:line="58" pos:column="32">(<argument><expr><literal type="string" pos:line="58" pos:column="33">"Invalid parameter '%s' for config option "<pos:position pos:line="58" pos:column="76"/></literal>
					<literal type="string" pos:line="59" pos:column="41">"'submodule.%s.ignore'"<pos:position pos:line="59" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="66">value<pos:position pos:line="59" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="73">var<pos:position pos:line="59" pos:column="76"/></name></expr></argument>)<pos:position pos:line="59" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="78"/></expr_stmt>
			<goto pos:line="60" pos:column="25">goto <name pos:line="60" pos:column="30">release_return<pos:position pos:line="60" pos:column="44"/></name>;<pos:position pos:line="60" pos:column="45"/></goto>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="63" pos:column="17">free<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><operator pos:line="63" pos:column="22">(<pos:position pos:line="63" pos:column="23"/></operator><name pos:line="63" pos:column="23">void<pos:position pos:line="63" pos:column="27"/></name> <operator pos:line="63" pos:column="28">*<pos:position pos:line="63" pos:column="29"/></operator><operator pos:line="63" pos:column="29">)<pos:position pos:line="63" pos:column="30"/></operator> <name><name pos:line="63" pos:column="31">submodule<pos:position pos:line="63" pos:column="40"/></name><operator pos:line="63" pos:column="40">-&gt;<pos:position pos:line="63" pos:column="45"/></operator><name pos:line="63" pos:column="42">ignore<pos:position pos:line="63" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">strbuf_addstr<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><operator pos:line="64" pos:column="31">&amp;<pos:position pos:line="64" pos:column="36"/></operator><name pos:line="64" pos:column="32">ignore<pos:position pos:line="64" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="40">value<pos:position pos:line="64" pos:column="45"/></name></expr></argument>)<pos:position pos:line="64" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="65" pos:column="17">submodule<pos:position pos:line="65" pos:column="26"/></name><operator pos:line="65" pos:column="26">-&gt;<pos:position pos:line="65" pos:column="31"/></operator><name pos:line="65" pos:column="28">ignore<pos:position pos:line="65" pos:column="34"/></name></name> <operator pos:line="65" pos:column="35">=<pos:position pos:line="65" pos:column="36"/></operator> <call><name pos:line="65" pos:column="37">strbuf_detach<pos:position pos:line="65" pos:column="50"/></name><argument_list pos:line="65" pos:column="50">(<argument><expr><operator pos:line="65" pos:column="51">&amp;<pos:position pos:line="65" pos:column="56"/></operator><name pos:line="65" pos:column="52">ignore<pos:position pos:line="65" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="60">NULL<pos:position pos:line="65" pos:column="64"/></name></expr></argument>)<pos:position pos:line="65" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if></elseif> <elseif pos:line="66" pos:column="11">else <if pos:line="66" pos:column="16">if <condition pos:line="66" pos:column="19">(<expr><operator pos:line="66" pos:column="20">!<pos:position pos:line="66" pos:column="21"/></operator><call><name pos:line="66" pos:column="21">strcmp<pos:position pos:line="66" pos:column="27"/></name><argument_list pos:line="66" pos:column="27">(<argument><expr><name><name pos:line="66" pos:column="28">item<pos:position pos:line="66" pos:column="32"/></name><operator pos:line="66" pos:column="32">.<pos:position pos:line="66" pos:column="33"/></operator><name pos:line="66" pos:column="33">buf<pos:position pos:line="66" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="38">"url"<pos:position pos:line="66" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="45"/></condition><then pos:line="66" pos:column="45"> <block pos:line="66" pos:column="46">{
		<decl_stmt><decl><type><name><name pos:line="67" pos:column="17">struct<pos:position pos:line="67" pos:column="23"/></name> <name pos:line="67" pos:column="24">strbuf<pos:position pos:line="67" pos:column="30"/></name></name></type> <name pos:line="67" pos:column="31">url<pos:position pos:line="67" pos:column="34"/></name> <init pos:line="67" pos:column="35">= <expr><name pos:line="67" pos:column="37">STRBUF_INIT<pos:position pos:line="67" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="67" pos:column="49"/></decl_stmt>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><operator pos:line="68" pos:column="21">!<pos:position pos:line="68" pos:column="22"/></operator><name pos:line="68" pos:column="22">value<pos:position pos:line="68" pos:column="27"/></name></expr>)<pos:position pos:line="68" pos:column="28"/></condition><then pos:line="68" pos:column="28"> <block pos:line="68" pos:column="29">{
			<expr_stmt><expr><name pos:line="69" pos:column="25">ret<pos:position pos:line="69" pos:column="28"/></name> <operator pos:line="69" pos:column="29">=<pos:position pos:line="69" pos:column="30"/></operator> <call><name pos:line="69" pos:column="31">config_error_nonbool<pos:position pos:line="69" pos:column="51"/></name><argument_list pos:line="69" pos:column="51">(<argument><expr><name pos:line="69" pos:column="52">var<pos:position pos:line="69" pos:column="55"/></name></expr></argument>)<pos:position pos:line="69" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="57"/></expr_stmt>
			<goto pos:line="70" pos:column="25">goto <name pos:line="70" pos:column="30">release_return<pos:position pos:line="70" pos:column="44"/></name>;<pos:position pos:line="70" pos:column="45"/></goto>
		}<pos:position pos:line="71" pos:column="18"/></block></then></if>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><operator pos:line="72" pos:column="21">!<pos:position pos:line="72" pos:column="22"/></operator><name><name pos:line="72" pos:column="22">me<pos:position pos:line="72" pos:column="24"/></name><operator pos:line="72" pos:column="24">-&gt;<pos:position pos:line="72" pos:column="29"/></operator><name pos:line="72" pos:column="26">overwrite<pos:position pos:line="72" pos:column="35"/></name></name> <operator pos:line="72" pos:column="36">&amp;&amp;<pos:position pos:line="72" pos:column="46"/></operator> <name><name pos:line="72" pos:column="39">submodule<pos:position pos:line="72" pos:column="48"/></name><operator pos:line="72" pos:column="48">-&gt;<pos:position pos:line="72" pos:column="53"/></operator><name pos:line="72" pos:column="50">url<pos:position pos:line="72" pos:column="53"/></name></name> <operator pos:line="72" pos:column="54">!=<pos:position pos:line="72" pos:column="56"/></operator> <name pos:line="72" pos:column="57">NULL<pos:position pos:line="72" pos:column="61"/></name></expr>)<pos:position pos:line="72" pos:column="62"/></condition><then pos:line="72" pos:column="62"> <block pos:line="72" pos:column="63">{
			<expr_stmt><expr><call><name pos:line="73" pos:column="25">warn_multiple_config<pos:position pos:line="73" pos:column="45"/></name><argument_list pos:line="73" pos:column="45">(<argument><expr><name><name pos:line="73" pos:column="46">me<pos:position pos:line="73" pos:column="48"/></name><operator pos:line="73" pos:column="48">-&gt;<pos:position pos:line="73" pos:column="53"/></operator><name pos:line="73" pos:column="50">commit_sha1<pos:position pos:line="73" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="63">submodule<pos:position pos:line="73" pos:column="72"/></name><operator pos:line="73" pos:column="72">-&gt;<pos:position pos:line="73" pos:column="77"/></operator><name pos:line="73" pos:column="74">name<pos:position pos:line="73" pos:column="78"/></name></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="74" pos:column="41">"url"<pos:position pos:line="74" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="48"/></expr_stmt>
			<goto pos:line="75" pos:column="25">goto <name pos:line="75" pos:column="30">release_return<pos:position pos:line="75" pos:column="44"/></name>;<pos:position pos:line="75" pos:column="45"/></goto>
		}<pos:position pos:line="76" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="78" pos:column="17">free<pos:position pos:line="78" pos:column="21"/></name><argument_list pos:line="78" pos:column="21">(<argument><expr><operator pos:line="78" pos:column="22">(<pos:position pos:line="78" pos:column="23"/></operator><name pos:line="78" pos:column="23">void<pos:position pos:line="78" pos:column="27"/></name> <operator pos:line="78" pos:column="28">*<pos:position pos:line="78" pos:column="29"/></operator><operator pos:line="78" pos:column="29">)<pos:position pos:line="78" pos:column="30"/></operator> <name><name pos:line="78" pos:column="31">submodule<pos:position pos:line="78" pos:column="40"/></name><operator pos:line="78" pos:column="40">-&gt;<pos:position pos:line="78" pos:column="45"/></operator><name pos:line="78" pos:column="42">url<pos:position pos:line="78" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">strbuf_addstr<pos:position pos:line="79" pos:column="30"/></name><argument_list pos:line="79" pos:column="30">(<argument><expr><operator pos:line="79" pos:column="31">&amp;<pos:position pos:line="79" pos:column="36"/></operator><name pos:line="79" pos:column="32">url<pos:position pos:line="79" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="37">value<pos:position pos:line="79" pos:column="42"/></name></expr></argument>)<pos:position pos:line="79" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="80" pos:column="17">submodule<pos:position pos:line="80" pos:column="26"/></name><operator pos:line="80" pos:column="26">-&gt;<pos:position pos:line="80" pos:column="31"/></operator><name pos:line="80" pos:column="28">url<pos:position pos:line="80" pos:column="31"/></name></name> <operator pos:line="80" pos:column="32">=<pos:position pos:line="80" pos:column="33"/></operator> <call><name pos:line="80" pos:column="34">strbuf_detach<pos:position pos:line="80" pos:column="47"/></name><argument_list pos:line="80" pos:column="47">(<argument><expr><operator pos:line="80" pos:column="48">&amp;<pos:position pos:line="80" pos:column="53"/></operator><name pos:line="80" pos:column="49">url<pos:position pos:line="80" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="54">NULL<pos:position pos:line="80" pos:column="58"/></name></expr></argument>)<pos:position pos:line="80" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="81" pos:column="10"/></block></then></if></elseif></if>

<label><name pos:line="83" pos:column="1">release_return<pos:position pos:line="83" pos:column="15"/></name>:<pos:position pos:line="83" pos:column="16"/></label>
	<expr_stmt><expr><call><name pos:line="84" pos:column="9">strbuf_release<pos:position pos:line="84" pos:column="23"/></name><argument_list pos:line="84" pos:column="23">(<argument><expr><operator pos:line="84" pos:column="24">&amp;<pos:position pos:line="84" pos:column="29"/></operator><name pos:line="84" pos:column="25">name<pos:position pos:line="84" pos:column="29"/></name></expr></argument>)<pos:position pos:line="84" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="85" pos:column="9">strbuf_release<pos:position pos:line="85" pos:column="23"/></name><argument_list pos:line="85" pos:column="23">(<argument><expr><operator pos:line="85" pos:column="24">&amp;<pos:position pos:line="85" pos:column="29"/></operator><name pos:line="85" pos:column="25">item<pos:position pos:line="85" pos:column="29"/></name></expr></argument>)<pos:position pos:line="85" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="31"/></expr_stmt>

	<return pos:line="87" pos:column="9">return <expr><name pos:line="87" pos:column="16">ret<pos:position pos:line="87" pos:column="19"/></name></expr>;<pos:position pos:line="87" pos:column="20"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
