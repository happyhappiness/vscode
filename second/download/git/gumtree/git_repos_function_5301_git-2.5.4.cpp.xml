<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5301_git-2.5.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">config_read_branches<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">key<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">value<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="69">void<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">cb<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><call><name pos:line="3" pos:column="13">starts_with<pos:position pos:line="3" pos:column="24"/></name><argument_list pos:line="3" pos:column="24">(<argument><expr><name pos:line="3" pos:column="25">key<pos:position pos:line="3" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="30">"branch."<pos:position pos:line="3" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="41"/></condition><then pos:line="3" pos:column="41"> <block pos:line="3" pos:column="42">{
		<decl_stmt><decl><type><specifier pos:line="4" pos:column="17">const<pos:position pos:line="4" pos:column="22"/></specifier> <name pos:line="4" pos:column="23">char<pos:position pos:line="4" pos:column="27"/></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">orig_key<pos:position pos:line="4" pos:column="37"/></name> <init pos:line="4" pos:column="38">= <expr><name pos:line="4" pos:column="40">key<pos:position pos:line="4" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">char<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">name<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="6" pos:column="17">struct<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">string_list_item<pos:position pos:line="6" pos:column="40"/></name></name> <modifier pos:line="6" pos:column="41">*<pos:position pos:line="6" pos:column="42"/></modifier></type><name pos:line="6" pos:column="42">item<pos:position pos:line="6" pos:column="46"/></name></decl>;<pos:position pos:line="6" pos:column="47"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">branch_info<pos:position pos:line="7" pos:column="35"/></name></name> <modifier pos:line="7" pos:column="36">*<pos:position pos:line="7" pos:column="37"/></modifier></type><name pos:line="7" pos:column="37">info<pos:position pos:line="7" pos:column="41"/></name></decl>;<pos:position pos:line="7" pos:column="42"/></decl_stmt>
		<enum pos:line="8" pos:column="17">enum <block pos:line="8" pos:column="22">{ <decl><name pos:line="8" pos:column="24">REMOTE<pos:position pos:line="8" pos:column="30"/></name></decl>, <decl><name pos:line="8" pos:column="32">MERGE<pos:position pos:line="8" pos:column="37"/></name></decl>, <decl><name pos:line="8" pos:column="39">REBASE<pos:position pos:line="8" pos:column="45"/></name></decl> }<pos:position pos:line="8" pos:column="47"/></block> <decl><name pos:line="8" pos:column="48">type<pos:position pos:line="8" pos:column="52"/></name></decl>;<pos:position pos:line="8" pos:column="53"/></enum>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">size_t<pos:position pos:line="9" pos:column="23"/></name></type> <name pos:line="9" pos:column="24">key_len<pos:position pos:line="9" pos:column="31"/></name></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>

		<expr_stmt><expr><name pos:line="11" pos:column="17">key<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">+=<pos:position pos:line="11" pos:column="23"/></operator> <literal type="number" pos:line="11" pos:column="24">7<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">strip_suffix<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">key<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="39">".remote"<pos:position pos:line="12" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="50">&amp;<pos:position pos:line="12" pos:column="55"/></operator><name pos:line="12" pos:column="51">key_len<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="60"/></condition><then pos:line="12" pos:column="60"> <block pos:line="12" pos:column="61">{
			<expr_stmt><expr><name pos:line="13" pos:column="25">name<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">=<pos:position pos:line="13" pos:column="31"/></operator> <call><name pos:line="13" pos:column="32">xmemdupz<pos:position pos:line="13" pos:column="40"/></name><argument_list pos:line="13" pos:column="40">(<argument><expr><name pos:line="13" pos:column="41">key<pos:position pos:line="13" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="46">key_len<pos:position pos:line="13" pos:column="53"/></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="14" pos:column="25">type<pos:position pos:line="14" pos:column="29"/></name> <operator pos:line="14" pos:column="30">=<pos:position pos:line="14" pos:column="31"/></operator> <name pos:line="14" pos:column="32">REMOTE<pos:position pos:line="14" pos:column="38"/></name></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></then> <elseif pos:line="15" pos:column="19">else <if pos:line="15" pos:column="24">if <condition pos:line="15" pos:column="27">(<expr><call><name pos:line="15" pos:column="28">strip_suffix<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name pos:line="15" pos:column="41">key<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="46">".merge"<pos:position pos:line="15" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="56">&amp;<pos:position pos:line="15" pos:column="61"/></operator><name pos:line="15" pos:column="57">key_len<pos:position pos:line="15" pos:column="64"/></name></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="66"/></condition><then pos:line="15" pos:column="66"> <block pos:line="15" pos:column="67">{
			<expr_stmt><expr><name pos:line="16" pos:column="25">name<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">=<pos:position pos:line="16" pos:column="31"/></operator> <call><name pos:line="16" pos:column="32">xmemdupz<pos:position pos:line="16" pos:column="40"/></name><argument_list pos:line="16" pos:column="40">(<argument><expr><name pos:line="16" pos:column="41">key<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">key_len<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="17" pos:column="25">type<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">=<pos:position pos:line="17" pos:column="31"/></operator> <name pos:line="17" pos:column="32">MERGE<pos:position pos:line="17" pos:column="37"/></name></expr>;<pos:position pos:line="17" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if></elseif> <elseif pos:line="18" pos:column="19">else <if pos:line="18" pos:column="24">if <condition pos:line="18" pos:column="27">(<expr><call><name pos:line="18" pos:column="28">strip_suffix<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">key<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="46">".rebase"<pos:position pos:line="18" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="57">&amp;<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="58">key_len<pos:position pos:line="18" pos:column="65"/></name></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="67"/></condition><then pos:line="18" pos:column="67"> <block pos:line="18" pos:column="68">{
			<expr_stmt><expr><name pos:line="19" pos:column="25">name<pos:position pos:line="19" pos:column="29"/></name> <operator pos:line="19" pos:column="30">=<pos:position pos:line="19" pos:column="31"/></operator> <call><name pos:line="19" pos:column="32">xmemdupz<pos:position pos:line="19" pos:column="40"/></name><argument_list pos:line="19" pos:column="40">(<argument><expr><name pos:line="19" pos:column="41">key<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">key_len<pos:position pos:line="19" pos:column="53"/></name></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="20" pos:column="25">type<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">=<pos:position pos:line="20" pos:column="31"/></operator> <name pos:line="20" pos:column="32">REBASE<pos:position pos:line="20" pos:column="38"/></name></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if></elseif> <else pos:line="21" pos:column="19">else
			<block type="pseudo"><return pos:line="22" pos:column="25">return <expr><literal type="number" pos:line="22" pos:column="32">0<pos:position pos:line="22" pos:column="33"/></literal></expr>;<pos:position pos:line="22" pos:column="34"/></return></block></else></if>

		<expr_stmt><expr><name pos:line="24" pos:column="17">item<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <call><name pos:line="24" pos:column="24">string_list_insert<pos:position pos:line="24" pos:column="42"/></name><argument_list pos:line="24" pos:column="42">(<argument><expr><operator pos:line="24" pos:column="43">&amp;<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="44">branch_list<pos:position pos:line="24" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="57">name<pos:position pos:line="24" pos:column="61"/></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">!<pos:position pos:line="26" pos:column="22"/></operator><name><name pos:line="26" pos:column="22">item<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">-&gt;<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="28">util<pos:position pos:line="26" pos:column="32"/></name></name></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="25">item<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">-&gt;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="31">util<pos:position pos:line="27" pos:column="35"/></name></name> <operator pos:line="27" pos:column="36">=<pos:position pos:line="27" pos:column="37"/></operator> <call><name pos:line="27" pos:column="38">xcalloc<pos:position pos:line="27" pos:column="45"/></name><argument_list pos:line="27" pos:column="45">(<argument><expr><literal type="number" pos:line="27" pos:column="46">1<pos:position pos:line="27" pos:column="47"/></literal></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="49">sizeof<argument_list pos:line="27" pos:column="55">(<argument><expr pos:line="27" pos:column="56">struct <name pos:line="27" pos:column="63">branch_info<pos:position pos:line="27" pos:column="74"/></name></expr></argument>)<pos:position pos:line="27" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="77"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="28" pos:column="17">info<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <name><name pos:line="28" pos:column="24">item<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">-&gt;<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="30">util<pos:position pos:line="28" pos:column="34"/></name></name></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">type<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">==<pos:position pos:line="29" pos:column="28"/></operator> <name pos:line="29" pos:column="29">REMOTE<pos:position pos:line="29" pos:column="35"/></name></expr>)<pos:position pos:line="29" pos:column="36"/></condition><then pos:line="29" pos:column="36"> <block pos:line="29" pos:column="37">{
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name><name pos:line="30" pos:column="29">info<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">-&gt;<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="35">remote_name<pos:position pos:line="30" pos:column="46"/></name></name></expr>)<pos:position pos:line="30" pos:column="47"/></condition><then pos:line="30" pos:column="47">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="33">warning<pos:position pos:line="31" pos:column="40"/></name><argument_list pos:line="31" pos:column="40">(<argument><expr><call><name pos:line="31" pos:column="41">_<pos:position pos:line="31" pos:column="42"/></name><argument_list pos:line="31" pos:column="42">(<argument><expr><literal type="string" pos:line="31" pos:column="43">"more than one %s"<pos:position pos:line="31" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="31" pos:column="64">orig_key<pos:position pos:line="31" pos:column="72"/></name></expr></argument>)<pos:position pos:line="31" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="74"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="32" pos:column="25">info<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">-&gt;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="31">remote_name<pos:position pos:line="32" pos:column="42"/></name></name> <operator pos:line="32" pos:column="43">=<pos:position pos:line="32" pos:column="44"/></operator> <call><name pos:line="32" pos:column="45">xstrdup<pos:position pos:line="32" pos:column="52"/></name><argument_list pos:line="32" pos:column="52">(<argument><expr><name pos:line="32" pos:column="53">value<pos:position pos:line="32" pos:column="58"/></name></expr></argument>)<pos:position pos:line="32" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="60"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></then> <elseif pos:line="33" pos:column="19">else <if pos:line="33" pos:column="24">if <condition pos:line="33" pos:column="27">(<expr><name pos:line="33" pos:column="28">type<pos:position pos:line="33" pos:column="32"/></name> <operator pos:line="33" pos:column="33">==<pos:position pos:line="33" pos:column="35"/></operator> <name pos:line="33" pos:column="36">MERGE<pos:position pos:line="33" pos:column="41"/></name></expr>)<pos:position pos:line="33" pos:column="42"/></condition><then pos:line="33" pos:column="42"> <block pos:line="33" pos:column="43">{
			<decl_stmt><decl><type><name pos:line="34" pos:column="25">char<pos:position pos:line="34" pos:column="29"/></name> <modifier pos:line="34" pos:column="30">*<pos:position pos:line="34" pos:column="31"/></modifier></type><name pos:line="34" pos:column="31">space<pos:position pos:line="34" pos:column="36"/></name> <init pos:line="34" pos:column="37">= <expr><call><name pos:line="34" pos:column="39">strchr<pos:position pos:line="34" pos:column="45"/></name><argument_list pos:line="34" pos:column="45">(<argument><expr><name pos:line="34" pos:column="46">value<pos:position pos:line="34" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="34" pos:column="53">' '<pos:position pos:line="34" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="58"/></decl_stmt>
			<expr_stmt><expr><name pos:line="35" pos:column="25">value<pos:position pos:line="35" pos:column="30"/></name> <operator pos:line="35" pos:column="31">=<pos:position pos:line="35" pos:column="32"/></operator> <call><name pos:line="35" pos:column="33">abbrev_branch<pos:position pos:line="35" pos:column="46"/></name><argument_list pos:line="35" pos:column="46">(<argument><expr><name pos:line="35" pos:column="47">value<pos:position pos:line="35" pos:column="52"/></name></expr></argument>)<pos:position pos:line="35" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="54"/></expr_stmt>
			<while pos:line="36" pos:column="25">while <condition pos:line="36" pos:column="31">(<expr><name pos:line="36" pos:column="32">space<pos:position pos:line="36" pos:column="37"/></name></expr>)<pos:position pos:line="36" pos:column="38"/></condition> <block pos:line="36" pos:column="39">{
				<decl_stmt><decl><type><name pos:line="37" pos:column="33">char<pos:position pos:line="37" pos:column="37"/></name> <modifier pos:line="37" pos:column="38">*<pos:position pos:line="37" pos:column="39"/></modifier></type><name pos:line="37" pos:column="39">merge<pos:position pos:line="37" pos:column="44"/></name></decl>;<pos:position pos:line="37" pos:column="45"/></decl_stmt>
				<expr_stmt><expr><name pos:line="38" pos:column="33">merge<pos:position pos:line="38" pos:column="38"/></name> <operator pos:line="38" pos:column="39">=<pos:position pos:line="38" pos:column="40"/></operator> <call><name pos:line="38" pos:column="41">xstrndup<pos:position pos:line="38" pos:column="49"/></name><argument_list pos:line="38" pos:column="49">(<argument><expr><name pos:line="38" pos:column="50">value<pos:position pos:line="38" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="57">space<pos:position pos:line="38" pos:column="62"/></name> <operator pos:line="38" pos:column="63">-<pos:position pos:line="38" pos:column="64"/></operator> <name pos:line="38" pos:column="65">value<pos:position pos:line="38" pos:column="70"/></name></expr></argument>)<pos:position pos:line="38" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="72"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="39" pos:column="33">string_list_append<pos:position pos:line="39" pos:column="51"/></name><argument_list pos:line="39" pos:column="51">(<argument><expr><operator pos:line="39" pos:column="52">&amp;<pos:position pos:line="39" pos:column="57"/></operator><name><name pos:line="39" pos:column="53">info<pos:position pos:line="39" pos:column="57"/></name><operator pos:line="39" pos:column="57">-&gt;<pos:position pos:line="39" pos:column="62"/></operator><name pos:line="39" pos:column="59">merge<pos:position pos:line="39" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="66">merge<pos:position pos:line="39" pos:column="71"/></name></expr></argument>)<pos:position pos:line="39" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="73"/></expr_stmt>
				<expr_stmt><expr><name pos:line="40" pos:column="33">value<pos:position pos:line="40" pos:column="38"/></name> <operator pos:line="40" pos:column="39">=<pos:position pos:line="40" pos:column="40"/></operator> <call><name pos:line="40" pos:column="41">abbrev_branch<pos:position pos:line="40" pos:column="54"/></name><argument_list pos:line="40" pos:column="54">(<argument><expr><name pos:line="40" pos:column="55">space<pos:position pos:line="40" pos:column="60"/></name> <operator pos:line="40" pos:column="61">+<pos:position pos:line="40" pos:column="62"/></operator> <literal type="number" pos:line="40" pos:column="63">1<pos:position pos:line="40" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="66"/></expr_stmt>
				<expr_stmt><expr><name pos:line="41" pos:column="33">space<pos:position pos:line="41" pos:column="38"/></name> <operator pos:line="41" pos:column="39">=<pos:position pos:line="41" pos:column="40"/></operator> <call><name pos:line="41" pos:column="41">strchr<pos:position pos:line="41" pos:column="47"/></name><argument_list pos:line="41" pos:column="47">(<argument><expr><name pos:line="41" pos:column="48">value<pos:position pos:line="41" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="55">' '<pos:position pos:line="41" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="42" pos:column="26"/></block></while>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">string_list_append<pos:position pos:line="43" pos:column="43"/></name><argument_list pos:line="43" pos:column="43">(<argument><expr><operator pos:line="43" pos:column="44">&amp;<pos:position pos:line="43" pos:column="49"/></operator><name><name pos:line="43" pos:column="45">info<pos:position pos:line="43" pos:column="49"/></name><operator pos:line="43" pos:column="49">-&gt;<pos:position pos:line="43" pos:column="54"/></operator><name pos:line="43" pos:column="51">merge<pos:position pos:line="43" pos:column="56"/></name></name></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="58">xstrdup<pos:position pos:line="43" pos:column="65"/></name><argument_list pos:line="43" pos:column="65">(<argument><expr><name pos:line="43" pos:column="66">value<pos:position pos:line="43" pos:column="71"/></name></expr></argument>)<pos:position pos:line="43" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="74"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if></elseif> <else pos:line="44" pos:column="19">else <block pos:line="44" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">int<pos:position pos:line="45" pos:column="28"/></name></type> <name pos:line="45" pos:column="29">v<pos:position pos:line="45" pos:column="30"/></name> <init pos:line="45" pos:column="31">= <expr><call><name pos:line="45" pos:column="33">git_config_maybe_bool<pos:position pos:line="45" pos:column="54"/></name><argument_list pos:line="45" pos:column="54">(<argument><expr><name pos:line="45" pos:column="55">orig_key<pos:position pos:line="45" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="65">value<pos:position pos:line="45" pos:column="70"/></name></expr></argument>)<pos:position pos:line="45" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="45" pos:column="72"/></decl_stmt>
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><name pos:line="46" pos:column="29">v<pos:position pos:line="46" pos:column="30"/></name> <operator pos:line="46" pos:column="31">&gt;=<pos:position pos:line="46" pos:column="36"/></operator> <literal type="number" pos:line="46" pos:column="34">0<pos:position pos:line="46" pos:column="35"/></literal></expr>)<pos:position pos:line="46" pos:column="36"/></condition><then pos:line="46" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="33">info<pos:position pos:line="47" pos:column="37"/></name><operator pos:line="47" pos:column="37">-&gt;<pos:position pos:line="47" pos:column="42"/></operator><name pos:line="47" pos:column="39">rebase<pos:position pos:line="47" pos:column="45"/></name></name> <operator pos:line="47" pos:column="46">=<pos:position pos:line="47" pos:column="47"/></operator> <name pos:line="47" pos:column="48">v<pos:position pos:line="47" pos:column="49"/></name></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt></block></then>
			<elseif pos:line="48" pos:column="25">else <if pos:line="48" pos:column="30">if <condition pos:line="48" pos:column="33">(<expr><operator pos:line="48" pos:column="34">!<pos:position pos:line="48" pos:column="35"/></operator><call><name pos:line="48" pos:column="35">strcmp<pos:position pos:line="48" pos:column="41"/></name><argument_list pos:line="48" pos:column="41">(<argument><expr><name pos:line="48" pos:column="42">value<pos:position pos:line="48" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="49">"preserve"<pos:position pos:line="48" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="61"/></condition><then pos:line="48" pos:column="61">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="49" pos:column="33">info<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">-&gt;<pos:position pos:line="49" pos:column="42"/></operator><name pos:line="49" pos:column="39">rebase<pos:position pos:line="49" pos:column="45"/></name></name> <operator pos:line="49" pos:column="46">=<pos:position pos:line="49" pos:column="47"/></operator> <literal type="number" pos:line="49" pos:column="48">1<pos:position pos:line="49" pos:column="49"/></literal></expr>;<pos:position pos:line="49" pos:column="50"/></expr_stmt></block></then></if></elseif></if>
		}<pos:position pos:line="50" pos:column="18"/></block></else></if>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>
	<return pos:line="52" pos:column="9">return <expr><literal type="number" pos:line="52" pos:column="16">0<pos:position pos:line="52" pos:column="17"/></literal></expr>;<pos:position pos:line="52" pos:column="18"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
