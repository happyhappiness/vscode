<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1402.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">expire_reflog_ent<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">object_id<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">ooid<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="54">struct<pos:position pos:line="1" pos:column="60"/></name> <name pos:line="1" pos:column="61">object_id<pos:position pos:line="1" pos:column="70"/></name></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">noid<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">email<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">unsigned<pos:position pos:line="2" pos:column="57"/></name> <name pos:line="2" pos:column="58">long<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">timestamp<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="74">int<pos:position pos:line="2" pos:column="77"/></name></type> <name pos:line="2" pos:column="78">tz<pos:position pos:line="2" pos:column="80"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="3" pos:column="30">const<pos:position pos:line="3" pos:column="35"/></specifier> <name pos:line="3" pos:column="36">char<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">message<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="51">void<pos:position pos:line="3" pos:column="55"/></name> <modifier pos:line="3" pos:column="56">*<pos:position pos:line="3" pos:column="57"/></modifier></type><name pos:line="3" pos:column="57">cb_data<pos:position pos:line="3" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="65"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">expire_reflog_cb<pos:position pos:line="5" pos:column="32"/></name></name> <modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></type><name pos:line="5" pos:column="34">cb<pos:position pos:line="5" pos:column="36"/></name> <init pos:line="5" pos:column="37">= <expr><name pos:line="5" pos:column="39">cb_data<pos:position pos:line="5" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">expire_reflog_policy_cb<pos:position pos:line="6" pos:column="39"/></name></name> <modifier pos:line="6" pos:column="40">*<pos:position pos:line="6" pos:column="41"/></modifier></type><name pos:line="6" pos:column="41">policy_cb<pos:position pos:line="6" pos:column="50"/></name> <init pos:line="6" pos:column="51">= <expr><name><name pos:line="6" pos:column="53">cb<pos:position pos:line="6" pos:column="55"/></name><operator pos:line="6" pos:column="55">-&gt;<pos:position pos:line="6" pos:column="60"/></operator><name pos:line="6" pos:column="57">policy_cb<pos:position pos:line="6" pos:column="66"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="67"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">cb<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">-&gt;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="17">flags<pos:position pos:line="8" pos:column="22"/></name></name> <operator pos:line="8" pos:column="23">&amp;<pos:position pos:line="8" pos:column="28"/></operator> <name pos:line="8" pos:column="25">EXPIRE_REFLOGS_REWRITE<pos:position pos:line="8" pos:column="47"/></name></expr>)<pos:position pos:line="8" pos:column="48"/></condition><then pos:line="8" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">ooid<pos:position pos:line="9" pos:column="21"/></name> <operator pos:line="9" pos:column="22">=<pos:position pos:line="9" pos:column="23"/></operator> <operator pos:line="9" pos:column="24">&amp;<pos:position pos:line="9" pos:column="29"/></operator><name><name pos:line="9" pos:column="25">cb<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">-&gt;<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="29">last_kept_oid<pos:position pos:line="9" pos:column="42"/></name></name></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call pos:line="11" pos:column="13">(<modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier><name><name pos:line="11" pos:column="15">cb<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">-&gt;<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="19">should_prune_fn<pos:position pos:line="11" pos:column="34"/></name></name>)<argument_list pos:line="11" pos:column="35">(<argument><expr><name><name pos:line="11" pos:column="36">ooid<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">-&gt;<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="42">hash<pos:position pos:line="11" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="48">noid<pos:position pos:line="11" pos:column="52"/></name><operator pos:line="11" pos:column="52">-&gt;<pos:position pos:line="11" pos:column="57"/></operator><name pos:line="11" pos:column="54">hash<pos:position pos:line="11" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="60">email<pos:position pos:line="11" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="67">timestamp<pos:position pos:line="11" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="78">tz<pos:position pos:line="11" pos:column="80"/></name></expr></argument>,
				   <argument><expr><name pos:line="12" pos:column="36">message<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">policy_cb<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="56"/></condition><then pos:line="12" pos:column="56"> <block pos:line="12" pos:column="57">{
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name><name pos:line="13" pos:column="22">cb<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">newlog<pos:position pos:line="13" pos:column="32"/></name></name></expr>)<pos:position pos:line="13" pos:column="33"/></condition><then pos:line="13" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="25">printf<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><literal type="string" pos:line="14" pos:column="32">"would prune %s"<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="50">message<pos:position pos:line="14" pos:column="57"/></name></expr></argument>)<pos:position pos:line="14" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="59"/></expr_stmt></block></then>
		<elseif pos:line="15" pos:column="17">else <if pos:line="15" pos:column="22">if <condition pos:line="15" pos:column="25">(<expr><name><name pos:line="15" pos:column="26">cb<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">flags<pos:position pos:line="15" pos:column="35"/></name></name> <operator pos:line="15" pos:column="36">&amp;<pos:position pos:line="15" pos:column="41"/></operator> <name pos:line="15" pos:column="38">EXPIRE_REFLOGS_VERBOSE<pos:position pos:line="15" pos:column="60"/></name></expr>)<pos:position pos:line="15" pos:column="61"/></condition><then pos:line="15" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">printf<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><literal type="string" pos:line="16" pos:column="32">"prune %s"<pos:position pos:line="16" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="44">message<pos:position pos:line="16" pos:column="51"/></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="53"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="17" pos:column="10"/></block></then> <else pos:line="17" pos:column="11">else <block pos:line="17" pos:column="16">{
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name><name pos:line="18" pos:column="21">cb<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">-&gt;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="25">newlog<pos:position pos:line="18" pos:column="31"/></name></name></expr>)<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32"> <block pos:line="18" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">fprintf<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name><name pos:line="19" pos:column="33">cb<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">-&gt;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="37">newlog<pos:position pos:line="19" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="45">"%s %s %s %lu %+05d\t%s"<pos:position pos:line="19" pos:column="69"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="20" pos:column="33">oid_to_hex<pos:position pos:line="20" pos:column="43"/></name><argument_list pos:line="20" pos:column="43">(<argument><expr><name pos:line="20" pos:column="44">ooid<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="51">oid_to_hex<pos:position pos:line="20" pos:column="61"/></name><argument_list pos:line="20" pos:column="61">(<argument><expr><name pos:line="20" pos:column="62">noid<pos:position pos:line="20" pos:column="66"/></name></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr></argument>,
				<argument><expr><name pos:line="21" pos:column="33">email<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">timestamp<pos:position pos:line="21" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="51">tz<pos:position pos:line="21" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="55">message<pos:position pos:line="21" pos:column="62"/></name></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">oidcpy<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><operator pos:line="22" pos:column="32">&amp;<pos:position pos:line="22" pos:column="37"/></operator><name><name pos:line="22" pos:column="33">cb<pos:position pos:line="22" pos:column="35"/></name><operator pos:line="22" pos:column="35">-&gt;<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="37">last_kept_oid<pos:position pos:line="22" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="52">noid<pos:position pos:line="22" pos:column="56"/></name></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name><name pos:line="24" pos:column="21">cb<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">flags<pos:position pos:line="24" pos:column="30"/></name></name> <operator pos:line="24" pos:column="31">&amp;<pos:position pos:line="24" pos:column="36"/></operator> <name pos:line="24" pos:column="33">EXPIRE_REFLOGS_VERBOSE<pos:position pos:line="24" pos:column="55"/></name></expr>)<pos:position pos:line="24" pos:column="56"/></condition><then pos:line="24" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">printf<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><literal type="string" pos:line="25" pos:column="32">"keep %s"<pos:position pos:line="25" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="43">message<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></else></if>
	<return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">0<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
