<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6691_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <specifier pos:line="1" pos:column="8">inline<pos:position pos:line="1" pos:column="14"/></specifier> <type><name pos:line="1" pos:column="15">int<pos:position pos:line="1" pos:column="18"/></name></type> <name pos:line="1" pos:column="19">needs_hiding<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">path<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">basename<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">hide_dotfiles<pos:position pos:line="5" pos:column="26"/></name> <operator pos:line="5" pos:column="27">==<pos:position pos:line="5" pos:column="29"/></operator> <name pos:line="5" pos:column="30">HIDE_DOTFILES_FALSE<pos:position pos:line="5" pos:column="49"/></name></expr>)<pos:position pos:line="5" pos:column="50"/></condition><then pos:line="5" pos:column="50">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="8" pos:column="9">/* We cannot use basename(), as it would remove trailing slashes */</comment>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">mingw_skip_dos_drive_prefix<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><operator pos:line="9" pos:column="37">(<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="38">char<pos:position pos:line="9" pos:column="42"/></name> <operator pos:line="9" pos:column="43">*<pos:position pos:line="9" pos:column="44"/></operator><operator pos:line="9" pos:column="44">*<pos:position pos:line="9" pos:column="45"/></operator><operator pos:line="9" pos:column="45">)<pos:position pos:line="9" pos:column="46"/></operator><operator pos:line="9" pos:column="46">&amp;<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="47">path<pos:position pos:line="9" pos:column="51"/></name></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="53"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><operator pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">path<pos:position pos:line="10" pos:column="19"/></name></expr>)<pos:position pos:line="10" pos:column="20"/></condition><then pos:line="10" pos:column="20">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>

	<for pos:line="13" pos:column="9">for <control pos:line="13" pos:column="13">(<init><expr><name pos:line="13" pos:column="14">basename<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">path<pos:position pos:line="13" pos:column="29"/></name></expr>;<pos:position pos:line="13" pos:column="30"/></init> <condition><expr><operator pos:line="13" pos:column="31">*<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="32">path<pos:position pos:line="13" pos:column="36"/></name></expr>;<pos:position pos:line="13" pos:column="37"/></condition> <incr><expr><name pos:line="13" pos:column="38">path<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">++<pos:position pos:line="13" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="45"/></control>
		<block type="pseudo"><if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><call><name pos:line="14" pos:column="21">is_dir_sep<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><operator pos:line="14" pos:column="32">*<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="33">path<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39"> <block pos:line="14" pos:column="40">{
			<do pos:line="15" pos:column="25">do <block pos:line="15" pos:column="28">{
				<expr_stmt><expr><name pos:line="16" pos:column="33">path<pos:position pos:line="16" pos:column="37"/></name><operator pos:line="16" pos:column="37">++<pos:position pos:line="16" pos:column="39"/></operator></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>
			}<pos:position pos:line="17" pos:column="26"/></block> while <condition pos:line="17" pos:column="33">(<expr><call><name pos:line="17" pos:column="34">is_dir_sep<pos:position pos:line="17" pos:column="44"/></name><argument_list pos:line="17" pos:column="44">(<argument><expr><operator pos:line="17" pos:column="45">*<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="46">path<pos:position pos:line="17" pos:column="50"/></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="52"/></condition>;<pos:position pos:line="17" pos:column="53"/></do>
			<comment type="block" pos:line="18" pos:column="25">/* ignore trailing slashes */</comment>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><operator pos:line="19" pos:column="29">*<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">path<pos:position pos:line="19" pos:column="34"/></name></expr>)<pos:position pos:line="19" pos:column="35"/></condition><then pos:line="19" pos:column="35">
				<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="33">basename<pos:position pos:line="20" pos:column="41"/></name> <operator pos:line="20" pos:column="42">=<pos:position pos:line="20" pos:column="43"/></operator> <name pos:line="20" pos:column="44">path<pos:position pos:line="20" pos:column="48"/></name></expr>;<pos:position pos:line="20" pos:column="49"/></expr_stmt></block></then></if>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if></block></for>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">hide_dotfiles<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">==<pos:position pos:line="23" pos:column="29"/></operator> <name pos:line="23" pos:column="30">HIDE_DOTFILES_TRUE<pos:position pos:line="23" pos:column="48"/></name></expr>)<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49">
		<block type="pseudo"><return pos:line="24" pos:column="17">return <expr><operator pos:line="24" pos:column="24">*<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">basename<pos:position pos:line="24" pos:column="33"/></name> <operator pos:line="24" pos:column="34">==<pos:position pos:line="24" pos:column="36"/></operator> <literal type="char" pos:line="24" pos:column="37">'.'<pos:position pos:line="24" pos:column="40"/></literal></expr>;<pos:position pos:line="24" pos:column="41"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="26" pos:column="9">assert<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">hide_dotfiles<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">==<pos:position pos:line="26" pos:column="32"/></operator> <name pos:line="26" pos:column="33">HIDE_DOTFILES_DOTGITONLY<pos:position pos:line="26" pos:column="57"/></name></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
	<return pos:line="27" pos:column="9">return <expr><operator pos:line="27" pos:column="16">!<pos:position pos:line="27" pos:column="17"/></operator><call><name pos:line="27" pos:column="17">strncasecmp<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><literal type="string" pos:line="27" pos:column="29">".git"<pos:position pos:line="27" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">basename<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="47">4<pos:position pos:line="27" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></call> <operator pos:line="27" pos:column="50">&amp;&amp;<pos:position pos:line="27" pos:column="60"/></operator>
		<operator pos:line="28" pos:column="17">(<pos:position pos:line="28" pos:column="18"/></operator><operator pos:line="28" pos:column="18">!<pos:position pos:line="28" pos:column="19"/></operator><name><name pos:line="28" pos:column="19">basename<pos:position pos:line="28" pos:column="27"/></name><index pos:line="28" pos:column="27">[<expr><literal type="number" pos:line="28" pos:column="28">4<pos:position pos:line="28" pos:column="29"/></literal></expr>]<pos:position pos:line="28" pos:column="30"/></index></name> <operator pos:line="28" pos:column="31">||<pos:position pos:line="28" pos:column="33"/></operator> <call><name pos:line="28" pos:column="34">is_dir_sep<pos:position pos:line="28" pos:column="44"/></name><argument_list pos:line="28" pos:column="44">(<argument><expr><name><name pos:line="28" pos:column="45">basename<pos:position pos:line="28" pos:column="53"/></name><index pos:line="28" pos:column="53">[<expr><literal type="number" pos:line="28" pos:column="54">4<pos:position pos:line="28" pos:column="55"/></literal></expr>]<pos:position pos:line="28" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call><operator pos:line="28" pos:column="57">)<pos:position pos:line="28" pos:column="58"/></operator></expr>;<pos:position pos:line="28" pos:column="59"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
