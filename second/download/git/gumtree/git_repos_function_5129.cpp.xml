<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5129.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">find_boundary<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<while pos:line="3" pos:column="9">while <condition pos:line="3" pos:column="15">(<expr><operator pos:line="3" pos:column="16">!<pos:position pos:line="3" pos:column="17"/></operator><call><name pos:line="3" pos:column="17">strbuf_getline<pos:position pos:line="3" pos:column="31"/></name><argument_list pos:line="3" pos:column="31">(<argument><expr><operator pos:line="3" pos:column="32">&amp;<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="33">line<pos:position pos:line="3" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="39">fin<pos:position pos:line="3" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="3" pos:column="44">'\n'<pos:position pos:line="3" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="50"/></condition> <block pos:line="3" pos:column="51">{
		<if pos:line="4" pos:column="17">if <condition pos:line="4" pos:column="20">(<expr><operator pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">content_top<pos:position pos:line="4" pos:column="33"/></name> <operator pos:line="4" pos:column="34">&amp;&amp;<pos:position pos:line="4" pos:column="44"/></operator> <call><name pos:line="4" pos:column="37">is_multipart_boundary<pos:position pos:line="4" pos:column="58"/></name><argument_list pos:line="4" pos:column="58">(<argument><expr><operator pos:line="4" pos:column="59">&amp;<pos:position pos:line="4" pos:column="64"/></operator><name pos:line="4" pos:column="60">line<pos:position pos:line="4" pos:column="64"/></name></expr></argument>)<pos:position pos:line="4" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="66"/></condition><then pos:line="4" pos:column="66">
			<block type="pseudo"><return pos:line="5" pos:column="25">return <expr><literal type="number" pos:line="5" pos:column="32">1<pos:position pos:line="5" pos:column="33"/></literal></expr>;<pos:position pos:line="5" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="6" pos:column="10"/></block></while>
	<return pos:line="7" pos:column="9">return <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr>;<pos:position pos:line="7" pos:column="18"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
