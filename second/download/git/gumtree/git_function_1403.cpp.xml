<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1403.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">prefix_ref_iterator_advance<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">ref_iterator<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">ref_iterator<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">prefix_ref_iterator<pos:position pos:line="3" pos:column="35"/></name></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">iter<pos:position pos:line="3" pos:column="41"/></name> <init pos:line="3" pos:column="42">=
		<expr><operator pos:line="4" pos:column="17">(<pos:position pos:line="4" pos:column="18"/></operator>struct <name pos:line="4" pos:column="25">prefix_ref_iterator<pos:position pos:line="4" pos:column="44"/></name> <operator pos:line="4" pos:column="45">*<pos:position pos:line="4" pos:column="46"/></operator><operator pos:line="4" pos:column="46">)<pos:position pos:line="4" pos:column="47"/></operator><name pos:line="4" pos:column="47">ref_iterator<pos:position pos:line="4" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">ok<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><operator pos:line="7" pos:column="16">(<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">ok<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <call><name pos:line="7" pos:column="22">ref_iterator_advance<pos:position pos:line="7" pos:column="42"/></name><argument_list pos:line="7" pos:column="42">(<argument><expr><name><name pos:line="7" pos:column="43">iter<pos:position pos:line="7" pos:column="47"/></name><operator pos:line="7" pos:column="47">-&gt;<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="49">iter0<pos:position pos:line="7" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call><operator pos:line="7" pos:column="55">)<pos:position pos:line="7" pos:column="56"/></operator> <operator pos:line="7" pos:column="57">==<pos:position pos:line="7" pos:column="59"/></operator> <name pos:line="7" pos:column="60">ITER_OK<pos:position pos:line="7" pos:column="67"/></name></expr>)<pos:position pos:line="7" pos:column="68"/></condition> <block pos:line="7" pos:column="69">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><call><name pos:line="8" pos:column="22">starts_with<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name><name pos:line="8" pos:column="34">iter<pos:position pos:line="8" pos:column="38"/></name><operator pos:line="8" pos:column="38">-&gt;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="40">iter0<pos:position pos:line="8" pos:column="45"/></name><operator pos:line="8" pos:column="45">-&gt;<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="47">refname<pos:position pos:line="8" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="56">iter<pos:position pos:line="8" pos:column="60"/></name><operator pos:line="8" pos:column="60">-&gt;<pos:position pos:line="8" pos:column="65"/></operator><name pos:line="8" pos:column="62">prefix<pos:position pos:line="8" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="70"/></condition><then pos:line="8" pos:column="70">
			<block type="pseudo"><continue pos:line="9" pos:column="25">continue;<pos:position pos:line="9" pos:column="34"/></continue></block></then></if>

		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name><name pos:line="11" pos:column="21">iter<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">-&gt;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="27">trim<pos:position pos:line="11" pos:column="31"/></name></name></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32"> <block pos:line="11" pos:column="33">{
			<comment type="block" pos:line="12" pos:column="25">/*
			 * It is nonsense to trim off characters that
			 * you haven't already checked for via a
			 * prefix check, whether via this
			 * `prefix_ref_iterator` or upstream in
			 * `iter0`). So if there wouldn't be at least
			 * one character left in the refname after
			 * trimming, report it as a bug:
			 */</comment>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><call><name pos:line="21" pos:column="29">strlen<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><name><name pos:line="21" pos:column="36">iter<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">-&gt;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="42">iter0<pos:position pos:line="21" pos:column="47"/></name><operator pos:line="21" pos:column="47">-&gt;<pos:position pos:line="21" pos:column="52"/></operator><name pos:line="21" pos:column="49">refname<pos:position pos:line="21" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call> <operator pos:line="21" pos:column="58">&lt;=<pos:position pos:line="21" pos:column="63"/></operator> <name><name pos:line="21" pos:column="61">iter<pos:position pos:line="21" pos:column="65"/></name><operator pos:line="21" pos:column="65">-&gt;<pos:position pos:line="21" pos:column="70"/></operator><name pos:line="21" pos:column="67">trim<pos:position pos:line="21" pos:column="71"/></name></name></expr>)<pos:position pos:line="21" pos:column="72"/></condition><then pos:line="21" pos:column="72">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="33">die<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><literal type="string" pos:line="22" pos:column="37">"BUG: attempt to trim too many characters"<pos:position pos:line="22" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="81"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="23" pos:column="25">iter<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">-&gt;<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="31">base<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">.<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="36">refname<pos:position pos:line="23" pos:column="43"/></name></name> <operator pos:line="23" pos:column="44">=<pos:position pos:line="23" pos:column="45"/></operator> <name><name pos:line="23" pos:column="46">iter<pos:position pos:line="23" pos:column="50"/></name><operator pos:line="23" pos:column="50">-&gt;<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="52">iter0<pos:position pos:line="23" pos:column="57"/></name><operator pos:line="23" pos:column="57">-&gt;<pos:position pos:line="23" pos:column="62"/></operator><name pos:line="23" pos:column="59">refname<pos:position pos:line="23" pos:column="66"/></name></name> <operator pos:line="23" pos:column="67">+<pos:position pos:line="23" pos:column="68"/></operator> <name><name pos:line="23" pos:column="69">iter<pos:position pos:line="23" pos:column="73"/></name><operator pos:line="23" pos:column="73">-&gt;<pos:position pos:line="23" pos:column="78"/></operator><name pos:line="23" pos:column="75">trim<pos:position pos:line="23" pos:column="79"/></name></name></expr>;<pos:position pos:line="23" pos:column="80"/></expr_stmt>
		}<pos:position pos:line="24" pos:column="18"/></block></then> <else pos:line="24" pos:column="19">else <block pos:line="24" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="25" pos:column="25">iter<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">-&gt;<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="31">base<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">.<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="36">refname<pos:position pos:line="25" pos:column="43"/></name></name> <operator pos:line="25" pos:column="44">=<pos:position pos:line="25" pos:column="45"/></operator> <name><name pos:line="25" pos:column="46">iter<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">-&gt;<pos:position pos:line="25" pos:column="55"/></operator><name pos:line="25" pos:column="52">iter0<pos:position pos:line="25" pos:column="57"/></name><operator pos:line="25" pos:column="57">-&gt;<pos:position pos:line="25" pos:column="62"/></operator><name pos:line="25" pos:column="59">refname<pos:position pos:line="25" pos:column="66"/></name></name></expr>;<pos:position pos:line="25" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="26" pos:column="18"/></block></else></if>

		<expr_stmt><expr><name><name pos:line="28" pos:column="17">iter<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">-&gt;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="23">base<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">.<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="28">oid<pos:position pos:line="28" pos:column="31"/></name></name> <operator pos:line="28" pos:column="32">=<pos:position pos:line="28" pos:column="33"/></operator> <name><name pos:line="28" pos:column="34">iter<pos:position pos:line="28" pos:column="38"/></name><operator pos:line="28" pos:column="38">-&gt;<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="40">iter0<pos:position pos:line="28" pos:column="45"/></name><operator pos:line="28" pos:column="45">-&gt;<pos:position pos:line="28" pos:column="50"/></operator><name pos:line="28" pos:column="47">oid<pos:position pos:line="28" pos:column="50"/></name></name></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="29" pos:column="17">iter<pos:position pos:line="29" pos:column="21"/></name><operator pos:line="29" pos:column="21">-&gt;<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="23">base<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">.<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="28">flags<pos:position pos:line="29" pos:column="33"/></name></name> <operator pos:line="29" pos:column="34">=<pos:position pos:line="29" pos:column="35"/></operator> <name><name pos:line="29" pos:column="36">iter<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">-&gt;<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="42">iter0<pos:position pos:line="29" pos:column="47"/></name><operator pos:line="29" pos:column="47">-&gt;<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="49">flags<pos:position pos:line="29" pos:column="54"/></name></name></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt>
		<return pos:line="30" pos:column="17">return <expr><name pos:line="30" pos:column="24">ITER_OK<pos:position pos:line="30" pos:column="31"/></name></expr>;<pos:position pos:line="30" pos:column="32"/></return>
	}<pos:position pos:line="31" pos:column="10"/></block></while>

	<expr_stmt><expr><name><name pos:line="33" pos:column="9">iter<pos:position pos:line="33" pos:column="13"/></name><operator pos:line="33" pos:column="13">-&gt;<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="15">iter0<pos:position pos:line="33" pos:column="20"/></name></name> <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <name pos:line="33" pos:column="23">NULL<pos:position pos:line="33" pos:column="27"/></name></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name pos:line="34" pos:column="13">ref_iterator_abort<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name pos:line="34" pos:column="32">ref_iterator<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call> <operator pos:line="34" pos:column="46">!=<pos:position pos:line="34" pos:column="48"/></operator> <name pos:line="34" pos:column="49">ITER_DONE<pos:position pos:line="34" pos:column="58"/></name></expr>)<pos:position pos:line="34" pos:column="59"/></condition><then pos:line="34" pos:column="59">
		<block type="pseudo"><return pos:line="35" pos:column="17">return <expr><name pos:line="35" pos:column="24">ITER_ERROR<pos:position pos:line="35" pos:column="34"/></name></expr>;<pos:position pos:line="35" pos:column="35"/></return></block></then></if>
	<return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">ok<pos:position pos:line="36" pos:column="18"/></name></expr>;<pos:position pos:line="36" pos:column="19"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
