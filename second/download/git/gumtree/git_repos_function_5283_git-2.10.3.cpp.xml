<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5283_git-2.10.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_fetch<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">int<pos:position pos:line="1" pos:column="18"/></name></type> <name pos:line="1" pos:column="19">argc<pos:position pos:line="1" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">argv<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">prefix<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">string_list<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">list<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><name pos:line="4" pos:column="35">STRING_LIST_INIT_DUP<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">remote<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">remote<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">result<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">argv_array<pos:position pos:line="7" pos:column="26"/></name></name></type> <name pos:line="7" pos:column="27">argv_gc_auto<pos:position pos:line="7" pos:column="39"/></name> <init pos:line="7" pos:column="40">= <expr><name pos:line="7" pos:column="42">ARGV_ARRAY_INIT<pos:position pos:line="7" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="58"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">packet_trace_identity<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><literal type="string" pos:line="9" pos:column="31">"fetch"<pos:position pos:line="9" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>

	<comment type="block" pos:line="11" pos:column="9">/* Record the command line for the reflog */</comment>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">strbuf_addstr<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><operator pos:line="12" pos:column="23">&amp;<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="24">default_rla<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="37">"fetch"<pos:position pos:line="12" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
	<for pos:line="13" pos:column="9">for <control pos:line="13" pos:column="13">(<init><expr><name pos:line="13" pos:column="14">i<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="18">1<pos:position pos:line="13" pos:column="19"/></literal></expr>;<pos:position pos:line="13" pos:column="20"/></init> <condition><expr><name pos:line="13" pos:column="21">i<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">&lt;<pos:position pos:line="13" pos:column="27"/></operator> <name pos:line="13" pos:column="25">argc<pos:position pos:line="13" pos:column="29"/></name></expr>;<pos:position pos:line="13" pos:column="30"/></condition> <incr><expr><name pos:line="13" pos:column="31">i<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">++<pos:position pos:line="13" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="35"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_addf<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><operator pos:line="14" pos:column="29">&amp;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="30">default_rla<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="43">" %s"<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="50">argv<pos:position pos:line="14" pos:column="54"/></name><index pos:line="14" pos:column="54">[<expr><name pos:line="14" pos:column="55">i<pos:position pos:line="14" pos:column="56"/></name></expr>]<pos:position pos:line="14" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="14" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="59"/></expr_stmt></block></for>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">git_config<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">git_fetch_config<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">NULL<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><name pos:line="18" pos:column="9">argc<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <call><name pos:line="18" pos:column="16">parse_options<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">argc<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="36">argv<pos:position pos:line="18" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="42">prefix<pos:position pos:line="18" pos:column="48"/></name></expr></argument>,
			     <argument><expr><name pos:line="19" pos:column="30">builtin_fetch_options<pos:position pos:line="19" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="53">builtin_fetch_usage<pos:position pos:line="19" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="74">0<pos:position pos:line="19" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="77"/></expr_stmt>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">unshallow<pos:position pos:line="21" pos:column="22"/></name></expr>)<pos:position pos:line="21" pos:column="23"/></condition><then pos:line="21" pos:column="23"> <block pos:line="21" pos:column="24">{
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">depth<pos:position pos:line="22" pos:column="26"/></name></expr>)<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">die<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><call><name pos:line="23" pos:column="29">_<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><literal type="string" pos:line="23" pos:column="31">"--depth and --unshallow cannot be used together"<pos:position pos:line="23" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="83"/></expr_stmt></block></then>
		<elseif pos:line="24" pos:column="17">else <if pos:line="24" pos:column="22">if <condition pos:line="24" pos:column="25">(<expr><operator pos:line="24" pos:column="26">!<pos:position pos:line="24" pos:column="27"/></operator><call><name pos:line="24" pos:column="27">is_repository_shallow<pos:position pos:line="24" pos:column="48"/></name><argument_list pos:line="24" pos:column="48">()<pos:position pos:line="24" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="51"/></condition><then pos:line="24" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">die<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><call><name pos:line="25" pos:column="29">_<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><literal type="string" pos:line="25" pos:column="31">"--unshallow on a complete repository does not make sense"<pos:position pos:line="25" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="92"/></expr_stmt></block></then></if></elseif>
		<else pos:line="26" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="25">depth<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">=<pos:position pos:line="27" pos:column="32"/></operator> <call><name pos:line="27" pos:column="33">xstrfmt<pos:position pos:line="27" pos:column="40"/></name><argument_list pos:line="27" pos:column="40">(<argument><expr><literal type="string" pos:line="27" pos:column="41">"%d"<pos:position pos:line="27" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">INFINITE_DEPTH<pos:position pos:line="27" pos:column="61"/></name></expr></argument>)<pos:position pos:line="27" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="63"/></expr_stmt></block></else></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="30" pos:column="9">/* no need to be strict, transport_set_option() will validate it again */</comment>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">depth<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">&amp;&amp;<pos:position pos:line="31" pos:column="29"/></operator> <call><name pos:line="31" pos:column="22">atoi<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">depth<pos:position pos:line="31" pos:column="32"/></name></expr></argument>)<pos:position pos:line="31" pos:column="33"/></argument_list></call> <operator pos:line="31" pos:column="34">&lt;<pos:position pos:line="31" pos:column="38"/></operator> <literal type="number" pos:line="31" pos:column="36">1<pos:position pos:line="31" pos:column="37"/></literal></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="17">die<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><call><name pos:line="32" pos:column="21">_<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><literal type="string" pos:line="32" pos:column="23">"depth %s is not a positive number"<pos:position pos:line="32" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="32" pos:column="61">depth<pos:position pos:line="32" pos:column="66"/></name></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="68"/></expr_stmt></block></then></if>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">recurse_submodules<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">!=<pos:position pos:line="34" pos:column="34"/></operator> <name pos:line="34" pos:column="35">RECURSE_SUBMODULES_OFF<pos:position pos:line="34" pos:column="57"/></name></expr>)<pos:position pos:line="34" pos:column="58"/></condition><then pos:line="34" pos:column="58"> <block pos:line="34" pos:column="59">{
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">recurse_submodules_default<pos:position pos:line="35" pos:column="47"/></name></expr>)<pos:position pos:line="35" pos:column="48"/></condition><then pos:line="35" pos:column="48"> <block pos:line="35" pos:column="49">{
			<decl_stmt><decl><type><name pos:line="36" pos:column="25">int<pos:position pos:line="36" pos:column="28"/></name></type> <name pos:line="36" pos:column="29">arg<pos:position pos:line="36" pos:column="32"/></name> <init pos:line="36" pos:column="33">= <expr><call><name pos:line="36" pos:column="35">parse_fetch_recurse_submodules_arg<pos:position pos:line="36" pos:column="69"/></name><argument_list pos:line="36" pos:column="69">(<argument><expr><literal type="string" pos:line="36" pos:column="70">"--recurse-submodules-default"<pos:position pos:line="36" pos:column="100"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="102">recurse_submodules_default<pos:position pos:line="36" pos:column="128"/></name></expr></argument>)<pos:position pos:line="36" pos:column="129"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="130"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">set_config_fetch_recurse_submodules<pos:position pos:line="37" pos:column="60"/></name><argument_list pos:line="37" pos:column="60">(<argument><expr><name pos:line="37" pos:column="61">arg<pos:position pos:line="37" pos:column="64"/></name></expr></argument>)<pos:position pos:line="37" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="66"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">gitmodules_config<pos:position pos:line="39" pos:column="34"/></name><argument_list pos:line="39" pos:column="34">()<pos:position pos:line="39" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">git_config<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">submodule_config<pos:position pos:line="40" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="46">NULL<pos:position pos:line="40" pos:column="50"/></name></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">all<pos:position pos:line="43" pos:column="16"/></name></expr>)<pos:position pos:line="43" pos:column="17"/></condition><then pos:line="43" pos:column="17"> <block pos:line="43" pos:column="18">{
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">argc<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">==<pos:position pos:line="44" pos:column="28"/></operator> <literal type="number" pos:line="44" pos:column="29">1<pos:position pos:line="44" pos:column="30"/></literal></expr>)<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">die<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><call><name pos:line="45" pos:column="29">_<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><literal type="string" pos:line="45" pos:column="31">"fetch --all does not take a repository argument"<pos:position pos:line="45" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="83"/></expr_stmt></block></then>
		<elseif pos:line="46" pos:column="17">else <if pos:line="46" pos:column="22">if <condition pos:line="46" pos:column="25">(<expr><name pos:line="46" pos:column="26">argc<pos:position pos:line="46" pos:column="30"/></name> <operator pos:line="46" pos:column="31">&gt;<pos:position pos:line="46" pos:column="35"/></operator> <literal type="number" pos:line="46" pos:column="33">1<pos:position pos:line="46" pos:column="34"/></literal></expr>)<pos:position pos:line="46" pos:column="35"/></condition><then pos:line="46" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="25">die<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><call><name pos:line="47" pos:column="29">_<pos:position pos:line="47" pos:column="30"/></name><argument_list pos:line="47" pos:column="30">(<argument><expr><literal type="string" pos:line="47" pos:column="31">"fetch --all does not make sense with refspecs"<pos:position pos:line="47" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="81"/></expr_stmt></block></then></if></elseif></if>
		<expr_stmt><expr><operator pos:line="48" pos:column="17">(<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="18">void<pos:position pos:line="48" pos:column="22"/></name><operator pos:line="48" pos:column="22">)<pos:position pos:line="48" pos:column="23"/></operator> <call><name pos:line="48" pos:column="24">for_each_remote<pos:position pos:line="48" pos:column="39"/></name><argument_list pos:line="48" pos:column="39">(<argument><expr><name pos:line="48" pos:column="40">get_one_remote_for_fetch<pos:position pos:line="48" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="66">&amp;<pos:position pos:line="48" pos:column="71"/></operator><name pos:line="48" pos:column="67">list<pos:position pos:line="48" pos:column="71"/></name></expr></argument>)<pos:position pos:line="48" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="73"/></expr_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">result<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">=<pos:position pos:line="49" pos:column="25"/></operator> <call><name pos:line="49" pos:column="26">fetch_multiple<pos:position pos:line="49" pos:column="40"/></name><argument_list pos:line="49" pos:column="40">(<argument><expr><operator pos:line="49" pos:column="41">&amp;<pos:position pos:line="49" pos:column="46"/></operator><name pos:line="49" pos:column="42">list<pos:position pos:line="49" pos:column="46"/></name></expr></argument>)<pos:position pos:line="49" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="50" pos:column="10"/></block></then> <elseif pos:line="50" pos:column="11">else <if pos:line="50" pos:column="16">if <condition pos:line="50" pos:column="19">(<expr><name pos:line="50" pos:column="20">argc<pos:position pos:line="50" pos:column="24"/></name> <operator pos:line="50" pos:column="25">==<pos:position pos:line="50" pos:column="27"/></operator> <literal type="number" pos:line="50" pos:column="28">0<pos:position pos:line="50" pos:column="29"/></literal></expr>)<pos:position pos:line="50" pos:column="30"/></condition><then pos:line="50" pos:column="30"> <block pos:line="50" pos:column="31">{
		<comment type="block" pos:line="51" pos:column="17">/* No arguments -- use default remote */</comment>
		<expr_stmt><expr><name pos:line="52" pos:column="17">remote<pos:position pos:line="52" pos:column="23"/></name> <operator pos:line="52" pos:column="24">=<pos:position pos:line="52" pos:column="25"/></operator> <call><name pos:line="52" pos:column="26">remote_get<pos:position pos:line="52" pos:column="36"/></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name pos:line="52" pos:column="37">NULL<pos:position pos:line="52" pos:column="41"/></name></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="53" pos:column="17">result<pos:position pos:line="53" pos:column="23"/></name> <operator pos:line="53" pos:column="24">=<pos:position pos:line="53" pos:column="25"/></operator> <call><name pos:line="53" pos:column="26">fetch_one<pos:position pos:line="53" pos:column="35"/></name><argument_list pos:line="53" pos:column="35">(<argument><expr><name pos:line="53" pos:column="36">remote<pos:position pos:line="53" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="44">argc<pos:position pos:line="53" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="50">argv<pos:position pos:line="53" pos:column="54"/></name></expr></argument>)<pos:position pos:line="53" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="56"/></expr_stmt>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if></elseif> <elseif pos:line="54" pos:column="11">else <if pos:line="54" pos:column="16">if <condition pos:line="54" pos:column="19">(<expr><name pos:line="54" pos:column="20">multiple<pos:position pos:line="54" pos:column="28"/></name></expr>)<pos:position pos:line="54" pos:column="29"/></condition><then pos:line="54" pos:column="29"> <block pos:line="54" pos:column="30">{
		<comment type="block" pos:line="55" pos:column="17">/* All arguments are assumed to be remotes or groups */</comment>
		<for pos:line="56" pos:column="17">for <control pos:line="56" pos:column="21">(<init><expr><name pos:line="56" pos:column="22">i<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">=<pos:position pos:line="56" pos:column="25"/></operator> <literal type="number" pos:line="56" pos:column="26">0<pos:position pos:line="56" pos:column="27"/></literal></expr>;<pos:position pos:line="56" pos:column="28"/></init> <condition><expr><name pos:line="56" pos:column="29">i<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">&lt;<pos:position pos:line="56" pos:column="35"/></operator> <name pos:line="56" pos:column="33">argc<pos:position pos:line="56" pos:column="37"/></name></expr>;<pos:position pos:line="56" pos:column="38"/></condition> <incr><expr><name pos:line="56" pos:column="39">i<pos:position pos:line="56" pos:column="40"/></name><operator pos:line="56" pos:column="40">++<pos:position pos:line="56" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="56" pos:column="43"/></control>
			<block type="pseudo"><if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><operator pos:line="57" pos:column="29">!<pos:position pos:line="57" pos:column="30"/></operator><call><name pos:line="57" pos:column="30">add_remote_or_group<pos:position pos:line="57" pos:column="49"/></name><argument_list pos:line="57" pos:column="49">(<argument><expr><name><name pos:line="57" pos:column="50">argv<pos:position pos:line="57" pos:column="54"/></name><index pos:line="57" pos:column="54">[<expr><name pos:line="57" pos:column="55">i<pos:position pos:line="57" pos:column="56"/></name></expr>]<pos:position pos:line="57" pos:column="57"/></index></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="59">&amp;<pos:position pos:line="57" pos:column="64"/></operator><name pos:line="57" pos:column="60">list<pos:position pos:line="57" pos:column="64"/></name></expr></argument>)<pos:position pos:line="57" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="66"/></condition><then pos:line="57" pos:column="66">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="33">die<pos:position pos:line="58" pos:column="36"/></name><argument_list pos:line="58" pos:column="36">(<argument><expr><call><name pos:line="58" pos:column="37">_<pos:position pos:line="58" pos:column="38"/></name><argument_list pos:line="58" pos:column="38">(<argument><expr><literal type="string" pos:line="58" pos:column="39">"No such remote or remote group: %s"<pos:position pos:line="58" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="76"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="78">argv<pos:position pos:line="58" pos:column="82"/></name><index pos:line="58" pos:column="82">[<expr><name pos:line="58" pos:column="83">i<pos:position pos:line="58" pos:column="84"/></name></expr>]<pos:position pos:line="58" pos:column="85"/></index></name></expr></argument>)<pos:position pos:line="58" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="87"/></expr_stmt></block></then></if></block></for>
		<expr_stmt><expr><name pos:line="59" pos:column="17">result<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <call><name pos:line="59" pos:column="26">fetch_multiple<pos:position pos:line="59" pos:column="40"/></name><argument_list pos:line="59" pos:column="40">(<argument><expr><operator pos:line="59" pos:column="41">&amp;<pos:position pos:line="59" pos:column="46"/></operator><name pos:line="59" pos:column="42">list<pos:position pos:line="59" pos:column="46"/></name></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if></elseif> <else pos:line="60" pos:column="11">else <block pos:line="60" pos:column="16">{
		<comment type="block" pos:line="61" pos:column="17">/* Single remote or group */</comment>
		<expr_stmt><expr><operator pos:line="62" pos:column="17">(<pos:position pos:line="62" pos:column="18"/></operator><name pos:line="62" pos:column="18">void<pos:position pos:line="62" pos:column="22"/></name><operator pos:line="62" pos:column="22">)<pos:position pos:line="62" pos:column="23"/></operator> <call><name pos:line="62" pos:column="24">add_remote_or_group<pos:position pos:line="62" pos:column="43"/></name><argument_list pos:line="62" pos:column="43">(<argument><expr><name><name pos:line="62" pos:column="44">argv<pos:position pos:line="62" pos:column="48"/></name><index pos:line="62" pos:column="48">[<expr><literal type="number" pos:line="62" pos:column="49">0<pos:position pos:line="62" pos:column="50"/></literal></expr>]<pos:position pos:line="62" pos:column="51"/></index></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="53">&amp;<pos:position pos:line="62" pos:column="58"/></operator><name pos:line="62" pos:column="54">list<pos:position pos:line="62" pos:column="58"/></name></expr></argument>)<pos:position pos:line="62" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="60"/></expr_stmt>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name><name pos:line="63" pos:column="21">list<pos:position pos:line="63" pos:column="25"/></name><operator pos:line="63" pos:column="25">.<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="26">nr<pos:position pos:line="63" pos:column="28"/></name></name> <operator pos:line="63" pos:column="29">&gt;<pos:position pos:line="63" pos:column="33"/></operator> <literal type="number" pos:line="63" pos:column="31">1<pos:position pos:line="63" pos:column="32"/></literal></expr>)<pos:position pos:line="63" pos:column="33"/></condition><then pos:line="63" pos:column="33"> <block pos:line="63" pos:column="34">{
			<comment type="block" pos:line="64" pos:column="25">/* More than one remote */</comment>
			<if pos:line="65" pos:column="25">if <condition pos:line="65" pos:column="28">(<expr><name pos:line="65" pos:column="29">argc<pos:position pos:line="65" pos:column="33"/></name> <operator pos:line="65" pos:column="34">&gt;<pos:position pos:line="65" pos:column="38"/></operator> <literal type="number" pos:line="65" pos:column="36">1<pos:position pos:line="65" pos:column="37"/></literal></expr>)<pos:position pos:line="65" pos:column="38"/></condition><then pos:line="65" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="33">die<pos:position pos:line="66" pos:column="36"/></name><argument_list pos:line="66" pos:column="36">(<argument><expr><call><name pos:line="66" pos:column="37">_<pos:position pos:line="66" pos:column="38"/></name><argument_list pos:line="66" pos:column="38">(<argument><expr><literal type="string" pos:line="66" pos:column="39">"Fetching a group and specifying refspecs does not make sense"<pos:position pos:line="66" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="102"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="104"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="67" pos:column="25">result<pos:position pos:line="67" pos:column="31"/></name> <operator pos:line="67" pos:column="32">=<pos:position pos:line="67" pos:column="33"/></operator> <call><name pos:line="67" pos:column="34">fetch_multiple<pos:position pos:line="67" pos:column="48"/></name><argument_list pos:line="67" pos:column="48">(<argument><expr><operator pos:line="67" pos:column="49">&amp;<pos:position pos:line="67" pos:column="54"/></operator><name pos:line="67" pos:column="50">list<pos:position pos:line="67" pos:column="54"/></name></expr></argument>)<pos:position pos:line="67" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="68" pos:column="18"/></block></then> <else pos:line="68" pos:column="19">else <block pos:line="68" pos:column="24">{
			<comment type="block" pos:line="69" pos:column="25">/* Zero or one remotes */</comment>
			<expr_stmt><expr><name pos:line="70" pos:column="25">remote<pos:position pos:line="70" pos:column="31"/></name> <operator pos:line="70" pos:column="32">=<pos:position pos:line="70" pos:column="33"/></operator> <call><name pos:line="70" pos:column="34">remote_get<pos:position pos:line="70" pos:column="44"/></name><argument_list pos:line="70" pos:column="44">(<argument><expr><name><name pos:line="70" pos:column="45">argv<pos:position pos:line="70" pos:column="49"/></name><index pos:line="70" pos:column="49">[<expr><literal type="number" pos:line="70" pos:column="50">0<pos:position pos:line="70" pos:column="51"/></literal></expr>]<pos:position pos:line="70" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="70" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><name pos:line="71" pos:column="25">result<pos:position pos:line="71" pos:column="31"/></name> <operator pos:line="71" pos:column="32">=<pos:position pos:line="71" pos:column="33"/></operator> <call><name pos:line="71" pos:column="34">fetch_one<pos:position pos:line="71" pos:column="43"/></name><argument_list pos:line="71" pos:column="43">(<argument><expr><name pos:line="71" pos:column="44">remote<pos:position pos:line="71" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="52">argc<pos:position pos:line="71" pos:column="56"/></name><operator pos:line="71" pos:column="56">-<pos:position pos:line="71" pos:column="57"/></operator><literal type="number" pos:line="71" pos:column="57">1<pos:position pos:line="71" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="60">argv<pos:position pos:line="71" pos:column="64"/></name><operator pos:line="71" pos:column="64">+<pos:position pos:line="71" pos:column="65"/></operator><literal type="number" pos:line="71" pos:column="65">1<pos:position pos:line="71" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="72" pos:column="18"/></block></else></if>
	}<pos:position pos:line="73" pos:column="10"/></block></else></if>

	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><operator pos:line="75" pos:column="13">!<pos:position pos:line="75" pos:column="14"/></operator><name pos:line="75" pos:column="14">result<pos:position pos:line="75" pos:column="20"/></name> <operator pos:line="75" pos:column="21">&amp;&amp;<pos:position pos:line="75" pos:column="31"/></operator> <operator pos:line="75" pos:column="24">(<pos:position pos:line="75" pos:column="25"/></operator><name pos:line="75" pos:column="25">recurse_submodules<pos:position pos:line="75" pos:column="43"/></name> <operator pos:line="75" pos:column="44">!=<pos:position pos:line="75" pos:column="46"/></operator> <name pos:line="75" pos:column="47">RECURSE_SUBMODULES_OFF<pos:position pos:line="75" pos:column="69"/></name><operator pos:line="75" pos:column="69">)<pos:position pos:line="75" pos:column="70"/></operator></expr>)<pos:position pos:line="75" pos:column="71"/></condition><then pos:line="75" pos:column="71"> <block pos:line="75" pos:column="72">{
		<decl_stmt><decl><type><name><name pos:line="76" pos:column="17">struct<pos:position pos:line="76" pos:column="23"/></name> <name pos:line="76" pos:column="24">argv_array<pos:position pos:line="76" pos:column="34"/></name></name></type> <name pos:line="76" pos:column="35">options<pos:position pos:line="76" pos:column="42"/></name> <init pos:line="76" pos:column="43">= <expr><name pos:line="76" pos:column="45">ARGV_ARRAY_INIT<pos:position pos:line="76" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="76" pos:column="61"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="78" pos:column="17">add_options_to_argv<pos:position pos:line="78" pos:column="36"/></name><argument_list pos:line="78" pos:column="36">(<argument><expr><operator pos:line="78" pos:column="37">&amp;<pos:position pos:line="78" pos:column="42"/></operator><name pos:line="78" pos:column="38">options<pos:position pos:line="78" pos:column="45"/></name></expr></argument>)<pos:position pos:line="78" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name pos:line="79" pos:column="17">result<pos:position pos:line="79" pos:column="23"/></name> <operator pos:line="79" pos:column="24">=<pos:position pos:line="79" pos:column="25"/></operator> <call><name pos:line="79" pos:column="26">fetch_populated_submodules<pos:position pos:line="79" pos:column="52"/></name><argument_list pos:line="79" pos:column="52">(<argument><expr><operator pos:line="79" pos:column="53">&amp;<pos:position pos:line="79" pos:column="58"/></operator><name pos:line="79" pos:column="54">options<pos:position pos:line="79" pos:column="61"/></name></expr></argument>,
						    <argument><expr><name pos:line="80" pos:column="53">submodule_prefix<pos:position pos:line="80" pos:column="69"/></name></expr></argument>,
						    <argument><expr><name pos:line="81" pos:column="53">recurse_submodules<pos:position pos:line="81" pos:column="71"/></name></expr></argument>,
						    <argument><expr><name pos:line="82" pos:column="53">verbosity<pos:position pos:line="82" pos:column="62"/></name> <operator pos:line="82" pos:column="63">&lt;<pos:position pos:line="82" pos:column="67"/></operator> <literal type="number" pos:line="82" pos:column="65">0<pos:position pos:line="82" pos:column="66"/></literal></expr></argument>,
						    <argument><expr><name pos:line="83" pos:column="53">max_children<pos:position pos:line="83" pos:column="65"/></name></expr></argument>)<pos:position pos:line="83" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">argv_array_clear<pos:position pos:line="84" pos:column="33"/></name><argument_list pos:line="84" pos:column="33">(<argument><expr><operator pos:line="84" pos:column="34">&amp;<pos:position pos:line="84" pos:column="39"/></operator><name pos:line="84" pos:column="35">options<pos:position pos:line="84" pos:column="42"/></name></expr></argument>)<pos:position pos:line="84" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="85" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="87" pos:column="9">string_list_clear<pos:position pos:line="87" pos:column="26"/></name><argument_list pos:line="87" pos:column="26">(<argument><expr><operator pos:line="87" pos:column="27">&amp;<pos:position pos:line="87" pos:column="32"/></operator><name pos:line="87" pos:column="28">list<pos:position pos:line="87" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="34">0<pos:position pos:line="87" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="89" pos:column="9">close_all_packs<pos:position pos:line="89" pos:column="24"/></name><argument_list pos:line="89" pos:column="24">()<pos:position pos:line="89" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="27"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="91" pos:column="9">argv_array_pushl<pos:position pos:line="91" pos:column="25"/></name><argument_list pos:line="91" pos:column="25">(<argument><expr><operator pos:line="91" pos:column="26">&amp;<pos:position pos:line="91" pos:column="31"/></operator><name pos:line="91" pos:column="27">argv_gc_auto<pos:position pos:line="91" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="41">"gc"<pos:position pos:line="91" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="47">"--auto"<pos:position pos:line="91" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="57">NULL<pos:position pos:line="91" pos:column="61"/></name></expr></argument>)<pos:position pos:line="91" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="63"/></expr_stmt>
	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">verbosity<pos:position pos:line="92" pos:column="22"/></name> <operator pos:line="92" pos:column="23">&lt;<pos:position pos:line="92" pos:column="27"/></operator> <literal type="number" pos:line="92" pos:column="25">0<pos:position pos:line="92" pos:column="26"/></literal></expr>)<pos:position pos:line="92" pos:column="27"/></condition><then pos:line="92" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="17">argv_array_push<pos:position pos:line="93" pos:column="32"/></name><argument_list pos:line="93" pos:column="32">(<argument><expr><operator pos:line="93" pos:column="33">&amp;<pos:position pos:line="93" pos:column="38"/></operator><name pos:line="93" pos:column="34">argv_gc_auto<pos:position pos:line="93" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="48">"--quiet"<pos:position pos:line="93" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="59"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="94" pos:column="9">run_command_v_opt<pos:position pos:line="94" pos:column="26"/></name><argument_list pos:line="94" pos:column="26">(<argument><expr><name><name pos:line="94" pos:column="27">argv_gc_auto<pos:position pos:line="94" pos:column="39"/></name><operator pos:line="94" pos:column="39">.<pos:position pos:line="94" pos:column="40"/></operator><name pos:line="94" pos:column="40">argv<pos:position pos:line="94" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="46">RUN_GIT_CMD<pos:position pos:line="94" pos:column="57"/></name></expr></argument>)<pos:position pos:line="94" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="95" pos:column="9">argv_array_clear<pos:position pos:line="95" pos:column="25"/></name><argument_list pos:line="95" pos:column="25">(<argument><expr><operator pos:line="95" pos:column="26">&amp;<pos:position pos:line="95" pos:column="31"/></operator><name pos:line="95" pos:column="27">argv_gc_auto<pos:position pos:line="95" pos:column="39"/></name></expr></argument>)<pos:position pos:line="95" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="41"/></expr_stmt>

	<return pos:line="97" pos:column="9">return <expr><name pos:line="97" pos:column="16">result<pos:position pos:line="97" pos:column="22"/></name></expr>;<pos:position pos:line="97" pos:column="23"/></return>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
