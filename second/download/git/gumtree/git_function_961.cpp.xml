<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_961.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">match_attr<pos:position pos:line="1" pos:column="25"/></name></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">parse_attr_line<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">line<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="61">const<pos:position pos:line="1" pos:column="66"/></specifier> <name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">src<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
					  <parameter><decl><type><name pos:line="2" pos:column="43">int<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">lineno<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">int<pos:position pos:line="2" pos:column="58"/></name></type> <name pos:line="2" pos:column="59">macro_ok<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">namelen<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">num_attr<pos:position pos:line="5" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="23">i<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">cp<pos:position pos:line="6" pos:column="23"/></name></decl>, <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="26">name<pos:position pos:line="6" pos:column="30"/></name></decl>, <modifier pos:line="6" pos:column="32">*<pos:position pos:line="6" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="33">states<pos:position pos:line="6" pos:column="39"/></name></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">match_attr<pos:position pos:line="7" pos:column="26"/></name></name> <modifier pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></modifier></type><name pos:line="7" pos:column="28">res<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><name pos:line="7" pos:column="34">NULL<pos:position pos:line="7" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">is_macro<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">cp<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <name pos:line="10" pos:column="14">line<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">+<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">strspn<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">line<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">blank<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><operator pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">cp<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">||<pos:position pos:line="11" pos:column="20"/></operator> <operator pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">cp<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">==<pos:position pos:line="11" pos:column="27"/></operator> <literal type="char" pos:line="11" pos:column="28">'#'<pos:position pos:line="11" pos:column="31"/></literal></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><name pos:line="12" pos:column="24">NULL<pos:position pos:line="12" pos:column="28"/></name></expr>;<pos:position pos:line="12" pos:column="29"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="13" pos:column="9">name<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">cp<pos:position pos:line="13" pos:column="18"/></name></expr>;<pos:position pos:line="13" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="14" pos:column="9">namelen<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <call><name pos:line="14" pos:column="19">strcspn<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><name pos:line="14" pos:column="27">name<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="33">blank<pos:position pos:line="14" pos:column="38"/></name></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">strlen<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">ATTRIBUTE_MACRO_PREFIX<pos:position pos:line="15" pos:column="42"/></name></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call> <operator pos:line="15" pos:column="44">&lt;<pos:position pos:line="15" pos:column="48"/></operator> <name pos:line="15" pos:column="46">namelen<pos:position pos:line="15" pos:column="53"/></name> <operator pos:line="15" pos:column="54">&amp;&amp;<pos:position pos:line="15" pos:column="64"/></operator>
	    <call><name pos:line="16" pos:column="13">starts_with<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">name<pos:position pos:line="16" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="31">ATTRIBUTE_MACRO_PREFIX<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="55"/></condition><then pos:line="16" pos:column="55"> <block pos:line="16" pos:column="56">{
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">macro_ok<pos:position pos:line="17" pos:column="30"/></name></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31"> <block pos:line="17" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">fprintf<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">stderr<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="41">"%s not allowed: %s:%d\n"<pos:position pos:line="18" pos:column="66"/></literal></expr></argument>,
				<argument><expr><name pos:line="19" pos:column="33">name<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="39">src<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="44">lineno<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>
			<return pos:line="20" pos:column="25">return <expr><name pos:line="20" pos:column="32">NULL<pos:position pos:line="20" pos:column="36"/></name></expr>;<pos:position pos:line="20" pos:column="37"/></return>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="22" pos:column="17">is_macro<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">=<pos:position pos:line="22" pos:column="27"/></operator> <literal type="number" pos:line="22" pos:column="28">1<pos:position pos:line="22" pos:column="29"/></literal></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">name<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">+=<pos:position pos:line="23" pos:column="24"/></operator> <call><name pos:line="23" pos:column="25">strlen<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">ATTRIBUTE_MACRO_PREFIX<pos:position pos:line="23" pos:column="54"/></name></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="24" pos:column="17">name<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">+=<pos:position pos:line="24" pos:column="24"/></operator> <call><name pos:line="24" pos:column="25">strspn<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">name<pos:position pos:line="24" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="38">blank<pos:position pos:line="24" pos:column="43"/></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="25" pos:column="17">namelen<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <call><name pos:line="25" pos:column="27">strcspn<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">name<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="41">blank<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><call><name pos:line="26" pos:column="21">invalid_attr_name<pos:position pos:line="26" pos:column="38"/></name><argument_list pos:line="26" pos:column="38">(<argument><expr><name pos:line="26" pos:column="39">name<pos:position pos:line="26" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="45">namelen<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="54"/></condition><then pos:line="26" pos:column="54"> <block pos:line="26" pos:column="55">{
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">fprintf<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><name pos:line="27" pos:column="33">stderr<pos:position pos:line="27" pos:column="39"/></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="28" pos:column="33">"%.*s is not a valid attribute name: %s:%d\n"<pos:position pos:line="28" pos:column="78"/></literal></expr></argument>,
				<argument><expr><name pos:line="29" pos:column="33">namelen<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="42">name<pos:position pos:line="29" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="48">src<pos:position pos:line="29" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="53">lineno<pos:position pos:line="29" pos:column="59"/></name></expr></argument>)<pos:position pos:line="29" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="61"/></expr_stmt>
			<return pos:line="30" pos:column="25">return <expr><name pos:line="30" pos:column="32">NULL<pos:position pos:line="30" pos:column="36"/></name></expr>;<pos:position pos:line="30" pos:column="37"/></return>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>
	}<pos:position pos:line="32" pos:column="10"/></block></then>
	<else pos:line="33" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="17">is_macro<pos:position pos:line="34" pos:column="25"/></name> <operator pos:line="34" pos:column="26">=<pos:position pos:line="34" pos:column="27"/></operator> <literal type="number" pos:line="34" pos:column="28">0<pos:position pos:line="34" pos:column="29"/></literal></expr>;<pos:position pos:line="34" pos:column="30"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="36" pos:column="9">states<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">name<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">+<pos:position pos:line="36" pos:column="24"/></operator> <name pos:line="36" pos:column="25">namelen<pos:position pos:line="36" pos:column="32"/></name></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="37" pos:column="9">states<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">+=<pos:position pos:line="37" pos:column="18"/></operator> <call><name pos:line="37" pos:column="19">strspn<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">states<pos:position pos:line="37" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="34">blank<pos:position pos:line="37" pos:column="39"/></name></expr></argument>)<pos:position pos:line="37" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="41"/></expr_stmt>

	<comment type="block" pos:line="39" pos:column="9">/* First pass to count the attr_states */</comment>
	<for pos:line="40" pos:column="9">for <control pos:line="40" pos:column="13">(<init><expr><name pos:line="40" pos:column="14">cp<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">=<pos:position pos:line="40" pos:column="18"/></operator> <name pos:line="40" pos:column="19">states<pos:position pos:line="40" pos:column="25"/></name></expr><operator pos:line="40" pos:column="25">,<pos:position pos:line="40" pos:column="26"/></operator> <expr><name pos:line="40" pos:column="27">num_attr<pos:position pos:line="40" pos:column="35"/></name> <operator pos:line="40" pos:column="36">=<pos:position pos:line="40" pos:column="37"/></operator> <literal type="number" pos:line="40" pos:column="38">0<pos:position pos:line="40" pos:column="39"/></literal></expr>;<pos:position pos:line="40" pos:column="40"/></init> <condition><expr><operator pos:line="40" pos:column="41">*<pos:position pos:line="40" pos:column="42"/></operator><name pos:line="40" pos:column="42">cp<pos:position pos:line="40" pos:column="44"/></name></expr>;<pos:position pos:line="40" pos:column="45"/></condition> <incr><expr><name pos:line="40" pos:column="46">num_attr<pos:position pos:line="40" pos:column="54"/></name><operator pos:line="40" pos:column="54">++<pos:position pos:line="40" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="40" pos:column="57"/></control> <block pos:line="40" pos:column="58">{
		<expr_stmt><expr><name pos:line="41" pos:column="17">cp<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">=<pos:position pos:line="41" pos:column="21"/></operator> <call><name pos:line="41" pos:column="22">parse_attr<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><name pos:line="41" pos:column="33">src<pos:position pos:line="41" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="38">lineno<pos:position pos:line="41" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="46">cp<pos:position pos:line="41" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="50">NULL<pos:position pos:line="41" pos:column="54"/></name></expr></argument>)<pos:position pos:line="41" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="56"/></expr_stmt>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="22">cp<pos:position pos:line="42" pos:column="24"/></name></expr>)<pos:position pos:line="42" pos:column="25"/></condition><then pos:line="42" pos:column="25">
			<block type="pseudo"><return pos:line="43" pos:column="25">return <expr><name pos:line="43" pos:column="32">NULL<pos:position pos:line="43" pos:column="36"/></name></expr>;<pos:position pos:line="43" pos:column="37"/></return></block></then></if>
	}<pos:position pos:line="44" pos:column="10"/></block></for>

	<expr_stmt><expr><name pos:line="46" pos:column="9">res<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <call><name pos:line="46" pos:column="15">xcalloc<pos:position pos:line="46" pos:column="22"/></name><argument_list pos:line="46" pos:column="22">(<argument><expr><literal type="number" pos:line="46" pos:column="23">1<pos:position pos:line="46" pos:column="24"/></literal></expr></argument>,
		      <argument><expr><sizeof pos:line="47" pos:column="23">sizeof<argument_list pos:line="47" pos:column="29">(<argument><expr><operator pos:line="47" pos:column="30">*<pos:position pos:line="47" pos:column="31"/></operator><name pos:line="47" pos:column="31">res<pos:position pos:line="47" pos:column="34"/></name></expr></argument>)<pos:position pos:line="47" pos:column="35"/></argument_list></sizeof> <operator pos:line="47" pos:column="36">+<pos:position pos:line="47" pos:column="37"/></operator>
		      <sizeof pos:line="48" pos:column="23">sizeof<argument_list pos:line="48" pos:column="29">(<argument><expr pos:line="48" pos:column="30">struct <name pos:line="48" pos:column="37">attr_state<pos:position pos:line="48" pos:column="47"/></name></expr></argument>)<pos:position pos:line="48" pos:column="48"/></argument_list></sizeof> <operator pos:line="48" pos:column="49">*<pos:position pos:line="48" pos:column="50"/></operator> <name pos:line="48" pos:column="51">num_attr<pos:position pos:line="48" pos:column="59"/></name> <operator pos:line="48" pos:column="60">+<pos:position pos:line="48" pos:column="61"/></operator>
		      <operator pos:line="49" pos:column="23">(<pos:position pos:line="49" pos:column="24"/></operator><ternary><condition><expr><name pos:line="49" pos:column="24">is_macro<pos:position pos:line="49" pos:column="32"/></name></expr> ?<pos:position pos:line="49" pos:column="34"/></condition><then pos:line="49" pos:column="34"> <expr><literal type="number" pos:line="49" pos:column="35">0<pos:position pos:line="49" pos:column="36"/></literal></expr> <pos:position pos:line="49" pos:column="37"/></then><else pos:line="49" pos:column="37">: <expr><name pos:line="49" pos:column="39">namelen<pos:position pos:line="49" pos:column="46"/></name> <operator pos:line="49" pos:column="47">+<pos:position pos:line="49" pos:column="48"/></operator> <literal type="number" pos:line="49" pos:column="49">1<pos:position pos:line="49" pos:column="50"/></literal></expr></else></ternary><operator pos:line="49" pos:column="50">)<pos:position pos:line="49" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="49" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="53"/></expr_stmt>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">is_macro<pos:position pos:line="50" pos:column="21"/></name></expr>)<pos:position pos:line="50" pos:column="22"/></condition><then pos:line="50" pos:column="22"> <block pos:line="50" pos:column="23">{
		<expr_stmt><expr><name><name pos:line="51" pos:column="17">res<pos:position pos:line="51" pos:column="20"/></name><operator pos:line="51" pos:column="20">-&gt;<pos:position pos:line="51" pos:column="25"/></operator><name pos:line="51" pos:column="22">u<pos:position pos:line="51" pos:column="23"/></name><operator pos:line="51" pos:column="23">.<pos:position pos:line="51" pos:column="24"/></operator><name pos:line="51" pos:column="24">attr<pos:position pos:line="51" pos:column="28"/></name></name> <operator pos:line="51" pos:column="29">=<pos:position pos:line="51" pos:column="30"/></operator> <call><name pos:line="51" pos:column="31">git_attr_internal<pos:position pos:line="51" pos:column="48"/></name><argument_list pos:line="51" pos:column="48">(<argument><expr><name pos:line="51" pos:column="49">name<pos:position pos:line="51" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="55">namelen<pos:position pos:line="51" pos:column="62"/></name></expr></argument>)<pos:position pos:line="51" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="52" pos:column="17">res<pos:position pos:line="52" pos:column="20"/></name><operator pos:line="52" pos:column="20">-&gt;<pos:position pos:line="52" pos:column="25"/></operator><name pos:line="52" pos:column="22">u<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">.<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="24">attr<pos:position pos:line="52" pos:column="28"/></name><operator pos:line="52" pos:column="28">-&gt;<pos:position pos:line="52" pos:column="33"/></operator><name pos:line="52" pos:column="30">maybe_macro<pos:position pos:line="52" pos:column="41"/></name></name> <operator pos:line="52" pos:column="42">=<pos:position pos:line="52" pos:column="43"/></operator> <literal type="number" pos:line="52" pos:column="44">1<pos:position pos:line="52" pos:column="45"/></literal></expr>;<pos:position pos:line="52" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="53" pos:column="10"/></block></then> <else pos:line="53" pos:column="11">else <block pos:line="53" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="54" pos:column="17">char<pos:position pos:line="54" pos:column="21"/></name> <modifier pos:line="54" pos:column="22">*<pos:position pos:line="54" pos:column="23"/></modifier></type><name pos:line="54" pos:column="23">p<pos:position pos:line="54" pos:column="24"/></name> <init pos:line="54" pos:column="25">= <expr><operator pos:line="54" pos:column="27">(<pos:position pos:line="54" pos:column="28"/></operator><name pos:line="54" pos:column="28">char<pos:position pos:line="54" pos:column="32"/></name> <operator pos:line="54" pos:column="33">*<pos:position pos:line="54" pos:column="34"/></operator><operator pos:line="54" pos:column="34">)<pos:position pos:line="54" pos:column="35"/></operator><operator pos:line="54" pos:column="35">&amp;<pos:position pos:line="54" pos:column="40"/></operator><operator pos:line="54" pos:column="36">(<pos:position pos:line="54" pos:column="37"/></operator><name><name pos:line="54" pos:column="37">res<pos:position pos:line="54" pos:column="40"/></name><operator pos:line="54" pos:column="40">-&gt;<pos:position pos:line="54" pos:column="45"/></operator><name pos:line="54" pos:column="42">state<pos:position pos:line="54" pos:column="47"/></name><index pos:line="54" pos:column="47">[<expr><name pos:line="54" pos:column="48">num_attr<pos:position pos:line="54" pos:column="56"/></name></expr>]<pos:position pos:line="54" pos:column="57"/></index></name><operator pos:line="54" pos:column="57">)<pos:position pos:line="54" pos:column="58"/></operator></expr></init></decl>;<pos:position pos:line="54" pos:column="59"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">memcpy<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">p<pos:position pos:line="55" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="27">name<pos:position pos:line="55" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="33">namelen<pos:position pos:line="55" pos:column="40"/></name></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="56" pos:column="17">res<pos:position pos:line="56" pos:column="20"/></name><operator pos:line="56" pos:column="20">-&gt;<pos:position pos:line="56" pos:column="25"/></operator><name pos:line="56" pos:column="22">u<pos:position pos:line="56" pos:column="23"/></name><operator pos:line="56" pos:column="23">.<pos:position pos:line="56" pos:column="24"/></operator><name pos:line="56" pos:column="24">pat<pos:position pos:line="56" pos:column="27"/></name><operator pos:line="56" pos:column="27">.<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="28">pattern<pos:position pos:line="56" pos:column="35"/></name></name> <operator pos:line="56" pos:column="36">=<pos:position pos:line="56" pos:column="37"/></operator> <name pos:line="56" pos:column="38">p<pos:position pos:line="56" pos:column="39"/></name></expr>;<pos:position pos:line="56" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">parse_exclude_pattern<pos:position pos:line="57" pos:column="38"/></name><argument_list pos:line="57" pos:column="38">(<argument><expr><operator pos:line="57" pos:column="39">&amp;<pos:position pos:line="57" pos:column="44"/></operator><name><name pos:line="57" pos:column="40">res<pos:position pos:line="57" pos:column="43"/></name><operator pos:line="57" pos:column="43">-&gt;<pos:position pos:line="57" pos:column="48"/></operator><name pos:line="57" pos:column="45">u<pos:position pos:line="57" pos:column="46"/></name><operator pos:line="57" pos:column="46">.<pos:position pos:line="57" pos:column="47"/></operator><name pos:line="57" pos:column="47">pat<pos:position pos:line="57" pos:column="50"/></name><operator pos:line="57" pos:column="50">.<pos:position pos:line="57" pos:column="51"/></operator><name pos:line="57" pos:column="51">pattern<pos:position pos:line="57" pos:column="58"/></name></name></expr></argument>,
				      <argument><expr><operator pos:line="58" pos:column="39">&amp;<pos:position pos:line="58" pos:column="44"/></operator><name><name pos:line="58" pos:column="40">res<pos:position pos:line="58" pos:column="43"/></name><operator pos:line="58" pos:column="43">-&gt;<pos:position pos:line="58" pos:column="48"/></operator><name pos:line="58" pos:column="45">u<pos:position pos:line="58" pos:column="46"/></name><operator pos:line="58" pos:column="46">.<pos:position pos:line="58" pos:column="47"/></operator><name pos:line="58" pos:column="47">pat<pos:position pos:line="58" pos:column="50"/></name><operator pos:line="58" pos:column="50">.<pos:position pos:line="58" pos:column="51"/></operator><name pos:line="58" pos:column="51">patternlen<pos:position pos:line="58" pos:column="61"/></name></name></expr></argument>,
				      <argument><expr><operator pos:line="59" pos:column="39">&amp;<pos:position pos:line="59" pos:column="44"/></operator><name><name pos:line="59" pos:column="40">res<pos:position pos:line="59" pos:column="43"/></name><operator pos:line="59" pos:column="43">-&gt;<pos:position pos:line="59" pos:column="48"/></operator><name pos:line="59" pos:column="45">u<pos:position pos:line="59" pos:column="46"/></name><operator pos:line="59" pos:column="46">.<pos:position pos:line="59" pos:column="47"/></operator><name pos:line="59" pos:column="47">pat<pos:position pos:line="59" pos:column="50"/></name><operator pos:line="59" pos:column="50">.<pos:position pos:line="59" pos:column="51"/></operator><name pos:line="59" pos:column="51">flags<pos:position pos:line="59" pos:column="56"/></name></name></expr></argument>,
				      <argument><expr><operator pos:line="60" pos:column="39">&amp;<pos:position pos:line="60" pos:column="44"/></operator><name><name pos:line="60" pos:column="40">res<pos:position pos:line="60" pos:column="43"/></name><operator pos:line="60" pos:column="43">-&gt;<pos:position pos:line="60" pos:column="48"/></operator><name pos:line="60" pos:column="45">u<pos:position pos:line="60" pos:column="46"/></name><operator pos:line="60" pos:column="46">.<pos:position pos:line="60" pos:column="47"/></operator><name pos:line="60" pos:column="47">pat<pos:position pos:line="60" pos:column="50"/></name><operator pos:line="60" pos:column="50">.<pos:position pos:line="60" pos:column="51"/></operator><name pos:line="60" pos:column="51">nowildcardlen<pos:position pos:line="60" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="66"/></expr_stmt>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name><name pos:line="61" pos:column="21">res<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">-&gt;<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="26">u<pos:position pos:line="61" pos:column="27"/></name><operator pos:line="61" pos:column="27">.<pos:position pos:line="61" pos:column="28"/></operator><name pos:line="61" pos:column="28">pat<pos:position pos:line="61" pos:column="31"/></name><operator pos:line="61" pos:column="31">.<pos:position pos:line="61" pos:column="32"/></operator><name pos:line="61" pos:column="32">flags<pos:position pos:line="61" pos:column="37"/></name></name> <operator pos:line="61" pos:column="38">&amp;<pos:position pos:line="61" pos:column="43"/></operator> <name pos:line="61" pos:column="40">EXC_FLAG_NEGATIVE<pos:position pos:line="61" pos:column="57"/></name></expr>)<pos:position pos:line="61" pos:column="58"/></condition><then pos:line="61" pos:column="58"> <block pos:line="61" pos:column="59">{
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">warning<pos:position pos:line="62" pos:column="32"/></name><argument_list pos:line="62" pos:column="32">(<argument><expr><call><name pos:line="62" pos:column="33">_<pos:position pos:line="62" pos:column="34"/></name><argument_list pos:line="62" pos:column="34">(<argument><expr><literal type="string" pos:line="62" pos:column="35">"Negative patterns are ignored in git attributes\n"<pos:position pos:line="62" pos:column="86"/></literal>
				  <literal type="string" pos:line="63" pos:column="35">"Use '\\!' for literal leading exclamation."<pos:position pos:line="63" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="82"/></expr_stmt>
			<return pos:line="64" pos:column="25">return <expr><name pos:line="64" pos:column="32">NULL<pos:position pos:line="64" pos:column="36"/></name></expr>;<pos:position pos:line="64" pos:column="37"/></return>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>
	}<pos:position pos:line="66" pos:column="10"/></block></else></if>
	<expr_stmt><expr><name><name pos:line="67" pos:column="9">res<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">-&gt;<pos:position pos:line="67" pos:column="17"/></operator><name pos:line="67" pos:column="14">is_macro<pos:position pos:line="67" pos:column="22"/></name></name> <operator pos:line="67" pos:column="23">=<pos:position pos:line="67" pos:column="24"/></operator> <name pos:line="67" pos:column="25">is_macro<pos:position pos:line="67" pos:column="33"/></name></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="68" pos:column="9">res<pos:position pos:line="68" pos:column="12"/></name><operator pos:line="68" pos:column="12">-&gt;<pos:position pos:line="68" pos:column="17"/></operator><name pos:line="68" pos:column="14">num_attr<pos:position pos:line="68" pos:column="22"/></name></name> <operator pos:line="68" pos:column="23">=<pos:position pos:line="68" pos:column="24"/></operator> <name pos:line="68" pos:column="25">num_attr<pos:position pos:line="68" pos:column="33"/></name></expr>;<pos:position pos:line="68" pos:column="34"/></expr_stmt>

	<comment type="block" pos:line="70" pos:column="9">/* Second pass to fill the attr_states */</comment>
	<for pos:line="71" pos:column="9">for <control pos:line="71" pos:column="13">(<init><expr><name pos:line="71" pos:column="14">cp<pos:position pos:line="71" pos:column="16"/></name> <operator pos:line="71" pos:column="17">=<pos:position pos:line="71" pos:column="18"/></operator> <name pos:line="71" pos:column="19">states<pos:position pos:line="71" pos:column="25"/></name></expr><operator pos:line="71" pos:column="25">,<pos:position pos:line="71" pos:column="26"/></operator> <expr><name pos:line="71" pos:column="27">i<pos:position pos:line="71" pos:column="28"/></name> <operator pos:line="71" pos:column="29">=<pos:position pos:line="71" pos:column="30"/></operator> <literal type="number" pos:line="71" pos:column="31">0<pos:position pos:line="71" pos:column="32"/></literal></expr>;<pos:position pos:line="71" pos:column="33"/></init> <condition><expr><operator pos:line="71" pos:column="34">*<pos:position pos:line="71" pos:column="35"/></operator><name pos:line="71" pos:column="35">cp<pos:position pos:line="71" pos:column="37"/></name></expr>;<pos:position pos:line="71" pos:column="38"/></condition> <incr><expr><name pos:line="71" pos:column="39">i<pos:position pos:line="71" pos:column="40"/></name><operator pos:line="71" pos:column="40">++<pos:position pos:line="71" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="71" pos:column="43"/></control> <block pos:line="71" pos:column="44">{
		<expr_stmt><expr><name pos:line="72" pos:column="17">cp<pos:position pos:line="72" pos:column="19"/></name> <operator pos:line="72" pos:column="20">=<pos:position pos:line="72" pos:column="21"/></operator> <call><name pos:line="72" pos:column="22">parse_attr<pos:position pos:line="72" pos:column="32"/></name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">src<pos:position pos:line="72" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="38">lineno<pos:position pos:line="72" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="46">cp<pos:position pos:line="72" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="50">&amp;<pos:position pos:line="72" pos:column="55"/></operator><operator pos:line="72" pos:column="51">(<pos:position pos:line="72" pos:column="52"/></operator><name><name pos:line="72" pos:column="52">res<pos:position pos:line="72" pos:column="55"/></name><operator pos:line="72" pos:column="55">-&gt;<pos:position pos:line="72" pos:column="60"/></operator><name pos:line="72" pos:column="57">state<pos:position pos:line="72" pos:column="62"/></name><index pos:line="72" pos:column="62">[<expr><name pos:line="72" pos:column="63">i<pos:position pos:line="72" pos:column="64"/></name></expr>]<pos:position pos:line="72" pos:column="65"/></index></name><operator pos:line="72" pos:column="65">)<pos:position pos:line="72" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="72" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="68"/></expr_stmt>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><operator pos:line="73" pos:column="21">!<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="22">is_macro<pos:position pos:line="73" pos:column="30"/></name></expr>)<pos:position pos:line="73" pos:column="31"/></condition><then pos:line="73" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="74" pos:column="25">res<pos:position pos:line="74" pos:column="28"/></name><operator pos:line="74" pos:column="28">-&gt;<pos:position pos:line="74" pos:column="33"/></operator><name pos:line="74" pos:column="30">state<pos:position pos:line="74" pos:column="35"/></name><index pos:line="74" pos:column="35">[<expr><name pos:line="74" pos:column="36">i<pos:position pos:line="74" pos:column="37"/></name></expr>]<pos:position pos:line="74" pos:column="38"/></index></name><operator pos:line="74" pos:column="38">.<pos:position pos:line="74" pos:column="39"/></operator><name><name pos:line="74" pos:column="39">attr<pos:position pos:line="74" pos:column="43"/></name><operator pos:line="74" pos:column="43">-&gt;<pos:position pos:line="74" pos:column="48"/></operator><name pos:line="74" pos:column="45">maybe_real<pos:position pos:line="74" pos:column="55"/></name></name> <operator pos:line="74" pos:column="56">=<pos:position pos:line="74" pos:column="57"/></operator> <literal type="number" pos:line="74" pos:column="58">1<pos:position pos:line="74" pos:column="59"/></literal></expr>;<pos:position pos:line="74" pos:column="60"/></expr_stmt></block></then></if>
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name><name pos:line="75" pos:column="21">res<pos:position pos:line="75" pos:column="24"/></name><operator pos:line="75" pos:column="24">-&gt;<pos:position pos:line="75" pos:column="29"/></operator><name pos:line="75" pos:column="26">state<pos:position pos:line="75" pos:column="31"/></name><index pos:line="75" pos:column="31">[<expr><name pos:line="75" pos:column="32">i<pos:position pos:line="75" pos:column="33"/></name></expr>]<pos:position pos:line="75" pos:column="34"/></index></name><operator pos:line="75" pos:column="34">.<pos:position pos:line="75" pos:column="35"/></operator><name><name pos:line="75" pos:column="35">attr<pos:position pos:line="75" pos:column="39"/></name><operator pos:line="75" pos:column="39">-&gt;<pos:position pos:line="75" pos:column="44"/></operator><name pos:line="75" pos:column="41">maybe_macro<pos:position pos:line="75" pos:column="52"/></name></name></expr>)<pos:position pos:line="75" pos:column="53"/></condition><then pos:line="75" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><name pos:line="76" pos:column="25">cannot_trust_maybe_real<pos:position pos:line="76" pos:column="48"/></name> <operator pos:line="76" pos:column="49">=<pos:position pos:line="76" pos:column="50"/></operator> <literal type="number" pos:line="76" pos:column="51">1<pos:position pos:line="76" pos:column="52"/></literal></expr>;<pos:position pos:line="76" pos:column="53"/></expr_stmt></block></then></if>
	}<pos:position pos:line="77" pos:column="10"/></block></for>

	<return pos:line="79" pos:column="9">return <expr><name pos:line="79" pos:column="16">res<pos:position pos:line="79" pos:column="19"/></name></expr>;<pos:position pos:line="79" pos:column="20"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
