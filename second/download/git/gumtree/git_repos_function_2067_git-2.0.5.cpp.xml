<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2067_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_recursive_merge<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">commit<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">base<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="52">struct<pos:position pos:line="1" pos:column="58"/></name> <name pos:line="1" pos:column="59">commit<pos:position pos:line="1" pos:column="65"/></name></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">next<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">base_label<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="55">const<pos:position pos:line="2" pos:column="60"/></specifier> <name pos:line="2" pos:column="61">char<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">next_label<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="3" pos:column="31">unsigned<pos:position pos:line="3" pos:column="39"/></name> <name pos:line="3" pos:column="40">char<pos:position pos:line="3" pos:column="44"/></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">head<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="3" pos:column="52">struct<pos:position pos:line="3" pos:column="58"/></name> <name pos:line="3" pos:column="59">strbuf<pos:position pos:line="3" pos:column="65"/></name></name> <modifier pos:line="3" pos:column="66">*<pos:position pos:line="3" pos:column="67"/></modifier></type><name pos:line="3" pos:column="67">msgbuf<pos:position pos:line="3" pos:column="73"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="4" pos:column="31">struct<pos:position pos:line="4" pos:column="37"/></name> <name pos:line="4" pos:column="38">replay_opts<pos:position pos:line="4" pos:column="49"/></name></name> <modifier pos:line="4" pos:column="50">*<pos:position pos:line="4" pos:column="51"/></modifier></type><name pos:line="4" pos:column="51">opts<pos:position pos:line="4" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="56"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">merge_options<pos:position pos:line="6" pos:column="29"/></name></name></type> <name pos:line="6" pos:column="30">o<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">tree<pos:position pos:line="7" pos:column="20"/></name></name> <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier></type><name pos:line="7" pos:column="22">result<pos:position pos:line="7" pos:column="28"/></name></decl>, <modifier pos:line="7" pos:column="30">*<pos:position pos:line="7" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="31">next_tree<pos:position pos:line="7" pos:column="40"/></name></decl>, <modifier pos:line="7" pos:column="42">*<pos:position pos:line="7" pos:column="43"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="43">base_tree<pos:position pos:line="7" pos:column="52"/></name></decl>, <modifier pos:line="7" pos:column="54">*<pos:position pos:line="7" pos:column="55"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="55">head_tree<pos:position pos:line="7" pos:column="64"/></name></decl>;<pos:position pos:line="7" pos:column="65"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">clean<pos:position pos:line="8" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="20">index_fd<pos:position pos:line="8" pos:column="28"/></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier><modifier pos:line="9" pos:column="21">*<pos:position pos:line="9" pos:column="22"/></modifier></type><name pos:line="9" pos:column="22">xopt<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="10" pos:column="9">static<pos:position pos:line="10" pos:column="15"/></specifier> <type><name><name pos:line="10" pos:column="16">struct<pos:position pos:line="10" pos:column="22"/></name> <name pos:line="10" pos:column="23">lock_file<pos:position pos:line="10" pos:column="32"/></name></name></type> <name pos:line="10" pos:column="33">index_lock<pos:position pos:line="10" pos:column="43"/></name></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt>

	<expr_stmt><expr><name pos:line="12" pos:column="9">index_fd<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <call><name pos:line="12" pos:column="20">hold_locked_index<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><operator pos:line="12" pos:column="38">&amp;<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="39">index_lock<pos:position pos:line="12" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="51">1<pos:position pos:line="12" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">read_cache<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">()<pos:position pos:line="14" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">init_merge_options<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><operator pos:line="16" pos:column="28">&amp;<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="29">o<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">o<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">.<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">ancestor<pos:position pos:line="17" pos:column="19"/></name></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <ternary><condition><expr><name pos:line="17" pos:column="22">base<pos:position pos:line="17" pos:column="26"/></name></expr> ?<pos:position pos:line="17" pos:column="28"/></condition><then pos:line="17" pos:column="28"> <expr><name pos:line="17" pos:column="29">base_label<pos:position pos:line="17" pos:column="39"/></name></expr> <pos:position pos:line="17" pos:column="40"/></then><else pos:line="17" pos:column="40">: <expr><literal type="string" pos:line="17" pos:column="42">"(empty tree)"<pos:position pos:line="17" pos:column="56"/></literal></expr></else></ternary></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">o<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">.<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">branch1<pos:position pos:line="18" pos:column="18"/></name></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <literal type="string" pos:line="18" pos:column="21">"HEAD"<pos:position pos:line="18" pos:column="27"/></literal></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">o<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">.<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="11">branch2<pos:position pos:line="19" pos:column="18"/></name></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <ternary><condition><expr><name pos:line="19" pos:column="21">next<pos:position pos:line="19" pos:column="25"/></name></expr> ?<pos:position pos:line="19" pos:column="27"/></condition><then pos:line="19" pos:column="27"> <expr><name pos:line="19" pos:column="28">next_label<pos:position pos:line="19" pos:column="38"/></name></expr> <pos:position pos:line="19" pos:column="39"/></then><else pos:line="19" pos:column="39">: <expr><literal type="string" pos:line="19" pos:column="41">"(empty tree)"<pos:position pos:line="19" pos:column="55"/></literal></expr></else></ternary></expr>;<pos:position pos:line="19" pos:column="56"/></expr_stmt>

	<expr_stmt><expr><name pos:line="21" pos:column="9">head_tree<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <call><name pos:line="21" pos:column="21">parse_tree_indirect<pos:position pos:line="21" pos:column="40"/></name><argument_list pos:line="21" pos:column="40">(<argument><expr><name pos:line="21" pos:column="41">head<pos:position pos:line="21" pos:column="45"/></name></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">next_tree<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <ternary><condition><expr><name pos:line="22" pos:column="21">next<pos:position pos:line="22" pos:column="25"/></name></expr> ?<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27"> <expr><name><name pos:line="22" pos:column="28">next<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-&gt;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="34">tree<pos:position pos:line="22" pos:column="38"/></name></name></expr> <pos:position pos:line="22" pos:column="39"/></then><else pos:line="22" pos:column="39">: <expr><call><name pos:line="22" pos:column="41">empty_tree<pos:position pos:line="22" pos:column="51"/></name><argument_list pos:line="22" pos:column="51">()<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="22" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">base_tree<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <ternary><condition><expr><name pos:line="23" pos:column="21">base<pos:position pos:line="23" pos:column="25"/></name></expr> ?<pos:position pos:line="23" pos:column="27"/></condition><then pos:line="23" pos:column="27"> <expr><name><name pos:line="23" pos:column="28">base<pos:position pos:line="23" pos:column="32"/></name><operator pos:line="23" pos:column="32">-&gt;<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="34">tree<pos:position pos:line="23" pos:column="38"/></name></name></expr> <pos:position pos:line="23" pos:column="39"/></then><else pos:line="23" pos:column="39">: <expr><call><name pos:line="23" pos:column="41">empty_tree<pos:position pos:line="23" pos:column="51"/></name><argument_list pos:line="23" pos:column="51">()<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="23" pos:column="54"/></expr_stmt>

	<for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">xopt<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <name><name pos:line="25" pos:column="21">opts<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">-&gt;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="27">xopts<pos:position pos:line="25" pos:column="32"/></name></name></expr>;<pos:position pos:line="25" pos:column="33"/></init> <condition><expr><name pos:line="25" pos:column="34">xopt<pos:position pos:line="25" pos:column="38"/></name> <operator pos:line="25" pos:column="39">!=<pos:position pos:line="25" pos:column="41"/></operator> <name><name pos:line="25" pos:column="42">opts<pos:position pos:line="25" pos:column="46"/></name><operator pos:line="25" pos:column="46">-&gt;<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="48">xopts<pos:position pos:line="25" pos:column="53"/></name></name> <operator pos:line="25" pos:column="54">+<pos:position pos:line="25" pos:column="55"/></operator> <name><name pos:line="25" pos:column="56">opts<pos:position pos:line="25" pos:column="60"/></name><operator pos:line="25" pos:column="60">-&gt;<pos:position pos:line="25" pos:column="65"/></operator><name pos:line="25" pos:column="62">xopts_nr<pos:position pos:line="25" pos:column="70"/></name></name></expr>;<pos:position pos:line="25" pos:column="71"/></condition> <incr><expr><name pos:line="25" pos:column="72">xopt<pos:position pos:line="25" pos:column="76"/></name><operator pos:line="25" pos:column="76">++<pos:position pos:line="25" pos:column="78"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="79"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">parse_merge_opt<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><operator pos:line="26" pos:column="33">&amp;<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="34">o<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="37">*<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="38">xopt<pos:position pos:line="26" pos:column="42"/></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt></block></for>

	<expr_stmt><expr><name pos:line="28" pos:column="9">clean<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <call><name pos:line="28" pos:column="17">merge_trees<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><operator pos:line="28" pos:column="29">&amp;<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="30">o<pos:position pos:line="28" pos:column="31"/></name></expr></argument>,
			    <argument><expr><name pos:line="29" pos:column="29">head_tree<pos:position pos:line="29" pos:column="38"/></name></expr></argument>,
			    <argument><expr><name pos:line="30" pos:column="29">next_tree<pos:position pos:line="30" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="40">base_tree<pos:position pos:line="30" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="51">&amp;<pos:position pos:line="30" pos:column="56"/></operator><name pos:line="30" pos:column="52">result<pos:position pos:line="30" pos:column="58"/></name></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="60"/></expr_stmt>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">active_cache_changed<pos:position pos:line="32" pos:column="33"/></name> <operator pos:line="32" pos:column="34">&amp;&amp;<pos:position pos:line="32" pos:column="44"/></operator>
	    <operator pos:line="33" pos:column="13">(<pos:position pos:line="33" pos:column="14"/></operator><call><name pos:line="33" pos:column="14">write_cache<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">index_fd<pos:position pos:line="33" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="36">active_cache<pos:position pos:line="33" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="50">active_nr<pos:position pos:line="33" pos:column="59"/></name></expr></argument>)<pos:position pos:line="33" pos:column="60"/></argument_list></call> <operator pos:line="33" pos:column="61">||<pos:position pos:line="33" pos:column="63"/></operator>
	     <call><name pos:line="34" pos:column="14">commit_locked_index<pos:position pos:line="34" pos:column="33"/></name><argument_list pos:line="34" pos:column="33">(<argument><expr><operator pos:line="34" pos:column="34">&amp;<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="35">index_lock<pos:position pos:line="34" pos:column="45"/></name></expr></argument>)<pos:position pos:line="34" pos:column="46"/></argument_list></call><operator pos:line="34" pos:column="46">)<pos:position pos:line="34" pos:column="47"/></operator></expr>)<pos:position pos:line="34" pos:column="48"/></condition><then pos:line="34" pos:column="48">
		<comment type="block" pos:line="35" pos:column="17">/* TRANSLATORS: %s will be "revert" or "cherry-pick" */</comment>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="17">die<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><call><name pos:line="36" pos:column="21">_<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><literal type="string" pos:line="36" pos:column="23">"%s: Unable to write new index file"<pos:position pos:line="36" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="62">action_name<pos:position pos:line="36" pos:column="73"/></name><argument_list pos:line="36" pos:column="73">(<argument><expr><name pos:line="36" pos:column="74">opts<pos:position pos:line="36" pos:column="78"/></name></expr></argument>)<pos:position pos:line="36" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="81"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">rollback_lock_file<pos:position pos:line="37" pos:column="27"/></name><argument_list pos:line="37" pos:column="27">(<argument><expr><operator pos:line="37" pos:column="28">&amp;<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="29">index_lock<pos:position pos:line="37" pos:column="39"/></name></expr></argument>)<pos:position pos:line="37" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="41"/></expr_stmt>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name><name pos:line="39" pos:column="13">opts<pos:position pos:line="39" pos:column="17"/></name><operator pos:line="39" pos:column="17">-&gt;<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="19">signoff<pos:position pos:line="39" pos:column="26"/></name></name></expr>)<pos:position pos:line="39" pos:column="27"/></condition><then pos:line="39" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="17">append_signoff<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><name pos:line="40" pos:column="32">msgbuf<pos:position pos:line="40" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="40">0<pos:position pos:line="40" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="43">0<pos:position pos:line="40" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt></block></then></if>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">!<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="14">clean<pos:position pos:line="42" pos:column="19"/></name></expr>)<pos:position pos:line="42" pos:column="20"/></condition><then pos:line="42" pos:column="20"> <block pos:line="42" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">int<pos:position pos:line="43" pos:column="20"/></name></type> <name pos:line="43" pos:column="21">i<pos:position pos:line="43" pos:column="22"/></name></decl>;<pos:position pos:line="43" pos:column="23"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">strbuf_addstr<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">msgbuf<pos:position pos:line="44" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="39">"\nConflicts:\n"<pos:position pos:line="44" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="57"/></expr_stmt>
		<for pos:line="45" pos:column="17">for <control pos:line="45" pos:column="21">(<init><expr><name pos:line="45" pos:column="22">i<pos:position pos:line="45" pos:column="23"/></name> <operator pos:line="45" pos:column="24">=<pos:position pos:line="45" pos:column="25"/></operator> <literal type="number" pos:line="45" pos:column="26">0<pos:position pos:line="45" pos:column="27"/></literal></expr>;<pos:position pos:line="45" pos:column="28"/></init> <condition><expr><name pos:line="45" pos:column="29">i<pos:position pos:line="45" pos:column="30"/></name> <operator pos:line="45" pos:column="31">&lt;<pos:position pos:line="45" pos:column="35"/></operator> <name pos:line="45" pos:column="33">active_nr<pos:position pos:line="45" pos:column="42"/></name></expr>;<pos:position pos:line="45" pos:column="43"/></condition><incr/>)<pos:position pos:line="45" pos:column="44"/></control> <block pos:line="45" pos:column="45">{
			<decl_stmt><decl><type><specifier pos:line="46" pos:column="25">const<pos:position pos:line="46" pos:column="30"/></specifier> <name><name pos:line="46" pos:column="31">struct<pos:position pos:line="46" pos:column="37"/></name> <name pos:line="46" pos:column="38">cache_entry<pos:position pos:line="46" pos:column="49"/></name></name> <modifier pos:line="46" pos:column="50">*<pos:position pos:line="46" pos:column="51"/></modifier></type><name pos:line="46" pos:column="51">ce<pos:position pos:line="46" pos:column="53"/></name> <init pos:line="46" pos:column="54">= <expr><name><name pos:line="46" pos:column="56">active_cache<pos:position pos:line="46" pos:column="68"/></name><index pos:line="46" pos:column="68">[<expr><name pos:line="46" pos:column="69">i<pos:position pos:line="46" pos:column="70"/></name><operator pos:line="46" pos:column="70">++<pos:position pos:line="46" pos:column="72"/></operator></expr>]<pos:position pos:line="46" pos:column="73"/></index></name></expr></init></decl>;<pos:position pos:line="46" pos:column="74"/></decl_stmt>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><call><name pos:line="47" pos:column="29">ce_stage<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">ce<pos:position pos:line="47" pos:column="40"/></name></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="42"/></condition><then pos:line="47" pos:column="42"> <block pos:line="47" pos:column="43">{
				<expr_stmt><expr><call><name pos:line="48" pos:column="33">strbuf_addch<pos:position pos:line="48" pos:column="45"/></name><argument_list pos:line="48" pos:column="45">(<argument><expr><name pos:line="48" pos:column="46">msgbuf<pos:position pos:line="48" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="48" pos:column="54">'\t'<pos:position pos:line="48" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="60"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="49" pos:column="33">strbuf_addstr<pos:position pos:line="49" pos:column="46"/></name><argument_list pos:line="49" pos:column="46">(<argument><expr><name pos:line="49" pos:column="47">msgbuf<pos:position pos:line="49" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="55">ce<pos:position pos:line="49" pos:column="57"/></name><operator pos:line="49" pos:column="57">-&gt;<pos:position pos:line="49" pos:column="62"/></operator><name pos:line="49" pos:column="59">name<pos:position pos:line="49" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="50" pos:column="33">strbuf_addch<pos:position pos:line="50" pos:column="45"/></name><argument_list pos:line="50" pos:column="45">(<argument><expr><name pos:line="50" pos:column="46">msgbuf<pos:position pos:line="50" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="50" pos:column="54">'\n'<pos:position pos:line="50" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="60"/></expr_stmt>
				<while pos:line="51" pos:column="33">while <condition pos:line="51" pos:column="39">(<expr><name pos:line="51" pos:column="40">i<pos:position pos:line="51" pos:column="41"/></name> <operator pos:line="51" pos:column="42">&lt;<pos:position pos:line="51" pos:column="46"/></operator> <name pos:line="51" pos:column="44">active_nr<pos:position pos:line="51" pos:column="53"/></name> <operator pos:line="51" pos:column="54">&amp;&amp;<pos:position pos:line="51" pos:column="64"/></operator> <operator pos:line="51" pos:column="57">!<pos:position pos:line="51" pos:column="58"/></operator><call><name pos:line="51" pos:column="58">strcmp<pos:position pos:line="51" pos:column="64"/></name><argument_list pos:line="51" pos:column="64">(<argument><expr><name><name pos:line="51" pos:column="65">ce<pos:position pos:line="51" pos:column="67"/></name><operator pos:line="51" pos:column="67">-&gt;<pos:position pos:line="51" pos:column="72"/></operator><name pos:line="51" pos:column="69">name<pos:position pos:line="51" pos:column="73"/></name></name></expr></argument>,
						<argument><expr><name><name pos:line="52" pos:column="49">active_cache<pos:position pos:line="52" pos:column="61"/></name><index pos:line="52" pos:column="61">[<expr><name pos:line="52" pos:column="62">i<pos:position pos:line="52" pos:column="63"/></name></expr>]<pos:position pos:line="52" pos:column="64"/></index></name><operator pos:line="52" pos:column="64">-&gt;<pos:position pos:line="52" pos:column="69"/></operator><name pos:line="52" pos:column="66">name<pos:position pos:line="52" pos:column="70"/></name></expr></argument>)<pos:position pos:line="52" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="72"/></condition>
					<block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="41">i<pos:position pos:line="53" pos:column="42"/></name><operator pos:line="53" pos:column="42">++<pos:position pos:line="53" pos:column="44"/></operator></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt></block></while>
			}<pos:position pos:line="54" pos:column="26"/></block></then></if>
		}<pos:position pos:line="55" pos:column="18"/></block></for>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>

	<return pos:line="58" pos:column="9">return <expr><operator pos:line="58" pos:column="16">!<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="17">clean<pos:position pos:line="58" pos:column="22"/></name></expr>;<pos:position pos:line="58" pos:column="23"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
