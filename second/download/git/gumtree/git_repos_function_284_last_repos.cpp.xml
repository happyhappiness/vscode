<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_284_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">send_request<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">socket<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">strbuf<pos:position pos:line="1" pos:column="64"/></name></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">out<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">got_data<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><literal type="number" pos:line="3" pos:column="24">0<pos:position pos:line="3" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">fd<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><call><name pos:line="4" pos:column="18">unix_stream_connect<pos:position pos:line="4" pos:column="37"/></name><argument_list pos:line="4" pos:column="37">(<argument><expr><name pos:line="4" pos:column="38">socket<pos:position pos:line="4" pos:column="44"/></name></expr></argument>)<pos:position pos:line="4" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="46"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">fd<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">&lt;<pos:position pos:line="6" pos:column="20"/></operator> <literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><operator pos:line="7" pos:column="24">-<pos:position pos:line="7" pos:column="25"/></operator><literal type="number" pos:line="7" pos:column="25">1<pos:position pos:line="7" pos:column="26"/></literal></expr>;<pos:position pos:line="7" pos:column="27"/></return></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">write_in_full<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">fd<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="31">out<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">-&gt;<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="36">buf<pos:position pos:line="9" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="41">out<pos:position pos:line="9" pos:column="44"/></name><operator pos:line="9" pos:column="44">-&gt;<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="46">len<pos:position pos:line="9" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call> <operator pos:line="9" pos:column="51">&lt;<pos:position pos:line="9" pos:column="55"/></operator> <literal type="number" pos:line="9" pos:column="53">0<pos:position pos:line="9" pos:column="54"/></literal></expr>)<pos:position pos:line="9" pos:column="55"/></condition><then pos:line="9" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">die_errno<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><literal type="string" pos:line="10" pos:column="27">"unable to write to cache daemon"<pos:position pos:line="10" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">shutdown<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">(<argument><expr><name pos:line="11" pos:column="18">fd<pos:position pos:line="11" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="22">SHUT_WR<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>

	<while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><literal type="number" pos:line="13" pos:column="16">1<pos:position pos:line="13" pos:column="17"/></literal></expr>)<pos:position pos:line="13" pos:column="18"/></condition> <block pos:line="13" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">char<pos:position pos:line="14" pos:column="21"/></name></type> <name><name pos:line="14" pos:column="22">in<pos:position pos:line="14" pos:column="24"/></name><index pos:line="14" pos:column="24">[<expr><literal type="number" pos:line="14" pos:column="25">1024<pos:position pos:line="14" pos:column="29"/></literal></expr>]<pos:position pos:line="14" pos:column="30"/></index></name></decl>;<pos:position pos:line="14" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">int<pos:position pos:line="15" pos:column="20"/></name></type> <name pos:line="15" pos:column="21">r<pos:position pos:line="15" pos:column="22"/></name></decl>;<pos:position pos:line="15" pos:column="23"/></decl_stmt>

		<expr_stmt><expr><name pos:line="17" pos:column="17">r<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <call><name pos:line="17" pos:column="21">read_in_full<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">fd<pos:position pos:line="17" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="38">in<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="42">sizeof<argument_list pos:line="17" pos:column="48">(<argument><expr><name pos:line="17" pos:column="49">in<pos:position pos:line="17" pos:column="51"/></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="54"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">r<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">==<pos:position pos:line="18" pos:column="25"/></operator> <literal type="number" pos:line="18" pos:column="26">0<pos:position pos:line="18" pos:column="27"/></literal> <operator pos:line="18" pos:column="28">||<pos:position pos:line="18" pos:column="30"/></operator> <operator pos:line="18" pos:column="31">(<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="32">r<pos:position pos:line="18" pos:column="33"/></name> <operator pos:line="18" pos:column="34">&lt;<pos:position pos:line="18" pos:column="38"/></operator> <literal type="number" pos:line="18" pos:column="36">0<pos:position pos:line="18" pos:column="37"/></literal> <operator pos:line="18" pos:column="38">&amp;&amp;<pos:position pos:line="18" pos:column="48"/></operator> <name pos:line="18" pos:column="41">errno<pos:position pos:line="18" pos:column="46"/></name> <operator pos:line="18" pos:column="47">==<pos:position pos:line="18" pos:column="49"/></operator> <name pos:line="18" pos:column="50">ECONNRESET<pos:position pos:line="18" pos:column="60"/></name><operator pos:line="18" pos:column="60">)<pos:position pos:line="18" pos:column="61"/></operator></expr>)<pos:position pos:line="18" pos:column="62"/></condition><then pos:line="18" pos:column="62">
			<block type="pseudo"><break pos:line="19" pos:column="25">break;<pos:position pos:line="19" pos:column="31"/></break></block></then></if>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">r<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">&lt;<pos:position pos:line="20" pos:column="27"/></operator> <literal type="number" pos:line="20" pos:column="25">0<pos:position pos:line="20" pos:column="26"/></literal></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">die_errno<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><literal type="string" pos:line="21" pos:column="35">"read error from cache daemon"<pos:position pos:line="21" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="67"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">write_or_die<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><literal type="number" pos:line="22" pos:column="30">1<pos:position pos:line="22" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="33">in<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="37">r<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">got_data<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <literal type="number" pos:line="23" pos:column="28">1<pos:position pos:line="23" pos:column="29"/></literal></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">close<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">fd<pos:position pos:line="25" pos:column="17"/></name></expr></argument>)<pos:position pos:line="25" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt>
	<return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">got_data<pos:position pos:line="26" pos:column="24"/></name></expr>;<pos:position pos:line="26" pos:column="25"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
