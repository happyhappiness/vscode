<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2646_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">run_access_hook<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">daemon_service<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">service<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="60">const<pos:position pos:line="1" pos:column="65"/></specifier> <name pos:line="1" pos:column="66">char<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">dir<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="77">const<pos:position pos:line="1" pos:column="82"/></specifier> <name pos:line="1" pos:column="83">char<pos:position pos:line="1" pos:column="87"/></name> <modifier pos:line="1" pos:column="88">*<pos:position pos:line="1" pos:column="89"/></modifier></type><name pos:line="1" pos:column="89">path<pos:position pos:line="1" pos:column="93"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="94"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">child_process<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">child<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">buf<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">STRBUF_INIT<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name><name pos:line="5" pos:column="21">argv<pos:position pos:line="5" pos:column="25"/></name><index pos:line="5" pos:column="25">[<expr><literal type="number" pos:line="5" pos:column="26">8<pos:position pos:line="5" pos:column="27"/></literal></expr>]<pos:position pos:line="5" pos:column="28"/></index></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier><modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">arg<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name pos:line="6" pos:column="28">argv<pos:position pos:line="6" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">eol<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">seen_errors<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>

<cpp:define pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">define<pos:position pos:line="10" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="10" pos:column="9">STRARG<pos:position pos:line="10" pos:column="15"/></name><parameter_list pos:line="10" pos:column="15">(<parameter><type><name pos:line="10" pos:column="16">x<pos:position pos:line="10" pos:column="17"/></name></type></parameter>)<pos:position pos:line="10" pos:column="18"/></parameter_list></cpp:macro> <cpp:value pos:line="10" pos:column="19">((x) ? (x) : "")<pos:position pos:line="10" pos:column="35"/></cpp:value></cpp:define>
	<expr_stmt><expr><operator pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">arg<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">++<pos:position pos:line="11" pos:column="15"/></operator> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">access_hook<pos:position pos:line="11" pos:column="29"/></name></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">arg<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">++<pos:position pos:line="12" pos:column="15"/></operator> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <name><name pos:line="12" pos:column="18">service<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">name<pos:position pos:line="12" pos:column="31"/></name></name></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="13" pos:column="9">*<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">arg<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">++<pos:position pos:line="13" pos:column="15"/></operator> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">path<pos:position pos:line="13" pos:column="22"/></name></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">arg<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">++<pos:position pos:line="14" pos:column="15"/></operator> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name pos:line="14" pos:column="18">STRARG<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">hostname<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="15" pos:column="9">*<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">arg<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">++<pos:position pos:line="15" pos:column="15"/></operator> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name pos:line="15" pos:column="18">STRARG<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">canon_hostname<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="16" pos:column="9">*<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">arg<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">++<pos:position pos:line="16" pos:column="15"/></operator> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <call><name pos:line="16" pos:column="18">STRARG<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">ip_address<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="17" pos:column="9">*<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">arg<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">++<pos:position pos:line="17" pos:column="15"/></operator> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <call><name pos:line="17" pos:column="18">STRARG<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">tcp_port<pos:position pos:line="17" pos:column="33"/></name></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="18" pos:column="9">*<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">arg<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <name pos:line="18" pos:column="16">NULL<pos:position pos:line="18" pos:column="20"/></name></expr>;<pos:position pos:line="18" pos:column="21"/></expr_stmt>
<cpp:undef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">undef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">STRARG<pos:position pos:line="19" pos:column="14"/></name></cpp:undef>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">memset<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><operator pos:line="21" pos:column="16">&amp;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="17">child<pos:position pos:line="21" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="24">0<pos:position pos:line="21" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="27">sizeof<argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">child<pos:position pos:line="21" pos:column="39"/></name></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">child<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">.<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">use_shell<pos:position pos:line="22" pos:column="24"/></name></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <literal type="number" pos:line="22" pos:column="27">1<pos:position pos:line="22" pos:column="28"/></literal></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">child<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">.<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">argv<pos:position pos:line="23" pos:column="19"/></name></name> <operator pos:line="23" pos:column="20">=<pos:position pos:line="23" pos:column="21"/></operator> <name pos:line="23" pos:column="22">argv<pos:position pos:line="23" pos:column="26"/></name></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">child<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">.<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">no_stdin<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <literal type="number" pos:line="24" pos:column="26">1<pos:position pos:line="24" pos:column="27"/></literal></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="25" pos:column="9">child<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">.<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">no_stderr<pos:position pos:line="25" pos:column="24"/></name></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <literal type="number" pos:line="25" pos:column="27">1<pos:position pos:line="25" pos:column="28"/></literal></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="26" pos:column="9">child<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">.<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">out<pos:position pos:line="26" pos:column="18"/></name></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <operator pos:line="26" pos:column="21">-<pos:position pos:line="26" pos:column="22"/></operator><literal type="number" pos:line="26" pos:column="22">1<pos:position pos:line="26" pos:column="23"/></literal></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><call><name pos:line="27" pos:column="13">start_command<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><operator pos:line="27" pos:column="27">&amp;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="28">child<pos:position pos:line="27" pos:column="33"/></name></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="35"/></condition><then pos:line="27" pos:column="35"> <block pos:line="27" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">logerror<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><literal type="string" pos:line="28" pos:column="26">"daemon access hook '%s' failed to start"<pos:position pos:line="28" pos:column="67"/></literal></expr></argument>,
			 <argument><expr><name pos:line="29" pos:column="26">access_hook<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
		<goto pos:line="30" pos:column="17">goto <name pos:line="30" pos:column="22">error_return<pos:position pos:line="30" pos:column="34"/></name>;<pos:position pos:line="30" pos:column="35"/></goto>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">strbuf_read<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument><expr><operator pos:line="32" pos:column="25">&amp;<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="26">buf<pos:position pos:line="32" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="31">child<pos:position pos:line="32" pos:column="36"/></name><operator pos:line="32" pos:column="36">.<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="37">out<pos:position pos:line="32" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="42">0<pos:position pos:line="32" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="44"/></argument_list></call> <operator pos:line="32" pos:column="45">&lt;<pos:position pos:line="32" pos:column="49"/></operator> <literal type="number" pos:line="32" pos:column="47">0<pos:position pos:line="32" pos:column="48"/></literal></expr>)<pos:position pos:line="32" pos:column="49"/></condition><then pos:line="32" pos:column="49"> <block pos:line="32" pos:column="50">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">logerror<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><literal type="string" pos:line="33" pos:column="26">"failed to read from pipe to daemon access hook '%s'"<pos:position pos:line="33" pos:column="79"/></literal></expr></argument>,
			 <argument><expr><name pos:line="34" pos:column="26">access_hook<pos:position pos:line="34" pos:column="37"/></name></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">strbuf_reset<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><operator pos:line="35" pos:column="30">&amp;<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="31">buf<pos:position pos:line="35" pos:column="34"/></name></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="36" pos:column="17">seen_errors<pos:position pos:line="36" pos:column="28"/></name> <operator pos:line="36" pos:column="29">=<pos:position pos:line="36" pos:column="30"/></operator> <literal type="number" pos:line="36" pos:column="31">1<pos:position pos:line="36" pos:column="32"/></literal></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">close<pos:position pos:line="38" pos:column="18"/></name><argument_list pos:line="38" pos:column="18">(<argument><expr><name><name pos:line="38" pos:column="19">child<pos:position pos:line="38" pos:column="24"/></name><operator pos:line="38" pos:column="24">.<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">out<pos:position pos:line="38" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="29"/></argument_list></call> <operator pos:line="38" pos:column="30">&lt;<pos:position pos:line="38" pos:column="34"/></operator> <literal type="number" pos:line="38" pos:column="32">0<pos:position pos:line="38" pos:column="33"/></literal></expr>)<pos:position pos:line="38" pos:column="34"/></condition><then pos:line="38" pos:column="34"> <block pos:line="38" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">logerror<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><literal type="string" pos:line="39" pos:column="26">"failed to close pipe to daemon access hook '%s'"<pos:position pos:line="39" pos:column="75"/></literal></expr></argument>,
			 <argument><expr><name pos:line="40" pos:column="26">access_hook<pos:position pos:line="40" pos:column="37"/></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">seen_errors<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">=<pos:position pos:line="41" pos:column="30"/></operator> <literal type="number" pos:line="41" pos:column="31">1<pos:position pos:line="41" pos:column="32"/></literal></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><call><name pos:line="43" pos:column="13">finish_command<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">(<argument><expr><operator pos:line="43" pos:column="28">&amp;<pos:position pos:line="43" pos:column="33"/></operator><name pos:line="43" pos:column="29">child<pos:position pos:line="43" pos:column="34"/></name></expr></argument>)<pos:position pos:line="43" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="36"/></condition><then pos:line="43" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="17">seen_errors<pos:position pos:line="44" pos:column="28"/></name> <operator pos:line="44" pos:column="29">=<pos:position pos:line="44" pos:column="30"/></operator> <literal type="number" pos:line="44" pos:column="31">1<pos:position pos:line="44" pos:column="32"/></literal></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt></block></then></if>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">seen_errors<pos:position pos:line="46" pos:column="25"/></name></expr>)<pos:position pos:line="46" pos:column="26"/></condition><then pos:line="46" pos:column="26"> <block pos:line="46" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">strbuf_release<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><operator pos:line="47" pos:column="32">&amp;<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="33">buf<pos:position pos:line="47" pos:column="36"/></name></expr></argument>)<pos:position pos:line="47" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="38"/></expr_stmt>
		<return pos:line="48" pos:column="17">return <expr><literal type="number" pos:line="48" pos:column="24">0<pos:position pos:line="48" pos:column="25"/></literal></expr>;<pos:position pos:line="48" pos:column="26"/></return>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

<label><name pos:line="51" pos:column="1">error_return<pos:position pos:line="51" pos:column="13"/></name>:<pos:position pos:line="51" pos:column="14"/></label>
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">strbuf_ltrim<pos:position pos:line="52" pos:column="21"/></name><argument_list pos:line="52" pos:column="21">(<argument><expr><operator pos:line="52" pos:column="22">&amp;<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="23">buf<pos:position pos:line="52" pos:column="26"/></name></expr></argument>)<pos:position pos:line="52" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="28"/></expr_stmt>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><operator pos:line="53" pos:column="13">!<pos:position pos:line="53" pos:column="14"/></operator><name><name pos:line="53" pos:column="14">buf<pos:position pos:line="53" pos:column="17"/></name><operator pos:line="53" pos:column="17">.<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="18">len<pos:position pos:line="53" pos:column="21"/></name></name></expr>)<pos:position pos:line="53" pos:column="22"/></condition><then pos:line="53" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="17">strbuf_addstr<pos:position pos:line="54" pos:column="30"/></name><argument_list pos:line="54" pos:column="30">(<argument><expr><operator pos:line="54" pos:column="31">&amp;<pos:position pos:line="54" pos:column="36"/></operator><name pos:line="54" pos:column="32">buf<pos:position pos:line="54" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="37">"service rejected"<pos:position pos:line="54" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="57"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="55" pos:column="9">eol<pos:position pos:line="55" pos:column="12"/></name> <operator pos:line="55" pos:column="13">=<pos:position pos:line="55" pos:column="14"/></operator> <call><name pos:line="55" pos:column="15">strchr<pos:position pos:line="55" pos:column="21"/></name><argument_list pos:line="55" pos:column="21">(<argument><expr><name><name pos:line="55" pos:column="22">buf<pos:position pos:line="55" pos:column="25"/></name><operator pos:line="55" pos:column="25">.<pos:position pos:line="55" pos:column="26"/></operator><name pos:line="55" pos:column="26">buf<pos:position pos:line="55" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="55" pos:column="31">'\n'<pos:position pos:line="55" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="37"/></expr_stmt>
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">eol<pos:position pos:line="56" pos:column="16"/></name></expr>)<pos:position pos:line="56" pos:column="17"/></condition><then pos:line="56" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="57" pos:column="17">*<pos:position pos:line="57" pos:column="18"/></operator><name pos:line="57" pos:column="18">eol<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">=<pos:position pos:line="57" pos:column="23"/></operator> <literal type="char" pos:line="57" pos:column="24">'\0'<pos:position pos:line="57" pos:column="28"/></literal></expr>;<pos:position pos:line="57" pos:column="29"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="58" pos:column="9">errno<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">=<pos:position pos:line="58" pos:column="16"/></operator> <name pos:line="58" pos:column="17">EACCES<pos:position pos:line="58" pos:column="23"/></name></expr>;<pos:position pos:line="58" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="59" pos:column="9">daemon_error<pos:position pos:line="59" pos:column="21"/></name><argument_list pos:line="59" pos:column="21">(<argument><expr><name pos:line="59" pos:column="22">dir<pos:position pos:line="59" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="27">buf<pos:position pos:line="59" pos:column="30"/></name><operator pos:line="59" pos:column="30">.<pos:position pos:line="59" pos:column="31"/></operator><name pos:line="59" pos:column="31">buf<pos:position pos:line="59" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">strbuf_release<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><operator pos:line="60" pos:column="24">&amp;<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="25">buf<pos:position pos:line="60" pos:column="28"/></name></expr></argument>)<pos:position pos:line="60" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt>
	<return pos:line="61" pos:column="9">return <expr><operator pos:line="61" pos:column="16">-<pos:position pos:line="61" pos:column="17"/></operator><literal type="number" pos:line="61" pos:column="17">1<pos:position pos:line="61" pos:column="18"/></literal></expr>;<pos:position pos:line="61" pos:column="19"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
