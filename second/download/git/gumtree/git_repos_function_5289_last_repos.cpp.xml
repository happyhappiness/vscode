<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5289_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">show_rev<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">type<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">object_id<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">oid<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="61">const<pos:position pos:line="1" pos:column="66"/></specifier> <name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">name<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><operator pos:line="3" pos:column="14">(<pos:position pos:line="3" pos:column="15"/></operator><name pos:line="3" pos:column="15">filter<pos:position pos:line="3" pos:column="21"/></name> <operator pos:line="3" pos:column="22">&amp;<pos:position pos:line="3" pos:column="27"/></operator> <name pos:line="3" pos:column="24">DO_REVS<pos:position pos:line="3" pos:column="31"/></name><operator pos:line="3" pos:column="31">)<pos:position pos:line="3" pos:column="32"/></operator></expr>)<pos:position pos:line="3" pos:column="33"/></condition><then pos:line="3" pos:column="33">
		<block type="pseudo"><return pos:line="4" pos:column="17">return;<pos:position pos:line="4" pos:column="24"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="5" pos:column="9">def<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">=<pos:position pos:line="5" pos:column="14"/></operator> <name pos:line="5" pos:column="15">NULL<pos:position pos:line="5" pos:column="19"/></name></expr>;<pos:position pos:line="5" pos:column="20"/></expr_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">(<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">symbolic<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">||<pos:position pos:line="7" pos:column="25"/></operator> <name pos:line="7" pos:column="26">abbrev_ref<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">)<pos:position pos:line="7" pos:column="37"/></operator> <operator pos:line="7" pos:column="38">&amp;&amp;<pos:position pos:line="7" pos:column="48"/></operator> <name pos:line="7" pos:column="41">name<pos:position pos:line="7" pos:column="45"/></name></expr>)<pos:position pos:line="7" pos:column="46"/></condition><then pos:line="7" pos:column="46"> <block pos:line="7" pos:column="47">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">symbolic<pos:position pos:line="8" pos:column="29"/></name> <operator pos:line="8" pos:column="30">==<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="33">SHOW_SYMBOLIC_FULL<pos:position pos:line="8" pos:column="51"/></name> <operator pos:line="8" pos:column="52">||<pos:position pos:line="8" pos:column="54"/></operator> <name pos:line="8" pos:column="55">abbrev_ref<pos:position pos:line="8" pos:column="65"/></name></expr>)<pos:position pos:line="8" pos:column="66"/></condition><then pos:line="8" pos:column="66"> <block pos:line="8" pos:column="67">{
			<decl_stmt><decl><type><name><name pos:line="9" pos:column="25">struct<pos:position pos:line="9" pos:column="31"/></name> <name pos:line="9" pos:column="32">object_id<pos:position pos:line="9" pos:column="41"/></name></name></type> <name pos:line="9" pos:column="42">discard<pos:position pos:line="9" pos:column="49"/></name></decl>;<pos:position pos:line="9" pos:column="50"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="10" pos:column="25">char<pos:position pos:line="10" pos:column="29"/></name> <modifier pos:line="10" pos:column="30">*<pos:position pos:line="10" pos:column="31"/></modifier></type><name pos:line="10" pos:column="31">full<pos:position pos:line="10" pos:column="35"/></name></decl>;<pos:position pos:line="10" pos:column="36"/></decl_stmt>

			<switch pos:line="12" pos:column="25">switch <condition pos:line="12" pos:column="32">(<expr><call><name pos:line="12" pos:column="33">dwim_ref<pos:position pos:line="12" pos:column="41"/></name><argument_list pos:line="12" pos:column="41">(<argument><expr><name pos:line="12" pos:column="42">name<pos:position pos:line="12" pos:column="46"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="48">strlen<pos:position pos:line="12" pos:column="54"/></name><argument_list pos:line="12" pos:column="54">(<argument><expr><name pos:line="12" pos:column="55">name<pos:position pos:line="12" pos:column="59"/></name></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="62">discard<pos:position pos:line="12" pos:column="69"/></name><operator pos:line="12" pos:column="69">.<pos:position pos:line="12" pos:column="70"/></operator><name pos:line="12" pos:column="70">hash<pos:position pos:line="12" pos:column="74"/></name></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="76">&amp;<pos:position pos:line="12" pos:column="81"/></operator><name pos:line="12" pos:column="77">full<pos:position pos:line="12" pos:column="81"/></name></expr></argument>)<pos:position pos:line="12" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="83"/></condition> <block pos:line="12" pos:column="84">{
			<case pos:line="13" pos:column="25">case <expr><literal type="number" pos:line="13" pos:column="30">0<pos:position pos:line="13" pos:column="31"/></literal></expr>:<pos:position pos:line="13" pos:column="32"/></case>
				<comment type="block" pos:line="14" pos:column="33">/*
				 * Not found -- not a ref.  We could
				 * emit "name" here, but symbolic-full
				 * users are interested in finding the
				 * refs spelled in full, and they would
				 * need to filter non-refs if we did so.
				 */</comment>
				<break pos:line="21" pos:column="33">break;<pos:position pos:line="21" pos:column="39"/></break>
			<case pos:line="22" pos:column="25">case <expr><literal type="number" pos:line="22" pos:column="30">1<pos:position pos:line="22" pos:column="31"/></literal></expr>:<pos:position pos:line="22" pos:column="32"/></case> <comment type="block" pos:line="22" pos:column="33">/* happy */</comment>
				<if pos:line="23" pos:column="33">if <condition pos:line="23" pos:column="36">(<expr><name pos:line="23" pos:column="37">abbrev_ref<pos:position pos:line="23" pos:column="47"/></name></expr>)<pos:position pos:line="23" pos:column="48"/></condition><then pos:line="23" pos:column="48">
					<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="41">full<pos:position pos:line="24" pos:column="45"/></name> <operator pos:line="24" pos:column="46">=<pos:position pos:line="24" pos:column="47"/></operator> <call><name pos:line="24" pos:column="48">shorten_unambiguous_ref<pos:position pos:line="24" pos:column="71"/></name><argument_list pos:line="24" pos:column="71">(<argument><expr><name pos:line="24" pos:column="72">full<pos:position pos:line="24" pos:column="76"/></name></expr></argument>,
						<argument><expr><name pos:line="25" pos:column="49">abbrev_ref_strict<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="26" pos:column="33">show_with_type<pos:position pos:line="26" pos:column="47"/></name><argument_list pos:line="26" pos:column="47">(<argument><expr><name pos:line="26" pos:column="48">type<pos:position pos:line="26" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="54">full<pos:position pos:line="26" pos:column="58"/></name></expr></argument>)<pos:position pos:line="26" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="60"/></expr_stmt>
				<break pos:line="27" pos:column="33">break;<pos:position pos:line="27" pos:column="39"/></break>
			<default pos:line="28" pos:column="25">default:<pos:position pos:line="28" pos:column="33"/></default> <comment type="block" pos:line="28" pos:column="34">/* ambiguous */</comment>
				<expr_stmt><expr><call><name pos:line="29" pos:column="33">error<pos:position pos:line="29" pos:column="38"/></name><argument_list pos:line="29" pos:column="38">(<argument><expr><literal type="string" pos:line="29" pos:column="39">"refname '%s' is ambiguous"<pos:position pos:line="29" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="68">name<pos:position pos:line="29" pos:column="72"/></name></expr></argument>)<pos:position pos:line="29" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="74"/></expr_stmt>
				<break pos:line="30" pos:column="33">break;<pos:position pos:line="30" pos:column="39"/></break>
			}<pos:position pos:line="31" pos:column="26"/></block></switch>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">free<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">full<pos:position pos:line="32" pos:column="34"/></name></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></then> <else pos:line="33" pos:column="19">else <block pos:line="33" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">show_with_type<pos:position pos:line="34" pos:column="39"/></name><argument_list pos:line="34" pos:column="39">(<argument><expr><name pos:line="34" pos:column="40">type<pos:position pos:line="34" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="46">name<pos:position pos:line="34" pos:column="50"/></name></expr></argument>)<pos:position pos:line="34" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></else></if>
	}<pos:position pos:line="36" pos:column="10"/></block></then>
	<elseif pos:line="37" pos:column="9">else <if pos:line="37" pos:column="14">if <condition pos:line="37" pos:column="17">(<expr><name pos:line="37" pos:column="18">abbrev<pos:position pos:line="37" pos:column="24"/></name></expr>)<pos:position pos:line="37" pos:column="25"/></condition><then pos:line="37" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="17">show_with_type<pos:position pos:line="38" pos:column="31"/></name><argument_list pos:line="38" pos:column="31">(<argument><expr><name pos:line="38" pos:column="32">type<pos:position pos:line="38" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="38">find_unique_abbrev<pos:position pos:line="38" pos:column="56"/></name><argument_list pos:line="38" pos:column="56">(<argument><expr><name><name pos:line="38" pos:column="57">oid<pos:position pos:line="38" pos:column="60"/></name><operator pos:line="38" pos:column="60">-&gt;<pos:position pos:line="38" pos:column="65"/></operator><name pos:line="38" pos:column="62">hash<pos:position pos:line="38" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="68">abbrev<pos:position pos:line="38" pos:column="74"/></name></expr></argument>)<pos:position pos:line="38" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="77"/></expr_stmt></block></then></if></elseif>
	<else pos:line="39" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="17">show_with_type<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><name pos:line="40" pos:column="32">type<pos:position pos:line="40" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="40" pos:column="38">oid_to_hex<pos:position pos:line="40" pos:column="48"/></name><argument_list pos:line="40" pos:column="48">(<argument><expr><name pos:line="40" pos:column="49">oid<pos:position pos:line="40" pos:column="52"/></name></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt></block></else></if>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
