<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5000_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">checkout<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">void<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name><name pos:line="3" pos:column="23">sha1<pos:position pos:line="3" pos:column="27"/></name><index pos:line="3" pos:column="27">[<expr><literal type="number" pos:line="3" pos:column="28">20<pos:position pos:line="3" pos:column="30"/></literal></expr>]<pos:position pos:line="3" pos:column="31"/></index></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">head<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">lock_file<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">lock_file<pos:position pos:line="5" pos:column="36"/></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">unpack_trees_options<pos:position pos:line="6" pos:column="36"/></name></name></type> <name pos:line="6" pos:column="37">opts<pos:position pos:line="6" pos:column="41"/></name></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">tree<pos:position pos:line="7" pos:column="20"/></name></name> <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier></type><name pos:line="7" pos:column="22">tree<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">tree_desc<pos:position pos:line="8" pos:column="25"/></name></name></type> <name pos:line="8" pos:column="26">t<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">err<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">option_no_checkout<pos:position pos:line="11" pos:column="31"/></name></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="14" pos:column="9">head<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <call><name pos:line="14" pos:column="16">resolve_refdup<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><literal type="string" pos:line="14" pos:column="31">"HEAD"<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="39">RESOLVE_REF_READING<pos:position pos:line="14" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="60">sha1<pos:position pos:line="14" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="66">NULL<pos:position pos:line="14" pos:column="70"/></name></expr></argument>)<pos:position pos:line="14" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="72"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">head<pos:position pos:line="15" pos:column="18"/></name></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19"> <block pos:line="15" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">warning<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><call><name pos:line="16" pos:column="25">_<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><literal type="string" pos:line="16" pos:column="27">"remote HEAD refers to nonexistent ref, "<pos:position pos:line="16" pos:column="68"/></literal>
			  <literal type="string" pos:line="17" pos:column="27">"unable to checkout.\n"<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><literal type="number" pos:line="18" pos:column="24">0<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><call><name pos:line="20" pos:column="14">strcmp<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">head<pos:position pos:line="20" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="27">"HEAD"<pos:position pos:line="20" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="35"/></condition><then pos:line="20" pos:column="35"> <block pos:line="20" pos:column="36">{
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">advice_detached_head<pos:position pos:line="21" pos:column="41"/></name></expr>)<pos:position pos:line="21" pos:column="42"/></condition><then pos:line="21" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">detach_advice<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><call><name pos:line="22" pos:column="39">sha1_to_hex<pos:position pos:line="22" pos:column="50"/></name><argument_list pos:line="22" pos:column="50">(<argument><expr><name pos:line="22" pos:column="51">sha1<pos:position pos:line="22" pos:column="55"/></name></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt></block></then></if>
	}<pos:position pos:line="23" pos:column="10"/></block></then> <else pos:line="23" pos:column="11">else <block pos:line="23" pos:column="16">{
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><call><name pos:line="24" pos:column="22">starts_with<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><name pos:line="24" pos:column="34">head<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="40">"refs/heads/"<pos:position pos:line="24" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="55"/></condition><then pos:line="24" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">die<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><call><name pos:line="25" pos:column="29">_<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><literal type="string" pos:line="25" pos:column="31">"HEAD not found below refs/heads!"<pos:position pos:line="25" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">free<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><name pos:line="27" pos:column="14">head<pos:position pos:line="27" pos:column="18"/></name></expr></argument>)<pos:position pos:line="27" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="20"/></expr_stmt>

	<comment type="block" pos:line="29" pos:column="9">/* We need to be in the new work tree for the checkout */</comment>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">setup_work_tree<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">()<pos:position pos:line="30" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt>

	<expr_stmt><expr><name pos:line="32" pos:column="9">lock_file<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <call><name pos:line="32" pos:column="21">xcalloc<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><literal type="number" pos:line="32" pos:column="29">1<pos:position pos:line="32" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="32">sizeof<argument_list pos:line="32" pos:column="38">(<argument><expr pos:line="32" pos:column="39">struct <name pos:line="32" pos:column="46">lock_file<pos:position pos:line="32" pos:column="55"/></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">hold_locked_index<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><name pos:line="33" pos:column="27">lock_file<pos:position pos:line="33" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="38">1<pos:position pos:line="33" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="35" pos:column="9">memset<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><operator pos:line="35" pos:column="16">&amp;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="17">opts<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="23">0<pos:position pos:line="35" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="26">sizeof <name pos:line="35" pos:column="33">opts<pos:position pos:line="35" pos:column="37"/></name></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="36" pos:column="9">opts<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">.<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">update<pos:position pos:line="36" pos:column="20"/></name></name> <operator pos:line="36" pos:column="21">=<pos:position pos:line="36" pos:column="22"/></operator> <literal type="number" pos:line="36" pos:column="23">1<pos:position pos:line="36" pos:column="24"/></literal></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">opts<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">.<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">merge<pos:position pos:line="37" pos:column="19"/></name></name> <operator pos:line="37" pos:column="20">=<pos:position pos:line="37" pos:column="21"/></operator> <literal type="number" pos:line="37" pos:column="22">1<pos:position pos:line="37" pos:column="23"/></literal></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="38" pos:column="9">opts<pos:position pos:line="38" pos:column="13"/></name><operator pos:line="38" pos:column="13">.<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">fn<pos:position pos:line="38" pos:column="16"/></name></name> <operator pos:line="38" pos:column="17">=<pos:position pos:line="38" pos:column="18"/></operator> <name pos:line="38" pos:column="19">oneway_merge<pos:position pos:line="38" pos:column="31"/></name></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="39" pos:column="9">opts<pos:position pos:line="39" pos:column="13"/></name><operator pos:line="39" pos:column="13">.<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="14">verbose_update<pos:position pos:line="39" pos:column="28"/></name></name> <operator pos:line="39" pos:column="29">=<pos:position pos:line="39" pos:column="30"/></operator> <operator pos:line="39" pos:column="31">(<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="32">option_verbosity<pos:position pos:line="39" pos:column="48"/></name> <operator pos:line="39" pos:column="49">&gt;=<pos:position pos:line="39" pos:column="54"/></operator> <literal type="number" pos:line="39" pos:column="52">0<pos:position pos:line="39" pos:column="53"/></literal><operator pos:line="39" pos:column="53">)<pos:position pos:line="39" pos:column="54"/></operator></expr>;<pos:position pos:line="39" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">opts<pos:position pos:line="40" pos:column="13"/></name><operator pos:line="40" pos:column="13">.<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="14">src_index<pos:position pos:line="40" pos:column="23"/></name></name> <operator pos:line="40" pos:column="24">=<pos:position pos:line="40" pos:column="25"/></operator> <operator pos:line="40" pos:column="26">&amp;<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="27">the_index<pos:position pos:line="40" pos:column="36"/></name></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="41" pos:column="9">opts<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">.<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="14">dst_index<pos:position pos:line="41" pos:column="23"/></name></name> <operator pos:line="41" pos:column="24">=<pos:position pos:line="41" pos:column="25"/></operator> <operator pos:line="41" pos:column="26">&amp;<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="27">the_index<pos:position pos:line="41" pos:column="36"/></name></expr>;<pos:position pos:line="41" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><name pos:line="43" pos:column="9">tree<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <call><name pos:line="43" pos:column="16">parse_tree_indirect<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">(<argument><expr><name pos:line="43" pos:column="36">sha1<pos:position pos:line="43" pos:column="40"/></name></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">parse_tree<pos:position pos:line="44" pos:column="19"/></name><argument_list pos:line="44" pos:column="19">(<argument><expr><name pos:line="44" pos:column="20">tree<pos:position pos:line="44" pos:column="24"/></name></expr></argument>)<pos:position pos:line="44" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">init_tree_desc<pos:position pos:line="45" pos:column="23"/></name><argument_list pos:line="45" pos:column="23">(<argument><expr><operator pos:line="45" pos:column="24">&amp;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="25">t<pos:position pos:line="45" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="28">tree<pos:position pos:line="45" pos:column="32"/></name><operator pos:line="45" pos:column="32">-&gt;<pos:position pos:line="45" pos:column="37"/></operator><name pos:line="45" pos:column="34">buffer<pos:position pos:line="45" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="42">tree<pos:position pos:line="45" pos:column="46"/></name><operator pos:line="45" pos:column="46">-&gt;<pos:position pos:line="45" pos:column="51"/></operator><name pos:line="45" pos:column="48">size<pos:position pos:line="45" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="54"/></expr_stmt>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">unpack_trees<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><literal type="number" pos:line="46" pos:column="26">1<pos:position pos:line="46" pos:column="27"/></literal></expr></argument>, <argument><expr><operator pos:line="46" pos:column="29">&amp;<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="30">t<pos:position pos:line="46" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="33">&amp;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="34">opts<pos:position pos:line="46" pos:column="38"/></name></expr></argument>)<pos:position pos:line="46" pos:column="39"/></argument_list></call> <operator pos:line="46" pos:column="40">&lt;<pos:position pos:line="46" pos:column="44"/></operator> <literal type="number" pos:line="46" pos:column="42">0<pos:position pos:line="46" pos:column="43"/></literal></expr>)<pos:position pos:line="46" pos:column="44"/></condition><then pos:line="46" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">die<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><call><name pos:line="47" pos:column="21">_<pos:position pos:line="47" pos:column="22"/></name><argument_list pos:line="47" pos:column="22">(<argument><expr><literal type="string" pos:line="47" pos:column="23">"unable to checkout working tree"<pos:position pos:line="47" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="59"/></expr_stmt></block></then></if>

	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><call><name pos:line="49" pos:column="13">write_locked_index<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><operator pos:line="49" pos:column="32">&amp;<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="33">the_index<pos:position pos:line="49" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="44">lock_file<pos:position pos:line="49" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="55">COMMIT_LOCK<pos:position pos:line="49" pos:column="66"/></name></expr></argument>)<pos:position pos:line="49" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="68"/></condition><then pos:line="49" pos:column="68">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="17">die<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><call><name pos:line="50" pos:column="21">_<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><literal type="string" pos:line="50" pos:column="23">"unable to write new index file"<pos:position pos:line="50" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="52" pos:column="9">err<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">|=<pos:position pos:line="52" pos:column="15"/></operator> <call><name pos:line="52" pos:column="16">run_hook_le<pos:position pos:line="52" pos:column="27"/></name><argument_list pos:line="52" pos:column="27">(<argument><expr><name pos:line="52" pos:column="28">NULL<pos:position pos:line="52" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="34">"post-checkout"<pos:position pos:line="52" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="52" pos:column="51">sha1_to_hex<pos:position pos:line="52" pos:column="62"/></name><argument_list pos:line="52" pos:column="62">(<argument><expr><name pos:line="52" pos:column="63">null_sha1<pos:position pos:line="52" pos:column="72"/></name></expr></argument>)<pos:position pos:line="52" pos:column="73"/></argument_list></call></expr></argument>,
			   <argument><expr><call><name pos:line="53" pos:column="28">sha1_to_hex<pos:position pos:line="53" pos:column="39"/></name><argument_list pos:line="53" pos:column="39">(<argument><expr><name pos:line="53" pos:column="40">sha1<pos:position pos:line="53" pos:column="44"/></name></expr></argument>)<pos:position pos:line="53" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="47">"1"<pos:position pos:line="53" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="52">NULL<pos:position pos:line="53" pos:column="56"/></name></expr></argument>)<pos:position pos:line="53" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="58"/></expr_stmt>

	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="14">err<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">&amp;&amp;<pos:position pos:line="55" pos:column="28"/></operator> <name pos:line="55" pos:column="21">option_recursive<pos:position pos:line="55" pos:column="37"/></name></expr>)<pos:position pos:line="55" pos:column="38"/></condition><then pos:line="55" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="17">err<pos:position pos:line="56" pos:column="20"/></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <call><name pos:line="56" pos:column="23">run_command_v_opt<pos:position pos:line="56" pos:column="40"/></name><argument_list pos:line="56" pos:column="40">(<argument><expr><name pos:line="56" pos:column="41">argv_submodule<pos:position pos:line="56" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="57">RUN_GIT_CMD<pos:position pos:line="56" pos:column="68"/></name></expr></argument>)<pos:position pos:line="56" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="70"/></expr_stmt></block></then></if>

	<return pos:line="58" pos:column="9">return <expr><name pos:line="58" pos:column="16">err<pos:position pos:line="58" pos:column="19"/></name></expr>;<pos:position pos:line="58" pos:column="20"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
