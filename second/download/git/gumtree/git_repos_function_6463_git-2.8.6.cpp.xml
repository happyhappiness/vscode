<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6463_git-2.8.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">pick_rref<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">sha1_only<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">rref<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">ls_remote_result<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="84"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">err<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><literal type="number" pos:line="3" pos:column="19">0<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">lrr_count<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name pos:line="4" pos:column="25">lrr_count<pos:position pos:line="4" pos:column="34"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="36">i<pos:position pos:line="4" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="39">pass<pos:position pos:line="4" pos:column="43"/></name></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">cp<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<struct pos:line="6" pos:column="9">struct <name pos:line="6" pos:column="16">lrr<pos:position pos:line="6" pos:column="19"/></name> <block pos:line="6" pos:column="20">{<public type="default" pos:line="6" pos:column="21">
		<decl_stmt><decl><type><specifier pos:line="7" pos:column="17">const<pos:position pos:line="7" pos:column="22"/></specifier> <name pos:line="7" pos:column="23">char<pos:position pos:line="7" pos:column="27"/></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">line<pos:position pos:line="7" pos:column="33"/></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">name<pos:position pos:line="8" pos:column="33"/></name></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">namelen<pos:position pos:line="9" pos:column="28"/></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">shown<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
	<pos:position pos:line="11" pos:column="2"/></public>}<pos:position pos:line="11" pos:column="10"/></block> <decl><modifier pos:line="11" pos:column="11">*<pos:position pos:line="11" pos:column="12"/></modifier><name pos:line="11" pos:column="12">lrr_list<pos:position pos:line="11" pos:column="20"/></name> <init pos:line="11" pos:column="21">= <expr><name pos:line="11" pos:column="23">lrr_list<pos:position pos:line="11" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="32"/></struct>

	<for pos:line="13" pos:column="9">for <control pos:line="13" pos:column="13">(<init><expr><name pos:line="13" pos:column="14">pass<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <literal type="number" pos:line="13" pos:column="21">0<pos:position pos:line="13" pos:column="22"/></literal></expr>;<pos:position pos:line="13" pos:column="23"/></init> <condition><expr><name pos:line="13" pos:column="24">pass<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">&lt;<pos:position pos:line="13" pos:column="33"/></operator> <literal type="number" pos:line="13" pos:column="31">2<pos:position pos:line="13" pos:column="32"/></literal></expr>;<pos:position pos:line="13" pos:column="33"/></condition> <incr><expr><name pos:line="13" pos:column="34">pass<pos:position pos:line="13" pos:column="38"/></name><operator pos:line="13" pos:column="38">++<pos:position pos:line="13" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="41"/></control> <block pos:line="13" pos:column="42">{
		<comment type="block" pos:line="14" pos:column="17">/* pass 0 counts and allocates, pass 1 fills... */</comment>
		<expr_stmt><expr><name pos:line="15" pos:column="17">cp<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">=<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">ls_remote_result<pos:position pos:line="15" pos:column="38"/></name></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">i<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <literal type="number" pos:line="16" pos:column="21">0<pos:position pos:line="16" pos:column="22"/></literal></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
		<while pos:line="17" pos:column="17">while <condition pos:line="17" pos:column="23">(<expr><literal type="number" pos:line="17" pos:column="24">1<pos:position pos:line="17" pos:column="25"/></literal></expr>)<pos:position pos:line="17" pos:column="26"/></condition> <block pos:line="17" pos:column="27">{
			<decl_stmt><decl><type><specifier pos:line="18" pos:column="25">const<pos:position pos:line="18" pos:column="30"/></specifier> <name pos:line="18" pos:column="31">char<pos:position pos:line="18" pos:column="35"/></name> <modifier pos:line="18" pos:column="36">*<pos:position pos:line="18" pos:column="37"/></modifier></type><name pos:line="18" pos:column="37">np<pos:position pos:line="18" pos:column="39"/></name></decl>;<pos:position pos:line="18" pos:column="40"/></decl_stmt>
			<while pos:line="19" pos:column="25">while <condition pos:line="19" pos:column="31">(<expr><operator pos:line="19" pos:column="32">*<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="33">cp<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">&amp;&amp;<pos:position pos:line="19" pos:column="46"/></operator> <call><name pos:line="19" pos:column="39">isspace<pos:position pos:line="19" pos:column="46"/></name><argument_list pos:line="19" pos:column="46">(<argument><expr><operator pos:line="19" pos:column="47">*<pos:position pos:line="19" pos:column="48"/></operator><name pos:line="19" pos:column="48">cp<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="52"/></condition>
				<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="33">cp<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">++<pos:position pos:line="20" pos:column="37"/></operator></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt></block></while>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><operator pos:line="21" pos:column="29">!<pos:position pos:line="21" pos:column="30"/></operator><operator pos:line="21" pos:column="30">*<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">cp<pos:position pos:line="21" pos:column="33"/></name></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34">
				<block type="pseudo"><break pos:line="22" pos:column="33">break;<pos:position pos:line="22" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="23" pos:column="25">np<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">=<pos:position pos:line="23" pos:column="29"/></operator> <call><name pos:line="23" pos:column="30">strchrnul<pos:position pos:line="23" pos:column="39"/></name><argument_list pos:line="23" pos:column="39">(<argument><expr><name pos:line="23" pos:column="40">cp<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="44">'\n'<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name pos:line="24" pos:column="29">pass<pos:position pos:line="24" pos:column="33"/></name></expr>)<pos:position pos:line="24" pos:column="34"/></condition><then pos:line="24" pos:column="34"> <block pos:line="24" pos:column="35">{
				<expr_stmt><expr><name><name pos:line="25" pos:column="33">lrr_list<pos:position pos:line="25" pos:column="41"/></name><index pos:line="25" pos:column="41">[<expr><name pos:line="25" pos:column="42">i<pos:position pos:line="25" pos:column="43"/></name></expr>]<pos:position pos:line="25" pos:column="44"/></index></name><operator pos:line="25" pos:column="44">.<pos:position pos:line="25" pos:column="45"/></operator><name pos:line="25" pos:column="45">line<pos:position pos:line="25" pos:column="49"/></name> <operator pos:line="25" pos:column="50">=<pos:position pos:line="25" pos:column="51"/></operator> <name pos:line="25" pos:column="52">cp<pos:position pos:line="25" pos:column="54"/></name></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="26" pos:column="33">lrr_list<pos:position pos:line="26" pos:column="41"/></name><index pos:line="26" pos:column="41">[<expr><name pos:line="26" pos:column="42">i<pos:position pos:line="26" pos:column="43"/></name></expr>]<pos:position pos:line="26" pos:column="44"/></index></name><operator pos:line="26" pos:column="44">.<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="45">name<pos:position pos:line="26" pos:column="49"/></name> <operator pos:line="26" pos:column="50">=<pos:position pos:line="26" pos:column="51"/></operator> <name pos:line="26" pos:column="52">cp<pos:position pos:line="26" pos:column="54"/></name> <operator pos:line="26" pos:column="55">+<pos:position pos:line="26" pos:column="56"/></operator> <literal type="number" pos:line="26" pos:column="57">41<pos:position pos:line="26" pos:column="59"/></literal></expr>;<pos:position pos:line="26" pos:column="60"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="27" pos:column="33">lrr_list<pos:position pos:line="27" pos:column="41"/></name><index pos:line="27" pos:column="41">[<expr><name pos:line="27" pos:column="42">i<pos:position pos:line="27" pos:column="43"/></name></expr>]<pos:position pos:line="27" pos:column="44"/></index></name><operator pos:line="27" pos:column="44">.<pos:position pos:line="27" pos:column="45"/></operator><name pos:line="27" pos:column="45">namelen<pos:position pos:line="27" pos:column="52"/></name> <operator pos:line="27" pos:column="53">=<pos:position pos:line="27" pos:column="54"/></operator> <name pos:line="27" pos:column="55">np<pos:position pos:line="27" pos:column="57"/></name> <operator pos:line="27" pos:column="58">-<pos:position pos:line="27" pos:column="59"/></operator> <operator pos:line="27" pos:column="60">(<pos:position pos:line="27" pos:column="61"/></operator><name pos:line="27" pos:column="61">cp<pos:position pos:line="27" pos:column="63"/></name> <operator pos:line="27" pos:column="64">+<pos:position pos:line="27" pos:column="65"/></operator> <literal type="number" pos:line="27" pos:column="66">41<pos:position pos:line="27" pos:column="68"/></literal><operator pos:line="27" pos:column="68">)<pos:position pos:line="27" pos:column="69"/></operator></expr>;<pos:position pos:line="27" pos:column="70"/></expr_stmt>
			}<pos:position pos:line="28" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="29" pos:column="25">i<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">++<pos:position pos:line="29" pos:column="28"/></operator></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>
			<expr_stmt><expr><name pos:line="30" pos:column="25">cp<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">=<pos:position pos:line="30" pos:column="29"/></operator> <name pos:line="30" pos:column="30">np<pos:position pos:line="30" pos:column="32"/></name></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></while>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><operator pos:line="32" pos:column="21">!<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">pass<pos:position pos:line="32" pos:column="26"/></name></expr>)<pos:position pos:line="32" pos:column="27"/></condition><then pos:line="32" pos:column="27"> <block pos:line="32" pos:column="28">{
			<expr_stmt><expr><name pos:line="33" pos:column="25">lrr_count<pos:position pos:line="33" pos:column="34"/></name> <operator pos:line="33" pos:column="35">=<pos:position pos:line="33" pos:column="36"/></operator> <name pos:line="33" pos:column="37">i<pos:position pos:line="33" pos:column="38"/></name></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="34" pos:column="25">lrr_list<pos:position pos:line="34" pos:column="33"/></name> <operator pos:line="34" pos:column="34">=<pos:position pos:line="34" pos:column="35"/></operator> <call><name pos:line="34" pos:column="36">xcalloc<pos:position pos:line="34" pos:column="43"/></name><argument_list pos:line="34" pos:column="43">(<argument><expr><name pos:line="34" pos:column="44">lrr_count<pos:position pos:line="34" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="55">sizeof<argument_list pos:line="34" pos:column="61">(<argument><expr><operator pos:line="34" pos:column="62">*<pos:position pos:line="34" pos:column="63"/></operator><name pos:line="34" pos:column="63">lrr_list<pos:position pos:line="34" pos:column="71"/></name></expr></argument>)<pos:position pos:line="34" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="74"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
	}<pos:position pos:line="36" pos:column="10"/></block></for>

	<while pos:line="38" pos:column="9">while <condition pos:line="38" pos:column="15">(<expr><literal type="number" pos:line="38" pos:column="16">1<pos:position pos:line="38" pos:column="17"/></literal></expr>)<pos:position pos:line="38" pos:column="18"/></condition> <block pos:line="38" pos:column="19">{
		<decl_stmt><decl><type><specifier pos:line="39" pos:column="17">const<pos:position pos:line="39" pos:column="22"/></specifier> <name pos:line="39" pos:column="23">char<pos:position pos:line="39" pos:column="27"/></name> <modifier pos:line="39" pos:column="28">*<pos:position pos:line="39" pos:column="29"/></modifier></type><name pos:line="39" pos:column="29">next<pos:position pos:line="39" pos:column="33"/></name></decl>;<pos:position pos:line="39" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">int<pos:position pos:line="40" pos:column="20"/></name></type> <name pos:line="40" pos:column="21">rreflen<pos:position pos:line="40" pos:column="28"/></name></decl>;<pos:position pos:line="40" pos:column="29"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="41" pos:column="17">int<pos:position pos:line="41" pos:column="20"/></name></type> <name pos:line="41" pos:column="21">i<pos:position pos:line="41" pos:column="22"/></name></decl>;<pos:position pos:line="41" pos:column="23"/></decl_stmt>

		<while pos:line="43" pos:column="17">while <condition pos:line="43" pos:column="23">(<expr><operator pos:line="43" pos:column="24">*<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="25">rref<pos:position pos:line="43" pos:column="29"/></name> <operator pos:line="43" pos:column="30">&amp;&amp;<pos:position pos:line="43" pos:column="40"/></operator> <call><name pos:line="43" pos:column="33">isspace<pos:position pos:line="43" pos:column="40"/></name><argument_list pos:line="43" pos:column="40">(<argument><expr><operator pos:line="43" pos:column="41">*<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="42">rref<pos:position pos:line="43" pos:column="46"/></name></expr></argument>)<pos:position pos:line="43" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="48"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="25">rref<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">++<pos:position pos:line="44" pos:column="31"/></operator></expr>;<pos:position pos:line="44" pos:column="32"/></expr_stmt></block></while>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><operator pos:line="45" pos:column="21">!<pos:position pos:line="45" pos:column="22"/></operator><operator pos:line="45" pos:column="22">*<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="23">rref<pos:position pos:line="45" pos:column="27"/></name></expr>)<pos:position pos:line="45" pos:column="28"/></condition><then pos:line="45" pos:column="28">
			<block type="pseudo"><break pos:line="46" pos:column="25">break;<pos:position pos:line="46" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="47" pos:column="17">next<pos:position pos:line="47" pos:column="21"/></name> <operator pos:line="47" pos:column="22">=<pos:position pos:line="47" pos:column="23"/></operator> <call><name pos:line="47" pos:column="24">strchrnul<pos:position pos:line="47" pos:column="33"/></name><argument_list pos:line="47" pos:column="33">(<argument><expr><name pos:line="47" pos:column="34">rref<pos:position pos:line="47" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="47" pos:column="40">'\n'<pos:position pos:line="47" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="48" pos:column="17">rreflen<pos:position pos:line="48" pos:column="24"/></name> <operator pos:line="48" pos:column="25">=<pos:position pos:line="48" pos:column="26"/></operator> <name pos:line="48" pos:column="27">next<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">-<pos:position pos:line="48" pos:column="33"/></operator> <name pos:line="48" pos:column="34">rref<pos:position pos:line="48" pos:column="38"/></name></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>

		<for pos:line="50" pos:column="17">for <control pos:line="50" pos:column="21">(<init><expr><name pos:line="50" pos:column="22">i<pos:position pos:line="50" pos:column="23"/></name> <operator pos:line="50" pos:column="24">=<pos:position pos:line="50" pos:column="25"/></operator> <literal type="number" pos:line="50" pos:column="26">0<pos:position pos:line="50" pos:column="27"/></literal></expr>;<pos:position pos:line="50" pos:column="28"/></init> <condition><expr><name pos:line="50" pos:column="29">i<pos:position pos:line="50" pos:column="30"/></name> <operator pos:line="50" pos:column="31">&lt;<pos:position pos:line="50" pos:column="35"/></operator> <name pos:line="50" pos:column="33">lrr_count<pos:position pos:line="50" pos:column="42"/></name></expr>;<pos:position pos:line="50" pos:column="43"/></condition> <incr><expr><name pos:line="50" pos:column="44">i<pos:position pos:line="50" pos:column="45"/></name><operator pos:line="50" pos:column="45">++<pos:position pos:line="50" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="50" pos:column="48"/></control> <block pos:line="50" pos:column="49">{
			<decl_stmt><decl><type><name><name pos:line="51" pos:column="25">struct<pos:position pos:line="51" pos:column="31"/></name> <name pos:line="51" pos:column="32">lrr<pos:position pos:line="51" pos:column="35"/></name></name> <modifier pos:line="51" pos:column="36">*<pos:position pos:line="51" pos:column="37"/></modifier></type><name pos:line="51" pos:column="37">lrr<pos:position pos:line="51" pos:column="40"/></name> <init pos:line="51" pos:column="41">= <expr><operator pos:line="51" pos:column="43">&amp;<pos:position pos:line="51" pos:column="48"/></operator><operator pos:line="51" pos:column="44">(<pos:position pos:line="51" pos:column="45"/></operator><name><name pos:line="51" pos:column="45">lrr_list<pos:position pos:line="51" pos:column="53"/></name><index pos:line="51" pos:column="53">[<expr><name pos:line="51" pos:column="54">i<pos:position pos:line="51" pos:column="55"/></name></expr>]<pos:position pos:line="51" pos:column="56"/></index></name><operator pos:line="51" pos:column="56">)<pos:position pos:line="51" pos:column="57"/></operator></expr></init></decl>;<pos:position pos:line="51" pos:column="58"/></decl_stmt>

			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><name pos:line="53" pos:column="29">rreflen<pos:position pos:line="53" pos:column="36"/></name> <operator pos:line="53" pos:column="37">==<pos:position pos:line="53" pos:column="39"/></operator> <name><name pos:line="53" pos:column="40">lrr<pos:position pos:line="53" pos:column="43"/></name><operator pos:line="53" pos:column="43">-&gt;<pos:position pos:line="53" pos:column="48"/></operator><name pos:line="53" pos:column="45">namelen<pos:position pos:line="53" pos:column="52"/></name></name> <operator pos:line="53" pos:column="53">&amp;&amp;<pos:position pos:line="53" pos:column="63"/></operator>
			    <operator pos:line="54" pos:column="29">!<pos:position pos:line="54" pos:column="30"/></operator><call><name pos:line="54" pos:column="30">memcmp<pos:position pos:line="54" pos:column="36"/></name><argument_list pos:line="54" pos:column="36">(<argument><expr><name><name pos:line="54" pos:column="37">lrr<pos:position pos:line="54" pos:column="40"/></name><operator pos:line="54" pos:column="40">-&gt;<pos:position pos:line="54" pos:column="45"/></operator><name pos:line="54" pos:column="42">name<pos:position pos:line="54" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="48">rref<pos:position pos:line="54" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="54">rreflen<pos:position pos:line="54" pos:column="61"/></name></expr></argument>)<pos:position pos:line="54" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="63"/></condition><then pos:line="54" pos:column="63"> <block pos:line="54" pos:column="64">{
				<if pos:line="55" pos:column="33">if <condition pos:line="55" pos:column="36">(<expr><operator pos:line="55" pos:column="37">!<pos:position pos:line="55" pos:column="38"/></operator><name><name pos:line="55" pos:column="38">lrr<pos:position pos:line="55" pos:column="41"/></name><operator pos:line="55" pos:column="41">-&gt;<pos:position pos:line="55" pos:column="46"/></operator><name pos:line="55" pos:column="43">shown<pos:position pos:line="55" pos:column="48"/></name></name></expr>)<pos:position pos:line="55" pos:column="49"/></condition><then pos:line="55" pos:column="49">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="41">printf<pos:position pos:line="56" pos:column="47"/></name><argument_list pos:line="56" pos:column="47">(<argument><expr><literal type="string" pos:line="56" pos:column="48">"%.*s\n"<pos:position pos:line="56" pos:column="56"/></literal></expr></argument>,
					       <argument><expr><ternary><condition><expr><name pos:line="57" pos:column="48">sha1_only<pos:position pos:line="57" pos:column="57"/></name></expr> ?<pos:position pos:line="57" pos:column="59"/></condition><then pos:line="57" pos:column="59"> <expr><literal type="number" pos:line="57" pos:column="60">40<pos:position pos:line="57" pos:column="62"/></literal></expr> <pos:position pos:line="57" pos:column="63"/></then><else pos:line="57" pos:column="63">: <expr><name><name pos:line="57" pos:column="65">lrr<pos:position pos:line="57" pos:column="68"/></name><operator pos:line="57" pos:column="68">-&gt;<pos:position pos:line="57" pos:column="73"/></operator><name pos:line="57" pos:column="70">namelen<pos:position pos:line="57" pos:column="77"/></name></name> <operator pos:line="57" pos:column="78">+<pos:position pos:line="57" pos:column="79"/></operator> <literal type="number" pos:line="57" pos:column="80">41<pos:position pos:line="57" pos:column="82"/></literal></expr></else></ternary></expr></argument>,
					       <argument><expr><name><name pos:line="58" pos:column="48">lrr<pos:position pos:line="58" pos:column="51"/></name><operator pos:line="58" pos:column="51">-&gt;<pos:position pos:line="58" pos:column="56"/></operator><name pos:line="58" pos:column="53">line<pos:position pos:line="58" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="59"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name><name pos:line="59" pos:column="33">lrr<pos:position pos:line="59" pos:column="36"/></name><operator pos:line="59" pos:column="36">-&gt;<pos:position pos:line="59" pos:column="41"/></operator><name pos:line="59" pos:column="38">shown<pos:position pos:line="59" pos:column="43"/></name></name> <operator pos:line="59" pos:column="44">=<pos:position pos:line="59" pos:column="45"/></operator> <literal type="number" pos:line="59" pos:column="46">1<pos:position pos:line="59" pos:column="47"/></literal></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>
				<break pos:line="60" pos:column="33">break;<pos:position pos:line="60" pos:column="39"/></break>
			}<pos:position pos:line="61" pos:column="26"/></block></then></if>
		}<pos:position pos:line="62" pos:column="18"/></block></for>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name pos:line="63" pos:column="21">lrr_count<pos:position pos:line="63" pos:column="30"/></name> <operator pos:line="63" pos:column="31">&lt;=<pos:position pos:line="63" pos:column="36"/></operator> <name pos:line="63" pos:column="34">i<pos:position pos:line="63" pos:column="35"/></name></expr>)<pos:position pos:line="63" pos:column="36"/></condition><then pos:line="63" pos:column="36"> <block pos:line="63" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">error<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><literal type="string" pos:line="64" pos:column="31">"pick-rref: %.*s not found"<pos:position pos:line="64" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="60">rreflen<pos:position pos:line="64" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="69">rref<pos:position pos:line="64" pos:column="73"/></name></expr></argument>)<pos:position pos:line="64" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="75"/></expr_stmt>
			<expr_stmt><expr><name pos:line="65" pos:column="25">err<pos:position pos:line="65" pos:column="28"/></name> <operator pos:line="65" pos:column="29">=<pos:position pos:line="65" pos:column="30"/></operator> <literal type="number" pos:line="65" pos:column="31">1<pos:position pos:line="65" pos:column="32"/></literal></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="66" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="67" pos:column="17">rref<pos:position pos:line="67" pos:column="21"/></name> <operator pos:line="67" pos:column="22">=<pos:position pos:line="67" pos:column="23"/></operator> <name pos:line="67" pos:column="24">next<pos:position pos:line="67" pos:column="28"/></name></expr>;<pos:position pos:line="67" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="68" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="69" pos:column="9">free<pos:position pos:line="69" pos:column="13"/></name><argument_list pos:line="69" pos:column="13">(<argument><expr><name pos:line="69" pos:column="14">lrr_list<pos:position pos:line="69" pos:column="22"/></name></expr></argument>)<pos:position pos:line="69" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="24"/></expr_stmt>
	<return pos:line="70" pos:column="9">return <expr><name pos:line="70" pos:column="16">err<pos:position pos:line="70" pos:column="19"/></name></expr>;<pos:position pos:line="70" pos:column="20"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
