<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2231_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">git_open_cloexec<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">name<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">flags<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">int<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">o_cloexec<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name pos:line="4" pos:column="32">O_CLOEXEC<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">fd<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <call><name pos:line="6" pos:column="14">open<pos:position pos:line="6" pos:column="18"/></name><argument_list pos:line="6" pos:column="18">(<argument><expr><name pos:line="6" pos:column="19">name<pos:position pos:line="6" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="25">flags<pos:position pos:line="6" pos:column="30"/></name> <operator pos:line="6" pos:column="31">|<pos:position pos:line="6" pos:column="32"/></operator> <name pos:line="6" pos:column="33">o_cloexec<pos:position pos:line="6" pos:column="42"/></name></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="44"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">(<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">o_cloexec<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">&amp;<pos:position pos:line="7" pos:column="29"/></operator> <name pos:line="7" pos:column="26">O_CLOEXEC<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">)<pos:position pos:line="7" pos:column="36"/></operator> <operator pos:line="7" pos:column="37">&amp;&amp;<pos:position pos:line="7" pos:column="47"/></operator> <name pos:line="7" pos:column="40">fd<pos:position pos:line="7" pos:column="42"/></name> <operator pos:line="7" pos:column="43">&lt;<pos:position pos:line="7" pos:column="47"/></operator> <literal type="number" pos:line="7" pos:column="45">0<pos:position pos:line="7" pos:column="46"/></literal> <operator pos:line="7" pos:column="47">&amp;&amp;<pos:position pos:line="7" pos:column="57"/></operator> <name pos:line="7" pos:column="50">errno<pos:position pos:line="7" pos:column="55"/></name> <operator pos:line="7" pos:column="56">==<pos:position pos:line="7" pos:column="58"/></operator> <name pos:line="7" pos:column="59">EINVAL<pos:position pos:line="7" pos:column="65"/></name></expr>)<pos:position pos:line="7" pos:column="66"/></condition><then pos:line="7" pos:column="66"> <block pos:line="7" pos:column="67">{
		<comment type="block" pos:line="8" pos:column="17">/* Try again w/o O_CLOEXEC: the kernel might not support it */</comment>
		<expr_stmt><expr><name pos:line="9" pos:column="17">o_cloexec<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">&amp;=<pos:position pos:line="9" pos:column="33"/></operator> <operator pos:line="9" pos:column="30">~<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">O_CLOEXEC<pos:position pos:line="9" pos:column="40"/></name></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">fd<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <call><name pos:line="10" pos:column="22">open<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><name pos:line="10" pos:column="27">name<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="33">flags<pos:position pos:line="10" pos:column="38"/></name> <operator pos:line="10" pos:column="39">|<pos:position pos:line="10" pos:column="40"/></operator> <name pos:line="10" pos:column="41">o_cloexec<pos:position pos:line="10" pos:column="50"/></name></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><call><name pos:line="13" pos:column="5">defined<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">F_GETFD<pos:position pos:line="13" pos:column="20"/></name></expr></argument>)<pos:position pos:line="13" pos:column="21"/></argument_list></call> <operator pos:line="13" pos:column="22">&amp;&amp;<pos:position pos:line="13" pos:column="32"/></operator> <call><name pos:line="13" pos:column="25">defined<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">F_SETFD<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call> <operator pos:line="13" pos:column="42">&amp;&amp;<pos:position pos:line="13" pos:column="52"/></operator> <call><name pos:line="13" pos:column="45">defined<pos:position pos:line="13" pos:column="52"/></name><argument_list pos:line="13" pos:column="52">(<argument><expr><name pos:line="13" pos:column="53">FD_CLOEXEC<pos:position pos:line="13" pos:column="63"/></name></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr></cpp:if>
	<block pos:line="14" pos:column="9">{
		<decl_stmt><decl><specifier pos:line="15" pos:column="17">static<pos:position pos:line="15" pos:column="23"/></specifier> <type><name pos:line="15" pos:column="24">int<pos:position pos:line="15" pos:column="27"/></name></type> <name pos:line="15" pos:column="28">fd_cloexec<pos:position pos:line="15" pos:column="38"/></name> <init pos:line="15" pos:column="39">= <expr><name pos:line="15" pos:column="41">FD_CLOEXEC<pos:position pos:line="15" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="52"/></decl_stmt>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">o_cloexec<pos:position pos:line="17" pos:column="31"/></name> <operator pos:line="17" pos:column="32">&amp;&amp;<pos:position pos:line="17" pos:column="42"/></operator> <literal type="number" pos:line="17" pos:column="35">0<pos:position pos:line="17" pos:column="36"/></literal> <operator pos:line="17" pos:column="37">&lt;=<pos:position pos:line="17" pos:column="42"/></operator> <name pos:line="17" pos:column="40">fd<pos:position pos:line="17" pos:column="42"/></name> <operator pos:line="17" pos:column="43">&amp;&amp;<pos:position pos:line="17" pos:column="53"/></operator> <name pos:line="17" pos:column="46">fd_cloexec<pos:position pos:line="17" pos:column="56"/></name></expr>)<pos:position pos:line="17" pos:column="57"/></condition><then pos:line="17" pos:column="57"> <block pos:line="17" pos:column="58">{
			<comment type="block" pos:line="18" pos:column="25">/* Opened w/o O_CLOEXEC?  try with fcntl(2) to add it */</comment>
			<decl_stmt><decl><type><name pos:line="19" pos:column="25">int<pos:position pos:line="19" pos:column="28"/></name></type> <name pos:line="19" pos:column="29">flags<pos:position pos:line="19" pos:column="34"/></name> <init pos:line="19" pos:column="35">= <expr><call><name pos:line="19" pos:column="37">fcntl<pos:position pos:line="19" pos:column="42"/></name><argument_list pos:line="19" pos:column="42">(<argument><expr><name pos:line="19" pos:column="43">fd<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="47">F_GETFD<pos:position pos:line="19" pos:column="54"/></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="56"/></decl_stmt>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><call><name pos:line="20" pos:column="29">fcntl<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><name pos:line="20" pos:column="35">fd<pos:position pos:line="20" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="39">F_SETFD<pos:position pos:line="20" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="48">flags<pos:position pos:line="20" pos:column="53"/></name> <operator pos:line="20" pos:column="54">|<pos:position pos:line="20" pos:column="55"/></operator> <name pos:line="20" pos:column="56">fd_cloexec<pos:position pos:line="20" pos:column="66"/></name></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="68"/></condition><then pos:line="20" pos:column="68">
				<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="33">fd_cloexec<pos:position pos:line="21" pos:column="43"/></name> <operator pos:line="21" pos:column="44">=<pos:position pos:line="21" pos:column="45"/></operator> <literal type="number" pos:line="21" pos:column="46">0<pos:position pos:line="21" pos:column="47"/></literal></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt></block></then></if>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>
	}<pos:position pos:line="23" pos:column="10"/></block>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
	<return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">fd<pos:position pos:line="25" pos:column="18"/></name></expr>;<pos:position pos:line="25" pos:column="19"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
