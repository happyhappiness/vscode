<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6227_git-2.7.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">transit_state_mb<pos:position pos:line="3" pos:column="17"/></name> <parameter_list pos:line="3" pos:column="18">(<parameter><decl><type><name pos:line="3" pos:column="19">re_match_context_t<pos:position pos:line="3" pos:column="37"/></name> <modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier></type><name pos:line="3" pos:column="39">mctx<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="45">re_dfastate_t<pos:position pos:line="3" pos:column="58"/></name> <modifier pos:line="3" pos:column="59">*<pos:position pos:line="3" pos:column="60"/></modifier></type><name pos:line="3" pos:column="60">pstate<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="67"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">re_dfa_t<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier><specifier pos:line="5" pos:column="19">const<pos:position pos:line="5" pos:column="24"/></specifier></type> <name pos:line="5" pos:column="25">dfa<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><name><name pos:line="5" pos:column="31">mctx<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">-&gt;<pos:position pos:line="5" pos:column="40"/></operator><name pos:line="5" pos:column="37">dfa<pos:position pos:line="5" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">reg_errcode_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">err<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>

  <for pos:line="9" pos:column="3">for <control pos:line="9" pos:column="7">(<init><expr><name pos:line="9" pos:column="8">i<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>;<pos:position pos:line="9" pos:column="14"/></init> <condition><expr><name pos:line="9" pos:column="15">i<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">&lt;<pos:position pos:line="9" pos:column="21"/></operator> <name><name pos:line="9" pos:column="19">pstate<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">nodes<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">.<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="33">nelem<pos:position pos:line="9" pos:column="38"/></name></name></expr>;<pos:position pos:line="9" pos:column="39"/></condition> <incr><expr><operator pos:line="9" pos:column="40">++<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="42">i<pos:position pos:line="9" pos:column="43"/></name></expr></incr>)<pos:position pos:line="9" pos:column="44"/></control>
    <block pos:line="10" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="11" pos:column="7">re_node_set<pos:position pos:line="11" pos:column="18"/></name></type> <name pos:line="11" pos:column="19">dest_nodes<pos:position pos:line="11" pos:column="29"/></name></decl>, <modifier pos:line="11" pos:column="31">*<pos:position pos:line="11" pos:column="32"/></modifier><decl><type ref="prev"/><name pos:line="11" pos:column="32">new_nodes<pos:position pos:line="11" pos:column="41"/></name></decl>;<pos:position pos:line="11" pos:column="42"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="12" pos:column="7">int<pos:position pos:line="12" pos:column="10"/></name></type> <name pos:line="12" pos:column="11">cur_node_idx<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><name><name pos:line="12" pos:column="26">pstate<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">-&gt;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="34">nodes<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">.<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="40">elems<pos:position pos:line="12" pos:column="45"/></name><index pos:line="12" pos:column="45">[<expr><name pos:line="12" pos:column="46">i<pos:position pos:line="12" pos:column="47"/></name></expr>]<pos:position pos:line="12" pos:column="48"/></index></name></expr></init></decl>;<pos:position pos:line="12" pos:column="49"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="13" pos:column="7">int<pos:position pos:line="13" pos:column="10"/></name></type> <name pos:line="13" pos:column="11">naccepted<pos:position pos:line="13" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="22">dest_idx<pos:position pos:line="13" pos:column="30"/></name></decl>;<pos:position pos:line="13" pos:column="31"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="14" pos:column="7">unsigned<pos:position pos:line="14" pos:column="15"/></name> <name pos:line="14" pos:column="16">int<pos:position pos:line="14" pos:column="19"/></name></type> <name pos:line="14" pos:column="20">context<pos:position pos:line="14" pos:column="27"/></name></decl>;<pos:position pos:line="14" pos:column="28"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="15" pos:column="7">re_dfastate_t<pos:position pos:line="15" pos:column="20"/></name> <modifier pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></modifier></type><name pos:line="15" pos:column="22">dest_state<pos:position pos:line="15" pos:column="32"/></name></decl>;<pos:position pos:line="15" pos:column="33"/></decl_stmt>

      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><operator pos:line="17" pos:column="11">!<pos:position pos:line="17" pos:column="12"/></operator><name><name pos:line="17" pos:column="12">dfa<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">-&gt;<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="17">nodes<pos:position pos:line="17" pos:column="22"/></name><index pos:line="17" pos:column="22">[<expr><name pos:line="17" pos:column="23">cur_node_idx<pos:position pos:line="17" pos:column="35"/></name></expr>]<pos:position pos:line="17" pos:column="36"/></index></name><operator pos:line="17" pos:column="36">.<pos:position pos:line="17" pos:column="37"/></operator><name pos:line="17" pos:column="37">accept_mb<pos:position pos:line="17" pos:column="46"/></name></expr>)<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47">
	<block type="pseudo"><continue pos:line="18" pos:column="9">continue;<pos:position pos:line="18" pos:column="18"/></continue></block></then></if>

      <if pos:line="20" pos:column="7">if <condition pos:line="20" pos:column="10">(<expr><name><name pos:line="20" pos:column="11">dfa<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">-&gt;<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="16">nodes<pos:position pos:line="20" pos:column="21"/></name><index pos:line="20" pos:column="21">[<expr><name pos:line="20" pos:column="22">cur_node_idx<pos:position pos:line="20" pos:column="34"/></name></expr>]<pos:position pos:line="20" pos:column="35"/></index></name><operator pos:line="20" pos:column="35">.<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="36">constraint<pos:position pos:line="20" pos:column="46"/></name></expr>)<pos:position pos:line="20" pos:column="47"/></condition><then pos:line="20" pos:column="47">
	<block pos:line="21" pos:column="9">{
	  <expr_stmt><expr><name pos:line="22" pos:column="11">context<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <call><name pos:line="22" pos:column="21">re_string_context_at<pos:position pos:line="22" pos:column="41"/></name> <argument_list pos:line="22" pos:column="42">(<argument><expr><operator pos:line="22" pos:column="43">&amp;<pos:position pos:line="22" pos:column="48"/></operator><name><name pos:line="22" pos:column="44">mctx<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">-&gt;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="50">input<pos:position pos:line="22" pos:column="55"/></name></name></expr></argument>,
					  <argument><expr><call><name pos:line="23" pos:column="43">re_string_cur_idx<pos:position pos:line="23" pos:column="60"/></name> <argument_list pos:line="23" pos:column="61">(<argument><expr><operator pos:line="23" pos:column="62">&amp;<pos:position pos:line="23" pos:column="67"/></operator><name><name pos:line="23" pos:column="63">mctx<pos:position pos:line="23" pos:column="67"/></name><operator pos:line="23" pos:column="67">-&gt;<pos:position pos:line="23" pos:column="72"/></operator><name pos:line="23" pos:column="69">input<pos:position pos:line="23" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr></argument>,
					  <argument><expr><name><name pos:line="24" pos:column="43">mctx<pos:position pos:line="24" pos:column="47"/></name><operator pos:line="24" pos:column="47">-&gt;<pos:position pos:line="24" pos:column="52"/></operator><name pos:line="24" pos:column="49">eflags<pos:position pos:line="24" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="57"/></expr_stmt>
	  <if pos:line="25" pos:column="11">if <condition pos:line="25" pos:column="14">(<expr><call><name pos:line="25" pos:column="15">NOT_SATISFY_NEXT_CONSTRAINT<pos:position pos:line="25" pos:column="42"/></name> <argument_list pos:line="25" pos:column="43">(<argument><expr><name><name pos:line="25" pos:column="44">dfa<pos:position pos:line="25" pos:column="47"/></name><operator pos:line="25" pos:column="47">-&gt;<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="49">nodes<pos:position pos:line="25" pos:column="54"/></name><index pos:line="25" pos:column="54">[<expr><name pos:line="25" pos:column="55">cur_node_idx<pos:position pos:line="25" pos:column="67"/></name></expr>]<pos:position pos:line="25" pos:column="68"/></index></name><operator pos:line="25" pos:column="68">.<pos:position pos:line="25" pos:column="69"/></operator><name pos:line="25" pos:column="69">constraint<pos:position pos:line="25" pos:column="79"/></name></expr></argument>,
					   <argument><expr><name pos:line="26" pos:column="44">context<pos:position pos:line="26" pos:column="51"/></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="53"/></condition><then pos:line="26" pos:column="53">
	    <block type="pseudo"><continue pos:line="27" pos:column="13">continue;<pos:position pos:line="27" pos:column="22"/></continue></block></then></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="30" pos:column="7">/* How many bytes the node can accept?  */</comment>
      <expr_stmt><expr><name pos:line="31" pos:column="7">naccepted<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <call><name pos:line="31" pos:column="19">check_node_accept_bytes<pos:position pos:line="31" pos:column="42"/></name> <argument_list pos:line="31" pos:column="43">(<argument><expr><name pos:line="31" pos:column="44">dfa<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="49">cur_node_idx<pos:position pos:line="31" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="63">&amp;<pos:position pos:line="31" pos:column="68"/></operator><name><name pos:line="31" pos:column="64">mctx<pos:position pos:line="31" pos:column="68"/></name><operator pos:line="31" pos:column="68">-&gt;<pos:position pos:line="31" pos:column="73"/></operator><name pos:line="31" pos:column="70">input<pos:position pos:line="31" pos:column="75"/></name></name></expr></argument>,
					   <argument><expr><call><name pos:line="32" pos:column="44">re_string_cur_idx<pos:position pos:line="32" pos:column="61"/></name> <argument_list pos:line="32" pos:column="62">(<argument><expr><operator pos:line="32" pos:column="63">&amp;<pos:position pos:line="32" pos:column="68"/></operator><name><name pos:line="32" pos:column="64">mctx<pos:position pos:line="32" pos:column="68"/></name><operator pos:line="32" pos:column="68">-&gt;<pos:position pos:line="32" pos:column="73"/></operator><name pos:line="32" pos:column="70">input<pos:position pos:line="32" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="78"/></expr_stmt>
      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><name pos:line="33" pos:column="11">naccepted<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">==<pos:position pos:line="33" pos:column="23"/></operator> <literal type="number" pos:line="33" pos:column="24">0<pos:position pos:line="33" pos:column="25"/></literal></expr>)<pos:position pos:line="33" pos:column="26"/></condition><then pos:line="33" pos:column="26">
	<block type="pseudo"><continue pos:line="34" pos:column="9">continue;<pos:position pos:line="34" pos:column="18"/></continue></block></then></if>

      <comment type="block" pos:line="36" pos:column="7">/* The node can accepts `naccepted' bytes.  */</comment>
      <expr_stmt><expr><name pos:line="37" pos:column="7">dest_idx<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">re_string_cur_idx<pos:position pos:line="37" pos:column="35"/></name> <argument_list pos:line="37" pos:column="36">(<argument><expr><operator pos:line="37" pos:column="37">&amp;<pos:position pos:line="37" pos:column="42"/></operator><name><name pos:line="37" pos:column="38">mctx<pos:position pos:line="37" pos:column="42"/></name><operator pos:line="37" pos:column="42">-&gt;<pos:position pos:line="37" pos:column="47"/></operator><name pos:line="37" pos:column="44">input<pos:position pos:line="37" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call> <operator pos:line="37" pos:column="51">+<pos:position pos:line="37" pos:column="52"/></operator> <name pos:line="37" pos:column="53">naccepted<pos:position pos:line="37" pos:column="62"/></name></expr>;<pos:position pos:line="37" pos:column="63"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="38" pos:column="7">mctx<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">-&gt;<pos:position pos:line="38" pos:column="16"/></operator><name pos:line="38" pos:column="13">max_mb_elem_len<pos:position pos:line="38" pos:column="28"/></name></name> <operator pos:line="38" pos:column="29">=<pos:position pos:line="38" pos:column="30"/></operator> <operator pos:line="38" pos:column="31">(<pos:position pos:line="38" pos:column="32"/></operator><ternary><condition><expr><operator pos:line="38" pos:column="32">(<pos:position pos:line="38" pos:column="33"/></operator><name><name pos:line="38" pos:column="33">mctx<pos:position pos:line="38" pos:column="37"/></name><operator pos:line="38" pos:column="37">-&gt;<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="39">max_mb_elem_len<pos:position pos:line="38" pos:column="54"/></name></name> <operator pos:line="38" pos:column="55">&lt;<pos:position pos:line="38" pos:column="59"/></operator> <name pos:line="38" pos:column="57">naccepted<pos:position pos:line="38" pos:column="66"/></name><operator pos:line="38" pos:column="66">)<pos:position pos:line="38" pos:column="67"/></operator></expr> ?<pos:position pos:line="38" pos:column="69"/></condition><then pos:line="38" pos:column="69"> <expr><name pos:line="38" pos:column="70">naccepted<pos:position pos:line="38" pos:column="79"/></name></expr>
			       <pos:position pos:line="39" pos:column="11"/></then><else pos:line="39" pos:column="32">: <expr><name><name pos:line="39" pos:column="34">mctx<pos:position pos:line="39" pos:column="38"/></name><operator pos:line="39" pos:column="38">-&gt;<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="40">max_mb_elem_len<pos:position pos:line="39" pos:column="55"/></name></name></expr></else></ternary><operator pos:line="39" pos:column="55">)<pos:position pos:line="39" pos:column="56"/></operator></expr>;<pos:position pos:line="39" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><name pos:line="40" pos:column="7">err<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">=<pos:position pos:line="40" pos:column="12"/></operator> <call><name pos:line="40" pos:column="13">clean_state_log_if_needed<pos:position pos:line="40" pos:column="38"/></name> <argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">mctx<pos:position pos:line="40" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="46">dest_idx<pos:position pos:line="40" pos:column="54"/></name></expr></argument>)<pos:position pos:line="40" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="56"/></expr_stmt>
      <if pos:line="41" pos:column="7">if <condition pos:line="41" pos:column="10">(<expr><call><name pos:line="41" pos:column="11">BE<pos:position pos:line="41" pos:column="13"/></name> <argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">err<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">!=<pos:position pos:line="41" pos:column="21"/></operator> <name pos:line="41" pos:column="22">REG_NOERROR<pos:position pos:line="41" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="35">0<pos:position pos:line="41" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="38"/></condition><then pos:line="41" pos:column="38">
	<block type="pseudo"><return pos:line="42" pos:column="9">return <expr><name pos:line="42" pos:column="16">err<pos:position pos:line="42" pos:column="19"/></name></expr>;<pos:position pos:line="42" pos:column="20"/></return></block></then></if>
<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">DEBUG<pos:position pos:line="43" pos:column="13"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="44" pos:column="7">assert<pos:position pos:line="44" pos:column="13"/></name> <argument_list pos:line="44" pos:column="14">(<argument><expr><name><name pos:line="44" pos:column="15">dfa<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">-&gt;<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="20">nexts<pos:position pos:line="44" pos:column="25"/></name><index pos:line="44" pos:column="25">[<expr><name pos:line="44" pos:column="26">cur_node_idx<pos:position pos:line="44" pos:column="38"/></name></expr>]<pos:position pos:line="44" pos:column="39"/></index></name> <operator pos:line="44" pos:column="40">!=<pos:position pos:line="44" pos:column="42"/></operator> <operator pos:line="44" pos:column="43">-<pos:position pos:line="44" pos:column="44"/></operator><literal type="number" pos:line="44" pos:column="44">1<pos:position pos:line="44" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="46" pos:column="7">new_nodes<pos:position pos:line="46" pos:column="16"/></name> <operator pos:line="46" pos:column="17">=<pos:position pos:line="46" pos:column="18"/></operator> <name><name pos:line="46" pos:column="19">dfa<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">-&gt;<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="24">eclosures<pos:position pos:line="46" pos:column="33"/></name></name> <operator pos:line="46" pos:column="34">+<pos:position pos:line="46" pos:column="35"/></operator> <name><name pos:line="46" pos:column="36">dfa<pos:position pos:line="46" pos:column="39"/></name><operator pos:line="46" pos:column="39">-&gt;<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="41">nexts<pos:position pos:line="46" pos:column="46"/></name><index pos:line="46" pos:column="46">[<expr><name pos:line="46" pos:column="47">cur_node_idx<pos:position pos:line="46" pos:column="59"/></name></expr>]<pos:position pos:line="46" pos:column="60"/></index></name></expr>;<pos:position pos:line="46" pos:column="61"/></expr_stmt>

      <expr_stmt><expr><name pos:line="48" pos:column="7">dest_state<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">=<pos:position pos:line="48" pos:column="19"/></operator> <name><name pos:line="48" pos:column="20">mctx<pos:position pos:line="48" pos:column="24"/></name><operator pos:line="48" pos:column="24">-&gt;<pos:position pos:line="48" pos:column="29"/></operator><name pos:line="48" pos:column="26">state_log<pos:position pos:line="48" pos:column="35"/></name><index pos:line="48" pos:column="35">[<expr><name pos:line="48" pos:column="36">dest_idx<pos:position pos:line="48" pos:column="44"/></name></expr>]<pos:position pos:line="48" pos:column="45"/></index></name></expr>;<pos:position pos:line="48" pos:column="46"/></expr_stmt>
      <if pos:line="49" pos:column="7">if <condition pos:line="49" pos:column="10">(<expr><name pos:line="49" pos:column="11">dest_state<pos:position pos:line="49" pos:column="21"/></name> <operator pos:line="49" pos:column="22">==<pos:position pos:line="49" pos:column="24"/></operator> <name pos:line="49" pos:column="25">NULL<pos:position pos:line="49" pos:column="29"/></name></expr>)<pos:position pos:line="49" pos:column="30"/></condition><then pos:line="49" pos:column="30">
	<block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="9">dest_nodes<pos:position pos:line="50" pos:column="19"/></name> <operator pos:line="50" pos:column="20">=<pos:position pos:line="50" pos:column="21"/></operator> <operator pos:line="50" pos:column="22">*<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">new_nodes<pos:position pos:line="50" pos:column="32"/></name></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt></block></then>
      <else pos:line="51" pos:column="7">else
	<block pos:line="52" pos:column="9">{
	  <expr_stmt><expr><name pos:line="53" pos:column="11">err<pos:position pos:line="53" pos:column="14"/></name> <operator pos:line="53" pos:column="15">=<pos:position pos:line="53" pos:column="16"/></operator> <call><name pos:line="53" pos:column="17">re_node_set_init_union<pos:position pos:line="53" pos:column="39"/></name> <argument_list pos:line="53" pos:column="40">(<argument><expr><operator pos:line="53" pos:column="41">&amp;<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="42">dest_nodes<pos:position pos:line="53" pos:column="52"/></name></expr></argument>,
					<argument><expr><name><name pos:line="54" pos:column="41">dest_state<pos:position pos:line="54" pos:column="51"/></name><operator pos:line="54" pos:column="51">-&gt;<pos:position pos:line="54" pos:column="56"/></operator><name pos:line="54" pos:column="53">entrance_nodes<pos:position pos:line="54" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="69">new_nodes<pos:position pos:line="54" pos:column="78"/></name></expr></argument>)<pos:position pos:line="54" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="80"/></expr_stmt>
	  <if pos:line="55" pos:column="11">if <condition pos:line="55" pos:column="14">(<expr><call><name pos:line="55" pos:column="15">BE<pos:position pos:line="55" pos:column="17"/></name> <argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">err<pos:position pos:line="55" pos:column="22"/></name> <operator pos:line="55" pos:column="23">!=<pos:position pos:line="55" pos:column="25"/></operator> <name pos:line="55" pos:column="26">REG_NOERROR<pos:position pos:line="55" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="39">0<pos:position pos:line="55" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="42"/></condition><then pos:line="55" pos:column="42">
	    <block type="pseudo"><return pos:line="56" pos:column="13">return <expr><name pos:line="56" pos:column="20">err<pos:position pos:line="56" pos:column="23"/></name></expr>;<pos:position pos:line="56" pos:column="24"/></return></block></then></if>
	}<pos:position pos:line="57" pos:column="10"/></block></else></if>
      <expr_stmt><expr><name pos:line="58" pos:column="7">context<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">=<pos:position pos:line="58" pos:column="16"/></operator> <call><name pos:line="58" pos:column="17">re_string_context_at<pos:position pos:line="58" pos:column="37"/></name> <argument_list pos:line="58" pos:column="38">(<argument><expr><operator pos:line="58" pos:column="39">&amp;<pos:position pos:line="58" pos:column="44"/></operator><name><name pos:line="58" pos:column="40">mctx<pos:position pos:line="58" pos:column="44"/></name><operator pos:line="58" pos:column="44">-&gt;<pos:position pos:line="58" pos:column="49"/></operator><name pos:line="58" pos:column="46">input<pos:position pos:line="58" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="53">dest_idx<pos:position pos:line="58" pos:column="61"/></name> <operator pos:line="58" pos:column="62">-<pos:position pos:line="58" pos:column="63"/></operator> <literal type="number" pos:line="58" pos:column="64">1<pos:position pos:line="58" pos:column="65"/></literal></expr></argument>,
				      <argument><expr><name><name pos:line="59" pos:column="39">mctx<pos:position pos:line="59" pos:column="43"/></name><operator pos:line="59" pos:column="43">-&gt;<pos:position pos:line="59" pos:column="48"/></operator><name pos:line="59" pos:column="45">eflags<pos:position pos:line="59" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="60" pos:column="7">mctx<pos:position pos:line="60" pos:column="11"/></name><operator pos:line="60" pos:column="11">-&gt;<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="13">state_log<pos:position pos:line="60" pos:column="22"/></name><index pos:line="60" pos:column="22">[<expr><name pos:line="60" pos:column="23">dest_idx<pos:position pos:line="60" pos:column="31"/></name></expr>]<pos:position pos:line="60" pos:column="32"/></index></name>
	<operator pos:line="61" pos:column="9">=<pos:position pos:line="61" pos:column="10"/></operator> <call><name pos:line="61" pos:column="11">re_acquire_state_context<pos:position pos:line="61" pos:column="35"/></name> <argument_list pos:line="61" pos:column="36">(<argument><expr><operator pos:line="61" pos:column="37">&amp;<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="38">err<pos:position pos:line="61" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="43">dfa<pos:position pos:line="61" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="48">&amp;<pos:position pos:line="61" pos:column="53"/></operator><name pos:line="61" pos:column="49">dest_nodes<pos:position pos:line="61" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="61">context<pos:position pos:line="61" pos:column="68"/></name></expr></argument>)<pos:position pos:line="61" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="70"/></expr_stmt>
      <if pos:line="62" pos:column="7">if <condition pos:line="62" pos:column="10">(<expr><name pos:line="62" pos:column="11">dest_state<pos:position pos:line="62" pos:column="21"/></name> <operator pos:line="62" pos:column="22">!=<pos:position pos:line="62" pos:column="24"/></operator> <name pos:line="62" pos:column="25">NULL<pos:position pos:line="62" pos:column="29"/></name></expr>)<pos:position pos:line="62" pos:column="30"/></condition><then pos:line="62" pos:column="30">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="9">re_node_set_free<pos:position pos:line="63" pos:column="25"/></name> <argument_list pos:line="63" pos:column="26">(<argument><expr><operator pos:line="63" pos:column="27">&amp;<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="28">dest_nodes<pos:position pos:line="63" pos:column="38"/></name></expr></argument>)<pos:position pos:line="63" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="40"/></expr_stmt></block></then></if>
      <if pos:line="64" pos:column="7">if <condition pos:line="64" pos:column="10">(<expr><call><name pos:line="64" pos:column="11">BE<pos:position pos:line="64" pos:column="13"/></name> <argument_list pos:line="64" pos:column="14">(<argument><expr><name><name pos:line="64" pos:column="15">mctx<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">-&gt;<pos:position pos:line="64" pos:column="24"/></operator><name pos:line="64" pos:column="21">state_log<pos:position pos:line="64" pos:column="30"/></name><index pos:line="64" pos:column="30">[<expr><name pos:line="64" pos:column="31">dest_idx<pos:position pos:line="64" pos:column="39"/></name></expr>]<pos:position pos:line="64" pos:column="40"/></index></name> <operator pos:line="64" pos:column="41">==<pos:position pos:line="64" pos:column="43"/></operator> <name pos:line="64" pos:column="44">NULL<pos:position pos:line="64" pos:column="48"/></name> <operator pos:line="64" pos:column="49">&amp;&amp;<pos:position pos:line="64" pos:column="59"/></operator> <name pos:line="64" pos:column="52">err<pos:position pos:line="64" pos:column="55"/></name> <operator pos:line="64" pos:column="56">!=<pos:position pos:line="64" pos:column="58"/></operator> <name pos:line="64" pos:column="59">REG_NOERROR<pos:position pos:line="64" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="72">0<pos:position pos:line="64" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="75"/></condition><then pos:line="64" pos:column="75">
	<block type="pseudo"><return pos:line="65" pos:column="9">return <expr><name pos:line="65" pos:column="16">err<pos:position pos:line="65" pos:column="19"/></name></expr>;<pos:position pos:line="65" pos:column="20"/></return></block></then></if>
    }<pos:position pos:line="66" pos:column="6"/></block></for>
  <return pos:line="67" pos:column="3">return <expr><name pos:line="67" pos:column="10">REG_NOERROR<pos:position pos:line="67" pos:column="21"/></name></expr>;<pos:position pos:line="67" pos:column="22"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
