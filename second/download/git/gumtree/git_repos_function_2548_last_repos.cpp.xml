<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2548_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">combine_diff_path<pos:position pos:line="1" pos:column="32"/></name></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">ll_diff_tree_paths<pos:position pos:line="1" pos:column="52"/></name><parameter_list pos:line="1" pos:column="52">(
	<parameter><decl><type><name><name pos:line="2" pos:column="9">struct<pos:position pos:line="2" pos:column="15"/></name> <name pos:line="2" pos:column="16">combine_diff_path<pos:position pos:line="2" pos:column="33"/></name></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">p<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name><name pos:line="2" pos:column="44">struct<pos:position pos:line="2" pos:column="50"/></name> <name pos:line="2" pos:column="51">object_id<pos:position pos:line="2" pos:column="60"/></name></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">oid<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>,
	<parameter><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name><name pos:line="3" pos:column="15">struct<pos:position pos:line="3" pos:column="21"/></name> <name pos:line="3" pos:column="22">object_id<pos:position pos:line="3" pos:column="31"/></name></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier><modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">parents_oid<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="47">int<pos:position pos:line="3" pos:column="50"/></name></type> <name pos:line="3" pos:column="51">nparent<pos:position pos:line="3" pos:column="58"/></name></decl></parameter>,
	<parameter><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">base<pos:position pos:line="4" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="4" pos:column="30">struct<pos:position pos:line="4" pos:column="36"/></name> <name pos:line="4" pos:column="37">diff_options<pos:position pos:line="4" pos:column="49"/></name></name> <modifier pos:line="4" pos:column="50">*<pos:position pos:line="4" pos:column="51"/></modifier></type><name pos:line="4" pos:column="51">opt<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="55"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">tree_desc<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">t<pos:position pos:line="6" pos:column="27"/></name></decl>, <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="30">tp<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">void<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">ttree<pos:position pos:line="7" pos:column="20"/></name></decl>, <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier><modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="24">tptree<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">i<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">FAST_ARRAY_ALLOC<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">tp<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">nparent<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">FAST_ARRAY_ALLOC<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">tptree<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="34">nparent<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>

	<comment type="block" pos:line="13" pos:column="9">/*
	 * load parents first, as they are probably already cached.
	 *
	 * ( log_tree_diff() parses commit-&gt;parent before calling here via
	 *   diff_tree_oid(parent, commit) )
	 */</comment>
	<for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">(<init><expr><name pos:line="19" pos:column="14">i<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <literal type="number" pos:line="19" pos:column="18">0<pos:position pos:line="19" pos:column="19"/></literal></expr>;<pos:position pos:line="19" pos:column="20"/></init> <condition><expr><name pos:line="19" pos:column="21">i<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">&lt;<pos:position pos:line="19" pos:column="27"/></operator> <name pos:line="19" pos:column="25">nparent<pos:position pos:line="19" pos:column="32"/></name></expr>;<pos:position pos:line="19" pos:column="33"/></condition> <incr><expr><operator pos:line="19" pos:column="34">++<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="36">i<pos:position pos:line="19" pos:column="37"/></name></expr></incr>)<pos:position pos:line="19" pos:column="38"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="20" pos:column="17">tptree<pos:position pos:line="20" pos:column="23"/></name><index pos:line="20" pos:column="23">[<expr><name pos:line="20" pos:column="24">i<pos:position pos:line="20" pos:column="25"/></name></expr>]<pos:position pos:line="20" pos:column="26"/></index></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <call><name pos:line="20" pos:column="29">fill_tree_descriptor<pos:position pos:line="20" pos:column="49"/></name><argument_list pos:line="20" pos:column="49">(<argument><expr><operator pos:line="20" pos:column="50">&amp;<pos:position pos:line="20" pos:column="55"/></operator><name><name pos:line="20" pos:column="51">tp<pos:position pos:line="20" pos:column="53"/></name><index pos:line="20" pos:column="53">[<expr><name pos:line="20" pos:column="54">i<pos:position pos:line="20" pos:column="55"/></name></expr>]<pos:position pos:line="20" pos:column="56"/></index></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="58">parents_oid<pos:position pos:line="20" pos:column="69"/></name><index pos:line="20" pos:column="69">[<expr><name pos:line="20" pos:column="70">i<pos:position pos:line="20" pos:column="71"/></name></expr>]<pos:position pos:line="20" pos:column="72"/></index></name><operator pos:line="20" pos:column="72">-&gt;<pos:position pos:line="20" pos:column="77"/></operator><name pos:line="20" pos:column="74">hash<pos:position pos:line="20" pos:column="78"/></name></expr></argument>)<pos:position pos:line="20" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="80"/></expr_stmt></block></for>
	<expr_stmt><expr><name pos:line="21" pos:column="9">ttree<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">fill_tree_descriptor<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><operator pos:line="21" pos:column="38">&amp;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="39">t<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="42">oid<pos:position pos:line="21" pos:column="45"/></name><operator pos:line="21" pos:column="45">-&gt;<pos:position pos:line="21" pos:column="50"/></operator><name pos:line="21" pos:column="47">hash<pos:position pos:line="21" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt>

	<comment type="block" pos:line="23" pos:column="9">/* Enable recursion indefinitely */</comment>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">opt<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">-&gt;<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="14">pathspec<pos:position pos:line="24" pos:column="22"/></name><operator pos:line="24" pos:column="22">.<pos:position pos:line="24" pos:column="23"/></operator><name pos:line="24" pos:column="23">recursive<pos:position pos:line="24" pos:column="32"/></name></name> <operator pos:line="24" pos:column="33">=<pos:position pos:line="24" pos:column="34"/></operator> <call><name pos:line="24" pos:column="35">DIFF_OPT_TST<pos:position pos:line="24" pos:column="47"/></name><argument_list pos:line="24" pos:column="47">(<argument><expr><name pos:line="24" pos:column="48">opt<pos:position pos:line="24" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="53">RECURSIVE<pos:position pos:line="24" pos:column="62"/></name></expr></argument>)<pos:position pos:line="24" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="64"/></expr_stmt>

	<for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init pos:line="26" pos:column="14">;<pos:position pos:line="26" pos:column="15"/></init><condition pos:line="26" pos:column="15">;<pos:position pos:line="26" pos:column="16"/></condition><incr/>)<pos:position pos:line="26" pos:column="17"/></control> <block pos:line="26" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">int<pos:position pos:line="27" pos:column="20"/></name></type> <name pos:line="27" pos:column="21">imin<pos:position pos:line="27" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="27" pos:column="27">cmp<pos:position pos:line="27" pos:column="30"/></name></decl>;<pos:position pos:line="27" pos:column="31"/></decl_stmt>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><call><name pos:line="29" pos:column="21">diff_can_quit_early<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">opt<pos:position pos:line="29" pos:column="44"/></name></expr></argument>)<pos:position pos:line="29" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="46"/></condition><then pos:line="29" pos:column="46">
			<block type="pseudo"><break pos:line="30" pos:column="25">break;<pos:position pos:line="30" pos:column="31"/></break></block></then></if>

		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name><name pos:line="32" pos:column="21">opt<pos:position pos:line="32" pos:column="24"/></name><operator pos:line="32" pos:column="24">-&gt;<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="26">pathspec<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">.<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">nr<pos:position pos:line="32" pos:column="37"/></name></name></expr>)<pos:position pos:line="32" pos:column="38"/></condition><then pos:line="32" pos:column="38"> <block pos:line="32" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">skip_uninteresting<pos:position pos:line="33" pos:column="43"/></name><argument_list pos:line="33" pos:column="43">(<argument><expr><operator pos:line="33" pos:column="44">&amp;<pos:position pos:line="33" pos:column="49"/></operator><name pos:line="33" pos:column="45">t<pos:position pos:line="33" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="48">base<pos:position pos:line="33" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="54">opt<pos:position pos:line="33" pos:column="57"/></name></expr></argument>)<pos:position pos:line="33" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="59"/></expr_stmt>
			<for pos:line="34" pos:column="25">for <control pos:line="34" pos:column="29">(<init><expr><name pos:line="34" pos:column="30">i<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">=<pos:position pos:line="34" pos:column="33"/></operator> <literal type="number" pos:line="34" pos:column="34">0<pos:position pos:line="34" pos:column="35"/></literal></expr>;<pos:position pos:line="34" pos:column="36"/></init> <condition><expr><name pos:line="34" pos:column="37">i<pos:position pos:line="34" pos:column="38"/></name> <operator pos:line="34" pos:column="39">&lt;<pos:position pos:line="34" pos:column="43"/></operator> <name pos:line="34" pos:column="41">nparent<pos:position pos:line="34" pos:column="48"/></name></expr>;<pos:position pos:line="34" pos:column="49"/></condition> <incr><expr><name pos:line="34" pos:column="50">i<pos:position pos:line="34" pos:column="51"/></name><operator pos:line="34" pos:column="51">++<pos:position pos:line="34" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="54"/></control>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="33">skip_uninteresting<pos:position pos:line="35" pos:column="51"/></name><argument_list pos:line="35" pos:column="51">(<argument><expr><operator pos:line="35" pos:column="52">&amp;<pos:position pos:line="35" pos:column="57"/></operator><name><name pos:line="35" pos:column="53">tp<pos:position pos:line="35" pos:column="55"/></name><index pos:line="35" pos:column="55">[<expr><name pos:line="35" pos:column="56">i<pos:position pos:line="35" pos:column="57"/></name></expr>]<pos:position pos:line="35" pos:column="58"/></index></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="60">base<pos:position pos:line="35" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="66">opt<pos:position pos:line="35" pos:column="69"/></name></expr></argument>)<pos:position pos:line="35" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="71"/></expr_stmt></block></for>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="38" pos:column="17">/* comparing is finished when all trees are done */</comment>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><name><name pos:line="39" pos:column="22">t<pos:position pos:line="39" pos:column="23"/></name><operator pos:line="39" pos:column="23">.<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="24">size<pos:position pos:line="39" pos:column="28"/></name></name></expr>)<pos:position pos:line="39" pos:column="29"/></condition><then pos:line="39" pos:column="29"> <block pos:line="39" pos:column="30">{
			<decl_stmt><decl><type><name pos:line="40" pos:column="25">int<pos:position pos:line="40" pos:column="28"/></name></type> <name pos:line="40" pos:column="29">done<pos:position pos:line="40" pos:column="33"/></name> <init pos:line="40" pos:column="34">= <expr><literal type="number" pos:line="40" pos:column="36">1<pos:position pos:line="40" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="40" pos:column="38"/></decl_stmt>
			<for pos:line="41" pos:column="25">for <control pos:line="41" pos:column="29">(<init><expr><name pos:line="41" pos:column="30">i<pos:position pos:line="41" pos:column="31"/></name> <operator pos:line="41" pos:column="32">=<pos:position pos:line="41" pos:column="33"/></operator> <literal type="number" pos:line="41" pos:column="34">0<pos:position pos:line="41" pos:column="35"/></literal></expr>;<pos:position pos:line="41" pos:column="36"/></init> <condition><expr><name pos:line="41" pos:column="37">i<pos:position pos:line="41" pos:column="38"/></name> <operator pos:line="41" pos:column="39">&lt;<pos:position pos:line="41" pos:column="43"/></operator> <name pos:line="41" pos:column="41">nparent<pos:position pos:line="41" pos:column="48"/></name></expr>;<pos:position pos:line="41" pos:column="49"/></condition> <incr><expr><operator pos:line="41" pos:column="50">++<pos:position pos:line="41" pos:column="52"/></operator><name pos:line="41" pos:column="52">i<pos:position pos:line="41" pos:column="53"/></name></expr></incr>)<pos:position pos:line="41" pos:column="54"/></control>
				<block type="pseudo"><if pos:line="42" pos:column="33">if <condition pos:line="42" pos:column="36">(<expr><name><name pos:line="42" pos:column="37">tp<pos:position pos:line="42" pos:column="39"/></name><index pos:line="42" pos:column="39">[<expr><name pos:line="42" pos:column="40">i<pos:position pos:line="42" pos:column="41"/></name></expr>]<pos:position pos:line="42" pos:column="42"/></index></name><operator pos:line="42" pos:column="42">.<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="43">size<pos:position pos:line="42" pos:column="47"/></name></expr>)<pos:position pos:line="42" pos:column="48"/></condition><then pos:line="42" pos:column="48"> <block pos:line="42" pos:column="49">{
					<expr_stmt><expr><name pos:line="43" pos:column="41">done<pos:position pos:line="43" pos:column="45"/></name> <operator pos:line="43" pos:column="46">=<pos:position pos:line="43" pos:column="47"/></operator> <literal type="number" pos:line="43" pos:column="48">0<pos:position pos:line="43" pos:column="49"/></literal></expr>;<pos:position pos:line="43" pos:column="50"/></expr_stmt>
					<break pos:line="44" pos:column="41">break;<pos:position pos:line="44" pos:column="47"/></break>
				}<pos:position pos:line="45" pos:column="34"/></block></then></if></block></for>
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><name pos:line="46" pos:column="29">done<pos:position pos:line="46" pos:column="33"/></name></expr>)<pos:position pos:line="46" pos:column="34"/></condition><then pos:line="46" pos:column="34">
				<block type="pseudo"><break pos:line="47" pos:column="33">break;<pos:position pos:line="47" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="50" pos:column="17">/*
		 * lookup imin = argmin(p1...pn),
		 * mark entries whether they =p[imin] along the way
		 */</comment>
		<expr_stmt><expr><name pos:line="54" pos:column="17">imin<pos:position pos:line="54" pos:column="21"/></name> <operator pos:line="54" pos:column="22">=<pos:position pos:line="54" pos:column="23"/></operator> <literal type="number" pos:line="54" pos:column="24">0<pos:position pos:line="54" pos:column="25"/></literal></expr>;<pos:position pos:line="54" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="55" pos:column="17">tp<pos:position pos:line="55" pos:column="19"/></name><index pos:line="55" pos:column="19">[<expr><literal type="number" pos:line="55" pos:column="20">0<pos:position pos:line="55" pos:column="21"/></literal></expr>]<pos:position pos:line="55" pos:column="22"/></index></name><operator pos:line="55" pos:column="22">.<pos:position pos:line="55" pos:column="23"/></operator><name><name pos:line="55" pos:column="23">entry<pos:position pos:line="55" pos:column="28"/></name><operator pos:line="55" pos:column="28">.<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="29">mode<pos:position pos:line="55" pos:column="33"/></name></name> <operator pos:line="55" pos:column="34">&amp;=<pos:position pos:line="55" pos:column="40"/></operator> <operator pos:line="55" pos:column="37">~<pos:position pos:line="55" pos:column="38"/></operator><name pos:line="55" pos:column="38">S_IFXMIN_NEQ<pos:position pos:line="55" pos:column="50"/></name></expr>;<pos:position pos:line="55" pos:column="51"/></expr_stmt>

		<for pos:line="57" pos:column="17">for <control pos:line="57" pos:column="21">(<init><expr><name pos:line="57" pos:column="22">i<pos:position pos:line="57" pos:column="23"/></name> <operator pos:line="57" pos:column="24">=<pos:position pos:line="57" pos:column="25"/></operator> <literal type="number" pos:line="57" pos:column="26">1<pos:position pos:line="57" pos:column="27"/></literal></expr>;<pos:position pos:line="57" pos:column="28"/></init> <condition><expr><name pos:line="57" pos:column="29">i<pos:position pos:line="57" pos:column="30"/></name> <operator pos:line="57" pos:column="31">&lt;<pos:position pos:line="57" pos:column="35"/></operator> <name pos:line="57" pos:column="33">nparent<pos:position pos:line="57" pos:column="40"/></name></expr>;<pos:position pos:line="57" pos:column="41"/></condition> <incr><expr><operator pos:line="57" pos:column="42">++<pos:position pos:line="57" pos:column="44"/></operator><name pos:line="57" pos:column="44">i<pos:position pos:line="57" pos:column="45"/></name></expr></incr>)<pos:position pos:line="57" pos:column="46"/></control> <block pos:line="57" pos:column="47">{
			<expr_stmt><expr><name pos:line="58" pos:column="25">cmp<pos:position pos:line="58" pos:column="28"/></name> <operator pos:line="58" pos:column="29">=<pos:position pos:line="58" pos:column="30"/></operator> <call><name pos:line="58" pos:column="31">tree_entry_pathcmp<pos:position pos:line="58" pos:column="49"/></name><argument_list pos:line="58" pos:column="49">(<argument><expr><operator pos:line="58" pos:column="50">&amp;<pos:position pos:line="58" pos:column="55"/></operator><name><name pos:line="58" pos:column="51">tp<pos:position pos:line="58" pos:column="53"/></name><index pos:line="58" pos:column="53">[<expr><name pos:line="58" pos:column="54">i<pos:position pos:line="58" pos:column="55"/></name></expr>]<pos:position pos:line="58" pos:column="56"/></index></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="58">&amp;<pos:position pos:line="58" pos:column="63"/></operator><name><name pos:line="58" pos:column="59">tp<pos:position pos:line="58" pos:column="61"/></name><index pos:line="58" pos:column="61">[<expr><name pos:line="58" pos:column="62">imin<pos:position pos:line="58" pos:column="66"/></name></expr>]<pos:position pos:line="58" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="58" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="69"/></expr_stmt>
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name pos:line="59" pos:column="29">cmp<pos:position pos:line="59" pos:column="32"/></name> <operator pos:line="59" pos:column="33">&lt;<pos:position pos:line="59" pos:column="37"/></operator> <literal type="number" pos:line="59" pos:column="35">0<pos:position pos:line="59" pos:column="36"/></literal></expr>)<pos:position pos:line="59" pos:column="37"/></condition><then pos:line="59" pos:column="37"> <block pos:line="59" pos:column="38">{
				<expr_stmt><expr><name pos:line="60" pos:column="33">imin<pos:position pos:line="60" pos:column="37"/></name> <operator pos:line="60" pos:column="38">=<pos:position pos:line="60" pos:column="39"/></operator> <name pos:line="60" pos:column="40">i<pos:position pos:line="60" pos:column="41"/></name></expr>;<pos:position pos:line="60" pos:column="42"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="61" pos:column="33">tp<pos:position pos:line="61" pos:column="35"/></name><index pos:line="61" pos:column="35">[<expr><name pos:line="61" pos:column="36">i<pos:position pos:line="61" pos:column="37"/></name></expr>]<pos:position pos:line="61" pos:column="38"/></index></name><operator pos:line="61" pos:column="38">.<pos:position pos:line="61" pos:column="39"/></operator><name><name pos:line="61" pos:column="39">entry<pos:position pos:line="61" pos:column="44"/></name><operator pos:line="61" pos:column="44">.<pos:position pos:line="61" pos:column="45"/></operator><name pos:line="61" pos:column="45">mode<pos:position pos:line="61" pos:column="49"/></name></name> <operator pos:line="61" pos:column="50">&amp;=<pos:position pos:line="61" pos:column="56"/></operator> <operator pos:line="61" pos:column="53">~<pos:position pos:line="61" pos:column="54"/></operator><name pos:line="61" pos:column="54">S_IFXMIN_NEQ<pos:position pos:line="61" pos:column="66"/></name></expr>;<pos:position pos:line="61" pos:column="67"/></expr_stmt>
			}<pos:position pos:line="62" pos:column="26"/></block></then>
			<elseif pos:line="63" pos:column="25">else <if pos:line="63" pos:column="30">if <condition pos:line="63" pos:column="33">(<expr><name pos:line="63" pos:column="34">cmp<pos:position pos:line="63" pos:column="37"/></name> <operator pos:line="63" pos:column="38">==<pos:position pos:line="63" pos:column="40"/></operator> <literal type="number" pos:line="63" pos:column="41">0<pos:position pos:line="63" pos:column="42"/></literal></expr>)<pos:position pos:line="63" pos:column="43"/></condition><then pos:line="63" pos:column="43"> <block pos:line="63" pos:column="44">{
				<expr_stmt><expr><name><name pos:line="64" pos:column="33">tp<pos:position pos:line="64" pos:column="35"/></name><index pos:line="64" pos:column="35">[<expr><name pos:line="64" pos:column="36">i<pos:position pos:line="64" pos:column="37"/></name></expr>]<pos:position pos:line="64" pos:column="38"/></index></name><operator pos:line="64" pos:column="38">.<pos:position pos:line="64" pos:column="39"/></operator><name><name pos:line="64" pos:column="39">entry<pos:position pos:line="64" pos:column="44"/></name><operator pos:line="64" pos:column="44">.<pos:position pos:line="64" pos:column="45"/></operator><name pos:line="64" pos:column="45">mode<pos:position pos:line="64" pos:column="49"/></name></name> <operator pos:line="64" pos:column="50">&amp;=<pos:position pos:line="64" pos:column="56"/></operator> <operator pos:line="64" pos:column="53">~<pos:position pos:line="64" pos:column="54"/></operator><name pos:line="64" pos:column="54">S_IFXMIN_NEQ<pos:position pos:line="64" pos:column="66"/></name></expr>;<pos:position pos:line="64" pos:column="67"/></expr_stmt>
			}<pos:position pos:line="65" pos:column="26"/></block></then></if></elseif>
			<else pos:line="66" pos:column="25">else <block pos:line="66" pos:column="30">{
				<expr_stmt><expr><name><name pos:line="67" pos:column="33">tp<pos:position pos:line="67" pos:column="35"/></name><index pos:line="67" pos:column="35">[<expr><name pos:line="67" pos:column="36">i<pos:position pos:line="67" pos:column="37"/></name></expr>]<pos:position pos:line="67" pos:column="38"/></index></name><operator pos:line="67" pos:column="38">.<pos:position pos:line="67" pos:column="39"/></operator><name><name pos:line="67" pos:column="39">entry<pos:position pos:line="67" pos:column="44"/></name><operator pos:line="67" pos:column="44">.<pos:position pos:line="67" pos:column="45"/></operator><name pos:line="67" pos:column="45">mode<pos:position pos:line="67" pos:column="49"/></name></name> <operator pos:line="67" pos:column="50">|=<pos:position pos:line="67" pos:column="52"/></operator> <name pos:line="67" pos:column="53">S_IFXMIN_NEQ<pos:position pos:line="67" pos:column="65"/></name></expr>;<pos:position pos:line="67" pos:column="66"/></expr_stmt>
			}<pos:position pos:line="68" pos:column="26"/></block></else></if>
		}<pos:position pos:line="69" pos:column="18"/></block></for>

		<comment type="block" pos:line="71" pos:column="17">/* fixup markings for entries before imin */</comment>
		<for pos:line="72" pos:column="17">for <control pos:line="72" pos:column="21">(<init><expr><name pos:line="72" pos:column="22">i<pos:position pos:line="72" pos:column="23"/></name> <operator pos:line="72" pos:column="24">=<pos:position pos:line="72" pos:column="25"/></operator> <literal type="number" pos:line="72" pos:column="26">0<pos:position pos:line="72" pos:column="27"/></literal></expr>;<pos:position pos:line="72" pos:column="28"/></init> <condition><expr><name pos:line="72" pos:column="29">i<pos:position pos:line="72" pos:column="30"/></name> <operator pos:line="72" pos:column="31">&lt;<pos:position pos:line="72" pos:column="35"/></operator> <name pos:line="72" pos:column="33">imin<pos:position pos:line="72" pos:column="37"/></name></expr>;<pos:position pos:line="72" pos:column="38"/></condition> <incr><expr><operator pos:line="72" pos:column="39">++<pos:position pos:line="72" pos:column="41"/></operator><name pos:line="72" pos:column="41">i<pos:position pos:line="72" pos:column="42"/></name></expr></incr>)<pos:position pos:line="72" pos:column="43"/></control>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="73" pos:column="25">tp<pos:position pos:line="73" pos:column="27"/></name><index pos:line="73" pos:column="27">[<expr><name pos:line="73" pos:column="28">i<pos:position pos:line="73" pos:column="29"/></name></expr>]<pos:position pos:line="73" pos:column="30"/></index></name><operator pos:line="73" pos:column="30">.<pos:position pos:line="73" pos:column="31"/></operator><name><name pos:line="73" pos:column="31">entry<pos:position pos:line="73" pos:column="36"/></name><operator pos:line="73" pos:column="36">.<pos:position pos:line="73" pos:column="37"/></operator><name pos:line="73" pos:column="37">mode<pos:position pos:line="73" pos:column="41"/></name></name> <operator pos:line="73" pos:column="42">|=<pos:position pos:line="73" pos:column="44"/></operator> <name pos:line="73" pos:column="45">S_IFXMIN_NEQ<pos:position pos:line="73" pos:column="57"/></name></expr>;<pos:position pos:line="73" pos:column="58"/></expr_stmt></block></for>	<comment type="block" pos:line="73" pos:column="65">/* pi &gt; p[imin] */</comment>



		<comment type="block" pos:line="77" pos:column="17">/* compare t vs p[imin] */</comment>
		<expr_stmt><expr><name pos:line="78" pos:column="17">cmp<pos:position pos:line="78" pos:column="20"/></name> <operator pos:line="78" pos:column="21">=<pos:position pos:line="78" pos:column="22"/></operator> <call><name pos:line="78" pos:column="23">tree_entry_pathcmp<pos:position pos:line="78" pos:column="41"/></name><argument_list pos:line="78" pos:column="41">(<argument><expr><operator pos:line="78" pos:column="42">&amp;<pos:position pos:line="78" pos:column="47"/></operator><name pos:line="78" pos:column="43">t<pos:position pos:line="78" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="46">&amp;<pos:position pos:line="78" pos:column="51"/></operator><name><name pos:line="78" pos:column="47">tp<pos:position pos:line="78" pos:column="49"/></name><index pos:line="78" pos:column="49">[<expr><name pos:line="78" pos:column="50">imin<pos:position pos:line="78" pos:column="54"/></name></expr>]<pos:position pos:line="78" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="78" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="57"/></expr_stmt>

		<comment type="block" pos:line="80" pos:column="17">/* t = p[imin] */</comment>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name pos:line="81" pos:column="21">cmp<pos:position pos:line="81" pos:column="24"/></name> <operator pos:line="81" pos:column="25">==<pos:position pos:line="81" pos:column="27"/></operator> <literal type="number" pos:line="81" pos:column="28">0<pos:position pos:line="81" pos:column="29"/></literal></expr>)<pos:position pos:line="81" pos:column="30"/></condition><then pos:line="81" pos:column="30"> <block pos:line="81" pos:column="31">{
			<comment type="block" pos:line="82" pos:column="25">/* are either pi &gt; p[imin] or diff(t,pi) != Ã¸ ? */</comment>
			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><operator pos:line="83" pos:column="29">!<pos:position pos:line="83" pos:column="30"/></operator><call><name pos:line="83" pos:column="30">DIFF_OPT_TST<pos:position pos:line="83" pos:column="42"/></name><argument_list pos:line="83" pos:column="42">(<argument><expr><name pos:line="83" pos:column="43">opt<pos:position pos:line="83" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="48">FIND_COPIES_HARDER<pos:position pos:line="83" pos:column="66"/></name></expr></argument>)<pos:position pos:line="83" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="68"/></condition><then pos:line="83" pos:column="68"> <block pos:line="83" pos:column="69">{
				<for pos:line="84" pos:column="33">for <control pos:line="84" pos:column="37">(<init><expr><name pos:line="84" pos:column="38">i<pos:position pos:line="84" pos:column="39"/></name> <operator pos:line="84" pos:column="40">=<pos:position pos:line="84" pos:column="41"/></operator> <literal type="number" pos:line="84" pos:column="42">0<pos:position pos:line="84" pos:column="43"/></literal></expr>;<pos:position pos:line="84" pos:column="44"/></init> <condition><expr><name pos:line="84" pos:column="45">i<pos:position pos:line="84" pos:column="46"/></name> <operator pos:line="84" pos:column="47">&lt;<pos:position pos:line="84" pos:column="51"/></operator> <name pos:line="84" pos:column="49">nparent<pos:position pos:line="84" pos:column="56"/></name></expr>;<pos:position pos:line="84" pos:column="57"/></condition> <incr><expr><operator pos:line="84" pos:column="58">++<pos:position pos:line="84" pos:column="60"/></operator><name pos:line="84" pos:column="60">i<pos:position pos:line="84" pos:column="61"/></name></expr></incr>)<pos:position pos:line="84" pos:column="62"/></control> <block pos:line="84" pos:column="63">{
					<comment type="block" pos:line="85" pos:column="41">/* p[i] &gt; p[imin] */</comment>
					<if pos:line="86" pos:column="41">if <condition pos:line="86" pos:column="44">(<expr><name><name pos:line="86" pos:column="45">tp<pos:position pos:line="86" pos:column="47"/></name><index pos:line="86" pos:column="47">[<expr><name pos:line="86" pos:column="48">i<pos:position pos:line="86" pos:column="49"/></name></expr>]<pos:position pos:line="86" pos:column="50"/></index></name><operator pos:line="86" pos:column="50">.<pos:position pos:line="86" pos:column="51"/></operator><name><name pos:line="86" pos:column="51">entry<pos:position pos:line="86" pos:column="56"/></name><operator pos:line="86" pos:column="56">.<pos:position pos:line="86" pos:column="57"/></operator><name pos:line="86" pos:column="57">mode<pos:position pos:line="86" pos:column="61"/></name></name> <operator pos:line="86" pos:column="62">&amp;<pos:position pos:line="86" pos:column="67"/></operator> <name pos:line="86" pos:column="64">S_IFXMIN_NEQ<pos:position pos:line="86" pos:column="76"/></name></expr>)<pos:position pos:line="86" pos:column="77"/></condition><then pos:line="86" pos:column="77">
						<block type="pseudo"><continue pos:line="87" pos:column="49">continue;<pos:position pos:line="87" pos:column="58"/></continue></block></then></if>

					<comment type="block" pos:line="89" pos:column="41">/* diff(t,pi) != Ã¸ */</comment>
					<if pos:line="90" pos:column="41">if <condition pos:line="90" pos:column="44">(<expr><call><name pos:line="90" pos:column="45">oidcmp<pos:position pos:line="90" pos:column="51"/></name><argument_list pos:line="90" pos:column="51">(<argument><expr><name><name pos:line="90" pos:column="52">t<pos:position pos:line="90" pos:column="53"/></name><operator pos:line="90" pos:column="53">.<pos:position pos:line="90" pos:column="54"/></operator><name pos:line="90" pos:column="54">entry<pos:position pos:line="90" pos:column="59"/></name><operator pos:line="90" pos:column="59">.<pos:position pos:line="90" pos:column="60"/></operator><name pos:line="90" pos:column="60">oid<pos:position pos:line="90" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="65">tp<pos:position pos:line="90" pos:column="67"/></name><index pos:line="90" pos:column="67">[<expr><name pos:line="90" pos:column="68">i<pos:position pos:line="90" pos:column="69"/></name></expr>]<pos:position pos:line="90" pos:column="70"/></index></name><operator pos:line="90" pos:column="70">.<pos:position pos:line="90" pos:column="71"/></operator><name><name pos:line="90" pos:column="71">entry<pos:position pos:line="90" pos:column="76"/></name><operator pos:line="90" pos:column="76">.<pos:position pos:line="90" pos:column="77"/></operator><name pos:line="90" pos:column="77">oid<pos:position pos:line="90" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="81"/></argument_list></call> <operator pos:line="90" pos:column="82">||<pos:position pos:line="90" pos:column="84"/></operator>
					    <operator pos:line="91" pos:column="45">(<pos:position pos:line="91" pos:column="46"/></operator><name><name pos:line="91" pos:column="46">t<pos:position pos:line="91" pos:column="47"/></name><operator pos:line="91" pos:column="47">.<pos:position pos:line="91" pos:column="48"/></operator><name pos:line="91" pos:column="48">entry<pos:position pos:line="91" pos:column="53"/></name><operator pos:line="91" pos:column="53">.<pos:position pos:line="91" pos:column="54"/></operator><name pos:line="91" pos:column="54">mode<pos:position pos:line="91" pos:column="58"/></name></name> <operator pos:line="91" pos:column="59">!=<pos:position pos:line="91" pos:column="61"/></operator> <name><name pos:line="91" pos:column="62">tp<pos:position pos:line="91" pos:column="64"/></name><index pos:line="91" pos:column="64">[<expr><name pos:line="91" pos:column="65">i<pos:position pos:line="91" pos:column="66"/></name></expr>]<pos:position pos:line="91" pos:column="67"/></index></name><operator pos:line="91" pos:column="67">.<pos:position pos:line="91" pos:column="68"/></operator><name><name pos:line="91" pos:column="68">entry<pos:position pos:line="91" pos:column="73"/></name><operator pos:line="91" pos:column="73">.<pos:position pos:line="91" pos:column="74"/></operator><name pos:line="91" pos:column="74">mode<pos:position pos:line="91" pos:column="78"/></name></name><operator pos:line="91" pos:column="78">)<pos:position pos:line="91" pos:column="79"/></operator></expr>)<pos:position pos:line="91" pos:column="80"/></condition><then pos:line="91" pos:column="80">
						<block type="pseudo"><continue pos:line="92" pos:column="49">continue;<pos:position pos:line="92" pos:column="58"/></continue></block></then></if>

					<goto pos:line="94" pos:column="41">goto <name pos:line="94" pos:column="46">skip_emit_t_tp<pos:position pos:line="94" pos:column="60"/></name>;<pos:position pos:line="94" pos:column="61"/></goto>
				}<pos:position pos:line="95" pos:column="34"/></block></for>
			}<pos:position pos:line="96" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="98" pos:column="25">/* D += {Î´(t,pi) if pi=p[imin];  "+a" if pi &gt; p[imin]} */</comment>
			<expr_stmt><expr><name pos:line="99" pos:column="25">p<pos:position pos:line="99" pos:column="26"/></name> <operator pos:line="99" pos:column="27">=<pos:position pos:line="99" pos:column="28"/></operator> <call><name pos:line="99" pos:column="29">emit_path<pos:position pos:line="99" pos:column="38"/></name><argument_list pos:line="99" pos:column="38">(<argument><expr><name pos:line="99" pos:column="39">p<pos:position pos:line="99" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="42">base<pos:position pos:line="99" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="48">opt<pos:position pos:line="99" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="53">nparent<pos:position pos:line="99" pos:column="60"/></name></expr></argument>,
					<argument><expr><operator pos:line="100" pos:column="41">&amp;<pos:position pos:line="100" pos:column="46"/></operator><name pos:line="100" pos:column="42">t<pos:position pos:line="100" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="45">tp<pos:position pos:line="100" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="49">imin<pos:position pos:line="100" pos:column="53"/></name></expr></argument>)<pos:position pos:line="100" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="55"/></expr_stmt>

		<label><name pos:line="102" pos:column="17">skip_emit_t_tp<pos:position pos:line="102" pos:column="31"/></name>:<pos:position pos:line="102" pos:column="32"/></label>
			<comment type="block" pos:line="103" pos:column="25">/* tâ,  â pi=p[imin]  piâ */</comment>
			<expr_stmt><expr><call><name pos:line="104" pos:column="25">update_tree_entry<pos:position pos:line="104" pos:column="42"/></name><argument_list pos:line="104" pos:column="42">(<argument><expr><operator pos:line="104" pos:column="43">&amp;<pos:position pos:line="104" pos:column="48"/></operator><name pos:line="104" pos:column="44">t<pos:position pos:line="104" pos:column="45"/></name></expr></argument>)<pos:position pos:line="104" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="105" pos:column="25">update_tp_entries<pos:position pos:line="105" pos:column="42"/></name><argument_list pos:line="105" pos:column="42">(<argument><expr><name pos:line="105" pos:column="43">tp<pos:position pos:line="105" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="47">nparent<pos:position pos:line="105" pos:column="54"/></name></expr></argument>)<pos:position pos:line="105" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="106" pos:column="18"/></block></then>

		<comment type="block" pos:line="108" pos:column="17">/* t &lt; p[imin] */</comment>
		<elseif pos:line="109" pos:column="17">else <if pos:line="109" pos:column="22">if <condition pos:line="109" pos:column="25">(<expr><name pos:line="109" pos:column="26">cmp<pos:position pos:line="109" pos:column="29"/></name> <operator pos:line="109" pos:column="30">&lt;<pos:position pos:line="109" pos:column="34"/></operator> <literal type="number" pos:line="109" pos:column="32">0<pos:position pos:line="109" pos:column="33"/></literal></expr>)<pos:position pos:line="109" pos:column="34"/></condition><then pos:line="109" pos:column="34"> <block pos:line="109" pos:column="35">{
			<comment type="block" pos:line="110" pos:column="25">/* D += "+t" */</comment>
			<expr_stmt><expr><name pos:line="111" pos:column="25">p<pos:position pos:line="111" pos:column="26"/></name> <operator pos:line="111" pos:column="27">=<pos:position pos:line="111" pos:column="28"/></operator> <call><name pos:line="111" pos:column="29">emit_path<pos:position pos:line="111" pos:column="38"/></name><argument_list pos:line="111" pos:column="38">(<argument><expr><name pos:line="111" pos:column="39">p<pos:position pos:line="111" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="42">base<pos:position pos:line="111" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="48">opt<pos:position pos:line="111" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="53">nparent<pos:position pos:line="111" pos:column="60"/></name></expr></argument>,
					<argument><expr><operator pos:line="112" pos:column="41">&amp;<pos:position pos:line="112" pos:column="46"/></operator><name pos:line="112" pos:column="42">t<pos:position pos:line="112" pos:column="43"/></name></expr></argument>, <comment type="block" pos:line="112" pos:column="45">/*tp=*/</comment><argument><expr><name pos:line="112" pos:column="52">NULL<pos:position pos:line="112" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="112" pos:column="58">-<pos:position pos:line="112" pos:column="59"/></operator><literal type="number" pos:line="112" pos:column="59">1<pos:position pos:line="112" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="62"/></expr_stmt>

			<comment type="block" pos:line="114" pos:column="25">/* tâ */</comment>
			<expr_stmt><expr><call><name pos:line="115" pos:column="25">update_tree_entry<pos:position pos:line="115" pos:column="42"/></name><argument_list pos:line="115" pos:column="42">(<argument><expr><operator pos:line="115" pos:column="43">&amp;<pos:position pos:line="115" pos:column="48"/></operator><name pos:line="115" pos:column="44">t<pos:position pos:line="115" pos:column="45"/></name></expr></argument>)<pos:position pos:line="115" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="116" pos:column="18"/></block></then></if></elseif>

		<comment type="block" pos:line="118" pos:column="17">/* t &gt; p[imin] */</comment>
		<else pos:line="119" pos:column="17">else <block pos:line="119" pos:column="22">{
			<comment type="block" pos:line="120" pos:column="25">/* âi pi=p[imin] -&gt; D += "-p[imin]" */</comment>
			<if pos:line="121" pos:column="25">if <condition pos:line="121" pos:column="28">(<expr><operator pos:line="121" pos:column="29">!<pos:position pos:line="121" pos:column="30"/></operator><call><name pos:line="121" pos:column="30">DIFF_OPT_TST<pos:position pos:line="121" pos:column="42"/></name><argument_list pos:line="121" pos:column="42">(<argument><expr><name pos:line="121" pos:column="43">opt<pos:position pos:line="121" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="48">FIND_COPIES_HARDER<pos:position pos:line="121" pos:column="66"/></name></expr></argument>)<pos:position pos:line="121" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="121" pos:column="68"/></condition><then pos:line="121" pos:column="68"> <block pos:line="121" pos:column="69">{
				<for pos:line="122" pos:column="33">for <control pos:line="122" pos:column="37">(<init><expr><name pos:line="122" pos:column="38">i<pos:position pos:line="122" pos:column="39"/></name> <operator pos:line="122" pos:column="40">=<pos:position pos:line="122" pos:column="41"/></operator> <literal type="number" pos:line="122" pos:column="42">0<pos:position pos:line="122" pos:column="43"/></literal></expr>;<pos:position pos:line="122" pos:column="44"/></init> <condition><expr><name pos:line="122" pos:column="45">i<pos:position pos:line="122" pos:column="46"/></name> <operator pos:line="122" pos:column="47">&lt;<pos:position pos:line="122" pos:column="51"/></operator> <name pos:line="122" pos:column="49">nparent<pos:position pos:line="122" pos:column="56"/></name></expr>;<pos:position pos:line="122" pos:column="57"/></condition> <incr><expr><operator pos:line="122" pos:column="58">++<pos:position pos:line="122" pos:column="60"/></operator><name pos:line="122" pos:column="60">i<pos:position pos:line="122" pos:column="61"/></name></expr></incr>)<pos:position pos:line="122" pos:column="62"/></control>
					<block type="pseudo"><if pos:line="123" pos:column="41">if <condition pos:line="123" pos:column="44">(<expr><name><name pos:line="123" pos:column="45">tp<pos:position pos:line="123" pos:column="47"/></name><index pos:line="123" pos:column="47">[<expr><name pos:line="123" pos:column="48">i<pos:position pos:line="123" pos:column="49"/></name></expr>]<pos:position pos:line="123" pos:column="50"/></index></name><operator pos:line="123" pos:column="50">.<pos:position pos:line="123" pos:column="51"/></operator><name><name pos:line="123" pos:column="51">entry<pos:position pos:line="123" pos:column="56"/></name><operator pos:line="123" pos:column="56">.<pos:position pos:line="123" pos:column="57"/></operator><name pos:line="123" pos:column="57">mode<pos:position pos:line="123" pos:column="61"/></name></name> <operator pos:line="123" pos:column="62">&amp;<pos:position pos:line="123" pos:column="67"/></operator> <name pos:line="123" pos:column="64">S_IFXMIN_NEQ<pos:position pos:line="123" pos:column="76"/></name></expr>)<pos:position pos:line="123" pos:column="77"/></condition><then pos:line="123" pos:column="77">
						<block type="pseudo"><goto pos:line="124" pos:column="49">goto <name pos:line="124" pos:column="54">skip_emit_tp<pos:position pos:line="124" pos:column="66"/></name>;<pos:position pos:line="124" pos:column="67"/></goto></block></then></if></block></for>
			}<pos:position pos:line="125" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name pos:line="127" pos:column="25">p<pos:position pos:line="127" pos:column="26"/></name> <operator pos:line="127" pos:column="27">=<pos:position pos:line="127" pos:column="28"/></operator> <call><name pos:line="127" pos:column="29">emit_path<pos:position pos:line="127" pos:column="38"/></name><argument_list pos:line="127" pos:column="38">(<argument><expr><name pos:line="127" pos:column="39">p<pos:position pos:line="127" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="42">base<pos:position pos:line="127" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="48">opt<pos:position pos:line="127" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="53">nparent<pos:position pos:line="127" pos:column="60"/></name></expr></argument>,
					<comment type="block" pos:line="128" pos:column="41">/*t=*/</comment><argument><expr><name pos:line="128" pos:column="47">NULL<pos:position pos:line="128" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="53">tp<pos:position pos:line="128" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="57">imin<pos:position pos:line="128" pos:column="61"/></name></expr></argument>)<pos:position pos:line="128" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="63"/></expr_stmt>

		<label><name pos:line="130" pos:column="17">skip_emit_tp<pos:position pos:line="130" pos:column="29"/></name>:<pos:position pos:line="130" pos:column="30"/></label>
			<comment type="block" pos:line="131" pos:column="25">/* â pi=p[imin]  piâ */</comment>
			<expr_stmt><expr><call><name pos:line="132" pos:column="25">update_tp_entries<pos:position pos:line="132" pos:column="42"/></name><argument_list pos:line="132" pos:column="42">(<argument><expr><name pos:line="132" pos:column="43">tp<pos:position pos:line="132" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="47">nparent<pos:position pos:line="132" pos:column="54"/></name></expr></argument>)<pos:position pos:line="132" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="133" pos:column="18"/></block></else></if>
	}<pos:position pos:line="134" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="136" pos:column="9">free<pos:position pos:line="136" pos:column="13"/></name><argument_list pos:line="136" pos:column="13">(<argument><expr><name pos:line="136" pos:column="14">ttree<pos:position pos:line="136" pos:column="19"/></name></expr></argument>)<pos:position pos:line="136" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="21"/></expr_stmt>
	<for pos:line="137" pos:column="9">for <control pos:line="137" pos:column="13">(<init><expr><name pos:line="137" pos:column="14">i<pos:position pos:line="137" pos:column="15"/></name> <operator pos:line="137" pos:column="16">=<pos:position pos:line="137" pos:column="17"/></operator> <name pos:line="137" pos:column="18">nparent<pos:position pos:line="137" pos:column="25"/></name><operator pos:line="137" pos:column="25">-<pos:position pos:line="137" pos:column="26"/></operator><literal type="number" pos:line="137" pos:column="26">1<pos:position pos:line="137" pos:column="27"/></literal></expr>;<pos:position pos:line="137" pos:column="28"/></init> <condition><expr><name pos:line="137" pos:column="29">i<pos:position pos:line="137" pos:column="30"/></name> <operator pos:line="137" pos:column="31">&gt;=<pos:position pos:line="137" pos:column="36"/></operator> <literal type="number" pos:line="137" pos:column="34">0<pos:position pos:line="137" pos:column="35"/></literal></expr>;<pos:position pos:line="137" pos:column="36"/></condition> <incr><expr><name pos:line="137" pos:column="37">i<pos:position pos:line="137" pos:column="38"/></name><operator pos:line="137" pos:column="38">--<pos:position pos:line="137" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="137" pos:column="41"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="138" pos:column="17">free<pos:position pos:line="138" pos:column="21"/></name><argument_list pos:line="138" pos:column="21">(<argument><expr><name><name pos:line="138" pos:column="22">tptree<pos:position pos:line="138" pos:column="28"/></name><index pos:line="138" pos:column="28">[<expr><name pos:line="138" pos:column="29">i<pos:position pos:line="138" pos:column="30"/></name></expr>]<pos:position pos:line="138" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="138" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="33"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="139" pos:column="9">FAST_ARRAY_FREE<pos:position pos:line="139" pos:column="24"/></name><argument_list pos:line="139" pos:column="24">(<argument><expr><name pos:line="139" pos:column="25">tptree<pos:position pos:line="139" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="33">nparent<pos:position pos:line="139" pos:column="40"/></name></expr></argument>)<pos:position pos:line="139" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="140" pos:column="9">FAST_ARRAY_FREE<pos:position pos:line="140" pos:column="24"/></name><argument_list pos:line="140" pos:column="24">(<argument><expr><name pos:line="140" pos:column="25">tp<pos:position pos:line="140" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="29">nparent<pos:position pos:line="140" pos:column="36"/></name></expr></argument>)<pos:position pos:line="140" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="38"/></expr_stmt>

	<return pos:line="142" pos:column="9">return <expr><name pos:line="142" pos:column="16">p<pos:position pos:line="142" pos:column="17"/></name></expr>;<pos:position pos:line="142" pos:column="18"/></return>
}<pos:position pos:line="143" pos:column="2"/></block></function></unit>
