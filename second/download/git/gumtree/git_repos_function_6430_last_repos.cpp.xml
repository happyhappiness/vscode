<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6430_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">files_rename_ref<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">ref_store<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">ref_store<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">oldrefname<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier> <name pos:line="2" pos:column="59">char<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">newrefname<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="3" pos:column="29">const<pos:position pos:line="3" pos:column="34"/></specifier> <name pos:line="3" pos:column="35">char<pos:position pos:line="3" pos:column="39"/></name> <modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier></type><name pos:line="3" pos:column="41">logmsg<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="48"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">files_ref_store<pos:position pos:line="5" pos:column="31"/></name></name> <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier></type><name pos:line="5" pos:column="33">refs<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">=
		<expr><call><name pos:line="6" pos:column="17">files_downcast<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name pos:line="6" pos:column="32">ref_store<pos:position pos:line="6" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="43">REF_STORE_WRITE<pos:position pos:line="6" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="60">"rename_ref"<pos:position pos:line="6" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="74"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">object_id<pos:position pos:line="7" pos:column="25"/></name></name></type> <name pos:line="7" pos:column="26">oid<pos:position pos:line="7" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="31">orig_oid<pos:position pos:line="7" pos:column="39"/></name></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">flag<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><literal type="number" pos:line="8" pos:column="20">0<pos:position pos:line="8" pos:column="21"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="23">logmoved<pos:position pos:line="8" pos:column="31"/></name> <init pos:line="8" pos:column="32">= <expr><literal type="number" pos:line="8" pos:column="34">0<pos:position pos:line="8" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">ref_lock<pos:position pos:line="9" pos:column="24"/></name></name> <modifier pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></modifier></type><name pos:line="9" pos:column="26">lock<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">stat<pos:position pos:line="10" pos:column="20"/></name></name></type> <name pos:line="10" pos:column="21">loginfo<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">strbuf<pos:position pos:line="11" pos:column="22"/></name></name></type> <name pos:line="11" pos:column="23">sb_oldref<pos:position pos:line="11" pos:column="32"/></name> <init pos:line="11" pos:column="33">= <expr><name pos:line="11" pos:column="35">STRBUF_INIT<pos:position pos:line="11" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">strbuf<pos:position pos:line="12" pos:column="22"/></name></name></type> <name pos:line="12" pos:column="23">sb_newref<pos:position pos:line="12" pos:column="32"/></name> <init pos:line="12" pos:column="33">= <expr><name pos:line="12" pos:column="35">STRBUF_INIT<pos:position pos:line="12" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">struct<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">strbuf<pos:position pos:line="13" pos:column="22"/></name></name></type> <name pos:line="13" pos:column="23">tmp_renamed_log<pos:position pos:line="13" pos:column="38"/></name> <init pos:line="13" pos:column="39">= <expr><name pos:line="13" pos:column="41">STRBUF_INIT<pos:position pos:line="13" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="53"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">log<pos:position pos:line="14" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="14" pos:column="18">ret<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="15" pos:column="9">struct<pos:position pos:line="15" pos:column="15"/></name> <name pos:line="15" pos:column="16">strbuf<pos:position pos:line="15" pos:column="22"/></name></name></type> <name pos:line="15" pos:column="23">err<pos:position pos:line="15" pos:column="26"/></name> <init pos:line="15" pos:column="27">= <expr><name pos:line="15" pos:column="29">STRBUF_INIT<pos:position pos:line="15" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="41"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">files_reflog_path<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">refs<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="33">&amp;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="34">sb_oldref<pos:position pos:line="17" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="45">oldrefname<pos:position pos:line="17" pos:column="55"/></name></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">files_reflog_path<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">refs<pos:position pos:line="18" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="33">&amp;<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="34">sb_newref<pos:position pos:line="18" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="45">newrefname<pos:position pos:line="18" pos:column="55"/></name></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">files_reflog_path<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">refs<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="33">&amp;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="34">tmp_renamed_log<pos:position pos:line="19" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="51">TMP_RENAMED_LOG<pos:position pos:line="19" pos:column="66"/></name></expr></argument>)<pos:position pos:line="19" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="68"/></expr_stmt>

	<expr_stmt><expr><name pos:line="21" pos:column="9">log<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <operator pos:line="21" pos:column="15">!<pos:position pos:line="21" pos:column="16"/></operator><call><name pos:line="21" pos:column="16">lstat<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name><name pos:line="21" pos:column="22">sb_oldref<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">.<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="32">buf<pos:position pos:line="21" pos:column="35"/></name></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="37">&amp;<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="38">loginfo<pos:position pos:line="21" pos:column="45"/></name></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">log<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">&amp;&amp;<pos:position pos:line="22" pos:column="27"/></operator> <call><name pos:line="22" pos:column="20">S_ISLNK<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name><name pos:line="22" pos:column="28">loginfo<pos:position pos:line="22" pos:column="35"/></name><operator pos:line="22" pos:column="35">.<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="36">st_mode<pos:position pos:line="22" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="45"/></condition><then pos:line="22" pos:column="45"> <block pos:line="22" pos:column="46">{
		<expr_stmt><expr><name pos:line="23" pos:column="17">ret<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <call><name pos:line="23" pos:column="23">error<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><literal type="string" pos:line="23" pos:column="29">"reflog for %s is a symlink"<pos:position pos:line="23" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="59">oldrefname<pos:position pos:line="23" pos:column="69"/></name></expr></argument>)<pos:position pos:line="23" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="71"/></expr_stmt>
		<goto pos:line="24" pos:column="17">goto <name pos:line="24" pos:column="22">out<pos:position pos:line="24" pos:column="25"/></name>;<pos:position pos:line="24" pos:column="26"/></goto>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><call><name pos:line="27" pos:column="14">refs_resolve_ref_unsafe<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><operator pos:line="27" pos:column="38">&amp;<pos:position pos:line="27" pos:column="43"/></operator><name><name pos:line="27" pos:column="39">refs<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">-&gt;<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="45">base<pos:position pos:line="27" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="51">oldrefname<pos:position pos:line="27" pos:column="61"/></name></expr></argument>,
				     <argument><expr><name pos:line="28" pos:column="38">RESOLVE_REF_READING<pos:position pos:line="28" pos:column="57"/></name> <operator pos:line="28" pos:column="58">|<pos:position pos:line="28" pos:column="59"/></operator> <name pos:line="28" pos:column="60">RESOLVE_REF_NO_RECURSE<pos:position pos:line="28" pos:column="82"/></name></expr></argument>,
				<argument><expr><name><name pos:line="29" pos:column="33">orig_oid<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">.<pos:position pos:line="29" pos:column="42"/></operator><name pos:line="29" pos:column="42">hash<pos:position pos:line="29" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="48">&amp;<pos:position pos:line="29" pos:column="53"/></operator><name pos:line="29" pos:column="49">flag<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="55"/></condition><then pos:line="29" pos:column="55"> <block pos:line="29" pos:column="56">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">ret<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">error<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><literal type="string" pos:line="30" pos:column="29">"refname %s not found"<pos:position pos:line="30" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="53">oldrefname<pos:position pos:line="30" pos:column="63"/></name></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="65"/></expr_stmt>
		<goto pos:line="31" pos:column="17">goto <name pos:line="31" pos:column="22">out<pos:position pos:line="31" pos:column="25"/></name>;<pos:position pos:line="31" pos:column="26"/></goto>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">flag<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">&amp;<pos:position pos:line="34" pos:column="23"/></operator> <name pos:line="34" pos:column="20">REF_ISSYMREF<pos:position pos:line="34" pos:column="32"/></name></expr>)<pos:position pos:line="34" pos:column="33"/></condition><then pos:line="34" pos:column="33"> <block pos:line="34" pos:column="34">{
		<expr_stmt><expr><name pos:line="35" pos:column="17">ret<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <call><name pos:line="35" pos:column="23">error<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><literal type="string" pos:line="35" pos:column="29">"refname %s is a symbolic ref, renaming it is not supported"<pos:position pos:line="35" pos:column="89"/></literal></expr></argument>,
			    <argument><expr><name pos:line="36" pos:column="29">oldrefname<pos:position pos:line="36" pos:column="39"/></name></expr></argument>)<pos:position pos:line="36" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="41"/></expr_stmt>
		<goto pos:line="37" pos:column="17">goto <name pos:line="37" pos:column="22">out<pos:position pos:line="37" pos:column="25"/></name>;<pos:position pos:line="37" pos:column="26"/></goto>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><operator pos:line="39" pos:column="13">!<pos:position pos:line="39" pos:column="14"/></operator><call><name pos:line="39" pos:column="14">refs_rename_ref_available<pos:position pos:line="39" pos:column="39"/></name><argument_list pos:line="39" pos:column="39">(<argument><expr><operator pos:line="39" pos:column="40">&amp;<pos:position pos:line="39" pos:column="45"/></operator><name><name pos:line="39" pos:column="41">refs<pos:position pos:line="39" pos:column="45"/></name><operator pos:line="39" pos:column="45">-&gt;<pos:position pos:line="39" pos:column="50"/></operator><name pos:line="39" pos:column="47">base<pos:position pos:line="39" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="53">oldrefname<pos:position pos:line="39" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="65">newrefname<pos:position pos:line="39" pos:column="75"/></name></expr></argument>)<pos:position pos:line="39" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="77"/></condition><then pos:line="39" pos:column="77"> <block pos:line="39" pos:column="78">{
		<expr_stmt><expr><name pos:line="40" pos:column="17">ret<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <literal type="number" pos:line="40" pos:column="23">1<pos:position pos:line="40" pos:column="24"/></literal></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>
		<goto pos:line="41" pos:column="17">goto <name pos:line="41" pos:column="22">out<pos:position pos:line="41" pos:column="25"/></name>;<pos:position pos:line="41" pos:column="26"/></goto>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">log<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">&amp;&amp;<pos:position pos:line="44" pos:column="27"/></operator> <call><name pos:line="44" pos:column="20">rename<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name><name pos:line="44" pos:column="27">sb_oldref<pos:position pos:line="44" pos:column="36"/></name><operator pos:line="44" pos:column="36">.<pos:position pos:line="44" pos:column="37"/></operator><name pos:line="44" pos:column="37">buf<pos:position pos:line="44" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="42">tmp_renamed_log<pos:position pos:line="44" pos:column="57"/></name><operator pos:line="44" pos:column="57">.<pos:position pos:line="44" pos:column="58"/></operator><name pos:line="44" pos:column="58">buf<pos:position pos:line="44" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="63"/></condition><then pos:line="44" pos:column="63"> <block pos:line="44" pos:column="64">{
		<expr_stmt><expr><name pos:line="45" pos:column="17">ret<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">=<pos:position pos:line="45" pos:column="22"/></operator> <call><name pos:line="45" pos:column="23">error<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><literal type="string" pos:line="45" pos:column="29">"unable to move logfile logs/%s to logs/"<pos:position pos:line="45" pos:column="70"/></literal><name pos:line="45" pos:column="70">TMP_RENAMED_LOG<pos:position pos:line="45" pos:column="85"/></name><literal type="string" pos:line="45" pos:column="85">": %s"<pos:position pos:line="45" pos:column="91"/></literal></expr></argument>,
			    <argument><expr><name pos:line="46" pos:column="29">oldrefname<pos:position pos:line="46" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="41">strerror<pos:position pos:line="46" pos:column="49"/></name><argument_list pos:line="46" pos:column="49">(<argument><expr><name pos:line="46" pos:column="50">errno<pos:position pos:line="46" pos:column="55"/></name></expr></argument>)<pos:position pos:line="46" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="58"/></expr_stmt>
		<goto pos:line="47" pos:column="17">goto <name pos:line="47" pos:column="22">out<pos:position pos:line="47" pos:column="25"/></name>;<pos:position pos:line="47" pos:column="26"/></goto>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><call><name pos:line="50" pos:column="13">refs_delete_ref<pos:position pos:line="50" pos:column="28"/></name><argument_list pos:line="50" pos:column="28">(<argument><expr><operator pos:line="50" pos:column="29">&amp;<pos:position pos:line="50" pos:column="34"/></operator><name><name pos:line="50" pos:column="30">refs<pos:position pos:line="50" pos:column="34"/></name><operator pos:line="50" pos:column="34">-&gt;<pos:position pos:line="50" pos:column="39"/></operator><name pos:line="50" pos:column="36">base<pos:position pos:line="50" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="42">logmsg<pos:position pos:line="50" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="50">oldrefname<pos:position pos:line="50" pos:column="60"/></name></expr></argument>,
			    <argument><expr><name><name pos:line="51" pos:column="29">orig_oid<pos:position pos:line="51" pos:column="37"/></name><operator pos:line="51" pos:column="37">.<pos:position pos:line="51" pos:column="38"/></operator><name pos:line="51" pos:column="38">hash<pos:position pos:line="51" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="44">REF_NODEREF<pos:position pos:line="51" pos:column="55"/></name></expr></argument>)<pos:position pos:line="51" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="57"/></condition><then pos:line="51" pos:column="57"> <block pos:line="51" pos:column="58">{
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">error<pos:position pos:line="52" pos:column="22"/></name><argument_list pos:line="52" pos:column="22">(<argument><expr><literal type="string" pos:line="52" pos:column="23">"unable to delete old %s"<pos:position pos:line="52" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="50">oldrefname<pos:position pos:line="52" pos:column="60"/></name></expr></argument>)<pos:position pos:line="52" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="62"/></expr_stmt>
		<goto pos:line="53" pos:column="17">goto <name pos:line="53" pos:column="22">rollback<pos:position pos:line="53" pos:column="30"/></name>;<pos:position pos:line="53" pos:column="31"/></goto>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="56" pos:column="9">/*
	 * Since we are doing a shallow lookup, oid is not the
	 * correct value to pass to delete_ref as old_oid. But that
	 * doesn't matter, because an old_oid check wouldn't add to
	 * the safety anyway; we want to delete the reference whatever
	 * its current value.
	 */</comment>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><operator pos:line="63" pos:column="13">!<pos:position pos:line="63" pos:column="14"/></operator><call><name pos:line="63" pos:column="14">refs_read_ref_full<pos:position pos:line="63" pos:column="32"/></name><argument_list pos:line="63" pos:column="32">(<argument><expr><operator pos:line="63" pos:column="33">&amp;<pos:position pos:line="63" pos:column="38"/></operator><name><name pos:line="63" pos:column="34">refs<pos:position pos:line="63" pos:column="38"/></name><operator pos:line="63" pos:column="38">-&gt;<pos:position pos:line="63" pos:column="43"/></operator><name pos:line="63" pos:column="40">base<pos:position pos:line="63" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="46">newrefname<pos:position pos:line="63" pos:column="56"/></name></expr></argument>,
				<argument><expr><name pos:line="64" pos:column="33">RESOLVE_REF_READING<pos:position pos:line="64" pos:column="52"/></name> <operator pos:line="64" pos:column="53">|<pos:position pos:line="64" pos:column="54"/></operator> <name pos:line="64" pos:column="55">RESOLVE_REF_NO_RECURSE<pos:position pos:line="64" pos:column="77"/></name></expr></argument>,
				<argument><expr><name><name pos:line="65" pos:column="33">oid<pos:position pos:line="65" pos:column="36"/></name><operator pos:line="65" pos:column="36">.<pos:position pos:line="65" pos:column="37"/></operator><name pos:line="65" pos:column="37">hash<pos:position pos:line="65" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="43">NULL<pos:position pos:line="65" pos:column="47"/></name></expr></argument>)<pos:position pos:line="65" pos:column="48"/></argument_list></call> <operator pos:line="65" pos:column="49">&amp;&amp;<pos:position pos:line="65" pos:column="59"/></operator>
	    <call><name pos:line="66" pos:column="13">refs_delete_ref<pos:position pos:line="66" pos:column="28"/></name><argument_list pos:line="66" pos:column="28">(<argument><expr><operator pos:line="66" pos:column="29">&amp;<pos:position pos:line="66" pos:column="34"/></operator><name><name pos:line="66" pos:column="30">refs<pos:position pos:line="66" pos:column="34"/></name><operator pos:line="66" pos:column="34">-&gt;<pos:position pos:line="66" pos:column="39"/></operator><name pos:line="66" pos:column="36">base<pos:position pos:line="66" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="42">NULL<pos:position pos:line="66" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="48">newrefname<pos:position pos:line="66" pos:column="58"/></name></expr></argument>,
			    <argument><expr><name pos:line="67" pos:column="29">NULL<pos:position pos:line="67" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="35">REF_NODEREF<pos:position pos:line="67" pos:column="46"/></name></expr></argument>)<pos:position pos:line="67" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="48"/></condition><then pos:line="67" pos:column="48"> <block pos:line="67" pos:column="49">{
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name pos:line="68" pos:column="21">errno<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">==<pos:position pos:line="68" pos:column="29"/></operator> <name pos:line="68" pos:column="30">EISDIR<pos:position pos:line="68" pos:column="36"/></name></expr>)<pos:position pos:line="68" pos:column="37"/></condition><then pos:line="68" pos:column="37"> <block pos:line="68" pos:column="38">{
			<decl_stmt><decl><type><name><name pos:line="69" pos:column="25">struct<pos:position pos:line="69" pos:column="31"/></name> <name pos:line="69" pos:column="32">strbuf<pos:position pos:line="69" pos:column="38"/></name></name></type> <name pos:line="69" pos:column="39">path<pos:position pos:line="69" pos:column="43"/></name> <init pos:line="69" pos:column="44">= <expr><name pos:line="69" pos:column="46">STRBUF_INIT<pos:position pos:line="69" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="69" pos:column="58"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="70" pos:column="25">int<pos:position pos:line="70" pos:column="28"/></name></type> <name pos:line="70" pos:column="29">result<pos:position pos:line="70" pos:column="35"/></name></decl>;<pos:position pos:line="70" pos:column="36"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="72" pos:column="25">files_ref_path<pos:position pos:line="72" pos:column="39"/></name><argument_list pos:line="72" pos:column="39">(<argument><expr><name pos:line="72" pos:column="40">refs<pos:position pos:line="72" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="46">&amp;<pos:position pos:line="72" pos:column="51"/></operator><name pos:line="72" pos:column="47">path<pos:position pos:line="72" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="53">newrefname<pos:position pos:line="72" pos:column="63"/></name></expr></argument>)<pos:position pos:line="72" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name pos:line="73" pos:column="25">result<pos:position pos:line="73" pos:column="31"/></name> <operator pos:line="73" pos:column="32">=<pos:position pos:line="73" pos:column="33"/></operator> <call><name pos:line="73" pos:column="34">remove_empty_directories<pos:position pos:line="73" pos:column="58"/></name><argument_list pos:line="73" pos:column="58">(<argument><expr><operator pos:line="73" pos:column="59">&amp;<pos:position pos:line="73" pos:column="64"/></operator><name pos:line="73" pos:column="60">path<pos:position pos:line="73" pos:column="64"/></name></expr></argument>)<pos:position pos:line="73" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">strbuf_release<pos:position pos:line="74" pos:column="39"/></name><argument_list pos:line="74" pos:column="39">(<argument><expr><operator pos:line="74" pos:column="40">&amp;<pos:position pos:line="74" pos:column="45"/></operator><name pos:line="74" pos:column="41">path<pos:position pos:line="74" pos:column="45"/></name></expr></argument>)<pos:position pos:line="74" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="47"/></expr_stmt>

			<if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><name pos:line="76" pos:column="29">result<pos:position pos:line="76" pos:column="35"/></name></expr>)<pos:position pos:line="76" pos:column="36"/></condition><then pos:line="76" pos:column="36"> <block pos:line="76" pos:column="37">{
				<expr_stmt><expr><call><name pos:line="77" pos:column="33">error<pos:position pos:line="77" pos:column="38"/></name><argument_list pos:line="77" pos:column="38">(<argument><expr><literal type="string" pos:line="77" pos:column="39">"Directory not empty: %s"<pos:position pos:line="77" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="66">newrefname<pos:position pos:line="77" pos:column="76"/></name></expr></argument>)<pos:position pos:line="77" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="78"/></expr_stmt>
				<goto pos:line="78" pos:column="33">goto <name pos:line="78" pos:column="38">rollback<pos:position pos:line="78" pos:column="46"/></name>;<pos:position pos:line="78" pos:column="47"/></goto>
			}<pos:position pos:line="79" pos:column="26"/></block></then></if>
		}<pos:position pos:line="80" pos:column="18"/></block></then> <else pos:line="80" pos:column="19">else <block pos:line="80" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="81" pos:column="25">error<pos:position pos:line="81" pos:column="30"/></name><argument_list pos:line="81" pos:column="30">(<argument><expr><literal type="string" pos:line="81" pos:column="31">"unable to delete existing %s"<pos:position pos:line="81" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="63">newrefname<pos:position pos:line="81" pos:column="73"/></name></expr></argument>)<pos:position pos:line="81" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="75"/></expr_stmt>
			<goto pos:line="82" pos:column="25">goto <name pos:line="82" pos:column="30">rollback<pos:position pos:line="82" pos:column="38"/></name>;<pos:position pos:line="82" pos:column="39"/></goto>
		}<pos:position pos:line="83" pos:column="18"/></block></else></if>
	}<pos:position pos:line="84" pos:column="10"/></block></then></if>

	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><name pos:line="86" pos:column="13">log<pos:position pos:line="86" pos:column="16"/></name> <operator pos:line="86" pos:column="17">&amp;&amp;<pos:position pos:line="86" pos:column="27"/></operator> <call><name pos:line="86" pos:column="20">rename_tmp_log<pos:position pos:line="86" pos:column="34"/></name><argument_list pos:line="86" pos:column="34">(<argument><expr><name pos:line="86" pos:column="35">refs<pos:position pos:line="86" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="41">newrefname<pos:position pos:line="86" pos:column="51"/></name></expr></argument>)<pos:position pos:line="86" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="53"/></condition><then pos:line="86" pos:column="53">
		<block type="pseudo"><goto pos:line="87" pos:column="17">goto <name pos:line="87" pos:column="22">rollback<pos:position pos:line="87" pos:column="30"/></name>;<pos:position pos:line="87" pos:column="31"/></goto></block></then></if>

	<expr_stmt><expr><name pos:line="89" pos:column="9">logmoved<pos:position pos:line="89" pos:column="17"/></name> <operator pos:line="89" pos:column="18">=<pos:position pos:line="89" pos:column="19"/></operator> <name pos:line="89" pos:column="20">log<pos:position pos:line="89" pos:column="23"/></name></expr>;<pos:position pos:line="89" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><name pos:line="91" pos:column="9">lock<pos:position pos:line="91" pos:column="13"/></name> <operator pos:line="91" pos:column="14">=<pos:position pos:line="91" pos:column="15"/></operator> <call><name pos:line="91" pos:column="16">lock_ref_sha1_basic<pos:position pos:line="91" pos:column="35"/></name><argument_list pos:line="91" pos:column="35">(<argument><expr><name pos:line="91" pos:column="36">refs<pos:position pos:line="91" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="42">newrefname<pos:position pos:line="91" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="54">NULL<pos:position pos:line="91" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="60">NULL<pos:position pos:line="91" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="66">NULL<pos:position pos:line="91" pos:column="70"/></name></expr></argument>,
				   <argument><expr><name pos:line="92" pos:column="36">REF_NODEREF<pos:position pos:line="92" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="49">NULL<pos:position pos:line="92" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="92" pos:column="55">&amp;<pos:position pos:line="92" pos:column="60"/></operator><name pos:line="92" pos:column="56">err<pos:position pos:line="92" pos:column="59"/></name></expr></argument>)<pos:position pos:line="92" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="61"/></expr_stmt>
	<if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><operator pos:line="93" pos:column="13">!<pos:position pos:line="93" pos:column="14"/></operator><name pos:line="93" pos:column="14">lock<pos:position pos:line="93" pos:column="18"/></name></expr>)<pos:position pos:line="93" pos:column="19"/></condition><then pos:line="93" pos:column="19"> <block pos:line="93" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="94" pos:column="17">error<pos:position pos:line="94" pos:column="22"/></name><argument_list pos:line="94" pos:column="22">(<argument><expr><literal type="string" pos:line="94" pos:column="23">"unable to rename '%s' to '%s': %s"<pos:position pos:line="94" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="60">oldrefname<pos:position pos:line="94" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="72">newrefname<pos:position pos:line="94" pos:column="82"/></name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="84">err<pos:position pos:line="94" pos:column="87"/></name><operator pos:line="94" pos:column="87">.<pos:position pos:line="94" pos:column="88"/></operator><name pos:line="94" pos:column="88">buf<pos:position pos:line="94" pos:column="91"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="93"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="95" pos:column="17">strbuf_release<pos:position pos:line="95" pos:column="31"/></name><argument_list pos:line="95" pos:column="31">(<argument><expr><operator pos:line="95" pos:column="32">&amp;<pos:position pos:line="95" pos:column="37"/></operator><name pos:line="95" pos:column="33">err<pos:position pos:line="95" pos:column="36"/></name></expr></argument>)<pos:position pos:line="95" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="38"/></expr_stmt>
		<goto pos:line="96" pos:column="17">goto <name pos:line="96" pos:column="22">rollback<pos:position pos:line="96" pos:column="30"/></name>;<pos:position pos:line="96" pos:column="31"/></goto>
	}<pos:position pos:line="97" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="98" pos:column="9">oidcpy<pos:position pos:line="98" pos:column="15"/></name><argument_list pos:line="98" pos:column="15">(<argument><expr><operator pos:line="98" pos:column="16">&amp;<pos:position pos:line="98" pos:column="21"/></operator><name><name pos:line="98" pos:column="17">lock<pos:position pos:line="98" pos:column="21"/></name><operator pos:line="98" pos:column="21">-&gt;<pos:position pos:line="98" pos:column="26"/></operator><name pos:line="98" pos:column="23">old_oid<pos:position pos:line="98" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="98" pos:column="32">&amp;<pos:position pos:line="98" pos:column="37"/></operator><name pos:line="98" pos:column="33">orig_oid<pos:position pos:line="98" pos:column="41"/></name></expr></argument>)<pos:position pos:line="98" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="43"/></expr_stmt>

	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><call><name pos:line="100" pos:column="13">write_ref_to_lockfile<pos:position pos:line="100" pos:column="34"/></name><argument_list pos:line="100" pos:column="34">(<argument><expr><name pos:line="100" pos:column="35">lock<pos:position pos:line="100" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="41">&amp;<pos:position pos:line="100" pos:column="46"/></operator><name pos:line="100" pos:column="42">orig_oid<pos:position pos:line="100" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="52">&amp;<pos:position pos:line="100" pos:column="57"/></operator><name pos:line="100" pos:column="53">err<pos:position pos:line="100" pos:column="56"/></name></expr></argument>)<pos:position pos:line="100" pos:column="57"/></argument_list></call> <operator pos:line="100" pos:column="58">||<pos:position pos:line="100" pos:column="60"/></operator>
	    <call><name pos:line="101" pos:column="13">commit_ref_update<pos:position pos:line="101" pos:column="30"/></name><argument_list pos:line="101" pos:column="30">(<argument><expr><name pos:line="101" pos:column="31">refs<pos:position pos:line="101" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="37">lock<pos:position pos:line="101" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="43">&amp;<pos:position pos:line="101" pos:column="48"/></operator><name pos:line="101" pos:column="44">orig_oid<pos:position pos:line="101" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="54">logmsg<pos:position pos:line="101" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="62">&amp;<pos:position pos:line="101" pos:column="67"/></operator><name pos:line="101" pos:column="63">err<pos:position pos:line="101" pos:column="66"/></name></expr></argument>)<pos:position pos:line="101" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="101" pos:column="68"/></condition><then pos:line="101" pos:column="68"> <block pos:line="101" pos:column="69">{
		<expr_stmt><expr><call><name pos:line="102" pos:column="17">error<pos:position pos:line="102" pos:column="22"/></name><argument_list pos:line="102" pos:column="22">(<argument><expr><literal type="string" pos:line="102" pos:column="23">"unable to write current sha1 into %s: %s"<pos:position pos:line="102" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="67">newrefname<pos:position pos:line="102" pos:column="77"/></name></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="79">err<pos:position pos:line="102" pos:column="82"/></name><operator pos:line="102" pos:column="82">.<pos:position pos:line="102" pos:column="83"/></operator><name pos:line="102" pos:column="83">buf<pos:position pos:line="102" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="88"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="103" pos:column="17">strbuf_release<pos:position pos:line="103" pos:column="31"/></name><argument_list pos:line="103" pos:column="31">(<argument><expr><operator pos:line="103" pos:column="32">&amp;<pos:position pos:line="103" pos:column="37"/></operator><name pos:line="103" pos:column="33">err<pos:position pos:line="103" pos:column="36"/></name></expr></argument>)<pos:position pos:line="103" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="38"/></expr_stmt>
		<goto pos:line="104" pos:column="17">goto <name pos:line="104" pos:column="22">rollback<pos:position pos:line="104" pos:column="30"/></name>;<pos:position pos:line="104" pos:column="31"/></goto>
	}<pos:position pos:line="105" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="107" pos:column="9">ret<pos:position pos:line="107" pos:column="12"/></name> <operator pos:line="107" pos:column="13">=<pos:position pos:line="107" pos:column="14"/></operator> <literal type="number" pos:line="107" pos:column="15">0<pos:position pos:line="107" pos:column="16"/></literal></expr>;<pos:position pos:line="107" pos:column="17"/></expr_stmt>
	<goto pos:line="108" pos:column="9">goto <name pos:line="108" pos:column="14">out<pos:position pos:line="108" pos:column="17"/></name>;<pos:position pos:line="108" pos:column="18"/></goto>

 <label><name pos:line="110" pos:column="2">rollback<pos:position pos:line="110" pos:column="10"/></name>:<pos:position pos:line="110" pos:column="11"/></label>
	<expr_stmt><expr><name pos:line="111" pos:column="9">lock<pos:position pos:line="111" pos:column="13"/></name> <operator pos:line="111" pos:column="14">=<pos:position pos:line="111" pos:column="15"/></operator> <call><name pos:line="111" pos:column="16">lock_ref_sha1_basic<pos:position pos:line="111" pos:column="35"/></name><argument_list pos:line="111" pos:column="35">(<argument><expr><name pos:line="111" pos:column="36">refs<pos:position pos:line="111" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="42">oldrefname<pos:position pos:line="111" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="54">NULL<pos:position pos:line="111" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="60">NULL<pos:position pos:line="111" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="66">NULL<pos:position pos:line="111" pos:column="70"/></name></expr></argument>,
				   <argument><expr><name pos:line="112" pos:column="36">REF_NODEREF<pos:position pos:line="112" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="49">NULL<pos:position pos:line="112" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="112" pos:column="55">&amp;<pos:position pos:line="112" pos:column="60"/></operator><name pos:line="112" pos:column="56">err<pos:position pos:line="112" pos:column="59"/></name></expr></argument>)<pos:position pos:line="112" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="61"/></expr_stmt>
	<if pos:line="113" pos:column="9">if <condition pos:line="113" pos:column="12">(<expr><operator pos:line="113" pos:column="13">!<pos:position pos:line="113" pos:column="14"/></operator><name pos:line="113" pos:column="14">lock<pos:position pos:line="113" pos:column="18"/></name></expr>)<pos:position pos:line="113" pos:column="19"/></condition><then pos:line="113" pos:column="19"> <block pos:line="113" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="114" pos:column="17">error<pos:position pos:line="114" pos:column="22"/></name><argument_list pos:line="114" pos:column="22">(<argument><expr><literal type="string" pos:line="114" pos:column="23">"unable to lock %s for rollback: %s"<pos:position pos:line="114" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="61">oldrefname<pos:position pos:line="114" pos:column="71"/></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="73">err<pos:position pos:line="114" pos:column="76"/></name><operator pos:line="114" pos:column="76">.<pos:position pos:line="114" pos:column="77"/></operator><name pos:line="114" pos:column="77">buf<pos:position pos:line="114" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="114" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="82"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="115" pos:column="17">strbuf_release<pos:position pos:line="115" pos:column="31"/></name><argument_list pos:line="115" pos:column="31">(<argument><expr><operator pos:line="115" pos:column="32">&amp;<pos:position pos:line="115" pos:column="37"/></operator><name pos:line="115" pos:column="33">err<pos:position pos:line="115" pos:column="36"/></name></expr></argument>)<pos:position pos:line="115" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="38"/></expr_stmt>
		<goto pos:line="116" pos:column="17">goto <name pos:line="116" pos:column="22">rollbacklog<pos:position pos:line="116" pos:column="33"/></name>;<pos:position pos:line="116" pos:column="34"/></goto>
	}<pos:position pos:line="117" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="119" pos:column="9">flag<pos:position pos:line="119" pos:column="13"/></name> <operator pos:line="119" pos:column="14">=<pos:position pos:line="119" pos:column="15"/></operator> <name pos:line="119" pos:column="16">log_all_ref_updates<pos:position pos:line="119" pos:column="35"/></name></expr>;<pos:position pos:line="119" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="120" pos:column="9">log_all_ref_updates<pos:position pos:line="120" pos:column="28"/></name> <operator pos:line="120" pos:column="29">=<pos:position pos:line="120" pos:column="30"/></operator> <name pos:line="120" pos:column="31">LOG_REFS_NONE<pos:position pos:line="120" pos:column="44"/></name></expr>;<pos:position pos:line="120" pos:column="45"/></expr_stmt>
	<if pos:line="121" pos:column="9">if <condition pos:line="121" pos:column="12">(<expr><call><name pos:line="121" pos:column="13">write_ref_to_lockfile<pos:position pos:line="121" pos:column="34"/></name><argument_list pos:line="121" pos:column="34">(<argument><expr><name pos:line="121" pos:column="35">lock<pos:position pos:line="121" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="121" pos:column="41">&amp;<pos:position pos:line="121" pos:column="46"/></operator><name pos:line="121" pos:column="42">orig_oid<pos:position pos:line="121" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="121" pos:column="52">&amp;<pos:position pos:line="121" pos:column="57"/></operator><name pos:line="121" pos:column="53">err<pos:position pos:line="121" pos:column="56"/></name></expr></argument>)<pos:position pos:line="121" pos:column="57"/></argument_list></call> <operator pos:line="121" pos:column="58">||<pos:position pos:line="121" pos:column="60"/></operator>
	    <call><name pos:line="122" pos:column="13">commit_ref_update<pos:position pos:line="122" pos:column="30"/></name><argument_list pos:line="122" pos:column="30">(<argument><expr><name pos:line="122" pos:column="31">refs<pos:position pos:line="122" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="37">lock<pos:position pos:line="122" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="122" pos:column="43">&amp;<pos:position pos:line="122" pos:column="48"/></operator><name pos:line="122" pos:column="44">orig_oid<pos:position pos:line="122" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="54">NULL<pos:position pos:line="122" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="122" pos:column="60">&amp;<pos:position pos:line="122" pos:column="65"/></operator><name pos:line="122" pos:column="61">err<pos:position pos:line="122" pos:column="64"/></name></expr></argument>)<pos:position pos:line="122" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="66"/></condition><then pos:line="122" pos:column="66"> <block pos:line="122" pos:column="67">{
		<expr_stmt><expr><call><name pos:line="123" pos:column="17">error<pos:position pos:line="123" pos:column="22"/></name><argument_list pos:line="123" pos:column="22">(<argument><expr><literal type="string" pos:line="123" pos:column="23">"unable to write current sha1 into %s: %s"<pos:position pos:line="123" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="67">oldrefname<pos:position pos:line="123" pos:column="77"/></name></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="79">err<pos:position pos:line="123" pos:column="82"/></name><operator pos:line="123" pos:column="82">.<pos:position pos:line="123" pos:column="83"/></operator><name pos:line="123" pos:column="83">buf<pos:position pos:line="123" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="88"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="124" pos:column="17">strbuf_release<pos:position pos:line="124" pos:column="31"/></name><argument_list pos:line="124" pos:column="31">(<argument><expr><operator pos:line="124" pos:column="32">&amp;<pos:position pos:line="124" pos:column="37"/></operator><name pos:line="124" pos:column="33">err<pos:position pos:line="124" pos:column="36"/></name></expr></argument>)<pos:position pos:line="124" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="125" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="126" pos:column="9">log_all_ref_updates<pos:position pos:line="126" pos:column="28"/></name> <operator pos:line="126" pos:column="29">=<pos:position pos:line="126" pos:column="30"/></operator> <name pos:line="126" pos:column="31">flag<pos:position pos:line="126" pos:column="35"/></name></expr>;<pos:position pos:line="126" pos:column="36"/></expr_stmt>

 <label><name pos:line="128" pos:column="2">rollbacklog<pos:position pos:line="128" pos:column="13"/></name>:<pos:position pos:line="128" pos:column="14"/></label>
	<if pos:line="129" pos:column="9">if <condition pos:line="129" pos:column="12">(<expr><name pos:line="129" pos:column="13">logmoved<pos:position pos:line="129" pos:column="21"/></name> <operator pos:line="129" pos:column="22">&amp;&amp;<pos:position pos:line="129" pos:column="32"/></operator> <call><name pos:line="129" pos:column="25">rename<pos:position pos:line="129" pos:column="31"/></name><argument_list pos:line="129" pos:column="31">(<argument><expr><name><name pos:line="129" pos:column="32">sb_newref<pos:position pos:line="129" pos:column="41"/></name><operator pos:line="129" pos:column="41">.<pos:position pos:line="129" pos:column="42"/></operator><name pos:line="129" pos:column="42">buf<pos:position pos:line="129" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="47">sb_oldref<pos:position pos:line="129" pos:column="56"/></name><operator pos:line="129" pos:column="56">.<pos:position pos:line="129" pos:column="57"/></operator><name pos:line="129" pos:column="57">buf<pos:position pos:line="129" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="129" pos:column="62"/></condition><then pos:line="129" pos:column="62">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="130" pos:column="17">error<pos:position pos:line="130" pos:column="22"/></name><argument_list pos:line="130" pos:column="22">(<argument><expr><literal type="string" pos:line="130" pos:column="23">"unable to restore logfile %s from %s: %s"<pos:position pos:line="130" pos:column="65"/></literal></expr></argument>,
			<argument><expr><name pos:line="131" pos:column="25">oldrefname<pos:position pos:line="131" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="37">newrefname<pos:position pos:line="131" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="131" pos:column="49">strerror<pos:position pos:line="131" pos:column="57"/></name><argument_list pos:line="131" pos:column="57">(<argument><expr><name pos:line="131" pos:column="58">errno<pos:position pos:line="131" pos:column="63"/></name></expr></argument>)<pos:position pos:line="131" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="131" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="66"/></expr_stmt></block></then></if>
	<if pos:line="132" pos:column="9">if <condition pos:line="132" pos:column="12">(<expr><operator pos:line="132" pos:column="13">!<pos:position pos:line="132" pos:column="14"/></operator><name pos:line="132" pos:column="14">logmoved<pos:position pos:line="132" pos:column="22"/></name> <operator pos:line="132" pos:column="23">&amp;&amp;<pos:position pos:line="132" pos:column="33"/></operator> <name pos:line="132" pos:column="26">log<pos:position pos:line="132" pos:column="29"/></name> <operator pos:line="132" pos:column="30">&amp;&amp;<pos:position pos:line="132" pos:column="40"/></operator>
	    <call><name pos:line="133" pos:column="13">rename<pos:position pos:line="133" pos:column="19"/></name><argument_list pos:line="133" pos:column="19">(<argument><expr><name><name pos:line="133" pos:column="20">tmp_renamed_log<pos:position pos:line="133" pos:column="35"/></name><operator pos:line="133" pos:column="35">.<pos:position pos:line="133" pos:column="36"/></operator><name pos:line="133" pos:column="36">buf<pos:position pos:line="133" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="41">sb_oldref<pos:position pos:line="133" pos:column="50"/></name><operator pos:line="133" pos:column="50">.<pos:position pos:line="133" pos:column="51"/></operator><name pos:line="133" pos:column="51">buf<pos:position pos:line="133" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="133" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="56"/></condition><then pos:line="133" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="134" pos:column="17">error<pos:position pos:line="134" pos:column="22"/></name><argument_list pos:line="134" pos:column="22">(<argument><expr><literal type="string" pos:line="134" pos:column="23">"unable to restore logfile %s from logs/"<pos:position pos:line="134" pos:column="64"/></literal><name pos:line="134" pos:column="64">TMP_RENAMED_LOG<pos:position pos:line="134" pos:column="79"/></name><literal type="string" pos:line="134" pos:column="79">": %s"<pos:position pos:line="134" pos:column="85"/></literal></expr></argument>,
			<argument><expr><name pos:line="135" pos:column="25">oldrefname<pos:position pos:line="135" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="135" pos:column="37">strerror<pos:position pos:line="135" pos:column="45"/></name><argument_list pos:line="135" pos:column="45">(<argument><expr><name pos:line="135" pos:column="46">errno<pos:position pos:line="135" pos:column="51"/></name></expr></argument>)<pos:position pos:line="135" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="135" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="54"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="136" pos:column="9">ret<pos:position pos:line="136" pos:column="12"/></name> <operator pos:line="136" pos:column="13">=<pos:position pos:line="136" pos:column="14"/></operator> <literal type="number" pos:line="136" pos:column="15">1<pos:position pos:line="136" pos:column="16"/></literal></expr>;<pos:position pos:line="136" pos:column="17"/></expr_stmt>
 <label><name pos:line="137" pos:column="2">out<pos:position pos:line="137" pos:column="5"/></name>:<pos:position pos:line="137" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="138" pos:column="9">strbuf_release<pos:position pos:line="138" pos:column="23"/></name><argument_list pos:line="138" pos:column="23">(<argument><expr><operator pos:line="138" pos:column="24">&amp;<pos:position pos:line="138" pos:column="29"/></operator><name pos:line="138" pos:column="25">sb_newref<pos:position pos:line="138" pos:column="34"/></name></expr></argument>)<pos:position pos:line="138" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="139" pos:column="9">strbuf_release<pos:position pos:line="139" pos:column="23"/></name><argument_list pos:line="139" pos:column="23">(<argument><expr><operator pos:line="139" pos:column="24">&amp;<pos:position pos:line="139" pos:column="29"/></operator><name pos:line="139" pos:column="25">sb_oldref<pos:position pos:line="139" pos:column="34"/></name></expr></argument>)<pos:position pos:line="139" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="140" pos:column="9">strbuf_release<pos:position pos:line="140" pos:column="23"/></name><argument_list pos:line="140" pos:column="23">(<argument><expr><operator pos:line="140" pos:column="24">&amp;<pos:position pos:line="140" pos:column="29"/></operator><name pos:line="140" pos:column="25">tmp_renamed_log<pos:position pos:line="140" pos:column="40"/></name></expr></argument>)<pos:position pos:line="140" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="42"/></expr_stmt>

	<return pos:line="142" pos:column="9">return <expr><name pos:line="142" pos:column="16">ret<pos:position pos:line="142" pos:column="19"/></name></expr>;<pos:position pos:line="142" pos:column="20"/></return>
}<pos:position pos:line="143" pos:column="2"/></block></function></unit>
