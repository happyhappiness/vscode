<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5325_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">scan_hunk_header<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">p<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">p_before<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">int<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">p_after<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> <name pos:line="3" pos:column="22">char<pos:position pos:line="3" pos:column="26"/></name></type> <name><name pos:line="3" pos:column="27">digits<pos:position pos:line="3" pos:column="33"/></name><index pos:line="3" pos:column="33">[]<pos:position pos:line="3" pos:column="35"/></index></name> <init pos:line="3" pos:column="36">= <expr><literal type="string" pos:line="3" pos:column="38">"0123456789"<pos:position pos:line="3" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">q<pos:position pos:line="4" pos:column="22"/></name></decl>, <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="25">r<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">n<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">q<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <name pos:line="7" pos:column="13">p<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">+<pos:position pos:line="7" pos:column="16"/></operator> <literal type="number" pos:line="7" pos:column="17">4<pos:position pos:line="7" pos:column="18"/></literal></expr>;<pos:position pos:line="7" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">n<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <call><name pos:line="8" pos:column="13">strspn<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">q<pos:position pos:line="8" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="23">digits<pos:position pos:line="8" pos:column="29"/></name></expr></argument>)<pos:position pos:line="8" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="31"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name><name pos:line="9" pos:column="13">q<pos:position pos:line="9" pos:column="14"/></name><index pos:line="9" pos:column="14">[<expr><name pos:line="9" pos:column="15">n<pos:position pos:line="9" pos:column="16"/></name></expr>]<pos:position pos:line="9" pos:column="17"/></index></name> <operator pos:line="9" pos:column="18">==<pos:position pos:line="9" pos:column="20"/></operator> <literal type="char" pos:line="9" pos:column="21">','<pos:position pos:line="9" pos:column="24"/></literal></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25"> <block pos:line="9" pos:column="26">{
		<expr_stmt><expr><name pos:line="10" pos:column="17">q<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">+=<pos:position pos:line="10" pos:column="21"/></operator> <name pos:line="10" pos:column="22">n<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">+<pos:position pos:line="10" pos:column="25"/></operator> <literal type="number" pos:line="10" pos:column="26">1<pos:position pos:line="10" pos:column="27"/></literal></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="11" pos:column="17">n<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <call><name pos:line="11" pos:column="21">strspn<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">q<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="31">digits<pos:position pos:line="11" pos:column="37"/></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">n<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">==<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal> <operator pos:line="13" pos:column="20">||<pos:position pos:line="13" pos:column="22"/></operator> <name><name pos:line="13" pos:column="23">q<pos:position pos:line="13" pos:column="24"/></name><index pos:line="13" pos:column="24">[<expr><name pos:line="13" pos:column="25">n<pos:position pos:line="13" pos:column="26"/></name></expr>]<pos:position pos:line="13" pos:column="27"/></index></name> <operator pos:line="13" pos:column="28">!=<pos:position pos:line="13" pos:column="30"/></operator> <literal type="char" pos:line="13" pos:column="31">' '<pos:position pos:line="13" pos:column="34"/></literal> <operator pos:line="13" pos:column="35">||<pos:position pos:line="13" pos:column="37"/></operator> <name><name pos:line="13" pos:column="38">q<pos:position pos:line="13" pos:column="39"/></name><index pos:line="13" pos:column="39">[<expr><name pos:line="13" pos:column="40">n<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">+<pos:position pos:line="13" pos:column="42"/></operator><literal type="number" pos:line="13" pos:column="42">1<pos:position pos:line="13" pos:column="43"/></literal></expr>]<pos:position pos:line="13" pos:column="44"/></index></name> <operator pos:line="13" pos:column="45">!=<pos:position pos:line="13" pos:column="47"/></operator> <literal type="char" pos:line="13" pos:column="48">'+'<pos:position pos:line="13" pos:column="51"/></literal></expr>)<pos:position pos:line="13" pos:column="52"/></condition><then pos:line="13" pos:column="52">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">r<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <name pos:line="16" pos:column="13">q<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">+<pos:position pos:line="16" pos:column="16"/></operator> <name pos:line="16" pos:column="17">n<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">+<pos:position pos:line="16" pos:column="20"/></operator> <literal type="number" pos:line="16" pos:column="21">2<pos:position pos:line="16" pos:column="22"/></literal></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">n<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <call><name pos:line="17" pos:column="13">strspn<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">r<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">digits<pos:position pos:line="17" pos:column="29"/></name></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name><name pos:line="18" pos:column="13">r<pos:position pos:line="18" pos:column="14"/></name><index pos:line="18" pos:column="14">[<expr><name pos:line="18" pos:column="15">n<pos:position pos:line="18" pos:column="16"/></name></expr>]<pos:position pos:line="18" pos:column="17"/></index></name> <operator pos:line="18" pos:column="18">==<pos:position pos:line="18" pos:column="20"/></operator> <literal type="char" pos:line="18" pos:column="21">','<pos:position pos:line="18" pos:column="24"/></literal></expr>)<pos:position pos:line="18" pos:column="25"/></condition><then pos:line="18" pos:column="25"> <block pos:line="18" pos:column="26">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">r<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">+=<pos:position pos:line="19" pos:column="21"/></operator> <name pos:line="19" pos:column="22">n<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">+<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="26">1<pos:position pos:line="19" pos:column="27"/></literal></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">n<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <call><name pos:line="20" pos:column="21">strspn<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name pos:line="20" pos:column="28">r<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="31">digits<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">n<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">==<pos:position pos:line="22" pos:column="17"/></operator> <literal type="number" pos:line="22" pos:column="18">0<pos:position pos:line="22" pos:column="19"/></literal></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20">
		<block type="pseudo"><return pos:line="23" pos:column="17">return <expr><literal type="number" pos:line="23" pos:column="24">0<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><operator pos:line="25" pos:column="9">*<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">p_before<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <call><name pos:line="25" pos:column="21">atoi<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">q<pos:position pos:line="25" pos:column="27"/></name></expr></argument>)<pos:position pos:line="25" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="26" pos:column="9">*<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">p_after<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <call><name pos:line="26" pos:column="20">atoi<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">r<pos:position pos:line="26" pos:column="26"/></name></expr></argument>)<pos:position pos:line="26" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>
	<return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">1<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
