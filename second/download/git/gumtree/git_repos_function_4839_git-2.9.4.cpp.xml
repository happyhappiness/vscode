<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4839_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">tree_is_complete<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">unsigned<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">sha1<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">tree_desc<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">desc<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">name_entry<pos:position pos:line="4" pos:column="26"/></name></name></type> <name pos:line="4" pos:column="27">entry<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">complete<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">tree<pos:position pos:line="6" pos:column="20"/></name></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">tree<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">tree<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <call><name pos:line="8" pos:column="16">lookup_tree<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">sha1<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">tree<pos:position pos:line="9" pos:column="18"/></name></expr>)<pos:position pos:line="9" pos:column="19"/></condition><then pos:line="9" pos:column="19">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return></block></then></if>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">tree<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">-&gt;<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="19">object<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">.<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">flags<pos:position pos:line="11" pos:column="31"/></name></name> <operator pos:line="11" pos:column="32">&amp;<pos:position pos:line="11" pos:column="37"/></operator> <name pos:line="11" pos:column="34">SEEN<pos:position pos:line="11" pos:column="38"/></name></expr>)<pos:position pos:line="11" pos:column="39"/></condition><then pos:line="11" pos:column="39">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><literal type="number" pos:line="12" pos:column="24">1<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></return></block></then></if>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name><name pos:line="13" pos:column="13">tree<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">object<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">.<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">flags<pos:position pos:line="13" pos:column="31"/></name></name> <operator pos:line="13" pos:column="32">&amp;<pos:position pos:line="13" pos:column="37"/></operator> <name pos:line="13" pos:column="34">INCOMPLETE<pos:position pos:line="13" pos:column="44"/></name></expr>)<pos:position pos:line="13" pos:column="45"/></condition><then pos:line="13" pos:column="45">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></return></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name><name pos:line="16" pos:column="14">tree<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">-&gt;<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="20">buffer<pos:position pos:line="16" pos:column="26"/></name></name></expr>)<pos:position pos:line="16" pos:column="27"/></condition><then pos:line="16" pos:column="27"> <block pos:line="16" pos:column="28">{
		<decl_stmt><decl><type><name><name pos:line="17" pos:column="17">enum<pos:position pos:line="17" pos:column="21"/></name> <name pos:line="17" pos:column="22">object_type<pos:position pos:line="17" pos:column="33"/></name></name></type> <name pos:line="17" pos:column="34">type<pos:position pos:line="17" pos:column="38"/></name></decl>;<pos:position pos:line="17" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">unsigned<pos:position pos:line="18" pos:column="25"/></name> <name pos:line="18" pos:column="26">long<pos:position pos:line="18" pos:column="30"/></name></type> <name pos:line="18" pos:column="31">size<pos:position pos:line="18" pos:column="35"/></name></decl>;<pos:position pos:line="18" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">void<pos:position pos:line="19" pos:column="21"/></name> <modifier pos:line="19" pos:column="22">*<pos:position pos:line="19" pos:column="23"/></modifier></type><name pos:line="19" pos:column="23">data<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><call><name pos:line="19" pos:column="30">read_sha1_file<pos:position pos:line="19" pos:column="44"/></name><argument_list pos:line="19" pos:column="44">(<argument><expr><name pos:line="19" pos:column="45">sha1<pos:position pos:line="19" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="51">&amp;<pos:position pos:line="19" pos:column="56"/></operator><name pos:line="19" pos:column="52">type<pos:position pos:line="19" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="58">&amp;<pos:position pos:line="19" pos:column="63"/></operator><name pos:line="19" pos:column="59">size<pos:position pos:line="19" pos:column="63"/></name></expr></argument>)<pos:position pos:line="19" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="65"/></decl_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">data<pos:position pos:line="20" pos:column="26"/></name></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27"> <block pos:line="20" pos:column="28">{
			<expr_stmt><expr><name><name pos:line="21" pos:column="25">tree<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">-&gt;<pos:position pos:line="21" pos:column="34"/></operator><name pos:line="21" pos:column="31">object<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">.<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">flags<pos:position pos:line="21" pos:column="43"/></name></name> <operator pos:line="21" pos:column="44">|=<pos:position pos:line="21" pos:column="46"/></operator> <name pos:line="21" pos:column="47">INCOMPLETE<pos:position pos:line="21" pos:column="57"/></name></expr>;<pos:position pos:line="21" pos:column="58"/></expr_stmt>
			<return pos:line="22" pos:column="25">return <expr><literal type="number" pos:line="22" pos:column="32">0<pos:position pos:line="22" pos:column="33"/></literal></expr>;<pos:position pos:line="22" pos:column="34"/></return>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="24" pos:column="17">tree<pos:position pos:line="24" pos:column="21"/></name><operator pos:line="24" pos:column="21">-&gt;<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="23">buffer<pos:position pos:line="24" pos:column="29"/></name></name> <operator pos:line="24" pos:column="30">=<pos:position pos:line="24" pos:column="31"/></operator> <name pos:line="24" pos:column="32">data<pos:position pos:line="24" pos:column="36"/></name></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">tree<pos:position pos:line="25" pos:column="21"/></name><operator pos:line="25" pos:column="21">-&gt;<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="23">size<pos:position pos:line="25" pos:column="27"/></name></name> <operator pos:line="25" pos:column="28">=<pos:position pos:line="25" pos:column="29"/></operator> <name pos:line="25" pos:column="30">size<pos:position pos:line="25" pos:column="34"/></name></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">init_tree_desc<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><operator pos:line="27" pos:column="24">&amp;<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="25">desc<pos:position pos:line="27" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="31">tree<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">-&gt;<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="37">buffer<pos:position pos:line="27" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="45">tree<pos:position pos:line="27" pos:column="49"/></name><operator pos:line="27" pos:column="49">-&gt;<pos:position pos:line="27" pos:column="54"/></operator><name pos:line="27" pos:column="51">size<pos:position pos:line="27" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">complete<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <literal type="number" pos:line="28" pos:column="20">1<pos:position pos:line="28" pos:column="21"/></literal></expr>;<pos:position pos:line="28" pos:column="22"/></expr_stmt>
	<while pos:line="29" pos:column="9">while <condition pos:line="29" pos:column="15">(<expr><call><name pos:line="29" pos:column="16">tree_entry<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><operator pos:line="29" pos:column="27">&amp;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="28">desc<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="34">&amp;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="35">entry<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="42"/></condition> <block pos:line="29" pos:column="43">{
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><call><name pos:line="30" pos:column="22">has_sha1_file<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">(<argument><expr><name><name pos:line="30" pos:column="36">entry<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">.<pos:position pos:line="30" pos:column="42"/></operator><name pos:line="30" pos:column="42">oid<pos:position pos:line="30" pos:column="45"/></name><operator pos:line="30" pos:column="45">-&gt;<pos:position pos:line="30" pos:column="50"/></operator><name pos:line="30" pos:column="47">hash<pos:position pos:line="30" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call> <operator pos:line="30" pos:column="53">||<pos:position pos:line="30" pos:column="55"/></operator>
		    <operator pos:line="31" pos:column="21">(<pos:position pos:line="31" pos:column="22"/></operator><call><name pos:line="31" pos:column="22">S_ISDIR<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name><name pos:line="31" pos:column="30">entry<pos:position pos:line="31" pos:column="35"/></name><operator pos:line="31" pos:column="35">.<pos:position pos:line="31" pos:column="36"/></operator><name pos:line="31" pos:column="36">mode<pos:position pos:line="31" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call> <operator pos:line="31" pos:column="42">&amp;&amp;<pos:position pos:line="31" pos:column="52"/></operator> <operator pos:line="31" pos:column="45">!<pos:position pos:line="31" pos:column="46"/></operator><call><name pos:line="31" pos:column="46">tree_is_complete<pos:position pos:line="31" pos:column="62"/></name><argument_list pos:line="31" pos:column="62">(<argument><expr><name><name pos:line="31" pos:column="63">entry<pos:position pos:line="31" pos:column="68"/></name><operator pos:line="31" pos:column="68">.<pos:position pos:line="31" pos:column="69"/></operator><name pos:line="31" pos:column="69">oid<pos:position pos:line="31" pos:column="72"/></name><operator pos:line="31" pos:column="72">-&gt;<pos:position pos:line="31" pos:column="77"/></operator><name pos:line="31" pos:column="74">hash<pos:position pos:line="31" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="79"/></argument_list></call><operator pos:line="31" pos:column="79">)<pos:position pos:line="31" pos:column="80"/></operator></expr>)<pos:position pos:line="31" pos:column="81"/></condition><then pos:line="31" pos:column="81"> <block pos:line="31" pos:column="82">{
			<expr_stmt><expr><name><name pos:line="32" pos:column="25">tree<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">-&gt;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="31">object<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">.<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="38">flags<pos:position pos:line="32" pos:column="43"/></name></name> <operator pos:line="32" pos:column="44">|=<pos:position pos:line="32" pos:column="46"/></operator> <name pos:line="32" pos:column="47">INCOMPLETE<pos:position pos:line="32" pos:column="57"/></name></expr>;<pos:position pos:line="32" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">complete<pos:position pos:line="33" pos:column="33"/></name> <operator pos:line="33" pos:column="34">=<pos:position pos:line="33" pos:column="35"/></operator> <literal type="number" pos:line="33" pos:column="36">0<pos:position pos:line="33" pos:column="37"/></literal></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">free_tree_buffer<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">(<argument><expr><name pos:line="36" pos:column="26">tree<pos:position pos:line="36" pos:column="30"/></name></expr></argument>)<pos:position pos:line="36" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">complete<pos:position pos:line="38" pos:column="21"/></name></expr>)<pos:position pos:line="38" pos:column="22"/></condition><then pos:line="38" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="39" pos:column="17">tree<pos:position pos:line="39" pos:column="21"/></name><operator pos:line="39" pos:column="21">-&gt;<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="23">object<pos:position pos:line="39" pos:column="29"/></name><operator pos:line="39" pos:column="29">.<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="30">flags<pos:position pos:line="39" pos:column="35"/></name></name> <operator pos:line="39" pos:column="36">|=<pos:position pos:line="39" pos:column="38"/></operator> <name pos:line="39" pos:column="39">SEEN<pos:position pos:line="39" pos:column="43"/></name></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt></block></then></if>
	<return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">complete<pos:position pos:line="40" pos:column="24"/></name></expr>;<pos:position pos:line="40" pos:column="25"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
