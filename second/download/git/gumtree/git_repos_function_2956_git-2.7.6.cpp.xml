<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2956_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">flush<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">sha1file<pos:position pos:line="1" pos:column="34"/></name></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">f<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">void<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">buf<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">unsigned<pos:position pos:line="1" pos:column="64"/></name> <name pos:line="1" pos:column="65">int<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">count<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><literal type="number" pos:line="3" pos:column="13">0<pos:position pos:line="3" pos:column="14"/></literal> <operator pos:line="3" pos:column="15">&lt;=<pos:position pos:line="3" pos:column="20"/></operator> <name><name pos:line="3" pos:column="18">f<pos:position pos:line="3" pos:column="19"/></name><operator pos:line="3" pos:column="19">-&gt;<pos:position pos:line="3" pos:column="24"/></operator><name pos:line="3" pos:column="21">check_fd<pos:position pos:line="3" pos:column="29"/></name></name> <operator pos:line="3" pos:column="30">&amp;&amp;<pos:position pos:line="3" pos:column="40"/></operator> <name pos:line="3" pos:column="33">count<pos:position pos:line="3" pos:column="38"/></name></expr>)<pos:position pos:line="3" pos:column="39"/></condition><then pos:line="3" pos:column="39">  <block pos:line="3" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="4" pos:column="17">unsigned<pos:position pos:line="4" pos:column="25"/></name> <name pos:line="4" pos:column="26">char<pos:position pos:line="4" pos:column="30"/></name></type> <name><name pos:line="4" pos:column="31">check_buffer<pos:position pos:line="4" pos:column="43"/></name><index pos:line="4" pos:column="43">[<expr><literal type="number" pos:line="4" pos:column="44">8192<pos:position pos:line="4" pos:column="48"/></literal></expr>]<pos:position pos:line="4" pos:column="49"/></index></name></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">ssize_t<pos:position pos:line="5" pos:column="24"/></name></type> <name pos:line="5" pos:column="25">ret<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><call><name pos:line="5" pos:column="31">read_in_full<pos:position pos:line="5" pos:column="43"/></name><argument_list pos:line="5" pos:column="43">(<argument><expr><name><name pos:line="5" pos:column="44">f<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">-&gt;<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="47">check_fd<pos:position pos:line="5" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="57">check_buffer<pos:position pos:line="5" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="71">count<pos:position pos:line="5" pos:column="76"/></name></expr></argument>)<pos:position pos:line="5" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="78"/></decl_stmt>

		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">ret<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">&lt;<pos:position pos:line="7" pos:column="29"/></operator> <literal type="number" pos:line="7" pos:column="27">0<pos:position pos:line="7" pos:column="28"/></literal></expr>)<pos:position pos:line="7" pos:column="29"/></condition><then pos:line="7" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="25">die_errno<pos:position pos:line="8" pos:column="34"/></name><argument_list pos:line="8" pos:column="34">(<argument><expr><literal type="string" pos:line="8" pos:column="35">"%s: sha1 file read error"<pos:position pos:line="8" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="63">f<pos:position pos:line="8" pos:column="64"/></name><operator pos:line="8" pos:column="64">-&gt;<pos:position pos:line="8" pos:column="69"/></operator><name pos:line="8" pos:column="66">name<pos:position pos:line="8" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="72"/></expr_stmt></block></then></if>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">ret<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">&lt;<pos:position pos:line="9" pos:column="29"/></operator> <name pos:line="9" pos:column="27">count<pos:position pos:line="9" pos:column="32"/></name></expr>)<pos:position pos:line="9" pos:column="33"/></condition><then pos:line="9" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">die<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><literal type="string" pos:line="10" pos:column="29">"%s: sha1 file truncated"<pos:position pos:line="10" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="56">f<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">-&gt;<pos:position pos:line="10" pos:column="62"/></operator><name pos:line="10" pos:column="59">name<pos:position pos:line="10" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="65"/></expr_stmt></block></then></if>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><call><name pos:line="11" pos:column="21">memcmp<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">buf<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">check_buffer<pos:position pos:line="11" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="47">count<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="54"/></condition><then pos:line="11" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">die<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><literal type="string" pos:line="12" pos:column="29">"sha1 file '%s' validation error"<pos:position pos:line="12" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="64">f<pos:position pos:line="12" pos:column="65"/></name><operator pos:line="12" pos:column="65">-&gt;<pos:position pos:line="12" pos:column="70"/></operator><name pos:line="12" pos:column="67">name<pos:position pos:line="12" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="73"/></expr_stmt></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init pos:line="15" pos:column="14">;<pos:position pos:line="15" pos:column="15"/></init><condition pos:line="15" pos:column="15">;<pos:position pos:line="15" pos:column="16"/></condition><incr/>)<pos:position pos:line="15" pos:column="17"/></control> <block pos:line="15" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">int<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">ret<pos:position pos:line="16" pos:column="24"/></name> <init pos:line="16" pos:column="25">= <expr><call><name pos:line="16" pos:column="27">xwrite<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><name><name pos:line="16" pos:column="34">f<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">-&gt;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="37">fd<pos:position pos:line="16" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="41">buf<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">count<pos:position pos:line="16" pos:column="51"/></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="53"/></decl_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">ret<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">&gt;<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="27">0<pos:position pos:line="17" pos:column="28"/></literal></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29"> <block pos:line="17" pos:column="30">{
			<expr_stmt><expr><name><name pos:line="18" pos:column="25">f<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">-&gt;<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="28">total<pos:position pos:line="18" pos:column="33"/></name></name> <operator pos:line="18" pos:column="34">+=<pos:position pos:line="18" pos:column="36"/></operator> <name pos:line="18" pos:column="37">ret<pos:position pos:line="18" pos:column="40"/></name></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">display_throughput<pos:position pos:line="19" pos:column="43"/></name><argument_list pos:line="19" pos:column="43">(<argument><expr><name><name pos:line="19" pos:column="44">f<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">-&gt;<pos:position pos:line="19" pos:column="50"/></operator><name pos:line="19" pos:column="47">tp<pos:position pos:line="19" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="51">f<pos:position pos:line="19" pos:column="52"/></name><operator pos:line="19" pos:column="52">-&gt;<pos:position pos:line="19" pos:column="57"/></operator><name pos:line="19" pos:column="54">total<pos:position pos:line="19" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><name pos:line="20" pos:column="25">buf<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">=<pos:position pos:line="20" pos:column="30"/></operator> <operator pos:line="20" pos:column="31">(<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">char<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">*<pos:position pos:line="20" pos:column="38"/></operator><operator pos:line="20" pos:column="38">)<pos:position pos:line="20" pos:column="39"/></operator> <name pos:line="20" pos:column="40">buf<pos:position pos:line="20" pos:column="43"/></name> <operator pos:line="20" pos:column="44">+<pos:position pos:line="20" pos:column="45"/></operator> <name pos:line="20" pos:column="46">ret<pos:position pos:line="20" pos:column="49"/></name></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><name pos:line="21" pos:column="25">count<pos:position pos:line="21" pos:column="30"/></name> <operator pos:line="21" pos:column="31">-=<pos:position pos:line="21" pos:column="33"/></operator> <name pos:line="21" pos:column="34">ret<pos:position pos:line="21" pos:column="37"/></name></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name pos:line="22" pos:column="29">count<pos:position pos:line="22" pos:column="34"/></name></expr>)<pos:position pos:line="22" pos:column="35"/></condition><then pos:line="22" pos:column="35">
				<block type="pseudo"><continue pos:line="23" pos:column="33">continue;<pos:position pos:line="23" pos:column="42"/></continue></block></then></if>
			<return pos:line="24" pos:column="25">return;<pos:position pos:line="24" pos:column="32"/></return>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">!<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="22">ret<pos:position pos:line="26" pos:column="25"/></name></expr>)<pos:position pos:line="26" pos:column="26"/></condition><then pos:line="26" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">die<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><literal type="string" pos:line="27" pos:column="29">"sha1 file '%s' write error. Out of diskspace"<pos:position pos:line="27" pos:column="75"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="77">f<pos:position pos:line="27" pos:column="78"/></name><operator pos:line="27" pos:column="78">-&gt;<pos:position pos:line="27" pos:column="83"/></operator><name pos:line="27" pos:column="80">name<pos:position pos:line="27" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="86"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">die_errno<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><literal type="string" pos:line="28" pos:column="27">"sha1 file '%s' write error"<pos:position pos:line="28" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="57">f<pos:position pos:line="28" pos:column="58"/></name><operator pos:line="28" pos:column="58">-&gt;<pos:position pos:line="28" pos:column="63"/></operator><name pos:line="28" pos:column="60">name<pos:position pos:line="28" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></for>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
