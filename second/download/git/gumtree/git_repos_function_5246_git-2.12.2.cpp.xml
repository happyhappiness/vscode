<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5246_git-2.12.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fsck_head_link<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">null_is_error<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><literal type="number" pos:line="3" pos:column="29">0<pos:position pos:line="3" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">verbose<pos:position pos:line="5" pos:column="20"/></name></expr>)<pos:position pos:line="5" pos:column="21"/></condition><then pos:line="5" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="17">fprintf<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">stderr<pos:position pos:line="6" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="33">"Checking HEAD link\n"<pos:position pos:line="6" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="8" pos:column="9">head_points_at<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <call><name pos:line="8" pos:column="26">resolve_ref_unsafe<pos:position pos:line="8" pos:column="44"/></name><argument_list pos:line="8" pos:column="44">(<argument><expr><literal type="string" pos:line="8" pos:column="45">"HEAD"<pos:position pos:line="8" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="53">0<pos:position pos:line="8" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="56">head_oid<pos:position pos:line="8" pos:column="64"/></name><operator pos:line="8" pos:column="64">.<pos:position pos:line="8" pos:column="65"/></operator><name pos:line="8" pos:column="65">hash<pos:position pos:line="8" pos:column="69"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="71">NULL<pos:position pos:line="8" pos:column="75"/></name></expr></argument>)<pos:position pos:line="8" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="77"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">head_points_at<pos:position pos:line="9" pos:column="28"/></name></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29"> <block pos:line="9" pos:column="30">{
		<expr_stmt><expr><name pos:line="10" pos:column="17">errors_found<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">|=<pos:position pos:line="10" pos:column="32"/></operator> <name pos:line="10" pos:column="33">ERROR_REFS<pos:position pos:line="10" pos:column="43"/></name></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt>
		<return pos:line="11" pos:column="17">return <expr><call><name pos:line="11" pos:column="24">error<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><literal type="string" pos:line="11" pos:column="30">"Invalid HEAD"<pos:position pos:line="11" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="46"/></return>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><call><name pos:line="13" pos:column="14">strcmp<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">head_points_at<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="37">"HEAD"<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="45"/></condition><then pos:line="13" pos:column="45">
		<comment type="block" pos:line="14" pos:column="17">/* detached HEAD */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="17">null_is_error<pos:position pos:line="15" pos:column="30"/></name> <operator pos:line="15" pos:column="31">=<pos:position pos:line="15" pos:column="32"/></operator> <literal type="number" pos:line="15" pos:column="33">1<pos:position pos:line="15" pos:column="34"/></literal></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt></block></then>
	<elseif pos:line="16" pos:column="9">else <if pos:line="16" pos:column="14">if <condition pos:line="16" pos:column="17">(<expr><operator pos:line="16" pos:column="18">!<pos:position pos:line="16" pos:column="19"/></operator><call><name pos:line="16" pos:column="19">starts_with<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">head_points_at<pos:position pos:line="16" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="47">"refs/heads/"<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="62"/></condition><then pos:line="16" pos:column="62"> <block pos:line="16" pos:column="63">{
		<expr_stmt><expr><name pos:line="17" pos:column="17">errors_found<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">|=<pos:position pos:line="17" pos:column="32"/></operator> <name pos:line="17" pos:column="33">ERROR_REFS<pos:position pos:line="17" pos:column="43"/></name></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><call><name pos:line="18" pos:column="24">error<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><literal type="string" pos:line="18" pos:column="30">"HEAD points to something strange (%s)"<pos:position pos:line="18" pos:column="69"/></literal></expr></argument>,
			     <argument><expr><name pos:line="19" pos:column="30">head_points_at<pos:position pos:line="19" pos:column="44"/></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="46"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if></elseif></if>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">is_null_oid<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><operator pos:line="21" pos:column="25">&amp;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="26">head_oid<pos:position pos:line="21" pos:column="34"/></name></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="36"/></condition><then pos:line="21" pos:column="36"> <block pos:line="21" pos:column="37">{
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">null_is_error<pos:position pos:line="22" pos:column="34"/></name></expr>)<pos:position pos:line="22" pos:column="35"/></condition><then pos:line="22" pos:column="35"> <block pos:line="22" pos:column="36">{
			<expr_stmt><expr><name pos:line="23" pos:column="25">errors_found<pos:position pos:line="23" pos:column="37"/></name> <operator pos:line="23" pos:column="38">|=<pos:position pos:line="23" pos:column="40"/></operator> <name pos:line="23" pos:column="41">ERROR_REFS<pos:position pos:line="23" pos:column="51"/></name></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt>
			<return pos:line="24" pos:column="25">return <expr><call><name pos:line="24" pos:column="32">error<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><literal type="string" pos:line="24" pos:column="38">"HEAD: detached HEAD points at nothing"<pos:position pos:line="24" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="79"/></return>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">fprintf<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">stderr<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="33">"notice: HEAD points to an unborn branch (%s)\n"<pos:position pos:line="26" pos:column="81"/></literal></expr></argument>,
			<argument><expr><name pos:line="27" pos:column="25">head_points_at<pos:position pos:line="27" pos:column="39"/></name> <operator pos:line="27" pos:column="40">+<pos:position pos:line="27" pos:column="41"/></operator> <literal type="number" pos:line="27" pos:column="42">11<pos:position pos:line="27" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>
	<return pos:line="29" pos:column="9">return <expr><literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr>;<pos:position pos:line="29" pos:column="18"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
