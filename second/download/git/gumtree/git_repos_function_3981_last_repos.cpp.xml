<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3981_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">object_list<pos:position pos:line="1" pos:column="26"/></name></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier><modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">process_tree<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">tree<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">tree<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
					 <parameter><decl><type><name><name pos:line="2" pos:column="42">struct<pos:position pos:line="2" pos:column="48"/></name> <name pos:line="2" pos:column="49">object_list<pos:position pos:line="2" pos:column="60"/></name></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier><modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">p<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">object<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">obj<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><operator pos:line="4" pos:column="30">&amp;<pos:position pos:line="4" pos:column="35"/></operator><name><name pos:line="4" pos:column="31">tree<pos:position pos:line="4" pos:column="35"/></name><operator pos:line="4" pos:column="35">-&gt;<pos:position pos:line="4" pos:column="40"/></operator><name pos:line="4" pos:column="37">object<pos:position pos:line="4" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">tree_desc<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">desc<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">name_entry<pos:position pos:line="6" pos:column="26"/></name></name></type> <name pos:line="6" pos:column="27">entry<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="8" pos:column="9">obj<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">flags<pos:position pos:line="8" pos:column="19"/></name></name> <operator pos:line="8" pos:column="20">|=<pos:position pos:line="8" pos:column="22"/></operator> <name pos:line="8" pos:column="23">LOCAL<pos:position pos:line="8" pos:column="28"/></name></expr>;<pos:position pos:line="8" pos:column="29"/></expr_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">obj<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">-&gt;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="18">flags<pos:position pos:line="10" pos:column="23"/></name></name> <operator pos:line="10" pos:column="24">&amp;<pos:position pos:line="10" pos:column="29"/></operator> <operator pos:line="10" pos:column="26">(<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="27">UNINTERESTING<pos:position pos:line="10" pos:column="40"/></name> <operator pos:line="10" pos:column="41">|<pos:position pos:line="10" pos:column="42"/></operator> <name pos:line="10" pos:column="43">SEEN<pos:position pos:line="10" pos:column="47"/></name><operator pos:line="10" pos:column="47">)<pos:position pos:line="10" pos:column="48"/></operator></expr>)<pos:position pos:line="10" pos:column="49"/></condition><then pos:line="10" pos:column="49">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><name pos:line="11" pos:column="24">p<pos:position pos:line="11" pos:column="25"/></name></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">parse_tree<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">tree<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call> <operator pos:line="12" pos:column="30">&lt;<pos:position pos:line="12" pos:column="34"/></operator> <literal type="number" pos:line="12" pos:column="32">0<pos:position pos:line="12" pos:column="33"/></literal></expr>)<pos:position pos:line="12" pos:column="34"/></condition><then pos:line="12" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">die<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><literal type="string" pos:line="13" pos:column="21">"bad tree object %s"<pos:position pos:line="13" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="43">oid_to_hex<pos:position pos:line="13" pos:column="53"/></name><argument_list pos:line="13" pos:column="53">(<argument><expr><operator pos:line="13" pos:column="54">&amp;<pos:position pos:line="13" pos:column="59"/></operator><name><name pos:line="13" pos:column="55">obj<pos:position pos:line="13" pos:column="58"/></name><operator pos:line="13" pos:column="58">-&gt;<pos:position pos:line="13" pos:column="63"/></operator><name pos:line="13" pos:column="60">oid<pos:position pos:line="13" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="66"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="15" pos:column="9">obj<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">flags<pos:position pos:line="15" pos:column="19"/></name></name> <operator pos:line="15" pos:column="20">|=<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">SEEN<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">p<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <call><name pos:line="16" pos:column="13">add_one_object<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">obj<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="33">p<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">init_tree_desc<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><operator pos:line="18" pos:column="24">&amp;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="25">desc<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="31">tree<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">-&gt;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="37">buffer<pos:position pos:line="18" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="45">tree<pos:position pos:line="18" pos:column="49"/></name><operator pos:line="18" pos:column="49">-&gt;<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="51">size<pos:position pos:line="18" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="57"/></expr_stmt>

	<while pos:line="20" pos:column="9">while <condition pos:line="20" pos:column="15">(<expr><call><name pos:line="20" pos:column="16">tree_entry<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><operator pos:line="20" pos:column="27">&amp;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="28">desc<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="34">&amp;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="35">entry<pos:position pos:line="20" pos:column="40"/></name></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="42"/></condition>
		<block type="pseudo"><switch pos:line="21" pos:column="17">switch <condition pos:line="21" pos:column="24">(<expr><call><name pos:line="21" pos:column="25">object_type<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><name><name pos:line="21" pos:column="37">entry<pos:position pos:line="21" pos:column="42"/></name><operator pos:line="21" pos:column="42">.<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="43">mode<pos:position pos:line="21" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="49"/></condition> <block pos:line="21" pos:column="50">{
		<case pos:line="22" pos:column="17">case <expr><name pos:line="22" pos:column="22">OBJ_TREE<pos:position pos:line="22" pos:column="30"/></name></expr>:<pos:position pos:line="22" pos:column="31"/></case>
			<expr_stmt><expr><name pos:line="23" pos:column="25">p<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">=<pos:position pos:line="23" pos:column="28"/></operator> <call><name pos:line="23" pos:column="29">process_tree<pos:position pos:line="23" pos:column="41"/></name><argument_list pos:line="23" pos:column="41">(<argument><expr><call><name pos:line="23" pos:column="42">lookup_tree<pos:position pos:line="23" pos:column="53"/></name><argument_list pos:line="23" pos:column="53">(<argument><expr><name><name pos:line="23" pos:column="54">entry<pos:position pos:line="23" pos:column="59"/></name><operator pos:line="23" pos:column="59">.<pos:position pos:line="23" pos:column="60"/></operator><name pos:line="23" pos:column="60">oid<pos:position pos:line="23" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="66">p<pos:position pos:line="23" pos:column="67"/></name></expr></argument>)<pos:position pos:line="23" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="69"/></expr_stmt>
			<break pos:line="24" pos:column="25">break;<pos:position pos:line="24" pos:column="31"/></break>
		<case pos:line="25" pos:column="17">case <expr><name pos:line="25" pos:column="22">OBJ_BLOB<pos:position pos:line="25" pos:column="30"/></name></expr>:<pos:position pos:line="25" pos:column="31"/></case>
			<expr_stmt><expr><name pos:line="26" pos:column="25">p<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">=<pos:position pos:line="26" pos:column="28"/></operator> <call><name pos:line="26" pos:column="29">process_blob<pos:position pos:line="26" pos:column="41"/></name><argument_list pos:line="26" pos:column="41">(<argument><expr><call><name pos:line="26" pos:column="42">lookup_blob<pos:position pos:line="26" pos:column="53"/></name><argument_list pos:line="26" pos:column="53">(<argument><expr><name><name pos:line="26" pos:column="54">entry<pos:position pos:line="26" pos:column="59"/></name><operator pos:line="26" pos:column="59">.<pos:position pos:line="26" pos:column="60"/></operator><name pos:line="26" pos:column="60">oid<pos:position pos:line="26" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="26" pos:column="66">p<pos:position pos:line="26" pos:column="67"/></name></expr></argument>)<pos:position pos:line="26" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="69"/></expr_stmt>
			<break pos:line="27" pos:column="25">break;<pos:position pos:line="27" pos:column="31"/></break>
		<default pos:line="28" pos:column="17">default:<pos:position pos:line="28" pos:column="25"/></default>
			<comment type="block" pos:line="29" pos:column="25">/* Subproject commit - not in this repository */</comment>
			<break pos:line="30" pos:column="25">break;<pos:position pos:line="30" pos:column="31"/></break>
		}<pos:position pos:line="31" pos:column="18"/></block></switch></block></while>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">free_tree_buffer<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">tree<pos:position pos:line="33" pos:column="30"/></name></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
	<return pos:line="34" pos:column="9">return <expr><name pos:line="34" pos:column="16">p<pos:position pos:line="34" pos:column="17"/></name></expr>;<pos:position pos:line="34" pos:column="18"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
