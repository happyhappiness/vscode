<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_551.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_pack<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name><name pos:line="1" pos:column="21">struct<pos:position pos:line="1" pos:column="27"/></name> <name pos:line="1" pos:column="28">fetch_pack_args<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">args<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
		    <parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name><name pos:line="2" pos:column="25">xd<pos:position pos:line="2" pos:column="27"/></name><index pos:line="2" pos:column="27">[<expr><literal type="number" pos:line="2" pos:column="28">2<pos:position pos:line="2" pos:column="29"/></literal></expr>]<pos:position pos:line="2" pos:column="30"/></index></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier><modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">pack_lockfile<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">async<pos:position pos:line="4" pos:column="21"/></name></name></type> <name pos:line="4" pos:column="22">demux<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">do_keep<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name><name pos:line="5" pos:column="23">args<pos:position pos:line="5" pos:column="27"/></name><operator pos:line="5" pos:column="27">-&gt;<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="29">keep_pack<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">cmd_name<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">pack_header<pos:position pos:line="7" pos:column="27"/></name></name></type> <name pos:line="7" pos:column="28">header<pos:position pos:line="7" pos:column="34"/></name></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">pass_header<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">child_process<pos:position pos:line="9" pos:column="29"/></name></name></type> <name pos:line="9" pos:column="30">cmd<pos:position pos:line="9" pos:column="33"/></name> <init pos:line="9" pos:column="34">= <expr><name pos:line="9" pos:column="36">CHILD_PROCESS_INIT<pos:position pos:line="9" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="55"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">ret<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memset<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><operator pos:line="12" pos:column="16">&amp;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="17">demux<pos:position pos:line="12" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="27">sizeof<argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">demux<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">use_sideband<pos:position pos:line="13" pos:column="25"/></name></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26"> <block pos:line="13" pos:column="27">{
		<comment type="block" pos:line="14" pos:column="17">/* xd[] is talking with upload-pack; subprocess reads from
		 * xd[0], spits out band#2 to stderr, and feeds us band#1
		 * through demux-&gt;out.
		 */</comment>
		<expr_stmt><expr><name><name pos:line="18" pos:column="17">demux<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">.<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">proc<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="30">sideband_demux<pos:position pos:line="18" pos:column="44"/></name></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="19" pos:column="17">demux<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">.<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">data<pos:position pos:line="19" pos:column="27"/></name></name> <operator pos:line="19" pos:column="28">=<pos:position pos:line="19" pos:column="29"/></operator> <name pos:line="19" pos:column="30">xd<pos:position pos:line="19" pos:column="32"/></name></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="20" pos:column="17">demux<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">.<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="23">out<pos:position pos:line="20" pos:column="26"/></name></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <operator pos:line="20" pos:column="29">-<pos:position pos:line="20" pos:column="30"/></operator><literal type="number" pos:line="20" pos:column="30">1<pos:position pos:line="20" pos:column="31"/></literal></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="21" pos:column="17">demux<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">.<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">isolate_sigpipe<pos:position pos:line="21" pos:column="38"/></name></name> <operator pos:line="21" pos:column="39">=<pos:position pos:line="21" pos:column="40"/></operator> <literal type="number" pos:line="21" pos:column="41">1<pos:position pos:line="21" pos:column="42"/></literal></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><call><name pos:line="22" pos:column="21">start_async<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><operator pos:line="22" pos:column="33">&amp;<pos:position pos:line="22" pos:column="38"/></operator><name pos:line="22" pos:column="34">demux<pos:position pos:line="22" pos:column="39"/></name></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="41"/></condition><then pos:line="22" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">die<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><literal type="string" pos:line="23" pos:column="29">"fetch-pack: unable to fork off sideband"<pos:position pos:line="23" pos:column="70"/></literal>
			    <literal type="string" pos:line="24" pos:column="29">" demultiplexer"<pos:position pos:line="24" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></then>
	<else pos:line="26" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="17">demux<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">.<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">out<pos:position pos:line="27" pos:column="26"/></name></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <name><name pos:line="27" pos:column="29">xd<pos:position pos:line="27" pos:column="31"/></name><index pos:line="27" pos:column="31">[<expr><literal type="number" pos:line="27" pos:column="32">0<pos:position pos:line="27" pos:column="33"/></literal></expr>]<pos:position pos:line="27" pos:column="34"/></index></name></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt></block></else></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><name><name pos:line="29" pos:column="14">args<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">keep_pack<pos:position pos:line="29" pos:column="29"/></name></name> <operator pos:line="29" pos:column="30">&amp;&amp;<pos:position pos:line="29" pos:column="40"/></operator> <name pos:line="29" pos:column="33">unpack_limit<pos:position pos:line="29" pos:column="45"/></name></expr>)<pos:position pos:line="29" pos:column="46"/></condition><then pos:line="29" pos:column="46"> <block pos:line="29" pos:column="47">{

		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><call><name pos:line="31" pos:column="21">read_pack_header<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><name><name pos:line="31" pos:column="38">demux<pos:position pos:line="31" pos:column="43"/></name><operator pos:line="31" pos:column="43">.<pos:position pos:line="31" pos:column="44"/></operator><name pos:line="31" pos:column="44">out<pos:position pos:line="31" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="49">&amp;<pos:position pos:line="31" pos:column="54"/></operator><name pos:line="31" pos:column="50">header<pos:position pos:line="31" pos:column="56"/></name></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="58"/></condition><then pos:line="31" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="25">die<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><literal type="string" pos:line="32" pos:column="29">"protocol error: bad pack header"<pos:position pos:line="32" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="64"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="33" pos:column="17">pass_header<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">=<pos:position pos:line="33" pos:column="30"/></operator> <literal type="number" pos:line="33" pos:column="31">1<pos:position pos:line="33" pos:column="32"/></literal></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">ntohl<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name><name pos:line="34" pos:column="27">header<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">.<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="34">hdr_entries<pos:position pos:line="34" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="46"/></argument_list></call> <operator pos:line="34" pos:column="47">&lt;<pos:position pos:line="34" pos:column="51"/></operator> <name pos:line="34" pos:column="49">unpack_limit<pos:position pos:line="34" pos:column="61"/></name></expr>)<pos:position pos:line="34" pos:column="62"/></condition><then pos:line="34" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="25">do_keep<pos:position pos:line="35" pos:column="32"/></name> <operator pos:line="35" pos:column="33">=<pos:position pos:line="35" pos:column="34"/></operator> <literal type="number" pos:line="35" pos:column="35">0<pos:position pos:line="35" pos:column="36"/></literal></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt></block></then>
		<else pos:line="36" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="25">do_keep<pos:position pos:line="37" pos:column="32"/></name> <operator pos:line="37" pos:column="33">=<pos:position pos:line="37" pos:column="34"/></operator> <literal type="number" pos:line="37" pos:column="35">1<pos:position pos:line="37" pos:column="36"/></literal></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt></block></else></if>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">alternate_shallow_file<pos:position pos:line="40" pos:column="35"/></name></expr>)<pos:position pos:line="40" pos:column="36"/></condition><then pos:line="40" pos:column="36"> <block pos:line="40" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">argv_array_push<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><operator pos:line="41" pos:column="33">&amp;<pos:position pos:line="41" pos:column="38"/></operator><name><name pos:line="41" pos:column="34">cmd<pos:position pos:line="41" pos:column="37"/></name><operator pos:line="41" pos:column="37">.<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="38">args<pos:position pos:line="41" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="44">"--shallow-file"<pos:position pos:line="41" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">argv_array_push<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><operator pos:line="42" pos:column="33">&amp;<pos:position pos:line="42" pos:column="38"/></operator><name><name pos:line="42" pos:column="34">cmd<pos:position pos:line="42" pos:column="37"/></name><operator pos:line="42" pos:column="37">.<pos:position pos:line="42" pos:column="38"/></operator><name pos:line="42" pos:column="38">args<pos:position pos:line="42" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="44">alternate_shallow_file<pos:position pos:line="42" pos:column="66"/></name></expr></argument>)<pos:position pos:line="42" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="68"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">do_keep<pos:position pos:line="45" pos:column="20"/></name></expr>)<pos:position pos:line="45" pos:column="21"/></condition><then pos:line="45" pos:column="21"> <block pos:line="45" pos:column="22">{
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">pack_lockfile<pos:position pos:line="46" pos:column="34"/></name></expr>)<pos:position pos:line="46" pos:column="35"/></condition><then pos:line="46" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="25">cmd<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">.<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="29">out<pos:position pos:line="47" pos:column="32"/></name></name> <operator pos:line="47" pos:column="33">=<pos:position pos:line="47" pos:column="34"/></operator> <operator pos:line="47" pos:column="35">-<pos:position pos:line="47" pos:column="36"/></operator><literal type="number" pos:line="47" pos:column="36">1<pos:position pos:line="47" pos:column="37"/></literal></expr>;<pos:position pos:line="47" pos:column="38"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="48" pos:column="17">cmd_name<pos:position pos:line="48" pos:column="25"/></name> <operator pos:line="48" pos:column="26">=<pos:position pos:line="48" pos:column="27"/></operator> <literal type="string" pos:line="48" pos:column="28">"index-pack"<pos:position pos:line="48" pos:column="40"/></literal></expr>;<pos:position pos:line="48" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">argv_array_push<pos:position pos:line="49" pos:column="32"/></name><argument_list pos:line="49" pos:column="32">(<argument><expr><operator pos:line="49" pos:column="33">&amp;<pos:position pos:line="49" pos:column="38"/></operator><name><name pos:line="49" pos:column="34">cmd<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">.<pos:position pos:line="49" pos:column="38"/></operator><name pos:line="49" pos:column="38">args<pos:position pos:line="49" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="44">cmd_name<pos:position pos:line="49" pos:column="52"/></name></expr></argument>)<pos:position pos:line="49" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">argv_array_push<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><operator pos:line="50" pos:column="33">&amp;<pos:position pos:line="50" pos:column="38"/></operator><name><name pos:line="50" pos:column="34">cmd<pos:position pos:line="50" pos:column="37"/></name><operator pos:line="50" pos:column="37">.<pos:position pos:line="50" pos:column="38"/></operator><name pos:line="50" pos:column="38">args<pos:position pos:line="50" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="44">"--stdin"<pos:position pos:line="50" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="55"/></expr_stmt>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">!<pos:position pos:line="51" pos:column="22"/></operator><name><name pos:line="51" pos:column="22">args<pos:position pos:line="51" pos:column="26"/></name><operator pos:line="51" pos:column="26">-&gt;<pos:position pos:line="51" pos:column="31"/></operator><name pos:line="51" pos:column="28">quiet<pos:position pos:line="51" pos:column="33"/></name></name> <operator pos:line="51" pos:column="34">&amp;&amp;<pos:position pos:line="51" pos:column="44"/></operator> <operator pos:line="51" pos:column="37">!<pos:position pos:line="51" pos:column="38"/></operator><name><name pos:line="51" pos:column="38">args<pos:position pos:line="51" pos:column="42"/></name><operator pos:line="51" pos:column="42">-&gt;<pos:position pos:line="51" pos:column="47"/></operator><name pos:line="51" pos:column="44">no_progress<pos:position pos:line="51" pos:column="55"/></name></name></expr>)<pos:position pos:line="51" pos:column="56"/></condition><then pos:line="51" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="25">argv_array_push<pos:position pos:line="52" pos:column="40"/></name><argument_list pos:line="52" pos:column="40">(<argument><expr><operator pos:line="52" pos:column="41">&amp;<pos:position pos:line="52" pos:column="46"/></operator><name><name pos:line="52" pos:column="42">cmd<pos:position pos:line="52" pos:column="45"/></name><operator pos:line="52" pos:column="45">.<pos:position pos:line="52" pos:column="46"/></operator><name pos:line="52" pos:column="46">args<pos:position pos:line="52" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="52">"-v"<pos:position pos:line="52" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="58"/></expr_stmt></block></then></if>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name><name pos:line="53" pos:column="21">args<pos:position pos:line="53" pos:column="25"/></name><operator pos:line="53" pos:column="25">-&gt;<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="27">use_thin_pack<pos:position pos:line="53" pos:column="40"/></name></name></expr>)<pos:position pos:line="53" pos:column="41"/></condition><then pos:line="53" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="25">argv_array_push<pos:position pos:line="54" pos:column="40"/></name><argument_list pos:line="54" pos:column="40">(<argument><expr><operator pos:line="54" pos:column="41">&amp;<pos:position pos:line="54" pos:column="46"/></operator><name><name pos:line="54" pos:column="42">cmd<pos:position pos:line="54" pos:column="45"/></name><operator pos:line="54" pos:column="45">.<pos:position pos:line="54" pos:column="46"/></operator><name pos:line="54" pos:column="46">args<pos:position pos:line="54" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="52">"--fix-thin"<pos:position pos:line="54" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="66"/></expr_stmt></block></then></if>
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name><name pos:line="55" pos:column="21">args<pos:position pos:line="55" pos:column="25"/></name><operator pos:line="55" pos:column="25">-&gt;<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="27">lock_pack<pos:position pos:line="55" pos:column="36"/></name></name> <operator pos:line="55" pos:column="37">||<pos:position pos:line="55" pos:column="39"/></operator> <name pos:line="55" pos:column="40">unpack_limit<pos:position pos:line="55" pos:column="52"/></name></expr>)<pos:position pos:line="55" pos:column="53"/></condition><then pos:line="55" pos:column="53"> <block pos:line="55" pos:column="54">{
			<decl_stmt><decl><type><name pos:line="56" pos:column="25">char<pos:position pos:line="56" pos:column="29"/></name></type> <name><name pos:line="56" pos:column="30">hostname<pos:position pos:line="56" pos:column="38"/></name><index pos:line="56" pos:column="38">[<expr><literal type="number" pos:line="56" pos:column="39">256<pos:position pos:line="56" pos:column="42"/></literal></expr>]<pos:position pos:line="56" pos:column="43"/></index></name></decl>;<pos:position pos:line="56" pos:column="44"/></decl_stmt>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><call><name pos:line="57" pos:column="29">gethostname<pos:position pos:line="57" pos:column="40"/></name><argument_list pos:line="57" pos:column="40">(<argument><expr><name pos:line="57" pos:column="41">hostname<pos:position pos:line="57" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="51">sizeof<argument_list pos:line="57" pos:column="57">(<argument><expr><name pos:line="57" pos:column="58">hostname<pos:position pos:line="57" pos:column="66"/></name></expr></argument>)<pos:position pos:line="57" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="69"/></condition><then pos:line="57" pos:column="69">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="33">xsnprintf<pos:position pos:line="58" pos:column="42"/></name><argument_list pos:line="58" pos:column="42">(<argument><expr><name pos:line="58" pos:column="43">hostname<pos:position pos:line="58" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="53">sizeof<argument_list pos:line="58" pos:column="59">(<argument><expr><name pos:line="58" pos:column="60">hostname<pos:position pos:line="58" pos:column="68"/></name></expr></argument>)<pos:position pos:line="58" pos:column="69"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="71">"localhost"<pos:position pos:line="58" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="84"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">argv_array_pushf<pos:position pos:line="59" pos:column="41"/></name><argument_list pos:line="59" pos:column="41">(<argument><expr><operator pos:line="59" pos:column="42">&amp;<pos:position pos:line="59" pos:column="47"/></operator><name><name pos:line="59" pos:column="43">cmd<pos:position pos:line="59" pos:column="46"/></name><operator pos:line="59" pos:column="46">.<pos:position pos:line="59" pos:column="47"/></operator><name pos:line="59" pos:column="47">args<pos:position pos:line="59" pos:column="51"/></name></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="60" pos:column="41">"--keep=fetch-pack %"<pos:position pos:line="60" pos:column="62"/></literal><name pos:line="60" pos:column="62">PRIuMAX<pos:position pos:line="60" pos:column="69"/></name> <literal type="string" pos:line="60" pos:column="70">" on %s"<pos:position pos:line="60" pos:column="78"/></literal></expr></argument>,
					<argument><expr><operator pos:line="61" pos:column="41">(<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="42">uintmax_t<pos:position pos:line="61" pos:column="51"/></name><operator pos:line="61" pos:column="51">)<pos:position pos:line="61" pos:column="52"/></operator><call><name pos:line="61" pos:column="52">getpid<pos:position pos:line="61" pos:column="58"/></name><argument_list pos:line="61" pos:column="58">()<pos:position pos:line="61" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="61" pos:column="62">hostname<pos:position pos:line="61" pos:column="70"/></name></expr></argument>)<pos:position pos:line="61" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="72"/></expr_stmt>
		}<pos:position pos:line="62" pos:column="18"/></block></then></if>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name><name pos:line="63" pos:column="21">args<pos:position pos:line="63" pos:column="25"/></name><operator pos:line="63" pos:column="25">-&gt;<pos:position pos:line="63" pos:column="30"/></operator><name pos:line="63" pos:column="27">check_self_contained_and_connected<pos:position pos:line="63" pos:column="61"/></name></name></expr>)<pos:position pos:line="63" pos:column="62"/></condition><then pos:line="63" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="25">argv_array_push<pos:position pos:line="64" pos:column="40"/></name><argument_list pos:line="64" pos:column="40">(<argument><expr><operator pos:line="64" pos:column="41">&amp;<pos:position pos:line="64" pos:column="46"/></operator><name><name pos:line="64" pos:column="42">cmd<pos:position pos:line="64" pos:column="45"/></name><operator pos:line="64" pos:column="45">.<pos:position pos:line="64" pos:column="46"/></operator><name pos:line="64" pos:column="46">args<pos:position pos:line="64" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="52">"--check-self-contained-and-connected"<pos:position pos:line="64" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="92"/></expr_stmt></block></then></if>
	}<pos:position pos:line="65" pos:column="10"/></block></then>
	<else pos:line="66" pos:column="9">else <block pos:line="66" pos:column="14">{
		<expr_stmt><expr><name pos:line="67" pos:column="17">cmd_name<pos:position pos:line="67" pos:column="25"/></name> <operator pos:line="67" pos:column="26">=<pos:position pos:line="67" pos:column="27"/></operator> <literal type="string" pos:line="67" pos:column="28">"unpack-objects"<pos:position pos:line="67" pos:column="44"/></literal></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">argv_array_push<pos:position pos:line="68" pos:column="32"/></name><argument_list pos:line="68" pos:column="32">(<argument><expr><operator pos:line="68" pos:column="33">&amp;<pos:position pos:line="68" pos:column="38"/></operator><name><name pos:line="68" pos:column="34">cmd<pos:position pos:line="68" pos:column="37"/></name><operator pos:line="68" pos:column="37">.<pos:position pos:line="68" pos:column="38"/></operator><name pos:line="68" pos:column="38">args<pos:position pos:line="68" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="44">cmd_name<pos:position pos:line="68" pos:column="52"/></name></expr></argument>)<pos:position pos:line="68" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="54"/></expr_stmt>
		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name><name pos:line="69" pos:column="21">args<pos:position pos:line="69" pos:column="25"/></name><operator pos:line="69" pos:column="25">-&gt;<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="27">quiet<pos:position pos:line="69" pos:column="32"/></name></name> <operator pos:line="69" pos:column="33">||<pos:position pos:line="69" pos:column="35"/></operator> <name><name pos:line="69" pos:column="36">args<pos:position pos:line="69" pos:column="40"/></name><operator pos:line="69" pos:column="40">-&gt;<pos:position pos:line="69" pos:column="45"/></operator><name pos:line="69" pos:column="42">no_progress<pos:position pos:line="69" pos:column="53"/></name></name></expr>)<pos:position pos:line="69" pos:column="54"/></condition><then pos:line="69" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="25">argv_array_push<pos:position pos:line="70" pos:column="40"/></name><argument_list pos:line="70" pos:column="40">(<argument><expr><operator pos:line="70" pos:column="41">&amp;<pos:position pos:line="70" pos:column="46"/></operator><name><name pos:line="70" pos:column="42">cmd<pos:position pos:line="70" pos:column="45"/></name><operator pos:line="70" pos:column="45">.<pos:position pos:line="70" pos:column="46"/></operator><name pos:line="70" pos:column="46">args<pos:position pos:line="70" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="52">"-q"<pos:position pos:line="70" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="58"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="71" pos:column="17">args<pos:position pos:line="71" pos:column="21"/></name><operator pos:line="71" pos:column="21">-&gt;<pos:position pos:line="71" pos:column="26"/></operator><name pos:line="71" pos:column="23">check_self_contained_and_connected<pos:position pos:line="71" pos:column="57"/></name></name> <operator pos:line="71" pos:column="58">=<pos:position pos:line="71" pos:column="59"/></operator> <literal type="number" pos:line="71" pos:column="60">0<pos:position pos:line="71" pos:column="61"/></literal></expr>;<pos:position pos:line="71" pos:column="62"/></expr_stmt>
	}<pos:position pos:line="72" pos:column="10"/></block></else></if>

	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">pass_header<pos:position pos:line="74" pos:column="24"/></name></expr>)<pos:position pos:line="74" pos:column="25"/></condition><then pos:line="74" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="17">argv_array_pushf<pos:position pos:line="75" pos:column="33"/></name><argument_list pos:line="75" pos:column="33">(<argument><expr><operator pos:line="75" pos:column="34">&amp;<pos:position pos:line="75" pos:column="39"/></operator><name><name pos:line="75" pos:column="35">cmd<pos:position pos:line="75" pos:column="38"/></name><operator pos:line="75" pos:column="38">.<pos:position pos:line="75" pos:column="39"/></operator><name pos:line="75" pos:column="39">args<pos:position pos:line="75" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="45">"--pack_header=%"<pos:position pos:line="75" pos:column="62"/></literal><name pos:line="75" pos:column="62">PRIu32<pos:position pos:line="75" pos:column="68"/></name><literal type="string" pos:line="75" pos:column="68">",%"<pos:position pos:line="75" pos:column="72"/></literal><name pos:line="75" pos:column="72">PRIu32<pos:position pos:line="75" pos:column="78"/></name></expr></argument>,
				 <argument><expr><call><name pos:line="76" pos:column="34">ntohl<pos:position pos:line="76" pos:column="39"/></name><argument_list pos:line="76" pos:column="39">(<argument><expr><name><name pos:line="76" pos:column="40">header<pos:position pos:line="76" pos:column="46"/></name><operator pos:line="76" pos:column="46">.<pos:position pos:line="76" pos:column="47"/></operator><name pos:line="76" pos:column="47">hdr_version<pos:position pos:line="76" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="59"/></argument_list></call></expr></argument>,
				 <argument><expr><call><name pos:line="77" pos:column="34">ntohl<pos:position pos:line="77" pos:column="39"/></name><argument_list pos:line="77" pos:column="39">(<argument><expr><name><name pos:line="77" pos:column="40">header<pos:position pos:line="77" pos:column="46"/></name><operator pos:line="77" pos:column="46">.<pos:position pos:line="77" pos:column="47"/></operator><name pos:line="77" pos:column="47">hdr_entries<pos:position pos:line="77" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="77" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="77" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="61"/></expr_stmt></block></then></if>
	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><ternary><condition><expr><name pos:line="78" pos:column="13">fetch_fsck_objects<pos:position pos:line="78" pos:column="31"/></name> <operator pos:line="78" pos:column="32">&gt;=<pos:position pos:line="78" pos:column="37"/></operator> <literal type="number" pos:line="78" pos:column="35">0<pos:position pos:line="78" pos:column="36"/></literal></expr>
	    ?<pos:position pos:line="79" pos:column="14"/></condition><then pos:line="79" pos:column="14"> <expr><name pos:line="79" pos:column="15">fetch_fsck_objects<pos:position pos:line="79" pos:column="33"/></name></expr>
	    <pos:position pos:line="80" pos:column="6"/></then><else pos:line="80" pos:column="13">: <expr><ternary><condition><expr><name pos:line="80" pos:column="15">transfer_fsck_objects<pos:position pos:line="80" pos:column="36"/></name> <operator pos:line="80" pos:column="37">&gt;=<pos:position pos:line="80" pos:column="42"/></operator> <literal type="number" pos:line="80" pos:column="40">0<pos:position pos:line="80" pos:column="41"/></literal></expr>
	    ?<pos:position pos:line="81" pos:column="14"/></condition><then pos:line="81" pos:column="14"> <expr><name pos:line="81" pos:column="15">transfer_fsck_objects<pos:position pos:line="81" pos:column="36"/></name></expr>
	    <pos:position pos:line="82" pos:column="6"/></then><else pos:line="82" pos:column="13">: <expr><literal type="number" pos:line="82" pos:column="15">0<pos:position pos:line="82" pos:column="16"/></literal></expr></else></ternary></expr></else></ternary></expr>)<pos:position pos:line="82" pos:column="17"/></condition><then pos:line="82" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="17">argv_array_push<pos:position pos:line="83" pos:column="32"/></name><argument_list pos:line="83" pos:column="32">(<argument><expr><operator pos:line="83" pos:column="33">&amp;<pos:position pos:line="83" pos:column="38"/></operator><name><name pos:line="83" pos:column="34">cmd<pos:position pos:line="83" pos:column="37"/></name><operator pos:line="83" pos:column="37">.<pos:position pos:line="83" pos:column="38"/></operator><name pos:line="83" pos:column="38">args<pos:position pos:line="83" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="44">"--strict"<pos:position pos:line="83" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="56"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="85" pos:column="9">cmd<pos:position pos:line="85" pos:column="12"/></name><operator pos:line="85" pos:column="12">.<pos:position pos:line="85" pos:column="13"/></operator><name pos:line="85" pos:column="13">in<pos:position pos:line="85" pos:column="15"/></name></name> <operator pos:line="85" pos:column="16">=<pos:position pos:line="85" pos:column="17"/></operator> <name><name pos:line="85" pos:column="18">demux<pos:position pos:line="85" pos:column="23"/></name><operator pos:line="85" pos:column="23">.<pos:position pos:line="85" pos:column="24"/></operator><name pos:line="85" pos:column="24">out<pos:position pos:line="85" pos:column="27"/></name></name></expr>;<pos:position pos:line="85" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="86" pos:column="9">cmd<pos:position pos:line="86" pos:column="12"/></name><operator pos:line="86" pos:column="12">.<pos:position pos:line="86" pos:column="13"/></operator><name pos:line="86" pos:column="13">git_cmd<pos:position pos:line="86" pos:column="20"/></name></name> <operator pos:line="86" pos:column="21">=<pos:position pos:line="86" pos:column="22"/></operator> <literal type="number" pos:line="86" pos:column="23">1<pos:position pos:line="86" pos:column="24"/></literal></expr>;<pos:position pos:line="86" pos:column="25"/></expr_stmt>
	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><call><name pos:line="87" pos:column="13">start_command<pos:position pos:line="87" pos:column="26"/></name><argument_list pos:line="87" pos:column="26">(<argument><expr><operator pos:line="87" pos:column="27">&amp;<pos:position pos:line="87" pos:column="32"/></operator><name pos:line="87" pos:column="28">cmd<pos:position pos:line="87" pos:column="31"/></name></expr></argument>)<pos:position pos:line="87" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="33"/></condition><then pos:line="87" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="17">die<pos:position pos:line="88" pos:column="20"/></name><argument_list pos:line="88" pos:column="20">(<argument><expr><literal type="string" pos:line="88" pos:column="21">"fetch-pack: unable to fork off %s"<pos:position pos:line="88" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="58">cmd_name<pos:position pos:line="88" pos:column="66"/></name></expr></argument>)<pos:position pos:line="88" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="68"/></expr_stmt></block></then></if>
	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">do_keep<pos:position pos:line="89" pos:column="20"/></name> <operator pos:line="89" pos:column="21">&amp;&amp;<pos:position pos:line="89" pos:column="31"/></operator> <name pos:line="89" pos:column="24">pack_lockfile<pos:position pos:line="89" pos:column="37"/></name></expr>)<pos:position pos:line="89" pos:column="38"/></condition><then pos:line="89" pos:column="38"> <block pos:line="89" pos:column="39">{
		<expr_stmt><expr><operator pos:line="90" pos:column="17">*<pos:position pos:line="90" pos:column="18"/></operator><name pos:line="90" pos:column="18">pack_lockfile<pos:position pos:line="90" pos:column="31"/></name> <operator pos:line="90" pos:column="32">=<pos:position pos:line="90" pos:column="33"/></operator> <call><name pos:line="90" pos:column="34">index_pack_lockfile<pos:position pos:line="90" pos:column="53"/></name><argument_list pos:line="90" pos:column="53">(<argument><expr><name><name pos:line="90" pos:column="54">cmd<pos:position pos:line="90" pos:column="57"/></name><operator pos:line="90" pos:column="57">.<pos:position pos:line="90" pos:column="58"/></operator><name pos:line="90" pos:column="58">out<pos:position pos:line="90" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">close<pos:position pos:line="91" pos:column="22"/></name><argument_list pos:line="91" pos:column="22">(<argument><expr><name><name pos:line="91" pos:column="23">cmd<pos:position pos:line="91" pos:column="26"/></name><operator pos:line="91" pos:column="26">.<pos:position pos:line="91" pos:column="27"/></operator><name pos:line="91" pos:column="27">out<pos:position pos:line="91" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="92" pos:column="10"/></block></then></if>

	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><operator pos:line="94" pos:column="13">!<pos:position pos:line="94" pos:column="14"/></operator><name pos:line="94" pos:column="14">use_sideband<pos:position pos:line="94" pos:column="26"/></name></expr>)<pos:position pos:line="94" pos:column="27"/></condition><then pos:line="94" pos:column="27">
		<comment type="block" pos:line="95" pos:column="17">/* Closed by start_command() */</comment>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="96" pos:column="17">xd<pos:position pos:line="96" pos:column="19"/></name><index pos:line="96" pos:column="19">[<expr><literal type="number" pos:line="96" pos:column="20">0<pos:position pos:line="96" pos:column="21"/></literal></expr>]<pos:position pos:line="96" pos:column="22"/></index></name> <operator pos:line="96" pos:column="23">=<pos:position pos:line="96" pos:column="24"/></operator> <operator pos:line="96" pos:column="25">-<pos:position pos:line="96" pos:column="26"/></operator><literal type="number" pos:line="96" pos:column="26">1<pos:position pos:line="96" pos:column="27"/></literal></expr>;<pos:position pos:line="96" pos:column="28"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="98" pos:column="9">ret<pos:position pos:line="98" pos:column="12"/></name> <operator pos:line="98" pos:column="13">=<pos:position pos:line="98" pos:column="14"/></operator> <call><name pos:line="98" pos:column="15">finish_command<pos:position pos:line="98" pos:column="29"/></name><argument_list pos:line="98" pos:column="29">(<argument><expr><operator pos:line="98" pos:column="30">&amp;<pos:position pos:line="98" pos:column="35"/></operator><name pos:line="98" pos:column="31">cmd<pos:position pos:line="98" pos:column="34"/></name></expr></argument>)<pos:position pos:line="98" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="36"/></expr_stmt>
	<if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><operator pos:line="99" pos:column="13">!<pos:position pos:line="99" pos:column="14"/></operator><name pos:line="99" pos:column="14">ret<pos:position pos:line="99" pos:column="17"/></name> <operator pos:line="99" pos:column="18">||<pos:position pos:line="99" pos:column="20"/></operator> <operator pos:line="99" pos:column="21">(<pos:position pos:line="99" pos:column="22"/></operator><name><name pos:line="99" pos:column="22">args<pos:position pos:line="99" pos:column="26"/></name><operator pos:line="99" pos:column="26">-&gt;<pos:position pos:line="99" pos:column="31"/></operator><name pos:line="99" pos:column="28">check_self_contained_and_connected<pos:position pos:line="99" pos:column="62"/></name></name> <operator pos:line="99" pos:column="63">&amp;&amp;<pos:position pos:line="99" pos:column="73"/></operator> <name pos:line="99" pos:column="66">ret<pos:position pos:line="99" pos:column="69"/></name> <operator pos:line="99" pos:column="70">==<pos:position pos:line="99" pos:column="72"/></operator> <literal type="number" pos:line="99" pos:column="73">1<pos:position pos:line="99" pos:column="74"/></literal><operator pos:line="99" pos:column="74">)<pos:position pos:line="99" pos:column="75"/></operator></expr>)<pos:position pos:line="99" pos:column="76"/></condition><then pos:line="99" pos:column="76">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="100" pos:column="17">args<pos:position pos:line="100" pos:column="21"/></name><operator pos:line="100" pos:column="21">-&gt;<pos:position pos:line="100" pos:column="26"/></operator><name pos:line="100" pos:column="23">self_contained_and_connected<pos:position pos:line="100" pos:column="51"/></name></name> <operator pos:line="100" pos:column="52">=<pos:position pos:line="100" pos:column="53"/></operator>
			<name><name pos:line="101" pos:column="25">args<pos:position pos:line="101" pos:column="29"/></name><operator pos:line="101" pos:column="29">-&gt;<pos:position pos:line="101" pos:column="34"/></operator><name pos:line="101" pos:column="31">check_self_contained_and_connected<pos:position pos:line="101" pos:column="65"/></name></name> <operator pos:line="101" pos:column="66">&amp;&amp;<pos:position pos:line="101" pos:column="76"/></operator>
			<name pos:line="102" pos:column="25">ret<pos:position pos:line="102" pos:column="28"/></name> <operator pos:line="102" pos:column="29">==<pos:position pos:line="102" pos:column="31"/></operator> <literal type="number" pos:line="102" pos:column="32">0<pos:position pos:line="102" pos:column="33"/></literal></expr>;<pos:position pos:line="102" pos:column="34"/></expr_stmt></block></then>
	<else pos:line="103" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="104" pos:column="17">die<pos:position pos:line="104" pos:column="20"/></name><argument_list pos:line="104" pos:column="20">(<argument><expr><literal type="string" pos:line="104" pos:column="21">"%s failed"<pos:position pos:line="104" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="34">cmd_name<pos:position pos:line="104" pos:column="42"/></name></expr></argument>)<pos:position pos:line="104" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="44"/></expr_stmt></block></else></if>
	<if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name pos:line="105" pos:column="13">use_sideband<pos:position pos:line="105" pos:column="25"/></name> <operator pos:line="105" pos:column="26">&amp;&amp;<pos:position pos:line="105" pos:column="36"/></operator> <call><name pos:line="105" pos:column="29">finish_async<pos:position pos:line="105" pos:column="41"/></name><argument_list pos:line="105" pos:column="41">(<argument><expr><operator pos:line="105" pos:column="42">&amp;<pos:position pos:line="105" pos:column="47"/></operator><name pos:line="105" pos:column="43">demux<pos:position pos:line="105" pos:column="48"/></name></expr></argument>)<pos:position pos:line="105" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="105" pos:column="50"/></condition><then pos:line="105" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="106" pos:column="17">die<pos:position pos:line="106" pos:column="20"/></name><argument_list pos:line="106" pos:column="20">(<argument><expr><literal type="string" pos:line="106" pos:column="21">"error in sideband demultiplexer"<pos:position pos:line="106" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="56"/></expr_stmt></block></then></if>
	<return pos:line="107" pos:column="9">return <expr><literal type="number" pos:line="107" pos:column="16">0<pos:position pos:line="107" pos:column="17"/></literal></expr>;<pos:position pos:line="107" pos:column="18"/></return>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
