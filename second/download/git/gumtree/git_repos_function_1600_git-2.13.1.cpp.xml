<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1600_git-2.13.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">validate_headref<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">path<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">stat<pos:position pos:line="3" pos:column="20"/></name></name></type> <name pos:line="3" pos:column="21">st<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">buf<pos:position pos:line="4" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name><name pos:line="4" pos:column="20">buffer<pos:position pos:line="4" pos:column="26"/></name><index pos:line="4" pos:column="26">[<expr><literal type="number" pos:line="4" pos:column="27">256<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name><name pos:line="5" pos:column="23">sha1<pos:position pos:line="5" pos:column="27"/></name><index pos:line="5" pos:column="27">[<expr><literal type="number" pos:line="5" pos:column="28">20<pos:position pos:line="5" pos:column="30"/></literal></expr>]<pos:position pos:line="5" pos:column="31"/></index></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">fd<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">ssize_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">len<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">lstat<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><name pos:line="9" pos:column="19">path<pos:position pos:line="9" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="25">&amp;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="26">st<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call> <operator pos:line="9" pos:column="30">&lt;<pos:position pos:line="9" pos:column="34"/></operator> <literal type="number" pos:line="9" pos:column="32">0<pos:position pos:line="9" pos:column="33"/></literal></expr>)<pos:position pos:line="9" pos:column="34"/></condition><then pos:line="9" pos:column="34">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">-<pos:position pos:line="10" pos:column="25"/></operator><literal type="number" pos:line="10" pos:column="25">1<pos:position pos:line="10" pos:column="26"/></literal></expr>;<pos:position pos:line="10" pos:column="27"/></return></block></then></if>

	<comment type="block" pos:line="12" pos:column="9">/* Make sure it is a "refs/.." symlink */</comment>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">S_ISLNK<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name><name pos:line="13" pos:column="21">st<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">.<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">st_mode<pos:position pos:line="13" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="33"/></condition><then pos:line="13" pos:column="33"> <block pos:line="13" pos:column="34">{
		<expr_stmt><expr><name pos:line="14" pos:column="17">len<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <call><name pos:line="14" pos:column="23">readlink<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><name pos:line="14" pos:column="32">path<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">buffer<pos:position pos:line="14" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="46">sizeof<argument_list pos:line="14" pos:column="52">(<argument><expr><name pos:line="14" pos:column="53">buffer<pos:position pos:line="14" pos:column="59"/></name></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></sizeof><operator pos:line="14" pos:column="60">-<pos:position pos:line="14" pos:column="61"/></operator><literal type="number" pos:line="14" pos:column="61">1<pos:position pos:line="14" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">len<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">&gt;=<pos:position pos:line="15" pos:column="30"/></operator> <literal type="number" pos:line="15" pos:column="28">5<pos:position pos:line="15" pos:column="29"/></literal> <operator pos:line="15" pos:column="30">&amp;&amp;<pos:position pos:line="15" pos:column="40"/></operator> <operator pos:line="15" pos:column="33">!<pos:position pos:line="15" pos:column="34"/></operator><call><name pos:line="15" pos:column="34">memcmp<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><literal type="string" pos:line="15" pos:column="41">"refs/"<pos:position pos:line="15" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="50">buffer<pos:position pos:line="15" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="58">5<pos:position pos:line="15" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="61"/></condition><then pos:line="15" pos:column="61">
			<block type="pseudo"><return pos:line="16" pos:column="25">return <expr><literal type="number" pos:line="16" pos:column="32">0<pos:position pos:line="16" pos:column="33"/></literal></expr>;<pos:position pos:line="16" pos:column="34"/></return></block></then></if>
		<return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">-<pos:position pos:line="17" pos:column="25"/></operator><literal type="number" pos:line="17" pos:column="25">1<pos:position pos:line="17" pos:column="26"/></literal></expr>;<pos:position pos:line="17" pos:column="27"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="20" pos:column="9">/*
	 * Anything else, just open it and try to see if it is a symbolic ref.
	 */</comment>
	<expr_stmt><expr><name pos:line="23" pos:column="9">fd<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">open<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">path<pos:position pos:line="23" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="25">O_RDONLY<pos:position pos:line="23" pos:column="33"/></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="35"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">fd<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">&lt;<pos:position pos:line="24" pos:column="20"/></operator> <literal type="number" pos:line="24" pos:column="18">0<pos:position pos:line="24" pos:column="19"/></literal></expr>)<pos:position pos:line="24" pos:column="20"/></condition><then pos:line="24" pos:column="20">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><operator pos:line="25" pos:column="24">-<pos:position pos:line="25" pos:column="25"/></operator><literal type="number" pos:line="25" pos:column="25">1<pos:position pos:line="25" pos:column="26"/></literal></expr>;<pos:position pos:line="25" pos:column="27"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="26" pos:column="9">len<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <call><name pos:line="26" pos:column="15">read_in_full<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">fd<pos:position pos:line="26" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="32">buffer<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="40">sizeof<argument_list pos:line="26" pos:column="46">(<argument><expr><name pos:line="26" pos:column="47">buffer<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></sizeof><operator pos:line="26" pos:column="54">-<pos:position pos:line="26" pos:column="55"/></operator><literal type="number" pos:line="26" pos:column="55">1<pos:position pos:line="26" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">close<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><name pos:line="27" pos:column="15">fd<pos:position pos:line="27" pos:column="17"/></name></expr></argument>)<pos:position pos:line="27" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt>

	<comment type="block" pos:line="29" pos:column="9">/*
	 * Is it a symbolic ref?
	 */</comment>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">len<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">&lt;<pos:position pos:line="32" pos:column="21"/></operator> <literal type="number" pos:line="32" pos:column="19">4<pos:position pos:line="32" pos:column="20"/></literal></expr>)<pos:position pos:line="32" pos:column="21"/></condition><then pos:line="32" pos:column="21">
		<block type="pseudo"><return pos:line="33" pos:column="17">return <expr><operator pos:line="33" pos:column="24">-<pos:position pos:line="33" pos:column="25"/></operator><literal type="number" pos:line="33" pos:column="25">1<pos:position pos:line="33" pos:column="26"/></literal></expr>;<pos:position pos:line="33" pos:column="27"/></return></block></then></if>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><call><name pos:line="34" pos:column="14">memcmp<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><literal type="string" pos:line="34" pos:column="21">"ref:"<pos:position pos:line="34" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="29">buffer<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="37">4<pos:position pos:line="34" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="40"/></condition><then pos:line="34" pos:column="40"> <block pos:line="34" pos:column="41">{
		<expr_stmt><expr><name pos:line="35" pos:column="17">buf<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">buffer<pos:position pos:line="35" pos:column="29"/></name> <operator pos:line="35" pos:column="30">+<pos:position pos:line="35" pos:column="31"/></operator> <literal type="number" pos:line="35" pos:column="32">4<pos:position pos:line="35" pos:column="33"/></literal></expr>;<pos:position pos:line="35" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="36" pos:column="17">len<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">-=<pos:position pos:line="36" pos:column="23"/></operator> <literal type="number" pos:line="36" pos:column="24">4<pos:position pos:line="36" pos:column="25"/></literal></expr>;<pos:position pos:line="36" pos:column="26"/></expr_stmt>
		<while pos:line="37" pos:column="17">while <condition pos:line="37" pos:column="23">(<expr><name pos:line="37" pos:column="24">len<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">&amp;&amp;<pos:position pos:line="37" pos:column="38"/></operator> <call><name pos:line="37" pos:column="31">isspace<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><operator pos:line="37" pos:column="39">*<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="40">buf<pos:position pos:line="37" pos:column="43"/></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="45"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="25">buf<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">++<pos:position pos:line="38" pos:column="30"/></operator></expr><operator pos:line="38" pos:column="30">,<pos:position pos:line="38" pos:column="31"/></operator> <expr><name pos:line="38" pos:column="32">len<pos:position pos:line="38" pos:column="35"/></name><operator pos:line="38" pos:column="35">--<pos:position pos:line="38" pos:column="37"/></operator></expr>;<pos:position pos:line="38" pos:column="38"/></expr_stmt></block></while>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">len<pos:position pos:line="39" pos:column="24"/></name> <operator pos:line="39" pos:column="25">&gt;=<pos:position pos:line="39" pos:column="30"/></operator> <literal type="number" pos:line="39" pos:column="28">5<pos:position pos:line="39" pos:column="29"/></literal> <operator pos:line="39" pos:column="30">&amp;&amp;<pos:position pos:line="39" pos:column="40"/></operator> <operator pos:line="39" pos:column="33">!<pos:position pos:line="39" pos:column="34"/></operator><call><name pos:line="39" pos:column="34">memcmp<pos:position pos:line="39" pos:column="40"/></name><argument_list pos:line="39" pos:column="40">(<argument><expr><literal type="string" pos:line="39" pos:column="41">"refs/"<pos:position pos:line="39" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="50">buf<pos:position pos:line="39" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="55">5<pos:position pos:line="39" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="58"/></condition><then pos:line="39" pos:column="58">
			<block type="pseudo"><return pos:line="40" pos:column="25">return <expr><literal type="number" pos:line="40" pos:column="32">0<pos:position pos:line="40" pos:column="33"/></literal></expr>;<pos:position pos:line="40" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="43" pos:column="9">/*
	 * Is this a detached HEAD?
	 */</comment>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><call><name pos:line="46" pos:column="14">get_sha1_hex<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><name pos:line="46" pos:column="27">buffer<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="35">sha1<pos:position pos:line="46" pos:column="39"/></name></expr></argument>)<pos:position pos:line="46" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="41"/></condition><then pos:line="46" pos:column="41">
		<block type="pseudo"><return pos:line="47" pos:column="17">return <expr><literal type="number" pos:line="47" pos:column="24">0<pos:position pos:line="47" pos:column="25"/></literal></expr>;<pos:position pos:line="47" pos:column="26"/></return></block></then></if>

	<return pos:line="49" pos:column="9">return <expr><operator pos:line="49" pos:column="16">-<pos:position pos:line="49" pos:column="17"/></operator><literal type="number" pos:line="49" pos:column="17">1<pos:position pos:line="49" pos:column="18"/></literal></expr>;<pos:position pos:line="49" pos:column="19"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
