<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4581_last_repos.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">setup_temporary_shallow<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name><name pos:line="1" pos:column="43">struct<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">oid_array<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">extra<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">sb<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name pos:line="3" pos:column="28">STRBUF_INIT<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">fd<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">write_shallow_commits<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">(<argument><expr><operator pos:line="6" pos:column="35">&amp;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="36">sb<pos:position pos:line="6" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="40">0<pos:position pos:line="6" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="43">extra<pos:position pos:line="6" pos:column="48"/></name></expr></argument>)<pos:position pos:line="6" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="50"/></condition><then pos:line="6" pos:column="50"> <block pos:line="6" pos:column="51">{
		<expr_stmt><expr><name pos:line="7" pos:column="17">fd<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <call><name pos:line="7" pos:column="22">xmks_tempfile<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><operator pos:line="7" pos:column="36">&amp;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="37">temporary_shallow<pos:position pos:line="7" pos:column="54"/></name></expr></argument>, <argument><expr><call><name pos:line="7" pos:column="56">git_path<pos:position pos:line="7" pos:column="64"/></name><argument_list pos:line="7" pos:column="64">(<argument><expr><literal type="string" pos:line="7" pos:column="65">"shallow_XXXXXX"<pos:position pos:line="7" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="84"/></expr_stmt>

		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><call><name pos:line="9" pos:column="21">write_in_full<pos:position pos:line="9" pos:column="34"/></name><argument_list pos:line="9" pos:column="34">(<argument><expr><name pos:line="9" pos:column="35">fd<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="39">sb<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">.<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="42">buf<pos:position pos:line="9" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="47">sb<pos:position pos:line="9" pos:column="49"/></name><operator pos:line="9" pos:column="49">.<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="50">len<pos:position pos:line="9" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call> <operator pos:line="9" pos:column="55">!=<pos:position pos:line="9" pos:column="57"/></operator> <name><name pos:line="9" pos:column="58">sb<pos:position pos:line="9" pos:column="60"/></name><operator pos:line="9" pos:column="60">.<pos:position pos:line="9" pos:column="61"/></operator><name pos:line="9" pos:column="61">len<pos:position pos:line="9" pos:column="64"/></name></name></expr>)<pos:position pos:line="9" pos:column="65"/></condition><then pos:line="9" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">die_errno<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><literal type="string" pos:line="10" pos:column="35">"failed to write to %s"<pos:position pos:line="10" pos:column="58"/></literal></expr></argument>,
				  <argument><expr><call><name pos:line="11" pos:column="35">get_tempfile_path<pos:position pos:line="11" pos:column="52"/></name><argument_list pos:line="11" pos:column="52">(<argument><expr><operator pos:line="11" pos:column="53">&amp;<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="54">temporary_shallow<pos:position pos:line="11" pos:column="71"/></name></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">close_tempfile<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><operator pos:line="12" pos:column="32">&amp;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="33">temporary_shallow<pos:position pos:line="12" pos:column="50"/></name></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_release<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><operator pos:line="13" pos:column="32">&amp;<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="33">sb<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
		<return pos:line="14" pos:column="17">return <expr><call><name pos:line="14" pos:column="24">get_tempfile_path<pos:position pos:line="14" pos:column="41"/></name><argument_list pos:line="14" pos:column="41">(<argument><expr><operator pos:line="14" pos:column="42">&amp;<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="43">temporary_shallow<pos:position pos:line="14" pos:column="60"/></name></expr></argument>)<pos:position pos:line="14" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="62"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
	<comment type="block" pos:line="16" pos:column="9">/*
	 * is_repository_shallow() sees empty string as "no shallow
	 * file".
	 */</comment>
	<return pos:line="20" pos:column="9">return <expr><call><name pos:line="20" pos:column="16">get_tempfile_path<pos:position pos:line="20" pos:column="33"/></name><argument_list pos:line="20" pos:column="33">(<argument><expr><operator pos:line="20" pos:column="34">&amp;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="35">temporary_shallow<pos:position pos:line="20" pos:column="52"/></name></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="54"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
