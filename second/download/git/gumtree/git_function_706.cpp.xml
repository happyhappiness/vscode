<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_706.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_common_commits<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name><name pos:line="3" pos:column="23">sha1<pos:position pos:line="3" pos:column="27"/></name><index pos:line="3" pos:column="27">[<expr><literal type="number" pos:line="3" pos:column="28">20<pos:position pos:line="3" pos:column="30"/></literal></expr>]<pos:position pos:line="3" pos:column="31"/></index></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">last_hex<pos:position pos:line="4" pos:column="22"/></name><index pos:line="4" pos:column="22">[<expr><literal type="number" pos:line="4" pos:column="23">41<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">got_common<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><literal type="number" pos:line="5" pos:column="26">0<pos:position pos:line="5" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">got_other<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">sent_ready<pos:position pos:line="7" pos:column="23"/></name> <init pos:line="7" pos:column="24">= <expr><literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">save_commit_buffer<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">=<pos:position pos:line="9" pos:column="29"/></operator> <literal type="number" pos:line="9" pos:column="30">0<pos:position pos:line="9" pos:column="31"/></literal></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>

	<for pos:line="11" pos:column="9">for <control pos:line="11" pos:column="13">(<init pos:line="11" pos:column="14">;<pos:position pos:line="11" pos:column="15"/></init><condition pos:line="11" pos:column="15">;<pos:position pos:line="11" pos:column="16"/></condition><incr/>)<pos:position pos:line="11" pos:column="17"/></control> <block pos:line="11" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">char<pos:position pos:line="12" pos:column="21"/></name> <modifier pos:line="12" pos:column="22">*<pos:position pos:line="12" pos:column="23"/></modifier></type><name pos:line="12" pos:column="23">line<pos:position pos:line="12" pos:column="27"/></name> <init pos:line="12" pos:column="28">= <expr><call><name pos:line="12" pos:column="30">packet_read_line<pos:position pos:line="12" pos:column="46"/></name><argument_list pos:line="12" pos:column="46">(<argument><expr><literal type="number" pos:line="12" pos:column="47">0<pos:position pos:line="12" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">NULL<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="56"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">reset_timeout<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">()<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">line<pos:position pos:line="15" pos:column="26"/></name></expr>)<pos:position pos:line="15" pos:column="27"/></condition><then pos:line="15" pos:column="27"> <block pos:line="15" pos:column="28">{
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><name pos:line="16" pos:column="29">multi_ack<pos:position pos:line="16" pos:column="38"/></name> <operator pos:line="16" pos:column="39">==<pos:position pos:line="16" pos:column="41"/></operator> <literal type="number" pos:line="16" pos:column="42">2<pos:position pos:line="16" pos:column="43"/></literal> <operator pos:line="16" pos:column="44">&amp;&amp;<pos:position pos:line="16" pos:column="54"/></operator> <name pos:line="16" pos:column="47">got_common<pos:position pos:line="16" pos:column="57"/></name>
			    <operator pos:line="17" pos:column="29">&amp;&amp;<pos:position pos:line="17" pos:column="39"/></operator> <operator pos:line="17" pos:column="32">!<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="33">got_other<pos:position pos:line="17" pos:column="42"/></name> <operator pos:line="17" pos:column="43">&amp;&amp;<pos:position pos:line="17" pos:column="53"/></operator> <call><name pos:line="17" pos:column="46">ok_to_give_up<pos:position pos:line="17" pos:column="59"/></name><argument_list pos:line="17" pos:column="59">()<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="62"/></condition><then pos:line="17" pos:column="62"> <block pos:line="17" pos:column="63">{
				<expr_stmt><expr><name pos:line="18" pos:column="33">sent_ready<pos:position pos:line="18" pos:column="43"/></name> <operator pos:line="18" pos:column="44">=<pos:position pos:line="18" pos:column="45"/></operator> <literal type="number" pos:line="18" pos:column="46">1<pos:position pos:line="18" pos:column="47"/></literal></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="19" pos:column="33">packet_write<pos:position pos:line="19" pos:column="45"/></name><argument_list pos:line="19" pos:column="45">(<argument><expr><literal type="number" pos:line="19" pos:column="46">1<pos:position pos:line="19" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="49">"ACK %s ready\n"<pos:position pos:line="19" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="67">last_hex<pos:position pos:line="19" pos:column="75"/></name></expr></argument>)<pos:position pos:line="19" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="77"/></expr_stmt>
			}<pos:position pos:line="20" pos:column="26"/></block></then></if>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><name><name pos:line="21" pos:column="29">have_obj<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">.<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">nr<pos:position pos:line="21" pos:column="40"/></name></name> <operator pos:line="21" pos:column="41">==<pos:position pos:line="21" pos:column="43"/></operator> <literal type="number" pos:line="21" pos:column="44">0<pos:position pos:line="21" pos:column="45"/></literal> <operator pos:line="21" pos:column="46">||<pos:position pos:line="21" pos:column="48"/></operator> <name pos:line="21" pos:column="49">multi_ack<pos:position pos:line="21" pos:column="58"/></name></expr>)<pos:position pos:line="21" pos:column="59"/></condition><then pos:line="21" pos:column="59">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="33">packet_write<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><literal type="number" pos:line="22" pos:column="46">1<pos:position pos:line="22" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="49">"NAK\n"<pos:position pos:line="22" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt></block></then></if>

			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name pos:line="24" pos:column="29">no_done<pos:position pos:line="24" pos:column="36"/></name> <operator pos:line="24" pos:column="37">&amp;&amp;<pos:position pos:line="24" pos:column="47"/></operator> <name pos:line="24" pos:column="40">sent_ready<pos:position pos:line="24" pos:column="50"/></name></expr>)<pos:position pos:line="24" pos:column="51"/></condition><then pos:line="24" pos:column="51"> <block pos:line="24" pos:column="52">{
				<expr_stmt><expr><call><name pos:line="25" pos:column="33">packet_write<pos:position pos:line="25" pos:column="45"/></name><argument_list pos:line="25" pos:column="45">(<argument><expr><literal type="number" pos:line="25" pos:column="46">1<pos:position pos:line="25" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="49">"ACK %s\n"<pos:position pos:line="25" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="61">last_hex<pos:position pos:line="25" pos:column="69"/></name></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="71"/></expr_stmt>
				<return pos:line="26" pos:column="33">return <expr><literal type="number" pos:line="26" pos:column="40">0<pos:position pos:line="26" pos:column="41"/></literal></expr>;<pos:position pos:line="26" pos:column="42"/></return>
			}<pos:position pos:line="27" pos:column="26"/></block></then></if>
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><name pos:line="28" pos:column="29">stateless_rpc<pos:position pos:line="28" pos:column="42"/></name></expr>)<pos:position pos:line="28" pos:column="43"/></condition><then pos:line="28" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="33">exit<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><literal type="number" pos:line="29" pos:column="38">0<pos:position pos:line="29" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="30" pos:column="25">got_common<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">=<pos:position pos:line="30" pos:column="37"/></operator> <literal type="number" pos:line="30" pos:column="38">0<pos:position pos:line="30" pos:column="39"/></literal></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="31" pos:column="25">got_other<pos:position pos:line="31" pos:column="34"/></name> <operator pos:line="31" pos:column="35">=<pos:position pos:line="31" pos:column="36"/></operator> <literal type="number" pos:line="31" pos:column="37">0<pos:position pos:line="31" pos:column="38"/></literal></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt>
			<continue pos:line="32" pos:column="25">continue;<pos:position pos:line="32" pos:column="34"/></continue>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">starts_with<pos:position pos:line="34" pos:column="32"/></name><argument_list pos:line="34" pos:column="32">(<argument><expr><name pos:line="34" pos:column="33">line<pos:position pos:line="34" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="39">"have "<pos:position pos:line="34" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="48"/></condition><then pos:line="34" pos:column="48"> <block pos:line="34" pos:column="49">{
			<switch pos:line="35" pos:column="25">switch <condition pos:line="35" pos:column="32">(<expr><call><name pos:line="35" pos:column="33">got_sha1<pos:position pos:line="35" pos:column="41"/></name><argument_list pos:line="35" pos:column="41">(<argument><expr><name pos:line="35" pos:column="42">line<pos:position pos:line="35" pos:column="46"/></name><operator pos:line="35" pos:column="46">+<pos:position pos:line="35" pos:column="47"/></operator><literal type="number" pos:line="35" pos:column="47">5<pos:position pos:line="35" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="50">sha1<pos:position pos:line="35" pos:column="54"/></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="56"/></condition> <block pos:line="35" pos:column="57">{
			<case pos:line="36" pos:column="25">case <expr><operator pos:line="36" pos:column="30">-<pos:position pos:line="36" pos:column="31"/></operator><literal type="number" pos:line="36" pos:column="31">1<pos:position pos:line="36" pos:column="32"/></literal></expr>:<pos:position pos:line="36" pos:column="33"/></case> <comment type="block" pos:line="36" pos:column="34">/* they have what we do not */</comment>
				<expr_stmt><expr><name pos:line="37" pos:column="33">got_other<pos:position pos:line="37" pos:column="42"/></name> <operator pos:line="37" pos:column="43">=<pos:position pos:line="37" pos:column="44"/></operator> <literal type="number" pos:line="37" pos:column="45">1<pos:position pos:line="37" pos:column="46"/></literal></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
				<if pos:line="38" pos:column="33">if <condition pos:line="38" pos:column="36">(<expr><name pos:line="38" pos:column="37">multi_ack<pos:position pos:line="38" pos:column="46"/></name> <operator pos:line="38" pos:column="47">&amp;&amp;<pos:position pos:line="38" pos:column="57"/></operator> <call><name pos:line="38" pos:column="50">ok_to_give_up<pos:position pos:line="38" pos:column="63"/></name><argument_list pos:line="38" pos:column="63">()<pos:position pos:line="38" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="66"/></condition><then pos:line="38" pos:column="66"> <block pos:line="38" pos:column="67">{
					<decl_stmt><decl><type><specifier pos:line="39" pos:column="41">const<pos:position pos:line="39" pos:column="46"/></specifier> <name pos:line="39" pos:column="47">char<pos:position pos:line="39" pos:column="51"/></name> <modifier pos:line="39" pos:column="52">*<pos:position pos:line="39" pos:column="53"/></modifier></type><name pos:line="39" pos:column="53">hex<pos:position pos:line="39" pos:column="56"/></name> <init pos:line="39" pos:column="57">= <expr><call><name pos:line="39" pos:column="59">sha1_to_hex<pos:position pos:line="39" pos:column="70"/></name><argument_list pos:line="39" pos:column="70">(<argument><expr><name pos:line="39" pos:column="71">sha1<pos:position pos:line="39" pos:column="75"/></name></expr></argument>)<pos:position pos:line="39" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="77"/></decl_stmt>
					<if pos:line="40" pos:column="41">if <condition pos:line="40" pos:column="44">(<expr><name pos:line="40" pos:column="45">multi_ack<pos:position pos:line="40" pos:column="54"/></name> <operator pos:line="40" pos:column="55">==<pos:position pos:line="40" pos:column="57"/></operator> <literal type="number" pos:line="40" pos:column="58">2<pos:position pos:line="40" pos:column="59"/></literal></expr>)<pos:position pos:line="40" pos:column="60"/></condition><then pos:line="40" pos:column="60"> <block pos:line="40" pos:column="61">{
						<expr_stmt><expr><name pos:line="41" pos:column="49">sent_ready<pos:position pos:line="41" pos:column="59"/></name> <operator pos:line="41" pos:column="60">=<pos:position pos:line="41" pos:column="61"/></operator> <literal type="number" pos:line="41" pos:column="62">1<pos:position pos:line="41" pos:column="63"/></literal></expr>;<pos:position pos:line="41" pos:column="64"/></expr_stmt>
						<expr_stmt><expr><call><name pos:line="42" pos:column="49">packet_write<pos:position pos:line="42" pos:column="61"/></name><argument_list pos:line="42" pos:column="61">(<argument><expr><literal type="number" pos:line="42" pos:column="62">1<pos:position pos:line="42" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="65">"ACK %s ready\n"<pos:position pos:line="42" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="83">hex<pos:position pos:line="42" pos:column="86"/></name></expr></argument>)<pos:position pos:line="42" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="88"/></expr_stmt>
					}<pos:position pos:line="43" pos:column="42"/></block></then> <else pos:line="43" pos:column="43">else
						<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="49">packet_write<pos:position pos:line="44" pos:column="61"/></name><argument_list pos:line="44" pos:column="61">(<argument><expr><literal type="number" pos:line="44" pos:column="62">1<pos:position pos:line="44" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="65">"ACK %s continue\n"<pos:position pos:line="44" pos:column="84"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="86">hex<pos:position pos:line="44" pos:column="89"/></name></expr></argument>)<pos:position pos:line="44" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="91"/></expr_stmt></block></else></if>
				}<pos:position pos:line="45" pos:column="34"/></block></then></if>
				<break pos:line="46" pos:column="33">break;<pos:position pos:line="46" pos:column="39"/></break>
			<default pos:line="47" pos:column="25">default:<pos:position pos:line="47" pos:column="33"/></default>
				<expr_stmt><expr><name pos:line="48" pos:column="33">got_common<pos:position pos:line="48" pos:column="43"/></name> <operator pos:line="48" pos:column="44">=<pos:position pos:line="48" pos:column="45"/></operator> <literal type="number" pos:line="48" pos:column="46">1<pos:position pos:line="48" pos:column="47"/></literal></expr>;<pos:position pos:line="48" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="49" pos:column="33">memcpy<pos:position pos:line="49" pos:column="39"/></name><argument_list pos:line="49" pos:column="39">(<argument><expr><name pos:line="49" pos:column="40">last_hex<pos:position pos:line="49" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="50">sha1_to_hex<pos:position pos:line="49" pos:column="61"/></name><argument_list pos:line="49" pos:column="61">(<argument><expr><name pos:line="49" pos:column="62">sha1<pos:position pos:line="49" pos:column="66"/></name></expr></argument>)<pos:position pos:line="49" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="69">41<pos:position pos:line="49" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="73"/></expr_stmt>
				<if pos:line="50" pos:column="33">if <condition pos:line="50" pos:column="36">(<expr><name pos:line="50" pos:column="37">multi_ack<pos:position pos:line="50" pos:column="46"/></name> <operator pos:line="50" pos:column="47">==<pos:position pos:line="50" pos:column="49"/></operator> <literal type="number" pos:line="50" pos:column="50">2<pos:position pos:line="50" pos:column="51"/></literal></expr>)<pos:position pos:line="50" pos:column="52"/></condition><then pos:line="50" pos:column="52">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="41">packet_write<pos:position pos:line="51" pos:column="53"/></name><argument_list pos:line="51" pos:column="53">(<argument><expr><literal type="number" pos:line="51" pos:column="54">1<pos:position pos:line="51" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="57">"ACK %s common\n"<pos:position pos:line="51" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="76">last_hex<pos:position pos:line="51" pos:column="84"/></name></expr></argument>)<pos:position pos:line="51" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="86"/></expr_stmt></block></then>
				<elseif pos:line="52" pos:column="33">else <if pos:line="52" pos:column="38">if <condition pos:line="52" pos:column="41">(<expr><name pos:line="52" pos:column="42">multi_ack<pos:position pos:line="52" pos:column="51"/></name></expr>)<pos:position pos:line="52" pos:column="52"/></condition><then pos:line="52" pos:column="52">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="41">packet_write<pos:position pos:line="53" pos:column="53"/></name><argument_list pos:line="53" pos:column="53">(<argument><expr><literal type="number" pos:line="53" pos:column="54">1<pos:position pos:line="53" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="57">"ACK %s continue\n"<pos:position pos:line="53" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="78">last_hex<pos:position pos:line="53" pos:column="86"/></name></expr></argument>)<pos:position pos:line="53" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="88"/></expr_stmt></block></then></if></elseif>
				<elseif pos:line="54" pos:column="33">else <if pos:line="54" pos:column="38">if <condition pos:line="54" pos:column="41">(<expr><name><name pos:line="54" pos:column="42">have_obj<pos:position pos:line="54" pos:column="50"/></name><operator pos:line="54" pos:column="50">.<pos:position pos:line="54" pos:column="51"/></operator><name pos:line="54" pos:column="51">nr<pos:position pos:line="54" pos:column="53"/></name></name> <operator pos:line="54" pos:column="54">==<pos:position pos:line="54" pos:column="56"/></operator> <literal type="number" pos:line="54" pos:column="57">1<pos:position pos:line="54" pos:column="58"/></literal></expr>)<pos:position pos:line="54" pos:column="59"/></condition><then pos:line="54" pos:column="59">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="41">packet_write<pos:position pos:line="55" pos:column="53"/></name><argument_list pos:line="55" pos:column="53">(<argument><expr><literal type="number" pos:line="55" pos:column="54">1<pos:position pos:line="55" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="57">"ACK %s\n"<pos:position pos:line="55" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="69">last_hex<pos:position pos:line="55" pos:column="77"/></name></expr></argument>)<pos:position pos:line="55" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="79"/></expr_stmt></block></then></if></elseif></if>
				<break pos:line="56" pos:column="33">break;<pos:position pos:line="56" pos:column="39"/></break>
			}<pos:position pos:line="57" pos:column="26"/></block></switch>
			<continue pos:line="58" pos:column="25">continue;<pos:position pos:line="58" pos:column="34"/></continue>
		}<pos:position pos:line="59" pos:column="18"/></block></then></if>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><operator pos:line="60" pos:column="21">!<pos:position pos:line="60" pos:column="22"/></operator><call><name pos:line="60" pos:column="22">strcmp<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">line<pos:position pos:line="60" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="35">"done"<pos:position pos:line="60" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="43"/></condition><then pos:line="60" pos:column="43"> <block pos:line="60" pos:column="44">{
			<if pos:line="61" pos:column="25">if <condition pos:line="61" pos:column="28">(<expr><name><name pos:line="61" pos:column="29">have_obj<pos:position pos:line="61" pos:column="37"/></name><operator pos:line="61" pos:column="37">.<pos:position pos:line="61" pos:column="38"/></operator><name pos:line="61" pos:column="38">nr<pos:position pos:line="61" pos:column="40"/></name></name> <operator pos:line="61" pos:column="41">&gt;<pos:position pos:line="61" pos:column="45"/></operator> <literal type="number" pos:line="61" pos:column="43">0<pos:position pos:line="61" pos:column="44"/></literal></expr>)<pos:position pos:line="61" pos:column="45"/></condition><then pos:line="61" pos:column="45"> <block pos:line="61" pos:column="46">{
				<if pos:line="62" pos:column="33">if <condition pos:line="62" pos:column="36">(<expr><name pos:line="62" pos:column="37">multi_ack<pos:position pos:line="62" pos:column="46"/></name></expr>)<pos:position pos:line="62" pos:column="47"/></condition><then pos:line="62" pos:column="47">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="41">packet_write<pos:position pos:line="63" pos:column="53"/></name><argument_list pos:line="63" pos:column="53">(<argument><expr><literal type="number" pos:line="63" pos:column="54">1<pos:position pos:line="63" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="57">"ACK %s\n"<pos:position pos:line="63" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="69">last_hex<pos:position pos:line="63" pos:column="77"/></name></expr></argument>)<pos:position pos:line="63" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="79"/></expr_stmt></block></then></if>
				<return pos:line="64" pos:column="33">return <expr><literal type="number" pos:line="64" pos:column="40">0<pos:position pos:line="64" pos:column="41"/></literal></expr>;<pos:position pos:line="64" pos:column="42"/></return>
			}<pos:position pos:line="65" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">packet_write<pos:position pos:line="66" pos:column="37"/></name><argument_list pos:line="66" pos:column="37">(<argument><expr><literal type="number" pos:line="66" pos:column="38">1<pos:position pos:line="66" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="41">"NAK\n"<pos:position pos:line="66" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="50"/></expr_stmt>
			<return pos:line="67" pos:column="25">return <expr><operator pos:line="67" pos:column="32">-<pos:position pos:line="67" pos:column="33"/></operator><literal type="number" pos:line="67" pos:column="33">1<pos:position pos:line="67" pos:column="34"/></literal></expr>;<pos:position pos:line="67" pos:column="35"/></return>
		}<pos:position pos:line="68" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">die<pos:position pos:line="69" pos:column="20"/></name><argument_list pos:line="69" pos:column="20">(<argument><expr><literal type="string" pos:line="69" pos:column="21">"git upload-pack: expected SHA1 list, got '%s'"<pos:position pos:line="69" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="70">line<pos:position pos:line="69" pos:column="74"/></name></expr></argument>)<pos:position pos:line="69" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="76"/></expr_stmt>
	}<pos:position pos:line="70" pos:column="10"/></block></for>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
