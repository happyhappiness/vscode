<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3407_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">refname_match<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">abbrev_name<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">full_name<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier><modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">p<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">int<pos:position pos:line="4" pos:column="18"/></name></type> <name pos:line="4" pos:column="19">abbrev_name_len<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><call><name pos:line="4" pos:column="37">strlen<pos:position pos:line="4" pos:column="43"/></name><argument_list pos:line="4" pos:column="43">(<argument><expr><name pos:line="4" pos:column="44">abbrev_name<pos:position pos:line="4" pos:column="55"/></name></expr></argument>)<pos:position pos:line="4" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="57"/></decl_stmt>

	<for pos:line="6" pos:column="9">for <control pos:line="6" pos:column="13">(<init><expr><name pos:line="6" pos:column="14">p<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">=<pos:position pos:line="6" pos:column="17"/></operator> <name pos:line="6" pos:column="18">ref_rev_parse_rules<pos:position pos:line="6" pos:column="37"/></name></expr>;<pos:position pos:line="6" pos:column="38"/></init> <condition><expr><operator pos:line="6" pos:column="39">*<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="40">p<pos:position pos:line="6" pos:column="41"/></name></expr>;<pos:position pos:line="6" pos:column="42"/></condition> <incr><expr><name pos:line="6" pos:column="43">p<pos:position pos:line="6" pos:column="44"/></name><operator pos:line="6" pos:column="44">++<pos:position pos:line="6" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="6" pos:column="47"/></control> <block pos:line="6" pos:column="48">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><operator pos:line="7" pos:column="21">!<pos:position pos:line="7" pos:column="22"/></operator><call><name pos:line="7" pos:column="22">strcmp<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">full_name<pos:position pos:line="7" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="7" pos:column="40">mkpath<pos:position pos:line="7" pos:column="46"/></name><argument_list pos:line="7" pos:column="46">(<argument><expr><operator pos:line="7" pos:column="47">*<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="48">p<pos:position pos:line="7" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="51">abbrev_name_len<pos:position pos:line="7" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="68">abbrev_name<pos:position pos:line="7" pos:column="79"/></name></expr></argument>)<pos:position pos:line="7" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="82"/></condition><then pos:line="7" pos:column="82"> <block pos:line="7" pos:column="83">{
			<return pos:line="8" pos:column="25">return <expr><literal type="number" pos:line="8" pos:column="32">1<pos:position pos:line="8" pos:column="33"/></literal></expr>;<pos:position pos:line="8" pos:column="34"/></return>
		}<pos:position pos:line="9" pos:column="18"/></block></then></if>
	}<pos:position pos:line="10" pos:column="10"/></block></for>

	<return pos:line="12" pos:column="9">return <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
