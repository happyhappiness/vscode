<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5296_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">show_file<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">arg<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">int<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">output_prefix<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">show_default<pos:position pos:line="3" pos:column="21"/></name><argument_list pos:line="3" pos:column="21">()<pos:position pos:line="3" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="24"/></expr_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">(<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">filter<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">&amp;<pos:position pos:line="4" pos:column="26"/></operator> <operator pos:line="4" pos:column="23">(<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">DO_NONFLAGS<pos:position pos:line="4" pos:column="35"/></name><operator pos:line="4" pos:column="35">|<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">DO_NOREV<pos:position pos:line="4" pos:column="44"/></name><operator pos:line="4" pos:column="44">)<pos:position pos:line="4" pos:column="45"/></operator><operator pos:line="4" pos:column="45">)<pos:position pos:line="4" pos:column="46"/></operator> <operator pos:line="4" pos:column="47">==<pos:position pos:line="4" pos:column="49"/></operator> <operator pos:line="4" pos:column="50">(<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="51">DO_NONFLAGS<pos:position pos:line="4" pos:column="62"/></name><operator pos:line="4" pos:column="62">|<pos:position pos:line="4" pos:column="63"/></operator><name pos:line="4" pos:column="63">DO_NOREV<pos:position pos:line="4" pos:column="71"/></name><operator pos:line="4" pos:column="71">)<pos:position pos:line="4" pos:column="72"/></operator></expr>)<pos:position pos:line="4" pos:column="73"/></condition><then pos:line="4" pos:column="73"> <block pos:line="4" pos:column="74">{
		<if pos:line="5" pos:column="17">if <condition pos:line="5" pos:column="20">(<expr><name pos:line="5" pos:column="21">output_prefix<pos:position pos:line="5" pos:column="34"/></name></expr>)<pos:position pos:line="5" pos:column="35"/></condition><then pos:line="5" pos:column="35"> <block pos:line="5" pos:column="36">{
			<decl_stmt><decl><type><specifier pos:line="6" pos:column="25">const<pos:position pos:line="6" pos:column="30"/></specifier> <name pos:line="6" pos:column="31">char<pos:position pos:line="6" pos:column="35"/></name> <modifier pos:line="6" pos:column="36">*<pos:position pos:line="6" pos:column="37"/></modifier></type><name pos:line="6" pos:column="37">prefix<pos:position pos:line="6" pos:column="43"/></name> <init pos:line="6" pos:column="44">= <expr><name><name pos:line="6" pos:column="46">startup_info<pos:position pos:line="6" pos:column="58"/></name><operator pos:line="6" pos:column="58">-&gt;<pos:position pos:line="6" pos:column="63"/></operator><name pos:line="6" pos:column="60">prefix<pos:position pos:line="6" pos:column="66"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="67"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="7" pos:column="25">char<pos:position pos:line="7" pos:column="29"/></name> <modifier pos:line="7" pos:column="30">*<pos:position pos:line="7" pos:column="31"/></modifier></type><name pos:line="7" pos:column="31">fname<pos:position pos:line="7" pos:column="36"/></name> <init pos:line="7" pos:column="37">= <expr><call><name pos:line="7" pos:column="39">prefix_filename<pos:position pos:line="7" pos:column="54"/></name><argument_list pos:line="7" pos:column="54">(<argument><expr><name pos:line="7" pos:column="55">prefix<pos:position pos:line="7" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="63">arg<pos:position pos:line="7" pos:column="66"/></name></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="68"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="8" pos:column="25">show<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name pos:line="8" pos:column="30">fname<pos:position pos:line="8" pos:column="35"/></name></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="9" pos:column="25">free<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">fname<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="10" pos:column="18"/></block></then> <else pos:line="10" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">show<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">arg<pos:position pos:line="11" pos:column="33"/></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt></block></else></if>
		<return pos:line="12" pos:column="17">return <expr><literal type="number" pos:line="12" pos:column="24">1<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
