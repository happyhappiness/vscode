<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5507_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fsck_obj<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name><name pos:line="1" pos:column="21">struct<pos:position pos:line="1" pos:column="27"/></name> <name pos:line="1" pos:column="28">object<pos:position pos:line="1" pos:column="34"/></name></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">obj<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">err<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name><name pos:line="5" pos:column="13">obj<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">-&gt;<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="18">flags<pos:position pos:line="5" pos:column="23"/></name></name> <operator pos:line="5" pos:column="24">&amp;<pos:position pos:line="5" pos:column="29"/></operator> <name pos:line="5" pos:column="26">SEEN<pos:position pos:line="5" pos:column="30"/></name></expr>)<pos:position pos:line="5" pos:column="31"/></condition><then pos:line="5" pos:column="31">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name><name pos:line="7" pos:column="9">obj<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">-&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">flags<pos:position pos:line="7" pos:column="19"/></name></name> <operator pos:line="7" pos:column="20">|=<pos:position pos:line="7" pos:column="22"/></operator> <name pos:line="7" pos:column="23">SEEN<pos:position pos:line="7" pos:column="27"/></name></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">verbose<pos:position pos:line="9" pos:column="20"/></name></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">fprintf<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">stderr<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="33">"Checking %s %s\n"<pos:position pos:line="10" pos:column="51"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="11" pos:column="25">printable_type<pos:position pos:line="11" pos:column="39"/></name><argument_list pos:line="11" pos:column="39">(<argument><expr><name pos:line="11" pos:column="40">obj<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="46">describe_object<pos:position pos:line="11" pos:column="61"/></name><argument_list pos:line="11" pos:column="61">(<argument><expr><name pos:line="11" pos:column="62">obj<pos:position pos:line="11" pos:column="65"/></name></expr></argument>)<pos:position pos:line="11" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="68"/></expr_stmt></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">fsck_walk<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">obj<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="28">NULL<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="34">&amp;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="35">fsck_obj_options<pos:position pos:line="13" pos:column="51"/></name></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="53"/></condition><then pos:line="13" pos:column="53">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">objerror<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">obj<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="31">"broken links"<pos:position pos:line="14" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="15" pos:column="9">err<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">fsck_object<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">obj<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="32">NULL<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="38">0<pos:position pos:line="15" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="41">&amp;<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="42">fsck_obj_options<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">err<pos:position pos:line="16" pos:column="16"/></name></expr>)<pos:position pos:line="16" pos:column="17"/></condition><then pos:line="16" pos:column="17">
		<block type="pseudo"><goto pos:line="17" pos:column="17">goto <name pos:line="17" pos:column="22">out<pos:position pos:line="17" pos:column="25"/></name>;<pos:position pos:line="17" pos:column="26"/></goto></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name><name pos:line="19" pos:column="13">obj<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">type<pos:position pos:line="19" pos:column="22"/></name></name> <operator pos:line="19" pos:column="23">==<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">OBJ_COMMIT<pos:position pos:line="19" pos:column="36"/></name></expr>)<pos:position pos:line="19" pos:column="37"/></condition><then pos:line="19" pos:column="37"> <block pos:line="19" pos:column="38">{
		<decl_stmt><decl><type><name><name pos:line="20" pos:column="17">struct<pos:position pos:line="20" pos:column="23"/></name> <name pos:line="20" pos:column="24">commit<pos:position pos:line="20" pos:column="30"/></name></name> <modifier pos:line="20" pos:column="31">*<pos:position pos:line="20" pos:column="32"/></modifier></type><name pos:line="20" pos:column="32">commit<pos:position pos:line="20" pos:column="38"/></name> <init pos:line="20" pos:column="39">= <expr><operator pos:line="20" pos:column="41">(<pos:position pos:line="20" pos:column="42"/></operator>struct <name pos:line="20" pos:column="49">commit<pos:position pos:line="20" pos:column="55"/></name> <operator pos:line="20" pos:column="56">*<pos:position pos:line="20" pos:column="57"/></operator><operator pos:line="20" pos:column="57">)<pos:position pos:line="20" pos:column="58"/></operator> <name pos:line="20" pos:column="59">obj<pos:position pos:line="20" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="63"/></decl_stmt>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name><name pos:line="22" pos:column="22">commit<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">-&gt;<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="30">parents<pos:position pos:line="22" pos:column="37"/></name></name> <operator pos:line="22" pos:column="38">&amp;&amp;<pos:position pos:line="22" pos:column="48"/></operator> <name pos:line="22" pos:column="41">show_root<pos:position pos:line="22" pos:column="50"/></name></expr>)<pos:position pos:line="22" pos:column="51"/></condition><then pos:line="22" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">printf<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><literal type="string" pos:line="23" pos:column="32">"root %s\n"<pos:position pos:line="23" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="45">describe_object<pos:position pos:line="23" pos:column="60"/></name><argument_list pos:line="23" pos:column="60">(<argument><expr><operator pos:line="23" pos:column="61">&amp;<pos:position pos:line="23" pos:column="66"/></operator><name><name pos:line="23" pos:column="62">commit<pos:position pos:line="23" pos:column="68"/></name><operator pos:line="23" pos:column="68">-&gt;<pos:position pos:line="23" pos:column="73"/></operator><name pos:line="23" pos:column="70">object<pos:position pos:line="23" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="79"/></expr_stmt></block></then></if>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">obj<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">type<pos:position pos:line="26" pos:column="22"/></name></name> <operator pos:line="26" pos:column="23">==<pos:position pos:line="26" pos:column="25"/></operator> <name pos:line="26" pos:column="26">OBJ_TAG<pos:position pos:line="26" pos:column="33"/></name></expr>)<pos:position pos:line="26" pos:column="34"/></condition><then pos:line="26" pos:column="34"> <block pos:line="26" pos:column="35">{
		<decl_stmt><decl><type><name><name pos:line="27" pos:column="17">struct<pos:position pos:line="27" pos:column="23"/></name> <name pos:line="27" pos:column="24">tag<pos:position pos:line="27" pos:column="27"/></name></name> <modifier pos:line="27" pos:column="28">*<pos:position pos:line="27" pos:column="29"/></modifier></type><name pos:line="27" pos:column="29">tag<pos:position pos:line="27" pos:column="32"/></name> <init pos:line="27" pos:column="33">= <expr><operator pos:line="27" pos:column="35">(<pos:position pos:line="27" pos:column="36"/></operator>struct <name pos:line="27" pos:column="43">tag<pos:position pos:line="27" pos:column="46"/></name> <operator pos:line="27" pos:column="47">*<pos:position pos:line="27" pos:column="48"/></operator><operator pos:line="27" pos:column="48">)<pos:position pos:line="27" pos:column="49"/></operator> <name pos:line="27" pos:column="50">obj<pos:position pos:line="27" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="54"/></decl_stmt>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">show_tags<pos:position pos:line="29" pos:column="30"/></name> <operator pos:line="29" pos:column="31">&amp;&amp;<pos:position pos:line="29" pos:column="41"/></operator> <name><name pos:line="29" pos:column="34">tag<pos:position pos:line="29" pos:column="37"/></name><operator pos:line="29" pos:column="37">-&gt;<pos:position pos:line="29" pos:column="42"/></operator><name pos:line="29" pos:column="39">tagged<pos:position pos:line="29" pos:column="45"/></name></name></expr>)<pos:position pos:line="29" pos:column="46"/></condition><then pos:line="29" pos:column="46"> <block pos:line="29" pos:column="47">{
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">printf<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><literal type="string" pos:line="30" pos:column="32">"tagged %s %s"<pos:position pos:line="30" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="48">printable_type<pos:position pos:line="30" pos:column="62"/></name><argument_list pos:line="30" pos:column="62">(<argument><expr><name><name pos:line="30" pos:column="63">tag<pos:position pos:line="30" pos:column="66"/></name><operator pos:line="30" pos:column="66">-&gt;<pos:position pos:line="30" pos:column="71"/></operator><name pos:line="30" pos:column="68">tagged<pos:position pos:line="30" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="75"/></argument_list></call></expr></argument>,
				<argument><expr><call><name pos:line="31" pos:column="33">describe_object<pos:position pos:line="31" pos:column="48"/></name><argument_list pos:line="31" pos:column="48">(<argument><expr><name><name pos:line="31" pos:column="49">tag<pos:position pos:line="31" pos:column="52"/></name><operator pos:line="31" pos:column="52">-&gt;<pos:position pos:line="31" pos:column="57"/></operator><name pos:line="31" pos:column="54">tagged<pos:position pos:line="31" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">printf<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><literal type="string" pos:line="32" pos:column="32">" (%s) in %s\n"<pos:position pos:line="32" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="49">tag<pos:position pos:line="32" pos:column="52"/></name><operator pos:line="32" pos:column="52">-&gt;<pos:position pos:line="32" pos:column="57"/></operator><name pos:line="32" pos:column="54">tag<pos:position pos:line="32" pos:column="57"/></name></name></expr></argument>,
				<argument><expr><call><name pos:line="33" pos:column="33">describe_object<pos:position pos:line="33" pos:column="48"/></name><argument_list pos:line="33" pos:column="48">(<argument><expr><operator pos:line="33" pos:column="49">&amp;<pos:position pos:line="33" pos:column="54"/></operator><name><name pos:line="33" pos:column="50">tag<pos:position pos:line="33" pos:column="53"/></name><operator pos:line="33" pos:column="53">-&gt;<pos:position pos:line="33" pos:column="58"/></operator><name pos:line="33" pos:column="55">object<pos:position pos:line="33" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="64"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

<label><name pos:line="37" pos:column="1">out<pos:position pos:line="37" pos:column="4"/></name>:<pos:position pos:line="37" pos:column="5"/></label>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name><name pos:line="38" pos:column="13">obj<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">-&gt;<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="18">type<pos:position pos:line="38" pos:column="22"/></name></name> <operator pos:line="38" pos:column="23">==<pos:position pos:line="38" pos:column="25"/></operator> <name pos:line="38" pos:column="26">OBJ_TREE<pos:position pos:line="38" pos:column="34"/></name></expr>)<pos:position pos:line="38" pos:column="35"/></condition><then pos:line="38" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="17">free_tree_buffer<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><operator pos:line="39" pos:column="34">(<pos:position pos:line="39" pos:column="35"/></operator>struct <name pos:line="39" pos:column="42">tree<pos:position pos:line="39" pos:column="46"/></name> <operator pos:line="39" pos:column="47">*<pos:position pos:line="39" pos:column="48"/></operator><operator pos:line="39" pos:column="48">)<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="49">obj<pos:position pos:line="39" pos:column="52"/></name></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt></block></then></if>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name><name pos:line="40" pos:column="13">obj<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">-&gt;<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="18">type<pos:position pos:line="40" pos:column="22"/></name></name> <operator pos:line="40" pos:column="23">==<pos:position pos:line="40" pos:column="25"/></operator> <name pos:line="40" pos:column="26">OBJ_COMMIT<pos:position pos:line="40" pos:column="36"/></name></expr>)<pos:position pos:line="40" pos:column="37"/></condition><then pos:line="40" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="17">free_commit_buffer<pos:position pos:line="41" pos:column="35"/></name><argument_list pos:line="41" pos:column="35">(<argument><expr><operator pos:line="41" pos:column="36">(<pos:position pos:line="41" pos:column="37"/></operator>struct <name pos:line="41" pos:column="44">commit<pos:position pos:line="41" pos:column="50"/></name> <operator pos:line="41" pos:column="51">*<pos:position pos:line="41" pos:column="52"/></operator><operator pos:line="41" pos:column="52">)<pos:position pos:line="41" pos:column="53"/></operator><name pos:line="41" pos:column="53">obj<pos:position pos:line="41" pos:column="56"/></name></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="58"/></expr_stmt></block></then></if>
	<return pos:line="42" pos:column="9">return <expr><name pos:line="42" pos:column="16">err<pos:position pos:line="42" pos:column="19"/></name></expr>;<pos:position pos:line="42" pos:column="20"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
