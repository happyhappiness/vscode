<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4538_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rest_is_empty<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">strbuf<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">sb<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">start<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">eol<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">nl<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* Check if the rest is just whitespace and Signed-of-by's. */</comment>
	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init><expr><name pos:line="7" pos:column="14">i<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <name pos:line="7" pos:column="18">start<pos:position pos:line="7" pos:column="23"/></name></expr>;<pos:position pos:line="7" pos:column="24"/></init> <condition><expr><name pos:line="7" pos:column="25">i<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">&lt;<pos:position pos:line="7" pos:column="31"/></operator> <name><name pos:line="7" pos:column="29">sb<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">len<pos:position pos:line="7" pos:column="36"/></name></name></expr>;<pos:position pos:line="7" pos:column="37"/></condition> <incr><expr><name pos:line="7" pos:column="38">i<pos:position pos:line="7" pos:column="39"/></name><operator pos:line="7" pos:column="39">++<pos:position pos:line="7" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="42"/></control> <block pos:line="7" pos:column="43">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">nl<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">=<pos:position pos:line="8" pos:column="21"/></operator> <call><name pos:line="8" pos:column="22">memchr<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><name><name pos:line="8" pos:column="29">sb<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">-&gt;<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="33">buf<pos:position pos:line="8" pos:column="36"/></name></name> <operator pos:line="8" pos:column="37">+<pos:position pos:line="8" pos:column="38"/></operator> <name pos:line="8" pos:column="39">i<pos:position pos:line="8" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="8" pos:column="42">'\n'<pos:position pos:line="8" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="48">sb<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">-&gt;<pos:position pos:line="8" pos:column="55"/></operator><name pos:line="8" pos:column="52">len<pos:position pos:line="8" pos:column="55"/></name></name> <operator pos:line="8" pos:column="56">-<pos:position pos:line="8" pos:column="57"/></operator> <name pos:line="8" pos:column="58">i<pos:position pos:line="8" pos:column="59"/></name></expr></argument>)<pos:position pos:line="8" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="61"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">nl<pos:position pos:line="9" pos:column="23"/></name></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="25">eol<pos:position pos:line="10" pos:column="28"/></name> <operator pos:line="10" pos:column="29">=<pos:position pos:line="10" pos:column="30"/></operator> <name pos:line="10" pos:column="31">nl<pos:position pos:line="10" pos:column="33"/></name> <operator pos:line="10" pos:column="34">-<pos:position pos:line="10" pos:column="35"/></operator> <name><name pos:line="10" pos:column="36">sb<pos:position pos:line="10" pos:column="38"/></name><operator pos:line="10" pos:column="38">-&gt;<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="40">buf<pos:position pos:line="10" pos:column="43"/></name></name></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt></block></then>
		<else pos:line="11" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="25">eol<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">=<pos:position pos:line="12" pos:column="30"/></operator> <name><name pos:line="12" pos:column="31">sb<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">-&gt;<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="35">len<pos:position pos:line="12" pos:column="38"/></name></name></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt></block></else></if>

		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><call><name pos:line="14" pos:column="21">strlen<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">sign_off_header<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call> <operator pos:line="14" pos:column="45">&lt;=<pos:position pos:line="14" pos:column="50"/></operator> <name pos:line="14" pos:column="48">eol<pos:position pos:line="14" pos:column="51"/></name> <operator pos:line="14" pos:column="52">-<pos:position pos:line="14" pos:column="53"/></operator> <name pos:line="14" pos:column="54">i<pos:position pos:line="14" pos:column="55"/></name> <operator pos:line="14" pos:column="56">&amp;&amp;<pos:position pos:line="14" pos:column="66"/></operator>
		    <call><name pos:line="15" pos:column="21">starts_with<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name><name pos:line="15" pos:column="33">sb<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">-&gt;<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="37">buf<pos:position pos:line="15" pos:column="40"/></name></name> <operator pos:line="15" pos:column="41">+<pos:position pos:line="15" pos:column="42"/></operator> <name pos:line="15" pos:column="43">i<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">sign_off_header<pos:position pos:line="15" pos:column="61"/></name></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="63"/></condition><then pos:line="15" pos:column="63"> <block pos:line="15" pos:column="64">{
			<expr_stmt><expr><name pos:line="16" pos:column="25">i<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">=<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="29">eol<pos:position pos:line="16" pos:column="32"/></name></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
			<continue pos:line="17" pos:column="25">continue;<pos:position pos:line="17" pos:column="34"/></continue>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>
		<while pos:line="19" pos:column="17">while <condition pos:line="19" pos:column="23">(<expr><name pos:line="19" pos:column="24">i<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">&lt;<pos:position pos:line="19" pos:column="30"/></operator> <name pos:line="19" pos:column="28">eol<pos:position pos:line="19" pos:column="31"/></name></expr>)<pos:position pos:line="19" pos:column="32"/></condition>
			<block type="pseudo"><if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><operator pos:line="20" pos:column="29">!<pos:position pos:line="20" pos:column="30"/></operator><call><name pos:line="20" pos:column="30">isspace<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">(<argument><expr><name><name pos:line="20" pos:column="38">sb<pos:position pos:line="20" pos:column="40"/></name><operator pos:line="20" pos:column="40">-&gt;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="42">buf<pos:position pos:line="20" pos:column="45"/></name><index pos:line="20" pos:column="45">[<expr><name pos:line="20" pos:column="46">i<pos:position pos:line="20" pos:column="47"/></name><operator pos:line="20" pos:column="47">++<pos:position pos:line="20" pos:column="49"/></operator></expr>]<pos:position pos:line="20" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="52"/></condition><then pos:line="20" pos:column="52">
				<block type="pseudo"><return pos:line="21" pos:column="33">return <expr><literal type="number" pos:line="21" pos:column="40">0<pos:position pos:line="21" pos:column="41"/></literal></expr>;<pos:position pos:line="21" pos:column="42"/></return></block></then></if></block></while>
	}<pos:position pos:line="22" pos:column="10"/></block></for>

	<return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">1<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
