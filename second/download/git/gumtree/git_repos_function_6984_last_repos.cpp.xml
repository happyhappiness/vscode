<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6984_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">extend_buffers<pos:position pos:line="3" pos:column="15"/></name> <parameter_list pos:line="3" pos:column="16">(<parameter><decl><type><name pos:line="3" pos:column="17">re_match_context_t<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">mctx<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="42"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">reg_errcode_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">ret<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">re_string_t<pos:position pos:line="6" pos:column="14"/></name> <modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">pstr<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><operator pos:line="6" pos:column="23">&amp;<pos:position pos:line="6" pos:column="28"/></operator><name><name pos:line="6" pos:column="24">mctx<pos:position pos:line="6" pos:column="28"/></name><operator pos:line="6" pos:column="28">-&gt;<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="30">input<pos:position pos:line="6" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Avoid overflow.  */</comment>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><call><name pos:line="9" pos:column="7">BE<pos:position pos:line="9" pos:column="9"/></name> <argument_list pos:line="9" pos:column="10">(<argument><expr><name pos:line="9" pos:column="11">INT_MAX<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">/<pos:position pos:line="9" pos:column="20"/></operator> <literal type="number" pos:line="9" pos:column="21">2<pos:position pos:line="9" pos:column="22"/></literal> <operator pos:line="9" pos:column="23">/<pos:position pos:line="9" pos:column="24"/></operator> <sizeof pos:line="9" pos:column="25">sizeof <argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">re_dfastate_t<pos:position pos:line="9" pos:column="46"/></name> <operator pos:line="9" pos:column="47">*<pos:position pos:line="9" pos:column="48"/></operator></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></sizeof> <operator pos:line="9" pos:column="50">&lt;=<pos:position pos:line="9" pos:column="55"/></operator> <name><name pos:line="9" pos:column="53">pstr<pos:position pos:line="9" pos:column="57"/></name><operator pos:line="9" pos:column="57">-&gt;<pos:position pos:line="9" pos:column="62"/></operator><name pos:line="9" pos:column="59">bufs_len<pos:position pos:line="9" pos:column="67"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="69">0<pos:position pos:line="9" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="72"/></condition><then pos:line="9" pos:column="72">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">REG_ESPACE<pos:position pos:line="10" pos:column="22"/></name></expr>;<pos:position pos:line="10" pos:column="23"/></return></block></then></if>

  <comment type="block" pos:line="12" pos:column="3">/* Double the lengths of the buffers.  */</comment>
  <expr_stmt><expr><name pos:line="13" pos:column="3">ret<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <call><name pos:line="13" pos:column="9">re_string_realloc_buffers<pos:position pos:line="13" pos:column="34"/></name> <argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">pstr<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="42">pstr<pos:position pos:line="13" pos:column="46"/></name><operator pos:line="13" pos:column="46">-&gt;<pos:position pos:line="13" pos:column="51"/></operator><name pos:line="13" pos:column="48">bufs_len<pos:position pos:line="13" pos:column="56"/></name></name> <operator pos:line="13" pos:column="57">*<pos:position pos:line="13" pos:column="58"/></operator> <literal type="number" pos:line="13" pos:column="59">2<pos:position pos:line="13" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="62"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><call><name pos:line="14" pos:column="7">BE<pos:position pos:line="14" pos:column="9"/></name> <argument_list pos:line="14" pos:column="10">(<argument><expr><name pos:line="14" pos:column="11">ret<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">!=<pos:position pos:line="14" pos:column="17"/></operator> <name pos:line="14" pos:column="18">REG_NOERROR<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="31">0<pos:position pos:line="14" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="34"/></condition><then pos:line="14" pos:column="34">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">ret<pos:position pos:line="15" pos:column="15"/></name></expr>;<pos:position pos:line="15" pos:column="16"/></return></block></then></if>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name><name pos:line="17" pos:column="7">mctx<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">state_log<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">!=<pos:position pos:line="17" pos:column="25"/></operator> <name pos:line="17" pos:column="26">NULL<pos:position pos:line="17" pos:column="30"/></name></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31">
    <block pos:line="18" pos:column="5">{
      <comment type="block" pos:line="19" pos:column="7">/* And double the length of state_log.  */</comment>
      <comment type="block" pos:line="20" pos:column="7">/* XXX We have no indication of the size of this buffer.  If this
	 allocation fail we have no indication that the state_log array
	 does not have the right size.  */</comment>
      <decl_stmt><decl><type><name pos:line="23" pos:column="7">re_dfastate_t<pos:position pos:line="23" pos:column="20"/></name> <modifier pos:line="23" pos:column="21">*<pos:position pos:line="23" pos:column="22"/></modifier><modifier pos:line="23" pos:column="22">*<pos:position pos:line="23" pos:column="23"/></modifier></type><name pos:line="23" pos:column="23">new_array<pos:position pos:line="23" pos:column="32"/></name> <init pos:line="23" pos:column="33">= <expr><call><name pos:line="23" pos:column="35">re_realloc<pos:position pos:line="23" pos:column="45"/></name> <argument_list pos:line="23" pos:column="46">(<argument><expr><name><name pos:line="23" pos:column="47">mctx<pos:position pos:line="23" pos:column="51"/></name><operator pos:line="23" pos:column="51">-&gt;<pos:position pos:line="23" pos:column="56"/></operator><name pos:line="23" pos:column="53">state_log<pos:position pos:line="23" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="64">re_dfastate_t<pos:position pos:line="23" pos:column="77"/></name> <operator pos:line="23" pos:column="78">*<pos:position pos:line="23" pos:column="79"/></operator></expr></argument>,
					      <argument><expr><name><name pos:line="24" pos:column="47">pstr<pos:position pos:line="24" pos:column="51"/></name><operator pos:line="24" pos:column="51">-&gt;<pos:position pos:line="24" pos:column="56"/></operator><name pos:line="24" pos:column="53">bufs_len<pos:position pos:line="24" pos:column="61"/></name></name> <operator pos:line="24" pos:column="62">+<pos:position pos:line="24" pos:column="63"/></operator> <literal type="number" pos:line="24" pos:column="64">1<pos:position pos:line="24" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="67"/></decl_stmt>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><call><name pos:line="25" pos:column="11">BE<pos:position pos:line="25" pos:column="13"/></name> <argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">new_array<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">==<pos:position pos:line="25" pos:column="27"/></operator> <name pos:line="25" pos:column="28">NULL<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="34">0<pos:position pos:line="25" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="37"/></condition><then pos:line="25" pos:column="37">
	<block type="pseudo"><return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">REG_ESPACE<pos:position pos:line="26" pos:column="26"/></name></expr>;<pos:position pos:line="26" pos:column="27"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">mctx<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">-&gt;<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="13">state_log<pos:position pos:line="27" pos:column="22"/></name></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">new_array<pos:position pos:line="27" pos:column="34"/></name></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="30" pos:column="3">/* Then reconstruct the buffers.  */</comment>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name><name pos:line="31" pos:column="7">pstr<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">-&gt;<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="13">icase<pos:position pos:line="31" pos:column="18"/></name></name></expr>)<pos:position pos:line="31" pos:column="19"/></condition><then pos:line="31" pos:column="19">
    <block pos:line="32" pos:column="5">{
<cpp:ifdef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifdef<pos:position pos:line="33" pos:column="7"/></cpp:directive> <name pos:line="33" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="33" pos:column="22"/></name></cpp:ifdef>
      <if pos:line="34" pos:column="7">if <condition pos:line="34" pos:column="10">(<expr><name><name pos:line="34" pos:column="11">pstr<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">-&gt;<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="17">mb_cur_max<pos:position pos:line="34" pos:column="27"/></name></name> <operator pos:line="34" pos:column="28">&gt;<pos:position pos:line="34" pos:column="32"/></operator> <literal type="number" pos:line="34" pos:column="30">1<pos:position pos:line="34" pos:column="31"/></literal></expr>)<pos:position pos:line="34" pos:column="32"/></condition><then pos:line="34" pos:column="32">
	<block pos:line="35" pos:column="9">{
	  <expr_stmt><expr><name pos:line="36" pos:column="11">ret<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">=<pos:position pos:line="36" pos:column="16"/></operator> <call><name pos:line="36" pos:column="17">build_wcs_upper_buffer<pos:position pos:line="36" pos:column="39"/></name> <argument_list pos:line="36" pos:column="40">(<argument><expr><name pos:line="36" pos:column="41">pstr<pos:position pos:line="36" pos:column="45"/></name></expr></argument>)<pos:position pos:line="36" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt>
	  <if pos:line="37" pos:column="11">if <condition pos:line="37" pos:column="14">(<expr><call><name pos:line="37" pos:column="15">BE<pos:position pos:line="37" pos:column="17"/></name> <argument_list pos:line="37" pos:column="18">(<argument><expr><name pos:line="37" pos:column="19">ret<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">!=<pos:position pos:line="37" pos:column="25"/></operator> <name pos:line="37" pos:column="26">REG_NOERROR<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="39">0<pos:position pos:line="37" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="42"/></condition><then pos:line="37" pos:column="42">
	    <block type="pseudo"><return pos:line="38" pos:column="13">return <expr><name pos:line="38" pos:column="20">ret<pos:position pos:line="38" pos:column="23"/></name></expr>;<pos:position pos:line="38" pos:column="24"/></return></block></then></if>
	}<pos:position pos:line="39" pos:column="10"/></block></then>
      <else pos:line="40" pos:column="7">else
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="41" pos:column="8">/* RE_ENABLE_I18N  */</comment>
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="9">build_upper_buffer<pos:position pos:line="42" pos:column="27"/></name> <argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">pstr<pos:position pos:line="42" pos:column="33"/></name></expr></argument>)<pos:position pos:line="42" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt></block></else></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then>
  <else pos:line="44" pos:column="3">else
    <block pos:line="45" pos:column="5">{
<cpp:ifdef pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">ifdef<pos:position pos:line="46" pos:column="7"/></cpp:directive> <name pos:line="46" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="46" pos:column="22"/></name></cpp:ifdef>
      <if pos:line="47" pos:column="7">if <condition pos:line="47" pos:column="10">(<expr><name><name pos:line="47" pos:column="11">pstr<pos:position pos:line="47" pos:column="15"/></name><operator pos:line="47" pos:column="15">-&gt;<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="17">mb_cur_max<pos:position pos:line="47" pos:column="27"/></name></name> <operator pos:line="47" pos:column="28">&gt;<pos:position pos:line="47" pos:column="32"/></operator> <literal type="number" pos:line="47" pos:column="30">1<pos:position pos:line="47" pos:column="31"/></literal></expr>)<pos:position pos:line="47" pos:column="32"/></condition><then pos:line="47" pos:column="32">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="9">build_wcs_buffer<pos:position pos:line="48" pos:column="25"/></name> <argument_list pos:line="48" pos:column="26">(<argument><expr><name pos:line="48" pos:column="27">pstr<pos:position pos:line="48" pos:column="31"/></name></expr></argument>)<pos:position pos:line="48" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt></block></then>
      <else pos:line="49" pos:column="7">else
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="50" pos:column="8">/* RE_ENABLE_I18N  */</comment>
	<block pos:line="51" pos:column="9">{
	  <if pos:line="52" pos:column="11">if <condition pos:line="52" pos:column="14">(<expr><name><name pos:line="52" pos:column="15">pstr<pos:position pos:line="52" pos:column="19"/></name><operator pos:line="52" pos:column="19">-&gt;<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="21">trans<pos:position pos:line="52" pos:column="26"/></name></name> <operator pos:line="52" pos:column="27">!=<pos:position pos:line="52" pos:column="29"/></operator> <name pos:line="52" pos:column="30">NULL<pos:position pos:line="52" pos:column="34"/></name></expr>)<pos:position pos:line="52" pos:column="35"/></condition><then pos:line="52" pos:column="35">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="13">re_string_translate_buffer<pos:position pos:line="53" pos:column="39"/></name> <argument_list pos:line="53" pos:column="40">(<argument><expr><name pos:line="53" pos:column="41">pstr<pos:position pos:line="53" pos:column="45"/></name></expr></argument>)<pos:position pos:line="53" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="47"/></expr_stmt></block></then></if>
	}<pos:position pos:line="54" pos:column="10"/></block></else></if>
    }<pos:position pos:line="55" pos:column="6"/></block></else></if>
  <return pos:line="56" pos:column="3">return <expr><name pos:line="56" pos:column="10">REG_NOERROR<pos:position pos:line="56" pos:column="21"/></name></expr>;<pos:position pos:line="56" pos:column="22"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
