<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_533_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">refname_atom_parser_internal<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">refname_atom<pos:position pos:line="1" pos:column="61"/></name></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">atom<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
					 <parameter><decl><type><specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier> <name pos:line="2" pos:column="48">char<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">arg<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="59">const<pos:position pos:line="2" pos:column="64"/></specifier> <name pos:line="2" pos:column="65">char<pos:position pos:line="2" pos:column="69"/></name> <modifier pos:line="2" pos:column="70">*<pos:position pos:line="2" pos:column="71"/></modifier></type><name pos:line="2" pos:column="71">name<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">arg<pos:position pos:line="4" pos:column="17"/></name></expr>)<pos:position pos:line="4" pos:column="18"/></condition><then pos:line="4" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="5" pos:column="17">atom<pos:position pos:line="5" pos:column="21"/></name><operator pos:line="5" pos:column="21">-&gt;<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="23">option<pos:position pos:line="5" pos:column="29"/></name></name> <operator pos:line="5" pos:column="30">=<pos:position pos:line="5" pos:column="31"/></operator> <name pos:line="5" pos:column="32">R_NORMAL<pos:position pos:line="5" pos:column="40"/></name></expr>;<pos:position pos:line="5" pos:column="41"/></expr_stmt></block></then>
	<elseif pos:line="6" pos:column="9">else <if pos:line="6" pos:column="14">if <condition pos:line="6" pos:column="17">(<expr><operator pos:line="6" pos:column="18">!<pos:position pos:line="6" pos:column="19"/></operator><call><name pos:line="6" pos:column="19">strcmp<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><name pos:line="6" pos:column="26">arg<pos:position pos:line="6" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="31">"short"<pos:position pos:line="6" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="40"/></condition><then pos:line="6" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="7" pos:column="17">atom<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">option<pos:position pos:line="7" pos:column="29"/></name></name> <operator pos:line="7" pos:column="30">=<pos:position pos:line="7" pos:column="31"/></operator> <name pos:line="7" pos:column="32">R_SHORT<pos:position pos:line="7" pos:column="39"/></name></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="8" pos:column="9">else <if pos:line="8" pos:column="14">if <condition pos:line="8" pos:column="17">(<expr><call><name pos:line="8" pos:column="18">skip_prefix<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name pos:line="8" pos:column="30">arg<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="35">"lstrip="<pos:position pos:line="8" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="46">&amp;<pos:position pos:line="8" pos:column="51"/></operator><name pos:line="8" pos:column="47">arg<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call> <operator pos:line="8" pos:column="52">||<pos:position pos:line="8" pos:column="54"/></operator>
		 <call><name pos:line="9" pos:column="18">skip_prefix<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">arg<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="35">"strip="<pos:position pos:line="9" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="9" pos:column="45">&amp;<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="46">arg<pos:position pos:line="9" pos:column="49"/></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51"> <block pos:line="9" pos:column="52">{
		<expr_stmt><expr><name><name pos:line="10" pos:column="17">atom<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">-&gt;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="23">option<pos:position pos:line="10" pos:column="29"/></name></name> <operator pos:line="10" pos:column="30">=<pos:position pos:line="10" pos:column="31"/></operator> <name pos:line="10" pos:column="32">R_LSTRIP<pos:position pos:line="10" pos:column="40"/></name></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><call><name pos:line="11" pos:column="21">strtol_i<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">arg<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="35">10<pos:position pos:line="11" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="39">&amp;<pos:position pos:line="11" pos:column="44"/></operator><name><name pos:line="11" pos:column="40">atom<pos:position pos:line="11" pos:column="44"/></name><operator pos:line="11" pos:column="44">-&gt;<pos:position pos:line="11" pos:column="49"/></operator><name pos:line="11" pos:column="46">lstrip<pos:position pos:line="11" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="54"/></condition><then pos:line="11" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">die<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><call><name pos:line="12" pos:column="29">_<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><literal type="string" pos:line="12" pos:column="31">"Integer value expected refname:lstrip=%s"<pos:position pos:line="12" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="12" pos:column="76">arg<pos:position pos:line="12" pos:column="79"/></name></expr></argument>)<pos:position pos:line="12" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="81"/></expr_stmt></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if></elseif> <elseif pos:line="13" pos:column="11">else <if pos:line="13" pos:column="16">if <condition pos:line="13" pos:column="19">(<expr><call><name pos:line="13" pos:column="20">skip_prefix<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">arg<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="37">"rstrip="<pos:position pos:line="13" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="13" pos:column="48">&amp;<pos:position pos:line="13" pos:column="53"/></operator><name pos:line="13" pos:column="49">arg<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="54"/></condition><then pos:line="13" pos:column="54"> <block pos:line="13" pos:column="55">{
		<expr_stmt><expr><name><name pos:line="14" pos:column="17">atom<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">-&gt;<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="23">option<pos:position pos:line="14" pos:column="29"/></name></name> <operator pos:line="14" pos:column="30">=<pos:position pos:line="14" pos:column="31"/></operator> <name pos:line="14" pos:column="32">R_RSTRIP<pos:position pos:line="14" pos:column="40"/></name></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">strtol_i<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">arg<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="35">10<pos:position pos:line="15" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="39">&amp;<pos:position pos:line="15" pos:column="44"/></operator><name><name pos:line="15" pos:column="40">atom<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">-&gt;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="46">rstrip<pos:position pos:line="15" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="54"/></condition><then pos:line="15" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">die<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><call><name pos:line="16" pos:column="29">_<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><literal type="string" pos:line="16" pos:column="31">"Integer value expected refname:rstrip=%s"<pos:position pos:line="16" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="16" pos:column="76">arg<pos:position pos:line="16" pos:column="79"/></name></expr></argument>)<pos:position pos:line="16" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="81"/></expr_stmt></block></then></if>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if></elseif> <else pos:line="17" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">die<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><call><name pos:line="18" pos:column="21">_<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><literal type="string" pos:line="18" pos:column="23">"unrecognized %%(%s) argument: %s"<pos:position pos:line="18" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="18" pos:column="60">name<pos:position pos:line="18" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="66">arg<pos:position pos:line="18" pos:column="69"/></name></expr></argument>)<pos:position pos:line="18" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="71"/></expr_stmt></block></else></if>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
