<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5575_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">unpack_entry_data<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">off_t<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">offset<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">unsigned<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">long<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">size<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
			       <parameter><decl><type><name><name pos:line="2" pos:column="32">enum<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">object_type<pos:position pos:line="2" pos:column="48"/></name></name></type> <name pos:line="2" pos:column="49">type<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">unsigned<pos:position pos:line="2" pos:column="63"/></name> <name pos:line="2" pos:column="64">char<pos:position pos:line="2" pos:column="68"/></name> <modifier pos:line="2" pos:column="69">*<pos:position pos:line="2" pos:column="70"/></modifier></type><name pos:line="2" pos:column="70">sha1<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name></type> <name><name pos:line="4" pos:column="21">fixed_buf<pos:position pos:line="4" pos:column="30"/></name><index pos:line="4" pos:column="30">[<expr><literal type="number" pos:line="4" pos:column="31">8192<pos:position pos:line="4" pos:column="35"/></literal></expr>]<pos:position pos:line="4" pos:column="36"/></index></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">git_zstream<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">stream<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">void<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">buf<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">git_SHA_CTX<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">c<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name></type> <name><name pos:line="9" pos:column="14">hdr<pos:position pos:line="9" pos:column="17"/></name><index pos:line="9" pos:column="17">[<expr><literal type="number" pos:line="9" pos:column="18">32<pos:position pos:line="9" pos:column="20"/></literal></expr>]<pos:position pos:line="9" pos:column="21"/></index></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">hdrlen<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><call><name pos:line="12" pos:column="14">is_delta_type<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">type<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="34"/></condition><then pos:line="12" pos:column="34"> <block pos:line="12" pos:column="35">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">hdrlen<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <call><name pos:line="13" pos:column="26">xsnprintf<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">hdr<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="41">sizeof<argument_list pos:line="13" pos:column="47">(<argument><expr><name pos:line="13" pos:column="48">hdr<pos:position pos:line="13" pos:column="51"/></name></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="54">"%s %lu"<pos:position pos:line="13" pos:column="62"/></literal></expr></argument>, <argument><expr><name><typename pos:line="13" pos:column="64">typename<pos:position pos:line="13" pos:column="72"/></typename></name><operator pos:line="13" pos:column="72">(<pos:position pos:line="13" pos:column="73"/></operator><name pos:line="13" pos:column="73">type<pos:position pos:line="13" pos:column="77"/></name><operator pos:line="13" pos:column="77">)<pos:position pos:line="13" pos:column="78"/></operator></expr></argument>, <argument><expr><name pos:line="13" pos:column="80">size<pos:position pos:line="13" pos:column="84"/></name></expr></argument>)<pos:position pos:line="13" pos:column="85"/></argument_list></call> <operator pos:line="13" pos:column="86">+<pos:position pos:line="13" pos:column="87"/></operator> <literal type="number" pos:line="13" pos:column="88">1<pos:position pos:line="13" pos:column="89"/></literal></expr>;<pos:position pos:line="13" pos:column="90"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">git_SHA1_Init<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><operator pos:line="14" pos:column="31">&amp;<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="32">c<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">git_SHA1_Update<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><operator pos:line="15" pos:column="33">&amp;<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="34">c<pos:position pos:line="15" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="37">hdr<pos:position pos:line="15" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="42">hdrlen<pos:position pos:line="15" pos:column="48"/></name></expr></argument>)<pos:position pos:line="15" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then> <else pos:line="16" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">sha1<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="24">NULL<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt></block></else></if>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">type<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">==<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="21">OBJ_BLOB<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">&amp;&amp;<pos:position pos:line="18" pos:column="40"/></operator> <name pos:line="18" pos:column="33">size<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">&gt;<pos:position pos:line="18" pos:column="42"/></operator> <name pos:line="18" pos:column="40">big_file_threshold<pos:position pos:line="18" pos:column="58"/></name></expr>)<pos:position pos:line="18" pos:column="59"/></condition><then pos:line="18" pos:column="59">
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">buf<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="23">fixed_buf<pos:position pos:line="19" pos:column="32"/></name></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt></block></then>
	<else pos:line="20" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">buf<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">xmallocz<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">size<pos:position pos:line="21" pos:column="36"/></name></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">memset<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><operator pos:line="23" pos:column="16">&amp;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="17">stream<pos:position pos:line="23" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="25">0<pos:position pos:line="23" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="28">sizeof<argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">stream<pos:position pos:line="23" pos:column="41"/></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">git_inflate_init<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><operator pos:line="24" pos:column="26">&amp;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="27">stream<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="25" pos:column="9">stream<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">.<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="16">next_out<pos:position pos:line="25" pos:column="24"/></name></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <name pos:line="25" pos:column="27">buf<pos:position pos:line="25" pos:column="30"/></name></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="26" pos:column="9">stream<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">.<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">avail_out<pos:position pos:line="26" pos:column="25"/></name></name> <operator pos:line="26" pos:column="26">=<pos:position pos:line="26" pos:column="27"/></operator> <ternary><condition><expr><name pos:line="26" pos:column="28">buf<pos:position pos:line="26" pos:column="31"/></name> <operator pos:line="26" pos:column="32">==<pos:position pos:line="26" pos:column="34"/></operator> <name pos:line="26" pos:column="35">fixed_buf<pos:position pos:line="26" pos:column="44"/></name></expr> ?<pos:position pos:line="26" pos:column="46"/></condition><then pos:line="26" pos:column="46"> <expr><sizeof pos:line="26" pos:column="47">sizeof<argument_list pos:line="26" pos:column="53">(<argument><expr><name pos:line="26" pos:column="54">fixed_buf<pos:position pos:line="26" pos:column="63"/></name></expr></argument>)<pos:position pos:line="26" pos:column="64"/></argument_list></sizeof></expr> <pos:position pos:line="26" pos:column="65"/></then><else pos:line="26" pos:column="65">: <expr><name pos:line="26" pos:column="67">size<pos:position pos:line="26" pos:column="71"/></name></expr></else></ternary></expr>;<pos:position pos:line="26" pos:column="72"/></expr_stmt>

	<do pos:line="28" pos:column="9">do <block pos:line="28" pos:column="12">{
		<decl_stmt><decl><type><name pos:line="29" pos:column="17">unsigned<pos:position pos:line="29" pos:column="25"/></name> <name pos:line="29" pos:column="26">char<pos:position pos:line="29" pos:column="30"/></name> <modifier pos:line="29" pos:column="31">*<pos:position pos:line="29" pos:column="32"/></modifier></type><name pos:line="29" pos:column="32">last_out<pos:position pos:line="29" pos:column="40"/></name> <init pos:line="29" pos:column="41">= <expr><name><name pos:line="29" pos:column="43">stream<pos:position pos:line="29" pos:column="49"/></name><operator pos:line="29" pos:column="49">.<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="50">next_out<pos:position pos:line="29" pos:column="58"/></name></name></expr></init></decl>;<pos:position pos:line="29" pos:column="59"/></decl_stmt>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">stream<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">.<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="24">next_in<pos:position pos:line="30" pos:column="31"/></name></name> <operator pos:line="30" pos:column="32">=<pos:position pos:line="30" pos:column="33"/></operator> <call><name pos:line="30" pos:column="34">fill<pos:position pos:line="30" pos:column="38"/></name><argument_list pos:line="30" pos:column="38">(<argument><expr><literal type="number" pos:line="30" pos:column="39">1<pos:position pos:line="30" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">stream<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">.<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="24">avail_in<pos:position pos:line="31" pos:column="32"/></name></name> <operator pos:line="31" pos:column="33">=<pos:position pos:line="31" pos:column="34"/></operator> <name pos:line="31" pos:column="35">input_len<pos:position pos:line="31" pos:column="44"/></name></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">status<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <call><name pos:line="32" pos:column="26">git_inflate<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><operator pos:line="32" pos:column="38">&amp;<pos:position pos:line="32" pos:column="43"/></operator><name pos:line="32" pos:column="39">stream<pos:position pos:line="32" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="47">0<pos:position pos:line="32" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">use<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">input_len<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">-<pos:position pos:line="33" pos:column="32"/></operator> <name><name pos:line="33" pos:column="33">stream<pos:position pos:line="33" pos:column="39"/></name><operator pos:line="33" pos:column="39">.<pos:position pos:line="33" pos:column="40"/></operator><name pos:line="33" pos:column="40">avail_in<pos:position pos:line="33" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="50"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">sha1<pos:position pos:line="34" pos:column="25"/></name></expr>)<pos:position pos:line="34" pos:column="26"/></condition><then pos:line="34" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="25">git_SHA1_Update<pos:position pos:line="35" pos:column="40"/></name><argument_list pos:line="35" pos:column="40">(<argument><expr><operator pos:line="35" pos:column="41">&amp;<pos:position pos:line="35" pos:column="46"/></operator><name pos:line="35" pos:column="42">c<pos:position pos:line="35" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="45">last_out<pos:position pos:line="35" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="55">stream<pos:position pos:line="35" pos:column="61"/></name><operator pos:line="35" pos:column="61">.<pos:position pos:line="35" pos:column="62"/></operator><name pos:line="35" pos:column="62">next_out<pos:position pos:line="35" pos:column="70"/></name></name> <operator pos:line="35" pos:column="71">-<pos:position pos:line="35" pos:column="72"/></operator> <name pos:line="35" pos:column="73">last_out<pos:position pos:line="35" pos:column="81"/></name></expr></argument>)<pos:position pos:line="35" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="83"/></expr_stmt></block></then></if>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">buf<pos:position pos:line="36" pos:column="24"/></name> <operator pos:line="36" pos:column="25">==<pos:position pos:line="36" pos:column="27"/></operator> <name pos:line="36" pos:column="28">fixed_buf<pos:position pos:line="36" pos:column="37"/></name></expr>)<pos:position pos:line="36" pos:column="38"/></condition><then pos:line="36" pos:column="38"> <block pos:line="36" pos:column="39">{
			<expr_stmt><expr><name><name pos:line="37" pos:column="25">stream<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">.<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="32">next_out<pos:position pos:line="37" pos:column="40"/></name></name> <operator pos:line="37" pos:column="41">=<pos:position pos:line="37" pos:column="42"/></operator> <name pos:line="37" pos:column="43">buf<pos:position pos:line="37" pos:column="46"/></name></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="38" pos:column="25">stream<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">.<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="32">avail_out<pos:position pos:line="38" pos:column="41"/></name></name> <operator pos:line="38" pos:column="42">=<pos:position pos:line="38" pos:column="43"/></operator> <sizeof pos:line="38" pos:column="44">sizeof<argument_list pos:line="38" pos:column="50">(<argument><expr><name pos:line="38" pos:column="51">fixed_buf<pos:position pos:line="38" pos:column="60"/></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></sizeof></expr>;<pos:position pos:line="38" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>
	}<pos:position pos:line="40" pos:column="10"/></block> while <condition pos:line="40" pos:column="17">(<expr><name pos:line="40" pos:column="18">status<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">==<pos:position pos:line="40" pos:column="27"/></operator> <name pos:line="40" pos:column="28">Z_OK<pos:position pos:line="40" pos:column="32"/></name></expr>)<pos:position pos:line="40" pos:column="33"/></condition>;<pos:position pos:line="40" pos:column="34"/></do>
	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name><name pos:line="41" pos:column="13">stream<pos:position pos:line="41" pos:column="19"/></name><operator pos:line="41" pos:column="19">.<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="20">total_out<pos:position pos:line="41" pos:column="29"/></name></name> <operator pos:line="41" pos:column="30">!=<pos:position pos:line="41" pos:column="32"/></operator> <name pos:line="41" pos:column="33">size<pos:position pos:line="41" pos:column="37"/></name> <operator pos:line="41" pos:column="38">||<pos:position pos:line="41" pos:column="40"/></operator> <name pos:line="41" pos:column="41">status<pos:position pos:line="41" pos:column="47"/></name> <operator pos:line="41" pos:column="48">!=<pos:position pos:line="41" pos:column="50"/></operator> <name pos:line="41" pos:column="51">Z_STREAM_END<pos:position pos:line="41" pos:column="63"/></name></expr>)<pos:position pos:line="41" pos:column="64"/></condition><then pos:line="41" pos:column="64">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="17">bad_object<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">offset<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="36">_<pos:position pos:line="42" pos:column="37"/></name><argument_list pos:line="42" pos:column="37">(<argument><expr><literal type="string" pos:line="42" pos:column="38">"inflate returned %d"<pos:position pos:line="42" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="42" pos:column="62">status<pos:position pos:line="42" pos:column="68"/></name></expr></argument>)<pos:position pos:line="42" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="70"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">git_inflate_end<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><operator pos:line="43" pos:column="25">&amp;<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="26">stream<pos:position pos:line="43" pos:column="32"/></name></expr></argument>)<pos:position pos:line="43" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">sha1<pos:position pos:line="44" pos:column="17"/></name></expr>)<pos:position pos:line="44" pos:column="18"/></condition><then pos:line="44" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">git_SHA1_Final<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><name pos:line="45" pos:column="32">sha1<pos:position pos:line="45" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="38">&amp;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="39">c<pos:position pos:line="45" pos:column="40"/></name></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="42"/></expr_stmt></block></then></if>
	<return pos:line="46" pos:column="9">return <expr><ternary><condition><expr><name pos:line="46" pos:column="16">buf<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">==<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">fixed_buf<pos:position pos:line="46" pos:column="32"/></name></expr> ?<pos:position pos:line="46" pos:column="34"/></condition><then pos:line="46" pos:column="34"> <expr><name pos:line="46" pos:column="35">NULL<pos:position pos:line="46" pos:column="39"/></name></expr> <pos:position pos:line="46" pos:column="40"/></then><else pos:line="46" pos:column="40">: <expr><name pos:line="46" pos:column="42">buf<pos:position pos:line="46" pos:column="45"/></name></expr></else></ternary></expr>;<pos:position pos:line="46" pos:column="46"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
