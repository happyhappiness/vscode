<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3164_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">compile_grep_patterns_real<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">grep_opt<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">opt<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">grep_pat<pos:position pos:line="3" pos:column="24"/></name></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">p<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">grep_expr<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">header_expr<pos:position pos:line="4" pos:column="38"/></name> <init pos:line="4" pos:column="39">= <expr><call><name pos:line="4" pos:column="41">prep_header_patterns<pos:position pos:line="4" pos:column="61"/></name><argument_list pos:line="4" pos:column="61">(<argument><expr><name pos:line="4" pos:column="62">opt<pos:position pos:line="4" pos:column="65"/></name></expr></argument>)<pos:position pos:line="4" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="67"/></decl_stmt>

	<for pos:line="6" pos:column="9">for <control pos:line="6" pos:column="13">(<init><expr><name pos:line="6" pos:column="14">p<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">=<pos:position pos:line="6" pos:column="17"/></operator> <name><name pos:line="6" pos:column="18">opt<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">-&gt;<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="23">pattern_list<pos:position pos:line="6" pos:column="35"/></name></name></expr>;<pos:position pos:line="6" pos:column="36"/></init> <condition><expr><name pos:line="6" pos:column="37">p<pos:position pos:line="6" pos:column="38"/></name></expr>;<pos:position pos:line="6" pos:column="39"/></condition> <incr><expr><name pos:line="6" pos:column="40">p<pos:position pos:line="6" pos:column="41"/></name> <operator pos:line="6" pos:column="42">=<pos:position pos:line="6" pos:column="43"/></operator> <name><name pos:line="6" pos:column="44">p<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">-&gt;<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="47">next<pos:position pos:line="6" pos:column="51"/></name></name></expr></incr>)<pos:position pos:line="6" pos:column="52"/></control> <block pos:line="6" pos:column="53">{
		<switch pos:line="7" pos:column="17">switch <condition pos:line="7" pos:column="24">(<expr><name><name pos:line="7" pos:column="25">p<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">token<pos:position pos:line="7" pos:column="33"/></name></name></expr>)<pos:position pos:line="7" pos:column="34"/></condition> <block pos:line="7" pos:column="35">{
		<case pos:line="8" pos:column="17">case <expr><name pos:line="8" pos:column="22">GREP_PATTERN<pos:position pos:line="8" pos:column="34"/></name></expr>:<pos:position pos:line="8" pos:column="35"/></case> <comment type="block" pos:line="8" pos:column="36">/* atom */</comment>
		<case pos:line="9" pos:column="17">case <expr><name pos:line="9" pos:column="22">GREP_PATTERN_HEAD<pos:position pos:line="9" pos:column="39"/></name></expr>:<pos:position pos:line="9" pos:column="40"/></case>
		<case pos:line="10" pos:column="17">case <expr><name pos:line="10" pos:column="22">GREP_PATTERN_BODY<pos:position pos:line="10" pos:column="39"/></name></expr>:<pos:position pos:line="10" pos:column="40"/></case>
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">compile_regexp<pos:position pos:line="11" pos:column="39"/></name><argument_list pos:line="11" pos:column="39">(<argument><expr><name pos:line="11" pos:column="40">p<pos:position pos:line="11" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="43">opt<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="48"/></expr_stmt>
			<break pos:line="12" pos:column="25">break;<pos:position pos:line="12" pos:column="31"/></break>
		<default pos:line="13" pos:column="17">default:<pos:position pos:line="13" pos:column="25"/></default>
			<expr_stmt><expr><name><name pos:line="14" pos:column="25">opt<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">-&gt;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="30">extended<pos:position pos:line="14" pos:column="38"/></name></name> <operator pos:line="14" pos:column="39">=<pos:position pos:line="14" pos:column="40"/></operator> <literal type="number" pos:line="14" pos:column="41">1<pos:position pos:line="14" pos:column="42"/></literal></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
			<break pos:line="15" pos:column="25">break;<pos:position pos:line="15" pos:column="31"/></break>
		}<pos:position pos:line="16" pos:column="18"/></block></switch>
	}<pos:position pos:line="17" pos:column="10"/></block></for>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name><name pos:line="19" pos:column="13">opt<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">all_match<pos:position pos:line="19" pos:column="27"/></name></name> <operator pos:line="19" pos:column="28">||<pos:position pos:line="19" pos:column="30"/></operator> <name pos:line="19" pos:column="31">header_expr<pos:position pos:line="19" pos:column="42"/></name></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="20" pos:column="17">opt<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">extended<pos:position pos:line="20" pos:column="30"/></name></name> <operator pos:line="20" pos:column="31">=<pos:position pos:line="20" pos:column="32"/></operator> <literal type="number" pos:line="20" pos:column="33">1<pos:position pos:line="20" pos:column="34"/></literal></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt></block></then>
	<elseif pos:line="21" pos:column="9">else <if pos:line="21" pos:column="14">if <condition pos:line="21" pos:column="17">(<expr><operator pos:line="21" pos:column="18">!<pos:position pos:line="21" pos:column="19"/></operator><name><name pos:line="21" pos:column="19">opt<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">-&gt;<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="24">extended<pos:position pos:line="21" pos:column="32"/></name></name> <operator pos:line="21" pos:column="33">&amp;&amp;<pos:position pos:line="21" pos:column="43"/></operator> <operator pos:line="21" pos:column="36">!<pos:position pos:line="21" pos:column="37"/></operator><name><name pos:line="21" pos:column="37">opt<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">-&gt;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="42">debug<pos:position pos:line="21" pos:column="47"/></name></name></expr>)<pos:position pos:line="21" pos:column="48"/></condition><then pos:line="21" pos:column="48">
		<block type="pseudo"><return pos:line="22" pos:column="17">return;<pos:position pos:line="22" pos:column="24"/></return></block></then></if></elseif></if>

	<expr_stmt><expr><name pos:line="24" pos:column="9">p<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">=<pos:position pos:line="24" pos:column="12"/></operator> <name><name pos:line="24" pos:column="13">opt<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">-&gt;<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="18">pattern_list<pos:position pos:line="24" pos:column="30"/></name></name></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">p<pos:position pos:line="25" pos:column="14"/></name></expr>)<pos:position pos:line="25" pos:column="15"/></condition><then pos:line="25" pos:column="15">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="17">opt<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">-&gt;<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="22">pattern_expression<pos:position pos:line="26" pos:column="40"/></name></name> <operator pos:line="26" pos:column="41">=<pos:position pos:line="26" pos:column="42"/></operator> <call><name pos:line="26" pos:column="43">compile_pattern_expr<pos:position pos:line="26" pos:column="63"/></name><argument_list pos:line="26" pos:column="63">(<argument><expr><operator pos:line="26" pos:column="64">&amp;<pos:position pos:line="26" pos:column="69"/></operator><name pos:line="26" pos:column="65">p<pos:position pos:line="26" pos:column="66"/></name></expr></argument>)<pos:position pos:line="26" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="68"/></expr_stmt></block></then></if>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">p<pos:position pos:line="27" pos:column="14"/></name></expr>)<pos:position pos:line="27" pos:column="15"/></condition><then pos:line="27" pos:column="15">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">die<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><literal type="string" pos:line="28" pos:column="21">"incomplete pattern expression: %s"<pos:position pos:line="28" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="58">p<pos:position pos:line="28" pos:column="59"/></name><operator pos:line="28" pos:column="59">-&gt;<pos:position pos:line="28" pos:column="64"/></operator><name pos:line="28" pos:column="61">pattern<pos:position pos:line="28" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="70"/></expr_stmt></block></then></if>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">header_expr<pos:position pos:line="30" pos:column="25"/></name></expr>)<pos:position pos:line="30" pos:column="26"/></condition><then pos:line="30" pos:column="26">
		<block type="pseudo"><return pos:line="31" pos:column="17">return;<pos:position pos:line="31" pos:column="24"/></return></block></then></if>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><name><name pos:line="33" pos:column="14">opt<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">pattern_expression<pos:position pos:line="33" pos:column="37"/></name></name></expr>)<pos:position pos:line="33" pos:column="38"/></condition><then pos:line="33" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="17">opt<pos:position pos:line="34" pos:column="20"/></name><operator pos:line="34" pos:column="20">-&gt;<pos:position pos:line="34" pos:column="25"/></operator><name pos:line="34" pos:column="22">pattern_expression<pos:position pos:line="34" pos:column="40"/></name></name> <operator pos:line="34" pos:column="41">=<pos:position pos:line="34" pos:column="42"/></operator> <name pos:line="34" pos:column="43">header_expr<pos:position pos:line="34" pos:column="54"/></name></expr>;<pos:position pos:line="34" pos:column="55"/></expr_stmt></block></then>
	<elseif pos:line="35" pos:column="9">else <if pos:line="35" pos:column="14">if <condition pos:line="35" pos:column="17">(<expr><name><name pos:line="35" pos:column="18">opt<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">-&gt;<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="23">all_match<pos:position pos:line="35" pos:column="32"/></name></name></expr>)<pos:position pos:line="35" pos:column="33"/></condition><then pos:line="35" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="36" pos:column="17">opt<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">-&gt;<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="22">pattern_expression<pos:position pos:line="36" pos:column="40"/></name></name> <operator pos:line="36" pos:column="41">=<pos:position pos:line="36" pos:column="42"/></operator> <call><name pos:line="36" pos:column="43">grep_splice_or<pos:position pos:line="36" pos:column="57"/></name><argument_list pos:line="36" pos:column="57">(<argument><expr><name pos:line="36" pos:column="58">header_expr<pos:position pos:line="36" pos:column="69"/></name></expr></argument>,
							 <argument><expr><name><name pos:line="37" pos:column="58">opt<pos:position pos:line="37" pos:column="61"/></name><operator pos:line="37" pos:column="61">-&gt;<pos:position pos:line="37" pos:column="66"/></operator><name pos:line="37" pos:column="63">pattern_expression<pos:position pos:line="37" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="83"/></expr_stmt></block></then></if></elseif>
	<else pos:line="38" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="39" pos:column="17">opt<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">-&gt;<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="22">pattern_expression<pos:position pos:line="39" pos:column="40"/></name></name> <operator pos:line="39" pos:column="41">=<pos:position pos:line="39" pos:column="42"/></operator> <call><name pos:line="39" pos:column="43">grep_or_expr<pos:position pos:line="39" pos:column="55"/></name><argument_list pos:line="39" pos:column="55">(<argument><expr><name><name pos:line="39" pos:column="56">opt<pos:position pos:line="39" pos:column="59"/></name><operator pos:line="39" pos:column="59">-&gt;<pos:position pos:line="39" pos:column="64"/></operator><name pos:line="39" pos:column="61">pattern_expression<pos:position pos:line="39" pos:column="79"/></name></name></expr></argument>,
						       <argument><expr><name pos:line="40" pos:column="56">header_expr<pos:position pos:line="40" pos:column="67"/></name></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="69"/></expr_stmt></block></else></if>
	<expr_stmt><expr><name><name pos:line="41" pos:column="9">opt<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">-&gt;<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="14">all_match<pos:position pos:line="41" pos:column="23"/></name></name> <operator pos:line="41" pos:column="24">=<pos:position pos:line="41" pos:column="25"/></operator> <literal type="number" pos:line="41" pos:column="26">1<pos:position pos:line="41" pos:column="27"/></literal></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
