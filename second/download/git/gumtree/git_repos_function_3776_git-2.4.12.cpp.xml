<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3776_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">diff_tree_local<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">notes_merge_options<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">o<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
			    <parameter><decl><type><name><name pos:line="2" pos:column="29">struct<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">notes_merge_pair<pos:position pos:line="2" pos:column="52"/></name></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">changes<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="63">int<pos:position pos:line="2" pos:column="66"/></name></type> <name pos:line="2" pos:column="67">len<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="3" pos:column="29">const<pos:position pos:line="3" pos:column="34"/></specifier> <name pos:line="3" pos:column="35">unsigned<pos:position pos:line="3" pos:column="43"/></name> <name pos:line="3" pos:column="44">char<pos:position pos:line="3" pos:column="48"/></name> <modifier pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></modifier></type><name pos:line="3" pos:column="50">base<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="4" pos:column="29">const<pos:position pos:line="4" pos:column="34"/></specifier> <name pos:line="4" pos:column="35">unsigned<pos:position pos:line="4" pos:column="43"/></name> <name pos:line="4" pos:column="44">char<pos:position pos:line="4" pos:column="48"/></name> <modifier pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></modifier></type><name pos:line="4" pos:column="50">local<pos:position pos:line="4" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="56"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">diff_options<pos:position pos:line="6" pos:column="28"/></name></name></type> <name pos:line="6" pos:column="29">opt<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">i<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">trace_printf<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><literal type="string" pos:line="9" pos:column="22">"\tdiff_tree_local(len = %i, base = %.7s, local = %.7s)\n"<pos:position pos:line="9" pos:column="80"/></literal></expr></argument>,
	       <argument><expr><name pos:line="10" pos:column="16">len<pos:position pos:line="10" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="21">sha1_to_hex<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">base<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="40">sha1_to_hex<pos:position pos:line="10" pos:column="51"/></name><argument_list pos:line="10" pos:column="51">(<argument><expr><name pos:line="10" pos:column="52">local<pos:position pos:line="10" pos:column="57"/></name></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="60"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">diff_setup<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><operator pos:line="12" pos:column="20">&amp;<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="21">opt<pos:position pos:line="12" pos:column="24"/></name></expr></argument>)<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">DIFF_OPT_SET<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><operator pos:line="13" pos:column="22">&amp;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="23">opt<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="28">RECURSIVE<pos:position pos:line="13" pos:column="37"/></name></expr></argument>)<pos:position pos:line="13" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">opt<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">.<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">output_format<pos:position pos:line="14" pos:column="26"/></name></name> <operator pos:line="14" pos:column="27">=<pos:position pos:line="14" pos:column="28"/></operator> <name pos:line="14" pos:column="29">DIFF_FORMAT_NO_OUTPUT<pos:position pos:line="14" pos:column="50"/></name></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">diff_setup_done<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><operator pos:line="15" pos:column="25">&amp;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="26">opt<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">diff_tree_sha1<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">base<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="30">local<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="37">""<pos:position pos:line="16" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="41">&amp;<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="42">opt<pos:position pos:line="16" pos:column="45"/></name></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">diffcore_std<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><operator pos:line="17" pos:column="22">&amp;<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="23">opt<pos:position pos:line="17" pos:column="26"/></name></expr></argument>)<pos:position pos:line="17" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>

	<for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">(<init><expr><name pos:line="19" pos:column="14">i<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <literal type="number" pos:line="19" pos:column="18">0<pos:position pos:line="19" pos:column="19"/></literal></expr>;<pos:position pos:line="19" pos:column="20"/></init> <condition><expr><name pos:line="19" pos:column="21">i<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">&lt;<pos:position pos:line="19" pos:column="27"/></operator> <name><name pos:line="19" pos:column="25">diff_queued_diff<pos:position pos:line="19" pos:column="41"/></name><operator pos:line="19" pos:column="41">.<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="42">nr<pos:position pos:line="19" pos:column="44"/></name></name></expr>;<pos:position pos:line="19" pos:column="45"/></condition> <incr><expr><name pos:line="19" pos:column="46">i<pos:position pos:line="19" pos:column="47"/></name><operator pos:line="19" pos:column="47">++<pos:position pos:line="19" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="19" pos:column="50"/></control> <block pos:line="19" pos:column="51">{
		<decl_stmt><decl><type><name><name pos:line="20" pos:column="17">struct<pos:position pos:line="20" pos:column="23"/></name> <name pos:line="20" pos:column="24">diff_filepair<pos:position pos:line="20" pos:column="37"/></name></name> <modifier pos:line="20" pos:column="38">*<pos:position pos:line="20" pos:column="39"/></modifier></type><name pos:line="20" pos:column="39">p<pos:position pos:line="20" pos:column="40"/></name> <init pos:line="20" pos:column="41">= <expr><name><name pos:line="20" pos:column="43">diff_queued_diff<pos:position pos:line="20" pos:column="59"/></name><operator pos:line="20" pos:column="59">.<pos:position pos:line="20" pos:column="60"/></operator><name pos:line="20" pos:column="60">queue<pos:position pos:line="20" pos:column="65"/></name><index pos:line="20" pos:column="65">[<expr><name pos:line="20" pos:column="66">i<pos:position pos:line="20" pos:column="67"/></name></expr>]<pos:position pos:line="20" pos:column="68"/></index></name></expr></init></decl>;<pos:position pos:line="20" pos:column="69"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="21" pos:column="17">struct<pos:position pos:line="21" pos:column="23"/></name> <name pos:line="21" pos:column="24">notes_merge_pair<pos:position pos:line="21" pos:column="40"/></name></name> <modifier pos:line="21" pos:column="41">*<pos:position pos:line="21" pos:column="42"/></modifier></type><name pos:line="21" pos:column="42">mp<pos:position pos:line="21" pos:column="44"/></name></decl>;<pos:position pos:line="21" pos:column="45"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">int<pos:position pos:line="22" pos:column="20"/></name></type> <name pos:line="22" pos:column="21">match<pos:position pos:line="22" pos:column="26"/></name></decl>;<pos:position pos:line="22" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">unsigned<pos:position pos:line="23" pos:column="25"/></name> <name pos:line="23" pos:column="26">char<pos:position pos:line="23" pos:column="30"/></name></type> <name><name pos:line="23" pos:column="31">obj<pos:position pos:line="23" pos:column="34"/></name><index pos:line="23" pos:column="34">[<expr><literal type="number" pos:line="23" pos:column="35">20<pos:position pos:line="23" pos:column="37"/></literal></expr>]<pos:position pos:line="23" pos:column="38"/></index></name></decl>;<pos:position pos:line="23" pos:column="39"/></decl_stmt>

		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">verify_notes_filepair<pos:position pos:line="25" pos:column="42"/></name><argument_list pos:line="25" pos:column="42">(<argument><expr><name pos:line="25" pos:column="43">p<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">obj<pos:position pos:line="25" pos:column="49"/></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="51"/></condition><then pos:line="25" pos:column="51"> <block pos:line="25" pos:column="52">{
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">trace_printf<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><literal type="string" pos:line="26" pos:column="38">"\t\tCannot merge entry '%s' (%c): "<pos:position pos:line="26" pos:column="74"/></literal>
			       <literal type="string" pos:line="27" pos:column="32">"%.7s -&gt; %.7s. Skipping!\n"<pos:position pos:line="27" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="61">p<pos:position pos:line="27" pos:column="62"/></name><operator pos:line="27" pos:column="62">-&gt;<pos:position pos:line="27" pos:column="67"/></operator><name pos:line="27" pos:column="64">one<pos:position pos:line="27" pos:column="67"/></name><operator pos:line="27" pos:column="67">-&gt;<pos:position pos:line="27" pos:column="72"/></operator><name pos:line="27" pos:column="69">path<pos:position pos:line="27" pos:column="73"/></name></name></expr></argument>,
			       <argument><expr><name><name pos:line="28" pos:column="32">p<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">-&gt;<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="35">status<pos:position pos:line="28" pos:column="41"/></name></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="43">sha1_to_hex<pos:position pos:line="28" pos:column="54"/></name><argument_list pos:line="28" pos:column="54">(<argument><expr><name><name pos:line="28" pos:column="55">p<pos:position pos:line="28" pos:column="56"/></name><operator pos:line="28" pos:column="56">-&gt;<pos:position pos:line="28" pos:column="61"/></operator><name pos:line="28" pos:column="58">one<pos:position pos:line="28" pos:column="61"/></name><operator pos:line="28" pos:column="61">-&gt;<pos:position pos:line="28" pos:column="66"/></operator><name pos:line="28" pos:column="63">sha1<pos:position pos:line="28" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="68"/></argument_list></call></expr></argument>,
			       <argument><expr><call><name pos:line="29" pos:column="32">sha1_to_hex<pos:position pos:line="29" pos:column="43"/></name><argument_list pos:line="29" pos:column="43">(<argument><expr><name><name pos:line="29" pos:column="44">p<pos:position pos:line="29" pos:column="45"/></name><operator pos:line="29" pos:column="45">-&gt;<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="47">two<pos:position pos:line="29" pos:column="50"/></name><operator pos:line="29" pos:column="50">-&gt;<pos:position pos:line="29" pos:column="55"/></operator><name pos:line="29" pos:column="52">sha1<pos:position pos:line="29" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt>
			<continue pos:line="30" pos:column="25">continue;<pos:position pos:line="30" pos:column="34"/></continue>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="32" pos:column="17">mp<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <call><name pos:line="32" pos:column="22">find_notes_merge_pair_pos<pos:position pos:line="32" pos:column="47"/></name><argument_list pos:line="32" pos:column="47">(<argument><expr><name pos:line="32" pos:column="48">changes<pos:position pos:line="32" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="57">len<pos:position pos:line="32" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="62">obj<pos:position pos:line="32" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="67">0<pos:position pos:line="32" pos:column="68"/></literal></expr></argument>, <argument><expr><operator pos:line="32" pos:column="70">&amp;<pos:position pos:line="32" pos:column="75"/></operator><name pos:line="32" pos:column="71">match<pos:position pos:line="32" pos:column="76"/></name></expr></argument>)<pos:position pos:line="32" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="78"/></expr_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><operator pos:line="33" pos:column="21">!<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">match<pos:position pos:line="33" pos:column="27"/></name></expr>)<pos:position pos:line="33" pos:column="28"/></condition><then pos:line="33" pos:column="28"> <block pos:line="33" pos:column="29">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">trace_printf<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><literal type="string" pos:line="34" pos:column="38">"\t\tIgnoring local-only change for %s: "<pos:position pos:line="34" pos:column="79"/></literal>
			       <literal type="string" pos:line="35" pos:column="32">"%.7s -&gt; %.7s\n"<pos:position pos:line="35" pos:column="51"/></literal></expr></argument>, <argument><expr><call><name pos:line="35" pos:column="50">sha1_to_hex<pos:position pos:line="35" pos:column="61"/></name><argument_list pos:line="35" pos:column="61">(<argument><expr><name pos:line="35" pos:column="62">obj<pos:position pos:line="35" pos:column="65"/></name></expr></argument>)<pos:position pos:line="35" pos:column="66"/></argument_list></call></expr></argument>,
			       <argument><expr><call><name pos:line="36" pos:column="32">sha1_to_hex<pos:position pos:line="36" pos:column="43"/></name><argument_list pos:line="36" pos:column="43">(<argument><expr><name><name pos:line="36" pos:column="44">p<pos:position pos:line="36" pos:column="45"/></name><operator pos:line="36" pos:column="45">-&gt;<pos:position pos:line="36" pos:column="50"/></operator><name pos:line="36" pos:column="47">one<pos:position pos:line="36" pos:column="50"/></name><operator pos:line="36" pos:column="50">-&gt;<pos:position pos:line="36" pos:column="55"/></operator><name pos:line="36" pos:column="52">sha1<pos:position pos:line="36" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="57"/></argument_list></call></expr></argument>,
			       <argument><expr><call><name pos:line="37" pos:column="32">sha1_to_hex<pos:position pos:line="37" pos:column="43"/></name><argument_list pos:line="37" pos:column="43">(<argument><expr><name><name pos:line="37" pos:column="44">p<pos:position pos:line="37" pos:column="45"/></name><operator pos:line="37" pos:column="45">-&gt;<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="47">two<pos:position pos:line="37" pos:column="50"/></name><operator pos:line="37" pos:column="50">-&gt;<pos:position pos:line="37" pos:column="55"/></operator><name pos:line="37" pos:column="52">sha1<pos:position pos:line="37" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="59"/></expr_stmt>
			<continue pos:line="38" pos:column="25">continue;<pos:position pos:line="38" pos:column="34"/></continue>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="41" pos:column="17">assert<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><operator pos:line="41" pos:column="24">!<pos:position pos:line="41" pos:column="25"/></operator><call><name pos:line="41" pos:column="25">hashcmp<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><name><name pos:line="41" pos:column="33">mp<pos:position pos:line="41" pos:column="35"/></name><operator pos:line="41" pos:column="35">-&gt;<pos:position pos:line="41" pos:column="40"/></operator><name pos:line="41" pos:column="37">obj<pos:position pos:line="41" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="42">obj<pos:position pos:line="41" pos:column="45"/></name></expr></argument>)<pos:position pos:line="41" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><call><name pos:line="42" pos:column="21">is_null_sha1<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">(<argument><expr><name><name pos:line="42" pos:column="34">p<pos:position pos:line="42" pos:column="35"/></name><operator pos:line="42" pos:column="35">-&gt;<pos:position pos:line="42" pos:column="40"/></operator><name pos:line="42" pos:column="37">two<pos:position pos:line="42" pos:column="40"/></name><operator pos:line="42" pos:column="40">-&gt;<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="42">sha1<pos:position pos:line="42" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="48"/></condition><then pos:line="42" pos:column="48"> <block pos:line="42" pos:column="49">{ <comment type="block" pos:line="42" pos:column="51">/* deletion */</comment>
			<comment type="block" pos:line="43" pos:column="25">/*
			 * Either this is a true deletion (1), or it is part
			 * of an A/D pair (2), or D/A pair (3):
			 *
			 * (1) mp-&gt;local is uninitialized; set it to null_sha1
			 * (2) mp-&gt;local is not uninitialized; don't touch it
			 * (3) mp-&gt;local is uninitialized; set it to null_sha1
			 *     (will be overwritten by following addition)
			 */</comment>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><operator pos:line="52" pos:column="29">!<pos:position pos:line="52" pos:column="30"/></operator><call><name pos:line="52" pos:column="30">hashcmp<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><name><name pos:line="52" pos:column="38">mp<pos:position pos:line="52" pos:column="40"/></name><operator pos:line="52" pos:column="40">-&gt;<pos:position pos:line="52" pos:column="45"/></operator><name pos:line="52" pos:column="42">local<pos:position pos:line="52" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="49">uninitialized<pos:position pos:line="52" pos:column="62"/></name></expr></argument>)<pos:position pos:line="52" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="64"/></condition><then pos:line="52" pos:column="64">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="33">hashclr<pos:position pos:line="53" pos:column="40"/></name><argument_list pos:line="53" pos:column="40">(<argument><expr><name><name pos:line="53" pos:column="41">mp<pos:position pos:line="53" pos:column="43"/></name><operator pos:line="53" pos:column="43">-&gt;<pos:position pos:line="53" pos:column="48"/></operator><name pos:line="53" pos:column="45">local<pos:position pos:line="53" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="52"/></expr_stmt></block></then></if>
		}<pos:position pos:line="54" pos:column="18"/></block></then> <elseif pos:line="54" pos:column="19">else <if pos:line="54" pos:column="24">if <condition pos:line="54" pos:column="27">(<expr><call><name pos:line="54" pos:column="28">is_null_sha1<pos:position pos:line="54" pos:column="40"/></name><argument_list pos:line="54" pos:column="40">(<argument><expr><name><name pos:line="54" pos:column="41">p<pos:position pos:line="54" pos:column="42"/></name><operator pos:line="54" pos:column="42">-&gt;<pos:position pos:line="54" pos:column="47"/></operator><name pos:line="54" pos:column="44">one<pos:position pos:line="54" pos:column="47"/></name><operator pos:line="54" pos:column="47">-&gt;<pos:position pos:line="54" pos:column="52"/></operator><name pos:line="54" pos:column="49">sha1<pos:position pos:line="54" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="55"/></condition><then pos:line="54" pos:column="55"> <block pos:line="54" pos:column="56">{ <comment type="block" pos:line="54" pos:column="58">/* addition */</comment>
			<comment type="block" pos:line="55" pos:column="25">/*
			 * Either this is a true addition (1), or it is part
			 * of an A/D pair (2), or D/A pair (3):
			 *
			 * (1) mp-&gt;local is uninitialized; set to p-&gt;two-&gt;sha1
			 * (2) mp-&gt;local is uninitialized; set to p-&gt;two-&gt;sha1
			 * (3) mp-&gt;local is null_sha1;     set to p-&gt;two-&gt;sha1
			 */</comment>
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">assert<pos:position pos:line="63" pos:column="31"/></name><argument_list pos:line="63" pos:column="31">(<argument><expr><call><name pos:line="63" pos:column="32">is_null_sha1<pos:position pos:line="63" pos:column="44"/></name><argument_list pos:line="63" pos:column="44">(<argument><expr><name><name pos:line="63" pos:column="45">mp<pos:position pos:line="63" pos:column="47"/></name><operator pos:line="63" pos:column="47">-&gt;<pos:position pos:line="63" pos:column="52"/></operator><name pos:line="63" pos:column="49">local<pos:position pos:line="63" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="55"/></argument_list></call> <operator pos:line="63" pos:column="56">||<pos:position pos:line="63" pos:column="58"/></operator>
			       <operator pos:line="64" pos:column="32">!<pos:position pos:line="64" pos:column="33"/></operator><call><name pos:line="64" pos:column="33">hashcmp<pos:position pos:line="64" pos:column="40"/></name><argument_list pos:line="64" pos:column="40">(<argument><expr><name><name pos:line="64" pos:column="41">mp<pos:position pos:line="64" pos:column="43"/></name><operator pos:line="64" pos:column="43">-&gt;<pos:position pos:line="64" pos:column="48"/></operator><name pos:line="64" pos:column="45">local<pos:position pos:line="64" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="52">uninitialized<pos:position pos:line="64" pos:column="65"/></name></expr></argument>)<pos:position pos:line="64" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="65" pos:column="25">hashcpy<pos:position pos:line="65" pos:column="32"/></name><argument_list pos:line="65" pos:column="32">(<argument><expr><name><name pos:line="65" pos:column="33">mp<pos:position pos:line="65" pos:column="35"/></name><operator pos:line="65" pos:column="35">-&gt;<pos:position pos:line="65" pos:column="40"/></operator><name pos:line="65" pos:column="37">local<pos:position pos:line="65" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="44">p<pos:position pos:line="65" pos:column="45"/></name><operator pos:line="65" pos:column="45">-&gt;<pos:position pos:line="65" pos:column="50"/></operator><name pos:line="65" pos:column="47">two<pos:position pos:line="65" pos:column="50"/></name><operator pos:line="65" pos:column="50">-&gt;<pos:position pos:line="65" pos:column="55"/></operator><name pos:line="65" pos:column="52">sha1<pos:position pos:line="65" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="66" pos:column="18"/></block></then></if></elseif> <else pos:line="66" pos:column="19">else <block pos:line="66" pos:column="24">{ <comment type="block" pos:line="66" pos:column="26">/* modification */</comment>
			<comment type="block" pos:line="67" pos:column="25">/*
			 * This is a true modification. p-&gt;one-&gt;sha1 shall
			 * match mp-&gt;base, and mp-&gt;local shall be uninitialized.
			 * Set mp-&gt;local to p-&gt;two-&gt;sha1.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="72" pos:column="25">assert<pos:position pos:line="72" pos:column="31"/></name><argument_list pos:line="72" pos:column="31">(<argument><expr><operator pos:line="72" pos:column="32">!<pos:position pos:line="72" pos:column="33"/></operator><call><name pos:line="72" pos:column="33">hashcmp<pos:position pos:line="72" pos:column="40"/></name><argument_list pos:line="72" pos:column="40">(<argument><expr><name><name pos:line="72" pos:column="41">p<pos:position pos:line="72" pos:column="42"/></name><operator pos:line="72" pos:column="42">-&gt;<pos:position pos:line="72" pos:column="47"/></operator><name pos:line="72" pos:column="44">one<pos:position pos:line="72" pos:column="47"/></name><operator pos:line="72" pos:column="47">-&gt;<pos:position pos:line="72" pos:column="52"/></operator><name pos:line="72" pos:column="49">sha1<pos:position pos:line="72" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="55">mp<pos:position pos:line="72" pos:column="57"/></name><operator pos:line="72" pos:column="57">-&gt;<pos:position pos:line="72" pos:column="62"/></operator><name pos:line="72" pos:column="59">base<pos:position pos:line="72" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="72" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="73" pos:column="25">assert<pos:position pos:line="73" pos:column="31"/></name><argument_list pos:line="73" pos:column="31">(<argument><expr><operator pos:line="73" pos:column="32">!<pos:position pos:line="73" pos:column="33"/></operator><call><name pos:line="73" pos:column="33">hashcmp<pos:position pos:line="73" pos:column="40"/></name><argument_list pos:line="73" pos:column="40">(<argument><expr><name><name pos:line="73" pos:column="41">mp<pos:position pos:line="73" pos:column="43"/></name><operator pos:line="73" pos:column="43">-&gt;<pos:position pos:line="73" pos:column="48"/></operator><name pos:line="73" pos:column="45">local<pos:position pos:line="73" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="52">uninitialized<pos:position pos:line="73" pos:column="65"/></name></expr></argument>)<pos:position pos:line="73" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">hashcpy<pos:position pos:line="74" pos:column="32"/></name><argument_list pos:line="74" pos:column="32">(<argument><expr><name><name pos:line="74" pos:column="33">mp<pos:position pos:line="74" pos:column="35"/></name><operator pos:line="74" pos:column="35">-&gt;<pos:position pos:line="74" pos:column="40"/></operator><name pos:line="74" pos:column="37">local<pos:position pos:line="74" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="44">p<pos:position pos:line="74" pos:column="45"/></name><operator pos:line="74" pos:column="45">-&gt;<pos:position pos:line="74" pos:column="50"/></operator><name pos:line="74" pos:column="47">two<pos:position pos:line="74" pos:column="50"/></name><operator pos:line="74" pos:column="50">-&gt;<pos:position pos:line="74" pos:column="55"/></operator><name pos:line="74" pos:column="52">sha1<pos:position pos:line="74" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="75" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">trace_printf<pos:position pos:line="76" pos:column="29"/></name><argument_list pos:line="76" pos:column="29">(<argument><expr><literal type="string" pos:line="76" pos:column="30">"\t\tStored local change for %s: %.7s -&gt; %.7s\n"<pos:position pos:line="76" pos:column="81"/></literal></expr></argument>,
		       <argument><expr><call><name pos:line="77" pos:column="24">sha1_to_hex<pos:position pos:line="77" pos:column="35"/></name><argument_list pos:line="77" pos:column="35">(<argument><expr><name><name pos:line="77" pos:column="36">mp<pos:position pos:line="77" pos:column="38"/></name><operator pos:line="77" pos:column="38">-&gt;<pos:position pos:line="77" pos:column="43"/></operator><name pos:line="77" pos:column="40">obj<pos:position pos:line="77" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="77" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="77" pos:column="46">sha1_to_hex<pos:position pos:line="77" pos:column="57"/></name><argument_list pos:line="77" pos:column="57">(<argument><expr><name><name pos:line="77" pos:column="58">mp<pos:position pos:line="77" pos:column="60"/></name><operator pos:line="77" pos:column="60">-&gt;<pos:position pos:line="77" pos:column="65"/></operator><name pos:line="77" pos:column="62">base<pos:position pos:line="77" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="77" pos:column="67"/></argument_list></call></expr></argument>,
		       <argument><expr><call><name pos:line="78" pos:column="24">sha1_to_hex<pos:position pos:line="78" pos:column="35"/></name><argument_list pos:line="78" pos:column="35">(<argument><expr><name><name pos:line="78" pos:column="36">mp<pos:position pos:line="78" pos:column="38"/></name><operator pos:line="78" pos:column="38">-&gt;<pos:position pos:line="78" pos:column="43"/></operator><name pos:line="78" pos:column="40">local<pos:position pos:line="78" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="78" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="79" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">diff_flush<pos:position pos:line="80" pos:column="19"/></name><argument_list pos:line="80" pos:column="19">(<argument><expr><operator pos:line="80" pos:column="20">&amp;<pos:position pos:line="80" pos:column="25"/></operator><name pos:line="80" pos:column="21">opt<pos:position pos:line="80" pos:column="24"/></name></expr></argument>)<pos:position pos:line="80" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="81" pos:column="9">free_pathspec<pos:position pos:line="81" pos:column="22"/></name><argument_list pos:line="81" pos:column="22">(<argument><expr><operator pos:line="81" pos:column="23">&amp;<pos:position pos:line="81" pos:column="28"/></operator><name><name pos:line="81" pos:column="24">opt<pos:position pos:line="81" pos:column="27"/></name><operator pos:line="81" pos:column="27">.<pos:position pos:line="81" pos:column="28"/></operator><name pos:line="81" pos:column="28">pathspec<pos:position pos:line="81" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="38"/></expr_stmt>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
