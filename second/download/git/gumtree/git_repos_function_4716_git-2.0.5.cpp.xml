<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4716_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">export_blob<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">unsigned<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">sha1<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">long<pos:position pos:line="3" pos:column="22"/></name></type> <name pos:line="3" pos:column="23">size<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">enum<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">object_type<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">type<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">buf<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object<pos:position pos:line="6" pos:column="22"/></name></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">object<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">eaten<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">no_data<pos:position pos:line="9" pos:column="20"/></name></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21">
		<block type="pseudo"><return pos:line="10" pos:column="17">return;<pos:position pos:line="10" pos:column="24"/></return></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">is_null_sha1<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">sha1<pos:position pos:line="12" pos:column="30"/></name></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="32"/></condition><then pos:line="12" pos:column="32">
		<block type="pseudo"><return pos:line="13" pos:column="17">return;<pos:position pos:line="13" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="15" pos:column="9">object<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name pos:line="15" pos:column="18">lookup_object<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">sha1<pos:position pos:line="15" pos:column="36"/></name></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">object<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">&amp;&amp;<pos:position pos:line="16" pos:column="30"/></operator> <name><name pos:line="16" pos:column="23">object<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">-&gt;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="31">flags<pos:position pos:line="16" pos:column="36"/></name></name> <operator pos:line="16" pos:column="37">&amp;<pos:position pos:line="16" pos:column="42"/></operator> <name pos:line="16" pos:column="39">SHOWN<pos:position pos:line="16" pos:column="44"/></name></expr>)<pos:position pos:line="16" pos:column="45"/></condition><then pos:line="16" pos:column="45">
		<block type="pseudo"><return pos:line="17" pos:column="17">return;<pos:position pos:line="17" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">buf<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <call><name pos:line="19" pos:column="15">read_sha1_file<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">sha1<pos:position pos:line="19" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="36">&amp;<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="37">type<pos:position pos:line="19" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="43">&amp;<pos:position pos:line="19" pos:column="48"/></operator><name pos:line="19" pos:column="44">size<pos:position pos:line="19" pos:column="48"/></name></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="50"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">buf<pos:position pos:line="20" pos:column="17"/></name></expr>)<pos:position pos:line="20" pos:column="18"/></condition><then pos:line="20" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">die<pos:position pos:line="21" pos:column="20"/></name> <argument_list pos:line="21" pos:column="21">(<argument><expr><literal type="string" pos:line="21" pos:column="22">"Could not read blob %s"<pos:position pos:line="21" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="48">sha1_to_hex<pos:position pos:line="21" pos:column="59"/></name><argument_list pos:line="21" pos:column="59">(<argument><expr><name pos:line="21" pos:column="60">sha1<pos:position pos:line="21" pos:column="64"/></name></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="67"/></expr_stmt></block></then></if>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">check_sha1_signature<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">sha1<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">buf<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="45">size<pos:position pos:line="22" pos:column="49"/></name></expr></argument>, <argument><expr><name><typename pos:line="22" pos:column="51">typename<pos:position pos:line="22" pos:column="59"/></typename></name><operator pos:line="22" pos:column="59">(<pos:position pos:line="22" pos:column="60"/></operator><name pos:line="22" pos:column="60">type<pos:position pos:line="22" pos:column="64"/></name><operator pos:line="22" pos:column="64">)<pos:position pos:line="22" pos:column="65"/></operator></expr></argument>)<pos:position pos:line="22" pos:column="66"/></argument_list></call> <operator pos:line="22" pos:column="67">&lt;<pos:position pos:line="22" pos:column="71"/></operator> <literal type="number" pos:line="22" pos:column="69">0<pos:position pos:line="22" pos:column="70"/></literal></expr>)<pos:position pos:line="22" pos:column="71"/></condition><then pos:line="22" pos:column="71">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">die<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><literal type="string" pos:line="23" pos:column="21">"sha1 mismatch in blob %s"<pos:position pos:line="23" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="49">sha1_to_hex<pos:position pos:line="23" pos:column="60"/></name><argument_list pos:line="23" pos:column="60">(<argument><expr><name pos:line="23" pos:column="61">sha1<pos:position pos:line="23" pos:column="65"/></name></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="68"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="24" pos:column="9">object<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <call><name pos:line="24" pos:column="18">parse_object_buffer<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><name pos:line="24" pos:column="38">sha1<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="44">type<pos:position pos:line="24" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="50">size<pos:position pos:line="24" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="56">buf<pos:position pos:line="24" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="61">&amp;<pos:position pos:line="24" pos:column="66"/></operator><name pos:line="24" pos:column="62">eaten<pos:position pos:line="24" pos:column="67"/></name></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">object<pos:position pos:line="25" pos:column="20"/></name></expr>)<pos:position pos:line="25" pos:column="21"/></condition><then pos:line="25" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">die<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><literal type="string" pos:line="26" pos:column="21">"Could not read blob %s"<pos:position pos:line="26" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="47">sha1_to_hex<pos:position pos:line="26" pos:column="58"/></name><argument_list pos:line="26" pos:column="58">(<argument><expr><name pos:line="26" pos:column="59">sha1<pos:position pos:line="26" pos:column="63"/></name></expr></argument>)<pos:position pos:line="26" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="66"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="28" pos:column="9">mark_next_object<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">object<pos:position pos:line="28" pos:column="32"/></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="30" pos:column="9">printf<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="string" pos:line="30" pos:column="16">"blob\nmark :%"<pos:position pos:line="30" pos:column="31"/></literal><name pos:line="30" pos:column="31">PRIu32<pos:position pos:line="30" pos:column="37"/></name><literal type="string" pos:line="30" pos:column="37">"\ndata %lu\n"<pos:position pos:line="30" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="53">last_idnum<pos:position pos:line="30" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="65">size<pos:position pos:line="30" pos:column="69"/></name></expr></argument>)<pos:position pos:line="30" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="71"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">size<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">&amp;&amp;<pos:position pos:line="31" pos:column="28"/></operator> <call><name pos:line="31" pos:column="21">fwrite<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">buf<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="33">size<pos:position pos:line="31" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="39">1<pos:position pos:line="31" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="42">stdout<pos:position pos:line="31" pos:column="48"/></name></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call> <operator pos:line="31" pos:column="50">!=<pos:position pos:line="31" pos:column="52"/></operator> <literal type="number" pos:line="31" pos:column="53">1<pos:position pos:line="31" pos:column="54"/></literal></expr>)<pos:position pos:line="31" pos:column="55"/></condition><then pos:line="31" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="17">die_errno<pos:position pos:line="32" pos:column="26"/></name> <argument_list pos:line="32" pos:column="27">(<argument><expr><literal type="string" pos:line="32" pos:column="28">"Could not write blob '%s'"<pos:position pos:line="32" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="57">sha1_to_hex<pos:position pos:line="32" pos:column="68"/></name><argument_list pos:line="32" pos:column="68">(<argument><expr><name pos:line="32" pos:column="69">sha1<pos:position pos:line="32" pos:column="73"/></name></expr></argument>)<pos:position pos:line="32" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="76"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">printf<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="string" pos:line="33" pos:column="16">"\n"<pos:position pos:line="33" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="35" pos:column="9">show_progress<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">()<pos:position pos:line="35" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="37" pos:column="9">object<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">-&gt;<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="17">flags<pos:position pos:line="37" pos:column="22"/></name></name> <operator pos:line="37" pos:column="23">|=<pos:position pos:line="37" pos:column="25"/></operator> <name pos:line="37" pos:column="26">SHOWN<pos:position pos:line="37" pos:column="31"/></name></expr>;<pos:position pos:line="37" pos:column="32"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">eaten<pos:position pos:line="38" pos:column="19"/></name></expr>)<pos:position pos:line="38" pos:column="20"/></condition><then pos:line="38" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="17">free<pos:position pos:line="39" pos:column="21"/></name><argument_list pos:line="39" pos:column="21">(<argument><expr><name pos:line="39" pos:column="22">buf<pos:position pos:line="39" pos:column="25"/></name></expr></argument>)<pos:position pos:line="39" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt></block></then></if>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
