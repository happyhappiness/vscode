<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2367_git-2.10.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">sq_quote_buf<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">strbuf<pos:position pos:line="1" pos:column="32"/></name></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">dst<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">src<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">to_free<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><name pos:line="3" pos:column="25">NULL<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name><name pos:line="5" pos:column="13">dst<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">-&gt;<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="18">buf<pos:position pos:line="5" pos:column="21"/></name></name> <operator pos:line="5" pos:column="22">==<pos:position pos:line="5" pos:column="24"/></operator> <name pos:line="5" pos:column="25">src<pos:position pos:line="5" pos:column="28"/></name></expr>)<pos:position pos:line="5" pos:column="29"/></condition><then pos:line="5" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="17">to_free<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">=<pos:position pos:line="6" pos:column="26"/></operator> <call><name pos:line="6" pos:column="27">strbuf_detach<pos:position pos:line="6" pos:column="40"/></name><argument_list pos:line="6" pos:column="40">(<argument><expr><name pos:line="6" pos:column="41">dst<pos:position pos:line="6" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="46">NULL<pos:position pos:line="6" pos:column="50"/></name></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="52"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">strbuf_addch<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">dst<pos:position pos:line="8" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="8" pos:column="27">'\''<pos:position pos:line="8" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><operator pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">src<pos:position pos:line="9" pos:column="20"/></name></expr>)<pos:position pos:line="9" pos:column="21"/></condition> <block pos:line="9" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">size_t<pos:position pos:line="10" pos:column="23"/></name></type> <name pos:line="10" pos:column="24">len<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><call><name pos:line="10" pos:column="30">strcspn<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">src<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="43">"'!"<pos:position pos:line="10" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="49"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">strbuf_add<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">dst<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">src<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">len<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">src<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">+=<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="24">len<pos:position pos:line="12" pos:column="27"/></name></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
		<while pos:line="13" pos:column="17">while <condition pos:line="13" pos:column="23">(<expr><call><name pos:line="13" pos:column="24">need_bs_quote<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><operator pos:line="13" pos:column="38">*<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="39">src<pos:position pos:line="13" pos:column="42"/></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="44"/></condition> <block pos:line="13" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">strbuf_addstr<pos:position pos:line="14" pos:column="38"/></name><argument_list pos:line="14" pos:column="38">(<argument><expr><name pos:line="14" pos:column="39">dst<pos:position pos:line="14" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="44">"'\\"<pos:position pos:line="14" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="15" pos:column="25">strbuf_addch<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">dst<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="43">*<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="44">src<pos:position pos:line="15" pos:column="47"/></name><operator pos:line="15" pos:column="47">++<pos:position pos:line="15" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">strbuf_addch<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">dst<pos:position pos:line="16" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="43">'\''<pos:position pos:line="16" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></while>
	}<pos:position pos:line="18" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">strbuf_addch<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">dst<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="27">'\''<pos:position pos:line="19" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">free<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name pos:line="20" pos:column="14">to_free<pos:position pos:line="20" pos:column="21"/></name></expr></argument>)<pos:position pos:line="20" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
