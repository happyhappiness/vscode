<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6231_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">default_edit_option<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> <name pos:line="3" pos:column="22">char<pos:position pos:line="3" pos:column="26"/></name></type> <name><name pos:line="3" pos:column="27">name<pos:position pos:line="3" pos:column="31"/></name><index pos:line="3" pos:column="31">[]<pos:position pos:line="3" pos:column="33"/></index></name> <init pos:line="3" pos:column="34">= <expr><literal type="string" pos:line="3" pos:column="36">"GIT_MERGE_AUTOEDIT"<pos:position pos:line="3" pos:column="56"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">e<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><call><name pos:line="4" pos:column="25">getenv<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">(<argument><expr><name pos:line="4" pos:column="32">name<pos:position pos:line="4" pos:column="36"/></name></expr></argument>)<pos:position pos:line="4" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">stat<pos:position pos:line="5" pos:column="20"/></name></name></type> <name pos:line="5" pos:column="21">st_stdin<pos:position pos:line="5" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="31">st_stdout<pos:position pos:line="5" pos:column="40"/></name></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">have_message<pos:position pos:line="7" pos:column="25"/></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26">
		<comment type="block" pos:line="8" pos:column="17">/* an explicit -m msg without --[no-]edit */</comment>
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">e<pos:position pos:line="11" pos:column="14"/></name></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15"> <block pos:line="11" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">int<pos:position pos:line="12" pos:column="20"/></name></type> <name pos:line="12" pos:column="21">v<pos:position pos:line="12" pos:column="22"/></name> <init pos:line="12" pos:column="23">= <expr><call><name pos:line="12" pos:column="25">git_config_maybe_bool<pos:position pos:line="12" pos:column="46"/></name><argument_list pos:line="12" pos:column="46">(<argument><expr><name pos:line="12" pos:column="47">name<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="53">e<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="56"/></decl_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">v<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">&lt;<pos:position pos:line="13" pos:column="27"/></operator> <literal type="number" pos:line="13" pos:column="25">0<pos:position pos:line="13" pos:column="26"/></literal></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="25">die<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><call><name pos:line="14" pos:column="29">_<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><literal type="string" pos:line="14" pos:column="31">"Bad value '%s' in environment '%s'"<pos:position pos:line="14" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="14" pos:column="70">e<pos:position pos:line="14" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="73">name<pos:position pos:line="14" pos:column="77"/></name></expr></argument>)<pos:position pos:line="14" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="79"/></expr_stmt></block></then></if>
		<return pos:line="15" pos:column="17">return <expr><name pos:line="15" pos:column="24">v<pos:position pos:line="15" pos:column="25"/></name></expr>;<pos:position pos:line="15" pos:column="26"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="18" pos:column="9">/* Use editor if stdin and stdout are the same and is a tty */</comment>
	<return pos:line="19" pos:column="9">return <expr><operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator><operator pos:line="19" pos:column="17">!<pos:position pos:line="19" pos:column="18"/></operator><call><name pos:line="19" pos:column="18">fstat<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="27">&amp;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="28">st_stdin<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call> <operator pos:line="19" pos:column="38">&amp;&amp;<pos:position pos:line="19" pos:column="48"/></operator>
		<operator pos:line="20" pos:column="17">!<pos:position pos:line="20" pos:column="18"/></operator><call><name pos:line="20" pos:column="18">fstat<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><literal type="number" pos:line="20" pos:column="24">1<pos:position pos:line="20" pos:column="25"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="27">&amp;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="28">st_stdout<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call> <operator pos:line="20" pos:column="39">&amp;&amp;<pos:position pos:line="20" pos:column="49"/></operator>
		<call><name pos:line="21" pos:column="17">isatty<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><literal type="number" pos:line="21" pos:column="24">0<pos:position pos:line="21" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></call> <operator pos:line="21" pos:column="27">&amp;&amp;<pos:position pos:line="21" pos:column="37"/></operator> <call><name pos:line="21" pos:column="30">isatty<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><literal type="number" pos:line="21" pos:column="37">1<pos:position pos:line="21" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call> <operator pos:line="21" pos:column="40">&amp;&amp;<pos:position pos:line="21" pos:column="50"/></operator>
		<name><name pos:line="22" pos:column="17">st_stdin<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">.<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">st_dev<pos:position pos:line="22" pos:column="32"/></name></name> <operator pos:line="22" pos:column="33">==<pos:position pos:line="22" pos:column="35"/></operator> <name><name pos:line="22" pos:column="36">st_stdout<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">.<pos:position pos:line="22" pos:column="46"/></operator><name pos:line="22" pos:column="46">st_dev<pos:position pos:line="22" pos:column="52"/></name></name> <operator pos:line="22" pos:column="53">&amp;&amp;<pos:position pos:line="22" pos:column="63"/></operator>
		<name><name pos:line="23" pos:column="17">st_stdin<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">.<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">st_ino<pos:position pos:line="23" pos:column="32"/></name></name> <operator pos:line="23" pos:column="33">==<pos:position pos:line="23" pos:column="35"/></operator> <name><name pos:line="23" pos:column="36">st_stdout<pos:position pos:line="23" pos:column="45"/></name><operator pos:line="23" pos:column="45">.<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="46">st_ino<pos:position pos:line="23" pos:column="52"/></name></name> <operator pos:line="23" pos:column="53">&amp;&amp;<pos:position pos:line="23" pos:column="63"/></operator>
		<name><name pos:line="24" pos:column="17">st_stdin<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">.<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">st_mode<pos:position pos:line="24" pos:column="33"/></name></name> <operator pos:line="24" pos:column="34">==<pos:position pos:line="24" pos:column="36"/></operator> <name><name pos:line="24" pos:column="37">st_stdout<pos:position pos:line="24" pos:column="46"/></name><operator pos:line="24" pos:column="46">.<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="47">st_mode<pos:position pos:line="24" pos:column="54"/></name></name><operator pos:line="24" pos:column="54">)<pos:position pos:line="24" pos:column="55"/></operator></expr>;<pos:position pos:line="24" pos:column="56"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
