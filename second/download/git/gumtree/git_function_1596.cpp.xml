<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1596.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">git_pack_config<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">k<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">v<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">void<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">cb<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><call><name pos:line="3" pos:column="14">strcmp<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><name pos:line="3" pos:column="21">k<pos:position pos:line="3" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="24">"pack.depth"<pos:position pos:line="3" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="38"/></condition><then pos:line="3" pos:column="38"> <block pos:line="3" pos:column="39">{
		<expr_stmt><expr><name pos:line="4" pos:column="17">max_depth<pos:position pos:line="4" pos:column="26"/></name> <operator pos:line="4" pos:column="27">=<pos:position pos:line="4" pos:column="28"/></operator> <call><name pos:line="4" pos:column="29">git_config_int<pos:position pos:line="4" pos:column="43"/></name><argument_list pos:line="4" pos:column="43">(<argument><expr><name pos:line="4" pos:column="44">k<pos:position pos:line="4" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="47">v<pos:position pos:line="4" pos:column="48"/></name></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="50"/></expr_stmt>
		<if pos:line="5" pos:column="17">if <condition pos:line="5" pos:column="20">(<expr><name pos:line="5" pos:column="21">max_depth<pos:position pos:line="5" pos:column="30"/></name> <operator pos:line="5" pos:column="31">&gt;<pos:position pos:line="5" pos:column="35"/></operator> <name pos:line="5" pos:column="33">MAX_DEPTH<pos:position pos:line="5" pos:column="42"/></name></expr>)<pos:position pos:line="5" pos:column="43"/></condition><then pos:line="5" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="25">max_depth<pos:position pos:line="6" pos:column="34"/></name> <operator pos:line="6" pos:column="35">=<pos:position pos:line="6" pos:column="36"/></operator> <name pos:line="6" pos:column="37">MAX_DEPTH<pos:position pos:line="6" pos:column="46"/></name></expr>;<pos:position pos:line="6" pos:column="47"/></expr_stmt></block></then></if>
		<return pos:line="7" pos:column="17">return <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></return>
	}<pos:position pos:line="8" pos:column="10"/></block></then></if>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">strcmp<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">k<pos:position pos:line="9" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="24">"pack.compression"<pos:position pos:line="9" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="44"/></condition><then pos:line="9" pos:column="44"> <block pos:line="9" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">level<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><call><name pos:line="10" pos:column="29">git_config_int<pos:position pos:line="10" pos:column="43"/></name><argument_list pos:line="10" pos:column="43">(<argument><expr><name pos:line="10" pos:column="44">k<pos:position pos:line="10" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="47">v<pos:position pos:line="10" pos:column="48"/></name></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="50"/></decl_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">level<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">==<pos:position pos:line="11" pos:column="29"/></operator> <operator pos:line="11" pos:column="30">-<pos:position pos:line="11" pos:column="31"/></operator><literal type="number" pos:line="11" pos:column="31">1<pos:position pos:line="11" pos:column="32"/></literal></expr>)<pos:position pos:line="11" pos:column="33"/></condition><then pos:line="11" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="25">level<pos:position pos:line="12" pos:column="30"/></name> <operator pos:line="12" pos:column="31">=<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="33">Z_DEFAULT_COMPRESSION<pos:position pos:line="12" pos:column="54"/></name></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt></block></then>
		<elseif pos:line="13" pos:column="17">else <if pos:line="13" pos:column="22">if <condition pos:line="13" pos:column="25">(<expr><name><name pos:line="13" pos:column="26">level<pos:position pos:line="13" pos:column="31"/></name> <argument_list type="generic" pos:line="13" pos:column="32">&lt; <argument><expr><literal type="number" pos:line="13" pos:column="34">0<pos:position pos:line="13" pos:column="35"/></literal> <operator pos:line="13" pos:column="36">||<pos:position pos:line="13" pos:column="38"/></operator> <name pos:line="13" pos:column="39">level<pos:position pos:line="13" pos:column="44"/></name></expr></argument> &gt;<pos:position pos:line="13" pos:column="49"/></argument_list></name> <name pos:line="13" pos:column="47">Z_BEST_COMPRESSION<pos:position pos:line="13" pos:column="65"/></name></expr>)<pos:position pos:line="13" pos:column="66"/></condition><then pos:line="13" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="25">die<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><literal type="string" pos:line="14" pos:column="29">"bad pack compression level %d"<pos:position pos:line="14" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="62">level<pos:position pos:line="14" pos:column="67"/></name></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="69"/></expr_stmt></block></then></if></elseif></if>
		<expr_stmt><expr><name pos:line="15" pos:column="17">pack_compression_level<pos:position pos:line="15" pos:column="39"/></name> <operator pos:line="15" pos:column="40">=<pos:position pos:line="15" pos:column="41"/></operator> <name pos:line="15" pos:column="42">level<pos:position pos:line="15" pos:column="47"/></name></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">pack_compression_seen<pos:position pos:line="16" pos:column="38"/></name> <operator pos:line="16" pos:column="39">=<pos:position pos:line="16" pos:column="40"/></operator> <literal type="number" pos:line="16" pos:column="41">1<pos:position pos:line="16" pos:column="42"/></literal></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><call><name pos:line="19" pos:column="14">strcmp<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">k<pos:position pos:line="19" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="24">"pack.indexversion"<pos:position pos:line="19" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="45"/></condition><then pos:line="19" pos:column="45"> <block pos:line="19" pos:column="46">{
		<expr_stmt><expr><name><name pos:line="20" pos:column="17">pack_idx_opts<pos:position pos:line="20" pos:column="30"/></name><operator pos:line="20" pos:column="30">.<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="31">version<pos:position pos:line="20" pos:column="38"/></name></name> <operator pos:line="20" pos:column="39">=<pos:position pos:line="20" pos:column="40"/></operator> <call><name pos:line="20" pos:column="41">git_config_int<pos:position pos:line="20" pos:column="55"/></name><argument_list pos:line="20" pos:column="55">(<argument><expr><name pos:line="20" pos:column="56">k<pos:position pos:line="20" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="59">v<pos:position pos:line="20" pos:column="60"/></name></expr></argument>)<pos:position pos:line="20" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="62"/></expr_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name><name pos:line="21" pos:column="21">pack_idx_opts<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">.<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="35">version<pos:position pos:line="21" pos:column="42"/></name></name> <operator pos:line="21" pos:column="43">&gt;<pos:position pos:line="21" pos:column="47"/></operator> <literal type="number" pos:line="21" pos:column="45">2<pos:position pos:line="21" pos:column="46"/></literal></expr>)<pos:position pos:line="21" pos:column="47"/></condition><then pos:line="21" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">die<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><literal type="string" pos:line="22" pos:column="29">"bad pack.indexversion=%"<pos:position pos:line="22" pos:column="54"/></literal><name pos:line="22" pos:column="54">PRIu32<pos:position pos:line="22" pos:column="60"/></name></expr></argument>,
			    <argument><expr><name><name pos:line="23" pos:column="29">pack_idx_opts<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">.<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="43">version<pos:position pos:line="23" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt></block></then></if>
		<return pos:line="24" pos:column="17">return <expr><literal type="number" pos:line="24" pos:column="24">0<pos:position pos:line="24" pos:column="25"/></literal></expr>;<pos:position pos:line="24" pos:column="26"/></return>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><call><name pos:line="26" pos:column="14">strcmp<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">k<pos:position pos:line="26" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="24">"pack.packsizelimit"<pos:position pos:line="26" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="46"/></condition><then pos:line="26" pos:column="46"> <block pos:line="26" pos:column="47">{
		<expr_stmt><expr><name pos:line="27" pos:column="17">max_packsize<pos:position pos:line="27" pos:column="29"/></name> <operator pos:line="27" pos:column="30">=<pos:position pos:line="27" pos:column="31"/></operator> <call><name pos:line="27" pos:column="32">git_config_ulong<pos:position pos:line="27" pos:column="48"/></name><argument_list pos:line="27" pos:column="48">(<argument><expr><name pos:line="27" pos:column="49">k<pos:position pos:line="27" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="52">v<pos:position pos:line="27" pos:column="53"/></name></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt>
		<return pos:line="28" pos:column="17">return <expr><literal type="number" pos:line="28" pos:column="24">0<pos:position pos:line="28" pos:column="25"/></literal></expr>;<pos:position pos:line="28" pos:column="26"/></return>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
	<return pos:line="30" pos:column="9">return <expr><call><name pos:line="30" pos:column="16">git_default_config<pos:position pos:line="30" pos:column="34"/></name><argument_list pos:line="30" pos:column="34">(<argument><expr><name pos:line="30" pos:column="35">k<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="38">v<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="41">cb<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="45"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
