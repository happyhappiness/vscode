<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2784_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">save_todo<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">todo_list<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">todo_list<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">replay_opts<pos:position pos:line="1" pos:column="69"/></name></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">opts<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">lock_file<pos:position pos:line="3" pos:column="32"/></name></name></type> <name pos:line="3" pos:column="33">todo_lock<pos:position pos:line="3" pos:column="42"/></name></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">todo_path<pos:position pos:line="4" pos:column="30"/></name> <init pos:line="4" pos:column="31">= <expr><call><name pos:line="4" pos:column="33">get_todo_path<pos:position pos:line="4" pos:column="46"/></name><argument_list pos:line="4" pos:column="46">(<argument><expr><name pos:line="4" pos:column="47">opts<pos:position pos:line="4" pos:column="51"/></name></expr></argument>)<pos:position pos:line="4" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="53"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">next<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name><name pos:line="5" pos:column="20">todo_list<pos:position pos:line="5" pos:column="29"/></name><operator pos:line="5" pos:column="29">-&gt;<pos:position pos:line="5" pos:column="34"/></operator><name pos:line="5" pos:column="31">current<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="40">offset<pos:position pos:line="5" pos:column="46"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="48">fd<pos:position pos:line="5" pos:column="50"/></name></decl>;<pos:position pos:line="5" pos:column="51"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/*
	 * rebase -i writes "git-rebase-todo" without the currently executing
	 * command, appending it to "done" instead.
	 */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">is_rebase_i<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">opts<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="31"/></condition><then pos:line="11" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">next<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">++<pos:position pos:line="12" pos:column="23"/></operator></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="14" pos:column="9">fd<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <call><name pos:line="14" pos:column="14">hold_lock_file_for_update<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><operator pos:line="14" pos:column="40">&amp;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="41">todo_lock<pos:position pos:line="14" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="52">todo_path<pos:position pos:line="14" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="63">0<pos:position pos:line="14" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">fd<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">&lt;<pos:position pos:line="15" pos:column="20"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><call><name pos:line="16" pos:column="24">error_errno<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><call><name pos:line="16" pos:column="36">_<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><literal type="string" pos:line="16" pos:column="38">"could not lock '%s'"<pos:position pos:line="16" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="16" pos:column="62">todo_path<pos:position pos:line="16" pos:column="71"/></name></expr></argument>)<pos:position pos:line="16" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="73"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="17" pos:column="9">offset<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <ternary><condition><expr><name pos:line="17" pos:column="18">next<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">&lt;<pos:position pos:line="17" pos:column="27"/></operator> <name><name pos:line="17" pos:column="25">todo_list<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">-&gt;<pos:position pos:line="17" pos:column="39"/></operator><name pos:line="17" pos:column="36">nr<pos:position pos:line="17" pos:column="38"/></name></name></expr> ?<pos:position pos:line="17" pos:column="40"/></condition><then pos:line="17" pos:column="40">
		<expr><name><name pos:line="18" pos:column="17">todo_list<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">-&gt;<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="28">items<pos:position pos:line="18" pos:column="33"/></name><index pos:line="18" pos:column="33">[<expr><name pos:line="18" pos:column="34">next<pos:position pos:line="18" pos:column="38"/></name></expr>]<pos:position pos:line="18" pos:column="39"/></index></name><operator pos:line="18" pos:column="39">.<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="40">offset_in_buf<pos:position pos:line="18" pos:column="53"/></name></expr> <pos:position pos:line="18" pos:column="54"/></then><else pos:line="18" pos:column="54">: <expr><name><name pos:line="18" pos:column="56">todo_list<pos:position pos:line="18" pos:column="65"/></name><operator pos:line="18" pos:column="65">-&gt;<pos:position pos:line="18" pos:column="70"/></operator><name pos:line="18" pos:column="67">buf<pos:position pos:line="18" pos:column="70"/></name><operator pos:line="18" pos:column="70">.<pos:position pos:line="18" pos:column="71"/></operator><name pos:line="18" pos:column="71">len<pos:position pos:line="18" pos:column="74"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="18" pos:column="75"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">write_in_full<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">fd<pos:position pos:line="19" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="31">todo_list<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">-&gt;<pos:position pos:line="19" pos:column="45"/></operator><name pos:line="19" pos:column="42">buf<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">.<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="46">buf<pos:position pos:line="19" pos:column="49"/></name></name> <operator pos:line="19" pos:column="50">+<pos:position pos:line="19" pos:column="51"/></operator> <name pos:line="19" pos:column="52">offset<pos:position pos:line="19" pos:column="58"/></name></expr></argument>,
			<argument><expr><name><name pos:line="20" pos:column="25">todo_list<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">-&gt;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="36">buf<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">.<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="40">len<pos:position pos:line="20" pos:column="43"/></name></name> <operator pos:line="20" pos:column="44">-<pos:position pos:line="20" pos:column="45"/></operator> <name pos:line="20" pos:column="46">offset<pos:position pos:line="20" pos:column="52"/></name></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call> <operator pos:line="20" pos:column="54">&lt;<pos:position pos:line="20" pos:column="58"/></operator> <literal type="number" pos:line="20" pos:column="56">0<pos:position pos:line="20" pos:column="57"/></literal></expr>)<pos:position pos:line="20" pos:column="58"/></condition><then pos:line="20" pos:column="58">
		<block type="pseudo"><return pos:line="21" pos:column="17">return <expr><call><name pos:line="21" pos:column="24">error_errno<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><call><name pos:line="21" pos:column="36">_<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><literal type="string" pos:line="21" pos:column="38">"could not write to '%s'"<pos:position pos:line="21" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="21" pos:column="66">todo_path<pos:position pos:line="21" pos:column="75"/></name></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="77"/></return></block></then></if>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">commit_lock_file<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><operator pos:line="22" pos:column="30">&amp;<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="31">todo_lock<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call> <operator pos:line="22" pos:column="42">&lt;<pos:position pos:line="22" pos:column="46"/></operator> <literal type="number" pos:line="22" pos:column="44">0<pos:position pos:line="22" pos:column="45"/></literal></expr>)<pos:position pos:line="22" pos:column="46"/></condition><then pos:line="22" pos:column="46">
		<block type="pseudo"><return pos:line="23" pos:column="17">return <expr><call><name pos:line="23" pos:column="24">error<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><call><name pos:line="23" pos:column="30">_<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><literal type="string" pos:line="23" pos:column="32">"failed to finalize '%s'."<pos:position pos:line="23" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="61">todo_path<pos:position pos:line="23" pos:column="70"/></name></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="72"/></return></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">is_rebase_i<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><name pos:line="25" pos:column="25">opts<pos:position pos:line="25" pos:column="29"/></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="31"/></condition><then pos:line="25" pos:column="31"> <block pos:line="25" pos:column="32">{
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">const<pos:position pos:line="26" pos:column="22"/></specifier> <name pos:line="26" pos:column="23">char<pos:position pos:line="26" pos:column="27"/></name> <modifier pos:line="26" pos:column="28">*<pos:position pos:line="26" pos:column="29"/></modifier></type><name pos:line="26" pos:column="29">done_path<pos:position pos:line="26" pos:column="38"/></name> <init pos:line="26" pos:column="39">= <expr><call><name pos:line="26" pos:column="41">rebase_path_done<pos:position pos:line="26" pos:column="57"/></name><argument_list pos:line="26" pos:column="57">()<pos:position pos:line="26" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="60"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">int<pos:position pos:line="27" pos:column="20"/></name></type> <name pos:line="27" pos:column="21">fd<pos:position pos:line="27" pos:column="23"/></name> <init pos:line="27" pos:column="24">= <expr><call><name pos:line="27" pos:column="26">open<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">done_path<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="42">O_CREAT<pos:position pos:line="27" pos:column="49"/></name> <operator pos:line="27" pos:column="50">|<pos:position pos:line="27" pos:column="51"/></operator> <name pos:line="27" pos:column="52">O_WRONLY<pos:position pos:line="27" pos:column="60"/></name> <operator pos:line="27" pos:column="61">|<pos:position pos:line="27" pos:column="62"/></operator> <name pos:line="27" pos:column="63">O_APPEND<pos:position pos:line="27" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="73">0666<pos:position pos:line="27" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="79"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">int<pos:position pos:line="28" pos:column="20"/></name></type> <name pos:line="28" pos:column="21">prev_offset<pos:position pos:line="28" pos:column="32"/></name> <init pos:line="28" pos:column="33">= <expr><ternary><condition><expr><operator pos:line="28" pos:column="35">!<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="36">next<pos:position pos:line="28" pos:column="40"/></name></expr> ?<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42"> <expr><literal type="number" pos:line="28" pos:column="43">0<pos:position pos:line="28" pos:column="44"/></literal></expr> <pos:position pos:line="28" pos:column="45"/></then><else pos:line="28" pos:column="45">:
			<expr><name><name pos:line="29" pos:column="25">todo_list<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">-&gt;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="36">items<pos:position pos:line="29" pos:column="41"/></name><index pos:line="29" pos:column="41">[<expr><name pos:line="29" pos:column="42">next<pos:position pos:line="29" pos:column="46"/></name> <operator pos:line="29" pos:column="47">-<pos:position pos:line="29" pos:column="48"/></operator> <literal type="number" pos:line="29" pos:column="49">1<pos:position pos:line="29" pos:column="50"/></literal></expr>]<pos:position pos:line="29" pos:column="51"/></index></name><operator pos:line="29" pos:column="51">.<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="52">offset_in_buf<pos:position pos:line="29" pos:column="65"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="29" pos:column="66"/></decl_stmt>

		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">fd<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">&gt;=<pos:position pos:line="31" pos:column="29"/></operator> <literal type="number" pos:line="31" pos:column="27">0<pos:position pos:line="31" pos:column="28"/></literal> <operator pos:line="31" pos:column="29">&amp;&amp;<pos:position pos:line="31" pos:column="39"/></operator> <name pos:line="31" pos:column="32">offset<pos:position pos:line="31" pos:column="38"/></name> <operator pos:line="31" pos:column="39">&gt;<pos:position pos:line="31" pos:column="43"/></operator> <name pos:line="31" pos:column="41">prev_offset<pos:position pos:line="31" pos:column="52"/></name> <operator pos:line="31" pos:column="53">&amp;&amp;<pos:position pos:line="31" pos:column="63"/></operator>
		    <call><name pos:line="32" pos:column="21">write_in_full<pos:position pos:line="32" pos:column="34"/></name><argument_list pos:line="32" pos:column="34">(<argument><expr><name pos:line="32" pos:column="35">fd<pos:position pos:line="32" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="39">todo_list<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">-&gt;<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="50">buf<pos:position pos:line="32" pos:column="53"/></name><operator pos:line="32" pos:column="53">.<pos:position pos:line="32" pos:column="54"/></operator><name pos:line="32" pos:column="54">buf<pos:position pos:line="32" pos:column="57"/></name></name> <operator pos:line="32" pos:column="58">+<pos:position pos:line="32" pos:column="59"/></operator> <name pos:line="32" pos:column="60">prev_offset<pos:position pos:line="32" pos:column="71"/></name></expr></argument>,
				  <argument><expr><name pos:line="33" pos:column="35">offset<pos:position pos:line="33" pos:column="41"/></name> <operator pos:line="33" pos:column="42">-<pos:position pos:line="33" pos:column="43"/></operator> <name pos:line="33" pos:column="44">prev_offset<pos:position pos:line="33" pos:column="55"/></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call> <operator pos:line="33" pos:column="57">&lt;<pos:position pos:line="33" pos:column="61"/></operator> <literal type="number" pos:line="33" pos:column="59">0<pos:position pos:line="33" pos:column="60"/></literal></expr>)<pos:position pos:line="33" pos:column="61"/></condition><then pos:line="33" pos:column="61"> <block pos:line="33" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">close<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><name pos:line="34" pos:column="31">fd<pos:position pos:line="34" pos:column="33"/></name></expr></argument>)<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>
			<return pos:line="35" pos:column="25">return <expr><call><name pos:line="35" pos:column="32">error_errno<pos:position pos:line="35" pos:column="43"/></name><argument_list pos:line="35" pos:column="43">(<argument><expr><call><name pos:line="35" pos:column="44">_<pos:position pos:line="35" pos:column="45"/></name><argument_list pos:line="35" pos:column="45">(<argument><expr><literal type="string" pos:line="35" pos:column="46">"could not write to '%s'"<pos:position pos:line="35" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="72"/></argument_list></call></expr></argument>,
					   <argument><expr><name pos:line="36" pos:column="44">done_path<pos:position pos:line="36" pos:column="53"/></name></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="55"/></return>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">fd<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">&gt;=<pos:position pos:line="38" pos:column="29"/></operator> <literal type="number" pos:line="38" pos:column="27">0<pos:position pos:line="38" pos:column="28"/></literal></expr>)<pos:position pos:line="38" pos:column="29"/></condition><then pos:line="38" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="25">close<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><name pos:line="39" pos:column="31">fd<pos:position pos:line="39" pos:column="33"/></name></expr></argument>)<pos:position pos:line="39" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="35"/></expr_stmt></block></then></if>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>
	<return pos:line="41" pos:column="9">return <expr><literal type="number" pos:line="41" pos:column="16">0<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
