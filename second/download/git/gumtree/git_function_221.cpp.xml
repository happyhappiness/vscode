<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_221.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">run_apply<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">am_state<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">state<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">index_file<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">argv_array<pos:position pos:line="3" pos:column="26"/></name></name></type> <name pos:line="3" pos:column="27">apply_paths<pos:position pos:line="3" pos:column="38"/></name> <init pos:line="3" pos:column="39">= <expr><name pos:line="3" pos:column="41">ARGV_ARRAY_INIT<pos:position pos:line="3" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">argv_array<pos:position pos:line="4" pos:column="26"/></name></name></type> <name pos:line="4" pos:column="27">apply_opts<pos:position pos:line="4" pos:column="37"/></name> <init pos:line="4" pos:column="38">= <expr><name pos:line="4" pos:column="40">ARGV_ARRAY_INIT<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">apply_state<pos:position pos:line="5" pos:column="27"/></name></name></type> <name pos:line="5" pos:column="28">apply_state<pos:position pos:line="5" pos:column="39"/></name></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">res<pos:position pos:line="6" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="18">opts_left<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="7" pos:column="9">static<pos:position pos:line="7" pos:column="15"/></specifier> <type><name><name pos:line="7" pos:column="16">struct<pos:position pos:line="7" pos:column="22"/></name> <name pos:line="7" pos:column="23">lock_file<pos:position pos:line="7" pos:column="32"/></name></name></type> <name pos:line="7" pos:column="33">lock_file<pos:position pos:line="7" pos:column="42"/></name></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">force_apply<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">options<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">init_apply_state<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><operator pos:line="11" pos:column="30">&amp;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="31">apply_state<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">NULL<pos:position pos:line="11" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="50">&amp;<pos:position pos:line="11" pos:column="55"/></operator><name pos:line="11" pos:column="51">lock_file<pos:position pos:line="11" pos:column="60"/></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="62"/></condition><then pos:line="11" pos:column="62">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">die<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><literal type="string" pos:line="12" pos:column="21">"BUG: init_apply_state() failed"<pos:position pos:line="12" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">argv_array_push<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><operator pos:line="14" pos:column="25">&amp;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="26">apply_opts<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="38">"apply"<pos:position pos:line="14" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">argv_array_pushv<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><operator pos:line="15" pos:column="26">&amp;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="27">apply_opts<pos:position pos:line="15" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="39">state<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">-&gt;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="46">git_apply_opts<pos:position pos:line="15" pos:column="60"/></name><operator pos:line="15" pos:column="60">.<pos:position pos:line="15" pos:column="61"/></operator><name pos:line="15" pos:column="61">argv<pos:position pos:line="15" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="67"/></expr_stmt>

	<expr_stmt><expr><name pos:line="17" pos:column="9">opts_left<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <call><name pos:line="17" pos:column="21">apply_parse_options<pos:position pos:line="17" pos:column="40"/></name><argument_list pos:line="17" pos:column="40">(<argument><expr><name><name pos:line="17" pos:column="41">apply_opts<pos:position pos:line="17" pos:column="51"/></name><operator pos:line="17" pos:column="51">.<pos:position pos:line="17" pos:column="52"/></operator><name pos:line="17" pos:column="52">argc<pos:position pos:line="17" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="58">apply_opts<pos:position pos:line="17" pos:column="68"/></name><operator pos:line="17" pos:column="68">.<pos:position pos:line="17" pos:column="69"/></operator><name pos:line="17" pos:column="69">argv<pos:position pos:line="17" pos:column="73"/></name></name></expr></argument>,
					<argument><expr><operator pos:line="18" pos:column="41">&amp;<pos:position pos:line="18" pos:column="46"/></operator><name pos:line="18" pos:column="42">apply_state<pos:position pos:line="18" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="55">&amp;<pos:position pos:line="18" pos:column="60"/></operator><name pos:line="18" pos:column="56">force_apply<pos:position pos:line="18" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="69">&amp;<pos:position pos:line="18" pos:column="74"/></operator><name pos:line="18" pos:column="70">options<pos:position pos:line="18" pos:column="77"/></name></expr></argument>,
					<argument><expr><name pos:line="19" pos:column="41">NULL<pos:position pos:line="19" pos:column="45"/></name></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">opts_left<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">!=<pos:position pos:line="21" pos:column="25"/></operator> <literal type="number" pos:line="21" pos:column="26">0<pos:position pos:line="21" pos:column="27"/></literal></expr>)<pos:position pos:line="21" pos:column="28"/></condition><then pos:line="21" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="17">die<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><literal type="string" pos:line="22" pos:column="21">"unknown option passed through to git apply"<pos:position pos:line="22" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="67"/></expr_stmt></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">index_file<pos:position pos:line="24" pos:column="23"/></name></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24"> <block pos:line="24" pos:column="25">{
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">apply_state<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">.<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">index_file<pos:position pos:line="25" pos:column="39"/></name></name> <operator pos:line="25" pos:column="40">=<pos:position pos:line="25" pos:column="41"/></operator> <name pos:line="25" pos:column="42">index_file<pos:position pos:line="25" pos:column="52"/></name></expr>;<pos:position pos:line="25" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="26" pos:column="17">apply_state<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">.<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="29">cached<pos:position pos:line="26" pos:column="35"/></name></name> <operator pos:line="26" pos:column="36">=<pos:position pos:line="26" pos:column="37"/></operator> <literal type="number" pos:line="26" pos:column="38">1<pos:position pos:line="26" pos:column="39"/></literal></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></then> <else pos:line="27" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="28" pos:column="17">apply_state<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">.<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="29">check_index<pos:position pos:line="28" pos:column="40"/></name></name> <operator pos:line="28" pos:column="41">=<pos:position pos:line="28" pos:column="42"/></operator> <literal type="number" pos:line="28" pos:column="43">1<pos:position pos:line="28" pos:column="44"/></literal></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt></block></else></if>

	<comment type="block" pos:line="30" pos:column="9">/*
	 * If we are allowed to fall back on 3-way merge, don't give false
	 * errors during the initial attempt.
	 */</comment>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name><name pos:line="34" pos:column="13">state<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">-&gt;<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="20">threeway<pos:position pos:line="34" pos:column="28"/></name></name> <operator pos:line="34" pos:column="29">&amp;&amp;<pos:position pos:line="34" pos:column="39"/></operator> <operator pos:line="34" pos:column="32">!<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="33">index_file<pos:position pos:line="34" pos:column="43"/></name></expr>)<pos:position pos:line="34" pos:column="44"/></condition><then pos:line="34" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="17">apply_state<pos:position pos:line="35" pos:column="28"/></name><operator pos:line="35" pos:column="28">.<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="29">apply_verbosity<pos:position pos:line="35" pos:column="44"/></name></name> <operator pos:line="35" pos:column="45">=<pos:position pos:line="35" pos:column="46"/></operator> <name pos:line="35" pos:column="47">verbosity_silent<pos:position pos:line="35" pos:column="63"/></name></expr>;<pos:position pos:line="35" pos:column="64"/></expr_stmt></block></then></if>

	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">check_apply_state<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><operator pos:line="37" pos:column="31">&amp;<pos:position pos:line="37" pos:column="36"/></operator><name pos:line="37" pos:column="32">apply_state<pos:position pos:line="37" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="45">force_apply<pos:position pos:line="37" pos:column="56"/></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="58"/></condition><then pos:line="37" pos:column="58">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="17">die<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><literal type="string" pos:line="38" pos:column="21">"BUG: check_apply_state() failed"<pos:position pos:line="38" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="56"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="40" pos:column="9">argv_array_push<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">(<argument><expr><operator pos:line="40" pos:column="25">&amp;<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="26">apply_paths<pos:position pos:line="40" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="40" pos:column="39">am_path<pos:position pos:line="40" pos:column="46"/></name><argument_list pos:line="40" pos:column="46">(<argument><expr><name pos:line="40" pos:column="47">state<pos:position pos:line="40" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="54">"patch"<pos:position pos:line="40" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="64"/></expr_stmt>

	<expr_stmt><expr><name pos:line="42" pos:column="9">res<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <call><name pos:line="42" pos:column="15">apply_all_patches<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><operator pos:line="42" pos:column="33">&amp;<pos:position pos:line="42" pos:column="38"/></operator><name pos:line="42" pos:column="34">apply_state<pos:position pos:line="42" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="47">apply_paths<pos:position pos:line="42" pos:column="58"/></name><operator pos:line="42" pos:column="58">.<pos:position pos:line="42" pos:column="59"/></operator><name pos:line="42" pos:column="59">argc<pos:position pos:line="42" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="65">apply_paths<pos:position pos:line="42" pos:column="76"/></name><operator pos:line="42" pos:column="76">.<pos:position pos:line="42" pos:column="77"/></operator><name pos:line="42" pos:column="77">argv<pos:position pos:line="42" pos:column="81"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="83">options<pos:position pos:line="42" pos:column="90"/></name></expr></argument>)<pos:position pos:line="42" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="92"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="44" pos:column="9">argv_array_clear<pos:position pos:line="44" pos:column="25"/></name><argument_list pos:line="44" pos:column="25">(<argument><expr><operator pos:line="44" pos:column="26">&amp;<pos:position pos:line="44" pos:column="31"/></operator><name pos:line="44" pos:column="27">apply_paths<pos:position pos:line="44" pos:column="38"/></name></expr></argument>)<pos:position pos:line="44" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">argv_array_clear<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">(<argument><expr><operator pos:line="45" pos:column="26">&amp;<pos:position pos:line="45" pos:column="31"/></operator><name pos:line="45" pos:column="27">apply_opts<pos:position pos:line="45" pos:column="37"/></name></expr></argument>)<pos:position pos:line="45" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">clear_apply_state<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><operator pos:line="46" pos:column="27">&amp;<pos:position pos:line="46" pos:column="32"/></operator><name pos:line="46" pos:column="28">apply_state<pos:position pos:line="46" pos:column="39"/></name></expr></argument>)<pos:position pos:line="46" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="41"/></expr_stmt>

	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">res<pos:position pos:line="48" pos:column="16"/></name></expr>)<pos:position pos:line="48" pos:column="17"/></condition><then pos:line="48" pos:column="17">
		<block type="pseudo"><return pos:line="49" pos:column="17">return <expr><name pos:line="49" pos:column="24">res<pos:position pos:line="49" pos:column="27"/></name></expr>;<pos:position pos:line="49" pos:column="28"/></return></block></then></if>

	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">index_file<pos:position pos:line="51" pos:column="23"/></name></expr>)<pos:position pos:line="51" pos:column="24"/></condition><then pos:line="51" pos:column="24"> <block pos:line="51" pos:column="25">{
		<comment type="block" pos:line="52" pos:column="17">/* Reload index as apply_all_patches() will have modified it. */</comment>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">discard_cache<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">()<pos:position pos:line="53" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">read_cache_from<pos:position pos:line="54" pos:column="32"/></name><argument_list pos:line="54" pos:column="32">(<argument><expr><name pos:line="54" pos:column="33">index_file<pos:position pos:line="54" pos:column="43"/></name></expr></argument>)<pos:position pos:line="54" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if>

	<return pos:line="57" pos:column="9">return <expr><literal type="number" pos:line="57" pos:column="16">0<pos:position pos:line="57" pos:column="17"/></literal></expr>;<pos:position pos:line="57" pos:column="18"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
