<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_637_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">parse_value<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">quote<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><literal type="number" pos:line="3" pos:column="21">0<pos:position pos:line="3" pos:column="22"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="24">comment<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><literal type="number" pos:line="3" pos:column="34">0<pos:position pos:line="3" pos:column="35"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="37">space<pos:position pos:line="3" pos:column="42"/></name> <init pos:line="3" pos:column="43">= <expr><literal type="number" pos:line="3" pos:column="45">0<pos:position pos:line="3" pos:column="46"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="47"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">strbuf_reset<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">(<argument><expr><operator pos:line="5" pos:column="22">&amp;<pos:position pos:line="5" pos:column="27"/></operator><name><name pos:line="5" pos:column="23">cf<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">-&gt;<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="27">value<pos:position pos:line="5" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="34"/></expr_stmt>
	<for pos:line="6" pos:column="9">for <control pos:line="6" pos:column="13">(<init pos:line="6" pos:column="14">;<pos:position pos:line="6" pos:column="15"/></init><condition pos:line="6" pos:column="15">;<pos:position pos:line="6" pos:column="16"/></condition><incr/>)<pos:position pos:line="6" pos:column="17"/></control> <block pos:line="6" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">c<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><call><name pos:line="7" pos:column="25">get_next_char<pos:position pos:line="7" pos:column="38"/></name><argument_list pos:line="7" pos:column="38">()<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">c<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">==<pos:position pos:line="8" pos:column="25"/></operator> <literal type="char" pos:line="8" pos:column="26">'\n'<pos:position pos:line="8" pos:column="30"/></literal></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31"> <block pos:line="8" pos:column="32">{
			<if pos:line="9" pos:column="25">if <condition pos:line="9" pos:column="28">(<expr><name pos:line="9" pos:column="29">quote<pos:position pos:line="9" pos:column="34"/></name></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35"> <block pos:line="9" pos:column="36">{
				<expr_stmt><expr><name><name pos:line="10" pos:column="33">cf<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">-&gt;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="37">linenr<pos:position pos:line="10" pos:column="43"/></name></name><operator pos:line="10" pos:column="43">--<pos:position pos:line="10" pos:column="45"/></operator></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt>
				<return pos:line="11" pos:column="33">return <expr><name pos:line="11" pos:column="40">NULL<pos:position pos:line="11" pos:column="44"/></name></expr>;<pos:position pos:line="11" pos:column="45"/></return>
			}<pos:position pos:line="12" pos:column="26"/></block></then></if>
			<return pos:line="13" pos:column="25">return <expr><name><name pos:line="13" pos:column="32">cf<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">value<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">.<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="42">buf<pos:position pos:line="13" pos:column="45"/></name></name></expr>;<pos:position pos:line="13" pos:column="46"/></return>
		}<pos:position pos:line="14" pos:column="18"/></block></then></if>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">comment<pos:position pos:line="15" pos:column="28"/></name></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29">
			<block type="pseudo"><continue pos:line="16" pos:column="25">continue;<pos:position pos:line="16" pos:column="34"/></continue></block></then></if>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><call><name pos:line="17" pos:column="21">isspace<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">c<pos:position pos:line="17" pos:column="30"/></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call> <operator pos:line="17" pos:column="32">&amp;&amp;<pos:position pos:line="17" pos:column="42"/></operator> <operator pos:line="17" pos:column="35">!<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="36">quote<pos:position pos:line="17" pos:column="41"/></name></expr>)<pos:position pos:line="17" pos:column="42"/></condition><then pos:line="17" pos:column="42"> <block pos:line="17" pos:column="43">{
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><name><name pos:line="18" pos:column="29">cf<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">-&gt;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="33">value<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">.<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="39">len<pos:position pos:line="18" pos:column="42"/></name></name></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="33">space<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">++<pos:position pos:line="19" pos:column="40"/></operator></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt></block></then></if>
			<continue pos:line="20" pos:column="25">continue;<pos:position pos:line="20" pos:column="34"/></continue>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">quote<pos:position pos:line="22" pos:column="27"/></name></expr>)<pos:position pos:line="22" pos:column="28"/></condition><then pos:line="22" pos:column="28"> <block pos:line="22" pos:column="29">{
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><name pos:line="23" pos:column="29">c<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">==<pos:position pos:line="23" pos:column="33"/></operator> <literal type="char" pos:line="23" pos:column="34">';'<pos:position pos:line="23" pos:column="37"/></literal> <operator pos:line="23" pos:column="38">||<pos:position pos:line="23" pos:column="40"/></operator> <name pos:line="23" pos:column="41">c<pos:position pos:line="23" pos:column="42"/></name> <operator pos:line="23" pos:column="43">==<pos:position pos:line="23" pos:column="45"/></operator> <literal type="char" pos:line="23" pos:column="46">'#'<pos:position pos:line="23" pos:column="49"/></literal></expr>)<pos:position pos:line="23" pos:column="50"/></condition><then pos:line="23" pos:column="50"> <block pos:line="23" pos:column="51">{
				<expr_stmt><expr><name pos:line="24" pos:column="33">comment<pos:position pos:line="24" pos:column="40"/></name> <operator pos:line="24" pos:column="41">=<pos:position pos:line="24" pos:column="42"/></operator> <literal type="number" pos:line="24" pos:column="43">1<pos:position pos:line="24" pos:column="44"/></literal></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
				<continue pos:line="25" pos:column="33">continue;<pos:position pos:line="25" pos:column="42"/></continue>
			}<pos:position pos:line="26" pos:column="26"/></block></then></if>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>
		<for pos:line="28" pos:column="17">for <control pos:line="28" pos:column="21">(<init pos:line="28" pos:column="22">;<pos:position pos:line="28" pos:column="23"/></init> <condition><expr><name pos:line="28" pos:column="24">space<pos:position pos:line="28" pos:column="29"/></name></expr>;<pos:position pos:line="28" pos:column="30"/></condition> <incr><expr><name pos:line="28" pos:column="31">space<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">--<pos:position pos:line="28" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="28" pos:column="39"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">strbuf_addch<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><operator pos:line="29" pos:column="38">&amp;<pos:position pos:line="29" pos:column="43"/></operator><name><name pos:line="29" pos:column="39">cf<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">-&gt;<pos:position pos:line="29" pos:column="46"/></operator><name pos:line="29" pos:column="43">value<pos:position pos:line="29" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="50">' '<pos:position pos:line="29" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt></block></for>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">c<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">==<pos:position pos:line="30" pos:column="25"/></operator> <literal type="char" pos:line="30" pos:column="26">'\\'<pos:position pos:line="30" pos:column="30"/></literal></expr>)<pos:position pos:line="30" pos:column="31"/></condition><then pos:line="30" pos:column="31"> <block pos:line="30" pos:column="32">{
			<expr_stmt><expr><name pos:line="31" pos:column="25">c<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <call><name pos:line="31" pos:column="29">get_next_char<pos:position pos:line="31" pos:column="42"/></name><argument_list pos:line="31" pos:column="42">()<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>
			<switch pos:line="32" pos:column="25">switch <condition pos:line="32" pos:column="32">(<expr><name pos:line="32" pos:column="33">c<pos:position pos:line="32" pos:column="34"/></name></expr>)<pos:position pos:line="32" pos:column="35"/></condition> <block pos:line="32" pos:column="36">{
			<case pos:line="33" pos:column="25">case <expr><literal type="char" pos:line="33" pos:column="30">'\n'<pos:position pos:line="33" pos:column="34"/></literal></expr>:<pos:position pos:line="33" pos:column="35"/></case>
				<continue pos:line="34" pos:column="33">continue;<pos:position pos:line="34" pos:column="42"/></continue>
			<case pos:line="35" pos:column="25">case <expr><literal type="char" pos:line="35" pos:column="30">'t'<pos:position pos:line="35" pos:column="33"/></literal></expr>:<pos:position pos:line="35" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="36" pos:column="33">c<pos:position pos:line="36" pos:column="34"/></name> <operator pos:line="36" pos:column="35">=<pos:position pos:line="36" pos:column="36"/></operator> <literal type="char" pos:line="36" pos:column="37">'\t'<pos:position pos:line="36" pos:column="41"/></literal></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt>
				<break pos:line="37" pos:column="33">break;<pos:position pos:line="37" pos:column="39"/></break>
			<case pos:line="38" pos:column="25">case <expr><literal type="char" pos:line="38" pos:column="30">'b'<pos:position pos:line="38" pos:column="33"/></literal></expr>:<pos:position pos:line="38" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="39" pos:column="33">c<pos:position pos:line="39" pos:column="34"/></name> <operator pos:line="39" pos:column="35">=<pos:position pos:line="39" pos:column="36"/></operator> <literal type="char" pos:line="39" pos:column="37">'\b'<pos:position pos:line="39" pos:column="41"/></literal></expr>;<pos:position pos:line="39" pos:column="42"/></expr_stmt>
				<break pos:line="40" pos:column="33">break;<pos:position pos:line="40" pos:column="39"/></break>
			<case pos:line="41" pos:column="25">case <expr><literal type="char" pos:line="41" pos:column="30">'n'<pos:position pos:line="41" pos:column="33"/></literal></expr>:<pos:position pos:line="41" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="42" pos:column="33">c<pos:position pos:line="42" pos:column="34"/></name> <operator pos:line="42" pos:column="35">=<pos:position pos:line="42" pos:column="36"/></operator> <literal type="char" pos:line="42" pos:column="37">'\n'<pos:position pos:line="42" pos:column="41"/></literal></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>
				<break pos:line="43" pos:column="33">break;<pos:position pos:line="43" pos:column="39"/></break>
			<comment type="block" pos:line="44" pos:column="25">/* Some characters escape as themselves */</comment>
			<case pos:line="45" pos:column="25">case <expr><literal type="char" pos:line="45" pos:column="30">'\\'<pos:position pos:line="45" pos:column="34"/></literal></expr>:<pos:position pos:line="45" pos:column="35"/></case> <case pos:line="45" pos:column="36">case <expr><literal type="char" pos:line="45" pos:column="41">'"'<pos:position pos:line="45" pos:column="44"/></literal></expr>:<pos:position pos:line="45" pos:column="45"/></case>
				<break pos:line="46" pos:column="33">break;<pos:position pos:line="46" pos:column="39"/></break>
			<comment type="block" pos:line="47" pos:column="25">/* Reject unknown escape sequences */</comment>
			<default pos:line="48" pos:column="25">default:<pos:position pos:line="48" pos:column="33"/></default>
				<return pos:line="49" pos:column="33">return <expr><name pos:line="49" pos:column="40">NULL<pos:position pos:line="49" pos:column="44"/></name></expr>;<pos:position pos:line="49" pos:column="45"/></return>
			}<pos:position pos:line="50" pos:column="26"/></block></switch>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">strbuf_addch<pos:position pos:line="51" pos:column="37"/></name><argument_list pos:line="51" pos:column="37">(<argument><expr><operator pos:line="51" pos:column="38">&amp;<pos:position pos:line="51" pos:column="43"/></operator><name><name pos:line="51" pos:column="39">cf<pos:position pos:line="51" pos:column="41"/></name><operator pos:line="51" pos:column="41">-&gt;<pos:position pos:line="51" pos:column="46"/></operator><name pos:line="51" pos:column="43">value<pos:position pos:line="51" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="50">c<pos:position pos:line="51" pos:column="51"/></name></expr></argument>)<pos:position pos:line="51" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="53"/></expr_stmt>
			<continue pos:line="52" pos:column="25">continue;<pos:position pos:line="52" pos:column="34"/></continue>
		}<pos:position pos:line="53" pos:column="18"/></block></then></if>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name pos:line="54" pos:column="21">c<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">==<pos:position pos:line="54" pos:column="25"/></operator> <literal type="char" pos:line="54" pos:column="26">'"'<pos:position pos:line="54" pos:column="29"/></literal></expr>)<pos:position pos:line="54" pos:column="30"/></condition><then pos:line="54" pos:column="30"> <block pos:line="54" pos:column="31">{
			<expr_stmt><expr><name pos:line="55" pos:column="25">quote<pos:position pos:line="55" pos:column="30"/></name> <operator pos:line="55" pos:column="31">=<pos:position pos:line="55" pos:column="32"/></operator> <literal type="number" pos:line="55" pos:column="33">1<pos:position pos:line="55" pos:column="34"/></literal><operator pos:line="55" pos:column="34">-<pos:position pos:line="55" pos:column="35"/></operator><name pos:line="55" pos:column="35">quote<pos:position pos:line="55" pos:column="40"/></name></expr>;<pos:position pos:line="55" pos:column="41"/></expr_stmt>
			<continue pos:line="56" pos:column="25">continue;<pos:position pos:line="56" pos:column="34"/></continue>
		}<pos:position pos:line="57" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">strbuf_addch<pos:position pos:line="58" pos:column="29"/></name><argument_list pos:line="58" pos:column="29">(<argument><expr><operator pos:line="58" pos:column="30">&amp;<pos:position pos:line="58" pos:column="35"/></operator><name><name pos:line="58" pos:column="31">cf<pos:position pos:line="58" pos:column="33"/></name><operator pos:line="58" pos:column="33">-&gt;<pos:position pos:line="58" pos:column="38"/></operator><name pos:line="58" pos:column="35">value<pos:position pos:line="58" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="42">c<pos:position pos:line="58" pos:column="43"/></name></expr></argument>)<pos:position pos:line="58" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="59" pos:column="10"/></block></for>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
