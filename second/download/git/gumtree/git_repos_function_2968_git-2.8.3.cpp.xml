<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2968_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_plain_rerere<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">string_list<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">rr<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">fd<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">string_list<pos:position pos:line="3" pos:column="27"/></name></name></type> <name pos:line="3" pos:column="28">conflict<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><name pos:line="3" pos:column="39">STRING_LIST_INIT_DUP<pos:position pos:line="3" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">string_list<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">update<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name pos:line="4" pos:column="37">STRING_LIST_INIT_DUP<pos:position pos:line="4" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">find_conflict<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><operator pos:line="7" pos:column="23">&amp;<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="24">conflict<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * MERGE_RR records paths with conflicts immediately after
	 * merge failed.  Some of the conflicted paths might have been
	 * hand resolved in the working tree since then, but the
	 * initial run would catch all and register their preimages.
	 */</comment>
	<for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init><expr><name pos:line="15" pos:column="14">i<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>;<pos:position pos:line="15" pos:column="20"/></init> <condition><expr><name pos:line="15" pos:column="21">i<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&lt;<pos:position pos:line="15" pos:column="27"/></operator> <name><name pos:line="15" pos:column="25">conflict<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">.<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">nr<pos:position pos:line="15" pos:column="36"/></name></name></expr>;<pos:position pos:line="15" pos:column="37"/></condition> <incr><expr><name pos:line="15" pos:column="38">i<pos:position pos:line="15" pos:column="39"/></name><operator pos:line="15" pos:column="39">++<pos:position pos:line="15" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="42"/></control> <block pos:line="15" pos:column="43">{
		<decl_stmt><decl><type><name><name pos:line="16" pos:column="17">struct<pos:position pos:line="16" pos:column="23"/></name> <name pos:line="16" pos:column="24">rerere_id<pos:position pos:line="16" pos:column="33"/></name></name> <modifier pos:line="16" pos:column="34">*<pos:position pos:line="16" pos:column="35"/></modifier></type><name pos:line="16" pos:column="35">id<pos:position pos:line="16" pos:column="37"/></name></decl>;<pos:position pos:line="16" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">unsigned<pos:position pos:line="17" pos:column="25"/></name> <name pos:line="17" pos:column="26">char<pos:position pos:line="17" pos:column="30"/></name></type> <name><name pos:line="17" pos:column="31">sha1<pos:position pos:line="17" pos:column="35"/></name><index pos:line="17" pos:column="35">[<expr><literal type="number" pos:line="17" pos:column="36">20<pos:position pos:line="17" pos:column="38"/></literal></expr>]<pos:position pos:line="17" pos:column="39"/></index></name></decl>;<pos:position pos:line="17" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="18" pos:column="17">const<pos:position pos:line="18" pos:column="22"/></specifier> <name pos:line="18" pos:column="23">char<pos:position pos:line="18" pos:column="27"/></name> <modifier pos:line="18" pos:column="28">*<pos:position pos:line="18" pos:column="29"/></modifier></type><name pos:line="18" pos:column="29">path<pos:position pos:line="18" pos:column="33"/></name> <init pos:line="18" pos:column="34">= <expr><name><name pos:line="18" pos:column="36">conflict<pos:position pos:line="18" pos:column="44"/></name><operator pos:line="18" pos:column="44">.<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="45">items<pos:position pos:line="18" pos:column="50"/></name><index pos:line="18" pos:column="50">[<expr><name pos:line="18" pos:column="51">i<pos:position pos:line="18" pos:column="52"/></name></expr>]<pos:position pos:line="18" pos:column="53"/></index></name><operator pos:line="18" pos:column="53">.<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="54">string<pos:position pos:line="18" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="61"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">int<pos:position pos:line="19" pos:column="20"/></name></type> <name pos:line="19" pos:column="21">ret<pos:position pos:line="19" pos:column="24"/></name></decl>;<pos:position pos:line="19" pos:column="25"/></decl_stmt>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><call><name pos:line="21" pos:column="21">string_list_has_string<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">rr<pos:position pos:line="21" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="48">path<pos:position pos:line="21" pos:column="52"/></name></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="54"/></condition><then pos:line="21" pos:column="54">
			<block type="pseudo"><continue pos:line="22" pos:column="25">continue;<pos:position pos:line="22" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="24" pos:column="17">/*
		 * Ask handle_file() to scan and assign a
		 * conflict ID.  No need to write anything out
		 * yet.
		 */</comment>
		<expr_stmt><expr><name pos:line="29" pos:column="17">ret<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <call><name pos:line="29" pos:column="23">handle_file<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">path<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="41">sha1<pos:position pos:line="29" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="47">NULL<pos:position pos:line="29" pos:column="51"/></name></expr></argument>)<pos:position pos:line="29" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="53"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">ret<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">&lt;<pos:position pos:line="30" pos:column="29"/></operator> <literal type="number" pos:line="30" pos:column="27">1<pos:position pos:line="30" pos:column="28"/></literal></expr>)<pos:position pos:line="30" pos:column="29"/></condition><then pos:line="30" pos:column="29">
			<block type="pseudo"><continue pos:line="31" pos:column="25">continue;<pos:position pos:line="31" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="33" pos:column="17">id<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <call><name pos:line="33" pos:column="22">new_rerere_id<pos:position pos:line="33" pos:column="35"/></name><argument_list pos:line="33" pos:column="35">(<argument><expr><name pos:line="33" pos:column="36">sha1<pos:position pos:line="33" pos:column="40"/></name></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">string_list_insert<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><name pos:line="34" pos:column="36">rr<pos:position pos:line="34" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="40">path<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call><operator pos:line="34" pos:column="45">-&gt;<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="47">util<pos:position pos:line="34" pos:column="51"/></name> <operator pos:line="34" pos:column="52">=<pos:position pos:line="34" pos:column="53"/></operator> <name pos:line="34" pos:column="54">id<pos:position pos:line="34" pos:column="56"/></name></expr>;<pos:position pos:line="34" pos:column="57"/></expr_stmt>

		<comment type="block" pos:line="36" pos:column="17">/*
		 * If the directory does not exist, create
		 * it.  mkdir_in_gitdir() will fail with
		 * EEXIST if there already is one.
		 *
		 * NEEDSWORK: make sure "gc" does not remove
		 * preimage without removing the directory.
		 */</comment>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><call><name pos:line="44" pos:column="21">mkdir_in_gitdir<pos:position pos:line="44" pos:column="36"/></name><argument_list pos:line="44" pos:column="36">(<argument><expr><call><name pos:line="44" pos:column="37">rerere_path<pos:position pos:line="44" pos:column="48"/></name><argument_list pos:line="44" pos:column="48">(<argument><expr><name pos:line="44" pos:column="49">id<pos:position pos:line="44" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="53">NULL<pos:position pos:line="44" pos:column="57"/></name></expr></argument>)<pos:position pos:line="44" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="60"/></condition><then pos:line="44" pos:column="60">
			<block type="pseudo"><continue pos:line="45" pos:column="25">continue;<pos:position pos:line="45" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="47" pos:column="17">/*
		 * We are the first to encounter this
		 * conflict.  Ask handle_file() to write the
		 * normalized contents to the "preimage" file.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">handle_file<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">(<argument><expr><name pos:line="52" pos:column="29">path<pos:position pos:line="52" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="35">NULL<pos:position pos:line="52" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="52" pos:column="41">rerere_path<pos:position pos:line="52" pos:column="52"/></name><argument_list pos:line="52" pos:column="52">(<argument><expr><name pos:line="52" pos:column="53">id<pos:position pos:line="52" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="57">"preimage"<pos:position pos:line="52" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">fprintf<pos:position pos:line="53" pos:column="24"/></name><argument_list pos:line="53" pos:column="24">(<argument><expr><name pos:line="53" pos:column="25">stderr<pos:position pos:line="53" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="33">"Recorded preimage for '%s'\n"<pos:position pos:line="53" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="65">path<pos:position pos:line="53" pos:column="69"/></name></expr></argument>)<pos:position pos:line="53" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="71"/></expr_stmt>
	}<pos:position pos:line="54" pos:column="10"/></block></for>

	<for pos:line="56" pos:column="9">for <control pos:line="56" pos:column="13">(<init><expr><name pos:line="56" pos:column="14">i<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <literal type="number" pos:line="56" pos:column="18">0<pos:position pos:line="56" pos:column="19"/></literal></expr>;<pos:position pos:line="56" pos:column="20"/></init> <condition><expr><name pos:line="56" pos:column="21">i<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">&lt;<pos:position pos:line="56" pos:column="27"/></operator> <name><name pos:line="56" pos:column="25">rr<pos:position pos:line="56" pos:column="27"/></name><operator pos:line="56" pos:column="27">-&gt;<pos:position pos:line="56" pos:column="32"/></operator><name pos:line="56" pos:column="29">nr<pos:position pos:line="56" pos:column="31"/></name></name></expr>;<pos:position pos:line="56" pos:column="32"/></condition> <incr><expr><name pos:line="56" pos:column="33">i<pos:position pos:line="56" pos:column="34"/></name><operator pos:line="56" pos:column="34">++<pos:position pos:line="56" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="56" pos:column="37"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="17">do_rerere_one_path<pos:position pos:line="57" pos:column="35"/></name><argument_list pos:line="57" pos:column="35">(<argument><expr><operator pos:line="57" pos:column="36">&amp;<pos:position pos:line="57" pos:column="41"/></operator><name><name pos:line="57" pos:column="37">rr<pos:position pos:line="57" pos:column="39"/></name><operator pos:line="57" pos:column="39">-&gt;<pos:position pos:line="57" pos:column="44"/></operator><name pos:line="57" pos:column="41">items<pos:position pos:line="57" pos:column="46"/></name><index pos:line="57" pos:column="46">[<expr><name pos:line="57" pos:column="47">i<pos:position pos:line="57" pos:column="48"/></name></expr>]<pos:position pos:line="57" pos:column="49"/></index></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="51">&amp;<pos:position pos:line="57" pos:column="56"/></operator><name pos:line="57" pos:column="52">update<pos:position pos:line="57" pos:column="58"/></name></expr></argument>)<pos:position pos:line="57" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="60"/></expr_stmt></block></for>

	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name><name pos:line="59" pos:column="13">update<pos:position pos:line="59" pos:column="19"/></name><operator pos:line="59" pos:column="19">.<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="20">nr<pos:position pos:line="59" pos:column="22"/></name></name></expr>)<pos:position pos:line="59" pos:column="23"/></condition><then pos:line="59" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="17">update_paths<pos:position pos:line="60" pos:column="29"/></name><argument_list pos:line="60" pos:column="29">(<argument><expr><operator pos:line="60" pos:column="30">&amp;<pos:position pos:line="60" pos:column="35"/></operator><name pos:line="60" pos:column="31">update<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt></block></then></if>

	<return pos:line="62" pos:column="9">return <expr><call><name pos:line="62" pos:column="16">write_rr<pos:position pos:line="62" pos:column="24"/></name><argument_list pos:line="62" pos:column="24">(<argument><expr><name pos:line="62" pos:column="25">rr<pos:position pos:line="62" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="29">fd<pos:position pos:line="62" pos:column="31"/></name></expr></argument>)<pos:position pos:line="62" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="33"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
