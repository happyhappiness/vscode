<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3500_git-2.4.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">format_tracking_info<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">branch<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">branch<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="49">struct<pos:position pos:line="1" pos:column="55"/></name> <name pos:line="1" pos:column="56">strbuf<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">sb<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ours<pos:position pos:line="3" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="19">theirs<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">base<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">upstream_is_gone<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><literal type="number" pos:line="5" pos:column="32">0<pos:position pos:line="5" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>

	<switch pos:line="7" pos:column="9">switch <condition pos:line="7" pos:column="16">(<expr><call><name pos:line="7" pos:column="17">stat_tracking_info<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><name pos:line="7" pos:column="36">branch<pos:position pos:line="7" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="44">&amp;<pos:position pos:line="7" pos:column="49"/></operator><name pos:line="7" pos:column="45">ours<pos:position pos:line="7" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="51">&amp;<pos:position pos:line="7" pos:column="56"/></operator><name pos:line="7" pos:column="52">theirs<pos:position pos:line="7" pos:column="58"/></name></expr></argument>)<pos:position pos:line="7" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="60"/></condition> <block pos:line="7" pos:column="61">{
	<case pos:line="8" pos:column="9">case <expr><literal type="number" pos:line="8" pos:column="14">0<pos:position pos:line="8" pos:column="15"/></literal></expr>:<pos:position pos:line="8" pos:column="16"/></case>
		<comment type="block" pos:line="9" pos:column="17">/* no base */</comment>
		<return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return>
	<case pos:line="11" pos:column="9">case <expr><operator pos:line="11" pos:column="14">-<pos:position pos:line="11" pos:column="15"/></operator><literal type="number" pos:line="11" pos:column="15">1<pos:position pos:line="11" pos:column="16"/></literal></expr>:<pos:position pos:line="11" pos:column="17"/></case>
		<comment type="block" pos:line="12" pos:column="17">/* with "gone" base */</comment>
		<expr_stmt><expr><name pos:line="13" pos:column="17">upstream_is_gone<pos:position pos:line="13" pos:column="33"/></name> <operator pos:line="13" pos:column="34">=<pos:position pos:line="13" pos:column="35"/></operator> <literal type="number" pos:line="13" pos:column="36">1<pos:position pos:line="13" pos:column="37"/></literal></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
		<break pos:line="14" pos:column="17">break;<pos:position pos:line="14" pos:column="23"/></break>
	<default pos:line="15" pos:column="9">default:<pos:position pos:line="15" pos:column="17"/></default>
		<comment type="block" pos:line="16" pos:column="17">/* with base */</comment>
		<break pos:line="17" pos:column="17">break;<pos:position pos:line="17" pos:column="23"/></break>
	}<pos:position pos:line="18" pos:column="10"/></block></switch>

	<expr_stmt><expr><name pos:line="20" pos:column="9">base<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <call><name pos:line="20" pos:column="16">shorten_unambiguous_ref<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name><name pos:line="20" pos:column="40">branch<pos:position pos:line="20" pos:column="46"/></name><operator pos:line="20" pos:column="46">-&gt;<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="48">merge<pos:position pos:line="20" pos:column="53"/></name><index pos:line="20" pos:column="53">[<expr><literal type="number" pos:line="20" pos:column="54">0<pos:position pos:line="20" pos:column="55"/></literal></expr>]<pos:position pos:line="20" pos:column="56"/></index></name><operator pos:line="20" pos:column="56">-&gt;<pos:position pos:line="20" pos:column="61"/></operator><name pos:line="20" pos:column="58">dst<pos:position pos:line="20" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="63">0<pos:position pos:line="20" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="66"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">upstream_is_gone<pos:position pos:line="21" pos:column="29"/></name></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30"> <block pos:line="21" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">strbuf_addf<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">sb<pos:position pos:line="22" pos:column="31"/></name></expr></argument>,
			<argument><expr><call><name pos:line="23" pos:column="25">_<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><literal type="string" pos:line="23" pos:column="27">"Your branch is based on '%s', but the upstream is gone.\n"<pos:position pos:line="23" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="87"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="24" pos:column="25">base<pos:position pos:line="24" pos:column="29"/></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">advice_status_hints<pos:position pos:line="25" pos:column="40"/></name></expr>)<pos:position pos:line="25" pos:column="41"/></condition><then pos:line="25" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="25">strbuf_addf<pos:position pos:line="26" pos:column="36"/></name><argument_list pos:line="26" pos:column="36">(<argument><expr><name pos:line="26" pos:column="37">sb<pos:position pos:line="26" pos:column="39"/></name></expr></argument>,
				<argument><expr><call><name pos:line="27" pos:column="33">_<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><literal type="string" pos:line="27" pos:column="35">"  (use \"git branch --unset-upstream\" to fixup)\n"<pos:position pos:line="27" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="90"/></expr_stmt></block></then></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then> <elseif pos:line="28" pos:column="11">else <if pos:line="28" pos:column="16">if <condition pos:line="28" pos:column="19">(<expr><operator pos:line="28" pos:column="20">!<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">ours<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">&amp;&amp;<pos:position pos:line="28" pos:column="36"/></operator> <operator pos:line="28" pos:column="29">!<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="30">theirs<pos:position pos:line="28" pos:column="36"/></name></expr>)<pos:position pos:line="28" pos:column="37"/></condition><then pos:line="28" pos:column="37"> <block pos:line="28" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">strbuf_addf<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">sb<pos:position pos:line="29" pos:column="31"/></name></expr></argument>,
			<argument><expr><call><name pos:line="30" pos:column="25">_<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><literal type="string" pos:line="30" pos:column="27">"Your branch is up-to-date with '%s'.\n"<pos:position pos:line="30" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="68"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="31" pos:column="25">base<pos:position pos:line="31" pos:column="29"/></name></expr></argument>)<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if></elseif> <elseif pos:line="32" pos:column="11">else <if pos:line="32" pos:column="16">if <condition pos:line="32" pos:column="19">(<expr><operator pos:line="32" pos:column="20">!<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="21">theirs<pos:position pos:line="32" pos:column="27"/></name></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28"> <block pos:line="32" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">strbuf_addf<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name pos:line="33" pos:column="29">sb<pos:position pos:line="33" pos:column="31"/></name></expr></argument>,
			<argument><expr><call><name pos:line="34" pos:column="25">Q_<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><literal type="string" pos:line="34" pos:column="28">"Your branch is ahead of '%s' by %d commit.\n"<pos:position pos:line="34" pos:column="74"/></literal></expr></argument>,
			   <argument><expr><literal type="string" pos:line="35" pos:column="28">"Your branch is ahead of '%s' by %d commits.\n"<pos:position pos:line="35" pos:column="75"/></literal></expr></argument>,
			   <argument><expr><name pos:line="36" pos:column="28">ours<pos:position pos:line="36" pos:column="32"/></name></expr></argument>)<pos:position pos:line="36" pos:column="33"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="37" pos:column="25">base<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="31">ours<pos:position pos:line="37" pos:column="35"/></name></expr></argument>)<pos:position pos:line="37" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">advice_status_hints<pos:position pos:line="38" pos:column="40"/></name></expr>)<pos:position pos:line="38" pos:column="41"/></condition><then pos:line="38" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="25">strbuf_addf<pos:position pos:line="39" pos:column="36"/></name><argument_list pos:line="39" pos:column="36">(<argument><expr><name pos:line="39" pos:column="37">sb<pos:position pos:line="39" pos:column="39"/></name></expr></argument>,
				<argument><expr><call><name pos:line="40" pos:column="33">_<pos:position pos:line="40" pos:column="34"/></name><argument_list pos:line="40" pos:column="34">(<argument><expr><literal type="string" pos:line="40" pos:column="35">"  (use \"git push\" to publish your local commits)\n"<pos:position pos:line="40" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="92"/></expr_stmt></block></then></if>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if></elseif> <elseif pos:line="41" pos:column="11">else <if pos:line="41" pos:column="16">if <condition pos:line="41" pos:column="19">(<expr><operator pos:line="41" pos:column="20">!<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="21">ours<pos:position pos:line="41" pos:column="25"/></name></expr>)<pos:position pos:line="41" pos:column="26"/></condition><then pos:line="41" pos:column="26"> <block pos:line="41" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">strbuf_addf<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">sb<pos:position pos:line="42" pos:column="31"/></name></expr></argument>,
			<argument><expr><call><name pos:line="43" pos:column="25">Q_<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">(<argument><expr><literal type="string" pos:line="43" pos:column="28">"Your branch is behind '%s' by %d commit, "<pos:position pos:line="43" pos:column="71"/></literal>
			       <literal type="string" pos:line="44" pos:column="32">"and can be fast-forwarded.\n"<pos:position pos:line="44" pos:column="62"/></literal></expr></argument>,
			   <argument><expr><literal type="string" pos:line="45" pos:column="28">"Your branch is behind '%s' by %d commits, "<pos:position pos:line="45" pos:column="72"/></literal>
			       <literal type="string" pos:line="46" pos:column="32">"and can be fast-forwarded.\n"<pos:position pos:line="46" pos:column="62"/></literal></expr></argument>,
			   <argument><expr><name pos:line="47" pos:column="28">theirs<pos:position pos:line="47" pos:column="34"/></name></expr></argument>)<pos:position pos:line="47" pos:column="35"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="48" pos:column="25">base<pos:position pos:line="48" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="31">theirs<pos:position pos:line="48" pos:column="37"/></name></expr></argument>)<pos:position pos:line="48" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">advice_status_hints<pos:position pos:line="49" pos:column="40"/></name></expr>)<pos:position pos:line="49" pos:column="41"/></condition><then pos:line="49" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="25">strbuf_addf<pos:position pos:line="50" pos:column="36"/></name><argument_list pos:line="50" pos:column="36">(<argument><expr><name pos:line="50" pos:column="37">sb<pos:position pos:line="50" pos:column="39"/></name></expr></argument>,
				<argument><expr><call><name pos:line="51" pos:column="33">_<pos:position pos:line="51" pos:column="34"/></name><argument_list pos:line="51" pos:column="34">(<argument><expr><literal type="string" pos:line="51" pos:column="35">"  (use \"git pull\" to update your local branch)\n"<pos:position pos:line="51" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="90"/></expr_stmt></block></then></if>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if></elseif> <else pos:line="52" pos:column="11">else <block pos:line="52" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">strbuf_addf<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name pos:line="53" pos:column="29">sb<pos:position pos:line="53" pos:column="31"/></name></expr></argument>,
			<argument><expr><call><name pos:line="54" pos:column="25">Q_<pos:position pos:line="54" pos:column="27"/></name><argument_list pos:line="54" pos:column="27">(<argument><expr><literal type="string" pos:line="54" pos:column="28">"Your branch and '%s' have diverged,\n"<pos:position pos:line="54" pos:column="67"/></literal>
			       <literal type="string" pos:line="55" pos:column="32">"and have %d and %d different commit each, "<pos:position pos:line="55" pos:column="76"/></literal>
			       <literal type="string" pos:line="56" pos:column="32">"respectively.\n"<pos:position pos:line="56" pos:column="49"/></literal></expr></argument>,
			   <argument><expr><literal type="string" pos:line="57" pos:column="28">"Your branch and '%s' have diverged,\n"<pos:position pos:line="57" pos:column="67"/></literal>
			       <literal type="string" pos:line="58" pos:column="32">"and have %d and %d different commits each, "<pos:position pos:line="58" pos:column="77"/></literal>
			       <literal type="string" pos:line="59" pos:column="32">"respectively.\n"<pos:position pos:line="59" pos:column="49"/></literal></expr></argument>,
			   <argument><expr><name pos:line="60" pos:column="28">theirs<pos:position pos:line="60" pos:column="34"/></name></expr></argument>)<pos:position pos:line="60" pos:column="35"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="61" pos:column="25">base<pos:position pos:line="61" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="31">ours<pos:position pos:line="61" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="37">theirs<pos:position pos:line="61" pos:column="43"/></name></expr></argument>)<pos:position pos:line="61" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="45"/></expr_stmt>
		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name pos:line="62" pos:column="21">advice_status_hints<pos:position pos:line="62" pos:column="40"/></name></expr>)<pos:position pos:line="62" pos:column="41"/></condition><then pos:line="62" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="25">strbuf_addf<pos:position pos:line="63" pos:column="36"/></name><argument_list pos:line="63" pos:column="36">(<argument><expr><name pos:line="63" pos:column="37">sb<pos:position pos:line="63" pos:column="39"/></name></expr></argument>,
				<argument><expr><call><name pos:line="64" pos:column="33">_<pos:position pos:line="64" pos:column="34"/></name><argument_list pos:line="64" pos:column="34">(<argument><expr><literal type="string" pos:line="64" pos:column="35">"  (use \"git pull\" to merge the remote branch into yours)\n"<pos:position pos:line="64" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="98"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="100"/></expr_stmt></block></then></if>
	}<pos:position pos:line="65" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="66" pos:column="9">free<pos:position pos:line="66" pos:column="13"/></name><argument_list pos:line="66" pos:column="13">(<argument><expr><name pos:line="66" pos:column="14">base<pos:position pos:line="66" pos:column="18"/></name></expr></argument>)<pos:position pos:line="66" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="20"/></expr_stmt>
	<return pos:line="67" pos:column="9">return <expr><literal type="number" pos:line="67" pos:column="16">1<pos:position pos:line="67" pos:column="17"/></literal></expr>;<pos:position pos:line="67" pos:column="18"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
