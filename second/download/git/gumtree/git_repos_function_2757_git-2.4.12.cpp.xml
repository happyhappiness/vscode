<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2757_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">handle_cache<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">path<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">unsigned<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">sha1<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="64">const<pos:position pos:line="1" pos:column="69"/></specifier> <name pos:line="1" pos:column="70">char<pos:position pos:line="1" pos:column="74"/></name> <modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">output<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="83"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">mmfile_t<pos:position pos:line="3" pos:column="17"/></name></type> <name><name pos:line="3" pos:column="18">mmfile<pos:position pos:line="3" pos:column="24"/></name><index pos:line="3" pos:column="24">[<expr><literal type="number" pos:line="3" pos:column="25">3<pos:position pos:line="3" pos:column="26"/></literal></expr>]<pos:position pos:line="3" pos:column="27"/></index></name> <init pos:line="3" pos:column="28">= <expr><block pos:line="3" pos:column="30">{<expr><block pos:line="3" pos:column="31">{<expr><name pos:line="3" pos:column="32">NULL<pos:position pos:line="3" pos:column="36"/></name></expr>}<pos:position pos:line="3" pos:column="37"/></block></expr>}<pos:position pos:line="3" pos:column="38"/></block></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">mmbuffer_t<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">result<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><block pos:line="4" pos:column="29">{<expr><name pos:line="4" pos:column="30">NULL<pos:position pos:line="4" pos:column="34"/></name></expr>, <expr><literal type="number" pos:line="4" pos:column="36">0<pos:position pos:line="4" pos:column="37"/></literal></expr>}<pos:position pos:line="4" pos:column="38"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name><name pos:line="5" pos:column="15">struct<pos:position pos:line="5" pos:column="21"/></name> <name pos:line="5" pos:column="22">cache_entry<pos:position pos:line="5" pos:column="33"/></name></name> <modifier pos:line="5" pos:column="34">*<pos:position pos:line="5" pos:column="35"/></modifier></type><name pos:line="5" pos:column="35">ce<pos:position pos:line="5" pos:column="37"/></name></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">pos<pos:position pos:line="6" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="18">len<pos:position pos:line="6" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="23">i<pos:position pos:line="6" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="26">hunk_no<pos:position pos:line="6" pos:column="33"/></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">rerere_io_mem<pos:position pos:line="7" pos:column="29"/></name></name></type> <name pos:line="7" pos:column="30">io<pos:position pos:line="7" pos:column="32"/></name></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">marker_size<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><call><name pos:line="8" pos:column="27">ll_merge_marker_size<pos:position pos:line="8" pos:column="47"/></name><argument_list pos:line="8" pos:column="47">(<argument><expr><name pos:line="8" pos:column="48">path<pos:position pos:line="8" pos:column="52"/></name></expr></argument>)<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="54"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/*
	 * Reproduce the conflicted merge in-core
	 */</comment>
	<expr_stmt><expr><name pos:line="13" pos:column="9">len<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">strlen<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">path<pos:position pos:line="13" pos:column="26"/></name></expr></argument>)<pos:position pos:line="13" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="14" pos:column="9">pos<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <call><name pos:line="14" pos:column="15">cache_name_pos<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">path<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="36">len<pos:position pos:line="14" pos:column="39"/></name></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><literal type="number" pos:line="15" pos:column="13">0<pos:position pos:line="15" pos:column="14"/></literal> <operator pos:line="15" pos:column="15">&lt;=<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="18">pos<pos:position pos:line="15" pos:column="21"/></name></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">-<pos:position pos:line="16" pos:column="25"/></operator><literal type="number" pos:line="16" pos:column="25">1<pos:position pos:line="16" pos:column="26"/></literal></expr>;<pos:position pos:line="16" pos:column="27"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="17" pos:column="9">pos<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <operator pos:line="17" pos:column="15">-<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="16">pos<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">-<pos:position pos:line="17" pos:column="21"/></operator> <literal type="number" pos:line="17" pos:column="22">1<pos:position pos:line="17" pos:column="23"/></literal></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>

	<for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">(<init><expr><name pos:line="19" pos:column="14">i<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <literal type="number" pos:line="19" pos:column="18">0<pos:position pos:line="19" pos:column="19"/></literal></expr>;<pos:position pos:line="19" pos:column="20"/></init> <condition><expr><name pos:line="19" pos:column="21">i<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">&lt;<pos:position pos:line="19" pos:column="27"/></operator> <literal type="number" pos:line="19" pos:column="25">3<pos:position pos:line="19" pos:column="26"/></literal></expr>;<pos:position pos:line="19" pos:column="27"/></condition> <incr><expr><name pos:line="19" pos:column="28">i<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">++<pos:position pos:line="19" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="19" pos:column="32"/></control> <block pos:line="19" pos:column="33">{
		<decl_stmt><decl><type><name><name pos:line="20" pos:column="17">enum<pos:position pos:line="20" pos:column="21"/></name> <name pos:line="20" pos:column="22">object_type<pos:position pos:line="20" pos:column="33"/></name></name></type> <name pos:line="20" pos:column="34">type<pos:position pos:line="20" pos:column="38"/></name></decl>;<pos:position pos:line="20" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">unsigned<pos:position pos:line="21" pos:column="25"/></name> <name pos:line="21" pos:column="26">long<pos:position pos:line="21" pos:column="30"/></name></type> <name pos:line="21" pos:column="31">size<pos:position pos:line="21" pos:column="35"/></name></decl>;<pos:position pos:line="21" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">int<pos:position pos:line="22" pos:column="20"/></name></type> <name pos:line="22" pos:column="21">j<pos:position pos:line="22" pos:column="22"/></name></decl>;<pos:position pos:line="22" pos:column="23"/></decl_stmt>

		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">active_nr<pos:position pos:line="24" pos:column="30"/></name> <operator pos:line="24" pos:column="31">&lt;=<pos:position pos:line="24" pos:column="36"/></operator> <name pos:line="24" pos:column="34">pos<pos:position pos:line="24" pos:column="37"/></name></expr>)<pos:position pos:line="24" pos:column="38"/></condition><then pos:line="24" pos:column="38">
			<block type="pseudo"><break pos:line="25" pos:column="25">break;<pos:position pos:line="25" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="26" pos:column="17">ce<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <name><name pos:line="26" pos:column="22">active_cache<pos:position pos:line="26" pos:column="34"/></name><index pos:line="26" pos:column="34">[<expr><name pos:line="26" pos:column="35">pos<pos:position pos:line="26" pos:column="38"/></name><operator pos:line="26" pos:column="38">++<pos:position pos:line="26" pos:column="40"/></operator></expr>]<pos:position pos:line="26" pos:column="41"/></index></name></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">ce_namelen<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">ce<pos:position pos:line="27" pos:column="34"/></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call> <operator pos:line="27" pos:column="36">!=<pos:position pos:line="27" pos:column="38"/></operator> <name pos:line="27" pos:column="39">len<pos:position pos:line="27" pos:column="42"/></name> <operator pos:line="27" pos:column="43">||<pos:position pos:line="27" pos:column="45"/></operator> <call><name pos:line="27" pos:column="46">memcmp<pos:position pos:line="27" pos:column="52"/></name><argument_list pos:line="27" pos:column="52">(<argument><expr><name><name pos:line="27" pos:column="53">ce<pos:position pos:line="27" pos:column="55"/></name><operator pos:line="27" pos:column="55">-&gt;<pos:position pos:line="27" pos:column="60"/></operator><name pos:line="27" pos:column="57">name<pos:position pos:line="27" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="63">path<pos:position pos:line="27" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="69">len<pos:position pos:line="27" pos:column="72"/></name></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="74"/></condition><then pos:line="27" pos:column="74">
			<block type="pseudo"><continue pos:line="28" pos:column="25">continue;<pos:position pos:line="28" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="29" pos:column="17">j<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <call><name pos:line="29" pos:column="21">ce_stage<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">ce<pos:position pos:line="29" pos:column="32"/></name></expr></argument>)<pos:position pos:line="29" pos:column="33"/></argument_list></call> <operator pos:line="29" pos:column="34">-<pos:position pos:line="29" pos:column="35"/></operator> <literal type="number" pos:line="29" pos:column="36">1<pos:position pos:line="29" pos:column="37"/></literal></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">mmfile<pos:position pos:line="30" pos:column="23"/></name><index pos:line="30" pos:column="23">[<expr><name pos:line="30" pos:column="24">j<pos:position pos:line="30" pos:column="25"/></name></expr>]<pos:position pos:line="30" pos:column="26"/></index></name><operator pos:line="30" pos:column="26">.<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="27">ptr<pos:position pos:line="30" pos:column="30"/></name> <operator pos:line="30" pos:column="31">=<pos:position pos:line="30" pos:column="32"/></operator> <call><name pos:line="30" pos:column="33">read_sha1_file<pos:position pos:line="30" pos:column="47"/></name><argument_list pos:line="30" pos:column="47">(<argument><expr><name><name pos:line="30" pos:column="48">ce<pos:position pos:line="30" pos:column="50"/></name><operator pos:line="30" pos:column="50">-&gt;<pos:position pos:line="30" pos:column="55"/></operator><name pos:line="30" pos:column="52">sha1<pos:position pos:line="30" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="58">&amp;<pos:position pos:line="30" pos:column="63"/></operator><name pos:line="30" pos:column="59">type<pos:position pos:line="30" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="65">&amp;<pos:position pos:line="30" pos:column="70"/></operator><name pos:line="30" pos:column="66">size<pos:position pos:line="30" pos:column="70"/></name></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">mmfile<pos:position pos:line="31" pos:column="23"/></name><index pos:line="31" pos:column="23">[<expr><name pos:line="31" pos:column="24">j<pos:position pos:line="31" pos:column="25"/></name></expr>]<pos:position pos:line="31" pos:column="26"/></index></name><operator pos:line="31" pos:column="26">.<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="27">size<pos:position pos:line="31" pos:column="31"/></name> <operator pos:line="31" pos:column="32">=<pos:position pos:line="31" pos:column="33"/></operator> <name pos:line="31" pos:column="34">size<pos:position pos:line="31" pos:column="38"/></name></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></for>
	<for pos:line="33" pos:column="9">for <control pos:line="33" pos:column="13">(<init><expr><name pos:line="33" pos:column="14">i<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <literal type="number" pos:line="33" pos:column="18">0<pos:position pos:line="33" pos:column="19"/></literal></expr>;<pos:position pos:line="33" pos:column="20"/></init> <condition><expr><name pos:line="33" pos:column="21">i<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">&lt;<pos:position pos:line="33" pos:column="27"/></operator> <literal type="number" pos:line="33" pos:column="25">3<pos:position pos:line="33" pos:column="26"/></literal></expr>;<pos:position pos:line="33" pos:column="27"/></condition> <incr><expr><name pos:line="33" pos:column="28">i<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">++<pos:position pos:line="33" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="33" pos:column="32"/></control> <block pos:line="33" pos:column="33">{
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><operator pos:line="34" pos:column="21">!<pos:position pos:line="34" pos:column="22"/></operator><name><name pos:line="34" pos:column="22">mmfile<pos:position pos:line="34" pos:column="28"/></name><index pos:line="34" pos:column="28">[<expr><name pos:line="34" pos:column="29">i<pos:position pos:line="34" pos:column="30"/></name></expr>]<pos:position pos:line="34" pos:column="31"/></index></name><operator pos:line="34" pos:column="31">.<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="32">ptr<pos:position pos:line="34" pos:column="35"/></name> <operator pos:line="34" pos:column="36">&amp;&amp;<pos:position pos:line="34" pos:column="46"/></operator> <operator pos:line="34" pos:column="39">!<pos:position pos:line="34" pos:column="40"/></operator><name><name pos:line="34" pos:column="40">mmfile<pos:position pos:line="34" pos:column="46"/></name><index pos:line="34" pos:column="46">[<expr><name pos:line="34" pos:column="47">i<pos:position pos:line="34" pos:column="48"/></name></expr>]<pos:position pos:line="34" pos:column="49"/></index></name><operator pos:line="34" pos:column="49">.<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="50">size<pos:position pos:line="34" pos:column="54"/></name></expr>)<pos:position pos:line="34" pos:column="55"/></condition><then pos:line="34" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="25">mmfile<pos:position pos:line="35" pos:column="31"/></name><index pos:line="35" pos:column="31">[<expr><name pos:line="35" pos:column="32">i<pos:position pos:line="35" pos:column="33"/></name></expr>]<pos:position pos:line="35" pos:column="34"/></index></name><operator pos:line="35" pos:column="34">.<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="35">ptr<pos:position pos:line="35" pos:column="38"/></name> <operator pos:line="35" pos:column="39">=<pos:position pos:line="35" pos:column="40"/></operator> <call><name pos:line="35" pos:column="41">xstrdup<pos:position pos:line="35" pos:column="48"/></name><argument_list pos:line="35" pos:column="48">(<argument><expr><literal type="string" pos:line="35" pos:column="49">""<pos:position pos:line="35" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="53"/></expr_stmt></block></then></if>
	}<pos:position pos:line="36" pos:column="10"/></block></for>
	<comment type="block" pos:line="37" pos:column="9">/*
	 * NEEDSWORK: handle conflicts from merges with
	 * merge.renormalize set, too
	 */</comment>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">ll_merge<pos:position pos:line="41" pos:column="17"/></name><argument_list pos:line="41" pos:column="17">(<argument><expr><operator pos:line="41" pos:column="18">&amp;<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="19">result<pos:position pos:line="41" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="27">path<pos:position pos:line="41" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="33">&amp;<pos:position pos:line="41" pos:column="38"/></operator><name><name pos:line="41" pos:column="34">mmfile<pos:position pos:line="41" pos:column="40"/></name><index pos:line="41" pos:column="40">[<expr><literal type="number" pos:line="41" pos:column="41">0<pos:position pos:line="41" pos:column="42"/></literal></expr>]<pos:position pos:line="41" pos:column="43"/></index></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="45">NULL<pos:position pos:line="41" pos:column="49"/></name></expr></argument>,
		 <argument><expr><operator pos:line="42" pos:column="18">&amp;<pos:position pos:line="42" pos:column="23"/></operator><name><name pos:line="42" pos:column="19">mmfile<pos:position pos:line="42" pos:column="25"/></name><index pos:line="42" pos:column="25">[<expr><literal type="number" pos:line="42" pos:column="26">1<pos:position pos:line="42" pos:column="27"/></literal></expr>]<pos:position pos:line="42" pos:column="28"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="30">"ours"<pos:position pos:line="42" pos:column="36"/></literal></expr></argument>,
		 <argument><expr><operator pos:line="43" pos:column="18">&amp;<pos:position pos:line="43" pos:column="23"/></operator><name><name pos:line="43" pos:column="19">mmfile<pos:position pos:line="43" pos:column="25"/></name><index pos:line="43" pos:column="25">[<expr><literal type="number" pos:line="43" pos:column="26">2<pos:position pos:line="43" pos:column="27"/></literal></expr>]<pos:position pos:line="43" pos:column="28"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="30">"theirs"<pos:position pos:line="43" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="40">NULL<pos:position pos:line="43" pos:column="44"/></name></expr></argument>)<pos:position pos:line="43" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="46"/></expr_stmt>
	<for pos:line="44" pos:column="9">for <control pos:line="44" pos:column="13">(<init><expr><name pos:line="44" pos:column="14">i<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <literal type="number" pos:line="44" pos:column="18">0<pos:position pos:line="44" pos:column="19"/></literal></expr>;<pos:position pos:line="44" pos:column="20"/></init> <condition><expr><name pos:line="44" pos:column="21">i<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">&lt;<pos:position pos:line="44" pos:column="27"/></operator> <literal type="number" pos:line="44" pos:column="25">3<pos:position pos:line="44" pos:column="26"/></literal></expr>;<pos:position pos:line="44" pos:column="27"/></condition> <incr><expr><name pos:line="44" pos:column="28">i<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">++<pos:position pos:line="44" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="44" pos:column="32"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">free<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><name><name pos:line="45" pos:column="22">mmfile<pos:position pos:line="45" pos:column="28"/></name><index pos:line="45" pos:column="28">[<expr><name pos:line="45" pos:column="29">i<pos:position pos:line="45" pos:column="30"/></name></expr>]<pos:position pos:line="45" pos:column="31"/></index></name><operator pos:line="45" pos:column="31">.<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="32">ptr<pos:position pos:line="45" pos:column="35"/></name></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt></block></for>

	<expr_stmt><expr><call><name pos:line="47" pos:column="9">memset<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><operator pos:line="47" pos:column="16">&amp;<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="17">io<pos:position pos:line="47" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="21">0<pos:position pos:line="47" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="24">sizeof<argument_list pos:line="47" pos:column="30">(<argument><expr><name pos:line="47" pos:column="31">io<pos:position pos:line="47" pos:column="33"/></name></expr></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="47" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="48" pos:column="9">io<pos:position pos:line="48" pos:column="11"/></name><operator pos:line="48" pos:column="11">.<pos:position pos:line="48" pos:column="12"/></operator><name pos:line="48" pos:column="12">io<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">.<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="15">getline<pos:position pos:line="48" pos:column="22"/></name></name> <operator pos:line="48" pos:column="23">=<pos:position pos:line="48" pos:column="24"/></operator> <name pos:line="48" pos:column="25">rerere_mem_getline<pos:position pos:line="48" pos:column="43"/></name></expr>;<pos:position pos:line="48" pos:column="44"/></expr_stmt>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">output<pos:position pos:line="49" pos:column="19"/></name></expr>)<pos:position pos:line="49" pos:column="20"/></condition><then pos:line="49" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="50" pos:column="17">io<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">.<pos:position pos:line="50" pos:column="20"/></operator><name pos:line="50" pos:column="20">io<pos:position pos:line="50" pos:column="22"/></name><operator pos:line="50" pos:column="22">.<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">output<pos:position pos:line="50" pos:column="29"/></name></name> <operator pos:line="50" pos:column="30">=<pos:position pos:line="50" pos:column="31"/></operator> <call><name pos:line="50" pos:column="32">fopen<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name pos:line="50" pos:column="38">output<pos:position pos:line="50" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="46">"w"<pos:position pos:line="50" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt></block></then>
	<else pos:line="51" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="52" pos:column="17">io<pos:position pos:line="52" pos:column="19"/></name><operator pos:line="52" pos:column="19">.<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="20">io<pos:position pos:line="52" pos:column="22"/></name><operator pos:line="52" pos:column="22">.<pos:position pos:line="52" pos:column="23"/></operator><name pos:line="52" pos:column="23">output<pos:position pos:line="52" pos:column="29"/></name></name> <operator pos:line="52" pos:column="30">=<pos:position pos:line="52" pos:column="31"/></operator> <name pos:line="52" pos:column="32">NULL<pos:position pos:line="52" pos:column="36"/></name></expr>;<pos:position pos:line="52" pos:column="37"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="53" pos:column="9">strbuf_init<pos:position pos:line="53" pos:column="20"/></name><argument_list pos:line="53" pos:column="20">(<argument><expr><operator pos:line="53" pos:column="21">&amp;<pos:position pos:line="53" pos:column="26"/></operator><name><name pos:line="53" pos:column="22">io<pos:position pos:line="53" pos:column="24"/></name><operator pos:line="53" pos:column="24">.<pos:position pos:line="53" pos:column="25"/></operator><name pos:line="53" pos:column="25">input<pos:position pos:line="53" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="32">0<pos:position pos:line="53" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="54" pos:column="9">strbuf_attach<pos:position pos:line="54" pos:column="22"/></name><argument_list pos:line="54" pos:column="22">(<argument><expr><operator pos:line="54" pos:column="23">&amp;<pos:position pos:line="54" pos:column="28"/></operator><name><name pos:line="54" pos:column="24">io<pos:position pos:line="54" pos:column="26"/></name><operator pos:line="54" pos:column="26">.<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="27">input<pos:position pos:line="54" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="34">result<pos:position pos:line="54" pos:column="40"/></name><operator pos:line="54" pos:column="40">.<pos:position pos:line="54" pos:column="41"/></operator><name pos:line="54" pos:column="41">ptr<pos:position pos:line="54" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="46">result<pos:position pos:line="54" pos:column="52"/></name><operator pos:line="54" pos:column="52">.<pos:position pos:line="54" pos:column="53"/></operator><name pos:line="54" pos:column="53">size<pos:position pos:line="54" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="59">result<pos:position pos:line="54" pos:column="65"/></name><operator pos:line="54" pos:column="65">.<pos:position pos:line="54" pos:column="66"/></operator><name pos:line="54" pos:column="66">size<pos:position pos:line="54" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="72"/></expr_stmt>

	<expr_stmt><expr><name pos:line="56" pos:column="9">hunk_no<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <call><name pos:line="56" pos:column="19">handle_path<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name pos:line="56" pos:column="31">sha1<pos:position pos:line="56" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="37">(<pos:position pos:line="56" pos:column="38"/></operator>struct <name pos:line="56" pos:column="45">rerere_io<pos:position pos:line="56" pos:column="54"/></name> <operator pos:line="56" pos:column="55">*<pos:position pos:line="56" pos:column="56"/></operator><operator pos:line="56" pos:column="56">)<pos:position pos:line="56" pos:column="57"/></operator><operator pos:line="56" pos:column="57">&amp;<pos:position pos:line="56" pos:column="62"/></operator><name pos:line="56" pos:column="58">io<pos:position pos:line="56" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="62">marker_size<pos:position pos:line="56" pos:column="73"/></name></expr></argument>)<pos:position pos:line="56" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="75"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="57" pos:column="9">strbuf_release<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><operator pos:line="57" pos:column="24">&amp;<pos:position pos:line="57" pos:column="29"/></operator><name><name pos:line="57" pos:column="25">io<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">.<pos:position pos:line="57" pos:column="28"/></operator><name pos:line="57" pos:column="28">input<pos:position pos:line="57" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="35"/></expr_stmt>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name><name pos:line="58" pos:column="13">io<pos:position pos:line="58" pos:column="15"/></name><operator pos:line="58" pos:column="15">.<pos:position pos:line="58" pos:column="16"/></operator><name pos:line="58" pos:column="16">io<pos:position pos:line="58" pos:column="18"/></name><operator pos:line="58" pos:column="18">.<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="19">output<pos:position pos:line="58" pos:column="25"/></name></name></expr>)<pos:position pos:line="58" pos:column="26"/></condition><then pos:line="58" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">fclose<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">(<argument><expr><name><name pos:line="59" pos:column="24">io<pos:position pos:line="59" pos:column="26"/></name><operator pos:line="59" pos:column="26">.<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="27">io<pos:position pos:line="59" pos:column="29"/></name><operator pos:line="59" pos:column="29">.<pos:position pos:line="59" pos:column="30"/></operator><name pos:line="59" pos:column="30">output<pos:position pos:line="59" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt></block></then></if>
	<return pos:line="60" pos:column="9">return <expr><name pos:line="60" pos:column="16">hunk_no<pos:position pos:line="60" pos:column="23"/></name></expr>;<pos:position pos:line="60" pos:column="24"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
