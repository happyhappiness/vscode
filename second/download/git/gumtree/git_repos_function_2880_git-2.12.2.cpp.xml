<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2880_git-2.12.2.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">is_worktree_locked<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">worktree<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">wt<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">assert<pos:position pos:line="3" pos:column="15"/></name><argument_list pos:line="3" pos:column="15">(<argument><expr><operator pos:line="3" pos:column="16">!<pos:position pos:line="3" pos:column="17"/></operator><call><name pos:line="3" pos:column="17">is_main_worktree<pos:position pos:line="3" pos:column="33"/></name><argument_list pos:line="3" pos:column="33">(<argument><expr><name pos:line="3" pos:column="34">wt<pos:position pos:line="3" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="39"/></expr_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><name><name pos:line="5" pos:column="14">wt<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">-&gt;<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="18">lock_reason_valid<pos:position pos:line="5" pos:column="35"/></name></name></expr>)<pos:position pos:line="5" pos:column="36"/></condition><then pos:line="5" pos:column="36"> <block pos:line="5" pos:column="37">{
		<decl_stmt><decl><type><name><name pos:line="6" pos:column="17">struct<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">strbuf<pos:position pos:line="6" pos:column="30"/></name></name></type> <name pos:line="6" pos:column="31">path<pos:position pos:line="6" pos:column="35"/></name> <init pos:line="6" pos:column="36">= <expr><name pos:line="6" pos:column="38">STRBUF_INIT<pos:position pos:line="6" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="50"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="8" pos:column="17">strbuf_addstr<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><operator pos:line="8" pos:column="31">&amp;<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="32">path<pos:position pos:line="8" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="38">worktree_git_path<pos:position pos:line="8" pos:column="55"/></name><argument_list pos:line="8" pos:column="55">(<argument><expr><name pos:line="8" pos:column="56">wt<pos:position pos:line="8" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="60">"locked"<pos:position pos:line="8" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="71"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><call><name pos:line="9" pos:column="21">file_exists<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><name><name pos:line="9" pos:column="33">path<pos:position pos:line="9" pos:column="37"/></name><operator pos:line="9" pos:column="37">.<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="38">buf<pos:position pos:line="9" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="43"/></condition><then pos:line="9" pos:column="43"> <block pos:line="9" pos:column="44">{
			<decl_stmt><decl><type><name><name pos:line="10" pos:column="25">struct<pos:position pos:line="10" pos:column="31"/></name> <name pos:line="10" pos:column="32">strbuf<pos:position pos:line="10" pos:column="38"/></name></name></type> <name pos:line="10" pos:column="39">lock_reason<pos:position pos:line="10" pos:column="50"/></name> <init pos:line="10" pos:column="51">= <expr><name pos:line="10" pos:column="53">STRBUF_INIT<pos:position pos:line="10" pos:column="64"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="65"/></decl_stmt>
			<if pos:line="11" pos:column="25">if <condition pos:line="11" pos:column="28">(<expr><call><name pos:line="11" pos:column="29">strbuf_read_file<pos:position pos:line="11" pos:column="45"/></name><argument_list pos:line="11" pos:column="45">(<argument><expr><operator pos:line="11" pos:column="46">&amp;<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="47">lock_reason<pos:position pos:line="11" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="60">path<pos:position pos:line="11" pos:column="64"/></name><operator pos:line="11" pos:column="64">.<pos:position pos:line="11" pos:column="65"/></operator><name pos:line="11" pos:column="65">buf<pos:position pos:line="11" pos:column="68"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="70">0<pos:position pos:line="11" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call> <operator pos:line="11" pos:column="73">&lt;<pos:position pos:line="11" pos:column="77"/></operator> <literal type="number" pos:line="11" pos:column="75">0<pos:position pos:line="11" pos:column="76"/></literal></expr>)<pos:position pos:line="11" pos:column="77"/></condition><then pos:line="11" pos:column="77">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="33">die_errno<pos:position pos:line="12" pos:column="42"/></name><argument_list pos:line="12" pos:column="42">(<argument><expr><call><name pos:line="12" pos:column="43">_<pos:position pos:line="12" pos:column="44"/></name><argument_list pos:line="12" pos:column="44">(<argument><expr><literal type="string" pos:line="12" pos:column="45">"failed to read '%s'"<pos:position pos:line="12" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="69">path<pos:position pos:line="12" pos:column="73"/></name><operator pos:line="12" pos:column="73">.<pos:position pos:line="12" pos:column="74"/></operator><name pos:line="12" pos:column="74">buf<pos:position pos:line="12" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="79"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">strbuf_trim<pos:position pos:line="13" pos:column="36"/></name><argument_list pos:line="13" pos:column="36">(<argument><expr><operator pos:line="13" pos:column="37">&amp;<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="38">lock_reason<pos:position pos:line="13" pos:column="49"/></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="14" pos:column="25">wt<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">-&gt;<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="29">lock_reason<pos:position pos:line="14" pos:column="40"/></name></name> <operator pos:line="14" pos:column="41">=<pos:position pos:line="14" pos:column="42"/></operator> <call><name pos:line="14" pos:column="43">strbuf_detach<pos:position pos:line="14" pos:column="56"/></name><argument_list pos:line="14" pos:column="56">(<argument><expr><operator pos:line="14" pos:column="57">&amp;<pos:position pos:line="14" pos:column="62"/></operator><name pos:line="14" pos:column="58">lock_reason<pos:position pos:line="14" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="71">NULL<pos:position pos:line="14" pos:column="75"/></name></expr></argument>)<pos:position pos:line="14" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="77"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></then> <else pos:line="15" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="16" pos:column="25">wt<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">-&gt;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="29">lock_reason<pos:position pos:line="16" pos:column="40"/></name></name> <operator pos:line="16" pos:column="41">=<pos:position pos:line="16" pos:column="42"/></operator> <name pos:line="16" pos:column="43">NULL<pos:position pos:line="16" pos:column="47"/></name></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name><name pos:line="17" pos:column="17">wt<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">-&gt;<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="21">lock_reason_valid<pos:position pos:line="17" pos:column="38"/></name></name> <operator pos:line="17" pos:column="39">=<pos:position pos:line="17" pos:column="40"/></operator> <literal type="number" pos:line="17" pos:column="41">1<pos:position pos:line="17" pos:column="42"/></literal></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">strbuf_release<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><operator pos:line="18" pos:column="32">&amp;<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="33">path<pos:position pos:line="18" pos:column="37"/></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<return pos:line="21" pos:column="9">return <expr><name><name pos:line="21" pos:column="16">wt<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">-&gt;<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="20">lock_reason<pos:position pos:line="21" pos:column="31"/></name></name></expr>;<pos:position pos:line="21" pos:column="32"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
