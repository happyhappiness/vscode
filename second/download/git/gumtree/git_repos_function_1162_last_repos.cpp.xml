<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1162_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">utf8_fprintf<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">FILE<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">stream<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">format<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="52">...<pos:position pos:line="1" pos:column="55"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">buf<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">STRBUF_INIT<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">va_list<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">arg<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">columns<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">va_start<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">(<argument><expr><name pos:line="7" pos:column="18">arg<pos:position pos:line="7" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">format<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">strbuf_vaddf<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><operator pos:line="8" pos:column="22">&amp;<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="23">buf<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">format<pos:position pos:line="8" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="36">arg<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">va_end<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">arg<pos:position pos:line="9" pos:column="19"/></name></expr></argument>)<pos:position pos:line="9" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="21"/></expr_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">columns<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <call><name pos:line="11" pos:column="19">fputs<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name><name pos:line="11" pos:column="25">buf<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">.<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="29">buf<pos:position pos:line="11" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="34">stream<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><literal type="number" pos:line="12" pos:column="13">0<pos:position pos:line="12" pos:column="14"/></literal> <operator pos:line="12" pos:column="15">&lt;=<pos:position pos:line="12" pos:column="20"/></operator> <name pos:line="12" pos:column="18">columns<pos:position pos:line="12" pos:column="25"/></name></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26"> <comment type="block" pos:line="12" pos:column="27">/* keep the error from the I/O */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="17">columns<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">=<pos:position pos:line="13" pos:column="26"/></operator> <call><name pos:line="13" pos:column="27">utf8_strwidth<pos:position pos:line="13" pos:column="40"/></name><argument_list pos:line="13" pos:column="40">(<argument><expr><name><name pos:line="13" pos:column="41">buf<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">.<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="45">buf<pos:position pos:line="13" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">strbuf_release<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><operator pos:line="14" pos:column="24">&amp;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="25">buf<pos:position pos:line="14" pos:column="28"/></name></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
	<return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">columns<pos:position pos:line="15" pos:column="23"/></name></expr>;<pos:position pos:line="15" pos:column="24"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
