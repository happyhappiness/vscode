<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_159_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">receive_needs<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object_array<pos:position pos:line="3" pos:column="28"/></name></name></type> <name pos:line="3" pos:column="29">shallows<pos:position pos:line="3" pos:column="37"/></name> <init pos:line="3" pos:column="38">= <expr><name pos:line="3" pos:column="40">OBJECT_ARRAY_INIT<pos:position pos:line="3" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">string_list<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">deepen_not<pos:position pos:line="4" pos:column="38"/></name> <init pos:line="4" pos:column="39">= <expr><name pos:line="4" pos:column="41">STRING_LIST_INIT_DUP<pos:position pos:line="4" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">depth<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><literal type="number" pos:line="5" pos:column="21">0<pos:position pos:line="5" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">has_non_tip<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><literal type="number" pos:line="6" pos:column="27">0<pos:position pos:line="6" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">timestamp_t<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">deepen_since<pos:position pos:line="7" pos:column="33"/></name> <init pos:line="7" pos:column="34">= <expr><literal type="number" pos:line="7" pos:column="36">0<pos:position pos:line="7" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">deepen_rev_list<pos:position pos:line="8" pos:column="28"/></name> <init pos:line="8" pos:column="29">= <expr><literal type="number" pos:line="8" pos:column="31">0<pos:position pos:line="8" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">shallow_nr<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <literal type="number" pos:line="10" pos:column="22">0<pos:position pos:line="10" pos:column="23"/></literal></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>
	<for pos:line="11" pos:column="9">for <control pos:line="11" pos:column="13">(<init pos:line="11" pos:column="14">;<pos:position pos:line="11" pos:column="15"/></init><condition pos:line="11" pos:column="15">;<pos:position pos:line="11" pos:column="16"/></condition><incr/>)<pos:position pos:line="11" pos:column="17"/></control> <block pos:line="11" pos:column="18">{
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">struct<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">object<pos:position pos:line="12" pos:column="30"/></name></name> <modifier pos:line="12" pos:column="31">*<pos:position pos:line="12" pos:column="32"/></modifier></type><name pos:line="12" pos:column="32">o<pos:position pos:line="12" pos:column="33"/></name></decl>;<pos:position pos:line="12" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="13" pos:column="17">const<pos:position pos:line="13" pos:column="22"/></specifier> <name pos:line="13" pos:column="23">char<pos:position pos:line="13" pos:column="27"/></name> <modifier pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></modifier></type><name pos:line="13" pos:column="29">features<pos:position pos:line="13" pos:column="37"/></name></decl>;<pos:position pos:line="13" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="14" pos:column="17">struct<pos:position pos:line="14" pos:column="23"/></name> <name pos:line="14" pos:column="24">object_id<pos:position pos:line="14" pos:column="33"/></name></name></type> <name pos:line="14" pos:column="34">oid_buf<pos:position pos:line="14" pos:column="41"/></name></decl>;<pos:position pos:line="14" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">char<pos:position pos:line="15" pos:column="21"/></name> <modifier pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></modifier></type><name pos:line="15" pos:column="23">line<pos:position pos:line="15" pos:column="27"/></name> <init pos:line="15" pos:column="28">= <expr><call><name pos:line="15" pos:column="30">packet_read_line<pos:position pos:line="15" pos:column="46"/></name><argument_list pos:line="15" pos:column="46">(<argument><expr><literal type="number" pos:line="15" pos:column="47">0<pos:position pos:line="15" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="50">NULL<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="16" pos:column="17">const<pos:position pos:line="16" pos:column="22"/></specifier> <name pos:line="16" pos:column="23">char<pos:position pos:line="16" pos:column="27"/></name> <modifier pos:line="16" pos:column="28">*<pos:position pos:line="16" pos:column="29"/></modifier></type><name pos:line="16" pos:column="29">arg<pos:position pos:line="16" pos:column="32"/></name></decl>;<pos:position pos:line="16" pos:column="33"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="18" pos:column="17">reset_timeout<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">()<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">!<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">line<pos:position pos:line="19" pos:column="26"/></name></expr>)<pos:position pos:line="19" pos:column="27"/></condition><then pos:line="19" pos:column="27">
			<block type="pseudo"><break pos:line="20" pos:column="25">break;<pos:position pos:line="20" pos:column="31"/></break></block></then></if>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><call><name pos:line="22" pos:column="21">skip_prefix<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">line<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="39">"shallow "<pos:position pos:line="22" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="51">&amp;<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="52">arg<pos:position pos:line="22" pos:column="55"/></name></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="57"/></condition><then pos:line="22" pos:column="57"> <block pos:line="22" pos:column="58">{
			<decl_stmt><decl><type><name><name pos:line="23" pos:column="25">struct<pos:position pos:line="23" pos:column="31"/></name> <name pos:line="23" pos:column="32">object_id<pos:position pos:line="23" pos:column="41"/></name></name></type> <name pos:line="23" pos:column="42">oid<pos:position pos:line="23" pos:column="45"/></name></decl>;<pos:position pos:line="23" pos:column="46"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="24" pos:column="25">struct<pos:position pos:line="24" pos:column="31"/></name> <name pos:line="24" pos:column="32">object<pos:position pos:line="24" pos:column="38"/></name></name> <modifier pos:line="24" pos:column="39">*<pos:position pos:line="24" pos:column="40"/></modifier></type><name pos:line="24" pos:column="40">object<pos:position pos:line="24" pos:column="46"/></name></decl>;<pos:position pos:line="24" pos:column="47"/></decl_stmt>
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><call><name pos:line="25" pos:column="29">get_oid_hex<pos:position pos:line="25" pos:column="40"/></name><argument_list pos:line="25" pos:column="40">(<argument><expr><name pos:line="25" pos:column="41">arg<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="46">&amp;<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="47">oid<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="52"/></condition><then pos:line="25" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="33">die<pos:position pos:line="26" pos:column="36"/></name><argument_list pos:line="26" pos:column="36">(<argument><expr><literal type="string" pos:line="26" pos:column="37">"invalid shallow line: %s"<pos:position pos:line="26" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="65">line<pos:position pos:line="26" pos:column="69"/></name></expr></argument>)<pos:position pos:line="26" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="71"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="27" pos:column="25">object<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">=<pos:position pos:line="27" pos:column="33"/></operator> <call><name pos:line="27" pos:column="34">parse_object<pos:position pos:line="27" pos:column="46"/></name><argument_list pos:line="27" pos:column="46">(<argument><expr><operator pos:line="27" pos:column="47">&amp;<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="48">oid<pos:position pos:line="27" pos:column="51"/></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><operator pos:line="28" pos:column="29">!<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="30">object<pos:position pos:line="28" pos:column="36"/></name></expr>)<pos:position pos:line="28" pos:column="37"/></condition><then pos:line="28" pos:column="37">
				<block type="pseudo"><continue pos:line="29" pos:column="33">continue;<pos:position pos:line="29" pos:column="42"/></continue></block></then></if>
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name><name pos:line="30" pos:column="29">object<pos:position pos:line="30" pos:column="35"/></name><operator pos:line="30" pos:column="35">-&gt;<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="37">type<pos:position pos:line="30" pos:column="41"/></name></name> <operator pos:line="30" pos:column="42">!=<pos:position pos:line="30" pos:column="44"/></operator> <name pos:line="30" pos:column="45">OBJ_COMMIT<pos:position pos:line="30" pos:column="55"/></name></expr>)<pos:position pos:line="30" pos:column="56"/></condition><then pos:line="30" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="33">die<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><literal type="string" pos:line="31" pos:column="37">"invalid shallow object %s"<pos:position pos:line="31" pos:column="64"/></literal></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="66">oid_to_hex<pos:position pos:line="31" pos:column="76"/></name><argument_list pos:line="31" pos:column="76">(<argument><expr><operator pos:line="31" pos:column="77">&amp;<pos:position pos:line="31" pos:column="82"/></operator><name pos:line="31" pos:column="78">oid<pos:position pos:line="31" pos:column="81"/></name></expr></argument>)<pos:position pos:line="31" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="84"/></expr_stmt></block></then></if>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><operator pos:line="32" pos:column="29">!<pos:position pos:line="32" pos:column="30"/></operator><operator pos:line="32" pos:column="30">(<pos:position pos:line="32" pos:column="31"/></operator><name><name pos:line="32" pos:column="31">object<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">-&gt;<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="39">flags<pos:position pos:line="32" pos:column="44"/></name></name> <operator pos:line="32" pos:column="45">&amp;<pos:position pos:line="32" pos:column="50"/></operator> <name pos:line="32" pos:column="47">CLIENT_SHALLOW<pos:position pos:line="32" pos:column="61"/></name><operator pos:line="32" pos:column="61">)<pos:position pos:line="32" pos:column="62"/></operator></expr>)<pos:position pos:line="32" pos:column="63"/></condition><then pos:line="32" pos:column="63"> <block pos:line="32" pos:column="64">{
				<expr_stmt><expr><name><name pos:line="33" pos:column="33">object<pos:position pos:line="33" pos:column="39"/></name><operator pos:line="33" pos:column="39">-&gt;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="41">flags<pos:position pos:line="33" pos:column="46"/></name></name> <operator pos:line="33" pos:column="47">|=<pos:position pos:line="33" pos:column="49"/></operator> <name pos:line="33" pos:column="50">CLIENT_SHALLOW<pos:position pos:line="33" pos:column="64"/></name></expr>;<pos:position pos:line="33" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="34" pos:column="33">add_object_array<pos:position pos:line="34" pos:column="49"/></name><argument_list pos:line="34" pos:column="49">(<argument><expr><name pos:line="34" pos:column="50">object<pos:position pos:line="34" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="58">NULL<pos:position pos:line="34" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="64">&amp;<pos:position pos:line="34" pos:column="69"/></operator><name pos:line="34" pos:column="65">shallows<pos:position pos:line="34" pos:column="73"/></name></expr></argument>)<pos:position pos:line="34" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="75"/></expr_stmt>
			}<pos:position pos:line="35" pos:column="26"/></block></then></if>
			<continue pos:line="36" pos:column="25">continue;<pos:position pos:line="36" pos:column="34"/></continue>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><call><name pos:line="38" pos:column="21">skip_prefix<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">line<pos:position pos:line="38" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="39">"deepen "<pos:position pos:line="38" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="38" pos:column="50">&amp;<pos:position pos:line="38" pos:column="55"/></operator><name pos:line="38" pos:column="51">arg<pos:position pos:line="38" pos:column="54"/></name></expr></argument>)<pos:position pos:line="38" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="56"/></condition><then pos:line="38" pos:column="56"> <block pos:line="38" pos:column="57">{
			<decl_stmt><decl><type><name pos:line="39" pos:column="25">char<pos:position pos:line="39" pos:column="29"/></name> <modifier pos:line="39" pos:column="30">*<pos:position pos:line="39" pos:column="31"/></modifier></type><name pos:line="39" pos:column="31">end<pos:position pos:line="39" pos:column="34"/></name> <init pos:line="39" pos:column="35">= <expr><name pos:line="39" pos:column="37">NULL<pos:position pos:line="39" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="39" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="40" pos:column="25">depth<pos:position pos:line="40" pos:column="30"/></name> <operator pos:line="40" pos:column="31">=<pos:position pos:line="40" pos:column="32"/></operator> <call><name pos:line="40" pos:column="33">strtol<pos:position pos:line="40" pos:column="39"/></name><argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">arg<pos:position pos:line="40" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="45">&amp;<pos:position pos:line="40" pos:column="50"/></operator><name pos:line="40" pos:column="46">end<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="51">0<pos:position pos:line="40" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><operator pos:line="41" pos:column="29">!<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">end<pos:position pos:line="41" pos:column="33"/></name> <operator pos:line="41" pos:column="34">||<pos:position pos:line="41" pos:column="36"/></operator> <operator pos:line="41" pos:column="37">*<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="38">end<pos:position pos:line="41" pos:column="41"/></name> <operator pos:line="41" pos:column="42">||<pos:position pos:line="41" pos:column="44"/></operator> <name pos:line="41" pos:column="45">depth<pos:position pos:line="41" pos:column="50"/></name> <operator pos:line="41" pos:column="51">&lt;=<pos:position pos:line="41" pos:column="56"/></operator> <literal type="number" pos:line="41" pos:column="54">0<pos:position pos:line="41" pos:column="55"/></literal></expr>)<pos:position pos:line="41" pos:column="56"/></condition><then pos:line="41" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="33">die<pos:position pos:line="42" pos:column="36"/></name><argument_list pos:line="42" pos:column="36">(<argument><expr><literal type="string" pos:line="42" pos:column="37">"Invalid deepen: %s"<pos:position pos:line="42" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="59">line<pos:position pos:line="42" pos:column="63"/></name></expr></argument>)<pos:position pos:line="42" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="65"/></expr_stmt></block></then></if>
			<continue pos:line="43" pos:column="25">continue;<pos:position pos:line="43" pos:column="34"/></continue>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">skip_prefix<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><name pos:line="45" pos:column="33">line<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="39">"deepen-since "<pos:position pos:line="45" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="56">&amp;<pos:position pos:line="45" pos:column="61"/></operator><name pos:line="45" pos:column="57">arg<pos:position pos:line="45" pos:column="60"/></name></expr></argument>)<pos:position pos:line="45" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="62"/></condition><then pos:line="45" pos:column="62"> <block pos:line="45" pos:column="63">{
			<decl_stmt><decl><type><name pos:line="46" pos:column="25">char<pos:position pos:line="46" pos:column="29"/></name> <modifier pos:line="46" pos:column="30">*<pos:position pos:line="46" pos:column="31"/></modifier></type><name pos:line="46" pos:column="31">end<pos:position pos:line="46" pos:column="34"/></name> <init pos:line="46" pos:column="35">= <expr><name pos:line="46" pos:column="37">NULL<pos:position pos:line="46" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="46" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="47" pos:column="25">deepen_since<pos:position pos:line="47" pos:column="37"/></name> <operator pos:line="47" pos:column="38">=<pos:position pos:line="47" pos:column="39"/></operator> <call><name pos:line="47" pos:column="40">parse_timestamp<pos:position pos:line="47" pos:column="55"/></name><argument_list pos:line="47" pos:column="55">(<argument><expr><name pos:line="47" pos:column="56">arg<pos:position pos:line="47" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="61">&amp;<pos:position pos:line="47" pos:column="66"/></operator><name pos:line="47" pos:column="62">end<pos:position pos:line="47" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="67">0<pos:position pos:line="47" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="70"/></expr_stmt>
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><operator pos:line="48" pos:column="29">!<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="30">end<pos:position pos:line="48" pos:column="33"/></name> <operator pos:line="48" pos:column="34">||<pos:position pos:line="48" pos:column="36"/></operator> <operator pos:line="48" pos:column="37">*<pos:position pos:line="48" pos:column="38"/></operator><name pos:line="48" pos:column="38">end<pos:position pos:line="48" pos:column="41"/></name> <operator pos:line="48" pos:column="42">||<pos:position pos:line="48" pos:column="44"/></operator> <operator pos:line="48" pos:column="45">!<pos:position pos:line="48" pos:column="46"/></operator><name pos:line="48" pos:column="46">deepen_since<pos:position pos:line="48" pos:column="58"/></name> <operator pos:line="48" pos:column="59">||<pos:position pos:line="48" pos:column="61"/></operator>
			    <comment type="block" pos:line="49" pos:column="29">/* revisions.c's max_age -1 is special */</comment>
			    <name pos:line="50" pos:column="29">deepen_since<pos:position pos:line="50" pos:column="41"/></name> <operator pos:line="50" pos:column="42">==<pos:position pos:line="50" pos:column="44"/></operator> <operator pos:line="50" pos:column="45">-<pos:position pos:line="50" pos:column="46"/></operator><literal type="number" pos:line="50" pos:column="46">1<pos:position pos:line="50" pos:column="47"/></literal></expr>)<pos:position pos:line="50" pos:column="48"/></condition><then pos:line="50" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="33">die<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">(<argument><expr><literal type="string" pos:line="51" pos:column="37">"Invalid deepen-since: %s"<pos:position pos:line="51" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="65">line<pos:position pos:line="51" pos:column="69"/></name></expr></argument>)<pos:position pos:line="51" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="71"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="52" pos:column="25">deepen_rev_list<pos:position pos:line="52" pos:column="40"/></name> <operator pos:line="52" pos:column="41">=<pos:position pos:line="52" pos:column="42"/></operator> <literal type="number" pos:line="52" pos:column="43">1<pos:position pos:line="52" pos:column="44"/></literal></expr>;<pos:position pos:line="52" pos:column="45"/></expr_stmt>
			<continue pos:line="53" pos:column="25">continue;<pos:position pos:line="53" pos:column="34"/></continue>
		}<pos:position pos:line="54" pos:column="18"/></block></then></if>
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><call><name pos:line="55" pos:column="21">skip_prefix<pos:position pos:line="55" pos:column="32"/></name><argument_list pos:line="55" pos:column="32">(<argument><expr><name pos:line="55" pos:column="33">line<pos:position pos:line="55" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="39">"deepen-not "<pos:position pos:line="55" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="55" pos:column="54">&amp;<pos:position pos:line="55" pos:column="59"/></operator><name pos:line="55" pos:column="55">arg<pos:position pos:line="55" pos:column="58"/></name></expr></argument>)<pos:position pos:line="55" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="60"/></condition><then pos:line="55" pos:column="60"> <block pos:line="55" pos:column="61">{
			<decl_stmt><decl><type><name pos:line="56" pos:column="25">char<pos:position pos:line="56" pos:column="29"/></name> <modifier pos:line="56" pos:column="30">*<pos:position pos:line="56" pos:column="31"/></modifier></type><name pos:line="56" pos:column="31">ref<pos:position pos:line="56" pos:column="34"/></name> <init pos:line="56" pos:column="35">= <expr><name pos:line="56" pos:column="37">NULL<pos:position pos:line="56" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="56" pos:column="42"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="57" pos:column="25">struct<pos:position pos:line="57" pos:column="31"/></name> <name pos:line="57" pos:column="32">object_id<pos:position pos:line="57" pos:column="41"/></name></name></type> <name pos:line="57" pos:column="42">oid<pos:position pos:line="57" pos:column="45"/></name></decl>;<pos:position pos:line="57" pos:column="46"/></decl_stmt>
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><call><name pos:line="58" pos:column="29">expand_ref<pos:position pos:line="58" pos:column="39"/></name><argument_list pos:line="58" pos:column="39">(<argument><expr><name pos:line="58" pos:column="40">arg<pos:position pos:line="58" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="58" pos:column="45">strlen<pos:position pos:line="58" pos:column="51"/></name><argument_list pos:line="58" pos:column="51">(<argument><expr><name pos:line="58" pos:column="52">arg<pos:position pos:line="58" pos:column="55"/></name></expr></argument>)<pos:position pos:line="58" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="58">oid<pos:position pos:line="58" pos:column="61"/></name><operator pos:line="58" pos:column="61">.<pos:position pos:line="58" pos:column="62"/></operator><name pos:line="58" pos:column="62">hash<pos:position pos:line="58" pos:column="66"/></name></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="68">&amp;<pos:position pos:line="58" pos:column="73"/></operator><name pos:line="58" pos:column="69">ref<pos:position pos:line="58" pos:column="72"/></name></expr></argument>)<pos:position pos:line="58" pos:column="73"/></argument_list></call> <operator pos:line="58" pos:column="74">!=<pos:position pos:line="58" pos:column="76"/></operator> <literal type="number" pos:line="58" pos:column="77">1<pos:position pos:line="58" pos:column="78"/></literal></expr>)<pos:position pos:line="58" pos:column="79"/></condition><then pos:line="58" pos:column="79">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="33">die<pos:position pos:line="59" pos:column="36"/></name><argument_list pos:line="59" pos:column="36">(<argument><expr><literal type="string" pos:line="59" pos:column="37">"git upload-pack: ambiguous deepen-not: %s"<pos:position pos:line="59" pos:column="80"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="82">line<pos:position pos:line="59" pos:column="86"/></name></expr></argument>)<pos:position pos:line="59" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="88"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">string_list_append<pos:position pos:line="60" pos:column="43"/></name><argument_list pos:line="60" pos:column="43">(<argument><expr><operator pos:line="60" pos:column="44">&amp;<pos:position pos:line="60" pos:column="49"/></operator><name pos:line="60" pos:column="45">deepen_not<pos:position pos:line="60" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="57">ref<pos:position pos:line="60" pos:column="60"/></name></expr></argument>)<pos:position pos:line="60" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="61" pos:column="25">free<pos:position pos:line="61" pos:column="29"/></name><argument_list pos:line="61" pos:column="29">(<argument><expr><name pos:line="61" pos:column="30">ref<pos:position pos:line="61" pos:column="33"/></name></expr></argument>)<pos:position pos:line="61" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="62" pos:column="25">deepen_rev_list<pos:position pos:line="62" pos:column="40"/></name> <operator pos:line="62" pos:column="41">=<pos:position pos:line="62" pos:column="42"/></operator> <literal type="number" pos:line="62" pos:column="43">1<pos:position pos:line="62" pos:column="44"/></literal></expr>;<pos:position pos:line="62" pos:column="45"/></expr_stmt>
			<continue pos:line="63" pos:column="25">continue;<pos:position pos:line="63" pos:column="34"/></continue>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><operator pos:line="65" pos:column="21">!<pos:position pos:line="65" pos:column="22"/></operator><call><name pos:line="65" pos:column="22">skip_prefix<pos:position pos:line="65" pos:column="33"/></name><argument_list pos:line="65" pos:column="33">(<argument><expr><name pos:line="65" pos:column="34">line<pos:position pos:line="65" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="40">"want "<pos:position pos:line="65" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="65" pos:column="49">&amp;<pos:position pos:line="65" pos:column="54"/></operator><name pos:line="65" pos:column="50">arg<pos:position pos:line="65" pos:column="53"/></name></expr></argument>)<pos:position pos:line="65" pos:column="54"/></argument_list></call> <operator pos:line="65" pos:column="55">||<pos:position pos:line="65" pos:column="57"/></operator>
		    <call><name pos:line="66" pos:column="21">get_oid_hex<pos:position pos:line="66" pos:column="32"/></name><argument_list pos:line="66" pos:column="32">(<argument><expr><name pos:line="66" pos:column="33">arg<pos:position pos:line="66" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="38">&amp;<pos:position pos:line="66" pos:column="43"/></operator><name pos:line="66" pos:column="39">oid_buf<pos:position pos:line="66" pos:column="46"/></name></expr></argument>)<pos:position pos:line="66" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="48"/></condition><then pos:line="66" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="25">die<pos:position pos:line="67" pos:column="28"/></name><argument_list pos:line="67" pos:column="28">(<argument><expr><literal type="string" pos:line="67" pos:column="29">"git upload-pack: protocol error, "<pos:position pos:line="67" pos:column="64"/></literal>
			    <literal type="string" pos:line="68" pos:column="29">"expected to get sha, not '%s'"<pos:position pos:line="68" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="62">line<pos:position pos:line="68" pos:column="66"/></name></expr></argument>)<pos:position pos:line="68" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="68"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="70" pos:column="17">features<pos:position pos:line="70" pos:column="25"/></name> <operator pos:line="70" pos:column="26">=<pos:position pos:line="70" pos:column="27"/></operator> <name pos:line="70" pos:column="28">arg<pos:position pos:line="70" pos:column="31"/></name> <operator pos:line="70" pos:column="32">+<pos:position pos:line="70" pos:column="33"/></operator> <literal type="number" pos:line="70" pos:column="34">40<pos:position pos:line="70" pos:column="36"/></literal></expr>;<pos:position pos:line="70" pos:column="37"/></expr_stmt>

		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><call><name pos:line="72" pos:column="21">parse_feature_request<pos:position pos:line="72" pos:column="42"/></name><argument_list pos:line="72" pos:column="42">(<argument><expr><name pos:line="72" pos:column="43">features<pos:position pos:line="72" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="53">"deepen-relative"<pos:position pos:line="72" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="72"/></condition><then pos:line="72" pos:column="72">
			<block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="25">deepen_relative<pos:position pos:line="73" pos:column="40"/></name> <operator pos:line="73" pos:column="41">=<pos:position pos:line="73" pos:column="42"/></operator> <literal type="number" pos:line="73" pos:column="43">1<pos:position pos:line="73" pos:column="44"/></literal></expr>;<pos:position pos:line="73" pos:column="45"/></expr_stmt></block></then></if>
		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><call><name pos:line="74" pos:column="21">parse_feature_request<pos:position pos:line="74" pos:column="42"/></name><argument_list pos:line="74" pos:column="42">(<argument><expr><name pos:line="74" pos:column="43">features<pos:position pos:line="74" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="53">"multi_ack_detailed"<pos:position pos:line="74" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="75"/></condition><then pos:line="74" pos:column="75">
			<block type="pseudo"><expr_stmt><expr><name pos:line="75" pos:column="25">multi_ack<pos:position pos:line="75" pos:column="34"/></name> <operator pos:line="75" pos:column="35">=<pos:position pos:line="75" pos:column="36"/></operator> <literal type="number" pos:line="75" pos:column="37">2<pos:position pos:line="75" pos:column="38"/></literal></expr>;<pos:position pos:line="75" pos:column="39"/></expr_stmt></block></then>
		<elseif pos:line="76" pos:column="17">else <if pos:line="76" pos:column="22">if <condition pos:line="76" pos:column="25">(<expr><call><name pos:line="76" pos:column="26">parse_feature_request<pos:position pos:line="76" pos:column="47"/></name><argument_list pos:line="76" pos:column="47">(<argument><expr><name pos:line="76" pos:column="48">features<pos:position pos:line="76" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="58">"multi_ack"<pos:position pos:line="76" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="71"/></condition><then pos:line="76" pos:column="71">
			<block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="25">multi_ack<pos:position pos:line="77" pos:column="34"/></name> <operator pos:line="77" pos:column="35">=<pos:position pos:line="77" pos:column="36"/></operator> <literal type="number" pos:line="77" pos:column="37">1<pos:position pos:line="77" pos:column="38"/></literal></expr>;<pos:position pos:line="77" pos:column="39"/></expr_stmt></block></then></if></elseif></if>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><call><name pos:line="78" pos:column="21">parse_feature_request<pos:position pos:line="78" pos:column="42"/></name><argument_list pos:line="78" pos:column="42">(<argument><expr><name pos:line="78" pos:column="43">features<pos:position pos:line="78" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="53">"no-done"<pos:position pos:line="78" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="64"/></condition><then pos:line="78" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><name pos:line="79" pos:column="25">no_done<pos:position pos:line="79" pos:column="32"/></name> <operator pos:line="79" pos:column="33">=<pos:position pos:line="79" pos:column="34"/></operator> <literal type="number" pos:line="79" pos:column="35">1<pos:position pos:line="79" pos:column="36"/></literal></expr>;<pos:position pos:line="79" pos:column="37"/></expr_stmt></block></then></if>
		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><call><name pos:line="80" pos:column="21">parse_feature_request<pos:position pos:line="80" pos:column="42"/></name><argument_list pos:line="80" pos:column="42">(<argument><expr><name pos:line="80" pos:column="43">features<pos:position pos:line="80" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="53">"thin-pack"<pos:position pos:line="80" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="66"/></condition><then pos:line="80" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><name pos:line="81" pos:column="25">use_thin_pack<pos:position pos:line="81" pos:column="38"/></name> <operator pos:line="81" pos:column="39">=<pos:position pos:line="81" pos:column="40"/></operator> <literal type="number" pos:line="81" pos:column="41">1<pos:position pos:line="81" pos:column="42"/></literal></expr>;<pos:position pos:line="81" pos:column="43"/></expr_stmt></block></then></if>
		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><call><name pos:line="82" pos:column="21">parse_feature_request<pos:position pos:line="82" pos:column="42"/></name><argument_list pos:line="82" pos:column="42">(<argument><expr><name pos:line="82" pos:column="43">features<pos:position pos:line="82" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="53">"ofs-delta"<pos:position pos:line="82" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="66"/></condition><then pos:line="82" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><name pos:line="83" pos:column="25">use_ofs_delta<pos:position pos:line="83" pos:column="38"/></name> <operator pos:line="83" pos:column="39">=<pos:position pos:line="83" pos:column="40"/></operator> <literal type="number" pos:line="83" pos:column="41">1<pos:position pos:line="83" pos:column="42"/></literal></expr>;<pos:position pos:line="83" pos:column="43"/></expr_stmt></block></then></if>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><call><name pos:line="84" pos:column="21">parse_feature_request<pos:position pos:line="84" pos:column="42"/></name><argument_list pos:line="84" pos:column="42">(<argument><expr><name pos:line="84" pos:column="43">features<pos:position pos:line="84" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="53">"side-band-64k"<pos:position pos:line="84" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="70"/></condition><then pos:line="84" pos:column="70">
			<block type="pseudo"><expr_stmt><expr><name pos:line="85" pos:column="25">use_sideband<pos:position pos:line="85" pos:column="37"/></name> <operator pos:line="85" pos:column="38">=<pos:position pos:line="85" pos:column="39"/></operator> <name pos:line="85" pos:column="40">LARGE_PACKET_MAX<pos:position pos:line="85" pos:column="56"/></name></expr>;<pos:position pos:line="85" pos:column="57"/></expr_stmt></block></then>
		<elseif pos:line="86" pos:column="17">else <if pos:line="86" pos:column="22">if <condition pos:line="86" pos:column="25">(<expr><call><name pos:line="86" pos:column="26">parse_feature_request<pos:position pos:line="86" pos:column="47"/></name><argument_list pos:line="86" pos:column="47">(<argument><expr><name pos:line="86" pos:column="48">features<pos:position pos:line="86" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="58">"side-band"<pos:position pos:line="86" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="71"/></condition><then pos:line="86" pos:column="71">
			<block type="pseudo"><expr_stmt><expr><name pos:line="87" pos:column="25">use_sideband<pos:position pos:line="87" pos:column="37"/></name> <operator pos:line="87" pos:column="38">=<pos:position pos:line="87" pos:column="39"/></operator> <name pos:line="87" pos:column="40">DEFAULT_PACKET_MAX<pos:position pos:line="87" pos:column="58"/></name></expr>;<pos:position pos:line="87" pos:column="59"/></expr_stmt></block></then></if></elseif></if>
		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><call><name pos:line="88" pos:column="21">parse_feature_request<pos:position pos:line="88" pos:column="42"/></name><argument_list pos:line="88" pos:column="42">(<argument><expr><name pos:line="88" pos:column="43">features<pos:position pos:line="88" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="53">"no-progress"<pos:position pos:line="88" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="68"/></condition><then pos:line="88" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="25">no_progress<pos:position pos:line="89" pos:column="36"/></name> <operator pos:line="89" pos:column="37">=<pos:position pos:line="89" pos:column="38"/></operator> <literal type="number" pos:line="89" pos:column="39">1<pos:position pos:line="89" pos:column="40"/></literal></expr>;<pos:position pos:line="89" pos:column="41"/></expr_stmt></block></then></if>
		<if pos:line="90" pos:column="17">if <condition pos:line="90" pos:column="20">(<expr><call><name pos:line="90" pos:column="21">parse_feature_request<pos:position pos:line="90" pos:column="42"/></name><argument_list pos:line="90" pos:column="42">(<argument><expr><name pos:line="90" pos:column="43">features<pos:position pos:line="90" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="53">"include-tag"<pos:position pos:line="90" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="90" pos:column="68"/></condition><then pos:line="90" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><name pos:line="91" pos:column="25">use_include_tag<pos:position pos:line="91" pos:column="40"/></name> <operator pos:line="91" pos:column="41">=<pos:position pos:line="91" pos:column="42"/></operator> <literal type="number" pos:line="91" pos:column="43">1<pos:position pos:line="91" pos:column="44"/></literal></expr>;<pos:position pos:line="91" pos:column="45"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="93" pos:column="17">o<pos:position pos:line="93" pos:column="18"/></name> <operator pos:line="93" pos:column="19">=<pos:position pos:line="93" pos:column="20"/></operator> <call><name pos:line="93" pos:column="21">parse_object<pos:position pos:line="93" pos:column="33"/></name><argument_list pos:line="93" pos:column="33">(<argument><expr><operator pos:line="93" pos:column="34">&amp;<pos:position pos:line="93" pos:column="39"/></operator><name pos:line="93" pos:column="35">oid_buf<pos:position pos:line="93" pos:column="42"/></name></expr></argument>)<pos:position pos:line="93" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="44"/></expr_stmt>
		<if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><operator pos:line="94" pos:column="21">!<pos:position pos:line="94" pos:column="22"/></operator><name pos:line="94" pos:column="22">o<pos:position pos:line="94" pos:column="23"/></name></expr>)<pos:position pos:line="94" pos:column="24"/></condition><then pos:line="94" pos:column="24"> <block pos:line="94" pos:column="25">{
			<expr_stmt><expr><call><name pos:line="95" pos:column="25">packet_write_fmt<pos:position pos:line="95" pos:column="41"/></name><argument_list pos:line="95" pos:column="41">(<argument><expr><literal type="number" pos:line="95" pos:column="42">1<pos:position pos:line="95" pos:column="43"/></literal></expr></argument>,
					 <argument><expr><literal type="string" pos:line="96" pos:column="42">"ERR upload-pack: not our ref %s"<pos:position pos:line="96" pos:column="75"/></literal></expr></argument>,
					 <argument><expr><call><name pos:line="97" pos:column="42">oid_to_hex<pos:position pos:line="97" pos:column="52"/></name><argument_list pos:line="97" pos:column="52">(<argument><expr><operator pos:line="97" pos:column="53">&amp;<pos:position pos:line="97" pos:column="58"/></operator><name pos:line="97" pos:column="54">oid_buf<pos:position pos:line="97" pos:column="61"/></name></expr></argument>)<pos:position pos:line="97" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="97" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="98" pos:column="25">die<pos:position pos:line="98" pos:column="28"/></name><argument_list pos:line="98" pos:column="28">(<argument><expr><literal type="string" pos:line="98" pos:column="29">"git upload-pack: not our ref %s"<pos:position pos:line="98" pos:column="62"/></literal></expr></argument>,
			    <argument><expr><call><name pos:line="99" pos:column="29">oid_to_hex<pos:position pos:line="99" pos:column="39"/></name><argument_list pos:line="99" pos:column="39">(<argument><expr><operator pos:line="99" pos:column="40">&amp;<pos:position pos:line="99" pos:column="45"/></operator><name pos:line="99" pos:column="41">oid_buf<pos:position pos:line="99" pos:column="48"/></name></expr></argument>)<pos:position pos:line="99" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="99" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="100" pos:column="18"/></block></then></if>
		<if pos:line="101" pos:column="17">if <condition pos:line="101" pos:column="20">(<expr><operator pos:line="101" pos:column="21">!<pos:position pos:line="101" pos:column="22"/></operator><operator pos:line="101" pos:column="22">(<pos:position pos:line="101" pos:column="23"/></operator><name><name pos:line="101" pos:column="23">o<pos:position pos:line="101" pos:column="24"/></name><operator pos:line="101" pos:column="24">-&gt;<pos:position pos:line="101" pos:column="29"/></operator><name pos:line="101" pos:column="26">flags<pos:position pos:line="101" pos:column="31"/></name></name> <operator pos:line="101" pos:column="32">&amp;<pos:position pos:line="101" pos:column="37"/></operator> <name pos:line="101" pos:column="34">WANTED<pos:position pos:line="101" pos:column="40"/></name><operator pos:line="101" pos:column="40">)<pos:position pos:line="101" pos:column="41"/></operator></expr>)<pos:position pos:line="101" pos:column="42"/></condition><then pos:line="101" pos:column="42"> <block pos:line="101" pos:column="43">{
			<expr_stmt><expr><name><name pos:line="102" pos:column="25">o<pos:position pos:line="102" pos:column="26"/></name><operator pos:line="102" pos:column="26">-&gt;<pos:position pos:line="102" pos:column="31"/></operator><name pos:line="102" pos:column="28">flags<pos:position pos:line="102" pos:column="33"/></name></name> <operator pos:line="102" pos:column="34">|=<pos:position pos:line="102" pos:column="36"/></operator> <name pos:line="102" pos:column="37">WANTED<pos:position pos:line="102" pos:column="43"/></name></expr>;<pos:position pos:line="102" pos:column="44"/></expr_stmt>
			<if pos:line="103" pos:column="25">if <condition pos:line="103" pos:column="28">(<expr><operator pos:line="103" pos:column="29">!<pos:position pos:line="103" pos:column="30"/></operator><operator pos:line="103" pos:column="30">(<pos:position pos:line="103" pos:column="31"/></operator><operator pos:line="103" pos:column="31">(<pos:position pos:line="103" pos:column="32"/></operator><name pos:line="103" pos:column="32">allow_unadvertised_object_request<pos:position pos:line="103" pos:column="65"/></name> <operator pos:line="103" pos:column="66">&amp;<pos:position pos:line="103" pos:column="71"/></operator> <name pos:line="103" pos:column="68">ALLOW_ANY_SHA1<pos:position pos:line="103" pos:column="82"/></name><operator pos:line="103" pos:column="82">)<pos:position pos:line="103" pos:column="83"/></operator> <operator pos:line="103" pos:column="84">==<pos:position pos:line="103" pos:column="86"/></operator> <name pos:line="103" pos:column="87">ALLOW_ANY_SHA1<pos:position pos:line="103" pos:column="101"/></name>
			      <operator pos:line="104" pos:column="31">||<pos:position pos:line="104" pos:column="33"/></operator> <call><name pos:line="104" pos:column="34">is_our_ref<pos:position pos:line="104" pos:column="44"/></name><argument_list pos:line="104" pos:column="44">(<argument><expr><name pos:line="104" pos:column="45">o<pos:position pos:line="104" pos:column="46"/></name></expr></argument>)<pos:position pos:line="104" pos:column="47"/></argument_list></call><operator pos:line="104" pos:column="47">)<pos:position pos:line="104" pos:column="48"/></operator></expr>)<pos:position pos:line="104" pos:column="49"/></condition><then pos:line="104" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><name pos:line="105" pos:column="33">has_non_tip<pos:position pos:line="105" pos:column="44"/></name> <operator pos:line="105" pos:column="45">=<pos:position pos:line="105" pos:column="46"/></operator> <literal type="number" pos:line="105" pos:column="47">1<pos:position pos:line="105" pos:column="48"/></literal></expr>;<pos:position pos:line="105" pos:column="49"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="106" pos:column="25">add_object_array<pos:position pos:line="106" pos:column="41"/></name><argument_list pos:line="106" pos:column="41">(<argument><expr><name pos:line="106" pos:column="42">o<pos:position pos:line="106" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="45">NULL<pos:position pos:line="106" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="51">&amp;<pos:position pos:line="106" pos:column="56"/></operator><name pos:line="106" pos:column="52">want_obj<pos:position pos:line="106" pos:column="60"/></name></expr></argument>)<pos:position pos:line="106" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="107" pos:column="18"/></block></then></if>
	}<pos:position pos:line="108" pos:column="10"/></block></for>

	<comment type="block" pos:line="110" pos:column="9">/*
	 * We have sent all our refs already, and the other end
	 * should have chosen out of them. When we are operating
	 * in the stateless RPC mode, however, their choice may
	 * have been based on the set of older refs advertised
	 * by another process that handled the initial request.
	 */</comment>
	<if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><name pos:line="117" pos:column="13">has_non_tip<pos:position pos:line="117" pos:column="24"/></name></expr>)<pos:position pos:line="117" pos:column="25"/></condition><then pos:line="117" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="118" pos:column="17">check_non_tip<pos:position pos:line="118" pos:column="30"/></name><argument_list pos:line="118" pos:column="30">()<pos:position pos:line="118" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="33"/></expr_stmt></block></then></if>

	<if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><operator pos:line="120" pos:column="13">!<pos:position pos:line="120" pos:column="14"/></operator><name pos:line="120" pos:column="14">use_sideband<pos:position pos:line="120" pos:column="26"/></name> <operator pos:line="120" pos:column="27">&amp;&amp;<pos:position pos:line="120" pos:column="37"/></operator> <name pos:line="120" pos:column="30">daemon_mode<pos:position pos:line="120" pos:column="41"/></name></expr>)<pos:position pos:line="120" pos:column="42"/></condition><then pos:line="120" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><name pos:line="121" pos:column="17">no_progress<pos:position pos:line="121" pos:column="28"/></name> <operator pos:line="121" pos:column="29">=<pos:position pos:line="121" pos:column="30"/></operator> <literal type="number" pos:line="121" pos:column="31">1<pos:position pos:line="121" pos:column="32"/></literal></expr>;<pos:position pos:line="121" pos:column="33"/></expr_stmt></block></then></if>

	<if pos:line="123" pos:column="9">if <condition pos:line="123" pos:column="12">(<expr><name pos:line="123" pos:column="13">depth<pos:position pos:line="123" pos:column="18"/></name> <operator pos:line="123" pos:column="19">==<pos:position pos:line="123" pos:column="21"/></operator> <literal type="number" pos:line="123" pos:column="22">0<pos:position pos:line="123" pos:column="23"/></literal> <operator pos:line="123" pos:column="24">&amp;&amp;<pos:position pos:line="123" pos:column="34"/></operator> <operator pos:line="123" pos:column="27">!<pos:position pos:line="123" pos:column="28"/></operator><name pos:line="123" pos:column="28">deepen_rev_list<pos:position pos:line="123" pos:column="43"/></name> <operator pos:line="123" pos:column="44">&amp;&amp;<pos:position pos:line="123" pos:column="54"/></operator> <name><name pos:line="123" pos:column="47">shallows<pos:position pos:line="123" pos:column="55"/></name><operator pos:line="123" pos:column="55">.<pos:position pos:line="123" pos:column="56"/></operator><name pos:line="123" pos:column="56">nr<pos:position pos:line="123" pos:column="58"/></name></name> <operator pos:line="123" pos:column="59">==<pos:position pos:line="123" pos:column="61"/></operator> <literal type="number" pos:line="123" pos:column="62">0<pos:position pos:line="123" pos:column="63"/></literal></expr>)<pos:position pos:line="123" pos:column="64"/></condition><then pos:line="123" pos:column="64">
		<block type="pseudo"><return pos:line="124" pos:column="17">return;<pos:position pos:line="124" pos:column="24"/></return></block></then></if>
	<if pos:line="125" pos:column="9">if <condition pos:line="125" pos:column="12">(<expr><name pos:line="125" pos:column="13">depth<pos:position pos:line="125" pos:column="18"/></name> <operator pos:line="125" pos:column="19">&gt;<pos:position pos:line="125" pos:column="23"/></operator> <literal type="number" pos:line="125" pos:column="21">0<pos:position pos:line="125" pos:column="22"/></literal> <operator pos:line="125" pos:column="23">&amp;&amp;<pos:position pos:line="125" pos:column="33"/></operator> <name pos:line="125" pos:column="26">deepen_rev_list<pos:position pos:line="125" pos:column="41"/></name></expr>)<pos:position pos:line="125" pos:column="42"/></condition><then pos:line="125" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="126" pos:column="17">die<pos:position pos:line="126" pos:column="20"/></name><argument_list pos:line="126" pos:column="20">(<argument><expr><literal type="string" pos:line="126" pos:column="21">"git upload-pack: deepen and deepen-since (or deepen-not) cannot be used together"<pos:position pos:line="126" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="105"/></expr_stmt></block></then></if>
	<if pos:line="127" pos:column="9">if <condition pos:line="127" pos:column="12">(<expr><name pos:line="127" pos:column="13">depth<pos:position pos:line="127" pos:column="18"/></name> <operator pos:line="127" pos:column="19">&gt;<pos:position pos:line="127" pos:column="23"/></operator> <literal type="number" pos:line="127" pos:column="21">0<pos:position pos:line="127" pos:column="22"/></literal></expr>)<pos:position pos:line="127" pos:column="23"/></condition><then pos:line="127" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="128" pos:column="17">deepen<pos:position pos:line="128" pos:column="23"/></name><argument_list pos:line="128" pos:column="23">(<argument><expr><name pos:line="128" pos:column="24">depth<pos:position pos:line="128" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="31">deepen_relative<pos:position pos:line="128" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="128" pos:column="48">&amp;<pos:position pos:line="128" pos:column="53"/></operator><name pos:line="128" pos:column="49">shallows<pos:position pos:line="128" pos:column="57"/></name></expr></argument>)<pos:position pos:line="128" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="59"/></expr_stmt></block></then>
	<elseif pos:line="129" pos:column="9">else <if pos:line="129" pos:column="14">if <condition pos:line="129" pos:column="17">(<expr><name pos:line="129" pos:column="18">deepen_rev_list<pos:position pos:line="129" pos:column="33"/></name></expr>)<pos:position pos:line="129" pos:column="34"/></condition><then pos:line="129" pos:column="34"> <block pos:line="129" pos:column="35">{
		<decl_stmt><decl><type><name><name pos:line="130" pos:column="17">struct<pos:position pos:line="130" pos:column="23"/></name> <name pos:line="130" pos:column="24">argv_array<pos:position pos:line="130" pos:column="34"/></name></name></type> <name pos:line="130" pos:column="35">av<pos:position pos:line="130" pos:column="37"/></name> <init pos:line="130" pos:column="38">= <expr><name pos:line="130" pos:column="40">ARGV_ARRAY_INIT<pos:position pos:line="130" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="130" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="131" pos:column="17">int<pos:position pos:line="131" pos:column="20"/></name></type> <name pos:line="131" pos:column="21">i<pos:position pos:line="131" pos:column="22"/></name></decl>;<pos:position pos:line="131" pos:column="23"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="133" pos:column="17">argv_array_push<pos:position pos:line="133" pos:column="32"/></name><argument_list pos:line="133" pos:column="32">(<argument><expr><operator pos:line="133" pos:column="33">&amp;<pos:position pos:line="133" pos:column="38"/></operator><name pos:line="133" pos:column="34">av<pos:position pos:line="133" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="38">"rev-list"<pos:position pos:line="133" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="50"/></expr_stmt>
		<if pos:line="134" pos:column="17">if <condition pos:line="134" pos:column="20">(<expr><name pos:line="134" pos:column="21">deepen_since<pos:position pos:line="134" pos:column="33"/></name></expr>)<pos:position pos:line="134" pos:column="34"/></condition><then pos:line="134" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="135" pos:column="25">argv_array_pushf<pos:position pos:line="135" pos:column="41"/></name><argument_list pos:line="135" pos:column="41">(<argument><expr><operator pos:line="135" pos:column="42">&amp;<pos:position pos:line="135" pos:column="47"/></operator><name pos:line="135" pos:column="43">av<pos:position pos:line="135" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="47">"--max-age=%"<pos:position pos:line="135" pos:column="60"/></literal><name pos:line="135" pos:column="60">PRItime<pos:position pos:line="135" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="69">deepen_since<pos:position pos:line="135" pos:column="81"/></name></expr></argument>)<pos:position pos:line="135" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="83"/></expr_stmt></block></then></if>
		<if pos:line="136" pos:column="17">if <condition pos:line="136" pos:column="20">(<expr><name><name pos:line="136" pos:column="21">deepen_not<pos:position pos:line="136" pos:column="31"/></name><operator pos:line="136" pos:column="31">.<pos:position pos:line="136" pos:column="32"/></operator><name pos:line="136" pos:column="32">nr<pos:position pos:line="136" pos:column="34"/></name></name></expr>)<pos:position pos:line="136" pos:column="35"/></condition><then pos:line="136" pos:column="35"> <block pos:line="136" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="137" pos:column="25">argv_array_push<pos:position pos:line="137" pos:column="40"/></name><argument_list pos:line="137" pos:column="40">(<argument><expr><operator pos:line="137" pos:column="41">&amp;<pos:position pos:line="137" pos:column="46"/></operator><name pos:line="137" pos:column="42">av<pos:position pos:line="137" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="137" pos:column="46">"--not"<pos:position pos:line="137" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="55"/></expr_stmt>
			<for pos:line="138" pos:column="25">for <control pos:line="138" pos:column="29">(<init><expr><name pos:line="138" pos:column="30">i<pos:position pos:line="138" pos:column="31"/></name> <operator pos:line="138" pos:column="32">=<pos:position pos:line="138" pos:column="33"/></operator> <literal type="number" pos:line="138" pos:column="34">0<pos:position pos:line="138" pos:column="35"/></literal></expr>;<pos:position pos:line="138" pos:column="36"/></init> <condition><expr><name pos:line="138" pos:column="37">i<pos:position pos:line="138" pos:column="38"/></name> <operator pos:line="138" pos:column="39">&lt;<pos:position pos:line="138" pos:column="43"/></operator> <name><name pos:line="138" pos:column="41">deepen_not<pos:position pos:line="138" pos:column="51"/></name><operator pos:line="138" pos:column="51">.<pos:position pos:line="138" pos:column="52"/></operator><name pos:line="138" pos:column="52">nr<pos:position pos:line="138" pos:column="54"/></name></name></expr>;<pos:position pos:line="138" pos:column="55"/></condition> <incr><expr><name pos:line="138" pos:column="56">i<pos:position pos:line="138" pos:column="57"/></name><operator pos:line="138" pos:column="57">++<pos:position pos:line="138" pos:column="59"/></operator></expr></incr>)<pos:position pos:line="138" pos:column="60"/></control> <block pos:line="138" pos:column="61">{
				<decl_stmt><decl><type><name><name pos:line="139" pos:column="33">struct<pos:position pos:line="139" pos:column="39"/></name> <name pos:line="139" pos:column="40">string_list_item<pos:position pos:line="139" pos:column="56"/></name></name> <modifier pos:line="139" pos:column="57">*<pos:position pos:line="139" pos:column="58"/></modifier></type><name pos:line="139" pos:column="58">s<pos:position pos:line="139" pos:column="59"/></name> <init pos:line="139" pos:column="60">= <expr><name><name pos:line="139" pos:column="62">deepen_not<pos:position pos:line="139" pos:column="72"/></name><operator pos:line="139" pos:column="72">.<pos:position pos:line="139" pos:column="73"/></operator><name pos:line="139" pos:column="73">items<pos:position pos:line="139" pos:column="78"/></name></name> <operator pos:line="139" pos:column="79">+<pos:position pos:line="139" pos:column="80"/></operator> <name pos:line="139" pos:column="81">i<pos:position pos:line="139" pos:column="82"/></name></expr></init></decl>;<pos:position pos:line="139" pos:column="83"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="140" pos:column="33">argv_array_push<pos:position pos:line="140" pos:column="48"/></name><argument_list pos:line="140" pos:column="48">(<argument><expr><operator pos:line="140" pos:column="49">&amp;<pos:position pos:line="140" pos:column="54"/></operator><name pos:line="140" pos:column="50">av<pos:position pos:line="140" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="54">s<pos:position pos:line="140" pos:column="55"/></name><operator pos:line="140" pos:column="55">-&gt;<pos:position pos:line="140" pos:column="60"/></operator><name pos:line="140" pos:column="57">string<pos:position pos:line="140" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="140" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="65"/></expr_stmt>
			}<pos:position pos:line="141" pos:column="26"/></block></for>
			<expr_stmt><expr><call><name pos:line="142" pos:column="25">argv_array_push<pos:position pos:line="142" pos:column="40"/></name><argument_list pos:line="142" pos:column="40">(<argument><expr><operator pos:line="142" pos:column="41">&amp;<pos:position pos:line="142" pos:column="46"/></operator><name pos:line="142" pos:column="42">av<pos:position pos:line="142" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="142" pos:column="46">"--not"<pos:position pos:line="142" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="142" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="143" pos:column="18"/></block></then></if>
		<for pos:line="144" pos:column="17">for <control pos:line="144" pos:column="21">(<init><expr><name pos:line="144" pos:column="22">i<pos:position pos:line="144" pos:column="23"/></name> <operator pos:line="144" pos:column="24">=<pos:position pos:line="144" pos:column="25"/></operator> <literal type="number" pos:line="144" pos:column="26">0<pos:position pos:line="144" pos:column="27"/></literal></expr>;<pos:position pos:line="144" pos:column="28"/></init> <condition><expr><name pos:line="144" pos:column="29">i<pos:position pos:line="144" pos:column="30"/></name> <operator pos:line="144" pos:column="31">&lt;<pos:position pos:line="144" pos:column="35"/></operator> <name><name pos:line="144" pos:column="33">want_obj<pos:position pos:line="144" pos:column="41"/></name><operator pos:line="144" pos:column="41">.<pos:position pos:line="144" pos:column="42"/></operator><name pos:line="144" pos:column="42">nr<pos:position pos:line="144" pos:column="44"/></name></name></expr>;<pos:position pos:line="144" pos:column="45"/></condition> <incr><expr><name pos:line="144" pos:column="46">i<pos:position pos:line="144" pos:column="47"/></name><operator pos:line="144" pos:column="47">++<pos:position pos:line="144" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="144" pos:column="50"/></control> <block pos:line="144" pos:column="51">{
			<decl_stmt><decl><type><name><name pos:line="145" pos:column="25">struct<pos:position pos:line="145" pos:column="31"/></name> <name pos:line="145" pos:column="32">object<pos:position pos:line="145" pos:column="38"/></name></name> <modifier pos:line="145" pos:column="39">*<pos:position pos:line="145" pos:column="40"/></modifier></type><name pos:line="145" pos:column="40">o<pos:position pos:line="145" pos:column="41"/></name> <init pos:line="145" pos:column="42">= <expr><name><name pos:line="145" pos:column="44">want_obj<pos:position pos:line="145" pos:column="52"/></name><operator pos:line="145" pos:column="52">.<pos:position pos:line="145" pos:column="53"/></operator><name pos:line="145" pos:column="53">objects<pos:position pos:line="145" pos:column="60"/></name><index pos:line="145" pos:column="60">[<expr><name pos:line="145" pos:column="61">i<pos:position pos:line="145" pos:column="62"/></name></expr>]<pos:position pos:line="145" pos:column="63"/></index></name><operator pos:line="145" pos:column="63">.<pos:position pos:line="145" pos:column="64"/></operator><name pos:line="145" pos:column="64">item<pos:position pos:line="145" pos:column="68"/></name></expr></init></decl>;<pos:position pos:line="145" pos:column="69"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="146" pos:column="25">argv_array_push<pos:position pos:line="146" pos:column="40"/></name><argument_list pos:line="146" pos:column="40">(<argument><expr><operator pos:line="146" pos:column="41">&amp;<pos:position pos:line="146" pos:column="46"/></operator><name pos:line="146" pos:column="42">av<pos:position pos:line="146" pos:column="44"/></name></expr></argument>, <argument><expr><call><name pos:line="146" pos:column="46">oid_to_hex<pos:position pos:line="146" pos:column="56"/></name><argument_list pos:line="146" pos:column="56">(<argument><expr><operator pos:line="146" pos:column="57">&amp;<pos:position pos:line="146" pos:column="62"/></operator><name><name pos:line="146" pos:column="58">o<pos:position pos:line="146" pos:column="59"/></name><operator pos:line="146" pos:column="59">-&gt;<pos:position pos:line="146" pos:column="64"/></operator><name pos:line="146" pos:column="61">oid<pos:position pos:line="146" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="146" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="146" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="147" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="148" pos:column="17">deepen_by_rev_list<pos:position pos:line="148" pos:column="35"/></name><argument_list pos:line="148" pos:column="35">(<argument><expr><name><name pos:line="148" pos:column="36">av<pos:position pos:line="148" pos:column="38"/></name><operator pos:line="148" pos:column="38">.<pos:position pos:line="148" pos:column="39"/></operator><name pos:line="148" pos:column="39">argc<pos:position pos:line="148" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="45">av<pos:position pos:line="148" pos:column="47"/></name><operator pos:line="148" pos:column="47">.<pos:position pos:line="148" pos:column="48"/></operator><name pos:line="148" pos:column="48">argv<pos:position pos:line="148" pos:column="52"/></name></name></expr></argument>, <argument><expr><operator pos:line="148" pos:column="54">&amp;<pos:position pos:line="148" pos:column="59"/></operator><name pos:line="148" pos:column="55">shallows<pos:position pos:line="148" pos:column="63"/></name></expr></argument>)<pos:position pos:line="148" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="149" pos:column="17">argv_array_clear<pos:position pos:line="149" pos:column="33"/></name><argument_list pos:line="149" pos:column="33">(<argument><expr><operator pos:line="149" pos:column="34">&amp;<pos:position pos:line="149" pos:column="39"/></operator><name pos:line="149" pos:column="35">av<pos:position pos:line="149" pos:column="37"/></name></expr></argument>)<pos:position pos:line="149" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="150" pos:column="10"/></block></then></if></elseif>
	<elseif pos:line="151" pos:column="9">else
		<if pos:line="152" pos:column="17">if <condition pos:line="152" pos:column="20">(<expr><name><name pos:line="152" pos:column="21">shallows<pos:position pos:line="152" pos:column="29"/></name><operator pos:line="152" pos:column="29">.<pos:position pos:line="152" pos:column="30"/></operator><name pos:line="152" pos:column="30">nr<pos:position pos:line="152" pos:column="32"/></name></name> <operator pos:line="152" pos:column="33">&gt;<pos:position pos:line="152" pos:column="37"/></operator> <literal type="number" pos:line="152" pos:column="35">0<pos:position pos:line="152" pos:column="36"/></literal></expr>)<pos:position pos:line="152" pos:column="37"/></condition><then pos:line="152" pos:column="37"> <block pos:line="152" pos:column="38">{
			<decl_stmt><decl><type><name pos:line="153" pos:column="25">int<pos:position pos:line="153" pos:column="28"/></name></type> <name pos:line="153" pos:column="29">i<pos:position pos:line="153" pos:column="30"/></name></decl>;<pos:position pos:line="153" pos:column="31"/></decl_stmt>
			<for pos:line="154" pos:column="25">for <control pos:line="154" pos:column="29">(<init><expr><name pos:line="154" pos:column="30">i<pos:position pos:line="154" pos:column="31"/></name> <operator pos:line="154" pos:column="32">=<pos:position pos:line="154" pos:column="33"/></operator> <literal type="number" pos:line="154" pos:column="34">0<pos:position pos:line="154" pos:column="35"/></literal></expr>;<pos:position pos:line="154" pos:column="36"/></init> <condition><expr><name pos:line="154" pos:column="37">i<pos:position pos:line="154" pos:column="38"/></name> <operator pos:line="154" pos:column="39">&lt;<pos:position pos:line="154" pos:column="43"/></operator> <name><name pos:line="154" pos:column="41">shallows<pos:position pos:line="154" pos:column="49"/></name><operator pos:line="154" pos:column="49">.<pos:position pos:line="154" pos:column="50"/></operator><name pos:line="154" pos:column="50">nr<pos:position pos:line="154" pos:column="52"/></name></name></expr>;<pos:position pos:line="154" pos:column="53"/></condition> <incr><expr><name pos:line="154" pos:column="54">i<pos:position pos:line="154" pos:column="55"/></name><operator pos:line="154" pos:column="55">++<pos:position pos:line="154" pos:column="57"/></operator></expr></incr>)<pos:position pos:line="154" pos:column="58"/></control>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="155" pos:column="33">register_shallow<pos:position pos:line="155" pos:column="49"/></name><argument_list pos:line="155" pos:column="49">(<argument><expr><operator pos:line="155" pos:column="50">&amp;<pos:position pos:line="155" pos:column="55"/></operator><name><name pos:line="155" pos:column="51">shallows<pos:position pos:line="155" pos:column="59"/></name><operator pos:line="155" pos:column="59">.<pos:position pos:line="155" pos:column="60"/></operator><name pos:line="155" pos:column="60">objects<pos:position pos:line="155" pos:column="67"/></name><index pos:line="155" pos:column="67">[<expr><name pos:line="155" pos:column="68">i<pos:position pos:line="155" pos:column="69"/></name></expr>]<pos:position pos:line="155" pos:column="70"/></index></name><operator pos:line="155" pos:column="70">.<pos:position pos:line="155" pos:column="71"/></operator><name><name pos:line="155" pos:column="71">item<pos:position pos:line="155" pos:column="75"/></name><operator pos:line="155" pos:column="75">-&gt;<pos:position pos:line="155" pos:column="80"/></operator><name pos:line="155" pos:column="77">oid<pos:position pos:line="155" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="155" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="82"/></expr_stmt></block></for>
		}<pos:position pos:line="156" pos:column="18"/></block></then></if></elseif></if>

	<expr_stmt><expr><name pos:line="158" pos:column="9">shallow_nr<pos:position pos:line="158" pos:column="19"/></name> <operator pos:line="158" pos:column="20">+=<pos:position pos:line="158" pos:column="22"/></operator> <name><name pos:line="158" pos:column="23">shallows<pos:position pos:line="158" pos:column="31"/></name><operator pos:line="158" pos:column="31">.<pos:position pos:line="158" pos:column="32"/></operator><name pos:line="158" pos:column="32">nr<pos:position pos:line="158" pos:column="34"/></name></name></expr>;<pos:position pos:line="158" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="159" pos:column="9">free<pos:position pos:line="159" pos:column="13"/></name><argument_list pos:line="159" pos:column="13">(<argument><expr><name><name pos:line="159" pos:column="14">shallows<pos:position pos:line="159" pos:column="22"/></name><operator pos:line="159" pos:column="22">.<pos:position pos:line="159" pos:column="23"/></operator><name pos:line="159" pos:column="23">objects<pos:position pos:line="159" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="159" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="32"/></expr_stmt>
}<pos:position pos:line="160" pos:column="2"/></block></function></unit>
