<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_833_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">finish_bulk_checkin<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">bulk_checkin_state<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">state<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object_id<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">oid<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">packname<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><name pos:line="4" pos:column="34">STRBUF_INIT<pos:position pos:line="4" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name><name pos:line="7" pos:column="14">state<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">f<pos:position pos:line="7" pos:column="22"/></name></name></expr>)<pos:position pos:line="7" pos:column="23"/></condition><then pos:line="7" pos:column="23">
		<block type="pseudo"><return pos:line="8" pos:column="17">return;<pos:position pos:line="8" pos:column="24"/></return></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">state<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">-&gt;<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="20">nr_written<pos:position pos:line="10" pos:column="30"/></name></name> <operator pos:line="10" pos:column="31">==<pos:position pos:line="10" pos:column="33"/></operator> <literal type="number" pos:line="10" pos:column="34">0<pos:position pos:line="10" pos:column="35"/></literal></expr>)<pos:position pos:line="10" pos:column="36"/></condition><then pos:line="10" pos:column="36"> <block pos:line="10" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">close<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name><name pos:line="11" pos:column="23">state<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">-&gt;<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="30">f<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">-&gt;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="33">fd<pos:position pos:line="11" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">unlink<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name><name pos:line="12" pos:column="24">state<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">pack_tmp_name<pos:position pos:line="12" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
		<goto pos:line="13" pos:column="17">goto <name pos:line="13" pos:column="22">clear_exit<pos:position pos:line="13" pos:column="32"/></name>;<pos:position pos:line="13" pos:column="33"/></goto>
	}<pos:position pos:line="14" pos:column="10"/></block></then> <elseif pos:line="14" pos:column="11">else <if pos:line="14" pos:column="16">if <condition pos:line="14" pos:column="19">(<expr><name><name pos:line="14" pos:column="20">state<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">-&gt;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="27">nr_written<pos:position pos:line="14" pos:column="37"/></name></name> <operator pos:line="14" pos:column="38">==<pos:position pos:line="14" pos:column="40"/></operator> <literal type="number" pos:line="14" pos:column="41">1<pos:position pos:line="14" pos:column="42"/></literal></expr>)<pos:position pos:line="14" pos:column="43"/></condition><then pos:line="14" pos:column="43"> <block pos:line="14" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">sha1close<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name><name pos:line="15" pos:column="27">state<pos:position pos:line="15" pos:column="32"/></name><operator pos:line="15" pos:column="32">-&gt;<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="34">f<pos:position pos:line="15" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="37">oid<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">.<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="41">hash<pos:position pos:line="15" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="47">CSUM_FSYNC<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if></elseif> <else pos:line="16" pos:column="11">else <block pos:line="16" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">int<pos:position pos:line="17" pos:column="20"/></name></type> <name pos:line="17" pos:column="21">fd<pos:position pos:line="17" pos:column="23"/></name> <init pos:line="17" pos:column="24">= <expr><call><name pos:line="17" pos:column="26">sha1close<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name><name pos:line="17" pos:column="36">state<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">-&gt;<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="43">f<pos:position pos:line="17" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="46">oid<pos:position pos:line="17" pos:column="49"/></name><operator pos:line="17" pos:column="49">.<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="50">hash<pos:position pos:line="17" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="56">0<pos:position pos:line="17" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="59"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">fixup_pack_header_footer<pos:position pos:line="18" pos:column="41"/></name><argument_list pos:line="18" pos:column="41">(<argument><expr><name pos:line="18" pos:column="42">fd<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="46">oid<pos:position pos:line="18" pos:column="49"/></name><operator pos:line="18" pos:column="49">.<pos:position pos:line="18" pos:column="50"/></operator><name pos:line="18" pos:column="50">hash<pos:position pos:line="18" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="56">state<pos:position pos:line="18" pos:column="61"/></name><operator pos:line="18" pos:column="61">-&gt;<pos:position pos:line="18" pos:column="66"/></operator><name pos:line="18" pos:column="63">pack_tmp_name<pos:position pos:line="18" pos:column="76"/></name></name></expr></argument>,
					 <argument><expr><name><name pos:line="19" pos:column="42">state<pos:position pos:line="19" pos:column="47"/></name><operator pos:line="19" pos:column="47">-&gt;<pos:position pos:line="19" pos:column="52"/></operator><name pos:line="19" pos:column="49">nr_written<pos:position pos:line="19" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="61">oid<pos:position pos:line="19" pos:column="64"/></name><operator pos:line="19" pos:column="64">.<pos:position pos:line="19" pos:column="65"/></operator><name pos:line="19" pos:column="65">hash<pos:position pos:line="19" pos:column="69"/></name></name></expr></argument>,
					 <argument><expr><name><name pos:line="20" pos:column="42">state<pos:position pos:line="20" pos:column="47"/></name><operator pos:line="20" pos:column="47">-&gt;<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="49">offset<pos:position pos:line="20" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">close<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">fd<pos:position pos:line="21" pos:column="25"/></name></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">strbuf_addf<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><operator pos:line="24" pos:column="21">&amp;<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="22">packname<pos:position pos:line="24" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="32">"%s/pack/pack-"<pos:position pos:line="24" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="49">get_object_directory<pos:position pos:line="24" pos:column="69"/></name><argument_list pos:line="24" pos:column="69">()<pos:position pos:line="24" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="73"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">finish_tmp_packfile<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><operator pos:line="25" pos:column="29">&amp;<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="30">packname<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="40">state<pos:position pos:line="25" pos:column="45"/></name><operator pos:line="25" pos:column="45">-&gt;<pos:position pos:line="25" pos:column="50"/></operator><name pos:line="25" pos:column="47">pack_tmp_name<pos:position pos:line="25" pos:column="60"/></name></name></expr></argument>,
			    <argument><expr><name><name pos:line="26" pos:column="29">state<pos:position pos:line="26" pos:column="34"/></name><operator pos:line="26" pos:column="34">-&gt;<pos:position pos:line="26" pos:column="39"/></operator><name pos:line="26" pos:column="36">written<pos:position pos:line="26" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="45">state<pos:position pos:line="26" pos:column="50"/></name><operator pos:line="26" pos:column="50">-&gt;<pos:position pos:line="26" pos:column="55"/></operator><name pos:line="26" pos:column="52">nr_written<pos:position pos:line="26" pos:column="62"/></name></name></expr></argument>,
			    <argument><expr><operator pos:line="27" pos:column="29">&amp;<pos:position pos:line="27" pos:column="34"/></operator><name><name pos:line="27" pos:column="30">state<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">-&gt;<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="37">pack_idx_opts<pos:position pos:line="27" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="52">oid<pos:position pos:line="27" pos:column="55"/></name><operator pos:line="27" pos:column="55">.<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="56">hash<pos:position pos:line="27" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="62"/></expr_stmt>
	<for pos:line="28" pos:column="9">for <control pos:line="28" pos:column="13">(<init><expr><name pos:line="28" pos:column="14">i<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal></expr>;<pos:position pos:line="28" pos:column="20"/></init> <condition><expr><name pos:line="28" pos:column="21">i<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">&lt;<pos:position pos:line="28" pos:column="27"/></operator> <name><name pos:line="28" pos:column="25">state<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">-&gt;<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="32">nr_written<pos:position pos:line="28" pos:column="42"/></name></name></expr>;<pos:position pos:line="28" pos:column="43"/></condition> <incr><expr><name pos:line="28" pos:column="44">i<pos:position pos:line="28" pos:column="45"/></name><operator pos:line="28" pos:column="45">++<pos:position pos:line="28" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="28" pos:column="48"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="17">free<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name><name pos:line="29" pos:column="22">state<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">-&gt;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="29">written<pos:position pos:line="29" pos:column="36"/></name><index pos:line="29" pos:column="36">[<expr><name pos:line="29" pos:column="37">i<pos:position pos:line="29" pos:column="38"/></name></expr>]<pos:position pos:line="29" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt></block></for>

<label><name pos:line="31" pos:column="1">clear_exit<pos:position pos:line="31" pos:column="11"/></name>:<pos:position pos:line="31" pos:column="12"/></label>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">free<pos:position pos:line="32" pos:column="13"/></name><argument_list pos:line="32" pos:column="13">(<argument><expr><name><name pos:line="32" pos:column="14">state<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">-&gt;<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="21">written<pos:position pos:line="32" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">memset<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">state<pos:position pos:line="33" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="23">0<pos:position pos:line="33" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="26">sizeof<argument_list pos:line="33" pos:column="32">(<argument><expr><operator pos:line="33" pos:column="33">*<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">state<pos:position pos:line="33" pos:column="39"/></name></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="35" pos:column="9">strbuf_release<pos:position pos:line="35" pos:column="23"/></name><argument_list pos:line="35" pos:column="23">(<argument><expr><operator pos:line="35" pos:column="24">&amp;<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="25">packname<pos:position pos:line="35" pos:column="33"/></name></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt>
	<comment type="block" pos:line="36" pos:column="9">/* Make objects we just wrote available to ourselves */</comment>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">reprepare_packed_git<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">()<pos:position pos:line="37" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="32"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
