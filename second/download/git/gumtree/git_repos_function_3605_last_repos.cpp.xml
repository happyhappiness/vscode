<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3605_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ws_blank_line<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">line<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">int<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">len<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">unsigned<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">ws_rule<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * We _might_ want to treat CR differently from other
	 * whitespace characters when ws_rule has WS_CR_AT_EOL, but
	 * for now we just use this stupid definition.
	 */</comment>
	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><name pos:line="8" pos:column="16">len<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">--<pos:position pos:line="8" pos:column="21"/></operator> <operator pos:line="8" pos:column="22">&gt;<pos:position pos:line="8" pos:column="26"/></operator> <literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr>)<pos:position pos:line="8" pos:column="26"/></condition> <block pos:line="8" pos:column="27">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">!<pos:position pos:line="9" pos:column="22"/></operator><call><name pos:line="9" pos:column="22">isspace<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><operator pos:line="9" pos:column="30">*<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">line<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37">
			<block type="pseudo"><return pos:line="10" pos:column="25">return <expr><literal type="number" pos:line="10" pos:column="32">0<pos:position pos:line="10" pos:column="33"/></literal></expr>;<pos:position pos:line="10" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="11" pos:column="17">line<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">++<pos:position pos:line="11" pos:column="23"/></operator></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></while>
	<return pos:line="13" pos:column="9">return <expr><literal type="number" pos:line="13" pos:column="16">1<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
