<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5370_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">overlay_tree_on_index<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">index_state<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">istate<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
			   <parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">tree_name<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier> <name pos:line="2" pos:column="57">char<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">prefix<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">tree<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">tree<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">object_id<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">oid<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">pathspec<pos:position pos:line="6" pos:column="24"/></name></name></type> <name pos:line="6" pos:column="25">pathspec<pos:position pos:line="6" pos:column="33"/></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">cache_entry<pos:position pos:line="7" pos:column="27"/></name></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">last_stage0<pos:position pos:line="7" pos:column="40"/></name> <init pos:line="7" pos:column="41">= <expr><name pos:line="7" pos:column="43">NULL<pos:position pos:line="7" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">i<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">get_oid<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">tree_name<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="32">&amp;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="33">oid<pos:position pos:line="10" pos:column="36"/></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="38"/></condition><then pos:line="10" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">die<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><literal type="string" pos:line="11" pos:column="21">"tree-ish %s not found."<pos:position pos:line="11" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="47">tree_name<pos:position pos:line="11" pos:column="56"/></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="58"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="12" pos:column="9">tree<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <call><name pos:line="12" pos:column="16">parse_tree_indirect<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">(<argument><expr><operator pos:line="12" pos:column="36">&amp;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="37">oid<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">tree<pos:position pos:line="13" pos:column="18"/></name></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">die<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><literal type="string" pos:line="14" pos:column="21">"bad tree-ish %s"<pos:position pos:line="14" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="40">tree_name<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="16" pos:column="9">/* Hoist the unmerged entries up to stage #3 to make room */</comment>
	<for pos:line="17" pos:column="9">for <control pos:line="17" pos:column="13">(<init><expr><name pos:line="17" pos:column="14">i<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></init> <condition><expr><name pos:line="17" pos:column="21">i<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">&lt;<pos:position pos:line="17" pos:column="27"/></operator> <name><name pos:line="17" pos:column="25">istate<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">cache_nr<pos:position pos:line="17" pos:column="41"/></name></name></expr>;<pos:position pos:line="17" pos:column="42"/></condition> <incr><expr><name pos:line="17" pos:column="43">i<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">++<pos:position pos:line="17" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="47"/></control> <block pos:line="17" pos:column="48">{
		<decl_stmt><decl><type><name><name pos:line="18" pos:column="17">struct<pos:position pos:line="18" pos:column="23"/></name> <name pos:line="18" pos:column="24">cache_entry<pos:position pos:line="18" pos:column="35"/></name></name> <modifier pos:line="18" pos:column="36">*<pos:position pos:line="18" pos:column="37"/></modifier></type><name pos:line="18" pos:column="37">ce<pos:position pos:line="18" pos:column="39"/></name> <init pos:line="18" pos:column="40">= <expr><name><name pos:line="18" pos:column="42">istate<pos:position pos:line="18" pos:column="48"/></name><operator pos:line="18" pos:column="48">-&gt;<pos:position pos:line="18" pos:column="53"/></operator><name pos:line="18" pos:column="50">cache<pos:position pos:line="18" pos:column="55"/></name><index pos:line="18" pos:column="55">[<expr><name pos:line="18" pos:column="56">i<pos:position pos:line="18" pos:column="57"/></name></expr>]<pos:position pos:line="18" pos:column="58"/></index></name></expr></init></decl>;<pos:position pos:line="18" pos:column="59"/></decl_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">!<pos:position pos:line="19" pos:column="22"/></operator><call><name pos:line="19" pos:column="22">ce_stage<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">ce<pos:position pos:line="19" pos:column="33"/></name></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="35"/></condition><then pos:line="19" pos:column="35">
			<block type="pseudo"><continue pos:line="20" pos:column="25">continue;<pos:position pos:line="20" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name><name pos:line="21" pos:column="17">ce<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">-&gt;<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="21">ce_flags<pos:position pos:line="21" pos:column="29"/></name></name> <operator pos:line="21" pos:column="30">|=<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="33">CE_STAGEMASK<pos:position pos:line="21" pos:column="45"/></name></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></for>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">prefix<pos:position pos:line="24" pos:column="19"/></name></expr>)<pos:position pos:line="24" pos:column="20"/></condition><then pos:line="24" pos:column="20"> <block pos:line="24" pos:column="21">{
		<expr_stmt><expr><specifier pos:line="25" pos:column="17">static<pos:position pos:line="25" pos:column="23"/></specifier> <specifier pos:line="25" pos:column="24">const<pos:position pos:line="25" pos:column="29"/></specifier> <name pos:line="25" pos:column="30">char<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">*<pos:position pos:line="25" pos:column="36"/></operator><operator pos:line="25" pos:column="36">(<pos:position pos:line="25" pos:column="37"/></operator><name><name pos:line="25" pos:column="37">matchbuf<pos:position pos:line="25" pos:column="45"/></name><index pos:line="25" pos:column="45">[<expr><literal type="number" pos:line="25" pos:column="46">1<pos:position pos:line="25" pos:column="47"/></literal></expr>]<pos:position pos:line="25" pos:column="48"/></index></name><operator pos:line="25" pos:column="48">)<pos:position pos:line="25" pos:column="49"/></operator></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="26" pos:column="17">matchbuf<pos:position pos:line="26" pos:column="25"/></name><index pos:line="26" pos:column="25">[<expr><literal type="number" pos:line="26" pos:column="26">0<pos:position pos:line="26" pos:column="27"/></literal></expr>]<pos:position pos:line="26" pos:column="28"/></index></name> <operator pos:line="26" pos:column="29">=<pos:position pos:line="26" pos:column="30"/></operator> <name pos:line="26" pos:column="31">NULL<pos:position pos:line="26" pos:column="35"/></name></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">parse_pathspec<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><operator pos:line="27" pos:column="32">&amp;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="33">pathspec<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="43">PATHSPEC_ALL_MAGIC<pos:position pos:line="27" pos:column="61"/></name></expr></argument>,
			       <argument><expr><name pos:line="28" pos:column="32">PATHSPEC_PREFER_CWD<pos:position pos:line="28" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="53">prefix<pos:position pos:line="28" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="61">matchbuf<pos:position pos:line="28" pos:column="69"/></name></expr></argument>)<pos:position pos:line="28" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="71"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then> <else pos:line="29" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="17">memset<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><operator pos:line="30" pos:column="24">&amp;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="25">pathspec<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="35">0<pos:position pos:line="30" pos:column="36"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="38">sizeof<argument_list pos:line="30" pos:column="44">(<argument><expr><name pos:line="30" pos:column="45">pathspec<pos:position pos:line="30" pos:column="53"/></name></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt></block></else></if>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">read_tree<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">tree<pos:position pos:line="31" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="29">1<pos:position pos:line="31" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="31" pos:column="32">&amp;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="33">pathspec<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">istate<pos:position pos:line="31" pos:column="49"/></name></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="51"/></condition><then pos:line="31" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="17">die<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><literal type="string" pos:line="32" pos:column="21">"unable to read tree entries %s"<pos:position pos:line="32" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="55">tree_name<pos:position pos:line="32" pos:column="64"/></name></expr></argument>)<pos:position pos:line="32" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="66"/></expr_stmt></block></then></if>

	<for pos:line="34" pos:column="9">for <control pos:line="34" pos:column="13">(<init><expr><name pos:line="34" pos:column="14">i<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <literal type="number" pos:line="34" pos:column="18">0<pos:position pos:line="34" pos:column="19"/></literal></expr>;<pos:position pos:line="34" pos:column="20"/></init> <condition><expr><name pos:line="34" pos:column="21">i<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">&lt;<pos:position pos:line="34" pos:column="27"/></operator> <name><name pos:line="34" pos:column="25">istate<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">-&gt;<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="33">cache_nr<pos:position pos:line="34" pos:column="41"/></name></name></expr>;<pos:position pos:line="34" pos:column="42"/></condition> <incr><expr><name pos:line="34" pos:column="43">i<pos:position pos:line="34" pos:column="44"/></name><operator pos:line="34" pos:column="44">++<pos:position pos:line="34" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="47"/></control> <block pos:line="34" pos:column="48">{
		<decl_stmt><decl><type><name><name pos:line="35" pos:column="17">struct<pos:position pos:line="35" pos:column="23"/></name> <name pos:line="35" pos:column="24">cache_entry<pos:position pos:line="35" pos:column="35"/></name></name> <modifier pos:line="35" pos:column="36">*<pos:position pos:line="35" pos:column="37"/></modifier></type><name pos:line="35" pos:column="37">ce<pos:position pos:line="35" pos:column="39"/></name> <init pos:line="35" pos:column="40">= <expr><name><name pos:line="35" pos:column="42">istate<pos:position pos:line="35" pos:column="48"/></name><operator pos:line="35" pos:column="48">-&gt;<pos:position pos:line="35" pos:column="53"/></operator><name pos:line="35" pos:column="50">cache<pos:position pos:line="35" pos:column="55"/></name><index pos:line="35" pos:column="55">[<expr><name pos:line="35" pos:column="56">i<pos:position pos:line="35" pos:column="57"/></name></expr>]<pos:position pos:line="35" pos:column="58"/></index></name></expr></init></decl>;<pos:position pos:line="35" pos:column="59"/></decl_stmt>
		<switch pos:line="36" pos:column="17">switch <condition pos:line="36" pos:column="24">(<expr><call><name pos:line="36" pos:column="25">ce_stage<pos:position pos:line="36" pos:column="33"/></name><argument_list pos:line="36" pos:column="33">(<argument><expr><name pos:line="36" pos:column="34">ce<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="38"/></condition> <block pos:line="36" pos:column="39">{
		<case pos:line="37" pos:column="17">case <expr><literal type="number" pos:line="37" pos:column="22">0<pos:position pos:line="37" pos:column="23"/></literal></expr>:<pos:position pos:line="37" pos:column="24"/></case>
			<expr_stmt><expr><name pos:line="38" pos:column="25">last_stage0<pos:position pos:line="38" pos:column="36"/></name> <operator pos:line="38" pos:column="37">=<pos:position pos:line="38" pos:column="38"/></operator> <name pos:line="38" pos:column="39">ce<pos:position pos:line="38" pos:column="41"/></name></expr>;<pos:position pos:line="38" pos:column="42"/></expr_stmt>
			<comment type="block" pos:line="39" pos:column="25">/* fallthru */</comment>
		<default pos:line="40" pos:column="17">default:<pos:position pos:line="40" pos:column="25"/></default>
			<continue pos:line="41" pos:column="25">continue;<pos:position pos:line="41" pos:column="34"/></continue>
		<case pos:line="42" pos:column="17">case <expr><literal type="number" pos:line="42" pos:column="22">1<pos:position pos:line="42" pos:column="23"/></literal></expr>:<pos:position pos:line="42" pos:column="24"/></case>
			<comment type="block" pos:line="43" pos:column="25">/*
			 * If there is stage #0 entry for this, we do not
			 * need to show it.  We use CE_UPDATE bit to mark
			 * such an entry.
			 */</comment>
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><name pos:line="48" pos:column="29">last_stage0<pos:position pos:line="48" pos:column="40"/></name> <operator pos:line="48" pos:column="41">&amp;&amp;<pos:position pos:line="48" pos:column="51"/></operator>
			    <operator pos:line="49" pos:column="29">!<pos:position pos:line="49" pos:column="30"/></operator><call><name pos:line="49" pos:column="30">strcmp<pos:position pos:line="49" pos:column="36"/></name><argument_list pos:line="49" pos:column="36">(<argument><expr><name><name pos:line="49" pos:column="37">last_stage0<pos:position pos:line="49" pos:column="48"/></name><operator pos:line="49" pos:column="48">-&gt;<pos:position pos:line="49" pos:column="53"/></operator><name pos:line="49" pos:column="50">name<pos:position pos:line="49" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="56">ce<pos:position pos:line="49" pos:column="58"/></name><operator pos:line="49" pos:column="58">-&gt;<pos:position pos:line="49" pos:column="63"/></operator><name pos:line="49" pos:column="60">name<pos:position pos:line="49" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="66"/></condition><then pos:line="49" pos:column="66">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="50" pos:column="33">ce<pos:position pos:line="50" pos:column="35"/></name><operator pos:line="50" pos:column="35">-&gt;<pos:position pos:line="50" pos:column="40"/></operator><name pos:line="50" pos:column="37">ce_flags<pos:position pos:line="50" pos:column="45"/></name></name> <operator pos:line="50" pos:column="46">|=<pos:position pos:line="50" pos:column="48"/></operator> <name pos:line="50" pos:column="49">CE_UPDATE<pos:position pos:line="50" pos:column="58"/></name></expr>;<pos:position pos:line="50" pos:column="59"/></expr_stmt></block></then></if>
		}<pos:position pos:line="51" pos:column="18"/></block></switch>
	}<pos:position pos:line="52" pos:column="10"/></block></for>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
