<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2086.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">verify_format<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">format<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">cp<pos:position pos:line="3" pos:column="23"/></name></decl>, <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="26">sp<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>

	<expr_stmt><expr><name pos:line="5" pos:column="9">need_color_reset_at_eol<pos:position pos:line="5" pos:column="32"/></name> <operator pos:line="5" pos:column="33">=<pos:position pos:line="5" pos:column="34"/></operator> <literal type="number" pos:line="5" pos:column="35">0<pos:position pos:line="5" pos:column="36"/></literal></expr>;<pos:position pos:line="5" pos:column="37"/></expr_stmt>
	<for pos:line="6" pos:column="9">for <control pos:line="6" pos:column="13">(<init><expr><name pos:line="6" pos:column="14">cp<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">=<pos:position pos:line="6" pos:column="18"/></operator> <name pos:line="6" pos:column="19">format<pos:position pos:line="6" pos:column="25"/></name></expr>;<pos:position pos:line="6" pos:column="26"/></init> <condition><expr><operator pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="28">cp<pos:position pos:line="6" pos:column="30"/></name> <operator pos:line="6" pos:column="31">&amp;&amp;<pos:position pos:line="6" pos:column="41"/></operator> <operator pos:line="6" pos:column="34">(<pos:position pos:line="6" pos:column="35"/></operator><name pos:line="6" pos:column="35">sp<pos:position pos:line="6" pos:column="37"/></name> <operator pos:line="6" pos:column="38">=<pos:position pos:line="6" pos:column="39"/></operator> <call><name pos:line="6" pos:column="40">find_next<pos:position pos:line="6" pos:column="49"/></name><argument_list pos:line="6" pos:column="49">(<argument><expr><name pos:line="6" pos:column="50">cp<pos:position pos:line="6" pos:column="52"/></name></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></call><operator pos:line="6" pos:column="53">)<pos:position pos:line="6" pos:column="54"/></operator></expr>;<pos:position pos:line="6" pos:column="55"/></condition> <incr/>)<pos:position pos:line="6" pos:column="57"/></control> <block pos:line="6" pos:column="58">{
		<decl_stmt><decl><type><specifier pos:line="7" pos:column="17">const<pos:position pos:line="7" pos:column="22"/></specifier> <name pos:line="7" pos:column="23">char<pos:position pos:line="7" pos:column="27"/></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">color<pos:position pos:line="7" pos:column="34"/></name></decl>, <modifier pos:line="7" pos:column="36">*<pos:position pos:line="7" pos:column="37"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="37">ep<pos:position pos:line="7" pos:column="39"/></name> <init pos:line="7" pos:column="40">= <expr><call><name pos:line="7" pos:column="42">strchr<pos:position pos:line="7" pos:column="48"/></name><argument_list pos:line="7" pos:column="48">(<argument><expr><name pos:line="7" pos:column="49">sp<pos:position pos:line="7" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="53">')'<pos:position pos:line="7" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="58"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">at<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">ep<pos:position pos:line="10" pos:column="24"/></name></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25">
			<block type="pseudo"><return pos:line="11" pos:column="25">return <expr><call><name pos:line="11" pos:column="32">error<pos:position pos:line="11" pos:column="37"/></name><argument_list pos:line="11" pos:column="37">(<argument><expr><literal type="string" pos:line="11" pos:column="38">"malformed format string %s"<pos:position pos:line="11" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="68">sp<pos:position pos:line="11" pos:column="70"/></name></expr></argument>)<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="72"/></return></block></then></if>
		<comment type="block" pos:line="12" pos:column="17">/* sp points at "%(" and ep points at the closing ")" */</comment>
		<expr_stmt><expr><name pos:line="13" pos:column="17">at<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <call><name pos:line="13" pos:column="22">parse_atom<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">sp<pos:position pos:line="13" pos:column="35"/></name> <operator pos:line="13" pos:column="36">+<pos:position pos:line="13" pos:column="37"/></operator> <literal type="number" pos:line="13" pos:column="38">2<pos:position pos:line="13" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">ep<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">cp<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">ep<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">+<pos:position pos:line="14" pos:column="26"/></operator> <literal type="number" pos:line="14" pos:column="27">1<pos:position pos:line="14" pos:column="28"/></literal></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">skip_prefix<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name><name pos:line="16" pos:column="33">used_atom<pos:position pos:line="16" pos:column="42"/></name><index pos:line="16" pos:column="42">[<expr><name pos:line="16" pos:column="43">at<pos:position pos:line="16" pos:column="45"/></name></expr>]<pos:position pos:line="16" pos:column="46"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="48">"color:"<pos:position pos:line="16" pos:column="56"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="58">&amp;<pos:position pos:line="16" pos:column="63"/></operator><name pos:line="16" pos:column="59">color<pos:position pos:line="16" pos:column="64"/></name></expr></argument>)<pos:position pos:line="16" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="66"/></condition><then pos:line="16" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="25">need_color_reset_at_eol<pos:position pos:line="17" pos:column="48"/></name> <operator pos:line="17" pos:column="49">=<pos:position pos:line="17" pos:column="50"/></operator> <operator pos:line="17" pos:column="51">!<pos:position pos:line="17" pos:column="52"/></operator><operator pos:line="17" pos:column="52">!<pos:position pos:line="17" pos:column="53"/></operator><call><name pos:line="17" pos:column="53">strcmp<pos:position pos:line="17" pos:column="59"/></name><argument_list pos:line="17" pos:column="59">(<argument><expr><name pos:line="17" pos:column="60">color<pos:position pos:line="17" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="67">"reset"<pos:position pos:line="17" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="76"/></expr_stmt></block></then></if>
	}<pos:position pos:line="18" pos:column="10"/></block></for>
	<return pos:line="19" pos:column="9">return <expr><literal type="number" pos:line="19" pos:column="16">0<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
