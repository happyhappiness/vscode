<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3651_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">read_bisect_terms<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier><modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">read_bad<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier><modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">read_good<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">str<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">STRBUF_INIT<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">filename<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><call><name pos:line="4" pos:column="32">git_path_bisect_terms<pos:position pos:line="4" pos:column="53"/></name><argument_list pos:line="4" pos:column="53">()<pos:position pos:line="4" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">FILE<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">fp<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><call><name pos:line="5" pos:column="20">fopen<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">filename<pos:position pos:line="5" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="36">"r"<pos:position pos:line="5" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">fp<pos:position pos:line="7" pos:column="16"/></name></expr>)<pos:position pos:line="7" pos:column="17"/></condition><then pos:line="7" pos:column="17"> <block pos:line="7" pos:column="18">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">errno<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">==<pos:position pos:line="8" pos:column="29"/></operator> <name pos:line="8" pos:column="30">ENOENT<pos:position pos:line="8" pos:column="36"/></name></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37"> <block pos:line="8" pos:column="38">{
			<expr_stmt><expr><operator pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">read_bad<pos:position pos:line="9" pos:column="34"/></name> <operator pos:line="9" pos:column="35">=<pos:position pos:line="9" pos:column="36"/></operator> <literal type="string" pos:line="9" pos:column="37">"bad"<pos:position pos:line="9" pos:column="42"/></literal></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">read_good<pos:position pos:line="10" pos:column="35"/></name> <operator pos:line="10" pos:column="36">=<pos:position pos:line="10" pos:column="37"/></operator> <literal type="string" pos:line="10" pos:column="38">"good"<pos:position pos:line="10" pos:column="44"/></literal></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>
			<return pos:line="11" pos:column="25">return;<pos:position pos:line="11" pos:column="32"/></return>
		}<pos:position pos:line="12" pos:column="18"/></block></then> <else pos:line="12" pos:column="19">else <block pos:line="12" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">die_errno<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><call><name pos:line="13" pos:column="35">_<pos:position pos:line="13" pos:column="36"/></name><argument_list pos:line="13" pos:column="36">(<argument><expr><literal type="string" pos:line="13" pos:column="37">"could not read file '%s'"<pos:position pos:line="13" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="66">filename<pos:position pos:line="13" pos:column="74"/></name></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="76"/></expr_stmt>
		}<pos:position pos:line="14" pos:column="18"/></block></else></if>
	}<pos:position pos:line="15" pos:column="10"/></block></then> <else pos:line="15" pos:column="11">else <block pos:line="15" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">strbuf_getline_lf<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><operator pos:line="16" pos:column="35">&amp;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="36">str<pos:position pos:line="16" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="41">fp<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="17" pos:column="17">*<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">read_bad<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">=<pos:position pos:line="17" pos:column="28"/></operator> <call><name pos:line="17" pos:column="29">strbuf_detach<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">(<argument><expr><operator pos:line="17" pos:column="43">&amp;<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="44">str<pos:position pos:line="17" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="49">NULL<pos:position pos:line="17" pos:column="53"/></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">strbuf_getline_lf<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><operator pos:line="18" pos:column="35">&amp;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="36">str<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="41">fp<pos:position pos:line="18" pos:column="43"/></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="19" pos:column="17">*<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">read_good<pos:position pos:line="19" pos:column="27"/></name> <operator pos:line="19" pos:column="28">=<pos:position pos:line="19" pos:column="29"/></operator> <call><name pos:line="19" pos:column="30">strbuf_detach<pos:position pos:line="19" pos:column="43"/></name><argument_list pos:line="19" pos:column="43">(<argument><expr><operator pos:line="19" pos:column="44">&amp;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="45">str<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="50">NULL<pos:position pos:line="19" pos:column="54"/></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="56"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">strbuf_release<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><operator pos:line="21" pos:column="24">&amp;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="25">str<pos:position pos:line="21" pos:column="28"/></name></expr></argument>)<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">fclose<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">fp<pos:position pos:line="22" pos:column="18"/></name></expr></argument>)<pos:position pos:line="22" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="20"/></expr_stmt>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
