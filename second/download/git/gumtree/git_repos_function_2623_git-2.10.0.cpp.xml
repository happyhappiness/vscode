<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2623_git-2.10.0.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">worktree<pos:position pos:line="1" pos:column="16"/></name></name> <modifier pos:line="1" pos:column="17">*<pos:position pos:line="1" pos:column="18"/></modifier><modifier pos:line="1" pos:column="18">*<pos:position pos:line="1" pos:column="19"/></modifier></type><name pos:line="1" pos:column="19">get_worktrees<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">void<pos:position pos:line="1" pos:column="37"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">worktree<pos:position pos:line="3" pos:column="24"/></name></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier><modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">list<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><name pos:line="3" pos:column="34">NULL<pos:position pos:line="3" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">path<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">STRBUF_INIT<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">DIR<pos:position pos:line="5" pos:column="12"/></name> <modifier pos:line="5" pos:column="13">*<pos:position pos:line="5" pos:column="14"/></modifier></type><name pos:line="5" pos:column="14">dir<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">dirent<pos:position pos:line="6" pos:column="22"/></name></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">d<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">counter<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="26">alloc<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><literal type="number" pos:line="7" pos:column="34">2<pos:position pos:line="7" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">list<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <call><name pos:line="9" pos:column="16">xmalloc<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">alloc<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">*<pos:position pos:line="9" pos:column="31"/></operator> <sizeof pos:line="9" pos:column="32">sizeof<argument_list pos:line="9" pos:column="38">(<argument><expr pos:line="9" pos:column="39">struct <name pos:line="9" pos:column="46">worktree<pos:position pos:line="9" pos:column="54"/></name> <operator pos:line="9" pos:column="55">*<pos:position pos:line="9" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="9" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="59"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">(<pos:position pos:line="11" pos:column="14"/></operator><name><name pos:line="11" pos:column="14">list<pos:position pos:line="11" pos:column="18"/></name><index pos:line="11" pos:column="18">[<expr><name pos:line="11" pos:column="19">counter<pos:position pos:line="11" pos:column="26"/></name></expr>]<pos:position pos:line="11" pos:column="27"/></index></name> <operator pos:line="11" pos:column="28">=<pos:position pos:line="11" pos:column="29"/></operator> <call><name pos:line="11" pos:column="30">get_main_worktree<pos:position pos:line="11" pos:column="47"/></name><argument_list pos:line="11" pos:column="47">()<pos:position pos:line="11" pos:column="49"/></argument_list></call><operator pos:line="11" pos:column="49">)<pos:position pos:line="11" pos:column="50"/></operator></expr>)<pos:position pos:line="11" pos:column="51"/></condition><then pos:line="11" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">counter<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">++<pos:position pos:line="12" pos:column="26"/></operator></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">strbuf_addf<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><operator pos:line="14" pos:column="21">&amp;<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="22">path<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="28">"%s/worktrees"<pos:position pos:line="14" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="44">get_git_common_dir<pos:position pos:line="14" pos:column="62"/></name><argument_list pos:line="14" pos:column="62">()<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">dir<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">opendir<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name><name pos:line="15" pos:column="23">path<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">.<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="28">buf<pos:position pos:line="15" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">strbuf_release<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><operator pos:line="16" pos:column="24">&amp;<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="25">path<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">dir<pos:position pos:line="17" pos:column="16"/></name></expr>)<pos:position pos:line="17" pos:column="17"/></condition><then pos:line="17" pos:column="17"> <block pos:line="17" pos:column="18">{
		<while pos:line="18" pos:column="17">while <condition pos:line="18" pos:column="23">(<expr><operator pos:line="18" pos:column="24">(<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="25">d<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">=<pos:position pos:line="18" pos:column="28"/></operator> <call><name pos:line="18" pos:column="29">readdir<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">(<argument><expr><name pos:line="18" pos:column="37">dir<pos:position pos:line="18" pos:column="40"/></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call><operator pos:line="18" pos:column="41">)<pos:position pos:line="18" pos:column="42"/></operator> <operator pos:line="18" pos:column="43">!=<pos:position pos:line="18" pos:column="45"/></operator> <name pos:line="18" pos:column="46">NULL<pos:position pos:line="18" pos:column="50"/></name></expr>)<pos:position pos:line="18" pos:column="51"/></condition> <block pos:line="18" pos:column="52">{
			<decl_stmt><decl><type><name><name pos:line="19" pos:column="25">struct<pos:position pos:line="19" pos:column="31"/></name> <name pos:line="19" pos:column="32">worktree<pos:position pos:line="19" pos:column="40"/></name></name> <modifier pos:line="19" pos:column="41">*<pos:position pos:line="19" pos:column="42"/></modifier></type><name pos:line="19" pos:column="42">linked<pos:position pos:line="19" pos:column="48"/></name> <init pos:line="19" pos:column="49">= <expr><name pos:line="19" pos:column="51">NULL<pos:position pos:line="19" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="56"/></decl_stmt>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><call><name pos:line="20" pos:column="29">is_dot_or_dotdot<pos:position pos:line="20" pos:column="45"/></name><argument_list pos:line="20" pos:column="45">(<argument><expr><name><name pos:line="20" pos:column="46">d<pos:position pos:line="20" pos:column="47"/></name><operator pos:line="20" pos:column="47">-&gt;<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="49">d_name<pos:position pos:line="20" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="57"/></condition><then pos:line="20" pos:column="57">
				<block type="pseudo"><continue pos:line="21" pos:column="33">continue;<pos:position pos:line="21" pos:column="42"/></continue></block></then></if>

			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><operator pos:line="23" pos:column="29">(<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="30">linked<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">=<pos:position pos:line="23" pos:column="38"/></operator> <call><name pos:line="23" pos:column="39">get_linked_worktree<pos:position pos:line="23" pos:column="58"/></name><argument_list pos:line="23" pos:column="58">(<argument><expr><name><name pos:line="23" pos:column="59">d<pos:position pos:line="23" pos:column="60"/></name><operator pos:line="23" pos:column="60">-&gt;<pos:position pos:line="23" pos:column="65"/></operator><name pos:line="23" pos:column="62">d_name<pos:position pos:line="23" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></call><operator pos:line="23" pos:column="69">)<pos:position pos:line="23" pos:column="70"/></operator></expr>)<pos:position pos:line="23" pos:column="71"/></condition><then pos:line="23" pos:column="71"> <block pos:line="23" pos:column="72">{
				<expr_stmt><expr><call><name pos:line="24" pos:column="33">ALLOC_GROW<pos:position pos:line="24" pos:column="43"/></name><argument_list pos:line="24" pos:column="43">(<argument><expr><name pos:line="24" pos:column="44">list<pos:position pos:line="24" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="50">counter<pos:position pos:line="24" pos:column="57"/></name> <operator pos:line="24" pos:column="58">+<pos:position pos:line="24" pos:column="59"/></operator> <literal type="number" pos:line="24" pos:column="60">1<pos:position pos:line="24" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="63">alloc<pos:position pos:line="24" pos:column="68"/></name></expr></argument>)<pos:position pos:line="24" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="25" pos:column="33">list<pos:position pos:line="25" pos:column="37"/></name><index pos:line="25" pos:column="37">[<expr><name pos:line="25" pos:column="38">counter<pos:position pos:line="25" pos:column="45"/></name><operator pos:line="25" pos:column="45">++<pos:position pos:line="25" pos:column="47"/></operator></expr>]<pos:position pos:line="25" pos:column="48"/></index></name> <operator pos:line="25" pos:column="49">=<pos:position pos:line="25" pos:column="50"/></operator> <name pos:line="25" pos:column="51">linked<pos:position pos:line="25" pos:column="57"/></name></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="26" pos:column="26"/></block></then></if>
		}<pos:position pos:line="27" pos:column="18"/></block></while>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">closedir<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">dir<pos:position pos:line="28" pos:column="29"/></name></expr></argument>)<pos:position pos:line="28" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">ALLOC_GROW<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">list<pos:position pos:line="30" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="26">counter<pos:position pos:line="30" pos:column="33"/></name> <operator pos:line="30" pos:column="34">+<pos:position pos:line="30" pos:column="35"/></operator> <literal type="number" pos:line="30" pos:column="36">1<pos:position pos:line="30" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="39">alloc<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="31" pos:column="9">list<pos:position pos:line="31" pos:column="13"/></name><index pos:line="31" pos:column="13">[<expr><name pos:line="31" pos:column="14">counter<pos:position pos:line="31" pos:column="21"/></name></expr>]<pos:position pos:line="31" pos:column="22"/></index></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <name pos:line="31" pos:column="25">NULL<pos:position pos:line="31" pos:column="29"/></name></expr>;<pos:position pos:line="31" pos:column="30"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">mark_current_worktree<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><name pos:line="33" pos:column="31">list<pos:position pos:line="33" pos:column="35"/></name></expr></argument>)<pos:position pos:line="33" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="37"/></expr_stmt>
	<return pos:line="34" pos:column="9">return <expr><name pos:line="34" pos:column="16">list<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
