<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3322_git-2.4.10.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">find_unique_abbrev<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">unsigned<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">sha1<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">int<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">len<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="21">exists<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name></type> <name><name pos:line="4" pos:column="21">hex<pos:position pos:line="4" pos:column="24"/></name><index pos:line="4" pos:column="24">[<expr><literal type="number" pos:line="4" pos:column="25">41<pos:position pos:line="4" pos:column="27"/></literal></expr>]<pos:position pos:line="4" pos:column="28"/></index></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">memcpy<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><name pos:line="6" pos:column="16">hex<pos:position pos:line="6" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="21">sha1_to_hex<pos:position pos:line="6" pos:column="32"/></name><argument_list pos:line="6" pos:column="32">(<argument><expr><name pos:line="6" pos:column="33">sha1<pos:position pos:line="6" pos:column="37"/></name></expr></argument>)<pos:position pos:line="6" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="40">40<pos:position pos:line="6" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="44"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">len<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">==<pos:position pos:line="7" pos:column="19"/></operator> <literal type="number" pos:line="7" pos:column="20">40<pos:position pos:line="7" pos:column="22"/></literal> <operator pos:line="7" pos:column="23">||<pos:position pos:line="7" pos:column="25"/></operator> <operator pos:line="7" pos:column="26">!<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">len<pos:position pos:line="7" pos:column="30"/></name></expr>)<pos:position pos:line="7" pos:column="31"/></condition><then pos:line="7" pos:column="31">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><name pos:line="8" pos:column="24">hex<pos:position pos:line="8" pos:column="27"/></name></expr>;<pos:position pos:line="8" pos:column="28"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="9" pos:column="9">exists<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">has_sha1_file<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name pos:line="9" pos:column="32">sha1<pos:position pos:line="9" pos:column="36"/></name></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>
	<while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><name pos:line="10" pos:column="16">len<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">&lt;<pos:position pos:line="10" pos:column="24"/></operator> <literal type="number" pos:line="10" pos:column="22">40<pos:position pos:line="10" pos:column="24"/></literal></expr>)<pos:position pos:line="10" pos:column="25"/></condition> <block pos:line="10" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">unsigned<pos:position pos:line="11" pos:column="25"/></name> <name pos:line="11" pos:column="26">char<pos:position pos:line="11" pos:column="30"/></name></type> <name><name pos:line="11" pos:column="31">sha1_ret<pos:position pos:line="11" pos:column="39"/></name><index pos:line="11" pos:column="39">[<expr><literal type="number" pos:line="11" pos:column="40">20<pos:position pos:line="11" pos:column="42"/></literal></expr>]<pos:position pos:line="11" pos:column="43"/></index></name></decl>;<pos:position pos:line="11" pos:column="44"/></decl_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">status<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <call><name pos:line="12" pos:column="26">get_short_sha1<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><name pos:line="12" pos:column="41">hex<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="46">len<pos:position pos:line="12" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="51">sha1_ret<pos:position pos:line="12" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="61">GET_SHA1_QUIETLY<pos:position pos:line="12" pos:column="77"/></name></expr></argument>)<pos:position pos:line="12" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="79"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><ternary><condition><expr><name pos:line="13" pos:column="21">exists<pos:position pos:line="13" pos:column="27"/></name></expr>
		    ?<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22"> <expr><operator pos:line="14" pos:column="23">!<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">status<pos:position pos:line="14" pos:column="30"/></name></expr>
		    <pos:position pos:line="15" pos:column="7"/></then><else pos:line="15" pos:column="21">: <expr><name pos:line="15" pos:column="23">status<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">==<pos:position pos:line="15" pos:column="32"/></operator> <name pos:line="15" pos:column="33">SHORT_NAME_NOT_FOUND<pos:position pos:line="15" pos:column="53"/></name></expr></else></ternary></expr>)<pos:position pos:line="15" pos:column="54"/></condition><then pos:line="15" pos:column="54"> <block pos:line="15" pos:column="55">{
			<expr_stmt><expr><name><name pos:line="16" pos:column="25">hex<pos:position pos:line="16" pos:column="28"/></name><index pos:line="16" pos:column="28">[<expr><name pos:line="16" pos:column="29">len<pos:position pos:line="16" pos:column="32"/></name></expr>]<pos:position pos:line="16" pos:column="33"/></index></name> <operator pos:line="16" pos:column="34">=<pos:position pos:line="16" pos:column="35"/></operator> <literal type="number" pos:line="16" pos:column="36">0<pos:position pos:line="16" pos:column="37"/></literal></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
			<return pos:line="17" pos:column="25">return <expr><name pos:line="17" pos:column="32">hex<pos:position pos:line="17" pos:column="35"/></name></expr>;<pos:position pos:line="17" pos:column="36"/></return>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="19" pos:column="17">len<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">++<pos:position pos:line="19" pos:column="22"/></operator></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></while>
	<return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">hex<pos:position pos:line="21" pos:column="19"/></name></expr>;<pos:position pos:line="21" pos:column="20"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
