<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1125_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">wt_status_get_detached_from<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">wt_status_state<pos:position pos:line="1" pos:column="63"/></name></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">state<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">grab_1st_switch_cbdata<pos:position pos:line="3" pos:column="38"/></name></name></type> <name pos:line="3" pos:column="39">cb<pos:position pos:line="3" pos:column="41"/></name></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">commit<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">commit<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">object_id<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">oid<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">ref<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">NULL<pos:position pos:line="6" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">strbuf_init<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><operator pos:line="8" pos:column="21">&amp;<pos:position pos:line="8" pos:column="26"/></operator><name><name pos:line="8" pos:column="22">cb<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">.<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">buf<pos:position pos:line="8" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="30">0<pos:position pos:line="8" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">for_each_reflog_ent_reverse<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">(<argument><expr><literal type="string" pos:line="9" pos:column="41">"HEAD"<pos:position pos:line="9" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="49">grab_1st_switch<pos:position pos:line="9" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="66">&amp;<pos:position pos:line="9" pos:column="71"/></operator><name pos:line="9" pos:column="67">cb<pos:position pos:line="9" pos:column="69"/></name></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call> <operator pos:line="9" pos:column="71">&lt;=<pos:position pos:line="9" pos:column="76"/></operator> <literal type="number" pos:line="9" pos:column="74">0<pos:position pos:line="9" pos:column="75"/></literal></expr>)<pos:position pos:line="9" pos:column="76"/></condition><then pos:line="9" pos:column="76"> <block pos:line="9" pos:column="77">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">strbuf_release<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><operator pos:line="10" pos:column="32">&amp;<pos:position pos:line="10" pos:column="37"/></operator><name><name pos:line="10" pos:column="33">cb<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">.<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="36">buf<pos:position pos:line="10" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
		<return pos:line="11" pos:column="17">return;<pos:position pos:line="11" pos:column="24"/></return>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">dwim_ref<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name><name pos:line="14" pos:column="22">cb<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">.<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">buf<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">.<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="29">buf<pos:position pos:line="14" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="34">cb<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">.<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">buf<pos:position pos:line="14" pos:column="40"/></name><operator pos:line="14" pos:column="40">.<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="41">len<pos:position pos:line="14" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="46">oid<pos:position pos:line="14" pos:column="49"/></name><operator pos:line="14" pos:column="49">.<pos:position pos:line="14" pos:column="50"/></operator><name pos:line="14" pos:column="50">hash<pos:position pos:line="14" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="56">&amp;<pos:position pos:line="14" pos:column="61"/></operator><name pos:line="14" pos:column="57">ref<pos:position pos:line="14" pos:column="60"/></name></expr></argument>)<pos:position pos:line="14" pos:column="61"/></argument_list></call> <operator pos:line="14" pos:column="62">==<pos:position pos:line="14" pos:column="64"/></operator> <literal type="number" pos:line="14" pos:column="65">1<pos:position pos:line="14" pos:column="66"/></literal> <operator pos:line="14" pos:column="67">&amp;&amp;<pos:position pos:line="14" pos:column="77"/></operator>
	    <comment type="block" pos:line="15" pos:column="13">/* sha1 is a commit? match without further lookup */</comment>
	    <operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><operator pos:line="16" pos:column="14">!<pos:position pos:line="16" pos:column="15"/></operator><call><name pos:line="16" pos:column="15">oidcmp<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><operator pos:line="16" pos:column="22">&amp;<pos:position pos:line="16" pos:column="27"/></operator><name><name pos:line="16" pos:column="23">cb<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">.<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">noid<pos:position pos:line="16" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="32">&amp;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="33">oid<pos:position pos:line="16" pos:column="36"/></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call> <operator pos:line="16" pos:column="38">||<pos:position pos:line="16" pos:column="40"/></operator>
	     <comment type="block" pos:line="17" pos:column="14">/* perhaps sha1 is a tag, try to dereference to a commit */</comment>
	     <operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><operator pos:line="18" pos:column="15">(<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">commit<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">=<pos:position pos:line="18" pos:column="24"/></operator> <call><name pos:line="18" pos:column="25">lookup_commit_reference_gently<pos:position pos:line="18" pos:column="55"/></name><argument_list pos:line="18" pos:column="55">(<argument><expr><operator pos:line="18" pos:column="56">&amp;<pos:position pos:line="18" pos:column="61"/></operator><name pos:line="18" pos:column="57">oid<pos:position pos:line="18" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="62">1<pos:position pos:line="18" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="64"/></argument_list></call><operator pos:line="18" pos:column="64">)<pos:position pos:line="18" pos:column="65"/></operator> <operator pos:line="18" pos:column="66">!=<pos:position pos:line="18" pos:column="68"/></operator> <name pos:line="18" pos:column="69">NULL<pos:position pos:line="18" pos:column="73"/></name> <operator pos:line="18" pos:column="74">&amp;&amp;<pos:position pos:line="18" pos:column="84"/></operator>
	      <operator pos:line="19" pos:column="15">!<pos:position pos:line="19" pos:column="16"/></operator><call><name pos:line="19" pos:column="16">oidcmp<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><operator pos:line="19" pos:column="23">&amp;<pos:position pos:line="19" pos:column="28"/></operator><name><name pos:line="19" pos:column="24">cb<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">.<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">noid<pos:position pos:line="19" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="33">&amp;<pos:position pos:line="19" pos:column="38"/></operator><name><name pos:line="19" pos:column="34">commit<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">-&gt;<pos:position pos:line="19" pos:column="45"/></operator><name pos:line="19" pos:column="42">object<pos:position pos:line="19" pos:column="48"/></name><operator pos:line="19" pos:column="48">.<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="49">oid<pos:position pos:line="19" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></call><operator pos:line="19" pos:column="53">)<pos:position pos:line="19" pos:column="54"/></operator><operator pos:line="19" pos:column="54">)<pos:position pos:line="19" pos:column="55"/></operator></expr>)<pos:position pos:line="19" pos:column="56"/></condition><then pos:line="19" pos:column="56"> <block pos:line="19" pos:column="57">{
		<decl_stmt><decl><type><specifier pos:line="20" pos:column="17">const<pos:position pos:line="20" pos:column="22"/></specifier> <name pos:line="20" pos:column="23">char<pos:position pos:line="20" pos:column="27"/></name> <modifier pos:line="20" pos:column="28">*<pos:position pos:line="20" pos:column="29"/></modifier></type><name pos:line="20" pos:column="29">from<pos:position pos:line="20" pos:column="33"/></name> <init pos:line="20" pos:column="34">= <expr><name pos:line="20" pos:column="36">ref<pos:position pos:line="20" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="40"/></decl_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><call><name pos:line="21" pos:column="22">skip_prefix<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">from<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="40">"refs/tags/"<pos:position pos:line="21" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="54">&amp;<pos:position pos:line="21" pos:column="59"/></operator><name pos:line="21" pos:column="55">from<pos:position pos:line="21" pos:column="59"/></name></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="61"/></condition><then pos:line="21" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">skip_prefix<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><name pos:line="22" pos:column="37">from<pos:position pos:line="22" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="43">"refs/remotes/"<pos:position pos:line="22" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="60">&amp;<pos:position pos:line="22" pos:column="65"/></operator><name pos:line="22" pos:column="61">from<pos:position pos:line="22" pos:column="65"/></name></expr></argument>)<pos:position pos:line="22" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="67"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="23" pos:column="17">state<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">detached_from<pos:position pos:line="23" pos:column="37"/></name></name> <operator pos:line="23" pos:column="38">=<pos:position pos:line="23" pos:column="39"/></operator> <call><name pos:line="23" pos:column="40">xstrdup<pos:position pos:line="23" pos:column="47"/></name><argument_list pos:line="23" pos:column="47">(<argument><expr><name pos:line="23" pos:column="48">from<pos:position pos:line="23" pos:column="52"/></name></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then> <else pos:line="24" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="17">state<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">-&gt;<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="24">detached_from<pos:position pos:line="25" pos:column="37"/></name></name> <operator pos:line="25" pos:column="38">=<pos:position pos:line="25" pos:column="39"/></operator>
			<call><name pos:line="26" pos:column="25">xstrdup<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><call><name pos:line="26" pos:column="33">find_unique_abbrev<pos:position pos:line="26" pos:column="51"/></name><argument_list pos:line="26" pos:column="51">(<argument><expr><name><name pos:line="26" pos:column="52">cb<pos:position pos:line="26" pos:column="54"/></name><operator pos:line="26" pos:column="54">.<pos:position pos:line="26" pos:column="55"/></operator><name pos:line="26" pos:column="55">noid<pos:position pos:line="26" pos:column="59"/></name><operator pos:line="26" pos:column="59">.<pos:position pos:line="26" pos:column="60"/></operator><name pos:line="26" pos:column="60">hash<pos:position pos:line="26" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="66">DEFAULT_ABBREV<pos:position pos:line="26" pos:column="80"/></name></expr></argument>)<pos:position pos:line="26" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="83"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">hashcpy<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name><name pos:line="27" pos:column="17">state<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">-&gt;<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="24">detached_sha1<pos:position pos:line="27" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="39">cb<pos:position pos:line="27" pos:column="41"/></name><operator pos:line="27" pos:column="41">.<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="42">noid<pos:position pos:line="27" pos:column="46"/></name><operator pos:line="27" pos:column="46">.<pos:position pos:line="27" pos:column="47"/></operator><name pos:line="27" pos:column="47">hash<pos:position pos:line="27" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">state<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">-&gt;<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="16">detached_at<pos:position pos:line="28" pos:column="27"/></name></name> <operator pos:line="28" pos:column="28">=<pos:position pos:line="28" pos:column="29"/></operator> <operator pos:line="28" pos:column="30">!<pos:position pos:line="28" pos:column="31"/></operator><call><name pos:line="28" pos:column="31">get_oid<pos:position pos:line="28" pos:column="38"/></name><argument_list pos:line="28" pos:column="38">(<argument><expr><literal type="string" pos:line="28" pos:column="39">"HEAD"<pos:position pos:line="28" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="28" pos:column="47">&amp;<pos:position pos:line="28" pos:column="52"/></operator><name pos:line="28" pos:column="48">oid<pos:position pos:line="28" pos:column="51"/></name></expr></argument>)<pos:position pos:line="28" pos:column="52"/></argument_list></call> <operator pos:line="28" pos:column="53">&amp;&amp;<pos:position pos:line="28" pos:column="63"/></operator>
			     <operator pos:line="29" pos:column="30">!<pos:position pos:line="29" pos:column="31"/></operator><call><name pos:line="29" pos:column="31">hashcmp<pos:position pos:line="29" pos:column="38"/></name><argument_list pos:line="29" pos:column="38">(<argument><expr><name><name pos:line="29" pos:column="39">oid<pos:position pos:line="29" pos:column="42"/></name><operator pos:line="29" pos:column="42">.<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="43">hash<pos:position pos:line="29" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="49">state<pos:position pos:line="29" pos:column="54"/></name><operator pos:line="29" pos:column="54">-&gt;<pos:position pos:line="29" pos:column="59"/></operator><name pos:line="29" pos:column="56">detached_sha1<pos:position pos:line="29" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="71"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="31" pos:column="9">free<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name pos:line="31" pos:column="14">ref<pos:position pos:line="31" pos:column="17"/></name></expr></argument>)<pos:position pos:line="31" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">strbuf_release<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><operator pos:line="32" pos:column="24">&amp;<pos:position pos:line="32" pos:column="29"/></operator><name><name pos:line="32" pos:column="25">cb<pos:position pos:line="32" pos:column="27"/></name><operator pos:line="32" pos:column="27">.<pos:position pos:line="32" pos:column="28"/></operator><name pos:line="32" pos:column="28">buf<pos:position pos:line="32" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
