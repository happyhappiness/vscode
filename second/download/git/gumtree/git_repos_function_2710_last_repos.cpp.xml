<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2710_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">strbuf_getcwd<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">strbuf<pos:position pos:line="1" pos:column="32"/></name></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">sb<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">oldalloc<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><name><name pos:line="3" pos:column="27">sb<pos:position pos:line="3" pos:column="29"/></name><operator pos:line="3" pos:column="29">-&gt;<pos:position pos:line="3" pos:column="34"/></operator><name pos:line="3" pos:column="31">alloc<pos:position pos:line="3" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">guessed_len<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><literal type="number" pos:line="4" pos:column="30">128<pos:position pos:line="4" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>

	<for pos:line="6" pos:column="9">for <control pos:line="6" pos:column="13">(<init pos:line="6" pos:column="14">;<pos:position pos:line="6" pos:column="15"/></init><condition pos:line="6" pos:column="15">;<pos:position pos:line="6" pos:column="16"/></condition> <incr><expr><name pos:line="6" pos:column="17">guessed_len<pos:position pos:line="6" pos:column="28"/></name> <operator pos:line="6" pos:column="29">*=<pos:position pos:line="6" pos:column="31"/></operator> <literal type="number" pos:line="6" pos:column="32">2<pos:position pos:line="6" pos:column="33"/></literal></expr></incr>)<pos:position pos:line="6" pos:column="34"/></control> <block pos:line="6" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">strbuf_grow<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">sb<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="33">guessed_len<pos:position pos:line="7" pos:column="44"/></name></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="46"/></expr_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><call><name pos:line="8" pos:column="21">getcwd<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name><name pos:line="8" pos:column="28">sb<pos:position pos:line="8" pos:column="30"/></name><operator pos:line="8" pos:column="30">-&gt;<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="32">buf<pos:position pos:line="8" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="37">sb<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">-&gt;<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="41">alloc<pos:position pos:line="8" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="48"/></condition><then pos:line="8" pos:column="48"> <block pos:line="8" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="9" pos:column="25">strbuf_setlen<pos:position pos:line="9" pos:column="38"/></name><argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">sb<pos:position pos:line="9" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="43">strlen<pos:position pos:line="9" pos:column="49"/></name><argument_list pos:line="9" pos:column="49">(<argument><expr><name><name pos:line="9" pos:column="50">sb<pos:position pos:line="9" pos:column="52"/></name><operator pos:line="9" pos:column="52">-&gt;<pos:position pos:line="9" pos:column="57"/></operator><name pos:line="9" pos:column="54">buf<pos:position pos:line="9" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>
			<return pos:line="10" pos:column="25">return <expr><literal type="number" pos:line="10" pos:column="32">0<pos:position pos:line="10" pos:column="33"/></literal></expr>;<pos:position pos:line="10" pos:column="34"/></return>
		}<pos:position pos:line="11" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="13" pos:column="17">/*
		 * If getcwd(3) is implemented as a syscall that falls
		 * back to a regular lookup using readdir(3) etc. then
		 * we may be able to avoid EACCES by providing enough
		 * space to the syscall as it's not necessarily bound
		 * to the same restrictions as the fallback.
		 */</comment>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">errno<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">==<pos:position pos:line="20" pos:column="29"/></operator> <name pos:line="20" pos:column="30">EACCES<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">&amp;&amp;<pos:position pos:line="20" pos:column="47"/></operator> <name pos:line="20" pos:column="40">guessed_len<pos:position pos:line="20" pos:column="51"/></name> <operator pos:line="20" pos:column="52">&lt;<pos:position pos:line="20" pos:column="56"/></operator> <name pos:line="20" pos:column="54">PATH_MAX<pos:position pos:line="20" pos:column="62"/></name></expr>)<pos:position pos:line="20" pos:column="63"/></condition><then pos:line="20" pos:column="63">
			<block type="pseudo"><continue pos:line="21" pos:column="25">continue;<pos:position pos:line="21" pos:column="34"/></continue></block></then></if>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">errno<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">!=<pos:position pos:line="23" pos:column="29"/></operator> <name pos:line="23" pos:column="30">ERANGE<pos:position pos:line="23" pos:column="36"/></name></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37">
			<block type="pseudo"><break pos:line="24" pos:column="25">break;<pos:position pos:line="24" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></for>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">oldalloc<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">==<pos:position pos:line="26" pos:column="24"/></operator> <literal type="number" pos:line="26" pos:column="25">0<pos:position pos:line="26" pos:column="26"/></literal></expr>)<pos:position pos:line="26" pos:column="27"/></condition><then pos:line="26" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">strbuf_release<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">sb<pos:position pos:line="27" pos:column="34"/></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt></block></then>
	<else pos:line="28" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="17">strbuf_reset<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">sb<pos:position pos:line="29" pos:column="32"/></name></expr></argument>)<pos:position pos:line="29" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt></block></else></if>
	<return pos:line="30" pos:column="9">return <expr><operator pos:line="30" pos:column="16">-<pos:position pos:line="30" pos:column="17"/></operator><literal type="number" pos:line="30" pos:column="17">1<pos:position pos:line="30" pos:column="18"/></literal></expr>;<pos:position pos:line="30" pos:column="19"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
