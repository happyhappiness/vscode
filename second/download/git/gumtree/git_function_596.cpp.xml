<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_596.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">packet_write_gently<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">fd_out<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">buf<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">size_t<pos:position pos:line="1" pos:column="73"/></name></type> <name pos:line="1" pos:column="74">size<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name></type> <name><name pos:line="3" pos:column="21">packet_write_buffer<pos:position pos:line="3" pos:column="40"/></name><index pos:line="3" pos:column="40">[<expr><name pos:line="3" pos:column="41">LARGE_PACKET_MAX<pos:position pos:line="3" pos:column="57"/></name></expr>]<pos:position pos:line="3" pos:column="58"/></index></name></decl>;<pos:position pos:line="3" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">packet_size<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">size<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">&gt;<pos:position pos:line="6" pos:column="22"/></operator> <sizeof pos:line="6" pos:column="20">sizeof<argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">packet_write_buffer<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></sizeof> <operator pos:line="6" pos:column="48">-<pos:position pos:line="6" pos:column="49"/></operator> <literal type="number" pos:line="6" pos:column="50">4<pos:position pos:line="6" pos:column="51"/></literal></expr>)<pos:position pos:line="6" pos:column="52"/></condition><then pos:line="6" pos:column="52">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><call><name pos:line="7" pos:column="24">error<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><literal type="string" pos:line="7" pos:column="30">"packet write failed - data exceeds max packet size"<pos:position pos:line="7" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="84"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">packet_trace<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">buf<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="27">size<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="33">1<pos:position pos:line="9" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="10" pos:column="9">packet_size<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">=<pos:position pos:line="10" pos:column="22"/></operator> <name pos:line="10" pos:column="23">size<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">+<pos:position pos:line="10" pos:column="29"/></operator> <literal type="number" pos:line="10" pos:column="30">4<pos:position pos:line="10" pos:column="31"/></literal></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">set_packet_header<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">packet_write_buffer<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="48">packet_size<pos:position pos:line="11" pos:column="59"/></name></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memcpy<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">packet_write_buffer<pos:position pos:line="12" pos:column="35"/></name> <operator pos:line="12" pos:column="36">+<pos:position pos:line="12" pos:column="37"/></operator> <literal type="number" pos:line="12" pos:column="38">4<pos:position pos:line="12" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="41">buf<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="46">size<pos:position pos:line="12" pos:column="50"/></name></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">write_in_full<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><name pos:line="13" pos:column="27">fd_out<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="35">packet_write_buffer<pos:position pos:line="13" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="56">packet_size<pos:position pos:line="13" pos:column="67"/></name></expr></argument>)<pos:position pos:line="13" pos:column="68"/></argument_list></call> <operator pos:line="13" pos:column="69">==<pos:position pos:line="13" pos:column="71"/></operator> <name pos:line="13" pos:column="72">packet_size<pos:position pos:line="13" pos:column="83"/></name></expr>)<pos:position pos:line="13" pos:column="84"/></condition><then pos:line="13" pos:column="84">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></return></block></then></if>
	<return pos:line="15" pos:column="9">return <expr><call><name pos:line="15" pos:column="16">error<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><literal type="string" pos:line="15" pos:column="22">"packet write failed"<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
