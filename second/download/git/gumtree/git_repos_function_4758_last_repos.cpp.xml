<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4758_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">string_list_add_refs_by_glob<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">string_list<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">list<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="61">const<pos:position pos:line="1" pos:column="66"/></specifier> <name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">glob<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">assert<pos:position pos:line="3" pos:column="15"/></name><argument_list pos:line="3" pos:column="15">(<argument><expr><name><name pos:line="3" pos:column="16">list<pos:position pos:line="3" pos:column="20"/></name><operator pos:line="3" pos:column="20">-&gt;<pos:position pos:line="3" pos:column="25"/></operator><name pos:line="3" pos:column="22">strdup_strings<pos:position pos:line="3" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="3" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="38"/></expr_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><call><name pos:line="4" pos:column="13">has_glob_specials<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">(<argument><expr><name pos:line="4" pos:column="31">glob<pos:position pos:line="4" pos:column="35"/></name></expr></argument>)<pos:position pos:line="4" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="37"/></condition><then pos:line="4" pos:column="37"> <block pos:line="4" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="5" pos:column="17">for_each_glob_ref<pos:position pos:line="5" pos:column="34"/></name><argument_list pos:line="5" pos:column="34">(<argument><expr><name pos:line="5" pos:column="35">string_list_add_one_ref<pos:position pos:line="5" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="60">glob<pos:position pos:line="5" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="66">list<pos:position pos:line="5" pos:column="70"/></name></expr></argument>)<pos:position pos:line="5" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="72"/></expr_stmt>
	}<pos:position pos:line="6" pos:column="10"/></block></then> <else pos:line="6" pos:column="11">else <block pos:line="6" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">object_id<pos:position pos:line="7" pos:column="33"/></name></name></type> <name pos:line="7" pos:column="34">oid<pos:position pos:line="7" pos:column="37"/></name></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><call><name pos:line="8" pos:column="21">get_oid<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">glob<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="35">&amp;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="36">oid<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="41"/></condition><then pos:line="8" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="25">warning<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><literal type="string" pos:line="9" pos:column="33">"notes ref %s is invalid"<pos:position pos:line="9" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="60">glob<pos:position pos:line="9" pos:column="64"/></name></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="66"/></expr_stmt></block></then></if>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><call><name pos:line="10" pos:column="22">unsorted_string_list_has_string<pos:position pos:line="10" pos:column="53"/></name><argument_list pos:line="10" pos:column="53">(<argument><expr><name pos:line="10" pos:column="54">list<pos:position pos:line="10" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="60">glob<pos:position pos:line="10" pos:column="64"/></name></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="66"/></condition><then pos:line="10" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">string_list_append<pos:position pos:line="11" pos:column="43"/></name><argument_list pos:line="11" pos:column="43">(<argument><expr><name pos:line="11" pos:column="44">list<pos:position pos:line="11" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="50">glob<pos:position pos:line="11" pos:column="54"/></name></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="56"/></expr_stmt></block></then></if>
	}<pos:position pos:line="12" pos:column="10"/></block></else></if>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
