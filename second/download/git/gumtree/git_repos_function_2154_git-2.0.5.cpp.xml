<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2154_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">crlf_to_git<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">path<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">src<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">size_t<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">len<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
		       <parameter><decl><type><name><name pos:line="2" pos:column="24">struct<pos:position pos:line="2" pos:column="30"/></name> <name pos:line="2" pos:column="31">strbuf<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">buf<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
		       <parameter><decl><type><name><name pos:line="3" pos:column="24">enum<pos:position pos:line="3" pos:column="28"/></name> <name pos:line="3" pos:column="29">crlf_action<pos:position pos:line="3" pos:column="40"/></name></name></type> <name pos:line="3" pos:column="41">crlf_action<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="3" pos:column="54">enum<pos:position pos:line="3" pos:column="58"/></name> <name pos:line="3" pos:column="59">safe_crlf<pos:position pos:line="3" pos:column="68"/></name></name></type> <name pos:line="3" pos:column="69">checksafe<pos:position pos:line="3" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="79"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">text_stat<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">stats<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">dst<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">crlf_action<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">==<pos:position pos:line="8" pos:column="27"/></operator> <name pos:line="8" pos:column="28">CRLF_BINARY<pos:position pos:line="8" pos:column="39"/></name> <operator pos:line="8" pos:column="40">||<pos:position pos:line="8" pos:column="42"/></operator>
	    <operator pos:line="9" pos:column="13">(<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">crlf_action<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">==<pos:position pos:line="9" pos:column="28"/></operator> <name pos:line="9" pos:column="29">CRLF_GUESS<pos:position pos:line="9" pos:column="39"/></name> <operator pos:line="9" pos:column="40">&amp;&amp;<pos:position pos:line="9" pos:column="50"/></operator> <name pos:line="9" pos:column="43">auto_crlf<pos:position pos:line="9" pos:column="52"/></name> <operator pos:line="9" pos:column="53">==<pos:position pos:line="9" pos:column="55"/></operator> <name pos:line="9" pos:column="56">AUTO_CRLF_FALSE<pos:position pos:line="9" pos:column="71"/></name><operator pos:line="9" pos:column="71">)<pos:position pos:line="9" pos:column="72"/></operator> <operator pos:line="9" pos:column="73">||<pos:position pos:line="9" pos:column="75"/></operator>
	    <operator pos:line="10" pos:column="13">(<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">src<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">&amp;&amp;<pos:position pos:line="10" pos:column="28"/></operator> <operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">len<pos:position pos:line="10" pos:column="25"/></name><operator pos:line="10" pos:column="25">)<pos:position pos:line="10" pos:column="26"/></operator></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/*
	 * If we are doing a dry-run and have no source buffer, there is
	 * nothing to analyze; we must assume we would convert.
	 */</comment>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">buf<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">&amp;&amp;<pos:position pos:line="17" pos:column="28"/></operator> <operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">src<pos:position pos:line="17" pos:column="25"/></name></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26">
		<block type="pseudo"><return pos:line="18" pos:column="17">return <expr><literal type="number" pos:line="18" pos:column="24">1<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="20" pos:column="9">gather_stats<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">src<pos:position pos:line="20" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="27">len<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="32">&amp;<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="33">stats<pos:position pos:line="20" pos:column="38"/></name></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">crlf_action<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">==<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="28">CRLF_AUTO<pos:position pos:line="22" pos:column="37"/></name> <operator pos:line="22" pos:column="38">||<pos:position pos:line="22" pos:column="40"/></operator> <name pos:line="22" pos:column="41">crlf_action<pos:position pos:line="22" pos:column="52"/></name> <operator pos:line="22" pos:column="53">==<pos:position pos:line="22" pos:column="55"/></operator> <name pos:line="22" pos:column="56">CRLF_GUESS<pos:position pos:line="22" pos:column="66"/></name></expr>)<pos:position pos:line="22" pos:column="67"/></condition><then pos:line="22" pos:column="67"> <block pos:line="22" pos:column="68">{
		<comment type="block" pos:line="23" pos:column="17">/*
		 * We're currently not going to even try to convert stuff
		 * that has bare CR characters. Does anybody do that crazy
		 * stuff?
		 */</comment>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name><name pos:line="28" pos:column="21">stats<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">.<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="27">cr<pos:position pos:line="28" pos:column="29"/></name></name> <operator pos:line="28" pos:column="30">!=<pos:position pos:line="28" pos:column="32"/></operator> <name><name pos:line="28" pos:column="33">stats<pos:position pos:line="28" pos:column="38"/></name><operator pos:line="28" pos:column="38">.<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="39">crlf<pos:position pos:line="28" pos:column="43"/></name></name></expr>)<pos:position pos:line="28" pos:column="44"/></condition><then pos:line="28" pos:column="44">
			<block type="pseudo"><return pos:line="29" pos:column="25">return <expr><literal type="number" pos:line="29" pos:column="32">0<pos:position pos:line="29" pos:column="33"/></literal></expr>;<pos:position pos:line="29" pos:column="34"/></return></block></then></if>

		<comment type="block" pos:line="31" pos:column="17">/*
		 * And add some heuristics for binary vs text, of course...
		 */</comment>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">is_binary<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><name pos:line="34" pos:column="31">len<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="36">&amp;<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="37">stats<pos:position pos:line="34" pos:column="42"/></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="44"/></condition><then pos:line="34" pos:column="44">
			<block type="pseudo"><return pos:line="35" pos:column="25">return <expr><literal type="number" pos:line="35" pos:column="32">0<pos:position pos:line="35" pos:column="33"/></literal></expr>;<pos:position pos:line="35" pos:column="34"/></return></block></then></if>

		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">crlf_action<pos:position pos:line="37" pos:column="32"/></name> <operator pos:line="37" pos:column="33">==<pos:position pos:line="37" pos:column="35"/></operator> <name pos:line="37" pos:column="36">CRLF_GUESS<pos:position pos:line="37" pos:column="46"/></name></expr>)<pos:position pos:line="37" pos:column="47"/></condition><then pos:line="37" pos:column="47"> <block pos:line="37" pos:column="48">{
			<comment type="block" pos:line="38" pos:column="25">/*
			 * If the file in the index has any CR in it, do not convert.
			 * This is the new safer autocrlf handling.
			 */</comment>
			<if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><call><name pos:line="42" pos:column="29">has_cr_in_index<pos:position pos:line="42" pos:column="44"/></name><argument_list pos:line="42" pos:column="44">(<argument><expr><name pos:line="42" pos:column="45">path<pos:position pos:line="42" pos:column="49"/></name></expr></argument>)<pos:position pos:line="42" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="51"/></condition><then pos:line="42" pos:column="51">
				<block type="pseudo"><return pos:line="43" pos:column="33">return <expr><literal type="number" pos:line="43" pos:column="40">0<pos:position pos:line="43" pos:column="41"/></literal></expr>;<pos:position pos:line="43" pos:column="42"/></return></block></then></if>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="47" pos:column="9">check_safe_crlf<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">path<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="31">crlf_action<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="44">&amp;<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="45">stats<pos:position pos:line="47" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="52">checksafe<pos:position pos:line="47" pos:column="61"/></name></expr></argument>)<pos:position pos:line="47" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="63"/></expr_stmt>

	<comment type="block" pos:line="49" pos:column="9">/* Optimization: No CR? Nothing to convert, regardless. */</comment>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">!<pos:position pos:line="50" pos:column="14"/></operator><name><name pos:line="50" pos:column="14">stats<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">.<pos:position pos:line="50" pos:column="20"/></operator><name pos:line="50" pos:column="20">cr<pos:position pos:line="50" pos:column="22"/></name></name></expr>)<pos:position pos:line="50" pos:column="23"/></condition><then pos:line="50" pos:column="23">
		<block type="pseudo"><return pos:line="51" pos:column="17">return <expr><literal type="number" pos:line="51" pos:column="24">0<pos:position pos:line="51" pos:column="25"/></literal></expr>;<pos:position pos:line="51" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="53" pos:column="9">/*
	 * At this point all of our source analysis is done, and we are sure we
	 * would convert. If we are in dry-run mode, we can give an answer.
	 */</comment>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><operator pos:line="57" pos:column="13">!<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">buf<pos:position pos:line="57" pos:column="17"/></name></expr>)<pos:position pos:line="57" pos:column="18"/></condition><then pos:line="57" pos:column="18">
		<block type="pseudo"><return pos:line="58" pos:column="17">return <expr><literal type="number" pos:line="58" pos:column="24">1<pos:position pos:line="58" pos:column="25"/></literal></expr>;<pos:position pos:line="58" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="60" pos:column="9">/* only grow if not in place */</comment>
	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><call><name pos:line="61" pos:column="13">strbuf_avail<pos:position pos:line="61" pos:column="25"/></name><argument_list pos:line="61" pos:column="25">(<argument><expr><name pos:line="61" pos:column="26">buf<pos:position pos:line="61" pos:column="29"/></name></expr></argument>)<pos:position pos:line="61" pos:column="30"/></argument_list></call> <operator pos:line="61" pos:column="31">+<pos:position pos:line="61" pos:column="32"/></operator> <name><name pos:line="61" pos:column="33">buf<pos:position pos:line="61" pos:column="36"/></name><operator pos:line="61" pos:column="36">-&gt;<pos:position pos:line="61" pos:column="41"/></operator><name pos:line="61" pos:column="38">len<pos:position pos:line="61" pos:column="41"/></name></name> <operator pos:line="61" pos:column="42">&lt;<pos:position pos:line="61" pos:column="46"/></operator> <name pos:line="61" pos:column="44">len<pos:position pos:line="61" pos:column="47"/></name></expr>)<pos:position pos:line="61" pos:column="48"/></condition><then pos:line="61" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="17">strbuf_grow<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><name pos:line="62" pos:column="29">buf<pos:position pos:line="62" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="34">len<pos:position pos:line="62" pos:column="37"/></name> <operator pos:line="62" pos:column="38">-<pos:position pos:line="62" pos:column="39"/></operator> <name><name pos:line="62" pos:column="40">buf<pos:position pos:line="62" pos:column="43"/></name><operator pos:line="62" pos:column="43">-&gt;<pos:position pos:line="62" pos:column="48"/></operator><name pos:line="62" pos:column="45">len<pos:position pos:line="62" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="50"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="63" pos:column="9">dst<pos:position pos:line="63" pos:column="12"/></name> <operator pos:line="63" pos:column="13">=<pos:position pos:line="63" pos:column="14"/></operator> <name><name pos:line="63" pos:column="15">buf<pos:position pos:line="63" pos:column="18"/></name><operator pos:line="63" pos:column="18">-&gt;<pos:position pos:line="63" pos:column="23"/></operator><name pos:line="63" pos:column="20">buf<pos:position pos:line="63" pos:column="23"/></name></name></expr>;<pos:position pos:line="63" pos:column="24"/></expr_stmt>
	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">crlf_action<pos:position pos:line="64" pos:column="24"/></name> <operator pos:line="64" pos:column="25">==<pos:position pos:line="64" pos:column="27"/></operator> <name pos:line="64" pos:column="28">CRLF_AUTO<pos:position pos:line="64" pos:column="37"/></name> <operator pos:line="64" pos:column="38">||<pos:position pos:line="64" pos:column="40"/></operator> <name pos:line="64" pos:column="41">crlf_action<pos:position pos:line="64" pos:column="52"/></name> <operator pos:line="64" pos:column="53">==<pos:position pos:line="64" pos:column="55"/></operator> <name pos:line="64" pos:column="56">CRLF_GUESS<pos:position pos:line="64" pos:column="66"/></name></expr>)<pos:position pos:line="64" pos:column="67"/></condition><then pos:line="64" pos:column="67"> <block pos:line="64" pos:column="68">{
		<comment type="block" pos:line="65" pos:column="17">/*
		 * If we guessed, we already know we rejected a file with
		 * lone CR, and we can strip a CR without looking at what
		 * follow it.
		 */</comment>
		<do pos:line="70" pos:column="17">do <block pos:line="70" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="71" pos:column="25">unsigned<pos:position pos:line="71" pos:column="33"/></name> <name pos:line="71" pos:column="34">char<pos:position pos:line="71" pos:column="38"/></name></type> <name pos:line="71" pos:column="39">c<pos:position pos:line="71" pos:column="40"/></name> <init pos:line="71" pos:column="41">= <expr><operator pos:line="71" pos:column="43">*<pos:position pos:line="71" pos:column="44"/></operator><name pos:line="71" pos:column="44">src<pos:position pos:line="71" pos:column="47"/></name><operator pos:line="71" pos:column="47">++<pos:position pos:line="71" pos:column="49"/></operator></expr></init></decl>;<pos:position pos:line="71" pos:column="50"/></decl_stmt>
			<if pos:line="72" pos:column="25">if <condition pos:line="72" pos:column="28">(<expr><name pos:line="72" pos:column="29">c<pos:position pos:line="72" pos:column="30"/></name> <operator pos:line="72" pos:column="31">!=<pos:position pos:line="72" pos:column="33"/></operator> <literal type="char" pos:line="72" pos:column="34">'\r'<pos:position pos:line="72" pos:column="38"/></literal></expr>)<pos:position pos:line="72" pos:column="39"/></condition><then pos:line="72" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="73" pos:column="33">*<pos:position pos:line="73" pos:column="34"/></operator><name pos:line="73" pos:column="34">dst<pos:position pos:line="73" pos:column="37"/></name><operator pos:line="73" pos:column="37">++<pos:position pos:line="73" pos:column="39"/></operator> <operator pos:line="73" pos:column="40">=<pos:position pos:line="73" pos:column="41"/></operator> <name pos:line="73" pos:column="42">c<pos:position pos:line="73" pos:column="43"/></name></expr>;<pos:position pos:line="73" pos:column="44"/></expr_stmt></block></then></if>
		}<pos:position pos:line="74" pos:column="18"/></block> while <condition pos:line="74" pos:column="25">(<expr><operator pos:line="74" pos:column="26">--<pos:position pos:line="74" pos:column="28"/></operator><name pos:line="74" pos:column="28">len<pos:position pos:line="74" pos:column="31"/></name></expr>)<pos:position pos:line="74" pos:column="32"/></condition>;<pos:position pos:line="74" pos:column="33"/></do>
	}<pos:position pos:line="75" pos:column="10"/></block></then> <else pos:line="75" pos:column="11">else <block pos:line="75" pos:column="16">{
		<do pos:line="76" pos:column="17">do <block pos:line="76" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="77" pos:column="25">unsigned<pos:position pos:line="77" pos:column="33"/></name> <name pos:line="77" pos:column="34">char<pos:position pos:line="77" pos:column="38"/></name></type> <name pos:line="77" pos:column="39">c<pos:position pos:line="77" pos:column="40"/></name> <init pos:line="77" pos:column="41">= <expr><operator pos:line="77" pos:column="43">*<pos:position pos:line="77" pos:column="44"/></operator><name pos:line="77" pos:column="44">src<pos:position pos:line="77" pos:column="47"/></name><operator pos:line="77" pos:column="47">++<pos:position pos:line="77" pos:column="49"/></operator></expr></init></decl>;<pos:position pos:line="77" pos:column="50"/></decl_stmt>
			<if pos:line="78" pos:column="25">if <condition pos:line="78" pos:column="28">(<expr><operator pos:line="78" pos:column="29">!<pos:position pos:line="78" pos:column="30"/></operator> <operator pos:line="78" pos:column="31">(<pos:position pos:line="78" pos:column="32"/></operator><name pos:line="78" pos:column="32">c<pos:position pos:line="78" pos:column="33"/></name> <operator pos:line="78" pos:column="34">==<pos:position pos:line="78" pos:column="36"/></operator> <literal type="char" pos:line="78" pos:column="37">'\r'<pos:position pos:line="78" pos:column="41"/></literal> <operator pos:line="78" pos:column="42">&amp;&amp;<pos:position pos:line="78" pos:column="52"/></operator> <operator pos:line="78" pos:column="45">(<pos:position pos:line="78" pos:column="46"/></operator><literal type="number" pos:line="78" pos:column="46">1<pos:position pos:line="78" pos:column="47"/></literal> <operator pos:line="78" pos:column="48">&lt;<pos:position pos:line="78" pos:column="52"/></operator> <name pos:line="78" pos:column="50">len<pos:position pos:line="78" pos:column="53"/></name> <operator pos:line="78" pos:column="54">&amp;&amp;<pos:position pos:line="78" pos:column="64"/></operator> <operator pos:line="78" pos:column="57">*<pos:position pos:line="78" pos:column="58"/></operator><name pos:line="78" pos:column="58">src<pos:position pos:line="78" pos:column="61"/></name> <operator pos:line="78" pos:column="62">==<pos:position pos:line="78" pos:column="64"/></operator> <literal type="char" pos:line="78" pos:column="65">'\n'<pos:position pos:line="78" pos:column="69"/></literal><operator pos:line="78" pos:column="69">)<pos:position pos:line="78" pos:column="70"/></operator><operator pos:line="78" pos:column="70">)<pos:position pos:line="78" pos:column="71"/></operator></expr>)<pos:position pos:line="78" pos:column="72"/></condition><then pos:line="78" pos:column="72">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="79" pos:column="33">*<pos:position pos:line="79" pos:column="34"/></operator><name pos:line="79" pos:column="34">dst<pos:position pos:line="79" pos:column="37"/></name><operator pos:line="79" pos:column="37">++<pos:position pos:line="79" pos:column="39"/></operator> <operator pos:line="79" pos:column="40">=<pos:position pos:line="79" pos:column="41"/></operator> <name pos:line="79" pos:column="42">c<pos:position pos:line="79" pos:column="43"/></name></expr>;<pos:position pos:line="79" pos:column="44"/></expr_stmt></block></then></if>
		}<pos:position pos:line="80" pos:column="18"/></block> while <condition pos:line="80" pos:column="25">(<expr><operator pos:line="80" pos:column="26">--<pos:position pos:line="80" pos:column="28"/></operator><name pos:line="80" pos:column="28">len<pos:position pos:line="80" pos:column="31"/></name></expr>)<pos:position pos:line="80" pos:column="32"/></condition>;<pos:position pos:line="80" pos:column="33"/></do>
	}<pos:position pos:line="81" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="82" pos:column="9">strbuf_setlen<pos:position pos:line="82" pos:column="22"/></name><argument_list pos:line="82" pos:column="22">(<argument><expr><name pos:line="82" pos:column="23">buf<pos:position pos:line="82" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="28">dst<pos:position pos:line="82" pos:column="31"/></name> <operator pos:line="82" pos:column="32">-<pos:position pos:line="82" pos:column="33"/></operator> <name><name pos:line="82" pos:column="34">buf<pos:position pos:line="82" pos:column="37"/></name><operator pos:line="82" pos:column="37">-&gt;<pos:position pos:line="82" pos:column="42"/></operator><name pos:line="82" pos:column="39">buf<pos:position pos:line="82" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="44"/></expr_stmt>
	<return pos:line="83" pos:column="9">return <expr><literal type="number" pos:line="83" pos:column="16">1<pos:position pos:line="83" pos:column="17"/></literal></expr>;<pos:position pos:line="83" pos:column="18"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
