<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2112.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cmd_reflog_exists<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">argc<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier><modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">argv<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="59">const<pos:position pos:line="1" pos:column="64"/></specifier> <name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">prefix<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">start<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><literal type="number" pos:line="3" pos:column="24">0<pos:position pos:line="3" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>

	<for pos:line="5" pos:column="9">for <control pos:line="5" pos:column="13">(<init><expr><name pos:line="5" pos:column="14">i<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">=<pos:position pos:line="5" pos:column="17"/></operator> <literal type="number" pos:line="5" pos:column="18">1<pos:position pos:line="5" pos:column="19"/></literal></expr>;<pos:position pos:line="5" pos:column="20"/></init> <condition><expr><name pos:line="5" pos:column="21">i<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">&lt;<pos:position pos:line="5" pos:column="27"/></operator> <name pos:line="5" pos:column="25">argc<pos:position pos:line="5" pos:column="29"/></name></expr>;<pos:position pos:line="5" pos:column="30"/></condition> <incr><expr><name pos:line="5" pos:column="31">i<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">++<pos:position pos:line="5" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="5" pos:column="35"/></control> <block pos:line="5" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="6" pos:column="17">const<pos:position pos:line="6" pos:column="22"/></specifier> <name pos:line="6" pos:column="23">char<pos:position pos:line="6" pos:column="27"/></name> <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">arg<pos:position pos:line="6" pos:column="32"/></name> <init pos:line="6" pos:column="33">= <expr><name><name pos:line="6" pos:column="35">argv<pos:position pos:line="6" pos:column="39"/></name><index pos:line="6" pos:column="39">[<expr><name pos:line="6" pos:column="40">i<pos:position pos:line="6" pos:column="41"/></name></expr>]<pos:position pos:line="6" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><operator pos:line="7" pos:column="21">!<pos:position pos:line="7" pos:column="22"/></operator><call><name pos:line="7" pos:column="22">strcmp<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">arg<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="34">"--"<pos:position pos:line="7" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="40"/></condition><then pos:line="7" pos:column="40"> <block pos:line="7" pos:column="41">{
			<expr_stmt><expr><name pos:line="8" pos:column="25">i<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">++<pos:position pos:line="8" pos:column="28"/></operator></expr>;<pos:position pos:line="8" pos:column="29"/></expr_stmt>
			<break pos:line="9" pos:column="25">break;<pos:position pos:line="9" pos:column="31"/></break>
		}<pos:position pos:line="10" pos:column="18"/></block></then>
		<elseif pos:line="11" pos:column="17">else <if pos:line="11" pos:column="22">if <condition pos:line="11" pos:column="25">(<expr><name><name pos:line="11" pos:column="26">arg<pos:position pos:line="11" pos:column="29"/></name><index pos:line="11" pos:column="29">[<expr><literal type="number" pos:line="11" pos:column="30">0<pos:position pos:line="11" pos:column="31"/></literal></expr>]<pos:position pos:line="11" pos:column="32"/></index></name> <operator pos:line="11" pos:column="33">==<pos:position pos:line="11" pos:column="35"/></operator> <literal type="char" pos:line="11" pos:column="36">'-'<pos:position pos:line="11" pos:column="39"/></literal></expr>)<pos:position pos:line="11" pos:column="40"/></condition><then pos:line="11" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">usage<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><name pos:line="12" pos:column="31">reflog_exists_usage<pos:position pos:line="12" pos:column="50"/></name></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt></block></then></if></elseif>
		<else pos:line="13" pos:column="17">else
			<block type="pseudo"><break pos:line="14" pos:column="25">break;<pos:position pos:line="14" pos:column="31"/></break></block></else></if>
	}<pos:position pos:line="15" pos:column="10"/></block></for>

	<expr_stmt><expr><name pos:line="17" pos:column="9">start<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">i<pos:position pos:line="17" pos:column="18"/></name></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">argc<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">-<pos:position pos:line="19" pos:column="19"/></operator> <name pos:line="19" pos:column="20">start<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">!=<pos:position pos:line="19" pos:column="28"/></operator> <literal type="number" pos:line="19" pos:column="29">1<pos:position pos:line="19" pos:column="30"/></literal></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">usage<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">reflog_exists_usage<pos:position pos:line="20" pos:column="42"/></name></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt></block></then></if>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">check_refname_format<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name><name pos:line="22" pos:column="34">argv<pos:position pos:line="22" pos:column="38"/></name><index pos:line="22" pos:column="38">[<expr><name pos:line="22" pos:column="39">start<pos:position pos:line="22" pos:column="44"/></name></expr>]<pos:position pos:line="22" pos:column="45"/></index></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="47">REFNAME_ALLOW_ONELEVEL<pos:position pos:line="22" pos:column="69"/></name></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="71"/></condition><then pos:line="22" pos:column="71">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">die<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><literal type="string" pos:line="23" pos:column="21">"invalid ref format: %s"<pos:position pos:line="23" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="47">argv<pos:position pos:line="23" pos:column="51"/></name><index pos:line="23" pos:column="51">[<expr><name pos:line="23" pos:column="52">start<pos:position pos:line="23" pos:column="57"/></name></expr>]<pos:position pos:line="23" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="60"/></expr_stmt></block></then></if>
	<return pos:line="24" pos:column="9">return <expr><operator pos:line="24" pos:column="16">!<pos:position pos:line="24" pos:column="17"/></operator><call><name pos:line="24" pos:column="17">reflog_exists<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name><name pos:line="24" pos:column="31">argv<pos:position pos:line="24" pos:column="35"/></name><index pos:line="24" pos:column="35">[<expr><name pos:line="24" pos:column="36">start<pos:position pos:line="24" pos:column="41"/></name></expr>]<pos:position pos:line="24" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="44"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
