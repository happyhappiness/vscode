<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2760.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">insert_packed_refs<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">packed_refs<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="57">struct<pos:position pos:line="1" pos:column="63"/></name> <name pos:line="1" pos:column="64">ref<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier><modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">list<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">FILE<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">f<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><call><name pos:line="3" pos:column="19">fopen<pos:position pos:line="3" pos:column="24"/></name><argument_list pos:line="3" pos:column="24">(<argument><expr><name pos:line="3" pos:column="25">packed_refs<pos:position pos:line="3" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="38">"r"<pos:position pos:line="3" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name></type> <name><name pos:line="4" pos:column="21">buffer<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><name pos:line="4" pos:column="28">PATH_MAX<pos:position pos:line="4" pos:column="36"/></name></expr>]<pos:position pos:line="4" pos:column="37"/></index></name></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">f<pos:position pos:line="6" pos:column="15"/></name></expr>)<pos:position pos:line="6" pos:column="16"/></condition><then pos:line="6" pos:column="16">
		<block type="pseudo"><return pos:line="7" pos:column="17">return;<pos:position pos:line="7" pos:column="24"/></return></block></then></if>

	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init pos:line="9" pos:column="14">;<pos:position pos:line="9" pos:column="15"/></init><condition pos:line="9" pos:column="15">;<pos:position pos:line="9" pos:column="16"/></condition><incr/>)<pos:position pos:line="9" pos:column="17"/></control> <block pos:line="9" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">cmp<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><literal type="number" pos:line="10" pos:column="27">0<pos:position pos:line="10" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt> <comment type="block" pos:line="10" pos:column="30">/* assigned before used */</comment>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">len<pos:position pos:line="11" pos:column="24"/></name></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>

		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><call><name pos:line="13" pos:column="22">fgets<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">buffer<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="36">sizeof<argument_list pos:line="13" pos:column="42">(<argument><expr><name pos:line="13" pos:column="43">buffer<pos:position pos:line="13" pos:column="49"/></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="13" pos:column="52">f<pos:position pos:line="13" pos:column="53"/></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="55"/></condition><then pos:line="13" pos:column="55"> <block pos:line="13" pos:column="56">{
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">fclose<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><name pos:line="14" pos:column="32">f<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
			<return pos:line="15" pos:column="25">return;<pos:position pos:line="15" pos:column="32"/></return>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>

		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><call><name pos:line="18" pos:column="22">isxdigit<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name><name pos:line="18" pos:column="31">buffer<pos:position pos:line="18" pos:column="37"/></name><index pos:line="18" pos:column="37">[<expr><literal type="number" pos:line="18" pos:column="38">0<pos:position pos:line="18" pos:column="39"/></literal></expr>]<pos:position pos:line="18" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="42"/></condition><then pos:line="18" pos:column="42">
			<block type="pseudo"><continue pos:line="19" pos:column="25">continue;<pos:position pos:line="19" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="20" pos:column="17">len<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <call><name pos:line="20" pos:column="23">strlen<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">buffer<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">len<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">&amp;&amp;<pos:position pos:line="21" pos:column="35"/></operator> <name><name pos:line="21" pos:column="28">buffer<pos:position pos:line="21" pos:column="34"/></name><index pos:line="21" pos:column="34">[<expr><name pos:line="21" pos:column="35">len<pos:position pos:line="21" pos:column="38"/></name> <operator pos:line="21" pos:column="39">-<pos:position pos:line="21" pos:column="40"/></operator> <literal type="number" pos:line="21" pos:column="41">1<pos:position pos:line="21" pos:column="42"/></literal></expr>]<pos:position pos:line="21" pos:column="43"/></index></name> <operator pos:line="21" pos:column="44">==<pos:position pos:line="21" pos:column="46"/></operator> <literal type="char" pos:line="21" pos:column="47">'\n'<pos:position pos:line="21" pos:column="51"/></literal></expr>)<pos:position pos:line="21" pos:column="52"/></condition><then pos:line="21" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="22" pos:column="25">buffer<pos:position pos:line="22" pos:column="31"/></name><index pos:line="22" pos:column="31">[<expr><operator pos:line="22" pos:column="32">--<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="34">len<pos:position pos:line="22" pos:column="37"/></name></expr>]<pos:position pos:line="22" pos:column="38"/></index></name> <operator pos:line="22" pos:column="39">=<pos:position pos:line="22" pos:column="40"/></operator> <literal type="char" pos:line="22" pos:column="41">'\0'<pos:position pos:line="22" pos:column="45"/></literal></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt></block></then></if>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">len<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">&lt;<pos:position pos:line="23" pos:column="29"/></operator> <literal type="number" pos:line="23" pos:column="27">41<pos:position pos:line="23" pos:column="29"/></literal></expr>)<pos:position pos:line="23" pos:column="30"/></condition><then pos:line="23" pos:column="30">
			<block type="pseudo"><continue pos:line="24" pos:column="25">continue;<pos:position pos:line="24" pos:column="34"/></continue></block></then></if>
		<while pos:line="25" pos:column="17">while <condition pos:line="25" pos:column="23">(<expr><name><operator pos:line="25" pos:column="24">(<pos:position pos:line="25" pos:column="25"/></operator><operator pos:line="25" pos:column="25">*<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="26">list<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">)<pos:position pos:line="25" pos:column="31"/></operator><operator pos:line="25" pos:column="31">-&gt;<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="33">next<pos:position pos:line="25" pos:column="37"/></name></name> <operator pos:line="25" pos:column="38">&amp;&amp;<pos:position pos:line="25" pos:column="48"/></operator>
				<operator pos:line="26" pos:column="33">(<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="34">cmp<pos:position pos:line="26" pos:column="37"/></name> <operator pos:line="26" pos:column="38">=<pos:position pos:line="26" pos:column="39"/></operator> <call><name pos:line="26" pos:column="40">strcmp<pos:position pos:line="26" pos:column="46"/></name><argument_list pos:line="26" pos:column="46">(<argument><expr><name pos:line="26" pos:column="47">buffer<pos:position pos:line="26" pos:column="53"/></name> <operator pos:line="26" pos:column="54">+<pos:position pos:line="26" pos:column="55"/></operator> <literal type="number" pos:line="26" pos:column="56">41<pos:position pos:line="26" pos:column="58"/></literal></expr></argument>,
				      <argument><expr><name><operator pos:line="27" pos:column="39">(<pos:position pos:line="27" pos:column="40"/></operator><operator pos:line="27" pos:column="40">*<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="41">list<pos:position pos:line="27" pos:column="45"/></name><operator pos:line="27" pos:column="45">)<pos:position pos:line="27" pos:column="46"/></operator><operator pos:line="27" pos:column="46">-&gt;<pos:position pos:line="27" pos:column="51"/></operator><name><name pos:line="27" pos:column="48">next<pos:position pos:line="27" pos:column="52"/></name><operator pos:line="27" pos:column="52">-&gt;<pos:position pos:line="27" pos:column="57"/></operator><name pos:line="27" pos:column="54">name<pos:position pos:line="27" pos:column="58"/></name></name></name></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call><operator pos:line="27" pos:column="59">)<pos:position pos:line="27" pos:column="60"/></operator> <operator pos:line="27" pos:column="61">&gt;<pos:position pos:line="27" pos:column="65"/></operator> <literal type="number" pos:line="27" pos:column="63">0<pos:position pos:line="27" pos:column="64"/></literal></expr>)<pos:position pos:line="27" pos:column="65"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="25">list<pos:position pos:line="28" pos:column="29"/></name> <operator pos:line="28" pos:column="30">=<pos:position pos:line="28" pos:column="31"/></operator> <operator pos:line="28" pos:column="32">&amp;<pos:position pos:line="28" pos:column="37"/></operator><name><operator pos:line="28" pos:column="33">(<pos:position pos:line="28" pos:column="34"/></operator><operator pos:line="28" pos:column="34">*<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="35">list<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">)<pos:position pos:line="28" pos:column="40"/></operator><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="42">next<pos:position pos:line="28" pos:column="46"/></name></name></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt></block></while>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">!<pos:position pos:line="29" pos:column="22"/></operator><name><operator pos:line="29" pos:column="22">(<pos:position pos:line="29" pos:column="23"/></operator><operator pos:line="29" pos:column="23">*<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">list<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">)<pos:position pos:line="29" pos:column="29"/></operator><operator pos:line="29" pos:column="29">-&gt;<pos:position pos:line="29" pos:column="34"/></operator><name pos:line="29" pos:column="31">next<pos:position pos:line="29" pos:column="35"/></name></name> <operator pos:line="29" pos:column="36">||<pos:position pos:line="29" pos:column="38"/></operator> <name pos:line="29" pos:column="39">cmp<pos:position pos:line="29" pos:column="42"/></name> <operator pos:line="29" pos:column="43">&lt;<pos:position pos:line="29" pos:column="47"/></operator> <literal type="number" pos:line="29" pos:column="45">0<pos:position pos:line="29" pos:column="46"/></literal></expr>)<pos:position pos:line="29" pos:column="47"/></condition><then pos:line="29" pos:column="47"> <block pos:line="29" pos:column="48">{
			<decl_stmt><decl><type><name><name pos:line="30" pos:column="25">struct<pos:position pos:line="30" pos:column="31"/></name> <name pos:line="30" pos:column="32">ref<pos:position pos:line="30" pos:column="35"/></name></name> <modifier pos:line="30" pos:column="36">*<pos:position pos:line="30" pos:column="37"/></modifier></type><name pos:line="30" pos:column="37">next<pos:position pos:line="30" pos:column="41"/></name> <init pos:line="30" pos:column="42">= <expr><call><name pos:line="30" pos:column="44">alloc_ref<pos:position pos:line="30" pos:column="53"/></name><argument_list pos:line="30" pos:column="53">(<argument><expr><name pos:line="30" pos:column="54">buffer<pos:position pos:line="30" pos:column="60"/></name> <operator pos:line="30" pos:column="61">+<pos:position pos:line="30" pos:column="62"/></operator> <literal type="number" pos:line="30" pos:column="63">41<pos:position pos:line="30" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="67"/></decl_stmt>
			<expr_stmt><expr><name><name pos:line="31" pos:column="25">buffer<pos:position pos:line="31" pos:column="31"/></name><index pos:line="31" pos:column="31">[<expr><literal type="number" pos:line="31" pos:column="32">40<pos:position pos:line="31" pos:column="34"/></literal></expr>]<pos:position pos:line="31" pos:column="35"/></index></name> <operator pos:line="31" pos:column="36">=<pos:position pos:line="31" pos:column="37"/></operator> <literal type="char" pos:line="31" pos:column="38">'\0'<pos:position pos:line="31" pos:column="42"/></literal></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><call><name pos:line="32" pos:column="29">get_oid_hex<pos:position pos:line="32" pos:column="40"/></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name pos:line="32" pos:column="41">buffer<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="49">&amp;<pos:position pos:line="32" pos:column="54"/></operator><name><name pos:line="32" pos:column="50">next<pos:position pos:line="32" pos:column="54"/></name><operator pos:line="32" pos:column="54">-&gt;<pos:position pos:line="32" pos:column="59"/></operator><name pos:line="32" pos:column="56">old_oid<pos:position pos:line="32" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="65"/></condition><then pos:line="32" pos:column="65"> <block pos:line="32" pos:column="66">{
				<expr_stmt><expr><call><name pos:line="33" pos:column="33">warning<pos:position pos:line="33" pos:column="40"/></name> <argument_list pos:line="33" pos:column="41">(<argument><expr><literal type="string" pos:line="33" pos:column="42">"invalid SHA-1: %s"<pos:position pos:line="33" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="63">buffer<pos:position pos:line="33" pos:column="69"/></name></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="71"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="34" pos:column="33">free<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">next<pos:position pos:line="34" pos:column="42"/></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
				<continue pos:line="35" pos:column="33">continue;<pos:position pos:line="35" pos:column="42"/></continue>
			}<pos:position pos:line="36" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="37" pos:column="25">next<pos:position pos:line="37" pos:column="29"/></name><operator pos:line="37" pos:column="29">-&gt;<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="31">next<pos:position pos:line="37" pos:column="35"/></name></name> <operator pos:line="37" pos:column="36">=<pos:position pos:line="37" pos:column="37"/></operator> <name><operator pos:line="37" pos:column="38">(<pos:position pos:line="37" pos:column="39"/></operator><operator pos:line="37" pos:column="39">*<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="40">list<pos:position pos:line="37" pos:column="44"/></name><operator pos:line="37" pos:column="44">)<pos:position pos:line="37" pos:column="45"/></operator><operator pos:line="37" pos:column="45">-&gt;<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="47">next<pos:position pos:line="37" pos:column="51"/></name></name></expr>;<pos:position pos:line="37" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name><operator pos:line="38" pos:column="25">(<pos:position pos:line="38" pos:column="26"/></operator><operator pos:line="38" pos:column="26">*<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">list<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">)<pos:position pos:line="38" pos:column="32"/></operator><operator pos:line="38" pos:column="32">-&gt;<pos:position pos:line="38" pos:column="37"/></operator><name pos:line="38" pos:column="34">next<pos:position pos:line="38" pos:column="38"/></name></name> <operator pos:line="38" pos:column="39">=<pos:position pos:line="38" pos:column="40"/></operator> <name pos:line="38" pos:column="41">next<pos:position pos:line="38" pos:column="45"/></name></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="39" pos:column="25">list<pos:position pos:line="39" pos:column="29"/></name> <operator pos:line="39" pos:column="30">=<pos:position pos:line="39" pos:column="31"/></operator> <operator pos:line="39" pos:column="32">&amp;<pos:position pos:line="39" pos:column="37"/></operator><name><operator pos:line="39" pos:column="33">(<pos:position pos:line="39" pos:column="34"/></operator><operator pos:line="39" pos:column="34">*<pos:position pos:line="39" pos:column="35"/></operator><name pos:line="39" pos:column="35">list<pos:position pos:line="39" pos:column="39"/></name><operator pos:line="39" pos:column="39">)<pos:position pos:line="39" pos:column="40"/></operator><operator pos:line="39" pos:column="40">-&gt;<pos:position pos:line="39" pos:column="45"/></operator><name pos:line="39" pos:column="42">next<pos:position pos:line="39" pos:column="46"/></name></name></expr>;<pos:position pos:line="39" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>
	}<pos:position pos:line="41" pos:column="10"/></block></for>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
