<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6870_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">bin_find<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">mstate<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">m<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">mchunkptr<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">x<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list> <block pos:line="1" pos:column="44">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">size_t<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">size<pos:position pos:line="2" pos:column="14"/></name> <init pos:line="2" pos:column="15">= <expr><call><name pos:line="2" pos:column="17">chunksize<pos:position pos:line="2" pos:column="26"/></name><argument_list pos:line="2" pos:column="26">(<argument><expr><name pos:line="2" pos:column="27">x<pos:position pos:line="2" pos:column="28"/></name></expr></argument>)<pos:position pos:line="2" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="2" pos:column="30"/></decl_stmt>
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><call><name pos:line="3" pos:column="7">is_small<pos:position pos:line="3" pos:column="15"/></name><argument_list pos:line="3" pos:column="15">(<argument><expr><name pos:line="3" pos:column="16">size<pos:position pos:line="3" pos:column="20"/></name></expr></argument>)<pos:position pos:line="3" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="22"/></condition><then pos:line="3" pos:column="22"> <block pos:line="3" pos:column="23">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">bindex_t<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">sidx<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><call><name pos:line="4" pos:column="21">small_index<pos:position pos:line="4" pos:column="32"/></name><argument_list pos:line="4" pos:column="32">(<argument><expr><name pos:line="4" pos:column="33">size<pos:position pos:line="4" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">sbinptr<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">b<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><call><name pos:line="5" pos:column="17">smallbin_at<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">m<pos:position pos:line="5" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="32">sidx<pos:position pos:line="5" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">smallmap_is_marked<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">(<argument><expr><name pos:line="6" pos:column="28">m<pos:position pos:line="6" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="31">sidx<pos:position pos:line="6" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="37"/></condition><then pos:line="6" pos:column="37"> <block pos:line="6" pos:column="38">{
      <decl_stmt><decl><type><name pos:line="7" pos:column="7">mchunkptr<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">p<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><name pos:line="7" pos:column="21">b<pos:position pos:line="7" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
      <do pos:line="8" pos:column="7">do <block pos:line="8" pos:column="10">{
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">p<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">==<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="18">x<pos:position pos:line="9" pos:column="19"/></name></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20">
	  <block type="pseudo"><return pos:line="10" pos:column="11">return <expr><literal type="number" pos:line="10" pos:column="18">1<pos:position pos:line="10" pos:column="19"/></literal></expr>;<pos:position pos:line="10" pos:column="20"/></return></block></then></if>
      }<pos:position pos:line="11" pos:column="8"/></block> while <condition pos:line="11" pos:column="15">(<expr><operator pos:line="11" pos:column="16">(<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">p<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <name><name pos:line="11" pos:column="21">p<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">-&gt;<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="24">fd<pos:position pos:line="11" pos:column="26"/></name></name><operator pos:line="11" pos:column="26">)<pos:position pos:line="11" pos:column="27"/></operator> <operator pos:line="11" pos:column="28">!=<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">b<pos:position pos:line="11" pos:column="32"/></name></expr>)<pos:position pos:line="11" pos:column="33"/></condition>;<pos:position pos:line="11" pos:column="34"/></do>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
  }<pos:position pos:line="13" pos:column="4"/></block></then>
  <else pos:line="14" pos:column="3">else <block pos:line="14" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">bindex_t<pos:position pos:line="15" pos:column="13"/></name></type> <name pos:line="15" pos:column="14">tidx<pos:position pos:line="15" pos:column="18"/></name></decl>;<pos:position pos:line="15" pos:column="19"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">compute_tree_index<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">size<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="30">tidx<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">treemap_is_marked<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">m<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="30">tidx<pos:position pos:line="17" pos:column="34"/></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36"> <block pos:line="17" pos:column="37">{
      <decl_stmt><decl><type><name pos:line="18" pos:column="7">tchunkptr<pos:position pos:line="18" pos:column="16"/></name></type> <name pos:line="18" pos:column="17">t<pos:position pos:line="18" pos:column="18"/></name> <init pos:line="18" pos:column="19">= <expr><operator pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></operator><call><name pos:line="18" pos:column="22">treebin_at<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">m<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="36">tidx<pos:position pos:line="18" pos:column="40"/></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="42"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="19" pos:column="7">size_t<pos:position pos:line="19" pos:column="13"/></name></type> <name pos:line="19" pos:column="14">sizebits<pos:position pos:line="19" pos:column="22"/></name> <init pos:line="19" pos:column="23">= <expr><name pos:line="19" pos:column="25">size<pos:position pos:line="19" pos:column="29"/></name> <operator pos:line="19" pos:column="30">&lt;&lt;<pos:position pos:line="19" pos:column="38"/></operator> <call><name pos:line="19" pos:column="33">leftshift_for_tree_index<pos:position pos:line="19" pos:column="57"/></name><argument_list pos:line="19" pos:column="57">(<argument><expr><name pos:line="19" pos:column="58">tidx<pos:position pos:line="19" pos:column="62"/></name></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="64"/></decl_stmt>
      <while pos:line="20" pos:column="7">while <condition pos:line="20" pos:column="13">(<expr><name pos:line="20" pos:column="14">t<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">!=<pos:position pos:line="20" pos:column="18"/></operator> <literal type="number" pos:line="20" pos:column="19">0<pos:position pos:line="20" pos:column="20"/></literal> <operator pos:line="20" pos:column="21">&amp;&amp;<pos:position pos:line="20" pos:column="31"/></operator> <call><name pos:line="20" pos:column="24">chunksize<pos:position pos:line="20" pos:column="33"/></name><argument_list pos:line="20" pos:column="33">(<argument><expr><name pos:line="20" pos:column="34">t<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call> <operator pos:line="20" pos:column="37">!=<pos:position pos:line="20" pos:column="39"/></operator> <name pos:line="20" pos:column="40">size<pos:position pos:line="20" pos:column="44"/></name></expr>)<pos:position pos:line="20" pos:column="45"/></condition> <block pos:line="20" pos:column="46">{
	<expr_stmt><expr><name pos:line="21" pos:column="9">t<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <name><name pos:line="21" pos:column="13">t<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">child<pos:position pos:line="21" pos:column="21"/></name><index pos:line="21" pos:column="21">[<expr><operator pos:line="21" pos:column="22">(<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">sizebits<pos:position pos:line="21" pos:column="31"/></name> <operator pos:line="21" pos:column="32">&gt;&gt;<pos:position pos:line="21" pos:column="37"/></operator> <operator pos:line="21" pos:column="35">(<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="36">SIZE_T_BITSIZE<pos:position pos:line="21" pos:column="50"/></name><operator pos:line="21" pos:column="50">-<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="51">SIZE_T_ONE<pos:position pos:line="21" pos:column="61"/></name><operator pos:line="21" pos:column="61">)<pos:position pos:line="21" pos:column="62"/></operator><operator pos:line="21" pos:column="62">)<pos:position pos:line="21" pos:column="63"/></operator> <operator pos:line="21" pos:column="64">&amp;<pos:position pos:line="21" pos:column="69"/></operator> <literal type="number" pos:line="21" pos:column="66">1<pos:position pos:line="21" pos:column="67"/></literal></expr>]<pos:position pos:line="21" pos:column="68"/></index></name></expr>;<pos:position pos:line="21" pos:column="69"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">sizebits<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">&lt;&lt;=<pos:position pos:line="22" pos:column="27"/></operator> <literal type="number" pos:line="22" pos:column="22">1<pos:position pos:line="22" pos:column="23"/></literal></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="23" pos:column="8"/></block></while>
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><name pos:line="24" pos:column="11">t<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">!=<pos:position pos:line="24" pos:column="15"/></operator> <literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>)<pos:position pos:line="24" pos:column="18"/></condition><then pos:line="24" pos:column="18"> <block pos:line="24" pos:column="19">{
	<decl_stmt><decl><type><name pos:line="25" pos:column="9">tchunkptr<pos:position pos:line="25" pos:column="18"/></name></type> <name pos:line="25" pos:column="19">u<pos:position pos:line="25" pos:column="20"/></name> <init pos:line="25" pos:column="21">= <expr><name pos:line="25" pos:column="23">t<pos:position pos:line="25" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="25"/></decl_stmt>
	<do pos:line="26" pos:column="9">do <block pos:line="26" pos:column="12">{
	  <if pos:line="27" pos:column="11">if <condition pos:line="27" pos:column="14">(<expr><name pos:line="27" pos:column="15">u<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">==<pos:position pos:line="27" pos:column="19"/></operator> <operator pos:line="27" pos:column="20">(<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">tchunkptr<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">)<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="31">x<pos:position pos:line="27" pos:column="32"/></name></expr>)<pos:position pos:line="27" pos:column="33"/></condition><then pos:line="27" pos:column="33">
	    <block type="pseudo"><return pos:line="28" pos:column="13">return <expr><literal type="number" pos:line="28" pos:column="20">1<pos:position pos:line="28" pos:column="21"/></literal></expr>;<pos:position pos:line="28" pos:column="22"/></return></block></then></if>
	}<pos:position pos:line="29" pos:column="10"/></block> while <condition pos:line="29" pos:column="17">(<expr><operator pos:line="29" pos:column="18">(<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">u<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <name><name pos:line="29" pos:column="23">u<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">-&gt;<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="26">fd<pos:position pos:line="29" pos:column="28"/></name></name><operator pos:line="29" pos:column="28">)<pos:position pos:line="29" pos:column="29"/></operator> <operator pos:line="29" pos:column="30">!=<pos:position pos:line="29" pos:column="32"/></operator> <name pos:line="29" pos:column="33">t<pos:position pos:line="29" pos:column="34"/></name></expr>)<pos:position pos:line="29" pos:column="35"/></condition>;<pos:position pos:line="29" pos:column="36"/></do>
      }<pos:position pos:line="30" pos:column="8"/></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></else></if>
  <return pos:line="33" pos:column="3">return <expr><literal type="number" pos:line="33" pos:column="10">0<pos:position pos:line="33" pos:column="11"/></literal></expr>;<pos:position pos:line="33" pos:column="12"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
