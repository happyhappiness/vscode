<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1941.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_packed_refs<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">FILE<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">f<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">ref_dir<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">dir<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ref_entry<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">last<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><name pos:line="3" pos:column="34">NULL<pos:position pos:line="3" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">line<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">STRBUF_INIT<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
	<enum pos:line="5" pos:column="9">enum <block pos:line="5" pos:column="14">{ <decl><name pos:line="5" pos:column="16">PEELED_NONE<pos:position pos:line="5" pos:column="27"/></name></decl>, <decl><name pos:line="5" pos:column="29">PEELED_TAGS<pos:position pos:line="5" pos:column="40"/></name></decl>, <decl><name pos:line="5" pos:column="42">PEELED_FULLY<pos:position pos:line="5" pos:column="54"/></name></decl> }<pos:position pos:line="5" pos:column="56"/></block> <decl><name pos:line="5" pos:column="57">peeled<pos:position pos:line="5" pos:column="63"/></name> <init pos:line="5" pos:column="64">= <expr><name pos:line="5" pos:column="66">PEELED_NONE<pos:position pos:line="5" pos:column="77"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="78"/></enum>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><call><name pos:line="7" pos:column="16">strbuf_getwholeline<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><operator pos:line="7" pos:column="36">&amp;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="37">line<pos:position pos:line="7" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="43">f<pos:position pos:line="7" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="46">'\n'<pos:position pos:line="7" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call> <operator pos:line="7" pos:column="52">!=<pos:position pos:line="7" pos:column="54"/></operator> <name pos:line="7" pos:column="55">EOF<pos:position pos:line="7" pos:column="58"/></name></expr>)<pos:position pos:line="7" pos:column="59"/></condition> <block pos:line="7" pos:column="60">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">unsigned<pos:position pos:line="8" pos:column="25"/></name> <name pos:line="8" pos:column="26">char<pos:position pos:line="8" pos:column="30"/></name></type> <name><name pos:line="8" pos:column="31">sha1<pos:position pos:line="8" pos:column="35"/></name><index pos:line="8" pos:column="35">[<expr><literal type="number" pos:line="8" pos:column="36">20<pos:position pos:line="8" pos:column="38"/></literal></expr>]<pos:position pos:line="8" pos:column="39"/></index></name></decl>;<pos:position pos:line="8" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="9" pos:column="17">const<pos:position pos:line="9" pos:column="22"/></specifier> <name pos:line="9" pos:column="23">char<pos:position pos:line="9" pos:column="27"/></name> <modifier pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></modifier></type><name pos:line="9" pos:column="29">refname<pos:position pos:line="9" pos:column="36"/></name></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="10" pos:column="17">const<pos:position pos:line="10" pos:column="22"/></specifier> <name pos:line="10" pos:column="23">char<pos:position pos:line="10" pos:column="27"/></name> <modifier pos:line="10" pos:column="28">*<pos:position pos:line="10" pos:column="29"/></modifier></type><name pos:line="10" pos:column="29">traits<pos:position pos:line="10" pos:column="35"/></name></decl>;<pos:position pos:line="10" pos:column="36"/></decl_stmt>

		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">skip_prefix<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name><name pos:line="12" pos:column="33">line<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">.<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="38">buf<pos:position pos:line="12" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="43">"# pack-refs with:"<pos:position pos:line="12" pos:column="62"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="64">&amp;<pos:position pos:line="12" pos:column="69"/></operator><name pos:line="12" pos:column="65">traits<pos:position pos:line="12" pos:column="71"/></name></expr></argument>)<pos:position pos:line="12" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="73"/></condition><then pos:line="12" pos:column="73"> <block pos:line="12" pos:column="74">{
			<if pos:line="13" pos:column="25">if <condition pos:line="13" pos:column="28">(<expr><call><name pos:line="13" pos:column="29">strstr<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">traits<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="44">" fully-peeled "<pos:position pos:line="13" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="62"/></condition><then pos:line="13" pos:column="62">
				<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="33">peeled<pos:position pos:line="14" pos:column="39"/></name> <operator pos:line="14" pos:column="40">=<pos:position pos:line="14" pos:column="41"/></operator> <name pos:line="14" pos:column="42">PEELED_FULLY<pos:position pos:line="14" pos:column="54"/></name></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt></block></then>
			<elseif pos:line="15" pos:column="25">else <if pos:line="15" pos:column="30">if <condition pos:line="15" pos:column="33">(<expr><call><name pos:line="15" pos:column="34">strstr<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name pos:line="15" pos:column="41">traits<pos:position pos:line="15" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="49">" peeled "<pos:position pos:line="15" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="61"/></condition><then pos:line="15" pos:column="61">
				<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="33">peeled<pos:position pos:line="16" pos:column="39"/></name> <operator pos:line="16" pos:column="40">=<pos:position pos:line="16" pos:column="41"/></operator> <name pos:line="16" pos:column="42">PEELED_TAGS<pos:position pos:line="16" pos:column="53"/></name></expr>;<pos:position pos:line="16" pos:column="54"/></expr_stmt></block></then></if></elseif></if>
			<comment type="block" pos:line="17" pos:column="25">/* perhaps other traits later as well */</comment>
			<continue pos:line="18" pos:column="25">continue;<pos:position pos:line="18" pos:column="34"/></continue>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="21" pos:column="17">refname<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <call><name pos:line="21" pos:column="27">parse_ref_line<pos:position pos:line="21" pos:column="41"/></name><argument_list pos:line="21" pos:column="41">(<argument><expr><operator pos:line="21" pos:column="42">&amp;<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="43">line<pos:position pos:line="21" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="49">sha1<pos:position pos:line="21" pos:column="53"/></name></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="55"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">refname<pos:position pos:line="22" pos:column="28"/></name></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29"> <block pos:line="22" pos:column="30">{
			<decl_stmt><decl><type><name pos:line="23" pos:column="25">int<pos:position pos:line="23" pos:column="28"/></name></type> <name pos:line="23" pos:column="29">flag<pos:position pos:line="23" pos:column="33"/></name> <init pos:line="23" pos:column="34">= <expr><name pos:line="23" pos:column="36">REF_ISPACKED<pos:position pos:line="23" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="49"/></decl_stmt>

			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><call><name pos:line="25" pos:column="29">check_refname_format<pos:position pos:line="25" pos:column="49"/></name><argument_list pos:line="25" pos:column="49">(<argument><expr><name pos:line="25" pos:column="50">refname<pos:position pos:line="25" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="59">REFNAME_ALLOW_ONELEVEL<pos:position pos:line="25" pos:column="81"/></name></expr></argument>)<pos:position pos:line="25" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="83"/></condition><then pos:line="25" pos:column="83"> <block pos:line="25" pos:column="84">{
				<if pos:line="26" pos:column="33">if <condition pos:line="26" pos:column="36">(<expr><operator pos:line="26" pos:column="37">!<pos:position pos:line="26" pos:column="38"/></operator><call><name pos:line="26" pos:column="38">refname_is_safe<pos:position pos:line="26" pos:column="53"/></name><argument_list pos:line="26" pos:column="53">(<argument><expr><name pos:line="26" pos:column="54">refname<pos:position pos:line="26" pos:column="61"/></name></expr></argument>)<pos:position pos:line="26" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="63"/></condition><then pos:line="26" pos:column="63">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="41">die<pos:position pos:line="27" pos:column="44"/></name><argument_list pos:line="27" pos:column="44">(<argument><expr><literal type="string" pos:line="27" pos:column="45">"packed refname is dangerous: %s"<pos:position pos:line="27" pos:column="78"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="80">refname<pos:position pos:line="27" pos:column="87"/></name></expr></argument>)<pos:position pos:line="27" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="89"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="28" pos:column="33">hashclr<pos:position pos:line="28" pos:column="40"/></name><argument_list pos:line="28" pos:column="40">(<argument><expr><name pos:line="28" pos:column="41">sha1<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><name pos:line="29" pos:column="33">flag<pos:position pos:line="29" pos:column="37"/></name> <operator pos:line="29" pos:column="38">|=<pos:position pos:line="29" pos:column="40"/></operator> <name pos:line="29" pos:column="41">REF_BAD_NAME<pos:position pos:line="29" pos:column="53"/></name> <operator pos:line="29" pos:column="54">|<pos:position pos:line="29" pos:column="55"/></operator> <name pos:line="29" pos:column="56">REF_ISBROKEN<pos:position pos:line="29" pos:column="68"/></name></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt>
			}<pos:position pos:line="30" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="31" pos:column="25">last<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">=<pos:position pos:line="31" pos:column="31"/></operator> <call><name pos:line="31" pos:column="32">create_ref_entry<pos:position pos:line="31" pos:column="48"/></name><argument_list pos:line="31" pos:column="48">(<argument><expr><name pos:line="31" pos:column="49">refname<pos:position pos:line="31" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="58">sha1<pos:position pos:line="31" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="64">flag<pos:position pos:line="31" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="70">0<pos:position pos:line="31" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="73"/></expr_stmt>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><name pos:line="32" pos:column="29">peeled<pos:position pos:line="32" pos:column="35"/></name> <operator pos:line="32" pos:column="36">==<pos:position pos:line="32" pos:column="38"/></operator> <name pos:line="32" pos:column="39">PEELED_FULLY<pos:position pos:line="32" pos:column="51"/></name> <operator pos:line="32" pos:column="52">||<pos:position pos:line="32" pos:column="54"/></operator>
			    <operator pos:line="33" pos:column="29">(<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="30">peeled<pos:position pos:line="33" pos:column="36"/></name> <operator pos:line="33" pos:column="37">==<pos:position pos:line="33" pos:column="39"/></operator> <name pos:line="33" pos:column="40">PEELED_TAGS<pos:position pos:line="33" pos:column="51"/></name> <operator pos:line="33" pos:column="52">&amp;&amp;<pos:position pos:line="33" pos:column="62"/></operator> <call><name pos:line="33" pos:column="55">starts_with<pos:position pos:line="33" pos:column="66"/></name><argument_list pos:line="33" pos:column="66">(<argument><expr><name pos:line="33" pos:column="67">refname<pos:position pos:line="33" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="76">"refs/tags/"<pos:position pos:line="33" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="89"/></argument_list></call><operator pos:line="33" pos:column="89">)<pos:position pos:line="33" pos:column="90"/></operator></expr>)<pos:position pos:line="33" pos:column="91"/></condition><then pos:line="33" pos:column="91">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="33">last<pos:position pos:line="34" pos:column="37"/></name><operator pos:line="34" pos:column="37">-&gt;<pos:position pos:line="34" pos:column="42"/></operator><name pos:line="34" pos:column="39">flag<pos:position pos:line="34" pos:column="43"/></name></name> <operator pos:line="34" pos:column="44">|=<pos:position pos:line="34" pos:column="46"/></operator> <name pos:line="34" pos:column="47">REF_KNOWS_PEELED<pos:position pos:line="34" pos:column="63"/></name></expr>;<pos:position pos:line="34" pos:column="64"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">add_ref<pos:position pos:line="35" pos:column="32"/></name><argument_list pos:line="35" pos:column="32">(<argument><expr><name pos:line="35" pos:column="33">dir<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="38">last<pos:position pos:line="35" pos:column="42"/></name></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>
			<continue pos:line="36" pos:column="25">continue;<pos:position pos:line="36" pos:column="34"/></continue>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">last<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">&amp;&amp;<pos:position pos:line="38" pos:column="36"/></operator>
		    <name><name pos:line="39" pos:column="21">line<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">.<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="26">buf<pos:position pos:line="39" pos:column="29"/></name><index pos:line="39" pos:column="29">[<expr><literal type="number" pos:line="39" pos:column="30">0<pos:position pos:line="39" pos:column="31"/></literal></expr>]<pos:position pos:line="39" pos:column="32"/></index></name> <operator pos:line="39" pos:column="33">==<pos:position pos:line="39" pos:column="35"/></operator> <literal type="char" pos:line="39" pos:column="36">'^'<pos:position pos:line="39" pos:column="39"/></literal> <operator pos:line="39" pos:column="40">&amp;&amp;<pos:position pos:line="39" pos:column="50"/></operator>
		    <name><name pos:line="40" pos:column="21">line<pos:position pos:line="40" pos:column="25"/></name><operator pos:line="40" pos:column="25">.<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="26">len<pos:position pos:line="40" pos:column="29"/></name></name> <operator pos:line="40" pos:column="30">==<pos:position pos:line="40" pos:column="32"/></operator> <name pos:line="40" pos:column="33">PEELED_LINE_LENGTH<pos:position pos:line="40" pos:column="51"/></name> <operator pos:line="40" pos:column="52">&amp;&amp;<pos:position pos:line="40" pos:column="62"/></operator>
		    <name><name pos:line="41" pos:column="21">line<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">.<pos:position pos:line="41" pos:column="26"/></operator><name pos:line="41" pos:column="26">buf<pos:position pos:line="41" pos:column="29"/></name><index pos:line="41" pos:column="29">[<expr><name pos:line="41" pos:column="30">PEELED_LINE_LENGTH<pos:position pos:line="41" pos:column="48"/></name> <operator pos:line="41" pos:column="49">-<pos:position pos:line="41" pos:column="50"/></operator> <literal type="number" pos:line="41" pos:column="51">1<pos:position pos:line="41" pos:column="52"/></literal></expr>]<pos:position pos:line="41" pos:column="53"/></index></name> <operator pos:line="41" pos:column="54">==<pos:position pos:line="41" pos:column="56"/></operator> <literal type="char" pos:line="41" pos:column="57">'\n'<pos:position pos:line="41" pos:column="61"/></literal> <operator pos:line="41" pos:column="62">&amp;&amp;<pos:position pos:line="41" pos:column="72"/></operator>
		    <operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><call><name pos:line="42" pos:column="22">get_sha1_hex<pos:position pos:line="42" pos:column="34"/></name><argument_list pos:line="42" pos:column="34">(<argument><expr><name><name pos:line="42" pos:column="35">line<pos:position pos:line="42" pos:column="39"/></name><operator pos:line="42" pos:column="39">.<pos:position pos:line="42" pos:column="40"/></operator><name pos:line="42" pos:column="40">buf<pos:position pos:line="42" pos:column="43"/></name></name> <operator pos:line="42" pos:column="44">+<pos:position pos:line="42" pos:column="45"/></operator> <literal type="number" pos:line="42" pos:column="46">1<pos:position pos:line="42" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="49">sha1<pos:position pos:line="42" pos:column="53"/></name></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="55"/></condition><then pos:line="42" pos:column="55"> <block pos:line="42" pos:column="56">{
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">hashcpy<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name><name pos:line="43" pos:column="33">last<pos:position pos:line="43" pos:column="37"/></name><operator pos:line="43" pos:column="37">-&gt;<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="39">u<pos:position pos:line="43" pos:column="40"/></name><operator pos:line="43" pos:column="40">.<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="41">value<pos:position pos:line="43" pos:column="46"/></name><operator pos:line="43" pos:column="46">.<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="47">peeled<pos:position pos:line="43" pos:column="53"/></name><operator pos:line="43" pos:column="53">.<pos:position pos:line="43" pos:column="54"/></operator><name pos:line="43" pos:column="54">hash<pos:position pos:line="43" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="60">sha1<pos:position pos:line="43" pos:column="64"/></name></expr></argument>)<pos:position pos:line="43" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="66"/></expr_stmt>
			<comment type="block" pos:line="44" pos:column="25">/*
			 * Regardless of what the file header said,
			 * we definitely know the value of *this*
			 * reference:
			 */</comment>
			<expr_stmt><expr><name><name pos:line="49" pos:column="25">last<pos:position pos:line="49" pos:column="29"/></name><operator pos:line="49" pos:column="29">-&gt;<pos:position pos:line="49" pos:column="34"/></operator><name pos:line="49" pos:column="31">flag<pos:position pos:line="49" pos:column="35"/></name></name> <operator pos:line="49" pos:column="36">|=<pos:position pos:line="49" pos:column="38"/></operator> <name pos:line="49" pos:column="39">REF_KNOWS_PEELED<pos:position pos:line="49" pos:column="55"/></name></expr>;<pos:position pos:line="49" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>
	}<pos:position pos:line="51" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="53" pos:column="9">strbuf_release<pos:position pos:line="53" pos:column="23"/></name><argument_list pos:line="53" pos:column="23">(<argument><expr><operator pos:line="53" pos:column="24">&amp;<pos:position pos:line="53" pos:column="29"/></operator><name pos:line="53" pos:column="25">line<pos:position pos:line="53" pos:column="29"/></name></expr></argument>)<pos:position pos:line="53" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
