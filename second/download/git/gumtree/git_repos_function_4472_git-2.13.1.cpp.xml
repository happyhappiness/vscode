<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4472_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">ack_type<pos:position pos:line="1" pos:column="21"/></name></name></type> <name pos:line="1" pos:column="22">get_ack<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">fd<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">unsigned<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">result_sha1<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">len<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">line<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><call><name pos:line="4" pos:column="22">packet_read_line<pos:position pos:line="4" pos:column="38"/></name><argument_list pos:line="4" pos:column="38">(<argument><expr><name pos:line="4" pos:column="39">fd<pos:position pos:line="4" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="4" pos:column="43">&amp;<pos:position pos:line="4" pos:column="48"/></operator><name pos:line="4" pos:column="44">len<pos:position pos:line="4" pos:column="47"/></name></expr></argument>)<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">arg<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">len<pos:position pos:line="7" pos:column="17"/></name></expr>)<pos:position pos:line="7" pos:column="18"/></condition><then pos:line="7" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="17">die<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><call><name pos:line="8" pos:column="21">_<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><literal type="string" pos:line="8" pos:column="23">"git fetch-pack: expected ACK/NAK, got EOF"<pos:position pos:line="8" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="69"/></expr_stmt></block></then></if>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">strcmp<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">line<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="27">"NAK"<pos:position pos:line="9" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="34"/></condition><then pos:line="9" pos:column="34">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><name pos:line="10" pos:column="24">NAK<pos:position pos:line="10" pos:column="27"/></name></expr>;<pos:position pos:line="10" pos:column="28"/></return></block></then></if>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">skip_prefix<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">line<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="31">"ACK "<pos:position pos:line="11" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="39">&amp;<pos:position pos:line="11" pos:column="44"/></operator><name pos:line="11" pos:column="40">arg<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="45"/></condition><then pos:line="11" pos:column="45"> <block pos:line="11" pos:column="46">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><call><name pos:line="12" pos:column="22">get_sha1_hex<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">arg<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="40">result_sha1<pos:position pos:line="12" pos:column="51"/></name></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="53"/></condition><then pos:line="12" pos:column="53"> <block pos:line="12" pos:column="54">{
			<expr_stmt><expr><name pos:line="13" pos:column="25">arg<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">+=<pos:position pos:line="13" pos:column="31"/></operator> <literal type="number" pos:line="13" pos:column="32">40<pos:position pos:line="13" pos:column="34"/></literal></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="14" pos:column="25">len<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">-=<pos:position pos:line="14" pos:column="31"/></operator> <name pos:line="14" pos:column="32">arg<pos:position pos:line="14" pos:column="35"/></name> <operator pos:line="14" pos:column="36">-<pos:position pos:line="14" pos:column="37"/></operator> <name pos:line="14" pos:column="38">line<pos:position pos:line="14" pos:column="42"/></name></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><name pos:line="15" pos:column="29">len<pos:position pos:line="15" pos:column="32"/></name> <operator pos:line="15" pos:column="33">&lt;<pos:position pos:line="15" pos:column="37"/></operator> <literal type="number" pos:line="15" pos:column="35">1<pos:position pos:line="15" pos:column="36"/></literal></expr>)<pos:position pos:line="15" pos:column="37"/></condition><then pos:line="15" pos:column="37">
				<block type="pseudo"><return pos:line="16" pos:column="33">return <expr><name pos:line="16" pos:column="40">ACK<pos:position pos:line="16" pos:column="43"/></name></expr>;<pos:position pos:line="16" pos:column="44"/></return></block></then></if>
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><call><name pos:line="17" pos:column="29">strstr<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">arg<pos:position pos:line="17" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="41">"continue"<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="53"/></condition><then pos:line="17" pos:column="53">
				<block type="pseudo"><return pos:line="18" pos:column="33">return <expr><name pos:line="18" pos:column="40">ACK_continue<pos:position pos:line="18" pos:column="52"/></name></expr>;<pos:position pos:line="18" pos:column="53"/></return></block></then></if>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><call><name pos:line="19" pos:column="29">strstr<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">arg<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="41">"common"<pos:position pos:line="19" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="51"/></condition><then pos:line="19" pos:column="51">
				<block type="pseudo"><return pos:line="20" pos:column="33">return <expr><name pos:line="20" pos:column="40">ACK_common<pos:position pos:line="20" pos:column="50"/></name></expr>;<pos:position pos:line="20" pos:column="51"/></return></block></then></if>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><call><name pos:line="21" pos:column="29">strstr<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><name pos:line="21" pos:column="36">arg<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="41">"ready"<pos:position pos:line="21" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="50"/></condition><then pos:line="21" pos:column="50">
				<block type="pseudo"><return pos:line="22" pos:column="33">return <expr><name pos:line="22" pos:column="40">ACK_ready<pos:position pos:line="22" pos:column="49"/></name></expr>;<pos:position pos:line="22" pos:column="50"/></return></block></then></if>
			<return pos:line="23" pos:column="25">return <expr><name pos:line="23" pos:column="32">ACK<pos:position pos:line="23" pos:column="35"/></name></expr>;<pos:position pos:line="23" pos:column="36"/></return>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">skip_prefix<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">line<pos:position pos:line="26" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="31">"ERR "<pos:position pos:line="26" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="26" pos:column="39">&amp;<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="40">arg<pos:position pos:line="26" pos:column="43"/></name></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="45"/></condition><then pos:line="26" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">die<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><call><name pos:line="27" pos:column="21">_<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><literal type="string" pos:line="27" pos:column="23">"remote error: %s"<pos:position pos:line="27" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">arg<pos:position pos:line="27" pos:column="47"/></name></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">die<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><call><name pos:line="28" pos:column="13">_<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><literal type="string" pos:line="28" pos:column="15">"git fetch-pack: expected ACK/NAK, got '%s'"<pos:position pos:line="28" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="62">line<pos:position pos:line="28" pos:column="66"/></name></expr></argument>)<pos:position pos:line="28" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="68"/></expr_stmt>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
