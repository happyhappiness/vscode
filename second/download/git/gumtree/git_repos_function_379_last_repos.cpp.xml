<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_379_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ce_flush<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">git_SHA_CTX<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">context<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">int<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">fd<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">unsigned<pos:position pos:line="1" pos:column="59"/></name> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">sha1<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">left<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">write_buffer_len<pos:position pos:line="3" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">left<pos:position pos:line="5" pos:column="17"/></name></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18"> <block pos:line="5" pos:column="19">{
		<expr_stmt><expr><name pos:line="6" pos:column="17">write_buffer_len<pos:position pos:line="6" pos:column="33"/></name> <operator pos:line="6" pos:column="34">=<pos:position pos:line="6" pos:column="35"/></operator> <literal type="number" pos:line="6" pos:column="36">0<pos:position pos:line="6" pos:column="37"/></literal></expr>;<pos:position pos:line="6" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">git_SHA1_Update<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><name pos:line="7" pos:column="33">context<pos:position pos:line="7" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="42">write_buffer<pos:position pos:line="7" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="56">left<pos:position pos:line="7" pos:column="60"/></name></expr></argument>)<pos:position pos:line="7" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="62"/></expr_stmt>
	}<pos:position pos:line="8" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="10" pos:column="9">/* Flush first if not enough space for SHA1 signature */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">left<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">+<pos:position pos:line="11" pos:column="19"/></operator> <literal type="number" pos:line="11" pos:column="20">20<pos:position pos:line="11" pos:column="22"/></literal> <operator pos:line="11" pos:column="23">&gt;<pos:position pos:line="11" pos:column="27"/></operator> <name pos:line="11" pos:column="25">WRITE_BUFFER_SIZE<pos:position pos:line="11" pos:column="42"/></name></expr>)<pos:position pos:line="11" pos:column="43"/></condition><then pos:line="11" pos:column="43"> <block pos:line="11" pos:column="44">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">write_in_full<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">fd<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="39">write_buffer<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="53">left<pos:position pos:line="12" pos:column="57"/></name></expr></argument>)<pos:position pos:line="12" pos:column="58"/></argument_list></call> <operator pos:line="12" pos:column="59">!=<pos:position pos:line="12" pos:column="61"/></operator> <name pos:line="12" pos:column="62">left<pos:position pos:line="12" pos:column="66"/></name></expr>)<pos:position pos:line="12" pos:column="67"/></condition><then pos:line="12" pos:column="67">
			<block type="pseudo"><return pos:line="13" pos:column="25">return <expr><operator pos:line="13" pos:column="32">-<pos:position pos:line="13" pos:column="33"/></operator><literal type="number" pos:line="13" pos:column="33">1<pos:position pos:line="13" pos:column="34"/></literal></expr>;<pos:position pos:line="13" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="14" pos:column="17">left<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="17" pos:column="9">/* Append the SHA1 signature at the end */</comment>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">git_SHA1_Final<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">write_buffer<pos:position pos:line="18" pos:column="36"/></name> <operator pos:line="18" pos:column="37">+<pos:position pos:line="18" pos:column="38"/></operator> <name pos:line="18" pos:column="39">left<pos:position pos:line="18" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="45">context<pos:position pos:line="18" pos:column="52"/></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">hashcpy<pos:position pos:line="19" pos:column="16"/></name><argument_list pos:line="19" pos:column="16">(<argument><expr><name pos:line="19" pos:column="17">sha1<pos:position pos:line="19" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="23">write_buffer<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">+<pos:position pos:line="19" pos:column="37"/></operator> <name pos:line="19" pos:column="38">left<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">left<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">+=<pos:position pos:line="20" pos:column="16"/></operator> <literal type="number" pos:line="20" pos:column="17">20<pos:position pos:line="20" pos:column="19"/></literal></expr>;<pos:position pos:line="20" pos:column="20"/></expr_stmt>
	<return pos:line="21" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="21" pos:column="16">(<pos:position pos:line="21" pos:column="17"/></operator><call><name pos:line="21" pos:column="17">write_in_full<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">fd<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">write_buffer<pos:position pos:line="21" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="49">left<pos:position pos:line="21" pos:column="53"/></name></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call> <operator pos:line="21" pos:column="55">!=<pos:position pos:line="21" pos:column="57"/></operator> <name pos:line="21" pos:column="58">left<pos:position pos:line="21" pos:column="62"/></name><operator pos:line="21" pos:column="62">)<pos:position pos:line="21" pos:column="63"/></operator></expr> ?<pos:position pos:line="21" pos:column="65"/></condition><then pos:line="21" pos:column="65"> <expr><operator pos:line="21" pos:column="66">-<pos:position pos:line="21" pos:column="67"/></operator><literal type="number" pos:line="21" pos:column="67">1<pos:position pos:line="21" pos:column="68"/></literal></expr> <pos:position pos:line="21" pos:column="69"/></then><else pos:line="21" pos:column="69">: <expr><literal type="number" pos:line="21" pos:column="71">0<pos:position pos:line="21" pos:column="72"/></literal></expr></else></ternary></expr>;<pos:position pos:line="21" pos:column="73"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
