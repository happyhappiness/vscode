<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6108_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_check_ref_format<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">argc<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier><modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">argv<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">prefix<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">normalize<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><literal type="number" pos:line="4" pos:column="25">0<pos:position pos:line="4" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">flags<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><literal type="number" pos:line="5" pos:column="21">0<pos:position pos:line="5" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">refname<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">argc<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">==<pos:position pos:line="8" pos:column="20"/></operator> <literal type="number" pos:line="8" pos:column="21">2<pos:position pos:line="8" pos:column="22"/></literal> <operator pos:line="8" pos:column="23">&amp;&amp;<pos:position pos:line="8" pos:column="33"/></operator> <operator pos:line="8" pos:column="26">!<pos:position pos:line="8" pos:column="27"/></operator><call><name pos:line="8" pos:column="27">strcmp<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name><name pos:line="8" pos:column="34">argv<pos:position pos:line="8" pos:column="38"/></name><index pos:line="8" pos:column="38">[<expr><literal type="number" pos:line="8" pos:column="39">1<pos:position pos:line="8" pos:column="40"/></literal></expr>]<pos:position pos:line="8" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="43">"-h"<pos:position pos:line="8" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="49"/></condition><then pos:line="8" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">usage<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">builtin_check_ref_format_usage<pos:position pos:line="9" pos:column="53"/></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="55"/></expr_stmt></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">argc<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">==<pos:position pos:line="11" pos:column="20"/></operator> <literal type="number" pos:line="11" pos:column="21">3<pos:position pos:line="11" pos:column="22"/></literal> <operator pos:line="11" pos:column="23">&amp;&amp;<pos:position pos:line="11" pos:column="33"/></operator> <operator pos:line="11" pos:column="26">!<pos:position pos:line="11" pos:column="27"/></operator><call><name pos:line="11" pos:column="27">strcmp<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name><name pos:line="11" pos:column="34">argv<pos:position pos:line="11" pos:column="38"/></name><index pos:line="11" pos:column="38">[<expr><literal type="number" pos:line="11" pos:column="39">1<pos:position pos:line="11" pos:column="40"/></literal></expr>]<pos:position pos:line="11" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="43">"--branch"<pos:position pos:line="11" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="55"/></condition><then pos:line="11" pos:column="55">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><call><name pos:line="12" pos:column="24">check_ref_format_branch<pos:position pos:line="12" pos:column="47"/></name><argument_list pos:line="12" pos:column="47">(<argument><expr><name><name pos:line="12" pos:column="48">argv<pos:position pos:line="12" pos:column="52"/></name><index pos:line="12" pos:column="52">[<expr><literal type="number" pos:line="12" pos:column="53">2<pos:position pos:line="12" pos:column="54"/></literal></expr>]<pos:position pos:line="12" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></return></block></then></if>

	<for pos:line="14" pos:column="9">for <control pos:line="14" pos:column="13">(<init><expr><name pos:line="14" pos:column="14">i<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <literal type="number" pos:line="14" pos:column="18">1<pos:position pos:line="14" pos:column="19"/></literal></expr>;<pos:position pos:line="14" pos:column="20"/></init> <condition><expr><name pos:line="14" pos:column="21">i<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">&lt;<pos:position pos:line="14" pos:column="27"/></operator> <name pos:line="14" pos:column="25">argc<pos:position pos:line="14" pos:column="29"/></name> <operator pos:line="14" pos:column="30">&amp;&amp;<pos:position pos:line="14" pos:column="40"/></operator> <name><name pos:line="14" pos:column="33">argv<pos:position pos:line="14" pos:column="37"/></name><index pos:line="14" pos:column="37">[<expr><name pos:line="14" pos:column="38">i<pos:position pos:line="14" pos:column="39"/></name></expr>]<pos:position pos:line="14" pos:column="40"/></index><index pos:line="14" pos:column="40">[<expr><literal type="number" pos:line="14" pos:column="41">0<pos:position pos:line="14" pos:column="42"/></literal></expr>]<pos:position pos:line="14" pos:column="43"/></index></name> <operator pos:line="14" pos:column="44">==<pos:position pos:line="14" pos:column="46"/></operator> <literal type="char" pos:line="14" pos:column="47">'-'<pos:position pos:line="14" pos:column="50"/></literal></expr>;<pos:position pos:line="14" pos:column="51"/></condition> <incr><expr><name pos:line="14" pos:column="52">i<pos:position pos:line="14" pos:column="53"/></name><operator pos:line="14" pos:column="53">++<pos:position pos:line="14" pos:column="55"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="56"/></control> <block pos:line="14" pos:column="57">{
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><call><name pos:line="15" pos:column="22">strcmp<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name><name pos:line="15" pos:column="29">argv<pos:position pos:line="15" pos:column="33"/></name><index pos:line="15" pos:column="33">[<expr><name pos:line="15" pos:column="34">i<pos:position pos:line="15" pos:column="35"/></name></expr>]<pos:position pos:line="15" pos:column="36"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="38">"--normalize"<pos:position pos:line="15" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call> <operator pos:line="15" pos:column="53">||<pos:position pos:line="15" pos:column="55"/></operator> <operator pos:line="15" pos:column="56">!<pos:position pos:line="15" pos:column="57"/></operator><call><name pos:line="15" pos:column="57">strcmp<pos:position pos:line="15" pos:column="63"/></name><argument_list pos:line="15" pos:column="63">(<argument><expr><name><name pos:line="15" pos:column="64">argv<pos:position pos:line="15" pos:column="68"/></name><index pos:line="15" pos:column="68">[<expr><name pos:line="15" pos:column="69">i<pos:position pos:line="15" pos:column="70"/></name></expr>]<pos:position pos:line="15" pos:column="71"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="73">"--print"<pos:position pos:line="15" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="83"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="84"/></condition><then pos:line="15" pos:column="84">
			<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">normalize<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">=<pos:position pos:line="16" pos:column="36"/></operator> <literal type="number" pos:line="16" pos:column="37">1<pos:position pos:line="16" pos:column="38"/></literal></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt></block></then>
		<elseif pos:line="17" pos:column="17">else <if pos:line="17" pos:column="22">if <condition pos:line="17" pos:column="25">(<expr><operator pos:line="17" pos:column="26">!<pos:position pos:line="17" pos:column="27"/></operator><call><name pos:line="17" pos:column="27">strcmp<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name><name pos:line="17" pos:column="34">argv<pos:position pos:line="17" pos:column="38"/></name><index pos:line="17" pos:column="38">[<expr><name pos:line="17" pos:column="39">i<pos:position pos:line="17" pos:column="40"/></name></expr>]<pos:position pos:line="17" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="43">"--allow-onelevel"<pos:position pos:line="17" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="63"/></condition><then pos:line="17" pos:column="63">
			<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="25">flags<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">|=<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">REFNAME_ALLOW_ONELEVEL<pos:position pos:line="18" pos:column="56"/></name></expr>;<pos:position pos:line="18" pos:column="57"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="19" pos:column="17">else <if pos:line="19" pos:column="22">if <condition pos:line="19" pos:column="25">(<expr><operator pos:line="19" pos:column="26">!<pos:position pos:line="19" pos:column="27"/></operator><call><name pos:line="19" pos:column="27">strcmp<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">(<argument><expr><name><name pos:line="19" pos:column="34">argv<pos:position pos:line="19" pos:column="38"/></name><index pos:line="19" pos:column="38">[<expr><name pos:line="19" pos:column="39">i<pos:position pos:line="19" pos:column="40"/></name></expr>]<pos:position pos:line="19" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="43">"--no-allow-onelevel"<pos:position pos:line="19" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="66"/></condition><then pos:line="19" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="25">flags<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">&amp;=<pos:position pos:line="20" pos:column="37"/></operator> <operator pos:line="20" pos:column="34">~<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="35">REFNAME_ALLOW_ONELEVEL<pos:position pos:line="20" pos:column="57"/></name></expr>;<pos:position pos:line="20" pos:column="58"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="21" pos:column="17">else <if pos:line="21" pos:column="22">if <condition pos:line="21" pos:column="25">(<expr><operator pos:line="21" pos:column="26">!<pos:position pos:line="21" pos:column="27"/></operator><call><name pos:line="21" pos:column="27">strcmp<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name><name pos:line="21" pos:column="34">argv<pos:position pos:line="21" pos:column="38"/></name><index pos:line="21" pos:column="38">[<expr><name pos:line="21" pos:column="39">i<pos:position pos:line="21" pos:column="40"/></name></expr>]<pos:position pos:line="21" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="43">"--refspec-pattern"<pos:position pos:line="21" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="64"/></condition><then pos:line="21" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="25">flags<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">|=<pos:position pos:line="22" pos:column="33"/></operator> <name pos:line="22" pos:column="34">REFNAME_REFSPEC_PATTERN<pos:position pos:line="22" pos:column="57"/></name></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt></block></then></if></elseif>
		<else pos:line="23" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">usage<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name pos:line="24" pos:column="31">builtin_check_ref_format_usage<pos:position pos:line="24" pos:column="61"/></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt></block></else></if>
	}<pos:position pos:line="25" pos:column="10"/></block></for>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator> <operator pos:line="26" pos:column="15">(<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">i<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">==<pos:position pos:line="26" pos:column="20"/></operator> <name pos:line="26" pos:column="21">argc<pos:position pos:line="26" pos:column="25"/></name> <operator pos:line="26" pos:column="26">-<pos:position pos:line="26" pos:column="27"/></operator> <literal type="number" pos:line="26" pos:column="28">1<pos:position pos:line="26" pos:column="29"/></literal><operator pos:line="26" pos:column="29">)<pos:position pos:line="26" pos:column="30"/></operator></expr>)<pos:position pos:line="26" pos:column="31"/></condition><then pos:line="26" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">usage<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">builtin_check_ref_format_usage<pos:position pos:line="27" pos:column="53"/></name></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="29" pos:column="9">refname<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <name><name pos:line="29" pos:column="19">argv<pos:position pos:line="29" pos:column="23"/></name><index pos:line="29" pos:column="23">[<expr><name pos:line="29" pos:column="24">i<pos:position pos:line="29" pos:column="25"/></name></expr>]<pos:position pos:line="29" pos:column="26"/></index></name></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">normalize<pos:position pos:line="30" pos:column="22"/></name></expr>)<pos:position pos:line="30" pos:column="23"/></condition><then pos:line="30" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="17">refname<pos:position pos:line="31" pos:column="24"/></name> <operator pos:line="31" pos:column="25">=<pos:position pos:line="31" pos:column="26"/></operator> <call><name pos:line="31" pos:column="27">collapse_slashes<pos:position pos:line="31" pos:column="43"/></name><argument_list pos:line="31" pos:column="43">(<argument><expr><name pos:line="31" pos:column="44">refname<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt></block></then></if>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">check_refname_format<pos:position pos:line="32" pos:column="33"/></name><argument_list pos:line="32" pos:column="33">(<argument><expr><name pos:line="32" pos:column="34">refname<pos:position pos:line="32" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="43">flags<pos:position pos:line="32" pos:column="48"/></name></expr></argument>)<pos:position pos:line="32" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="50"/></condition><then pos:line="32" pos:column="50">
		<block type="pseudo"><return pos:line="33" pos:column="17">return <expr><literal type="number" pos:line="33" pos:column="24">1<pos:position pos:line="33" pos:column="25"/></literal></expr>;<pos:position pos:line="33" pos:column="26"/></return></block></then></if>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">normalize<pos:position pos:line="34" pos:column="22"/></name></expr>)<pos:position pos:line="34" pos:column="23"/></condition><then pos:line="34" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="17">printf<pos:position pos:line="35" pos:column="23"/></name><argument_list pos:line="35" pos:column="23">(<argument><expr><literal type="string" pos:line="35" pos:column="24">"%s\n"<pos:position pos:line="35" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="32">refname<pos:position pos:line="35" pos:column="39"/></name></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt></block></then></if>

	<return pos:line="37" pos:column="9">return <expr><literal type="number" pos:line="37" pos:column="16">0<pos:position pos:line="37" pos:column="17"/></literal></expr>;<pos:position pos:line="37" pos:column="18"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
