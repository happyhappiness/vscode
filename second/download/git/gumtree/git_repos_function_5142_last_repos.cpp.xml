<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5142_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">format_config<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">strbuf<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">buf<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">key_<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="64">const<pos:position pos:line="1" pos:column="69"/></specifier> <name pos:line="1" pos:column="70">char<pos:position pos:line="1" pos:column="74"/></name> <modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">value_<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="83"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">show_origin<pos:position pos:line="3" pos:column="24"/></name></expr>)<pos:position pos:line="3" pos:column="25"/></condition><then pos:line="3" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="4" pos:column="17">show_config_origin<pos:position pos:line="4" pos:column="35"/></name><argument_list pos:line="4" pos:column="35">(<argument><expr><name pos:line="4" pos:column="36">buf<pos:position pos:line="4" pos:column="39"/></name></expr></argument>)<pos:position pos:line="4" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="41"/></expr_stmt></block></then></if>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">show_keys<pos:position pos:line="5" pos:column="22"/></name></expr>)<pos:position pos:line="5" pos:column="23"/></condition><then pos:line="5" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="17">strbuf_addstr<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">buf<pos:position pos:line="6" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="36">key_<pos:position pos:line="6" pos:column="40"/></name></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="42"/></expr_stmt></block></then></if>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">omit_values<pos:position pos:line="7" pos:column="25"/></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26"> <block pos:line="7" pos:column="27">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">show_keys<pos:position pos:line="8" pos:column="30"/></name></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="25">strbuf_addch<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">(<argument><expr><name pos:line="9" pos:column="38">buf<pos:position pos:line="9" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="43">key_delim<pos:position pos:line="9" pos:column="52"/></name></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="54"/></expr_stmt></block></then></if>

		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">types<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">==<pos:position pos:line="11" pos:column="29"/></operator> <name pos:line="11" pos:column="30">TYPE_INT<pos:position pos:line="11" pos:column="38"/></name></expr>)<pos:position pos:line="11" pos:column="39"/></condition><then pos:line="11" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">strbuf_addf<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><name pos:line="12" pos:column="37">buf<pos:position pos:line="12" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="42">"%"<pos:position pos:line="12" pos:column="45"/></literal><name pos:line="12" pos:column="45">PRId64<pos:position pos:line="12" pos:column="51"/></name></expr></argument>,
				    <argument><expr><call><name pos:line="13" pos:column="37">git_config_int64<pos:position pos:line="13" pos:column="53"/></name><argument_list pos:line="13" pos:column="53">(<argument><expr><name pos:line="13" pos:column="54">key_<pos:position pos:line="13" pos:column="58"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="13" pos:column="60">value_<pos:position pos:line="13" pos:column="66"/></name></expr> ?<pos:position pos:line="13" pos:column="68"/></condition><then pos:line="13" pos:column="68"> <expr><name pos:line="13" pos:column="69">value_<pos:position pos:line="13" pos:column="75"/></name></expr> <pos:position pos:line="13" pos:column="76"/></then><else pos:line="13" pos:column="76">: <expr><literal type="string" pos:line="13" pos:column="78">""<pos:position pos:line="13" pos:column="80"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="13" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="83"/></expr_stmt></block></then>
		<elseif pos:line="14" pos:column="17">else <if pos:line="14" pos:column="22">if <condition pos:line="14" pos:column="25">(<expr><name pos:line="14" pos:column="26">types<pos:position pos:line="14" pos:column="31"/></name> <operator pos:line="14" pos:column="32">==<pos:position pos:line="14" pos:column="34"/></operator> <name pos:line="14" pos:column="35">TYPE_BOOL<pos:position pos:line="14" pos:column="44"/></name></expr>)<pos:position pos:line="14" pos:column="45"/></condition><then pos:line="14" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="25">strbuf_addstr<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><name pos:line="15" pos:column="39">buf<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name pos:line="15" pos:column="44">git_config_bool<pos:position pos:line="15" pos:column="59"/></name><argument_list pos:line="15" pos:column="59">(<argument><expr><name pos:line="15" pos:column="60">key_<pos:position pos:line="15" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="66">value_<pos:position pos:line="15" pos:column="72"/></name></expr></argument>)<pos:position pos:line="15" pos:column="73"/></argument_list></call></expr> ?<pos:position pos:line="15" pos:column="75"/></condition><then pos:line="15" pos:column="75">
				      <expr><literal type="string" pos:line="16" pos:column="39">"true"<pos:position pos:line="16" pos:column="45"/></literal></expr> <pos:position pos:line="16" pos:column="46"/></then><else pos:line="16" pos:column="46">: <expr><literal type="string" pos:line="16" pos:column="48">"false"<pos:position pos:line="16" pos:column="55"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="17" pos:column="17">else <if pos:line="17" pos:column="22">if <condition pos:line="17" pos:column="25">(<expr><name pos:line="17" pos:column="26">types<pos:position pos:line="17" pos:column="31"/></name> <operator pos:line="17" pos:column="32">==<pos:position pos:line="17" pos:column="34"/></operator> <name pos:line="17" pos:column="35">TYPE_BOOL_OR_INT<pos:position pos:line="17" pos:column="51"/></name></expr>)<pos:position pos:line="17" pos:column="52"/></condition><then pos:line="17" pos:column="52"> <block pos:line="17" pos:column="53">{
			<decl_stmt><decl><type><name pos:line="18" pos:column="25">int<pos:position pos:line="18" pos:column="28"/></name></type> <name pos:line="18" pos:column="29">is_bool<pos:position pos:line="18" pos:column="36"/></name></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="38">v<pos:position pos:line="18" pos:column="39"/></name></decl>;<pos:position pos:line="18" pos:column="40"/></decl_stmt>
			<expr_stmt><expr><name pos:line="19" pos:column="25">v<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <call><name pos:line="19" pos:column="29">git_config_bool_or_int<pos:position pos:line="19" pos:column="51"/></name><argument_list pos:line="19" pos:column="51">(<argument><expr><name pos:line="19" pos:column="52">key_<pos:position pos:line="19" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="58">value_<pos:position pos:line="19" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="66">&amp;<pos:position pos:line="19" pos:column="71"/></operator><name pos:line="19" pos:column="67">is_bool<pos:position pos:line="19" pos:column="74"/></name></expr></argument>)<pos:position pos:line="19" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="76"/></expr_stmt>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name pos:line="20" pos:column="29">is_bool<pos:position pos:line="20" pos:column="36"/></name></expr>)<pos:position pos:line="20" pos:column="37"/></condition><then pos:line="20" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="33">strbuf_addstr<pos:position pos:line="21" pos:column="46"/></name><argument_list pos:line="21" pos:column="46">(<argument><expr><name pos:line="21" pos:column="47">buf<pos:position pos:line="21" pos:column="50"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="21" pos:column="52">v<pos:position pos:line="21" pos:column="53"/></name></expr> ?<pos:position pos:line="21" pos:column="55"/></condition><then pos:line="21" pos:column="55"> <expr><literal type="string" pos:line="21" pos:column="56">"true"<pos:position pos:line="21" pos:column="62"/></literal></expr> <pos:position pos:line="21" pos:column="63"/></then><else pos:line="21" pos:column="63">: <expr><literal type="string" pos:line="21" pos:column="65">"false"<pos:position pos:line="21" pos:column="72"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="21" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="74"/></expr_stmt></block></then>
			<else pos:line="22" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="33">strbuf_addf<pos:position pos:line="23" pos:column="44"/></name><argument_list pos:line="23" pos:column="44">(<argument><expr><name pos:line="23" pos:column="45">buf<pos:position pos:line="23" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="50">"%d"<pos:position pos:line="23" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="56">v<pos:position pos:line="23" pos:column="57"/></name></expr></argument>)<pos:position pos:line="23" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="59"/></expr_stmt></block></else></if>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if></elseif> <elseif pos:line="24" pos:column="19">else <if pos:line="24" pos:column="24">if <condition pos:line="24" pos:column="27">(<expr><name pos:line="24" pos:column="28">types<pos:position pos:line="24" pos:column="33"/></name> <operator pos:line="24" pos:column="34">==<pos:position pos:line="24" pos:column="36"/></operator> <name pos:line="24" pos:column="37">TYPE_PATH<pos:position pos:line="24" pos:column="46"/></name></expr>)<pos:position pos:line="24" pos:column="47"/></condition><then pos:line="24" pos:column="47"> <block pos:line="24" pos:column="48">{
			<decl_stmt><decl><type><specifier pos:line="25" pos:column="25">const<pos:position pos:line="25" pos:column="30"/></specifier> <name pos:line="25" pos:column="31">char<pos:position pos:line="25" pos:column="35"/></name> <modifier pos:line="25" pos:column="36">*<pos:position pos:line="25" pos:column="37"/></modifier></type><name pos:line="25" pos:column="37">v<pos:position pos:line="25" pos:column="38"/></name></decl>;<pos:position pos:line="25" pos:column="39"/></decl_stmt>
			<if pos:line="26" pos:column="25">if <condition pos:line="26" pos:column="28">(<expr><call><name pos:line="26" pos:column="29">git_config_pathname<pos:position pos:line="26" pos:column="48"/></name><argument_list pos:line="26" pos:column="48">(<argument><expr><operator pos:line="26" pos:column="49">&amp;<pos:position pos:line="26" pos:column="54"/></operator><name pos:line="26" pos:column="50">v<pos:position pos:line="26" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="53">key_<pos:position pos:line="26" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="59">value_<pos:position pos:line="26" pos:column="65"/></name></expr></argument>)<pos:position pos:line="26" pos:column="66"/></argument_list></call> <operator pos:line="26" pos:column="67">&lt;<pos:position pos:line="26" pos:column="71"/></operator> <literal type="number" pos:line="26" pos:column="69">0<pos:position pos:line="26" pos:column="70"/></literal></expr>)<pos:position pos:line="26" pos:column="71"/></condition><then pos:line="26" pos:column="71">
				<block type="pseudo"><return pos:line="27" pos:column="33">return <expr><operator pos:line="27" pos:column="40">-<pos:position pos:line="27" pos:column="41"/></operator><literal type="number" pos:line="27" pos:column="41">1<pos:position pos:line="27" pos:column="42"/></literal></expr>;<pos:position pos:line="27" pos:column="43"/></return></block></then></if>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">strbuf_addstr<pos:position pos:line="28" pos:column="38"/></name><argument_list pos:line="28" pos:column="38">(<argument><expr><name pos:line="28" pos:column="39">buf<pos:position pos:line="28" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="44">v<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">free<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><operator pos:line="29" pos:column="30">(<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="31">char<pos:position pos:line="29" pos:column="35"/></name> <operator pos:line="29" pos:column="36">*<pos:position pos:line="29" pos:column="37"/></operator><operator pos:line="29" pos:column="37">)<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="38">v<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if></elseif> <elseif pos:line="30" pos:column="19">else <if pos:line="30" pos:column="24">if <condition pos:line="30" pos:column="27">(<expr><name pos:line="30" pos:column="28">value_<pos:position pos:line="30" pos:column="34"/></name></expr>)<pos:position pos:line="30" pos:column="35"/></condition><then pos:line="30" pos:column="35"> <block pos:line="30" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">strbuf_addstr<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><name pos:line="31" pos:column="39">buf<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="44">value_<pos:position pos:line="31" pos:column="50"/></name></expr></argument>)<pos:position pos:line="31" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if></elseif> <else pos:line="32" pos:column="19">else <block pos:line="32" pos:column="24">{
			<comment type="block" pos:line="33" pos:column="25">/* Just show the key name; back out delimiter */</comment>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">show_keys<pos:position pos:line="34" pos:column="38"/></name></expr>)<pos:position pos:line="34" pos:column="39"/></condition><then pos:line="34" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="33">strbuf_setlen<pos:position pos:line="35" pos:column="46"/></name><argument_list pos:line="35" pos:column="46">(<argument><expr><name pos:line="35" pos:column="47">buf<pos:position pos:line="35" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="52">buf<pos:position pos:line="35" pos:column="55"/></name><operator pos:line="35" pos:column="55">-&gt;<pos:position pos:line="35" pos:column="60"/></operator><name pos:line="35" pos:column="57">len<pos:position pos:line="35" pos:column="60"/></name></name> <operator pos:line="35" pos:column="61">-<pos:position pos:line="35" pos:column="62"/></operator> <literal type="number" pos:line="35" pos:column="63">1<pos:position pos:line="35" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="66"/></expr_stmt></block></then></if>
		}<pos:position pos:line="36" pos:column="18"/></block></else></if>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">strbuf_addch<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">buf<pos:position pos:line="38" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="27">term<pos:position pos:line="38" pos:column="31"/></name></expr></argument>)<pos:position pos:line="38" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
	<return pos:line="39" pos:column="9">return <expr><literal type="number" pos:line="39" pos:column="16">0<pos:position pos:line="39" pos:column="17"/></literal></expr>;<pos:position pos:line="39" pos:column="18"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
