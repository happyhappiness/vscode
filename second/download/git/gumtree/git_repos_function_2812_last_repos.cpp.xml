<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2812_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">tcl_quote_buf<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">strbuf<pos:position pos:line="1" pos:column="33"/></name></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">sb<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">src<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name pos:line="3" pos:column="14">c<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">strbuf_addch<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">(<argument><expr><name pos:line="5" pos:column="22">sb<pos:position pos:line="5" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="5" pos:column="26">'"'<pos:position pos:line="5" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="31"/></expr_stmt>
	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><operator pos:line="6" pos:column="16">(<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">c<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">=<pos:position pos:line="6" pos:column="20"/></operator> <operator pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">src<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">++<pos:position pos:line="6" pos:column="27"/></operator><operator pos:line="6" pos:column="27">)<pos:position pos:line="6" pos:column="28"/></operator></expr>)<pos:position pos:line="6" pos:column="29"/></condition> <block pos:line="6" pos:column="30">{
		<switch pos:line="7" pos:column="17">switch <condition pos:line="7" pos:column="24">(<expr><name pos:line="7" pos:column="25">c<pos:position pos:line="7" pos:column="26"/></name></expr>)<pos:position pos:line="7" pos:column="27"/></condition> <block pos:line="7" pos:column="28">{
		<case pos:line="8" pos:column="17">case <expr><literal type="char" pos:line="8" pos:column="22">'['<pos:position pos:line="8" pos:column="25"/></literal></expr>:<pos:position pos:line="8" pos:column="26"/></case> <case pos:line="8" pos:column="27">case <expr><literal type="char" pos:line="8" pos:column="32">']'<pos:position pos:line="8" pos:column="35"/></literal></expr>:<pos:position pos:line="8" pos:column="36"/></case>
		<case pos:line="9" pos:column="17">case <expr><literal type="char" pos:line="9" pos:column="22">'{'<pos:position pos:line="9" pos:column="25"/></literal></expr>:<pos:position pos:line="9" pos:column="26"/></case> <case pos:line="9" pos:column="27">case <expr><literal type="char" pos:line="9" pos:column="32">'}'<pos:position pos:line="9" pos:column="35"/></literal></expr>:<pos:position pos:line="9" pos:column="36"/></case>
		<case pos:line="10" pos:column="17">case <expr><literal type="char" pos:line="10" pos:column="22">'$'<pos:position pos:line="10" pos:column="25"/></literal></expr>:<pos:position pos:line="10" pos:column="26"/></case> <case pos:line="10" pos:column="27">case <expr><literal type="char" pos:line="10" pos:column="32">'\\'<pos:position pos:line="10" pos:column="36"/></literal></expr>:<pos:position pos:line="10" pos:column="37"/></case> <case pos:line="10" pos:column="38">case <expr><literal type="char" pos:line="10" pos:column="43">'"'<pos:position pos:line="10" pos:column="46"/></literal></expr>:<pos:position pos:line="10" pos:column="47"/></case>
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">strbuf_addch<pos:position pos:line="11" pos:column="37"/></name><argument_list pos:line="11" pos:column="37">(<argument><expr><name pos:line="11" pos:column="38">sb<pos:position pos:line="11" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="42">'\\'<pos:position pos:line="11" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="48"/></expr_stmt>
		<default pos:line="12" pos:column="17">default:<pos:position pos:line="12" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">strbuf_addch<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">sb<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="42">c<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
			<break pos:line="14" pos:column="25">break;<pos:position pos:line="14" pos:column="31"/></break>
		<case pos:line="15" pos:column="17">case <expr><literal type="char" pos:line="15" pos:column="22">'\f'<pos:position pos:line="15" pos:column="26"/></literal></expr>:<pos:position pos:line="15" pos:column="27"/></case>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">strbuf_addstr<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">(<argument><expr><name pos:line="16" pos:column="39">sb<pos:position pos:line="16" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="43">"\\f"<pos:position pos:line="16" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
			<break pos:line="17" pos:column="25">break;<pos:position pos:line="17" pos:column="31"/></break>
		<case pos:line="18" pos:column="17">case <expr><literal type="char" pos:line="18" pos:column="22">'\r'<pos:position pos:line="18" pos:column="26"/></literal></expr>:<pos:position pos:line="18" pos:column="27"/></case>
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">strbuf_addstr<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><name pos:line="19" pos:column="39">sb<pos:position pos:line="19" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="43">"\\r"<pos:position pos:line="19" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="50"/></expr_stmt>
			<break pos:line="20" pos:column="25">break;<pos:position pos:line="20" pos:column="31"/></break>
		<case pos:line="21" pos:column="17">case <expr><literal type="char" pos:line="21" pos:column="22">'\n'<pos:position pos:line="21" pos:column="26"/></literal></expr>:<pos:position pos:line="21" pos:column="27"/></case>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">strbuf_addstr<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><name pos:line="22" pos:column="39">sb<pos:position pos:line="22" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="43">"\\n"<pos:position pos:line="22" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="50"/></expr_stmt>
			<break pos:line="23" pos:column="25">break;<pos:position pos:line="23" pos:column="31"/></break>
		<case pos:line="24" pos:column="17">case <expr><literal type="char" pos:line="24" pos:column="22">'\t'<pos:position pos:line="24" pos:column="26"/></literal></expr>:<pos:position pos:line="24" pos:column="27"/></case>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">strbuf_addstr<pos:position pos:line="25" pos:column="38"/></name><argument_list pos:line="25" pos:column="38">(<argument><expr><name pos:line="25" pos:column="39">sb<pos:position pos:line="25" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="43">"\\t"<pos:position pos:line="25" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt>
			<break pos:line="26" pos:column="25">break;<pos:position pos:line="26" pos:column="31"/></break>
		<case pos:line="27" pos:column="17">case <expr><literal type="char" pos:line="27" pos:column="22">'\v'<pos:position pos:line="27" pos:column="26"/></literal></expr>:<pos:position pos:line="27" pos:column="27"/></case>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">strbuf_addstr<pos:position pos:line="28" pos:column="38"/></name><argument_list pos:line="28" pos:column="38">(<argument><expr><name pos:line="28" pos:column="39">sb<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="43">"\\v"<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt>
			<break pos:line="29" pos:column="25">break;<pos:position pos:line="29" pos:column="31"/></break>
		}<pos:position pos:line="30" pos:column="18"/></block></switch>
	}<pos:position pos:line="31" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">strbuf_addch<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">sb<pos:position pos:line="32" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="26">'"'<pos:position pos:line="32" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
