<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2509.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">show_ref_array_item<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">ref_array_item<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">info<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">format<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="75">int<pos:position pos:line="1" pos:column="78"/></name></type> <name pos:line="1" pos:column="79">quote_style<pos:position pos:line="1" pos:column="90"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="91"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">cp<pos:position pos:line="3" pos:column="23"/></name></decl>, <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="26">sp<pos:position pos:line="3" pos:column="28"/></name></decl>, <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="31">ep<pos:position pos:line="3" pos:column="33"/></name></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">final_buf<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">ref_formatting_state<pos:position pos:line="5" pos:column="36"/></name></name></type> <name pos:line="5" pos:column="37">state<pos:position pos:line="5" pos:column="42"/></name> <init pos:line="5" pos:column="43">= <expr><name pos:line="5" pos:column="45">REF_FORMATTING_STATE_INIT<pos:position pos:line="5" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="71"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="7" pos:column="9">state<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">.<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">quote_style<pos:position pos:line="7" pos:column="26"/></name></name> <operator pos:line="7" pos:column="27">=<pos:position pos:line="7" pos:column="28"/></operator> <name pos:line="7" pos:column="29">quote_style<pos:position pos:line="7" pos:column="40"/></name></expr>;<pos:position pos:line="7" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">push_stack_element<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><operator pos:line="8" pos:column="28">&amp;<pos:position pos:line="8" pos:column="33"/></operator><name><name pos:line="8" pos:column="29">state<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">.<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="35">stack<pos:position pos:line="8" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="42"/></expr_stmt>

	<for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init><expr><name pos:line="10" pos:column="14">cp<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">format<pos:position pos:line="10" pos:column="25"/></name></expr>;<pos:position pos:line="10" pos:column="26"/></init> <condition><expr><operator pos:line="10" pos:column="27">*<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">cp<pos:position pos:line="10" pos:column="30"/></name> <operator pos:line="10" pos:column="31">&amp;&amp;<pos:position pos:line="10" pos:column="41"/></operator> <operator pos:line="10" pos:column="34">(<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">sp<pos:position pos:line="10" pos:column="37"/></name> <operator pos:line="10" pos:column="38">=<pos:position pos:line="10" pos:column="39"/></operator> <call><name pos:line="10" pos:column="40">find_next<pos:position pos:line="10" pos:column="49"/></name><argument_list pos:line="10" pos:column="49">(<argument><expr><name pos:line="10" pos:column="50">cp<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call><operator pos:line="10" pos:column="53">)<pos:position pos:line="10" pos:column="54"/></operator></expr>;<pos:position pos:line="10" pos:column="55"/></condition> <incr><expr><name pos:line="10" pos:column="56">cp<pos:position pos:line="10" pos:column="58"/></name> <operator pos:line="10" pos:column="59">=<pos:position pos:line="10" pos:column="60"/></operator> <name pos:line="10" pos:column="61">ep<pos:position pos:line="10" pos:column="63"/></name> <operator pos:line="10" pos:column="64">+<pos:position pos:line="10" pos:column="65"/></operator> <literal type="number" pos:line="10" pos:column="66">1<pos:position pos:line="10" pos:column="67"/></literal></expr></incr>)<pos:position pos:line="10" pos:column="68"/></control> <block pos:line="10" pos:column="69">{
		<decl_stmt><decl><type><name><name pos:line="11" pos:column="17">struct<pos:position pos:line="11" pos:column="23"/></name> <name pos:line="11" pos:column="24">atom_value<pos:position pos:line="11" pos:column="34"/></name></name> <modifier pos:line="11" pos:column="35">*<pos:position pos:line="11" pos:column="36"/></modifier></type><name pos:line="11" pos:column="36">atomv<pos:position pos:line="11" pos:column="41"/></name></decl>;<pos:position pos:line="11" pos:column="42"/></decl_stmt>

		<expr_stmt><expr><name pos:line="13" pos:column="17">ep<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <call><name pos:line="13" pos:column="22">strchr<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">sp<pos:position pos:line="13" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="33">')'<pos:position pos:line="13" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">cp<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">&lt;<pos:position pos:line="14" pos:column="28"/></operator> <name pos:line="14" pos:column="26">sp<pos:position pos:line="14" pos:column="28"/></name></expr>)<pos:position pos:line="14" pos:column="29"/></condition><then pos:line="14" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="25">append_literal<pos:position pos:line="15" pos:column="39"/></name><argument_list pos:line="15" pos:column="39">(<argument><expr><name pos:line="15" pos:column="40">cp<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="44">sp<pos:position pos:line="15" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="48">&amp;<pos:position pos:line="15" pos:column="53"/></operator><name pos:line="15" pos:column="49">state<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="56"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">get_ref_atom_value<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">info<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="42">parse_ref_filter_atom<pos:position pos:line="16" pos:column="63"/></name><argument_list pos:line="16" pos:column="63">(<argument><expr><name pos:line="16" pos:column="64">sp<pos:position pos:line="16" pos:column="66"/></name> <operator pos:line="16" pos:column="67">+<pos:position pos:line="16" pos:column="68"/></operator> <literal type="number" pos:line="16" pos:column="69">2<pos:position pos:line="16" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="72">ep<pos:position pos:line="16" pos:column="74"/></name></expr></argument>)<pos:position pos:line="16" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="16" pos:column="77">&amp;<pos:position pos:line="16" pos:column="82"/></operator><name pos:line="16" pos:column="78">atomv<pos:position pos:line="16" pos:column="83"/></name></expr></argument>)<pos:position pos:line="16" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="85"/></expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="17" pos:column="17">atomv<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">-&gt;<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="24">handler<pos:position pos:line="17" pos:column="31"/></name></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">atomv<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="40">state<pos:position pos:line="17" pos:column="45"/></name></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></for>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">*<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">cp<pos:position pos:line="19" pos:column="16"/></name></expr>)<pos:position pos:line="19" pos:column="17"/></condition><then pos:line="19" pos:column="17"> <block pos:line="19" pos:column="18">{
		<expr_stmt><expr><name pos:line="20" pos:column="17">sp<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">cp<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">+<pos:position pos:line="20" pos:column="26"/></operator> <call><name pos:line="20" pos:column="27">strlen<pos:position pos:line="20" pos:column="33"/></name><argument_list pos:line="20" pos:column="33">(<argument><expr><name pos:line="20" pos:column="34">cp<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">append_literal<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">cp<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="36">sp<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="40">&amp;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="41">state<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">need_color_reset_at_eol<pos:position pos:line="23" pos:column="36"/></name></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37"> <block pos:line="23" pos:column="38">{
		<decl_stmt><decl><type><name><name pos:line="24" pos:column="17">struct<pos:position pos:line="24" pos:column="23"/></name> <name pos:line="24" pos:column="24">atom_value<pos:position pos:line="24" pos:column="34"/></name></name></type> <name pos:line="24" pos:column="35">resetv<pos:position pos:line="24" pos:column="41"/></name></decl>;<pos:position pos:line="24" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">char<pos:position pos:line="25" pos:column="21"/></name></type> <name><name pos:line="25" pos:column="22">color<pos:position pos:line="25" pos:column="27"/></name><index pos:line="25" pos:column="27">[<expr><name pos:line="25" pos:column="28">COLOR_MAXLEN<pos:position pos:line="25" pos:column="40"/></name></expr>]<pos:position pos:line="25" pos:column="41"/></index></name> <init pos:line="25" pos:column="42">= <expr><literal type="string" pos:line="25" pos:column="44">""<pos:position pos:line="25" pos:column="46"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="47"/></decl_stmt>

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">color_parse<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><literal type="string" pos:line="27" pos:column="33">"reset"<pos:position pos:line="27" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="42">color<pos:position pos:line="27" pos:column="47"/></name></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call> <operator pos:line="27" pos:column="49">&lt;<pos:position pos:line="27" pos:column="53"/></operator> <literal type="number" pos:line="27" pos:column="51">0<pos:position pos:line="27" pos:column="52"/></literal></expr>)<pos:position pos:line="27" pos:column="53"/></condition><then pos:line="27" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">die<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><literal type="string" pos:line="28" pos:column="29">"BUG: couldn't parse 'reset' as a color"<pos:position pos:line="28" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="71"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="29" pos:column="17">resetv<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">.<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">s<pos:position pos:line="29" pos:column="25"/></name></name> <operator pos:line="29" pos:column="26">=<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="28">color<pos:position pos:line="29" pos:column="33"/></name></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">append_atom<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><operator pos:line="30" pos:column="29">&amp;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="30">resetv<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="38">&amp;<pos:position pos:line="30" pos:column="43"/></operator><name pos:line="30" pos:column="39">state<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name><name pos:line="32" pos:column="13">state<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">.<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="19">stack<pos:position pos:line="32" pos:column="24"/></name><operator pos:line="32" pos:column="24">-&gt;<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="26">prev<pos:position pos:line="32" pos:column="30"/></name></name></expr>)<pos:position pos:line="32" pos:column="31"/></condition><then pos:line="32" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="17">die<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><call><name pos:line="33" pos:column="21">_<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><literal type="string" pos:line="33" pos:column="23">"format: %%(end) atom missing"<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="56"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="34" pos:column="9">final_buf<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <operator pos:line="34" pos:column="21">&amp;<pos:position pos:line="34" pos:column="26"/></operator><name><name pos:line="34" pos:column="22">state<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">.<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="28">stack<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">-&gt;<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="35">output<pos:position pos:line="34" pos:column="41"/></name></name></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">fwrite<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name><name pos:line="35" pos:column="16">final_buf<pos:position pos:line="35" pos:column="25"/></name><operator pos:line="35" pos:column="25">-&gt;<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="27">buf<pos:position pos:line="35" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="32">1<pos:position pos:line="35" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="35">final_buf<pos:position pos:line="35" pos:column="44"/></name><operator pos:line="35" pos:column="44">-&gt;<pos:position pos:line="35" pos:column="49"/></operator><name pos:line="35" pos:column="46">len<pos:position pos:line="35" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="51">stdout<pos:position pos:line="35" pos:column="57"/></name></expr></argument>)<pos:position pos:line="35" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">pop_stack_element<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><operator pos:line="36" pos:column="27">&amp;<pos:position pos:line="36" pos:column="32"/></operator><name><name pos:line="36" pos:column="28">state<pos:position pos:line="36" pos:column="33"/></name><operator pos:line="36" pos:column="33">.<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="34">stack<pos:position pos:line="36" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">putchar<pos:position pos:line="37" pos:column="16"/></name><argument_list pos:line="37" pos:column="16">(<argument><expr><literal type="char" pos:line="37" pos:column="17">'\n'<pos:position pos:line="37" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="23"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
