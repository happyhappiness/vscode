<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_179.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">prepare_packed_git_one<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">objdir<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">local<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/* Ensure that this buffer is large enough so that we can
	   append "/pack/" without clobbering the stack even if
	   strlen(objdir) were PATH_MAX.  */</comment>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">path<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><name pos:line="6" pos:column="19">PATH_MAX<pos:position pos:line="6" pos:column="27"/></name> <operator pos:line="6" pos:column="28">+<pos:position pos:line="6" pos:column="29"/></operator> <literal type="number" pos:line="6" pos:column="30">1<pos:position pos:line="6" pos:column="31"/></literal> <operator pos:line="6" pos:column="32">+<pos:position pos:line="6" pos:column="33"/></operator> <literal type="number" pos:line="6" pos:column="34">4<pos:position pos:line="6" pos:column="35"/></literal> <operator pos:line="6" pos:column="36">+<pos:position pos:line="6" pos:column="37"/></operator> <literal type="number" pos:line="6" pos:column="38">1<pos:position pos:line="6" pos:column="39"/></literal> <operator pos:line="6" pos:column="40">+<pos:position pos:line="6" pos:column="41"/></operator> <literal type="number" pos:line="6" pos:column="42">1<pos:position pos:line="6" pos:column="43"/></literal></expr>]<pos:position pos:line="6" pos:column="44"/></index></name></decl>;<pos:position pos:line="6" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">len<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">DIR<pos:position pos:line="8" pos:column="12"/></name> <modifier pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></modifier></type><name pos:line="8" pos:column="14">dir<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">dirent<pos:position pos:line="9" pos:column="22"/></name></name> <modifier pos:line="9" pos:column="23">*<pos:position pos:line="9" pos:column="24"/></modifier></type><name pos:line="9" pos:column="24">de<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">string_list<pos:position pos:line="10" pos:column="27"/></name></name></type> <name pos:line="10" pos:column="28">garbage<pos:position pos:line="10" pos:column="35"/></name> <init pos:line="10" pos:column="36">= <expr><name pos:line="10" pos:column="38">STRING_LIST_INIT_DUP<pos:position pos:line="10" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="59"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">sprintf<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name pos:line="12" pos:column="17">path<pos:position pos:line="12" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="23">"%s/pack"<pos:position pos:line="12" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="34">objdir<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="13" pos:column="9">len<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">strlen<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">path<pos:position pos:line="13" pos:column="26"/></name></expr></argument>)<pos:position pos:line="13" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="14" pos:column="9">dir<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <call><name pos:line="14" pos:column="15">opendir<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">path<pos:position pos:line="14" pos:column="27"/></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">dir<pos:position pos:line="15" pos:column="17"/></name></expr>)<pos:position pos:line="15" pos:column="18"/></condition><then pos:line="15" pos:column="18"> <block pos:line="15" pos:column="19">{
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">errno<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">!=<pos:position pos:line="16" pos:column="29"/></operator> <name pos:line="16" pos:column="30">ENOENT<pos:position pos:line="16" pos:column="36"/></name></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="25">error<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><literal type="string" pos:line="17" pos:column="31">"unable to open object pack directory: %s: %s"<pos:position pos:line="17" pos:column="77"/></literal></expr></argument>,
			      <argument><expr><name pos:line="18" pos:column="31">path<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="37">strerror<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">(<argument><expr><name pos:line="18" pos:column="46">errno<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="54"/></expr_stmt></block></then></if>
		<return pos:line="19" pos:column="17">return;<pos:position pos:line="19" pos:column="24"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">path<pos:position pos:line="21" pos:column="13"/></name><index pos:line="21" pos:column="13">[<expr><name pos:line="21" pos:column="14">len<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">++<pos:position pos:line="21" pos:column="19"/></operator></expr>]<pos:position pos:line="21" pos:column="20"/></index></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <literal type="char" pos:line="21" pos:column="23">'/'<pos:position pos:line="21" pos:column="26"/></literal></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
	<while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">de<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <call><name pos:line="22" pos:column="22">readdir<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">dir<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call><operator pos:line="22" pos:column="34">)<pos:position pos:line="22" pos:column="35"/></operator> <operator pos:line="22" pos:column="36">!=<pos:position pos:line="22" pos:column="38"/></operator> <name pos:line="22" pos:column="39">NULL<pos:position pos:line="22" pos:column="43"/></name></expr>)<pos:position pos:line="22" pos:column="44"/></condition> <block pos:line="22" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">int<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">namelen<pos:position pos:line="23" pos:column="28"/></name> <init pos:line="23" pos:column="29">= <expr><call><name pos:line="23" pos:column="31">strlen<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><name><name pos:line="23" pos:column="38">de<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">-&gt;<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="42">d_name<pos:position pos:line="23" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="50"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="24" pos:column="17">struct<pos:position pos:line="24" pos:column="23"/></name> <name pos:line="24" pos:column="24">packed_git<pos:position pos:line="24" pos:column="34"/></name></name> <modifier pos:line="24" pos:column="35">*<pos:position pos:line="24" pos:column="36"/></modifier></type><name pos:line="24" pos:column="36">p<pos:position pos:line="24" pos:column="37"/></name></decl>;<pos:position pos:line="24" pos:column="38"/></decl_stmt>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">len<pos:position pos:line="26" pos:column="24"/></name> <operator pos:line="26" pos:column="25">+<pos:position pos:line="26" pos:column="26"/></operator> <name pos:line="26" pos:column="27">namelen<pos:position pos:line="26" pos:column="34"/></name> <operator pos:line="26" pos:column="35">+<pos:position pos:line="26" pos:column="36"/></operator> <literal type="number" pos:line="26" pos:column="37">1<pos:position pos:line="26" pos:column="38"/></literal> <operator pos:line="26" pos:column="39">&gt;<pos:position pos:line="26" pos:column="43"/></operator> <sizeof pos:line="26" pos:column="41">sizeof<argument_list pos:line="26" pos:column="47">(<argument><expr><name pos:line="26" pos:column="48">path<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></sizeof></expr>)<pos:position pos:line="26" pos:column="54"/></condition><then pos:line="26" pos:column="54"> <block pos:line="26" pos:column="55">{
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><name pos:line="27" pos:column="29">report_garbage<pos:position pos:line="27" pos:column="43"/></name></expr>)<pos:position pos:line="27" pos:column="44"/></condition><then pos:line="27" pos:column="44"> <block pos:line="27" pos:column="45">{
				<decl_stmt><decl><type><name><name pos:line="28" pos:column="33">struct<pos:position pos:line="28" pos:column="39"/></name> <name pos:line="28" pos:column="40">strbuf<pos:position pos:line="28" pos:column="46"/></name></name></type> <name pos:line="28" pos:column="47">sb<pos:position pos:line="28" pos:column="49"/></name> <init pos:line="28" pos:column="50">= <expr><name pos:line="28" pos:column="52">STRBUF_INIT<pos:position pos:line="28" pos:column="63"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="64"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="29" pos:column="33">strbuf_addf<pos:position pos:line="29" pos:column="44"/></name><argument_list pos:line="29" pos:column="44">(<argument><expr><operator pos:line="29" pos:column="45">&amp;<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="46">sb<pos:position pos:line="29" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="50">"%.*s/%s"<pos:position pos:line="29" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="61">len<pos:position pos:line="29" pos:column="64"/></name> <operator pos:line="29" pos:column="65">-<pos:position pos:line="29" pos:column="66"/></operator> <literal type="number" pos:line="29" pos:column="67">1<pos:position pos:line="29" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="70">path<pos:position pos:line="29" pos:column="74"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="76">de<pos:position pos:line="29" pos:column="78"/></name><operator pos:line="29" pos:column="78">-&gt;<pos:position pos:line="29" pos:column="83"/></operator><name pos:line="29" pos:column="80">d_name<pos:position pos:line="29" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="88"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="30" pos:column="33">report_garbage<pos:position pos:line="30" pos:column="47"/></name><argument_list pos:line="30" pos:column="47">(<argument><expr><literal type="string" pos:line="30" pos:column="48">"path too long"<pos:position pos:line="30" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="65">sb<pos:position pos:line="30" pos:column="67"/></name><operator pos:line="30" pos:column="67">.<pos:position pos:line="30" pos:column="68"/></operator><name pos:line="30" pos:column="68">buf<pos:position pos:line="30" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="73"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="31" pos:column="33">strbuf_release<pos:position pos:line="31" pos:column="47"/></name><argument_list pos:line="31" pos:column="47">(<argument><expr><operator pos:line="31" pos:column="48">&amp;<pos:position pos:line="31" pos:column="53"/></operator><name pos:line="31" pos:column="49">sb<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>
			}<pos:position pos:line="32" pos:column="26"/></block></then></if>
			<continue pos:line="33" pos:column="25">continue;<pos:position pos:line="33" pos:column="34"/></continue>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>

		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><call><name pos:line="36" pos:column="21">is_dot_or_dotdot<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><name><name pos:line="36" pos:column="38">de<pos:position pos:line="36" pos:column="40"/></name><operator pos:line="36" pos:column="40">-&gt;<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="42">d_name<pos:position pos:line="36" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="50"/></condition><then pos:line="36" pos:column="50">
			<block type="pseudo"><continue pos:line="37" pos:column="25">continue;<pos:position pos:line="37" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="39" pos:column="17">strcpy<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><name pos:line="39" pos:column="24">path<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">+<pos:position pos:line="39" pos:column="30"/></operator> <name pos:line="39" pos:column="31">len<pos:position pos:line="39" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="36">de<pos:position pos:line="39" pos:column="38"/></name><operator pos:line="39" pos:column="38">-&gt;<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="40">d_name<pos:position pos:line="39" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="48"/></expr_stmt>

		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><call><name pos:line="41" pos:column="21">has_extension<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">(<argument><expr><name><name pos:line="41" pos:column="35">de<pos:position pos:line="41" pos:column="37"/></name><operator pos:line="41" pos:column="37">-&gt;<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="39">d_name<pos:position pos:line="41" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="47">".idx"<pos:position pos:line="41" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="55"/></condition><then pos:line="41" pos:column="55"> <block pos:line="41" pos:column="56">{
			<comment type="block" pos:line="42" pos:column="25">/* Don't reopen a pack we already have. */</comment>
			<for pos:line="43" pos:column="25">for <control pos:line="43" pos:column="29">(<init><expr><name pos:line="43" pos:column="30">p<pos:position pos:line="43" pos:column="31"/></name> <operator pos:line="43" pos:column="32">=<pos:position pos:line="43" pos:column="33"/></operator> <name pos:line="43" pos:column="34">packed_git<pos:position pos:line="43" pos:column="44"/></name></expr>;<pos:position pos:line="43" pos:column="45"/></init> <condition><expr><name pos:line="43" pos:column="46">p<pos:position pos:line="43" pos:column="47"/></name></expr>;<pos:position pos:line="43" pos:column="48"/></condition> <incr><expr><name pos:line="43" pos:column="49">p<pos:position pos:line="43" pos:column="50"/></name> <operator pos:line="43" pos:column="51">=<pos:position pos:line="43" pos:column="52"/></operator> <name><name pos:line="43" pos:column="53">p<pos:position pos:line="43" pos:column="54"/></name><operator pos:line="43" pos:column="54">-&gt;<pos:position pos:line="43" pos:column="59"/></operator><name pos:line="43" pos:column="56">next<pos:position pos:line="43" pos:column="60"/></name></name></expr></incr>)<pos:position pos:line="43" pos:column="61"/></control> <block pos:line="43" pos:column="62">{
				<if pos:line="44" pos:column="33">if <condition pos:line="44" pos:column="36">(<expr><operator pos:line="44" pos:column="37">!<pos:position pos:line="44" pos:column="38"/></operator><call><name pos:line="44" pos:column="38">memcmp<pos:position pos:line="44" pos:column="44"/></name><argument_list pos:line="44" pos:column="44">(<argument><expr><name pos:line="44" pos:column="45">path<pos:position pos:line="44" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="51">p<pos:position pos:line="44" pos:column="52"/></name><operator pos:line="44" pos:column="52">-&gt;<pos:position pos:line="44" pos:column="57"/></operator><name pos:line="44" pos:column="54">pack_name<pos:position pos:line="44" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="65">len<pos:position pos:line="44" pos:column="68"/></name> <operator pos:line="44" pos:column="69">+<pos:position pos:line="44" pos:column="70"/></operator> <name pos:line="44" pos:column="71">namelen<pos:position pos:line="44" pos:column="78"/></name> <operator pos:line="44" pos:column="79">-<pos:position pos:line="44" pos:column="80"/></operator> <literal type="number" pos:line="44" pos:column="81">4<pos:position pos:line="44" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="83"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="84"/></condition><then pos:line="44" pos:column="84">
					<block type="pseudo"><break pos:line="45" pos:column="41">break;<pos:position pos:line="45" pos:column="47"/></break></block></then></if>
			}<pos:position pos:line="46" pos:column="26"/></block></for>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><name pos:line="47" pos:column="29">p<pos:position pos:line="47" pos:column="30"/></name> <operator pos:line="47" pos:column="31">==<pos:position pos:line="47" pos:column="33"/></operator> <name pos:line="47" pos:column="34">NULL<pos:position pos:line="47" pos:column="38"/></name> <operator pos:line="47" pos:column="39">&amp;&amp;<pos:position pos:line="47" pos:column="49"/></operator>
			    <comment type="block" pos:line="48" pos:column="29">/*
			     * See if it really is a valid .idx file with
			     * corresponding .pack file that we can map.
			     */</comment>
			    <operator pos:line="52" pos:column="29">(<pos:position pos:line="52" pos:column="30"/></operator><name pos:line="52" pos:column="30">p<pos:position pos:line="52" pos:column="31"/></name> <operator pos:line="52" pos:column="32">=<pos:position pos:line="52" pos:column="33"/></operator> <call><name pos:line="52" pos:column="34">add_packed_git<pos:position pos:line="52" pos:column="48"/></name><argument_list pos:line="52" pos:column="48">(<argument><expr><name pos:line="52" pos:column="49">path<pos:position pos:line="52" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="55">len<pos:position pos:line="52" pos:column="58"/></name> <operator pos:line="52" pos:column="59">+<pos:position pos:line="52" pos:column="60"/></operator> <name pos:line="52" pos:column="61">namelen<pos:position pos:line="52" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="70">local<pos:position pos:line="52" pos:column="75"/></name></expr></argument>)<pos:position pos:line="52" pos:column="76"/></argument_list></call><operator pos:line="52" pos:column="76">)<pos:position pos:line="52" pos:column="77"/></operator> <operator pos:line="52" pos:column="78">!=<pos:position pos:line="52" pos:column="80"/></operator> <name pos:line="52" pos:column="81">NULL<pos:position pos:line="52" pos:column="85"/></name></expr>)<pos:position pos:line="52" pos:column="86"/></condition><then pos:line="52" pos:column="86">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="33">install_packed_git<pos:position pos:line="53" pos:column="51"/></name><argument_list pos:line="53" pos:column="51">(<argument><expr><name pos:line="53" pos:column="52">p<pos:position pos:line="53" pos:column="53"/></name></expr></argument>)<pos:position pos:line="53" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="55"/></expr_stmt></block></then></if>
		}<pos:position pos:line="54" pos:column="18"/></block></then></if>

		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><operator pos:line="56" pos:column="21">!<pos:position pos:line="56" pos:column="22"/></operator><name pos:line="56" pos:column="22">report_garbage<pos:position pos:line="56" pos:column="36"/></name></expr>)<pos:position pos:line="56" pos:column="37"/></condition><then pos:line="56" pos:column="37">
			<block type="pseudo"><continue pos:line="57" pos:column="25">continue;<pos:position pos:line="57" pos:column="34"/></continue></block></then></if>

		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><call><name pos:line="59" pos:column="21">has_extension<pos:position pos:line="59" pos:column="34"/></name><argument_list pos:line="59" pos:column="34">(<argument><expr><name><name pos:line="59" pos:column="35">de<pos:position pos:line="59" pos:column="37"/></name><operator pos:line="59" pos:column="37">-&gt;<pos:position pos:line="59" pos:column="42"/></operator><name pos:line="59" pos:column="39">d_name<pos:position pos:line="59" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="47">".idx"<pos:position pos:line="59" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call> <operator pos:line="59" pos:column="55">||<pos:position pos:line="59" pos:column="57"/></operator>
		    <call><name pos:line="60" pos:column="21">has_extension<pos:position pos:line="60" pos:column="34"/></name><argument_list pos:line="60" pos:column="34">(<argument><expr><name><name pos:line="60" pos:column="35">de<pos:position pos:line="60" pos:column="37"/></name><operator pos:line="60" pos:column="37">-&gt;<pos:position pos:line="60" pos:column="42"/></operator><name pos:line="60" pos:column="39">d_name<pos:position pos:line="60" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="47">".pack"<pos:position pos:line="60" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="55"/></argument_list></call> <operator pos:line="60" pos:column="56">||<pos:position pos:line="60" pos:column="58"/></operator>
		    <call><name pos:line="61" pos:column="21">has_extension<pos:position pos:line="61" pos:column="34"/></name><argument_list pos:line="61" pos:column="34">(<argument><expr><name><name pos:line="61" pos:column="35">de<pos:position pos:line="61" pos:column="37"/></name><operator pos:line="61" pos:column="37">-&gt;<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="39">d_name<pos:position pos:line="61" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="47">".bitmap"<pos:position pos:line="61" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="57"/></argument_list></call> <operator pos:line="61" pos:column="58">||<pos:position pos:line="61" pos:column="60"/></operator>
		    <call><name pos:line="62" pos:column="21">has_extension<pos:position pos:line="62" pos:column="34"/></name><argument_list pos:line="62" pos:column="34">(<argument><expr><name><name pos:line="62" pos:column="35">de<pos:position pos:line="62" pos:column="37"/></name><operator pos:line="62" pos:column="37">-&gt;<pos:position pos:line="62" pos:column="42"/></operator><name pos:line="62" pos:column="39">d_name<pos:position pos:line="62" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="47">".keep"<pos:position pos:line="62" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="56"/></condition><then pos:line="62" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="25">string_list_append<pos:position pos:line="63" pos:column="43"/></name><argument_list pos:line="63" pos:column="43">(<argument><expr><operator pos:line="63" pos:column="44">&amp;<pos:position pos:line="63" pos:column="49"/></operator><name pos:line="63" pos:column="45">garbage<pos:position pos:line="63" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="54">path<pos:position pos:line="63" pos:column="58"/></name></expr></argument>)<pos:position pos:line="63" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="60"/></expr_stmt></block></then>
		<else pos:line="64" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="25">report_garbage<pos:position pos:line="65" pos:column="39"/></name><argument_list pos:line="65" pos:column="39">(<argument><expr><literal type="string" pos:line="65" pos:column="40">"garbage found"<pos:position pos:line="65" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="57">path<pos:position pos:line="65" pos:column="61"/></name></expr></argument>)<pos:position pos:line="65" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="63"/></expr_stmt></block></else></if>
	}<pos:position pos:line="66" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="67" pos:column="9">closedir<pos:position pos:line="67" pos:column="17"/></name><argument_list pos:line="67" pos:column="17">(<argument><expr><name pos:line="67" pos:column="18">dir<pos:position pos:line="67" pos:column="21"/></name></expr></argument>)<pos:position pos:line="67" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">report_pack_garbage<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><operator pos:line="68" pos:column="29">&amp;<pos:position pos:line="68" pos:column="34"/></operator><name pos:line="68" pos:column="30">garbage<pos:position pos:line="68" pos:column="37"/></name></expr></argument>)<pos:position pos:line="68" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="69" pos:column="9">string_list_clear<pos:position pos:line="69" pos:column="26"/></name><argument_list pos:line="69" pos:column="26">(<argument><expr><operator pos:line="69" pos:column="27">&amp;<pos:position pos:line="69" pos:column="32"/></operator><name pos:line="69" pos:column="28">garbage<pos:position pos:line="69" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="37">0<pos:position pos:line="69" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="40"/></expr_stmt>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
