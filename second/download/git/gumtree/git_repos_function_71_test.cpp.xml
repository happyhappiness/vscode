<function xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position"><specifier pos:line="1398" pos:column="1">static<pos:position pos:line="1398" pos:column="7"/></specifier> <type><name pos:line="1398" pos:column="8">int<pos:position pos:line="1398" pos:column="11"/></name></type> <name pos:line="1398" pos:column="12">find_invalid_utf8<pos:position pos:line="1398" pos:column="29"/></name><parameter_list pos:line="1398" pos:column="29">(<parameter><decl><type><specifier pos:line="1398" pos:column="30">const<pos:position pos:line="1398" pos:column="35"/></specifier> <name pos:line="1398" pos:column="36">char<pos:position pos:line="1398" pos:column="40"/></name> <modifier pos:line="1398" pos:column="41">*<pos:position pos:line="1398" pos:column="42"/></modifier></type><name pos:line="1398" pos:column="42">buf<pos:position pos:line="1398" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1398" pos:column="47">int<pos:position pos:line="1398" pos:column="50"/></name></type> <name pos:line="1398" pos:column="51">len<pos:position pos:line="1398" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1398" pos:column="55"/></parameter_list>
<block pos:line="1399" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1400" pos:column="9">int<pos:position pos:line="1400" pos:column="12"/></name></type> <name pos:line="1400" pos:column="13">offset<pos:position pos:line="1400" pos:column="19"/></name> <init pos:line="1400" pos:column="20">= <expr><literal type="number" pos:line="1400" pos:column="22">0<pos:position pos:line="1400" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="1400" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="1401" pos:column="9">static<pos:position pos:line="1401" pos:column="15"/></specifier> <type><specifier pos:line="1401" pos:column="16">const<pos:position pos:line="1401" pos:column="21"/></specifier> <name pos:line="1401" pos:column="22">unsigned<pos:position pos:line="1401" pos:column="30"/></name> <name pos:line="1401" pos:column="31">int<pos:position pos:line="1401" pos:column="34"/></name></type> <name><name pos:line="1401" pos:column="35">max_codepoint<pos:position pos:line="1401" pos:column="48"/></name><index pos:line="1401" pos:column="48">[]<pos:position pos:line="1401" pos:column="50"/></index></name> <init pos:line="1401" pos:column="51">= <expr><block pos:line="1401" pos:column="53">{
		<expr><literal type="number" pos:line="1402" pos:column="17">0x7f<pos:position pos:line="1402" pos:column="21"/></literal></expr>, <expr><literal type="number" pos:line="1402" pos:column="23">0x7ff<pos:position pos:line="1402" pos:column="28"/></literal></expr>, <expr><literal type="number" pos:line="1402" pos:column="30">0xffff<pos:position pos:line="1402" pos:column="36"/></literal></expr>, <expr><literal type="number" pos:line="1402" pos:column="38">0x10ffff<pos:position pos:line="1402" pos:column="46"/></literal></expr>
	}<pos:position pos:line="1403" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="1403" pos:column="11"/></decl_stmt>

	<while pos:line="1405" pos:column="9">while <condition pos:line="1405" pos:column="15">(<expr><name pos:line="1405" pos:column="16">len<pos:position pos:line="1405" pos:column="19"/></name></expr>)<pos:position pos:line="1405" pos:column="20"/></condition> <block pos:line="1405" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="1406" pos:column="17">unsigned<pos:position pos:line="1406" pos:column="25"/></name> <name pos:line="1406" pos:column="26">char<pos:position pos:line="1406" pos:column="30"/></name></type> <name pos:line="1406" pos:column="31">c<pos:position pos:line="1406" pos:column="32"/></name> <init pos:line="1406" pos:column="33">= <expr><operator pos:line="1406" pos:column="35">*<pos:position pos:line="1406" pos:column="36"/></operator><name pos:line="1406" pos:column="36">buf<pos:position pos:line="1406" pos:column="39"/></name><operator pos:line="1406" pos:column="39">++<pos:position pos:line="1406" pos:column="41"/></operator></expr></init></decl>;<pos:position pos:line="1406" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="1407" pos:column="17">int<pos:position pos:line="1407" pos:column="20"/></name></type> <name pos:line="1407" pos:column="21">bytes<pos:position pos:line="1407" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="1407" pos:column="28">bad_offset<pos:position pos:line="1407" pos:column="38"/></name></decl>;<pos:position pos:line="1407" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="1408" pos:column="17">unsigned<pos:position pos:line="1408" pos:column="25"/></name> <name pos:line="1408" pos:column="26">int<pos:position pos:line="1408" pos:column="29"/></name></type> <name pos:line="1408" pos:column="30">codepoint<pos:position pos:line="1408" pos:column="39"/></name></decl>;<pos:position pos:line="1408" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="1409" pos:column="17">unsigned<pos:position pos:line="1409" pos:column="25"/></name> <name pos:line="1409" pos:column="26">int<pos:position pos:line="1409" pos:column="29"/></name></type> <name pos:line="1409" pos:column="30">min_val<pos:position pos:line="1409" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="1409" pos:column="39">max_val<pos:position pos:line="1409" pos:column="46"/></name></decl>;<pos:position pos:line="1409" pos:column="47"/></decl_stmt>

		<expr_stmt><expr><name pos:line="1411" pos:column="17">len<pos:position pos:line="1411" pos:column="20"/></name><operator pos:line="1411" pos:column="20">--<pos:position pos:line="1411" pos:column="22"/></operator></expr>;<pos:position pos:line="1411" pos:column="23"/></expr_stmt>
		<expr_stmt><expr><name pos:line="1412" pos:column="17">offset<pos:position pos:line="1412" pos:column="23"/></name><operator pos:line="1412" pos:column="23">++<pos:position pos:line="1412" pos:column="25"/></operator></expr>;<pos:position pos:line="1412" pos:column="26"/></expr_stmt>

		<comment type="block" pos:line="1414" pos:column="17">/* Simple US-ASCII? No worries. */</comment>
		<if pos:line="1415" pos:column="17">if <condition pos:line="1415" pos:column="20">(<expr><name pos:line="1415" pos:column="21">c<pos:position pos:line="1415" pos:column="22"/></name> <operator pos:line="1415" pos:column="23">&lt;<pos:position pos:line="1415" pos:column="27"/></operator> <literal type="number" pos:line="1415" pos:column="25">0x80<pos:position pos:line="1415" pos:column="29"/></literal></expr>)<pos:position pos:line="1415" pos:column="30"/></condition><then pos:line="1415" pos:column="30">
			<block type="pseudo"><continue pos:line="1416" pos:column="25">continue;<pos:position pos:line="1416" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="1418" pos:column="17">bad_offset<pos:position pos:line="1418" pos:column="27"/></name> <operator pos:line="1418" pos:column="28">=<pos:position pos:line="1418" pos:column="29"/></operator> <name pos:line="1418" pos:column="30">offset<pos:position pos:line="1418" pos:column="36"/></name><operator pos:line="1418" pos:column="36">-<pos:position pos:line="1418" pos:column="37"/></operator><literal type="number" pos:line="1418" pos:column="37">1<pos:position pos:line="1418" pos:column="38"/></literal></expr>;<pos:position pos:line="1418" pos:column="39"/></expr_stmt>

		<comment type="block" pos:line="1420" pos:column="17">/*
		 * Count how many more high bits set: that's how
		 * many more bytes this sequence should have.
		 */</comment>
		<expr_stmt><expr><name pos:line="1424" pos:column="17">bytes<pos:position pos:line="1424" pos:column="22"/></name> <operator pos:line="1424" pos:column="23">=<pos:position pos:line="1424" pos:column="24"/></operator> <literal type="number" pos:line="1424" pos:column="25">0<pos:position pos:line="1424" pos:column="26"/></literal></expr>;<pos:position pos:line="1424" pos:column="27"/></expr_stmt>
		<while pos:line="1425" pos:column="17">while <condition pos:line="1425" pos:column="23">(<expr><name pos:line="1425" pos:column="24">c<pos:position pos:line="1425" pos:column="25"/></name> <operator pos:line="1425" pos:column="26">&amp;<pos:position pos:line="1425" pos:column="31"/></operator> <literal type="number" pos:line="1425" pos:column="28">0x40<pos:position pos:line="1425" pos:column="32"/></literal></expr>)<pos:position pos:line="1425" pos:column="33"/></condition> <block pos:line="1425" pos:column="34">{
			<expr_stmt><expr><name pos:line="1426" pos:column="25">c<pos:position pos:line="1426" pos:column="26"/></name> <operator pos:line="1426" pos:column="27">&lt;&lt;=<pos:position pos:line="1426" pos:column="36"/></operator> <literal type="number" pos:line="1426" pos:column="31">1<pos:position pos:line="1426" pos:column="32"/></literal></expr>;<pos:position pos:line="1426" pos:column="33"/></expr_stmt>
			<expr_stmt><expr><name pos:line="1427" pos:column="25">bytes<pos:position pos:line="1427" pos:column="30"/></name><operator pos:line="1427" pos:column="30">++<pos:position pos:line="1427" pos:column="32"/></operator></expr>;<pos:position pos:line="1427" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="1428" pos:column="18"/></block></while>

		<comment type="block" pos:line="1430" pos:column="17">/*
		 * Must be between 1 and 3 more bytes.  Longer sequences result in
		 * codepoints beyond U+10FFFF, which are guaranteed never to exist.
		 */</comment>
		<if pos:line="1434" pos:column="17">if <condition pos:line="1434" pos:column="20">(<expr><name pos:line="1434" pos:column="21">bytes<pos:position pos:line="1434" pos:column="26"/></name> <operator pos:line="1434" pos:column="27">&lt;<pos:position pos:line="1434" pos:column="31"/></operator> <literal type="number" pos:line="1434" pos:column="29">1<pos:position pos:line="1434" pos:column="30"/></literal> <operator pos:line="1434" pos:column="31">||<pos:position pos:line="1434" pos:column="33"/></operator> <literal type="number" pos:line="1434" pos:column="34">3<pos:position pos:line="1434" pos:column="35"/></literal> <operator pos:line="1434" pos:column="36">&lt;<pos:position pos:line="1434" pos:column="40"/></operator> <name pos:line="1434" pos:column="38">bytes<pos:position pos:line="1434" pos:column="43"/></name></expr>)<pos:position pos:line="1434" pos:column="44"/></condition><then pos:line="1434" pos:column="44">
			<block type="pseudo"><return pos:line="1435" pos:column="25">return <expr><name pos:line="1435" pos:column="32">bad_offset<pos:position pos:line="1435" pos:column="42"/></name></expr>;<pos:position pos:line="1435" pos:column="43"/></return></block></then></if>

		<comment type="block" pos:line="1437" pos:column="17">/* Do we *have* that many bytes? */</comment>
		<if pos:line="1438" pos:column="17">if <condition pos:line="1438" pos:column="20">(<expr><name pos:line="1438" pos:column="21">len<pos:position pos:line="1438" pos:column="24"/></name> <operator pos:line="1438" pos:column="25">&lt;<pos:position pos:line="1438" pos:column="29"/></operator> <name pos:line="1438" pos:column="27">bytes<pos:position pos:line="1438" pos:column="32"/></name></expr>)<pos:position pos:line="1438" pos:column="33"/></condition><then pos:line="1438" pos:column="33">
			<block type="pseudo"><return pos:line="1439" pos:column="25">return <expr><name pos:line="1439" pos:column="32">bad_offset<pos:position pos:line="1439" pos:column="42"/></name></expr>;<pos:position pos:line="1439" pos:column="43"/></return></block></then></if>

		<comment type="block" pos:line="1441" pos:column="17">/*
		 * Place the encoded bits at the bottom of the value and compute the
		 * valid range.
		 */</comment>
		<expr_stmt><expr><name pos:line="1445" pos:column="17">codepoint<pos:position pos:line="1445" pos:column="26"/></name> <operator pos:line="1445" pos:column="27">=<pos:position pos:line="1445" pos:column="28"/></operator> <operator pos:line="1445" pos:column="29">(<pos:position pos:line="1445" pos:column="30"/></operator><name pos:line="1445" pos:column="30">c<pos:position pos:line="1445" pos:column="31"/></name> <operator pos:line="1445" pos:column="32">&amp;<pos:position pos:line="1445" pos:column="37"/></operator> <literal type="number" pos:line="1445" pos:column="34">0x7f<pos:position pos:line="1445" pos:column="38"/></literal><operator pos:line="1445" pos:column="38">)<pos:position pos:line="1445" pos:column="39"/></operator> <operator pos:line="1445" pos:column="40">&gt;&gt;<pos:position pos:line="1445" pos:column="45"/></operator> <name pos:line="1445" pos:column="43">bytes<pos:position pos:line="1445" pos:column="48"/></name></expr>;<pos:position pos:line="1445" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="1446" pos:column="17">min_val<pos:position pos:line="1446" pos:column="24"/></name> <operator pos:line="1446" pos:column="25">=<pos:position pos:line="1446" pos:column="26"/></operator> <name><name pos:line="1446" pos:column="27">max_codepoint<pos:position pos:line="1446" pos:column="40"/></name><index pos:line="1446" pos:column="40">[<expr><name pos:line="1446" pos:column="41">bytes<pos:position pos:line="1446" pos:column="46"/></name><operator pos:line="1446" pos:column="46">-<pos:position pos:line="1446" pos:column="47"/></operator><literal type="number" pos:line="1446" pos:column="47">1<pos:position pos:line="1446" pos:column="48"/></literal></expr>]<pos:position pos:line="1446" pos:column="49"/></index></name> <operator pos:line="1446" pos:column="50">+<pos:position pos:line="1446" pos:column="51"/></operator> <literal type="number" pos:line="1446" pos:column="52">1<pos:position pos:line="1446" pos:column="53"/></literal></expr>;<pos:position pos:line="1446" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name pos:line="1447" pos:column="17">max_val<pos:position pos:line="1447" pos:column="24"/></name> <operator pos:line="1447" pos:column="25">=<pos:position pos:line="1447" pos:column="26"/></operator> <name><name pos:line="1447" pos:column="27">max_codepoint<pos:position pos:line="1447" pos:column="40"/></name><index pos:line="1447" pos:column="40">[<expr><name pos:line="1447" pos:column="41">bytes<pos:position pos:line="1447" pos:column="46"/></name></expr>]<pos:position pos:line="1447" pos:column="47"/></index></name></expr>;<pos:position pos:line="1447" pos:column="48"/></expr_stmt>

		<expr_stmt><expr><name pos:line="1449" pos:column="17">offset<pos:position pos:line="1449" pos:column="23"/></name> <operator pos:line="1449" pos:column="24">+=<pos:position pos:line="1449" pos:column="26"/></operator> <name pos:line="1449" pos:column="27">bytes<pos:position pos:line="1449" pos:column="32"/></name></expr>;<pos:position pos:line="1449" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="1450" pos:column="17">len<pos:position pos:line="1450" pos:column="20"/></name> <operator pos:line="1450" pos:column="21">-=<pos:position pos:line="1450" pos:column="23"/></operator> <name pos:line="1450" pos:column="24">bytes<pos:position pos:line="1450" pos:column="29"/></name></expr>;<pos:position pos:line="1450" pos:column="30"/></expr_stmt>

		<comment type="block" pos:line="1452" pos:column="17">/* And verify that they are good continuation bytes */</comment>
		<do pos:line="1453" pos:column="17">do <block pos:line="1453" pos:column="20">{
			<expr_stmt><expr><name pos:line="1454" pos:column="25">codepoint<pos:position pos:line="1454" pos:column="34"/></name> <operator pos:line="1454" pos:column="35">&lt;&lt;=<pos:position pos:line="1454" pos:column="44"/></operator> <literal type="number" pos:line="1454" pos:column="39">6<pos:position pos:line="1454" pos:column="40"/></literal></expr>;<pos:position pos:line="1454" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="1455" pos:column="25">codepoint<pos:position pos:line="1455" pos:column="34"/></name> <operator pos:line="1455" pos:column="35">|=<pos:position pos:line="1455" pos:column="37"/></operator> <operator pos:line="1455" pos:column="38">*<pos:position pos:line="1455" pos:column="39"/></operator><name pos:line="1455" pos:column="39">buf<pos:position pos:line="1455" pos:column="42"/></name> <operator pos:line="1455" pos:column="43">&amp;<pos:position pos:line="1455" pos:column="48"/></operator> <literal type="number" pos:line="1455" pos:column="45">0x3f<pos:position pos:line="1455" pos:column="49"/></literal></expr>;<pos:position pos:line="1455" pos:column="50"/></expr_stmt>
			<if pos:line="1456" pos:column="25">if <condition pos:line="1456" pos:column="28">(<expr><operator pos:line="1456" pos:column="29">(<pos:position pos:line="1456" pos:column="30"/></operator><operator pos:line="1456" pos:column="30">*<pos:position pos:line="1456" pos:column="31"/></operator><name pos:line="1456" pos:column="31">buf<pos:position pos:line="1456" pos:column="34"/></name><operator pos:line="1456" pos:column="34">++<pos:position pos:line="1456" pos:column="36"/></operator> <operator pos:line="1456" pos:column="37">&amp;<pos:position pos:line="1456" pos:column="42"/></operator> <literal type="number" pos:line="1456" pos:column="39">0xc0<pos:position pos:line="1456" pos:column="43"/></literal><operator pos:line="1456" pos:column="43">)<pos:position pos:line="1456" pos:column="44"/></operator> <operator pos:line="1456" pos:column="45">!=<pos:position pos:line="1456" pos:column="47"/></operator> <literal type="number" pos:line="1456" pos:column="48">0x80<pos:position pos:line="1456" pos:column="52"/></literal></expr>)<pos:position pos:line="1456" pos:column="53"/></condition><then pos:line="1456" pos:column="53">
				<block type="pseudo"><return pos:line="1457" pos:column="33">return <expr><name pos:line="1457" pos:column="40">bad_offset<pos:position pos:line="1457" pos:column="50"/></name></expr>;<pos:position pos:line="1457" pos:column="51"/></return></block></then></if>
		}<pos:position pos:line="1458" pos:column="18"/></block> while <condition pos:line="1458" pos:column="25">(<expr><operator pos:line="1458" pos:column="26">--<pos:position pos:line="1458" pos:column="28"/></operator><name pos:line="1458" pos:column="28">bytes<pos:position pos:line="1458" pos:column="33"/></name></expr>)<pos:position pos:line="1458" pos:column="34"/></condition>;<pos:position pos:line="1458" pos:column="35"/></do>

		<comment type="block" pos:line="1460" pos:column="17">/* Reject codepoints that are out of range for the sequence length. */</comment>
		<if pos:line="1461" pos:column="17">if <condition pos:line="1461" pos:column="20">(<expr><name pos:line="1461" pos:column="21">codepoint<pos:position pos:line="1461" pos:column="30"/></name> <operator pos:line="1461" pos:column="31">&lt;<pos:position pos:line="1461" pos:column="35"/></operator> <name pos:line="1461" pos:column="33">min_val<pos:position pos:line="1461" pos:column="40"/></name> <operator pos:line="1461" pos:column="41">||<pos:position pos:line="1461" pos:column="43"/></operator> <name pos:line="1461" pos:column="44">codepoint<pos:position pos:line="1461" pos:column="53"/></name> <operator pos:line="1461" pos:column="54">&gt;<pos:position pos:line="1461" pos:column="58"/></operator> <name pos:line="1461" pos:column="56">max_val<pos:position pos:line="1461" pos:column="63"/></name></expr>)<pos:position pos:line="1461" pos:column="64"/></condition><then pos:line="1461" pos:column="64">
			<block type="pseudo"><return pos:line="1462" pos:column="25">return <expr><name pos:line="1462" pos:column="32">bad_offset<pos:position pos:line="1462" pos:column="42"/></name></expr>;<pos:position pos:line="1462" pos:column="43"/></return></block></then></if>
		<comment type="block" pos:line="1463" pos:column="17">/* Surrogates are only for UTF-16 and cannot be encoded in UTF-8. */</comment>
		<if pos:line="1464" pos:column="17">if <condition pos:line="1464" pos:column="20">(<expr><operator pos:line="1464" pos:column="21">(<pos:position pos:line="1464" pos:column="22"/></operator><name pos:line="1464" pos:column="22">codepoint<pos:position pos:line="1464" pos:column="31"/></name> <operator pos:line="1464" pos:column="32">&amp;<pos:position pos:line="1464" pos:column="37"/></operator> <literal type="number" pos:line="1464" pos:column="34">0x1ff800<pos:position pos:line="1464" pos:column="42"/></literal><operator pos:line="1464" pos:column="42">)<pos:position pos:line="1464" pos:column="43"/></operator> <operator pos:line="1464" pos:column="44">==<pos:position pos:line="1464" pos:column="46"/></operator> <literal type="number" pos:line="1464" pos:column="47">0xd800<pos:position pos:line="1464" pos:column="53"/></literal></expr>)<pos:position pos:line="1464" pos:column="54"/></condition><then pos:line="1464" pos:column="54">
			<block type="pseudo"><return pos:line="1465" pos:column="25">return <expr><name pos:line="1465" pos:column="32">bad_offset<pos:position pos:line="1465" pos:column="42"/></name></expr>;<pos:position pos:line="1465" pos:column="43"/></return></block></then></if>
		<comment type="block" pos:line="1466" pos:column="17">/* U+xxFFFE and U+xxFFFF are guaranteed non-characters. */</comment>
		<if pos:line="1467" pos:column="17">if <condition pos:line="1467" pos:column="20">(<expr><operator pos:line="1467" pos:column="21">(<pos:position pos:line="1467" pos:column="22"/></operator><name pos:line="1467" pos:column="22">codepoint<pos:position pos:line="1467" pos:column="31"/></name> <operator pos:line="1467" pos:column="32">&amp;<pos:position pos:line="1467" pos:column="37"/></operator> <literal type="number" pos:line="1467" pos:column="34">0xfffe<pos:position pos:line="1467" pos:column="40"/></literal><operator pos:line="1467" pos:column="40">)<pos:position pos:line="1467" pos:column="41"/></operator> <operator pos:line="1467" pos:column="42">==<pos:position pos:line="1467" pos:column="44"/></operator> <literal type="number" pos:line="1467" pos:column="45">0xfffe<pos:position pos:line="1467" pos:column="51"/></literal></expr>)<pos:position pos:line="1467" pos:column="52"/></condition><then pos:line="1467" pos:column="52">
			<block type="pseudo"><return pos:line="1468" pos:column="25">return <expr><name pos:line="1468" pos:column="32">bad_offset<pos:position pos:line="1468" pos:column="42"/></name></expr>;<pos:position pos:line="1468" pos:column="43"/></return></block></then></if>
		<comment type="block" pos:line="1469" pos:column="17">/* So are anything in the range U+FDD0..U+FDEF. */</comment>
		<if pos:line="1470" pos:column="17">if <condition pos:line="1470" pos:column="20">(<expr><name pos:line="1470" pos:column="21">codepoint<pos:position pos:line="1470" pos:column="30"/></name> <operator pos:line="1470" pos:column="31">&gt;=<pos:position pos:line="1470" pos:column="36"/></operator> <literal type="number" pos:line="1470" pos:column="34">0xfdd0<pos:position pos:line="1470" pos:column="40"/></literal> <operator pos:line="1470" pos:column="41">&amp;&amp;<pos:position pos:line="1470" pos:column="51"/></operator> <name pos:line="1470" pos:column="44">codepoint<pos:position pos:line="1470" pos:column="53"/></name> <operator pos:line="1470" pos:column="54">&lt;=<pos:position pos:line="1470" pos:column="59"/></operator> <literal type="number" pos:line="1470" pos:column="57">0xfdef<pos:position pos:line="1470" pos:column="63"/></literal></expr>)<pos:position pos:line="1470" pos:column="64"/></condition><then pos:line="1470" pos:column="64">
			<block type="pseudo"><return pos:line="1471" pos:column="25">return <expr><name pos:line="1471" pos:column="32">bad_offset<pos:position pos:line="1471" pos:column="42"/></name></expr>;<pos:position pos:line="1471" pos:column="43"/></return></block></then></if>
	}<pos:position pos:line="1472" pos:column="10"/></block></while>
	<return pos:line="1473" pos:column="9">return <expr><operator pos:line="1473" pos:column="16">-<pos:position pos:line="1473" pos:column="17"/></operator><literal type="number" pos:line="1473" pos:column="17">1<pos:position pos:line="1473" pos:column="18"/></literal></expr>;<pos:position pos:line="1473" pos:column="19"/></return>
}<pos:position pos:line="1474" pos:column="2"/></block></function>

