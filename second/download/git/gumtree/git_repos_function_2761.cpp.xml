<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2761.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">resolve_ref_unsafe_1<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">refname<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
					<parameter><decl><type><name pos:line="2" pos:column="41">int<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">resolve_flags<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>,
					<parameter><decl><type><name pos:line="3" pos:column="41">unsigned<pos:position pos:line="3" pos:column="49"/></name> <name pos:line="3" pos:column="50">char<pos:position pos:line="3" pos:column="54"/></name> <modifier pos:line="3" pos:column="55">*<pos:position pos:line="3" pos:column="56"/></modifier></type><name pos:line="3" pos:column="56">sha1<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>,
					<parameter><decl><type><name pos:line="4" pos:column="41">int<pos:position pos:line="4" pos:column="44"/></name> <modifier pos:line="4" pos:column="45">*<pos:position pos:line="4" pos:column="46"/></modifier></type><name pos:line="4" pos:column="46">flags<pos:position pos:line="4" pos:column="51"/></name></decl></parameter>,
					<parameter><decl><type><name><name pos:line="5" pos:column="41">struct<pos:position pos:line="5" pos:column="47"/></name> <name pos:line="5" pos:column="48">strbuf<pos:position pos:line="5" pos:column="54"/></name></name> <modifier pos:line="5" pos:column="55">*<pos:position pos:line="5" pos:column="56"/></modifier></type><name pos:line="5" pos:column="56">sb_path<pos:position pos:line="5" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="64"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">depth<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><name pos:line="7" pos:column="21">MAXDEPTH<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">ssize_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">len<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name></type> <name><name pos:line="9" pos:column="14">buffer<pos:position pos:line="9" pos:column="20"/></name><index pos:line="9" pos:column="20">[<expr><literal type="number" pos:line="9" pos:column="21">256<pos:position pos:line="9" pos:column="24"/></literal></expr>]<pos:position pos:line="9" pos:column="25"/></index></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="10" pos:column="9">static<pos:position pos:line="10" pos:column="15"/></specifier> <type><name pos:line="10" pos:column="16">char<pos:position pos:line="10" pos:column="20"/></name></type> <name><name pos:line="10" pos:column="21">refname_buffer<pos:position pos:line="10" pos:column="35"/></name><index pos:line="10" pos:column="35">[<expr><literal type="number" pos:line="10" pos:column="36">256<pos:position pos:line="10" pos:column="39"/></literal></expr>]<pos:position pos:line="10" pos:column="40"/></index></name></decl>;<pos:position pos:line="10" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">bad_name<pos:position pos:line="11" pos:column="21"/></name> <init pos:line="11" pos:column="22">= <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">flags<pos:position pos:line="13" pos:column="18"/></name></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="14" pos:column="17">*<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">flags<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <literal type="number" pos:line="14" pos:column="26">0<pos:position pos:line="14" pos:column="27"/></literal></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">check_refname_format<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><name pos:line="16" pos:column="34">refname<pos:position pos:line="16" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="43">REFNAME_ALLOW_ONELEVEL<pos:position pos:line="16" pos:column="65"/></name></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="67"/></condition><then pos:line="16" pos:column="67"> <block pos:line="16" pos:column="68">{
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">flags<pos:position pos:line="17" pos:column="26"/></name></expr>)<pos:position pos:line="17" pos:column="27"/></condition><then pos:line="17" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="25">*<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">flags<pos:position pos:line="18" pos:column="31"/></name> <operator pos:line="18" pos:column="32">|=<pos:position pos:line="18" pos:column="34"/></operator> <name pos:line="18" pos:column="35">REF_BAD_NAME<pos:position pos:line="18" pos:column="47"/></name></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt></block></then></if>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><operator pos:line="20" pos:column="22">(<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="23">resolve_flags<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">&amp;<pos:position pos:line="20" pos:column="42"/></operator> <name pos:line="20" pos:column="39">RESOLVE_REF_ALLOW_BAD_NAME<pos:position pos:line="20" pos:column="65"/></name><operator pos:line="20" pos:column="65">)<pos:position pos:line="20" pos:column="66"/></operator> <operator pos:line="20" pos:column="67">||<pos:position pos:line="20" pos:column="69"/></operator>
		    <operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><call><name pos:line="21" pos:column="22">refname_is_safe<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name pos:line="21" pos:column="38">refname<pos:position pos:line="21" pos:column="45"/></name></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="47"/></condition><then pos:line="21" pos:column="47"> <block pos:line="21" pos:column="48">{
			<expr_stmt><expr><name pos:line="22" pos:column="25">errno<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">=<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="33">EINVAL<pos:position pos:line="22" pos:column="39"/></name></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
			<return pos:line="23" pos:column="25">return <expr><name pos:line="23" pos:column="32">NULL<pos:position pos:line="23" pos:column="36"/></name></expr>;<pos:position pos:line="23" pos:column="37"/></return>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="25" pos:column="17">/*
		 * dwim_ref() uses REF_ISBROKEN to distinguish between
		 * missing refs and refs that were present but invalid,
		 * to complain about the latter to stderr.
		 *
		 * We don't know whether the ref exists, so don't set
		 * REF_ISBROKEN yet.
		 */</comment>
		<expr_stmt><expr><name pos:line="33" pos:column="17">bad_name<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">=<pos:position pos:line="33" pos:column="27"/></operator> <literal type="number" pos:line="33" pos:column="28">1<pos:position pos:line="33" pos:column="29"/></literal></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
	<for pos:line="35" pos:column="9">for <control pos:line="35" pos:column="13">(<init pos:line="35" pos:column="14">;<pos:position pos:line="35" pos:column="15"/></init><condition pos:line="35" pos:column="15">;<pos:position pos:line="35" pos:column="16"/></condition><incr/>)<pos:position pos:line="35" pos:column="17"/></control> <block pos:line="35" pos:column="18">{
		<decl_stmt><decl><type><specifier pos:line="36" pos:column="17">const<pos:position pos:line="36" pos:column="22"/></specifier> <name pos:line="36" pos:column="23">char<pos:position pos:line="36" pos:column="27"/></name> <modifier pos:line="36" pos:column="28">*<pos:position pos:line="36" pos:column="29"/></modifier></type><name pos:line="36" pos:column="29">path<pos:position pos:line="36" pos:column="33"/></name></decl>;<pos:position pos:line="36" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="37" pos:column="17">struct<pos:position pos:line="37" pos:column="23"/></name> <name pos:line="37" pos:column="24">stat<pos:position pos:line="37" pos:column="28"/></name></name></type> <name pos:line="37" pos:column="29">st<pos:position pos:line="37" pos:column="31"/></name></decl>;<pos:position pos:line="37" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">char<pos:position pos:line="38" pos:column="21"/></name> <modifier pos:line="38" pos:column="22">*<pos:position pos:line="38" pos:column="23"/></modifier></type><name pos:line="38" pos:column="23">buf<pos:position pos:line="38" pos:column="26"/></name></decl>;<pos:position pos:line="38" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">int<pos:position pos:line="39" pos:column="20"/></name></type> <name pos:line="39" pos:column="21">fd<pos:position pos:line="39" pos:column="23"/></name></decl>;<pos:position pos:line="39" pos:column="24"/></decl_stmt>

		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><operator pos:line="41" pos:column="21">--<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">depth<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">&lt;<pos:position pos:line="41" pos:column="33"/></operator> <literal type="number" pos:line="41" pos:column="31">0<pos:position pos:line="41" pos:column="32"/></literal></expr>)<pos:position pos:line="41" pos:column="33"/></condition><then pos:line="41" pos:column="33"> <block pos:line="41" pos:column="34">{
			<expr_stmt><expr><name pos:line="42" pos:column="25">errno<pos:position pos:line="42" pos:column="30"/></name> <operator pos:line="42" pos:column="31">=<pos:position pos:line="42" pos:column="32"/></operator> <name pos:line="42" pos:column="33">ELOOP<pos:position pos:line="42" pos:column="38"/></name></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>
			<return pos:line="43" pos:column="25">return <expr><name pos:line="43" pos:column="32">NULL<pos:position pos:line="43" pos:column="36"/></name></expr>;<pos:position pos:line="43" pos:column="37"/></return>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="46" pos:column="17">strbuf_reset<pos:position pos:line="46" pos:column="29"/></name><argument_list pos:line="46" pos:column="29">(<argument><expr><name pos:line="46" pos:column="30">sb_path<pos:position pos:line="46" pos:column="37"/></name></expr></argument>)<pos:position pos:line="46" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">strbuf_git_path<pos:position pos:line="47" pos:column="32"/></name><argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">sb_path<pos:position pos:line="47" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="42">"%s"<pos:position pos:line="47" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="48">refname<pos:position pos:line="47" pos:column="55"/></name></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><name pos:line="48" pos:column="17">path<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <name><name pos:line="48" pos:column="24">sb_path<pos:position pos:line="48" pos:column="31"/></name><operator pos:line="48" pos:column="31">-&gt;<pos:position pos:line="48" pos:column="36"/></operator><name pos:line="48" pos:column="33">buf<pos:position pos:line="48" pos:column="36"/></name></name></expr>;<pos:position pos:line="48" pos:column="37"/></expr_stmt>

		<comment type="block" pos:line="50" pos:column="17">/*
		 * We might have to loop back here to avoid a race
		 * condition: first we lstat() the file, then we try
		 * to read it as a link or as a file.  But if somebody
		 * changes the type of the file (file &lt;-&gt; directory
		 * &lt;-&gt; symlink) between the lstat() and reading, then
		 * we don't want to report that as an error but rather
		 * try again starting with the lstat().
		 */</comment>
	<label><name pos:line="59" pos:column="9">stat_ref<pos:position pos:line="59" pos:column="17"/></name>:<pos:position pos:line="59" pos:column="18"/></label>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><call><name pos:line="60" pos:column="21">lstat<pos:position pos:line="60" pos:column="26"/></name><argument_list pos:line="60" pos:column="26">(<argument><expr><name pos:line="60" pos:column="27">path<pos:position pos:line="60" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="33">&amp;<pos:position pos:line="60" pos:column="38"/></operator><name pos:line="60" pos:column="34">st<pos:position pos:line="60" pos:column="36"/></name></expr></argument>)<pos:position pos:line="60" pos:column="37"/></argument_list></call> <operator pos:line="60" pos:column="38">&lt;<pos:position pos:line="60" pos:column="42"/></operator> <literal type="number" pos:line="60" pos:column="40">0<pos:position pos:line="60" pos:column="41"/></literal></expr>)<pos:position pos:line="60" pos:column="42"/></condition><then pos:line="60" pos:column="42"> <block pos:line="60" pos:column="43">{
			<if pos:line="61" pos:column="25">if <condition pos:line="61" pos:column="28">(<expr><name pos:line="61" pos:column="29">errno<pos:position pos:line="61" pos:column="34"/></name> <operator pos:line="61" pos:column="35">!=<pos:position pos:line="61" pos:column="37"/></operator> <name pos:line="61" pos:column="38">ENOENT<pos:position pos:line="61" pos:column="44"/></name></expr>)<pos:position pos:line="61" pos:column="45"/></condition><then pos:line="61" pos:column="45">
				<block type="pseudo"><return pos:line="62" pos:column="33">return <expr><name pos:line="62" pos:column="40">NULL<pos:position pos:line="62" pos:column="44"/></name></expr>;<pos:position pos:line="62" pos:column="45"/></return></block></then></if>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><call><name pos:line="63" pos:column="29">resolve_missing_loose_ref<pos:position pos:line="63" pos:column="54"/></name><argument_list pos:line="63" pos:column="54">(<argument><expr><name pos:line="63" pos:column="55">refname<pos:position pos:line="63" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="64">resolve_flags<pos:position pos:line="63" pos:column="77"/></name></expr></argument>,
						      <argument><expr><name pos:line="64" pos:column="55">sha1<pos:position pos:line="64" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="61">flags<pos:position pos:line="64" pos:column="66"/></name></expr></argument>)<pos:position pos:line="64" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="68"/></condition><then pos:line="64" pos:column="68">
				<block type="pseudo"><return pos:line="65" pos:column="33">return <expr><name pos:line="65" pos:column="40">NULL<pos:position pos:line="65" pos:column="44"/></name></expr>;<pos:position pos:line="65" pos:column="45"/></return></block></then></if>
			<if pos:line="66" pos:column="25">if <condition pos:line="66" pos:column="28">(<expr><name pos:line="66" pos:column="29">bad_name<pos:position pos:line="66" pos:column="37"/></name></expr>)<pos:position pos:line="66" pos:column="38"/></condition><then pos:line="66" pos:column="38"> <block pos:line="66" pos:column="39">{
				<expr_stmt><expr><call><name pos:line="67" pos:column="33">hashclr<pos:position pos:line="67" pos:column="40"/></name><argument_list pos:line="67" pos:column="40">(<argument><expr><name pos:line="67" pos:column="41">sha1<pos:position pos:line="67" pos:column="45"/></name></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></expr_stmt>
				<if pos:line="68" pos:column="33">if <condition pos:line="68" pos:column="36">(<expr><name pos:line="68" pos:column="37">flags<pos:position pos:line="68" pos:column="42"/></name></expr>)<pos:position pos:line="68" pos:column="43"/></condition><then pos:line="68" pos:column="43">
					<block type="pseudo"><expr_stmt><expr><operator pos:line="69" pos:column="41">*<pos:position pos:line="69" pos:column="42"/></operator><name pos:line="69" pos:column="42">flags<pos:position pos:line="69" pos:column="47"/></name> <operator pos:line="69" pos:column="48">|=<pos:position pos:line="69" pos:column="50"/></operator> <name pos:line="69" pos:column="51">REF_ISBROKEN<pos:position pos:line="69" pos:column="63"/></name></expr>;<pos:position pos:line="69" pos:column="64"/></expr_stmt></block></then></if>
			}<pos:position pos:line="70" pos:column="26"/></block></then></if>
			<return pos:line="71" pos:column="25">return <expr><name pos:line="71" pos:column="32">refname<pos:position pos:line="71" pos:column="39"/></name></expr>;<pos:position pos:line="71" pos:column="40"/></return>
		}<pos:position pos:line="72" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="74" pos:column="17">/* Follow "normalized" - ie "refs/.." symlinks by hand */</comment>
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><call><name pos:line="75" pos:column="21">S_ISLNK<pos:position pos:line="75" pos:column="28"/></name><argument_list pos:line="75" pos:column="28">(<argument><expr><name><name pos:line="75" pos:column="29">st<pos:position pos:line="75" pos:column="31"/></name><operator pos:line="75" pos:column="31">.<pos:position pos:line="75" pos:column="32"/></operator><name pos:line="75" pos:column="32">st_mode<pos:position pos:line="75" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="41"/></condition><then pos:line="75" pos:column="41"> <block pos:line="75" pos:column="42">{
			<expr_stmt><expr><name pos:line="76" pos:column="25">len<pos:position pos:line="76" pos:column="28"/></name> <operator pos:line="76" pos:column="29">=<pos:position pos:line="76" pos:column="30"/></operator> <call><name pos:line="76" pos:column="31">readlink<pos:position pos:line="76" pos:column="39"/></name><argument_list pos:line="76" pos:column="39">(<argument><expr><name pos:line="76" pos:column="40">path<pos:position pos:line="76" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="46">buffer<pos:position pos:line="76" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="76" pos:column="54">sizeof<argument_list pos:line="76" pos:column="60">(<argument><expr><name pos:line="76" pos:column="61">buffer<pos:position pos:line="76" pos:column="67"/></name></expr></argument>)<pos:position pos:line="76" pos:column="68"/></argument_list></sizeof><operator pos:line="76" pos:column="68">-<pos:position pos:line="76" pos:column="69"/></operator><literal type="number" pos:line="76" pos:column="69">1<pos:position pos:line="76" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="72"/></expr_stmt>
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><name pos:line="77" pos:column="29">len<pos:position pos:line="77" pos:column="32"/></name> <operator pos:line="77" pos:column="33">&lt;<pos:position pos:line="77" pos:column="37"/></operator> <literal type="number" pos:line="77" pos:column="35">0<pos:position pos:line="77" pos:column="36"/></literal></expr>)<pos:position pos:line="77" pos:column="37"/></condition><then pos:line="77" pos:column="37"> <block pos:line="77" pos:column="38">{
				<if pos:line="78" pos:column="33">if <condition pos:line="78" pos:column="36">(<expr><name pos:line="78" pos:column="37">errno<pos:position pos:line="78" pos:column="42"/></name> <operator pos:line="78" pos:column="43">==<pos:position pos:line="78" pos:column="45"/></operator> <name pos:line="78" pos:column="46">ENOENT<pos:position pos:line="78" pos:column="52"/></name> <operator pos:line="78" pos:column="53">||<pos:position pos:line="78" pos:column="55"/></operator> <name pos:line="78" pos:column="56">errno<pos:position pos:line="78" pos:column="61"/></name> <operator pos:line="78" pos:column="62">==<pos:position pos:line="78" pos:column="64"/></operator> <name pos:line="78" pos:column="65">EINVAL<pos:position pos:line="78" pos:column="71"/></name></expr>)<pos:position pos:line="78" pos:column="72"/></condition><then pos:line="78" pos:column="72">
					<comment type="block" pos:line="79" pos:column="41">/* inconsistent with lstat; retry */</comment>
					<block type="pseudo"><goto pos:line="80" pos:column="41">goto <name pos:line="80" pos:column="46">stat_ref<pos:position pos:line="80" pos:column="54"/></name>;<pos:position pos:line="80" pos:column="55"/></goto></block></then>
				<else pos:line="81" pos:column="33">else
					<block type="pseudo"><return pos:line="82" pos:column="41">return <expr><name pos:line="82" pos:column="48">NULL<pos:position pos:line="82" pos:column="52"/></name></expr>;<pos:position pos:line="82" pos:column="53"/></return></block></else></if>
			}<pos:position pos:line="83" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="84" pos:column="25">buffer<pos:position pos:line="84" pos:column="31"/></name><index pos:line="84" pos:column="31">[<expr><name pos:line="84" pos:column="32">len<pos:position pos:line="84" pos:column="35"/></name></expr>]<pos:position pos:line="84" pos:column="36"/></index></name> <operator pos:line="84" pos:column="37">=<pos:position pos:line="84" pos:column="38"/></operator> <literal type="number" pos:line="84" pos:column="39">0<pos:position pos:line="84" pos:column="40"/></literal></expr>;<pos:position pos:line="84" pos:column="41"/></expr_stmt>
			<if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">(<expr><call><name pos:line="85" pos:column="29">starts_with<pos:position pos:line="85" pos:column="40"/></name><argument_list pos:line="85" pos:column="40">(<argument><expr><name pos:line="85" pos:column="41">buffer<pos:position pos:line="85" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="49">"refs/"<pos:position pos:line="85" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="57"/></argument_list></call> <operator pos:line="85" pos:column="58">&amp;&amp;<pos:position pos:line="85" pos:column="68"/></operator>
					<operator pos:line="86" pos:column="41">!<pos:position pos:line="86" pos:column="42"/></operator><call><name pos:line="86" pos:column="42">check_refname_format<pos:position pos:line="86" pos:column="62"/></name><argument_list pos:line="86" pos:column="62">(<argument><expr><name pos:line="86" pos:column="63">buffer<pos:position pos:line="86" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="71">0<pos:position pos:line="86" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="74"/></condition><then pos:line="86" pos:column="74"> <block pos:line="86" pos:column="75">{
				<expr_stmt><expr><call><name pos:line="87" pos:column="33">strcpy<pos:position pos:line="87" pos:column="39"/></name><argument_list pos:line="87" pos:column="39">(<argument><expr><name pos:line="87" pos:column="40">refname_buffer<pos:position pos:line="87" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="56">buffer<pos:position pos:line="87" pos:column="62"/></name></expr></argument>)<pos:position pos:line="87" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><name pos:line="88" pos:column="33">refname<pos:position pos:line="88" pos:column="40"/></name> <operator pos:line="88" pos:column="41">=<pos:position pos:line="88" pos:column="42"/></operator> <name pos:line="88" pos:column="43">refname_buffer<pos:position pos:line="88" pos:column="57"/></name></expr>;<pos:position pos:line="88" pos:column="58"/></expr_stmt>
				<if pos:line="89" pos:column="33">if <condition pos:line="89" pos:column="36">(<expr><name pos:line="89" pos:column="37">flags<pos:position pos:line="89" pos:column="42"/></name></expr>)<pos:position pos:line="89" pos:column="43"/></condition><then pos:line="89" pos:column="43">
					<block type="pseudo"><expr_stmt><expr><operator pos:line="90" pos:column="41">*<pos:position pos:line="90" pos:column="42"/></operator><name pos:line="90" pos:column="42">flags<pos:position pos:line="90" pos:column="47"/></name> <operator pos:line="90" pos:column="48">|=<pos:position pos:line="90" pos:column="50"/></operator> <name pos:line="90" pos:column="51">REF_ISSYMREF<pos:position pos:line="90" pos:column="63"/></name></expr>;<pos:position pos:line="90" pos:column="64"/></expr_stmt></block></then></if>
				<if pos:line="91" pos:column="33">if <condition pos:line="91" pos:column="36">(<expr><name pos:line="91" pos:column="37">resolve_flags<pos:position pos:line="91" pos:column="50"/></name> <operator pos:line="91" pos:column="51">&amp;<pos:position pos:line="91" pos:column="56"/></operator> <name pos:line="91" pos:column="53">RESOLVE_REF_NO_RECURSE<pos:position pos:line="91" pos:column="75"/></name></expr>)<pos:position pos:line="91" pos:column="76"/></condition><then pos:line="91" pos:column="76"> <block pos:line="91" pos:column="77">{
					<expr_stmt><expr><call><name pos:line="92" pos:column="41">hashclr<pos:position pos:line="92" pos:column="48"/></name><argument_list pos:line="92" pos:column="48">(<argument><expr><name pos:line="92" pos:column="49">sha1<pos:position pos:line="92" pos:column="53"/></name></expr></argument>)<pos:position pos:line="92" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="55"/></expr_stmt>
					<return pos:line="93" pos:column="41">return <expr><name pos:line="93" pos:column="48">refname<pos:position pos:line="93" pos:column="55"/></name></expr>;<pos:position pos:line="93" pos:column="56"/></return>
				}<pos:position pos:line="94" pos:column="34"/></block></then></if>
				<continue pos:line="95" pos:column="33">continue;<pos:position pos:line="95" pos:column="42"/></continue>
			}<pos:position pos:line="96" pos:column="26"/></block></then></if>
		}<pos:position pos:line="97" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="99" pos:column="17">/* Is it a directory? */</comment>
		<if pos:line="100" pos:column="17">if <condition pos:line="100" pos:column="20">(<expr><call><name pos:line="100" pos:column="21">S_ISDIR<pos:position pos:line="100" pos:column="28"/></name><argument_list pos:line="100" pos:column="28">(<argument><expr><name><name pos:line="100" pos:column="29">st<pos:position pos:line="100" pos:column="31"/></name><operator pos:line="100" pos:column="31">.<pos:position pos:line="100" pos:column="32"/></operator><name pos:line="100" pos:column="32">st_mode<pos:position pos:line="100" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="100" pos:column="41"/></condition><then pos:line="100" pos:column="41"> <block pos:line="100" pos:column="42">{
			<expr_stmt><expr><name pos:line="101" pos:column="25">errno<pos:position pos:line="101" pos:column="30"/></name> <operator pos:line="101" pos:column="31">=<pos:position pos:line="101" pos:column="32"/></operator> <name pos:line="101" pos:column="33">EISDIR<pos:position pos:line="101" pos:column="39"/></name></expr>;<pos:position pos:line="101" pos:column="40"/></expr_stmt>
			<return pos:line="102" pos:column="25">return <expr><name pos:line="102" pos:column="32">NULL<pos:position pos:line="102" pos:column="36"/></name></expr>;<pos:position pos:line="102" pos:column="37"/></return>
		}<pos:position pos:line="103" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="105" pos:column="17">/*
		 * Anything else, just open it and try to use it as
		 * a ref
		 */</comment>
		<expr_stmt><expr><name pos:line="109" pos:column="17">fd<pos:position pos:line="109" pos:column="19"/></name> <operator pos:line="109" pos:column="20">=<pos:position pos:line="109" pos:column="21"/></operator> <call><name pos:line="109" pos:column="22">open<pos:position pos:line="109" pos:column="26"/></name><argument_list pos:line="109" pos:column="26">(<argument><expr><name pos:line="109" pos:column="27">path<pos:position pos:line="109" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="33">O_RDONLY<pos:position pos:line="109" pos:column="41"/></name></expr></argument>)<pos:position pos:line="109" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="43"/></expr_stmt>
		<if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><name pos:line="110" pos:column="21">fd<pos:position pos:line="110" pos:column="23"/></name> <operator pos:line="110" pos:column="24">&lt;<pos:position pos:line="110" pos:column="28"/></operator> <literal type="number" pos:line="110" pos:column="26">0<pos:position pos:line="110" pos:column="27"/></literal></expr>)<pos:position pos:line="110" pos:column="28"/></condition><then pos:line="110" pos:column="28"> <block pos:line="110" pos:column="29">{
			<if pos:line="111" pos:column="25">if <condition pos:line="111" pos:column="28">(<expr><name pos:line="111" pos:column="29">errno<pos:position pos:line="111" pos:column="34"/></name> <operator pos:line="111" pos:column="35">==<pos:position pos:line="111" pos:column="37"/></operator> <name pos:line="111" pos:column="38">ENOENT<pos:position pos:line="111" pos:column="44"/></name></expr>)<pos:position pos:line="111" pos:column="45"/></condition><then pos:line="111" pos:column="45">
				<comment type="block" pos:line="112" pos:column="33">/* inconsistent with lstat; retry */</comment>
				<block type="pseudo"><goto pos:line="113" pos:column="33">goto <name pos:line="113" pos:column="38">stat_ref<pos:position pos:line="113" pos:column="46"/></name>;<pos:position pos:line="113" pos:column="47"/></goto></block></then>
			<else pos:line="114" pos:column="25">else
				<block type="pseudo"><return pos:line="115" pos:column="33">return <expr><name pos:line="115" pos:column="40">NULL<pos:position pos:line="115" pos:column="44"/></name></expr>;<pos:position pos:line="115" pos:column="45"/></return></block></else></if>
		}<pos:position pos:line="116" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="117" pos:column="17">len<pos:position pos:line="117" pos:column="20"/></name> <operator pos:line="117" pos:column="21">=<pos:position pos:line="117" pos:column="22"/></operator> <call><name pos:line="117" pos:column="23">read_in_full<pos:position pos:line="117" pos:column="35"/></name><argument_list pos:line="117" pos:column="35">(<argument><expr><name pos:line="117" pos:column="36">fd<pos:position pos:line="117" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="40">buffer<pos:position pos:line="117" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="117" pos:column="48">sizeof<argument_list pos:line="117" pos:column="54">(<argument><expr><name pos:line="117" pos:column="55">buffer<pos:position pos:line="117" pos:column="61"/></name></expr></argument>)<pos:position pos:line="117" pos:column="62"/></argument_list></sizeof><operator pos:line="117" pos:column="62">-<pos:position pos:line="117" pos:column="63"/></operator><literal type="number" pos:line="117" pos:column="63">1<pos:position pos:line="117" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="66"/></expr_stmt>
		<if pos:line="118" pos:column="17">if <condition pos:line="118" pos:column="20">(<expr><name pos:line="118" pos:column="21">len<pos:position pos:line="118" pos:column="24"/></name> <operator pos:line="118" pos:column="25">&lt;<pos:position pos:line="118" pos:column="29"/></operator> <literal type="number" pos:line="118" pos:column="27">0<pos:position pos:line="118" pos:column="28"/></literal></expr>)<pos:position pos:line="118" pos:column="29"/></condition><then pos:line="118" pos:column="29"> <block pos:line="118" pos:column="30">{
			<decl_stmt><decl><type><name pos:line="119" pos:column="25">int<pos:position pos:line="119" pos:column="28"/></name></type> <name pos:line="119" pos:column="29">save_errno<pos:position pos:line="119" pos:column="39"/></name> <init pos:line="119" pos:column="40">= <expr><name pos:line="119" pos:column="42">errno<pos:position pos:line="119" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="119" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="120" pos:column="25">close<pos:position pos:line="120" pos:column="30"/></name><argument_list pos:line="120" pos:column="30">(<argument><expr><name pos:line="120" pos:column="31">fd<pos:position pos:line="120" pos:column="33"/></name></expr></argument>)<pos:position pos:line="120" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="121" pos:column="25">errno<pos:position pos:line="121" pos:column="30"/></name> <operator pos:line="121" pos:column="31">=<pos:position pos:line="121" pos:column="32"/></operator> <name pos:line="121" pos:column="33">save_errno<pos:position pos:line="121" pos:column="43"/></name></expr>;<pos:position pos:line="121" pos:column="44"/></expr_stmt>
			<return pos:line="122" pos:column="25">return <expr><name pos:line="122" pos:column="32">NULL<pos:position pos:line="122" pos:column="36"/></name></expr>;<pos:position pos:line="122" pos:column="37"/></return>
		}<pos:position pos:line="123" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="124" pos:column="17">close<pos:position pos:line="124" pos:column="22"/></name><argument_list pos:line="124" pos:column="22">(<argument><expr><name pos:line="124" pos:column="23">fd<pos:position pos:line="124" pos:column="25"/></name></expr></argument>)<pos:position pos:line="124" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="27"/></expr_stmt>
		<while pos:line="125" pos:column="17">while <condition pos:line="125" pos:column="23">(<expr><name pos:line="125" pos:column="24">len<pos:position pos:line="125" pos:column="27"/></name> <operator pos:line="125" pos:column="28">&amp;&amp;<pos:position pos:line="125" pos:column="38"/></operator> <call><name pos:line="125" pos:column="31">isspace<pos:position pos:line="125" pos:column="38"/></name><argument_list pos:line="125" pos:column="38">(<argument><expr><name><name pos:line="125" pos:column="39">buffer<pos:position pos:line="125" pos:column="45"/></name><index pos:line="125" pos:column="45">[<expr><name pos:line="125" pos:column="46">len<pos:position pos:line="125" pos:column="49"/></name><operator pos:line="125" pos:column="49">-<pos:position pos:line="125" pos:column="50"/></operator><literal type="number" pos:line="125" pos:column="50">1<pos:position pos:line="125" pos:column="51"/></literal></expr>]<pos:position pos:line="125" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="125" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="125" pos:column="54"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="126" pos:column="25">len<pos:position pos:line="126" pos:column="28"/></name><operator pos:line="126" pos:column="28">--<pos:position pos:line="126" pos:column="30"/></operator></expr>;<pos:position pos:line="126" pos:column="31"/></expr_stmt></block></while>
		<expr_stmt><expr><name><name pos:line="127" pos:column="17">buffer<pos:position pos:line="127" pos:column="23"/></name><index pos:line="127" pos:column="23">[<expr><name pos:line="127" pos:column="24">len<pos:position pos:line="127" pos:column="27"/></name></expr>]<pos:position pos:line="127" pos:column="28"/></index></name> <operator pos:line="127" pos:column="29">=<pos:position pos:line="127" pos:column="30"/></operator> <literal type="char" pos:line="127" pos:column="31">'\0'<pos:position pos:line="127" pos:column="35"/></literal></expr>;<pos:position pos:line="127" pos:column="36"/></expr_stmt>

		<comment type="block" pos:line="129" pos:column="17">/*
		 * Is it a symbolic ref?
		 */</comment>
		<if pos:line="132" pos:column="17">if <condition pos:line="132" pos:column="20">(<expr><operator pos:line="132" pos:column="21">!<pos:position pos:line="132" pos:column="22"/></operator><call><name pos:line="132" pos:column="22">starts_with<pos:position pos:line="132" pos:column="33"/></name><argument_list pos:line="132" pos:column="33">(<argument><expr><name pos:line="132" pos:column="34">buffer<pos:position pos:line="132" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="132" pos:column="42">"ref:"<pos:position pos:line="132" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="132" pos:column="50"/></condition><then pos:line="132" pos:column="50"> <block pos:line="132" pos:column="51">{
			<comment type="block" pos:line="133" pos:column="25">/*
			 * Please note that FETCH_HEAD has a second
			 * line containing other data.
			 */</comment>
			<if pos:line="137" pos:column="25">if <condition pos:line="137" pos:column="28">(<expr><call><name pos:line="137" pos:column="29">get_sha1_hex<pos:position pos:line="137" pos:column="41"/></name><argument_list pos:line="137" pos:column="41">(<argument><expr><name pos:line="137" pos:column="42">buffer<pos:position pos:line="137" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="50">sha1<pos:position pos:line="137" pos:column="54"/></name></expr></argument>)<pos:position pos:line="137" pos:column="55"/></argument_list></call> <operator pos:line="137" pos:column="56">||<pos:position pos:line="137" pos:column="58"/></operator>
			    <operator pos:line="138" pos:column="29">(<pos:position pos:line="138" pos:column="30"/></operator><name><name pos:line="138" pos:column="30">buffer<pos:position pos:line="138" pos:column="36"/></name><index pos:line="138" pos:column="36">[<expr><literal type="number" pos:line="138" pos:column="37">40<pos:position pos:line="138" pos:column="39"/></literal></expr>]<pos:position pos:line="138" pos:column="40"/></index></name> <operator pos:line="138" pos:column="41">!=<pos:position pos:line="138" pos:column="43"/></operator> <literal type="char" pos:line="138" pos:column="44">'\0'<pos:position pos:line="138" pos:column="48"/></literal> <operator pos:line="138" pos:column="49">&amp;&amp;<pos:position pos:line="138" pos:column="59"/></operator> <operator pos:line="138" pos:column="52">!<pos:position pos:line="138" pos:column="53"/></operator><call><name pos:line="138" pos:column="53">isspace<pos:position pos:line="138" pos:column="60"/></name><argument_list pos:line="138" pos:column="60">(<argument><expr><name><name pos:line="138" pos:column="61">buffer<pos:position pos:line="138" pos:column="67"/></name><index pos:line="138" pos:column="67">[<expr><literal type="number" pos:line="138" pos:column="68">40<pos:position pos:line="138" pos:column="70"/></literal></expr>]<pos:position pos:line="138" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="138" pos:column="72"/></argument_list></call><operator pos:line="138" pos:column="72">)<pos:position pos:line="138" pos:column="73"/></operator></expr>)<pos:position pos:line="138" pos:column="74"/></condition><then pos:line="138" pos:column="74"> <block pos:line="138" pos:column="75">{
				<if pos:line="139" pos:column="33">if <condition pos:line="139" pos:column="36">(<expr><name pos:line="139" pos:column="37">flags<pos:position pos:line="139" pos:column="42"/></name></expr>)<pos:position pos:line="139" pos:column="43"/></condition><then pos:line="139" pos:column="43">
					<block type="pseudo"><expr_stmt><expr><operator pos:line="140" pos:column="41">*<pos:position pos:line="140" pos:column="42"/></operator><name pos:line="140" pos:column="42">flags<pos:position pos:line="140" pos:column="47"/></name> <operator pos:line="140" pos:column="48">|=<pos:position pos:line="140" pos:column="50"/></operator> <name pos:line="140" pos:column="51">REF_ISBROKEN<pos:position pos:line="140" pos:column="63"/></name></expr>;<pos:position pos:line="140" pos:column="64"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name pos:line="141" pos:column="33">errno<pos:position pos:line="141" pos:column="38"/></name> <operator pos:line="141" pos:column="39">=<pos:position pos:line="141" pos:column="40"/></operator> <name pos:line="141" pos:column="41">EINVAL<pos:position pos:line="141" pos:column="47"/></name></expr>;<pos:position pos:line="141" pos:column="48"/></expr_stmt>
				<return pos:line="142" pos:column="33">return <expr><name pos:line="142" pos:column="40">NULL<pos:position pos:line="142" pos:column="44"/></name></expr>;<pos:position pos:line="142" pos:column="45"/></return>
			}<pos:position pos:line="143" pos:column="26"/></block></then></if>
			<if pos:line="144" pos:column="25">if <condition pos:line="144" pos:column="28">(<expr><name pos:line="144" pos:column="29">bad_name<pos:position pos:line="144" pos:column="37"/></name></expr>)<pos:position pos:line="144" pos:column="38"/></condition><then pos:line="144" pos:column="38"> <block pos:line="144" pos:column="39">{
				<expr_stmt><expr><call><name pos:line="145" pos:column="33">hashclr<pos:position pos:line="145" pos:column="40"/></name><argument_list pos:line="145" pos:column="40">(<argument><expr><name pos:line="145" pos:column="41">sha1<pos:position pos:line="145" pos:column="45"/></name></expr></argument>)<pos:position pos:line="145" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="47"/></expr_stmt>
				<if pos:line="146" pos:column="33">if <condition pos:line="146" pos:column="36">(<expr><name pos:line="146" pos:column="37">flags<pos:position pos:line="146" pos:column="42"/></name></expr>)<pos:position pos:line="146" pos:column="43"/></condition><then pos:line="146" pos:column="43">
					<block type="pseudo"><expr_stmt><expr><operator pos:line="147" pos:column="41">*<pos:position pos:line="147" pos:column="42"/></operator><name pos:line="147" pos:column="42">flags<pos:position pos:line="147" pos:column="47"/></name> <operator pos:line="147" pos:column="48">|=<pos:position pos:line="147" pos:column="50"/></operator> <name pos:line="147" pos:column="51">REF_ISBROKEN<pos:position pos:line="147" pos:column="63"/></name></expr>;<pos:position pos:line="147" pos:column="64"/></expr_stmt></block></then></if>
			}<pos:position pos:line="148" pos:column="26"/></block></then></if>
			<return pos:line="149" pos:column="25">return <expr><name pos:line="149" pos:column="32">refname<pos:position pos:line="149" pos:column="39"/></name></expr>;<pos:position pos:line="149" pos:column="40"/></return>
		}<pos:position pos:line="150" pos:column="18"/></block></then></if>
		<if pos:line="151" pos:column="17">if <condition pos:line="151" pos:column="20">(<expr><name pos:line="151" pos:column="21">flags<pos:position pos:line="151" pos:column="26"/></name></expr>)<pos:position pos:line="151" pos:column="27"/></condition><then pos:line="151" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="152" pos:column="25">*<pos:position pos:line="152" pos:column="26"/></operator><name pos:line="152" pos:column="26">flags<pos:position pos:line="152" pos:column="31"/></name> <operator pos:line="152" pos:column="32">|=<pos:position pos:line="152" pos:column="34"/></operator> <name pos:line="152" pos:column="35">REF_ISSYMREF<pos:position pos:line="152" pos:column="47"/></name></expr>;<pos:position pos:line="152" pos:column="48"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="153" pos:column="17">buf<pos:position pos:line="153" pos:column="20"/></name> <operator pos:line="153" pos:column="21">=<pos:position pos:line="153" pos:column="22"/></operator> <name pos:line="153" pos:column="23">buffer<pos:position pos:line="153" pos:column="29"/></name> <operator pos:line="153" pos:column="30">+<pos:position pos:line="153" pos:column="31"/></operator> <literal type="number" pos:line="153" pos:column="32">4<pos:position pos:line="153" pos:column="33"/></literal></expr>;<pos:position pos:line="153" pos:column="34"/></expr_stmt>
		<while pos:line="154" pos:column="17">while <condition pos:line="154" pos:column="23">(<expr><call><name pos:line="154" pos:column="24">isspace<pos:position pos:line="154" pos:column="31"/></name><argument_list pos:line="154" pos:column="31">(<argument><expr><operator pos:line="154" pos:column="32">*<pos:position pos:line="154" pos:column="33"/></operator><name pos:line="154" pos:column="33">buf<pos:position pos:line="154" pos:column="36"/></name></expr></argument>)<pos:position pos:line="154" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="154" pos:column="38"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="155" pos:column="25">buf<pos:position pos:line="155" pos:column="28"/></name><operator pos:line="155" pos:column="28">++<pos:position pos:line="155" pos:column="30"/></operator></expr>;<pos:position pos:line="155" pos:column="31"/></expr_stmt></block></while>
		<expr_stmt><expr><name pos:line="156" pos:column="17">refname<pos:position pos:line="156" pos:column="24"/></name> <operator pos:line="156" pos:column="25">=<pos:position pos:line="156" pos:column="26"/></operator> <call><name pos:line="156" pos:column="27">strcpy<pos:position pos:line="156" pos:column="33"/></name><argument_list pos:line="156" pos:column="33">(<argument><expr><name pos:line="156" pos:column="34">refname_buffer<pos:position pos:line="156" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="50">buf<pos:position pos:line="156" pos:column="53"/></name></expr></argument>)<pos:position pos:line="156" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="55"/></expr_stmt>
		<if pos:line="157" pos:column="17">if <condition pos:line="157" pos:column="20">(<expr><name pos:line="157" pos:column="21">resolve_flags<pos:position pos:line="157" pos:column="34"/></name> <operator pos:line="157" pos:column="35">&amp;<pos:position pos:line="157" pos:column="40"/></operator> <name pos:line="157" pos:column="37">RESOLVE_REF_NO_RECURSE<pos:position pos:line="157" pos:column="59"/></name></expr>)<pos:position pos:line="157" pos:column="60"/></condition><then pos:line="157" pos:column="60"> <block pos:line="157" pos:column="61">{
			<expr_stmt><expr><call><name pos:line="158" pos:column="25">hashclr<pos:position pos:line="158" pos:column="32"/></name><argument_list pos:line="158" pos:column="32">(<argument><expr><name pos:line="158" pos:column="33">sha1<pos:position pos:line="158" pos:column="37"/></name></expr></argument>)<pos:position pos:line="158" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="39"/></expr_stmt>
			<return pos:line="159" pos:column="25">return <expr><name pos:line="159" pos:column="32">refname<pos:position pos:line="159" pos:column="39"/></name></expr>;<pos:position pos:line="159" pos:column="40"/></return>
		}<pos:position pos:line="160" pos:column="18"/></block></then></if>
		<if pos:line="161" pos:column="17">if <condition pos:line="161" pos:column="20">(<expr><call><name pos:line="161" pos:column="21">check_refname_format<pos:position pos:line="161" pos:column="41"/></name><argument_list pos:line="161" pos:column="41">(<argument><expr><name pos:line="161" pos:column="42">buf<pos:position pos:line="161" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="47">REFNAME_ALLOW_ONELEVEL<pos:position pos:line="161" pos:column="69"/></name></expr></argument>)<pos:position pos:line="161" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="161" pos:column="71"/></condition><then pos:line="161" pos:column="71"> <block pos:line="161" pos:column="72">{
			<if pos:line="162" pos:column="25">if <condition pos:line="162" pos:column="28">(<expr><name pos:line="162" pos:column="29">flags<pos:position pos:line="162" pos:column="34"/></name></expr>)<pos:position pos:line="162" pos:column="35"/></condition><then pos:line="162" pos:column="35">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="163" pos:column="33">*<pos:position pos:line="163" pos:column="34"/></operator><name pos:line="163" pos:column="34">flags<pos:position pos:line="163" pos:column="39"/></name> <operator pos:line="163" pos:column="40">|=<pos:position pos:line="163" pos:column="42"/></operator> <name pos:line="163" pos:column="43">REF_ISBROKEN<pos:position pos:line="163" pos:column="55"/></name></expr>;<pos:position pos:line="163" pos:column="56"/></expr_stmt></block></then></if>

			<if pos:line="165" pos:column="25">if <condition pos:line="165" pos:column="28">(<expr><operator pos:line="165" pos:column="29">!<pos:position pos:line="165" pos:column="30"/></operator><operator pos:line="165" pos:column="30">(<pos:position pos:line="165" pos:column="31"/></operator><name pos:line="165" pos:column="31">resolve_flags<pos:position pos:line="165" pos:column="44"/></name> <operator pos:line="165" pos:column="45">&amp;<pos:position pos:line="165" pos:column="50"/></operator> <name pos:line="165" pos:column="47">RESOLVE_REF_ALLOW_BAD_NAME<pos:position pos:line="165" pos:column="73"/></name><operator pos:line="165" pos:column="73">)<pos:position pos:line="165" pos:column="74"/></operator> <operator pos:line="165" pos:column="75">||<pos:position pos:line="165" pos:column="77"/></operator>
			    <operator pos:line="166" pos:column="29">!<pos:position pos:line="166" pos:column="30"/></operator><call><name pos:line="166" pos:column="30">refname_is_safe<pos:position pos:line="166" pos:column="45"/></name><argument_list pos:line="166" pos:column="45">(<argument><expr><name pos:line="166" pos:column="46">buf<pos:position pos:line="166" pos:column="49"/></name></expr></argument>)<pos:position pos:line="166" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="166" pos:column="51"/></condition><then pos:line="166" pos:column="51"> <block pos:line="166" pos:column="52">{
				<expr_stmt><expr><name pos:line="167" pos:column="33">errno<pos:position pos:line="167" pos:column="38"/></name> <operator pos:line="167" pos:column="39">=<pos:position pos:line="167" pos:column="40"/></operator> <name pos:line="167" pos:column="41">EINVAL<pos:position pos:line="167" pos:column="47"/></name></expr>;<pos:position pos:line="167" pos:column="48"/></expr_stmt>
				<return pos:line="168" pos:column="33">return <expr><name pos:line="168" pos:column="40">NULL<pos:position pos:line="168" pos:column="44"/></name></expr>;<pos:position pos:line="168" pos:column="45"/></return>
			}<pos:position pos:line="169" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="170" pos:column="25">bad_name<pos:position pos:line="170" pos:column="33"/></name> <operator pos:line="170" pos:column="34">=<pos:position pos:line="170" pos:column="35"/></operator> <literal type="number" pos:line="170" pos:column="36">1<pos:position pos:line="170" pos:column="37"/></literal></expr>;<pos:position pos:line="170" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="171" pos:column="18"/></block></then></if>
	}<pos:position pos:line="172" pos:column="10"/></block></for>
}<pos:position pos:line="173" pos:column="2"/></block></function></unit>
