<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5495_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">hash_stdin_paths<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">type<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">no_filters<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">unsigned<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">flags<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">literally<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">buf<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">STRBUF_INIT<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="42">nbuf<pos:position pos:line="4" pos:column="46"/></name> <init pos:line="4" pos:column="47">= <expr><name pos:line="4" pos:column="49">STRBUF_INIT<pos:position pos:line="4" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="61"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><call><name pos:line="6" pos:column="16">strbuf_getline<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><operator pos:line="6" pos:column="31">&amp;<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="32">buf<pos:position pos:line="6" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="37">stdin<pos:position pos:line="6" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="6" pos:column="44">'\n'<pos:position pos:line="6" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="49"/></argument_list></call> <operator pos:line="6" pos:column="50">!=<pos:position pos:line="6" pos:column="52"/></operator> <name pos:line="6" pos:column="53">EOF<pos:position pos:line="6" pos:column="56"/></name></expr>)<pos:position pos:line="6" pos:column="57"/></condition> <block pos:line="6" pos:column="58">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name><name pos:line="7" pos:column="21">buf<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">.<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="25">buf<pos:position pos:line="7" pos:column="28"/></name><index pos:line="7" pos:column="28">[<expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr>]<pos:position pos:line="7" pos:column="31"/></index></name> <operator pos:line="7" pos:column="32">==<pos:position pos:line="7" pos:column="34"/></operator> <literal type="char" pos:line="7" pos:column="35">'"'<pos:position pos:line="7" pos:column="38"/></literal></expr>)<pos:position pos:line="7" pos:column="39"/></condition><then pos:line="7" pos:column="39"> <block pos:line="7" pos:column="40">{
			<expr_stmt><expr><call><name pos:line="8" pos:column="25">strbuf_reset<pos:position pos:line="8" pos:column="37"/></name><argument_list pos:line="8" pos:column="37">(<argument><expr><operator pos:line="8" pos:column="38">&amp;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="39">nbuf<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>
			<if pos:line="9" pos:column="25">if <condition pos:line="9" pos:column="28">(<expr><call><name pos:line="9" pos:column="29">unquote_c_style<pos:position pos:line="9" pos:column="44"/></name><argument_list pos:line="9" pos:column="44">(<argument><expr><operator pos:line="9" pos:column="45">&amp;<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="46">nbuf<pos:position pos:line="9" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="52">buf<pos:position pos:line="9" pos:column="55"/></name><operator pos:line="9" pos:column="55">.<pos:position pos:line="9" pos:column="56"/></operator><name pos:line="9" pos:column="56">buf<pos:position pos:line="9" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="61">NULL<pos:position pos:line="9" pos:column="65"/></name></expr></argument>)<pos:position pos:line="9" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="67"/></condition><then pos:line="9" pos:column="67">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="33">die<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><literal type="string" pos:line="10" pos:column="37">"line is badly quoted"<pos:position pos:line="10" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="61"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">strbuf_swap<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">(<argument><expr><operator pos:line="11" pos:column="37">&amp;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="38">buf<pos:position pos:line="11" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="43">&amp;<pos:position pos:line="11" pos:column="48"/></operator><name pos:line="11" pos:column="44">nbuf<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="12" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">hash_object<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><name><name pos:line="13" pos:column="29">buf<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">.<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="33">buf<pos:position pos:line="13" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="38">type<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="13" pos:column="44">no_filters<pos:position pos:line="13" pos:column="54"/></name></expr> ?<pos:position pos:line="13" pos:column="56"/></condition><then pos:line="13" pos:column="56"> <expr><name pos:line="13" pos:column="57">NULL<pos:position pos:line="13" pos:column="61"/></name></expr> <pos:position pos:line="13" pos:column="62"/></then><else pos:line="13" pos:column="62">: <expr><name><name pos:line="13" pos:column="64">buf<pos:position pos:line="13" pos:column="67"/></name><operator pos:line="13" pos:column="67">.<pos:position pos:line="13" pos:column="68"/></operator><name pos:line="13" pos:column="68">buf<pos:position pos:line="13" pos:column="71"/></name></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="13" pos:column="73">flags<pos:position pos:line="13" pos:column="78"/></name></expr></argument>,
			    <argument><expr><name pos:line="14" pos:column="29">literally<pos:position pos:line="14" pos:column="38"/></name></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">strbuf_release<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><operator pos:line="16" pos:column="24">&amp;<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="25">buf<pos:position pos:line="16" pos:column="28"/></name></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">strbuf_release<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><operator pos:line="17" pos:column="24">&amp;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="25">nbuf<pos:position pos:line="17" pos:column="29"/></name></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
