<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4200_git-2.9.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ewah_deserialize<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">ewah_bitmap<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">self<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">fd<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">i<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">eword_t<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">dump<pos:position pos:line="4" pos:column="21"/></name><index pos:line="4" pos:column="21">[<expr><literal type="number" pos:line="4" pos:column="22">2048<pos:position pos:line="4" pos:column="26"/></literal></expr>]<pos:position pos:line="4" pos:column="27"/></index></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">size_t<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">words_per_dump<pos:position pos:line="5" pos:column="36"/></name> <init pos:line="5" pos:column="37">= <expr><sizeof pos:line="5" pos:column="39">sizeof<argument_list pos:line="5" pos:column="45">(<argument><expr><name pos:line="5" pos:column="46">dump<pos:position pos:line="5" pos:column="50"/></name></expr></argument>)<pos:position pos:line="5" pos:column="51"/></argument_list></sizeof> <operator pos:line="5" pos:column="52">/<pos:position pos:line="5" pos:column="53"/></operator> <sizeof pos:line="5" pos:column="54">sizeof<argument_list pos:line="5" pos:column="60">(<argument><expr><name pos:line="5" pos:column="61">eword_t<pos:position pos:line="5" pos:column="68"/></name></expr></argument>)<pos:position pos:line="5" pos:column="69"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="5" pos:column="70"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">uint32_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">bitsize<pos:position pos:line="6" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="27">word_count<pos:position pos:line="6" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="39">rlw_pos<pos:position pos:line="6" pos:column="46"/></name></decl>;<pos:position pos:line="6" pos:column="47"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="8" pos:column="9">eword_t<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">buffer<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><name pos:line="8" pos:column="27">NULL<pos:position pos:line="8" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">words_left<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">ewah_clear<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">self<pos:position pos:line="11" pos:column="24"/></name></expr></argument>)<pos:position pos:line="11" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>

	<comment type="block" pos:line="13" pos:column="9">/* 32 bit -- bit size for the map */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">read<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><name pos:line="14" pos:column="18">fd<pos:position pos:line="14" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="22">&amp;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="23">bitsize<pos:position pos:line="14" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="32">4<pos:position pos:line="14" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call> <operator pos:line="14" pos:column="35">!=<pos:position pos:line="14" pos:column="37"/></operator> <literal type="number" pos:line="14" pos:column="38">4<pos:position pos:line="14" pos:column="39"/></literal></expr>)<pos:position pos:line="14" pos:column="40"/></condition><then pos:line="14" pos:column="40">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><operator pos:line="15" pos:column="24">-<pos:position pos:line="15" pos:column="25"/></operator><literal type="number" pos:line="15" pos:column="25">1<pos:position pos:line="15" pos:column="26"/></literal></expr>;<pos:position pos:line="15" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="17" pos:column="9">self<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">bit_size<pos:position pos:line="17" pos:column="23"/></name></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <operator pos:line="17" pos:column="26">(<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="27">size_t<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">)<pos:position pos:line="17" pos:column="34"/></operator><call><name pos:line="17" pos:column="34">ntohl<pos:position pos:line="17" pos:column="39"/></name><argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">bitsize<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt>

	<comment type="block" format="doxygen" pos:line="19" pos:column="9">/** 32 bit -- number of compressed 64-bit words */</comment>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">read<pos:position pos:line="20" pos:column="17"/></name><argument_list pos:line="20" pos:column="17">(<argument><expr><name pos:line="20" pos:column="18">fd<pos:position pos:line="20" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="22">&amp;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="23">word_count<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="35">4<pos:position pos:line="20" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call> <operator pos:line="20" pos:column="38">!=<pos:position pos:line="20" pos:column="40"/></operator> <literal type="number" pos:line="20" pos:column="41">4<pos:position pos:line="20" pos:column="42"/></literal></expr>)<pos:position pos:line="20" pos:column="43"/></condition><then pos:line="20" pos:column="43">
		<block type="pseudo"><return pos:line="21" pos:column="17">return <expr><operator pos:line="21" pos:column="24">-<pos:position pos:line="21" pos:column="25"/></operator><literal type="number" pos:line="21" pos:column="25">1<pos:position pos:line="21" pos:column="26"/></literal></expr>;<pos:position pos:line="21" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="23" pos:column="9">self<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">buffer_size<pos:position pos:line="23" pos:column="26"/></name></name> <operator pos:line="23" pos:column="27">=<pos:position pos:line="23" pos:column="28"/></operator> <name><name pos:line="23" pos:column="29">self<pos:position pos:line="23" pos:column="33"/></name><operator pos:line="23" pos:column="33">-&gt;<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="35">alloc_size<pos:position pos:line="23" pos:column="45"/></name></name> <operator pos:line="23" pos:column="46">=<pos:position pos:line="23" pos:column="47"/></operator> <operator pos:line="23" pos:column="48">(<pos:position pos:line="23" pos:column="49"/></operator><name pos:line="23" pos:column="49">size_t<pos:position pos:line="23" pos:column="55"/></name><operator pos:line="23" pos:column="55">)<pos:position pos:line="23" pos:column="56"/></operator><call><name pos:line="23" pos:column="56">ntohl<pos:position pos:line="23" pos:column="61"/></name><argument_list pos:line="23" pos:column="61">(<argument><expr><name pos:line="23" pos:column="62">word_count<pos:position pos:line="23" pos:column="72"/></name></expr></argument>)<pos:position pos:line="23" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="74"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">REALLOC_ARRAY<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name><name pos:line="24" pos:column="23">self<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">-&gt;<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="29">buffer<pos:position pos:line="24" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="37">self<pos:position pos:line="24" pos:column="41"/></name><operator pos:line="24" pos:column="41">-&gt;<pos:position pos:line="24" pos:column="46"/></operator><name pos:line="24" pos:column="43">alloc_size<pos:position pos:line="24" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>

	<comment type="block" format="doxygen" pos:line="26" pos:column="9">/** 64 bit x N -- compressed words */</comment>
	<expr_stmt><expr><name pos:line="27" pos:column="9">buffer<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <name><name pos:line="27" pos:column="18">self<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">-&gt;<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="24">buffer<pos:position pos:line="27" pos:column="30"/></name></name></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">words_left<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <name><name pos:line="28" pos:column="22">self<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">-&gt;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="28">buffer_size<pos:position pos:line="28" pos:column="39"/></name></name></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>

	<while pos:line="30" pos:column="9">while <condition pos:line="30" pos:column="15">(<expr><name pos:line="30" pos:column="16">words_left<pos:position pos:line="30" pos:column="26"/></name> <operator pos:line="30" pos:column="27">&gt;=<pos:position pos:line="30" pos:column="32"/></operator> <name pos:line="30" pos:column="30">words_per_dump<pos:position pos:line="30" pos:column="44"/></name></expr>)<pos:position pos:line="30" pos:column="45"/></condition> <block pos:line="30" pos:column="46">{
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><call><name pos:line="31" pos:column="21">read<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">fd<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="30">dump<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="36">sizeof<argument_list pos:line="31" pos:column="42">(<argument><expr><name pos:line="31" pos:column="43">dump<pos:position pos:line="31" pos:column="47"/></name></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call> <operator pos:line="31" pos:column="50">!=<pos:position pos:line="31" pos:column="52"/></operator> <sizeof pos:line="31" pos:column="53">sizeof<argument_list pos:line="31" pos:column="59">(<argument><expr><name pos:line="31" pos:column="60">dump<pos:position pos:line="31" pos:column="64"/></name></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></sizeof></expr>)<pos:position pos:line="31" pos:column="66"/></condition><then pos:line="31" pos:column="66">
			<block type="pseudo"><return pos:line="32" pos:column="25">return <expr><operator pos:line="32" pos:column="32">-<pos:position pos:line="32" pos:column="33"/></operator><literal type="number" pos:line="32" pos:column="33">1<pos:position pos:line="32" pos:column="34"/></literal></expr>;<pos:position pos:line="32" pos:column="35"/></return></block></then></if>

		<for pos:line="34" pos:column="17">for <control pos:line="34" pos:column="21">(<init><expr><name pos:line="34" pos:column="22">i<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">=<pos:position pos:line="34" pos:column="25"/></operator> <literal type="number" pos:line="34" pos:column="26">0<pos:position pos:line="34" pos:column="27"/></literal></expr>;<pos:position pos:line="34" pos:column="28"/></init> <condition><expr><name pos:line="34" pos:column="29">i<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">&lt;<pos:position pos:line="34" pos:column="35"/></operator> <name pos:line="34" pos:column="33">words_per_dump<pos:position pos:line="34" pos:column="47"/></name></expr>;<pos:position pos:line="34" pos:column="48"/></condition> <incr><expr><operator pos:line="34" pos:column="49">++<pos:position pos:line="34" pos:column="51"/></operator><name pos:line="34" pos:column="51">i<pos:position pos:line="34" pos:column="52"/></name></expr><operator pos:line="34" pos:column="52">,<pos:position pos:line="34" pos:column="53"/></operator> <expr><operator pos:line="34" pos:column="54">++<pos:position pos:line="34" pos:column="56"/></operator><name pos:line="34" pos:column="56">buffer<pos:position pos:line="34" pos:column="62"/></name></expr></incr>)<pos:position pos:line="34" pos:column="63"/></control>
			<block type="pseudo"><expr_stmt><expr><operator pos:line="35" pos:column="25">*<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="26">buffer<pos:position pos:line="35" pos:column="32"/></name> <operator pos:line="35" pos:column="33">=<pos:position pos:line="35" pos:column="34"/></operator> <call><name pos:line="35" pos:column="35">ntohll<pos:position pos:line="35" pos:column="41"/></name><argument_list pos:line="35" pos:column="41">(<argument><expr><name><name pos:line="35" pos:column="42">dump<pos:position pos:line="35" pos:column="46"/></name><index pos:line="35" pos:column="46">[<expr><name pos:line="35" pos:column="47">i<pos:position pos:line="35" pos:column="48"/></name></expr>]<pos:position pos:line="35" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="51"/></expr_stmt></block></for>

		<expr_stmt><expr><name pos:line="37" pos:column="17">words_left<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">-=<pos:position pos:line="37" pos:column="30"/></operator> <name pos:line="37" pos:column="31">words_per_dump<pos:position pos:line="37" pos:column="45"/></name></expr>;<pos:position pos:line="37" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></while>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">words_left<pos:position pos:line="40" pos:column="23"/></name></expr>)<pos:position pos:line="40" pos:column="24"/></condition><then pos:line="40" pos:column="24"> <block pos:line="40" pos:column="25">{
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><call><name pos:line="41" pos:column="21">read<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">fd<pos:position pos:line="41" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="30">dump<pos:position pos:line="41" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="36">words_left<pos:position pos:line="41" pos:column="46"/></name> <operator pos:line="41" pos:column="47">*<pos:position pos:line="41" pos:column="48"/></operator> <literal type="number" pos:line="41" pos:column="49">8<pos:position pos:line="41" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="51"/></argument_list></call> <operator pos:line="41" pos:column="52">!=<pos:position pos:line="41" pos:column="54"/></operator> <name pos:line="41" pos:column="55">words_left<pos:position pos:line="41" pos:column="65"/></name> <operator pos:line="41" pos:column="66">*<pos:position pos:line="41" pos:column="67"/></operator> <literal type="number" pos:line="41" pos:column="68">8<pos:position pos:line="41" pos:column="69"/></literal></expr>)<pos:position pos:line="41" pos:column="70"/></condition><then pos:line="41" pos:column="70">
			<block type="pseudo"><return pos:line="42" pos:column="25">return <expr><operator pos:line="42" pos:column="32">-<pos:position pos:line="42" pos:column="33"/></operator><literal type="number" pos:line="42" pos:column="33">1<pos:position pos:line="42" pos:column="34"/></literal></expr>;<pos:position pos:line="42" pos:column="35"/></return></block></then></if>

		<for pos:line="44" pos:column="17">for <control pos:line="44" pos:column="21">(<init><expr><name pos:line="44" pos:column="22">i<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <literal type="number" pos:line="44" pos:column="26">0<pos:position pos:line="44" pos:column="27"/></literal></expr>;<pos:position pos:line="44" pos:column="28"/></init> <condition><expr><name pos:line="44" pos:column="29">i<pos:position pos:line="44" pos:column="30"/></name> <operator pos:line="44" pos:column="31">&lt;<pos:position pos:line="44" pos:column="35"/></operator> <name pos:line="44" pos:column="33">words_left<pos:position pos:line="44" pos:column="43"/></name></expr>;<pos:position pos:line="44" pos:column="44"/></condition> <incr><expr><operator pos:line="44" pos:column="45">++<pos:position pos:line="44" pos:column="47"/></operator><name pos:line="44" pos:column="47">i<pos:position pos:line="44" pos:column="48"/></name></expr><operator pos:line="44" pos:column="48">,<pos:position pos:line="44" pos:column="49"/></operator> <expr><operator pos:line="44" pos:column="50">++<pos:position pos:line="44" pos:column="52"/></operator><name pos:line="44" pos:column="52">buffer<pos:position pos:line="44" pos:column="58"/></name></expr></incr>)<pos:position pos:line="44" pos:column="59"/></control>
			<block type="pseudo"><expr_stmt><expr><operator pos:line="45" pos:column="25">*<pos:position pos:line="45" pos:column="26"/></operator><name pos:line="45" pos:column="26">buffer<pos:position pos:line="45" pos:column="32"/></name> <operator pos:line="45" pos:column="33">=<pos:position pos:line="45" pos:column="34"/></operator> <call><name pos:line="45" pos:column="35">ntohll<pos:position pos:line="45" pos:column="41"/></name><argument_list pos:line="45" pos:column="41">(<argument><expr><name><name pos:line="45" pos:column="42">dump<pos:position pos:line="45" pos:column="46"/></name><index pos:line="45" pos:column="46">[<expr><name pos:line="45" pos:column="47">i<pos:position pos:line="45" pos:column="48"/></name></expr>]<pos:position pos:line="45" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="45" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="51"/></expr_stmt></block></for>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>

	<comment type="block" format="doxygen" pos:line="48" pos:column="9">/** 32 bit -- position for the RLW */</comment>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><call><name pos:line="49" pos:column="13">read<pos:position pos:line="49" pos:column="17"/></name><argument_list pos:line="49" pos:column="17">(<argument><expr><name pos:line="49" pos:column="18">fd<pos:position pos:line="49" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="22">&amp;<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="23">rlw_pos<pos:position pos:line="49" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="32">4<pos:position pos:line="49" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="34"/></argument_list></call> <operator pos:line="49" pos:column="35">!=<pos:position pos:line="49" pos:column="37"/></operator> <literal type="number" pos:line="49" pos:column="38">4<pos:position pos:line="49" pos:column="39"/></literal></expr>)<pos:position pos:line="49" pos:column="40"/></condition><then pos:line="49" pos:column="40">
		<block type="pseudo"><return pos:line="50" pos:column="17">return <expr><operator pos:line="50" pos:column="24">-<pos:position pos:line="50" pos:column="25"/></operator><literal type="number" pos:line="50" pos:column="25">1<pos:position pos:line="50" pos:column="26"/></literal></expr>;<pos:position pos:line="50" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="52" pos:column="9">self<pos:position pos:line="52" pos:column="13"/></name><operator pos:line="52" pos:column="13">-&gt;<pos:position pos:line="52" pos:column="18"/></operator><name pos:line="52" pos:column="15">rlw<pos:position pos:line="52" pos:column="18"/></name></name> <operator pos:line="52" pos:column="19">=<pos:position pos:line="52" pos:column="20"/></operator> <name><name pos:line="52" pos:column="21">self<pos:position pos:line="52" pos:column="25"/></name><operator pos:line="52" pos:column="25">-&gt;<pos:position pos:line="52" pos:column="30"/></operator><name pos:line="52" pos:column="27">buffer<pos:position pos:line="52" pos:column="33"/></name></name> <operator pos:line="52" pos:column="34">+<pos:position pos:line="52" pos:column="35"/></operator> <call><name pos:line="52" pos:column="36">ntohl<pos:position pos:line="52" pos:column="41"/></name><argument_list pos:line="52" pos:column="41">(<argument><expr><name pos:line="52" pos:column="42">rlw_pos<pos:position pos:line="52" pos:column="49"/></name></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="51"/></expr_stmt>
	<return pos:line="53" pos:column="9">return <expr><literal type="number" pos:line="53" pos:column="16">0<pos:position pos:line="53" pos:column="17"/></literal></expr>;<pos:position pos:line="53" pos:column="18"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
