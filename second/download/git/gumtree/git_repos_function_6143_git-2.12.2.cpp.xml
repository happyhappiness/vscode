<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6143_git-2.12.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">files_read_raw_ref<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">ref_store<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">ref_store<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">refname<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">unsigned<pos:position pos:line="2" pos:column="60"/></name> <name pos:line="2" pos:column="61">char<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">sha1<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="3" pos:column="31">struct<pos:position pos:line="3" pos:column="37"/></name> <name pos:line="3" pos:column="38">strbuf<pos:position pos:line="3" pos:column="44"/></name></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">referent<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="56">unsigned<pos:position pos:line="3" pos:column="64"/></name> <name pos:line="3" pos:column="65">int<pos:position pos:line="3" pos:column="68"/></name> <modifier pos:line="3" pos:column="69">*<pos:position pos:line="3" pos:column="70"/></modifier></type><name pos:line="3" pos:column="70">type<pos:position pos:line="3" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="75"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">files_ref_store<pos:position pos:line="5" pos:column="31"/></name></name> <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier></type><name pos:line="5" pos:column="33">refs<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">=
		<expr><call><name pos:line="6" pos:column="17">files_downcast<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name pos:line="6" pos:column="32">ref_store<pos:position pos:line="6" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="43">1<pos:position pos:line="6" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="46">"read_raw_ref"<pos:position pos:line="6" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="62"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">sb_contents<pos:position pos:line="7" pos:column="34"/></name> <init pos:line="7" pos:column="35">= <expr><name pos:line="7" pos:column="37">STRBUF_INIT<pos:position pos:line="7" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">sb_path<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><name pos:line="8" pos:column="33">STRBUF_INIT<pos:position pos:line="8" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">path<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">buf<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">stat<pos:position pos:line="11" pos:column="20"/></name></name></type> <name pos:line="11" pos:column="21">st<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">fd<pos:position pos:line="12" pos:column="15"/></name></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">ret<pos:position pos:line="13" pos:column="16"/></name> <init pos:line="13" pos:column="17">= <expr><operator pos:line="13" pos:column="19">-<pos:position pos:line="13" pos:column="20"/></operator><literal type="number" pos:line="13" pos:column="20">1<pos:position pos:line="13" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">save_errno<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">remaining_retries<pos:position pos:line="15" pos:column="30"/></name> <init pos:line="15" pos:column="31">= <expr><literal type="number" pos:line="15" pos:column="33">3<pos:position pos:line="15" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="35"/></decl_stmt>

	<expr_stmt><expr><operator pos:line="17" pos:column="9">*<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">type<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">strbuf_reset<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><operator pos:line="18" pos:column="22">&amp;<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="23">sb_path<pos:position pos:line="18" pos:column="30"/></name></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">*<pos:position pos:line="20" pos:column="14"/></operator><name><name pos:line="20" pos:column="14">refs<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">-&gt;<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="20">base<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">.<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">submodule<pos:position pos:line="20" pos:column="34"/></name></name></expr>)<pos:position pos:line="20" pos:column="35"/></condition><then pos:line="20" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">strbuf_git_path_submodule<pos:position pos:line="21" pos:column="42"/></name><argument_list pos:line="21" pos:column="42">(<argument><expr><operator pos:line="21" pos:column="43">&amp;<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="44">sb_path<pos:position pos:line="21" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="53">refs<pos:position pos:line="21" pos:column="57"/></name><operator pos:line="21" pos:column="57">-&gt;<pos:position pos:line="21" pos:column="62"/></operator><name pos:line="21" pos:column="59">base<pos:position pos:line="21" pos:column="63"/></name><operator pos:line="21" pos:column="63">.<pos:position pos:line="21" pos:column="64"/></operator><name pos:line="21" pos:column="64">submodule<pos:position pos:line="21" pos:column="73"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="75">"%s"<pos:position pos:line="21" pos:column="79"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="81">refname<pos:position pos:line="21" pos:column="88"/></name></expr></argument>)<pos:position pos:line="21" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="90"/></expr_stmt></block></then>
	<else pos:line="22" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">strbuf_git_path<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><operator pos:line="23" pos:column="33">&amp;<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="34">sb_path<pos:position pos:line="23" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="43">"%s"<pos:position pos:line="23" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="49">refname<pos:position pos:line="23" pos:column="56"/></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="25" pos:column="9">path<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <name><name pos:line="25" pos:column="16">sb_path<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">.<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">buf<pos:position pos:line="25" pos:column="27"/></name></name></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>

<label><name pos:line="27" pos:column="1">stat_ref<pos:position pos:line="27" pos:column="9"/></name>:<pos:position pos:line="27" pos:column="10"/></label>
	<comment type="block" pos:line="28" pos:column="9">/*
	 * We might have to loop back here to avoid a race
	 * condition: first we lstat() the file, then we try
	 * to read it as a link or as a file.  But if somebody
	 * changes the type of the file (file &lt;-&gt; directory
	 * &lt;-&gt; symlink) between the lstat() and reading, then
	 * we don't want to report that as an error but rather
	 * try again starting with the lstat().
	 *
	 * We'll keep a count of the retries, though, just to avoid
	 * any confusing situation sending us into an infinite loop.
	 */</comment>

	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">remaining_retries<pos:position pos:line="41" pos:column="30"/></name><operator pos:line="41" pos:column="30">--<pos:position pos:line="41" pos:column="32"/></operator> <operator pos:line="41" pos:column="33">&lt;=<pos:position pos:line="41" pos:column="38"/></operator> <literal type="number" pos:line="41" pos:column="36">0<pos:position pos:line="41" pos:column="37"/></literal></expr>)<pos:position pos:line="41" pos:column="38"/></condition><then pos:line="41" pos:column="38">
		<block type="pseudo"><goto pos:line="42" pos:column="17">goto <name pos:line="42" pos:column="22">out<pos:position pos:line="42" pos:column="25"/></name>;<pos:position pos:line="42" pos:column="26"/></goto></block></then></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name pos:line="44" pos:column="13">lstat<pos:position pos:line="44" pos:column="18"/></name><argument_list pos:line="44" pos:column="18">(<argument><expr><name pos:line="44" pos:column="19">path<pos:position pos:line="44" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="25">&amp;<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="26">st<pos:position pos:line="44" pos:column="28"/></name></expr></argument>)<pos:position pos:line="44" pos:column="29"/></argument_list></call> <operator pos:line="44" pos:column="30">&lt;<pos:position pos:line="44" pos:column="34"/></operator> <literal type="number" pos:line="44" pos:column="32">0<pos:position pos:line="44" pos:column="33"/></literal></expr>)<pos:position pos:line="44" pos:column="34"/></condition><then pos:line="44" pos:column="34"> <block pos:line="44" pos:column="35">{
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">errno<pos:position pos:line="45" pos:column="26"/></name> <operator pos:line="45" pos:column="27">!=<pos:position pos:line="45" pos:column="29"/></operator> <name pos:line="45" pos:column="30">ENOENT<pos:position pos:line="45" pos:column="36"/></name></expr>)<pos:position pos:line="45" pos:column="37"/></condition><then pos:line="45" pos:column="37">
			<block type="pseudo"><goto pos:line="46" pos:column="25">goto <name pos:line="46" pos:column="30">out<pos:position pos:line="46" pos:column="33"/></name>;<pos:position pos:line="46" pos:column="34"/></goto></block></then></if>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><call><name pos:line="47" pos:column="21">resolve_packed_ref<pos:position pos:line="47" pos:column="39"/></name><argument_list pos:line="47" pos:column="39">(<argument><expr><name pos:line="47" pos:column="40">refs<pos:position pos:line="47" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="46">refname<pos:position pos:line="47" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="55">sha1<pos:position pos:line="47" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="61">type<pos:position pos:line="47" pos:column="65"/></name></expr></argument>)<pos:position pos:line="47" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="67"/></condition><then pos:line="47" pos:column="67"> <block pos:line="47" pos:column="68">{
			<expr_stmt><expr><name pos:line="48" pos:column="25">errno<pos:position pos:line="48" pos:column="30"/></name> <operator pos:line="48" pos:column="31">=<pos:position pos:line="48" pos:column="32"/></operator> <name pos:line="48" pos:column="33">ENOENT<pos:position pos:line="48" pos:column="39"/></name></expr>;<pos:position pos:line="48" pos:column="40"/></expr_stmt>
			<goto pos:line="49" pos:column="25">goto <name pos:line="49" pos:column="30">out<pos:position pos:line="49" pos:column="33"/></name>;<pos:position pos:line="49" pos:column="34"/></goto>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="51" pos:column="17">ret<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <literal type="number" pos:line="51" pos:column="23">0<pos:position pos:line="51" pos:column="24"/></literal></expr>;<pos:position pos:line="51" pos:column="25"/></expr_stmt>
		<goto pos:line="52" pos:column="17">goto <name pos:line="52" pos:column="22">out<pos:position pos:line="52" pos:column="25"/></name>;<pos:position pos:line="52" pos:column="26"/></goto>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="55" pos:column="9">/* Follow "normalized" - ie "refs/.." symlinks by hand */</comment>
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><call><name pos:line="56" pos:column="13">S_ISLNK<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">(<argument><expr><name><name pos:line="56" pos:column="21">st<pos:position pos:line="56" pos:column="23"/></name><operator pos:line="56" pos:column="23">.<pos:position pos:line="56" pos:column="24"/></operator><name pos:line="56" pos:column="24">st_mode<pos:position pos:line="56" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="33"/></condition><then pos:line="56" pos:column="33"> <block pos:line="56" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">strbuf_reset<pos:position pos:line="57" pos:column="29"/></name><argument_list pos:line="57" pos:column="29">(<argument><expr><operator pos:line="57" pos:column="30">&amp;<pos:position pos:line="57" pos:column="35"/></operator><name pos:line="57" pos:column="31">sb_contents<pos:position pos:line="57" pos:column="42"/></name></expr></argument>)<pos:position pos:line="57" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="44"/></expr_stmt>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><call><name pos:line="58" pos:column="21">strbuf_readlink<pos:position pos:line="58" pos:column="36"/></name><argument_list pos:line="58" pos:column="36">(<argument><expr><operator pos:line="58" pos:column="37">&amp;<pos:position pos:line="58" pos:column="42"/></operator><name pos:line="58" pos:column="38">sb_contents<pos:position pos:line="58" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="51">path<pos:position pos:line="58" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="57">0<pos:position pos:line="58" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="59"/></argument_list></call> <operator pos:line="58" pos:column="60">&lt;<pos:position pos:line="58" pos:column="64"/></operator> <literal type="number" pos:line="58" pos:column="62">0<pos:position pos:line="58" pos:column="63"/></literal></expr>)<pos:position pos:line="58" pos:column="64"/></condition><then pos:line="58" pos:column="64"> <block pos:line="58" pos:column="65">{
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name pos:line="59" pos:column="29">errno<pos:position pos:line="59" pos:column="34"/></name> <operator pos:line="59" pos:column="35">==<pos:position pos:line="59" pos:column="37"/></operator> <name pos:line="59" pos:column="38">ENOENT<pos:position pos:line="59" pos:column="44"/></name> <operator pos:line="59" pos:column="45">||<pos:position pos:line="59" pos:column="47"/></operator> <name pos:line="59" pos:column="48">errno<pos:position pos:line="59" pos:column="53"/></name> <operator pos:line="59" pos:column="54">==<pos:position pos:line="59" pos:column="56"/></operator> <name pos:line="59" pos:column="57">EINVAL<pos:position pos:line="59" pos:column="63"/></name></expr>)<pos:position pos:line="59" pos:column="64"/></condition><then pos:line="59" pos:column="64">
				<comment type="block" pos:line="60" pos:column="33">/* inconsistent with lstat; retry */</comment>
				<block type="pseudo"><goto pos:line="61" pos:column="33">goto <name pos:line="61" pos:column="38">stat_ref<pos:position pos:line="61" pos:column="46"/></name>;<pos:position pos:line="61" pos:column="47"/></goto></block></then>
			<else pos:line="62" pos:column="25">else
				<block type="pseudo"><goto pos:line="63" pos:column="33">goto <name pos:line="63" pos:column="38">out<pos:position pos:line="63" pos:column="41"/></name>;<pos:position pos:line="63" pos:column="42"/></goto></block></else></if>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><call><name pos:line="65" pos:column="21">starts_with<pos:position pos:line="65" pos:column="32"/></name><argument_list pos:line="65" pos:column="32">(<argument><expr><name><name pos:line="65" pos:column="33">sb_contents<pos:position pos:line="65" pos:column="44"/></name><operator pos:line="65" pos:column="44">.<pos:position pos:line="65" pos:column="45"/></operator><name pos:line="65" pos:column="45">buf<pos:position pos:line="65" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="50">"refs/"<pos:position pos:line="65" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="58"/></argument_list></call> <operator pos:line="65" pos:column="59">&amp;&amp;<pos:position pos:line="65" pos:column="69"/></operator>
		    <operator pos:line="66" pos:column="21">!<pos:position pos:line="66" pos:column="22"/></operator><call><name pos:line="66" pos:column="22">check_refname_format<pos:position pos:line="66" pos:column="42"/></name><argument_list pos:line="66" pos:column="42">(<argument><expr><name><name pos:line="66" pos:column="43">sb_contents<pos:position pos:line="66" pos:column="54"/></name><operator pos:line="66" pos:column="54">.<pos:position pos:line="66" pos:column="55"/></operator><name pos:line="66" pos:column="55">buf<pos:position pos:line="66" pos:column="58"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="60">0<pos:position pos:line="66" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="63"/></condition><then pos:line="66" pos:column="63"> <block pos:line="66" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="67" pos:column="25">strbuf_swap<pos:position pos:line="67" pos:column="36"/></name><argument_list pos:line="67" pos:column="36">(<argument><expr><operator pos:line="67" pos:column="37">&amp;<pos:position pos:line="67" pos:column="42"/></operator><name pos:line="67" pos:column="38">sb_contents<pos:position pos:line="67" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="51">referent<pos:position pos:line="67" pos:column="59"/></name></expr></argument>)<pos:position pos:line="67" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="68" pos:column="25">*<pos:position pos:line="68" pos:column="26"/></operator><name pos:line="68" pos:column="26">type<pos:position pos:line="68" pos:column="30"/></name> <operator pos:line="68" pos:column="31">|=<pos:position pos:line="68" pos:column="33"/></operator> <name pos:line="68" pos:column="34">REF_ISSYMREF<pos:position pos:line="68" pos:column="46"/></name></expr>;<pos:position pos:line="68" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="69" pos:column="25">ret<pos:position pos:line="69" pos:column="28"/></name> <operator pos:line="69" pos:column="29">=<pos:position pos:line="69" pos:column="30"/></operator> <literal type="number" pos:line="69" pos:column="31">0<pos:position pos:line="69" pos:column="32"/></literal></expr>;<pos:position pos:line="69" pos:column="33"/></expr_stmt>
			<goto pos:line="70" pos:column="25">goto <name pos:line="70" pos:column="30">out<pos:position pos:line="70" pos:column="33"/></name>;<pos:position pos:line="70" pos:column="34"/></goto>
		}<pos:position pos:line="71" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="72" pos:column="17">/*
		 * It doesn't look like a refname; fall through to just
		 * treating it like a non-symlink, and reading whatever it
		 * points to.
		 */</comment>
	}<pos:position pos:line="77" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="79" pos:column="9">/* Is it a directory? */</comment>
	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><call><name pos:line="80" pos:column="13">S_ISDIR<pos:position pos:line="80" pos:column="20"/></name><argument_list pos:line="80" pos:column="20">(<argument><expr><name><name pos:line="80" pos:column="21">st<pos:position pos:line="80" pos:column="23"/></name><operator pos:line="80" pos:column="23">.<pos:position pos:line="80" pos:column="24"/></operator><name pos:line="80" pos:column="24">st_mode<pos:position pos:line="80" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="33"/></condition><then pos:line="80" pos:column="33"> <block pos:line="80" pos:column="34">{
		<comment type="block" pos:line="81" pos:column="17">/*
		 * Even though there is a directory where the loose
		 * ref is supposed to be, there could still be a
		 * packed ref:
		 */</comment>
		<if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><call><name pos:line="86" pos:column="21">resolve_packed_ref<pos:position pos:line="86" pos:column="39"/></name><argument_list pos:line="86" pos:column="39">(<argument><expr><name pos:line="86" pos:column="40">refs<pos:position pos:line="86" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="46">refname<pos:position pos:line="86" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="55">sha1<pos:position pos:line="86" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="61">type<pos:position pos:line="86" pos:column="65"/></name></expr></argument>)<pos:position pos:line="86" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="67"/></condition><then pos:line="86" pos:column="67"> <block pos:line="86" pos:column="68">{
			<expr_stmt><expr><name pos:line="87" pos:column="25">errno<pos:position pos:line="87" pos:column="30"/></name> <operator pos:line="87" pos:column="31">=<pos:position pos:line="87" pos:column="32"/></operator> <name pos:line="87" pos:column="33">EISDIR<pos:position pos:line="87" pos:column="39"/></name></expr>;<pos:position pos:line="87" pos:column="40"/></expr_stmt>
			<goto pos:line="88" pos:column="25">goto <name pos:line="88" pos:column="30">out<pos:position pos:line="88" pos:column="33"/></name>;<pos:position pos:line="88" pos:column="34"/></goto>
		}<pos:position pos:line="89" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="90" pos:column="17">ret<pos:position pos:line="90" pos:column="20"/></name> <operator pos:line="90" pos:column="21">=<pos:position pos:line="90" pos:column="22"/></operator> <literal type="number" pos:line="90" pos:column="23">0<pos:position pos:line="90" pos:column="24"/></literal></expr>;<pos:position pos:line="90" pos:column="25"/></expr_stmt>
		<goto pos:line="91" pos:column="17">goto <name pos:line="91" pos:column="22">out<pos:position pos:line="91" pos:column="25"/></name>;<pos:position pos:line="91" pos:column="26"/></goto>
	}<pos:position pos:line="92" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="94" pos:column="9">/*
	 * Anything else, just open it and try to use it as
	 * a ref
	 */</comment>
	<expr_stmt><expr><name pos:line="98" pos:column="9">fd<pos:position pos:line="98" pos:column="11"/></name> <operator pos:line="98" pos:column="12">=<pos:position pos:line="98" pos:column="13"/></operator> <call><name pos:line="98" pos:column="14">open<pos:position pos:line="98" pos:column="18"/></name><argument_list pos:line="98" pos:column="18">(<argument><expr><name pos:line="98" pos:column="19">path<pos:position pos:line="98" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="25">O_RDONLY<pos:position pos:line="98" pos:column="33"/></name></expr></argument>)<pos:position pos:line="98" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="35"/></expr_stmt>
	<if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><name pos:line="99" pos:column="13">fd<pos:position pos:line="99" pos:column="15"/></name> <operator pos:line="99" pos:column="16">&lt;<pos:position pos:line="99" pos:column="20"/></operator> <literal type="number" pos:line="99" pos:column="18">0<pos:position pos:line="99" pos:column="19"/></literal></expr>)<pos:position pos:line="99" pos:column="20"/></condition><then pos:line="99" pos:column="20"> <block pos:line="99" pos:column="21">{
		<if pos:line="100" pos:column="17">if <condition pos:line="100" pos:column="20">(<expr><name pos:line="100" pos:column="21">errno<pos:position pos:line="100" pos:column="26"/></name> <operator pos:line="100" pos:column="27">==<pos:position pos:line="100" pos:column="29"/></operator> <name pos:line="100" pos:column="30">ENOENT<pos:position pos:line="100" pos:column="36"/></name> <operator pos:line="100" pos:column="37">&amp;&amp;<pos:position pos:line="100" pos:column="47"/></operator> <operator pos:line="100" pos:column="40">!<pos:position pos:line="100" pos:column="41"/></operator><call><name pos:line="100" pos:column="41">S_ISLNK<pos:position pos:line="100" pos:column="48"/></name><argument_list pos:line="100" pos:column="48">(<argument><expr><name><name pos:line="100" pos:column="49">st<pos:position pos:line="100" pos:column="51"/></name><operator pos:line="100" pos:column="51">.<pos:position pos:line="100" pos:column="52"/></operator><name pos:line="100" pos:column="52">st_mode<pos:position pos:line="100" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="100" pos:column="61"/></condition><then pos:line="100" pos:column="61">
			<comment type="block" pos:line="101" pos:column="25">/* inconsistent with lstat; retry */</comment>
			<block type="pseudo"><goto pos:line="102" pos:column="25">goto <name pos:line="102" pos:column="30">stat_ref<pos:position pos:line="102" pos:column="38"/></name>;<pos:position pos:line="102" pos:column="39"/></goto></block></then>
		<else pos:line="103" pos:column="17">else
			<block type="pseudo"><goto pos:line="104" pos:column="25">goto <name pos:line="104" pos:column="30">out<pos:position pos:line="104" pos:column="33"/></name>;<pos:position pos:line="104" pos:column="34"/></goto></block></else></if>
	}<pos:position pos:line="105" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="106" pos:column="9">strbuf_reset<pos:position pos:line="106" pos:column="21"/></name><argument_list pos:line="106" pos:column="21">(<argument><expr><operator pos:line="106" pos:column="22">&amp;<pos:position pos:line="106" pos:column="27"/></operator><name pos:line="106" pos:column="23">sb_contents<pos:position pos:line="106" pos:column="34"/></name></expr></argument>)<pos:position pos:line="106" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="36"/></expr_stmt>
	<if pos:line="107" pos:column="9">if <condition pos:line="107" pos:column="12">(<expr><call><name pos:line="107" pos:column="13">strbuf_read<pos:position pos:line="107" pos:column="24"/></name><argument_list pos:line="107" pos:column="24">(<argument><expr><operator pos:line="107" pos:column="25">&amp;<pos:position pos:line="107" pos:column="30"/></operator><name pos:line="107" pos:column="26">sb_contents<pos:position pos:line="107" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="39">fd<pos:position pos:line="107" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="107" pos:column="43">256<pos:position pos:line="107" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="47"/></argument_list></call> <operator pos:line="107" pos:column="48">&lt;<pos:position pos:line="107" pos:column="52"/></operator> <literal type="number" pos:line="107" pos:column="50">0<pos:position pos:line="107" pos:column="51"/></literal></expr>)<pos:position pos:line="107" pos:column="52"/></condition><then pos:line="107" pos:column="52"> <block pos:line="107" pos:column="53">{
		<decl_stmt><decl><type><name pos:line="108" pos:column="17">int<pos:position pos:line="108" pos:column="20"/></name></type> <name pos:line="108" pos:column="21">save_errno<pos:position pos:line="108" pos:column="31"/></name> <init pos:line="108" pos:column="32">= <expr><name pos:line="108" pos:column="34">errno<pos:position pos:line="108" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="108" pos:column="40"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="109" pos:column="17">close<pos:position pos:line="109" pos:column="22"/></name><argument_list pos:line="109" pos:column="22">(<argument><expr><name pos:line="109" pos:column="23">fd<pos:position pos:line="109" pos:column="25"/></name></expr></argument>)<pos:position pos:line="109" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="110" pos:column="17">errno<pos:position pos:line="110" pos:column="22"/></name> <operator pos:line="110" pos:column="23">=<pos:position pos:line="110" pos:column="24"/></operator> <name pos:line="110" pos:column="25">save_errno<pos:position pos:line="110" pos:column="35"/></name></expr>;<pos:position pos:line="110" pos:column="36"/></expr_stmt>
		<goto pos:line="111" pos:column="17">goto <name pos:line="111" pos:column="22">out<pos:position pos:line="111" pos:column="25"/></name>;<pos:position pos:line="111" pos:column="26"/></goto>
	}<pos:position pos:line="112" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">close<pos:position pos:line="113" pos:column="14"/></name><argument_list pos:line="113" pos:column="14">(<argument><expr><name pos:line="113" pos:column="15">fd<pos:position pos:line="113" pos:column="17"/></name></expr></argument>)<pos:position pos:line="113" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="114" pos:column="9">strbuf_rtrim<pos:position pos:line="114" pos:column="21"/></name><argument_list pos:line="114" pos:column="21">(<argument><expr><operator pos:line="114" pos:column="22">&amp;<pos:position pos:line="114" pos:column="27"/></operator><name pos:line="114" pos:column="23">sb_contents<pos:position pos:line="114" pos:column="34"/></name></expr></argument>)<pos:position pos:line="114" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="115" pos:column="9">buf<pos:position pos:line="115" pos:column="12"/></name> <operator pos:line="115" pos:column="13">=<pos:position pos:line="115" pos:column="14"/></operator> <name><name pos:line="115" pos:column="15">sb_contents<pos:position pos:line="115" pos:column="26"/></name><operator pos:line="115" pos:column="26">.<pos:position pos:line="115" pos:column="27"/></operator><name pos:line="115" pos:column="27">buf<pos:position pos:line="115" pos:column="30"/></name></name></expr>;<pos:position pos:line="115" pos:column="31"/></expr_stmt>
	<if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><call><name pos:line="116" pos:column="13">starts_with<pos:position pos:line="116" pos:column="24"/></name><argument_list pos:line="116" pos:column="24">(<argument><expr><name pos:line="116" pos:column="25">buf<pos:position pos:line="116" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="30">"ref:"<pos:position pos:line="116" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="116" pos:column="38"/></condition><then pos:line="116" pos:column="38"> <block pos:line="116" pos:column="39">{
		<expr_stmt><expr><name pos:line="117" pos:column="17">buf<pos:position pos:line="117" pos:column="20"/></name> <operator pos:line="117" pos:column="21">+=<pos:position pos:line="117" pos:column="23"/></operator> <literal type="number" pos:line="117" pos:column="24">4<pos:position pos:line="117" pos:column="25"/></literal></expr>;<pos:position pos:line="117" pos:column="26"/></expr_stmt>
		<while pos:line="118" pos:column="17">while <condition pos:line="118" pos:column="23">(<expr><call><name pos:line="118" pos:column="24">isspace<pos:position pos:line="118" pos:column="31"/></name><argument_list pos:line="118" pos:column="31">(<argument><expr><operator pos:line="118" pos:column="32">*<pos:position pos:line="118" pos:column="33"/></operator><name pos:line="118" pos:column="33">buf<pos:position pos:line="118" pos:column="36"/></name></expr></argument>)<pos:position pos:line="118" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="118" pos:column="38"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="119" pos:column="25">buf<pos:position pos:line="119" pos:column="28"/></name><operator pos:line="119" pos:column="28">++<pos:position pos:line="119" pos:column="30"/></operator></expr>;<pos:position pos:line="119" pos:column="31"/></expr_stmt></block></while>

		<expr_stmt><expr><call><name pos:line="121" pos:column="17">strbuf_reset<pos:position pos:line="121" pos:column="29"/></name><argument_list pos:line="121" pos:column="29">(<argument><expr><name pos:line="121" pos:column="30">referent<pos:position pos:line="121" pos:column="38"/></name></expr></argument>)<pos:position pos:line="121" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="122" pos:column="17">strbuf_addstr<pos:position pos:line="122" pos:column="30"/></name><argument_list pos:line="122" pos:column="30">(<argument><expr><name pos:line="122" pos:column="31">referent<pos:position pos:line="122" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="41">buf<pos:position pos:line="122" pos:column="44"/></name></expr></argument>)<pos:position pos:line="122" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="123" pos:column="17">*<pos:position pos:line="123" pos:column="18"/></operator><name pos:line="123" pos:column="18">type<pos:position pos:line="123" pos:column="22"/></name> <operator pos:line="123" pos:column="23">|=<pos:position pos:line="123" pos:column="25"/></operator> <name pos:line="123" pos:column="26">REF_ISSYMREF<pos:position pos:line="123" pos:column="38"/></name></expr>;<pos:position pos:line="123" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name pos:line="124" pos:column="17">ret<pos:position pos:line="124" pos:column="20"/></name> <operator pos:line="124" pos:column="21">=<pos:position pos:line="124" pos:column="22"/></operator> <literal type="number" pos:line="124" pos:column="23">0<pos:position pos:line="124" pos:column="24"/></literal></expr>;<pos:position pos:line="124" pos:column="25"/></expr_stmt>
		<goto pos:line="125" pos:column="17">goto <name pos:line="125" pos:column="22">out<pos:position pos:line="125" pos:column="25"/></name>;<pos:position pos:line="125" pos:column="26"/></goto>
	}<pos:position pos:line="126" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="128" pos:column="9">/*
	 * Please note that FETCH_HEAD has additional
	 * data after the sha.
	 */</comment>
	<if pos:line="132" pos:column="9">if <condition pos:line="132" pos:column="12">(<expr><call><name pos:line="132" pos:column="13">get_sha1_hex<pos:position pos:line="132" pos:column="25"/></name><argument_list pos:line="132" pos:column="25">(<argument><expr><name pos:line="132" pos:column="26">buf<pos:position pos:line="132" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="31">sha1<pos:position pos:line="132" pos:column="35"/></name></expr></argument>)<pos:position pos:line="132" pos:column="36"/></argument_list></call> <operator pos:line="132" pos:column="37">||<pos:position pos:line="132" pos:column="39"/></operator>
	    <operator pos:line="133" pos:column="13">(<pos:position pos:line="133" pos:column="14"/></operator><name><name pos:line="133" pos:column="14">buf<pos:position pos:line="133" pos:column="17"/></name><index pos:line="133" pos:column="17">[<expr><literal type="number" pos:line="133" pos:column="18">40<pos:position pos:line="133" pos:column="20"/></literal></expr>]<pos:position pos:line="133" pos:column="21"/></index></name> <operator pos:line="133" pos:column="22">!=<pos:position pos:line="133" pos:column="24"/></operator> <literal type="char" pos:line="133" pos:column="25">'\0'<pos:position pos:line="133" pos:column="29"/></literal> <operator pos:line="133" pos:column="30">&amp;&amp;<pos:position pos:line="133" pos:column="40"/></operator> <operator pos:line="133" pos:column="33">!<pos:position pos:line="133" pos:column="34"/></operator><call><name pos:line="133" pos:column="34">isspace<pos:position pos:line="133" pos:column="41"/></name><argument_list pos:line="133" pos:column="41">(<argument><expr><name><name pos:line="133" pos:column="42">buf<pos:position pos:line="133" pos:column="45"/></name><index pos:line="133" pos:column="45">[<expr><literal type="number" pos:line="133" pos:column="46">40<pos:position pos:line="133" pos:column="48"/></literal></expr>]<pos:position pos:line="133" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="133" pos:column="50"/></argument_list></call><operator pos:line="133" pos:column="50">)<pos:position pos:line="133" pos:column="51"/></operator></expr>)<pos:position pos:line="133" pos:column="52"/></condition><then pos:line="133" pos:column="52"> <block pos:line="133" pos:column="53">{
		<expr_stmt><expr><operator pos:line="134" pos:column="17">*<pos:position pos:line="134" pos:column="18"/></operator><name pos:line="134" pos:column="18">type<pos:position pos:line="134" pos:column="22"/></name> <operator pos:line="134" pos:column="23">|=<pos:position pos:line="134" pos:column="25"/></operator> <name pos:line="134" pos:column="26">REF_ISBROKEN<pos:position pos:line="134" pos:column="38"/></name></expr>;<pos:position pos:line="134" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name pos:line="135" pos:column="17">errno<pos:position pos:line="135" pos:column="22"/></name> <operator pos:line="135" pos:column="23">=<pos:position pos:line="135" pos:column="24"/></operator> <name pos:line="135" pos:column="25">EINVAL<pos:position pos:line="135" pos:column="31"/></name></expr>;<pos:position pos:line="135" pos:column="32"/></expr_stmt>
		<goto pos:line="136" pos:column="17">goto <name pos:line="136" pos:column="22">out<pos:position pos:line="136" pos:column="25"/></name>;<pos:position pos:line="136" pos:column="26"/></goto>
	}<pos:position pos:line="137" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="139" pos:column="9">ret<pos:position pos:line="139" pos:column="12"/></name> <operator pos:line="139" pos:column="13">=<pos:position pos:line="139" pos:column="14"/></operator> <literal type="number" pos:line="139" pos:column="15">0<pos:position pos:line="139" pos:column="16"/></literal></expr>;<pos:position pos:line="139" pos:column="17"/></expr_stmt>

<label><name pos:line="141" pos:column="1">out<pos:position pos:line="141" pos:column="4"/></name>:<pos:position pos:line="141" pos:column="5"/></label>
	<expr_stmt><expr><name pos:line="142" pos:column="9">save_errno<pos:position pos:line="142" pos:column="19"/></name> <operator pos:line="142" pos:column="20">=<pos:position pos:line="142" pos:column="21"/></operator> <name pos:line="142" pos:column="22">errno<pos:position pos:line="142" pos:column="27"/></name></expr>;<pos:position pos:line="142" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="143" pos:column="9">strbuf_release<pos:position pos:line="143" pos:column="23"/></name><argument_list pos:line="143" pos:column="23">(<argument><expr><operator pos:line="143" pos:column="24">&amp;<pos:position pos:line="143" pos:column="29"/></operator><name pos:line="143" pos:column="25">sb_path<pos:position pos:line="143" pos:column="32"/></name></expr></argument>)<pos:position pos:line="143" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="144" pos:column="9">strbuf_release<pos:position pos:line="144" pos:column="23"/></name><argument_list pos:line="144" pos:column="23">(<argument><expr><operator pos:line="144" pos:column="24">&amp;<pos:position pos:line="144" pos:column="29"/></operator><name pos:line="144" pos:column="25">sb_contents<pos:position pos:line="144" pos:column="36"/></name></expr></argument>)<pos:position pos:line="144" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="145" pos:column="9">errno<pos:position pos:line="145" pos:column="14"/></name> <operator pos:line="145" pos:column="15">=<pos:position pos:line="145" pos:column="16"/></operator> <name pos:line="145" pos:column="17">save_errno<pos:position pos:line="145" pos:column="27"/></name></expr>;<pos:position pos:line="145" pos:column="28"/></expr_stmt>
	<return pos:line="146" pos:column="9">return <expr><name pos:line="146" pos:column="16">ret<pos:position pos:line="146" pos:column="19"/></name></expr>;<pos:position pos:line="146" pos:column="20"/></return>
}<pos:position pos:line="147" pos:column="2"/></block></function></unit>
