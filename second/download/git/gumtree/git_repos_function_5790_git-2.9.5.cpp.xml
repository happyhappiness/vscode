<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5790_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">update_refs_stdin<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">ref_transaction<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">transaction<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">input<pos:position pos:line="3" pos:column="28"/></name> <init pos:line="3" pos:column="29">= <expr><name pos:line="3" pos:column="31">STRBUF_INIT<pos:position pos:line="3" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">next<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">strbuf_read<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><operator pos:line="6" pos:column="25">&amp;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="26">input<pos:position pos:line="6" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="33">0<pos:position pos:line="6" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="36">1000<pos:position pos:line="6" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call> <operator pos:line="6" pos:column="42">&lt;<pos:position pos:line="6" pos:column="46"/></operator> <literal type="number" pos:line="6" pos:column="44">0<pos:position pos:line="6" pos:column="45"/></literal></expr>)<pos:position pos:line="6" pos:column="46"/></condition><then pos:line="6" pos:column="46">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">die_errno<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><literal type="string" pos:line="7" pos:column="27">"could not read from stdin"<pos:position pos:line="7" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="56"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="8" pos:column="9">next<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <name><name pos:line="8" pos:column="16">input<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">.<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">buf<pos:position pos:line="8" pos:column="25"/></name></name></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>
	<comment type="block" pos:line="9" pos:column="9">/* Read each line dispatch its command */</comment>
	<while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><name pos:line="10" pos:column="16">next<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">&lt;<pos:position pos:line="10" pos:column="25"/></operator> <name><name pos:line="10" pos:column="23">input<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">.<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">buf<pos:position pos:line="10" pos:column="32"/></name></name> <operator pos:line="10" pos:column="33">+<pos:position pos:line="10" pos:column="34"/></operator> <name><name pos:line="10" pos:column="35">input<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">.<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="41">len<pos:position pos:line="10" pos:column="44"/></name></name></expr>)<pos:position pos:line="10" pos:column="45"/></condition> <block pos:line="10" pos:column="46">{
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">next<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">==<pos:position pos:line="11" pos:column="29"/></operator> <name pos:line="11" pos:column="30">line_termination<pos:position pos:line="11" pos:column="46"/></name></expr>)<pos:position pos:line="11" pos:column="47"/></condition><then pos:line="11" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">die<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><literal type="string" pos:line="12" pos:column="29">"empty command in input"<pos:position pos:line="12" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt></block></then>
		<elseif pos:line="13" pos:column="17">else <if pos:line="13" pos:column="22">if <condition pos:line="13" pos:column="25">(<expr><call><name pos:line="13" pos:column="26">isspace<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><operator pos:line="13" pos:column="34">*<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="35">next<pos:position pos:line="13" pos:column="39"/></name></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="41"/></condition><then pos:line="13" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="25">die<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><literal type="string" pos:line="14" pos:column="29">"whitespace before command: %s"<pos:position pos:line="14" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="62">next<pos:position pos:line="14" pos:column="66"/></name></expr></argument>)<pos:position pos:line="14" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="68"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="15" pos:column="17">else <if pos:line="15" pos:column="22">if <condition pos:line="15" pos:column="25">(<expr><call><name pos:line="15" pos:column="26">starts_with<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">next<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="44">"update "<pos:position pos:line="15" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="55"/></condition><then pos:line="15" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">next<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">=<pos:position pos:line="16" pos:column="31"/></operator> <call><name pos:line="16" pos:column="32">parse_cmd_update<pos:position pos:line="16" pos:column="48"/></name><argument_list pos:line="16" pos:column="48">(<argument><expr><name pos:line="16" pos:column="49">transaction<pos:position pos:line="16" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="62">&amp;<pos:position pos:line="16" pos:column="67"/></operator><name pos:line="16" pos:column="63">input<pos:position pos:line="16" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="70">next<pos:position pos:line="16" pos:column="74"/></name> <operator pos:line="16" pos:column="75">+<pos:position pos:line="16" pos:column="76"/></operator> <literal type="number" pos:line="16" pos:column="77">7<pos:position pos:line="16" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="80"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="17" pos:column="17">else <if pos:line="17" pos:column="22">if <condition pos:line="17" pos:column="25">(<expr><call><name pos:line="17" pos:column="26">starts_with<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><name pos:line="17" pos:column="38">next<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="44">"create "<pos:position pos:line="17" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="55"/></condition><then pos:line="17" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="25">next<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">=<pos:position pos:line="18" pos:column="31"/></operator> <call><name pos:line="18" pos:column="32">parse_cmd_create<pos:position pos:line="18" pos:column="48"/></name><argument_list pos:line="18" pos:column="48">(<argument><expr><name pos:line="18" pos:column="49">transaction<pos:position pos:line="18" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="62">&amp;<pos:position pos:line="18" pos:column="67"/></operator><name pos:line="18" pos:column="63">input<pos:position pos:line="18" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="70">next<pos:position pos:line="18" pos:column="74"/></name> <operator pos:line="18" pos:column="75">+<pos:position pos:line="18" pos:column="76"/></operator> <literal type="number" pos:line="18" pos:column="77">7<pos:position pos:line="18" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="80"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="19" pos:column="17">else <if pos:line="19" pos:column="22">if <condition pos:line="19" pos:column="25">(<expr><call><name pos:line="19" pos:column="26">starts_with<pos:position pos:line="19" pos:column="37"/></name><argument_list pos:line="19" pos:column="37">(<argument><expr><name pos:line="19" pos:column="38">next<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="44">"delete "<pos:position pos:line="19" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="55"/></condition><then pos:line="19" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="25">next<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">=<pos:position pos:line="20" pos:column="31"/></operator> <call><name pos:line="20" pos:column="32">parse_cmd_delete<pos:position pos:line="20" pos:column="48"/></name><argument_list pos:line="20" pos:column="48">(<argument><expr><name pos:line="20" pos:column="49">transaction<pos:position pos:line="20" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="62">&amp;<pos:position pos:line="20" pos:column="67"/></operator><name pos:line="20" pos:column="63">input<pos:position pos:line="20" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="70">next<pos:position pos:line="20" pos:column="74"/></name> <operator pos:line="20" pos:column="75">+<pos:position pos:line="20" pos:column="76"/></operator> <literal type="number" pos:line="20" pos:column="77">7<pos:position pos:line="20" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="80"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="21" pos:column="17">else <if pos:line="21" pos:column="22">if <condition pos:line="21" pos:column="25">(<expr><call><name pos:line="21" pos:column="26">starts_with<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name pos:line="21" pos:column="38">next<pos:position pos:line="21" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="44">"verify "<pos:position pos:line="21" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="55"/></condition><then pos:line="21" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="25">next<pos:position pos:line="22" pos:column="29"/></name> <operator pos:line="22" pos:column="30">=<pos:position pos:line="22" pos:column="31"/></operator> <call><name pos:line="22" pos:column="32">parse_cmd_verify<pos:position pos:line="22" pos:column="48"/></name><argument_list pos:line="22" pos:column="48">(<argument><expr><name pos:line="22" pos:column="49">transaction<pos:position pos:line="22" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="62">&amp;<pos:position pos:line="22" pos:column="67"/></operator><name pos:line="22" pos:column="63">input<pos:position pos:line="22" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="70">next<pos:position pos:line="22" pos:column="74"/></name> <operator pos:line="22" pos:column="75">+<pos:position pos:line="22" pos:column="76"/></operator> <literal type="number" pos:line="22" pos:column="77">7<pos:position pos:line="22" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="80"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="23" pos:column="17">else <if pos:line="23" pos:column="22">if <condition pos:line="23" pos:column="25">(<expr><call><name pos:line="23" pos:column="26">starts_with<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><name pos:line="23" pos:column="38">next<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="44">"option "<pos:position pos:line="23" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="55"/></condition><then pos:line="23" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="25">next<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">=<pos:position pos:line="24" pos:column="31"/></operator> <call><name pos:line="24" pos:column="32">parse_cmd_option<pos:position pos:line="24" pos:column="48"/></name><argument_list pos:line="24" pos:column="48">(<argument><expr><operator pos:line="24" pos:column="49">&amp;<pos:position pos:line="24" pos:column="54"/></operator><name pos:line="24" pos:column="50">input<pos:position pos:line="24" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="57">next<pos:position pos:line="24" pos:column="61"/></name> <operator pos:line="24" pos:column="62">+<pos:position pos:line="24" pos:column="63"/></operator> <literal type="number" pos:line="24" pos:column="64">7<pos:position pos:line="24" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="67"/></expr_stmt></block></then></if></elseif>
		<else pos:line="25" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="25">die<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><literal type="string" pos:line="26" pos:column="29">"unknown command: %s"<pos:position pos:line="26" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="52">next<pos:position pos:line="26" pos:column="56"/></name></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="58"/></expr_stmt></block></else></if>

		<expr_stmt><expr><name pos:line="28" pos:column="17">next<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">++<pos:position pos:line="28" pos:column="23"/></operator></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="31" pos:column="9">strbuf_release<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><operator pos:line="31" pos:column="24">&amp;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="25">input<pos:position pos:line="31" pos:column="30"/></name></expr></argument>)<pos:position pos:line="31" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
