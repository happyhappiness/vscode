<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_905.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">is_transport_allowed<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">type<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">from_user<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name><name pos:line="3" pos:column="15">struct<pos:position pos:line="3" pos:column="21"/></name> <name pos:line="3" pos:column="22">string_list<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">whitelist<pos:position pos:line="3" pos:column="44"/></name> <init pos:line="3" pos:column="45">= <expr><call><name pos:line="3" pos:column="47">protocol_whitelist<pos:position pos:line="3" pos:column="65"/></name><argument_list pos:line="3" pos:column="65">()<pos:position pos:line="3" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="68"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name pos:line="4" pos:column="13">whitelist<pos:position pos:line="4" pos:column="22"/></name></expr>)<pos:position pos:line="4" pos:column="23"/></condition><then pos:line="4" pos:column="23">
		<block type="pseudo"><return pos:line="5" pos:column="17">return <expr><call><name pos:line="5" pos:column="24">string_list_has_string<pos:position pos:line="5" pos:column="46"/></name><argument_list pos:line="5" pos:column="46">(<argument><expr><name pos:line="5" pos:column="47">whitelist<pos:position pos:line="5" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="58">type<pos:position pos:line="5" pos:column="62"/></name></expr></argument>)<pos:position pos:line="5" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="64"/></return></block></then></if>

	<switch pos:line="7" pos:column="9">switch <condition pos:line="7" pos:column="16">(<expr><call><name pos:line="7" pos:column="17">get_protocol_config<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">type<pos:position pos:line="7" pos:column="41"/></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="43"/></condition> <block pos:line="7" pos:column="44">{
	<case pos:line="8" pos:column="9">case <expr><name pos:line="8" pos:column="14">PROTOCOL_ALLOW_ALWAYS<pos:position pos:line="8" pos:column="35"/></name></expr>:<pos:position pos:line="8" pos:column="36"/></case>
		<return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">1<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return>
	<case pos:line="10" pos:column="9">case <expr><name pos:line="10" pos:column="14">PROTOCOL_ALLOW_NEVER<pos:position pos:line="10" pos:column="34"/></name></expr>:<pos:position pos:line="10" pos:column="35"/></case>
		<return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return>
	<case pos:line="12" pos:column="9">case <expr><name pos:line="12" pos:column="14">PROTOCOL_ALLOW_USER_ONLY<pos:position pos:line="12" pos:column="38"/></name></expr>:<pos:position pos:line="12" pos:column="39"/></case>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">from_user<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">&lt;<pos:position pos:line="13" pos:column="35"/></operator> <literal type="number" pos:line="13" pos:column="33">0<pos:position pos:line="13" pos:column="34"/></literal></expr>)<pos:position pos:line="13" pos:column="35"/></condition><then pos:line="13" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">from_user<pos:position pos:line="14" pos:column="34"/></name> <operator pos:line="14" pos:column="35">=<pos:position pos:line="14" pos:column="36"/></operator> <call><name pos:line="14" pos:column="37">git_env_bool<pos:position pos:line="14" pos:column="49"/></name><argument_list pos:line="14" pos:column="49">(<argument><expr><literal type="string" pos:line="14" pos:column="50">"GIT_PROTOCOL_FROM_USER"<pos:position pos:line="14" pos:column="74"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="76">1<pos:position pos:line="14" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="79"/></expr_stmt></block></then></if>
		<return pos:line="15" pos:column="17">return <expr><name pos:line="15" pos:column="24">from_user<pos:position pos:line="15" pos:column="33"/></name></expr>;<pos:position pos:line="15" pos:column="34"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></switch>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">die<pos:position pos:line="18" pos:column="12"/></name><argument_list pos:line="18" pos:column="12">(<argument><expr><literal type="string" pos:line="18" pos:column="13">"BUG: invalid protocol_allow_config type"<pos:position pos:line="18" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
