<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1876_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">read_pack_info_file<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">infofile<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">FILE<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">fp<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">line<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><literal type="number" pos:line="4" pos:column="19">1000<pos:position pos:line="4" pos:column="23"/></literal></expr>]<pos:position pos:line="4" pos:column="24"/></index></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">old_cnt<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><literal type="number" pos:line="5" pos:column="23">0<pos:position pos:line="5" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">fp<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">fopen_or_warn<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">infofile<pos:position pos:line="7" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="38">"r"<pos:position pos:line="7" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="43"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">fp<pos:position pos:line="8" pos:column="16"/></name></expr>)<pos:position pos:line="8" pos:column="17"/></condition><then pos:line="8" pos:column="17">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">1<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if> <comment type="block" pos:line="9" pos:column="27">/* nonexistent is not an error. */</comment>

	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><call><name pos:line="11" pos:column="16">fgets<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">line<pos:position pos:line="11" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="28">sizeof<argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">line<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="11" pos:column="42">fp<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="46"/></condition> <block pos:line="11" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">int<pos:position pos:line="12" pos:column="20"/></name></type> <name pos:line="12" pos:column="21">len<pos:position pos:line="12" pos:column="24"/></name> <init pos:line="12" pos:column="25">= <expr><call><name pos:line="12" pos:column="27">strlen<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">line<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="40"/></decl_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">len<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">&amp;&amp;<pos:position pos:line="13" pos:column="35"/></operator> <name><name pos:line="13" pos:column="28">line<pos:position pos:line="13" pos:column="32"/></name><index pos:line="13" pos:column="32">[<expr><name pos:line="13" pos:column="33">len<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">-<pos:position pos:line="13" pos:column="37"/></operator><literal type="number" pos:line="13" pos:column="37">1<pos:position pos:line="13" pos:column="38"/></literal></expr>]<pos:position pos:line="13" pos:column="39"/></index></name> <operator pos:line="13" pos:column="40">==<pos:position pos:line="13" pos:column="42"/></operator> <literal type="char" pos:line="13" pos:column="43">'\n'<pos:position pos:line="13" pos:column="47"/></literal></expr>)<pos:position pos:line="13" pos:column="48"/></condition><then pos:line="13" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="14" pos:column="25">line<pos:position pos:line="14" pos:column="29"/></name><index pos:line="14" pos:column="29">[<expr><operator pos:line="14" pos:column="30">--<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">len<pos:position pos:line="14" pos:column="35"/></name></expr>]<pos:position pos:line="14" pos:column="36"/></index></name> <operator pos:line="14" pos:column="37">=<pos:position pos:line="14" pos:column="38"/></operator> <literal type="number" pos:line="14" pos:column="39">0<pos:position pos:line="14" pos:column="40"/></literal></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt></block></then></if>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">len<pos:position pos:line="16" pos:column="25"/></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26">
			<block type="pseudo"><continue pos:line="17" pos:column="25">continue;<pos:position pos:line="17" pos:column="34"/></continue></block></then></if>

		<switch pos:line="19" pos:column="17">switch <condition pos:line="19" pos:column="24">(<expr><name><name pos:line="19" pos:column="25">line<pos:position pos:line="19" pos:column="29"/></name><index pos:line="19" pos:column="29">[<expr><literal type="number" pos:line="19" pos:column="30">0<pos:position pos:line="19" pos:column="31"/></literal></expr>]<pos:position pos:line="19" pos:column="32"/></index></name></expr>)<pos:position pos:line="19" pos:column="33"/></condition> <block pos:line="19" pos:column="34">{
		<case pos:line="20" pos:column="17">case <expr><literal type="char" pos:line="20" pos:column="22">'P'<pos:position pos:line="20" pos:column="25"/></literal></expr>:<pos:position pos:line="20" pos:column="26"/></case> <comment type="block" pos:line="20" pos:column="27">/* P name */</comment>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><call><name pos:line="21" pos:column="29">parse_pack_def<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">line<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">old_cnt<pos:position pos:line="21" pos:column="57"/></name><operator pos:line="21" pos:column="57">++<pos:position pos:line="21" pos:column="59"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="61"/></condition><then pos:line="21" pos:column="61">
				<block type="pseudo"><goto pos:line="22" pos:column="33">goto <name pos:line="22" pos:column="38">out_stale<pos:position pos:line="22" pos:column="47"/></name>;<pos:position pos:line="22" pos:column="48"/></goto></block></then></if>
			<break pos:line="23" pos:column="25">break;<pos:position pos:line="23" pos:column="31"/></break>
		<case pos:line="24" pos:column="17">case <expr><literal type="char" pos:line="24" pos:column="22">'D'<pos:position pos:line="24" pos:column="25"/></literal></expr>:<pos:position pos:line="24" pos:column="26"/></case> <comment type="block" pos:line="24" pos:column="27">/* we used to emit D but that was misguided. */</comment>
		<case pos:line="25" pos:column="17">case <expr><literal type="char" pos:line="25" pos:column="22">'T'<pos:position pos:line="25" pos:column="25"/></literal></expr>:<pos:position pos:line="25" pos:column="26"/></case> <comment type="block" pos:line="25" pos:column="27">/* we used to emit T but nobody uses it. */</comment>
			<goto pos:line="26" pos:column="25">goto <name pos:line="26" pos:column="30">out_stale<pos:position pos:line="26" pos:column="39"/></name>;<pos:position pos:line="26" pos:column="40"/></goto>
		<default pos:line="27" pos:column="17">default:<pos:position pos:line="27" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">error<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><literal type="string" pos:line="28" pos:column="31">"unrecognized: %s"<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="51">line<pos:position pos:line="28" pos:column="55"/></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt>
			<break pos:line="29" pos:column="25">break;<pos:position pos:line="29" pos:column="31"/></break>
		}<pos:position pos:line="30" pos:column="18"/></block></switch>
	}<pos:position pos:line="31" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">fclose<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><name pos:line="32" pos:column="16">fp<pos:position pos:line="32" pos:column="18"/></name></expr></argument>)<pos:position pos:line="32" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt>
	<return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
 <label><name pos:line="34" pos:column="2">out_stale<pos:position pos:line="34" pos:column="11"/></name>:<pos:position pos:line="34" pos:column="12"/></label>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">fclose<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">fp<pos:position pos:line="35" pos:column="18"/></name></expr></argument>)<pos:position pos:line="35" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
	<return pos:line="36" pos:column="9">return <expr><literal type="number" pos:line="36" pos:column="16">1<pos:position pos:line="36" pos:column="17"/></literal></expr>;<pos:position pos:line="36" pos:column="18"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
