<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3579_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">find_conflict<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">string_list<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conflict<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><call><name pos:line="4" pos:column="13">read_cache<pos:position pos:line="4" pos:column="23"/></name><argument_list pos:line="4" pos:column="23">()<pos:position pos:line="4" pos:column="25"/></argument_list></call> <operator pos:line="4" pos:column="26">&lt;<pos:position pos:line="4" pos:column="30"/></operator> <literal type="number" pos:line="4" pos:column="28">0<pos:position pos:line="4" pos:column="29"/></literal></expr>)<pos:position pos:line="4" pos:column="30"/></condition><then pos:line="4" pos:column="30">
		<block type="pseudo"><return pos:line="5" pos:column="17">return <expr><call><name pos:line="5" pos:column="24">error<pos:position pos:line="5" pos:column="29"/></name><argument_list pos:line="5" pos:column="29">(<argument><expr><literal type="string" pos:line="5" pos:column="30">"Could not read index"<pos:position pos:line="5" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="54"/></return></block></then></if>

	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init><expr><name pos:line="7" pos:column="14">i<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr>;<pos:position pos:line="7" pos:column="20"/></init> <condition><expr><name pos:line="7" pos:column="21">i<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&lt;<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="25">active_nr<pos:position pos:line="7" pos:column="34"/></name></expr>;<pos:position pos:line="7" pos:column="35"/></condition><incr/>)<pos:position pos:line="7" pos:column="36"/></control> <block pos:line="7" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">conflict_type<pos:position pos:line="8" pos:column="34"/></name></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="9" pos:column="17">const<pos:position pos:line="9" pos:column="22"/></specifier> <name><name pos:line="9" pos:column="23">struct<pos:position pos:line="9" pos:column="29"/></name> <name pos:line="9" pos:column="30">cache_entry<pos:position pos:line="9" pos:column="41"/></name></name> <modifier pos:line="9" pos:column="42">*<pos:position pos:line="9" pos:column="43"/></modifier></type><name pos:line="9" pos:column="43">e<pos:position pos:line="9" pos:column="44"/></name> <init pos:line="9" pos:column="45">= <expr><name><name pos:line="9" pos:column="47">active_cache<pos:position pos:line="9" pos:column="59"/></name><index pos:line="9" pos:column="59">[<expr><name pos:line="9" pos:column="60">i<pos:position pos:line="9" pos:column="61"/></name></expr>]<pos:position pos:line="9" pos:column="62"/></index></name></expr></init></decl>;<pos:position pos:line="9" pos:column="63"/></decl_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">i<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">check_one_conflict<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><name pos:line="10" pos:column="40">i<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="43">&amp;<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="44">conflict_type<pos:position pos:line="10" pos:column="57"/></name></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">conflict_type<pos:position pos:line="11" pos:column="34"/></name> <operator pos:line="11" pos:column="35">==<pos:position pos:line="11" pos:column="37"/></operator> <name pos:line="11" pos:column="38">THREE_STAGED<pos:position pos:line="11" pos:column="50"/></name></expr>)<pos:position pos:line="11" pos:column="51"/></condition><then pos:line="11" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">string_list_insert<pos:position pos:line="12" pos:column="43"/></name><argument_list pos:line="12" pos:column="43">(<argument><expr><name pos:line="12" pos:column="44">conflict<pos:position pos:line="12" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="54">(<pos:position pos:line="12" pos:column="55"/></operator><specifier pos:line="12" pos:column="55">const<pos:position pos:line="12" pos:column="60"/></specifier> <name pos:line="12" pos:column="61">char<pos:position pos:line="12" pos:column="65"/></name> <operator pos:line="12" pos:column="66">*<pos:position pos:line="12" pos:column="67"/></operator><operator pos:line="12" pos:column="67">)<pos:position pos:line="12" pos:column="68"/></operator><name><name pos:line="12" pos:column="68">e<pos:position pos:line="12" pos:column="69"/></name><operator pos:line="12" pos:column="69">-&gt;<pos:position pos:line="12" pos:column="74"/></operator><name pos:line="12" pos:column="71">name<pos:position pos:line="12" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="77"/></expr_stmt></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></for>
	<return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
