<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2232.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parse_submodule_config_option<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">var<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">value<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">string_list_item<pos:position pos:line="3" pos:column="32"/></name></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">config<pos:position pos:line="3" pos:column="40"/></name></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">name<pos:position pos:line="4" pos:column="25"/></name></decl>, <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="28">key<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">namelen<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">parse_config_key<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><name pos:line="7" pos:column="30">var<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="35">"submodule"<pos:position pos:line="7" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="7" pos:column="48">&amp;<pos:position pos:line="7" pos:column="53"/></operator><name pos:line="7" pos:column="49">name<pos:position pos:line="7" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="55">&amp;<pos:position pos:line="7" pos:column="60"/></operator><name pos:line="7" pos:column="56">namelen<pos:position pos:line="7" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="65">&amp;<pos:position pos:line="7" pos:column="70"/></operator><name pos:line="7" pos:column="66">key<pos:position pos:line="7" pos:column="69"/></name></expr></argument>)<pos:position pos:line="7" pos:column="70"/></argument_list></call> <operator pos:line="7" pos:column="71">&lt;<pos:position pos:line="7" pos:column="75"/></operator> <literal type="number" pos:line="7" pos:column="73">0<pos:position pos:line="7" pos:column="74"/></literal> <operator pos:line="7" pos:column="75">||<pos:position pos:line="7" pos:column="77"/></operator> <operator pos:line="7" pos:column="78">!<pos:position pos:line="7" pos:column="79"/></operator><name pos:line="7" pos:column="79">name<pos:position pos:line="7" pos:column="83"/></name></expr>)<pos:position pos:line="7" pos:column="84"/></condition><then pos:line="7" pos:column="84">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr>;<pos:position pos:line="8" pos:column="26"/></return></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><call><name pos:line="10" pos:column="14">strcmp<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">key<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="26">"path"<pos:position pos:line="10" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34"> <block pos:line="10" pos:column="35">{
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">value<pos:position pos:line="11" pos:column="27"/></name></expr>)<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28">
			<block type="pseudo"><return pos:line="12" pos:column="25">return <expr><call><name pos:line="12" pos:column="32">config_error_nonbool<pos:position pos:line="12" pos:column="52"/></name><argument_list pos:line="12" pos:column="52">(<argument><expr><name pos:line="12" pos:column="53">var<pos:position pos:line="12" pos:column="56"/></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></return></block></then></if>

		<expr_stmt><expr><name pos:line="14" pos:column="17">config<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <call><name pos:line="14" pos:column="26">unsorted_string_list_lookup<pos:position pos:line="14" pos:column="53"/></name><argument_list pos:line="14" pos:column="53">(<argument><expr><operator pos:line="14" pos:column="54">&amp;<pos:position pos:line="14" pos:column="59"/></operator><name pos:line="14" pos:column="55">config_name_for_path<pos:position pos:line="14" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="77">value<pos:position pos:line="14" pos:column="82"/></name></expr></argument>)<pos:position pos:line="14" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="84"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">config<pos:position pos:line="15" pos:column="27"/></name></expr>)<pos:position pos:line="15" pos:column="28"/></condition><then pos:line="15" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">free<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name><name pos:line="16" pos:column="30">config<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">-&gt;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="38">util<pos:position pos:line="16" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt></block></then>
		<else pos:line="17" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="25">config<pos:position pos:line="18" pos:column="31"/></name> <operator pos:line="18" pos:column="32">=<pos:position pos:line="18" pos:column="33"/></operator> <call><name pos:line="18" pos:column="34">string_list_append<pos:position pos:line="18" pos:column="52"/></name><argument_list pos:line="18" pos:column="52">(<argument><expr><operator pos:line="18" pos:column="53">&amp;<pos:position pos:line="18" pos:column="58"/></operator><name pos:line="18" pos:column="54">config_name_for_path<pos:position pos:line="18" pos:column="74"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="76">xstrdup<pos:position pos:line="18" pos:column="83"/></name><argument_list pos:line="18" pos:column="83">(<argument><expr><name pos:line="18" pos:column="84">value<pos:position pos:line="18" pos:column="89"/></name></expr></argument>)<pos:position pos:line="18" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="92"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name><name pos:line="19" pos:column="17">config<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">-&gt;<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="25">util<pos:position pos:line="19" pos:column="29"/></name></name> <operator pos:line="19" pos:column="30">=<pos:position pos:line="19" pos:column="31"/></operator> <call><name pos:line="19" pos:column="32">xmemdupz<pos:position pos:line="19" pos:column="40"/></name><argument_list pos:line="19" pos:column="40">(<argument><expr><name pos:line="19" pos:column="41">name<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="47">namelen<pos:position pos:line="19" pos:column="54"/></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="56"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then> <elseif pos:line="20" pos:column="11">else <if pos:line="20" pos:column="16">if <condition pos:line="20" pos:column="19">(<expr><operator pos:line="20" pos:column="20">!<pos:position pos:line="20" pos:column="21"/></operator><call><name pos:line="20" pos:column="21">strcmp<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name pos:line="20" pos:column="28">key<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="33">"fetchrecursesubmodules"<pos:position pos:line="20" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="59"/></condition><then pos:line="20" pos:column="59"> <block pos:line="20" pos:column="60">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">char<pos:position pos:line="21" pos:column="21"/></name> <modifier pos:line="21" pos:column="22">*<pos:position pos:line="21" pos:column="23"/></modifier></type><name pos:line="21" pos:column="23">name_cstr<pos:position pos:line="21" pos:column="32"/></name> <init pos:line="21" pos:column="33">= <expr><call><name pos:line="21" pos:column="35">xmemdupz<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">name<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">namelen<pos:position pos:line="21" pos:column="57"/></name></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="59"/></decl_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">config<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <call><name pos:line="22" pos:column="26">unsorted_string_list_lookup<pos:position pos:line="22" pos:column="53"/></name><argument_list pos:line="22" pos:column="53">(<argument><expr><operator pos:line="22" pos:column="54">&amp;<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="55">config_fetch_recurse_submodules_for_name<pos:position pos:line="22" pos:column="95"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="97">name_cstr<pos:position pos:line="22" pos:column="106"/></name></expr></argument>)<pos:position pos:line="22" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="108"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">!<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">config<pos:position pos:line="23" pos:column="28"/></name></expr>)<pos:position pos:line="23" pos:column="29"/></condition><then pos:line="23" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="25">config<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <call><name pos:line="24" pos:column="34">string_list_append<pos:position pos:line="24" pos:column="52"/></name><argument_list pos:line="24" pos:column="52">(<argument><expr><operator pos:line="24" pos:column="53">&amp;<pos:position pos:line="24" pos:column="58"/></operator><name pos:line="24" pos:column="54">config_fetch_recurse_submodules_for_name<pos:position pos:line="24" pos:column="94"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="96">name_cstr<pos:position pos:line="24" pos:column="105"/></name></expr></argument>)<pos:position pos:line="24" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="107"/></expr_stmt></block></then>
		<else pos:line="25" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="25">free<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">name_cstr<pos:position pos:line="26" pos:column="39"/></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name><name pos:line="27" pos:column="17">config<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">-&gt;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="25">util<pos:position pos:line="27" pos:column="29"/></name></name> <operator pos:line="27" pos:column="30">=<pos:position pos:line="27" pos:column="31"/></operator> <operator pos:line="27" pos:column="32">(<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="33">void<pos:position pos:line="27" pos:column="37"/></name> <operator pos:line="27" pos:column="38">*<pos:position pos:line="27" pos:column="39"/></operator><operator pos:line="27" pos:column="39">)<pos:position pos:line="27" pos:column="40"/></operator><operator pos:line="27" pos:column="40">(<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="41">intptr_t<pos:position pos:line="27" pos:column="49"/></name><operator pos:line="27" pos:column="49">)<pos:position pos:line="27" pos:column="50"/></operator><call><name pos:line="27" pos:column="50">parse_fetch_recurse_submodules_arg<pos:position pos:line="27" pos:column="84"/></name><argument_list pos:line="27" pos:column="84">(<argument><expr><name pos:line="27" pos:column="85">var<pos:position pos:line="27" pos:column="88"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="90">value<pos:position pos:line="27" pos:column="95"/></name></expr></argument>)<pos:position pos:line="27" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="97"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if></elseif> <elseif pos:line="28" pos:column="11">else <if pos:line="28" pos:column="16">if <condition pos:line="28" pos:column="19">(<expr><operator pos:line="28" pos:column="20">!<pos:position pos:line="28" pos:column="21"/></operator><call><name pos:line="28" pos:column="21">strcmp<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><name pos:line="28" pos:column="28">key<pos:position pos:line="28" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="33">"ignore"<pos:position pos:line="28" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="43"/></condition><then pos:line="28" pos:column="43"> <block pos:line="28" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="29" pos:column="17">char<pos:position pos:line="29" pos:column="21"/></name> <modifier pos:line="29" pos:column="22">*<pos:position pos:line="29" pos:column="23"/></modifier></type><name pos:line="29" pos:column="23">name_cstr<pos:position pos:line="29" pos:column="32"/></name></decl>;<pos:position pos:line="29" pos:column="33"/></decl_stmt>

		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><operator pos:line="31" pos:column="21">!<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">value<pos:position pos:line="31" pos:column="27"/></name></expr>)<pos:position pos:line="31" pos:column="28"/></condition><then pos:line="31" pos:column="28">
			<block type="pseudo"><return pos:line="32" pos:column="25">return <expr><call><name pos:line="32" pos:column="32">config_error_nonbool<pos:position pos:line="32" pos:column="52"/></name><argument_list pos:line="32" pos:column="52">(<argument><expr><name pos:line="32" pos:column="53">var<pos:position pos:line="32" pos:column="56"/></name></expr></argument>)<pos:position pos:line="32" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="58"/></return></block></then></if>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">strcmp<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">value<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="35">"untracked"<pos:position pos:line="34" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call> <operator pos:line="34" pos:column="48">&amp;&amp;<pos:position pos:line="34" pos:column="58"/></operator> <call><name pos:line="34" pos:column="51">strcmp<pos:position pos:line="34" pos:column="57"/></name><argument_list pos:line="34" pos:column="57">(<argument><expr><name pos:line="34" pos:column="58">value<pos:position pos:line="34" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="65">"dirty"<pos:position pos:line="34" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="73"/></argument_list></call> <operator pos:line="34" pos:column="74">&amp;&amp;<pos:position pos:line="34" pos:column="84"/></operator>
		    <call><name pos:line="35" pos:column="21">strcmp<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">value<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="35">"all"<pos:position pos:line="35" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call> <operator pos:line="35" pos:column="42">&amp;&amp;<pos:position pos:line="35" pos:column="52"/></operator> <call><name pos:line="35" pos:column="45">strcmp<pos:position pos:line="35" pos:column="51"/></name><argument_list pos:line="35" pos:column="51">(<argument><expr><name pos:line="35" pos:column="52">value<pos:position pos:line="35" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="59">"none"<pos:position pos:line="35" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="67"/></condition><then pos:line="35" pos:column="67"> <block pos:line="35" pos:column="68">{
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">warning<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><literal type="string" pos:line="36" pos:column="33">"Invalid parameter \"%s\" for config option \"submodule.%s.ignore\""<pos:position pos:line="36" pos:column="101"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="103">value<pos:position pos:line="36" pos:column="108"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="110">var<pos:position pos:line="36" pos:column="113"/></name></expr></argument>)<pos:position pos:line="36" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="115"/></expr_stmt>
			<return pos:line="37" pos:column="25">return <expr><literal type="number" pos:line="37" pos:column="32">0<pos:position pos:line="37" pos:column="33"/></literal></expr>;<pos:position pos:line="37" pos:column="34"/></return>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="40" pos:column="17">name_cstr<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">=<pos:position pos:line="40" pos:column="28"/></operator> <call><name pos:line="40" pos:column="29">xmemdupz<pos:position pos:line="40" pos:column="37"/></name><argument_list pos:line="40" pos:column="37">(<argument><expr><name pos:line="40" pos:column="38">name<pos:position pos:line="40" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="44">namelen<pos:position pos:line="40" pos:column="51"/></name></expr></argument>)<pos:position pos:line="40" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">config<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">=<pos:position pos:line="41" pos:column="25"/></operator> <call><name pos:line="41" pos:column="26">unsorted_string_list_lookup<pos:position pos:line="41" pos:column="53"/></name><argument_list pos:line="41" pos:column="53">(<argument><expr><operator pos:line="41" pos:column="54">&amp;<pos:position pos:line="41" pos:column="59"/></operator><name pos:line="41" pos:column="55">config_ignore_for_name<pos:position pos:line="41" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="79">name_cstr<pos:position pos:line="41" pos:column="88"/></name></expr></argument>)<pos:position pos:line="41" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="90"/></expr_stmt>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">config<pos:position pos:line="42" pos:column="27"/></name></expr>)<pos:position pos:line="42" pos:column="28"/></condition><then pos:line="42" pos:column="28"> <block pos:line="42" pos:column="29">{
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">free<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><name><name pos:line="43" pos:column="30">config<pos:position pos:line="43" pos:column="36"/></name><operator pos:line="43" pos:column="36">-&gt;<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="38">util<pos:position pos:line="43" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">free<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">name_cstr<pos:position pos:line="44" pos:column="39"/></name></expr></argument>)<pos:position pos:line="44" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="45" pos:column="18"/></block></then> <else pos:line="45" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="25">config<pos:position pos:line="46" pos:column="31"/></name> <operator pos:line="46" pos:column="32">=<pos:position pos:line="46" pos:column="33"/></operator> <call><name pos:line="46" pos:column="34">string_list_append<pos:position pos:line="46" pos:column="52"/></name><argument_list pos:line="46" pos:column="52">(<argument><expr><operator pos:line="46" pos:column="53">&amp;<pos:position pos:line="46" pos:column="58"/></operator><name pos:line="46" pos:column="54">config_ignore_for_name<pos:position pos:line="46" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="78">name_cstr<pos:position pos:line="46" pos:column="87"/></name></expr></argument>)<pos:position pos:line="46" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="89"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name><name pos:line="47" pos:column="17">config<pos:position pos:line="47" pos:column="23"/></name><operator pos:line="47" pos:column="23">-&gt;<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="25">util<pos:position pos:line="47" pos:column="29"/></name></name> <operator pos:line="47" pos:column="30">=<pos:position pos:line="47" pos:column="31"/></operator> <call><name pos:line="47" pos:column="32">xstrdup<pos:position pos:line="47" pos:column="39"/></name><argument_list pos:line="47" pos:column="39">(<argument><expr><name pos:line="47" pos:column="40">value<pos:position pos:line="47" pos:column="45"/></name></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt>
		<return pos:line="48" pos:column="17">return <expr><literal type="number" pos:line="48" pos:column="24">0<pos:position pos:line="48" pos:column="25"/></literal></expr>;<pos:position pos:line="48" pos:column="26"/></return>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if></elseif></if>
	<return pos:line="50" pos:column="9">return <expr><literal type="number" pos:line="50" pos:column="16">0<pos:position pos:line="50" pos:column="17"/></literal></expr>;<pos:position pos:line="50" pos:column="18"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
