<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_324_git-2.9.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">add_to_index<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name><name pos:line="1" pos:column="18">struct<pos:position pos:line="1" pos:column="24"/></name> <name pos:line="1" pos:column="25">index_state<pos:position pos:line="1" pos:column="36"/></name></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">istate<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">path<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="64">struct<pos:position pos:line="1" pos:column="70"/></name> <name pos:line="1" pos:column="71">stat<pos:position pos:line="1" pos:column="75"/></name></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">st<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="81">int<pos:position pos:line="1" pos:column="84"/></name></type> <name pos:line="1" pos:column="85">flags<pos:position pos:line="1" pos:column="90"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="92">int<pos:position pos:line="1" pos:column="95"/></name></type> <name pos:line="1" pos:column="96">force_mode<pos:position pos:line="1" pos:column="106"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="107"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">size<pos:position pos:line="3" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="19">namelen<pos:position pos:line="3" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="28">was_same<pos:position pos:line="3" pos:column="36"/></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">mode_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">st_mode<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><name><name pos:line="4" pos:column="26">st<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">-&gt;<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="30">st_mode<pos:position pos:line="4" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">cache_entry<pos:position pos:line="5" pos:column="27"/></name></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">ce<pos:position pos:line="5" pos:column="31"/></name></decl>, <modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="34">alias<pos:position pos:line="5" pos:column="39"/></name></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">ce_option<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name pos:line="6" pos:column="30">CE_MATCH_IGNORE_VALID<pos:position pos:line="6" pos:column="51"/></name><operator pos:line="6" pos:column="51">|<pos:position pos:line="6" pos:column="52"/></operator><name pos:line="6" pos:column="52">CE_MATCH_IGNORE_SKIP_WORKTREE<pos:position pos:line="6" pos:column="81"/></name><operator pos:line="6" pos:column="81">|<pos:position pos:line="6" pos:column="82"/></operator><name pos:line="6" pos:column="82">CE_MATCH_RACY_IS_DIRTY<pos:position pos:line="6" pos:column="104"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="105"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">verbose<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">flags<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">&amp;<pos:position pos:line="7" pos:column="34"/></operator> <operator pos:line="7" pos:column="31">(<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="32">ADD_CACHE_VERBOSE<pos:position pos:line="7" pos:column="49"/></name> <operator pos:line="7" pos:column="50">|<pos:position pos:line="7" pos:column="51"/></operator> <name pos:line="7" pos:column="52">ADD_CACHE_PRETEND<pos:position pos:line="7" pos:column="69"/></name><operator pos:line="7" pos:column="69">)<pos:position pos:line="7" pos:column="70"/></operator></expr></init></decl>;<pos:position pos:line="7" pos:column="71"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">pretend<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><name pos:line="8" pos:column="23">flags<pos:position pos:line="8" pos:column="28"/></name> <operator pos:line="8" pos:column="29">&amp;<pos:position pos:line="8" pos:column="34"/></operator> <name pos:line="8" pos:column="31">ADD_CACHE_PRETEND<pos:position pos:line="8" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">intent_only<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><name pos:line="9" pos:column="27">flags<pos:position pos:line="9" pos:column="32"/></name> <operator pos:line="9" pos:column="33">&amp;<pos:position pos:line="9" pos:column="38"/></operator> <name pos:line="9" pos:column="35">ADD_CACHE_INTENT<pos:position pos:line="9" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">add_option<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><operator pos:line="10" pos:column="26">(<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="27">ADD_CACHE_OK_TO_ADD<pos:position pos:line="10" pos:column="46"/></name><operator pos:line="10" pos:column="46">|<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="47">ADD_CACHE_OK_TO_REPLACE<pos:position pos:line="10" pos:column="70"/></name><operator pos:line="10" pos:column="70">|<pos:position pos:line="10" pos:column="71"/></operator>
			  <operator pos:line="11" pos:column="27">(<pos:position pos:line="11" pos:column="28"/></operator><ternary><condition><expr><name pos:line="11" pos:column="28">intent_only<pos:position pos:line="11" pos:column="39"/></name></expr> ?<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41"> <expr><name pos:line="11" pos:column="42">ADD_CACHE_NEW_ONLY<pos:position pos:line="11" pos:column="60"/></name></expr> <pos:position pos:line="11" pos:column="61"/></then><else pos:line="11" pos:column="61">: <expr><literal type="number" pos:line="11" pos:column="63">0<pos:position pos:line="11" pos:column="64"/></literal></expr></else></ternary><operator pos:line="11" pos:column="64">)<pos:position pos:line="11" pos:column="65"/></operator><operator pos:line="11" pos:column="65">)<pos:position pos:line="11" pos:column="66"/></operator></expr></init></decl>;<pos:position pos:line="11" pos:column="67"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><call><name pos:line="13" pos:column="14">S_ISREG<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">st_mode<pos:position pos:line="13" pos:column="29"/></name></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></call> <operator pos:line="13" pos:column="31">&amp;&amp;<pos:position pos:line="13" pos:column="41"/></operator> <operator pos:line="13" pos:column="34">!<pos:position pos:line="13" pos:column="35"/></operator><call><name pos:line="13" pos:column="35">S_ISLNK<pos:position pos:line="13" pos:column="42"/></name><argument_list pos:line="13" pos:column="42">(<argument><expr><name pos:line="13" pos:column="43">st_mode<pos:position pos:line="13" pos:column="50"/></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call> <operator pos:line="13" pos:column="52">&amp;&amp;<pos:position pos:line="13" pos:column="62"/></operator> <operator pos:line="13" pos:column="55">!<pos:position pos:line="13" pos:column="56"/></operator><call><name pos:line="13" pos:column="56">S_ISDIR<pos:position pos:line="13" pos:column="63"/></name><argument_list pos:line="13" pos:column="63">(<argument><expr><name pos:line="13" pos:column="64">st_mode<pos:position pos:line="13" pos:column="71"/></name></expr></argument>)<pos:position pos:line="13" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="73"/></condition><then pos:line="13" pos:column="73">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><call><name pos:line="14" pos:column="24">error<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><literal type="string" pos:line="14" pos:column="30">"%s: can only add regular files, symbolic links or git-directories"<pos:position pos:line="14" pos:column="97"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="99">path<pos:position pos:line="14" pos:column="103"/></name></expr></argument>)<pos:position pos:line="14" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="105"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">namelen<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <call><name pos:line="16" pos:column="19">strlen<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">path<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">S_ISDIR<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">st_mode<pos:position pos:line="17" pos:column="28"/></name></expr></argument>)<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="30"/></condition><then pos:line="17" pos:column="30"> <block pos:line="17" pos:column="31">{
		<while pos:line="18" pos:column="17">while <condition pos:line="18" pos:column="23">(<expr><name pos:line="18" pos:column="24">namelen<pos:position pos:line="18" pos:column="31"/></name> <operator pos:line="18" pos:column="32">&amp;&amp;<pos:position pos:line="18" pos:column="42"/></operator> <name><name pos:line="18" pos:column="35">path<pos:position pos:line="18" pos:column="39"/></name><index pos:line="18" pos:column="39">[<expr><name pos:line="18" pos:column="40">namelen<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">-<pos:position pos:line="18" pos:column="48"/></operator><literal type="number" pos:line="18" pos:column="48">1<pos:position pos:line="18" pos:column="49"/></literal></expr>]<pos:position pos:line="18" pos:column="50"/></index></name> <operator pos:line="18" pos:column="51">==<pos:position pos:line="18" pos:column="53"/></operator> <literal type="char" pos:line="18" pos:column="54">'/'<pos:position pos:line="18" pos:column="57"/></literal></expr>)<pos:position pos:line="18" pos:column="58"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="25">namelen<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">--<pos:position pos:line="19" pos:column="34"/></operator></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt></block></while>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="21" pos:column="9">size<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">cache_entry_size<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">namelen<pos:position pos:line="21" pos:column="40"/></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">ce<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <call><name pos:line="22" pos:column="14">xcalloc<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><literal type="number" pos:line="22" pos:column="22">1<pos:position pos:line="22" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="25">size<pos:position pos:line="22" pos:column="29"/></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">memcpy<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name><name pos:line="23" pos:column="16">ce<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-&gt;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="20">name<pos:position pos:line="23" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="26">path<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">namelen<pos:position pos:line="23" pos:column="39"/></name></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">ce<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">-&gt;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="13">ce_namelen<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="26">namelen<pos:position pos:line="24" pos:column="33"/></name></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">intent_only<pos:position pos:line="25" pos:column="25"/></name></expr>)<pos:position pos:line="25" pos:column="26"/></condition><then pos:line="25" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">fill_stat_cache_info<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><name pos:line="26" pos:column="38">ce<pos:position pos:line="26" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="42">st<pos:position pos:line="26" pos:column="44"/></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt></block></then>
	<else pos:line="27" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="28" pos:column="17">ce<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">-&gt;<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="21">ce_flags<pos:position pos:line="28" pos:column="29"/></name></name> <operator pos:line="28" pos:column="30">|=<pos:position pos:line="28" pos:column="32"/></operator> <name pos:line="28" pos:column="33">CE_INTENT_TO_ADD<pos:position pos:line="28" pos:column="49"/></name></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt></block></else></if>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">S_ISREG<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">st_mode<pos:position pos:line="30" pos:column="28"/></name></expr></argument>)<pos:position pos:line="30" pos:column="29"/></argument_list></call> <operator pos:line="30" pos:column="30">&amp;&amp;<pos:position pos:line="30" pos:column="40"/></operator> <name pos:line="30" pos:column="33">force_mode<pos:position pos:line="30" pos:column="43"/></name></expr>)<pos:position pos:line="30" pos:column="44"/></condition><then pos:line="30" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="17">ce<pos:position pos:line="31" pos:column="19"/></name><operator pos:line="31" pos:column="19">-&gt;<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="21">ce_mode<pos:position pos:line="31" pos:column="28"/></name></name> <operator pos:line="31" pos:column="29">=<pos:position pos:line="31" pos:column="30"/></operator> <call><name pos:line="31" pos:column="31">create_ce_mode<pos:position pos:line="31" pos:column="45"/></name><argument_list pos:line="31" pos:column="45">(<argument><expr><name pos:line="31" pos:column="46">force_mode<pos:position pos:line="31" pos:column="56"/></name></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="58"/></expr_stmt></block></then>
	<elseif pos:line="32" pos:column="9">else <if pos:line="32" pos:column="14">if <condition pos:line="32" pos:column="17">(<expr><name pos:line="32" pos:column="18">trust_executable_bit<pos:position pos:line="32" pos:column="38"/></name> <operator pos:line="32" pos:column="39">&amp;&amp;<pos:position pos:line="32" pos:column="49"/></operator> <name pos:line="32" pos:column="42">has_symlinks<pos:position pos:line="32" pos:column="54"/></name></expr>)<pos:position pos:line="32" pos:column="55"/></condition><then pos:line="32" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="17">ce<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">-&gt;<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="21">ce_mode<pos:position pos:line="33" pos:column="28"/></name></name> <operator pos:line="33" pos:column="29">=<pos:position pos:line="33" pos:column="30"/></operator> <call><name pos:line="33" pos:column="31">create_ce_mode<pos:position pos:line="33" pos:column="45"/></name><argument_list pos:line="33" pos:column="45">(<argument><expr><name pos:line="33" pos:column="46">st_mode<pos:position pos:line="33" pos:column="53"/></name></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt></block></then></if></elseif>
	<else pos:line="34" pos:column="9">else <block pos:line="34" pos:column="14">{
		<comment type="block" pos:line="35" pos:column="17">/* If there is an existing entry, pick the mode bits and type
		 * from it, otherwise assume unexecutable regular file.
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="38" pos:column="17">struct<pos:position pos:line="38" pos:column="23"/></name> <name pos:line="38" pos:column="24">cache_entry<pos:position pos:line="38" pos:column="35"/></name></name> <modifier pos:line="38" pos:column="36">*<pos:position pos:line="38" pos:column="37"/></modifier></type><name pos:line="38" pos:column="37">ent<pos:position pos:line="38" pos:column="40"/></name></decl>;<pos:position pos:line="38" pos:column="41"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">int<pos:position pos:line="39" pos:column="20"/></name></type> <name pos:line="39" pos:column="21">pos<pos:position pos:line="39" pos:column="24"/></name> <init pos:line="39" pos:column="25">= <expr><call><name pos:line="39" pos:column="27">index_name_pos_also_unmerged<pos:position pos:line="39" pos:column="55"/></name><argument_list pos:line="39" pos:column="55">(<argument><expr><name pos:line="39" pos:column="56">istate<pos:position pos:line="39" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="64">path<pos:position pos:line="39" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="70">namelen<pos:position pos:line="39" pos:column="77"/></name></expr></argument>)<pos:position pos:line="39" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="79"/></decl_stmt>

		<expr_stmt><expr><name pos:line="41" pos:column="17">ent<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">=<pos:position pos:line="41" pos:column="22"/></operator> <ternary><condition><expr><operator pos:line="41" pos:column="23">(<pos:position pos:line="41" pos:column="24"/></operator><literal type="number" pos:line="41" pos:column="24">0<pos:position pos:line="41" pos:column="25"/></literal> <operator pos:line="41" pos:column="26">&lt;=<pos:position pos:line="41" pos:column="31"/></operator> <name pos:line="41" pos:column="29">pos<pos:position pos:line="41" pos:column="32"/></name><operator pos:line="41" pos:column="32">)<pos:position pos:line="41" pos:column="33"/></operator></expr> ?<pos:position pos:line="41" pos:column="35"/></condition><then pos:line="41" pos:column="35"> <expr><name><name pos:line="41" pos:column="36">istate<pos:position pos:line="41" pos:column="42"/></name><operator pos:line="41" pos:column="42">-&gt;<pos:position pos:line="41" pos:column="47"/></operator><name pos:line="41" pos:column="44">cache<pos:position pos:line="41" pos:column="49"/></name><index pos:line="41" pos:column="49">[<expr><name pos:line="41" pos:column="50">pos<pos:position pos:line="41" pos:column="53"/></name></expr>]<pos:position pos:line="41" pos:column="54"/></index></name></expr> <pos:position pos:line="41" pos:column="55"/></then><else pos:line="41" pos:column="55">: <expr><name pos:line="41" pos:column="57">NULL<pos:position pos:line="41" pos:column="61"/></name></expr></else></ternary></expr>;<pos:position pos:line="41" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">ce<pos:position pos:line="42" pos:column="19"/></name><operator pos:line="42" pos:column="19">-&gt;<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="21">ce_mode<pos:position pos:line="42" pos:column="28"/></name></name> <operator pos:line="42" pos:column="29">=<pos:position pos:line="42" pos:column="30"/></operator> <call><name pos:line="42" pos:column="31">ce_mode_from_stat<pos:position pos:line="42" pos:column="48"/></name><argument_list pos:line="42" pos:column="48">(<argument><expr><name pos:line="42" pos:column="49">ent<pos:position pos:line="42" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="54">st_mode<pos:position pos:line="42" pos:column="61"/></name></expr></argument>)<pos:position pos:line="42" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="45" pos:column="9">/* When core.ignorecase=true, determine if a directory of the same name but differing
	 * case already exists within the Git repository.  If it does, ensure the directory
	 * case of the file being added to the repository matches (is folded into) the existing
	 * entry's directory case.
	 */</comment>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">ignore_case<pos:position pos:line="50" pos:column="24"/></name></expr>)<pos:position pos:line="50" pos:column="25"/></condition><then pos:line="50" pos:column="25"> <block pos:line="50" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">adjust_dirname_case<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">(<argument><expr><name pos:line="51" pos:column="37">istate<pos:position pos:line="51" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="45">ce<pos:position pos:line="51" pos:column="47"/></name><operator pos:line="51" pos:column="47">-&gt;<pos:position pos:line="51" pos:column="52"/></operator><name pos:line="51" pos:column="49">name<pos:position pos:line="51" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="55"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="54" pos:column="9">alias<pos:position pos:line="54" pos:column="14"/></name> <operator pos:line="54" pos:column="15">=<pos:position pos:line="54" pos:column="16"/></operator> <call><name pos:line="54" pos:column="17">index_file_exists<pos:position pos:line="54" pos:column="34"/></name><argument_list pos:line="54" pos:column="34">(<argument><expr><name pos:line="54" pos:column="35">istate<pos:position pos:line="54" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="43">ce<pos:position pos:line="54" pos:column="45"/></name><operator pos:line="54" pos:column="45">-&gt;<pos:position pos:line="54" pos:column="50"/></operator><name pos:line="54" pos:column="47">name<pos:position pos:line="54" pos:column="51"/></name></name></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="53">ce_namelen<pos:position pos:line="54" pos:column="63"/></name><argument_list pos:line="54" pos:column="63">(<argument><expr><name pos:line="54" pos:column="64">ce<pos:position pos:line="54" pos:column="66"/></name></expr></argument>)<pos:position pos:line="54" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="54" pos:column="69">ignore_case<pos:position pos:line="54" pos:column="80"/></name></expr></argument>)<pos:position pos:line="54" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="82"/></expr_stmt>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">alias<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">&amp;&amp;<pos:position pos:line="55" pos:column="29"/></operator> <operator pos:line="55" pos:column="22">!<pos:position pos:line="55" pos:column="23"/></operator><call><name pos:line="55" pos:column="23">ce_stage<pos:position pos:line="55" pos:column="31"/></name><argument_list pos:line="55" pos:column="31">(<argument><expr><name pos:line="55" pos:column="32">alias<pos:position pos:line="55" pos:column="37"/></name></expr></argument>)<pos:position pos:line="55" pos:column="38"/></argument_list></call> <operator pos:line="55" pos:column="39">&amp;&amp;<pos:position pos:line="55" pos:column="49"/></operator> <operator pos:line="55" pos:column="42">!<pos:position pos:line="55" pos:column="43"/></operator><call><name pos:line="55" pos:column="43">ie_match_stat<pos:position pos:line="55" pos:column="56"/></name><argument_list pos:line="55" pos:column="56">(<argument><expr><name pos:line="55" pos:column="57">istate<pos:position pos:line="55" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="65">alias<pos:position pos:line="55" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="72">st<pos:position pos:line="55" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="76">ce_option<pos:position pos:line="55" pos:column="85"/></name></expr></argument>)<pos:position pos:line="55" pos:column="86"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="87"/></condition><then pos:line="55" pos:column="87"> <block pos:line="55" pos:column="88">{
		<comment type="block" pos:line="56" pos:column="17">/* Nothing changed, really */</comment>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><operator pos:line="57" pos:column="21">!<pos:position pos:line="57" pos:column="22"/></operator><call><name pos:line="57" pos:column="22">S_ISGITLINK<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><name><name pos:line="57" pos:column="34">alias<pos:position pos:line="57" pos:column="39"/></name><operator pos:line="57" pos:column="39">-&gt;<pos:position pos:line="57" pos:column="44"/></operator><name pos:line="57" pos:column="41">ce_mode<pos:position pos:line="57" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="50"/></condition><then pos:line="57" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="25">ce_mark_uptodate<pos:position pos:line="58" pos:column="41"/></name><argument_list pos:line="58" pos:column="41">(<argument><expr><name pos:line="58" pos:column="42">alias<pos:position pos:line="58" pos:column="47"/></name></expr></argument>)<pos:position pos:line="58" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="49"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="59" pos:column="17">alias<pos:position pos:line="59" pos:column="22"/></name><operator pos:line="59" pos:column="22">-&gt;<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="24">ce_flags<pos:position pos:line="59" pos:column="32"/></name></name> <operator pos:line="59" pos:column="33">|=<pos:position pos:line="59" pos:column="35"/></operator> <name pos:line="59" pos:column="36">CE_ADDED<pos:position pos:line="59" pos:column="44"/></name></expr>;<pos:position pos:line="59" pos:column="45"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="61" pos:column="17">free<pos:position pos:line="61" pos:column="21"/></name><argument_list pos:line="61" pos:column="21">(<argument><expr><name pos:line="61" pos:column="22">ce<pos:position pos:line="61" pos:column="24"/></name></expr></argument>)<pos:position pos:line="61" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="26"/></expr_stmt>
		<return pos:line="62" pos:column="17">return <expr><literal type="number" pos:line="62" pos:column="24">0<pos:position pos:line="62" pos:column="25"/></literal></expr>;<pos:position pos:line="62" pos:column="26"/></return>
	}<pos:position pos:line="63" pos:column="10"/></block></then></if>
	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><operator pos:line="64" pos:column="13">!<pos:position pos:line="64" pos:column="14"/></operator><name pos:line="64" pos:column="14">intent_only<pos:position pos:line="64" pos:column="25"/></name></expr>)<pos:position pos:line="64" pos:column="26"/></condition><then pos:line="64" pos:column="26"> <block pos:line="64" pos:column="27">{
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><call><name pos:line="65" pos:column="21">index_path<pos:position pos:line="65" pos:column="31"/></name><argument_list pos:line="65" pos:column="31">(<argument><expr><name><name pos:line="65" pos:column="32">ce<pos:position pos:line="65" pos:column="34"/></name><operator pos:line="65" pos:column="34">-&gt;<pos:position pos:line="65" pos:column="39"/></operator><name pos:line="65" pos:column="36">sha1<pos:position pos:line="65" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="42">path<pos:position pos:line="65" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="48">st<pos:position pos:line="65" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="52">HASH_WRITE_OBJECT<pos:position pos:line="65" pos:column="69"/></name></expr></argument>)<pos:position pos:line="65" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="71"/></condition><then pos:line="65" pos:column="71"> <block pos:line="65" pos:column="72">{
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">free<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">(<argument><expr><name pos:line="66" pos:column="30">ce<pos:position pos:line="66" pos:column="32"/></name></expr></argument>)<pos:position pos:line="66" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="34"/></expr_stmt>
			<return pos:line="67" pos:column="25">return <expr><call><name pos:line="67" pos:column="32">error<pos:position pos:line="67" pos:column="37"/></name><argument_list pos:line="67" pos:column="37">(<argument><expr><literal type="string" pos:line="67" pos:column="38">"unable to index file %s"<pos:position pos:line="67" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="65">path<pos:position pos:line="67" pos:column="69"/></name></expr></argument>)<pos:position pos:line="67" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="71"/></return>
		}<pos:position pos:line="68" pos:column="18"/></block></then></if>
	}<pos:position pos:line="69" pos:column="10"/></block></then> <else pos:line="69" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="17">set_object_name_for_intent_to_add_entry<pos:position pos:line="70" pos:column="56"/></name><argument_list pos:line="70" pos:column="56">(<argument><expr><name pos:line="70" pos:column="57">ce<pos:position pos:line="70" pos:column="59"/></name></expr></argument>)<pos:position pos:line="70" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="61"/></expr_stmt></block></else></if>

	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><name pos:line="72" pos:column="13">ignore_case<pos:position pos:line="72" pos:column="24"/></name> <operator pos:line="72" pos:column="25">&amp;&amp;<pos:position pos:line="72" pos:column="35"/></operator> <name pos:line="72" pos:column="28">alias<pos:position pos:line="72" pos:column="33"/></name> <operator pos:line="72" pos:column="34">&amp;&amp;<pos:position pos:line="72" pos:column="44"/></operator> <call><name pos:line="72" pos:column="37">different_name<pos:position pos:line="72" pos:column="51"/></name><argument_list pos:line="72" pos:column="51">(<argument><expr><name pos:line="72" pos:column="52">ce<pos:position pos:line="72" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="56">alias<pos:position pos:line="72" pos:column="61"/></name></expr></argument>)<pos:position pos:line="72" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="63"/></condition><then pos:line="72" pos:column="63">
		<block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="17">ce<pos:position pos:line="73" pos:column="19"/></name> <operator pos:line="73" pos:column="20">=<pos:position pos:line="73" pos:column="21"/></operator> <call><name pos:line="73" pos:column="22">create_alias_ce<pos:position pos:line="73" pos:column="37"/></name><argument_list pos:line="73" pos:column="37">(<argument><expr><name pos:line="73" pos:column="38">istate<pos:position pos:line="73" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="46">ce<pos:position pos:line="73" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="50">alias<pos:position pos:line="73" pos:column="55"/></name></expr></argument>)<pos:position pos:line="73" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="57"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="74" pos:column="9">ce<pos:position pos:line="74" pos:column="11"/></name><operator pos:line="74" pos:column="11">-&gt;<pos:position pos:line="74" pos:column="16"/></operator><name pos:line="74" pos:column="13">ce_flags<pos:position pos:line="74" pos:column="21"/></name></name> <operator pos:line="74" pos:column="22">|=<pos:position pos:line="74" pos:column="24"/></operator> <name pos:line="74" pos:column="25">CE_ADDED<pos:position pos:line="74" pos:column="33"/></name></expr>;<pos:position pos:line="74" pos:column="34"/></expr_stmt>

	<comment type="block" pos:line="76" pos:column="9">/* It was suspected to be racily clean, but it turns out to be Ok */</comment>
	<expr_stmt><expr><name pos:line="77" pos:column="9">was_same<pos:position pos:line="77" pos:column="17"/></name> <operator pos:line="77" pos:column="18">=<pos:position pos:line="77" pos:column="19"/></operator> <operator pos:line="77" pos:column="20">(<pos:position pos:line="77" pos:column="21"/></operator><name pos:line="77" pos:column="21">alias<pos:position pos:line="77" pos:column="26"/></name> <operator pos:line="77" pos:column="27">&amp;&amp;<pos:position pos:line="77" pos:column="37"/></operator>
		    <operator pos:line="78" pos:column="21">!<pos:position pos:line="78" pos:column="22"/></operator><call><name pos:line="78" pos:column="22">ce_stage<pos:position pos:line="78" pos:column="30"/></name><argument_list pos:line="78" pos:column="30">(<argument><expr><name pos:line="78" pos:column="31">alias<pos:position pos:line="78" pos:column="36"/></name></expr></argument>)<pos:position pos:line="78" pos:column="37"/></argument_list></call> <operator pos:line="78" pos:column="38">&amp;&amp;<pos:position pos:line="78" pos:column="48"/></operator>
		    <operator pos:line="79" pos:column="21">!<pos:position pos:line="79" pos:column="22"/></operator><call><name pos:line="79" pos:column="22">hashcmp<pos:position pos:line="79" pos:column="29"/></name><argument_list pos:line="79" pos:column="29">(<argument><expr><name><name pos:line="79" pos:column="30">alias<pos:position pos:line="79" pos:column="35"/></name><operator pos:line="79" pos:column="35">-&gt;<pos:position pos:line="79" pos:column="40"/></operator><name pos:line="79" pos:column="37">sha1<pos:position pos:line="79" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="43">ce<pos:position pos:line="79" pos:column="45"/></name><operator pos:line="79" pos:column="45">-&gt;<pos:position pos:line="79" pos:column="50"/></operator><name pos:line="79" pos:column="47">sha1<pos:position pos:line="79" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="52"/></argument_list></call> <operator pos:line="79" pos:column="53">&amp;&amp;<pos:position pos:line="79" pos:column="63"/></operator>
		    <name><name pos:line="80" pos:column="21">ce<pos:position pos:line="80" pos:column="23"/></name><operator pos:line="80" pos:column="23">-&gt;<pos:position pos:line="80" pos:column="28"/></operator><name pos:line="80" pos:column="25">ce_mode<pos:position pos:line="80" pos:column="32"/></name></name> <operator pos:line="80" pos:column="33">==<pos:position pos:line="80" pos:column="35"/></operator> <name><name pos:line="80" pos:column="36">alias<pos:position pos:line="80" pos:column="41"/></name><operator pos:line="80" pos:column="41">-&gt;<pos:position pos:line="80" pos:column="46"/></operator><name pos:line="80" pos:column="43">ce_mode<pos:position pos:line="80" pos:column="50"/></name></name><operator pos:line="80" pos:column="50">)<pos:position pos:line="80" pos:column="51"/></operator></expr>;<pos:position pos:line="80" pos:column="52"/></expr_stmt>

	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">pretend<pos:position pos:line="82" pos:column="20"/></name></expr>)<pos:position pos:line="82" pos:column="21"/></condition><then pos:line="82" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="17">free<pos:position pos:line="83" pos:column="21"/></name><argument_list pos:line="83" pos:column="21">(<argument><expr><name pos:line="83" pos:column="22">ce<pos:position pos:line="83" pos:column="24"/></name></expr></argument>)<pos:position pos:line="83" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="26"/></expr_stmt></block></then>
	<elseif pos:line="84" pos:column="9">else <if pos:line="84" pos:column="14">if <condition pos:line="84" pos:column="17">(<expr><call><name pos:line="84" pos:column="18">add_index_entry<pos:position pos:line="84" pos:column="33"/></name><argument_list pos:line="84" pos:column="33">(<argument><expr><name pos:line="84" pos:column="34">istate<pos:position pos:line="84" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="42">ce<pos:position pos:line="84" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="46">add_option<pos:position pos:line="84" pos:column="56"/></name></expr></argument>)<pos:position pos:line="84" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="58"/></condition><then pos:line="84" pos:column="58"> <block pos:line="84" pos:column="59">{
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">free<pos:position pos:line="85" pos:column="21"/></name><argument_list pos:line="85" pos:column="21">(<argument><expr><name pos:line="85" pos:column="22">ce<pos:position pos:line="85" pos:column="24"/></name></expr></argument>)<pos:position pos:line="85" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="26"/></expr_stmt>
		<return pos:line="86" pos:column="17">return <expr><call><name pos:line="86" pos:column="24">error<pos:position pos:line="86" pos:column="29"/></name><argument_list pos:line="86" pos:column="29">(<argument><expr><literal type="string" pos:line="86" pos:column="30">"unable to add %s to index"<pos:position pos:line="86" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="59">path<pos:position pos:line="86" pos:column="63"/></name></expr></argument>)<pos:position pos:line="86" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="65"/></return>
	}<pos:position pos:line="87" pos:column="10"/></block></then></if></elseif></if>
	<if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><name pos:line="88" pos:column="13">verbose<pos:position pos:line="88" pos:column="20"/></name> <operator pos:line="88" pos:column="21">&amp;&amp;<pos:position pos:line="88" pos:column="31"/></operator> <operator pos:line="88" pos:column="24">!<pos:position pos:line="88" pos:column="25"/></operator><name pos:line="88" pos:column="25">was_same<pos:position pos:line="88" pos:column="33"/></name></expr>)<pos:position pos:line="88" pos:column="34"/></condition><then pos:line="88" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="17">printf<pos:position pos:line="89" pos:column="23"/></name><argument_list pos:line="89" pos:column="23">(<argument><expr><literal type="string" pos:line="89" pos:column="24">"add '%s'\n"<pos:position pos:line="89" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="38">path<pos:position pos:line="89" pos:column="42"/></name></expr></argument>)<pos:position pos:line="89" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="44"/></expr_stmt></block></then></if>
	<return pos:line="90" pos:column="9">return <expr><literal type="number" pos:line="90" pos:column="16">0<pos:position pos:line="90" pos:column="17"/></literal></expr>;<pos:position pos:line="90" pos:column="18"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
