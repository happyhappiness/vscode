<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6883_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">release_unused_segments<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">mstate<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">m<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list> <block pos:line="1" pos:column="49">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">size_t<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">released<pos:position pos:line="2" pos:column="18"/></name> <init pos:line="2" pos:column="19">= <expr><literal type="number" pos:line="2" pos:column="21">0<pos:position pos:line="2" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">nsegs<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><literal type="number" pos:line="3" pos:column="15">0<pos:position pos:line="3" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">msegmentptr<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">pred<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><operator pos:line="4" pos:column="22">&amp;<pos:position pos:line="4" pos:column="27"/></operator><name><name pos:line="4" pos:column="23">m<pos:position pos:line="4" pos:column="24"/></name><operator pos:line="4" pos:column="24">-&gt;<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="26">seg<pos:position pos:line="4" pos:column="29"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">msegmentptr<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">sp<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name><name pos:line="5" pos:column="20">pred<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">-&gt;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="26">next<pos:position pos:line="5" pos:column="30"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
  <while pos:line="6" pos:column="3">while <condition pos:line="6" pos:column="9">(<expr><name pos:line="6" pos:column="10">sp<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">!=<pos:position pos:line="6" pos:column="15"/></operator> <literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr>)<pos:position pos:line="6" pos:column="18"/></condition> <block pos:line="6" pos:column="19">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name><modifier pos:line="7" pos:column="9">*<pos:position pos:line="7" pos:column="10"/></modifier></type> <name pos:line="7" pos:column="11">base<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><name><name pos:line="7" pos:column="18">sp<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">-&gt;<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="22">base<pos:position pos:line="7" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">size_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">size<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><name><name pos:line="8" pos:column="19">sp<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">-&gt;<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="23">size<pos:position pos:line="8" pos:column="27"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">msegmentptr<pos:position pos:line="9" pos:column="16"/></name></type> <name pos:line="9" pos:column="17">next<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><name><name pos:line="9" pos:column="24">sp<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">-&gt;<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="28">next<pos:position pos:line="9" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="10" pos:column="5">++<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">nsegs<pos:position pos:line="10" pos:column="12"/></name></expr>;<pos:position pos:line="10" pos:column="13"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">is_mmapped_segment<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">sp<pos:position pos:line="11" pos:column="30"/></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call> <operator pos:line="11" pos:column="32">&amp;&amp;<pos:position pos:line="11" pos:column="42"/></operator> <operator pos:line="11" pos:column="35">!<pos:position pos:line="11" pos:column="36"/></operator><call><name pos:line="11" pos:column="36">is_extern_segment<pos:position pos:line="11" pos:column="53"/></name><argument_list pos:line="11" pos:column="53">(<argument><expr><name pos:line="11" pos:column="54">sp<pos:position pos:line="11" pos:column="56"/></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="58"/></condition><then pos:line="11" pos:column="58"> <block pos:line="11" pos:column="59">{
      <decl_stmt><decl><type><name pos:line="12" pos:column="7">mchunkptr<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">p<pos:position pos:line="12" pos:column="18"/></name> <init pos:line="12" pos:column="19">= <expr><call><name pos:line="12" pos:column="21">align_as_chunk<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">base<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="42"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="13" pos:column="7">size_t<pos:position pos:line="13" pos:column="13"/></name></type> <name pos:line="13" pos:column="14">psize<pos:position pos:line="13" pos:column="19"/></name> <init pos:line="13" pos:column="20">= <expr><call><name pos:line="13" pos:column="22">chunksize<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">p<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="35"/></decl_stmt>
      <comment type="block" pos:line="14" pos:column="7">/* Can unmap if first chunk holds entire segment and not pinned */</comment>
      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><operator pos:line="15" pos:column="11">!<pos:position pos:line="15" pos:column="12"/></operator><call><name pos:line="15" pos:column="12">cinuse<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">p<pos:position pos:line="15" pos:column="20"/></name></expr></argument>)<pos:position pos:line="15" pos:column="21"/></argument_list></call> <operator pos:line="15" pos:column="22">&amp;&amp;<pos:position pos:line="15" pos:column="32"/></operator> <operator pos:line="15" pos:column="25">(<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">char<pos:position pos:line="15" pos:column="30"/></name><operator pos:line="15" pos:column="30">*<pos:position pos:line="15" pos:column="31"/></operator><operator pos:line="15" pos:column="31">)<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">p<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">+<pos:position pos:line="15" pos:column="35"/></operator> <name pos:line="15" pos:column="36">psize<pos:position pos:line="15" pos:column="41"/></name> <operator pos:line="15" pos:column="42">&gt;=<pos:position pos:line="15" pos:column="47"/></operator> <name pos:line="15" pos:column="45">base<pos:position pos:line="15" pos:column="49"/></name> <operator pos:line="15" pos:column="50">+<pos:position pos:line="15" pos:column="51"/></operator> <name pos:line="15" pos:column="52">size<pos:position pos:line="15" pos:column="56"/></name> <operator pos:line="15" pos:column="57">-<pos:position pos:line="15" pos:column="58"/></operator> <name pos:line="15" pos:column="59">TOP_FOOT_SIZE<pos:position pos:line="15" pos:column="72"/></name></expr>)<pos:position pos:line="15" pos:column="73"/></condition><then pos:line="15" pos:column="73"> <block pos:line="15" pos:column="74">{
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">tchunkptr<pos:position pos:line="16" pos:column="18"/></name></type> <name pos:line="16" pos:column="19">tp<pos:position pos:line="16" pos:column="21"/></name> <init pos:line="16" pos:column="22">= <expr><operator pos:line="16" pos:column="24">(<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">tchunkptr<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">)<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="35">p<pos:position pos:line="16" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="37"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">assert<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><call><name pos:line="17" pos:column="16">segment_holds<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">sp<pos:position pos:line="17" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="34">(<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="35">char<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">*<pos:position pos:line="17" pos:column="40"/></operator><operator pos:line="17" pos:column="40">)<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="41">sp<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">p<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">==<pos:position pos:line="18" pos:column="17"/></operator> <name><name pos:line="18" pos:column="18">m<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">-&gt;<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="21">dv<pos:position pos:line="18" pos:column="23"/></name></name></expr>)<pos:position pos:line="18" pos:column="24"/></condition><then pos:line="18" pos:column="24"> <block pos:line="18" pos:column="25">{
	  <expr_stmt><expr><name><name pos:line="19" pos:column="11">m<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">dv<pos:position pos:line="19" pos:column="16"/></name></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <literal type="number" pos:line="19" pos:column="19">0<pos:position pos:line="19" pos:column="20"/></literal></expr>;<pos:position pos:line="19" pos:column="21"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="20" pos:column="11">m<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">-&gt;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="14">dvsize<pos:position pos:line="20" pos:column="20"/></name></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <literal type="number" pos:line="20" pos:column="23">0<pos:position pos:line="20" pos:column="24"/></literal></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then>
	<else pos:line="22" pos:column="9">else <block pos:line="22" pos:column="14">{
	  <expr_stmt><expr><call><name pos:line="23" pos:column="11">unlink_large_chunk<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">m<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="33">tp<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></else></if>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">CALL_MUNMAP<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><name pos:line="25" pos:column="25">base<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="31">size<pos:position pos:line="25" pos:column="35"/></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call> <operator pos:line="25" pos:column="37">==<pos:position pos:line="25" pos:column="39"/></operator> <literal type="number" pos:line="25" pos:column="40">0<pos:position pos:line="25" pos:column="41"/></literal></expr>)<pos:position pos:line="25" pos:column="42"/></condition><then pos:line="25" pos:column="42"> <block pos:line="25" pos:column="43">{
	  <expr_stmt><expr><name pos:line="26" pos:column="11">released<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">+=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">size<pos:position pos:line="26" pos:column="27"/></name></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="27" pos:column="11">m<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">footprint<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">-=<pos:position pos:line="27" pos:column="26"/></operator> <name pos:line="27" pos:column="27">size<pos:position pos:line="27" pos:column="31"/></name></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>
	  <comment type="block" pos:line="28" pos:column="11">/* unlink obsoleted record */</comment>
	  <expr_stmt><expr><name pos:line="29" pos:column="11">sp<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <name pos:line="29" pos:column="16">pred<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="30" pos:column="11">sp<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">-&gt;<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="15">next<pos:position pos:line="30" pos:column="19"/></name></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <name pos:line="30" pos:column="22">next<pos:position pos:line="30" pos:column="26"/></name></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then>
	<else pos:line="32" pos:column="9">else <block pos:line="32" pos:column="14">{ <comment type="block" pos:line="32" pos:column="16">/* back out if cannot unmap */</comment>
	  <expr_stmt><expr><call><name pos:line="33" pos:column="11">insert_large_chunk<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">m<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="33">tp<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">psize<pos:position pos:line="33" pos:column="42"/></name></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></else></if>
      }<pos:position pos:line="35" pos:column="8"/></block></then></if>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">NO_SEGMENT_TRAVERSAL<pos:position pos:line="37" pos:column="29"/></name></expr>)<pos:position pos:line="37" pos:column="30"/></condition><then pos:line="37" pos:column="30"> <comment type="block" pos:line="37" pos:column="31">/* scan only first segment */</comment>
      <block type="pseudo"><break pos:line="38" pos:column="7">break;<pos:position pos:line="38" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="39" pos:column="5">pred<pos:position pos:line="39" pos:column="9"/></name> <operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator> <name pos:line="39" pos:column="12">sp<pos:position pos:line="39" pos:column="14"/></name></expr>;<pos:position pos:line="39" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="40" pos:column="5">sp<pos:position pos:line="40" pos:column="7"/></name> <operator pos:line="40" pos:column="8">=<pos:position pos:line="40" pos:column="9"/></operator> <name pos:line="40" pos:column="10">next<pos:position pos:line="40" pos:column="14"/></name></expr>;<pos:position pos:line="40" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></while>
  <comment type="block" pos:line="42" pos:column="3">/* Reset check counter */</comment>
  <expr_stmt><expr><name><name pos:line="43" pos:column="3">m<pos:position pos:line="43" pos:column="4"/></name><operator pos:line="43" pos:column="4">-&gt;<pos:position pos:line="43" pos:column="9"/></operator><name pos:line="43" pos:column="6">release_checks<pos:position pos:line="43" pos:column="20"/></name></name> <operator pos:line="43" pos:column="21">=<pos:position pos:line="43" pos:column="22"/></operator> <operator pos:line="43" pos:column="23">(<pos:position pos:line="43" pos:column="24"/></operator><ternary><condition><expr><operator pos:line="43" pos:column="24">(<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="25">nsegs<pos:position pos:line="43" pos:column="30"/></name> <operator pos:line="43" pos:column="31">&gt;<pos:position pos:line="43" pos:column="35"/></operator> <name pos:line="43" pos:column="33">MAX_RELEASE_CHECK_RATE<pos:position pos:line="43" pos:column="55"/></name><operator pos:line="43" pos:column="55">)<pos:position pos:line="43" pos:column="56"/></operator></expr>?<pos:position pos:line="43" pos:column="57"/></condition><then pos:line="43" pos:column="57">
		       <expr><name pos:line="44" pos:column="24">nsegs<pos:position pos:line="44" pos:column="29"/></name></expr> <pos:position pos:line="44" pos:column="30"/></then><else pos:line="44" pos:column="30">: <expr><name pos:line="44" pos:column="32">MAX_RELEASE_CHECK_RATE<pos:position pos:line="44" pos:column="54"/></name></expr></else></ternary><operator pos:line="44" pos:column="54">)<pos:position pos:line="44" pos:column="55"/></operator></expr>;<pos:position pos:line="44" pos:column="56"/></expr_stmt>
  <return pos:line="45" pos:column="3">return <expr><name pos:line="45" pos:column="10">released<pos:position pos:line="45" pos:column="18"/></name></expr>;<pos:position pos:line="45" pos:column="19"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
