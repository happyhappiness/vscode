<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1431_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">try_create_file<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">path<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">unsigned<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">int<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">mode<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="65">const<pos:position pos:line="1" pos:column="70"/></specifier> <name pos:line="1" pos:column="71">char<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">buf<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="82">unsigned<pos:position pos:line="1" pos:column="90"/></name> <name pos:line="1" pos:column="91">long<pos:position pos:line="1" pos:column="95"/></name></type> <name pos:line="1" pos:column="96">size<pos:position pos:line="1" pos:column="100"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="101"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="17">res<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">nbuf<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">STRBUF_INIT<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">S_ISGITLINK<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">mode<pos:position pos:line="6" pos:column="29"/></name></expr></argument>)<pos:position pos:line="6" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="31"/></condition><then pos:line="6" pos:column="31"> <block pos:line="6" pos:column="32">{
		<decl_stmt><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">stat<pos:position pos:line="7" pos:column="28"/></name></name></type> <name pos:line="7" pos:column="29">st<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><call><name pos:line="8" pos:column="22">lstat<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">path<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="34">&amp;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="35">st<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></call> <operator pos:line="8" pos:column="39">&amp;&amp;<pos:position pos:line="8" pos:column="49"/></operator> <call><name pos:line="8" pos:column="42">S_ISDIR<pos:position pos:line="8" pos:column="49"/></name><argument_list pos:line="8" pos:column="49">(<argument><expr><name><name pos:line="8" pos:column="50">st<pos:position pos:line="8" pos:column="52"/></name><operator pos:line="8" pos:column="52">.<pos:position pos:line="8" pos:column="53"/></operator><name pos:line="8" pos:column="53">st_mode<pos:position pos:line="8" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="62"/></condition><then pos:line="8" pos:column="62">
			<block type="pseudo"><return pos:line="9" pos:column="25">return <expr><literal type="number" pos:line="9" pos:column="32">0<pos:position pos:line="9" pos:column="33"/></literal></expr>;<pos:position pos:line="9" pos:column="34"/></return></block></then></if>
		<return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">!<pos:position pos:line="10" pos:column="25"/></operator><operator pos:line="10" pos:column="25">!<pos:position pos:line="10" pos:column="26"/></operator><call><name pos:line="10" pos:column="26">mkdir<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><name pos:line="10" pos:column="32">path<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="38">0777<pos:position pos:line="10" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="44"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">has_symlinks<pos:position pos:line="13" pos:column="25"/></name> <operator pos:line="13" pos:column="26">&amp;&amp;<pos:position pos:line="13" pos:column="36"/></operator> <call><name pos:line="13" pos:column="29">S_ISLNK<pos:position pos:line="13" pos:column="36"/></name><argument_list pos:line="13" pos:column="36">(<argument><expr><name pos:line="13" pos:column="37">mode<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="43"/></condition><then pos:line="13" pos:column="43">
		<comment type="block" pos:line="14" pos:column="17">/* Although buf:size is counted string, it also is NUL
		 * terminated.
		 */</comment>
		<block type="pseudo"><return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">!<pos:position pos:line="17" pos:column="25"/></operator><operator pos:line="17" pos:column="25">!<pos:position pos:line="17" pos:column="26"/></operator><call><name pos:line="17" pos:column="26">symlink<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">buf<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">path<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="45"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">fd<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <call><name pos:line="19" pos:column="14">open<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">path<pos:position pos:line="19" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="25">O_CREAT<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">|<pos:position pos:line="19" pos:column="34"/></operator> <name pos:line="19" pos:column="35">O_EXCL<pos:position pos:line="19" pos:column="41"/></name> <operator pos:line="19" pos:column="42">|<pos:position pos:line="19" pos:column="43"/></operator> <name pos:line="19" pos:column="44">O_WRONLY<pos:position pos:line="19" pos:column="52"/></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="19" pos:column="54">(<pos:position pos:line="19" pos:column="55"/></operator><name pos:line="19" pos:column="55">mode<pos:position pos:line="19" pos:column="59"/></name> <operator pos:line="19" pos:column="60">&amp;<pos:position pos:line="19" pos:column="65"/></operator> <literal type="number" pos:line="19" pos:column="62">0100<pos:position pos:line="19" pos:column="66"/></literal><operator pos:line="19" pos:column="66">)<pos:position pos:line="19" pos:column="67"/></operator></expr> ?<pos:position pos:line="19" pos:column="69"/></condition><then pos:line="19" pos:column="69"> <expr><literal type="number" pos:line="19" pos:column="70">0777<pos:position pos:line="19" pos:column="74"/></literal></expr> <pos:position pos:line="19" pos:column="75"/></then><else pos:line="19" pos:column="75">: <expr><literal type="number" pos:line="19" pos:column="77">0666<pos:position pos:line="19" pos:column="81"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="19" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="83"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">fd<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">&lt;<pos:position pos:line="20" pos:column="20"/></operator> <literal type="number" pos:line="20" pos:column="18">0<pos:position pos:line="20" pos:column="19"/></literal></expr>)<pos:position pos:line="20" pos:column="20"/></condition><then pos:line="20" pos:column="20">
		<block type="pseudo"><return pos:line="21" pos:column="17">return <expr><literal type="number" pos:line="21" pos:column="24">1<pos:position pos:line="21" pos:column="25"/></literal></expr>;<pos:position pos:line="21" pos:column="26"/></return></block></then></if>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">convert_to_working_tree<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">path<pos:position pos:line="23" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="43">buf<pos:position pos:line="23" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="48">size<pos:position pos:line="23" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="54">&amp;<pos:position pos:line="23" pos:column="59"/></operator><name pos:line="23" pos:column="55">nbuf<pos:position pos:line="23" pos:column="59"/></name></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="61"/></condition><then pos:line="23" pos:column="61"> <block pos:line="23" pos:column="62">{
		<expr_stmt><expr><name pos:line="24" pos:column="17">size<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <name><name pos:line="24" pos:column="24">nbuf<pos:position pos:line="24" pos:column="28"/></name><operator pos:line="24" pos:column="28">.<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="29">len<pos:position pos:line="24" pos:column="32"/></name></name></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="25" pos:column="17">buf<pos:position pos:line="25" pos:column="20"/></name>  <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <name><name pos:line="25" pos:column="24">nbuf<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">.<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">buf<pos:position pos:line="25" pos:column="32"/></name></name></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="28" pos:column="9">res<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <call><name pos:line="28" pos:column="15">write_in_full<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">fd<pos:position pos:line="28" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="33">buf<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="38">size<pos:position pos:line="28" pos:column="42"/></name></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call> <operator pos:line="28" pos:column="44">&lt;<pos:position pos:line="28" pos:column="48"/></operator> <literal type="number" pos:line="28" pos:column="46">0<pos:position pos:line="28" pos:column="47"/></literal></expr>;<pos:position pos:line="28" pos:column="48"/></expr_stmt>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">res<pos:position pos:line="29" pos:column="16"/></name></expr>)<pos:position pos:line="29" pos:column="17"/></condition><then pos:line="29" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="17">error_errno<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><call><name pos:line="30" pos:column="29">_<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><literal type="string" pos:line="30" pos:column="31">"failed to write to '%s'"<pos:position pos:line="30" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="30" pos:column="59">path<pos:position pos:line="30" pos:column="63"/></name></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="65"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">strbuf_release<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><operator pos:line="31" pos:column="24">&amp;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="25">nbuf<pos:position pos:line="31" pos:column="29"/></name></expr></argument>)<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">close<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><name pos:line="33" pos:column="19">fd<pos:position pos:line="33" pos:column="21"/></name></expr></argument>)<pos:position pos:line="33" pos:column="22"/></argument_list></call> <operator pos:line="33" pos:column="23">&lt;<pos:position pos:line="33" pos:column="27"/></operator> <literal type="number" pos:line="33" pos:column="25">0<pos:position pos:line="33" pos:column="26"/></literal> <operator pos:line="33" pos:column="27">&amp;&amp;<pos:position pos:line="33" pos:column="37"/></operator> <operator pos:line="33" pos:column="30">!<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">res<pos:position pos:line="33" pos:column="34"/></name></expr>)<pos:position pos:line="33" pos:column="35"/></condition><then pos:line="33" pos:column="35">
		<block type="pseudo"><return pos:line="34" pos:column="17">return <expr><call><name pos:line="34" pos:column="24">error_errno<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><call><name pos:line="34" pos:column="36">_<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><literal type="string" pos:line="34" pos:column="38">"closing file '%s'"<pos:position pos:line="34" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="34" pos:column="60">path<pos:position pos:line="34" pos:column="64"/></name></expr></argument>)<pos:position pos:line="34" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="66"/></return></block></then></if>

	<return pos:line="36" pos:column="9">return <expr><ternary><condition><expr><name pos:line="36" pos:column="16">res<pos:position pos:line="36" pos:column="19"/></name></expr> ?<pos:position pos:line="36" pos:column="21"/></condition><then pos:line="36" pos:column="21"> <expr><operator pos:line="36" pos:column="22">-<pos:position pos:line="36" pos:column="23"/></operator><literal type="number" pos:line="36" pos:column="23">1<pos:position pos:line="36" pos:column="24"/></literal></expr> <pos:position pos:line="36" pos:column="25"/></then><else pos:line="36" pos:column="25">: <expr><literal type="number" pos:line="36" pos:column="27">0<pos:position pos:line="36" pos:column="28"/></literal></expr></else></ternary></expr>;<pos:position pos:line="36" pos:column="29"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
