<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7057_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">build_wcs_upper_buffer<pos:position pos:line="3" pos:column="23"/></name> <parameter_list pos:line="3" pos:column="24">(<parameter><decl><type><name pos:line="3" pos:column="25">re_string_t<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">pstr<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="43"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">mbstate_t<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">prev_st<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">src_idx<pos:position pos:line="6" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="16">byte_idx<pos:position pos:line="6" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="26">end_idx<pos:position pos:line="6" pos:column="33"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="35">remain_len<pos:position pos:line="6" pos:column="45"/></name></decl>;<pos:position pos:line="6" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">mbclen<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">_LIBC<pos:position pos:line="8" pos:column="13"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name></type> <name><name pos:line="9" pos:column="8">buf<pos:position pos:line="9" pos:column="11"/></name><index pos:line="9" pos:column="11">[<expr><name pos:line="9" pos:column="12">MB_LEN_MAX<pos:position pos:line="9" pos:column="22"/></name></expr>]<pos:position pos:line="9" pos:column="23"/></index></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">assert<pos:position pos:line="10" pos:column="9"/></name> <argument_list pos:line="10" pos:column="10">(<argument><expr><name pos:line="10" pos:column="11">MB_LEN_MAX<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">&gt;=<pos:position pos:line="10" pos:column="27"/></operator> <name><name pos:line="10" pos:column="25">pstr<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">mb_cur_max<pos:position pos:line="10" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="43"/></expr_stmt>
<cpp:else pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">else<pos:position pos:line="11" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name></type> <name><name pos:line="12" pos:column="8">buf<pos:position pos:line="12" pos:column="11"/></name><index pos:line="12" pos:column="11">[<expr><literal type="number" pos:line="12" pos:column="12">64<pos:position pos:line="12" pos:column="14"/></literal></expr>]<pos:position pos:line="12" pos:column="15"/></index></name></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="15" pos:column="3">byte_idx<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <name><name pos:line="15" pos:column="14">pstr<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">-&gt;<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="20">valid_len<pos:position pos:line="15" pos:column="29"/></name></name></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="16" pos:column="3">end_idx<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name><name pos:line="16" pos:column="14">pstr<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">-&gt;<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="20">bufs_len<pos:position pos:line="16" pos:column="28"/></name></name> <operator pos:line="16" pos:column="29">&gt;<pos:position pos:line="16" pos:column="33"/></operator> <name><name pos:line="16" pos:column="31">pstr<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">-&gt;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="37">len<pos:position pos:line="16" pos:column="40"/></name></name><operator pos:line="16" pos:column="40">)<pos:position pos:line="16" pos:column="41"/></operator></expr> ?<pos:position pos:line="16" pos:column="43"/></condition><then pos:line="16" pos:column="43"> <expr><name><name pos:line="16" pos:column="44">pstr<pos:position pos:line="16" pos:column="48"/></name><operator pos:line="16" pos:column="48">-&gt;<pos:position pos:line="16" pos:column="53"/></operator><name pos:line="16" pos:column="50">len<pos:position pos:line="16" pos:column="53"/></name></name></expr> <pos:position pos:line="16" pos:column="54"/></then><else pos:line="16" pos:column="54">: <expr><name><name pos:line="16" pos:column="56">pstr<pos:position pos:line="16" pos:column="60"/></name><operator pos:line="16" pos:column="60">-&gt;<pos:position pos:line="16" pos:column="65"/></operator><name pos:line="16" pos:column="62">bufs_len<pos:position pos:line="16" pos:column="70"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="16" pos:column="71"/></expr_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* The following optimization assumes that ASCII characters can be
     mapped to wide characters with a simple cast.  */</comment>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><operator pos:line="20" pos:column="7">!<pos:position pos:line="20" pos:column="8"/></operator> <name><name pos:line="20" pos:column="9">pstr<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">-&gt;<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="15">map_notascii<pos:position pos:line="20" pos:column="27"/></name></name> <operator pos:line="20" pos:column="28">&amp;&amp;<pos:position pos:line="20" pos:column="38"/></operator> <name><name pos:line="20" pos:column="31">pstr<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">-&gt;<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="37">trans<pos:position pos:line="20" pos:column="42"/></name></name> <operator pos:line="20" pos:column="43">==<pos:position pos:line="20" pos:column="45"/></operator> <name pos:line="20" pos:column="46">NULL<pos:position pos:line="20" pos:column="50"/></name> <operator pos:line="20" pos:column="51">&amp;&amp;<pos:position pos:line="20" pos:column="61"/></operator> <operator pos:line="20" pos:column="54">!<pos:position pos:line="20" pos:column="55"/></operator><name><name pos:line="20" pos:column="55">pstr<pos:position pos:line="20" pos:column="59"/></name><operator pos:line="20" pos:column="59">-&gt;<pos:position pos:line="20" pos:column="64"/></operator><name pos:line="20" pos:column="61">offsets_needed<pos:position pos:line="20" pos:column="75"/></name></name></expr>)<pos:position pos:line="20" pos:column="76"/></condition><then pos:line="20" pos:column="76">
    <block pos:line="21" pos:column="5">{
      <while pos:line="22" pos:column="7">while <condition pos:line="22" pos:column="13">(<expr><name pos:line="22" pos:column="14">byte_idx<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">&lt;<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="25">end_idx<pos:position pos:line="22" pos:column="32"/></name></expr>)<pos:position pos:line="22" pos:column="33"/></condition>
	<block pos:line="23" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="24" pos:column="11">wchar_t<pos:position pos:line="24" pos:column="18"/></name></type> <name pos:line="24" pos:column="19">wc<pos:position pos:line="24" pos:column="21"/></name></decl>;<pos:position pos:line="24" pos:column="22"/></decl_stmt>

	  <if pos:line="26" pos:column="11">if <condition pos:line="26" pos:column="14">(<expr><call><name pos:line="26" pos:column="15">isascii<pos:position pos:line="26" pos:column="22"/></name> <argument_list pos:line="26" pos:column="23">(<argument><expr><name><name pos:line="26" pos:column="24">pstr<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">-&gt;<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="30">raw_mbs<pos:position pos:line="26" pos:column="37"/></name><index pos:line="26" pos:column="37">[<expr><name><name pos:line="26" pos:column="38">pstr<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">-&gt;<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="44">raw_mbs_idx<pos:position pos:line="26" pos:column="55"/></name></name> <operator pos:line="26" pos:column="56">+<pos:position pos:line="26" pos:column="57"/></operator> <name pos:line="26" pos:column="58">byte_idx<pos:position pos:line="26" pos:column="66"/></name></expr>]<pos:position pos:line="26" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="68"/></argument_list></call>
	      <operator pos:line="27" pos:column="15">&amp;&amp;<pos:position pos:line="27" pos:column="25"/></operator> <call><name pos:line="27" pos:column="18">mbsinit<pos:position pos:line="27" pos:column="25"/></name> <argument_list pos:line="27" pos:column="26">(<argument><expr><operator pos:line="27" pos:column="27">&amp;<pos:position pos:line="27" pos:column="32"/></operator><name><name pos:line="27" pos:column="28">pstr<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">-&gt;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="34">cur_state<pos:position pos:line="27" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="45"/></condition><then pos:line="27" pos:column="45">
	    <block pos:line="28" pos:column="13">{
	      <comment type="block" pos:line="29" pos:column="15">/* In case of a singlebyte character.  */</comment>
	      <expr_stmt><expr><name><name pos:line="30" pos:column="15">pstr<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">-&gt;<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="21">mbs<pos:position pos:line="30" pos:column="24"/></name><index pos:line="30" pos:column="24">[<expr><name pos:line="30" pos:column="25">byte_idx<pos:position pos:line="30" pos:column="33"/></name></expr>]<pos:position pos:line="30" pos:column="34"/></index></name>
		<operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <call><name pos:line="31" pos:column="19">toupper<pos:position pos:line="31" pos:column="26"/></name> <argument_list pos:line="31" pos:column="27">(<argument><expr><name><name pos:line="31" pos:column="28">pstr<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">-&gt;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="34">raw_mbs<pos:position pos:line="31" pos:column="41"/></name><index pos:line="31" pos:column="41">[<expr><name><name pos:line="31" pos:column="42">pstr<pos:position pos:line="31" pos:column="46"/></name><operator pos:line="31" pos:column="46">-&gt;<pos:position pos:line="31" pos:column="51"/></operator><name pos:line="31" pos:column="48">raw_mbs_idx<pos:position pos:line="31" pos:column="59"/></name></name> <operator pos:line="31" pos:column="60">+<pos:position pos:line="31" pos:column="61"/></operator> <name pos:line="31" pos:column="62">byte_idx<pos:position pos:line="31" pos:column="70"/></name></expr>]<pos:position pos:line="31" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="31" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="73"/></expr_stmt>
	      <comment type="block" pos:line="32" pos:column="15">/* The next step uses the assumption that wchar_t is encoded
		 ASCII-safe: all ASCII values can be converted like this.  */</comment>
	      <expr_stmt><expr><name><name pos:line="34" pos:column="15">pstr<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">-&gt;<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="21">wcs<pos:position pos:line="34" pos:column="24"/></name><index pos:line="34" pos:column="24">[<expr><name pos:line="34" pos:column="25">byte_idx<pos:position pos:line="34" pos:column="33"/></name></expr>]<pos:position pos:line="34" pos:column="34"/></index></name> <operator pos:line="34" pos:column="35">=<pos:position pos:line="34" pos:column="36"/></operator> <operator pos:line="34" pos:column="37">(<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="38">wchar_t<pos:position pos:line="34" pos:column="45"/></name><operator pos:line="34" pos:column="45">)<pos:position pos:line="34" pos:column="46"/></operator> <name><name pos:line="34" pos:column="47">pstr<pos:position pos:line="34" pos:column="51"/></name><operator pos:line="34" pos:column="51">-&gt;<pos:position pos:line="34" pos:column="56"/></operator><name pos:line="34" pos:column="53">mbs<pos:position pos:line="34" pos:column="56"/></name><index pos:line="34" pos:column="56">[<expr><name pos:line="34" pos:column="57">byte_idx<pos:position pos:line="34" pos:column="65"/></name></expr>]<pos:position pos:line="34" pos:column="66"/></index></name></expr>;<pos:position pos:line="34" pos:column="67"/></expr_stmt>
	      <expr_stmt><expr><operator pos:line="35" pos:column="15">++<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">byte_idx<pos:position pos:line="35" pos:column="25"/></name></expr>;<pos:position pos:line="35" pos:column="26"/></expr_stmt>
	      <continue pos:line="36" pos:column="15">continue;<pos:position pos:line="36" pos:column="24"/></continue>
	    }<pos:position pos:line="37" pos:column="14"/></block></then></if>

	  <expr_stmt><expr><name pos:line="39" pos:column="11">remain_len<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <name pos:line="39" pos:column="24">end_idx<pos:position pos:line="39" pos:column="31"/></name> <operator pos:line="39" pos:column="32">-<pos:position pos:line="39" pos:column="33"/></operator> <name pos:line="39" pos:column="34">byte_idx<pos:position pos:line="39" pos:column="42"/></name></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="40" pos:column="11">prev_st<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <name><name pos:line="40" pos:column="21">pstr<pos:position pos:line="40" pos:column="25"/></name><operator pos:line="40" pos:column="25">-&gt;<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="27">cur_state<pos:position pos:line="40" pos:column="36"/></name></name></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="41" pos:column="11">mbclen<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <call><name pos:line="41" pos:column="20">__mbrtowc<pos:position pos:line="41" pos:column="29"/></name> <argument_list pos:line="41" pos:column="30">(<argument><expr><operator pos:line="41" pos:column="31">&amp;<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="32">wc<pos:position pos:line="41" pos:column="34"/></name></expr></argument>,
			      <argument><expr><operator pos:line="42" pos:column="31">(<pos:position pos:line="42" pos:column="32"/></operator><operator pos:line="42" pos:column="32">(<pos:position pos:line="42" pos:column="33"/></operator><specifier pos:line="42" pos:column="33">const<pos:position pos:line="42" pos:column="38"/></specifier> <name pos:line="42" pos:column="39">char<pos:position pos:line="42" pos:column="43"/></name> <operator pos:line="42" pos:column="44">*<pos:position pos:line="42" pos:column="45"/></operator><operator pos:line="42" pos:column="45">)<pos:position pos:line="42" pos:column="46"/></operator> <name><name pos:line="42" pos:column="47">pstr<pos:position pos:line="42" pos:column="51"/></name><operator pos:line="42" pos:column="51">-&gt;<pos:position pos:line="42" pos:column="56"/></operator><name pos:line="42" pos:column="53">raw_mbs<pos:position pos:line="42" pos:column="60"/></name></name> <operator pos:line="42" pos:column="61">+<pos:position pos:line="42" pos:column="62"/></operator> <name><name pos:line="42" pos:column="63">pstr<pos:position pos:line="42" pos:column="67"/></name><operator pos:line="42" pos:column="67">-&gt;<pos:position pos:line="42" pos:column="72"/></operator><name pos:line="42" pos:column="69">raw_mbs_idx<pos:position pos:line="42" pos:column="80"/></name></name>
			       <operator pos:line="43" pos:column="32">+<pos:position pos:line="43" pos:column="33"/></operator> <name pos:line="43" pos:column="34">byte_idx<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">)<pos:position pos:line="43" pos:column="43"/></operator></expr></argument>, <argument><expr><name pos:line="43" pos:column="45">remain_len<pos:position pos:line="43" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="57">&amp;<pos:position pos:line="43" pos:column="62"/></operator><name><name pos:line="43" pos:column="58">pstr<pos:position pos:line="43" pos:column="62"/></name><operator pos:line="43" pos:column="62">-&gt;<pos:position pos:line="43" pos:column="67"/></operator><name pos:line="43" pos:column="64">cur_state<pos:position pos:line="43" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="75"/></expr_stmt>
	  <if pos:line="44" pos:column="11">if <condition pos:line="44" pos:column="14">(<expr><call><name pos:line="44" pos:column="15">BE<pos:position pos:line="44" pos:column="17"/></name> <argument_list pos:line="44" pos:column="18">(<argument><expr><name pos:line="44" pos:column="19">mbclen<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">+<pos:position pos:line="44" pos:column="27"/></operator> <literal type="number" pos:line="44" pos:column="28">2<pos:position pos:line="44" pos:column="29"/></literal> <operator pos:line="44" pos:column="30">&gt;<pos:position pos:line="44" pos:column="34"/></operator> <literal type="number" pos:line="44" pos:column="32">2<pos:position pos:line="44" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="35">1<pos:position pos:line="44" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="38"/></condition><then pos:line="44" pos:column="38">
	    <block pos:line="45" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="46" pos:column="15">wchar_t<pos:position pos:line="46" pos:column="22"/></name></type> <name pos:line="46" pos:column="23">wcu<pos:position pos:line="46" pos:column="26"/></name> <init pos:line="46" pos:column="27">= <expr><name pos:line="46" pos:column="29">wc<pos:position pos:line="46" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="46" pos:column="32"/></decl_stmt>
	      <if pos:line="47" pos:column="15">if <condition pos:line="47" pos:column="18">(<expr><call><name pos:line="47" pos:column="19">iswlower<pos:position pos:line="47" pos:column="27"/></name> <argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">wc<pos:position pos:line="47" pos:column="31"/></name></expr></argument>)<pos:position pos:line="47" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="33"/></condition><then pos:line="47" pos:column="33">
		<block pos:line="48" pos:column="17">{
		  <decl_stmt><decl><type><name pos:line="49" pos:column="19">size_t<pos:position pos:line="49" pos:column="25"/></name></type> <name pos:line="49" pos:column="26">mbcdlen<pos:position pos:line="49" pos:column="33"/></name></decl>;<pos:position pos:line="49" pos:column="34"/></decl_stmt>

		  <expr_stmt><expr><name pos:line="51" pos:column="19">wcu<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">=<pos:position pos:line="51" pos:column="24"/></operator> <call><name pos:line="51" pos:column="25">towupper<pos:position pos:line="51" pos:column="33"/></name> <argument_list pos:line="51" pos:column="34">(<argument><expr><name pos:line="51" pos:column="35">wc<pos:position pos:line="51" pos:column="37"/></name></expr></argument>)<pos:position pos:line="51" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="52" pos:column="19">mbcdlen<pos:position pos:line="52" pos:column="26"/></name> <operator pos:line="52" pos:column="27">=<pos:position pos:line="52" pos:column="28"/></operator> <call><name pos:line="52" pos:column="29">wcrtomb<pos:position pos:line="52" pos:column="36"/></name> <argument_list pos:line="52" pos:column="37">(<argument><expr><name pos:line="52" pos:column="38">buf<pos:position pos:line="52" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="43">wcu<pos:position pos:line="52" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="48">&amp;<pos:position pos:line="52" pos:column="53"/></operator><name pos:line="52" pos:column="49">prev_st<pos:position pos:line="52" pos:column="56"/></name></expr></argument>)<pos:position pos:line="52" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="58"/></expr_stmt>
		  <if pos:line="53" pos:column="19">if <condition pos:line="53" pos:column="22">(<expr><call><name pos:line="53" pos:column="23">BE<pos:position pos:line="53" pos:column="25"/></name> <argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">mbclen<pos:position pos:line="53" pos:column="33"/></name> <operator pos:line="53" pos:column="34">==<pos:position pos:line="53" pos:column="36"/></operator> <name pos:line="53" pos:column="37">mbcdlen<pos:position pos:line="53" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="46">1<pos:position pos:line="53" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="49"/></condition><then pos:line="53" pos:column="49">
		    <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="21">memcpy<pos:position pos:line="54" pos:column="27"/></name> <argument_list pos:line="54" pos:column="28">(<argument><expr><name><name pos:line="54" pos:column="29">pstr<pos:position pos:line="54" pos:column="33"/></name><operator pos:line="54" pos:column="33">-&gt;<pos:position pos:line="54" pos:column="38"/></operator><name pos:line="54" pos:column="35">mbs<pos:position pos:line="54" pos:column="38"/></name></name> <operator pos:line="54" pos:column="39">+<pos:position pos:line="54" pos:column="40"/></operator> <name pos:line="54" pos:column="41">byte_idx<pos:position pos:line="54" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="51">buf<pos:position pos:line="54" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="56">mbclen<pos:position pos:line="54" pos:column="62"/></name></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="64"/></expr_stmt></block></then>
		  <else pos:line="55" pos:column="19">else
		    <block pos:line="56" pos:column="21">{
		      <expr_stmt><expr><name pos:line="57" pos:column="23">src_idx<pos:position pos:line="57" pos:column="30"/></name> <operator pos:line="57" pos:column="31">=<pos:position pos:line="57" pos:column="32"/></operator> <name pos:line="57" pos:column="33">byte_idx<pos:position pos:line="57" pos:column="41"/></name></expr>;<pos:position pos:line="57" pos:column="42"/></expr_stmt>
		      <goto pos:line="58" pos:column="23">goto <name pos:line="58" pos:column="28">offsets_needed<pos:position pos:line="58" pos:column="42"/></name>;<pos:position pos:line="58" pos:column="43"/></goto>
		    }<pos:position pos:line="59" pos:column="22"/></block></else></if>
		}<pos:position pos:line="60" pos:column="18"/></block></then>
	      <else pos:line="61" pos:column="15">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="17">memcpy<pos:position pos:line="62" pos:column="23"/></name> <argument_list pos:line="62" pos:column="24">(<argument><expr><name><name pos:line="62" pos:column="25">pstr<pos:position pos:line="62" pos:column="29"/></name><operator pos:line="62" pos:column="29">-&gt;<pos:position pos:line="62" pos:column="34"/></operator><name pos:line="62" pos:column="31">mbs<pos:position pos:line="62" pos:column="34"/></name></name> <operator pos:line="62" pos:column="35">+<pos:position pos:line="62" pos:column="36"/></operator> <name pos:line="62" pos:column="37">byte_idx<pos:position pos:line="62" pos:column="45"/></name></expr></argument>,
			<argument><expr><name><name pos:line="63" pos:column="25">pstr<pos:position pos:line="63" pos:column="29"/></name><operator pos:line="63" pos:column="29">-&gt;<pos:position pos:line="63" pos:column="34"/></operator><name pos:line="63" pos:column="31">raw_mbs<pos:position pos:line="63" pos:column="38"/></name></name> <operator pos:line="63" pos:column="39">+<pos:position pos:line="63" pos:column="40"/></operator> <name><name pos:line="63" pos:column="41">pstr<pos:position pos:line="63" pos:column="45"/></name><operator pos:line="63" pos:column="45">-&gt;<pos:position pos:line="63" pos:column="50"/></operator><name pos:line="63" pos:column="47">raw_mbs_idx<pos:position pos:line="63" pos:column="58"/></name></name> <operator pos:line="63" pos:column="59">+<pos:position pos:line="63" pos:column="60"/></operator> <name pos:line="63" pos:column="61">byte_idx<pos:position pos:line="63" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="71">mbclen<pos:position pos:line="63" pos:column="77"/></name></expr></argument>)<pos:position pos:line="63" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="79"/></expr_stmt></block></else></if>
	      <expr_stmt><expr><name><name pos:line="64" pos:column="15">pstr<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">-&gt;<pos:position pos:line="64" pos:column="24"/></operator><name pos:line="64" pos:column="21">wcs<pos:position pos:line="64" pos:column="24"/></name><index pos:line="64" pos:column="24">[<expr><name pos:line="64" pos:column="25">byte_idx<pos:position pos:line="64" pos:column="33"/></name><operator pos:line="64" pos:column="33">++<pos:position pos:line="64" pos:column="35"/></operator></expr>]<pos:position pos:line="64" pos:column="36"/></index></name> <operator pos:line="64" pos:column="37">=<pos:position pos:line="64" pos:column="38"/></operator> <name pos:line="64" pos:column="39">wcu<pos:position pos:line="64" pos:column="42"/></name></expr>;<pos:position pos:line="64" pos:column="43"/></expr_stmt>
	      <comment type="block" pos:line="65" pos:column="15">/* Write paddings.  */</comment>
	      <for pos:line="66" pos:column="15">for <control pos:line="66" pos:column="19">(<init><expr><name pos:line="66" pos:column="20">remain_len<pos:position pos:line="66" pos:column="30"/></name> <operator pos:line="66" pos:column="31">=<pos:position pos:line="66" pos:column="32"/></operator> <name pos:line="66" pos:column="33">byte_idx<pos:position pos:line="66" pos:column="41"/></name> <operator pos:line="66" pos:column="42">+<pos:position pos:line="66" pos:column="43"/></operator> <name pos:line="66" pos:column="44">mbclen<pos:position pos:line="66" pos:column="50"/></name> <operator pos:line="66" pos:column="51">-<pos:position pos:line="66" pos:column="52"/></operator> <literal type="number" pos:line="66" pos:column="53">1<pos:position pos:line="66" pos:column="54"/></literal></expr>;<pos:position pos:line="66" pos:column="55"/></init> <condition><expr><name pos:line="66" pos:column="56">byte_idx<pos:position pos:line="66" pos:column="64"/></name> <operator pos:line="66" pos:column="65">&lt;<pos:position pos:line="66" pos:column="69"/></operator> <name pos:line="66" pos:column="67">remain_len<pos:position pos:line="66" pos:column="77"/></name></expr> ;<pos:position pos:line="66" pos:column="79"/></condition><incr/>)<pos:position pos:line="66" pos:column="80"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="67" pos:column="17">pstr<pos:position pos:line="67" pos:column="21"/></name><operator pos:line="67" pos:column="21">-&gt;<pos:position pos:line="67" pos:column="26"/></operator><name pos:line="67" pos:column="23">wcs<pos:position pos:line="67" pos:column="26"/></name><index pos:line="67" pos:column="26">[<expr><name pos:line="67" pos:column="27">byte_idx<pos:position pos:line="67" pos:column="35"/></name><operator pos:line="67" pos:column="35">++<pos:position pos:line="67" pos:column="37"/></operator></expr>]<pos:position pos:line="67" pos:column="38"/></index></name> <operator pos:line="67" pos:column="39">=<pos:position pos:line="67" pos:column="40"/></operator> <name pos:line="67" pos:column="41">WEOF<pos:position pos:line="67" pos:column="45"/></name></expr>;<pos:position pos:line="67" pos:column="46"/></expr_stmt></block></for>
	    }<pos:position pos:line="68" pos:column="14"/></block></then>
	  <elseif pos:line="69" pos:column="11">else <if pos:line="69" pos:column="16">if <condition pos:line="69" pos:column="19">(<expr><name pos:line="69" pos:column="20">mbclen<pos:position pos:line="69" pos:column="26"/></name> <operator pos:line="69" pos:column="27">==<pos:position pos:line="69" pos:column="29"/></operator> <operator pos:line="69" pos:column="30">(<pos:position pos:line="69" pos:column="31"/></operator><name pos:line="69" pos:column="31">size_t<pos:position pos:line="69" pos:column="37"/></name><operator pos:line="69" pos:column="37">)<pos:position pos:line="69" pos:column="38"/></operator> <operator pos:line="69" pos:column="39">-<pos:position pos:line="69" pos:column="40"/></operator><literal type="number" pos:line="69" pos:column="40">1<pos:position pos:line="69" pos:column="41"/></literal> <operator pos:line="69" pos:column="42">||<pos:position pos:line="69" pos:column="44"/></operator> <name pos:line="69" pos:column="45">mbclen<pos:position pos:line="69" pos:column="51"/></name> <operator pos:line="69" pos:column="52">==<pos:position pos:line="69" pos:column="54"/></operator> <literal type="number" pos:line="69" pos:column="55">0<pos:position pos:line="69" pos:column="56"/></literal></expr>)<pos:position pos:line="69" pos:column="57"/></condition><then pos:line="69" pos:column="57">
	    <block pos:line="70" pos:column="13">{
	      <comment type="block" pos:line="71" pos:column="15">/* It is an invalid character or '\0'.  Just use the byte.  */</comment>
	      <decl_stmt><decl><type><name pos:line="72" pos:column="15">int<pos:position pos:line="72" pos:column="18"/></name></type> <name pos:line="72" pos:column="19">ch<pos:position pos:line="72" pos:column="21"/></name> <init pos:line="72" pos:column="22">= <expr><name><name pos:line="72" pos:column="24">pstr<pos:position pos:line="72" pos:column="28"/></name><operator pos:line="72" pos:column="28">-&gt;<pos:position pos:line="72" pos:column="33"/></operator><name pos:line="72" pos:column="30">raw_mbs<pos:position pos:line="72" pos:column="37"/></name><index pos:line="72" pos:column="37">[<expr><name><name pos:line="72" pos:column="38">pstr<pos:position pos:line="72" pos:column="42"/></name><operator pos:line="72" pos:column="42">-&gt;<pos:position pos:line="72" pos:column="47"/></operator><name pos:line="72" pos:column="44">raw_mbs_idx<pos:position pos:line="72" pos:column="55"/></name></name> <operator pos:line="72" pos:column="56">+<pos:position pos:line="72" pos:column="57"/></operator> <name pos:line="72" pos:column="58">byte_idx<pos:position pos:line="72" pos:column="66"/></name></expr>]<pos:position pos:line="72" pos:column="67"/></index></name></expr></init></decl>;<pos:position pos:line="72" pos:column="68"/></decl_stmt>
	      <expr_stmt><expr><name><name pos:line="73" pos:column="15">pstr<pos:position pos:line="73" pos:column="19"/></name><operator pos:line="73" pos:column="19">-&gt;<pos:position pos:line="73" pos:column="24"/></operator><name pos:line="73" pos:column="21">mbs<pos:position pos:line="73" pos:column="24"/></name><index pos:line="73" pos:column="24">[<expr><name pos:line="73" pos:column="25">byte_idx<pos:position pos:line="73" pos:column="33"/></name></expr>]<pos:position pos:line="73" pos:column="34"/></index></name> <operator pos:line="73" pos:column="35">=<pos:position pos:line="73" pos:column="36"/></operator> <name pos:line="73" pos:column="37">ch<pos:position pos:line="73" pos:column="39"/></name></expr>;<pos:position pos:line="73" pos:column="40"/></expr_stmt>
	      <comment type="block" pos:line="74" pos:column="15">/* And also cast it to wide char.  */</comment>
	      <expr_stmt><expr><name><name pos:line="75" pos:column="15">pstr<pos:position pos:line="75" pos:column="19"/></name><operator pos:line="75" pos:column="19">-&gt;<pos:position pos:line="75" pos:column="24"/></operator><name pos:line="75" pos:column="21">wcs<pos:position pos:line="75" pos:column="24"/></name><index pos:line="75" pos:column="24">[<expr><name pos:line="75" pos:column="25">byte_idx<pos:position pos:line="75" pos:column="33"/></name><operator pos:line="75" pos:column="33">++<pos:position pos:line="75" pos:column="35"/></operator></expr>]<pos:position pos:line="75" pos:column="36"/></index></name> <operator pos:line="75" pos:column="37">=<pos:position pos:line="75" pos:column="38"/></operator> <operator pos:line="75" pos:column="39">(<pos:position pos:line="75" pos:column="40"/></operator><name pos:line="75" pos:column="40">wchar_t<pos:position pos:line="75" pos:column="47"/></name><operator pos:line="75" pos:column="47">)<pos:position pos:line="75" pos:column="48"/></operator> <name pos:line="75" pos:column="49">ch<pos:position pos:line="75" pos:column="51"/></name></expr>;<pos:position pos:line="75" pos:column="52"/></expr_stmt>
	      <if pos:line="76" pos:column="15">if <condition pos:line="76" pos:column="18">(<expr><call><name pos:line="76" pos:column="19">BE<pos:position pos:line="76" pos:column="21"/></name> <argument_list pos:line="76" pos:column="22">(<argument><expr><name pos:line="76" pos:column="23">mbclen<pos:position pos:line="76" pos:column="29"/></name> <operator pos:line="76" pos:column="30">==<pos:position pos:line="76" pos:column="32"/></operator> <operator pos:line="76" pos:column="33">(<pos:position pos:line="76" pos:column="34"/></operator><name pos:line="76" pos:column="34">size_t<pos:position pos:line="76" pos:column="40"/></name><operator pos:line="76" pos:column="40">)<pos:position pos:line="76" pos:column="41"/></operator> <operator pos:line="76" pos:column="42">-<pos:position pos:line="76" pos:column="43"/></operator><literal type="number" pos:line="76" pos:column="43">1<pos:position pos:line="76" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="46">0<pos:position pos:line="76" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="49"/></condition><then pos:line="76" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="77" pos:column="17">pstr<pos:position pos:line="77" pos:column="21"/></name><operator pos:line="77" pos:column="21">-&gt;<pos:position pos:line="77" pos:column="26"/></operator><name pos:line="77" pos:column="23">cur_state<pos:position pos:line="77" pos:column="32"/></name></name> <operator pos:line="77" pos:column="33">=<pos:position pos:line="77" pos:column="34"/></operator> <name pos:line="77" pos:column="35">prev_st<pos:position pos:line="77" pos:column="42"/></name></expr>;<pos:position pos:line="77" pos:column="43"/></expr_stmt></block></then></if>
	    }<pos:position pos:line="78" pos:column="14"/></block></then></if></elseif>
	  <else pos:line="79" pos:column="11">else
	    <block pos:line="80" pos:column="13">{
	      <comment type="block" pos:line="81" pos:column="15">/* The buffer doesn't have enough space, finish to build.  */</comment>
	      <expr_stmt><expr><name><name pos:line="82" pos:column="15">pstr<pos:position pos:line="82" pos:column="19"/></name><operator pos:line="82" pos:column="19">-&gt;<pos:position pos:line="82" pos:column="24"/></operator><name pos:line="82" pos:column="21">cur_state<pos:position pos:line="82" pos:column="30"/></name></name> <operator pos:line="82" pos:column="31">=<pos:position pos:line="82" pos:column="32"/></operator> <name pos:line="82" pos:column="33">prev_st<pos:position pos:line="82" pos:column="40"/></name></expr>;<pos:position pos:line="82" pos:column="41"/></expr_stmt>
	      <break pos:line="83" pos:column="15">break;<pos:position pos:line="83" pos:column="21"/></break>
	    }<pos:position pos:line="84" pos:column="14"/></block></else></if>
	}<pos:position pos:line="85" pos:column="10"/></block></while>
      <expr_stmt><expr><name><name pos:line="86" pos:column="7">pstr<pos:position pos:line="86" pos:column="11"/></name><operator pos:line="86" pos:column="11">-&gt;<pos:position pos:line="86" pos:column="16"/></operator><name pos:line="86" pos:column="13">valid_len<pos:position pos:line="86" pos:column="22"/></name></name> <operator pos:line="86" pos:column="23">=<pos:position pos:line="86" pos:column="24"/></operator> <name pos:line="86" pos:column="25">byte_idx<pos:position pos:line="86" pos:column="33"/></name></expr>;<pos:position pos:line="86" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="87" pos:column="7">pstr<pos:position pos:line="87" pos:column="11"/></name><operator pos:line="87" pos:column="11">-&gt;<pos:position pos:line="87" pos:column="16"/></operator><name pos:line="87" pos:column="13">valid_raw_len<pos:position pos:line="87" pos:column="26"/></name></name> <operator pos:line="87" pos:column="27">=<pos:position pos:line="87" pos:column="28"/></operator> <name pos:line="87" pos:column="29">byte_idx<pos:position pos:line="87" pos:column="37"/></name></expr>;<pos:position pos:line="87" pos:column="38"/></expr_stmt>
      <return pos:line="88" pos:column="7">return <expr><name pos:line="88" pos:column="14">REG_NOERROR<pos:position pos:line="88" pos:column="25"/></name></expr>;<pos:position pos:line="88" pos:column="26"/></return>
    }<pos:position pos:line="89" pos:column="6"/></block></then>
  <else pos:line="90" pos:column="3">else
    <block type="pseudo"><for pos:line="91" pos:column="5">for <control pos:line="91" pos:column="9">(<init><expr><name pos:line="91" pos:column="10">src_idx<pos:position pos:line="91" pos:column="17"/></name> <operator pos:line="91" pos:column="18">=<pos:position pos:line="91" pos:column="19"/></operator> <name><name pos:line="91" pos:column="20">pstr<pos:position pos:line="91" pos:column="24"/></name><operator pos:line="91" pos:column="24">-&gt;<pos:position pos:line="91" pos:column="29"/></operator><name pos:line="91" pos:column="26">valid_raw_len<pos:position pos:line="91" pos:column="39"/></name></name></expr>;<pos:position pos:line="91" pos:column="40"/></init> <condition><expr><name pos:line="91" pos:column="41">byte_idx<pos:position pos:line="91" pos:column="49"/></name> <operator pos:line="91" pos:column="50">&lt;<pos:position pos:line="91" pos:column="54"/></operator> <name pos:line="91" pos:column="52">end_idx<pos:position pos:line="91" pos:column="59"/></name></expr>;<pos:position pos:line="91" pos:column="60"/></condition><incr/>)<pos:position pos:line="91" pos:column="61"/></control>
      <block pos:line="92" pos:column="7">{
	<decl_stmt><decl><type><name pos:line="93" pos:column="9">wchar_t<pos:position pos:line="93" pos:column="16"/></name></type> <name pos:line="93" pos:column="17">wc<pos:position pos:line="93" pos:column="19"/></name></decl>;<pos:position pos:line="93" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="94" pos:column="9">const<pos:position pos:line="94" pos:column="14"/></specifier> <name pos:line="94" pos:column="15">char<pos:position pos:line="94" pos:column="19"/></name> <modifier pos:line="94" pos:column="20">*<pos:position pos:line="94" pos:column="21"/></modifier></type><name pos:line="94" pos:column="21">p<pos:position pos:line="94" pos:column="22"/></name></decl>;<pos:position pos:line="94" pos:column="23"/></decl_stmt>
      <label><name pos:line="95" pos:column="7">offsets_needed<pos:position pos:line="95" pos:column="21"/></name>:<pos:position pos:line="95" pos:column="22"/></label>
	<expr_stmt><expr><name pos:line="96" pos:column="9">remain_len<pos:position pos:line="96" pos:column="19"/></name> <operator pos:line="96" pos:column="20">=<pos:position pos:line="96" pos:column="21"/></operator> <name pos:line="96" pos:column="22">end_idx<pos:position pos:line="96" pos:column="29"/></name> <operator pos:line="96" pos:column="30">-<pos:position pos:line="96" pos:column="31"/></operator> <name pos:line="96" pos:column="32">byte_idx<pos:position pos:line="96" pos:column="40"/></name></expr>;<pos:position pos:line="96" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name pos:line="97" pos:column="9">prev_st<pos:position pos:line="97" pos:column="16"/></name> <operator pos:line="97" pos:column="17">=<pos:position pos:line="97" pos:column="18"/></operator> <name><name pos:line="97" pos:column="19">pstr<pos:position pos:line="97" pos:column="23"/></name><operator pos:line="97" pos:column="23">-&gt;<pos:position pos:line="97" pos:column="28"/></operator><name pos:line="97" pos:column="25">cur_state<pos:position pos:line="97" pos:column="34"/></name></name></expr>;<pos:position pos:line="97" pos:column="35"/></expr_stmt>
	<if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><call><name pos:line="98" pos:column="13">BE<pos:position pos:line="98" pos:column="15"/></name> <argument_list pos:line="98" pos:column="16">(<argument><expr><name><name pos:line="98" pos:column="17">pstr<pos:position pos:line="98" pos:column="21"/></name><operator pos:line="98" pos:column="21">-&gt;<pos:position pos:line="98" pos:column="26"/></operator><name pos:line="98" pos:column="23">trans<pos:position pos:line="98" pos:column="28"/></name></name> <operator pos:line="98" pos:column="29">!=<pos:position pos:line="98" pos:column="31"/></operator> <name pos:line="98" pos:column="32">NULL<pos:position pos:line="98" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="98" pos:column="38">0<pos:position pos:line="98" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="98" pos:column="41"/></condition><then pos:line="98" pos:column="41">
	  <block pos:line="99" pos:column="11">{
	    <decl_stmt><decl><type><name pos:line="100" pos:column="13">int<pos:position pos:line="100" pos:column="16"/></name></type> <name pos:line="100" pos:column="17">i<pos:position pos:line="100" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="100" pos:column="20">ch<pos:position pos:line="100" pos:column="22"/></name></decl>;<pos:position pos:line="100" pos:column="23"/></decl_stmt>

	    <for pos:line="102" pos:column="13">for <control pos:line="102" pos:column="17">(<init><expr><name pos:line="102" pos:column="18">i<pos:position pos:line="102" pos:column="19"/></name> <operator pos:line="102" pos:column="20">=<pos:position pos:line="102" pos:column="21"/></operator> <literal type="number" pos:line="102" pos:column="22">0<pos:position pos:line="102" pos:column="23"/></literal></expr>;<pos:position pos:line="102" pos:column="24"/></init> <condition><expr><name pos:line="102" pos:column="25">i<pos:position pos:line="102" pos:column="26"/></name> <operator pos:line="102" pos:column="27">&lt;<pos:position pos:line="102" pos:column="31"/></operator> <name><name pos:line="102" pos:column="29">pstr<pos:position pos:line="102" pos:column="33"/></name><operator pos:line="102" pos:column="33">-&gt;<pos:position pos:line="102" pos:column="38"/></operator><name pos:line="102" pos:column="35">mb_cur_max<pos:position pos:line="102" pos:column="45"/></name></name> <operator pos:line="102" pos:column="46">&amp;&amp;<pos:position pos:line="102" pos:column="56"/></operator> <name pos:line="102" pos:column="49">i<pos:position pos:line="102" pos:column="50"/></name> <operator pos:line="102" pos:column="51">&lt;<pos:position pos:line="102" pos:column="55"/></operator> <name pos:line="102" pos:column="53">remain_len<pos:position pos:line="102" pos:column="63"/></name></expr>;<pos:position pos:line="102" pos:column="64"/></condition> <incr><expr><operator pos:line="102" pos:column="65">++<pos:position pos:line="102" pos:column="67"/></operator><name pos:line="102" pos:column="67">i<pos:position pos:line="102" pos:column="68"/></name></expr></incr>)<pos:position pos:line="102" pos:column="69"/></control>
	      <block pos:line="103" pos:column="15">{
		<expr_stmt><expr><name pos:line="104" pos:column="17">ch<pos:position pos:line="104" pos:column="19"/></name> <operator pos:line="104" pos:column="20">=<pos:position pos:line="104" pos:column="21"/></operator> <name><name pos:line="104" pos:column="22">pstr<pos:position pos:line="104" pos:column="26"/></name><operator pos:line="104" pos:column="26">-&gt;<pos:position pos:line="104" pos:column="31"/></operator><name pos:line="104" pos:column="28">raw_mbs<pos:position pos:line="104" pos:column="35"/></name> <index pos:line="104" pos:column="36">[<expr><name><name pos:line="104" pos:column="37">pstr<pos:position pos:line="104" pos:column="41"/></name><operator pos:line="104" pos:column="41">-&gt;<pos:position pos:line="104" pos:column="46"/></operator><name pos:line="104" pos:column="43">raw_mbs_idx<pos:position pos:line="104" pos:column="54"/></name></name> <operator pos:line="104" pos:column="55">+<pos:position pos:line="104" pos:column="56"/></operator> <name pos:line="104" pos:column="57">src_idx<pos:position pos:line="104" pos:column="64"/></name> <operator pos:line="104" pos:column="65">+<pos:position pos:line="104" pos:column="66"/></operator> <name pos:line="104" pos:column="67">i<pos:position pos:line="104" pos:column="68"/></name></expr>]<pos:position pos:line="104" pos:column="69"/></index></name></expr>;<pos:position pos:line="104" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="105" pos:column="17">buf<pos:position pos:line="105" pos:column="20"/></name><index pos:line="105" pos:column="20">[<expr><name pos:line="105" pos:column="21">i<pos:position pos:line="105" pos:column="22"/></name></expr>]<pos:position pos:line="105" pos:column="23"/></index></name> <operator pos:line="105" pos:column="24">=<pos:position pos:line="105" pos:column="25"/></operator> <name><name pos:line="105" pos:column="26">pstr<pos:position pos:line="105" pos:column="30"/></name><operator pos:line="105" pos:column="30">-&gt;<pos:position pos:line="105" pos:column="35"/></operator><name pos:line="105" pos:column="32">trans<pos:position pos:line="105" pos:column="37"/></name><index pos:line="105" pos:column="37">[<expr><name pos:line="105" pos:column="38">ch<pos:position pos:line="105" pos:column="40"/></name></expr>]<pos:position pos:line="105" pos:column="41"/></index></name></expr>;<pos:position pos:line="105" pos:column="42"/></expr_stmt>
	      }<pos:position pos:line="106" pos:column="16"/></block></for>
	    <expr_stmt><expr><name pos:line="107" pos:column="13">p<pos:position pos:line="107" pos:column="14"/></name> <operator pos:line="107" pos:column="15">=<pos:position pos:line="107" pos:column="16"/></operator> <operator pos:line="107" pos:column="17">(<pos:position pos:line="107" pos:column="18"/></operator><specifier pos:line="107" pos:column="18">const<pos:position pos:line="107" pos:column="23"/></specifier> <name pos:line="107" pos:column="24">char<pos:position pos:line="107" pos:column="28"/></name> <operator pos:line="107" pos:column="29">*<pos:position pos:line="107" pos:column="30"/></operator><operator pos:line="107" pos:column="30">)<pos:position pos:line="107" pos:column="31"/></operator> <name pos:line="107" pos:column="32">buf<pos:position pos:line="107" pos:column="35"/></name></expr>;<pos:position pos:line="107" pos:column="36"/></expr_stmt>
	  }<pos:position pos:line="108" pos:column="12"/></block></then>
	<else pos:line="109" pos:column="9">else
	  <block type="pseudo"><expr_stmt><expr><name pos:line="110" pos:column="11">p<pos:position pos:line="110" pos:column="12"/></name> <operator pos:line="110" pos:column="13">=<pos:position pos:line="110" pos:column="14"/></operator> <operator pos:line="110" pos:column="15">(<pos:position pos:line="110" pos:column="16"/></operator><specifier pos:line="110" pos:column="16">const<pos:position pos:line="110" pos:column="21"/></specifier> <name pos:line="110" pos:column="22">char<pos:position pos:line="110" pos:column="26"/></name> <operator pos:line="110" pos:column="27">*<pos:position pos:line="110" pos:column="28"/></operator><operator pos:line="110" pos:column="28">)<pos:position pos:line="110" pos:column="29"/></operator> <name><name pos:line="110" pos:column="30">pstr<pos:position pos:line="110" pos:column="34"/></name><operator pos:line="110" pos:column="34">-&gt;<pos:position pos:line="110" pos:column="39"/></operator><name pos:line="110" pos:column="36">raw_mbs<pos:position pos:line="110" pos:column="43"/></name></name> <operator pos:line="110" pos:column="44">+<pos:position pos:line="110" pos:column="45"/></operator> <name><name pos:line="110" pos:column="46">pstr<pos:position pos:line="110" pos:column="50"/></name><operator pos:line="110" pos:column="50">-&gt;<pos:position pos:line="110" pos:column="55"/></operator><name pos:line="110" pos:column="52">raw_mbs_idx<pos:position pos:line="110" pos:column="63"/></name></name> <operator pos:line="110" pos:column="64">+<pos:position pos:line="110" pos:column="65"/></operator> <name pos:line="110" pos:column="66">src_idx<pos:position pos:line="110" pos:column="73"/></name></expr>;<pos:position pos:line="110" pos:column="74"/></expr_stmt></block></else></if>
	<expr_stmt><expr><name pos:line="111" pos:column="9">mbclen<pos:position pos:line="111" pos:column="15"/></name> <operator pos:line="111" pos:column="16">=<pos:position pos:line="111" pos:column="17"/></operator> <call><name pos:line="111" pos:column="18">__mbrtowc<pos:position pos:line="111" pos:column="27"/></name> <argument_list pos:line="111" pos:column="28">(<argument><expr><operator pos:line="111" pos:column="29">&amp;<pos:position pos:line="111" pos:column="34"/></operator><name pos:line="111" pos:column="30">wc<pos:position pos:line="111" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="34">p<pos:position pos:line="111" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="37">remain_len<pos:position pos:line="111" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="49">&amp;<pos:position pos:line="111" pos:column="54"/></operator><name><name pos:line="111" pos:column="50">pstr<pos:position pos:line="111" pos:column="54"/></name><operator pos:line="111" pos:column="54">-&gt;<pos:position pos:line="111" pos:column="59"/></operator><name pos:line="111" pos:column="56">cur_state<pos:position pos:line="111" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="111" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="67"/></expr_stmt>
	<if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><call><name pos:line="112" pos:column="13">BE<pos:position pos:line="112" pos:column="15"/></name> <argument_list pos:line="112" pos:column="16">(<argument><expr><name pos:line="112" pos:column="17">mbclen<pos:position pos:line="112" pos:column="23"/></name> <operator pos:line="112" pos:column="24">+<pos:position pos:line="112" pos:column="25"/></operator> <literal type="number" pos:line="112" pos:column="26">2<pos:position pos:line="112" pos:column="27"/></literal> <operator pos:line="112" pos:column="28">&gt;<pos:position pos:line="112" pos:column="32"/></operator> <literal type="number" pos:line="112" pos:column="30">2<pos:position pos:line="112" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="112" pos:column="33">1<pos:position pos:line="112" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="112" pos:column="36"/></condition><then pos:line="112" pos:column="36">
	  <block pos:line="113" pos:column="11">{
	    <decl_stmt><decl><type><name pos:line="114" pos:column="13">wchar_t<pos:position pos:line="114" pos:column="20"/></name></type> <name pos:line="114" pos:column="21">wcu<pos:position pos:line="114" pos:column="24"/></name> <init pos:line="114" pos:column="25">= <expr><name pos:line="114" pos:column="27">wc<pos:position pos:line="114" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="114" pos:column="30"/></decl_stmt>
	    <if pos:line="115" pos:column="13">if <condition pos:line="115" pos:column="16">(<expr><call><name pos:line="115" pos:column="17">iswlower<pos:position pos:line="115" pos:column="25"/></name> <argument_list pos:line="115" pos:column="26">(<argument><expr><name pos:line="115" pos:column="27">wc<pos:position pos:line="115" pos:column="29"/></name></expr></argument>)<pos:position pos:line="115" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="115" pos:column="31"/></condition><then pos:line="115" pos:column="31">
	      <block pos:line="116" pos:column="15">{
		<decl_stmt><decl><type><name pos:line="117" pos:column="17">size_t<pos:position pos:line="117" pos:column="23"/></name></type> <name pos:line="117" pos:column="24">mbcdlen<pos:position pos:line="117" pos:column="31"/></name></decl>;<pos:position pos:line="117" pos:column="32"/></decl_stmt>

		<expr_stmt><expr><name pos:line="119" pos:column="17">wcu<pos:position pos:line="119" pos:column="20"/></name> <operator pos:line="119" pos:column="21">=<pos:position pos:line="119" pos:column="22"/></operator> <call><name pos:line="119" pos:column="23">towupper<pos:position pos:line="119" pos:column="31"/></name> <argument_list pos:line="119" pos:column="32">(<argument><expr><name pos:line="119" pos:column="33">wc<pos:position pos:line="119" pos:column="35"/></name></expr></argument>)<pos:position pos:line="119" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="120" pos:column="17">mbcdlen<pos:position pos:line="120" pos:column="24"/></name> <operator pos:line="120" pos:column="25">=<pos:position pos:line="120" pos:column="26"/></operator> <call><name pos:line="120" pos:column="27">wcrtomb<pos:position pos:line="120" pos:column="34"/></name> <argument_list pos:line="120" pos:column="35">(<argument><expr><operator pos:line="120" pos:column="36">(<pos:position pos:line="120" pos:column="37"/></operator><name pos:line="120" pos:column="37">char<pos:position pos:line="120" pos:column="41"/></name> <operator pos:line="120" pos:column="42">*<pos:position pos:line="120" pos:column="43"/></operator><operator pos:line="120" pos:column="43">)<pos:position pos:line="120" pos:column="44"/></operator> <name pos:line="120" pos:column="45">buf<pos:position pos:line="120" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="50">wcu<pos:position pos:line="120" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="55">&amp;<pos:position pos:line="120" pos:column="60"/></operator><name pos:line="120" pos:column="56">prev_st<pos:position pos:line="120" pos:column="63"/></name></expr></argument>)<pos:position pos:line="120" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="65"/></expr_stmt>
		<if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><call><name pos:line="121" pos:column="21">BE<pos:position pos:line="121" pos:column="23"/></name> <argument_list pos:line="121" pos:column="24">(<argument><expr><name pos:line="121" pos:column="25">mbclen<pos:position pos:line="121" pos:column="31"/></name> <operator pos:line="121" pos:column="32">==<pos:position pos:line="121" pos:column="34"/></operator> <name pos:line="121" pos:column="35">mbcdlen<pos:position pos:line="121" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="121" pos:column="44">1<pos:position pos:line="121" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="121" pos:column="47"/></condition><then pos:line="121" pos:column="47">
		  <block type="pseudo"><expr_stmt><expr><call><name pos:line="122" pos:column="19">memcpy<pos:position pos:line="122" pos:column="25"/></name> <argument_list pos:line="122" pos:column="26">(<argument><expr><name><name pos:line="122" pos:column="27">pstr<pos:position pos:line="122" pos:column="31"/></name><operator pos:line="122" pos:column="31">-&gt;<pos:position pos:line="122" pos:column="36"/></operator><name pos:line="122" pos:column="33">mbs<pos:position pos:line="122" pos:column="36"/></name></name> <operator pos:line="122" pos:column="37">+<pos:position pos:line="122" pos:column="38"/></operator> <name pos:line="122" pos:column="39">byte_idx<pos:position pos:line="122" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="49">buf<pos:position pos:line="122" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="54">mbclen<pos:position pos:line="122" pos:column="60"/></name></expr></argument>)<pos:position pos:line="122" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="62"/></expr_stmt></block></then>
		<elseif pos:line="123" pos:column="17">else <if pos:line="123" pos:column="22">if <condition pos:line="123" pos:column="25">(<expr><name pos:line="123" pos:column="26">mbcdlen<pos:position pos:line="123" pos:column="33"/></name> <operator pos:line="123" pos:column="34">!=<pos:position pos:line="123" pos:column="36"/></operator> <operator pos:line="123" pos:column="37">(<pos:position pos:line="123" pos:column="38"/></operator><name pos:line="123" pos:column="38">size_t<pos:position pos:line="123" pos:column="44"/></name><operator pos:line="123" pos:column="44">)<pos:position pos:line="123" pos:column="45"/></operator> <operator pos:line="123" pos:column="46">-<pos:position pos:line="123" pos:column="47"/></operator><literal type="number" pos:line="123" pos:column="47">1<pos:position pos:line="123" pos:column="48"/></literal></expr>)<pos:position pos:line="123" pos:column="49"/></condition><then pos:line="123" pos:column="49">
		  <block pos:line="124" pos:column="19">{
		    <decl_stmt><decl><type><name pos:line="125" pos:column="21">size_t<pos:position pos:line="125" pos:column="27"/></name></type> <name pos:line="125" pos:column="28">i<pos:position pos:line="125" pos:column="29"/></name></decl>;<pos:position pos:line="125" pos:column="30"/></decl_stmt>

		    <if pos:line="127" pos:column="21">if <condition pos:line="127" pos:column="24">(<expr><name pos:line="127" pos:column="25">byte_idx<pos:position pos:line="127" pos:column="33"/></name> <operator pos:line="127" pos:column="34">+<pos:position pos:line="127" pos:column="35"/></operator> <name pos:line="127" pos:column="36">mbcdlen<pos:position pos:line="127" pos:column="43"/></name> <operator pos:line="127" pos:column="44">&gt;<pos:position pos:line="127" pos:column="48"/></operator> <name><name pos:line="127" pos:column="46">pstr<pos:position pos:line="127" pos:column="50"/></name><operator pos:line="127" pos:column="50">-&gt;<pos:position pos:line="127" pos:column="55"/></operator><name pos:line="127" pos:column="52">bufs_len<pos:position pos:line="127" pos:column="60"/></name></name></expr>)<pos:position pos:line="127" pos:column="61"/></condition><then pos:line="127" pos:column="61">
		      <block pos:line="128" pos:column="23">{
			<expr_stmt><expr><name><name pos:line="129" pos:column="25">pstr<pos:position pos:line="129" pos:column="29"/></name><operator pos:line="129" pos:column="29">-&gt;<pos:position pos:line="129" pos:column="34"/></operator><name pos:line="129" pos:column="31">cur_state<pos:position pos:line="129" pos:column="40"/></name></name> <operator pos:line="129" pos:column="41">=<pos:position pos:line="129" pos:column="42"/></operator> <name pos:line="129" pos:column="43">prev_st<pos:position pos:line="129" pos:column="50"/></name></expr>;<pos:position pos:line="129" pos:column="51"/></expr_stmt>
			<break pos:line="130" pos:column="25">break;<pos:position pos:line="130" pos:column="31"/></break>
		      }<pos:position pos:line="131" pos:column="24"/></block></then></if>

		    <if pos:line="133" pos:column="21">if <condition pos:line="133" pos:column="24">(<expr><name><name pos:line="133" pos:column="25">pstr<pos:position pos:line="133" pos:column="29"/></name><operator pos:line="133" pos:column="29">-&gt;<pos:position pos:line="133" pos:column="34"/></operator><name pos:line="133" pos:column="31">offsets<pos:position pos:line="133" pos:column="38"/></name></name> <operator pos:line="133" pos:column="39">==<pos:position pos:line="133" pos:column="41"/></operator> <name pos:line="133" pos:column="42">NULL<pos:position pos:line="133" pos:column="46"/></name></expr>)<pos:position pos:line="133" pos:column="47"/></condition><then pos:line="133" pos:column="47">
		      <block pos:line="134" pos:column="23">{
			<expr_stmt><expr><name><name pos:line="135" pos:column="25">pstr<pos:position pos:line="135" pos:column="29"/></name><operator pos:line="135" pos:column="29">-&gt;<pos:position pos:line="135" pos:column="34"/></operator><name pos:line="135" pos:column="31">offsets<pos:position pos:line="135" pos:column="38"/></name></name> <operator pos:line="135" pos:column="39">=<pos:position pos:line="135" pos:column="40"/></operator> <call><name pos:line="135" pos:column="41">re_malloc<pos:position pos:line="135" pos:column="50"/></name> <argument_list pos:line="135" pos:column="51">(<argument><expr><name pos:line="135" pos:column="52">int<pos:position pos:line="135" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="57">pstr<pos:position pos:line="135" pos:column="61"/></name><operator pos:line="135" pos:column="61">-&gt;<pos:position pos:line="135" pos:column="66"/></operator><name pos:line="135" pos:column="63">bufs_len<pos:position pos:line="135" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="73"/></expr_stmt>

			<if pos:line="137" pos:column="25">if <condition pos:line="137" pos:column="28">(<expr><name><name pos:line="137" pos:column="29">pstr<pos:position pos:line="137" pos:column="33"/></name><operator pos:line="137" pos:column="33">-&gt;<pos:position pos:line="137" pos:column="38"/></operator><name pos:line="137" pos:column="35">offsets<pos:position pos:line="137" pos:column="42"/></name></name> <operator pos:line="137" pos:column="43">==<pos:position pos:line="137" pos:column="45"/></operator> <name pos:line="137" pos:column="46">NULL<pos:position pos:line="137" pos:column="50"/></name></expr>)<pos:position pos:line="137" pos:column="51"/></condition><then pos:line="137" pos:column="51">
			  <block type="pseudo"><return pos:line="138" pos:column="27">return <expr><name pos:line="138" pos:column="34">REG_ESPACE<pos:position pos:line="138" pos:column="44"/></name></expr>;<pos:position pos:line="138" pos:column="45"/></return></block></then></if>
		      }<pos:position pos:line="139" pos:column="24"/></block></then></if>
		    <if pos:line="140" pos:column="21">if <condition pos:line="140" pos:column="24">(<expr><operator pos:line="140" pos:column="25">!<pos:position pos:line="140" pos:column="26"/></operator><name><name pos:line="140" pos:column="26">pstr<pos:position pos:line="140" pos:column="30"/></name><operator pos:line="140" pos:column="30">-&gt;<pos:position pos:line="140" pos:column="35"/></operator><name pos:line="140" pos:column="32">offsets_needed<pos:position pos:line="140" pos:column="46"/></name></name></expr>)<pos:position pos:line="140" pos:column="47"/></condition><then pos:line="140" pos:column="47">
		      <block pos:line="141" pos:column="23">{
			<for pos:line="142" pos:column="25">for <control pos:line="142" pos:column="29">(<init><expr><name pos:line="142" pos:column="30">i<pos:position pos:line="142" pos:column="31"/></name> <operator pos:line="142" pos:column="32">=<pos:position pos:line="142" pos:column="33"/></operator> <literal type="number" pos:line="142" pos:column="34">0<pos:position pos:line="142" pos:column="35"/></literal></expr>;<pos:position pos:line="142" pos:column="36"/></init> <condition><expr><name pos:line="142" pos:column="37">i<pos:position pos:line="142" pos:column="38"/></name> <operator pos:line="142" pos:column="39">&lt;<pos:position pos:line="142" pos:column="43"/></operator> <operator pos:line="142" pos:column="41">(<pos:position pos:line="142" pos:column="42"/></operator><name pos:line="142" pos:column="42">size_t<pos:position pos:line="142" pos:column="48"/></name><operator pos:line="142" pos:column="48">)<pos:position pos:line="142" pos:column="49"/></operator> <name pos:line="142" pos:column="50">byte_idx<pos:position pos:line="142" pos:column="58"/></name></expr>;<pos:position pos:line="142" pos:column="59"/></condition> <incr><expr><operator pos:line="142" pos:column="60">++<pos:position pos:line="142" pos:column="62"/></operator><name pos:line="142" pos:column="62">i<pos:position pos:line="142" pos:column="63"/></name></expr></incr>)<pos:position pos:line="142" pos:column="64"/></control>
			  <block type="pseudo"><expr_stmt><expr><name><name pos:line="143" pos:column="27">pstr<pos:position pos:line="143" pos:column="31"/></name><operator pos:line="143" pos:column="31">-&gt;<pos:position pos:line="143" pos:column="36"/></operator><name pos:line="143" pos:column="33">offsets<pos:position pos:line="143" pos:column="40"/></name><index pos:line="143" pos:column="40">[<expr><name pos:line="143" pos:column="41">i<pos:position pos:line="143" pos:column="42"/></name></expr>]<pos:position pos:line="143" pos:column="43"/></index></name> <operator pos:line="143" pos:column="44">=<pos:position pos:line="143" pos:column="45"/></operator> <name pos:line="143" pos:column="46">i<pos:position pos:line="143" pos:column="47"/></name></expr>;<pos:position pos:line="143" pos:column="48"/></expr_stmt></block></for>
			<expr_stmt><expr><name><name pos:line="144" pos:column="25">pstr<pos:position pos:line="144" pos:column="29"/></name><operator pos:line="144" pos:column="29">-&gt;<pos:position pos:line="144" pos:column="34"/></operator><name pos:line="144" pos:column="31">offsets_needed<pos:position pos:line="144" pos:column="45"/></name></name> <operator pos:line="144" pos:column="46">=<pos:position pos:line="144" pos:column="47"/></operator> <literal type="number" pos:line="144" pos:column="48">1<pos:position pos:line="144" pos:column="49"/></literal></expr>;<pos:position pos:line="144" pos:column="50"/></expr_stmt>
		      }<pos:position pos:line="145" pos:column="24"/></block></then></if>

		    <expr_stmt><expr><call><name pos:line="147" pos:column="21">memcpy<pos:position pos:line="147" pos:column="27"/></name> <argument_list pos:line="147" pos:column="28">(<argument><expr><name><name pos:line="147" pos:column="29">pstr<pos:position pos:line="147" pos:column="33"/></name><operator pos:line="147" pos:column="33">-&gt;<pos:position pos:line="147" pos:column="38"/></operator><name pos:line="147" pos:column="35">mbs<pos:position pos:line="147" pos:column="38"/></name></name> <operator pos:line="147" pos:column="39">+<pos:position pos:line="147" pos:column="40"/></operator> <name pos:line="147" pos:column="41">byte_idx<pos:position pos:line="147" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="51">buf<pos:position pos:line="147" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="56">mbcdlen<pos:position pos:line="147" pos:column="63"/></name></expr></argument>)<pos:position pos:line="147" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="65"/></expr_stmt>
		    <expr_stmt><expr><name><name pos:line="148" pos:column="21">pstr<pos:position pos:line="148" pos:column="25"/></name><operator pos:line="148" pos:column="25">-&gt;<pos:position pos:line="148" pos:column="30"/></operator><name pos:line="148" pos:column="27">wcs<pos:position pos:line="148" pos:column="30"/></name><index pos:line="148" pos:column="30">[<expr><name pos:line="148" pos:column="31">byte_idx<pos:position pos:line="148" pos:column="39"/></name></expr>]<pos:position pos:line="148" pos:column="40"/></index></name> <operator pos:line="148" pos:column="41">=<pos:position pos:line="148" pos:column="42"/></operator> <name pos:line="148" pos:column="43">wcu<pos:position pos:line="148" pos:column="46"/></name></expr>;<pos:position pos:line="148" pos:column="47"/></expr_stmt>
		    <expr_stmt><expr><name><name pos:line="149" pos:column="21">pstr<pos:position pos:line="149" pos:column="25"/></name><operator pos:line="149" pos:column="25">-&gt;<pos:position pos:line="149" pos:column="30"/></operator><name pos:line="149" pos:column="27">offsets<pos:position pos:line="149" pos:column="34"/></name><index pos:line="149" pos:column="34">[<expr><name pos:line="149" pos:column="35">byte_idx<pos:position pos:line="149" pos:column="43"/></name></expr>]<pos:position pos:line="149" pos:column="44"/></index></name> <operator pos:line="149" pos:column="45">=<pos:position pos:line="149" pos:column="46"/></operator> <name pos:line="149" pos:column="47">src_idx<pos:position pos:line="149" pos:column="54"/></name></expr>;<pos:position pos:line="149" pos:column="55"/></expr_stmt>
		    <for pos:line="150" pos:column="21">for <control pos:line="150" pos:column="25">(<init><expr><name pos:line="150" pos:column="26">i<pos:position pos:line="150" pos:column="27"/></name> <operator pos:line="150" pos:column="28">=<pos:position pos:line="150" pos:column="29"/></operator> <literal type="number" pos:line="150" pos:column="30">1<pos:position pos:line="150" pos:column="31"/></literal></expr>;<pos:position pos:line="150" pos:column="32"/></init> <condition><expr><name pos:line="150" pos:column="33">i<pos:position pos:line="150" pos:column="34"/></name> <operator pos:line="150" pos:column="35">&lt;<pos:position pos:line="150" pos:column="39"/></operator> <name pos:line="150" pos:column="37">mbcdlen<pos:position pos:line="150" pos:column="44"/></name></expr>;<pos:position pos:line="150" pos:column="45"/></condition> <incr><expr><operator pos:line="150" pos:column="46">++<pos:position pos:line="150" pos:column="48"/></operator><name pos:line="150" pos:column="48">i<pos:position pos:line="150" pos:column="49"/></name></expr></incr>)<pos:position pos:line="150" pos:column="50"/></control>
		      <block pos:line="151" pos:column="23">{
			<expr_stmt><expr><name><name pos:line="152" pos:column="25">pstr<pos:position pos:line="152" pos:column="29"/></name><operator pos:line="152" pos:column="29">-&gt;<pos:position pos:line="152" pos:column="34"/></operator><name pos:line="152" pos:column="31">offsets<pos:position pos:line="152" pos:column="38"/></name><index pos:line="152" pos:column="38">[<expr><name pos:line="152" pos:column="39">byte_idx<pos:position pos:line="152" pos:column="47"/></name> <operator pos:line="152" pos:column="48">+<pos:position pos:line="152" pos:column="49"/></operator> <name pos:line="152" pos:column="50">i<pos:position pos:line="152" pos:column="51"/></name></expr>]<pos:position pos:line="152" pos:column="52"/></index></name>
			  <operator pos:line="153" pos:column="27">=<pos:position pos:line="153" pos:column="28"/></operator> <name pos:line="153" pos:column="29">src_idx<pos:position pos:line="153" pos:column="36"/></name> <operator pos:line="153" pos:column="37">+<pos:position pos:line="153" pos:column="38"/></operator> <operator pos:line="153" pos:column="39">(<pos:position pos:line="153" pos:column="40"/></operator><ternary><condition><expr><name pos:line="153" pos:column="40">i<pos:position pos:line="153" pos:column="41"/></name> <operator pos:line="153" pos:column="42">&lt;<pos:position pos:line="153" pos:column="46"/></operator> <name pos:line="153" pos:column="44">mbclen<pos:position pos:line="153" pos:column="50"/></name></expr> ?<pos:position pos:line="153" pos:column="52"/></condition><then pos:line="153" pos:column="52"> <expr><name pos:line="153" pos:column="53">i<pos:position pos:line="153" pos:column="54"/></name></expr> <pos:position pos:line="153" pos:column="55"/></then><else pos:line="153" pos:column="55">: <expr><name pos:line="153" pos:column="57">mbclen<pos:position pos:line="153" pos:column="63"/></name> <operator pos:line="153" pos:column="64">-<pos:position pos:line="153" pos:column="65"/></operator> <literal type="number" pos:line="153" pos:column="66">1<pos:position pos:line="153" pos:column="67"/></literal></expr></else></ternary><operator pos:line="153" pos:column="67">)<pos:position pos:line="153" pos:column="68"/></operator></expr>;<pos:position pos:line="153" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="154" pos:column="25">pstr<pos:position pos:line="154" pos:column="29"/></name><operator pos:line="154" pos:column="29">-&gt;<pos:position pos:line="154" pos:column="34"/></operator><name pos:line="154" pos:column="31">wcs<pos:position pos:line="154" pos:column="34"/></name><index pos:line="154" pos:column="34">[<expr><name pos:line="154" pos:column="35">byte_idx<pos:position pos:line="154" pos:column="43"/></name> <operator pos:line="154" pos:column="44">+<pos:position pos:line="154" pos:column="45"/></operator> <name pos:line="154" pos:column="46">i<pos:position pos:line="154" pos:column="47"/></name></expr>]<pos:position pos:line="154" pos:column="48"/></index></name> <operator pos:line="154" pos:column="49">=<pos:position pos:line="154" pos:column="50"/></operator> <name pos:line="154" pos:column="51">WEOF<pos:position pos:line="154" pos:column="55"/></name></expr>;<pos:position pos:line="154" pos:column="56"/></expr_stmt>
		      }<pos:position pos:line="155" pos:column="24"/></block></for>
		    <expr_stmt><expr><name><name pos:line="156" pos:column="21">pstr<pos:position pos:line="156" pos:column="25"/></name><operator pos:line="156" pos:column="25">-&gt;<pos:position pos:line="156" pos:column="30"/></operator><name pos:line="156" pos:column="27">len<pos:position pos:line="156" pos:column="30"/></name></name> <operator pos:line="156" pos:column="31">+=<pos:position pos:line="156" pos:column="33"/></operator> <name pos:line="156" pos:column="34">mbcdlen<pos:position pos:line="156" pos:column="41"/></name> <operator pos:line="156" pos:column="42">-<pos:position pos:line="156" pos:column="43"/></operator> <name pos:line="156" pos:column="44">mbclen<pos:position pos:line="156" pos:column="50"/></name></expr>;<pos:position pos:line="156" pos:column="51"/></expr_stmt>
		    <if pos:line="157" pos:column="21">if <condition pos:line="157" pos:column="24">(<expr><name><name pos:line="157" pos:column="25">pstr<pos:position pos:line="157" pos:column="29"/></name><operator pos:line="157" pos:column="29">-&gt;<pos:position pos:line="157" pos:column="34"/></operator><name pos:line="157" pos:column="31">raw_stop<pos:position pos:line="157" pos:column="39"/></name></name> <operator pos:line="157" pos:column="40">&gt;<pos:position pos:line="157" pos:column="44"/></operator> <name pos:line="157" pos:column="42">src_idx<pos:position pos:line="157" pos:column="49"/></name></expr>)<pos:position pos:line="157" pos:column="50"/></condition><then pos:line="157" pos:column="50">
		      <block type="pseudo"><expr_stmt><expr><name><name pos:line="158" pos:column="23">pstr<pos:position pos:line="158" pos:column="27"/></name><operator pos:line="158" pos:column="27">-&gt;<pos:position pos:line="158" pos:column="32"/></operator><name pos:line="158" pos:column="29">stop<pos:position pos:line="158" pos:column="33"/></name></name> <operator pos:line="158" pos:column="34">+=<pos:position pos:line="158" pos:column="36"/></operator> <name pos:line="158" pos:column="37">mbcdlen<pos:position pos:line="158" pos:column="44"/></name> <operator pos:line="158" pos:column="45">-<pos:position pos:line="158" pos:column="46"/></operator> <name pos:line="158" pos:column="47">mbclen<pos:position pos:line="158" pos:column="53"/></name></expr>;<pos:position pos:line="158" pos:column="54"/></expr_stmt></block></then></if>
		    <expr_stmt><expr><name pos:line="159" pos:column="21">end_idx<pos:position pos:line="159" pos:column="28"/></name> <operator pos:line="159" pos:column="29">=<pos:position pos:line="159" pos:column="30"/></operator> <ternary><condition><expr><operator pos:line="159" pos:column="31">(<pos:position pos:line="159" pos:column="32"/></operator><name><name pos:line="159" pos:column="32">pstr<pos:position pos:line="159" pos:column="36"/></name><operator pos:line="159" pos:column="36">-&gt;<pos:position pos:line="159" pos:column="41"/></operator><name pos:line="159" pos:column="38">bufs_len<pos:position pos:line="159" pos:column="46"/></name></name> <operator pos:line="159" pos:column="47">&gt;<pos:position pos:line="159" pos:column="51"/></operator> <name><name pos:line="159" pos:column="49">pstr<pos:position pos:line="159" pos:column="53"/></name><operator pos:line="159" pos:column="53">-&gt;<pos:position pos:line="159" pos:column="58"/></operator><name pos:line="159" pos:column="55">len<pos:position pos:line="159" pos:column="58"/></name></name><operator pos:line="159" pos:column="58">)<pos:position pos:line="159" pos:column="59"/></operator></expr>
			      ?<pos:position pos:line="160" pos:column="32"/></condition><then pos:line="160" pos:column="32"> <expr><name><name pos:line="160" pos:column="33">pstr<pos:position pos:line="160" pos:column="37"/></name><operator pos:line="160" pos:column="37">-&gt;<pos:position pos:line="160" pos:column="42"/></operator><name pos:line="160" pos:column="39">len<pos:position pos:line="160" pos:column="42"/></name></name></expr> <pos:position pos:line="160" pos:column="43"/></then><else pos:line="160" pos:column="43">: <expr><name><name pos:line="160" pos:column="45">pstr<pos:position pos:line="160" pos:column="49"/></name><operator pos:line="160" pos:column="49">-&gt;<pos:position pos:line="160" pos:column="54"/></operator><name pos:line="160" pos:column="51">bufs_len<pos:position pos:line="160" pos:column="59"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="160" pos:column="60"/></expr_stmt>
		    <expr_stmt><expr><name pos:line="161" pos:column="21">byte_idx<pos:position pos:line="161" pos:column="29"/></name> <operator pos:line="161" pos:column="30">+=<pos:position pos:line="161" pos:column="32"/></operator> <name pos:line="161" pos:column="33">mbcdlen<pos:position pos:line="161" pos:column="40"/></name></expr>;<pos:position pos:line="161" pos:column="41"/></expr_stmt>
		    <expr_stmt><expr><name pos:line="162" pos:column="21">src_idx<pos:position pos:line="162" pos:column="28"/></name> <operator pos:line="162" pos:column="29">+=<pos:position pos:line="162" pos:column="31"/></operator> <name pos:line="162" pos:column="32">mbclen<pos:position pos:line="162" pos:column="38"/></name></expr>;<pos:position pos:line="162" pos:column="39"/></expr_stmt>
		    <continue pos:line="163" pos:column="21">continue;<pos:position pos:line="163" pos:column="30"/></continue>
		  }<pos:position pos:line="164" pos:column="20"/></block></then></if></elseif>
		<else pos:line="165" pos:column="17">else
		  <block type="pseudo"><expr_stmt><expr><call><name pos:line="166" pos:column="19">memcpy<pos:position pos:line="166" pos:column="25"/></name> <argument_list pos:line="166" pos:column="26">(<argument><expr><name><name pos:line="166" pos:column="27">pstr<pos:position pos:line="166" pos:column="31"/></name><operator pos:line="166" pos:column="31">-&gt;<pos:position pos:line="166" pos:column="36"/></operator><name pos:line="166" pos:column="33">mbs<pos:position pos:line="166" pos:column="36"/></name></name> <operator pos:line="166" pos:column="37">+<pos:position pos:line="166" pos:column="38"/></operator> <name pos:line="166" pos:column="39">byte_idx<pos:position pos:line="166" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="49">p<pos:position pos:line="166" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="52">mbclen<pos:position pos:line="166" pos:column="58"/></name></expr></argument>)<pos:position pos:line="166" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="60"/></expr_stmt></block></else></if>
	      }<pos:position pos:line="167" pos:column="16"/></block></then>
	    <else pos:line="168" pos:column="13">else
	      <block type="pseudo"><expr_stmt><expr><call><name pos:line="169" pos:column="15">memcpy<pos:position pos:line="169" pos:column="21"/></name> <argument_list pos:line="169" pos:column="22">(<argument><expr><name><name pos:line="169" pos:column="23">pstr<pos:position pos:line="169" pos:column="27"/></name><operator pos:line="169" pos:column="27">-&gt;<pos:position pos:line="169" pos:column="32"/></operator><name pos:line="169" pos:column="29">mbs<pos:position pos:line="169" pos:column="32"/></name></name> <operator pos:line="169" pos:column="33">+<pos:position pos:line="169" pos:column="34"/></operator> <name pos:line="169" pos:column="35">byte_idx<pos:position pos:line="169" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="45">p<pos:position pos:line="169" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="48">mbclen<pos:position pos:line="169" pos:column="54"/></name></expr></argument>)<pos:position pos:line="169" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="56"/></expr_stmt></block></else></if>

	    <if pos:line="171" pos:column="13">if <condition pos:line="171" pos:column="16">(<expr><call><name pos:line="171" pos:column="17">BE<pos:position pos:line="171" pos:column="19"/></name> <argument_list pos:line="171" pos:column="20">(<argument><expr><name><name pos:line="171" pos:column="21">pstr<pos:position pos:line="171" pos:column="25"/></name><operator pos:line="171" pos:column="25">-&gt;<pos:position pos:line="171" pos:column="30"/></operator><name pos:line="171" pos:column="27">offsets_needed<pos:position pos:line="171" pos:column="41"/></name></name> <operator pos:line="171" pos:column="42">!=<pos:position pos:line="171" pos:column="44"/></operator> <literal type="number" pos:line="171" pos:column="45">0<pos:position pos:line="171" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="171" pos:column="48">0<pos:position pos:line="171" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="171" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="171" pos:column="51"/></condition><then pos:line="171" pos:column="51">
	      <block pos:line="172" pos:column="15">{
		<decl_stmt><decl><type><name pos:line="173" pos:column="17">size_t<pos:position pos:line="173" pos:column="23"/></name></type> <name pos:line="173" pos:column="24">i<pos:position pos:line="173" pos:column="25"/></name></decl>;<pos:position pos:line="173" pos:column="26"/></decl_stmt>
		<for pos:line="174" pos:column="17">for <control pos:line="174" pos:column="21">(<init><expr><name pos:line="174" pos:column="22">i<pos:position pos:line="174" pos:column="23"/></name> <operator pos:line="174" pos:column="24">=<pos:position pos:line="174" pos:column="25"/></operator> <literal type="number" pos:line="174" pos:column="26">0<pos:position pos:line="174" pos:column="27"/></literal></expr>;<pos:position pos:line="174" pos:column="28"/></init> <condition><expr><name pos:line="174" pos:column="29">i<pos:position pos:line="174" pos:column="30"/></name> <operator pos:line="174" pos:column="31">&lt;<pos:position pos:line="174" pos:column="35"/></operator> <name pos:line="174" pos:column="33">mbclen<pos:position pos:line="174" pos:column="39"/></name></expr>;<pos:position pos:line="174" pos:column="40"/></condition> <incr><expr><operator pos:line="174" pos:column="41">++<pos:position pos:line="174" pos:column="43"/></operator><name pos:line="174" pos:column="43">i<pos:position pos:line="174" pos:column="44"/></name></expr></incr>)<pos:position pos:line="174" pos:column="45"/></control>
		  <block type="pseudo"><expr_stmt><expr><name><name pos:line="175" pos:column="19">pstr<pos:position pos:line="175" pos:column="23"/></name><operator pos:line="175" pos:column="23">-&gt;<pos:position pos:line="175" pos:column="28"/></operator><name pos:line="175" pos:column="25">offsets<pos:position pos:line="175" pos:column="32"/></name><index pos:line="175" pos:column="32">[<expr><name pos:line="175" pos:column="33">byte_idx<pos:position pos:line="175" pos:column="41"/></name> <operator pos:line="175" pos:column="42">+<pos:position pos:line="175" pos:column="43"/></operator> <name pos:line="175" pos:column="44">i<pos:position pos:line="175" pos:column="45"/></name></expr>]<pos:position pos:line="175" pos:column="46"/></index></name> <operator pos:line="175" pos:column="47">=<pos:position pos:line="175" pos:column="48"/></operator> <name pos:line="175" pos:column="49">src_idx<pos:position pos:line="175" pos:column="56"/></name> <operator pos:line="175" pos:column="57">+<pos:position pos:line="175" pos:column="58"/></operator> <name pos:line="175" pos:column="59">i<pos:position pos:line="175" pos:column="60"/></name></expr>;<pos:position pos:line="175" pos:column="61"/></expr_stmt></block></for>
	      }<pos:position pos:line="176" pos:column="16"/></block></then></if>
	    <expr_stmt><expr><name pos:line="177" pos:column="13">src_idx<pos:position pos:line="177" pos:column="20"/></name> <operator pos:line="177" pos:column="21">+=<pos:position pos:line="177" pos:column="23"/></operator> <name pos:line="177" pos:column="24">mbclen<pos:position pos:line="177" pos:column="30"/></name></expr>;<pos:position pos:line="177" pos:column="31"/></expr_stmt>

	    <expr_stmt><expr><name><name pos:line="179" pos:column="13">pstr<pos:position pos:line="179" pos:column="17"/></name><operator pos:line="179" pos:column="17">-&gt;<pos:position pos:line="179" pos:column="22"/></operator><name pos:line="179" pos:column="19">wcs<pos:position pos:line="179" pos:column="22"/></name><index pos:line="179" pos:column="22">[<expr><name pos:line="179" pos:column="23">byte_idx<pos:position pos:line="179" pos:column="31"/></name><operator pos:line="179" pos:column="31">++<pos:position pos:line="179" pos:column="33"/></operator></expr>]<pos:position pos:line="179" pos:column="34"/></index></name> <operator pos:line="179" pos:column="35">=<pos:position pos:line="179" pos:column="36"/></operator> <name pos:line="179" pos:column="37">wcu<pos:position pos:line="179" pos:column="40"/></name></expr>;<pos:position pos:line="179" pos:column="41"/></expr_stmt>
	    <comment type="block" pos:line="180" pos:column="13">/* Write paddings.  */</comment>
	    <for pos:line="181" pos:column="13">for <control pos:line="181" pos:column="17">(<init><expr><name pos:line="181" pos:column="18">remain_len<pos:position pos:line="181" pos:column="28"/></name> <operator pos:line="181" pos:column="29">=<pos:position pos:line="181" pos:column="30"/></operator> <name pos:line="181" pos:column="31">byte_idx<pos:position pos:line="181" pos:column="39"/></name> <operator pos:line="181" pos:column="40">+<pos:position pos:line="181" pos:column="41"/></operator> <name pos:line="181" pos:column="42">mbclen<pos:position pos:line="181" pos:column="48"/></name> <operator pos:line="181" pos:column="49">-<pos:position pos:line="181" pos:column="50"/></operator> <literal type="number" pos:line="181" pos:column="51">1<pos:position pos:line="181" pos:column="52"/></literal></expr>;<pos:position pos:line="181" pos:column="53"/></init> <condition><expr><name pos:line="181" pos:column="54">byte_idx<pos:position pos:line="181" pos:column="62"/></name> <operator pos:line="181" pos:column="63">&lt;<pos:position pos:line="181" pos:column="67"/></operator> <name pos:line="181" pos:column="65">remain_len<pos:position pos:line="181" pos:column="75"/></name></expr> ;<pos:position pos:line="181" pos:column="77"/></condition><incr/>)<pos:position pos:line="181" pos:column="78"/></control>
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="182" pos:column="15">pstr<pos:position pos:line="182" pos:column="19"/></name><operator pos:line="182" pos:column="19">-&gt;<pos:position pos:line="182" pos:column="24"/></operator><name pos:line="182" pos:column="21">wcs<pos:position pos:line="182" pos:column="24"/></name><index pos:line="182" pos:column="24">[<expr><name pos:line="182" pos:column="25">byte_idx<pos:position pos:line="182" pos:column="33"/></name><operator pos:line="182" pos:column="33">++<pos:position pos:line="182" pos:column="35"/></operator></expr>]<pos:position pos:line="182" pos:column="36"/></index></name> <operator pos:line="182" pos:column="37">=<pos:position pos:line="182" pos:column="38"/></operator> <name pos:line="182" pos:column="39">WEOF<pos:position pos:line="182" pos:column="43"/></name></expr>;<pos:position pos:line="182" pos:column="44"/></expr_stmt></block></for>
	  }<pos:position pos:line="183" pos:column="12"/></block></then>
	<elseif pos:line="184" pos:column="9">else <if pos:line="184" pos:column="14">if <condition pos:line="184" pos:column="17">(<expr><name pos:line="184" pos:column="18">mbclen<pos:position pos:line="184" pos:column="24"/></name> <operator pos:line="184" pos:column="25">==<pos:position pos:line="184" pos:column="27"/></operator> <operator pos:line="184" pos:column="28">(<pos:position pos:line="184" pos:column="29"/></operator><name pos:line="184" pos:column="29">size_t<pos:position pos:line="184" pos:column="35"/></name><operator pos:line="184" pos:column="35">)<pos:position pos:line="184" pos:column="36"/></operator> <operator pos:line="184" pos:column="37">-<pos:position pos:line="184" pos:column="38"/></operator><literal type="number" pos:line="184" pos:column="38">1<pos:position pos:line="184" pos:column="39"/></literal> <operator pos:line="184" pos:column="40">||<pos:position pos:line="184" pos:column="42"/></operator> <name pos:line="184" pos:column="43">mbclen<pos:position pos:line="184" pos:column="49"/></name> <operator pos:line="184" pos:column="50">==<pos:position pos:line="184" pos:column="52"/></operator> <literal type="number" pos:line="184" pos:column="53">0<pos:position pos:line="184" pos:column="54"/></literal></expr>)<pos:position pos:line="184" pos:column="55"/></condition><then pos:line="184" pos:column="55">
	  <block pos:line="185" pos:column="11">{
	    <comment type="block" pos:line="186" pos:column="13">/* It is an invalid character or '\0'.  Just use the byte.  */</comment>
	    <decl_stmt><decl><type><name pos:line="187" pos:column="13">int<pos:position pos:line="187" pos:column="16"/></name></type> <name pos:line="187" pos:column="17">ch<pos:position pos:line="187" pos:column="19"/></name> <init pos:line="187" pos:column="20">= <expr><name><name pos:line="187" pos:column="22">pstr<pos:position pos:line="187" pos:column="26"/></name><operator pos:line="187" pos:column="26">-&gt;<pos:position pos:line="187" pos:column="31"/></operator><name pos:line="187" pos:column="28">raw_mbs<pos:position pos:line="187" pos:column="35"/></name><index pos:line="187" pos:column="35">[<expr><name><name pos:line="187" pos:column="36">pstr<pos:position pos:line="187" pos:column="40"/></name><operator pos:line="187" pos:column="40">-&gt;<pos:position pos:line="187" pos:column="45"/></operator><name pos:line="187" pos:column="42">raw_mbs_idx<pos:position pos:line="187" pos:column="53"/></name></name> <operator pos:line="187" pos:column="54">+<pos:position pos:line="187" pos:column="55"/></operator> <name pos:line="187" pos:column="56">src_idx<pos:position pos:line="187" pos:column="63"/></name></expr>]<pos:position pos:line="187" pos:column="64"/></index></name></expr></init></decl>;<pos:position pos:line="187" pos:column="65"/></decl_stmt>

	    <if pos:line="189" pos:column="13">if <condition pos:line="189" pos:column="16">(<expr><call><name pos:line="189" pos:column="17">BE<pos:position pos:line="189" pos:column="19"/></name> <argument_list pos:line="189" pos:column="20">(<argument><expr><name><name pos:line="189" pos:column="21">pstr<pos:position pos:line="189" pos:column="25"/></name><operator pos:line="189" pos:column="25">-&gt;<pos:position pos:line="189" pos:column="30"/></operator><name pos:line="189" pos:column="27">trans<pos:position pos:line="189" pos:column="32"/></name></name> <operator pos:line="189" pos:column="33">!=<pos:position pos:line="189" pos:column="35"/></operator> <name pos:line="189" pos:column="36">NULL<pos:position pos:line="189" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="189" pos:column="42">0<pos:position pos:line="189" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="189" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="189" pos:column="45"/></condition><then pos:line="189" pos:column="45">
	      <block type="pseudo"><expr_stmt><expr><name pos:line="190" pos:column="15">ch<pos:position pos:line="190" pos:column="17"/></name> <operator pos:line="190" pos:column="18">=<pos:position pos:line="190" pos:column="19"/></operator> <name><name pos:line="190" pos:column="20">pstr<pos:position pos:line="190" pos:column="24"/></name><operator pos:line="190" pos:column="24">-&gt;<pos:position pos:line="190" pos:column="29"/></operator><name pos:line="190" pos:column="26">trans<pos:position pos:line="190" pos:column="31"/></name> <index pos:line="190" pos:column="32">[<expr><name pos:line="190" pos:column="33">ch<pos:position pos:line="190" pos:column="35"/></name></expr>]<pos:position pos:line="190" pos:column="36"/></index></name></expr>;<pos:position pos:line="190" pos:column="37"/></expr_stmt></block></then></if>
	    <expr_stmt><expr><name><name pos:line="191" pos:column="13">pstr<pos:position pos:line="191" pos:column="17"/></name><operator pos:line="191" pos:column="17">-&gt;<pos:position pos:line="191" pos:column="22"/></operator><name pos:line="191" pos:column="19">mbs<pos:position pos:line="191" pos:column="22"/></name><index pos:line="191" pos:column="22">[<expr><name pos:line="191" pos:column="23">byte_idx<pos:position pos:line="191" pos:column="31"/></name></expr>]<pos:position pos:line="191" pos:column="32"/></index></name> <operator pos:line="191" pos:column="33">=<pos:position pos:line="191" pos:column="34"/></operator> <name pos:line="191" pos:column="35">ch<pos:position pos:line="191" pos:column="37"/></name></expr>;<pos:position pos:line="191" pos:column="38"/></expr_stmt>

	    <if pos:line="193" pos:column="13">if <condition pos:line="193" pos:column="16">(<expr><call><name pos:line="193" pos:column="17">BE<pos:position pos:line="193" pos:column="19"/></name> <argument_list pos:line="193" pos:column="20">(<argument><expr><name><name pos:line="193" pos:column="21">pstr<pos:position pos:line="193" pos:column="25"/></name><operator pos:line="193" pos:column="25">-&gt;<pos:position pos:line="193" pos:column="30"/></operator><name pos:line="193" pos:column="27">offsets_needed<pos:position pos:line="193" pos:column="41"/></name></name> <operator pos:line="193" pos:column="42">!=<pos:position pos:line="193" pos:column="44"/></operator> <literal type="number" pos:line="193" pos:column="45">0<pos:position pos:line="193" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="193" pos:column="48">0<pos:position pos:line="193" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="193" pos:column="51"/></condition><then pos:line="193" pos:column="51">
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="194" pos:column="15">pstr<pos:position pos:line="194" pos:column="19"/></name><operator pos:line="194" pos:column="19">-&gt;<pos:position pos:line="194" pos:column="24"/></operator><name pos:line="194" pos:column="21">offsets<pos:position pos:line="194" pos:column="28"/></name><index pos:line="194" pos:column="28">[<expr><name pos:line="194" pos:column="29">byte_idx<pos:position pos:line="194" pos:column="37"/></name></expr>]<pos:position pos:line="194" pos:column="38"/></index></name> <operator pos:line="194" pos:column="39">=<pos:position pos:line="194" pos:column="40"/></operator> <name pos:line="194" pos:column="41">src_idx<pos:position pos:line="194" pos:column="48"/></name></expr>;<pos:position pos:line="194" pos:column="49"/></expr_stmt></block></then></if>
	    <expr_stmt><expr><operator pos:line="195" pos:column="13">++<pos:position pos:line="195" pos:column="15"/></operator><name pos:line="195" pos:column="15">src_idx<pos:position pos:line="195" pos:column="22"/></name></expr>;<pos:position pos:line="195" pos:column="23"/></expr_stmt>

	    <comment type="block" pos:line="197" pos:column="13">/* And also cast it to wide char.  */</comment>
	    <expr_stmt><expr><name><name pos:line="198" pos:column="13">pstr<pos:position pos:line="198" pos:column="17"/></name><operator pos:line="198" pos:column="17">-&gt;<pos:position pos:line="198" pos:column="22"/></operator><name pos:line="198" pos:column="19">wcs<pos:position pos:line="198" pos:column="22"/></name><index pos:line="198" pos:column="22">[<expr><name pos:line="198" pos:column="23">byte_idx<pos:position pos:line="198" pos:column="31"/></name><operator pos:line="198" pos:column="31">++<pos:position pos:line="198" pos:column="33"/></operator></expr>]<pos:position pos:line="198" pos:column="34"/></index></name> <operator pos:line="198" pos:column="35">=<pos:position pos:line="198" pos:column="36"/></operator> <operator pos:line="198" pos:column="37">(<pos:position pos:line="198" pos:column="38"/></operator><name pos:line="198" pos:column="38">wchar_t<pos:position pos:line="198" pos:column="45"/></name><operator pos:line="198" pos:column="45">)<pos:position pos:line="198" pos:column="46"/></operator> <name pos:line="198" pos:column="47">ch<pos:position pos:line="198" pos:column="49"/></name></expr>;<pos:position pos:line="198" pos:column="50"/></expr_stmt>
	    <if pos:line="199" pos:column="13">if <condition pos:line="199" pos:column="16">(<expr><call><name pos:line="199" pos:column="17">BE<pos:position pos:line="199" pos:column="19"/></name> <argument_list pos:line="199" pos:column="20">(<argument><expr><name pos:line="199" pos:column="21">mbclen<pos:position pos:line="199" pos:column="27"/></name> <operator pos:line="199" pos:column="28">==<pos:position pos:line="199" pos:column="30"/></operator> <operator pos:line="199" pos:column="31">(<pos:position pos:line="199" pos:column="32"/></operator><name pos:line="199" pos:column="32">size_t<pos:position pos:line="199" pos:column="38"/></name><operator pos:line="199" pos:column="38">)<pos:position pos:line="199" pos:column="39"/></operator> <operator pos:line="199" pos:column="40">-<pos:position pos:line="199" pos:column="41"/></operator><literal type="number" pos:line="199" pos:column="41">1<pos:position pos:line="199" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="199" pos:column="44">0<pos:position pos:line="199" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="199" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="199" pos:column="47"/></condition><then pos:line="199" pos:column="47">
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="200" pos:column="15">pstr<pos:position pos:line="200" pos:column="19"/></name><operator pos:line="200" pos:column="19">-&gt;<pos:position pos:line="200" pos:column="24"/></operator><name pos:line="200" pos:column="21">cur_state<pos:position pos:line="200" pos:column="30"/></name></name> <operator pos:line="200" pos:column="31">=<pos:position pos:line="200" pos:column="32"/></operator> <name pos:line="200" pos:column="33">prev_st<pos:position pos:line="200" pos:column="40"/></name></expr>;<pos:position pos:line="200" pos:column="41"/></expr_stmt></block></then></if>
	  }<pos:position pos:line="201" pos:column="12"/></block></then></if></elseif>
	<else pos:line="202" pos:column="9">else
	  <block pos:line="203" pos:column="11">{
	    <comment type="block" pos:line="204" pos:column="13">/* The buffer doesn't have enough space, finish to build.  */</comment>
	    <expr_stmt><expr><name><name pos:line="205" pos:column="13">pstr<pos:position pos:line="205" pos:column="17"/></name><operator pos:line="205" pos:column="17">-&gt;<pos:position pos:line="205" pos:column="22"/></operator><name pos:line="205" pos:column="19">cur_state<pos:position pos:line="205" pos:column="28"/></name></name> <operator pos:line="205" pos:column="29">=<pos:position pos:line="205" pos:column="30"/></operator> <name pos:line="205" pos:column="31">prev_st<pos:position pos:line="205" pos:column="38"/></name></expr>;<pos:position pos:line="205" pos:column="39"/></expr_stmt>
	    <break pos:line="206" pos:column="13">break;<pos:position pos:line="206" pos:column="19"/></break>
	  }<pos:position pos:line="207" pos:column="12"/></block></else></if>
      }<pos:position pos:line="208" pos:column="8"/></block></for></block></else></if>
  <expr_stmt><expr><name><name pos:line="209" pos:column="3">pstr<pos:position pos:line="209" pos:column="7"/></name><operator pos:line="209" pos:column="7">-&gt;<pos:position pos:line="209" pos:column="12"/></operator><name pos:line="209" pos:column="9">valid_len<pos:position pos:line="209" pos:column="18"/></name></name> <operator pos:line="209" pos:column="19">=<pos:position pos:line="209" pos:column="20"/></operator> <name pos:line="209" pos:column="21">byte_idx<pos:position pos:line="209" pos:column="29"/></name></expr>;<pos:position pos:line="209" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="210" pos:column="3">pstr<pos:position pos:line="210" pos:column="7"/></name><operator pos:line="210" pos:column="7">-&gt;<pos:position pos:line="210" pos:column="12"/></operator><name pos:line="210" pos:column="9">valid_raw_len<pos:position pos:line="210" pos:column="22"/></name></name> <operator pos:line="210" pos:column="23">=<pos:position pos:line="210" pos:column="24"/></operator> <name pos:line="210" pos:column="25">src_idx<pos:position pos:line="210" pos:column="32"/></name></expr>;<pos:position pos:line="210" pos:column="33"/></expr_stmt>
  <return pos:line="211" pos:column="3">return <expr><name pos:line="211" pos:column="10">REG_NOERROR<pos:position pos:line="211" pos:column="21"/></name></expr>;<pos:position pos:line="211" pos:column="22"/></return>
}<pos:position pos:line="212" pos:column="2"/></block></function></unit>
