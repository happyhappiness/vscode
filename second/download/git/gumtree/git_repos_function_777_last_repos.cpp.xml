<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_777_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">write_packetized_from_buf<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">src_in<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">size_t<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">len<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">int<pos:position pos:line="1" pos:column="66"/></name></type> <name pos:line="1" pos:column="67">fd_out<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">err<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><literal type="number" pos:line="3" pos:column="19">0<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">bytes_written<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><literal type="number" pos:line="4" pos:column="32">0<pos:position pos:line="4" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">bytes_to_write<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><operator pos:line="7" pos:column="16">!<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">err<pos:position pos:line="7" pos:column="20"/></name></expr>)<pos:position pos:line="7" pos:column="21"/></condition> <block pos:line="7" pos:column="22">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">(<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">len<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">-<pos:position pos:line="8" pos:column="27"/></operator> <name pos:line="8" pos:column="28">bytes_written<pos:position pos:line="8" pos:column="41"/></name><operator pos:line="8" pos:column="41">)<pos:position pos:line="8" pos:column="42"/></operator> <operator pos:line="8" pos:column="43">&gt;<pos:position pos:line="8" pos:column="47"/></operator> <name pos:line="8" pos:column="45">LARGE_PACKET_DATA_MAX<pos:position pos:line="8" pos:column="66"/></name></expr>)<pos:position pos:line="8" pos:column="67"/></condition><then pos:line="8" pos:column="67">
			<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="25">bytes_to_write<pos:position pos:line="9" pos:column="39"/></name> <operator pos:line="9" pos:column="40">=<pos:position pos:line="9" pos:column="41"/></operator> <name pos:line="9" pos:column="42">LARGE_PACKET_DATA_MAX<pos:position pos:line="9" pos:column="63"/></name></expr>;<pos:position pos:line="9" pos:column="64"/></expr_stmt></block></then>
		<else pos:line="10" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="25">bytes_to_write<pos:position pos:line="11" pos:column="39"/></name> <operator pos:line="11" pos:column="40">=<pos:position pos:line="11" pos:column="41"/></operator> <name pos:line="11" pos:column="42">len<pos:position pos:line="11" pos:column="45"/></name> <operator pos:line="11" pos:column="46">-<pos:position pos:line="11" pos:column="47"/></operator> <name pos:line="11" pos:column="48">bytes_written<pos:position pos:line="11" pos:column="61"/></name></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt></block></else></if>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">bytes_to_write<pos:position pos:line="12" pos:column="35"/></name> <operator pos:line="12" pos:column="36">==<pos:position pos:line="12" pos:column="38"/></operator> <literal type="number" pos:line="12" pos:column="39">0<pos:position pos:line="12" pos:column="40"/></literal></expr>)<pos:position pos:line="12" pos:column="41"/></condition><then pos:line="12" pos:column="41">
			<block type="pseudo"><break pos:line="13" pos:column="25">break;<pos:position pos:line="13" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="14" pos:column="17">err<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <call><name pos:line="14" pos:column="23">packet_write_gently<pos:position pos:line="14" pos:column="42"/></name><argument_list pos:line="14" pos:column="42">(<argument><expr><name pos:line="14" pos:column="43">fd_out<pos:position pos:line="14" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="51">src_in<pos:position pos:line="14" pos:column="57"/></name> <operator pos:line="14" pos:column="58">+<pos:position pos:line="14" pos:column="59"/></operator> <name pos:line="14" pos:column="60">bytes_written<pos:position pos:line="14" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="75">bytes_to_write<pos:position pos:line="14" pos:column="89"/></name></expr></argument>)<pos:position pos:line="14" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="91"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">bytes_written<pos:position pos:line="15" pos:column="30"/></name> <operator pos:line="15" pos:column="31">+=<pos:position pos:line="15" pos:column="33"/></operator> <name pos:line="15" pos:column="34">bytes_to_write<pos:position pos:line="15" pos:column="48"/></name></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></while>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">err<pos:position pos:line="17" pos:column="17"/></name></expr>)<pos:position pos:line="17" pos:column="18"/></condition><then pos:line="17" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">err<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <call><name pos:line="18" pos:column="23">packet_flush_gently<pos:position pos:line="18" pos:column="42"/></name><argument_list pos:line="18" pos:column="42">(<argument><expr><name pos:line="18" pos:column="43">fd_out<pos:position pos:line="18" pos:column="49"/></name></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt></block></then></if>
	<return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">err<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
