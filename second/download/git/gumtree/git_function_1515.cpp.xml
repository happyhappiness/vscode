<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1515.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">split_one<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">FILE<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">mbox<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">name<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">allow_bare<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">FILE<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">output<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><name pos:line="3" pos:column="24">NULL<pos:position pos:line="3" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">fd<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">is_bare<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><operator pos:line="6" pos:column="23">!<pos:position pos:line="6" pos:column="24"/></operator><call><name pos:line="6" pos:column="24">is_from_line<pos:position pos:line="6" pos:column="36"/></name><argument_list pos:line="6" pos:column="36">(<argument><expr><name><name pos:line="6" pos:column="37">buf<pos:position pos:line="6" pos:column="40"/></name><operator pos:line="6" pos:column="40">.<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="41">buf<pos:position pos:line="6" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="46">buf<pos:position pos:line="6" pos:column="49"/></name><operator pos:line="6" pos:column="49">.<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="50">len<pos:position pos:line="6" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="55"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">is_bare<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">&amp;&amp;<pos:position pos:line="8" pos:column="31"/></operator> <operator pos:line="8" pos:column="24">!<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">allow_bare<pos:position pos:line="8" pos:column="35"/></name></expr>)<pos:position pos:line="8" pos:column="36"/></condition><then pos:line="8" pos:column="36">
		<block type="pseudo"><goto pos:line="9" pos:column="17">goto <name pos:line="9" pos:column="22">corrupt<pos:position pos:line="9" pos:column="29"/></name>;<pos:position pos:line="9" pos:column="30"/></goto></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">fd<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">open<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">name<pos:position pos:line="11" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="25">O_WRONLY<pos:position pos:line="11" pos:column="33"/></name> <operator pos:line="11" pos:column="34">|<pos:position pos:line="11" pos:column="35"/></operator> <name pos:line="11" pos:column="36">O_CREAT<pos:position pos:line="11" pos:column="43"/></name> <operator pos:line="11" pos:column="44">|<pos:position pos:line="11" pos:column="45"/></operator> <name pos:line="11" pos:column="46">O_EXCL<pos:position pos:line="11" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="54">0666<pos:position pos:line="11" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="60"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">fd<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">&lt;<pos:position pos:line="12" pos:column="20"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">die_errno<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><literal type="string" pos:line="13" pos:column="27">"cannot open output file '%s'"<pos:position pos:line="13" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="59">name<pos:position pos:line="13" pos:column="63"/></name></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="65"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="14" pos:column="9">output<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name pos:line="14" pos:column="18">xfdopen<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">fd<pos:position pos:line="14" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="30">"w"<pos:position pos:line="14" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>

	<comment type="block" pos:line="16" pos:column="9">/* Copy it out, while searching for a line that begins with
	 * "From " and having something that looks like a date format.
	 */</comment>
	<for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">(<init pos:line="19" pos:column="14">;<pos:position pos:line="19" pos:column="15"/></init><condition pos:line="19" pos:column="15">;<pos:position pos:line="19" pos:column="16"/></condition><incr/>)<pos:position pos:line="19" pos:column="17"/></control> <block pos:line="19" pos:column="18">{
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">keep_cr<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">&amp;&amp;<pos:position pos:line="20" pos:column="40"/></operator> <name><name pos:line="20" pos:column="33">buf<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">.<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="37">len<pos:position pos:line="20" pos:column="40"/></name></name> <operator pos:line="20" pos:column="41">&gt;<pos:position pos:line="20" pos:column="45"/></operator> <literal type="number" pos:line="20" pos:column="43">1<pos:position pos:line="20" pos:column="44"/></literal> <operator pos:line="20" pos:column="45">&amp;&amp;<pos:position pos:line="20" pos:column="55"/></operator> <name><name pos:line="20" pos:column="48">buf<pos:position pos:line="20" pos:column="51"/></name><operator pos:line="20" pos:column="51">.<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="52">buf<pos:position pos:line="20" pos:column="55"/></name><index pos:line="20" pos:column="55">[<expr><name><name pos:line="20" pos:column="56">buf<pos:position pos:line="20" pos:column="59"/></name><operator pos:line="20" pos:column="59">.<pos:position pos:line="20" pos:column="60"/></operator><name pos:line="20" pos:column="60">len<pos:position pos:line="20" pos:column="63"/></name></name><operator pos:line="20" pos:column="63">-<pos:position pos:line="20" pos:column="64"/></operator><literal type="number" pos:line="20" pos:column="64">1<pos:position pos:line="20" pos:column="65"/></literal></expr>]<pos:position pos:line="20" pos:column="66"/></index></name> <operator pos:line="20" pos:column="67">==<pos:position pos:line="20" pos:column="69"/></operator> <literal type="char" pos:line="20" pos:column="70">'\n'<pos:position pos:line="20" pos:column="74"/></literal> <operator pos:line="20" pos:column="75">&amp;&amp;<pos:position pos:line="20" pos:column="85"/></operator>
			<name><name pos:line="21" pos:column="25">buf<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">.<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">buf<pos:position pos:line="21" pos:column="32"/></name><index pos:line="21" pos:column="32">[<expr><name><name pos:line="21" pos:column="33">buf<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">.<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="37">len<pos:position pos:line="21" pos:column="40"/></name></name><operator pos:line="21" pos:column="40">-<pos:position pos:line="21" pos:column="41"/></operator><literal type="number" pos:line="21" pos:column="41">2<pos:position pos:line="21" pos:column="42"/></literal></expr>]<pos:position pos:line="21" pos:column="43"/></index></name> <operator pos:line="21" pos:column="44">==<pos:position pos:line="21" pos:column="46"/></operator> <literal type="char" pos:line="21" pos:column="47">'\r'<pos:position pos:line="21" pos:column="51"/></literal></expr>)<pos:position pos:line="21" pos:column="52"/></condition><then pos:line="21" pos:column="52"> <block pos:line="21" pos:column="53">{
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">strbuf_setlen<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><operator pos:line="22" pos:column="39">&amp;<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="40">buf<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="45">buf<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">.<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="49">len<pos:position pos:line="22" pos:column="52"/></name></name><operator pos:line="22" pos:column="52">-<pos:position pos:line="22" pos:column="53"/></operator><literal type="number" pos:line="22" pos:column="53">2<pos:position pos:line="22" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">strbuf_addch<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><operator pos:line="23" pos:column="38">&amp;<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="39">buf<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="44">'\n'<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><call><name pos:line="26" pos:column="21">fwrite<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name><name pos:line="26" pos:column="28">buf<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">.<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="32">buf<pos:position pos:line="26" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="37">1<pos:position pos:line="26" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="40">buf<pos:position pos:line="26" pos:column="43"/></name><operator pos:line="26" pos:column="43">.<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="44">len<pos:position pos:line="26" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">output<pos:position pos:line="26" pos:column="55"/></name></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call> <operator pos:line="26" pos:column="57">!=<pos:position pos:line="26" pos:column="59"/></operator> <name><name pos:line="26" pos:column="60">buf<pos:position pos:line="26" pos:column="63"/></name><operator pos:line="26" pos:column="63">.<pos:position pos:line="26" pos:column="64"/></operator><name pos:line="26" pos:column="64">len<pos:position pos:line="26" pos:column="67"/></name></name></expr>)<pos:position pos:line="26" pos:column="68"/></condition><then pos:line="26" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">die_errno<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><literal type="string" pos:line="27" pos:column="35">"cannot write output"<pos:position pos:line="27" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt></block></then></if>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><call><name pos:line="29" pos:column="21">strbuf_getwholeline<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">(<argument><expr><operator pos:line="29" pos:column="41">&amp;<pos:position pos:line="29" pos:column="46"/></operator><name pos:line="29" pos:column="42">buf<pos:position pos:line="29" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="47">mbox<pos:position pos:line="29" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="53">'\n'<pos:position pos:line="29" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="59"/></condition><then pos:line="29" pos:column="59"> <block pos:line="29" pos:column="60">{
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><call><name pos:line="30" pos:column="29">feof<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><name pos:line="30" pos:column="34">mbox<pos:position pos:line="30" pos:column="38"/></name></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="40"/></condition><then pos:line="30" pos:column="40"> <block pos:line="30" pos:column="41">{
				<expr_stmt><expr><name pos:line="31" pos:column="33">status<pos:position pos:line="31" pos:column="39"/></name> <operator pos:line="31" pos:column="40">=<pos:position pos:line="31" pos:column="41"/></operator> <literal type="number" pos:line="31" pos:column="42">1<pos:position pos:line="31" pos:column="43"/></literal></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>
				<break pos:line="32" pos:column="33">break;<pos:position pos:line="32" pos:column="39"/></break>
			}<pos:position pos:line="33" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">die_errno<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">(<argument><expr><literal type="string" pos:line="34" pos:column="35">"cannot read mbox"<pos:position pos:line="34" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><operator pos:line="36" pos:column="21">!<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="22">is_bare<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">&amp;&amp;<pos:position pos:line="36" pos:column="40"/></operator> <call><name pos:line="36" pos:column="33">is_from_line<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">(<argument><expr><name><name pos:line="36" pos:column="46">buf<pos:position pos:line="36" pos:column="49"/></name><operator pos:line="36" pos:column="49">.<pos:position pos:line="36" pos:column="50"/></operator><name pos:line="36" pos:column="50">buf<pos:position pos:line="36" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="55">buf<pos:position pos:line="36" pos:column="58"/></name><operator pos:line="36" pos:column="58">.<pos:position pos:line="36" pos:column="59"/></operator><name pos:line="36" pos:column="59">len<pos:position pos:line="36" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="64"/></condition><then pos:line="36" pos:column="64">
			<block type="pseudo"><break pos:line="37" pos:column="25">break;<pos:position pos:line="37" pos:column="31"/></break></block></then></if> <comment type="block" pos:line="37" pos:column="32">/* done with one message */</comment>
	}<pos:position pos:line="38" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">fclose<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">output<pos:position pos:line="39" pos:column="22"/></name></expr></argument>)<pos:position pos:line="39" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>
	<return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">status<pos:position pos:line="40" pos:column="22"/></name></expr>;<pos:position pos:line="40" pos:column="23"/></return>

 <label><name pos:line="42" pos:column="2">corrupt<pos:position pos:line="42" pos:column="9"/></name>:<pos:position pos:line="42" pos:column="10"/></label>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">output<pos:position pos:line="43" pos:column="19"/></name></expr>)<pos:position pos:line="43" pos:column="20"/></condition><then pos:line="43" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="17">fclose<pos:position pos:line="44" pos:column="23"/></name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">output<pos:position pos:line="44" pos:column="30"/></name></expr></argument>)<pos:position pos:line="44" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="32"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">unlink<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">name<pos:position pos:line="45" pos:column="20"/></name></expr></argument>)<pos:position pos:line="45" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">fprintf<pos:position pos:line="46" pos:column="16"/></name><argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">stderr<pos:position pos:line="46" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="25">"corrupt mailbox\n"<pos:position pos:line="46" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">exit<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><literal type="number" pos:line="47" pos:column="14">1<pos:position pos:line="47" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="17"/></expr_stmt>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
