<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_711.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">receive_needs<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object_array<pos:position pos:line="3" pos:column="28"/></name></name></type> <name pos:line="3" pos:column="29">shallows<pos:position pos:line="3" pos:column="37"/></name> <init pos:line="3" pos:column="38">= <expr><name pos:line="3" pos:column="40">OBJECT_ARRAY_INIT<pos:position pos:line="3" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">depth<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">has_non_tip<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><literal type="number" pos:line="5" pos:column="27">0<pos:position pos:line="5" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">shallow_nr<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>
	<for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init pos:line="8" pos:column="14">;<pos:position pos:line="8" pos:column="15"/></init><condition pos:line="8" pos:column="15">;<pos:position pos:line="8" pos:column="16"/></condition><incr/>)<pos:position pos:line="8" pos:column="17"/></control> <block pos:line="8" pos:column="18">{
		<decl_stmt><decl><type><name><name pos:line="9" pos:column="17">struct<pos:position pos:line="9" pos:column="23"/></name> <name pos:line="9" pos:column="24">object<pos:position pos:line="9" pos:column="30"/></name></name> <modifier pos:line="9" pos:column="31">*<pos:position pos:line="9" pos:column="32"/></modifier></type><name pos:line="9" pos:column="32">o<pos:position pos:line="9" pos:column="33"/></name></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="10" pos:column="17">const<pos:position pos:line="10" pos:column="22"/></specifier> <name pos:line="10" pos:column="23">char<pos:position pos:line="10" pos:column="27"/></name> <modifier pos:line="10" pos:column="28">*<pos:position pos:line="10" pos:column="29"/></modifier></type><name pos:line="10" pos:column="29">features<pos:position pos:line="10" pos:column="37"/></name></decl>;<pos:position pos:line="10" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">unsigned<pos:position pos:line="11" pos:column="25"/></name> <name pos:line="11" pos:column="26">char<pos:position pos:line="11" pos:column="30"/></name></type> <name><name pos:line="11" pos:column="31">sha1_buf<pos:position pos:line="11" pos:column="39"/></name><index pos:line="11" pos:column="39">[<expr><literal type="number" pos:line="11" pos:column="40">20<pos:position pos:line="11" pos:column="42"/></literal></expr>]<pos:position pos:line="11" pos:column="43"/></index></name></decl>;<pos:position pos:line="11" pos:column="44"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">char<pos:position pos:line="12" pos:column="21"/></name> <modifier pos:line="12" pos:column="22">*<pos:position pos:line="12" pos:column="23"/></modifier></type><name pos:line="12" pos:column="23">line<pos:position pos:line="12" pos:column="27"/></name> <init pos:line="12" pos:column="28">= <expr><call><name pos:line="12" pos:column="30">packet_read_line<pos:position pos:line="12" pos:column="46"/></name><argument_list pos:line="12" pos:column="46">(<argument><expr><literal type="number" pos:line="12" pos:column="47">0<pos:position pos:line="12" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">NULL<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="56"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">reset_timeout<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">()<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><operator pos:line="14" pos:column="21">!<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">line<pos:position pos:line="14" pos:column="26"/></name></expr>)<pos:position pos:line="14" pos:column="27"/></condition><then pos:line="14" pos:column="27">
			<block type="pseudo"><break pos:line="15" pos:column="25">break;<pos:position pos:line="15" pos:column="31"/></break></block></then></if>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><call><name pos:line="17" pos:column="21">starts_with<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">line<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="39">"shallow "<pos:position pos:line="17" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="51"/></condition><then pos:line="17" pos:column="51"> <block pos:line="17" pos:column="52">{
			<decl_stmt><decl><type><name pos:line="18" pos:column="25">unsigned<pos:position pos:line="18" pos:column="33"/></name> <name pos:line="18" pos:column="34">char<pos:position pos:line="18" pos:column="38"/></name></type> <name><name pos:line="18" pos:column="39">sha1<pos:position pos:line="18" pos:column="43"/></name><index pos:line="18" pos:column="43">[<expr><literal type="number" pos:line="18" pos:column="44">20<pos:position pos:line="18" pos:column="46"/></literal></expr>]<pos:position pos:line="18" pos:column="47"/></index></name></decl>;<pos:position pos:line="18" pos:column="48"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="19" pos:column="25">struct<pos:position pos:line="19" pos:column="31"/></name> <name pos:line="19" pos:column="32">object<pos:position pos:line="19" pos:column="38"/></name></name> <modifier pos:line="19" pos:column="39">*<pos:position pos:line="19" pos:column="40"/></modifier></type><name pos:line="19" pos:column="40">object<pos:position pos:line="19" pos:column="46"/></name></decl>;<pos:position pos:line="19" pos:column="47"/></decl_stmt>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><call><name pos:line="20" pos:column="29">get_sha1_hex<pos:position pos:line="20" pos:column="41"/></name><argument_list pos:line="20" pos:column="41">(<argument><expr><name pos:line="20" pos:column="42">line<pos:position pos:line="20" pos:column="46"/></name> <operator pos:line="20" pos:column="47">+<pos:position pos:line="20" pos:column="48"/></operator> <literal type="number" pos:line="20" pos:column="49">8<pos:position pos:line="20" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="52">sha1<pos:position pos:line="20" pos:column="56"/></name></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="58"/></condition><then pos:line="20" pos:column="58">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="33">die<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><literal type="string" pos:line="21" pos:column="37">"invalid shallow line: %s"<pos:position pos:line="21" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="65">line<pos:position pos:line="21" pos:column="69"/></name></expr></argument>)<pos:position pos:line="21" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="71"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="22" pos:column="25">object<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">=<pos:position pos:line="22" pos:column="33"/></operator> <call><name pos:line="22" pos:column="34">parse_object<pos:position pos:line="22" pos:column="46"/></name><argument_list pos:line="22" pos:column="46">(<argument><expr><name pos:line="22" pos:column="47">sha1<pos:position pos:line="22" pos:column="51"/></name></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><operator pos:line="23" pos:column="29">!<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="30">object<pos:position pos:line="23" pos:column="36"/></name></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37">
				<block type="pseudo"><continue pos:line="24" pos:column="33">continue;<pos:position pos:line="24" pos:column="42"/></continue></block></then></if>
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><name><name pos:line="25" pos:column="29">object<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">-&gt;<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="37">type<pos:position pos:line="25" pos:column="41"/></name></name> <operator pos:line="25" pos:column="42">!=<pos:position pos:line="25" pos:column="44"/></operator> <name pos:line="25" pos:column="45">OBJ_COMMIT<pos:position pos:line="25" pos:column="55"/></name></expr>)<pos:position pos:line="25" pos:column="56"/></condition><then pos:line="25" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="33">die<pos:position pos:line="26" pos:column="36"/></name><argument_list pos:line="26" pos:column="36">(<argument><expr><literal type="string" pos:line="26" pos:column="37">"invalid shallow object %s"<pos:position pos:line="26" pos:column="64"/></literal></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="66">sha1_to_hex<pos:position pos:line="26" pos:column="77"/></name><argument_list pos:line="26" pos:column="77">(<argument><expr><name pos:line="26" pos:column="78">sha1<pos:position pos:line="26" pos:column="82"/></name></expr></argument>)<pos:position pos:line="26" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="85"/></expr_stmt></block></then></if>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><operator pos:line="27" pos:column="29">!<pos:position pos:line="27" pos:column="30"/></operator><operator pos:line="27" pos:column="30">(<pos:position pos:line="27" pos:column="31"/></operator><name><name pos:line="27" pos:column="31">object<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">-&gt;<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="39">flags<pos:position pos:line="27" pos:column="44"/></name></name> <operator pos:line="27" pos:column="45">&amp;<pos:position pos:line="27" pos:column="50"/></operator> <name pos:line="27" pos:column="47">CLIENT_SHALLOW<pos:position pos:line="27" pos:column="61"/></name><operator pos:line="27" pos:column="61">)<pos:position pos:line="27" pos:column="62"/></operator></expr>)<pos:position pos:line="27" pos:column="63"/></condition><then pos:line="27" pos:column="63"> <block pos:line="27" pos:column="64">{
				<expr_stmt><expr><name><name pos:line="28" pos:column="33">object<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">-&gt;<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="41">flags<pos:position pos:line="28" pos:column="46"/></name></name> <operator pos:line="28" pos:column="47">|=<pos:position pos:line="28" pos:column="49"/></operator> <name pos:line="28" pos:column="50">CLIENT_SHALLOW<pos:position pos:line="28" pos:column="64"/></name></expr>;<pos:position pos:line="28" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="29" pos:column="33">add_object_array<pos:position pos:line="29" pos:column="49"/></name><argument_list pos:line="29" pos:column="49">(<argument><expr><name pos:line="29" pos:column="50">object<pos:position pos:line="29" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="58">NULL<pos:position pos:line="29" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="64">&amp;<pos:position pos:line="29" pos:column="69"/></operator><name pos:line="29" pos:column="65">shallows<pos:position pos:line="29" pos:column="73"/></name></expr></argument>)<pos:position pos:line="29" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="75"/></expr_stmt>
			}<pos:position pos:line="30" pos:column="26"/></block></then></if>
			<continue pos:line="31" pos:column="25">continue;<pos:position pos:line="31" pos:column="34"/></continue>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><call><name pos:line="33" pos:column="21">starts_with<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">line<pos:position pos:line="33" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="39">"deepen "<pos:position pos:line="33" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="50"/></condition><then pos:line="33" pos:column="50"> <block pos:line="33" pos:column="51">{
			<decl_stmt><decl><type><name pos:line="34" pos:column="25">char<pos:position pos:line="34" pos:column="29"/></name> <modifier pos:line="34" pos:column="30">*<pos:position pos:line="34" pos:column="31"/></modifier></type><name pos:line="34" pos:column="31">end<pos:position pos:line="34" pos:column="34"/></name></decl>;<pos:position pos:line="34" pos:column="35"/></decl_stmt>
			<expr_stmt><expr><name pos:line="35" pos:column="25">depth<pos:position pos:line="35" pos:column="30"/></name> <operator pos:line="35" pos:column="31">=<pos:position pos:line="35" pos:column="32"/></operator> <call><name pos:line="35" pos:column="33">strtol<pos:position pos:line="35" pos:column="39"/></name><argument_list pos:line="35" pos:column="39">(<argument><expr><name pos:line="35" pos:column="40">line<pos:position pos:line="35" pos:column="44"/></name> <operator pos:line="35" pos:column="45">+<pos:position pos:line="35" pos:column="46"/></operator> <literal type="number" pos:line="35" pos:column="47">7<pos:position pos:line="35" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="35" pos:column="50">&amp;<pos:position pos:line="35" pos:column="55"/></operator><name pos:line="35" pos:column="51">end<pos:position pos:line="35" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="56">0<pos:position pos:line="35" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="59"/></expr_stmt>
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name pos:line="36" pos:column="29">end<pos:position pos:line="36" pos:column="32"/></name> <operator pos:line="36" pos:column="33">==<pos:position pos:line="36" pos:column="35"/></operator> <name pos:line="36" pos:column="36">line<pos:position pos:line="36" pos:column="40"/></name> <operator pos:line="36" pos:column="41">+<pos:position pos:line="36" pos:column="42"/></operator> <literal type="number" pos:line="36" pos:column="43">7<pos:position pos:line="36" pos:column="44"/></literal> <operator pos:line="36" pos:column="45">||<pos:position pos:line="36" pos:column="47"/></operator> <name pos:line="36" pos:column="48">depth<pos:position pos:line="36" pos:column="53"/></name> <operator pos:line="36" pos:column="54">&lt;=<pos:position pos:line="36" pos:column="59"/></operator> <literal type="number" pos:line="36" pos:column="57">0<pos:position pos:line="36" pos:column="58"/></literal></expr>)<pos:position pos:line="36" pos:column="59"/></condition><then pos:line="36" pos:column="59">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="33">die<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><literal type="string" pos:line="37" pos:column="37">"Invalid deepen: %s"<pos:position pos:line="37" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="59">line<pos:position pos:line="37" pos:column="63"/></name></expr></argument>)<pos:position pos:line="37" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="65"/></expr_stmt></block></then></if>
			<continue pos:line="38" pos:column="25">continue;<pos:position pos:line="38" pos:column="34"/></continue>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">!<pos:position pos:line="40" pos:column="22"/></operator><call><name pos:line="40" pos:column="22">starts_with<pos:position pos:line="40" pos:column="33"/></name><argument_list pos:line="40" pos:column="33">(<argument><expr><name pos:line="40" pos:column="34">line<pos:position pos:line="40" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="40">"want "<pos:position pos:line="40" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="48"/></argument_list></call> <operator pos:line="40" pos:column="49">||<pos:position pos:line="40" pos:column="51"/></operator>
		    <call><name pos:line="41" pos:column="21">get_sha1_hex<pos:position pos:line="41" pos:column="33"/></name><argument_list pos:line="41" pos:column="33">(<argument><expr><name pos:line="41" pos:column="34">line<pos:position pos:line="41" pos:column="38"/></name><operator pos:line="41" pos:column="38">+<pos:position pos:line="41" pos:column="39"/></operator><literal type="number" pos:line="41" pos:column="39">5<pos:position pos:line="41" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="42">sha1_buf<pos:position pos:line="41" pos:column="50"/></name></expr></argument>)<pos:position pos:line="41" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="52"/></condition><then pos:line="41" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">die<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><literal type="string" pos:line="42" pos:column="29">"git upload-pack: protocol error, "<pos:position pos:line="42" pos:column="64"/></literal>
			    <literal type="string" pos:line="43" pos:column="29">"expected to get sha, not '%s'"<pos:position pos:line="43" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="62">line<pos:position pos:line="43" pos:column="66"/></name></expr></argument>)<pos:position pos:line="43" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="68"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="45" pos:column="17">features<pos:position pos:line="45" pos:column="25"/></name> <operator pos:line="45" pos:column="26">=<pos:position pos:line="45" pos:column="27"/></operator> <name pos:line="45" pos:column="28">line<pos:position pos:line="45" pos:column="32"/></name> <operator pos:line="45" pos:column="33">+<pos:position pos:line="45" pos:column="34"/></operator> <literal type="number" pos:line="45" pos:column="35">45<pos:position pos:line="45" pos:column="37"/></literal></expr>;<pos:position pos:line="45" pos:column="38"/></expr_stmt>

		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><call><name pos:line="47" pos:column="21">parse_feature_request<pos:position pos:line="47" pos:column="42"/></name><argument_list pos:line="47" pos:column="42">(<argument><expr><name pos:line="47" pos:column="43">features<pos:position pos:line="47" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="53">"multi_ack_detailed"<pos:position pos:line="47" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="75"/></condition><then pos:line="47" pos:column="75">
			<block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="25">multi_ack<pos:position pos:line="48" pos:column="34"/></name> <operator pos:line="48" pos:column="35">=<pos:position pos:line="48" pos:column="36"/></operator> <literal type="number" pos:line="48" pos:column="37">2<pos:position pos:line="48" pos:column="38"/></literal></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt></block></then>
		<elseif pos:line="49" pos:column="17">else <if pos:line="49" pos:column="22">if <condition pos:line="49" pos:column="25">(<expr><call><name pos:line="49" pos:column="26">parse_feature_request<pos:position pos:line="49" pos:column="47"/></name><argument_list pos:line="49" pos:column="47">(<argument><expr><name pos:line="49" pos:column="48">features<pos:position pos:line="49" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="58">"multi_ack"<pos:position pos:line="49" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="71"/></condition><then pos:line="49" pos:column="71">
			<block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="25">multi_ack<pos:position pos:line="50" pos:column="34"/></name> <operator pos:line="50" pos:column="35">=<pos:position pos:line="50" pos:column="36"/></operator> <literal type="number" pos:line="50" pos:column="37">1<pos:position pos:line="50" pos:column="38"/></literal></expr>;<pos:position pos:line="50" pos:column="39"/></expr_stmt></block></then></if></elseif></if>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><call><name pos:line="51" pos:column="21">parse_feature_request<pos:position pos:line="51" pos:column="42"/></name><argument_list pos:line="51" pos:column="42">(<argument><expr><name pos:line="51" pos:column="43">features<pos:position pos:line="51" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="53">"no-done"<pos:position pos:line="51" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="64"/></condition><then pos:line="51" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="25">no_done<pos:position pos:line="52" pos:column="32"/></name> <operator pos:line="52" pos:column="33">=<pos:position pos:line="52" pos:column="34"/></operator> <literal type="number" pos:line="52" pos:column="35">1<pos:position pos:line="52" pos:column="36"/></literal></expr>;<pos:position pos:line="52" pos:column="37"/></expr_stmt></block></then></if>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><call><name pos:line="53" pos:column="21">parse_feature_request<pos:position pos:line="53" pos:column="42"/></name><argument_list pos:line="53" pos:column="42">(<argument><expr><name pos:line="53" pos:column="43">features<pos:position pos:line="53" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="53">"thin-pack"<pos:position pos:line="53" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="66"/></condition><then pos:line="53" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="25">use_thin_pack<pos:position pos:line="54" pos:column="38"/></name> <operator pos:line="54" pos:column="39">=<pos:position pos:line="54" pos:column="40"/></operator> <literal type="number" pos:line="54" pos:column="41">1<pos:position pos:line="54" pos:column="42"/></literal></expr>;<pos:position pos:line="54" pos:column="43"/></expr_stmt></block></then></if>
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><call><name pos:line="55" pos:column="21">parse_feature_request<pos:position pos:line="55" pos:column="42"/></name><argument_list pos:line="55" pos:column="42">(<argument><expr><name pos:line="55" pos:column="43">features<pos:position pos:line="55" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="53">"ofs-delta"<pos:position pos:line="55" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="66"/></condition><then pos:line="55" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="25">use_ofs_delta<pos:position pos:line="56" pos:column="38"/></name> <operator pos:line="56" pos:column="39">=<pos:position pos:line="56" pos:column="40"/></operator> <literal type="number" pos:line="56" pos:column="41">1<pos:position pos:line="56" pos:column="42"/></literal></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt></block></then></if>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><call><name pos:line="57" pos:column="21">parse_feature_request<pos:position pos:line="57" pos:column="42"/></name><argument_list pos:line="57" pos:column="42">(<argument><expr><name pos:line="57" pos:column="43">features<pos:position pos:line="57" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="53">"side-band-64k"<pos:position pos:line="57" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="70"/></condition><then pos:line="57" pos:column="70">
			<block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="25">use_sideband<pos:position pos:line="58" pos:column="37"/></name> <operator pos:line="58" pos:column="38">=<pos:position pos:line="58" pos:column="39"/></operator> <name pos:line="58" pos:column="40">LARGE_PACKET_MAX<pos:position pos:line="58" pos:column="56"/></name></expr>;<pos:position pos:line="58" pos:column="57"/></expr_stmt></block></then>
		<elseif pos:line="59" pos:column="17">else <if pos:line="59" pos:column="22">if <condition pos:line="59" pos:column="25">(<expr><call><name pos:line="59" pos:column="26">parse_feature_request<pos:position pos:line="59" pos:column="47"/></name><argument_list pos:line="59" pos:column="47">(<argument><expr><name pos:line="59" pos:column="48">features<pos:position pos:line="59" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="58">"side-band"<pos:position pos:line="59" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="71"/></condition><then pos:line="59" pos:column="71">
			<block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="25">use_sideband<pos:position pos:line="60" pos:column="37"/></name> <operator pos:line="60" pos:column="38">=<pos:position pos:line="60" pos:column="39"/></operator> <name pos:line="60" pos:column="40">DEFAULT_PACKET_MAX<pos:position pos:line="60" pos:column="58"/></name></expr>;<pos:position pos:line="60" pos:column="59"/></expr_stmt></block></then></if></elseif></if>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><call><name pos:line="61" pos:column="21">parse_feature_request<pos:position pos:line="61" pos:column="42"/></name><argument_list pos:line="61" pos:column="42">(<argument><expr><name pos:line="61" pos:column="43">features<pos:position pos:line="61" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="53">"no-progress"<pos:position pos:line="61" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="68"/></condition><then pos:line="61" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="25">no_progress<pos:position pos:line="62" pos:column="36"/></name> <operator pos:line="62" pos:column="37">=<pos:position pos:line="62" pos:column="38"/></operator> <literal type="number" pos:line="62" pos:column="39">1<pos:position pos:line="62" pos:column="40"/></literal></expr>;<pos:position pos:line="62" pos:column="41"/></expr_stmt></block></then></if>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><call><name pos:line="63" pos:column="21">parse_feature_request<pos:position pos:line="63" pos:column="42"/></name><argument_list pos:line="63" pos:column="42">(<argument><expr><name pos:line="63" pos:column="43">features<pos:position pos:line="63" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="53">"include-tag"<pos:position pos:line="63" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="68"/></condition><then pos:line="63" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="25">use_include_tag<pos:position pos:line="64" pos:column="40"/></name> <operator pos:line="64" pos:column="41">=<pos:position pos:line="64" pos:column="42"/></operator> <literal type="number" pos:line="64" pos:column="43">1<pos:position pos:line="64" pos:column="44"/></literal></expr>;<pos:position pos:line="64" pos:column="45"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="66" pos:column="17">o<pos:position pos:line="66" pos:column="18"/></name> <operator pos:line="66" pos:column="19">=<pos:position pos:line="66" pos:column="20"/></operator> <call><name pos:line="66" pos:column="21">parse_object<pos:position pos:line="66" pos:column="33"/></name><argument_list pos:line="66" pos:column="33">(<argument><expr><name pos:line="66" pos:column="34">sha1_buf<pos:position pos:line="66" pos:column="42"/></name></expr></argument>)<pos:position pos:line="66" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="44"/></expr_stmt>
		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><operator pos:line="67" pos:column="21">!<pos:position pos:line="67" pos:column="22"/></operator><name pos:line="67" pos:column="22">o<pos:position pos:line="67" pos:column="23"/></name></expr>)<pos:position pos:line="67" pos:column="24"/></condition><then pos:line="67" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="25">die<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><literal type="string" pos:line="68" pos:column="29">"git upload-pack: not our ref %s"<pos:position pos:line="68" pos:column="62"/></literal></expr></argument>,
			    <argument><expr><call><name pos:line="69" pos:column="29">sha1_to_hex<pos:position pos:line="69" pos:column="40"/></name><argument_list pos:line="69" pos:column="40">(<argument><expr><name pos:line="69" pos:column="41">sha1_buf<pos:position pos:line="69" pos:column="49"/></name></expr></argument>)<pos:position pos:line="69" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="52"/></expr_stmt></block></then></if>
		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><operator pos:line="70" pos:column="21">!<pos:position pos:line="70" pos:column="22"/></operator><operator pos:line="70" pos:column="22">(<pos:position pos:line="70" pos:column="23"/></operator><name><name pos:line="70" pos:column="23">o<pos:position pos:line="70" pos:column="24"/></name><operator pos:line="70" pos:column="24">-&gt;<pos:position pos:line="70" pos:column="29"/></operator><name pos:line="70" pos:column="26">flags<pos:position pos:line="70" pos:column="31"/></name></name> <operator pos:line="70" pos:column="32">&amp;<pos:position pos:line="70" pos:column="37"/></operator> <name pos:line="70" pos:column="34">WANTED<pos:position pos:line="70" pos:column="40"/></name><operator pos:line="70" pos:column="40">)<pos:position pos:line="70" pos:column="41"/></operator></expr>)<pos:position pos:line="70" pos:column="42"/></condition><then pos:line="70" pos:column="42"> <block pos:line="70" pos:column="43">{
			<expr_stmt><expr><name><name pos:line="71" pos:column="25">o<pos:position pos:line="71" pos:column="26"/></name><operator pos:line="71" pos:column="26">-&gt;<pos:position pos:line="71" pos:column="31"/></operator><name pos:line="71" pos:column="28">flags<pos:position pos:line="71" pos:column="33"/></name></name> <operator pos:line="71" pos:column="34">|=<pos:position pos:line="71" pos:column="36"/></operator> <name pos:line="71" pos:column="37">WANTED<pos:position pos:line="71" pos:column="43"/></name></expr>;<pos:position pos:line="71" pos:column="44"/></expr_stmt>
			<if pos:line="72" pos:column="25">if <condition pos:line="72" pos:column="28">(<expr><operator pos:line="72" pos:column="29">!<pos:position pos:line="72" pos:column="30"/></operator><call><name pos:line="72" pos:column="30">is_our_ref<pos:position pos:line="72" pos:column="40"/></name><argument_list pos:line="72" pos:column="40">(<argument><expr><name pos:line="72" pos:column="41">o<pos:position pos:line="72" pos:column="42"/></name></expr></argument>)<pos:position pos:line="72" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="44"/></condition><then pos:line="72" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="33">has_non_tip<pos:position pos:line="73" pos:column="44"/></name> <operator pos:line="73" pos:column="45">=<pos:position pos:line="73" pos:column="46"/></operator> <literal type="number" pos:line="73" pos:column="47">1<pos:position pos:line="73" pos:column="48"/></literal></expr>;<pos:position pos:line="73" pos:column="49"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">add_object_array<pos:position pos:line="74" pos:column="41"/></name><argument_list pos:line="74" pos:column="41">(<argument><expr><name pos:line="74" pos:column="42">o<pos:position pos:line="74" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="45">NULL<pos:position pos:line="74" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="51">&amp;<pos:position pos:line="74" pos:column="56"/></operator><name pos:line="74" pos:column="52">want_obj<pos:position pos:line="74" pos:column="60"/></name></expr></argument>)<pos:position pos:line="74" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="75" pos:column="18"/></block></then></if>
	}<pos:position pos:line="76" pos:column="10"/></block></for>

	<comment type="block" pos:line="78" pos:column="9">/*
	 * We have sent all our refs already, and the other end
	 * should have chosen out of them. When we are operating
	 * in the stateless RPC mode, however, their choice may
	 * have been based on the set of older refs advertised
	 * by another process that handled the initial request.
	 */</comment>
	<if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name pos:line="85" pos:column="13">has_non_tip<pos:position pos:line="85" pos:column="24"/></name></expr>)<pos:position pos:line="85" pos:column="25"/></condition><then pos:line="85" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="86" pos:column="17">check_non_tip<pos:position pos:line="86" pos:column="30"/></name><argument_list pos:line="86" pos:column="30">()<pos:position pos:line="86" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="33"/></expr_stmt></block></then></if>

	<if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><operator pos:line="88" pos:column="13">!<pos:position pos:line="88" pos:column="14"/></operator><name pos:line="88" pos:column="14">use_sideband<pos:position pos:line="88" pos:column="26"/></name> <operator pos:line="88" pos:column="27">&amp;&amp;<pos:position pos:line="88" pos:column="37"/></operator> <name pos:line="88" pos:column="30">daemon_mode<pos:position pos:line="88" pos:column="41"/></name></expr>)<pos:position pos:line="88" pos:column="42"/></condition><then pos:line="88" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="17">no_progress<pos:position pos:line="89" pos:column="28"/></name> <operator pos:line="89" pos:column="29">=<pos:position pos:line="89" pos:column="30"/></operator> <literal type="number" pos:line="89" pos:column="31">1<pos:position pos:line="89" pos:column="32"/></literal></expr>;<pos:position pos:line="89" pos:column="33"/></expr_stmt></block></then></if>

	<if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><name pos:line="91" pos:column="13">depth<pos:position pos:line="91" pos:column="18"/></name> <operator pos:line="91" pos:column="19">==<pos:position pos:line="91" pos:column="21"/></operator> <literal type="number" pos:line="91" pos:column="22">0<pos:position pos:line="91" pos:column="23"/></literal> <operator pos:line="91" pos:column="24">&amp;&amp;<pos:position pos:line="91" pos:column="34"/></operator> <name><name pos:line="91" pos:column="27">shallows<pos:position pos:line="91" pos:column="35"/></name><operator pos:line="91" pos:column="35">.<pos:position pos:line="91" pos:column="36"/></operator><name pos:line="91" pos:column="36">nr<pos:position pos:line="91" pos:column="38"/></name></name> <operator pos:line="91" pos:column="39">==<pos:position pos:line="91" pos:column="41"/></operator> <literal type="number" pos:line="91" pos:column="42">0<pos:position pos:line="91" pos:column="43"/></literal></expr>)<pos:position pos:line="91" pos:column="44"/></condition><then pos:line="91" pos:column="44">
		<block type="pseudo"><return pos:line="92" pos:column="17">return;<pos:position pos:line="92" pos:column="24"/></return></block></then></if>
	<if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><name pos:line="93" pos:column="13">depth<pos:position pos:line="93" pos:column="18"/></name> <operator pos:line="93" pos:column="19">&gt;<pos:position pos:line="93" pos:column="23"/></operator> <literal type="number" pos:line="93" pos:column="21">0<pos:position pos:line="93" pos:column="22"/></literal></expr>)<pos:position pos:line="93" pos:column="23"/></condition><then pos:line="93" pos:column="23"> <block pos:line="93" pos:column="24">{
		<decl_stmt><decl><type><name><name pos:line="94" pos:column="17">struct<pos:position pos:line="94" pos:column="23"/></name> <name pos:line="94" pos:column="24">commit_list<pos:position pos:line="94" pos:column="35"/></name></name> <modifier pos:line="94" pos:column="36">*<pos:position pos:line="94" pos:column="37"/></modifier></type><name pos:line="94" pos:column="37">result<pos:position pos:line="94" pos:column="43"/></name> <init pos:line="94" pos:column="44">= <expr><name pos:line="94" pos:column="46">NULL<pos:position pos:line="94" pos:column="50"/></name></expr></init></decl>, <modifier pos:line="94" pos:column="52">*<pos:position pos:line="94" pos:column="53"/></modifier><decl><type ref="prev"/><name pos:line="94" pos:column="53">backup<pos:position pos:line="94" pos:column="59"/></name> <init pos:line="94" pos:column="60">= <expr><name pos:line="94" pos:column="62">NULL<pos:position pos:line="94" pos:column="66"/></name></expr></init></decl>;<pos:position pos:line="94" pos:column="67"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="95" pos:column="17">int<pos:position pos:line="95" pos:column="20"/></name></type> <name pos:line="95" pos:column="21">i<pos:position pos:line="95" pos:column="22"/></name></decl>;<pos:position pos:line="95" pos:column="23"/></decl_stmt>
		<if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><name pos:line="96" pos:column="21">depth<pos:position pos:line="96" pos:column="26"/></name> <operator pos:line="96" pos:column="27">==<pos:position pos:line="96" pos:column="29"/></operator> <name pos:line="96" pos:column="30">INFINITE_DEPTH<pos:position pos:line="96" pos:column="44"/></name> <operator pos:line="96" pos:column="45">&amp;&amp;<pos:position pos:line="96" pos:column="55"/></operator> <operator pos:line="96" pos:column="48">!<pos:position pos:line="96" pos:column="49"/></operator><call><name pos:line="96" pos:column="49">is_repository_shallow<pos:position pos:line="96" pos:column="70"/></name><argument_list pos:line="96" pos:column="70">()<pos:position pos:line="96" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="73"/></condition><then pos:line="96" pos:column="73">
			<block type="pseudo"><for pos:line="97" pos:column="25">for <control pos:line="97" pos:column="29">(<init><expr><name pos:line="97" pos:column="30">i<pos:position pos:line="97" pos:column="31"/></name> <operator pos:line="97" pos:column="32">=<pos:position pos:line="97" pos:column="33"/></operator> <literal type="number" pos:line="97" pos:column="34">0<pos:position pos:line="97" pos:column="35"/></literal></expr>;<pos:position pos:line="97" pos:column="36"/></init> <condition><expr><name pos:line="97" pos:column="37">i<pos:position pos:line="97" pos:column="38"/></name> <operator pos:line="97" pos:column="39">&lt;<pos:position pos:line="97" pos:column="43"/></operator> <name><name pos:line="97" pos:column="41">shallows<pos:position pos:line="97" pos:column="49"/></name><operator pos:line="97" pos:column="49">.<pos:position pos:line="97" pos:column="50"/></operator><name pos:line="97" pos:column="50">nr<pos:position pos:line="97" pos:column="52"/></name></name></expr>;<pos:position pos:line="97" pos:column="53"/></condition> <incr><expr><name pos:line="97" pos:column="54">i<pos:position pos:line="97" pos:column="55"/></name><operator pos:line="97" pos:column="55">++<pos:position pos:line="97" pos:column="57"/></operator></expr></incr>)<pos:position pos:line="97" pos:column="58"/></control> <block pos:line="97" pos:column="59">{
				<decl_stmt><decl><type><name><name pos:line="98" pos:column="33">struct<pos:position pos:line="98" pos:column="39"/></name> <name pos:line="98" pos:column="40">object<pos:position pos:line="98" pos:column="46"/></name></name> <modifier pos:line="98" pos:column="47">*<pos:position pos:line="98" pos:column="48"/></modifier></type><name pos:line="98" pos:column="48">object<pos:position pos:line="98" pos:column="54"/></name> <init pos:line="98" pos:column="55">= <expr><name><name pos:line="98" pos:column="57">shallows<pos:position pos:line="98" pos:column="65"/></name><operator pos:line="98" pos:column="65">.<pos:position pos:line="98" pos:column="66"/></operator><name pos:line="98" pos:column="66">objects<pos:position pos:line="98" pos:column="73"/></name><index pos:line="98" pos:column="73">[<expr><name pos:line="98" pos:column="74">i<pos:position pos:line="98" pos:column="75"/></name></expr>]<pos:position pos:line="98" pos:column="76"/></index></name><operator pos:line="98" pos:column="76">.<pos:position pos:line="98" pos:column="77"/></operator><name pos:line="98" pos:column="77">item<pos:position pos:line="98" pos:column="81"/></name></expr></init></decl>;<pos:position pos:line="98" pos:column="82"/></decl_stmt>
				<expr_stmt><expr><name><name pos:line="99" pos:column="33">object<pos:position pos:line="99" pos:column="39"/></name><operator pos:line="99" pos:column="39">-&gt;<pos:position pos:line="99" pos:column="44"/></operator><name pos:line="99" pos:column="41">flags<pos:position pos:line="99" pos:column="46"/></name></name> <operator pos:line="99" pos:column="47">|=<pos:position pos:line="99" pos:column="49"/></operator> <name pos:line="99" pos:column="50">NOT_SHALLOW<pos:position pos:line="99" pos:column="61"/></name></expr>;<pos:position pos:line="99" pos:column="62"/></expr_stmt>
			}<pos:position pos:line="100" pos:column="26"/></block></for></block></then>
		<else pos:line="101" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="102" pos:column="25">backup<pos:position pos:line="102" pos:column="31"/></name> <operator pos:line="102" pos:column="32">=<pos:position pos:line="102" pos:column="33"/></operator> <name pos:line="102" pos:column="34">result<pos:position pos:line="102" pos:column="40"/></name> <operator pos:line="102" pos:column="41">=<pos:position pos:line="102" pos:column="42"/></operator>
				<call><name pos:line="103" pos:column="33">get_shallow_commits<pos:position pos:line="103" pos:column="52"/></name><argument_list pos:line="103" pos:column="52">(<argument><expr><operator pos:line="103" pos:column="53">&amp;<pos:position pos:line="103" pos:column="58"/></operator><name pos:line="103" pos:column="54">want_obj<pos:position pos:line="103" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="64">depth<pos:position pos:line="103" pos:column="69"/></name></expr></argument>,
						    <argument><expr><name pos:line="104" pos:column="53">SHALLOW<pos:position pos:line="104" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="62">NOT_SHALLOW<pos:position pos:line="104" pos:column="73"/></name></expr></argument>)<pos:position pos:line="104" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="75"/></expr_stmt></block></else></if>
		<while pos:line="105" pos:column="17">while <condition pos:line="105" pos:column="23">(<expr><name pos:line="105" pos:column="24">result<pos:position pos:line="105" pos:column="30"/></name></expr>)<pos:position pos:line="105" pos:column="31"/></condition> <block pos:line="105" pos:column="32">{
			<decl_stmt><decl><type><name><name pos:line="106" pos:column="25">struct<pos:position pos:line="106" pos:column="31"/></name> <name pos:line="106" pos:column="32">object<pos:position pos:line="106" pos:column="38"/></name></name> <modifier pos:line="106" pos:column="39">*<pos:position pos:line="106" pos:column="40"/></modifier></type><name pos:line="106" pos:column="40">object<pos:position pos:line="106" pos:column="46"/></name> <init pos:line="106" pos:column="47">= <expr><operator pos:line="106" pos:column="49">&amp;<pos:position pos:line="106" pos:column="54"/></operator><name><name pos:line="106" pos:column="50">result<pos:position pos:line="106" pos:column="56"/></name><operator pos:line="106" pos:column="56">-&gt;<pos:position pos:line="106" pos:column="61"/></operator><name pos:line="106" pos:column="58">item<pos:position pos:line="106" pos:column="62"/></name><operator pos:line="106" pos:column="62">-&gt;<pos:position pos:line="106" pos:column="67"/></operator><name pos:line="106" pos:column="64">object<pos:position pos:line="106" pos:column="70"/></name></name></expr></init></decl>;<pos:position pos:line="106" pos:column="71"/></decl_stmt>
			<if pos:line="107" pos:column="25">if <condition pos:line="107" pos:column="28">(<expr><operator pos:line="107" pos:column="29">!<pos:position pos:line="107" pos:column="30"/></operator><operator pos:line="107" pos:column="30">(<pos:position pos:line="107" pos:column="31"/></operator><name><name pos:line="107" pos:column="31">object<pos:position pos:line="107" pos:column="37"/></name><operator pos:line="107" pos:column="37">-&gt;<pos:position pos:line="107" pos:column="42"/></operator><name pos:line="107" pos:column="39">flags<pos:position pos:line="107" pos:column="44"/></name></name> <operator pos:line="107" pos:column="45">&amp;<pos:position pos:line="107" pos:column="50"/></operator> <operator pos:line="107" pos:column="47">(<pos:position pos:line="107" pos:column="48"/></operator><name pos:line="107" pos:column="48">CLIENT_SHALLOW<pos:position pos:line="107" pos:column="62"/></name><operator pos:line="107" pos:column="62">|<pos:position pos:line="107" pos:column="63"/></operator><name pos:line="107" pos:column="63">NOT_SHALLOW<pos:position pos:line="107" pos:column="74"/></name><operator pos:line="107" pos:column="74">)<pos:position pos:line="107" pos:column="75"/></operator><operator pos:line="107" pos:column="75">)<pos:position pos:line="107" pos:column="76"/></operator></expr>)<pos:position pos:line="107" pos:column="77"/></condition><then pos:line="107" pos:column="77"> <block pos:line="107" pos:column="78">{
				<expr_stmt><expr><call><name pos:line="108" pos:column="33">packet_write<pos:position pos:line="108" pos:column="45"/></name><argument_list pos:line="108" pos:column="45">(<argument><expr><literal type="number" pos:line="108" pos:column="46">1<pos:position pos:line="108" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="49">"shallow %s"<pos:position pos:line="108" pos:column="61"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="109" pos:column="49">oid_to_hex<pos:position pos:line="109" pos:column="59"/></name><argument_list pos:line="109" pos:column="59">(<argument><expr><operator pos:line="109" pos:column="60">&amp;<pos:position pos:line="109" pos:column="65"/></operator><name><name pos:line="109" pos:column="61">object<pos:position pos:line="109" pos:column="67"/></name><operator pos:line="109" pos:column="67">-&gt;<pos:position pos:line="109" pos:column="72"/></operator><name pos:line="109" pos:column="69">oid<pos:position pos:line="109" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="109" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="109" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="110" pos:column="33">register_shallow<pos:position pos:line="110" pos:column="49"/></name><argument_list pos:line="110" pos:column="49">(<argument><expr><name><name pos:line="110" pos:column="50">object<pos:position pos:line="110" pos:column="56"/></name><operator pos:line="110" pos:column="56">-&gt;<pos:position pos:line="110" pos:column="61"/></operator><name pos:line="110" pos:column="58">oid<pos:position pos:line="110" pos:column="61"/></name><operator pos:line="110" pos:column="61">.<pos:position pos:line="110" pos:column="62"/></operator><name pos:line="110" pos:column="62">hash<pos:position pos:line="110" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="68"/></expr_stmt>
				<expr_stmt><expr><name pos:line="111" pos:column="33">shallow_nr<pos:position pos:line="111" pos:column="43"/></name><operator pos:line="111" pos:column="43">++<pos:position pos:line="111" pos:column="45"/></operator></expr>;<pos:position pos:line="111" pos:column="46"/></expr_stmt>
			}<pos:position pos:line="112" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="113" pos:column="25">result<pos:position pos:line="113" pos:column="31"/></name> <operator pos:line="113" pos:column="32">=<pos:position pos:line="113" pos:column="33"/></operator> <name><name pos:line="113" pos:column="34">result<pos:position pos:line="113" pos:column="40"/></name><operator pos:line="113" pos:column="40">-&gt;<pos:position pos:line="113" pos:column="45"/></operator><name pos:line="113" pos:column="42">next<pos:position pos:line="113" pos:column="46"/></name></name></expr>;<pos:position pos:line="113" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="114" pos:column="18"/></block></while>
		<expr_stmt><expr><call><name pos:line="115" pos:column="17">free_commit_list<pos:position pos:line="115" pos:column="33"/></name><argument_list pos:line="115" pos:column="33">(<argument><expr><name pos:line="115" pos:column="34">backup<pos:position pos:line="115" pos:column="40"/></name></expr></argument>)<pos:position pos:line="115" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="42"/></expr_stmt>
		<for pos:line="116" pos:column="17">for <control pos:line="116" pos:column="21">(<init><expr><name pos:line="116" pos:column="22">i<pos:position pos:line="116" pos:column="23"/></name> <operator pos:line="116" pos:column="24">=<pos:position pos:line="116" pos:column="25"/></operator> <literal type="number" pos:line="116" pos:column="26">0<pos:position pos:line="116" pos:column="27"/></literal></expr>;<pos:position pos:line="116" pos:column="28"/></init> <condition><expr><name pos:line="116" pos:column="29">i<pos:position pos:line="116" pos:column="30"/></name> <operator pos:line="116" pos:column="31">&lt;<pos:position pos:line="116" pos:column="35"/></operator> <name><name pos:line="116" pos:column="33">shallows<pos:position pos:line="116" pos:column="41"/></name><operator pos:line="116" pos:column="41">.<pos:position pos:line="116" pos:column="42"/></operator><name pos:line="116" pos:column="42">nr<pos:position pos:line="116" pos:column="44"/></name></name></expr>;<pos:position pos:line="116" pos:column="45"/></condition> <incr><expr><name pos:line="116" pos:column="46">i<pos:position pos:line="116" pos:column="47"/></name><operator pos:line="116" pos:column="47">++<pos:position pos:line="116" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="116" pos:column="50"/></control> <block pos:line="116" pos:column="51">{
			<decl_stmt><decl><type><name><name pos:line="117" pos:column="25">struct<pos:position pos:line="117" pos:column="31"/></name> <name pos:line="117" pos:column="32">object<pos:position pos:line="117" pos:column="38"/></name></name> <modifier pos:line="117" pos:column="39">*<pos:position pos:line="117" pos:column="40"/></modifier></type><name pos:line="117" pos:column="40">object<pos:position pos:line="117" pos:column="46"/></name> <init pos:line="117" pos:column="47">= <expr><name><name pos:line="117" pos:column="49">shallows<pos:position pos:line="117" pos:column="57"/></name><operator pos:line="117" pos:column="57">.<pos:position pos:line="117" pos:column="58"/></operator><name pos:line="117" pos:column="58">objects<pos:position pos:line="117" pos:column="65"/></name><index pos:line="117" pos:column="65">[<expr><name pos:line="117" pos:column="66">i<pos:position pos:line="117" pos:column="67"/></name></expr>]<pos:position pos:line="117" pos:column="68"/></index></name><operator pos:line="117" pos:column="68">.<pos:position pos:line="117" pos:column="69"/></operator><name pos:line="117" pos:column="69">item<pos:position pos:line="117" pos:column="73"/></name></expr></init></decl>;<pos:position pos:line="117" pos:column="74"/></decl_stmt>
			<if pos:line="118" pos:column="25">if <condition pos:line="118" pos:column="28">(<expr><name><name pos:line="118" pos:column="29">object<pos:position pos:line="118" pos:column="35"/></name><operator pos:line="118" pos:column="35">-&gt;<pos:position pos:line="118" pos:column="40"/></operator><name pos:line="118" pos:column="37">flags<pos:position pos:line="118" pos:column="42"/></name></name> <operator pos:line="118" pos:column="43">&amp;<pos:position pos:line="118" pos:column="48"/></operator> <name pos:line="118" pos:column="45">NOT_SHALLOW<pos:position pos:line="118" pos:column="56"/></name></expr>)<pos:position pos:line="118" pos:column="57"/></condition><then pos:line="118" pos:column="57"> <block pos:line="118" pos:column="58">{
				<decl_stmt><decl><type><name><name pos:line="119" pos:column="33">struct<pos:position pos:line="119" pos:column="39"/></name> <name pos:line="119" pos:column="40">commit_list<pos:position pos:line="119" pos:column="51"/></name></name> <modifier pos:line="119" pos:column="52">*<pos:position pos:line="119" pos:column="53"/></modifier></type><name pos:line="119" pos:column="53">parents<pos:position pos:line="119" pos:column="60"/></name></decl>;<pos:position pos:line="119" pos:column="61"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="120" pos:column="33">packet_write<pos:position pos:line="120" pos:column="45"/></name><argument_list pos:line="120" pos:column="45">(<argument><expr><literal type="number" pos:line="120" pos:column="46">1<pos:position pos:line="120" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="49">"unshallow %s"<pos:position pos:line="120" pos:column="63"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="121" pos:column="41">oid_to_hex<pos:position pos:line="121" pos:column="51"/></name><argument_list pos:line="121" pos:column="51">(<argument><expr><operator pos:line="121" pos:column="52">&amp;<pos:position pos:line="121" pos:column="57"/></operator><name><name pos:line="121" pos:column="53">object<pos:position pos:line="121" pos:column="59"/></name><operator pos:line="121" pos:column="59">-&gt;<pos:position pos:line="121" pos:column="64"/></operator><name pos:line="121" pos:column="61">oid<pos:position pos:line="121" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="121" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="122" pos:column="33">object<pos:position pos:line="122" pos:column="39"/></name><operator pos:line="122" pos:column="39">-&gt;<pos:position pos:line="122" pos:column="44"/></operator><name pos:line="122" pos:column="41">flags<pos:position pos:line="122" pos:column="46"/></name></name> <operator pos:line="122" pos:column="47">&amp;=<pos:position pos:line="122" pos:column="53"/></operator> <operator pos:line="122" pos:column="50">~<pos:position pos:line="122" pos:column="51"/></operator><name pos:line="122" pos:column="51">CLIENT_SHALLOW<pos:position pos:line="122" pos:column="65"/></name></expr>;<pos:position pos:line="122" pos:column="66"/></expr_stmt>
				<comment type="block" pos:line="123" pos:column="33">/* make sure the real parents are parsed */</comment>
				<expr_stmt><expr><call><name pos:line="124" pos:column="33">unregister_shallow<pos:position pos:line="124" pos:column="51"/></name><argument_list pos:line="124" pos:column="51">(<argument><expr><name><name pos:line="124" pos:column="52">object<pos:position pos:line="124" pos:column="58"/></name><operator pos:line="124" pos:column="58">-&gt;<pos:position pos:line="124" pos:column="63"/></operator><name pos:line="124" pos:column="60">oid<pos:position pos:line="124" pos:column="63"/></name><operator pos:line="124" pos:column="63">.<pos:position pos:line="124" pos:column="64"/></operator><name pos:line="124" pos:column="64">hash<pos:position pos:line="124" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="124" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="125" pos:column="33">object<pos:position pos:line="125" pos:column="39"/></name><operator pos:line="125" pos:column="39">-&gt;<pos:position pos:line="125" pos:column="44"/></operator><name pos:line="125" pos:column="41">parsed<pos:position pos:line="125" pos:column="47"/></name></name> <operator pos:line="125" pos:column="48">=<pos:position pos:line="125" pos:column="49"/></operator> <literal type="number" pos:line="125" pos:column="50">0<pos:position pos:line="125" pos:column="51"/></literal></expr>;<pos:position pos:line="125" pos:column="52"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="126" pos:column="33">parse_commit_or_die<pos:position pos:line="126" pos:column="52"/></name><argument_list pos:line="126" pos:column="52">(<argument><expr><operator pos:line="126" pos:column="53">(<pos:position pos:line="126" pos:column="54"/></operator>struct <name pos:line="126" pos:column="61">commit<pos:position pos:line="126" pos:column="67"/></name> <operator pos:line="126" pos:column="68">*<pos:position pos:line="126" pos:column="69"/></operator><operator pos:line="126" pos:column="69">)<pos:position pos:line="126" pos:column="70"/></operator><name pos:line="126" pos:column="70">object<pos:position pos:line="126" pos:column="76"/></name></expr></argument>)<pos:position pos:line="126" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="78"/></expr_stmt>
				<expr_stmt><expr><name pos:line="127" pos:column="33">parents<pos:position pos:line="127" pos:column="40"/></name> <operator pos:line="127" pos:column="41">=<pos:position pos:line="127" pos:column="42"/></operator> <operator pos:line="127" pos:column="43">(<pos:position pos:line="127" pos:column="44"/></operator><operator pos:line="127" pos:column="44">(<pos:position pos:line="127" pos:column="45"/></operator>struct <name pos:line="127" pos:column="52">commit<pos:position pos:line="127" pos:column="58"/></name> <operator pos:line="127" pos:column="59">*<pos:position pos:line="127" pos:column="60"/></operator><operator pos:line="127" pos:column="60">)<pos:position pos:line="127" pos:column="61"/></operator><name pos:line="127" pos:column="61">object<pos:position pos:line="127" pos:column="67"/></name><operator pos:line="127" pos:column="67">)<pos:position pos:line="127" pos:column="68"/></operator><operator pos:line="127" pos:column="68">-&gt;<pos:position pos:line="127" pos:column="73"/></operator><name pos:line="127" pos:column="70">parents<pos:position pos:line="127" pos:column="77"/></name></expr>;<pos:position pos:line="127" pos:column="78"/></expr_stmt>
				<while pos:line="128" pos:column="33">while <condition pos:line="128" pos:column="39">(<expr><name pos:line="128" pos:column="40">parents<pos:position pos:line="128" pos:column="47"/></name></expr>)<pos:position pos:line="128" pos:column="48"/></condition> <block pos:line="128" pos:column="49">{
					<expr_stmt><expr><call><name pos:line="129" pos:column="41">add_object_array<pos:position pos:line="129" pos:column="57"/></name><argument_list pos:line="129" pos:column="57">(<argument><expr><operator pos:line="129" pos:column="58">&amp;<pos:position pos:line="129" pos:column="63"/></operator><name><name pos:line="129" pos:column="59">parents<pos:position pos:line="129" pos:column="66"/></name><operator pos:line="129" pos:column="66">-&gt;<pos:position pos:line="129" pos:column="71"/></operator><name pos:line="129" pos:column="68">item<pos:position pos:line="129" pos:column="72"/></name><operator pos:line="129" pos:column="72">-&gt;<pos:position pos:line="129" pos:column="77"/></operator><name pos:line="129" pos:column="74">object<pos:position pos:line="129" pos:column="80"/></name></name></expr></argument>,
							<argument><expr><name pos:line="130" pos:column="57">NULL<pos:position pos:line="130" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="130" pos:column="63">&amp;<pos:position pos:line="130" pos:column="68"/></operator><name pos:line="130" pos:column="64">want_obj<pos:position pos:line="130" pos:column="72"/></name></expr></argument>)<pos:position pos:line="130" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="74"/></expr_stmt>
					<expr_stmt><expr><name pos:line="131" pos:column="41">parents<pos:position pos:line="131" pos:column="48"/></name> <operator pos:line="131" pos:column="49">=<pos:position pos:line="131" pos:column="50"/></operator> <name><name pos:line="131" pos:column="51">parents<pos:position pos:line="131" pos:column="58"/></name><operator pos:line="131" pos:column="58">-&gt;<pos:position pos:line="131" pos:column="63"/></operator><name pos:line="131" pos:column="60">next<pos:position pos:line="131" pos:column="64"/></name></name></expr>;<pos:position pos:line="131" pos:column="65"/></expr_stmt>
				}<pos:position pos:line="132" pos:column="34"/></block></while>
				<expr_stmt><expr><call><name pos:line="133" pos:column="33">add_object_array<pos:position pos:line="133" pos:column="49"/></name><argument_list pos:line="133" pos:column="49">(<argument><expr><name pos:line="133" pos:column="50">object<pos:position pos:line="133" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="58">NULL<pos:position pos:line="133" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="133" pos:column="64">&amp;<pos:position pos:line="133" pos:column="69"/></operator><name pos:line="133" pos:column="65">extra_edge_obj<pos:position pos:line="133" pos:column="79"/></name></expr></argument>)<pos:position pos:line="133" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="81"/></expr_stmt>
			}<pos:position pos:line="134" pos:column="26"/></block></then></if>
			<comment type="block" pos:line="135" pos:column="25">/* make sure commit traversal conforms to client */</comment>
			<expr_stmt><expr><call><name pos:line="136" pos:column="25">register_shallow<pos:position pos:line="136" pos:column="41"/></name><argument_list pos:line="136" pos:column="41">(<argument><expr><name><name pos:line="136" pos:column="42">object<pos:position pos:line="136" pos:column="48"/></name><operator pos:line="136" pos:column="48">-&gt;<pos:position pos:line="136" pos:column="53"/></operator><name pos:line="136" pos:column="50">oid<pos:position pos:line="136" pos:column="53"/></name><operator pos:line="136" pos:column="53">.<pos:position pos:line="136" pos:column="54"/></operator><name pos:line="136" pos:column="54">hash<pos:position pos:line="136" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="136" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="60"/></expr_stmt>
		}<pos:position pos:line="137" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="138" pos:column="17">packet_flush<pos:position pos:line="138" pos:column="29"/></name><argument_list pos:line="138" pos:column="29">(<argument><expr><literal type="number" pos:line="138" pos:column="30">1<pos:position pos:line="138" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="139" pos:column="10"/></block></then> <elseif pos:line="139" pos:column="11">else
		<if pos:line="140" pos:column="17">if <condition pos:line="140" pos:column="20">(<expr><name><name pos:line="140" pos:column="21">shallows<pos:position pos:line="140" pos:column="29"/></name><operator pos:line="140" pos:column="29">.<pos:position pos:line="140" pos:column="30"/></operator><name pos:line="140" pos:column="30">nr<pos:position pos:line="140" pos:column="32"/></name></name> <operator pos:line="140" pos:column="33">&gt;<pos:position pos:line="140" pos:column="37"/></operator> <literal type="number" pos:line="140" pos:column="35">0<pos:position pos:line="140" pos:column="36"/></literal></expr>)<pos:position pos:line="140" pos:column="37"/></condition><then pos:line="140" pos:column="37"> <block pos:line="140" pos:column="38">{
			<decl_stmt><decl><type><name pos:line="141" pos:column="25">int<pos:position pos:line="141" pos:column="28"/></name></type> <name pos:line="141" pos:column="29">i<pos:position pos:line="141" pos:column="30"/></name></decl>;<pos:position pos:line="141" pos:column="31"/></decl_stmt>
			<for pos:line="142" pos:column="25">for <control pos:line="142" pos:column="29">(<init><expr><name pos:line="142" pos:column="30">i<pos:position pos:line="142" pos:column="31"/></name> <operator pos:line="142" pos:column="32">=<pos:position pos:line="142" pos:column="33"/></operator> <literal type="number" pos:line="142" pos:column="34">0<pos:position pos:line="142" pos:column="35"/></literal></expr>;<pos:position pos:line="142" pos:column="36"/></init> <condition><expr><name pos:line="142" pos:column="37">i<pos:position pos:line="142" pos:column="38"/></name> <operator pos:line="142" pos:column="39">&lt;<pos:position pos:line="142" pos:column="43"/></operator> <name><name pos:line="142" pos:column="41">shallows<pos:position pos:line="142" pos:column="49"/></name><operator pos:line="142" pos:column="49">.<pos:position pos:line="142" pos:column="50"/></operator><name pos:line="142" pos:column="50">nr<pos:position pos:line="142" pos:column="52"/></name></name></expr>;<pos:position pos:line="142" pos:column="53"/></condition> <incr><expr><name pos:line="142" pos:column="54">i<pos:position pos:line="142" pos:column="55"/></name><operator pos:line="142" pos:column="55">++<pos:position pos:line="142" pos:column="57"/></operator></expr></incr>)<pos:position pos:line="142" pos:column="58"/></control>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="143" pos:column="33">register_shallow<pos:position pos:line="143" pos:column="49"/></name><argument_list pos:line="143" pos:column="49">(<argument><expr><name><name pos:line="143" pos:column="50">shallows<pos:position pos:line="143" pos:column="58"/></name><operator pos:line="143" pos:column="58">.<pos:position pos:line="143" pos:column="59"/></operator><name pos:line="143" pos:column="59">objects<pos:position pos:line="143" pos:column="66"/></name><index pos:line="143" pos:column="66">[<expr><name pos:line="143" pos:column="67">i<pos:position pos:line="143" pos:column="68"/></name></expr>]<pos:position pos:line="143" pos:column="69"/></index></name><operator pos:line="143" pos:column="69">.<pos:position pos:line="143" pos:column="70"/></operator><name><name pos:line="143" pos:column="70">item<pos:position pos:line="143" pos:column="74"/></name><operator pos:line="143" pos:column="74">-&gt;<pos:position pos:line="143" pos:column="79"/></operator><name pos:line="143" pos:column="76">oid<pos:position pos:line="143" pos:column="79"/></name><operator pos:line="143" pos:column="79">.<pos:position pos:line="143" pos:column="80"/></operator><name pos:line="143" pos:column="80">hash<pos:position pos:line="143" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="143" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="86"/></expr_stmt></block></for>
		}<pos:position pos:line="144" pos:column="18"/></block></then></if></elseif></if>

	<expr_stmt><expr><name pos:line="146" pos:column="9">shallow_nr<pos:position pos:line="146" pos:column="19"/></name> <operator pos:line="146" pos:column="20">+=<pos:position pos:line="146" pos:column="22"/></operator> <name><name pos:line="146" pos:column="23">shallows<pos:position pos:line="146" pos:column="31"/></name><operator pos:line="146" pos:column="31">.<pos:position pos:line="146" pos:column="32"/></operator><name pos:line="146" pos:column="32">nr<pos:position pos:line="146" pos:column="34"/></name></name></expr>;<pos:position pos:line="146" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="147" pos:column="9">free<pos:position pos:line="147" pos:column="13"/></name><argument_list pos:line="147" pos:column="13">(<argument><expr><name><name pos:line="147" pos:column="14">shallows<pos:position pos:line="147" pos:column="22"/></name><operator pos:line="147" pos:column="22">.<pos:position pos:line="147" pos:column="23"/></operator><name pos:line="147" pos:column="23">objects<pos:position pos:line="147" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="147" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="32"/></expr_stmt>
}<pos:position pos:line="148" pos:column="2"/></block></function></unit>
