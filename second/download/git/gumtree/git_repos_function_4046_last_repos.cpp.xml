<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4046_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_entry_match<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">a<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">a_len<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="56">const<pos:position pos:line="1" pos:column="61"/></specifier> <name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">b<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">int<pos:position pos:line="1" pos:column="74"/></name></type> <name pos:line="1" pos:column="75">b_len<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * The caller wants to pick *a* from a tree or nothing.
	 * We are looking at *b* in a tree.
	 *
	 * (0) If a and b are the same name, we are trivially happy.
	 *
	 * There are three possibilities where *a* could be hiding
	 * behind *b*.
	 *
	 * (1) *a* == "t",   *b* == "ab"  i.e. *b* sorts earlier than *a* no
	 *                                matter what.
	 * (2) *a* == "t",   *b* == "t-2" and "t" is a subtree in the tree;
	 * (3) *a* == "t-2", *b* == "t"   and "t-2" is a blob in the tree.
	 *
	 * Otherwise we know *a* won't appear in the tree without
	 * scanning further.
	 */</comment>

	<decl_stmt><decl><type><name pos:line="21" pos:column="9">int<pos:position pos:line="21" pos:column="12"/></name></type> <name pos:line="21" pos:column="13">cmp<pos:position pos:line="21" pos:column="16"/></name> <init pos:line="21" pos:column="17">= <expr><call><name pos:line="21" pos:column="19">name_compare<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">a<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">a_len<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="42">b<pos:position pos:line="21" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="45">b_len<pos:position pos:line="21" pos:column="50"/></name></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="52"/></decl_stmt>

	<comment type="block" pos:line="23" pos:column="9">/* Most common case first -- reading sync'd trees */</comment>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">cmp<pos:position pos:line="24" pos:column="17"/></name></expr>)<pos:position pos:line="24" pos:column="18"/></condition><then pos:line="24" pos:column="18">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><name pos:line="25" pos:column="24">cmp<pos:position pos:line="25" pos:column="27"/></name></expr>;<pos:position pos:line="25" pos:column="28"/></return></block></then></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><literal type="number" pos:line="27" pos:column="13">0<pos:position pos:line="27" pos:column="14"/></literal> <operator pos:line="27" pos:column="15">&lt;<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="17">cmp<pos:position pos:line="27" pos:column="20"/></name></expr>)<pos:position pos:line="27" pos:column="21"/></condition><then pos:line="27" pos:column="21"> <block pos:line="27" pos:column="22">{
		<comment type="block" pos:line="28" pos:column="17">/* a comes after b; it does not matter if it is case (3)
		if (b_len &lt; a_len &amp;&amp; !memcmp(a, b, b_len) &amp;&amp; a[b_len] &lt; '/')
			return 1;
		*/</comment>
		<return pos:line="32" pos:column="17">return <expr><literal type="number" pos:line="32" pos:column="24">1<pos:position pos:line="32" pos:column="25"/></literal></expr>;<pos:position pos:line="32" pos:column="26"/></return> <comment type="block" pos:line="32" pos:column="27">/* keep looking */</comment>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="35" pos:column="9">/* b comes after a; are we looking at case (2)? */</comment>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">a_len<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">&lt;<pos:position pos:line="36" pos:column="23"/></operator> <name pos:line="36" pos:column="21">b_len<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">&amp;&amp;<pos:position pos:line="36" pos:column="37"/></operator> <operator pos:line="36" pos:column="30">!<pos:position pos:line="36" pos:column="31"/></operator><call><name pos:line="36" pos:column="31">memcmp<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><name pos:line="36" pos:column="38">a<pos:position pos:line="36" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="41">b<pos:position pos:line="36" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="44">a_len<pos:position pos:line="36" pos:column="49"/></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call> <operator pos:line="36" pos:column="51">&amp;&amp;<pos:position pos:line="36" pos:column="61"/></operator> <name><name pos:line="36" pos:column="54">b<pos:position pos:line="36" pos:column="55"/></name><index pos:line="36" pos:column="55">[<expr><name pos:line="36" pos:column="56">a_len<pos:position pos:line="36" pos:column="61"/></name></expr>]<pos:position pos:line="36" pos:column="62"/></index></name> <operator pos:line="36" pos:column="63">&lt;<pos:position pos:line="36" pos:column="67"/></operator> <literal type="char" pos:line="36" pos:column="65">'/'<pos:position pos:line="36" pos:column="68"/></literal></expr>)<pos:position pos:line="36" pos:column="69"/></condition><then pos:line="36" pos:column="69">
		<block type="pseudo"><return pos:line="37" pos:column="17">return <expr><literal type="number" pos:line="37" pos:column="24">1<pos:position pos:line="37" pos:column="25"/></literal></expr>;<pos:position pos:line="37" pos:column="26"/></return></block></then></if> <comment type="block" pos:line="37" pos:column="27">/* keep looking */</comment>

	<return pos:line="39" pos:column="9">return <expr><operator pos:line="39" pos:column="16">-<pos:position pos:line="39" pos:column="17"/></operator><literal type="number" pos:line="39" pos:column="17">1<pos:position pos:line="39" pos:column="18"/></literal></expr>;<pos:position pos:line="39" pos:column="19"/></return> <comment type="block" pos:line="39" pos:column="20">/* a cannot appear in the tree */</comment>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
