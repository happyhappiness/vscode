<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1778_git-2.8.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_packed_git_idx<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">path<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">packed_git<pos:position pos:line="1" pos:column="68"/></name></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">p<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">void<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">idx_map<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">pack_idx_header<pos:position pos:line="4" pos:column="31"/></name></name> <modifier pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></modifier></type><name pos:line="4" pos:column="33">hdr<pos:position pos:line="4" pos:column="36"/></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">idx_size<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">uint32_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">version<pos:position pos:line="6" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="27">nr<pos:position pos:line="6" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="31">i<pos:position pos:line="6" pos:column="32"/></name></decl>, <modifier pos:line="6" pos:column="34">*<pos:position pos:line="6" pos:column="35"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="35">index<pos:position pos:line="6" pos:column="40"/></name></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">fd<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><call><name pos:line="7" pos:column="18">git_open_noatime<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">path<pos:position pos:line="7" pos:column="39"/></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">stat<pos:position pos:line="8" pos:column="20"/></name></name></type> <name pos:line="8" pos:column="21">st<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">fd<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">&lt;<pos:position pos:line="10" pos:column="20"/></operator> <literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr>)<pos:position pos:line="10" pos:column="20"/></condition><then pos:line="10" pos:column="20">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><operator pos:line="11" pos:column="24">-<pos:position pos:line="11" pos:column="25"/></operator><literal type="number" pos:line="11" pos:column="25">1<pos:position pos:line="11" pos:column="26"/></literal></expr>;<pos:position pos:line="11" pos:column="27"/></return></block></then></if>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">fstat<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">(<argument><expr><name pos:line="12" pos:column="19">fd<pos:position pos:line="12" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="23">&amp;<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="24">st<pos:position pos:line="12" pos:column="26"/></name></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28"> <block pos:line="12" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">close<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">fd<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
		<return pos:line="14" pos:column="17">return <expr><operator pos:line="14" pos:column="24">-<pos:position pos:line="14" pos:column="25"/></operator><literal type="number" pos:line="14" pos:column="25">1<pos:position pos:line="14" pos:column="26"/></literal></expr>;<pos:position pos:line="14" pos:column="27"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="16" pos:column="9">idx_size<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <call><name pos:line="16" pos:column="20">xsize_t<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name><name pos:line="16" pos:column="28">st<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">.<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="31">st_size<pos:position pos:line="16" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">idx_size<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">&lt;<pos:position pos:line="17" pos:column="26"/></operator> <literal type="number" pos:line="17" pos:column="24">4<pos:position pos:line="17" pos:column="25"/></literal> <operator pos:line="17" pos:column="26">*<pos:position pos:line="17" pos:column="27"/></operator> <literal type="number" pos:line="17" pos:column="28">256<pos:position pos:line="17" pos:column="31"/></literal> <operator pos:line="17" pos:column="32">+<pos:position pos:line="17" pos:column="33"/></operator> <literal type="number" pos:line="17" pos:column="34">20<pos:position pos:line="17" pos:column="36"/></literal> <operator pos:line="17" pos:column="37">+<pos:position pos:line="17" pos:column="38"/></operator> <literal type="number" pos:line="17" pos:column="39">20<pos:position pos:line="17" pos:column="41"/></literal></expr>)<pos:position pos:line="17" pos:column="42"/></condition><then pos:line="17" pos:column="42"> <block pos:line="17" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">close<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">fd<pos:position pos:line="18" pos:column="25"/></name></expr></argument>)<pos:position pos:line="18" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><call><name pos:line="19" pos:column="24">error<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><literal type="string" pos:line="19" pos:column="30">"index file %s is too small"<pos:position pos:line="19" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="60">path<pos:position pos:line="19" pos:column="64"/></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="21" pos:column="9">idx_map<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <call><name pos:line="21" pos:column="19">xmmap<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">NULL<pos:position pos:line="21" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="31">idx_size<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="41">PROT_READ<pos:position pos:line="21" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="52">MAP_PRIVATE<pos:position pos:line="21" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="65">fd<pos:position pos:line="21" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="69">0<pos:position pos:line="21" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="72"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">close<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">fd<pos:position pos:line="22" pos:column="17"/></name></expr></argument>)<pos:position pos:line="22" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>

	<expr_stmt><expr><name pos:line="24" pos:column="9">hdr<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <name pos:line="24" pos:column="15">idx_map<pos:position pos:line="24" pos:column="22"/></name></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name><name pos:line="25" pos:column="13">hdr<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">-&gt;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="18">idx_signature<pos:position pos:line="25" pos:column="31"/></name></name> <operator pos:line="25" pos:column="32">==<pos:position pos:line="25" pos:column="34"/></operator> <call><name pos:line="25" pos:column="35">htonl<pos:position pos:line="25" pos:column="40"/></name><argument_list pos:line="25" pos:column="40">(<argument><expr><name pos:line="25" pos:column="41">PACK_IDX_SIGNATURE<pos:position pos:line="25" pos:column="59"/></name></expr></argument>)<pos:position pos:line="25" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="61"/></condition><then pos:line="25" pos:column="61"> <block pos:line="25" pos:column="62">{
		<expr_stmt><expr><name pos:line="26" pos:column="17">version<pos:position pos:line="26" pos:column="24"/></name> <operator pos:line="26" pos:column="25">=<pos:position pos:line="26" pos:column="26"/></operator> <call><name pos:line="26" pos:column="27">ntohl<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name><name pos:line="26" pos:column="33">hdr<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">-&gt;<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="38">idx_version<pos:position pos:line="26" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="51"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name><name pos:line="27" pos:column="21">version<pos:position pos:line="27" pos:column="28"/></name> <argument_list type="generic" pos:line="27" pos:column="29">&lt; <argument><expr><literal type="number" pos:line="27" pos:column="31">2<pos:position pos:line="27" pos:column="32"/></literal> <operator pos:line="27" pos:column="33">||<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="36">version<pos:position pos:line="27" pos:column="43"/></name></expr></argument> &gt;<pos:position pos:line="27" pos:column="48"/></argument_list></name> <literal type="number" pos:line="27" pos:column="46">2<pos:position pos:line="27" pos:column="47"/></literal></expr>)<pos:position pos:line="27" pos:column="48"/></condition><then pos:line="27" pos:column="48"> <block pos:line="27" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">munmap<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">idx_map<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">idx_size<pos:position pos:line="28" pos:column="49"/></name></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
			<return pos:line="29" pos:column="25">return <expr><call><name pos:line="29" pos:column="32">error<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><literal type="string" pos:line="29" pos:column="38">"index file %s is version %"<pos:position pos:line="29" pos:column="66"/></literal><name pos:line="29" pos:column="66">PRIu32<pos:position pos:line="29" pos:column="72"/></name>
				     <literal type="string" pos:line="30" pos:column="38">" and is not supported by this binary"<pos:position pos:line="30" pos:column="76"/></literal>
				     <literal type="string" pos:line="31" pos:column="38">" (try upgrading GIT to a newer version)"<pos:position pos:line="31" pos:column="79"/></literal></expr></argument>,
				     <argument><expr><name pos:line="32" pos:column="38">path<pos:position pos:line="32" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="44">version<pos:position pos:line="32" pos:column="51"/></name></expr></argument>)<pos:position pos:line="32" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="53"/></return>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></then> <else pos:line="34" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="17">version<pos:position pos:line="35" pos:column="24"/></name> <operator pos:line="35" pos:column="25">=<pos:position pos:line="35" pos:column="26"/></operator> <literal type="number" pos:line="35" pos:column="27">1<pos:position pos:line="35" pos:column="28"/></literal></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="37" pos:column="9">nr<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <literal type="number" pos:line="37" pos:column="14">0<pos:position pos:line="37" pos:column="15"/></literal></expr>;<pos:position pos:line="37" pos:column="16"/></expr_stmt>
	<expr_stmt><expr><name pos:line="38" pos:column="9">index<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">=<pos:position pos:line="38" pos:column="16"/></operator> <name pos:line="38" pos:column="17">idx_map<pos:position pos:line="38" pos:column="24"/></name></expr>;<pos:position pos:line="38" pos:column="25"/></expr_stmt>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">version<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">&gt;<pos:position pos:line="39" pos:column="25"/></operator> <literal type="number" pos:line="39" pos:column="23">1<pos:position pos:line="39" pos:column="24"/></literal></expr>)<pos:position pos:line="39" pos:column="25"/></condition><then pos:line="39" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="17">index<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">+=<pos:position pos:line="40" pos:column="25"/></operator> <literal type="number" pos:line="40" pos:column="26">2<pos:position pos:line="40" pos:column="27"/></literal></expr>;<pos:position pos:line="40" pos:column="28"/></expr_stmt></block></then></if>  <comment type="block" pos:line="40" pos:column="30">/* skip index header */</comment>
	<for pos:line="41" pos:column="9">for <control pos:line="41" pos:column="13">(<init><expr><name pos:line="41" pos:column="14">i<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <literal type="number" pos:line="41" pos:column="18">0<pos:position pos:line="41" pos:column="19"/></literal></expr>;<pos:position pos:line="41" pos:column="20"/></init> <condition><expr><name pos:line="41" pos:column="21">i<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">&lt;<pos:position pos:line="41" pos:column="27"/></operator> <literal type="number" pos:line="41" pos:column="25">256<pos:position pos:line="41" pos:column="28"/></literal></expr>;<pos:position pos:line="41" pos:column="29"/></condition> <incr><expr><name pos:line="41" pos:column="30">i<pos:position pos:line="41" pos:column="31"/></name><operator pos:line="41" pos:column="31">++<pos:position pos:line="41" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="41" pos:column="34"/></control> <block pos:line="41" pos:column="35">{
		<decl_stmt><decl><type><name pos:line="42" pos:column="17">uint32_t<pos:position pos:line="42" pos:column="25"/></name></type> <name pos:line="42" pos:column="26">n<pos:position pos:line="42" pos:column="27"/></name> <init pos:line="42" pos:column="28">= <expr><call><name pos:line="42" pos:column="30">ntohl<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><name><name pos:line="42" pos:column="36">index<pos:position pos:line="42" pos:column="41"/></name><index pos:line="42" pos:column="41">[<expr><name pos:line="42" pos:column="42">i<pos:position pos:line="42" pos:column="43"/></name></expr>]<pos:position pos:line="42" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="42" pos:column="46"/></decl_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">n<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">&lt;<pos:position pos:line="43" pos:column="27"/></operator> <name pos:line="43" pos:column="25">nr<pos:position pos:line="43" pos:column="27"/></name></expr>)<pos:position pos:line="43" pos:column="28"/></condition><then pos:line="43" pos:column="28"> <block pos:line="43" pos:column="29">{
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">munmap<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><name pos:line="44" pos:column="32">idx_map<pos:position pos:line="44" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="41">idx_size<pos:position pos:line="44" pos:column="49"/></name></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="51"/></expr_stmt>
			<return pos:line="45" pos:column="25">return <expr><call><name pos:line="45" pos:column="32">error<pos:position pos:line="45" pos:column="37"/></name><argument_list pos:line="45" pos:column="37">(<argument><expr><literal type="string" pos:line="45" pos:column="38">"non-monotonic index %s"<pos:position pos:line="45" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="64">path<pos:position pos:line="45" pos:column="68"/></name></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="70"/></return>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="47" pos:column="17">nr<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <name pos:line="47" pos:column="22">n<pos:position pos:line="47" pos:column="23"/></name></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></for>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">version<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">==<pos:position pos:line="50" pos:column="23"/></operator> <literal type="number" pos:line="50" pos:column="24">1<pos:position pos:line="50" pos:column="25"/></literal></expr>)<pos:position pos:line="50" pos:column="26"/></condition><then pos:line="50" pos:column="26"> <block pos:line="50" pos:column="27">{
		<comment type="block" pos:line="51" pos:column="17">/*
		 * Total size:
		 *  - 256 index entries 4 bytes each
		 *  - 24-byte entries * nr (20-byte sha1 + 4-byte offset)
		 *  - 20-byte SHA1 of the packfile
		 *  - 20-byte SHA1 file checksum
		 */</comment>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name pos:line="58" pos:column="21">idx_size<pos:position pos:line="58" pos:column="29"/></name> <operator pos:line="58" pos:column="30">!=<pos:position pos:line="58" pos:column="32"/></operator> <literal type="number" pos:line="58" pos:column="33">4<pos:position pos:line="58" pos:column="34"/></literal><operator pos:line="58" pos:column="34">*<pos:position pos:line="58" pos:column="35"/></operator><literal type="number" pos:line="58" pos:column="35">256<pos:position pos:line="58" pos:column="38"/></literal> <operator pos:line="58" pos:column="39">+<pos:position pos:line="58" pos:column="40"/></operator> <name pos:line="58" pos:column="41">nr<pos:position pos:line="58" pos:column="43"/></name> <operator pos:line="58" pos:column="44">*<pos:position pos:line="58" pos:column="45"/></operator> <literal type="number" pos:line="58" pos:column="46">24<pos:position pos:line="58" pos:column="48"/></literal> <operator pos:line="58" pos:column="49">+<pos:position pos:line="58" pos:column="50"/></operator> <literal type="number" pos:line="58" pos:column="51">20<pos:position pos:line="58" pos:column="53"/></literal> <operator pos:line="58" pos:column="54">+<pos:position pos:line="58" pos:column="55"/></operator> <literal type="number" pos:line="58" pos:column="56">20<pos:position pos:line="58" pos:column="58"/></literal></expr>)<pos:position pos:line="58" pos:column="59"/></condition><then pos:line="58" pos:column="59"> <block pos:line="58" pos:column="60">{
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">munmap<pos:position pos:line="59" pos:column="31"/></name><argument_list pos:line="59" pos:column="31">(<argument><expr><name pos:line="59" pos:column="32">idx_map<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="41">idx_size<pos:position pos:line="59" pos:column="49"/></name></expr></argument>)<pos:position pos:line="59" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="51"/></expr_stmt>
			<return pos:line="60" pos:column="25">return <expr><call><name pos:line="60" pos:column="32">error<pos:position pos:line="60" pos:column="37"/></name><argument_list pos:line="60" pos:column="37">(<argument><expr><literal type="string" pos:line="60" pos:column="38">"wrong index v1 file size in %s"<pos:position pos:line="60" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="72">path<pos:position pos:line="60" pos:column="76"/></name></expr></argument>)<pos:position pos:line="60" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="78"/></return>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if>
	}<pos:position pos:line="62" pos:column="10"/></block></then> <elseif pos:line="62" pos:column="11">else <if pos:line="62" pos:column="16">if <condition pos:line="62" pos:column="19">(<expr><name pos:line="62" pos:column="20">version<pos:position pos:line="62" pos:column="27"/></name> <operator pos:line="62" pos:column="28">==<pos:position pos:line="62" pos:column="30"/></operator> <literal type="number" pos:line="62" pos:column="31">2<pos:position pos:line="62" pos:column="32"/></literal></expr>)<pos:position pos:line="62" pos:column="33"/></condition><then pos:line="62" pos:column="33"> <block pos:line="62" pos:column="34">{
		<comment type="block" pos:line="63" pos:column="17">/*
		 * Minimum size:
		 *  - 8 bytes of header
		 *  - 256 index entries 4 bytes each
		 *  - 20-byte sha1 entry * nr
		 *  - 4-byte crc entry * nr
		 *  - 4-byte offset entry * nr
		 *  - 20-byte SHA1 of the packfile
		 *  - 20-byte SHA1 file checksum
		 * And after the 4-byte offset table might be a
		 * variable sized table containing 8-byte entries
		 * for offsets larger than 2^31.
		 */</comment>
		<decl_stmt><decl><type><name pos:line="76" pos:column="17">unsigned<pos:position pos:line="76" pos:column="25"/></name> <name pos:line="76" pos:column="26">long<pos:position pos:line="76" pos:column="30"/></name></type> <name pos:line="76" pos:column="31">min_size<pos:position pos:line="76" pos:column="39"/></name> <init pos:line="76" pos:column="40">= <expr><literal type="number" pos:line="76" pos:column="42">8<pos:position pos:line="76" pos:column="43"/></literal> <operator pos:line="76" pos:column="44">+<pos:position pos:line="76" pos:column="45"/></operator> <literal type="number" pos:line="76" pos:column="46">4<pos:position pos:line="76" pos:column="47"/></literal><operator pos:line="76" pos:column="47">*<pos:position pos:line="76" pos:column="48"/></operator><literal type="number" pos:line="76" pos:column="48">256<pos:position pos:line="76" pos:column="51"/></literal> <operator pos:line="76" pos:column="52">+<pos:position pos:line="76" pos:column="53"/></operator> <name pos:line="76" pos:column="54">nr<pos:position pos:line="76" pos:column="56"/></name><operator pos:line="76" pos:column="56">*<pos:position pos:line="76" pos:column="57"/></operator><operator pos:line="76" pos:column="57">(<pos:position pos:line="76" pos:column="58"/></operator><literal type="number" pos:line="76" pos:column="58">20<pos:position pos:line="76" pos:column="60"/></literal> <operator pos:line="76" pos:column="61">+<pos:position pos:line="76" pos:column="62"/></operator> <literal type="number" pos:line="76" pos:column="63">4<pos:position pos:line="76" pos:column="64"/></literal> <operator pos:line="76" pos:column="65">+<pos:position pos:line="76" pos:column="66"/></operator> <literal type="number" pos:line="76" pos:column="67">4<pos:position pos:line="76" pos:column="68"/></literal><operator pos:line="76" pos:column="68">)<pos:position pos:line="76" pos:column="69"/></operator> <operator pos:line="76" pos:column="70">+<pos:position pos:line="76" pos:column="71"/></operator> <literal type="number" pos:line="76" pos:column="72">20<pos:position pos:line="76" pos:column="74"/></literal> <operator pos:line="76" pos:column="75">+<pos:position pos:line="76" pos:column="76"/></operator> <literal type="number" pos:line="76" pos:column="77">20<pos:position pos:line="76" pos:column="79"/></literal></expr></init></decl>;<pos:position pos:line="76" pos:column="80"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="77" pos:column="17">unsigned<pos:position pos:line="77" pos:column="25"/></name> <name pos:line="77" pos:column="26">long<pos:position pos:line="77" pos:column="30"/></name></type> <name pos:line="77" pos:column="31">max_size<pos:position pos:line="77" pos:column="39"/></name> <init pos:line="77" pos:column="40">= <expr><name pos:line="77" pos:column="42">min_size<pos:position pos:line="77" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="77" pos:column="51"/></decl_stmt>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name pos:line="78" pos:column="21">nr<pos:position pos:line="78" pos:column="23"/></name></expr>)<pos:position pos:line="78" pos:column="24"/></condition><then pos:line="78" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><name pos:line="79" pos:column="25">max_size<pos:position pos:line="79" pos:column="33"/></name> <operator pos:line="79" pos:column="34">+=<pos:position pos:line="79" pos:column="36"/></operator> <operator pos:line="79" pos:column="37">(<pos:position pos:line="79" pos:column="38"/></operator><name pos:line="79" pos:column="38">nr<pos:position pos:line="79" pos:column="40"/></name> <operator pos:line="79" pos:column="41">-<pos:position pos:line="79" pos:column="42"/></operator> <literal type="number" pos:line="79" pos:column="43">1<pos:position pos:line="79" pos:column="44"/></literal><operator pos:line="79" pos:column="44">)<pos:position pos:line="79" pos:column="45"/></operator><operator pos:line="79" pos:column="45">*<pos:position pos:line="79" pos:column="46"/></operator><literal type="number" pos:line="79" pos:column="46">8<pos:position pos:line="79" pos:column="47"/></literal></expr>;<pos:position pos:line="79" pos:column="48"/></expr_stmt></block></then></if>
		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><name><name pos:line="80" pos:column="21">idx_size<pos:position pos:line="80" pos:column="29"/></name> <argument_list type="generic" pos:line="80" pos:column="30">&lt; <argument><expr><name pos:line="80" pos:column="32">min_size<pos:position pos:line="80" pos:column="40"/></name> <operator pos:line="80" pos:column="41">||<pos:position pos:line="80" pos:column="43"/></operator> <name pos:line="80" pos:column="44">idx_size<pos:position pos:line="80" pos:column="52"/></name></expr></argument> &gt;<pos:position pos:line="80" pos:column="57"/></argument_list></name> <name pos:line="80" pos:column="55">max_size<pos:position pos:line="80" pos:column="63"/></name></expr>)<pos:position pos:line="80" pos:column="64"/></condition><then pos:line="80" pos:column="64"> <block pos:line="80" pos:column="65">{
			<expr_stmt><expr><call><name pos:line="81" pos:column="25">munmap<pos:position pos:line="81" pos:column="31"/></name><argument_list pos:line="81" pos:column="31">(<argument><expr><name pos:line="81" pos:column="32">idx_map<pos:position pos:line="81" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="41">idx_size<pos:position pos:line="81" pos:column="49"/></name></expr></argument>)<pos:position pos:line="81" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="51"/></expr_stmt>
			<return pos:line="82" pos:column="25">return <expr><call><name pos:line="82" pos:column="32">error<pos:position pos:line="82" pos:column="37"/></name><argument_list pos:line="82" pos:column="37">(<argument><expr><literal type="string" pos:line="82" pos:column="38">"wrong index v2 file size in %s"<pos:position pos:line="82" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="72">path<pos:position pos:line="82" pos:column="76"/></name></expr></argument>)<pos:position pos:line="82" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="78"/></return>
		}<pos:position pos:line="83" pos:column="18"/></block></then></if>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name pos:line="84" pos:column="21">idx_size<pos:position pos:line="84" pos:column="29"/></name> <operator pos:line="84" pos:column="30">!=<pos:position pos:line="84" pos:column="32"/></operator> <name pos:line="84" pos:column="33">min_size<pos:position pos:line="84" pos:column="41"/></name> <operator pos:line="84" pos:column="42">&amp;&amp;<pos:position pos:line="84" pos:column="52"/></operator>
		    <comment type="block" pos:line="85" pos:column="21">/*
		     * make sure we can deal with large pack offsets.
		     * 31-bit signed offset won't be enough, neither
		     * 32-bit unsigned one will be.
		     */</comment>
		    <operator pos:line="90" pos:column="21">(<pos:position pos:line="90" pos:column="22"/></operator><sizeof pos:line="90" pos:column="22">sizeof<argument_list pos:line="90" pos:column="28">(<argument><expr><name pos:line="90" pos:column="29">off_t<pos:position pos:line="90" pos:column="34"/></name></expr></argument>)<pos:position pos:line="90" pos:column="35"/></argument_list></sizeof> <operator pos:line="90" pos:column="36">&lt;=<pos:position pos:line="90" pos:column="41"/></operator> <literal type="number" pos:line="90" pos:column="39">4<pos:position pos:line="90" pos:column="40"/></literal><operator pos:line="90" pos:column="40">)<pos:position pos:line="90" pos:column="41"/></operator></expr>)<pos:position pos:line="90" pos:column="42"/></condition><then pos:line="90" pos:column="42"> <block pos:line="90" pos:column="43">{
			<expr_stmt><expr><call><name pos:line="91" pos:column="25">munmap<pos:position pos:line="91" pos:column="31"/></name><argument_list pos:line="91" pos:column="31">(<argument><expr><name pos:line="91" pos:column="32">idx_map<pos:position pos:line="91" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="41">idx_size<pos:position pos:line="91" pos:column="49"/></name></expr></argument>)<pos:position pos:line="91" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="51"/></expr_stmt>
			<return pos:line="92" pos:column="25">return <expr><call><name pos:line="92" pos:column="32">error<pos:position pos:line="92" pos:column="37"/></name><argument_list pos:line="92" pos:column="37">(<argument><expr><literal type="string" pos:line="92" pos:column="38">"pack too large for current definition of off_t in %s"<pos:position pos:line="92" pos:column="92"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="94">path<pos:position pos:line="92" pos:column="98"/></name></expr></argument>)<pos:position pos:line="92" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="100"/></return>
		}<pos:position pos:line="93" pos:column="18"/></block></then></if>
	}<pos:position pos:line="94" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><name><name pos:line="96" pos:column="9">p<pos:position pos:line="96" pos:column="10"/></name><operator pos:line="96" pos:column="10">-&gt;<pos:position pos:line="96" pos:column="15"/></operator><name pos:line="96" pos:column="12">index_version<pos:position pos:line="96" pos:column="25"/></name></name> <operator pos:line="96" pos:column="26">=<pos:position pos:line="96" pos:column="27"/></operator> <name pos:line="96" pos:column="28">version<pos:position pos:line="96" pos:column="35"/></name></expr>;<pos:position pos:line="96" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="97" pos:column="9">p<pos:position pos:line="97" pos:column="10"/></name><operator pos:line="97" pos:column="10">-&gt;<pos:position pos:line="97" pos:column="15"/></operator><name pos:line="97" pos:column="12">index_data<pos:position pos:line="97" pos:column="22"/></name></name> <operator pos:line="97" pos:column="23">=<pos:position pos:line="97" pos:column="24"/></operator> <name pos:line="97" pos:column="25">idx_map<pos:position pos:line="97" pos:column="32"/></name></expr>;<pos:position pos:line="97" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="98" pos:column="9">p<pos:position pos:line="98" pos:column="10"/></name><operator pos:line="98" pos:column="10">-&gt;<pos:position pos:line="98" pos:column="15"/></operator><name pos:line="98" pos:column="12">index_size<pos:position pos:line="98" pos:column="22"/></name></name> <operator pos:line="98" pos:column="23">=<pos:position pos:line="98" pos:column="24"/></operator> <name pos:line="98" pos:column="25">idx_size<pos:position pos:line="98" pos:column="33"/></name></expr>;<pos:position pos:line="98" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="99" pos:column="9">p<pos:position pos:line="99" pos:column="10"/></name><operator pos:line="99" pos:column="10">-&gt;<pos:position pos:line="99" pos:column="15"/></operator><name pos:line="99" pos:column="12">num_objects<pos:position pos:line="99" pos:column="23"/></name></name> <operator pos:line="99" pos:column="24">=<pos:position pos:line="99" pos:column="25"/></operator> <name pos:line="99" pos:column="26">nr<pos:position pos:line="99" pos:column="28"/></name></expr>;<pos:position pos:line="99" pos:column="29"/></expr_stmt>
	<return pos:line="100" pos:column="9">return <expr><literal type="number" pos:line="100" pos:column="16">0<pos:position pos:line="100" pos:column="17"/></literal></expr>;<pos:position pos:line="100" pos:column="18"/></return>
}<pos:position pos:line="101" pos:column="2"/></block></function></unit>
