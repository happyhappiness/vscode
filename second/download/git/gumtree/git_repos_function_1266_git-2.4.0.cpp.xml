<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1266_git-2.4.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_from<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">branch<pos:position pos:line="1" pos:column="36"/></name></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">b<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">from<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">branch<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">s<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">skip_prefix<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><name><name pos:line="6" pos:column="26">command_buf<pos:position pos:line="6" pos:column="37"/></name><operator pos:line="6" pos:column="37">.<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="38">buf<pos:position pos:line="6" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="43">"from "<pos:position pos:line="6" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="52">&amp;<pos:position pos:line="6" pos:column="57"/></operator><name pos:line="6" pos:column="53">from<pos:position pos:line="6" pos:column="57"/></name></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="59"/></condition><then pos:line="6" pos:column="59">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></return></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name><name pos:line="9" pos:column="13">b<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">-&gt;<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="16">branch_tree<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">.<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="28">tree<pos:position pos:line="9" pos:column="32"/></name></name></expr>)<pos:position pos:line="9" pos:column="33"/></condition><then pos:line="9" pos:column="33"> <block pos:line="9" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">release_tree_content_recursive<pos:position pos:line="10" pos:column="47"/></name><argument_list pos:line="10" pos:column="47">(<argument><expr><name><name pos:line="10" pos:column="48">b<pos:position pos:line="10" pos:column="49"/></name><operator pos:line="10" pos:column="49">-&gt;<pos:position pos:line="10" pos:column="54"/></operator><name pos:line="10" pos:column="51">branch_tree<pos:position pos:line="10" pos:column="62"/></name><operator pos:line="10" pos:column="62">.<pos:position pos:line="10" pos:column="63"/></operator><name pos:line="10" pos:column="63">tree<pos:position pos:line="10" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="11" pos:column="17">b<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">-&gt;<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="20">branch_tree<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">.<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">tree<pos:position pos:line="11" pos:column="36"/></name></name> <operator pos:line="11" pos:column="37">=<pos:position pos:line="11" pos:column="38"/></operator> <name pos:line="11" pos:column="39">NULL<pos:position pos:line="11" pos:column="43"/></name></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="14" pos:column="9">s<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <call><name pos:line="14" pos:column="13">lookup_branch<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><name pos:line="14" pos:column="27">from<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">b<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">==<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">s<pos:position pos:line="15" pos:column="19"/></name></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">die<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><literal type="string" pos:line="16" pos:column="21">"Can't create a branch from itself: %s"<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="62">b<pos:position pos:line="16" pos:column="63"/></name><operator pos:line="16" pos:column="63">-&gt;<pos:position pos:line="16" pos:column="68"/></operator><name pos:line="16" pos:column="65">name<pos:position pos:line="16" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="71"/></expr_stmt></block></then>
	<elseif pos:line="17" pos:column="9">else <if pos:line="17" pos:column="14">if <condition pos:line="17" pos:column="17">(<expr><name pos:line="17" pos:column="18">s<pos:position pos:line="17" pos:column="19"/></name></expr>)<pos:position pos:line="17" pos:column="20"/></condition><then pos:line="17" pos:column="20"> <block pos:line="17" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">unsigned<pos:position pos:line="18" pos:column="25"/></name> <name pos:line="18" pos:column="26">char<pos:position pos:line="18" pos:column="30"/></name> <modifier pos:line="18" pos:column="31">*<pos:position pos:line="18" pos:column="32"/></modifier></type><name pos:line="18" pos:column="32">t<pos:position pos:line="18" pos:column="33"/></name> <init pos:line="18" pos:column="34">= <expr><name><name pos:line="18" pos:column="36">s<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">-&gt;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="39">branch_tree<pos:position pos:line="18" pos:column="50"/></name><operator pos:line="18" pos:column="50">.<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="51">versions<pos:position pos:line="18" pos:column="59"/></name><index pos:line="18" pos:column="59">[<expr><literal type="number" pos:line="18" pos:column="60">1<pos:position pos:line="18" pos:column="61"/></literal></expr>]<pos:position pos:line="18" pos:column="62"/></index></name><operator pos:line="18" pos:column="62">.<pos:position pos:line="18" pos:column="63"/></operator><name pos:line="18" pos:column="63">sha1<pos:position pos:line="18" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="68"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">hashcpy<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name><name pos:line="19" pos:column="25">b<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">sha1<pos:position pos:line="19" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="34">s<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">-&gt;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="37">sha1<pos:position pos:line="19" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">hashcpy<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name><name pos:line="20" pos:column="25">b<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">-&gt;<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="28">branch_tree<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">.<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="40">versions<pos:position pos:line="20" pos:column="48"/></name><index pos:line="20" pos:column="48">[<expr><literal type="number" pos:line="20" pos:column="49">0<pos:position pos:line="20" pos:column="50"/></literal></expr>]<pos:position pos:line="20" pos:column="51"/></index></name><operator pos:line="20" pos:column="51">.<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="52">sha1<pos:position pos:line="20" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="58">t<pos:position pos:line="20" pos:column="59"/></name></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">hashcpy<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name><name pos:line="21" pos:column="25">b<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">-&gt;<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="28">branch_tree<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">.<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="40">versions<pos:position pos:line="21" pos:column="48"/></name><index pos:line="21" pos:column="48">[<expr><literal type="number" pos:line="21" pos:column="49">1<pos:position pos:line="21" pos:column="50"/></literal></expr>]<pos:position pos:line="21" pos:column="51"/></index></name><operator pos:line="21" pos:column="51">.<pos:position pos:line="21" pos:column="52"/></operator><name pos:line="21" pos:column="52">sha1<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="58">t<pos:position pos:line="21" pos:column="59"/></name></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if></elseif> <elseif pos:line="22" pos:column="11">else <if pos:line="22" pos:column="16">if <condition pos:line="22" pos:column="19">(<expr><operator pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">from<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">==<pos:position pos:line="22" pos:column="28"/></operator> <literal type="char" pos:line="22" pos:column="29">':'<pos:position pos:line="22" pos:column="32"/></literal></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33"> <block pos:line="22" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">uintmax_t<pos:position pos:line="23" pos:column="26"/></name></type> <name pos:line="23" pos:column="27">idnum<pos:position pos:line="23" pos:column="32"/></name> <init pos:line="23" pos:column="33">= <expr><call><name pos:line="23" pos:column="35">parse_mark_ref_eol<pos:position pos:line="23" pos:column="53"/></name><argument_list pos:line="23" pos:column="53">(<argument><expr><name pos:line="23" pos:column="54">from<pos:position pos:line="23" pos:column="58"/></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="60"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="24" pos:column="17">struct<pos:position pos:line="24" pos:column="23"/></name> <name pos:line="24" pos:column="24">object_entry<pos:position pos:line="24" pos:column="36"/></name></name> <modifier pos:line="24" pos:column="37">*<pos:position pos:line="24" pos:column="38"/></modifier></type><name pos:line="24" pos:column="38">oe<pos:position pos:line="24" pos:column="40"/></name> <init pos:line="24" pos:column="41">= <expr><call><name pos:line="24" pos:column="43">find_mark<pos:position pos:line="24" pos:column="52"/></name><argument_list pos:line="24" pos:column="52">(<argument><expr><name pos:line="24" pos:column="53">idnum<pos:position pos:line="24" pos:column="58"/></name></expr></argument>)<pos:position pos:line="24" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="60"/></decl_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name><name pos:line="25" pos:column="21">oe<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">-&gt;<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="25">type<pos:position pos:line="25" pos:column="29"/></name></name> <operator pos:line="25" pos:column="30">!=<pos:position pos:line="25" pos:column="32"/></operator> <name pos:line="25" pos:column="33">OBJ_COMMIT<pos:position pos:line="25" pos:column="43"/></name></expr>)<pos:position pos:line="25" pos:column="44"/></condition><then pos:line="25" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="25">die<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><literal type="string" pos:line="26" pos:column="29">"Mark :%"<pos:position pos:line="26" pos:column="38"/></literal> <name pos:line="26" pos:column="39">PRIuMAX<pos:position pos:line="26" pos:column="46"/></name> <literal type="string" pos:line="26" pos:column="47">" not a commit"<pos:position pos:line="26" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="64">idnum<pos:position pos:line="26" pos:column="69"/></name></expr></argument>)<pos:position pos:line="26" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="71"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">hashcpy<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name><name pos:line="27" pos:column="25">b<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">-&gt;<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="28">sha1<pos:position pos:line="27" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="34">oe<pos:position pos:line="27" pos:column="36"/></name><operator pos:line="27" pos:column="36">-&gt;<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="38">idx<pos:position pos:line="27" pos:column="41"/></name><operator pos:line="27" pos:column="41">.<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="42">sha1<pos:position pos:line="27" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name><name pos:line="28" pos:column="21">oe<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">-&gt;<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="25">pack_id<pos:position pos:line="28" pos:column="32"/></name></name> <operator pos:line="28" pos:column="33">!=<pos:position pos:line="28" pos:column="35"/></operator> <name pos:line="28" pos:column="36">MAX_PACK_ID<pos:position pos:line="28" pos:column="47"/></name></expr>)<pos:position pos:line="28" pos:column="48"/></condition><then pos:line="28" pos:column="48"> <block pos:line="28" pos:column="49">{
			<decl_stmt><decl><type><name pos:line="29" pos:column="25">unsigned<pos:position pos:line="29" pos:column="33"/></name> <name pos:line="29" pos:column="34">long<pos:position pos:line="29" pos:column="38"/></name></type> <name pos:line="29" pos:column="39">size<pos:position pos:line="29" pos:column="43"/></name></decl>;<pos:position pos:line="29" pos:column="44"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="30" pos:column="25">char<pos:position pos:line="30" pos:column="29"/></name> <modifier pos:line="30" pos:column="30">*<pos:position pos:line="30" pos:column="31"/></modifier></type><name pos:line="30" pos:column="31">buf<pos:position pos:line="30" pos:column="34"/></name> <init pos:line="30" pos:column="35">= <expr><call><name pos:line="30" pos:column="37">gfi_unpack_entry<pos:position pos:line="30" pos:column="53"/></name><argument_list pos:line="30" pos:column="53">(<argument><expr><name pos:line="30" pos:column="54">oe<pos:position pos:line="30" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="58">&amp;<pos:position pos:line="30" pos:column="63"/></operator><name pos:line="30" pos:column="59">size<pos:position pos:line="30" pos:column="63"/></name></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="65"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">parse_from_commit<pos:position pos:line="31" pos:column="42"/></name><argument_list pos:line="31" pos:column="42">(<argument><expr><name pos:line="31" pos:column="43">b<pos:position pos:line="31" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="46">buf<pos:position pos:line="31" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="51">size<pos:position pos:line="31" pos:column="55"/></name></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">free<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">buf<pos:position pos:line="32" pos:column="33"/></name></expr></argument>)<pos:position pos:line="32" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></then> <else pos:line="33" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">parse_from_existing<pos:position pos:line="34" pos:column="44"/></name><argument_list pos:line="34" pos:column="44">(<argument><expr><name pos:line="34" pos:column="45">b<pos:position pos:line="34" pos:column="46"/></name></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="48"/></expr_stmt></block></else></if>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if></elseif> <elseif pos:line="35" pos:column="11">else <if pos:line="35" pos:column="16">if <condition pos:line="35" pos:column="19">(<expr><operator pos:line="35" pos:column="20">!<pos:position pos:line="35" pos:column="21"/></operator><call><name pos:line="35" pos:column="21">get_sha1<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">from<pos:position pos:line="35" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="36">b<pos:position pos:line="35" pos:column="37"/></name><operator pos:line="35" pos:column="37">-&gt;<pos:position pos:line="35" pos:column="42"/></operator><name pos:line="35" pos:column="39">sha1<pos:position pos:line="35" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="45"/></condition><then pos:line="35" pos:column="45"> <block pos:line="35" pos:column="46">{
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">parse_from_existing<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><name pos:line="36" pos:column="37">b<pos:position pos:line="36" pos:column="38"/></name></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><call><name pos:line="37" pos:column="21">is_null_sha1<pos:position pos:line="37" pos:column="33"/></name><argument_list pos:line="37" pos:column="33">(<argument><expr><name><name pos:line="37" pos:column="34">b<pos:position pos:line="37" pos:column="35"/></name><operator pos:line="37" pos:column="35">-&gt;<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="37">sha1<pos:position pos:line="37" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="43"/></condition><then pos:line="37" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="38" pos:column="25">b<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">-&gt;<pos:position pos:line="38" pos:column="31"/></operator></name><operator pos:line="38" pos:column="28">delete<pos:position pos:line="38" pos:column="34"/></operator> <operator pos:line="38" pos:column="35">=<pos:position pos:line="38" pos:column="36"/></operator> <literal type="number" pos:line="38" pos:column="37">1<pos:position pos:line="38" pos:column="38"/></literal></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt></block></then></if>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if></elseif>
	<else pos:line="40" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="17">die<pos:position pos:line="41" pos:column="20"/></name><argument_list pos:line="41" pos:column="20">(<argument><expr><literal type="string" pos:line="41" pos:column="21">"Invalid ref name or SHA1 expression: %s"<pos:position pos:line="41" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="64">from<pos:position pos:line="41" pos:column="68"/></name></expr></argument>)<pos:position pos:line="41" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="70"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="43" pos:column="9">read_next_command<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">()<pos:position pos:line="43" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
	<return pos:line="44" pos:column="9">return <expr><literal type="number" pos:line="44" pos:column="16">1<pos:position pos:line="44" pos:column="17"/></literal></expr>;<pos:position pos:line="44" pos:column="18"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
