<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4696_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">trace_write<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">trace_key<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">key<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">void<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">buf<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">unsigned<pos:position pos:line="1" pos:column="73"/></name></type> <name pos:line="1" pos:column="74">len<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><call><name pos:line="3" pos:column="13">write_in_full<pos:position pos:line="3" pos:column="26"/></name><argument_list pos:line="3" pos:column="26">(<argument><expr><call><name pos:line="3" pos:column="27">get_trace_fd<pos:position pos:line="3" pos:column="39"/></name><argument_list pos:line="3" pos:column="39">(<argument><expr><name pos:line="3" pos:column="40">key<pos:position pos:line="3" pos:column="43"/></name></expr></argument>)<pos:position pos:line="3" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="3" pos:column="46">buf<pos:position pos:line="3" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="51">len<pos:position pos:line="3" pos:column="54"/></name></expr></argument>)<pos:position pos:line="3" pos:column="55"/></argument_list></call> <operator pos:line="3" pos:column="56">&lt;<pos:position pos:line="3" pos:column="60"/></operator> <literal type="number" pos:line="3" pos:column="58">0<pos:position pos:line="3" pos:column="59"/></literal></expr>)<pos:position pos:line="3" pos:column="60"/></condition><then pos:line="3" pos:column="60"> <block pos:line="3" pos:column="61">{
		<expr_stmt><expr><call><name pos:line="4" pos:column="17">normalize_trace_key<pos:position pos:line="4" pos:column="36"/></name><argument_list pos:line="4" pos:column="36">(<argument><expr><operator pos:line="4" pos:column="37">&amp;<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="38">key<pos:position pos:line="4" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="5" pos:column="17">warning<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><literal type="string" pos:line="5" pos:column="25">"unable to write trace for %s: %s"<pos:position pos:line="5" pos:column="59"/></literal></expr></argument>,
			<argument><expr><name><name pos:line="6" pos:column="25">key<pos:position pos:line="6" pos:column="28"/></name><operator pos:line="6" pos:column="28">-&gt;<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="30">key<pos:position pos:line="6" pos:column="33"/></name></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="35">strerror<pos:position pos:line="6" pos:column="43"/></name><argument_list pos:line="6" pos:column="43">(<argument><expr><name pos:line="6" pos:column="44">errno<pos:position pos:line="6" pos:column="49"/></name></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">trace_disable<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">key<pos:position pos:line="7" pos:column="34"/></name></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="8" pos:column="10"/></block></then></if>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
