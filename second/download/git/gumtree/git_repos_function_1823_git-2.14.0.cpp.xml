<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1823_git-2.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parse_new_tag<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">arg<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">strbuf<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">msg<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name pos:line="3" pos:column="36">STRBUF_INIT<pos:position pos:line="3" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">from<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">tagger<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">branch<pos:position pos:line="6" pos:column="22"/></name></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">s<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">tag<pos:position pos:line="7" pos:column="19"/></name></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">t<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">uintmax_t<pos:position pos:line="8" pos:column="18"/></name></type> <name pos:line="8" pos:column="19">from_mark<pos:position pos:line="8" pos:column="28"/></name> <init pos:line="8" pos:column="29">= <expr><literal type="number" pos:line="8" pos:column="31">0<pos:position pos:line="8" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">object_id<pos:position pos:line="9" pos:column="25"/></name></name></type> <name pos:line="9" pos:column="26">oid<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">enum<pos:position pos:line="10" pos:column="13"/></name> <name pos:line="10" pos:column="14">object_type<pos:position pos:line="10" pos:column="25"/></name></name></type> <name pos:line="10" pos:column="26">type<pos:position pos:line="10" pos:column="30"/></name></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name pos:line="11" pos:column="15">char<pos:position pos:line="11" pos:column="19"/></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">v<pos:position pos:line="11" pos:column="22"/></name></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><name pos:line="13" pos:column="9">t<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">pool_alloc<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><sizeof pos:line="13" pos:column="24">sizeof<argument_list pos:line="13" pos:column="30">(<argument><expr pos:line="13" pos:column="31">struct <name pos:line="13" pos:column="38">tag<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">memset<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">t<pos:position pos:line="14" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="19">0<pos:position pos:line="14" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="22">sizeof<argument_list pos:line="14" pos:column="28">(<argument><expr pos:line="14" pos:column="29">struct <name pos:line="14" pos:column="36">tag<pos:position pos:line="14" pos:column="39"/></name></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">t<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">name<pos:position pos:line="15" pos:column="16"/></name></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <call><name pos:line="15" pos:column="19">pool_strdup<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">arg<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">last_tag<pos:position pos:line="16" pos:column="21"/></name></expr>)<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="17" pos:column="17">last_tag<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">next_tag<pos:position pos:line="17" pos:column="35"/></name></name> <operator pos:line="17" pos:column="36">=<pos:position pos:line="17" pos:column="37"/></operator> <name pos:line="17" pos:column="38">t<pos:position pos:line="17" pos:column="39"/></name></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt></block></then>
	<else pos:line="18" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">first_tag<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="29">t<pos:position pos:line="19" pos:column="30"/></name></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt></block></else></if>
	<expr_stmt><expr><name pos:line="20" pos:column="9">last_tag<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <name pos:line="20" pos:column="20">t<pos:position pos:line="20" pos:column="21"/></name></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">read_next_command<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">()<pos:position pos:line="21" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>

	<comment type="block" pos:line="23" pos:column="9">/* from ... */</comment>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><call><name pos:line="24" pos:column="14">skip_prefix<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name><name pos:line="24" pos:column="26">command_buf<pos:position pos:line="24" pos:column="37"/></name><operator pos:line="24" pos:column="37">.<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="38">buf<pos:position pos:line="24" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="43">"from "<pos:position pos:line="24" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="52">&amp;<pos:position pos:line="24" pos:column="57"/></operator><name pos:line="24" pos:column="53">from<pos:position pos:line="24" pos:column="57"/></name></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="59"/></condition><then pos:line="24" pos:column="59">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="17">die<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><literal type="string" pos:line="25" pos:column="21">"Expected from command, got %s"<pos:position pos:line="25" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="54">command_buf<pos:position pos:line="25" pos:column="65"/></name><operator pos:line="25" pos:column="65">.<pos:position pos:line="25" pos:column="66"/></operator><name pos:line="25" pos:column="66">buf<pos:position pos:line="25" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="71"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="26" pos:column="9">s<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <call><name pos:line="26" pos:column="13">lookup_branch<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><name pos:line="26" pos:column="27">from<pos:position pos:line="26" pos:column="31"/></name></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">s<pos:position pos:line="27" pos:column="14"/></name></expr>)<pos:position pos:line="27" pos:column="15"/></condition><then pos:line="27" pos:column="15"> <block pos:line="27" pos:column="16">{
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><call><name pos:line="28" pos:column="21">is_null_oid<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><operator pos:line="28" pos:column="33">&amp;<pos:position pos:line="28" pos:column="38"/></operator><name><name pos:line="28" pos:column="34">s<pos:position pos:line="28" pos:column="35"/></name><operator pos:line="28" pos:column="35">-&gt;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="37">oid<pos:position pos:line="28" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">die<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><literal type="string" pos:line="29" pos:column="29">"Can't tag an empty branch."<pos:position pos:line="29" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">oidcpy<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><operator pos:line="30" pos:column="24">&amp;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="25">oid<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="30">&amp;<pos:position pos:line="30" pos:column="35"/></operator><name><name pos:line="30" pos:column="31">s<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">-&gt;<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="34">oid<pos:position pos:line="30" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">type<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="24">OBJ_COMMIT<pos:position pos:line="31" pos:column="34"/></name></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then> <elseif pos:line="32" pos:column="11">else <if pos:line="32" pos:column="16">if <condition pos:line="32" pos:column="19">(<expr><operator pos:line="32" pos:column="20">*<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="21">from<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">==<pos:position pos:line="32" pos:column="28"/></operator> <literal type="char" pos:line="32" pos:column="29">':'<pos:position pos:line="32" pos:column="32"/></literal></expr>)<pos:position pos:line="32" pos:column="33"/></condition><then pos:line="32" pos:column="33"> <block pos:line="32" pos:column="34">{
		<decl_stmt><decl><type><name><name pos:line="33" pos:column="17">struct<pos:position pos:line="33" pos:column="23"/></name> <name pos:line="33" pos:column="24">object_entry<pos:position pos:line="33" pos:column="36"/></name></name> <modifier pos:line="33" pos:column="37">*<pos:position pos:line="33" pos:column="38"/></modifier></type><name pos:line="33" pos:column="38">oe<pos:position pos:line="33" pos:column="40"/></name></decl>;<pos:position pos:line="33" pos:column="41"/></decl_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">from_mark<pos:position pos:line="34" pos:column="26"/></name> <operator pos:line="34" pos:column="27">=<pos:position pos:line="34" pos:column="28"/></operator> <call><name pos:line="34" pos:column="29">parse_mark_ref_eol<pos:position pos:line="34" pos:column="47"/></name><argument_list pos:line="34" pos:column="47">(<argument><expr><name pos:line="34" pos:column="48">from<pos:position pos:line="34" pos:column="52"/></name></expr></argument>)<pos:position pos:line="34" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name pos:line="35" pos:column="17">oe<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <call><name pos:line="35" pos:column="22">find_mark<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">from_mark<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="36" pos:column="17">type<pos:position pos:line="36" pos:column="21"/></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <name><name pos:line="36" pos:column="24">oe<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">-&gt;<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="28">type<pos:position pos:line="36" pos:column="32"/></name></name></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">oidcpy<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><operator pos:line="37" pos:column="24">&amp;<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="25">oid<pos:position pos:line="37" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="30">&amp;<pos:position pos:line="37" pos:column="35"/></operator><name><name pos:line="37" pos:column="31">oe<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">-&gt;<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="35">idx<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">.<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="39">oid<pos:position pos:line="37" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if></elseif> <elseif pos:line="38" pos:column="11">else <if pos:line="38" pos:column="16">if <condition pos:line="38" pos:column="19">(<expr><operator pos:line="38" pos:column="20">!<pos:position pos:line="38" pos:column="21"/></operator><call><name pos:line="38" pos:column="21">get_oid<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><name pos:line="38" pos:column="29">from<pos:position pos:line="38" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="35">&amp;<pos:position pos:line="38" pos:column="40"/></operator><name pos:line="38" pos:column="36">oid<pos:position pos:line="38" pos:column="39"/></name></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="41"/></condition><then pos:line="38" pos:column="41"> <block pos:line="38" pos:column="42">{
		<decl_stmt><decl><type><name><name pos:line="39" pos:column="17">struct<pos:position pos:line="39" pos:column="23"/></name> <name pos:line="39" pos:column="24">object_entry<pos:position pos:line="39" pos:column="36"/></name></name> <modifier pos:line="39" pos:column="37">*<pos:position pos:line="39" pos:column="38"/></modifier></type><name pos:line="39" pos:column="38">oe<pos:position pos:line="39" pos:column="40"/></name> <init pos:line="39" pos:column="41">= <expr><call><name pos:line="39" pos:column="43">find_object<pos:position pos:line="39" pos:column="54"/></name><argument_list pos:line="39" pos:column="54">(<argument><expr><operator pos:line="39" pos:column="55">&amp;<pos:position pos:line="39" pos:column="60"/></operator><name pos:line="39" pos:column="56">oid<pos:position pos:line="39" pos:column="59"/></name></expr></argument>)<pos:position pos:line="39" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="61"/></decl_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">!<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="22">oe<pos:position pos:line="40" pos:column="24"/></name></expr>)<pos:position pos:line="40" pos:column="25"/></condition><then pos:line="40" pos:column="25"> <block pos:line="40" pos:column="26">{
			<expr_stmt><expr><name pos:line="41" pos:column="25">type<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">=<pos:position pos:line="41" pos:column="31"/></operator> <call><name pos:line="41" pos:column="32">sha1_object_info<pos:position pos:line="41" pos:column="48"/></name><argument_list pos:line="41" pos:column="48">(<argument><expr><name><name pos:line="41" pos:column="49">oid<pos:position pos:line="41" pos:column="52"/></name><operator pos:line="41" pos:column="52">.<pos:position pos:line="41" pos:column="53"/></operator><name pos:line="41" pos:column="53">hash<pos:position pos:line="41" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="59">NULL<pos:position pos:line="41" pos:column="63"/></name></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="65"/></expr_stmt>
			<if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><name pos:line="42" pos:column="29">type<pos:position pos:line="42" pos:column="33"/></name> <operator pos:line="42" pos:column="34">&lt;<pos:position pos:line="42" pos:column="38"/></operator> <literal type="number" pos:line="42" pos:column="36">0<pos:position pos:line="42" pos:column="37"/></literal></expr>)<pos:position pos:line="42" pos:column="38"/></condition><then pos:line="42" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="33">die<pos:position pos:line="43" pos:column="36"/></name><argument_list pos:line="43" pos:column="36">(<argument><expr><literal type="string" pos:line="43" pos:column="37">"Not a valid object: %s"<pos:position pos:line="43" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="63">from<pos:position pos:line="43" pos:column="67"/></name></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="69"/></expr_stmt></block></then></if>
		}<pos:position pos:line="44" pos:column="18"/></block></then> <else pos:line="44" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="25">type<pos:position pos:line="45" pos:column="29"/></name> <operator pos:line="45" pos:column="30">=<pos:position pos:line="45" pos:column="31"/></operator> <name><name pos:line="45" pos:column="32">oe<pos:position pos:line="45" pos:column="34"/></name><operator pos:line="45" pos:column="34">-&gt;<pos:position pos:line="45" pos:column="39"/></operator><name pos:line="45" pos:column="36">type<pos:position pos:line="45" pos:column="40"/></name></name></expr>;<pos:position pos:line="45" pos:column="41"/></expr_stmt></block></else></if>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if></elseif> <else pos:line="46" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">die<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><literal type="string" pos:line="47" pos:column="21">"Invalid ref name or SHA1 expression: %s"<pos:position pos:line="47" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="64">from<pos:position pos:line="47" pos:column="68"/></name></expr></argument>)<pos:position pos:line="47" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="70"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">read_next_command<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">()<pos:position pos:line="48" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="29"/></expr_stmt>

	<comment type="block" pos:line="50" pos:column="9">/* tagger ... */</comment>
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><call><name pos:line="51" pos:column="13">skip_prefix<pos:position pos:line="51" pos:column="24"/></name><argument_list pos:line="51" pos:column="24">(<argument><expr><name><name pos:line="51" pos:column="25">command_buf<pos:position pos:line="51" pos:column="36"/></name><operator pos:line="51" pos:column="36">.<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="37">buf<pos:position pos:line="51" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="42">"tagger "<pos:position pos:line="51" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="51" pos:column="53">&amp;<pos:position pos:line="51" pos:column="58"/></operator><name pos:line="51" pos:column="54">v<pos:position pos:line="51" pos:column="55"/></name></expr></argument>)<pos:position pos:line="51" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="57"/></condition><then pos:line="51" pos:column="57"> <block pos:line="51" pos:column="58">{
		<expr_stmt><expr><name pos:line="52" pos:column="17">tagger<pos:position pos:line="52" pos:column="23"/></name> <operator pos:line="52" pos:column="24">=<pos:position pos:line="52" pos:column="25"/></operator> <call><name pos:line="52" pos:column="26">parse_ident<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><name pos:line="52" pos:column="38">v<pos:position pos:line="52" pos:column="39"/></name></expr></argument>)<pos:position pos:line="52" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">read_next_command<pos:position pos:line="53" pos:column="34"/></name><argument_list pos:line="53" pos:column="34">()<pos:position pos:line="53" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="54" pos:column="10"/></block></then> <else pos:line="54" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="17">tagger<pos:position pos:line="55" pos:column="23"/></name> <operator pos:line="55" pos:column="24">=<pos:position pos:line="55" pos:column="25"/></operator> <name pos:line="55" pos:column="26">NULL<pos:position pos:line="55" pos:column="30"/></name></expr>;<pos:position pos:line="55" pos:column="31"/></expr_stmt></block></else></if>

	<comment type="block" pos:line="57" pos:column="9">/* tag payload/message */</comment>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">parse_data<pos:position pos:line="58" pos:column="19"/></name><argument_list pos:line="58" pos:column="19">(<argument><expr><operator pos:line="58" pos:column="20">&amp;<pos:position pos:line="58" pos:column="25"/></operator><name pos:line="58" pos:column="21">msg<pos:position pos:line="58" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="26">0<pos:position pos:line="58" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="29">NULL<pos:position pos:line="58" pos:column="33"/></name></expr></argument>)<pos:position pos:line="58" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="35"/></expr_stmt>

	<comment type="block" pos:line="60" pos:column="9">/* build the tag object */</comment>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">strbuf_reset<pos:position pos:line="61" pos:column="21"/></name><argument_list pos:line="61" pos:column="21">(<argument><expr><operator pos:line="61" pos:column="22">&amp;<pos:position pos:line="61" pos:column="27"/></operator><name pos:line="61" pos:column="23">new_data<pos:position pos:line="61" pos:column="31"/></name></expr></argument>)<pos:position pos:line="61" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="63" pos:column="9">strbuf_addf<pos:position pos:line="63" pos:column="20"/></name><argument_list pos:line="63" pos:column="20">(<argument><expr><operator pos:line="63" pos:column="21">&amp;<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="22">new_data<pos:position pos:line="63" pos:column="30"/></name></expr></argument>,
		    <argument><expr><literal type="string" pos:line="64" pos:column="21">"object %s\n"<pos:position pos:line="64" pos:column="34"/></literal>
		    <literal type="string" pos:line="65" pos:column="21">"type %s\n"<pos:position pos:line="65" pos:column="32"/></literal>
		    <literal type="string" pos:line="66" pos:column="21">"tag %s\n"<pos:position pos:line="66" pos:column="31"/></literal></expr></argument>,
		    <argument><expr><call><name pos:line="67" pos:column="21">oid_to_hex<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">(<argument><expr><operator pos:line="67" pos:column="32">&amp;<pos:position pos:line="67" pos:column="37"/></operator><name pos:line="67" pos:column="33">oid<pos:position pos:line="67" pos:column="36"/></name></expr></argument>)<pos:position pos:line="67" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name><typename pos:line="67" pos:column="39">typename<pos:position pos:line="67" pos:column="47"/></typename></name><operator pos:line="67" pos:column="47">(<pos:position pos:line="67" pos:column="48"/></operator><name pos:line="67" pos:column="48">type<pos:position pos:line="67" pos:column="52"/></name><operator pos:line="67" pos:column="52">)<pos:position pos:line="67" pos:column="53"/></operator></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="55">t<pos:position pos:line="67" pos:column="56"/></name><operator pos:line="67" pos:column="56">-&gt;<pos:position pos:line="67" pos:column="61"/></operator><name pos:line="67" pos:column="58">name<pos:position pos:line="67" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="64"/></expr_stmt>
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">tagger<pos:position pos:line="68" pos:column="19"/></name></expr>)<pos:position pos:line="68" pos:column="20"/></condition><then pos:line="68" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="17">strbuf_addf<pos:position pos:line="69" pos:column="28"/></name><argument_list pos:line="69" pos:column="28">(<argument><expr><operator pos:line="69" pos:column="29">&amp;<pos:position pos:line="69" pos:column="34"/></operator><name pos:line="69" pos:column="30">new_data<pos:position pos:line="69" pos:column="38"/></name></expr></argument>,
			    <argument><expr><literal type="string" pos:line="70" pos:column="29">"tagger %s\n"<pos:position pos:line="70" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="44">tagger<pos:position pos:line="70" pos:column="50"/></name></expr></argument>)<pos:position pos:line="70" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="52"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">strbuf_addch<pos:position pos:line="71" pos:column="21"/></name><argument_list pos:line="71" pos:column="21">(<argument><expr><operator pos:line="71" pos:column="22">&amp;<pos:position pos:line="71" pos:column="27"/></operator><name pos:line="71" pos:column="23">new_data<pos:position pos:line="71" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="71" pos:column="33">'\n'<pos:position pos:line="71" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="72" pos:column="9">strbuf_addbuf<pos:position pos:line="72" pos:column="22"/></name><argument_list pos:line="72" pos:column="22">(<argument><expr><operator pos:line="72" pos:column="23">&amp;<pos:position pos:line="72" pos:column="28"/></operator><name pos:line="72" pos:column="24">new_data<pos:position pos:line="72" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="34">&amp;<pos:position pos:line="72" pos:column="39"/></operator><name pos:line="72" pos:column="35">msg<pos:position pos:line="72" pos:column="38"/></name></expr></argument>)<pos:position pos:line="72" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="73" pos:column="9">free<pos:position pos:line="73" pos:column="13"/></name><argument_list pos:line="73" pos:column="13">(<argument><expr><name pos:line="73" pos:column="14">tagger<pos:position pos:line="73" pos:column="20"/></name></expr></argument>)<pos:position pos:line="73" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="22"/></expr_stmt>

	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><call><name pos:line="75" pos:column="13">store_object<pos:position pos:line="75" pos:column="25"/></name><argument_list pos:line="75" pos:column="25">(<argument><expr><name pos:line="75" pos:column="26">OBJ_TAG<pos:position pos:line="75" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="35">&amp;<pos:position pos:line="75" pos:column="40"/></operator><name pos:line="75" pos:column="36">new_data<pos:position pos:line="75" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="46">NULL<pos:position pos:line="75" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="52">&amp;<pos:position pos:line="75" pos:column="57"/></operator><name><name pos:line="75" pos:column="53">t<pos:position pos:line="75" pos:column="54"/></name><operator pos:line="75" pos:column="54">-&gt;<pos:position pos:line="75" pos:column="59"/></operator><name pos:line="75" pos:column="56">oid<pos:position pos:line="75" pos:column="59"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="61">0<pos:position pos:line="75" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="64"/></condition><then pos:line="75" pos:column="64">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="76" pos:column="17">t<pos:position pos:line="76" pos:column="18"/></name><operator pos:line="76" pos:column="18">-&gt;<pos:position pos:line="76" pos:column="23"/></operator><name pos:line="76" pos:column="20">pack_id<pos:position pos:line="76" pos:column="27"/></name></name> <operator pos:line="76" pos:column="28">=<pos:position pos:line="76" pos:column="29"/></operator> <name pos:line="76" pos:column="30">MAX_PACK_ID<pos:position pos:line="76" pos:column="41"/></name></expr>;<pos:position pos:line="76" pos:column="42"/></expr_stmt></block></then>
	<else pos:line="77" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="78" pos:column="17">t<pos:position pos:line="78" pos:column="18"/></name><operator pos:line="78" pos:column="18">-&gt;<pos:position pos:line="78" pos:column="23"/></operator><name pos:line="78" pos:column="20">pack_id<pos:position pos:line="78" pos:column="27"/></name></name> <operator pos:line="78" pos:column="28">=<pos:position pos:line="78" pos:column="29"/></operator> <name pos:line="78" pos:column="30">pack_id<pos:position pos:line="78" pos:column="37"/></name></expr>;<pos:position pos:line="78" pos:column="38"/></expr_stmt></block></else></if>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
