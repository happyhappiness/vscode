<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7016_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">duplicate_node_closure<pos:position pos:line="3" pos:column="23"/></name> <parameter_list pos:line="3" pos:column="24">(<parameter><decl><type><name pos:line="3" pos:column="25">re_dfa_t<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">dfa<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="40">int<pos:position pos:line="3" pos:column="43"/></name></type> <name pos:line="3" pos:column="44">top_org_node<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="58">int<pos:position pos:line="3" pos:column="61"/></name></type> <name pos:line="3" pos:column="62">top_clone_node<pos:position pos:line="3" pos:column="76"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="4" pos:column="25">int<pos:position pos:line="4" pos:column="28"/></name></type> <name pos:line="4" pos:column="29">root_node<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="40">unsigned<pos:position pos:line="4" pos:column="48"/></name> <name pos:line="4" pos:column="49">int<pos:position pos:line="4" pos:column="52"/></name></type> <name pos:line="4" pos:column="53">init_constraint<pos:position pos:line="4" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="69"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">org_node<pos:position pos:line="6" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="17">clone_node<pos:position pos:line="6" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="29">ret<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">unsigned<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">int<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">constraint<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><name pos:line="7" pos:column="29">init_constraint<pos:position pos:line="7" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="45"/></decl_stmt>
  <for pos:line="8" pos:column="3">for <control pos:line="8" pos:column="7">(<init><expr><name pos:line="8" pos:column="8">org_node<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="19">top_org_node<pos:position pos:line="8" pos:column="31"/></name></expr><operator pos:line="8" pos:column="31">,<pos:position pos:line="8" pos:column="32"/></operator> <expr><name pos:line="8" pos:column="33">clone_node<pos:position pos:line="8" pos:column="43"/></name> <operator pos:line="8" pos:column="44">=<pos:position pos:line="8" pos:column="45"/></operator> <name pos:line="8" pos:column="46">top_clone_node<pos:position pos:line="8" pos:column="60"/></name></expr>;<pos:position pos:line="8" pos:column="61"/></init><condition pos:line="8" pos:column="61">;<pos:position pos:line="8" pos:column="62"/></condition><incr/>)<pos:position pos:line="8" pos:column="63"/></control>
    <block pos:line="9" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="10" pos:column="7">int<pos:position pos:line="10" pos:column="10"/></name></type> <name pos:line="10" pos:column="11">org_dest<pos:position pos:line="10" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="21">clone_dest<pos:position pos:line="10" pos:column="31"/></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>
      <if pos:line="11" pos:column="7">if <condition pos:line="11" pos:column="10">(<expr><name><name pos:line="11" pos:column="11">dfa<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">-&gt;<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="16">nodes<pos:position pos:line="11" pos:column="21"/></name><index pos:line="11" pos:column="21">[<expr><name pos:line="11" pos:column="22">org_node<pos:position pos:line="11" pos:column="30"/></name></expr>]<pos:position pos:line="11" pos:column="31"/></index></name><operator pos:line="11" pos:column="31">.<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">type<pos:position pos:line="11" pos:column="36"/></name> <operator pos:line="11" pos:column="37">==<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="40">OP_BACK_REF<pos:position pos:line="11" pos:column="51"/></name></expr>)<pos:position pos:line="11" pos:column="52"/></condition><then pos:line="11" pos:column="52">
	<block pos:line="12" pos:column="9">{
	  <comment type="block" pos:line="13" pos:column="11">/* If the back reference epsilon-transit, its destination must
	     also have the constraint.  Then duplicate the epsilon closure
	     of the destination of the back reference, and store it in
	     edests of the back reference.  */</comment>
	  <expr_stmt><expr><name pos:line="17" pos:column="11">org_dest<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <name><name pos:line="17" pos:column="22">dfa<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">nexts<pos:position pos:line="17" pos:column="32"/></name><index pos:line="17" pos:column="32">[<expr><name pos:line="17" pos:column="33">org_node<pos:position pos:line="17" pos:column="41"/></name></expr>]<pos:position pos:line="17" pos:column="42"/></index></name></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="18" pos:column="11">re_node_set_empty<pos:position pos:line="18" pos:column="28"/></name> <argument_list pos:line="18" pos:column="29">(<argument><expr><name><name pos:line="18" pos:column="30">dfa<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">-&gt;<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="35">edests<pos:position pos:line="18" pos:column="41"/></name></name> <operator pos:line="18" pos:column="42">+<pos:position pos:line="18" pos:column="43"/></operator> <name pos:line="18" pos:column="44">clone_node<pos:position pos:line="18" pos:column="54"/></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="19" pos:column="11">clone_dest<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <call><name pos:line="19" pos:column="24">duplicate_node<pos:position pos:line="19" pos:column="38"/></name> <argument_list pos:line="19" pos:column="39">(<argument><expr><name pos:line="19" pos:column="40">dfa<pos:position pos:line="19" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">org_dest<pos:position pos:line="19" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="55">constraint<pos:position pos:line="19" pos:column="65"/></name></expr></argument>)<pos:position pos:line="19" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="67"/></expr_stmt>
	  <if pos:line="20" pos:column="11">if <condition pos:line="20" pos:column="14">(<expr><call><name pos:line="20" pos:column="15">BE<pos:position pos:line="20" pos:column="17"/></name> <argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">clone_dest<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">==<pos:position pos:line="20" pos:column="32"/></operator> <operator pos:line="20" pos:column="33">-<pos:position pos:line="20" pos:column="34"/></operator><literal type="number" pos:line="20" pos:column="34">1<pos:position pos:line="20" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="37">0<pos:position pos:line="20" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="40"/></condition><then pos:line="20" pos:column="40">
	    <block type="pseudo"><return pos:line="21" pos:column="13">return <expr><name pos:line="21" pos:column="20">REG_ESPACE<pos:position pos:line="21" pos:column="30"/></name></expr>;<pos:position pos:line="21" pos:column="31"/></return></block></then></if>
	  <expr_stmt><expr><name><name pos:line="22" pos:column="11">dfa<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">-&gt;<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="16">nexts<pos:position pos:line="22" pos:column="21"/></name><index pos:line="22" pos:column="21">[<expr><name pos:line="22" pos:column="22">clone_node<pos:position pos:line="22" pos:column="32"/></name></expr>]<pos:position pos:line="22" pos:column="33"/></index></name> <operator pos:line="22" pos:column="34">=<pos:position pos:line="22" pos:column="35"/></operator> <name><name pos:line="22" pos:column="36">dfa<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">-&gt;<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="41">nexts<pos:position pos:line="22" pos:column="46"/></name><index pos:line="22" pos:column="46">[<expr><name pos:line="22" pos:column="47">org_node<pos:position pos:line="22" pos:column="55"/></name></expr>]<pos:position pos:line="22" pos:column="56"/></index></name></expr>;<pos:position pos:line="22" pos:column="57"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="23" pos:column="11">ret<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <call><name pos:line="23" pos:column="17">re_node_set_insert<pos:position pos:line="23" pos:column="35"/></name> <argument_list pos:line="23" pos:column="36">(<argument><expr><name><name pos:line="23" pos:column="37">dfa<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">-&gt;<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="42">edests<pos:position pos:line="23" pos:column="48"/></name></name> <operator pos:line="23" pos:column="49">+<pos:position pos:line="23" pos:column="50"/></operator> <name pos:line="23" pos:column="51">clone_node<pos:position pos:line="23" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="63">clone_dest<pos:position pos:line="23" pos:column="73"/></name></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="75"/></expr_stmt>
	  <if pos:line="24" pos:column="11">if <condition pos:line="24" pos:column="14">(<expr><call><name pos:line="24" pos:column="15">BE<pos:position pos:line="24" pos:column="17"/></name> <argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">ret<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">&lt;<pos:position pos:line="24" pos:column="27"/></operator> <literal type="number" pos:line="24" pos:column="25">0<pos:position pos:line="24" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="28">0<pos:position pos:line="24" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="31"/></condition><then pos:line="24" pos:column="31">
	    <block type="pseudo"><return pos:line="25" pos:column="13">return <expr><name pos:line="25" pos:column="20">REG_ESPACE<pos:position pos:line="25" pos:column="30"/></name></expr>;<pos:position pos:line="25" pos:column="31"/></return></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then>
      <elseif pos:line="27" pos:column="7">else <if pos:line="27" pos:column="12">if <condition pos:line="27" pos:column="15">(<expr><name><name pos:line="27" pos:column="16">dfa<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">-&gt;<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="21">edests<pos:position pos:line="27" pos:column="27"/></name><index pos:line="27" pos:column="27">[<expr><name pos:line="27" pos:column="28">org_node<pos:position pos:line="27" pos:column="36"/></name></expr>]<pos:position pos:line="27" pos:column="37"/></index></name><operator pos:line="27" pos:column="37">.<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="38">nelem<pos:position pos:line="27" pos:column="43"/></name> <operator pos:line="27" pos:column="44">==<pos:position pos:line="27" pos:column="46"/></operator> <literal type="number" pos:line="27" pos:column="47">0<pos:position pos:line="27" pos:column="48"/></literal></expr>)<pos:position pos:line="27" pos:column="49"/></condition><then pos:line="27" pos:column="49">
	<block pos:line="28" pos:column="9">{
	  <comment type="block" pos:line="29" pos:column="11">/* In case of the node can't epsilon-transit, don't duplicate the
	     destination and store the original destination as the
	     destination of the node.  */</comment>
	  <expr_stmt><expr><name><name pos:line="32" pos:column="11">dfa<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">-&gt;<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="16">nexts<pos:position pos:line="32" pos:column="21"/></name><index pos:line="32" pos:column="21">[<expr><name pos:line="32" pos:column="22">clone_node<pos:position pos:line="32" pos:column="32"/></name></expr>]<pos:position pos:line="32" pos:column="33"/></index></name> <operator pos:line="32" pos:column="34">=<pos:position pos:line="32" pos:column="35"/></operator> <name><name pos:line="32" pos:column="36">dfa<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">-&gt;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="41">nexts<pos:position pos:line="32" pos:column="46"/></name><index pos:line="32" pos:column="46">[<expr><name pos:line="32" pos:column="47">org_node<pos:position pos:line="32" pos:column="55"/></name></expr>]<pos:position pos:line="32" pos:column="56"/></index></name></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt>
	  <break pos:line="33" pos:column="11">break;<pos:position pos:line="33" pos:column="17"/></break>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if></elseif>
      <elseif pos:line="35" pos:column="7">else <if pos:line="35" pos:column="12">if <condition pos:line="35" pos:column="15">(<expr><name><name pos:line="35" pos:column="16">dfa<pos:position pos:line="35" pos:column="19"/></name><operator pos:line="35" pos:column="19">-&gt;<pos:position pos:line="35" pos:column="24"/></operator><name pos:line="35" pos:column="21">edests<pos:position pos:line="35" pos:column="27"/></name><index pos:line="35" pos:column="27">[<expr><name pos:line="35" pos:column="28">org_node<pos:position pos:line="35" pos:column="36"/></name></expr>]<pos:position pos:line="35" pos:column="37"/></index></name><operator pos:line="35" pos:column="37">.<pos:position pos:line="35" pos:column="38"/></operator><name pos:line="35" pos:column="38">nelem<pos:position pos:line="35" pos:column="43"/></name> <operator pos:line="35" pos:column="44">==<pos:position pos:line="35" pos:column="46"/></operator> <literal type="number" pos:line="35" pos:column="47">1<pos:position pos:line="35" pos:column="48"/></literal></expr>)<pos:position pos:line="35" pos:column="49"/></condition><then pos:line="35" pos:column="49">
	<block pos:line="36" pos:column="9">{
	  <comment type="block" pos:line="37" pos:column="11">/* In case of the node can epsilon-transit, and it has only one
	     destination.  */</comment>
	  <expr_stmt><expr><name pos:line="39" pos:column="11">org_dest<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <name><name pos:line="39" pos:column="22">dfa<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">-&gt;<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="27">edests<pos:position pos:line="39" pos:column="33"/></name><index pos:line="39" pos:column="33">[<expr><name pos:line="39" pos:column="34">org_node<pos:position pos:line="39" pos:column="42"/></name></expr>]<pos:position pos:line="39" pos:column="43"/></index></name><operator pos:line="39" pos:column="43">.<pos:position pos:line="39" pos:column="44"/></operator><name><name pos:line="39" pos:column="44">elems<pos:position pos:line="39" pos:column="49"/></name><index pos:line="39" pos:column="49">[<expr><literal type="number" pos:line="39" pos:column="50">0<pos:position pos:line="39" pos:column="51"/></literal></expr>]<pos:position pos:line="39" pos:column="52"/></index></name></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="40" pos:column="11">re_node_set_empty<pos:position pos:line="40" pos:column="28"/></name> <argument_list pos:line="40" pos:column="29">(<argument><expr><name><name pos:line="40" pos:column="30">dfa<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">-&gt;<pos:position pos:line="40" pos:column="38"/></operator><name pos:line="40" pos:column="35">edests<pos:position pos:line="40" pos:column="41"/></name></name> <operator pos:line="40" pos:column="42">+<pos:position pos:line="40" pos:column="43"/></operator> <name pos:line="40" pos:column="44">clone_node<pos:position pos:line="40" pos:column="54"/></name></expr></argument>)<pos:position pos:line="40" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="56"/></expr_stmt>
	  <comment type="block" pos:line="41" pos:column="11">/* If the node is root_node itself, it means the epsilon clsoure
	     has a loop.   Then tie it to the destination of the root_node.  */</comment>
	  <if pos:line="43" pos:column="11">if <condition pos:line="43" pos:column="14">(<expr><name pos:line="43" pos:column="15">org_node<pos:position pos:line="43" pos:column="23"/></name> <operator pos:line="43" pos:column="24">==<pos:position pos:line="43" pos:column="26"/></operator> <name pos:line="43" pos:column="27">root_node<pos:position pos:line="43" pos:column="36"/></name> <operator pos:line="43" pos:column="37">&amp;&amp;<pos:position pos:line="43" pos:column="47"/></operator> <name pos:line="43" pos:column="40">clone_node<pos:position pos:line="43" pos:column="50"/></name> <operator pos:line="43" pos:column="51">!=<pos:position pos:line="43" pos:column="53"/></operator> <name pos:line="43" pos:column="54">org_node<pos:position pos:line="43" pos:column="62"/></name></expr>)<pos:position pos:line="43" pos:column="63"/></condition><then pos:line="43" pos:column="63">
	    <block pos:line="44" pos:column="13">{
	      <expr_stmt><expr><name pos:line="45" pos:column="15">ret<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <call><name pos:line="45" pos:column="21">re_node_set_insert<pos:position pos:line="45" pos:column="39"/></name> <argument_list pos:line="45" pos:column="40">(<argument><expr><name><name pos:line="45" pos:column="41">dfa<pos:position pos:line="45" pos:column="44"/></name><operator pos:line="45" pos:column="44">-&gt;<pos:position pos:line="45" pos:column="49"/></operator><name pos:line="45" pos:column="46">edests<pos:position pos:line="45" pos:column="52"/></name></name> <operator pos:line="45" pos:column="53">+<pos:position pos:line="45" pos:column="54"/></operator> <name pos:line="45" pos:column="55">clone_node<pos:position pos:line="45" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="67">org_dest<pos:position pos:line="45" pos:column="75"/></name></expr></argument>)<pos:position pos:line="45" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="77"/></expr_stmt>
	      <if pos:line="46" pos:column="15">if <condition pos:line="46" pos:column="18">(<expr><call><name pos:line="46" pos:column="19">BE<pos:position pos:line="46" pos:column="21"/></name> <argument_list pos:line="46" pos:column="22">(<argument><expr><name pos:line="46" pos:column="23">ret<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">&lt;<pos:position pos:line="46" pos:column="31"/></operator> <literal type="number" pos:line="46" pos:column="29">0<pos:position pos:line="46" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="32">0<pos:position pos:line="46" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="35"/></condition><then pos:line="46" pos:column="35">
		<block type="pseudo"><return pos:line="47" pos:column="17">return <expr><name pos:line="47" pos:column="24">REG_ESPACE<pos:position pos:line="47" pos:column="34"/></name></expr>;<pos:position pos:line="47" pos:column="35"/></return></block></then></if>
	      <break pos:line="48" pos:column="15">break;<pos:position pos:line="48" pos:column="21"/></break>
	    }<pos:position pos:line="49" pos:column="14"/></block></then></if>
	  <comment type="block" pos:line="50" pos:column="11">/* In case of the node has another constraint, add it.  */</comment>
	  <expr_stmt><expr><name pos:line="51" pos:column="11">constraint<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">|=<pos:position pos:line="51" pos:column="24"/></operator> <name><name pos:line="51" pos:column="25">dfa<pos:position pos:line="51" pos:column="28"/></name><operator pos:line="51" pos:column="28">-&gt;<pos:position pos:line="51" pos:column="33"/></operator><name pos:line="51" pos:column="30">nodes<pos:position pos:line="51" pos:column="35"/></name><index pos:line="51" pos:column="35">[<expr><name pos:line="51" pos:column="36">org_node<pos:position pos:line="51" pos:column="44"/></name></expr>]<pos:position pos:line="51" pos:column="45"/></index></name><operator pos:line="51" pos:column="45">.<pos:position pos:line="51" pos:column="46"/></operator><name pos:line="51" pos:column="46">constraint<pos:position pos:line="51" pos:column="56"/></name></expr>;<pos:position pos:line="51" pos:column="57"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="52" pos:column="11">clone_dest<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <call><name pos:line="52" pos:column="24">duplicate_node<pos:position pos:line="52" pos:column="38"/></name> <argument_list pos:line="52" pos:column="39">(<argument><expr><name pos:line="52" pos:column="40">dfa<pos:position pos:line="52" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="45">org_dest<pos:position pos:line="52" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="55">constraint<pos:position pos:line="52" pos:column="65"/></name></expr></argument>)<pos:position pos:line="52" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="67"/></expr_stmt>
	  <if pos:line="53" pos:column="11">if <condition pos:line="53" pos:column="14">(<expr><call><name pos:line="53" pos:column="15">BE<pos:position pos:line="53" pos:column="17"/></name> <argument_list pos:line="53" pos:column="18">(<argument><expr><name pos:line="53" pos:column="19">clone_dest<pos:position pos:line="53" pos:column="29"/></name> <operator pos:line="53" pos:column="30">==<pos:position pos:line="53" pos:column="32"/></operator> <operator pos:line="53" pos:column="33">-<pos:position pos:line="53" pos:column="34"/></operator><literal type="number" pos:line="53" pos:column="34">1<pos:position pos:line="53" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="37">0<pos:position pos:line="53" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="40"/></condition><then pos:line="53" pos:column="40">
	    <block type="pseudo"><return pos:line="54" pos:column="13">return <expr><name pos:line="54" pos:column="20">REG_ESPACE<pos:position pos:line="54" pos:column="30"/></name></expr>;<pos:position pos:line="54" pos:column="31"/></return></block></then></if>
	  <expr_stmt><expr><name pos:line="55" pos:column="11">ret<pos:position pos:line="55" pos:column="14"/></name> <operator pos:line="55" pos:column="15">=<pos:position pos:line="55" pos:column="16"/></operator> <call><name pos:line="55" pos:column="17">re_node_set_insert<pos:position pos:line="55" pos:column="35"/></name> <argument_list pos:line="55" pos:column="36">(<argument><expr><name><name pos:line="55" pos:column="37">dfa<pos:position pos:line="55" pos:column="40"/></name><operator pos:line="55" pos:column="40">-&gt;<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="42">edests<pos:position pos:line="55" pos:column="48"/></name></name> <operator pos:line="55" pos:column="49">+<pos:position pos:line="55" pos:column="50"/></operator> <name pos:line="55" pos:column="51">clone_node<pos:position pos:line="55" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="63">clone_dest<pos:position pos:line="55" pos:column="73"/></name></expr></argument>)<pos:position pos:line="55" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="75"/></expr_stmt>
	  <if pos:line="56" pos:column="11">if <condition pos:line="56" pos:column="14">(<expr><call><name pos:line="56" pos:column="15">BE<pos:position pos:line="56" pos:column="17"/></name> <argument_list pos:line="56" pos:column="18">(<argument><expr><name pos:line="56" pos:column="19">ret<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">&lt;<pos:position pos:line="56" pos:column="27"/></operator> <literal type="number" pos:line="56" pos:column="25">0<pos:position pos:line="56" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="28">0<pos:position pos:line="56" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="31"/></condition><then pos:line="56" pos:column="31">
	    <block type="pseudo"><return pos:line="57" pos:column="13">return <expr><name pos:line="57" pos:column="20">REG_ESPACE<pos:position pos:line="57" pos:column="30"/></name></expr>;<pos:position pos:line="57" pos:column="31"/></return></block></then></if>
	}<pos:position pos:line="58" pos:column="10"/></block></then></if></elseif>
      <else pos:line="59" pos:column="7">else <comment type="block" pos:line="59" pos:column="12">/* dfa-&gt;edests[org_node].nelem == 2 */</comment>
	<block pos:line="60" pos:column="9">{
	  <comment type="block" pos:line="61" pos:column="11">/* In case of the node can epsilon-transit, and it has two
	     destinations. In the bin_tree_t and DFA, that's '|' and '*'.   */</comment>
	  <expr_stmt><expr><name pos:line="63" pos:column="11">org_dest<pos:position pos:line="63" pos:column="19"/></name> <operator pos:line="63" pos:column="20">=<pos:position pos:line="63" pos:column="21"/></operator> <name><name pos:line="63" pos:column="22">dfa<pos:position pos:line="63" pos:column="25"/></name><operator pos:line="63" pos:column="25">-&gt;<pos:position pos:line="63" pos:column="30"/></operator><name pos:line="63" pos:column="27">edests<pos:position pos:line="63" pos:column="33"/></name><index pos:line="63" pos:column="33">[<expr><name pos:line="63" pos:column="34">org_node<pos:position pos:line="63" pos:column="42"/></name></expr>]<pos:position pos:line="63" pos:column="43"/></index></name><operator pos:line="63" pos:column="43">.<pos:position pos:line="63" pos:column="44"/></operator><name><name pos:line="63" pos:column="44">elems<pos:position pos:line="63" pos:column="49"/></name><index pos:line="63" pos:column="49">[<expr><literal type="number" pos:line="63" pos:column="50">0<pos:position pos:line="63" pos:column="51"/></literal></expr>]<pos:position pos:line="63" pos:column="52"/></index></name></expr>;<pos:position pos:line="63" pos:column="53"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="64" pos:column="11">re_node_set_empty<pos:position pos:line="64" pos:column="28"/></name> <argument_list pos:line="64" pos:column="29">(<argument><expr><name><name pos:line="64" pos:column="30">dfa<pos:position pos:line="64" pos:column="33"/></name><operator pos:line="64" pos:column="33">-&gt;<pos:position pos:line="64" pos:column="38"/></operator><name pos:line="64" pos:column="35">edests<pos:position pos:line="64" pos:column="41"/></name></name> <operator pos:line="64" pos:column="42">+<pos:position pos:line="64" pos:column="43"/></operator> <name pos:line="64" pos:column="44">clone_node<pos:position pos:line="64" pos:column="54"/></name></expr></argument>)<pos:position pos:line="64" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="56"/></expr_stmt>
	  <comment type="block" pos:line="65" pos:column="11">/* Search for a duplicated node which satisfies the constraint.  */</comment>
	  <expr_stmt><expr><name pos:line="66" pos:column="11">clone_dest<pos:position pos:line="66" pos:column="21"/></name> <operator pos:line="66" pos:column="22">=<pos:position pos:line="66" pos:column="23"/></operator> <call><name pos:line="66" pos:column="24">search_duplicated_node<pos:position pos:line="66" pos:column="46"/></name> <argument_list pos:line="66" pos:column="47">(<argument><expr><name pos:line="66" pos:column="48">dfa<pos:position pos:line="66" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="53">org_dest<pos:position pos:line="66" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="63">constraint<pos:position pos:line="66" pos:column="73"/></name></expr></argument>)<pos:position pos:line="66" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="75"/></expr_stmt>
	  <if pos:line="67" pos:column="11">if <condition pos:line="67" pos:column="14">(<expr><name pos:line="67" pos:column="15">clone_dest<pos:position pos:line="67" pos:column="25"/></name> <operator pos:line="67" pos:column="26">==<pos:position pos:line="67" pos:column="28"/></operator> <operator pos:line="67" pos:column="29">-<pos:position pos:line="67" pos:column="30"/></operator><literal type="number" pos:line="67" pos:column="30">1<pos:position pos:line="67" pos:column="31"/></literal></expr>)<pos:position pos:line="67" pos:column="32"/></condition><then pos:line="67" pos:column="32">
	    <block pos:line="68" pos:column="13">{
	      <comment type="block" pos:line="69" pos:column="15">/* There is no such duplicated node, create a new one.  */</comment>
	      <decl_stmt><decl><type><name pos:line="70" pos:column="15">reg_errcode_t<pos:position pos:line="70" pos:column="28"/></name></type> <name pos:line="70" pos:column="29">err<pos:position pos:line="70" pos:column="32"/></name></decl>;<pos:position pos:line="70" pos:column="33"/></decl_stmt>
	      <expr_stmt><expr><name pos:line="71" pos:column="15">clone_dest<pos:position pos:line="71" pos:column="25"/></name> <operator pos:line="71" pos:column="26">=<pos:position pos:line="71" pos:column="27"/></operator> <call><name pos:line="71" pos:column="28">duplicate_node<pos:position pos:line="71" pos:column="42"/></name> <argument_list pos:line="71" pos:column="43">(<argument><expr><name pos:line="71" pos:column="44">dfa<pos:position pos:line="71" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="49">org_dest<pos:position pos:line="71" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="59">constraint<pos:position pos:line="71" pos:column="69"/></name></expr></argument>)<pos:position pos:line="71" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="71"/></expr_stmt>
	      <if pos:line="72" pos:column="15">if <condition pos:line="72" pos:column="18">(<expr><call><name pos:line="72" pos:column="19">BE<pos:position pos:line="72" pos:column="21"/></name> <argument_list pos:line="72" pos:column="22">(<argument><expr><name pos:line="72" pos:column="23">clone_dest<pos:position pos:line="72" pos:column="33"/></name> <operator pos:line="72" pos:column="34">==<pos:position pos:line="72" pos:column="36"/></operator> <operator pos:line="72" pos:column="37">-<pos:position pos:line="72" pos:column="38"/></operator><literal type="number" pos:line="72" pos:column="38">1<pos:position pos:line="72" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="41">0<pos:position pos:line="72" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="44"/></condition><then pos:line="72" pos:column="44">
		<block type="pseudo"><return pos:line="73" pos:column="17">return <expr><name pos:line="73" pos:column="24">REG_ESPACE<pos:position pos:line="73" pos:column="34"/></name></expr>;<pos:position pos:line="73" pos:column="35"/></return></block></then></if>
	      <expr_stmt><expr><name pos:line="74" pos:column="15">ret<pos:position pos:line="74" pos:column="18"/></name> <operator pos:line="74" pos:column="19">=<pos:position pos:line="74" pos:column="20"/></operator> <call><name pos:line="74" pos:column="21">re_node_set_insert<pos:position pos:line="74" pos:column="39"/></name> <argument_list pos:line="74" pos:column="40">(<argument><expr><name><name pos:line="74" pos:column="41">dfa<pos:position pos:line="74" pos:column="44"/></name><operator pos:line="74" pos:column="44">-&gt;<pos:position pos:line="74" pos:column="49"/></operator><name pos:line="74" pos:column="46">edests<pos:position pos:line="74" pos:column="52"/></name></name> <operator pos:line="74" pos:column="53">+<pos:position pos:line="74" pos:column="54"/></operator> <name pos:line="74" pos:column="55">clone_node<pos:position pos:line="74" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="67">clone_dest<pos:position pos:line="74" pos:column="77"/></name></expr></argument>)<pos:position pos:line="74" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="79"/></expr_stmt>
	      <if pos:line="75" pos:column="15">if <condition pos:line="75" pos:column="18">(<expr><call><name pos:line="75" pos:column="19">BE<pos:position pos:line="75" pos:column="21"/></name> <argument_list pos:line="75" pos:column="22">(<argument><expr><name pos:line="75" pos:column="23">ret<pos:position pos:line="75" pos:column="26"/></name> <operator pos:line="75" pos:column="27">&lt;<pos:position pos:line="75" pos:column="31"/></operator> <literal type="number" pos:line="75" pos:column="29">0<pos:position pos:line="75" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="32">0<pos:position pos:line="75" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="35"/></condition><then pos:line="75" pos:column="35">
		<block type="pseudo"><return pos:line="76" pos:column="17">return <expr><name pos:line="76" pos:column="24">REG_ESPACE<pos:position pos:line="76" pos:column="34"/></name></expr>;<pos:position pos:line="76" pos:column="35"/></return></block></then></if>
	      <expr_stmt><expr><name pos:line="77" pos:column="15">err<pos:position pos:line="77" pos:column="18"/></name> <operator pos:line="77" pos:column="19">=<pos:position pos:line="77" pos:column="20"/></operator> <call><name pos:line="77" pos:column="21">duplicate_node_closure<pos:position pos:line="77" pos:column="43"/></name> <argument_list pos:line="77" pos:column="44">(<argument><expr><name pos:line="77" pos:column="45">dfa<pos:position pos:line="77" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="50">org_dest<pos:position pos:line="77" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="60">clone_dest<pos:position pos:line="77" pos:column="70"/></name></expr></argument>,
					    <argument><expr><name pos:line="78" pos:column="45">root_node<pos:position pos:line="78" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="56">constraint<pos:position pos:line="78" pos:column="66"/></name></expr></argument>)<pos:position pos:line="78" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="68"/></expr_stmt>
	      <if pos:line="79" pos:column="15">if <condition pos:line="79" pos:column="18">(<expr><call><name pos:line="79" pos:column="19">BE<pos:position pos:line="79" pos:column="21"/></name> <argument_list pos:line="79" pos:column="22">(<argument><expr><name pos:line="79" pos:column="23">err<pos:position pos:line="79" pos:column="26"/></name> <operator pos:line="79" pos:column="27">!=<pos:position pos:line="79" pos:column="29"/></operator> <name pos:line="79" pos:column="30">REG_NOERROR<pos:position pos:line="79" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="43">0<pos:position pos:line="79" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="46"/></condition><then pos:line="79" pos:column="46">
		<block type="pseudo"><return pos:line="80" pos:column="17">return <expr><name pos:line="80" pos:column="24">err<pos:position pos:line="80" pos:column="27"/></name></expr>;<pos:position pos:line="80" pos:column="28"/></return></block></then></if>
	    }<pos:position pos:line="81" pos:column="14"/></block></then>
	  <else pos:line="82" pos:column="11">else
	    <block pos:line="83" pos:column="13">{
	      <comment type="block" pos:line="84" pos:column="15">/* There is a duplicated node which satisfies the constraint,
		 use it to avoid infinite loop.  */</comment>
	      <expr_stmt><expr><name pos:line="86" pos:column="15">ret<pos:position pos:line="86" pos:column="18"/></name> <operator pos:line="86" pos:column="19">=<pos:position pos:line="86" pos:column="20"/></operator> <call><name pos:line="86" pos:column="21">re_node_set_insert<pos:position pos:line="86" pos:column="39"/></name> <argument_list pos:line="86" pos:column="40">(<argument><expr><name><name pos:line="86" pos:column="41">dfa<pos:position pos:line="86" pos:column="44"/></name><operator pos:line="86" pos:column="44">-&gt;<pos:position pos:line="86" pos:column="49"/></operator><name pos:line="86" pos:column="46">edests<pos:position pos:line="86" pos:column="52"/></name></name> <operator pos:line="86" pos:column="53">+<pos:position pos:line="86" pos:column="54"/></operator> <name pos:line="86" pos:column="55">clone_node<pos:position pos:line="86" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="67">clone_dest<pos:position pos:line="86" pos:column="77"/></name></expr></argument>)<pos:position pos:line="86" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="79"/></expr_stmt>
	      <if pos:line="87" pos:column="15">if <condition pos:line="87" pos:column="18">(<expr><call><name pos:line="87" pos:column="19">BE<pos:position pos:line="87" pos:column="21"/></name> <argument_list pos:line="87" pos:column="22">(<argument><expr><name pos:line="87" pos:column="23">ret<pos:position pos:line="87" pos:column="26"/></name> <operator pos:line="87" pos:column="27">&lt;<pos:position pos:line="87" pos:column="31"/></operator> <literal type="number" pos:line="87" pos:column="29">0<pos:position pos:line="87" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="32">0<pos:position pos:line="87" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="35"/></condition><then pos:line="87" pos:column="35">
		<block type="pseudo"><return pos:line="88" pos:column="17">return <expr><name pos:line="88" pos:column="24">REG_ESPACE<pos:position pos:line="88" pos:column="34"/></name></expr>;<pos:position pos:line="88" pos:column="35"/></return></block></then></if>
	    }<pos:position pos:line="89" pos:column="14"/></block></else></if>

	  <expr_stmt><expr><name pos:line="91" pos:column="11">org_dest<pos:position pos:line="91" pos:column="19"/></name> <operator pos:line="91" pos:column="20">=<pos:position pos:line="91" pos:column="21"/></operator> <name><name pos:line="91" pos:column="22">dfa<pos:position pos:line="91" pos:column="25"/></name><operator pos:line="91" pos:column="25">-&gt;<pos:position pos:line="91" pos:column="30"/></operator><name pos:line="91" pos:column="27">edests<pos:position pos:line="91" pos:column="33"/></name><index pos:line="91" pos:column="33">[<expr><name pos:line="91" pos:column="34">org_node<pos:position pos:line="91" pos:column="42"/></name></expr>]<pos:position pos:line="91" pos:column="43"/></index></name><operator pos:line="91" pos:column="43">.<pos:position pos:line="91" pos:column="44"/></operator><name><name pos:line="91" pos:column="44">elems<pos:position pos:line="91" pos:column="49"/></name><index pos:line="91" pos:column="49">[<expr><literal type="number" pos:line="91" pos:column="50">1<pos:position pos:line="91" pos:column="51"/></literal></expr>]<pos:position pos:line="91" pos:column="52"/></index></name></expr>;<pos:position pos:line="91" pos:column="53"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="92" pos:column="11">clone_dest<pos:position pos:line="92" pos:column="21"/></name> <operator pos:line="92" pos:column="22">=<pos:position pos:line="92" pos:column="23"/></operator> <call><name pos:line="92" pos:column="24">duplicate_node<pos:position pos:line="92" pos:column="38"/></name> <argument_list pos:line="92" pos:column="39">(<argument><expr><name pos:line="92" pos:column="40">dfa<pos:position pos:line="92" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="45">org_dest<pos:position pos:line="92" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="55">constraint<pos:position pos:line="92" pos:column="65"/></name></expr></argument>)<pos:position pos:line="92" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="67"/></expr_stmt>
	  <if pos:line="93" pos:column="11">if <condition pos:line="93" pos:column="14">(<expr><call><name pos:line="93" pos:column="15">BE<pos:position pos:line="93" pos:column="17"/></name> <argument_list pos:line="93" pos:column="18">(<argument><expr><name pos:line="93" pos:column="19">clone_dest<pos:position pos:line="93" pos:column="29"/></name> <operator pos:line="93" pos:column="30">==<pos:position pos:line="93" pos:column="32"/></operator> <operator pos:line="93" pos:column="33">-<pos:position pos:line="93" pos:column="34"/></operator><literal type="number" pos:line="93" pos:column="34">1<pos:position pos:line="93" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="37">0<pos:position pos:line="93" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="40"/></condition><then pos:line="93" pos:column="40">
	    <block type="pseudo"><return pos:line="94" pos:column="13">return <expr><name pos:line="94" pos:column="20">REG_ESPACE<pos:position pos:line="94" pos:column="30"/></name></expr>;<pos:position pos:line="94" pos:column="31"/></return></block></then></if>
	  <expr_stmt><expr><name pos:line="95" pos:column="11">ret<pos:position pos:line="95" pos:column="14"/></name> <operator pos:line="95" pos:column="15">=<pos:position pos:line="95" pos:column="16"/></operator> <call><name pos:line="95" pos:column="17">re_node_set_insert<pos:position pos:line="95" pos:column="35"/></name> <argument_list pos:line="95" pos:column="36">(<argument><expr><name><name pos:line="95" pos:column="37">dfa<pos:position pos:line="95" pos:column="40"/></name><operator pos:line="95" pos:column="40">-&gt;<pos:position pos:line="95" pos:column="45"/></operator><name pos:line="95" pos:column="42">edests<pos:position pos:line="95" pos:column="48"/></name></name> <operator pos:line="95" pos:column="49">+<pos:position pos:line="95" pos:column="50"/></operator> <name pos:line="95" pos:column="51">clone_node<pos:position pos:line="95" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="63">clone_dest<pos:position pos:line="95" pos:column="73"/></name></expr></argument>)<pos:position pos:line="95" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="75"/></expr_stmt>
	  <if pos:line="96" pos:column="11">if <condition pos:line="96" pos:column="14">(<expr><call><name pos:line="96" pos:column="15">BE<pos:position pos:line="96" pos:column="17"/></name> <argument_list pos:line="96" pos:column="18">(<argument><expr><name pos:line="96" pos:column="19">ret<pos:position pos:line="96" pos:column="22"/></name> <operator pos:line="96" pos:column="23">&lt;<pos:position pos:line="96" pos:column="27"/></operator> <literal type="number" pos:line="96" pos:column="25">0<pos:position pos:line="96" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="96" pos:column="28">0<pos:position pos:line="96" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="31"/></condition><then pos:line="96" pos:column="31">
	    <block type="pseudo"><return pos:line="97" pos:column="13">return <expr><name pos:line="97" pos:column="20">REG_ESPACE<pos:position pos:line="97" pos:column="30"/></name></expr>;<pos:position pos:line="97" pos:column="31"/></return></block></then></if>
	}<pos:position pos:line="98" pos:column="10"/></block></else></if>
      <expr_stmt><expr><name pos:line="99" pos:column="7">org_node<pos:position pos:line="99" pos:column="15"/></name> <operator pos:line="99" pos:column="16">=<pos:position pos:line="99" pos:column="17"/></operator> <name pos:line="99" pos:column="18">org_dest<pos:position pos:line="99" pos:column="26"/></name></expr>;<pos:position pos:line="99" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name pos:line="100" pos:column="7">clone_node<pos:position pos:line="100" pos:column="17"/></name> <operator pos:line="100" pos:column="18">=<pos:position pos:line="100" pos:column="19"/></operator> <name pos:line="100" pos:column="20">clone_dest<pos:position pos:line="100" pos:column="30"/></name></expr>;<pos:position pos:line="100" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="101" pos:column="6"/></block></for>
  <return pos:line="102" pos:column="3">return <expr><name pos:line="102" pos:column="10">REG_NOERROR<pos:position pos:line="102" pos:column="21"/></name></expr>;<pos:position pos:line="102" pos:column="22"/></return>
}<pos:position pos:line="103" pos:column="2"/></block></function></unit>
