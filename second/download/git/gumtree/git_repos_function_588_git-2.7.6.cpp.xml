<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_588_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">store_write_section<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">fd<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">key<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">dot<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">success<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">sb<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">STRBUF_INIT<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">dot<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <call><name pos:line="7" pos:column="15">memchr<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><name pos:line="7" pos:column="22">key<pos:position pos:line="7" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="27">'.'<pos:position pos:line="7" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="32">store<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">.<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="38">baselen<pos:position pos:line="7" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">dot<pos:position pos:line="8" pos:column="16"/></name></expr>)<pos:position pos:line="8" pos:column="17"/></condition><then pos:line="8" pos:column="17"> <block pos:line="8" pos:column="18">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">strbuf_addf<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><operator pos:line="9" pos:column="29">&amp;<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="30">sb<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="34">"[%.*s \""<pos:position pos:line="9" pos:column="44"/></literal></expr></argument>, <argument><expr><call pos:line="9" pos:column="46">(<name pos:line="9" pos:column="47">int<pos:position pos:line="9" pos:column="50"/></name>)<argument_list pos:line="9" pos:column="51">(<argument><expr><name pos:line="9" pos:column="52">dot<pos:position pos:line="9" pos:column="55"/></name> <operator pos:line="9" pos:column="56">-<pos:position pos:line="9" pos:column="57"/></operator> <name pos:line="9" pos:column="58">key<pos:position pos:line="9" pos:column="61"/></name></expr></argument>)<pos:position pos:line="9" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="9" pos:column="64">key<pos:position pos:line="9" pos:column="67"/></name></expr></argument>)<pos:position pos:line="9" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="69"/></expr_stmt>
		<for pos:line="10" pos:column="17">for <control pos:line="10" pos:column="21">(<init><expr><name pos:line="10" pos:column="22">i<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <name pos:line="10" pos:column="26">dot<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">-<pos:position pos:line="10" pos:column="31"/></operator> <name pos:line="10" pos:column="32">key<pos:position pos:line="10" pos:column="35"/></name> <operator pos:line="10" pos:column="36">+<pos:position pos:line="10" pos:column="37"/></operator> <literal type="number" pos:line="10" pos:column="38">1<pos:position pos:line="10" pos:column="39"/></literal></expr>;<pos:position pos:line="10" pos:column="40"/></init> <condition><expr><name pos:line="10" pos:column="41">i<pos:position pos:line="10" pos:column="42"/></name> <operator pos:line="10" pos:column="43">&lt;<pos:position pos:line="10" pos:column="47"/></operator> <name><name pos:line="10" pos:column="45">store<pos:position pos:line="10" pos:column="50"/></name><operator pos:line="10" pos:column="50">.<pos:position pos:line="10" pos:column="51"/></operator><name pos:line="10" pos:column="51">baselen<pos:position pos:line="10" pos:column="58"/></name></name></expr>;<pos:position pos:line="10" pos:column="59"/></condition> <incr><expr><name pos:line="10" pos:column="60">i<pos:position pos:line="10" pos:column="61"/></name><operator pos:line="10" pos:column="61">++<pos:position pos:line="10" pos:column="63"/></operator></expr></incr>)<pos:position pos:line="10" pos:column="64"/></control> <block pos:line="10" pos:column="65">{
			<if pos:line="11" pos:column="25">if <condition pos:line="11" pos:column="28">(<expr><name><name pos:line="11" pos:column="29">key<pos:position pos:line="11" pos:column="32"/></name><index pos:line="11" pos:column="32">[<expr><name pos:line="11" pos:column="33">i<pos:position pos:line="11" pos:column="34"/></name></expr>]<pos:position pos:line="11" pos:column="35"/></index></name> <operator pos:line="11" pos:column="36">==<pos:position pos:line="11" pos:column="38"/></operator> <literal type="char" pos:line="11" pos:column="39">'"'<pos:position pos:line="11" pos:column="42"/></literal> <operator pos:line="11" pos:column="43">||<pos:position pos:line="11" pos:column="45"/></operator> <name><name pos:line="11" pos:column="46">key<pos:position pos:line="11" pos:column="49"/></name><index pos:line="11" pos:column="49">[<expr><name pos:line="11" pos:column="50">i<pos:position pos:line="11" pos:column="51"/></name></expr>]<pos:position pos:line="11" pos:column="52"/></index></name> <operator pos:line="11" pos:column="53">==<pos:position pos:line="11" pos:column="55"/></operator> <literal type="char" pos:line="11" pos:column="56">'\\'<pos:position pos:line="11" pos:column="60"/></literal></expr>)<pos:position pos:line="11" pos:column="61"/></condition><then pos:line="11" pos:column="61">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="33">strbuf_addch<pos:position pos:line="12" pos:column="45"/></name><argument_list pos:line="12" pos:column="45">(<argument><expr><operator pos:line="12" pos:column="46">&amp;<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="47">sb<pos:position pos:line="12" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="51">'\\'<pos:position pos:line="12" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">strbuf_addch<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><operator pos:line="13" pos:column="38">&amp;<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="39">sb<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="43">key<pos:position pos:line="13" pos:column="46"/></name><index pos:line="13" pos:column="46">[<expr><name pos:line="13" pos:column="47">i<pos:position pos:line="13" pos:column="48"/></name></expr>]<pos:position pos:line="13" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="14" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">strbuf_addstr<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><operator pos:line="15" pos:column="31">&amp;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="32">sb<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="36">"\"]\n"<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then> <else pos:line="16" pos:column="11">else <block pos:line="16" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">strbuf_addf<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><operator pos:line="17" pos:column="29">&amp;<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="30">sb<pos:position pos:line="17" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="34">"[%.*s]\n"<pos:position pos:line="17" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="46">store<pos:position pos:line="17" pos:column="51"/></name><operator pos:line="17" pos:column="51">.<pos:position pos:line="17" pos:column="52"/></operator><name pos:line="17" pos:column="52">baselen<pos:position pos:line="17" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="61">key<pos:position pos:line="17" pos:column="64"/></name></expr></argument>)<pos:position pos:line="17" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name pos:line="20" pos:column="9">success<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <call><name pos:line="20" pos:column="19">write_in_full<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">fd<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="37">sb<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">.<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="40">buf<pos:position pos:line="20" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="45">sb<pos:position pos:line="20" pos:column="47"/></name><operator pos:line="20" pos:column="47">.<pos:position pos:line="20" pos:column="48"/></operator><name pos:line="20" pos:column="48">len<pos:position pos:line="20" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></call> <operator pos:line="20" pos:column="53">==<pos:position pos:line="20" pos:column="55"/></operator> <name><name pos:line="20" pos:column="56">sb<pos:position pos:line="20" pos:column="58"/></name><operator pos:line="20" pos:column="58">.<pos:position pos:line="20" pos:column="59"/></operator><name pos:line="20" pos:column="59">len<pos:position pos:line="20" pos:column="62"/></name></name></expr>;<pos:position pos:line="20" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">strbuf_release<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><operator pos:line="21" pos:column="24">&amp;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="25">sb<pos:position pos:line="21" pos:column="27"/></name></expr></argument>)<pos:position pos:line="21" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>

	<return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">success<pos:position pos:line="23" pos:column="23"/></name></expr>;<pos:position pos:line="23" pos:column="24"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
