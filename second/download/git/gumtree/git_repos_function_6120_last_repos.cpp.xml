<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6120_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">add_work<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">grep_opt<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">opt<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="44">enum<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">grep_source_type<pos:position pos:line="1" pos:column="65"/></name></name></type> <name pos:line="1" pos:column="66">type<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
		     <parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">name<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier> <name pos:line="2" pos:column="46">char<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">path<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="58">const<pos:position pos:line="2" pos:column="63"/></specifier> <name pos:line="2" pos:column="64">void<pos:position pos:line="2" pos:column="68"/></name> <modifier pos:line="2" pos:column="69">*<pos:position pos:line="2" pos:column="70"/></modifier></type><name pos:line="2" pos:column="70">id<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="4" pos:column="9">grep_lock<pos:position pos:line="4" pos:column="18"/></name><argument_list pos:line="4" pos:column="18">()<pos:position pos:line="4" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="21"/></expr_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><operator pos:line="6" pos:column="16">(<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">todo_end<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">+<pos:position pos:line="6" pos:column="26"/></operator><literal type="number" pos:line="6" pos:column="26">1<pos:position pos:line="6" pos:column="27"/></literal><operator pos:line="6" pos:column="27">)<pos:position pos:line="6" pos:column="28"/></operator> <operator pos:line="6" pos:column="29">%<pos:position pos:line="6" pos:column="30"/></operator> <call><name pos:line="6" pos:column="31">ARRAY_SIZE<pos:position pos:line="6" pos:column="41"/></name><argument_list pos:line="6" pos:column="41">(<argument><expr><name pos:line="6" pos:column="42">todo<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call> <operator pos:line="6" pos:column="48">==<pos:position pos:line="6" pos:column="50"/></operator> <name pos:line="6" pos:column="51">todo_done<pos:position pos:line="6" pos:column="60"/></name></expr>)<pos:position pos:line="6" pos:column="61"/></condition> <block pos:line="6" pos:column="62">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">pthread_cond_wait<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><operator pos:line="7" pos:column="35">&amp;<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="36">cond_write<pos:position pos:line="7" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="48">&amp;<pos:position pos:line="7" pos:column="53"/></operator><name pos:line="7" pos:column="49">grep_mutex<pos:position pos:line="7" pos:column="59"/></name></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="8" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">grep_source_init<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><operator pos:line="10" pos:column="26">&amp;<pos:position pos:line="10" pos:column="31"/></operator><name><name pos:line="10" pos:column="27">todo<pos:position pos:line="10" pos:column="31"/></name><index pos:line="10" pos:column="31">[<expr><name pos:line="10" pos:column="32">todo_end<pos:position pos:line="10" pos:column="40"/></name></expr>]<pos:position pos:line="10" pos:column="41"/></index></name><operator pos:line="10" pos:column="41">.<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="42">source<pos:position pos:line="10" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="50">type<pos:position pos:line="10" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="56">name<pos:position pos:line="10" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="62">path<pos:position pos:line="10" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="68">id<pos:position pos:line="10" pos:column="70"/></name></expr></argument>)<pos:position pos:line="10" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="72"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">opt<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">binary<pos:position pos:line="11" pos:column="24"/></name></name> <operator pos:line="11" pos:column="25">!=<pos:position pos:line="11" pos:column="27"/></operator> <name pos:line="11" pos:column="28">GREP_BINARY_TEXT<pos:position pos:line="11" pos:column="44"/></name></expr>)<pos:position pos:line="11" pos:column="45"/></condition><then pos:line="11" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">grep_source_load_driver<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><operator pos:line="12" pos:column="41">&amp;<pos:position pos:line="12" pos:column="46"/></operator><name><name pos:line="12" pos:column="42">todo<pos:position pos:line="12" pos:column="46"/></name><index pos:line="12" pos:column="46">[<expr><name pos:line="12" pos:column="47">todo_end<pos:position pos:line="12" pos:column="55"/></name></expr>]<pos:position pos:line="12" pos:column="56"/></index></name><operator pos:line="12" pos:column="56">.<pos:position pos:line="12" pos:column="57"/></operator><name pos:line="12" pos:column="57">source<pos:position pos:line="12" pos:column="63"/></name></expr></argument>)<pos:position pos:line="12" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="65"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">todo<pos:position pos:line="13" pos:column="13"/></name><index pos:line="13" pos:column="13">[<expr><name pos:line="13" pos:column="14">todo_end<pos:position pos:line="13" pos:column="22"/></name></expr>]<pos:position pos:line="13" pos:column="23"/></index></name><operator pos:line="13" pos:column="23">.<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">done<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">=<pos:position pos:line="13" pos:column="30"/></operator> <literal type="number" pos:line="13" pos:column="31">0<pos:position pos:line="13" pos:column="32"/></literal></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">strbuf_reset<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><operator pos:line="14" pos:column="22">&amp;<pos:position pos:line="14" pos:column="27"/></operator><name><name pos:line="14" pos:column="23">todo<pos:position pos:line="14" pos:column="27"/></name><index pos:line="14" pos:column="27">[<expr><name pos:line="14" pos:column="28">todo_end<pos:position pos:line="14" pos:column="36"/></name></expr>]<pos:position pos:line="14" pos:column="37"/></index></name><operator pos:line="14" pos:column="37">.<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="38">out<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">todo_end<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <operator pos:line="15" pos:column="20">(<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">todo_end<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">+<pos:position pos:line="15" pos:column="31"/></operator> <literal type="number" pos:line="15" pos:column="32">1<pos:position pos:line="15" pos:column="33"/></literal><operator pos:line="15" pos:column="33">)<pos:position pos:line="15" pos:column="34"/></operator> <operator pos:line="15" pos:column="35">%<pos:position pos:line="15" pos:column="36"/></operator> <call><name pos:line="15" pos:column="37">ARRAY_SIZE<pos:position pos:line="15" pos:column="47"/></name><argument_list pos:line="15" pos:column="47">(<argument><expr><name pos:line="15" pos:column="48">todo<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="54"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">pthread_cond_signal<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><operator pos:line="17" pos:column="29">&amp;<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="30">cond_add<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">grep_unlock<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">()<pos:position pos:line="18" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
