<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1827_git-2.5.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">fnmatch_icase<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">pattern<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">string<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">int<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">flags<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<return pos:line="3" pos:column="9">return <expr><call><name pos:line="3" pos:column="16">wildmatch<pos:position pos:line="3" pos:column="25"/></name><argument_list pos:line="3" pos:column="25">(<argument><expr><name pos:line="3" pos:column="26">pattern<pos:position pos:line="3" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="35">string<pos:position pos:line="3" pos:column="41"/></name></expr></argument>,
			 <argument><expr><name pos:line="4" pos:column="26">flags<pos:position pos:line="4" pos:column="31"/></name> <operator pos:line="4" pos:column="32">|<pos:position pos:line="4" pos:column="33"/></operator> <operator pos:line="4" pos:column="34">(<pos:position pos:line="4" pos:column="35"/></operator><ternary><condition><expr><name pos:line="4" pos:column="35">ignore_case<pos:position pos:line="4" pos:column="46"/></name></expr> ?<pos:position pos:line="4" pos:column="48"/></condition><then pos:line="4" pos:column="48"> <expr><name pos:line="4" pos:column="49">WM_CASEFOLD<pos:position pos:line="4" pos:column="60"/></name></expr> <pos:position pos:line="4" pos:column="61"/></then><else pos:line="4" pos:column="61">: <expr><literal type="number" pos:line="4" pos:column="63">0<pos:position pos:line="4" pos:column="64"/></literal></expr></else></ternary><operator pos:line="4" pos:column="64">)<pos:position pos:line="4" pos:column="65"/></operator></expr></argument>,
			 <argument><expr><name pos:line="5" pos:column="26">NULL<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></return>
}<pos:position pos:line="6" pos:column="2"/></block></function></unit>
