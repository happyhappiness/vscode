<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5037_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">update<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">command<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">cmd<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">shallow_info<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">si<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">name<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name><name pos:line="3" pos:column="28">cmd<pos:position pos:line="3" pos:column="31"/></name><operator pos:line="3" pos:column="31">-&gt;<pos:position pos:line="3" pos:column="36"/></operator><name pos:line="3" pos:column="33">ref_name<pos:position pos:line="3" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">namespaced_name_buf<pos:position pos:line="4" pos:column="42"/></name> <init pos:line="4" pos:column="43">= <expr><name pos:line="4" pos:column="45">STRBUF_INIT<pos:position pos:line="4" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">namespaced_name<pos:position pos:line="5" pos:column="36"/></name></decl>, <modifier pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="39">ret<pos:position pos:line="5" pos:column="42"/></name></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">old_sha1<pos:position pos:line="6" pos:column="32"/></name> <init pos:line="6" pos:column="33">= <expr><name><name pos:line="6" pos:column="35">cmd<pos:position pos:line="6" pos:column="38"/></name><operator pos:line="6" pos:column="38">-&gt;<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="40">old_sha1<pos:position pos:line="6" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">new_sha1<pos:position pos:line="7" pos:column="32"/></name> <init pos:line="7" pos:column="33">= <expr><name><name pos:line="7" pos:column="35">cmd<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">-&gt;<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="40">new_sha1<pos:position pos:line="7" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* only refs/... are allowed */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><call><name pos:line="10" pos:column="14">starts_with<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">name<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="32">"refs/"<pos:position pos:line="10" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call> <operator pos:line="10" pos:column="41">||<pos:position pos:line="10" pos:column="43"/></operator> <call><name pos:line="10" pos:column="44">check_refname_format<pos:position pos:line="10" pos:column="64"/></name><argument_list pos:line="10" pos:column="64">(<argument><expr><name pos:line="10" pos:column="65">name<pos:position pos:line="10" pos:column="69"/></name> <operator pos:line="10" pos:column="70">+<pos:position pos:line="10" pos:column="71"/></operator> <literal type="number" pos:line="10" pos:column="72">5<pos:position pos:line="10" pos:column="73"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="75">0<pos:position pos:line="10" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="78"/></condition><then pos:line="10" pos:column="78"> <block pos:line="10" pos:column="79">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">rp_error<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><literal type="string" pos:line="11" pos:column="26">"refusing to create funny ref '%s' remotely"<pos:position pos:line="11" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="72">name<pos:position pos:line="11" pos:column="76"/></name></expr></argument>)<pos:position pos:line="11" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="78"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><literal type="string" pos:line="12" pos:column="24">"funny refname"<pos:position pos:line="12" pos:column="39"/></literal></expr>;<pos:position pos:line="12" pos:column="40"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">strbuf_addf<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><operator pos:line="15" pos:column="21">&amp;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="22">namespaced_name_buf<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="43">"%s%s"<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="51">get_git_namespace<pos:position pos:line="15" pos:column="68"/></name><argument_list pos:line="15" pos:column="68">()<pos:position pos:line="15" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="15" pos:column="72">name<pos:position pos:line="15" pos:column="76"/></name></expr></argument>)<pos:position pos:line="15" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="78"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">namespaced_name<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">=<pos:position pos:line="16" pos:column="26"/></operator> <call><name pos:line="16" pos:column="27">strbuf_detach<pos:position pos:line="16" pos:column="40"/></name><argument_list pos:line="16" pos:column="40">(<argument><expr><operator pos:line="16" pos:column="41">&amp;<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="42">namespaced_name_buf<pos:position pos:line="16" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="63">NULL<pos:position pos:line="16" pos:column="67"/></name></expr></argument>)<pos:position pos:line="16" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="69"/></expr_stmt>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">is_ref_checked_out<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">namespaced_name<pos:position pos:line="18" pos:column="47"/></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="49"/></condition><then pos:line="18" pos:column="49"> <block pos:line="18" pos:column="50">{
		<switch pos:line="19" pos:column="17">switch <condition pos:line="19" pos:column="24">(<expr><name pos:line="19" pos:column="25">deny_current_branch<pos:position pos:line="19" pos:column="44"/></name></expr>)<pos:position pos:line="19" pos:column="45"/></condition> <block pos:line="19" pos:column="46">{
		<case pos:line="20" pos:column="17">case <expr><name pos:line="20" pos:column="22">DENY_IGNORE<pos:position pos:line="20" pos:column="33"/></name></expr>:<pos:position pos:line="20" pos:column="34"/></case>
			<break pos:line="21" pos:column="25">break;<pos:position pos:line="21" pos:column="31"/></break>
		<case pos:line="22" pos:column="17">case <expr><name pos:line="22" pos:column="22">DENY_WARN<pos:position pos:line="22" pos:column="31"/></name></expr>:<pos:position pos:line="22" pos:column="32"/></case>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">rp_warning<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><literal type="string" pos:line="23" pos:column="36">"updating the current branch"<pos:position pos:line="23" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="67"/></expr_stmt>
			<break pos:line="24" pos:column="25">break;<pos:position pos:line="24" pos:column="31"/></break>
		<case pos:line="25" pos:column="17">case <expr><name pos:line="25" pos:column="22">DENY_REFUSE<pos:position pos:line="25" pos:column="33"/></name></expr>:<pos:position pos:line="25" pos:column="34"/></case>
		<case pos:line="26" pos:column="17">case <expr><name pos:line="26" pos:column="22">DENY_UNCONFIGURED<pos:position pos:line="26" pos:column="39"/></name></expr>:<pos:position pos:line="26" pos:column="40"/></case>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">rp_error<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><literal type="string" pos:line="27" pos:column="34">"refusing to update checked out branch: %s"<pos:position pos:line="27" pos:column="77"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="79">name<pos:position pos:line="27" pos:column="83"/></name></expr></argument>)<pos:position pos:line="27" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="85"/></expr_stmt>
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><name pos:line="28" pos:column="29">deny_current_branch<pos:position pos:line="28" pos:column="48"/></name> <operator pos:line="28" pos:column="49">==<pos:position pos:line="28" pos:column="51"/></operator> <name pos:line="28" pos:column="52">DENY_UNCONFIGURED<pos:position pos:line="28" pos:column="69"/></name></expr>)<pos:position pos:line="28" pos:column="70"/></condition><then pos:line="28" pos:column="70">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="33">refuse_unconfigured_deny<pos:position pos:line="29" pos:column="57"/></name><argument_list pos:line="29" pos:column="57">()<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="60"/></expr_stmt></block></then></if>
			<return pos:line="30" pos:column="25">return <expr><literal type="string" pos:line="30" pos:column="32">"branch is currently checked out"<pos:position pos:line="30" pos:column="65"/></literal></expr>;<pos:position pos:line="30" pos:column="66"/></return>
		<case pos:line="31" pos:column="17">case <expr><name pos:line="31" pos:column="22">DENY_UPDATE_INSTEAD<pos:position pos:line="31" pos:column="41"/></name></expr>:<pos:position pos:line="31" pos:column="42"/></case>
			<expr_stmt><expr><name pos:line="32" pos:column="25">ret<pos:position pos:line="32" pos:column="28"/></name> <operator pos:line="32" pos:column="29">=<pos:position pos:line="32" pos:column="30"/></operator> <call><name pos:line="32" pos:column="31">update_worktree<pos:position pos:line="32" pos:column="46"/></name><argument_list pos:line="32" pos:column="46">(<argument><expr><name pos:line="32" pos:column="47">new_sha1<pos:position pos:line="32" pos:column="55"/></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">ret<pos:position pos:line="33" pos:column="32"/></name></expr>)<pos:position pos:line="33" pos:column="33"/></condition><then pos:line="33" pos:column="33">
				<block type="pseudo"><return pos:line="34" pos:column="33">return <expr><name pos:line="34" pos:column="40">ret<pos:position pos:line="34" pos:column="43"/></name></expr>;<pos:position pos:line="34" pos:column="44"/></return></block></then></if>
			<break pos:line="35" pos:column="25">break;<pos:position pos:line="35" pos:column="31"/></break>
		}<pos:position pos:line="36" pos:column="18"/></block></switch>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><operator pos:line="39" pos:column="13">!<pos:position pos:line="39" pos:column="14"/></operator><call><name pos:line="39" pos:column="14">is_null_sha1<pos:position pos:line="39" pos:column="26"/></name><argument_list pos:line="39" pos:column="26">(<argument><expr><name pos:line="39" pos:column="27">new_sha1<pos:position pos:line="39" pos:column="35"/></name></expr></argument>)<pos:position pos:line="39" pos:column="36"/></argument_list></call> <operator pos:line="39" pos:column="37">&amp;&amp;<pos:position pos:line="39" pos:column="47"/></operator> <operator pos:line="39" pos:column="40">!<pos:position pos:line="39" pos:column="41"/></operator><call><name pos:line="39" pos:column="41">has_sha1_file<pos:position pos:line="39" pos:column="54"/></name><argument_list pos:line="39" pos:column="54">(<argument><expr><name pos:line="39" pos:column="55">new_sha1<pos:position pos:line="39" pos:column="63"/></name></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="65"/></condition><then pos:line="39" pos:column="65"> <block pos:line="39" pos:column="66">{
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">error<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><literal type="string" pos:line="40" pos:column="23">"unpack should have generated %s, "<pos:position pos:line="40" pos:column="58"/></literal>
		      <literal type="string" pos:line="41" pos:column="23">"but I can't find it!"<pos:position pos:line="41" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="47">sha1_to_hex<pos:position pos:line="41" pos:column="58"/></name><argument_list pos:line="41" pos:column="58">(<argument><expr><name pos:line="41" pos:column="59">new_sha1<pos:position pos:line="41" pos:column="67"/></name></expr></argument>)<pos:position pos:line="41" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="70"/></expr_stmt>
		<return pos:line="42" pos:column="17">return <expr><literal type="string" pos:line="42" pos:column="24">"bad pack"<pos:position pos:line="42" pos:column="34"/></literal></expr>;<pos:position pos:line="42" pos:column="35"/></return>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><call><name pos:line="45" pos:column="14">is_null_sha1<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">old_sha1<pos:position pos:line="45" pos:column="35"/></name></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call> <operator pos:line="45" pos:column="37">&amp;&amp;<pos:position pos:line="45" pos:column="47"/></operator> <call><name pos:line="45" pos:column="40">is_null_sha1<pos:position pos:line="45" pos:column="52"/></name><argument_list pos:line="45" pos:column="52">(<argument><expr><name pos:line="45" pos:column="53">new_sha1<pos:position pos:line="45" pos:column="61"/></name></expr></argument>)<pos:position pos:line="45" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="63"/></condition><then pos:line="45" pos:column="63"> <block pos:line="45" pos:column="64">{
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">deny_deletes<pos:position pos:line="46" pos:column="33"/></name> <operator pos:line="46" pos:column="34">&amp;&amp;<pos:position pos:line="46" pos:column="44"/></operator> <call><name pos:line="46" pos:column="37">starts_with<pos:position pos:line="46" pos:column="48"/></name><argument_list pos:line="46" pos:column="48">(<argument><expr><name pos:line="46" pos:column="49">name<pos:position pos:line="46" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="55">"refs/heads/"<pos:position pos:line="46" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="70"/></condition><then pos:line="46" pos:column="70"> <block pos:line="46" pos:column="71">{
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">rp_error<pos:position pos:line="47" pos:column="33"/></name><argument_list pos:line="47" pos:column="33">(<argument><expr><literal type="string" pos:line="47" pos:column="34">"denying ref deletion for %s"<pos:position pos:line="47" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="65">name<pos:position pos:line="47" pos:column="69"/></name></expr></argument>)<pos:position pos:line="47" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="71"/></expr_stmt>
			<return pos:line="48" pos:column="25">return <expr><literal type="string" pos:line="48" pos:column="32">"deletion prohibited"<pos:position pos:line="48" pos:column="53"/></literal></expr>;<pos:position pos:line="48" pos:column="54"/></return>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if>

		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><name pos:line="51" pos:column="21">head_name<pos:position pos:line="51" pos:column="30"/></name> <operator pos:line="51" pos:column="31">&amp;&amp;<pos:position pos:line="51" pos:column="41"/></operator> <operator pos:line="51" pos:column="34">!<pos:position pos:line="51" pos:column="35"/></operator><call><name pos:line="51" pos:column="35">strcmp<pos:position pos:line="51" pos:column="41"/></name><argument_list pos:line="51" pos:column="41">(<argument><expr><name pos:line="51" pos:column="42">namespaced_name<pos:position pos:line="51" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="59">head_name<pos:position pos:line="51" pos:column="68"/></name></expr></argument>)<pos:position pos:line="51" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="70"/></condition><then pos:line="51" pos:column="70"> <block pos:line="51" pos:column="71">{
			<switch pos:line="52" pos:column="25">switch <condition pos:line="52" pos:column="32">(<expr><name pos:line="52" pos:column="33">deny_delete_current<pos:position pos:line="52" pos:column="52"/></name></expr>)<pos:position pos:line="52" pos:column="53"/></condition> <block pos:line="52" pos:column="54">{
			<case pos:line="53" pos:column="25">case <expr><name pos:line="53" pos:column="30">DENY_IGNORE<pos:position pos:line="53" pos:column="41"/></name></expr>:<pos:position pos:line="53" pos:column="42"/></case>
				<break pos:line="54" pos:column="33">break;<pos:position pos:line="54" pos:column="39"/></break>
			<case pos:line="55" pos:column="25">case <expr><name pos:line="55" pos:column="30">DENY_WARN<pos:position pos:line="55" pos:column="39"/></name></expr>:<pos:position pos:line="55" pos:column="40"/></case>
				<expr_stmt><expr><call><name pos:line="56" pos:column="33">rp_warning<pos:position pos:line="56" pos:column="43"/></name><argument_list pos:line="56" pos:column="43">(<argument><expr><literal type="string" pos:line="56" pos:column="44">"deleting the current branch"<pos:position pos:line="56" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="75"/></expr_stmt>
				<break pos:line="57" pos:column="33">break;<pos:position pos:line="57" pos:column="39"/></break>
			<case pos:line="58" pos:column="25">case <expr><name pos:line="58" pos:column="30">DENY_REFUSE<pos:position pos:line="58" pos:column="41"/></name></expr>:<pos:position pos:line="58" pos:column="42"/></case>
			<case pos:line="59" pos:column="25">case <expr><name pos:line="59" pos:column="30">DENY_UNCONFIGURED<pos:position pos:line="59" pos:column="47"/></name></expr>:<pos:position pos:line="59" pos:column="48"/></case>
			<case pos:line="60" pos:column="25">case <expr><name pos:line="60" pos:column="30">DENY_UPDATE_INSTEAD<pos:position pos:line="60" pos:column="49"/></name></expr>:<pos:position pos:line="60" pos:column="50"/></case>
				<if pos:line="61" pos:column="33">if <condition pos:line="61" pos:column="36">(<expr><name pos:line="61" pos:column="37">deny_delete_current<pos:position pos:line="61" pos:column="56"/></name> <operator pos:line="61" pos:column="57">==<pos:position pos:line="61" pos:column="59"/></operator> <name pos:line="61" pos:column="60">DENY_UNCONFIGURED<pos:position pos:line="61" pos:column="77"/></name></expr>)<pos:position pos:line="61" pos:column="78"/></condition><then pos:line="61" pos:column="78">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="41">refuse_unconfigured_deny_delete_current<pos:position pos:line="62" pos:column="80"/></name><argument_list pos:line="62" pos:column="80">()<pos:position pos:line="62" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="83"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="63" pos:column="33">rp_error<pos:position pos:line="63" pos:column="41"/></name><argument_list pos:line="63" pos:column="41">(<argument><expr><literal type="string" pos:line="63" pos:column="42">"refusing to delete the current branch: %s"<pos:position pos:line="63" pos:column="85"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="87">name<pos:position pos:line="63" pos:column="91"/></name></expr></argument>)<pos:position pos:line="63" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="93"/></expr_stmt>
				<return pos:line="64" pos:column="33">return <expr><literal type="string" pos:line="64" pos:column="40">"deletion of the current branch prohibited"<pos:position pos:line="64" pos:column="83"/></literal></expr>;<pos:position pos:line="64" pos:column="84"/></return>
			<default pos:line="65" pos:column="25">default:<pos:position pos:line="65" pos:column="33"/></default>
				<return pos:line="66" pos:column="33">return <expr><literal type="string" pos:line="66" pos:column="40">"Invalid denyDeleteCurrent setting"<pos:position pos:line="66" pos:column="75"/></literal></expr>;<pos:position pos:line="66" pos:column="76"/></return>
			}<pos:position pos:line="67" pos:column="26"/></block></switch>
		}<pos:position pos:line="68" pos:column="18"/></block></then></if>
	}<pos:position pos:line="69" pos:column="10"/></block></then></if>

	<if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><name pos:line="71" pos:column="13">deny_non_fast_forwards<pos:position pos:line="71" pos:column="35"/></name> <operator pos:line="71" pos:column="36">&amp;&amp;<pos:position pos:line="71" pos:column="46"/></operator> <operator pos:line="71" pos:column="39">!<pos:position pos:line="71" pos:column="40"/></operator><call><name pos:line="71" pos:column="40">is_null_sha1<pos:position pos:line="71" pos:column="52"/></name><argument_list pos:line="71" pos:column="52">(<argument><expr><name pos:line="71" pos:column="53">new_sha1<pos:position pos:line="71" pos:column="61"/></name></expr></argument>)<pos:position pos:line="71" pos:column="62"/></argument_list></call> <operator pos:line="71" pos:column="63">&amp;&amp;<pos:position pos:line="71" pos:column="73"/></operator>
	    <operator pos:line="72" pos:column="13">!<pos:position pos:line="72" pos:column="14"/></operator><call><name pos:line="72" pos:column="14">is_null_sha1<pos:position pos:line="72" pos:column="26"/></name><argument_list pos:line="72" pos:column="26">(<argument><expr><name pos:line="72" pos:column="27">old_sha1<pos:position pos:line="72" pos:column="35"/></name></expr></argument>)<pos:position pos:line="72" pos:column="36"/></argument_list></call> <operator pos:line="72" pos:column="37">&amp;&amp;<pos:position pos:line="72" pos:column="47"/></operator>
	    <call><name pos:line="73" pos:column="13">starts_with<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><name pos:line="73" pos:column="25">name<pos:position pos:line="73" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="31">"refs/heads/"<pos:position pos:line="73" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="46"/></condition><then pos:line="73" pos:column="46"> <block pos:line="73" pos:column="47">{
		<decl_stmt><decl><type><name><name pos:line="74" pos:column="17">struct<pos:position pos:line="74" pos:column="23"/></name> <name pos:line="74" pos:column="24">object<pos:position pos:line="74" pos:column="30"/></name></name> <modifier pos:line="74" pos:column="31">*<pos:position pos:line="74" pos:column="32"/></modifier></type><name pos:line="74" pos:column="32">old_object<pos:position pos:line="74" pos:column="42"/></name></decl>, <modifier pos:line="74" pos:column="44">*<pos:position pos:line="74" pos:column="45"/></modifier><decl><type ref="prev"/><name pos:line="74" pos:column="45">new_object<pos:position pos:line="74" pos:column="55"/></name></decl>;<pos:position pos:line="74" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="75" pos:column="17">struct<pos:position pos:line="75" pos:column="23"/></name> <name pos:line="75" pos:column="24">commit<pos:position pos:line="75" pos:column="30"/></name></name> <modifier pos:line="75" pos:column="31">*<pos:position pos:line="75" pos:column="32"/></modifier></type><name pos:line="75" pos:column="32">old_commit<pos:position pos:line="75" pos:column="42"/></name></decl>, <modifier pos:line="75" pos:column="44">*<pos:position pos:line="75" pos:column="45"/></modifier><decl><type ref="prev"/><name pos:line="75" pos:column="45">new_commit<pos:position pos:line="75" pos:column="55"/></name></decl>;<pos:position pos:line="75" pos:column="56"/></decl_stmt>

		<expr_stmt><expr><name pos:line="77" pos:column="17">old_object<pos:position pos:line="77" pos:column="27"/></name> <operator pos:line="77" pos:column="28">=<pos:position pos:line="77" pos:column="29"/></operator> <call><name pos:line="77" pos:column="30">parse_object<pos:position pos:line="77" pos:column="42"/></name><argument_list pos:line="77" pos:column="42">(<argument><expr><name pos:line="77" pos:column="43">old_sha1<pos:position pos:line="77" pos:column="51"/></name></expr></argument>)<pos:position pos:line="77" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name pos:line="78" pos:column="17">new_object<pos:position pos:line="78" pos:column="27"/></name> <operator pos:line="78" pos:column="28">=<pos:position pos:line="78" pos:column="29"/></operator> <call><name pos:line="78" pos:column="30">parse_object<pos:position pos:line="78" pos:column="42"/></name><argument_list pos:line="78" pos:column="42">(<argument><expr><name pos:line="78" pos:column="43">new_sha1<pos:position pos:line="78" pos:column="51"/></name></expr></argument>)<pos:position pos:line="78" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="53"/></expr_stmt>

		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><operator pos:line="80" pos:column="21">!<pos:position pos:line="80" pos:column="22"/></operator><name pos:line="80" pos:column="22">old_object<pos:position pos:line="80" pos:column="32"/></name> <operator pos:line="80" pos:column="33">||<pos:position pos:line="80" pos:column="35"/></operator> <operator pos:line="80" pos:column="36">!<pos:position pos:line="80" pos:column="37"/></operator><name pos:line="80" pos:column="37">new_object<pos:position pos:line="80" pos:column="47"/></name> <operator pos:line="80" pos:column="48">||<pos:position pos:line="80" pos:column="50"/></operator>
		    <name><name pos:line="81" pos:column="21">old_object<pos:position pos:line="81" pos:column="31"/></name><operator pos:line="81" pos:column="31">-&gt;<pos:position pos:line="81" pos:column="36"/></operator><name pos:line="81" pos:column="33">type<pos:position pos:line="81" pos:column="37"/></name></name> <operator pos:line="81" pos:column="38">!=<pos:position pos:line="81" pos:column="40"/></operator> <name pos:line="81" pos:column="41">OBJ_COMMIT<pos:position pos:line="81" pos:column="51"/></name> <operator pos:line="81" pos:column="52">||<pos:position pos:line="81" pos:column="54"/></operator>
		    <name><name pos:line="82" pos:column="21">new_object<pos:position pos:line="82" pos:column="31"/></name><operator pos:line="82" pos:column="31">-&gt;<pos:position pos:line="82" pos:column="36"/></operator><name pos:line="82" pos:column="33">type<pos:position pos:line="82" pos:column="37"/></name></name> <operator pos:line="82" pos:column="38">!=<pos:position pos:line="82" pos:column="40"/></operator> <name pos:line="82" pos:column="41">OBJ_COMMIT<pos:position pos:line="82" pos:column="51"/></name></expr>)<pos:position pos:line="82" pos:column="52"/></condition><then pos:line="82" pos:column="52"> <block pos:line="82" pos:column="53">{
			<expr_stmt><expr><call><name pos:line="83" pos:column="25">error<pos:position pos:line="83" pos:column="30"/></name><argument_list pos:line="83" pos:column="30">(<argument><expr><literal type="string" pos:line="83" pos:column="31">"bad sha1 objects for %s"<pos:position pos:line="83" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="58">name<pos:position pos:line="83" pos:column="62"/></name></expr></argument>)<pos:position pos:line="83" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="64"/></expr_stmt>
			<return pos:line="84" pos:column="25">return <expr><literal type="string" pos:line="84" pos:column="32">"bad ref"<pos:position pos:line="84" pos:column="41"/></literal></expr>;<pos:position pos:line="84" pos:column="42"/></return>
		}<pos:position pos:line="85" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="86" pos:column="17">old_commit<pos:position pos:line="86" pos:column="27"/></name> <operator pos:line="86" pos:column="28">=<pos:position pos:line="86" pos:column="29"/></operator> <operator pos:line="86" pos:column="30">(<pos:position pos:line="86" pos:column="31"/></operator>struct <name pos:line="86" pos:column="38">commit<pos:position pos:line="86" pos:column="44"/></name> <operator pos:line="86" pos:column="45">*<pos:position pos:line="86" pos:column="46"/></operator><operator pos:line="86" pos:column="46">)<pos:position pos:line="86" pos:column="47"/></operator><name pos:line="86" pos:column="47">old_object<pos:position pos:line="86" pos:column="57"/></name></expr>;<pos:position pos:line="86" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name pos:line="87" pos:column="17">new_commit<pos:position pos:line="87" pos:column="27"/></name> <operator pos:line="87" pos:column="28">=<pos:position pos:line="87" pos:column="29"/></operator> <operator pos:line="87" pos:column="30">(<pos:position pos:line="87" pos:column="31"/></operator>struct <name pos:line="87" pos:column="38">commit<pos:position pos:line="87" pos:column="44"/></name> <operator pos:line="87" pos:column="45">*<pos:position pos:line="87" pos:column="46"/></operator><operator pos:line="87" pos:column="46">)<pos:position pos:line="87" pos:column="47"/></operator><name pos:line="87" pos:column="47">new_object<pos:position pos:line="87" pos:column="57"/></name></expr>;<pos:position pos:line="87" pos:column="58"/></expr_stmt>
		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><operator pos:line="88" pos:column="21">!<pos:position pos:line="88" pos:column="22"/></operator><call><name pos:line="88" pos:column="22">in_merge_bases<pos:position pos:line="88" pos:column="36"/></name><argument_list pos:line="88" pos:column="36">(<argument><expr><name pos:line="88" pos:column="37">old_commit<pos:position pos:line="88" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="49">new_commit<pos:position pos:line="88" pos:column="59"/></name></expr></argument>)<pos:position pos:line="88" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="61"/></condition><then pos:line="88" pos:column="61"> <block pos:line="88" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="89" pos:column="25">rp_error<pos:position pos:line="89" pos:column="33"/></name><argument_list pos:line="89" pos:column="33">(<argument><expr><literal type="string" pos:line="89" pos:column="34">"denying non-fast-forward %s"<pos:position pos:line="89" pos:column="63"/></literal>
				 <literal type="string" pos:line="90" pos:column="34">" (you should pull first)"<pos:position pos:line="90" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="62">name<pos:position pos:line="90" pos:column="66"/></name></expr></argument>)<pos:position pos:line="90" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="68"/></expr_stmt>
			<return pos:line="91" pos:column="25">return <expr><literal type="string" pos:line="91" pos:column="32">"non-fast-forward"<pos:position pos:line="91" pos:column="50"/></literal></expr>;<pos:position pos:line="91" pos:column="51"/></return>
		}<pos:position pos:line="92" pos:column="18"/></block></then></if>
	}<pos:position pos:line="93" pos:column="10"/></block></then></if>
	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><call><name pos:line="94" pos:column="13">run_update_hook<pos:position pos:line="94" pos:column="28"/></name><argument_list pos:line="94" pos:column="28">(<argument><expr><name pos:line="94" pos:column="29">cmd<pos:position pos:line="94" pos:column="32"/></name></expr></argument>)<pos:position pos:line="94" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="34"/></condition><then pos:line="94" pos:column="34"> <block pos:line="94" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="95" pos:column="17">rp_error<pos:position pos:line="95" pos:column="25"/></name><argument_list pos:line="95" pos:column="25">(<argument><expr><literal type="string" pos:line="95" pos:column="26">"hook declined to update %s"<pos:position pos:line="95" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="56">name<pos:position pos:line="95" pos:column="60"/></name></expr></argument>)<pos:position pos:line="95" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="62"/></expr_stmt>
		<return pos:line="96" pos:column="17">return <expr><literal type="string" pos:line="96" pos:column="24">"hook declined"<pos:position pos:line="96" pos:column="39"/></literal></expr>;<pos:position pos:line="96" pos:column="40"/></return>
	}<pos:position pos:line="97" pos:column="10"/></block></then></if>

	<if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><call><name pos:line="99" pos:column="13">is_null_sha1<pos:position pos:line="99" pos:column="25"/></name><argument_list pos:line="99" pos:column="25">(<argument><expr><name pos:line="99" pos:column="26">new_sha1<pos:position pos:line="99" pos:column="34"/></name></expr></argument>)<pos:position pos:line="99" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="36"/></condition><then pos:line="99" pos:column="36"> <block pos:line="99" pos:column="37">{
		<decl_stmt><decl><type><name><name pos:line="100" pos:column="17">struct<pos:position pos:line="100" pos:column="23"/></name> <name pos:line="100" pos:column="24">strbuf<pos:position pos:line="100" pos:column="30"/></name></name></type> <name pos:line="100" pos:column="31">err<pos:position pos:line="100" pos:column="34"/></name> <init pos:line="100" pos:column="35">= <expr><name pos:line="100" pos:column="37">STRBUF_INIT<pos:position pos:line="100" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="100" pos:column="49"/></decl_stmt>
		<if pos:line="101" pos:column="17">if <condition pos:line="101" pos:column="20">(<expr><operator pos:line="101" pos:column="21">!<pos:position pos:line="101" pos:column="22"/></operator><call><name pos:line="101" pos:column="22">parse_object<pos:position pos:line="101" pos:column="34"/></name><argument_list pos:line="101" pos:column="34">(<argument><expr><name pos:line="101" pos:column="35">old_sha1<pos:position pos:line="101" pos:column="43"/></name></expr></argument>)<pos:position pos:line="101" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="101" pos:column="45"/></condition><then pos:line="101" pos:column="45"> <block pos:line="101" pos:column="46">{
			<expr_stmt><expr><name pos:line="102" pos:column="25">old_sha1<pos:position pos:line="102" pos:column="33"/></name> <operator pos:line="102" pos:column="34">=<pos:position pos:line="102" pos:column="35"/></operator> <name pos:line="102" pos:column="36">NULL<pos:position pos:line="102" pos:column="40"/></name></expr>;<pos:position pos:line="102" pos:column="41"/></expr_stmt>
			<if pos:line="103" pos:column="25">if <condition pos:line="103" pos:column="28">(<expr><call><name pos:line="103" pos:column="29">ref_exists<pos:position pos:line="103" pos:column="39"/></name><argument_list pos:line="103" pos:column="39">(<argument><expr><name pos:line="103" pos:column="40">name<pos:position pos:line="103" pos:column="44"/></name></expr></argument>)<pos:position pos:line="103" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="103" pos:column="46"/></condition><then pos:line="103" pos:column="46"> <block pos:line="103" pos:column="47">{
				<expr_stmt><expr><call><name pos:line="104" pos:column="33">rp_warning<pos:position pos:line="104" pos:column="43"/></name><argument_list pos:line="104" pos:column="43">(<argument><expr><literal type="string" pos:line="104" pos:column="44">"Allowing deletion of corrupt ref."<pos:position pos:line="104" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="81"/></expr_stmt>
			}<pos:position pos:line="105" pos:column="26"/></block></then> <else pos:line="105" pos:column="27">else <block pos:line="105" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="106" pos:column="33">rp_warning<pos:position pos:line="106" pos:column="43"/></name><argument_list pos:line="106" pos:column="43">(<argument><expr><literal type="string" pos:line="106" pos:column="44">"Deleting a non-existent ref."<pos:position pos:line="106" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="76"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="107" pos:column="33">cmd<pos:position pos:line="107" pos:column="36"/></name><operator pos:line="107" pos:column="36">-&gt;<pos:position pos:line="107" pos:column="41"/></operator><name pos:line="107" pos:column="38">did_not_exist<pos:position pos:line="107" pos:column="51"/></name></name> <operator pos:line="107" pos:column="52">=<pos:position pos:line="107" pos:column="53"/></operator> <literal type="number" pos:line="107" pos:column="54">1<pos:position pos:line="107" pos:column="55"/></literal></expr>;<pos:position pos:line="107" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="108" pos:column="26"/></block></else></if>
		}<pos:position pos:line="109" pos:column="18"/></block></then></if>
		<if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><call><name pos:line="110" pos:column="21">ref_transaction_delete<pos:position pos:line="110" pos:column="43"/></name><argument_list pos:line="110" pos:column="43">(<argument><expr><name pos:line="110" pos:column="44">transaction<pos:position pos:line="110" pos:column="55"/></name></expr></argument>,
					   <argument><expr><name pos:line="111" pos:column="44">namespaced_name<pos:position pos:line="111" pos:column="59"/></name></expr></argument>,
					   <argument><expr><name pos:line="112" pos:column="44">old_sha1<pos:position pos:line="112" pos:column="52"/></name></expr></argument>,
					   <argument><expr><literal type="number" pos:line="113" pos:column="44">0<pos:position pos:line="113" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="47">"push"<pos:position pos:line="113" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="113" pos:column="55">&amp;<pos:position pos:line="113" pos:column="60"/></operator><name pos:line="113" pos:column="56">err<pos:position pos:line="113" pos:column="59"/></name></expr></argument>)<pos:position pos:line="113" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="113" pos:column="61"/></condition><then pos:line="113" pos:column="61"> <block pos:line="113" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="114" pos:column="25">rp_error<pos:position pos:line="114" pos:column="33"/></name><argument_list pos:line="114" pos:column="33">(<argument><expr><literal type="string" pos:line="114" pos:column="34">"%s"<pos:position pos:line="114" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="40">err<pos:position pos:line="114" pos:column="43"/></name><operator pos:line="114" pos:column="43">.<pos:position pos:line="114" pos:column="44"/></operator><name pos:line="114" pos:column="44">buf<pos:position pos:line="114" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="114" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="115" pos:column="25">strbuf_release<pos:position pos:line="115" pos:column="39"/></name><argument_list pos:line="115" pos:column="39">(<argument><expr><operator pos:line="115" pos:column="40">&amp;<pos:position pos:line="115" pos:column="45"/></operator><name pos:line="115" pos:column="41">err<pos:position pos:line="115" pos:column="44"/></name></expr></argument>)<pos:position pos:line="115" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="46"/></expr_stmt>
			<return pos:line="116" pos:column="25">return <expr><literal type="string" pos:line="116" pos:column="32">"failed to delete"<pos:position pos:line="116" pos:column="50"/></literal></expr>;<pos:position pos:line="116" pos:column="51"/></return>
		}<pos:position pos:line="117" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="118" pos:column="17">strbuf_release<pos:position pos:line="118" pos:column="31"/></name><argument_list pos:line="118" pos:column="31">(<argument><expr><operator pos:line="118" pos:column="32">&amp;<pos:position pos:line="118" pos:column="37"/></operator><name pos:line="118" pos:column="33">err<pos:position pos:line="118" pos:column="36"/></name></expr></argument>)<pos:position pos:line="118" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="38"/></expr_stmt>
		<return pos:line="119" pos:column="17">return <expr><name pos:line="119" pos:column="24">NULL<pos:position pos:line="119" pos:column="28"/></name></expr>;<pos:position pos:line="119" pos:column="29"/></return> <comment type="block" pos:line="119" pos:column="30">/* good */</comment>
	}<pos:position pos:line="120" pos:column="10"/></block></then>
	<else pos:line="121" pos:column="9">else <block pos:line="121" pos:column="14">{
		<decl_stmt><decl><type><name><name pos:line="122" pos:column="17">struct<pos:position pos:line="122" pos:column="23"/></name> <name pos:line="122" pos:column="24">strbuf<pos:position pos:line="122" pos:column="30"/></name></name></type> <name pos:line="122" pos:column="31">err<pos:position pos:line="122" pos:column="34"/></name> <init pos:line="122" pos:column="35">= <expr><name pos:line="122" pos:column="37">STRBUF_INIT<pos:position pos:line="122" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="122" pos:column="49"/></decl_stmt>
		<if pos:line="123" pos:column="17">if <condition pos:line="123" pos:column="20">(<expr><name pos:line="123" pos:column="21">shallow_update<pos:position pos:line="123" pos:column="35"/></name> <operator pos:line="123" pos:column="36">&amp;&amp;<pos:position pos:line="123" pos:column="46"/></operator> <name><name pos:line="123" pos:column="39">si<pos:position pos:line="123" pos:column="41"/></name><operator pos:line="123" pos:column="41">-&gt;<pos:position pos:line="123" pos:column="46"/></operator><name pos:line="123" pos:column="43">shallow_ref<pos:position pos:line="123" pos:column="54"/></name><index pos:line="123" pos:column="54">[<expr><name><name pos:line="123" pos:column="55">cmd<pos:position pos:line="123" pos:column="58"/></name><operator pos:line="123" pos:column="58">-&gt;<pos:position pos:line="123" pos:column="63"/></operator><name pos:line="123" pos:column="60">index<pos:position pos:line="123" pos:column="65"/></name></name></expr>]<pos:position pos:line="123" pos:column="66"/></index></name> <operator pos:line="123" pos:column="67">&amp;&amp;<pos:position pos:line="123" pos:column="77"/></operator>
		    <call><name pos:line="124" pos:column="21">update_shallow_ref<pos:position pos:line="124" pos:column="39"/></name><argument_list pos:line="124" pos:column="39">(<argument><expr><name pos:line="124" pos:column="40">cmd<pos:position pos:line="124" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="45">si<pos:position pos:line="124" pos:column="47"/></name></expr></argument>)<pos:position pos:line="124" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="124" pos:column="49"/></condition><then pos:line="124" pos:column="49">
			<block type="pseudo"><return pos:line="125" pos:column="25">return <expr><literal type="string" pos:line="125" pos:column="32">"shallow error"<pos:position pos:line="125" pos:column="47"/></literal></expr>;<pos:position pos:line="125" pos:column="48"/></return></block></then></if>

		<if pos:line="127" pos:column="17">if <condition pos:line="127" pos:column="20">(<expr><call><name pos:line="127" pos:column="21">ref_transaction_update<pos:position pos:line="127" pos:column="43"/></name><argument_list pos:line="127" pos:column="43">(<argument><expr><name pos:line="127" pos:column="44">transaction<pos:position pos:line="127" pos:column="55"/></name></expr></argument>,
					   <argument><expr><name pos:line="128" pos:column="44">namespaced_name<pos:position pos:line="128" pos:column="59"/></name></expr></argument>,
					   <argument><expr><name pos:line="129" pos:column="44">new_sha1<pos:position pos:line="129" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="54">old_sha1<pos:position pos:line="129" pos:column="62"/></name></expr></argument>,
					   <argument><expr><literal type="number" pos:line="130" pos:column="44">0<pos:position pos:line="130" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="130" pos:column="47">"push"<pos:position pos:line="130" pos:column="53"/></literal></expr></argument>,
					   <argument><expr><operator pos:line="131" pos:column="44">&amp;<pos:position pos:line="131" pos:column="49"/></operator><name pos:line="131" pos:column="45">err<pos:position pos:line="131" pos:column="48"/></name></expr></argument>)<pos:position pos:line="131" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="131" pos:column="50"/></condition><then pos:line="131" pos:column="50"> <block pos:line="131" pos:column="51">{
			<expr_stmt><expr><call><name pos:line="132" pos:column="25">rp_error<pos:position pos:line="132" pos:column="33"/></name><argument_list pos:line="132" pos:column="33">(<argument><expr><literal type="string" pos:line="132" pos:column="34">"%s"<pos:position pos:line="132" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="132" pos:column="40">err<pos:position pos:line="132" pos:column="43"/></name><operator pos:line="132" pos:column="43">.<pos:position pos:line="132" pos:column="44"/></operator><name pos:line="132" pos:column="44">buf<pos:position pos:line="132" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="132" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="133" pos:column="25">strbuf_release<pos:position pos:line="133" pos:column="39"/></name><argument_list pos:line="133" pos:column="39">(<argument><expr><operator pos:line="133" pos:column="40">&amp;<pos:position pos:line="133" pos:column="45"/></operator><name pos:line="133" pos:column="41">err<pos:position pos:line="133" pos:column="44"/></name></expr></argument>)<pos:position pos:line="133" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="46"/></expr_stmt>

			<return pos:line="135" pos:column="25">return <expr><literal type="string" pos:line="135" pos:column="32">"failed to update ref"<pos:position pos:line="135" pos:column="54"/></literal></expr>;<pos:position pos:line="135" pos:column="55"/></return>
		}<pos:position pos:line="136" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="137" pos:column="17">strbuf_release<pos:position pos:line="137" pos:column="31"/></name><argument_list pos:line="137" pos:column="31">(<argument><expr><operator pos:line="137" pos:column="32">&amp;<pos:position pos:line="137" pos:column="37"/></operator><name pos:line="137" pos:column="33">err<pos:position pos:line="137" pos:column="36"/></name></expr></argument>)<pos:position pos:line="137" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="38"/></expr_stmt>

		<return pos:line="139" pos:column="17">return <expr><name pos:line="139" pos:column="24">NULL<pos:position pos:line="139" pos:column="28"/></name></expr>;<pos:position pos:line="139" pos:column="29"/></return> <comment type="block" pos:line="139" pos:column="30">/* good */</comment>
	}<pos:position pos:line="140" pos:column="10"/></block></else></if>
}<pos:position pos:line="141" pos:column="2"/></block></function></unit>
