<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1180_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">emit_hunk_header<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">emit_callback<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">ecbdata<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">line<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">int<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">len<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">context<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><call><name pos:line="4" pos:column="31">diff_get_color<pos:position pos:line="4" pos:column="45"/></name><argument_list pos:line="4" pos:column="45">(<argument><expr><name><name pos:line="4" pos:column="46">ecbdata<pos:position pos:line="4" pos:column="53"/></name><operator pos:line="4" pos:column="53">-&gt;<pos:position pos:line="4" pos:column="58"/></operator><name pos:line="4" pos:column="55">color_diff<pos:position pos:line="4" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="67">DIFF_CONTEXT<pos:position pos:line="4" pos:column="79"/></name></expr></argument>)<pos:position pos:line="4" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="81"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">frag<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><call><name pos:line="5" pos:column="28">diff_get_color<pos:position pos:line="5" pos:column="42"/></name><argument_list pos:line="5" pos:column="42">(<argument><expr><name><name pos:line="5" pos:column="43">ecbdata<pos:position pos:line="5" pos:column="50"/></name><operator pos:line="5" pos:column="50">-&gt;<pos:position pos:line="5" pos:column="55"/></operator><name pos:line="5" pos:column="52">color_diff<pos:position pos:line="5" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="64">DIFF_FRAGINFO<pos:position pos:line="5" pos:column="77"/></name></expr></argument>)<pos:position pos:line="5" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="79"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">func<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><call><name pos:line="6" pos:column="28">diff_get_color<pos:position pos:line="6" pos:column="42"/></name><argument_list pos:line="6" pos:column="42">(<argument><expr><name><name pos:line="6" pos:column="43">ecbdata<pos:position pos:line="6" pos:column="50"/></name><operator pos:line="6" pos:column="50">-&gt;<pos:position pos:line="6" pos:column="55"/></operator><name pos:line="6" pos:column="52">color_diff<pos:position pos:line="6" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="64">DIFF_FUNCINFO<pos:position pos:line="6" pos:column="77"/></name></expr></argument>)<pos:position pos:line="6" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="79"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">reset<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><call><name pos:line="7" pos:column="29">diff_get_color<pos:position pos:line="7" pos:column="43"/></name><argument_list pos:line="7" pos:column="43">(<argument><expr><name><name pos:line="7" pos:column="44">ecbdata<pos:position pos:line="7" pos:column="51"/></name><operator pos:line="7" pos:column="51">-&gt;<pos:position pos:line="7" pos:column="56"/></operator><name pos:line="7" pos:column="53">color_diff<pos:position pos:line="7" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="65">DIFF_RESET<pos:position pos:line="7" pos:column="75"/></name></expr></argument>)<pos:position pos:line="7" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="77"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="8" pos:column="9">static<pos:position pos:line="8" pos:column="15"/></specifier> <type><specifier pos:line="8" pos:column="16">const<pos:position pos:line="8" pos:column="21"/></specifier> <name pos:line="8" pos:column="22">char<pos:position pos:line="8" pos:column="26"/></name></type> <name><name pos:line="8" pos:column="27">atat<pos:position pos:line="8" pos:column="31"/></name><index pos:line="8" pos:column="31">[<expr><literal type="number" pos:line="8" pos:column="32">2<pos:position pos:line="8" pos:column="33"/></literal></expr>]<pos:position pos:line="8" pos:column="34"/></index></name> <init pos:line="8" pos:column="35">= <expr><block pos:line="8" pos:column="37">{ <expr><literal type="char" pos:line="8" pos:column="39">'@'<pos:position pos:line="8" pos:column="42"/></literal></expr>, <expr><literal type="char" pos:line="8" pos:column="44">'@'<pos:position pos:line="8" pos:column="47"/></literal></expr> }<pos:position pos:line="8" pos:column="49"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">cp<pos:position pos:line="9" pos:column="23"/></name></decl>, <modifier pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="26">ep<pos:position pos:line="9" pos:column="28"/></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">strbuf<pos:position pos:line="10" pos:column="22"/></name></name></type> <name pos:line="10" pos:column="23">msgbuf<pos:position pos:line="10" pos:column="29"/></name> <init pos:line="10" pos:column="30">= <expr><name pos:line="10" pos:column="32">STRBUF_INIT<pos:position pos:line="10" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">org_len<pos:position pos:line="11" pos:column="20"/></name> <init pos:line="11" pos:column="21">= <expr><name pos:line="11" pos:column="23">len<pos:position pos:line="11" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">i<pos:position pos:line="12" pos:column="14"/></name> <init pos:line="12" pos:column="15">= <expr><literal type="number" pos:line="12" pos:column="17">1<pos:position pos:line="12" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>

	<comment type="block" pos:line="14" pos:column="9">/*
	 * As a hunk header must begin with "@@ -&lt;old&gt;, +&lt;new&gt; @@",
	 * it always is at least 10 bytes long.
	 */</comment>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">len<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">&lt;<pos:position pos:line="18" pos:column="21"/></operator> <literal type="number" pos:line="18" pos:column="19">10<pos:position pos:line="18" pos:column="21"/></literal> <operator pos:line="18" pos:column="22">||<pos:position pos:line="18" pos:column="24"/></operator>
	    <call><name pos:line="19" pos:column="13">memcmp<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">line<pos:position pos:line="19" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="26">atat<pos:position pos:line="19" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="32">2<pos:position pos:line="19" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call> <operator pos:line="19" pos:column="35">||<pos:position pos:line="19" pos:column="37"/></operator>
	    <operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><operator pos:line="20" pos:column="14">(<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">ep<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <call><name pos:line="20" pos:column="20">memmem<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">line<pos:position pos:line="20" pos:column="31"/></name> <operator pos:line="20" pos:column="32">+<pos:position pos:line="20" pos:column="33"/></operator> <literal type="number" pos:line="20" pos:column="34">2<pos:position pos:line="20" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">len<pos:position pos:line="20" pos:column="40"/></name> <operator pos:line="20" pos:column="41">-<pos:position pos:line="20" pos:column="42"/></operator> <literal type="number" pos:line="20" pos:column="43">2<pos:position pos:line="20" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="46">atat<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="52">2<pos:position pos:line="20" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call><operator pos:line="20" pos:column="54">)<pos:position pos:line="20" pos:column="55"/></operator></expr>)<pos:position pos:line="20" pos:column="56"/></condition><then pos:line="20" pos:column="56"> <block pos:line="20" pos:column="57">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">emit_line<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name><name pos:line="21" pos:column="27">ecbdata<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-&gt;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="36">opt<pos:position pos:line="21" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="41">context<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">reset<pos:position pos:line="21" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="57">line<pos:position pos:line="21" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="63">len<pos:position pos:line="21" pos:column="66"/></name></expr></argument>)<pos:position pos:line="21" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="68"/></expr_stmt>
		<return pos:line="22" pos:column="17">return;<pos:position pos:line="22" pos:column="24"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="24" pos:column="9">ep<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">+=<pos:position pos:line="24" pos:column="14"/></operator> <literal type="number" pos:line="24" pos:column="15">2<pos:position pos:line="24" pos:column="16"/></literal></expr>;<pos:position pos:line="24" pos:column="17"/></expr_stmt> <comment type="block" pos:line="24" pos:column="18">/* skip over @@ */</comment>

	<comment type="block" pos:line="26" pos:column="9">/* The hunk header in fraginfo color */</comment>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">strbuf_addstr<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><operator pos:line="27" pos:column="23">&amp;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="24">msgbuf<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="32">frag<pos:position pos:line="27" pos:column="36"/></name></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">strbuf_add<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><operator pos:line="28" pos:column="20">&amp;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="21">msgbuf<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">line<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="35">ep<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">-<pos:position pos:line="28" pos:column="39"/></operator> <name pos:line="28" pos:column="40">line<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">strbuf_addstr<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><operator pos:line="29" pos:column="23">&amp;<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="24">msgbuf<pos:position pos:line="29" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="32">reset<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>

	<comment type="block" pos:line="31" pos:column="9">/*
	 * trailing "\r\n"
	 */</comment>
	<for pos:line="34" pos:column="9">for <control pos:line="34" pos:column="13">( <init pos:line="34" pos:column="15">;<pos:position pos:line="34" pos:column="16"/></init> <condition><expr><name pos:line="34" pos:column="17">i<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">&lt;<pos:position pos:line="34" pos:column="23"/></operator> <literal type="number" pos:line="34" pos:column="21">3<pos:position pos:line="34" pos:column="22"/></literal></expr>;<pos:position pos:line="34" pos:column="23"/></condition> <incr><expr><name pos:line="34" pos:column="24">i<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">++<pos:position pos:line="34" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="28"/></control>
		<block type="pseudo"><if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name><name pos:line="35" pos:column="21">line<pos:position pos:line="35" pos:column="25"/></name><index pos:line="35" pos:column="25">[<expr><name pos:line="35" pos:column="26">len<pos:position pos:line="35" pos:column="29"/></name> <operator pos:line="35" pos:column="30">-<pos:position pos:line="35" pos:column="31"/></operator> <name pos:line="35" pos:column="32">i<pos:position pos:line="35" pos:column="33"/></name></expr>]<pos:position pos:line="35" pos:column="34"/></index></name> <operator pos:line="35" pos:column="35">==<pos:position pos:line="35" pos:column="37"/></operator> <literal type="char" pos:line="35" pos:column="38">'\r'<pos:position pos:line="35" pos:column="42"/></literal> <operator pos:line="35" pos:column="43">||<pos:position pos:line="35" pos:column="45"/></operator> <name><name pos:line="35" pos:column="46">line<pos:position pos:line="35" pos:column="50"/></name><index pos:line="35" pos:column="50">[<expr><name pos:line="35" pos:column="51">len<pos:position pos:line="35" pos:column="54"/></name> <operator pos:line="35" pos:column="55">-<pos:position pos:line="35" pos:column="56"/></operator> <name pos:line="35" pos:column="57">i<pos:position pos:line="35" pos:column="58"/></name></expr>]<pos:position pos:line="35" pos:column="59"/></index></name> <operator pos:line="35" pos:column="60">==<pos:position pos:line="35" pos:column="62"/></operator> <literal type="char" pos:line="35" pos:column="63">'\n'<pos:position pos:line="35" pos:column="67"/></literal></expr>)<pos:position pos:line="35" pos:column="68"/></condition><then pos:line="35" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="25">len<pos:position pos:line="36" pos:column="28"/></name><operator pos:line="36" pos:column="28">--<pos:position pos:line="36" pos:column="30"/></operator></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt></block></then></if></block></for>

	<comment type="block" pos:line="38" pos:column="9">/* blank before the func header */</comment>
	<for pos:line="39" pos:column="9">for <control pos:line="39" pos:column="13">(<init><expr><name pos:line="39" pos:column="14">cp<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">=<pos:position pos:line="39" pos:column="18"/></operator> <name pos:line="39" pos:column="19">ep<pos:position pos:line="39" pos:column="21"/></name></expr>;<pos:position pos:line="39" pos:column="22"/></init> <condition><expr><name pos:line="39" pos:column="23">ep<pos:position pos:line="39" pos:column="25"/></name> <operator pos:line="39" pos:column="26">-<pos:position pos:line="39" pos:column="27"/></operator> <name pos:line="39" pos:column="28">line<pos:position pos:line="39" pos:column="32"/></name> <operator pos:line="39" pos:column="33">&lt;<pos:position pos:line="39" pos:column="37"/></operator> <name pos:line="39" pos:column="35">len<pos:position pos:line="39" pos:column="38"/></name></expr>;<pos:position pos:line="39" pos:column="39"/></condition> <incr><expr><name pos:line="39" pos:column="40">ep<pos:position pos:line="39" pos:column="42"/></name><operator pos:line="39" pos:column="42">++<pos:position pos:line="39" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="39" pos:column="45"/></control>
		<block type="pseudo"><if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">*<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="22">ep<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">!=<pos:position pos:line="40" pos:column="27"/></operator> <literal type="char" pos:line="40" pos:column="28">' '<pos:position pos:line="40" pos:column="31"/></literal> <operator pos:line="40" pos:column="32">&amp;&amp;<pos:position pos:line="40" pos:column="42"/></operator> <operator pos:line="40" pos:column="35">*<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="36">ep<pos:position pos:line="40" pos:column="38"/></name> <operator pos:line="40" pos:column="39">!=<pos:position pos:line="40" pos:column="41"/></operator> <literal type="char" pos:line="40" pos:column="42">'\t'<pos:position pos:line="40" pos:column="46"/></literal></expr>)<pos:position pos:line="40" pos:column="47"/></condition><then pos:line="40" pos:column="47">
			<block type="pseudo"><break pos:line="41" pos:column="25">break;<pos:position pos:line="41" pos:column="31"/></break></block></then></if></block></for>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">ep<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">!=<pos:position pos:line="42" pos:column="18"/></operator> <name pos:line="42" pos:column="19">cp<pos:position pos:line="42" pos:column="21"/></name></expr>)<pos:position pos:line="42" pos:column="22"/></condition><then pos:line="42" pos:column="22"> <block pos:line="42" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">strbuf_addstr<pos:position pos:line="43" pos:column="30"/></name><argument_list pos:line="43" pos:column="30">(<argument><expr><operator pos:line="43" pos:column="31">&amp;<pos:position pos:line="43" pos:column="36"/></operator><name pos:line="43" pos:column="32">msgbuf<pos:position pos:line="43" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="40">context<pos:position pos:line="43" pos:column="47"/></name></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">strbuf_add<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><operator pos:line="44" pos:column="28">&amp;<pos:position pos:line="44" pos:column="33"/></operator><name pos:line="44" pos:column="29">msgbuf<pos:position pos:line="44" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="37">cp<pos:position pos:line="44" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="41">ep<pos:position pos:line="44" pos:column="43"/></name> <operator pos:line="44" pos:column="44">-<pos:position pos:line="44" pos:column="45"/></operator> <name pos:line="44" pos:column="46">cp<pos:position pos:line="44" pos:column="48"/></name></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">strbuf_addstr<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><operator pos:line="45" pos:column="31">&amp;<pos:position pos:line="45" pos:column="36"/></operator><name pos:line="45" pos:column="32">msgbuf<pos:position pos:line="45" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="40">reset<pos:position pos:line="45" pos:column="45"/></name></expr></argument>)<pos:position pos:line="45" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>

	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">ep<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">&lt;<pos:position pos:line="48" pos:column="20"/></operator> <name pos:line="48" pos:column="18">line<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">+<pos:position pos:line="48" pos:column="24"/></operator> <name pos:line="48" pos:column="25">len<pos:position pos:line="48" pos:column="28"/></name></expr>)<pos:position pos:line="48" pos:column="29"/></condition><then pos:line="48" pos:column="29"> <block pos:line="48" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">strbuf_addstr<pos:position pos:line="49" pos:column="30"/></name><argument_list pos:line="49" pos:column="30">(<argument><expr><operator pos:line="49" pos:column="31">&amp;<pos:position pos:line="49" pos:column="36"/></operator><name pos:line="49" pos:column="32">msgbuf<pos:position pos:line="49" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="40">func<pos:position pos:line="49" pos:column="44"/></name></expr></argument>)<pos:position pos:line="49" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">strbuf_add<pos:position pos:line="50" pos:column="27"/></name><argument_list pos:line="50" pos:column="27">(<argument><expr><operator pos:line="50" pos:column="28">&amp;<pos:position pos:line="50" pos:column="33"/></operator><name pos:line="50" pos:column="29">msgbuf<pos:position pos:line="50" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="37">ep<pos:position pos:line="50" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="41">line<pos:position pos:line="50" pos:column="45"/></name> <operator pos:line="50" pos:column="46">+<pos:position pos:line="50" pos:column="47"/></operator> <name pos:line="50" pos:column="48">len<pos:position pos:line="50" pos:column="51"/></name> <operator pos:line="50" pos:column="52">-<pos:position pos:line="50" pos:column="53"/></operator> <name pos:line="50" pos:column="54">ep<pos:position pos:line="50" pos:column="56"/></name></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">strbuf_addstr<pos:position pos:line="51" pos:column="30"/></name><argument_list pos:line="51" pos:column="30">(<argument><expr><operator pos:line="51" pos:column="31">&amp;<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="32">msgbuf<pos:position pos:line="51" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="40">reset<pos:position pos:line="51" pos:column="45"/></name></expr></argument>)<pos:position pos:line="51" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="54" pos:column="9">strbuf_add<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><operator pos:line="54" pos:column="20">&amp;<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="21">msgbuf<pos:position pos:line="54" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="29">line<pos:position pos:line="54" pos:column="33"/></name> <operator pos:line="54" pos:column="34">+<pos:position pos:line="54" pos:column="35"/></operator> <name pos:line="54" pos:column="36">len<pos:position pos:line="54" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="41">org_len<pos:position pos:line="54" pos:column="48"/></name> <operator pos:line="54" pos:column="49">-<pos:position pos:line="54" pos:column="50"/></operator> <name pos:line="54" pos:column="51">len<pos:position pos:line="54" pos:column="54"/></name></expr></argument>)<pos:position pos:line="54" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">emit_line<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name><name pos:line="55" pos:column="19">ecbdata<pos:position pos:line="55" pos:column="26"/></name><operator pos:line="55" pos:column="26">-&gt;<pos:position pos:line="55" pos:column="31"/></operator><name pos:line="55" pos:column="28">opt<pos:position pos:line="55" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="33">""<pos:position pos:line="55" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="37">""<pos:position pos:line="55" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="41">msgbuf<pos:position pos:line="55" pos:column="47"/></name><operator pos:line="55" pos:column="47">.<pos:position pos:line="55" pos:column="48"/></operator><name pos:line="55" pos:column="48">buf<pos:position pos:line="55" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="53">msgbuf<pos:position pos:line="55" pos:column="59"/></name><operator pos:line="55" pos:column="59">.<pos:position pos:line="55" pos:column="60"/></operator><name pos:line="55" pos:column="60">len<pos:position pos:line="55" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="56" pos:column="9">strbuf_release<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><operator pos:line="56" pos:column="24">&amp;<pos:position pos:line="56" pos:column="29"/></operator><name pos:line="56" pos:column="25">msgbuf<pos:position pos:line="56" pos:column="31"/></name></expr></argument>)<pos:position pos:line="56" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="33"/></expr_stmt>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
