<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1128_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">wt_status_get_state<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">wt_status_state<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">state<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="2" pos:column="26">int<pos:position pos:line="2" pos:column="29"/></name></type> <name pos:line="2" pos:column="30">get_detached_from<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">stat<pos:position pos:line="4" pos:column="20"/></name></name></type> <name pos:line="4" pos:column="21">st<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">object_id<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">oid<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><call><name pos:line="7" pos:column="14">stat<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><call><name pos:line="7" pos:column="19">git_path_merge_head<pos:position pos:line="7" pos:column="38"/></name><argument_list pos:line="7" pos:column="38">()<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="7" pos:column="42">&amp;<pos:position pos:line="7" pos:column="47"/></operator><name pos:line="7" pos:column="43">st<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="47"/></condition><then pos:line="7" pos:column="47"> <block pos:line="7" pos:column="48">{
		<expr_stmt><expr><name><name pos:line="8" pos:column="17">state<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">-&gt;<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="24">merge_in_progress<pos:position pos:line="8" pos:column="41"/></name></name> <operator pos:line="8" pos:column="42">=<pos:position pos:line="8" pos:column="43"/></operator> <literal type="number" pos:line="8" pos:column="44">1<pos:position pos:line="8" pos:column="45"/></literal></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></then> <elseif pos:line="9" pos:column="11">else <if pos:line="9" pos:column="16">if <condition pos:line="9" pos:column="19">(<expr><call><name pos:line="9" pos:column="20">wt_status_check_rebase<pos:position pos:line="9" pos:column="42"/></name><argument_list pos:line="9" pos:column="42">(<argument><expr><name pos:line="9" pos:column="43">NULL<pos:position pos:line="9" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="49">state<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="56"/></condition><then pos:line="9" pos:column="56"> <block pos:line="9" pos:column="57">{
		<empty_stmt pos:line="10" pos:column="17">;<pos:position pos:line="10" pos:column="18"/></empty_stmt>		<comment type="block" pos:line="10" pos:column="33">/* all set */</comment>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if></elseif> <elseif pos:line="11" pos:column="11">else <if pos:line="11" pos:column="16">if <condition pos:line="11" pos:column="19">(<expr><operator pos:line="11" pos:column="20">!<pos:position pos:line="11" pos:column="21"/></operator><call><name pos:line="11" pos:column="21">stat<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><call><name pos:line="11" pos:column="26">git_path_cherry_pick_head<pos:position pos:line="11" pos:column="51"/></name><argument_list pos:line="11" pos:column="51">()<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="11" pos:column="55">&amp;<pos:position pos:line="11" pos:column="60"/></operator><name pos:line="11" pos:column="56">st<pos:position pos:line="11" pos:column="58"/></name></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call> <operator pos:line="11" pos:column="60">&amp;&amp;<pos:position pos:line="11" pos:column="70"/></operator>
			<operator pos:line="12" pos:column="25">!<pos:position pos:line="12" pos:column="26"/></operator><call><name pos:line="12" pos:column="26">get_oid<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><literal type="string" pos:line="12" pos:column="34">"CHERRY_PICK_HEAD"<pos:position pos:line="12" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="54">&amp;<pos:position pos:line="12" pos:column="59"/></operator><name pos:line="12" pos:column="55">oid<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="60"/></condition><then pos:line="12" pos:column="60"> <block pos:line="12" pos:column="61">{
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">state<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">-&gt;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="24">cherry_pick_in_progress<pos:position pos:line="13" pos:column="47"/></name></name> <operator pos:line="13" pos:column="48">=<pos:position pos:line="13" pos:column="49"/></operator> <literal type="number" pos:line="13" pos:column="50">1<pos:position pos:line="13" pos:column="51"/></literal></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">hashcpy<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name><name pos:line="14" pos:column="25">state<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">-&gt;<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="32">cherry_pick_head_sha1<pos:position pos:line="14" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="55">oid<pos:position pos:line="14" pos:column="58"/></name><operator pos:line="14" pos:column="58">.<pos:position pos:line="14" pos:column="59"/></operator><name pos:line="14" pos:column="59">hash<pos:position pos:line="14" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="65"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if></elseif></if>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">wt_status_check_bisect<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">NULL<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">state<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><call><name pos:line="17" pos:column="14">stat<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><call><name pos:line="17" pos:column="19">git_path_revert_head<pos:position pos:line="17" pos:column="39"/></name><argument_list pos:line="17" pos:column="39">()<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="17" pos:column="43">&amp;<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="44">st<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call> <operator pos:line="17" pos:column="48">&amp;&amp;<pos:position pos:line="17" pos:column="58"/></operator>
	    <operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><call><name pos:line="18" pos:column="14">get_oid<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><literal type="string" pos:line="18" pos:column="22">"REVERT_HEAD"<pos:position pos:line="18" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="37">&amp;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="38">oid<pos:position pos:line="18" pos:column="41"/></name></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43"> <block pos:line="18" pos:column="44">{
		<expr_stmt><expr><name><name pos:line="19" pos:column="17">state<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">-&gt;<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="24">revert_in_progress<pos:position pos:line="19" pos:column="42"/></name></name> <operator pos:line="19" pos:column="43">=<pos:position pos:line="19" pos:column="44"/></operator> <literal type="number" pos:line="19" pos:column="45">1<pos:position pos:line="19" pos:column="46"/></literal></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">hashcpy<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name><name pos:line="20" pos:column="25">state<pos:position pos:line="20" pos:column="30"/></name><operator pos:line="20" pos:column="30">-&gt;<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="32">revert_head_sha1<pos:position pos:line="20" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="50">oid<pos:position pos:line="20" pos:column="53"/></name><operator pos:line="20" pos:column="53">.<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="54">hash<pos:position pos:line="20" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">get_detached_from<pos:position pos:line="23" pos:column="30"/></name></expr>)<pos:position pos:line="23" pos:column="31"/></condition><then pos:line="23" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="17">wt_status_get_detached_from<pos:position pos:line="24" pos:column="44"/></name><argument_list pos:line="24" pos:column="44">(<argument><expr><name pos:line="24" pos:column="45">state<pos:position pos:line="24" pos:column="50"/></name></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt></block></then></if>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
