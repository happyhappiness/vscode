<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_102_last_repos.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">logmsg_reencode<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">commit<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">commit<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
			    <parameter><decl><type><name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier><modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">commit_encoding<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="3" pos:column="29">const<pos:position pos:line="3" pos:column="34"/></specifier> <name pos:line="3" pos:column="35">char<pos:position pos:line="3" pos:column="39"/></name> <modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier></type><name pos:line="3" pos:column="41">output_encoding<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="57"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><specifier pos:line="5" pos:column="16">const<pos:position pos:line="5" pos:column="21"/></specifier> <name pos:line="5" pos:column="22">char<pos:position pos:line="5" pos:column="26"/></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">utf8<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><literal type="string" pos:line="5" pos:column="35">"UTF-8"<pos:position pos:line="5" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">use_encoding<pos:position pos:line="6" pos:column="33"/></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">encoding<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">msg<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><call><name pos:line="8" pos:column="27">get_commit_buffer<pos:position pos:line="8" pos:column="44"/></name><argument_list pos:line="8" pos:column="44">(<argument><expr><name pos:line="8" pos:column="45">commit<pos:position pos:line="8" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="53">NULL<pos:position pos:line="8" pos:column="57"/></name></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">out<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">output_encoding<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">||<pos:position pos:line="11" pos:column="32"/></operator> <operator pos:line="11" pos:column="33">!<pos:position pos:line="11" pos:column="34"/></operator><operator pos:line="11" pos:column="34">*<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="35">output_encoding<pos:position pos:line="11" pos:column="50"/></name></expr>)<pos:position pos:line="11" pos:column="51"/></condition><then pos:line="11" pos:column="51"> <block pos:line="11" pos:column="52">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">commit_encoding<pos:position pos:line="12" pos:column="36"/></name></expr>)<pos:position pos:line="12" pos:column="37"/></condition><then pos:line="12" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="13" pos:column="25">*<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">commit_encoding<pos:position pos:line="13" pos:column="41"/></name> <operator pos:line="13" pos:column="42">=<pos:position pos:line="13" pos:column="43"/></operator> <call><name pos:line="13" pos:column="44">get_header<pos:position pos:line="13" pos:column="54"/></name><argument_list pos:line="13" pos:column="54">(<argument><expr><name pos:line="13" pos:column="55">msg<pos:position pos:line="13" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="60">"encoding"<pos:position pos:line="13" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="72"/></expr_stmt></block></then></if>
		<return pos:line="14" pos:column="17">return <expr><name pos:line="14" pos:column="24">msg<pos:position pos:line="14" pos:column="27"/></name></expr>;<pos:position pos:line="14" pos:column="28"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="16" pos:column="9">encoding<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <call><name pos:line="16" pos:column="20">get_header<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">msg<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="36">"encoding"<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">commit_encoding<pos:position pos:line="17" pos:column="28"/></name></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="17">*<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">commit_encoding<pos:position pos:line="18" pos:column="33"/></name> <operator pos:line="18" pos:column="34">=<pos:position pos:line="18" pos:column="35"/></operator> <name pos:line="18" pos:column="36">encoding<pos:position pos:line="18" pos:column="44"/></name></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="19" pos:column="9">use_encoding<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <ternary><condition><expr><name pos:line="19" pos:column="24">encoding<pos:position pos:line="19" pos:column="32"/></name></expr> ?<pos:position pos:line="19" pos:column="34"/></condition><then pos:line="19" pos:column="34"> <expr><name pos:line="19" pos:column="35">encoding<pos:position pos:line="19" pos:column="43"/></name></expr> <pos:position pos:line="19" pos:column="44"/></then><else pos:line="19" pos:column="44">: <expr><name pos:line="19" pos:column="46">utf8<pos:position pos:line="19" pos:column="50"/></name></expr></else></ternary></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">same_encoding<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">use_encoding<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="41">output_encoding<pos:position pos:line="20" pos:column="56"/></name></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="58"/></condition><then pos:line="20" pos:column="58"> <block pos:line="20" pos:column="59">{
		<comment type="block" pos:line="21" pos:column="17">/*
		 * No encoding work to be done. If we have no encoding header
		 * at all, then there's nothing to do, and we can return the
		 * message verbatim (whether newly allocated or not).
		 */</comment>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">!<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="22">encoding<pos:position pos:line="26" pos:column="30"/></name></expr>)<pos:position pos:line="26" pos:column="31"/></condition><then pos:line="26" pos:column="31">
			<block type="pseudo"><return pos:line="27" pos:column="25">return <expr><name pos:line="27" pos:column="32">msg<pos:position pos:line="27" pos:column="35"/></name></expr>;<pos:position pos:line="27" pos:column="36"/></return></block></then></if>

		<comment type="block" pos:line="29" pos:column="17">/*
		 * Otherwise, we still want to munge the encoding header in the
		 * result, which will be done by modifying the buffer. If we
		 * are using a fresh copy, we can reuse it. But if we are using
		 * the cached copy from get_commit_buffer, we need to duplicate it
		 * to avoid munging the cached copy.
		 */</comment>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">msg<pos:position pos:line="36" pos:column="24"/></name> <operator pos:line="36" pos:column="25">==<pos:position pos:line="36" pos:column="27"/></operator> <call><name pos:line="36" pos:column="28">get_cached_commit_buffer<pos:position pos:line="36" pos:column="52"/></name><argument_list pos:line="36" pos:column="52">(<argument><expr><name pos:line="36" pos:column="53">commit<pos:position pos:line="36" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="61">NULL<pos:position pos:line="36" pos:column="65"/></name></expr></argument>)<pos:position pos:line="36" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="67"/></condition><then pos:line="36" pos:column="67">
			<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="25">out<pos:position pos:line="37" pos:column="28"/></name> <operator pos:line="37" pos:column="29">=<pos:position pos:line="37" pos:column="30"/></operator> <call><name pos:line="37" pos:column="31">xstrdup<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">msg<pos:position pos:line="37" pos:column="42"/></name></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt></block></then>
		<else pos:line="38" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="25">out<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">=<pos:position pos:line="39" pos:column="30"/></operator> <operator pos:line="39" pos:column="31">(<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="32">char<pos:position pos:line="39" pos:column="36"/></name> <operator pos:line="39" pos:column="37">*<pos:position pos:line="39" pos:column="38"/></operator><operator pos:line="39" pos:column="38">)<pos:position pos:line="39" pos:column="39"/></operator><name pos:line="39" pos:column="39">msg<pos:position pos:line="39" pos:column="42"/></name></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt></block></else></if>
	}<pos:position pos:line="40" pos:column="10"/></block></then>
	<else pos:line="41" pos:column="9">else <block pos:line="41" pos:column="14">{
		<comment type="block" pos:line="42" pos:column="17">/*
		 * There's actual encoding work to do. Do the reencoding, which
		 * still leaves the header to be replaced in the next step. At
		 * this point, we are done with msg. If we allocated a fresh
		 * copy, we can free it.
		 */</comment>
		<expr_stmt><expr><name pos:line="48" pos:column="17">out<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <call><name pos:line="48" pos:column="23">reencode_string<pos:position pos:line="48" pos:column="38"/></name><argument_list pos:line="48" pos:column="38">(<argument><expr><name pos:line="48" pos:column="39">msg<pos:position pos:line="48" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="44">output_encoding<pos:position pos:line="48" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="61">use_encoding<pos:position pos:line="48" pos:column="73"/></name></expr></argument>)<pos:position pos:line="48" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="75"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">out<pos:position pos:line="49" pos:column="24"/></name></expr>)<pos:position pos:line="49" pos:column="25"/></condition><then pos:line="49" pos:column="25">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="25">unuse_commit_buffer<pos:position pos:line="50" pos:column="44"/></name><argument_list pos:line="50" pos:column="44">(<argument><expr><name pos:line="50" pos:column="45">commit<pos:position pos:line="50" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="53">msg<pos:position pos:line="50" pos:column="56"/></name></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt></block></then></if>
	}<pos:position pos:line="51" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="53" pos:column="9">/*
	 * This replacement actually consumes the buffer we hand it, so we do
	 * not have to worry about freeing the old "out" here.
	 */</comment>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">out<pos:position pos:line="57" pos:column="16"/></name></expr>)<pos:position pos:line="57" pos:column="17"/></condition><then pos:line="57" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="17">out<pos:position pos:line="58" pos:column="20"/></name> <operator pos:line="58" pos:column="21">=<pos:position pos:line="58" pos:column="22"/></operator> <call><name pos:line="58" pos:column="23">replace_encoding_header<pos:position pos:line="58" pos:column="46"/></name><argument_list pos:line="58" pos:column="46">(<argument><expr><name pos:line="58" pos:column="47">out<pos:position pos:line="58" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="52">output_encoding<pos:position pos:line="58" pos:column="67"/></name></expr></argument>)<pos:position pos:line="58" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="69"/></expr_stmt></block></then></if>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><operator pos:line="60" pos:column="13">!<pos:position pos:line="60" pos:column="14"/></operator><name pos:line="60" pos:column="14">commit_encoding<pos:position pos:line="60" pos:column="29"/></name></expr>)<pos:position pos:line="60" pos:column="30"/></condition><then pos:line="60" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="17">free<pos:position pos:line="61" pos:column="21"/></name><argument_list pos:line="61" pos:column="21">(<argument><expr><name pos:line="61" pos:column="22">encoding<pos:position pos:line="61" pos:column="30"/></name></expr></argument>)<pos:position pos:line="61" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt></block></then></if>
	<comment type="block" pos:line="62" pos:column="9">/*
	 * If the re-encoding failed, out might be NULL here; in that
	 * case we just return the commit message verbatim.
	 */</comment>
	<return pos:line="66" pos:column="9">return <expr><ternary><condition><expr><name pos:line="66" pos:column="16">out<pos:position pos:line="66" pos:column="19"/></name></expr> ?<pos:position pos:line="66" pos:column="21"/></condition><then pos:line="66" pos:column="21"> <expr><name pos:line="66" pos:column="22">out<pos:position pos:line="66" pos:column="25"/></name></expr> <pos:position pos:line="66" pos:column="26"/></then><else pos:line="66" pos:column="26">: <expr><name pos:line="66" pos:column="28">msg<pos:position pos:line="66" pos:column="31"/></name></expr></else></ternary></expr>;<pos:position pos:line="66" pos:column="32"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
