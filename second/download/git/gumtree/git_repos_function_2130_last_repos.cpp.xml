<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2130_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">copy_fd<pos:position pos:line="1" pos:column="12"/></name><parameter_list pos:line="1" pos:column="12">(<parameter><decl><type><name pos:line="1" pos:column="13">int<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ifd<pos:position pos:line="1" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">ofd<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<while pos:line="3" pos:column="9">while <condition pos:line="3" pos:column="15">(<expr><literal type="number" pos:line="3" pos:column="16">1<pos:position pos:line="3" pos:column="17"/></literal></expr>)<pos:position pos:line="3" pos:column="18"/></condition> <block pos:line="3" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="4" pos:column="17">char<pos:position pos:line="4" pos:column="21"/></name></type> <name><name pos:line="4" pos:column="22">buffer<pos:position pos:line="4" pos:column="28"/></name><index pos:line="4" pos:column="28">[<expr><literal type="number" pos:line="4" pos:column="29">8192<pos:position pos:line="4" pos:column="33"/></literal></expr>]<pos:position pos:line="4" pos:column="34"/></index></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">ssize_t<pos:position pos:line="5" pos:column="24"/></name></type> <name pos:line="5" pos:column="25">len<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><call><name pos:line="5" pos:column="31">xread<pos:position pos:line="5" pos:column="36"/></name><argument_list pos:line="5" pos:column="36">(<argument><expr><name pos:line="5" pos:column="37">ifd<pos:position pos:line="5" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="42">buffer<pos:position pos:line="5" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="50">sizeof<argument_list pos:line="5" pos:column="56">(<argument><expr><name pos:line="5" pos:column="57">buffer<pos:position pos:line="5" pos:column="63"/></name></expr></argument>)<pos:position pos:line="5" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="66"/></decl_stmt>
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><operator pos:line="6" pos:column="21">!<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">len<pos:position pos:line="6" pos:column="25"/></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26">
			<block type="pseudo"><break pos:line="7" pos:column="25">break;<pos:position pos:line="7" pos:column="31"/></break></block></then></if>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">len<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">&lt;<pos:position pos:line="8" pos:column="29"/></operator> <literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr>)<pos:position pos:line="8" pos:column="29"/></condition><then pos:line="8" pos:column="29">
			<block type="pseudo"><return pos:line="9" pos:column="25">return <expr><name pos:line="9" pos:column="32">COPY_READ_ERROR<pos:position pos:line="9" pos:column="47"/></name></expr>;<pos:position pos:line="9" pos:column="48"/></return></block></then></if>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">write_in_full<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><name pos:line="10" pos:column="35">ofd<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="40">buffer<pos:position pos:line="10" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="48">len<pos:position pos:line="10" pos:column="51"/></name></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call> <operator pos:line="10" pos:column="53">&lt;<pos:position pos:line="10" pos:column="57"/></operator> <literal type="number" pos:line="10" pos:column="55">0<pos:position pos:line="10" pos:column="56"/></literal></expr>)<pos:position pos:line="10" pos:column="57"/></condition><then pos:line="10" pos:column="57">
			<block type="pseudo"><return pos:line="11" pos:column="25">return <expr><name pos:line="11" pos:column="32">COPY_WRITE_ERROR<pos:position pos:line="11" pos:column="48"/></name></expr>;<pos:position pos:line="11" pos:column="49"/></return></block></then></if>
	}<pos:position pos:line="12" pos:column="10"/></block></while>
	<return pos:line="13" pos:column="9">return <expr><literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
