<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4481_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">log_show_early<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">rev_info<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">revs<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">commit_list<pos:position pos:line="1" pos:column="69"/></name></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">list<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><name><name pos:line="3" pos:column="17">revs<pos:position pos:line="3" pos:column="21"/></name><operator pos:line="3" pos:column="21">-&gt;<pos:position pos:line="3" pos:column="26"/></operator><name pos:line="3" pos:column="23">early_output<pos:position pos:line="3" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">show_header<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><literal type="number" pos:line="4" pos:column="27">1<pos:position pos:line="4" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">sort_in_topological_order<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">(<argument><expr><operator pos:line="6" pos:column="35">&amp;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="36">list<pos:position pos:line="6" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="42">revs<pos:position pos:line="6" pos:column="46"/></name><operator pos:line="6" pos:column="46">-&gt;<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="48">sort_order<pos:position pos:line="6" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="60"/></expr_stmt>
	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">list<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">&amp;&amp;<pos:position pos:line="7" pos:column="31"/></operator> <name pos:line="7" pos:column="24">i<pos:position pos:line="7" pos:column="25"/></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition> <block pos:line="7" pos:column="27">{
		<decl_stmt><decl><type><name><name pos:line="8" pos:column="17">struct<pos:position pos:line="8" pos:column="23"/></name> <name pos:line="8" pos:column="24">commit<pos:position pos:line="8" pos:column="30"/></name></name> <modifier pos:line="8" pos:column="31">*<pos:position pos:line="8" pos:column="32"/></modifier></type><name pos:line="8" pos:column="32">commit<pos:position pos:line="8" pos:column="38"/></name> <init pos:line="8" pos:column="39">= <expr><name><name pos:line="8" pos:column="41">list<pos:position pos:line="8" pos:column="45"/></name><operator pos:line="8" pos:column="45">-&gt;<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="47">item<pos:position pos:line="8" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="52"/></decl_stmt>
		<switch pos:line="9" pos:column="17">switch <condition pos:line="9" pos:column="24">(<expr><call><name pos:line="9" pos:column="25">simplify_commit<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">(<argument><expr><name pos:line="9" pos:column="41">revs<pos:position pos:line="9" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="47">commit<pos:position pos:line="9" pos:column="53"/></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="55"/></condition> <block pos:line="9" pos:column="56">{
		<case pos:line="10" pos:column="17">case <expr><name pos:line="10" pos:column="22">commit_show<pos:position pos:line="10" pos:column="33"/></name></expr>:<pos:position pos:line="10" pos:column="34"/></case>
			<if pos:line="11" pos:column="25">if <condition pos:line="11" pos:column="28">(<expr><name pos:line="11" pos:column="29">show_header<pos:position pos:line="11" pos:column="40"/></name></expr>)<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41"> <block pos:line="11" pos:column="42">{
				<decl_stmt><decl><type><name pos:line="12" pos:column="33">int<pos:position pos:line="12" pos:column="36"/></name></type> <name pos:line="12" pos:column="37">n<pos:position pos:line="12" pos:column="38"/></name> <init pos:line="12" pos:column="39">= <expr><call><name pos:line="12" pos:column="41">estimate_commit_count<pos:position pos:line="12" pos:column="62"/></name><argument_list pos:line="12" pos:column="62">(<argument><expr><name pos:line="12" pos:column="63">revs<pos:position pos:line="12" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="69">list<pos:position pos:line="12" pos:column="73"/></name></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="75"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="13" pos:column="33">show_early_header<pos:position pos:line="13" pos:column="50"/></name><argument_list pos:line="13" pos:column="50">(<argument><expr><name pos:line="13" pos:column="51">revs<pos:position pos:line="13" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="57">"incomplete"<pos:position pos:line="13" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="71">n<pos:position pos:line="13" pos:column="72"/></name></expr></argument>)<pos:position pos:line="13" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="74"/></expr_stmt>
				<expr_stmt><expr><name pos:line="14" pos:column="33">show_header<pos:position pos:line="14" pos:column="44"/></name> <operator pos:line="14" pos:column="45">=<pos:position pos:line="14" pos:column="46"/></operator> <literal type="number" pos:line="14" pos:column="47">0<pos:position pos:line="14" pos:column="48"/></literal></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
			}<pos:position pos:line="15" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">log_tree_commit<pos:position pos:line="16" pos:column="40"/></name><argument_list pos:line="16" pos:column="40">(<argument><expr><name pos:line="16" pos:column="41">revs<pos:position pos:line="16" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="47">commit<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="17" pos:column="25">i<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">--<pos:position pos:line="17" pos:column="28"/></operator></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
			<break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break>
		<case pos:line="19" pos:column="17">case <expr><name pos:line="19" pos:column="22">commit_ignore<pos:position pos:line="19" pos:column="35"/></name></expr>:<pos:position pos:line="19" pos:column="36"/></case>
			<break pos:line="20" pos:column="25">break;<pos:position pos:line="20" pos:column="31"/></break>
		<case pos:line="21" pos:column="17">case <expr><name pos:line="21" pos:column="22">commit_error<pos:position pos:line="21" pos:column="34"/></name></expr>:<pos:position pos:line="21" pos:column="35"/></case>
			<return pos:line="22" pos:column="25">return;<pos:position pos:line="22" pos:column="32"/></return>
		}<pos:position pos:line="23" pos:column="18"/></block></switch>
		<expr_stmt><expr><name pos:line="24" pos:column="17">list<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <name><name pos:line="24" pos:column="24">list<pos:position pos:line="24" pos:column="28"/></name><operator pos:line="24" pos:column="28">-&gt;<pos:position pos:line="24" pos:column="33"/></operator><name pos:line="24" pos:column="30">next<pos:position pos:line="24" pos:column="34"/></name></name></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></while>

	<comment type="block" pos:line="27" pos:column="9">/* Did we already get enough commits for the early output? */</comment>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">i<pos:position pos:line="28" pos:column="15"/></name></expr>)<pos:position pos:line="28" pos:column="16"/></condition><then pos:line="28" pos:column="16">
		<block type="pseudo"><return pos:line="29" pos:column="17">return;<pos:position pos:line="29" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="31" pos:column="9">/*
	 * ..if no, then repeat it twice a second until we
	 * do.
	 *
	 * NOTE! We don't use "it_interval", because if the
	 * reader isn't listening, we want our output to be
	 * throttled by the writing, and not have the timer
	 * trigger every second even if we're blocked on a
	 * reader!
	 */</comment>
	<expr_stmt><expr><name><name pos:line="41" pos:column="9">early_output_timer<pos:position pos:line="41" pos:column="27"/></name><operator pos:line="41" pos:column="27">.<pos:position pos:line="41" pos:column="28"/></operator><name pos:line="41" pos:column="28">it_value<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">.<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="37">tv_sec<pos:position pos:line="41" pos:column="43"/></name></name> <operator pos:line="41" pos:column="44">=<pos:position pos:line="41" pos:column="45"/></operator> <literal type="number" pos:line="41" pos:column="46">0<pos:position pos:line="41" pos:column="47"/></literal></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="42" pos:column="9">early_output_timer<pos:position pos:line="42" pos:column="27"/></name><operator pos:line="42" pos:column="27">.<pos:position pos:line="42" pos:column="28"/></operator><name pos:line="42" pos:column="28">it_value<pos:position pos:line="42" pos:column="36"/></name><operator pos:line="42" pos:column="36">.<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="37">tv_usec<pos:position pos:line="42" pos:column="44"/></name></name> <operator pos:line="42" pos:column="45">=<pos:position pos:line="42" pos:column="46"/></operator> <literal type="number" pos:line="42" pos:column="47">500000<pos:position pos:line="42" pos:column="53"/></literal></expr>;<pos:position pos:line="42" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">setitimer<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><name pos:line="43" pos:column="19">ITIMER_REAL<pos:position pos:line="43" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="32">&amp;<pos:position pos:line="43" pos:column="37"/></operator><name pos:line="43" pos:column="33">early_output_timer<pos:position pos:line="43" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="53">NULL<pos:position pos:line="43" pos:column="57"/></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
