<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5553_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_bundle<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">argc<pos:position pos:line="1" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier><modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">argv<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">prefix<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">bundle_header<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">header<pos:position pos:line="3" pos:column="36"/></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">cmd<pos:position pos:line="4" pos:column="24"/></name></decl>, <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="27">bundle_file<pos:position pos:line="4" pos:column="38"/></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">bundle_fd<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><operator pos:line="5" pos:column="25">-<pos:position pos:line="5" pos:column="26"/></operator><literal type="number" pos:line="5" pos:column="26">1<pos:position pos:line="5" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">argc<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">&lt;<pos:position pos:line="7" pos:column="22"/></operator> <literal type="number" pos:line="7" pos:column="20">3<pos:position pos:line="7" pos:column="21"/></literal></expr>)<pos:position pos:line="7" pos:column="22"/></condition><then pos:line="7" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="17">usage<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><name pos:line="8" pos:column="23">builtin_bundle_usage<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="10" pos:column="9">cmd<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <name><name pos:line="10" pos:column="15">argv<pos:position pos:line="10" pos:column="19"/></name><index pos:line="10" pos:column="19">[<expr><literal type="number" pos:line="10" pos:column="20">1<pos:position pos:line="10" pos:column="21"/></literal></expr>]<pos:position pos:line="10" pos:column="22"/></index></name></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">bundle_file<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <call><name pos:line="11" pos:column="23">prefix_filename<pos:position pos:line="11" pos:column="38"/></name><argument_list pos:line="11" pos:column="38">(<argument><expr><name pos:line="11" pos:column="39">prefix<pos:position pos:line="11" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="47">argv<pos:position pos:line="11" pos:column="51"/></name><index pos:line="11" pos:column="51">[<expr><literal type="number" pos:line="11" pos:column="52">2<pos:position pos:line="11" pos:column="53"/></literal></expr>]<pos:position pos:line="11" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">argc<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">-=<pos:position pos:line="12" pos:column="16"/></operator> <literal type="number" pos:line="12" pos:column="17">2<pos:position pos:line="12" pos:column="18"/></literal></expr>;<pos:position pos:line="12" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="13" pos:column="9">argv<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">+=<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="17">2<pos:position pos:line="13" pos:column="18"/></literal></expr>;<pos:position pos:line="13" pos:column="19"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">memset<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><operator pos:line="15" pos:column="16">&amp;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="17">header<pos:position pos:line="15" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="25">0<pos:position pos:line="15" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="28">sizeof<argument_list pos:line="15" pos:column="34">(<argument><expr><name pos:line="15" pos:column="35">header<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">strcmp<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">cmd<pos:position pos:line="16" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="25">"create"<pos:position pos:line="16" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call> <operator pos:line="16" pos:column="35">&amp;&amp;<pos:position pos:line="16" pos:column="45"/></operator> <operator pos:line="16" pos:column="38">(<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="39">bundle_fd<pos:position pos:line="16" pos:column="48"/></name> <operator pos:line="16" pos:column="49">=<pos:position pos:line="16" pos:column="50"/></operator>
				<call><name pos:line="17" pos:column="33">read_bundle_header<pos:position pos:line="17" pos:column="51"/></name><argument_list pos:line="17" pos:column="51">(<argument><expr><name pos:line="17" pos:column="52">bundle_file<pos:position pos:line="17" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="65">&amp;<pos:position pos:line="17" pos:column="70"/></operator><name pos:line="17" pos:column="66">header<pos:position pos:line="17" pos:column="72"/></name></expr></argument>)<pos:position pos:line="17" pos:column="73"/></argument_list></call><operator pos:line="17" pos:column="73">)<pos:position pos:line="17" pos:column="74"/></operator> <operator pos:line="17" pos:column="75">&lt;<pos:position pos:line="17" pos:column="79"/></operator> <literal type="number" pos:line="17" pos:column="77">0<pos:position pos:line="17" pos:column="78"/></literal></expr>)<pos:position pos:line="17" pos:column="79"/></condition><then pos:line="17" pos:column="79">
		<block type="pseudo"><return pos:line="18" pos:column="17">return <expr><literal type="number" pos:line="18" pos:column="24">1<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></return></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><call><name pos:line="20" pos:column="14">strcmp<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">cmd<pos:position pos:line="20" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="26">"verify"<pos:position pos:line="20" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="36"/></condition><then pos:line="20" pos:column="36"> <block pos:line="20" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">close<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">bundle_fd<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">argc<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">!=<pos:position pos:line="22" pos:column="28"/></operator> <literal type="number" pos:line="22" pos:column="29">1<pos:position pos:line="22" pos:column="30"/></literal></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31"> <block pos:line="22" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">usage<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><name pos:line="23" pos:column="31">builtin_bundle_usage<pos:position pos:line="23" pos:column="51"/></name></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></expr_stmt>
			<return pos:line="24" pos:column="25">return <expr><literal type="number" pos:line="24" pos:column="32">1<pos:position pos:line="24" pos:column="33"/></literal></expr>;<pos:position pos:line="24" pos:column="34"/></return>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><call><name pos:line="26" pos:column="21">verify_bundle<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><operator pos:line="26" pos:column="35">&amp;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="36">header<pos:position pos:line="26" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="44">1<pos:position pos:line="26" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47">
			<block type="pseudo"><return pos:line="27" pos:column="25">return <expr><literal type="number" pos:line="27" pos:column="32">1<pos:position pos:line="27" pos:column="33"/></literal></expr>;<pos:position pos:line="27" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">fprintf<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">stderr<pos:position pos:line="28" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="33">_<pos:position pos:line="28" pos:column="34"/></name><argument_list pos:line="28" pos:column="34">(<argument><expr><literal type="string" pos:line="28" pos:column="35">"%s is okay\n"<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="52">bundle_file<pos:position pos:line="28" pos:column="63"/></name></expr></argument>)<pos:position pos:line="28" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="65"/></expr_stmt>
		<return pos:line="29" pos:column="17">return <expr><literal type="number" pos:line="29" pos:column="24">0<pos:position pos:line="29" pos:column="25"/></literal></expr>;<pos:position pos:line="29" pos:column="26"/></return>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><call><name pos:line="31" pos:column="14">strcmp<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">cmd<pos:position pos:line="31" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="26">"list-heads"<pos:position pos:line="31" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="40"/></condition><then pos:line="31" pos:column="40"> <block pos:line="31" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">close<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">bundle_fd<pos:position pos:line="32" pos:column="32"/></name></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
		<return pos:line="33" pos:column="17">return <expr><operator pos:line="33" pos:column="24">!<pos:position pos:line="33" pos:column="25"/></operator><operator pos:line="33" pos:column="25">!<pos:position pos:line="33" pos:column="26"/></operator><call><name pos:line="33" pos:column="26">list_bundle_refs<pos:position pos:line="33" pos:column="42"/></name><argument_list pos:line="33" pos:column="42">(<argument><expr><operator pos:line="33" pos:column="43">&amp;<pos:position pos:line="33" pos:column="48"/></operator><name pos:line="33" pos:column="44">header<pos:position pos:line="33" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="52">argc<pos:position pos:line="33" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="58">argv<pos:position pos:line="33" pos:column="62"/></name></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="64"/></return>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">!<pos:position pos:line="35" pos:column="14"/></operator><call><name pos:line="35" pos:column="14">strcmp<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name pos:line="35" pos:column="21">cmd<pos:position pos:line="35" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="26">"create"<pos:position pos:line="35" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="36"/></condition><then pos:line="35" pos:column="36"> <block pos:line="35" pos:column="37">{
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">argc<pos:position pos:line="36" pos:column="25"/></name> <operator pos:line="36" pos:column="26">&lt;<pos:position pos:line="36" pos:column="30"/></operator> <literal type="number" pos:line="36" pos:column="28">2<pos:position pos:line="36" pos:column="29"/></literal></expr>)<pos:position pos:line="36" pos:column="30"/></condition><then pos:line="36" pos:column="30"> <block pos:line="36" pos:column="31">{
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">usage<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name pos:line="37" pos:column="31">builtin_bundle_usage<pos:position pos:line="37" pos:column="51"/></name></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="53"/></expr_stmt>
			<return pos:line="38" pos:column="25">return <expr><literal type="number" pos:line="38" pos:column="32">1<pos:position pos:line="38" pos:column="33"/></literal></expr>;<pos:position pos:line="38" pos:column="34"/></return>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">!<pos:position pos:line="40" pos:column="22"/></operator><name><name pos:line="40" pos:column="22">startup_info<pos:position pos:line="40" pos:column="34"/></name><operator pos:line="40" pos:column="34">-&gt;<pos:position pos:line="40" pos:column="39"/></operator><name pos:line="40" pos:column="36">have_repository<pos:position pos:line="40" pos:column="51"/></name></name></expr>)<pos:position pos:line="40" pos:column="52"/></condition><then pos:line="40" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="25">die<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><call><name pos:line="41" pos:column="29">_<pos:position pos:line="41" pos:column="30"/></name><argument_list pos:line="41" pos:column="30">(<argument><expr><literal type="string" pos:line="41" pos:column="31">"Need a repository to create a bundle."<pos:position pos:line="41" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="73"/></expr_stmt></block></then></if>
		<return pos:line="42" pos:column="17">return <expr><operator pos:line="42" pos:column="24">!<pos:position pos:line="42" pos:column="25"/></operator><operator pos:line="42" pos:column="25">!<pos:position pos:line="42" pos:column="26"/></operator><call><name pos:line="42" pos:column="26">create_bundle<pos:position pos:line="42" pos:column="39"/></name><argument_list pos:line="42" pos:column="39">(<argument><expr><operator pos:line="42" pos:column="40">&amp;<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="41">header<pos:position pos:line="42" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="49">bundle_file<pos:position pos:line="42" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="62">argc<pos:position pos:line="42" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="68">argv<pos:position pos:line="42" pos:column="72"/></name></expr></argument>)<pos:position pos:line="42" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="74"/></return>
	}<pos:position pos:line="43" pos:column="10"/></block></then> <elseif pos:line="43" pos:column="11">else <if pos:line="43" pos:column="16">if <condition pos:line="43" pos:column="19">(<expr><operator pos:line="43" pos:column="20">!<pos:position pos:line="43" pos:column="21"/></operator><call><name pos:line="43" pos:column="21">strcmp<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">(<argument><expr><name pos:line="43" pos:column="28">cmd<pos:position pos:line="43" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="33">"unbundle"<pos:position pos:line="43" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="45"/></condition><then pos:line="43" pos:column="45"> <block pos:line="43" pos:column="46">{
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><operator pos:line="44" pos:column="21">!<pos:position pos:line="44" pos:column="22"/></operator><name><name pos:line="44" pos:column="22">startup_info<pos:position pos:line="44" pos:column="34"/></name><operator pos:line="44" pos:column="34">-&gt;<pos:position pos:line="44" pos:column="39"/></operator><name pos:line="44" pos:column="36">have_repository<pos:position pos:line="44" pos:column="51"/></name></name></expr>)<pos:position pos:line="44" pos:column="52"/></condition><then pos:line="44" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">die<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><call><name pos:line="45" pos:column="29">_<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><literal type="string" pos:line="45" pos:column="31">"Need a repository to unbundle."<pos:position pos:line="45" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="66"/></expr_stmt></block></then></if>
		<return pos:line="46" pos:column="17">return <expr><operator pos:line="46" pos:column="24">!<pos:position pos:line="46" pos:column="25"/></operator><operator pos:line="46" pos:column="25">!<pos:position pos:line="46" pos:column="26"/></operator><call><name pos:line="46" pos:column="26">unbundle<pos:position pos:line="46" pos:column="34"/></name><argument_list pos:line="46" pos:column="34">(<argument><expr><operator pos:line="46" pos:column="35">&amp;<pos:position pos:line="46" pos:column="40"/></operator><name pos:line="46" pos:column="36">header<pos:position pos:line="46" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="44">bundle_fd<pos:position pos:line="46" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="55">0<pos:position pos:line="46" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call> <operator pos:line="46" pos:column="58">||<pos:position pos:line="46" pos:column="60"/></operator>
			<call><name pos:line="47" pos:column="25">list_bundle_refs<pos:position pos:line="47" pos:column="41"/></name><argument_list pos:line="47" pos:column="41">(<argument><expr><operator pos:line="47" pos:column="42">&amp;<pos:position pos:line="47" pos:column="47"/></operator><name pos:line="47" pos:column="43">header<pos:position pos:line="47" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="51">argc<pos:position pos:line="47" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="57">argv<pos:position pos:line="47" pos:column="61"/></name></expr></argument>)<pos:position pos:line="47" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="63"/></return>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if></elseif> <else pos:line="48" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="17">usage<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><name pos:line="49" pos:column="23">builtin_bundle_usage<pos:position pos:line="49" pos:column="43"/></name></expr></argument>)<pos:position pos:line="49" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt></block></else></if>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
