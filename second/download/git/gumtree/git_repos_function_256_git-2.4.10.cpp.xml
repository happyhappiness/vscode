<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_256_git-2.4.10.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">walker_targets_stdin<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier><modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier><modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">target<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier><modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier><modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">write_ref<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">targets<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><literal type="number" pos:line="3" pos:column="23">0<pos:position pos:line="3" pos:column="24"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="26">targets_alloc<pos:position pos:line="3" pos:column="39"/></name> <init pos:line="3" pos:column="40">= <expr><literal type="number" pos:line="3" pos:column="42">0<pos:position pos:line="3" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">buf<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">STRBUF_INIT<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<expr_stmt><expr><operator pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">target<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">=<pos:position pos:line="5" pos:column="18"/></operator> <name pos:line="5" pos:column="19">NULL<pos:position pos:line="5" pos:column="23"/></name></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt> <expr_stmt><expr><operator pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="26">write_ref<pos:position pos:line="5" pos:column="35"/></name> <operator pos:line="5" pos:column="36">=<pos:position pos:line="5" pos:column="37"/></operator> <name pos:line="5" pos:column="38">NULL<pos:position pos:line="5" pos:column="42"/></name></expr>;<pos:position pos:line="5" pos:column="43"/></expr_stmt>
	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><literal type="number" pos:line="6" pos:column="16">1<pos:position pos:line="6" pos:column="17"/></literal></expr>)<pos:position pos:line="6" pos:column="18"/></condition> <block pos:line="6" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">char<pos:position pos:line="7" pos:column="21"/></name> <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier></type><name pos:line="7" pos:column="23">rf_one<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><name pos:line="7" pos:column="32">NULL<pos:position pos:line="7" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">char<pos:position pos:line="8" pos:column="21"/></name> <modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type><name pos:line="8" pos:column="23">tg_one<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">strbuf_getline<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><operator pos:line="10" pos:column="36">&amp;<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="37">buf<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="42">stdin<pos:position pos:line="10" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="49">'\n'<pos:position pos:line="10" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call> <operator pos:line="10" pos:column="55">==<pos:position pos:line="10" pos:column="57"/></operator> <name pos:line="10" pos:column="58">EOF<pos:position pos:line="10" pos:column="61"/></name></expr>)<pos:position pos:line="10" pos:column="62"/></condition><then pos:line="10" pos:column="62">
			<block type="pseudo"><break pos:line="11" pos:column="25">break;<pos:position pos:line="11" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="12" pos:column="17">tg_one<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <name><name pos:line="12" pos:column="26">buf<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">buf<pos:position pos:line="12" pos:column="33"/></name></name></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">rf_one<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <call><name pos:line="13" pos:column="26">strchr<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">tg_one<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="41">'\t'<pos:position pos:line="13" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">rf_one<pos:position pos:line="14" pos:column="27"/></name></expr>)<pos:position pos:line="14" pos:column="28"/></condition><then pos:line="14" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="15" pos:column="25">*<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">rf_one<pos:position pos:line="15" pos:column="32"/></name><operator pos:line="15" pos:column="32">++<pos:position pos:line="15" pos:column="34"/></operator> <operator pos:line="15" pos:column="35">=<pos:position pos:line="15" pos:column="36"/></operator> <literal type="number" pos:line="15" pos:column="37">0<pos:position pos:line="15" pos:column="38"/></literal></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt></block></then></if>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">targets<pos:position pos:line="17" pos:column="28"/></name> <operator pos:line="17" pos:column="29">&gt;=<pos:position pos:line="17" pos:column="34"/></operator> <name pos:line="17" pos:column="32">targets_alloc<pos:position pos:line="17" pos:column="45"/></name></expr>)<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46"> <block pos:line="17" pos:column="47">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">targets_alloc<pos:position pos:line="18" pos:column="38"/></name> <operator pos:line="18" pos:column="39">=<pos:position pos:line="18" pos:column="40"/></operator> <ternary><condition><expr><name pos:line="18" pos:column="41">targets_alloc<pos:position pos:line="18" pos:column="54"/></name></expr> ?<pos:position pos:line="18" pos:column="56"/></condition><then pos:line="18" pos:column="56"> <expr><name pos:line="18" pos:column="57">targets_alloc<pos:position pos:line="18" pos:column="70"/></name> <operator pos:line="18" pos:column="71">*<pos:position pos:line="18" pos:column="72"/></operator> <literal type="number" pos:line="18" pos:column="73">2<pos:position pos:line="18" pos:column="74"/></literal></expr> <pos:position pos:line="18" pos:column="75"/></then><else pos:line="18" pos:column="75">: <expr><literal type="number" pos:line="18" pos:column="77">64<pos:position pos:line="18" pos:column="79"/></literal></expr></else></ternary></expr>;<pos:position pos:line="18" pos:column="80"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">REALLOC_ARRAY<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><operator pos:line="19" pos:column="39">*<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="40">target<pos:position pos:line="19" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="48">targets_alloc<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">REALLOC_ARRAY<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><operator pos:line="20" pos:column="39">*<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="40">write_ref<pos:position pos:line="20" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="51">targets_alloc<pos:position pos:line="20" pos:column="64"/></name></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="66"/></expr_stmt>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="22" pos:column="17">(<pos:position pos:line="22" pos:column="18"/></operator><operator pos:line="22" pos:column="18">*<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="19">target<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">)<pos:position pos:line="22" pos:column="26"/></operator><index pos:line="22" pos:column="26">[<expr><name pos:line="22" pos:column="27">targets<pos:position pos:line="22" pos:column="34"/></name></expr>]<pos:position pos:line="22" pos:column="35"/></index> <operator pos:line="22" pos:column="36">=<pos:position pos:line="22" pos:column="37"/></operator> <call><name pos:line="22" pos:column="38">xstrdup<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><name pos:line="22" pos:column="46">tg_one<pos:position pos:line="22" pos:column="52"/></name></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="23" pos:column="17">(<pos:position pos:line="23" pos:column="18"/></operator><operator pos:line="23" pos:column="18">*<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">write_ref<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">)<pos:position pos:line="23" pos:column="29"/></operator><index pos:line="23" pos:column="29">[<expr><name pos:line="23" pos:column="30">targets<pos:position pos:line="23" pos:column="37"/></name></expr>]<pos:position pos:line="23" pos:column="38"/></index> <operator pos:line="23" pos:column="39">=<pos:position pos:line="23" pos:column="40"/></operator> <call><name pos:line="23" pos:column="41">xstrdup_or_null<pos:position pos:line="23" pos:column="56"/></name><argument_list pos:line="23" pos:column="56">(<argument><expr><name pos:line="23" pos:column="57">rf_one<pos:position pos:line="23" pos:column="63"/></name></expr></argument>)<pos:position pos:line="23" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><name pos:line="24" pos:column="17">targets<pos:position pos:line="24" pos:column="24"/></name><operator pos:line="24" pos:column="24">++<pos:position pos:line="24" pos:column="26"/></operator></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">strbuf_release<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><operator pos:line="26" pos:column="24">&amp;<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="25">buf<pos:position pos:line="26" pos:column="28"/></name></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt>
	<return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">targets<pos:position pos:line="27" pos:column="23"/></name></expr>;<pos:position pos:line="27" pos:column="24"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
