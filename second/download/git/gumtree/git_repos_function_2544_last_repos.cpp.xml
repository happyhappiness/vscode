<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2544_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">combine_diff_path<pos:position pos:line="1" pos:column="32"/></name></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">path_appendnew<pos:position pos:line="1" pos:column="48"/></name><parameter_list pos:line="1" pos:column="48">(<parameter><decl><type><name><name pos:line="1" pos:column="49">struct<pos:position pos:line="1" pos:column="55"/></name> <name pos:line="1" pos:column="56">combine_diff_path<pos:position pos:line="1" pos:column="73"/></name></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">last<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
	<parameter><decl><type><name pos:line="2" pos:column="9">int<pos:position pos:line="2" pos:column="12"/></name></type> <name pos:line="2" pos:column="13">nparent<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name><name pos:line="2" pos:column="28">struct<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">strbuf<pos:position pos:line="2" pos:column="41"/></name></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">base<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="49">const<pos:position pos:line="2" pos:column="54"/></specifier> <name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">path<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">int<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">pathlen<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>,
	<parameter><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">mode<pos:position pos:line="3" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="24">const<pos:position pos:line="3" pos:column="29"/></specifier> <name><name pos:line="3" pos:column="30">struct<pos:position pos:line="3" pos:column="36"/></name> <name pos:line="3" pos:column="37">object_id<pos:position pos:line="3" pos:column="46"/></name></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">oid<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="52"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">combine_diff_path<pos:position pos:line="5" pos:column="33"/></name></name> <modifier pos:line="5" pos:column="34">*<pos:position pos:line="5" pos:column="35"/></modifier></type><name pos:line="5" pos:column="35">p<pos:position pos:line="5" pos:column="36"/></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">len<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><call><name pos:line="6" pos:column="22">st_add<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><name><name pos:line="6" pos:column="29">base<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">-&gt;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="35">len<pos:position pos:line="6" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="40">pathlen<pos:position pos:line="6" pos:column="47"/></name></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">alloclen<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><call><name pos:line="7" pos:column="27">combine_diff_path_size<pos:position pos:line="7" pos:column="49"/></name><argument_list pos:line="7" pos:column="49">(<argument><expr><name pos:line="7" pos:column="50">nparent<pos:position pos:line="7" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="59">len<pos:position pos:line="7" pos:column="62"/></name></expr></argument>)<pos:position pos:line="7" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="64"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* if last-&gt;next is !NULL - it is a pre-allocated memory, we can reuse */</comment>
	<expr_stmt><expr><name pos:line="10" pos:column="9">p<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <name><name pos:line="10" pos:column="13">last<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">next<pos:position pos:line="10" pos:column="23"/></name></name></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">p<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">&amp;&amp;<pos:position pos:line="11" pos:column="25"/></operator> <operator pos:line="11" pos:column="18">(<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">alloclen<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">&gt;<pos:position pos:line="11" pos:column="32"/></operator> <operator pos:line="11" pos:column="30">(<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">intptr_t<pos:position pos:line="11" pos:column="39"/></name><operator pos:line="11" pos:column="39">)<pos:position pos:line="11" pos:column="40"/></operator><name><name pos:line="11" pos:column="40">p<pos:position pos:line="11" pos:column="41"/></name><operator pos:line="11" pos:column="41">-&gt;<pos:position pos:line="11" pos:column="46"/></operator><name pos:line="11" pos:column="43">next<pos:position pos:line="11" pos:column="47"/></name></name><operator pos:line="11" pos:column="47">)<pos:position pos:line="11" pos:column="48"/></operator></expr>)<pos:position pos:line="11" pos:column="49"/></condition><then pos:line="11" pos:column="49"> <block pos:line="11" pos:column="50">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">FREE_AND_NULL<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><name pos:line="12" pos:column="31">p<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">p<pos:position pos:line="15" pos:column="15"/></name></expr>)<pos:position pos:line="15" pos:column="16"/></condition><then pos:line="15" pos:column="16"> <block pos:line="15" pos:column="17">{
		<expr_stmt><expr><name pos:line="16" pos:column="17">p<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <call><name pos:line="16" pos:column="21">xmalloc<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">alloclen<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>

		<comment type="block" pos:line="18" pos:column="17">/*
		 * until we go to it next round, .next holds how many bytes we
		 * allocated (for faster realloc - we don't need copying old data).
		 */</comment>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">p<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">-&gt;<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="20">next<pos:position pos:line="22" pos:column="24"/></name></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <operator pos:line="22" pos:column="27">(<pos:position pos:line="22" pos:column="28"/></operator>struct <name pos:line="22" pos:column="35">combine_diff_path<pos:position pos:line="22" pos:column="52"/></name> <operator pos:line="22" pos:column="53">*<pos:position pos:line="22" pos:column="54"/></operator><operator pos:line="22" pos:column="54">)<pos:position pos:line="22" pos:column="55"/></operator><operator pos:line="22" pos:column="55">(<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="56">intptr_t<pos:position pos:line="22" pos:column="64"/></name><operator pos:line="22" pos:column="64">)<pos:position pos:line="22" pos:column="65"/></operator><name pos:line="22" pos:column="65">alloclen<pos:position pos:line="22" pos:column="73"/></name></expr>;<pos:position pos:line="22" pos:column="74"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="25" pos:column="9">last<pos:position pos:line="25" pos:column="13"/></name><operator pos:line="25" pos:column="13">-&gt;<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="15">next<pos:position pos:line="25" pos:column="19"/></name></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="22">p<pos:position pos:line="25" pos:column="23"/></name></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="27" pos:column="9">p<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">path<pos:position pos:line="27" pos:column="16"/></name></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <operator pos:line="27" pos:column="19">(<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="20">char<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">*<pos:position pos:line="27" pos:column="26"/></operator><operator pos:line="27" pos:column="26">)<pos:position pos:line="27" pos:column="27"/></operator><operator pos:line="27" pos:column="27">&amp;<pos:position pos:line="27" pos:column="32"/></operator><operator pos:line="27" pos:column="28">(<pos:position pos:line="27" pos:column="29"/></operator><name><name pos:line="27" pos:column="29">p<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">-&gt;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="32">parent<pos:position pos:line="27" pos:column="38"/></name><index pos:line="27" pos:column="38">[<expr><name pos:line="27" pos:column="39">nparent<pos:position pos:line="27" pos:column="46"/></name></expr>]<pos:position pos:line="27" pos:column="47"/></index></name><operator pos:line="27" pos:column="47">)<pos:position pos:line="27" pos:column="48"/></operator></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">memcpy<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name><name pos:line="28" pos:column="16">p<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">-&gt;<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="19">path<pos:position pos:line="28" pos:column="23"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="25">base<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">-&gt;<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="31">buf<pos:position pos:line="28" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="36">base<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="42">len<pos:position pos:line="28" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">memcpy<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name><name pos:line="29" pos:column="16">p<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">-&gt;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="19">path<pos:position pos:line="29" pos:column="23"/></name></name> <operator pos:line="29" pos:column="24">+<pos:position pos:line="29" pos:column="25"/></operator> <name><name pos:line="29" pos:column="26">base<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">-&gt;<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="32">len<pos:position pos:line="29" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="37">path<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">pathlen<pos:position pos:line="29" pos:column="50"/></name></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="30" pos:column="9">p<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">-&gt;<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="12">path<pos:position pos:line="30" pos:column="16"/></name><index pos:line="30" pos:column="16">[<expr><name pos:line="30" pos:column="17">len<pos:position pos:line="30" pos:column="20"/></name></expr>]<pos:position pos:line="30" pos:column="21"/></index></name> <operator pos:line="30" pos:column="22">=<pos:position pos:line="30" pos:column="23"/></operator> <literal type="number" pos:line="30" pos:column="24">0<pos:position pos:line="30" pos:column="25"/></literal></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="31" pos:column="9">p<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">-&gt;<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="12">mode<pos:position pos:line="31" pos:column="16"/></name></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <name pos:line="31" pos:column="19">mode<pos:position pos:line="31" pos:column="23"/></name></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">oidcpy<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><operator pos:line="32" pos:column="16">&amp;<pos:position pos:line="32" pos:column="21"/></operator><name><name pos:line="32" pos:column="17">p<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">-&gt;<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="20">oid<pos:position pos:line="32" pos:column="23"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="32" pos:column="25">oid<pos:position pos:line="32" pos:column="28"/></name></expr> ?<pos:position pos:line="32" pos:column="30"/></condition><then pos:line="32" pos:column="30"> <expr><name pos:line="32" pos:column="31">oid<pos:position pos:line="32" pos:column="34"/></name></expr> <pos:position pos:line="32" pos:column="35"/></then><else pos:line="32" pos:column="35">: <expr><operator pos:line="32" pos:column="37">&amp;<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="38">null_oid<pos:position pos:line="32" pos:column="46"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="48"/></expr_stmt>

	<return pos:line="34" pos:column="9">return <expr><name pos:line="34" pos:column="16">p<pos:position pos:line="34" pos:column="17"/></name></expr>;<pos:position pos:line="34" pos:column="18"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
