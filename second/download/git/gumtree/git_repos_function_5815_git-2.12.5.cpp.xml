<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5815_git-2.12.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_reset<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">int<pos:position pos:line="1" pos:column="18"/></name></type> <name pos:line="1" pos:column="19">argc<pos:position pos:line="1" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">argv<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">prefix<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">reset_type<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><name pos:line="3" pos:column="26">NONE<pos:position pos:line="3" pos:column="30"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="32">update_ref_status<pos:position pos:line="3" pos:column="49"/></name> <init pos:line="3" pos:column="50">= <expr><literal type="number" pos:line="3" pos:column="52">0<pos:position pos:line="3" pos:column="53"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="55">quiet<pos:position pos:line="3" pos:column="60"/></name> <init pos:line="3" pos:column="61">= <expr><literal type="number" pos:line="3" pos:column="63">0<pos:position pos:line="3" pos:column="64"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="65"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">patch_mode<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><literal type="number" pos:line="4" pos:column="26">0<pos:position pos:line="4" pos:column="27"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="29">unborn<pos:position pos:line="4" pos:column="35"/></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">rev<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object_id<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">oid<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">pathspec<pos:position pos:line="7" pos:column="24"/></name></name></type> <name pos:line="7" pos:column="25">pathspec<pos:position pos:line="7" pos:column="33"/></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">intent_to_add<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><literal type="number" pos:line="8" pos:column="29">0<pos:position pos:line="8" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name><name pos:line="9" pos:column="15">struct<pos:position pos:line="9" pos:column="21"/></name> <name pos:line="9" pos:column="22">option<pos:position pos:line="9" pos:column="28"/></name></name></type> <name><name pos:line="9" pos:column="29">options<pos:position pos:line="9" pos:column="36"/></name><index pos:line="9" pos:column="36">[]<pos:position pos:line="9" pos:column="38"/></index></name> <init pos:line="9" pos:column="39">= <expr><block pos:line="9" pos:column="41">{
		<expr><call><name pos:line="10" pos:column="17">OPT__QUIET<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><operator pos:line="10" pos:column="28">&amp;<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="29">quiet<pos:position pos:line="10" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="36">N_<pos:position pos:line="10" pos:column="38"/></name><argument_list pos:line="10" pos:column="38">(<argument><expr><literal type="string" pos:line="10" pos:column="39">"be quiet, only report errors"<pos:position pos:line="10" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="71"/></argument_list></call></expr>,
		<expr><call><name pos:line="11" pos:column="17">OPT_SET_INT<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><literal type="number" pos:line="11" pos:column="29">0<pos:position pos:line="11" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="32">"mixed"<pos:position pos:line="11" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="41">&amp;<pos:position pos:line="11" pos:column="46"/></operator><name pos:line="11" pos:column="42">reset_type<pos:position pos:line="11" pos:column="52"/></name></expr></argument>,
						<argument><expr><call><name pos:line="12" pos:column="49">N_<pos:position pos:line="12" pos:column="51"/></name><argument_list pos:line="12" pos:column="51">(<argument><expr><literal type="string" pos:line="12" pos:column="52">"reset HEAD and index"<pos:position pos:line="12" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="12" pos:column="77">MIXED<pos:position pos:line="12" pos:column="82"/></name></expr></argument>)<pos:position pos:line="12" pos:column="83"/></argument_list></call></expr>,
		<expr><call><name pos:line="13" pos:column="17">OPT_SET_INT<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><literal type="number" pos:line="13" pos:column="29">0<pos:position pos:line="13" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="32">"soft"<pos:position pos:line="13" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="13" pos:column="40">&amp;<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="41">reset_type<pos:position pos:line="13" pos:column="51"/></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="53">N_<pos:position pos:line="13" pos:column="55"/></name><argument_list pos:line="13" pos:column="55">(<argument><expr><literal type="string" pos:line="13" pos:column="56">"reset only HEAD"<pos:position pos:line="13" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="76">SOFT<pos:position pos:line="13" pos:column="80"/></name></expr></argument>)<pos:position pos:line="13" pos:column="81"/></argument_list></call></expr>,
		<expr><call><name pos:line="14" pos:column="17">OPT_SET_INT<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><literal type="number" pos:line="14" pos:column="29">0<pos:position pos:line="14" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="32">"hard"<pos:position pos:line="14" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="14" pos:column="40">&amp;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="41">reset_type<pos:position pos:line="14" pos:column="51"/></name></expr></argument>,
				<argument><expr><call><name pos:line="15" pos:column="33">N_<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><literal type="string" pos:line="15" pos:column="36">"reset HEAD, index and working tree"<pos:position pos:line="15" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="15" pos:column="75">HARD<pos:position pos:line="15" pos:column="79"/></name></expr></argument>)<pos:position pos:line="15" pos:column="80"/></argument_list></call></expr>,
		<expr><call><name pos:line="16" pos:column="17">OPT_SET_INT<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><literal type="number" pos:line="16" pos:column="29">0<pos:position pos:line="16" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="32">"merge"<pos:position pos:line="16" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="41">&amp;<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="42">reset_type<pos:position pos:line="16" pos:column="52"/></name></expr></argument>,
				<argument><expr><call><name pos:line="17" pos:column="33">N_<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><literal type="string" pos:line="17" pos:column="36">"reset HEAD, index and working tree"<pos:position pos:line="17" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="17" pos:column="75">MERGE<pos:position pos:line="17" pos:column="80"/></name></expr></argument>)<pos:position pos:line="17" pos:column="81"/></argument_list></call></expr>,
		<expr><call><name pos:line="18" pos:column="17">OPT_SET_INT<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><literal type="number" pos:line="18" pos:column="29">0<pos:position pos:line="18" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="32">"keep"<pos:position pos:line="18" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="40">&amp;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="41">reset_type<pos:position pos:line="18" pos:column="51"/></name></expr></argument>,
				<argument><expr><call><name pos:line="19" pos:column="33">N_<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><literal type="string" pos:line="19" pos:column="36">"reset HEAD but keep local changes"<pos:position pos:line="19" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="19" pos:column="74">KEEP<pos:position pos:line="19" pos:column="78"/></name></expr></argument>)<pos:position pos:line="19" pos:column="79"/></argument_list></call></expr>,
		<expr><call><name pos:line="20" pos:column="17">OPT_BOOL<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><literal type="char" pos:line="20" pos:column="26">'p'<pos:position pos:line="20" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="31">"patch"<pos:position pos:line="20" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="40">&amp;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="41">patch_mode<pos:position pos:line="20" pos:column="51"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="53">N_<pos:position pos:line="20" pos:column="55"/></name><argument_list pos:line="20" pos:column="55">(<argument><expr><literal type="string" pos:line="20" pos:column="56">"select hunks interactively"<pos:position pos:line="20" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="86"/></argument_list></call></expr>,
		<expr><call><name pos:line="21" pos:column="17">OPT_BOOL<pos:position pos:line="21" pos:column="25"/></name><argument_list pos:line="21" pos:column="25">(<argument><expr><literal type="char" pos:line="21" pos:column="26">'N'<pos:position pos:line="21" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="31">"intent-to-add"<pos:position pos:line="21" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="48">&amp;<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="49">intent_to_add<pos:position pos:line="21" pos:column="62"/></name></expr></argument>,
				<argument><expr><call><name pos:line="22" pos:column="33">N_<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><literal type="string" pos:line="22" pos:column="36">"record only the fact that removed paths will be added later"<pos:position pos:line="22" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="98"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="99"/></argument_list></call></expr>,
		<macro><name pos:line="23" pos:column="17">OPT_END<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">()<pos:position pos:line="23" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="24" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="24" pos:column="11"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="26" pos:column="9">git_config<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">git_default_config<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="40">NULL<pos:position pos:line="26" pos:column="44"/></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><name pos:line="28" pos:column="9">argc<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <call><name pos:line="28" pos:column="16">parse_options<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">argc<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="36">argv<pos:position pos:line="28" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="42">prefix<pos:position pos:line="28" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="50">options<pos:position pos:line="28" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="59">git_reset_usage<pos:position pos:line="28" pos:column="74"/></name></expr></argument>,
						<argument><expr><name pos:line="29" pos:column="49">PARSE_OPT_KEEP_DASHDASH<pos:position pos:line="29" pos:column="72"/></name></expr></argument>)<pos:position pos:line="29" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="74"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">parse_args<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><operator pos:line="30" pos:column="20">&amp;<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="21">pathspec<pos:position pos:line="30" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="31">argv<pos:position pos:line="30" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="37">prefix<pos:position pos:line="30" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="45">patch_mode<pos:position pos:line="30" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="57">&amp;<pos:position pos:line="30" pos:column="62"/></operator><name pos:line="30" pos:column="58">rev<pos:position pos:line="30" pos:column="61"/></name></expr></argument>)<pos:position pos:line="30" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="63"/></expr_stmt>

	<expr_stmt><expr><name pos:line="32" pos:column="9">unborn<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <operator pos:line="32" pos:column="18">!<pos:position pos:line="32" pos:column="19"/></operator><call><name pos:line="32" pos:column="19">strcmp<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">rev<pos:position pos:line="32" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="31">"HEAD"<pos:position pos:line="32" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call> <operator pos:line="32" pos:column="39">&amp;&amp;<pos:position pos:line="32" pos:column="49"/></operator> <call><name pos:line="32" pos:column="42">get_sha1<pos:position pos:line="32" pos:column="50"/></name><argument_list pos:line="32" pos:column="50">(<argument><expr><literal type="string" pos:line="32" pos:column="51">"HEAD"<pos:position pos:line="32" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="59">oid<pos:position pos:line="32" pos:column="62"/></name><operator pos:line="32" pos:column="62">.<pos:position pos:line="32" pos:column="63"/></operator><name pos:line="32" pos:column="63">hash<pos:position pos:line="32" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="69"/></expr_stmt>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">unborn<pos:position pos:line="33" pos:column="19"/></name></expr>)<pos:position pos:line="33" pos:column="20"/></condition><then pos:line="33" pos:column="20"> <block pos:line="33" pos:column="21">{
		<comment type="block" pos:line="34" pos:column="17">/* reset on unborn branch: treat as reset to empty tree */</comment>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">hashcpy<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name><name pos:line="35" pos:column="25">oid<pos:position pos:line="35" pos:column="28"/></name><operator pos:line="35" pos:column="28">.<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="29">hash<pos:position pos:line="35" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="35">EMPTY_TREE_SHA1_BIN<pos:position pos:line="35" pos:column="54"/></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></then> <elseif pos:line="36" pos:column="11">else <if pos:line="36" pos:column="16">if <condition pos:line="36" pos:column="19">(<expr><operator pos:line="36" pos:column="20">!<pos:position pos:line="36" pos:column="21"/></operator><name><name pos:line="36" pos:column="21">pathspec<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">.<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="30">nr<pos:position pos:line="36" pos:column="32"/></name></name></expr>)<pos:position pos:line="36" pos:column="33"/></condition><then pos:line="36" pos:column="33"> <block pos:line="36" pos:column="34">{
		<decl_stmt><decl><type><name><name pos:line="37" pos:column="17">struct<pos:position pos:line="37" pos:column="23"/></name> <name pos:line="37" pos:column="24">commit<pos:position pos:line="37" pos:column="30"/></name></name> <modifier pos:line="37" pos:column="31">*<pos:position pos:line="37" pos:column="32"/></modifier></type><name pos:line="37" pos:column="32">commit<pos:position pos:line="37" pos:column="38"/></name></decl>;<pos:position pos:line="37" pos:column="39"/></decl_stmt>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><call><name pos:line="38" pos:column="21">get_sha1_committish<pos:position pos:line="38" pos:column="40"/></name><argument_list pos:line="38" pos:column="40">(<argument><expr><name pos:line="38" pos:column="41">rev<pos:position pos:line="38" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="46">oid<pos:position pos:line="38" pos:column="49"/></name><operator pos:line="38" pos:column="49">.<pos:position pos:line="38" pos:column="50"/></operator><name pos:line="38" pos:column="50">hash<pos:position pos:line="38" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="56"/></condition><then pos:line="38" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="25">die<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><call><name pos:line="39" pos:column="29">_<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><literal type="string" pos:line="39" pos:column="31">"Failed to resolve '%s' as a valid revision."<pos:position pos:line="39" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="77"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="39" pos:column="79">rev<pos:position pos:line="39" pos:column="82"/></name></expr></argument>)<pos:position pos:line="39" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="84"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="40" pos:column="17">commit<pos:position pos:line="40" pos:column="23"/></name> <operator pos:line="40" pos:column="24">=<pos:position pos:line="40" pos:column="25"/></operator> <call><name pos:line="40" pos:column="26">lookup_commit_reference<pos:position pos:line="40" pos:column="49"/></name><argument_list pos:line="40" pos:column="49">(<argument><expr><name><name pos:line="40" pos:column="50">oid<pos:position pos:line="40" pos:column="53"/></name><operator pos:line="40" pos:column="53">.<pos:position pos:line="40" pos:column="54"/></operator><name pos:line="40" pos:column="54">hash<pos:position pos:line="40" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="60"/></expr_stmt>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><operator pos:line="41" pos:column="21">!<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">commit<pos:position pos:line="41" pos:column="28"/></name></expr>)<pos:position pos:line="41" pos:column="29"/></condition><then pos:line="41" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">die<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><call><name pos:line="42" pos:column="29">_<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><literal type="string" pos:line="42" pos:column="31">"Could not parse object '%s'."<pos:position pos:line="42" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="42" pos:column="64">rev<pos:position pos:line="42" pos:column="67"/></name></expr></argument>)<pos:position pos:line="42" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="69"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">oidcpy<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><operator pos:line="43" pos:column="24">&amp;<pos:position pos:line="43" pos:column="29"/></operator><name pos:line="43" pos:column="25">oid<pos:position pos:line="43" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="30">&amp;<pos:position pos:line="43" pos:column="35"/></operator><name><name pos:line="43" pos:column="31">commit<pos:position pos:line="43" pos:column="37"/></name><operator pos:line="43" pos:column="37">-&gt;<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="39">object<pos:position pos:line="43" pos:column="45"/></name><operator pos:line="43" pos:column="45">.<pos:position pos:line="43" pos:column="46"/></operator><name pos:line="43" pos:column="46">oid<pos:position pos:line="43" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if></elseif> <else pos:line="44" pos:column="11">else <block pos:line="44" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="45" pos:column="17">struct<pos:position pos:line="45" pos:column="23"/></name> <name pos:line="45" pos:column="24">tree<pos:position pos:line="45" pos:column="28"/></name></name> <modifier pos:line="45" pos:column="29">*<pos:position pos:line="45" pos:column="30"/></modifier></type><name pos:line="45" pos:column="30">tree<pos:position pos:line="45" pos:column="34"/></name></decl>;<pos:position pos:line="45" pos:column="35"/></decl_stmt>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><call><name pos:line="46" pos:column="21">get_sha1_treeish<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><name pos:line="46" pos:column="38">rev<pos:position pos:line="46" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="43">oid<pos:position pos:line="46" pos:column="46"/></name><operator pos:line="46" pos:column="46">.<pos:position pos:line="46" pos:column="47"/></operator><name pos:line="46" pos:column="47">hash<pos:position pos:line="46" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="53"/></condition><then pos:line="46" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="25">die<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><call><name pos:line="47" pos:column="29">_<pos:position pos:line="47" pos:column="30"/></name><argument_list pos:line="47" pos:column="30">(<argument><expr><literal type="string" pos:line="47" pos:column="31">"Failed to resolve '%s' as a valid tree."<pos:position pos:line="47" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="47" pos:column="75">rev<pos:position pos:line="47" pos:column="78"/></name></expr></argument>)<pos:position pos:line="47" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="80"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="48" pos:column="17">tree<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <call><name pos:line="48" pos:column="24">parse_tree_indirect<pos:position pos:line="48" pos:column="43"/></name><argument_list pos:line="48" pos:column="43">(<argument><expr><name><name pos:line="48" pos:column="44">oid<pos:position pos:line="48" pos:column="47"/></name><operator pos:line="48" pos:column="47">.<pos:position pos:line="48" pos:column="48"/></operator><name pos:line="48" pos:column="48">hash<pos:position pos:line="48" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="54"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><operator pos:line="49" pos:column="21">!<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">tree<pos:position pos:line="49" pos:column="26"/></name></expr>)<pos:position pos:line="49" pos:column="27"/></condition><then pos:line="49" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="25">die<pos:position pos:line="50" pos:column="28"/></name><argument_list pos:line="50" pos:column="28">(<argument><expr><call><name pos:line="50" pos:column="29">_<pos:position pos:line="50" pos:column="30"/></name><argument_list pos:line="50" pos:column="30">(<argument><expr><literal type="string" pos:line="50" pos:column="31">"Could not parse object '%s'."<pos:position pos:line="50" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="50" pos:column="64">rev<pos:position pos:line="50" pos:column="67"/></name></expr></argument>)<pos:position pos:line="50" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="69"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">oidcpy<pos:position pos:line="51" pos:column="23"/></name><argument_list pos:line="51" pos:column="23">(<argument><expr><operator pos:line="51" pos:column="24">&amp;<pos:position pos:line="51" pos:column="29"/></operator><name pos:line="51" pos:column="25">oid<pos:position pos:line="51" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="30">&amp;<pos:position pos:line="51" pos:column="35"/></operator><name><name pos:line="51" pos:column="31">tree<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">-&gt;<pos:position pos:line="51" pos:column="40"/></operator><name pos:line="51" pos:column="37">object<pos:position pos:line="51" pos:column="43"/></name><operator pos:line="51" pos:column="43">.<pos:position pos:line="51" pos:column="44"/></operator><name pos:line="51" pos:column="44">oid<pos:position pos:line="51" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></else></if>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">patch_mode<pos:position pos:line="54" pos:column="23"/></name></expr>)<pos:position pos:line="54" pos:column="24"/></condition><then pos:line="54" pos:column="24"> <block pos:line="54" pos:column="25">{
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name pos:line="55" pos:column="21">reset_type<pos:position pos:line="55" pos:column="31"/></name> <operator pos:line="55" pos:column="32">!=<pos:position pos:line="55" pos:column="34"/></operator> <name pos:line="55" pos:column="35">NONE<pos:position pos:line="55" pos:column="39"/></name></expr>)<pos:position pos:line="55" pos:column="40"/></condition><then pos:line="55" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="25">die<pos:position pos:line="56" pos:column="28"/></name><argument_list pos:line="56" pos:column="28">(<argument><expr><call><name pos:line="56" pos:column="29">_<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><literal type="string" pos:line="56" pos:column="31">"--patch is incompatible with --{hard,mixed,soft}"<pos:position pos:line="56" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="84"/></expr_stmt></block></then></if>
		<return pos:line="57" pos:column="17">return <expr><call><name pos:line="57" pos:column="24">run_add_interactive<pos:position pos:line="57" pos:column="43"/></name><argument_list pos:line="57" pos:column="43">(<argument><expr><name pos:line="57" pos:column="44">rev<pos:position pos:line="57" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="49">"--patch=reset"<pos:position pos:line="57" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="57" pos:column="66">&amp;<pos:position pos:line="57" pos:column="71"/></operator><name pos:line="57" pos:column="67">pathspec<pos:position pos:line="57" pos:column="75"/></name></expr></argument>)<pos:position pos:line="57" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="77"/></return>
	}<pos:position pos:line="58" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="60" pos:column="9">/* git reset tree [--] paths... can be used to
	 * load chosen paths from the tree into the index without
	 * affecting the working tree nor HEAD. */</comment>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name><name pos:line="63" pos:column="13">pathspec<pos:position pos:line="63" pos:column="21"/></name><operator pos:line="63" pos:column="21">.<pos:position pos:line="63" pos:column="22"/></operator><name pos:line="63" pos:column="22">nr<pos:position pos:line="63" pos:column="24"/></name></name></expr>)<pos:position pos:line="63" pos:column="25"/></condition><then pos:line="63" pos:column="25"> <block pos:line="63" pos:column="26">{
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">reset_type<pos:position pos:line="64" pos:column="31"/></name> <operator pos:line="64" pos:column="32">==<pos:position pos:line="64" pos:column="34"/></operator> <name pos:line="64" pos:column="35">MIXED<pos:position pos:line="64" pos:column="40"/></name></expr>)<pos:position pos:line="64" pos:column="41"/></condition><then pos:line="64" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="25">warning<pos:position pos:line="65" pos:column="32"/></name><argument_list pos:line="65" pos:column="32">(<argument><expr><call><name pos:line="65" pos:column="33">_<pos:position pos:line="65" pos:column="34"/></name><argument_list pos:line="65" pos:column="34">(<argument><expr><literal type="string" pos:line="65" pos:column="35">"--mixed with paths is deprecated; use 'git reset -- &lt;paths&gt;' instead."<pos:position pos:line="65" pos:column="112"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="107"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="109"/></expr_stmt></block></then>
		<elseif pos:line="66" pos:column="17">else <if pos:line="66" pos:column="22">if <condition pos:line="66" pos:column="25">(<expr><name pos:line="66" pos:column="26">reset_type<pos:position pos:line="66" pos:column="36"/></name> <operator pos:line="66" pos:column="37">!=<pos:position pos:line="66" pos:column="39"/></operator> <name pos:line="66" pos:column="40">NONE<pos:position pos:line="66" pos:column="44"/></name></expr>)<pos:position pos:line="66" pos:column="45"/></condition><then pos:line="66" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="25">die<pos:position pos:line="67" pos:column="28"/></name><argument_list pos:line="67" pos:column="28">(<argument><expr><call><name pos:line="67" pos:column="29">_<pos:position pos:line="67" pos:column="30"/></name><argument_list pos:line="67" pos:column="30">(<argument><expr><literal type="string" pos:line="67" pos:column="31">"Cannot do %s reset with paths."<pos:position pos:line="67" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="64"/></argument_list></call></expr></argument>,
					<argument><expr><call><name pos:line="68" pos:column="41">_<pos:position pos:line="68" pos:column="42"/></name><argument_list pos:line="68" pos:column="42">(<argument><expr><name><name pos:line="68" pos:column="43">reset_type_names<pos:position pos:line="68" pos:column="59"/></name><index pos:line="68" pos:column="59">[<expr><name pos:line="68" pos:column="60">reset_type<pos:position pos:line="68" pos:column="70"/></name></expr>]<pos:position pos:line="68" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="68" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="74"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="69" pos:column="10"/></block></then></if>
	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">reset_type<pos:position pos:line="70" pos:column="23"/></name> <operator pos:line="70" pos:column="24">==<pos:position pos:line="70" pos:column="26"/></operator> <name pos:line="70" pos:column="27">NONE<pos:position pos:line="70" pos:column="31"/></name></expr>)<pos:position pos:line="70" pos:column="32"/></condition><then pos:line="70" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="17">reset_type<pos:position pos:line="71" pos:column="27"/></name> <operator pos:line="71" pos:column="28">=<pos:position pos:line="71" pos:column="29"/></operator> <name pos:line="71" pos:column="30">MIXED<pos:position pos:line="71" pos:column="35"/></name></expr>;<pos:position pos:line="71" pos:column="36"/></expr_stmt></block></then></if> <comment type="block" pos:line="71" pos:column="37">/* by default */</comment>

	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">reset_type<pos:position pos:line="73" pos:column="23"/></name> <operator pos:line="73" pos:column="24">!=<pos:position pos:line="73" pos:column="26"/></operator> <name pos:line="73" pos:column="27">SOFT<pos:position pos:line="73" pos:column="31"/></name> <operator pos:line="73" pos:column="32">&amp;&amp;<pos:position pos:line="73" pos:column="42"/></operator> <operator pos:line="73" pos:column="35">(<pos:position pos:line="73" pos:column="36"/></operator><name pos:line="73" pos:column="36">reset_type<pos:position pos:line="73" pos:column="46"/></name> <operator pos:line="73" pos:column="47">!=<pos:position pos:line="73" pos:column="49"/></operator> <name pos:line="73" pos:column="50">MIXED<pos:position pos:line="73" pos:column="55"/></name> <operator pos:line="73" pos:column="56">||<pos:position pos:line="73" pos:column="58"/></operator> <call><name pos:line="73" pos:column="59">get_git_work_tree<pos:position pos:line="73" pos:column="76"/></name><argument_list pos:line="73" pos:column="76">()<pos:position pos:line="73" pos:column="78"/></argument_list></call><operator pos:line="73" pos:column="78">)<pos:position pos:line="73" pos:column="79"/></operator></expr>)<pos:position pos:line="73" pos:column="80"/></condition><then pos:line="73" pos:column="80">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="17">setup_work_tree<pos:position pos:line="74" pos:column="32"/></name><argument_list pos:line="74" pos:column="32">()<pos:position pos:line="74" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="35"/></expr_stmt></block></then></if>

	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><name pos:line="76" pos:column="13">reset_type<pos:position pos:line="76" pos:column="23"/></name> <operator pos:line="76" pos:column="24">==<pos:position pos:line="76" pos:column="26"/></operator> <name pos:line="76" pos:column="27">MIXED<pos:position pos:line="76" pos:column="32"/></name> <operator pos:line="76" pos:column="33">&amp;&amp;<pos:position pos:line="76" pos:column="43"/></operator> <call><name pos:line="76" pos:column="36">is_bare_repository<pos:position pos:line="76" pos:column="54"/></name><argument_list pos:line="76" pos:column="54">()<pos:position pos:line="76" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="57"/></condition><then pos:line="76" pos:column="57">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="17">die<pos:position pos:line="77" pos:column="20"/></name><argument_list pos:line="77" pos:column="20">(<argument><expr><call><name pos:line="77" pos:column="21">_<pos:position pos:line="77" pos:column="22"/></name><argument_list pos:line="77" pos:column="22">(<argument><expr><literal type="string" pos:line="77" pos:column="23">"%s reset is not allowed in a bare repository"<pos:position pos:line="77" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="70"/></argument_list></call></expr></argument>,
		    <argument><expr><call><name pos:line="78" pos:column="21">_<pos:position pos:line="78" pos:column="22"/></name><argument_list pos:line="78" pos:column="22">(<argument><expr><name><name pos:line="78" pos:column="23">reset_type_names<pos:position pos:line="78" pos:column="39"/></name><index pos:line="78" pos:column="39">[<expr><name pos:line="78" pos:column="40">reset_type<pos:position pos:line="78" pos:column="50"/></name></expr>]<pos:position pos:line="78" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="78" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="78" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="54"/></expr_stmt></block></then></if>

	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">intent_to_add<pos:position pos:line="80" pos:column="26"/></name> <operator pos:line="80" pos:column="27">&amp;&amp;<pos:position pos:line="80" pos:column="37"/></operator> <name pos:line="80" pos:column="30">reset_type<pos:position pos:line="80" pos:column="40"/></name> <operator pos:line="80" pos:column="41">!=<pos:position pos:line="80" pos:column="43"/></operator> <name pos:line="80" pos:column="44">MIXED<pos:position pos:line="80" pos:column="49"/></name></expr>)<pos:position pos:line="80" pos:column="50"/></condition><then pos:line="80" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="17">die<pos:position pos:line="81" pos:column="20"/></name><argument_list pos:line="81" pos:column="20">(<argument><expr><call><name pos:line="81" pos:column="21">_<pos:position pos:line="81" pos:column="22"/></name><argument_list pos:line="81" pos:column="22">(<argument><expr><literal type="string" pos:line="81" pos:column="23">"-N can only be used with --mixed"<pos:position pos:line="81" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="81" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="60"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="83" pos:column="9">/* Soft reset does not touch the index file nor the working tree
	 * at all, but requires them in a good order.  Other resets reset
	 * the index file to the tree object we are switching to. */</comment>
	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><name pos:line="86" pos:column="13">reset_type<pos:position pos:line="86" pos:column="23"/></name> <operator pos:line="86" pos:column="24">==<pos:position pos:line="86" pos:column="26"/></operator> <name pos:line="86" pos:column="27">SOFT<pos:position pos:line="86" pos:column="31"/></name> <operator pos:line="86" pos:column="32">||<pos:position pos:line="86" pos:column="34"/></operator> <name pos:line="86" pos:column="35">reset_type<pos:position pos:line="86" pos:column="45"/></name> <operator pos:line="86" pos:column="46">==<pos:position pos:line="86" pos:column="48"/></operator> <name pos:line="86" pos:column="49">KEEP<pos:position pos:line="86" pos:column="53"/></name></expr>)<pos:position pos:line="86" pos:column="54"/></condition><then pos:line="86" pos:column="54">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="17">die_if_unmerged_cache<pos:position pos:line="87" pos:column="38"/></name><argument_list pos:line="87" pos:column="38">(<argument><expr><name pos:line="87" pos:column="39">reset_type<pos:position pos:line="87" pos:column="49"/></name></expr></argument>)<pos:position pos:line="87" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="51"/></expr_stmt></block></then></if>

	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">reset_type<pos:position pos:line="89" pos:column="23"/></name> <operator pos:line="89" pos:column="24">!=<pos:position pos:line="89" pos:column="26"/></operator> <name pos:line="89" pos:column="27">SOFT<pos:position pos:line="89" pos:column="31"/></name></expr>)<pos:position pos:line="89" pos:column="32"/></condition><then pos:line="89" pos:column="32"> <block pos:line="89" pos:column="33">{
		<decl_stmt><decl><type><name><name pos:line="90" pos:column="17">struct<pos:position pos:line="90" pos:column="23"/></name> <name pos:line="90" pos:column="24">lock_file<pos:position pos:line="90" pos:column="33"/></name></name> <modifier pos:line="90" pos:column="34">*<pos:position pos:line="90" pos:column="35"/></modifier></type><name pos:line="90" pos:column="35">lock<pos:position pos:line="90" pos:column="39"/></name> <init pos:line="90" pos:column="40">= <expr><call><name pos:line="90" pos:column="42">xcalloc<pos:position pos:line="90" pos:column="49"/></name><argument_list pos:line="90" pos:column="49">(<argument><expr><literal type="number" pos:line="90" pos:column="50">1<pos:position pos:line="90" pos:column="51"/></literal></expr></argument>, <argument><expr><sizeof pos:line="90" pos:column="53">sizeof<argument_list pos:line="90" pos:column="59">(<argument><expr><operator pos:line="90" pos:column="60">*<pos:position pos:line="90" pos:column="61"/></operator><name pos:line="90" pos:column="61">lock<pos:position pos:line="90" pos:column="65"/></name></expr></argument>)<pos:position pos:line="90" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="90" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="90" pos:column="68"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">hold_locked_index<pos:position pos:line="91" pos:column="34"/></name><argument_list pos:line="91" pos:column="34">(<argument><expr><name pos:line="91" pos:column="35">lock<pos:position pos:line="91" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="41">LOCK_DIE_ON_ERROR<pos:position pos:line="91" pos:column="58"/></name></expr></argument>)<pos:position pos:line="91" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="60"/></expr_stmt>
		<if pos:line="92" pos:column="17">if <condition pos:line="92" pos:column="20">(<expr><name pos:line="92" pos:column="21">reset_type<pos:position pos:line="92" pos:column="31"/></name> <operator pos:line="92" pos:column="32">==<pos:position pos:line="92" pos:column="34"/></operator> <name pos:line="92" pos:column="35">MIXED<pos:position pos:line="92" pos:column="40"/></name></expr>)<pos:position pos:line="92" pos:column="41"/></condition><then pos:line="92" pos:column="41"> <block pos:line="92" pos:column="42">{
			<decl_stmt><decl><type><name pos:line="93" pos:column="25">int<pos:position pos:line="93" pos:column="28"/></name></type> <name pos:line="93" pos:column="29">flags<pos:position pos:line="93" pos:column="34"/></name> <init pos:line="93" pos:column="35">= <expr><ternary><condition><expr><name pos:line="93" pos:column="37">quiet<pos:position pos:line="93" pos:column="42"/></name></expr> ?<pos:position pos:line="93" pos:column="44"/></condition><then pos:line="93" pos:column="44"> <expr><name pos:line="93" pos:column="45">REFRESH_QUIET<pos:position pos:line="93" pos:column="58"/></name></expr> <pos:position pos:line="93" pos:column="59"/></then><else pos:line="93" pos:column="59">: <expr><name pos:line="93" pos:column="61">REFRESH_IN_PORCELAIN<pos:position pos:line="93" pos:column="81"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="93" pos:column="82"/></decl_stmt>
			<if pos:line="94" pos:column="25">if <condition pos:line="94" pos:column="28">(<expr><call><name pos:line="94" pos:column="29">read_from_tree<pos:position pos:line="94" pos:column="43"/></name><argument_list pos:line="94" pos:column="43">(<argument><expr><operator pos:line="94" pos:column="44">&amp;<pos:position pos:line="94" pos:column="49"/></operator><name pos:line="94" pos:column="45">pathspec<pos:position pos:line="94" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="94" pos:column="55">&amp;<pos:position pos:line="94" pos:column="60"/></operator><name pos:line="94" pos:column="56">oid<pos:position pos:line="94" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="61">intent_to_add<pos:position pos:line="94" pos:column="74"/></name></expr></argument>)<pos:position pos:line="94" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="76"/></condition><then pos:line="94" pos:column="76">
				<block type="pseudo"><return pos:line="95" pos:column="33">return <expr><literal type="number" pos:line="95" pos:column="40">1<pos:position pos:line="95" pos:column="41"/></literal></expr>;<pos:position pos:line="95" pos:column="42"/></return></block></then></if>
			<if pos:line="96" pos:column="25">if <condition pos:line="96" pos:column="28">(<expr><call><name pos:line="96" pos:column="29">get_git_work_tree<pos:position pos:line="96" pos:column="46"/></name><argument_list pos:line="96" pos:column="46">()<pos:position pos:line="96" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="49"/></condition><then pos:line="96" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="97" pos:column="33">refresh_index<pos:position pos:line="97" pos:column="46"/></name><argument_list pos:line="97" pos:column="46">(<argument><expr><operator pos:line="97" pos:column="47">&amp;<pos:position pos:line="97" pos:column="52"/></operator><name pos:line="97" pos:column="48">the_index<pos:position pos:line="97" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="59">flags<pos:position pos:line="97" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="66">NULL<pos:position pos:line="97" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="72">NULL<pos:position pos:line="97" pos:column="76"/></name></expr></argument>,
					      <argument><expr><call><name pos:line="98" pos:column="47">_<pos:position pos:line="98" pos:column="48"/></name><argument_list pos:line="98" pos:column="48">(<argument><expr><literal type="string" pos:line="98" pos:column="49">"Unstaged changes after reset:"<pos:position pos:line="98" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="98" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="83"/></expr_stmt></block></then></if>
		}<pos:position pos:line="99" pos:column="18"/></block></then> <else pos:line="99" pos:column="19">else <block pos:line="99" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="100" pos:column="25">int<pos:position pos:line="100" pos:column="28"/></name></type> <name pos:line="100" pos:column="29">err<pos:position pos:line="100" pos:column="32"/></name> <init pos:line="100" pos:column="33">= <expr><call><name pos:line="100" pos:column="35">reset_index<pos:position pos:line="100" pos:column="46"/></name><argument_list pos:line="100" pos:column="46">(<argument><expr><operator pos:line="100" pos:column="47">&amp;<pos:position pos:line="100" pos:column="52"/></operator><name pos:line="100" pos:column="48">oid<pos:position pos:line="100" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="53">reset_type<pos:position pos:line="100" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="65">quiet<pos:position pos:line="100" pos:column="70"/></name></expr></argument>)<pos:position pos:line="100" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="100" pos:column="72"/></decl_stmt>
			<if pos:line="101" pos:column="25">if <condition pos:line="101" pos:column="28">(<expr><name pos:line="101" pos:column="29">reset_type<pos:position pos:line="101" pos:column="39"/></name> <operator pos:line="101" pos:column="40">==<pos:position pos:line="101" pos:column="42"/></operator> <name pos:line="101" pos:column="43">KEEP<pos:position pos:line="101" pos:column="47"/></name> <operator pos:line="101" pos:column="48">&amp;&amp;<pos:position pos:line="101" pos:column="58"/></operator> <operator pos:line="101" pos:column="51">!<pos:position pos:line="101" pos:column="52"/></operator><name pos:line="101" pos:column="52">err<pos:position pos:line="101" pos:column="55"/></name></expr>)<pos:position pos:line="101" pos:column="56"/></condition><then pos:line="101" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name pos:line="102" pos:column="33">err<pos:position pos:line="102" pos:column="36"/></name> <operator pos:line="102" pos:column="37">=<pos:position pos:line="102" pos:column="38"/></operator> <call><name pos:line="102" pos:column="39">reset_index<pos:position pos:line="102" pos:column="50"/></name><argument_list pos:line="102" pos:column="50">(<argument><expr><operator pos:line="102" pos:column="51">&amp;<pos:position pos:line="102" pos:column="56"/></operator><name pos:line="102" pos:column="52">oid<pos:position pos:line="102" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="57">MIXED<pos:position pos:line="102" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="64">quiet<pos:position pos:line="102" pos:column="69"/></name></expr></argument>)<pos:position pos:line="102" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="71"/></expr_stmt></block></then></if>
			<if pos:line="103" pos:column="25">if <condition pos:line="103" pos:column="28">(<expr><name pos:line="103" pos:column="29">err<pos:position pos:line="103" pos:column="32"/></name></expr>)<pos:position pos:line="103" pos:column="33"/></condition><then pos:line="103" pos:column="33">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="104" pos:column="33">die<pos:position pos:line="104" pos:column="36"/></name><argument_list pos:line="104" pos:column="36">(<argument><expr><call><name pos:line="104" pos:column="37">_<pos:position pos:line="104" pos:column="38"/></name><argument_list pos:line="104" pos:column="38">(<argument><expr><literal type="string" pos:line="104" pos:column="39">"Could not reset index file to revision '%s'."<pos:position pos:line="104" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="86"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="104" pos:column="88">rev<pos:position pos:line="104" pos:column="91"/></name></expr></argument>)<pos:position pos:line="104" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="93"/></expr_stmt></block></then></if>
		}<pos:position pos:line="105" pos:column="18"/></block></else></if>

		<if pos:line="107" pos:column="17">if <condition pos:line="107" pos:column="20">(<expr><call><name pos:line="107" pos:column="21">write_locked_index<pos:position pos:line="107" pos:column="39"/></name><argument_list pos:line="107" pos:column="39">(<argument><expr><operator pos:line="107" pos:column="40">&amp;<pos:position pos:line="107" pos:column="45"/></operator><name pos:line="107" pos:column="41">the_index<pos:position pos:line="107" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="52">lock<pos:position pos:line="107" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="58">COMMIT_LOCK<pos:position pos:line="107" pos:column="69"/></name></expr></argument>)<pos:position pos:line="107" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="107" pos:column="71"/></condition><then pos:line="107" pos:column="71">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="108" pos:column="25">die<pos:position pos:line="108" pos:column="28"/></name><argument_list pos:line="108" pos:column="28">(<argument><expr><call><name pos:line="108" pos:column="29">_<pos:position pos:line="108" pos:column="30"/></name><argument_list pos:line="108" pos:column="30">(<argument><expr><literal type="string" pos:line="108" pos:column="31">"Could not write new index file."<pos:position pos:line="108" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="108" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="67"/></expr_stmt></block></then></if>
	}<pos:position pos:line="109" pos:column="10"/></block></then></if>

	<if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><operator pos:line="111" pos:column="13">!<pos:position pos:line="111" pos:column="14"/></operator><name><name pos:line="111" pos:column="14">pathspec<pos:position pos:line="111" pos:column="22"/></name><operator pos:line="111" pos:column="22">.<pos:position pos:line="111" pos:column="23"/></operator><name pos:line="111" pos:column="23">nr<pos:position pos:line="111" pos:column="25"/></name></name> <operator pos:line="111" pos:column="26">&amp;&amp;<pos:position pos:line="111" pos:column="36"/></operator> <operator pos:line="111" pos:column="29">!<pos:position pos:line="111" pos:column="30"/></operator><name pos:line="111" pos:column="30">unborn<pos:position pos:line="111" pos:column="36"/></name></expr>)<pos:position pos:line="111" pos:column="37"/></condition><then pos:line="111" pos:column="37"> <block pos:line="111" pos:column="38">{
		<comment type="block" pos:line="112" pos:column="17">/* Any resets without paths update HEAD to the head being
		 * switched to, saving the previous head in ORIG_HEAD before. */</comment>
		<expr_stmt><expr><name pos:line="114" pos:column="17">update_ref_status<pos:position pos:line="114" pos:column="34"/></name> <operator pos:line="114" pos:column="35">=<pos:position pos:line="114" pos:column="36"/></operator> <call><name pos:line="114" pos:column="37">reset_refs<pos:position pos:line="114" pos:column="47"/></name><argument_list pos:line="114" pos:column="47">(<argument><expr><name pos:line="114" pos:column="48">rev<pos:position pos:line="114" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="114" pos:column="53">&amp;<pos:position pos:line="114" pos:column="58"/></operator><name pos:line="114" pos:column="54">oid<pos:position pos:line="114" pos:column="57"/></name></expr></argument>)<pos:position pos:line="114" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="59"/></expr_stmt>

		<if pos:line="116" pos:column="17">if <condition pos:line="116" pos:column="20">(<expr><name pos:line="116" pos:column="21">reset_type<pos:position pos:line="116" pos:column="31"/></name> <operator pos:line="116" pos:column="32">==<pos:position pos:line="116" pos:column="34"/></operator> <name pos:line="116" pos:column="35">HARD<pos:position pos:line="116" pos:column="39"/></name> <operator pos:line="116" pos:column="40">&amp;&amp;<pos:position pos:line="116" pos:column="50"/></operator> <operator pos:line="116" pos:column="43">!<pos:position pos:line="116" pos:column="44"/></operator><name pos:line="116" pos:column="44">update_ref_status<pos:position pos:line="116" pos:column="61"/></name> <operator pos:line="116" pos:column="62">&amp;&amp;<pos:position pos:line="116" pos:column="72"/></operator> <operator pos:line="116" pos:column="65">!<pos:position pos:line="116" pos:column="66"/></operator><name pos:line="116" pos:column="66">quiet<pos:position pos:line="116" pos:column="71"/></name></expr>)<pos:position pos:line="116" pos:column="72"/></condition><then pos:line="116" pos:column="72">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="117" pos:column="25">print_new_head_line<pos:position pos:line="117" pos:column="44"/></name><argument_list pos:line="117" pos:column="44">(<argument><expr><call><name pos:line="117" pos:column="45">lookup_commit_reference<pos:position pos:line="117" pos:column="68"/></name><argument_list pos:line="117" pos:column="68">(<argument><expr><name><name pos:line="117" pos:column="69">oid<pos:position pos:line="117" pos:column="72"/></name><operator pos:line="117" pos:column="72">.<pos:position pos:line="117" pos:column="73"/></operator><name pos:line="117" pos:column="73">hash<pos:position pos:line="117" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="117" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="80"/></expr_stmt></block></then></if>
	}<pos:position pos:line="118" pos:column="10"/></block></then></if>
	<if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><operator pos:line="119" pos:column="13">!<pos:position pos:line="119" pos:column="14"/></operator><name><name pos:line="119" pos:column="14">pathspec<pos:position pos:line="119" pos:column="22"/></name><operator pos:line="119" pos:column="22">.<pos:position pos:line="119" pos:column="23"/></operator><name pos:line="119" pos:column="23">nr<pos:position pos:line="119" pos:column="25"/></name></name></expr>)<pos:position pos:line="119" pos:column="26"/></condition><then pos:line="119" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="17">remove_branch_state<pos:position pos:line="120" pos:column="36"/></name><argument_list pos:line="120" pos:column="36">()<pos:position pos:line="120" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="39"/></expr_stmt></block></then></if>

	<return pos:line="122" pos:column="9">return <expr><name pos:line="122" pos:column="16">update_ref_status<pos:position pos:line="122" pos:column="33"/></name></expr>;<pos:position pos:line="122" pos:column="34"/></return>
}<pos:position pos:line="123" pos:column="2"/></block></function></unit>
