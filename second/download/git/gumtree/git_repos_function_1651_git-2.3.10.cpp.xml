<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1651_git-2.3.10.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sha1_object_info_extended<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">unsigned<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">sha1<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="58">struct<pos:position pos:line="1" pos:column="64"/></name> <name pos:line="1" pos:column="65">object_info<pos:position pos:line="1" pos:column="76"/></name></name> <modifier pos:line="1" pos:column="77">*<pos:position pos:line="1" pos:column="78"/></modifier></type><name pos:line="1" pos:column="78">oi<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="82">unsigned<pos:position pos:line="1" pos:column="90"/></name></type> <name pos:line="1" pos:column="91">flags<pos:position pos:line="1" pos:column="96"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="97"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">cached_object<pos:position pos:line="3" pos:column="29"/></name></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">co<pos:position pos:line="3" pos:column="33"/></name></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">pack_entry<pos:position pos:line="4" pos:column="26"/></name></name></type> <name pos:line="4" pos:column="27">e<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">rtype<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">unsigned<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">char<pos:position pos:line="6" pos:column="28"/></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></type><name pos:line="6" pos:column="30">real<pos:position pos:line="6" pos:column="34"/></name> <init pos:line="6" pos:column="35">= <expr><call><name pos:line="6" pos:column="37">lookup_replace_object_extended<pos:position pos:line="6" pos:column="67"/></name><argument_list pos:line="6" pos:column="67">(<argument><expr><name pos:line="6" pos:column="68">sha1<pos:position pos:line="6" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="74">flags<pos:position pos:line="6" pos:column="79"/></name></expr></argument>)<pos:position pos:line="6" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="81"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">co<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">find_cached_object<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">real<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="39"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">co<pos:position pos:line="9" pos:column="15"/></name></expr>)<pos:position pos:line="9" pos:column="16"/></condition><then pos:line="9" pos:column="16"> <block pos:line="9" pos:column="17">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name><name pos:line="10" pos:column="21">oi<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">-&gt;<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="25">typep<pos:position pos:line="10" pos:column="30"/></name></name></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="11" pos:column="25">*<pos:position pos:line="11" pos:column="26"/></operator><operator pos:line="11" pos:column="26">(<pos:position pos:line="11" pos:column="27"/></operator><name><name pos:line="11" pos:column="27">oi<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">-&gt;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="31">typep<pos:position pos:line="11" pos:column="36"/></name></name><operator pos:line="11" pos:column="36">)<pos:position pos:line="11" pos:column="37"/></operator> <operator pos:line="11" pos:column="38">=<pos:position pos:line="11" pos:column="39"/></operator> <name><name pos:line="11" pos:column="40">co<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">-&gt;<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="44">type<pos:position pos:line="11" pos:column="48"/></name></name></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt></block></then></if>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name><name pos:line="12" pos:column="21">oi<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">-&gt;<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="25">sizep<pos:position pos:line="12" pos:column="30"/></name></name></expr>)<pos:position pos:line="12" pos:column="31"/></condition><then pos:line="12" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="13" pos:column="25">*<pos:position pos:line="13" pos:column="26"/></operator><operator pos:line="13" pos:column="26">(<pos:position pos:line="13" pos:column="27"/></operator><name><name pos:line="13" pos:column="27">oi<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">sizep<pos:position pos:line="13" pos:column="36"/></name></name><operator pos:line="13" pos:column="36">)<pos:position pos:line="13" pos:column="37"/></operator> <operator pos:line="13" pos:column="38">=<pos:position pos:line="13" pos:column="39"/></operator> <name><name pos:line="13" pos:column="40">co<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">-&gt;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="44">size<pos:position pos:line="13" pos:column="48"/></name></name></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt></block></then></if>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name><name pos:line="14" pos:column="21">oi<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">-&gt;<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="25">disk_sizep<pos:position pos:line="14" pos:column="35"/></name></name></expr>)<pos:position pos:line="14" pos:column="36"/></condition><then pos:line="14" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="15" pos:column="25">*<pos:position pos:line="15" pos:column="26"/></operator><operator pos:line="15" pos:column="26">(<pos:position pos:line="15" pos:column="27"/></operator><name><name pos:line="15" pos:column="27">oi<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">disk_sizep<pos:position pos:line="15" pos:column="41"/></name></name><operator pos:line="15" pos:column="41">)<pos:position pos:line="15" pos:column="42"/></operator> <operator pos:line="15" pos:column="43">=<pos:position pos:line="15" pos:column="44"/></operator> <literal type="number" pos:line="15" pos:column="45">0<pos:position pos:line="15" pos:column="46"/></literal></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt></block></then></if>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name><name pos:line="16" pos:column="21">oi<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">-&gt;<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="25">delta_base_sha1<pos:position pos:line="16" pos:column="40"/></name></name></expr>)<pos:position pos:line="16" pos:column="41"/></condition><then pos:line="16" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="25">hashclr<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name><name pos:line="17" pos:column="33">oi<pos:position pos:line="17" pos:column="35"/></name><operator pos:line="17" pos:column="35">-&gt;<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="37">delta_base_sha1<pos:position pos:line="17" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="54"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="18" pos:column="17">oi<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">-&gt;<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="21">whence<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="30">OI_CACHED<pos:position pos:line="18" pos:column="39"/></name></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><call><name pos:line="22" pos:column="14">find_pack_entry<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">real<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="36">&amp;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="37">e<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="40"/></condition><then pos:line="22" pos:column="40"> <block pos:line="22" pos:column="41">{
		<comment type="block" pos:line="23" pos:column="17">/* Most likely it's a loose object. */</comment>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><call><name pos:line="24" pos:column="22">sha1_loose_object_info<pos:position pos:line="24" pos:column="44"/></name><argument_list pos:line="24" pos:column="44">(<argument><expr><name pos:line="24" pos:column="45">real<pos:position pos:line="24" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="51">oi<pos:position pos:line="24" pos:column="53"/></name></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="55"/></condition><then pos:line="24" pos:column="55"> <block pos:line="24" pos:column="56">{
			<expr_stmt><expr><name><name pos:line="25" pos:column="25">oi<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">-&gt;<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="29">whence<pos:position pos:line="25" pos:column="35"/></name></name> <operator pos:line="25" pos:column="36">=<pos:position pos:line="25" pos:column="37"/></operator> <name pos:line="25" pos:column="38">OI_LOOSE<pos:position pos:line="25" pos:column="46"/></name></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>
			<return pos:line="26" pos:column="25">return <expr><literal type="number" pos:line="26" pos:column="32">0<pos:position pos:line="26" pos:column="33"/></literal></expr>;<pos:position pos:line="26" pos:column="34"/></return>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="29" pos:column="17">/* Not a loose object; someone else may have just packed it. */</comment>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">reprepare_packed_git<pos:position pos:line="30" pos:column="37"/></name><argument_list pos:line="30" pos:column="37">()<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><operator pos:line="31" pos:column="21">!<pos:position pos:line="31" pos:column="22"/></operator><call><name pos:line="31" pos:column="22">find_pack_entry<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><name pos:line="31" pos:column="38">real<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="44">&amp;<pos:position pos:line="31" pos:column="49"/></operator><name pos:line="31" pos:column="45">e<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="48"/></condition><then pos:line="31" pos:column="48">
			<block type="pseudo"><return pos:line="32" pos:column="25">return <expr><operator pos:line="32" pos:column="32">-<pos:position pos:line="32" pos:column="33"/></operator><literal type="number" pos:line="32" pos:column="33">1<pos:position pos:line="32" pos:column="34"/></literal></expr>;<pos:position pos:line="32" pos:column="35"/></return></block></then></if>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="35" pos:column="9">rtype<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <call><name pos:line="35" pos:column="17">packed_object_info<pos:position pos:line="35" pos:column="35"/></name><argument_list pos:line="35" pos:column="35">(<argument><expr><name><name pos:line="35" pos:column="36">e<pos:position pos:line="35" pos:column="37"/></name><operator pos:line="35" pos:column="37">.<pos:position pos:line="35" pos:column="38"/></operator><name pos:line="35" pos:column="38">p<pos:position pos:line="35" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="41">e<pos:position pos:line="35" pos:column="42"/></name><operator pos:line="35" pos:column="42">.<pos:position pos:line="35" pos:column="43"/></operator><name pos:line="35" pos:column="43">offset<pos:position pos:line="35" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="51">oi<pos:position pos:line="35" pos:column="53"/></name></expr></argument>)<pos:position pos:line="35" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="55"/></expr_stmt>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">rtype<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">&lt;<pos:position pos:line="36" pos:column="23"/></operator> <literal type="number" pos:line="36" pos:column="21">0<pos:position pos:line="36" pos:column="22"/></literal></expr>)<pos:position pos:line="36" pos:column="23"/></condition><then pos:line="36" pos:column="23"> <block pos:line="36" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">mark_bad_packed_object<pos:position pos:line="37" pos:column="39"/></name><argument_list pos:line="37" pos:column="39">(<argument><expr><name><name pos:line="37" pos:column="40">e<pos:position pos:line="37" pos:column="41"/></name><operator pos:line="37" pos:column="41">.<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="42">p<pos:position pos:line="37" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="45">real<pos:position pos:line="37" pos:column="49"/></name></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt>
		<return pos:line="38" pos:column="17">return <expr><call><name pos:line="38" pos:column="24">sha1_object_info_extended<pos:position pos:line="38" pos:column="49"/></name><argument_list pos:line="38" pos:column="49">(<argument><expr><name pos:line="38" pos:column="50">real<pos:position pos:line="38" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="56">oi<pos:position pos:line="38" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="60">0<pos:position pos:line="38" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="63"/></return>
	}<pos:position pos:line="39" pos:column="10"/></block></then> <elseif pos:line="39" pos:column="11">else <if pos:line="39" pos:column="16">if <condition pos:line="39" pos:column="19">(<expr><call><name pos:line="39" pos:column="20">in_delta_base_cache<pos:position pos:line="39" pos:column="39"/></name><argument_list pos:line="39" pos:column="39">(<argument><expr><name><name pos:line="39" pos:column="40">e<pos:position pos:line="39" pos:column="41"/></name><operator pos:line="39" pos:column="41">.<pos:position pos:line="39" pos:column="42"/></operator><name pos:line="39" pos:column="42">p<pos:position pos:line="39" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="45">e<pos:position pos:line="39" pos:column="46"/></name><operator pos:line="39" pos:column="46">.<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="47">offset<pos:position pos:line="39" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="55"/></condition><then pos:line="39" pos:column="55"> <block pos:line="39" pos:column="56">{
		<expr_stmt><expr><name><name pos:line="40" pos:column="17">oi<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">-&gt;<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="21">whence<pos:position pos:line="40" pos:column="27"/></name></name> <operator pos:line="40" pos:column="28">=<pos:position pos:line="40" pos:column="29"/></operator> <name pos:line="40" pos:column="30">OI_DBCACHED<pos:position pos:line="40" pos:column="41"/></name></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if></elseif> <else pos:line="41" pos:column="11">else <block pos:line="41" pos:column="16">{
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">oi<pos:position pos:line="42" pos:column="19"/></name><operator pos:line="42" pos:column="19">-&gt;<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="21">whence<pos:position pos:line="42" pos:column="27"/></name></name> <operator pos:line="42" pos:column="28">=<pos:position pos:line="42" pos:column="29"/></operator> <name pos:line="42" pos:column="30">OI_PACKED<pos:position pos:line="42" pos:column="39"/></name></expr>;<pos:position pos:line="42" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">oi<pos:position pos:line="43" pos:column="19"/></name><operator pos:line="43" pos:column="19">-&gt;<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="21">u<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">.<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">packed<pos:position pos:line="43" pos:column="29"/></name><operator pos:line="43" pos:column="29">.<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="30">offset<pos:position pos:line="43" pos:column="36"/></name></name> <operator pos:line="43" pos:column="37">=<pos:position pos:line="43" pos:column="38"/></operator> <name><name pos:line="43" pos:column="39">e<pos:position pos:line="43" pos:column="40"/></name><operator pos:line="43" pos:column="40">.<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="41">offset<pos:position pos:line="43" pos:column="47"/></name></name></expr>;<pos:position pos:line="43" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="44" pos:column="17">oi<pos:position pos:line="44" pos:column="19"/></name><operator pos:line="44" pos:column="19">-&gt;<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="21">u<pos:position pos:line="44" pos:column="22"/></name><operator pos:line="44" pos:column="22">.<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="23">packed<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">.<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">pack<pos:position pos:line="44" pos:column="34"/></name></name> <operator pos:line="44" pos:column="35">=<pos:position pos:line="44" pos:column="36"/></operator> <name><name pos:line="44" pos:column="37">e<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">.<pos:position pos:line="44" pos:column="39"/></operator><name pos:line="44" pos:column="39">p<pos:position pos:line="44" pos:column="40"/></name></name></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="45" pos:column="17">oi<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">-&gt;<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="21">u<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">.<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="23">packed<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">.<pos:position pos:line="45" pos:column="30"/></operator><name pos:line="45" pos:column="30">is_delta<pos:position pos:line="45" pos:column="38"/></name></name> <operator pos:line="45" pos:column="39">=<pos:position pos:line="45" pos:column="40"/></operator> <operator pos:line="45" pos:column="41">(<pos:position pos:line="45" pos:column="42"/></operator><name pos:line="45" pos:column="42">rtype<pos:position pos:line="45" pos:column="47"/></name> <operator pos:line="45" pos:column="48">==<pos:position pos:line="45" pos:column="50"/></operator> <name pos:line="45" pos:column="51">OBJ_REF_DELTA<pos:position pos:line="45" pos:column="64"/></name> <operator pos:line="45" pos:column="65">||<pos:position pos:line="45" pos:column="67"/></operator>
					 <name pos:line="46" pos:column="42">rtype<pos:position pos:line="46" pos:column="47"/></name> <operator pos:line="46" pos:column="48">==<pos:position pos:line="46" pos:column="50"/></operator> <name pos:line="46" pos:column="51">OBJ_OFS_DELTA<pos:position pos:line="46" pos:column="64"/></name><operator pos:line="46" pos:column="64">)<pos:position pos:line="46" pos:column="65"/></operator></expr>;<pos:position pos:line="46" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></else></if>

	<return pos:line="49" pos:column="9">return <expr><literal type="number" pos:line="49" pos:column="16">0<pos:position pos:line="49" pos:column="17"/></literal></expr>;<pos:position pos:line="49" pos:column="18"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
