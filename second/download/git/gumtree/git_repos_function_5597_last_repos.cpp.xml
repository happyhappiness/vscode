<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5597_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parse_pack_objects<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">unsigned<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">sha1<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">nr_delays<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><literal type="number" pos:line="3" pos:column="28">0<pos:position pos:line="3" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ofs_delta_entry<pos:position pos:line="4" pos:column="31"/></name></name> <modifier pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></modifier></type><name pos:line="4" pos:column="33">ofs_delta<pos:position pos:line="4" pos:column="42"/></name> <init pos:line="4" pos:column="43">= <expr><name pos:line="4" pos:column="45">ofs_deltas<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name><name pos:line="5" pos:column="23">ref_delta_sha1<pos:position pos:line="5" pos:column="37"/></name><index pos:line="5" pos:column="37">[<expr><literal type="number" pos:line="5" pos:column="38">20<pos:position pos:line="5" pos:column="40"/></literal></expr>]<pos:position pos:line="5" pos:column="41"/></index></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">stat<pos:position pos:line="6" pos:column="20"/></name></name></type> <name pos:line="6" pos:column="21">st<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">verbose<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">progress<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">=<pos:position pos:line="9" pos:column="27"/></operator> <call><name pos:line="9" pos:column="28">start_progress<pos:position pos:line="9" pos:column="42"/></name><argument_list pos:line="9" pos:column="42">(
				<argument><expr><ternary><condition><expr><name pos:line="10" pos:column="33">from_stdin<pos:position pos:line="10" pos:column="43"/></name></expr> ?<pos:position pos:line="10" pos:column="45"/></condition><then pos:line="10" pos:column="45"> <expr><call><name pos:line="10" pos:column="46">_<pos:position pos:line="10" pos:column="47"/></name><argument_list pos:line="10" pos:column="47">(<argument><expr><literal type="string" pos:line="10" pos:column="48">"Receiving objects"<pos:position pos:line="10" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="68"/></argument_list></call></expr> <pos:position pos:line="10" pos:column="69"/></then><else pos:line="10" pos:column="69">: <expr><call><name pos:line="10" pos:column="71">_<pos:position pos:line="10" pos:column="72"/></name><argument_list pos:line="10" pos:column="72">(<argument><expr><literal type="string" pos:line="10" pos:column="73">"Indexing objects"<pos:position pos:line="10" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="92"/></argument_list></call></expr></else></ternary></expr></argument>,
				<argument><expr><name pos:line="11" pos:column="33">nr_objects<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt></block></then></if>
	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">i<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>;<pos:position pos:line="12" pos:column="20"/></init> <condition><expr><name pos:line="12" pos:column="21">i<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">&lt;<pos:position pos:line="12" pos:column="27"/></operator> <name pos:line="12" pos:column="25">nr_objects<pos:position pos:line="12" pos:column="35"/></name></expr>;<pos:position pos:line="12" pos:column="36"/></condition> <incr><expr><name pos:line="12" pos:column="37">i<pos:position pos:line="12" pos:column="38"/></name><operator pos:line="12" pos:column="38">++<pos:position pos:line="12" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="41"/></control> <block pos:line="12" pos:column="42">{
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">object_entry<pos:position pos:line="13" pos:column="36"/></name></name> <modifier pos:line="13" pos:column="37">*<pos:position pos:line="13" pos:column="38"/></modifier></type><name pos:line="13" pos:column="38">obj<pos:position pos:line="13" pos:column="41"/></name> <init pos:line="13" pos:column="42">= <expr><operator pos:line="13" pos:column="44">&amp;<pos:position pos:line="13" pos:column="49"/></operator><name><name pos:line="13" pos:column="45">objects<pos:position pos:line="13" pos:column="52"/></name><index pos:line="13" pos:column="52">[<expr><name pos:line="13" pos:column="53">i<pos:position pos:line="13" pos:column="54"/></name></expr>]<pos:position pos:line="13" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="13" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">void<pos:position pos:line="14" pos:column="21"/></name> <modifier pos:line="14" pos:column="22">*<pos:position pos:line="14" pos:column="23"/></modifier></type><name pos:line="14" pos:column="23">data<pos:position pos:line="14" pos:column="27"/></name> <init pos:line="14" pos:column="28">= <expr><call><name pos:line="14" pos:column="30">unpack_raw_entry<pos:position pos:line="14" pos:column="46"/></name><argument_list pos:line="14" pos:column="46">(<argument><expr><name pos:line="14" pos:column="47">obj<pos:position pos:line="14" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="52">&amp;<pos:position pos:line="14" pos:column="57"/></operator><name><name pos:line="14" pos:column="53">ofs_delta<pos:position pos:line="14" pos:column="62"/></name><operator pos:line="14" pos:column="62">-&gt;<pos:position pos:line="14" pos:column="67"/></operator><name pos:line="14" pos:column="64">offset<pos:position pos:line="14" pos:column="70"/></name></name></expr></argument>,
					      <argument><expr><name pos:line="15" pos:column="47">ref_delta_sha1<pos:position pos:line="15" pos:column="61"/></name></expr></argument>,
					      <argument><expr><name><name pos:line="16" pos:column="47">obj<pos:position pos:line="16" pos:column="50"/></name><operator pos:line="16" pos:column="50">-&gt;<pos:position pos:line="16" pos:column="55"/></operator><name pos:line="16" pos:column="52">idx<pos:position pos:line="16" pos:column="55"/></name><operator pos:line="16" pos:column="55">.<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="56">oid<pos:position pos:line="16" pos:column="59"/></name><operator pos:line="16" pos:column="59">.<pos:position pos:line="16" pos:column="60"/></operator><name pos:line="16" pos:column="60">hash<pos:position pos:line="16" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="66"/></decl_stmt>
		<expr_stmt><expr><name><name pos:line="17" pos:column="17">obj<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">real_type<pos:position pos:line="17" pos:column="31"/></name></name> <operator pos:line="17" pos:column="32">=<pos:position pos:line="17" pos:column="33"/></operator> <name><name pos:line="17" pos:column="34">obj<pos:position pos:line="17" pos:column="37"/></name><operator pos:line="17" pos:column="37">-&gt;<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="39">type<pos:position pos:line="17" pos:column="43"/></name></name></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name><name pos:line="18" pos:column="21">obj<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">-&gt;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="26">type<pos:position pos:line="18" pos:column="30"/></name></name> <operator pos:line="18" pos:column="31">==<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">OBJ_OFS_DELTA<pos:position pos:line="18" pos:column="47"/></name></expr>)<pos:position pos:line="18" pos:column="48"/></condition><then pos:line="18" pos:column="48"> <block pos:line="18" pos:column="49">{
			<expr_stmt><expr><name pos:line="19" pos:column="25">nr_ofs_deltas<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">++<pos:position pos:line="19" pos:column="40"/></operator></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="20" pos:column="25">ofs_delta<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">-&gt;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="36">obj_no<pos:position pos:line="20" pos:column="42"/></name></name> <operator pos:line="20" pos:column="43">=<pos:position pos:line="20" pos:column="44"/></operator> <name pos:line="20" pos:column="45">i<pos:position pos:line="20" pos:column="46"/></name></expr>;<pos:position pos:line="20" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="21" pos:column="25">ofs_delta<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">++<pos:position pos:line="21" pos:column="36"/></operator></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="22" pos:column="18"/></block></then> <elseif pos:line="22" pos:column="19">else <if pos:line="22" pos:column="24">if <condition pos:line="22" pos:column="27">(<expr><name><name pos:line="22" pos:column="28">obj<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">-&gt;<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="33">type<pos:position pos:line="22" pos:column="37"/></name></name> <operator pos:line="22" pos:column="38">==<pos:position pos:line="22" pos:column="40"/></operator> <name pos:line="22" pos:column="41">OBJ_REF_DELTA<pos:position pos:line="22" pos:column="54"/></name></expr>)<pos:position pos:line="22" pos:column="55"/></condition><then pos:line="22" pos:column="55"> <block pos:line="22" pos:column="56">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">ALLOC_GROW<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><name pos:line="23" pos:column="36">ref_deltas<pos:position pos:line="23" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="48">nr_ref_deltas<pos:position pos:line="23" pos:column="61"/></name> <operator pos:line="23" pos:column="62">+<pos:position pos:line="23" pos:column="63"/></operator> <literal type="number" pos:line="23" pos:column="64">1<pos:position pos:line="23" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="67">ref_deltas_alloc<pos:position pos:line="23" pos:column="83"/></name></expr></argument>)<pos:position pos:line="23" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="85"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">hashcpy<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><name><name pos:line="24" pos:column="33">ref_deltas<pos:position pos:line="24" pos:column="43"/></name><index pos:line="24" pos:column="43">[<expr><name pos:line="24" pos:column="44">nr_ref_deltas<pos:position pos:line="24" pos:column="57"/></name></expr>]<pos:position pos:line="24" pos:column="58"/></index></name><operator pos:line="24" pos:column="58">.<pos:position pos:line="24" pos:column="59"/></operator><name pos:line="24" pos:column="59">sha1<pos:position pos:line="24" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="65">ref_delta_sha1<pos:position pos:line="24" pos:column="79"/></name></expr></argument>)<pos:position pos:line="24" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="81"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="25" pos:column="25">ref_deltas<pos:position pos:line="25" pos:column="35"/></name><index pos:line="25" pos:column="35">[<expr><name pos:line="25" pos:column="36">nr_ref_deltas<pos:position pos:line="25" pos:column="49"/></name></expr>]<pos:position pos:line="25" pos:column="50"/></index></name><operator pos:line="25" pos:column="50">.<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="51">obj_no<pos:position pos:line="25" pos:column="57"/></name> <operator pos:line="25" pos:column="58">=<pos:position pos:line="25" pos:column="59"/></operator> <name pos:line="25" pos:column="60">i<pos:position pos:line="25" pos:column="61"/></name></expr>;<pos:position pos:line="25" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="26" pos:column="25">nr_ref_deltas<pos:position pos:line="26" pos:column="38"/></name><operator pos:line="26" pos:column="38">++<pos:position pos:line="26" pos:column="40"/></operator></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if></elseif> <elseif pos:line="27" pos:column="19">else <if pos:line="27" pos:column="24">if <condition pos:line="27" pos:column="27">(<expr><operator pos:line="27" pos:column="28">!<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="29">data<pos:position pos:line="27" pos:column="33"/></name></expr>)<pos:position pos:line="27" pos:column="34"/></condition><then pos:line="27" pos:column="34"> <block pos:line="27" pos:column="35">{
			<comment type="block" pos:line="28" pos:column="25">/* large blobs, check later */</comment>
			<expr_stmt><expr><name><name pos:line="29" pos:column="25">obj<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">-&gt;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="30">real_type<pos:position pos:line="29" pos:column="39"/></name></name> <operator pos:line="29" pos:column="40">=<pos:position pos:line="29" pos:column="41"/></operator> <name pos:line="29" pos:column="42">OBJ_BAD<pos:position pos:line="29" pos:column="49"/></name></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><name pos:line="30" pos:column="25">nr_delays<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">++<pos:position pos:line="30" pos:column="36"/></operator></expr>;<pos:position pos:line="30" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if></elseif> <else pos:line="31" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="25">sha1_object<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><name pos:line="32" pos:column="37">data<pos:position pos:line="32" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="43">NULL<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="49">obj<pos:position pos:line="32" pos:column="52"/></name><operator pos:line="32" pos:column="52">-&gt;<pos:position pos:line="32" pos:column="57"/></operator><name pos:line="32" pos:column="54">size<pos:position pos:line="32" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="60">obj<pos:position pos:line="32" pos:column="63"/></name><operator pos:line="32" pos:column="63">-&gt;<pos:position pos:line="32" pos:column="68"/></operator><name pos:line="32" pos:column="65">type<pos:position pos:line="32" pos:column="69"/></name></name></expr></argument>,
				    <argument><expr><operator pos:line="33" pos:column="37">&amp;<pos:position pos:line="33" pos:column="42"/></operator><name><name pos:line="33" pos:column="38">obj<pos:position pos:line="33" pos:column="41"/></name><operator pos:line="33" pos:column="41">-&gt;<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="43">idx<pos:position pos:line="33" pos:column="46"/></name><operator pos:line="33" pos:column="46">.<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="47">oid<pos:position pos:line="33" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="52"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">free<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><name pos:line="34" pos:column="22">data<pos:position pos:line="34" pos:column="26"/></name></expr></argument>)<pos:position pos:line="34" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">display_progress<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><name pos:line="35" pos:column="34">progress<pos:position pos:line="35" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">i<pos:position pos:line="35" pos:column="45"/></name><operator pos:line="35" pos:column="45">+<pos:position pos:line="35" pos:column="46"/></operator><literal type="number" pos:line="35" pos:column="46">1<pos:position pos:line="35" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></for>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">objects<pos:position pos:line="37" pos:column="16"/></name><index pos:line="37" pos:column="16">[<expr><name pos:line="37" pos:column="17">i<pos:position pos:line="37" pos:column="18"/></name></expr>]<pos:position pos:line="37" pos:column="19"/></index></name><operator pos:line="37" pos:column="19">.<pos:position pos:line="37" pos:column="20"/></operator><name><name pos:line="37" pos:column="20">idx<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">.<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="24">offset<pos:position pos:line="37" pos:column="30"/></name></name> <operator pos:line="37" pos:column="31">=<pos:position pos:line="37" pos:column="32"/></operator> <name pos:line="37" pos:column="33">consumed_bytes<pos:position pos:line="37" pos:column="47"/></name></expr>;<pos:position pos:line="37" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">stop_progress<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><operator pos:line="38" pos:column="23">&amp;<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="24">progress<pos:position pos:line="38" pos:column="32"/></name></expr></argument>)<pos:position pos:line="38" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt>

	<comment type="block" pos:line="40" pos:column="9">/* Check pack integrity */</comment>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">flush<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">()<pos:position pos:line="41" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="17"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">git_SHA1_Final<pos:position pos:line="42" pos:column="23"/></name><argument_list pos:line="42" pos:column="23">(<argument><expr><name pos:line="42" pos:column="24">sha1<pos:position pos:line="42" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="30">&amp;<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="31">input_ctx<pos:position pos:line="42" pos:column="40"/></name></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><call><name pos:line="43" pos:column="13">hashcmp<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><call><name pos:line="43" pos:column="21">fill<pos:position pos:line="43" pos:column="25"/></name><argument_list pos:line="43" pos:column="25">(<argument><expr><literal type="number" pos:line="43" pos:column="26">20<pos:position pos:line="43" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="43" pos:column="31">sha1<pos:position pos:line="43" pos:column="35"/></name></expr></argument>)<pos:position pos:line="43" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="37"/></condition><then pos:line="43" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="17">die<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><call><name pos:line="44" pos:column="21">_<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">(<argument><expr><literal type="string" pos:line="44" pos:column="23">"pack is corrupted (SHA1 mismatch)"<pos:position pos:line="44" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="61"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">use<pos:position pos:line="45" pos:column="12"/></name><argument_list pos:line="45" pos:column="12">(<argument><expr><literal type="number" pos:line="45" pos:column="13">20<pos:position pos:line="45" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt>

	<comment type="block" pos:line="47" pos:column="9">/* If input_fd is a file, we should have reached its end now. */</comment>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><call><name pos:line="48" pos:column="13">fstat<pos:position pos:line="48" pos:column="18"/></name><argument_list pos:line="48" pos:column="18">(<argument><expr><name pos:line="48" pos:column="19">input_fd<pos:position pos:line="48" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="29">&amp;<pos:position pos:line="48" pos:column="34"/></operator><name pos:line="48" pos:column="30">st<pos:position pos:line="48" pos:column="32"/></name></expr></argument>)<pos:position pos:line="48" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="34"/></condition><then pos:line="48" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="17">die_errno<pos:position pos:line="49" pos:column="26"/></name><argument_list pos:line="49" pos:column="26">(<argument><expr><call><name pos:line="49" pos:column="27">_<pos:position pos:line="49" pos:column="28"/></name><argument_list pos:line="49" pos:column="28">(<argument><expr><literal type="string" pos:line="49" pos:column="29">"cannot fstat packfile"<pos:position pos:line="49" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="55"/></expr_stmt></block></then></if>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><call><name pos:line="50" pos:column="13">S_ISREG<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><name><name pos:line="50" pos:column="21">st<pos:position pos:line="50" pos:column="23"/></name><operator pos:line="50" pos:column="23">.<pos:position pos:line="50" pos:column="24"/></operator><name pos:line="50" pos:column="24">st_mode<pos:position pos:line="50" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="32"/></argument_list></call> <operator pos:line="50" pos:column="33">&amp;&amp;<pos:position pos:line="50" pos:column="43"/></operator>
			<call><name pos:line="51" pos:column="25">lseek<pos:position pos:line="51" pos:column="30"/></name><argument_list pos:line="51" pos:column="30">(<argument><expr><name pos:line="51" pos:column="31">input_fd<pos:position pos:line="51" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="41">0<pos:position pos:line="51" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="44">SEEK_CUR<pos:position pos:line="51" pos:column="52"/></name></expr></argument>)<pos:position pos:line="51" pos:column="53"/></argument_list></call> <operator pos:line="51" pos:column="54">-<pos:position pos:line="51" pos:column="55"/></operator> <name pos:line="51" pos:column="56">input_len<pos:position pos:line="51" pos:column="65"/></name> <operator pos:line="51" pos:column="66">!=<pos:position pos:line="51" pos:column="68"/></operator> <name><name pos:line="51" pos:column="69">st<pos:position pos:line="51" pos:column="71"/></name><operator pos:line="51" pos:column="71">.<pos:position pos:line="51" pos:column="72"/></operator><name pos:line="51" pos:column="72">st_size<pos:position pos:line="51" pos:column="79"/></name></name></expr>)<pos:position pos:line="51" pos:column="80"/></condition><then pos:line="51" pos:column="80">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="17">die<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><call><name pos:line="52" pos:column="21">_<pos:position pos:line="52" pos:column="22"/></name><argument_list pos:line="52" pos:column="22">(<argument><expr><literal type="string" pos:line="52" pos:column="23">"pack has junk at the end"<pos:position pos:line="52" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="52"/></expr_stmt></block></then></if>

	<for pos:line="54" pos:column="9">for <control pos:line="54" pos:column="13">(<init><expr><name pos:line="54" pos:column="14">i<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <literal type="number" pos:line="54" pos:column="18">0<pos:position pos:line="54" pos:column="19"/></literal></expr>;<pos:position pos:line="54" pos:column="20"/></init> <condition><expr><name pos:line="54" pos:column="21">i<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">&lt;<pos:position pos:line="54" pos:column="27"/></operator> <name pos:line="54" pos:column="25">nr_objects<pos:position pos:line="54" pos:column="35"/></name></expr>;<pos:position pos:line="54" pos:column="36"/></condition> <incr><expr><name pos:line="54" pos:column="37">i<pos:position pos:line="54" pos:column="38"/></name><operator pos:line="54" pos:column="38">++<pos:position pos:line="54" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="54" pos:column="41"/></control> <block pos:line="54" pos:column="42">{
		<decl_stmt><decl><type><name><name pos:line="55" pos:column="17">struct<pos:position pos:line="55" pos:column="23"/></name> <name pos:line="55" pos:column="24">object_entry<pos:position pos:line="55" pos:column="36"/></name></name> <modifier pos:line="55" pos:column="37">*<pos:position pos:line="55" pos:column="38"/></modifier></type><name pos:line="55" pos:column="38">obj<pos:position pos:line="55" pos:column="41"/></name> <init pos:line="55" pos:column="42">= <expr><operator pos:line="55" pos:column="44">&amp;<pos:position pos:line="55" pos:column="49"/></operator><name><name pos:line="55" pos:column="45">objects<pos:position pos:line="55" pos:column="52"/></name><index pos:line="55" pos:column="52">[<expr><name pos:line="55" pos:column="53">i<pos:position pos:line="55" pos:column="54"/></name></expr>]<pos:position pos:line="55" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="55" pos:column="56"/></decl_stmt>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name><name pos:line="56" pos:column="21">obj<pos:position pos:line="56" pos:column="24"/></name><operator pos:line="56" pos:column="24">-&gt;<pos:position pos:line="56" pos:column="29"/></operator><name pos:line="56" pos:column="26">real_type<pos:position pos:line="56" pos:column="35"/></name></name> <operator pos:line="56" pos:column="36">!=<pos:position pos:line="56" pos:column="38"/></operator> <name pos:line="56" pos:column="39">OBJ_BAD<pos:position pos:line="56" pos:column="46"/></name></expr>)<pos:position pos:line="56" pos:column="47"/></condition><then pos:line="56" pos:column="47">
			<block type="pseudo"><continue pos:line="57" pos:column="25">continue;<pos:position pos:line="57" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name><name pos:line="58" pos:column="17">obj<pos:position pos:line="58" pos:column="20"/></name><operator pos:line="58" pos:column="20">-&gt;<pos:position pos:line="58" pos:column="25"/></operator><name pos:line="58" pos:column="22">real_type<pos:position pos:line="58" pos:column="31"/></name></name> <operator pos:line="58" pos:column="32">=<pos:position pos:line="58" pos:column="33"/></operator> <name><name pos:line="58" pos:column="34">obj<pos:position pos:line="58" pos:column="37"/></name><operator pos:line="58" pos:column="37">-&gt;<pos:position pos:line="58" pos:column="42"/></operator><name pos:line="58" pos:column="39">type<pos:position pos:line="58" pos:column="43"/></name></name></expr>;<pos:position pos:line="58" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">sha1_object<pos:position pos:line="59" pos:column="28"/></name><argument_list pos:line="59" pos:column="28">(<argument><expr><name pos:line="59" pos:column="29">NULL<pos:position pos:line="59" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="35">obj<pos:position pos:line="59" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="40">obj<pos:position pos:line="59" pos:column="43"/></name><operator pos:line="59" pos:column="43">-&gt;<pos:position pos:line="59" pos:column="48"/></operator><name pos:line="59" pos:column="45">size<pos:position pos:line="59" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="51">obj<pos:position pos:line="59" pos:column="54"/></name><operator pos:line="59" pos:column="54">-&gt;<pos:position pos:line="59" pos:column="59"/></operator><name pos:line="59" pos:column="56">type<pos:position pos:line="59" pos:column="60"/></name></name></expr></argument>,
			    <argument><expr><operator pos:line="60" pos:column="29">&amp;<pos:position pos:line="60" pos:column="34"/></operator><name><name pos:line="60" pos:column="30">obj<pos:position pos:line="60" pos:column="33"/></name><operator pos:line="60" pos:column="33">-&gt;<pos:position pos:line="60" pos:column="38"/></operator><name pos:line="60" pos:column="35">idx<pos:position pos:line="60" pos:column="38"/></name><operator pos:line="60" pos:column="38">.<pos:position pos:line="60" pos:column="39"/></operator><name pos:line="60" pos:column="39">oid<pos:position pos:line="60" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="61" pos:column="17">nr_delays<pos:position pos:line="61" pos:column="26"/></name><operator pos:line="61" pos:column="26">--<pos:position pos:line="61" pos:column="28"/></operator></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></for>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">nr_delays<pos:position pos:line="63" pos:column="22"/></name></expr>)<pos:position pos:line="63" pos:column="23"/></condition><then pos:line="63" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="17">die<pos:position pos:line="64" pos:column="20"/></name><argument_list pos:line="64" pos:column="20">(<argument><expr><call><name pos:line="64" pos:column="21">_<pos:position pos:line="64" pos:column="22"/></name><argument_list pos:line="64" pos:column="22">(<argument><expr><literal type="string" pos:line="64" pos:column="23">"confusion beyond insanity in parse_pack_objects()"<pos:position pos:line="64" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="77"/></expr_stmt></block></then></if>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
