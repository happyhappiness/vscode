<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5655_git-2.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">DWORD<pos:position pos:line="1" pos:column="13"/></name> <name pos:line="1" pos:column="14">WINAPI<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">console_thread<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">LPVOID<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">unused<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name><name pos:line="3" pos:column="23">buffer<pos:position pos:line="3" pos:column="29"/></name><index pos:line="3" pos:column="29">[<expr><name pos:line="3" pos:column="30">BUFFER_SIZE<pos:position pos:line="3" pos:column="41"/></name></expr>]<pos:position pos:line="3" pos:column="42"/></index></name></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">DWORD<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">bytes<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">start<pos:position pos:line="5" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="20">end<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><literal type="number" pos:line="5" pos:column="26">0<pos:position pos:line="5" pos:column="27"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="29">c<pos:position pos:line="5" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="32">parampos<pos:position pos:line="5" pos:column="40"/></name> <init pos:line="5" pos:column="41">= <expr><literal type="number" pos:line="5" pos:column="43">0<pos:position pos:line="5" pos:column="44"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="46">state<pos:position pos:line="5" pos:column="51"/></name> <init pos:line="5" pos:column="52">= <expr><name pos:line="5" pos:column="54">TEXT<pos:position pos:line="5" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name><name pos:line="6" pos:column="13">params<pos:position pos:line="6" pos:column="19"/></name><index pos:line="6" pos:column="19">[<expr><name pos:line="6" pos:column="20">MAX_PARAMS<pos:position pos:line="6" pos:column="30"/></name></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>

	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><literal type="number" pos:line="8" pos:column="16">1<pos:position pos:line="8" pos:column="17"/></literal></expr>)<pos:position pos:line="8" pos:column="18"/></condition> <block pos:line="8" pos:column="19">{
		<comment type="block" pos:line="9" pos:column="17">/* read next chunk of bytes from the pipe */</comment>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><call><name pos:line="10" pos:column="22">ReadFile<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">hread<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="38">buffer<pos:position pos:line="10" pos:column="44"/></name> <operator pos:line="10" pos:column="45">+<pos:position pos:line="10" pos:column="46"/></operator> <name pos:line="10" pos:column="47">end<pos:position pos:line="10" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="52">BUFFER_SIZE<pos:position pos:line="10" pos:column="63"/></name> <operator pos:line="10" pos:column="64">-<pos:position pos:line="10" pos:column="65"/></operator> <name pos:line="10" pos:column="66">end<pos:position pos:line="10" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="71">&amp;<pos:position pos:line="10" pos:column="76"/></operator><name pos:line="10" pos:column="72">bytes<pos:position pos:line="10" pos:column="77"/></name></expr></argument>,
				<argument><expr><name pos:line="11" pos:column="33">NULL<pos:position pos:line="11" pos:column="37"/></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="39"/></condition><then pos:line="11" pos:column="39"> <block pos:line="11" pos:column="40">{
			<comment type="block" pos:line="12" pos:column="25">/* exit if pipe has been closed or disconnected */</comment>
			<if pos:line="13" pos:column="25">if <condition pos:line="13" pos:column="28">(<expr><call><name pos:line="13" pos:column="29">GetLastError<pos:position pos:line="13" pos:column="41"/></name><argument_list pos:line="13" pos:column="41">()<pos:position pos:line="13" pos:column="43"/></argument_list></call> <operator pos:line="13" pos:column="44">==<pos:position pos:line="13" pos:column="46"/></operator> <name pos:line="13" pos:column="47">ERROR_PIPE_NOT_CONNECTED<pos:position pos:line="13" pos:column="71"/></name> <operator pos:line="13" pos:column="72">||<pos:position pos:line="13" pos:column="74"/></operator>
					<call><name pos:line="14" pos:column="41">GetLastError<pos:position pos:line="14" pos:column="53"/></name><argument_list pos:line="14" pos:column="53">()<pos:position pos:line="14" pos:column="55"/></argument_list></call> <operator pos:line="14" pos:column="56">==<pos:position pos:line="14" pos:column="58"/></operator> <name pos:line="14" pos:column="59">ERROR_BROKEN_PIPE<pos:position pos:line="14" pos:column="76"/></name></expr>)<pos:position pos:line="14" pos:column="77"/></condition><then pos:line="14" pos:column="77">
				<block type="pseudo"><break pos:line="15" pos:column="33">break;<pos:position pos:line="15" pos:column="39"/></break></block></then></if>
			<comment type="block" pos:line="16" pos:column="25">/* ignore other errors */</comment>
			<continue pos:line="17" pos:column="25">continue;<pos:position pos:line="17" pos:column="34"/></continue>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="20" pos:column="17">/* scan the bytes and handle ANSI control codes */</comment>
		<expr_stmt><expr><name pos:line="21" pos:column="17">bytes<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">+=<pos:position pos:line="21" pos:column="25"/></operator> <name pos:line="21" pos:column="26">end<pos:position pos:line="21" pos:column="29"/></name></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">start<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">end<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">=<pos:position pos:line="22" pos:column="30"/></operator> <literal type="number" pos:line="22" pos:column="31">0<pos:position pos:line="22" pos:column="32"/></literal></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
		<while pos:line="23" pos:column="17">while <condition pos:line="23" pos:column="23">(<expr><name pos:line="23" pos:column="24">end<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">&lt;<pos:position pos:line="23" pos:column="32"/></operator> <name pos:line="23" pos:column="30">bytes<pos:position pos:line="23" pos:column="35"/></name></expr>)<pos:position pos:line="23" pos:column="36"/></condition> <block pos:line="23" pos:column="37">{
			<expr_stmt><expr><name pos:line="24" pos:column="25">c<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">=<pos:position pos:line="24" pos:column="28"/></operator> <name><name pos:line="24" pos:column="29">buffer<pos:position pos:line="24" pos:column="35"/></name><index pos:line="24" pos:column="35">[<expr><name pos:line="24" pos:column="36">end<pos:position pos:line="24" pos:column="39"/></name><operator pos:line="24" pos:column="39">++<pos:position pos:line="24" pos:column="41"/></operator></expr>]<pos:position pos:line="24" pos:column="42"/></index></name></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>
			<switch pos:line="25" pos:column="25">switch <condition pos:line="25" pos:column="32">(<expr><name pos:line="25" pos:column="33">state<pos:position pos:line="25" pos:column="38"/></name></expr>)<pos:position pos:line="25" pos:column="39"/></condition> <block pos:line="25" pos:column="40">{
			<case pos:line="26" pos:column="25">case <expr><name pos:line="26" pos:column="30">TEXT<pos:position pos:line="26" pos:column="34"/></name></expr>:<pos:position pos:line="26" pos:column="35"/></case>
				<if pos:line="27" pos:column="33">if <condition pos:line="27" pos:column="36">(<expr><name pos:line="27" pos:column="37">c<pos:position pos:line="27" pos:column="38"/></name> <operator pos:line="27" pos:column="39">==<pos:position pos:line="27" pos:column="41"/></operator> <name pos:line="27" pos:column="42">ESCAPE<pos:position pos:line="27" pos:column="48"/></name></expr>)<pos:position pos:line="27" pos:column="49"/></condition><then pos:line="27" pos:column="49"> <block pos:line="27" pos:column="50">{
					<comment type="block" pos:line="28" pos:column="41">/* print text seen so far */</comment>
					<if pos:line="29" pos:column="41">if <condition pos:line="29" pos:column="44">(<expr><name pos:line="29" pos:column="45">end<pos:position pos:line="29" pos:column="48"/></name> <operator pos:line="29" pos:column="49">-<pos:position pos:line="29" pos:column="50"/></operator> <literal type="number" pos:line="29" pos:column="51">1<pos:position pos:line="29" pos:column="52"/></literal> <operator pos:line="29" pos:column="53">&gt;<pos:position pos:line="29" pos:column="57"/></operator> <name pos:line="29" pos:column="55">start<pos:position pos:line="29" pos:column="60"/></name></expr>)<pos:position pos:line="29" pos:column="61"/></condition><then pos:line="29" pos:column="61">
						<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="49">write_console<pos:position pos:line="30" pos:column="62"/></name><argument_list pos:line="30" pos:column="62">(<argument><expr><name pos:line="30" pos:column="63">buffer<pos:position pos:line="30" pos:column="69"/></name> <operator pos:line="30" pos:column="70">+<pos:position pos:line="30" pos:column="71"/></operator> <name pos:line="30" pos:column="72">start<pos:position pos:line="30" pos:column="77"/></name></expr></argument>,
							<argument><expr><name pos:line="31" pos:column="57">end<pos:position pos:line="31" pos:column="60"/></name> <operator pos:line="31" pos:column="61">-<pos:position pos:line="31" pos:column="62"/></operator> <literal type="number" pos:line="31" pos:column="63">1<pos:position pos:line="31" pos:column="64"/></literal> <operator pos:line="31" pos:column="65">-<pos:position pos:line="31" pos:column="66"/></operator> <name pos:line="31" pos:column="67">start<pos:position pos:line="31" pos:column="72"/></name></expr></argument>)<pos:position pos:line="31" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="74"/></expr_stmt></block></then></if>

					<comment type="block" pos:line="33" pos:column="41">/* then start parsing escape sequence */</comment>
					<expr_stmt><expr><name pos:line="34" pos:column="41">start<pos:position pos:line="34" pos:column="46"/></name> <operator pos:line="34" pos:column="47">=<pos:position pos:line="34" pos:column="48"/></operator> <name pos:line="34" pos:column="49">end<pos:position pos:line="34" pos:column="52"/></name> <operator pos:line="34" pos:column="53">-<pos:position pos:line="34" pos:column="54"/></operator> <literal type="number" pos:line="34" pos:column="55">1<pos:position pos:line="34" pos:column="56"/></literal></expr>;<pos:position pos:line="34" pos:column="57"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="35" pos:column="41">memset<pos:position pos:line="35" pos:column="47"/></name><argument_list pos:line="35" pos:column="47">(<argument><expr><name pos:line="35" pos:column="48">params<pos:position pos:line="35" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="56">0<pos:position pos:line="35" pos:column="57"/></literal></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="59">sizeof<argument_list pos:line="35" pos:column="65">(<argument><expr><name pos:line="35" pos:column="66">params<pos:position pos:line="35" pos:column="72"/></name></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="75"/></expr_stmt>
					<expr_stmt><expr><name pos:line="36" pos:column="41">parampos<pos:position pos:line="36" pos:column="49"/></name> <operator pos:line="36" pos:column="50">=<pos:position pos:line="36" pos:column="51"/></operator> <literal type="number" pos:line="36" pos:column="52">0<pos:position pos:line="36" pos:column="53"/></literal></expr>;<pos:position pos:line="36" pos:column="54"/></expr_stmt>
					<expr_stmt><expr><name pos:line="37" pos:column="41">state<pos:position pos:line="37" pos:column="46"/></name> <operator pos:line="37" pos:column="47">=<pos:position pos:line="37" pos:column="48"/></operator> <name pos:line="37" pos:column="49">ESCAPE<pos:position pos:line="37" pos:column="55"/></name></expr>;<pos:position pos:line="37" pos:column="56"/></expr_stmt>
				}<pos:position pos:line="38" pos:column="34"/></block></then></if>
				<break pos:line="39" pos:column="33">break;<pos:position pos:line="39" pos:column="39"/></break>

			<case pos:line="41" pos:column="25">case <expr><name pos:line="41" pos:column="30">ESCAPE<pos:position pos:line="41" pos:column="36"/></name></expr>:<pos:position pos:line="41" pos:column="37"/></case>
				<comment type="block" pos:line="42" pos:column="33">/* continue if "\033[", otherwise bail out */</comment>
				<expr_stmt><expr><name pos:line="43" pos:column="33">state<pos:position pos:line="43" pos:column="38"/></name> <operator pos:line="43" pos:column="39">=<pos:position pos:line="43" pos:column="40"/></operator> <ternary><condition><expr><operator pos:line="43" pos:column="41">(<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="42">c<pos:position pos:line="43" pos:column="43"/></name> <operator pos:line="43" pos:column="44">==<pos:position pos:line="43" pos:column="46"/></operator> <name pos:line="43" pos:column="47">BRACKET<pos:position pos:line="43" pos:column="54"/></name><operator pos:line="43" pos:column="54">)<pos:position pos:line="43" pos:column="55"/></operator></expr> ?<pos:position pos:line="43" pos:column="57"/></condition><then pos:line="43" pos:column="57"> <expr><name pos:line="43" pos:column="58">BRACKET<pos:position pos:line="43" pos:column="65"/></name></expr> <pos:position pos:line="43" pos:column="66"/></then><else pos:line="43" pos:column="66">: <expr><name pos:line="43" pos:column="68">TEXT<pos:position pos:line="43" pos:column="72"/></name></expr></else></ternary></expr>;<pos:position pos:line="43" pos:column="73"/></expr_stmt>
				<break pos:line="44" pos:column="33">break;<pos:position pos:line="44" pos:column="39"/></break>

			<case pos:line="46" pos:column="25">case <expr><name pos:line="46" pos:column="30">BRACKET<pos:position pos:line="46" pos:column="37"/></name></expr>:<pos:position pos:line="46" pos:column="38"/></case>
				<comment type="block" pos:line="47" pos:column="33">/* parse [0-9;]* into array of parameters */</comment>
				<if pos:line="48" pos:column="33">if <condition pos:line="48" pos:column="36">(<expr><name pos:line="48" pos:column="37">c<pos:position pos:line="48" pos:column="38"/></name> <operator pos:line="48" pos:column="39">&gt;=<pos:position pos:line="48" pos:column="44"/></operator> <literal type="char" pos:line="48" pos:column="42">'0'<pos:position pos:line="48" pos:column="45"/></literal> <operator pos:line="48" pos:column="46">&amp;&amp;<pos:position pos:line="48" pos:column="56"/></operator> <name pos:line="48" pos:column="49">c<pos:position pos:line="48" pos:column="50"/></name> <operator pos:line="48" pos:column="51">&lt;=<pos:position pos:line="48" pos:column="56"/></operator> <literal type="char" pos:line="48" pos:column="54">'9'<pos:position pos:line="48" pos:column="57"/></literal></expr>)<pos:position pos:line="48" pos:column="58"/></condition><then pos:line="48" pos:column="58"> <block pos:line="48" pos:column="59">{
					<expr_stmt><expr><name><name pos:line="49" pos:column="41">params<pos:position pos:line="49" pos:column="47"/></name><index pos:line="49" pos:column="47">[<expr><name pos:line="49" pos:column="48">parampos<pos:position pos:line="49" pos:column="56"/></name></expr>]<pos:position pos:line="49" pos:column="57"/></index></name> <operator pos:line="49" pos:column="58">*=<pos:position pos:line="49" pos:column="60"/></operator> <literal type="number" pos:line="49" pos:column="61">10<pos:position pos:line="49" pos:column="63"/></literal></expr>;<pos:position pos:line="49" pos:column="64"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="50" pos:column="41">params<pos:position pos:line="50" pos:column="47"/></name><index pos:line="50" pos:column="47">[<expr><name pos:line="50" pos:column="48">parampos<pos:position pos:line="50" pos:column="56"/></name></expr>]<pos:position pos:line="50" pos:column="57"/></index></name> <operator pos:line="50" pos:column="58">+=<pos:position pos:line="50" pos:column="60"/></operator> <name pos:line="50" pos:column="61">c<pos:position pos:line="50" pos:column="62"/></name> <operator pos:line="50" pos:column="63">-<pos:position pos:line="50" pos:column="64"/></operator> <literal type="char" pos:line="50" pos:column="65">'0'<pos:position pos:line="50" pos:column="68"/></literal></expr>;<pos:position pos:line="50" pos:column="69"/></expr_stmt>
				}<pos:position pos:line="51" pos:column="34"/></block></then> <elseif pos:line="51" pos:column="35">else <if pos:line="51" pos:column="40">if <condition pos:line="51" pos:column="43">(<expr><name pos:line="51" pos:column="44">c<pos:position pos:line="51" pos:column="45"/></name> <operator pos:line="51" pos:column="46">==<pos:position pos:line="51" pos:column="48"/></operator> <literal type="char" pos:line="51" pos:column="49">';'<pos:position pos:line="51" pos:column="52"/></literal></expr>)<pos:position pos:line="51" pos:column="53"/></condition><then pos:line="51" pos:column="53"> <block pos:line="51" pos:column="54">{
					<comment type="block" pos:line="52" pos:column="41">/*
					 * next parameter, bail out if out of
					 * bounds
					 */</comment>
					<expr_stmt><expr><name pos:line="56" pos:column="41">parampos<pos:position pos:line="56" pos:column="49"/></name><operator pos:line="56" pos:column="49">++<pos:position pos:line="56" pos:column="51"/></operator></expr>;<pos:position pos:line="56" pos:column="52"/></expr_stmt>
					<if pos:line="57" pos:column="41">if <condition pos:line="57" pos:column="44">(<expr><name pos:line="57" pos:column="45">parampos<pos:position pos:line="57" pos:column="53"/></name> <operator pos:line="57" pos:column="54">&gt;=<pos:position pos:line="57" pos:column="59"/></operator> <name pos:line="57" pos:column="57">MAX_PARAMS<pos:position pos:line="57" pos:column="67"/></name></expr>)<pos:position pos:line="57" pos:column="68"/></condition><then pos:line="57" pos:column="68">
						<block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="49">state<pos:position pos:line="58" pos:column="54"/></name> <operator pos:line="58" pos:column="55">=<pos:position pos:line="58" pos:column="56"/></operator> <name pos:line="58" pos:column="57">TEXT<pos:position pos:line="58" pos:column="61"/></name></expr>;<pos:position pos:line="58" pos:column="62"/></expr_stmt></block></then></if>
				}<pos:position pos:line="59" pos:column="34"/></block></then></if></elseif> <else pos:line="59" pos:column="35">else <block pos:line="59" pos:column="40">{
					<comment type="block" pos:line="60" pos:column="41">/*
					 * end of escape sequence, change
					 * console attributes
					 */</comment>
					<expr_stmt><expr><call><name pos:line="64" pos:column="41">set_attr<pos:position pos:line="64" pos:column="49"/></name><argument_list pos:line="64" pos:column="49">(<argument><expr><name pos:line="64" pos:column="50">c<pos:position pos:line="64" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="53">params<pos:position pos:line="64" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="61">parampos<pos:position pos:line="64" pos:column="69"/></name> <operator pos:line="64" pos:column="70">+<pos:position pos:line="64" pos:column="71"/></operator> <literal type="number" pos:line="64" pos:column="72">1<pos:position pos:line="64" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="75"/></expr_stmt>
					<expr_stmt><expr><name pos:line="65" pos:column="41">start<pos:position pos:line="65" pos:column="46"/></name> <operator pos:line="65" pos:column="47">=<pos:position pos:line="65" pos:column="48"/></operator> <name pos:line="65" pos:column="49">end<pos:position pos:line="65" pos:column="52"/></name></expr>;<pos:position pos:line="65" pos:column="53"/></expr_stmt>
					<expr_stmt><expr><name pos:line="66" pos:column="41">state<pos:position pos:line="66" pos:column="46"/></name> <operator pos:line="66" pos:column="47">=<pos:position pos:line="66" pos:column="48"/></operator> <name pos:line="66" pos:column="49">TEXT<pos:position pos:line="66" pos:column="53"/></name></expr>;<pos:position pos:line="66" pos:column="54"/></expr_stmt>
				}<pos:position pos:line="67" pos:column="34"/></block></else></if>
				<break pos:line="68" pos:column="33">break;<pos:position pos:line="68" pos:column="39"/></break>
			}<pos:position pos:line="69" pos:column="26"/></block></switch>
		}<pos:position pos:line="70" pos:column="18"/></block></while>

		<comment type="block" pos:line="72" pos:column="17">/* print remaining text unless parsing an escape sequence */</comment>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name pos:line="73" pos:column="21">state<pos:position pos:line="73" pos:column="26"/></name> <operator pos:line="73" pos:column="27">==<pos:position pos:line="73" pos:column="29"/></operator> <name pos:line="73" pos:column="30">TEXT<pos:position pos:line="73" pos:column="34"/></name> <operator pos:line="73" pos:column="35">&amp;&amp;<pos:position pos:line="73" pos:column="45"/></operator> <name pos:line="73" pos:column="38">end<pos:position pos:line="73" pos:column="41"/></name> <operator pos:line="73" pos:column="42">&gt;<pos:position pos:line="73" pos:column="46"/></operator> <name pos:line="73" pos:column="44">start<pos:position pos:line="73" pos:column="49"/></name></expr>)<pos:position pos:line="73" pos:column="50"/></condition><then pos:line="73" pos:column="50"> <block pos:line="73" pos:column="51">{
			<comment type="block" pos:line="74" pos:column="25">/* check for incomplete UTF-8 sequences and fix end */</comment>
			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><name><name pos:line="75" pos:column="29">buffer<pos:position pos:line="75" pos:column="35"/></name><index pos:line="75" pos:column="35">[<expr><name pos:line="75" pos:column="36">end<pos:position pos:line="75" pos:column="39"/></name> <operator pos:line="75" pos:column="40">-<pos:position pos:line="75" pos:column="41"/></operator> <literal type="number" pos:line="75" pos:column="42">1<pos:position pos:line="75" pos:column="43"/></literal></expr>]<pos:position pos:line="75" pos:column="44"/></index></name> <operator pos:line="75" pos:column="45">&gt;=<pos:position pos:line="75" pos:column="50"/></operator> <literal type="number" pos:line="75" pos:column="48">0x80<pos:position pos:line="75" pos:column="52"/></literal></expr>)<pos:position pos:line="75" pos:column="53"/></condition><then pos:line="75" pos:column="53"> <block pos:line="75" pos:column="54">{
				<if pos:line="76" pos:column="33">if <condition pos:line="76" pos:column="36">(<expr><name><name pos:line="76" pos:column="37">buffer<pos:position pos:line="76" pos:column="43"/></name><index pos:line="76" pos:column="43">[<expr><name pos:line="76" pos:column="44">end<pos:position pos:line="76" pos:column="47"/></name> <operator pos:line="76" pos:column="48">-<pos:position pos:line="76" pos:column="49"/></operator><literal type="number" pos:line="76" pos:column="49">1<pos:position pos:line="76" pos:column="50"/></literal></expr>]<pos:position pos:line="76" pos:column="51"/></index></name> <operator pos:line="76" pos:column="52">&gt;=<pos:position pos:line="76" pos:column="57"/></operator> <literal type="number" pos:line="76" pos:column="55">0xc0<pos:position pos:line="76" pos:column="59"/></literal></expr>)<pos:position pos:line="76" pos:column="60"/></condition><then pos:line="76" pos:column="60">
					<block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="41">end<pos:position pos:line="77" pos:column="44"/></name><operator pos:line="77" pos:column="44">--<pos:position pos:line="77" pos:column="46"/></operator></expr>;<pos:position pos:line="77" pos:column="47"/></expr_stmt></block></then>
				<elseif pos:line="78" pos:column="33">else <if pos:line="78" pos:column="38">if <condition pos:line="78" pos:column="41">(<expr><name pos:line="78" pos:column="42">end<pos:position pos:line="78" pos:column="45"/></name> <operator pos:line="78" pos:column="46">-<pos:position pos:line="78" pos:column="47"/></operator> <literal type="number" pos:line="78" pos:column="48">1<pos:position pos:line="78" pos:column="49"/></literal> <operator pos:line="78" pos:column="50">&gt;<pos:position pos:line="78" pos:column="54"/></operator> <name pos:line="78" pos:column="52">start<pos:position pos:line="78" pos:column="57"/></name> <operator pos:line="78" pos:column="58">&amp;&amp;<pos:position pos:line="78" pos:column="68"/></operator>
						<name><name pos:line="79" pos:column="49">buffer<pos:position pos:line="79" pos:column="55"/></name><index pos:line="79" pos:column="55">[<expr><name pos:line="79" pos:column="56">end<pos:position pos:line="79" pos:column="59"/></name> <operator pos:line="79" pos:column="60">-<pos:position pos:line="79" pos:column="61"/></operator> <literal type="number" pos:line="79" pos:column="62">2<pos:position pos:line="79" pos:column="63"/></literal></expr>]<pos:position pos:line="79" pos:column="64"/></index></name> <operator pos:line="79" pos:column="65">&gt;=<pos:position pos:line="79" pos:column="70"/></operator> <literal type="number" pos:line="79" pos:column="68">0xe0<pos:position pos:line="79" pos:column="72"/></literal></expr>)<pos:position pos:line="79" pos:column="73"/></condition><then pos:line="79" pos:column="73">
					<block type="pseudo"><expr_stmt><expr><name pos:line="80" pos:column="41">end<pos:position pos:line="80" pos:column="44"/></name> <operator pos:line="80" pos:column="45">-=<pos:position pos:line="80" pos:column="47"/></operator> <literal type="number" pos:line="80" pos:column="48">2<pos:position pos:line="80" pos:column="49"/></literal></expr>;<pos:position pos:line="80" pos:column="50"/></expr_stmt></block></then></if></elseif>
				<elseif pos:line="81" pos:column="33">else <if pos:line="81" pos:column="38">if <condition pos:line="81" pos:column="41">(<expr><name pos:line="81" pos:column="42">end<pos:position pos:line="81" pos:column="45"/></name> <operator pos:line="81" pos:column="46">-<pos:position pos:line="81" pos:column="47"/></operator> <literal type="number" pos:line="81" pos:column="48">2<pos:position pos:line="81" pos:column="49"/></literal> <operator pos:line="81" pos:column="50">&gt;<pos:position pos:line="81" pos:column="54"/></operator> <name pos:line="81" pos:column="52">start<pos:position pos:line="81" pos:column="57"/></name> <operator pos:line="81" pos:column="58">&amp;&amp;<pos:position pos:line="81" pos:column="68"/></operator>
						<name><name pos:line="82" pos:column="49">buffer<pos:position pos:line="82" pos:column="55"/></name><index pos:line="82" pos:column="55">[<expr><name pos:line="82" pos:column="56">end<pos:position pos:line="82" pos:column="59"/></name> <operator pos:line="82" pos:column="60">-<pos:position pos:line="82" pos:column="61"/></operator> <literal type="number" pos:line="82" pos:column="62">3<pos:position pos:line="82" pos:column="63"/></literal></expr>]<pos:position pos:line="82" pos:column="64"/></index></name> <operator pos:line="82" pos:column="65">&gt;=<pos:position pos:line="82" pos:column="70"/></operator> <literal type="number" pos:line="82" pos:column="68">0xf0<pos:position pos:line="82" pos:column="72"/></literal></expr>)<pos:position pos:line="82" pos:column="73"/></condition><then pos:line="82" pos:column="73">
					<block type="pseudo"><expr_stmt><expr><name pos:line="83" pos:column="41">end<pos:position pos:line="83" pos:column="44"/></name> <operator pos:line="83" pos:column="45">-=<pos:position pos:line="83" pos:column="47"/></operator> <literal type="number" pos:line="83" pos:column="48">3<pos:position pos:line="83" pos:column="49"/></literal></expr>;<pos:position pos:line="83" pos:column="50"/></expr_stmt></block></then></if></elseif></if>
			}<pos:position pos:line="84" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="86" pos:column="25">/* print remaining complete UTF-8 sequences */</comment>
			<if pos:line="87" pos:column="25">if <condition pos:line="87" pos:column="28">(<expr><name pos:line="87" pos:column="29">end<pos:position pos:line="87" pos:column="32"/></name> <operator pos:line="87" pos:column="33">&gt;<pos:position pos:line="87" pos:column="37"/></operator> <name pos:line="87" pos:column="35">start<pos:position pos:line="87" pos:column="40"/></name></expr>)<pos:position pos:line="87" pos:column="41"/></condition><then pos:line="87" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="33">write_console<pos:position pos:line="88" pos:column="46"/></name><argument_list pos:line="88" pos:column="46">(<argument><expr><name pos:line="88" pos:column="47">buffer<pos:position pos:line="88" pos:column="53"/></name> <operator pos:line="88" pos:column="54">+<pos:position pos:line="88" pos:column="55"/></operator> <name pos:line="88" pos:column="56">start<pos:position pos:line="88" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="63">end<pos:position pos:line="88" pos:column="66"/></name> <operator pos:line="88" pos:column="67">-<pos:position pos:line="88" pos:column="68"/></operator> <name pos:line="88" pos:column="69">start<pos:position pos:line="88" pos:column="74"/></name></expr></argument>)<pos:position pos:line="88" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="76"/></expr_stmt></block></then></if>

			<comment type="block" pos:line="90" pos:column="25">/* move remaining bytes to the front */</comment>
			<if pos:line="91" pos:column="25">if <condition pos:line="91" pos:column="28">(<expr><name pos:line="91" pos:column="29">end<pos:position pos:line="91" pos:column="32"/></name> <operator pos:line="91" pos:column="33">&lt;<pos:position pos:line="91" pos:column="37"/></operator> <name pos:line="91" pos:column="35">bytes<pos:position pos:line="91" pos:column="40"/></name></expr>)<pos:position pos:line="91" pos:column="41"/></condition><then pos:line="91" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="33">memmove<pos:position pos:line="92" pos:column="40"/></name><argument_list pos:line="92" pos:column="40">(<argument><expr><name pos:line="92" pos:column="41">buffer<pos:position pos:line="92" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="49">buffer<pos:position pos:line="92" pos:column="55"/></name> <operator pos:line="92" pos:column="56">+<pos:position pos:line="92" pos:column="57"/></operator> <name pos:line="92" pos:column="58">end<pos:position pos:line="92" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="63">bytes<pos:position pos:line="92" pos:column="68"/></name> <operator pos:line="92" pos:column="69">-<pos:position pos:line="92" pos:column="70"/></operator> <name pos:line="92" pos:column="71">end<pos:position pos:line="92" pos:column="74"/></name></expr></argument>)<pos:position pos:line="92" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="76"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="93" pos:column="25">end<pos:position pos:line="93" pos:column="28"/></name> <operator pos:line="93" pos:column="29">=<pos:position pos:line="93" pos:column="30"/></operator> <name pos:line="93" pos:column="31">bytes<pos:position pos:line="93" pos:column="36"/></name> <operator pos:line="93" pos:column="37">-<pos:position pos:line="93" pos:column="38"/></operator> <name pos:line="93" pos:column="39">end<pos:position pos:line="93" pos:column="42"/></name></expr>;<pos:position pos:line="93" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="94" pos:column="18"/></block></then> <else pos:line="94" pos:column="19">else <block pos:line="94" pos:column="24">{
			<comment type="block" pos:line="95" pos:column="25">/* all data has been consumed, mark buffer empty */</comment>
			<expr_stmt><expr><name pos:line="96" pos:column="25">end<pos:position pos:line="96" pos:column="28"/></name> <operator pos:line="96" pos:column="29">=<pos:position pos:line="96" pos:column="30"/></operator> <literal type="number" pos:line="96" pos:column="31">0<pos:position pos:line="96" pos:column="32"/></literal></expr>;<pos:position pos:line="96" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="97" pos:column="18"/></block></else></if>
	}<pos:position pos:line="98" pos:column="10"/></block></while>

	<comment type="block" pos:line="100" pos:column="9">/* check if the console font supports unicode */</comment>
	<expr_stmt><expr><call><name pos:line="101" pos:column="9">warn_if_raster_font<pos:position pos:line="101" pos:column="28"/></name><argument_list pos:line="101" pos:column="28">()<pos:position pos:line="101" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="31"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="103" pos:column="9">CloseHandle<pos:position pos:line="103" pos:column="20"/></name><argument_list pos:line="103" pos:column="20">(<argument><expr><name pos:line="103" pos:column="21">hread<pos:position pos:line="103" pos:column="26"/></name></expr></argument>)<pos:position pos:line="103" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="28"/></expr_stmt>
	<return pos:line="104" pos:column="9">return <expr><literal type="number" pos:line="104" pos:column="16">0<pos:position pos:line="104" pos:column="17"/></literal></expr>;<pos:position pos:line="104" pos:column="18"/></return>
}<pos:position pos:line="105" pos:column="2"/></block></function></unit>
