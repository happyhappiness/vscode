<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_626_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">include_by_gitdir<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">config_options<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">opts<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">cond<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">size_t<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">cond_len<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="65">int<pos:position pos:line="2" pos:column="68"/></name></type> <name pos:line="2" pos:column="69">icase<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">text<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">STRBUF_INIT<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">pattern<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><name pos:line="5" pos:column="33">STRBUF_INIT<pos:position pos:line="5" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">ret<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="22">prefix<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">git_dir<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">already_tried_absolute<pos:position pos:line="8" pos:column="35"/></name> <init pos:line="8" pos:column="36">= <expr><literal type="number" pos:line="8" pos:column="38">0<pos:position pos:line="8" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="40"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">opts<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">git_dir<pos:position pos:line="10" pos:column="26"/></name></name></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">git_dir<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <name><name pos:line="11" pos:column="27">opts<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">-&gt;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="33">git_dir<pos:position pos:line="11" pos:column="40"/></name></name></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt></block></then>
	<else pos:line="12" pos:column="9">else
		<block type="pseudo"><goto pos:line="13" pos:column="17">goto <name pos:line="13" pos:column="22">done<pos:position pos:line="13" pos:column="26"/></name>;<pos:position pos:line="13" pos:column="27"/></goto></block></else></if>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">strbuf_realpath<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><operator pos:line="15" pos:column="25">&amp;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="26">text<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="32">git_dir<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="41">1<pos:position pos:line="15" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">strbuf_add<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><operator pos:line="16" pos:column="20">&amp;<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="21">pattern<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="30">cond<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="36">cond_len<pos:position pos:line="16" pos:column="44"/></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">prefix<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <call><name pos:line="17" pos:column="18">prepare_include_condition_pattern<pos:position pos:line="17" pos:column="51"/></name><argument_list pos:line="17" pos:column="51">(<argument><expr><operator pos:line="17" pos:column="52">&amp;<pos:position pos:line="17" pos:column="57"/></operator><name pos:line="17" pos:column="53">pattern<pos:position pos:line="17" pos:column="60"/></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="62"/></expr_stmt>

<label><name pos:line="19" pos:column="1">again<pos:position pos:line="19" pos:column="6"/></name>:<pos:position pos:line="19" pos:column="7"/></label>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">prefix<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">&lt;<pos:position pos:line="20" pos:column="24"/></operator> <literal type="number" pos:line="20" pos:column="22">0<pos:position pos:line="20" pos:column="23"/></literal></expr>)<pos:position pos:line="20" pos:column="24"/></condition><then pos:line="20" pos:column="24">
		<block type="pseudo"><goto pos:line="21" pos:column="17">goto <name pos:line="21" pos:column="22">done<pos:position pos:line="21" pos:column="26"/></name>;<pos:position pos:line="21" pos:column="27"/></goto></block></then></if>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">prefix<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">&gt;<pos:position pos:line="23" pos:column="24"/></operator> <literal type="number" pos:line="23" pos:column="22">0<pos:position pos:line="23" pos:column="23"/></literal></expr>)<pos:position pos:line="23" pos:column="24"/></condition><then pos:line="23" pos:column="24"> <block pos:line="23" pos:column="25">{
		<comment type="block" pos:line="24" pos:column="17">/*
		 * perform literal matching on the prefix part so that
		 * any wildcard character in it can't create side effects.
		 */</comment>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name><name pos:line="28" pos:column="21">text<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">.<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="26">len<pos:position pos:line="28" pos:column="29"/></name></name> <operator pos:line="28" pos:column="30">&lt;<pos:position pos:line="28" pos:column="34"/></operator> <name pos:line="28" pos:column="32">prefix<pos:position pos:line="28" pos:column="38"/></name></expr>)<pos:position pos:line="28" pos:column="39"/></condition><then pos:line="28" pos:column="39">
			<block type="pseudo"><goto pos:line="29" pos:column="25">goto <name pos:line="29" pos:column="30">done<pos:position pos:line="29" pos:column="34"/></name>;<pos:position pos:line="29" pos:column="35"/></goto></block></then></if>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">icase<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">&amp;&amp;<pos:position pos:line="30" pos:column="38"/></operator> <call><name pos:line="30" pos:column="31">strncmp<pos:position pos:line="30" pos:column="38"/></name><argument_list pos:line="30" pos:column="38">(<argument><expr><name><name pos:line="30" pos:column="39">pattern<pos:position pos:line="30" pos:column="46"/></name><operator pos:line="30" pos:column="46">.<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="47">buf<pos:position pos:line="30" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="52">text<pos:position pos:line="30" pos:column="56"/></name><operator pos:line="30" pos:column="56">.<pos:position pos:line="30" pos:column="57"/></operator><name pos:line="30" pos:column="57">buf<pos:position pos:line="30" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="62">prefix<pos:position pos:line="30" pos:column="68"/></name></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="70"/></condition><then pos:line="30" pos:column="70">
			<block type="pseudo"><goto pos:line="31" pos:column="25">goto <name pos:line="31" pos:column="30">done<pos:position pos:line="31" pos:column="34"/></name>;<pos:position pos:line="31" pos:column="35"/></goto></block></then></if>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">icase<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">&amp;&amp;<pos:position pos:line="32" pos:column="37"/></operator> <call><name pos:line="32" pos:column="30">strncasecmp<pos:position pos:line="32" pos:column="41"/></name><argument_list pos:line="32" pos:column="41">(<argument><expr><name><name pos:line="32" pos:column="42">pattern<pos:position pos:line="32" pos:column="49"/></name><operator pos:line="32" pos:column="49">.<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="50">buf<pos:position pos:line="32" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="55">text<pos:position pos:line="32" pos:column="59"/></name><operator pos:line="32" pos:column="59">.<pos:position pos:line="32" pos:column="60"/></operator><name pos:line="32" pos:column="60">buf<pos:position pos:line="32" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="65">prefix<pos:position pos:line="32" pos:column="71"/></name></expr></argument>)<pos:position pos:line="32" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="73"/></condition><then pos:line="32" pos:column="73">
			<block type="pseudo"><goto pos:line="33" pos:column="25">goto <name pos:line="33" pos:column="30">done<pos:position pos:line="33" pos:column="34"/></name>;<pos:position pos:line="33" pos:column="35"/></goto></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="36" pos:column="9">ret<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <operator pos:line="36" pos:column="15">!<pos:position pos:line="36" pos:column="16"/></operator><call><name pos:line="36" pos:column="16">wildmatch<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">(<argument><expr><name><name pos:line="36" pos:column="26">pattern<pos:position pos:line="36" pos:column="33"/></name><operator pos:line="36" pos:column="33">.<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="34">buf<pos:position pos:line="36" pos:column="37"/></name></name> <operator pos:line="36" pos:column="38">+<pos:position pos:line="36" pos:column="39"/></operator> <name pos:line="36" pos:column="40">prefix<pos:position pos:line="36" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="48">text<pos:position pos:line="36" pos:column="52"/></name><operator pos:line="36" pos:column="52">.<pos:position pos:line="36" pos:column="53"/></operator><name pos:line="36" pos:column="53">buf<pos:position pos:line="36" pos:column="56"/></name></name> <operator pos:line="36" pos:column="57">+<pos:position pos:line="36" pos:column="58"/></operator> <name pos:line="36" pos:column="59">prefix<pos:position pos:line="36" pos:column="65"/></name></expr></argument>,
			 <argument><expr><ternary><condition><expr><name pos:line="37" pos:column="26">icase<pos:position pos:line="37" pos:column="31"/></name></expr> ?<pos:position pos:line="37" pos:column="33"/></condition><then pos:line="37" pos:column="33"> <expr><name pos:line="37" pos:column="34">WM_CASEFOLD<pos:position pos:line="37" pos:column="45"/></name></expr> <pos:position pos:line="37" pos:column="46"/></then><else pos:line="37" pos:column="46">: <expr><literal type="number" pos:line="37" pos:column="48">0<pos:position pos:line="37" pos:column="49"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><operator pos:line="39" pos:column="13">!<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="14">ret<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">&amp;&amp;<pos:position pos:line="39" pos:column="28"/></operator> <operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">already_tried_absolute<pos:position pos:line="39" pos:column="44"/></name></expr>)<pos:position pos:line="39" pos:column="45"/></condition><then pos:line="39" pos:column="45"> <block pos:line="39" pos:column="46">{
		<comment type="block" pos:line="40" pos:column="17">/*
		 * We've tried e.g. matching gitdir:~/work, but if
		 * ~/work is a symlink to /mnt/storage/work
		 * strbuf_realpath() will expand it, so the rule won't
		 * match. Let's match against a
		 * strbuf_add_absolute_path() version of the path,
		 * which'll do the right thing
		 */</comment>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">strbuf_reset<pos:position pos:line="48" pos:column="29"/></name><argument_list pos:line="48" pos:column="29">(<argument><expr><operator pos:line="48" pos:column="30">&amp;<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="31">text<pos:position pos:line="48" pos:column="35"/></name></expr></argument>)<pos:position pos:line="48" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">strbuf_add_absolute_path<pos:position pos:line="49" pos:column="41"/></name><argument_list pos:line="49" pos:column="41">(<argument><expr><operator pos:line="49" pos:column="42">&amp;<pos:position pos:line="49" pos:column="47"/></operator><name pos:line="49" pos:column="43">text<pos:position pos:line="49" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="49">git_dir<pos:position pos:line="49" pos:column="56"/></name></expr></argument>)<pos:position pos:line="49" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name pos:line="50" pos:column="17">already_tried_absolute<pos:position pos:line="50" pos:column="39"/></name> <operator pos:line="50" pos:column="40">=<pos:position pos:line="50" pos:column="41"/></operator> <literal type="number" pos:line="50" pos:column="42">1<pos:position pos:line="50" pos:column="43"/></literal></expr>;<pos:position pos:line="50" pos:column="44"/></expr_stmt>
		<goto pos:line="51" pos:column="17">goto <name pos:line="51" pos:column="22">again<pos:position pos:line="51" pos:column="27"/></name>;<pos:position pos:line="51" pos:column="28"/></goto>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>
<label><name pos:line="53" pos:column="1">done<pos:position pos:line="53" pos:column="5"/></name>:<pos:position pos:line="53" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="54" pos:column="9">strbuf_release<pos:position pos:line="54" pos:column="23"/></name><argument_list pos:line="54" pos:column="23">(<argument><expr><operator pos:line="54" pos:column="24">&amp;<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="25">pattern<pos:position pos:line="54" pos:column="32"/></name></expr></argument>)<pos:position pos:line="54" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">strbuf_release<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><operator pos:line="55" pos:column="24">&amp;<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="25">text<pos:position pos:line="55" pos:column="29"/></name></expr></argument>)<pos:position pos:line="55" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="31"/></expr_stmt>
	<return pos:line="56" pos:column="9">return <expr><name pos:line="56" pos:column="16">ret<pos:position pos:line="56" pos:column="19"/></name></expr>;<pos:position pos:line="56" pos:column="20"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
