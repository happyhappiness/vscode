<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1579.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">copy_fd<pos:position pos:line="1" pos:column="12"/></name><parameter_list pos:line="1" pos:column="12">(<parameter><decl><type><name pos:line="1" pos:column="13">int<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ifd<pos:position pos:line="1" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">ofd<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<while pos:line="3" pos:column="9">while <condition pos:line="3" pos:column="15">(<expr><literal type="number" pos:line="3" pos:column="16">1<pos:position pos:line="3" pos:column="17"/></literal></expr>)<pos:position pos:line="3" pos:column="18"/></condition> <block pos:line="3" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="4" pos:column="17">char<pos:position pos:line="4" pos:column="21"/></name></type> <name><name pos:line="4" pos:column="22">buffer<pos:position pos:line="4" pos:column="28"/></name><index pos:line="4" pos:column="28">[<expr><literal type="number" pos:line="4" pos:column="29">8192<pos:position pos:line="4" pos:column="33"/></literal></expr>]<pos:position pos:line="4" pos:column="34"/></index></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">char<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">buf<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">buffer<pos:position pos:line="5" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">ssize_t<pos:position pos:line="6" pos:column="24"/></name></type> <name pos:line="6" pos:column="25">len<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><call><name pos:line="6" pos:column="31">xread<pos:position pos:line="6" pos:column="36"/></name><argument_list pos:line="6" pos:column="36">(<argument><expr><name pos:line="6" pos:column="37">ifd<pos:position pos:line="6" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="42">buffer<pos:position pos:line="6" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="50">sizeof<argument_list pos:line="6" pos:column="56">(<argument><expr><name pos:line="6" pos:column="57">buffer<pos:position pos:line="6" pos:column="63"/></name></expr></argument>)<pos:position pos:line="6" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="66"/></decl_stmt>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><operator pos:line="7" pos:column="21">!<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">len<pos:position pos:line="7" pos:column="25"/></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26">
			<block type="pseudo"><break pos:line="8" pos:column="25">break;<pos:position pos:line="8" pos:column="31"/></break></block></then></if>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">len<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">&lt;<pos:position pos:line="9" pos:column="29"/></operator> <literal type="number" pos:line="9" pos:column="27">0<pos:position pos:line="9" pos:column="28"/></literal></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29"> <block pos:line="9" pos:column="30">{
			<decl_stmt><decl><type><name pos:line="10" pos:column="25">int<pos:position pos:line="10" pos:column="28"/></name></type> <name pos:line="10" pos:column="29">read_error<pos:position pos:line="10" pos:column="39"/></name> <init pos:line="10" pos:column="40">= <expr><name pos:line="10" pos:column="42">errno<pos:position pos:line="10" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">close<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">ifd<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
			<return pos:line="12" pos:column="25">return <expr><call><name pos:line="12" pos:column="32">error<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><literal type="string" pos:line="12" pos:column="38">"copy-fd: read returned %s"<pos:position pos:line="12" pos:column="65"/></literal></expr></argument>,
				     <argument><expr><call><name pos:line="13" pos:column="38">strerror<pos:position pos:line="13" pos:column="46"/></name><argument_list pos:line="13" pos:column="46">(<argument><expr><name pos:line="13" pos:column="47">read_error<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="60"/></return>
		}<pos:position pos:line="14" pos:column="18"/></block></then></if>
		<while pos:line="15" pos:column="17">while <condition pos:line="15" pos:column="23">(<expr><name pos:line="15" pos:column="24">len<pos:position pos:line="15" pos:column="27"/></name></expr>)<pos:position pos:line="15" pos:column="28"/></condition> <block pos:line="15" pos:column="29">{
			<decl_stmt><decl><type><name pos:line="16" pos:column="25">int<pos:position pos:line="16" pos:column="28"/></name></type> <name pos:line="16" pos:column="29">written<pos:position pos:line="16" pos:column="36"/></name> <init pos:line="16" pos:column="37">= <expr><call><name pos:line="16" pos:column="39">xwrite<pos:position pos:line="16" pos:column="45"/></name><argument_list pos:line="16" pos:column="45">(<argument><expr><name pos:line="16" pos:column="46">ofd<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">buf<pos:position pos:line="16" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="56">len<pos:position pos:line="16" pos:column="59"/></name></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="61"/></decl_stmt>
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><name pos:line="17" pos:column="29">written<pos:position pos:line="17" pos:column="36"/></name> <operator pos:line="17" pos:column="37">&gt;<pos:position pos:line="17" pos:column="41"/></operator> <literal type="number" pos:line="17" pos:column="39">0<pos:position pos:line="17" pos:column="40"/></literal></expr>)<pos:position pos:line="17" pos:column="41"/></condition><then pos:line="17" pos:column="41"> <block pos:line="17" pos:column="42">{
				<expr_stmt><expr><name pos:line="18" pos:column="33">buf<pos:position pos:line="18" pos:column="36"/></name> <operator pos:line="18" pos:column="37">+=<pos:position pos:line="18" pos:column="39"/></operator> <name pos:line="18" pos:column="40">written<pos:position pos:line="18" pos:column="47"/></name></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><name pos:line="19" pos:column="33">len<pos:position pos:line="19" pos:column="36"/></name> <operator pos:line="19" pos:column="37">-=<pos:position pos:line="19" pos:column="39"/></operator> <name pos:line="19" pos:column="40">written<pos:position pos:line="19" pos:column="47"/></name></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
			}<pos:position pos:line="20" pos:column="26"/></block></then>
			<elseif pos:line="21" pos:column="25">else <if pos:line="21" pos:column="30">if <condition pos:line="21" pos:column="33">(<expr><operator pos:line="21" pos:column="34">!<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="35">written<pos:position pos:line="21" pos:column="42"/></name></expr>)<pos:position pos:line="21" pos:column="43"/></condition><then pos:line="21" pos:column="43"> <block pos:line="21" pos:column="44">{
				<expr_stmt><expr><call><name pos:line="22" pos:column="33">close<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><name pos:line="22" pos:column="39">ifd<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
				<return pos:line="23" pos:column="33">return <expr><call><name pos:line="23" pos:column="40">error<pos:position pos:line="23" pos:column="45"/></name><argument_list pos:line="23" pos:column="45">(<argument><expr><literal type="string" pos:line="23" pos:column="46">"copy-fd: write returned 0"<pos:position pos:line="23" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="75"/></return>
			}<pos:position pos:line="24" pos:column="26"/></block></then></if></elseif> <else pos:line="24" pos:column="27">else <block pos:line="24" pos:column="32">{
				<decl_stmt><decl><type><name pos:line="25" pos:column="33">int<pos:position pos:line="25" pos:column="36"/></name></type> <name pos:line="25" pos:column="37">write_error<pos:position pos:line="25" pos:column="48"/></name> <init pos:line="25" pos:column="49">= <expr><name pos:line="25" pos:column="51">errno<pos:position pos:line="25" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="57"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="26" pos:column="33">close<pos:position pos:line="26" pos:column="38"/></name><argument_list pos:line="26" pos:column="38">(<argument><expr><name pos:line="26" pos:column="39">ifd<pos:position pos:line="26" pos:column="42"/></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
				<return pos:line="27" pos:column="33">return <expr><call><name pos:line="27" pos:column="40">error<pos:position pos:line="27" pos:column="45"/></name><argument_list pos:line="27" pos:column="45">(<argument><expr><literal type="string" pos:line="27" pos:column="46">"copy-fd: write returned %s"<pos:position pos:line="27" pos:column="74"/></literal></expr></argument>,
					     <argument><expr><call><name pos:line="28" pos:column="46">strerror<pos:position pos:line="28" pos:column="54"/></name><argument_list pos:line="28" pos:column="54">(<argument><expr><name pos:line="28" pos:column="55">write_error<pos:position pos:line="28" pos:column="66"/></name></expr></argument>)<pos:position pos:line="28" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="69"/></return>
			}<pos:position pos:line="29" pos:column="26"/></block></else></if>
		}<pos:position pos:line="30" pos:column="18"/></block></while>
	}<pos:position pos:line="31" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">close<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">ifd<pos:position pos:line="32" pos:column="18"/></name></expr></argument>)<pos:position pos:line="32" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt>
	<return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
