<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6866_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_check_malloced_chunk<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">mstate<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">m<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">void<pos:position pos:line="1" pos:column="51"/></name><modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type> <name pos:line="1" pos:column="53">mem<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">size_t<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">s<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list> <block pos:line="1" pos:column="68">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><name pos:line="2" pos:column="7">mem<pos:position pos:line="2" pos:column="10"/></name> <operator pos:line="2" pos:column="11">!=<pos:position pos:line="2" pos:column="13"/></operator> <literal type="number" pos:line="2" pos:column="14">0<pos:position pos:line="2" pos:column="15"/></literal></expr>)<pos:position pos:line="2" pos:column="16"/></condition><then pos:line="2" pos:column="16"> <block pos:line="2" pos:column="17">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">mchunkptr<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">p<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><call><name pos:line="3" pos:column="19">mem2chunk<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">mem<pos:position pos:line="3" pos:column="32"/></name></expr></argument>)<pos:position pos:line="3" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">size_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">sz<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><name><name pos:line="4" pos:column="17">p<pos:position pos:line="4" pos:column="18"/></name><operator pos:line="4" pos:column="18">-&gt;<pos:position pos:line="4" pos:column="23"/></operator><name pos:line="4" pos:column="20">head<pos:position pos:line="4" pos:column="24"/></name></name> <operator pos:line="4" pos:column="25">&amp;<pos:position pos:line="4" pos:column="30"/></operator> <operator pos:line="4" pos:column="27">~<pos:position pos:line="4" pos:column="28"/></operator><operator pos:line="4" pos:column="28">(<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="29">PINUSE_BIT<pos:position pos:line="4" pos:column="39"/></name><operator pos:line="4" pos:column="39">|<pos:position pos:line="4" pos:column="40"/></operator><name pos:line="4" pos:column="40">CINUSE_BIT<pos:position pos:line="4" pos:column="50"/></name><operator pos:line="4" pos:column="50">)<pos:position pos:line="4" pos:column="51"/></operator></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">do_check_inuse_chunk<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">m<pos:position pos:line="5" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="29">p<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">sz<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">&amp;<pos:position pos:line="6" pos:column="21"/></operator> <name pos:line="6" pos:column="18">CHUNK_ALIGN_MASK<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">)<pos:position pos:line="6" pos:column="35"/></operator> <operator pos:line="6" pos:column="36">==<pos:position pos:line="6" pos:column="38"/></operator> <literal type="number" pos:line="6" pos:column="39">0<pos:position pos:line="6" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">sz<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">&gt;=<pos:position pos:line="7" pos:column="20"/></operator> <name pos:line="7" pos:column="18">MIN_CHUNK_SIZE<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">sz<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">&gt;=<pos:position pos:line="8" pos:column="20"/></operator> <name pos:line="8" pos:column="18">s<pos:position pos:line="8" pos:column="19"/></name></expr></argument>)<pos:position pos:line="8" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="21"/></expr_stmt>
    <comment type="block" pos:line="9" pos:column="5">/* unless mmapped, size is less than MIN_CHUNK_SIZE more than request */</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><call><name pos:line="10" pos:column="12">is_mmapped<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">p<pos:position pos:line="10" pos:column="24"/></name></expr></argument>)<pos:position pos:line="10" pos:column="25"/></argument_list></call> <operator pos:line="10" pos:column="26">||<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">sz<pos:position pos:line="10" pos:column="31"/></name> <operator pos:line="10" pos:column="32">&lt;<pos:position pos:line="10" pos:column="36"/></operator> <operator pos:line="10" pos:column="34">(<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">s<pos:position pos:line="10" pos:column="36"/></name> <operator pos:line="10" pos:column="37">+<pos:position pos:line="10" pos:column="38"/></operator> <name pos:line="10" pos:column="39">MIN_CHUNK_SIZE<pos:position pos:line="10" pos:column="53"/></name><operator pos:line="10" pos:column="53">)<pos:position pos:line="10" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="10" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
