<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6568_git-2.13.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">winansi_init<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">void<pos:position pos:line="1" pos:column="23"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="24"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">con1<pos:position pos:line="3" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="19">con2<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">name<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><literal type="number" pos:line="4" pos:column="19">32<pos:position pos:line="4" pos:column="21"/></literal></expr>]<pos:position pos:line="4" pos:column="22"/></index></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* check if either stdout or stderr is a console output screen buffer */</comment>
	<expr_stmt><expr><name pos:line="7" pos:column="9">con1<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <call><name pos:line="7" pos:column="16">is_console<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><literal type="number" pos:line="7" pos:column="27">1<pos:position pos:line="7" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">con2<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <call><name pos:line="8" pos:column="16">is_console<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><literal type="number" pos:line="8" pos:column="27">2<pos:position pos:line="8" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>

	<comment type="block" pos:line="10" pos:column="9">/* Also compute console bit for fd 0 even though we don't need the result here. */</comment>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">is_console<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><literal type="number" pos:line="11" pos:column="20">0<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">con1<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&amp;&amp;<pos:position pos:line="13" pos:column="29"/></operator> <operator pos:line="13" pos:column="22">!<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">con2<pos:position pos:line="13" pos:column="27"/></name></expr>)<pos:position pos:line="13" pos:column="28"/></condition><then pos:line="13" pos:column="28"> <block pos:line="13" pos:column="29">{
<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">DETECT_MSYS_TTY<pos:position pos:line="14" pos:column="23"/></name></cpp:ifdef>
		<comment type="block" pos:line="15" pos:column="17">/* check if stdin / stdout / stderr are MSYS2 pty pipes */</comment>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">detect_msys_tty<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><literal type="number" pos:line="16" pos:column="33">0<pos:position pos:line="16" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">detect_msys_tty<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><literal type="number" pos:line="17" pos:column="33">1<pos:position pos:line="17" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">detect_msys_tty<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><literal type="number" pos:line="18" pos:column="33">2<pos:position pos:line="18" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
		<return pos:line="20" pos:column="17">return;<pos:position pos:line="20" pos:column="24"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="23" pos:column="9">/* create a named pipe to communicate with the console thread */</comment>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">xsnprintf<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">name<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="25">sizeof<argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">name<pos:position pos:line="24" pos:column="36"/></name></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="39">"\\\\.\\pipe\\winansi%lu"<pos:position pos:line="24" pos:column="64"/></literal></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="66">GetCurrentProcessId<pos:position pos:line="24" pos:column="85"/></name><argument_list pos:line="24" pos:column="85">()<pos:position pos:line="24" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="89"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">hwrite<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <call><name pos:line="25" pos:column="18">CreateNamedPipe<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">name<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">PIPE_ACCESS_OUTBOUND<pos:position pos:line="25" pos:column="60"/></name></expr></argument>,
		<argument><expr><name pos:line="26" pos:column="17">PIPE_TYPE_BYTE<pos:position pos:line="26" pos:column="31"/></name> <operator pos:line="26" pos:column="32">|<pos:position pos:line="26" pos:column="33"/></operator> <name pos:line="26" pos:column="34">PIPE_WAIT<pos:position pos:line="26" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="45">1<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="48">BUFFER_SIZE<pos:position pos:line="26" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="61">0<pos:position pos:line="26" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="64">0<pos:position pos:line="26" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="67">NULL<pos:position pos:line="26" pos:column="71"/></name></expr></argument>)<pos:position pos:line="26" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="73"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">hwrite<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">==<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">INVALID_HANDLE_VALUE<pos:position pos:line="27" pos:column="43"/></name></expr>)<pos:position pos:line="27" pos:column="44"/></condition><then pos:line="27" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">die_lasterr<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><literal type="string" pos:line="28" pos:column="29">"CreateNamedPipe failed"<pos:position pos:line="28" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="55"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="30" pos:column="9">hread<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">=<pos:position pos:line="30" pos:column="16"/></operator> <call><name pos:line="30" pos:column="17">CreateFile<pos:position pos:line="30" pos:column="27"/></name><argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">name<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="34">GENERIC_READ<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="48">0<pos:position pos:line="30" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="51">NULL<pos:position pos:line="30" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="57">OPEN_EXISTING<pos:position pos:line="30" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="72">0<pos:position pos:line="30" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="75">NULL<pos:position pos:line="30" pos:column="79"/></name></expr></argument>)<pos:position pos:line="30" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="81"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">hread<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">==<pos:position pos:line="31" pos:column="21"/></operator> <name pos:line="31" pos:column="22">INVALID_HANDLE_VALUE<pos:position pos:line="31" pos:column="42"/></name></expr>)<pos:position pos:line="31" pos:column="43"/></condition><then pos:line="31" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="17">die_lasterr<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><literal type="string" pos:line="32" pos:column="29">"CreateFile for named pipe failed"<pos:position pos:line="32" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="65"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="34" pos:column="9">/* start console spool thread on the pipe's read end */</comment>
	<expr_stmt><expr><name pos:line="35" pos:column="9">hthread<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <call><name pos:line="35" pos:column="19">CreateThread<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">NULL<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="38">0<pos:position pos:line="35" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="41">console_thread<pos:position pos:line="35" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="57">NULL<pos:position pos:line="35" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="63">0<pos:position pos:line="35" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="66">NULL<pos:position pos:line="35" pos:column="70"/></name></expr></argument>)<pos:position pos:line="35" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="72"/></expr_stmt>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">hthread<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">==<pos:position pos:line="36" pos:column="23"/></operator> <name pos:line="36" pos:column="24">INVALID_HANDLE_VALUE<pos:position pos:line="36" pos:column="44"/></name></expr>)<pos:position pos:line="36" pos:column="45"/></condition><then pos:line="36" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="17">die_lasterr<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><literal type="string" pos:line="37" pos:column="29">"CreateThread(console_thread) failed"<pos:position pos:line="37" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="68"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="39" pos:column="9">/* schedule cleanup routine */</comment>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name pos:line="40" pos:column="13">atexit<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><name pos:line="40" pos:column="20">winansi_exit<pos:position pos:line="40" pos:column="32"/></name></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="34"/></condition><then pos:line="40" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="17">die_errno<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">(<argument><expr><literal type="string" pos:line="41" pos:column="27">"atexit(winansi_exit) failed"<pos:position pos:line="41" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="58"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="43" pos:column="9">/* redirect stdout / stderr to the pipe */</comment>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">con1<pos:position pos:line="44" pos:column="17"/></name></expr>)<pos:position pos:line="44" pos:column="18"/></condition><then pos:line="44" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="17">hconsole1<pos:position pos:line="45" pos:column="26"/></name> <operator pos:line="45" pos:column="27">=<pos:position pos:line="45" pos:column="28"/></operator> <call><name pos:line="45" pos:column="29">swap_osfhnd<pos:position pos:line="45" pos:column="40"/></name><argument_list pos:line="45" pos:column="40">(<argument><expr><literal type="number" pos:line="45" pos:column="41">1<pos:position pos:line="45" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="44">duplicate_handle<pos:position pos:line="45" pos:column="60"/></name><argument_list pos:line="45" pos:column="60">(<argument><expr><name pos:line="45" pos:column="61">hwrite<pos:position pos:line="45" pos:column="67"/></name></expr></argument>)<pos:position pos:line="45" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="70"/></expr_stmt></block></then></if>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">con2<pos:position pos:line="46" pos:column="17"/></name></expr>)<pos:position pos:line="46" pos:column="18"/></condition><then pos:line="46" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="17">hconsole2<pos:position pos:line="47" pos:column="26"/></name> <operator pos:line="47" pos:column="27">=<pos:position pos:line="47" pos:column="28"/></operator> <call><name pos:line="47" pos:column="29">swap_osfhnd<pos:position pos:line="47" pos:column="40"/></name><argument_list pos:line="47" pos:column="40">(<argument><expr><literal type="number" pos:line="47" pos:column="41">2<pos:position pos:line="47" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="44">duplicate_handle<pos:position pos:line="47" pos:column="60"/></name><argument_list pos:line="47" pos:column="60">(<argument><expr><name pos:line="47" pos:column="61">hwrite<pos:position pos:line="47" pos:column="67"/></name></expr></argument>)<pos:position pos:line="47" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="70"/></expr_stmt></block></then></if>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
