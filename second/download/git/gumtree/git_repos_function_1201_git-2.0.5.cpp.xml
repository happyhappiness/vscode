<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1201_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parse_reset_branch<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">branch<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">b<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">sp<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* Obtain the branch name from the rest of our command */</comment>
	<expr_stmt><expr><name pos:line="7" pos:column="9">sp<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">strchr<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name><name pos:line="7" pos:column="21">command_buf<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">.<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="33">buf<pos:position pos:line="7" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="38">' '<pos:position pos:line="7" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call> <operator pos:line="7" pos:column="43">+<pos:position pos:line="7" pos:column="44"/></operator> <literal type="number" pos:line="7" pos:column="45">1<pos:position pos:line="7" pos:column="46"/></literal></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">b<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <call><name pos:line="8" pos:column="13">lookup_branch<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">sp<pos:position pos:line="8" pos:column="29"/></name></expr></argument>)<pos:position pos:line="8" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="31"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">b<pos:position pos:line="9" pos:column="14"/></name></expr>)<pos:position pos:line="9" pos:column="15"/></condition><then pos:line="9" pos:column="15"> <block pos:line="9" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">hashclr<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name><name pos:line="10" pos:column="25">b<pos:position pos:line="10" pos:column="26"/></name><operator pos:line="10" pos:column="26">-&gt;<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="28">sha1<pos:position pos:line="10" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">hashclr<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name><name pos:line="11" pos:column="25">b<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">-&gt;<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="28">branch_tree<pos:position pos:line="11" pos:column="39"/></name><operator pos:line="11" pos:column="39">.<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="40">versions<pos:position pos:line="11" pos:column="48"/></name><index pos:line="11" pos:column="48">[<expr><literal type="number" pos:line="11" pos:column="49">0<pos:position pos:line="11" pos:column="50"/></literal></expr>]<pos:position pos:line="11" pos:column="51"/></index></name><operator pos:line="11" pos:column="51">.<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="52">sha1<pos:position pos:line="11" pos:column="56"/></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">hashclr<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name><name pos:line="12" pos:column="25">b<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">-&gt;<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="28">branch_tree<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">.<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="40">versions<pos:position pos:line="12" pos:column="48"/></name><index pos:line="12" pos:column="48">[<expr><literal type="number" pos:line="12" pos:column="49">1<pos:position pos:line="12" pos:column="50"/></literal></expr>]<pos:position pos:line="12" pos:column="51"/></index></name><operator pos:line="12" pos:column="51">.<pos:position pos:line="12" pos:column="52"/></operator><name pos:line="12" pos:column="52">sha1<pos:position pos:line="12" pos:column="56"/></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name><name pos:line="13" pos:column="21">b<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">-&gt;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="24">branch_tree<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">.<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="36">tree<pos:position pos:line="13" pos:column="40"/></name></name></expr>)<pos:position pos:line="13" pos:column="41"/></condition><then pos:line="13" pos:column="41"> <block pos:line="13" pos:column="42">{
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">release_tree_content_recursive<pos:position pos:line="14" pos:column="55"/></name><argument_list pos:line="14" pos:column="55">(<argument><expr><name><name pos:line="14" pos:column="56">b<pos:position pos:line="14" pos:column="57"/></name><operator pos:line="14" pos:column="57">-&gt;<pos:position pos:line="14" pos:column="62"/></operator><name pos:line="14" pos:column="59">branch_tree<pos:position pos:line="14" pos:column="70"/></name><operator pos:line="14" pos:column="70">.<pos:position pos:line="14" pos:column="71"/></operator><name pos:line="14" pos:column="71">tree<pos:position pos:line="14" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="15" pos:column="25">b<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="28">branch_tree<pos:position pos:line="15" pos:column="39"/></name><operator pos:line="15" pos:column="39">.<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="40">tree<pos:position pos:line="15" pos:column="44"/></name></name> <operator pos:line="15" pos:column="45">=<pos:position pos:line="15" pos:column="46"/></operator> <name pos:line="15" pos:column="47">NULL<pos:position pos:line="15" pos:column="51"/></name></expr>;<pos:position pos:line="15" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>
	}<pos:position pos:line="17" pos:column="10"/></block></then>
	<else pos:line="18" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">b<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <call><name pos:line="19" pos:column="21">new_branch<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">sp<pos:position pos:line="19" pos:column="34"/></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">read_next_command<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">()<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">parse_from<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">b<pos:position pos:line="21" pos:column="21"/></name></expr></argument>)<pos:position pos:line="21" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name><name pos:line="22" pos:column="13">command_buf<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">.<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="25">len<pos:position pos:line="22" pos:column="28"/></name></name> <operator pos:line="22" pos:column="29">&gt;<pos:position pos:line="22" pos:column="33"/></operator> <literal type="number" pos:line="22" pos:column="31">0<pos:position pos:line="22" pos:column="32"/></literal></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">unread_command_buf<pos:position pos:line="23" pos:column="35"/></name> <operator pos:line="23" pos:column="36">=<pos:position pos:line="23" pos:column="37"/></operator> <literal type="number" pos:line="23" pos:column="38">1<pos:position pos:line="23" pos:column="39"/></literal></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt></block></then></if>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
