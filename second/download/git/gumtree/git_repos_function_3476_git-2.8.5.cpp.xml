<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3476_git-2.8.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_response_code<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">imap_store<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">ctx<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="56">struct<pos:position pos:line="1" pos:column="62"/></name> <name pos:line="1" pos:column="63">imap_cmd_cb<pos:position pos:line="1" pos:column="74"/></name></name> <modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">cb<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
			       <parameter><decl><type><name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">s<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">imap<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">imap<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name><name pos:line="4" pos:column="29">ctx<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">imap<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">arg<pos:position pos:line="5" pos:column="18"/></name></decl>, <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="21">p<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">*<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">s<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">!=<pos:position pos:line="7" pos:column="18"/></operator> <literal type="char" pos:line="7" pos:column="19">'['<pos:position pos:line="7" pos:column="22"/></literal></expr>)<pos:position pos:line="7" pos:column="23"/></condition><then pos:line="7" pos:column="23">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><name pos:line="8" pos:column="24">RESP_OK<pos:position pos:line="8" pos:column="31"/></name></expr>;<pos:position pos:line="8" pos:column="32"/></return></block></then></if>		<comment type="block" pos:line="8" pos:column="41">/* no response code */</comment>
	<expr_stmt><expr><name pos:line="9" pos:column="9">s<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">++<pos:position pos:line="9" pos:column="12"/></operator></expr>;<pos:position pos:line="9" pos:column="13"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><operator pos:line="10" pos:column="14">(<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">p<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <call><name pos:line="10" pos:column="19">strchr<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">s<pos:position pos:line="10" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="29">']'<pos:position pos:line="10" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call><operator pos:line="10" pos:column="33">)<pos:position pos:line="10" pos:column="34"/></operator></expr>)<pos:position pos:line="10" pos:column="35"/></condition><then pos:line="10" pos:column="35"> <block pos:line="10" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">fprintf<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">stderr<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="33">"IMAP error: malformed response code\n"<pos:position pos:line="11" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><name pos:line="12" pos:column="24">RESP_BAD<pos:position pos:line="12" pos:column="32"/></name></expr>;<pos:position pos:line="12" pos:column="33"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<expr_stmt><expr><operator pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">p<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">++<pos:position pos:line="14" pos:column="13"/></operator> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">arg<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">next_arg<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><operator pos:line="15" pos:column="24">&amp;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="25">s<pos:position pos:line="15" pos:column="26"/></name></expr></argument>)<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><call><name pos:line="16" pos:column="14">strcmp<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><literal type="string" pos:line="16" pos:column="21">"UIDVALIDITY"<pos:position pos:line="16" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="36">arg<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="41"/></condition><then pos:line="16" pos:column="41"> <block pos:line="16" pos:column="42">{
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><operator pos:line="17" pos:column="22">(<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="23">arg<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">=<pos:position pos:line="17" pos:column="28"/></operator> <call><name pos:line="17" pos:column="29">next_arg<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><operator pos:line="17" pos:column="38">&amp;<pos:position pos:line="17" pos:column="43"/></operator><name pos:line="17" pos:column="39">s<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call><operator pos:line="17" pos:column="41">)<pos:position pos:line="17" pos:column="42"/></operator> <operator pos:line="17" pos:column="43">||<pos:position pos:line="17" pos:column="45"/></operator> <operator pos:line="17" pos:column="46">!<pos:position pos:line="17" pos:column="47"/></operator><operator pos:line="17" pos:column="47">(<pos:position pos:line="17" pos:column="48"/></operator><name><name pos:line="17" pos:column="48">ctx<pos:position pos:line="17" pos:column="51"/></name><operator pos:line="17" pos:column="51">-&gt;<pos:position pos:line="17" pos:column="56"/></operator><name pos:line="17" pos:column="53">uidvalidity<pos:position pos:line="17" pos:column="64"/></name></name> <operator pos:line="17" pos:column="65">=<pos:position pos:line="17" pos:column="66"/></operator> <call><name pos:line="17" pos:column="67">atoi<pos:position pos:line="17" pos:column="71"/></name><argument_list pos:line="17" pos:column="71">(<argument><expr><name pos:line="17" pos:column="72">arg<pos:position pos:line="17" pos:column="75"/></name></expr></argument>)<pos:position pos:line="17" pos:column="76"/></argument_list></call><operator pos:line="17" pos:column="76">)<pos:position pos:line="17" pos:column="77"/></operator></expr>)<pos:position pos:line="17" pos:column="78"/></condition><then pos:line="17" pos:column="78"> <block pos:line="17" pos:column="79">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">fprintf<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">stderr<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="41">"IMAP error: malformed UIDVALIDITY status\n"<pos:position pos:line="18" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="87"/></expr_stmt>
			<return pos:line="19" pos:column="25">return <expr><name pos:line="19" pos:column="32">RESP_BAD<pos:position pos:line="19" pos:column="40"/></name></expr>;<pos:position pos:line="19" pos:column="41"/></return>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
	}<pos:position pos:line="21" pos:column="10"/></block></then> <elseif pos:line="21" pos:column="11">else <if pos:line="21" pos:column="16">if <condition pos:line="21" pos:column="19">(<expr><operator pos:line="21" pos:column="20">!<pos:position pos:line="21" pos:column="21"/></operator><call><name pos:line="21" pos:column="21">strcmp<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><literal type="string" pos:line="21" pos:column="28">"UIDNEXT"<pos:position pos:line="21" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="39">arg<pos:position pos:line="21" pos:column="42"/></name></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="44"/></condition><then pos:line="21" pos:column="44"> <block pos:line="21" pos:column="45">{
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><operator pos:line="22" pos:column="22">(<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">arg<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <call><name pos:line="22" pos:column="29">next_arg<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><operator pos:line="22" pos:column="38">&amp;<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="39">s<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call><operator pos:line="22" pos:column="41">)<pos:position pos:line="22" pos:column="42"/></operator> <operator pos:line="22" pos:column="43">||<pos:position pos:line="22" pos:column="45"/></operator> <operator pos:line="22" pos:column="46">!<pos:position pos:line="22" pos:column="47"/></operator><operator pos:line="22" pos:column="47">(<pos:position pos:line="22" pos:column="48"/></operator><name><name pos:line="22" pos:column="48">imap<pos:position pos:line="22" pos:column="52"/></name><operator pos:line="22" pos:column="52">-&gt;<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="54">uidnext<pos:position pos:line="22" pos:column="61"/></name></name> <operator pos:line="22" pos:column="62">=<pos:position pos:line="22" pos:column="63"/></operator> <call><name pos:line="22" pos:column="64">atoi<pos:position pos:line="22" pos:column="68"/></name><argument_list pos:line="22" pos:column="68">(<argument><expr><name pos:line="22" pos:column="69">arg<pos:position pos:line="22" pos:column="72"/></name></expr></argument>)<pos:position pos:line="22" pos:column="73"/></argument_list></call><operator pos:line="22" pos:column="73">)<pos:position pos:line="22" pos:column="74"/></operator></expr>)<pos:position pos:line="22" pos:column="75"/></condition><then pos:line="22" pos:column="75"> <block pos:line="22" pos:column="76">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">fprintf<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">stderr<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="41">"IMAP error: malformed NEXTUID status\n"<pos:position pos:line="23" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="83"/></expr_stmt>
			<return pos:line="24" pos:column="25">return <expr><name pos:line="24" pos:column="32">RESP_BAD<pos:position pos:line="24" pos:column="40"/></name></expr>;<pos:position pos:line="24" pos:column="41"/></return>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if></elseif> <elseif pos:line="26" pos:column="11">else <if pos:line="26" pos:column="16">if <condition pos:line="26" pos:column="19">(<expr><operator pos:line="26" pos:column="20">!<pos:position pos:line="26" pos:column="21"/></operator><call><name pos:line="26" pos:column="21">strcmp<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><literal type="string" pos:line="26" pos:column="28">"CAPABILITY"<pos:position pos:line="26" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="42">arg<pos:position pos:line="26" pos:column="45"/></name></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47"> <block pos:line="26" pos:column="48">{
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">parse_capability<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">imap<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="40">s<pos:position pos:line="27" pos:column="41"/></name></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if></elseif> <elseif pos:line="28" pos:column="11">else <if pos:line="28" pos:column="16">if <condition pos:line="28" pos:column="19">(<expr><operator pos:line="28" pos:column="20">!<pos:position pos:line="28" pos:column="21"/></operator><call><name pos:line="28" pos:column="21">strcmp<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><literal type="string" pos:line="28" pos:column="28">"ALERT"<pos:position pos:line="28" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="37">arg<pos:position pos:line="28" pos:column="40"/></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42"> <block pos:line="28" pos:column="43">{
		<comment type="block" pos:line="29" pos:column="17">/* RFC2060 says that these messages MUST be displayed
		 * to the user
		 */</comment>
		<for pos:line="32" pos:column="17">for <control pos:line="32" pos:column="21">(<init pos:line="32" pos:column="22">;<pos:position pos:line="32" pos:column="23"/></init> <condition><expr><call><name pos:line="32" pos:column="24">isspace<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><operator pos:line="32" pos:column="32">(<pos:position pos:line="32" pos:column="33"/></operator><name pos:line="32" pos:column="33">unsigned<pos:position pos:line="32" pos:column="41"/></name> <name pos:line="32" pos:column="42">char<pos:position pos:line="32" pos:column="46"/></name><operator pos:line="32" pos:column="46">)<pos:position pos:line="32" pos:column="47"/></operator><operator pos:line="32" pos:column="47">*<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="48">p<pos:position pos:line="32" pos:column="49"/></name></expr></argument>)<pos:position pos:line="32" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="51"/></condition> <incr><expr><name pos:line="32" pos:column="52">p<pos:position pos:line="32" pos:column="53"/></name><operator pos:line="32" pos:column="53">++<pos:position pos:line="32" pos:column="55"/></operator></expr></incr>)<pos:position pos:line="32" pos:column="56"/></control><block type="pseudo"><empty_stmt pos:line="32" pos:column="56">;<pos:position pos:line="32" pos:column="57"/></empty_stmt></block></for>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">fprintf<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name pos:line="33" pos:column="25">stderr<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="33">"*** IMAP ALERT *** %s\n"<pos:position pos:line="33" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="60">p<pos:position pos:line="33" pos:column="61"/></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if></elseif> <elseif pos:line="34" pos:column="11">else <if pos:line="34" pos:column="16">if <condition pos:line="34" pos:column="19">(<expr><name pos:line="34" pos:column="20">cb<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">&amp;&amp;<pos:position pos:line="34" pos:column="33"/></operator> <name><name pos:line="34" pos:column="26">cb<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">-&gt;<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="30">ctx<pos:position pos:line="34" pos:column="33"/></name></name> <operator pos:line="34" pos:column="34">&amp;&amp;<pos:position pos:line="34" pos:column="44"/></operator> <operator pos:line="34" pos:column="37">!<pos:position pos:line="34" pos:column="38"/></operator><call><name pos:line="34" pos:column="38">strcmp<pos:position pos:line="34" pos:column="44"/></name><argument_list pos:line="34" pos:column="44">(<argument><expr><literal type="string" pos:line="34" pos:column="45">"APPENDUID"<pos:position pos:line="34" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="58">arg<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="63"/></condition><then pos:line="34" pos:column="63"> <block pos:line="34" pos:column="64">{
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">!<pos:position pos:line="35" pos:column="22"/></operator><operator pos:line="35" pos:column="22">(<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="23">arg<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">=<pos:position pos:line="35" pos:column="28"/></operator> <call><name pos:line="35" pos:column="29">next_arg<pos:position pos:line="35" pos:column="37"/></name><argument_list pos:line="35" pos:column="37">(<argument><expr><operator pos:line="35" pos:column="38">&amp;<pos:position pos:line="35" pos:column="43"/></operator><name pos:line="35" pos:column="39">s<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call><operator pos:line="35" pos:column="41">)<pos:position pos:line="35" pos:column="42"/></operator> <operator pos:line="35" pos:column="43">||<pos:position pos:line="35" pos:column="45"/></operator> <operator pos:line="35" pos:column="46">!<pos:position pos:line="35" pos:column="47"/></operator><operator pos:line="35" pos:column="47">(<pos:position pos:line="35" pos:column="48"/></operator><name><name pos:line="35" pos:column="48">ctx<pos:position pos:line="35" pos:column="51"/></name><operator pos:line="35" pos:column="51">-&gt;<pos:position pos:line="35" pos:column="56"/></operator><name pos:line="35" pos:column="53">uidvalidity<pos:position pos:line="35" pos:column="64"/></name></name> <operator pos:line="35" pos:column="65">=<pos:position pos:line="35" pos:column="66"/></operator> <call><name pos:line="35" pos:column="67">atoi<pos:position pos:line="35" pos:column="71"/></name><argument_list pos:line="35" pos:column="71">(<argument><expr><name pos:line="35" pos:column="72">arg<pos:position pos:line="35" pos:column="75"/></name></expr></argument>)<pos:position pos:line="35" pos:column="76"/></argument_list></call><operator pos:line="35" pos:column="76">)<pos:position pos:line="35" pos:column="77"/></operator> <operator pos:line="35" pos:column="78">||<pos:position pos:line="35" pos:column="80"/></operator>
		    <operator pos:line="36" pos:column="21">!<pos:position pos:line="36" pos:column="22"/></operator><operator pos:line="36" pos:column="22">(<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="23">arg<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">=<pos:position pos:line="36" pos:column="28"/></operator> <call><name pos:line="36" pos:column="29">next_arg<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><operator pos:line="36" pos:column="38">&amp;<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="39">s<pos:position pos:line="36" pos:column="40"/></name></expr></argument>)<pos:position pos:line="36" pos:column="41"/></argument_list></call><operator pos:line="36" pos:column="41">)<pos:position pos:line="36" pos:column="42"/></operator> <operator pos:line="36" pos:column="43">||<pos:position pos:line="36" pos:column="45"/></operator> <operator pos:line="36" pos:column="46">!<pos:position pos:line="36" pos:column="47"/></operator><operator pos:line="36" pos:column="47">(<pos:position pos:line="36" pos:column="48"/></operator><operator pos:line="36" pos:column="48">*<pos:position pos:line="36" pos:column="49"/></operator><operator pos:line="36" pos:column="49">(<pos:position pos:line="36" pos:column="50"/></operator><name pos:line="36" pos:column="50">int<pos:position pos:line="36" pos:column="53"/></name> <operator pos:line="36" pos:column="54">*<pos:position pos:line="36" pos:column="55"/></operator><operator pos:line="36" pos:column="55">)<pos:position pos:line="36" pos:column="56"/></operator><name><name pos:line="36" pos:column="56">cb<pos:position pos:line="36" pos:column="58"/></name><operator pos:line="36" pos:column="58">-&gt;<pos:position pos:line="36" pos:column="63"/></operator><name pos:line="36" pos:column="60">ctx<pos:position pos:line="36" pos:column="63"/></name></name> <operator pos:line="36" pos:column="64">=<pos:position pos:line="36" pos:column="65"/></operator> <call><name pos:line="36" pos:column="66">atoi<pos:position pos:line="36" pos:column="70"/></name><argument_list pos:line="36" pos:column="70">(<argument><expr><name pos:line="36" pos:column="71">arg<pos:position pos:line="36" pos:column="74"/></name></expr></argument>)<pos:position pos:line="36" pos:column="75"/></argument_list></call><operator pos:line="36" pos:column="75">)<pos:position pos:line="36" pos:column="76"/></operator></expr>)<pos:position pos:line="36" pos:column="77"/></condition><then pos:line="36" pos:column="77"> <block pos:line="36" pos:column="78">{
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">fprintf<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">stderr<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="41">"IMAP error: malformed APPENDUID status\n"<pos:position pos:line="37" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="85"/></expr_stmt>
			<return pos:line="38" pos:column="25">return <expr><name pos:line="38" pos:column="32">RESP_BAD<pos:position pos:line="38" pos:column="40"/></name></expr>;<pos:position pos:line="38" pos:column="41"/></return>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if></elseif></if>
	<return pos:line="41" pos:column="9">return <expr><name pos:line="41" pos:column="16">RESP_OK<pos:position pos:line="41" pos:column="23"/></name></expr>;<pos:position pos:line="41" pos:column="24"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
