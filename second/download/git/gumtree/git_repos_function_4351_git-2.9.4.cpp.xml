<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4351_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">set_refspecs<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier><modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">refs<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">nr<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">repo<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">remote<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">remote<pos:position pos:line="3" pos:column="30"/></name> <init pos:line="3" pos:column="31">= <expr><name pos:line="3" pos:column="33">NULL<pos:position pos:line="3" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ref<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">local_refs<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><name pos:line="4" pos:column="34">NULL<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init><expr><name pos:line="7" pos:column="14">i<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr>;<pos:position pos:line="7" pos:column="20"/></init> <condition><expr><name pos:line="7" pos:column="21">i<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&lt;<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="25">nr<pos:position pos:line="7" pos:column="27"/></name></expr>;<pos:position pos:line="7" pos:column="28"/></condition> <incr><expr><name pos:line="7" pos:column="29">i<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">++<pos:position pos:line="7" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="33"/></control> <block pos:line="7" pos:column="34">{
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">ref<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><name><name pos:line="8" pos:column="35">refs<pos:position pos:line="8" pos:column="39"/></name><index pos:line="8" pos:column="39">[<expr><name pos:line="8" pos:column="40">i<pos:position pos:line="8" pos:column="41"/></name></expr>]<pos:position pos:line="8" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">!<pos:position pos:line="9" pos:column="22"/></operator><call><name pos:line="9" pos:column="22">strcmp<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><literal type="string" pos:line="9" pos:column="29">"tag"<pos:position pos:line="9" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="36">ref<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="41"/></condition><then pos:line="9" pos:column="41"> <block pos:line="9" pos:column="42">{
			<decl_stmt><decl><type><name><name pos:line="10" pos:column="25">struct<pos:position pos:line="10" pos:column="31"/></name> <name pos:line="10" pos:column="32">strbuf<pos:position pos:line="10" pos:column="38"/></name></name></type> <name pos:line="10" pos:column="39">tagref<pos:position pos:line="10" pos:column="45"/></name> <init pos:line="10" pos:column="46">= <expr><name pos:line="10" pos:column="48">STRBUF_INIT<pos:position pos:line="10" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="60"/></decl_stmt>
			<if pos:line="11" pos:column="25">if <condition pos:line="11" pos:column="28">(<expr><name pos:line="11" pos:column="29">nr<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">&lt;=<pos:position pos:line="11" pos:column="37"/></operator> <operator pos:line="11" pos:column="35">++<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">i<pos:position pos:line="11" pos:column="38"/></name></expr>)<pos:position pos:line="11" pos:column="39"/></condition><then pos:line="11" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="33">die<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><call><name pos:line="12" pos:column="37">_<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><literal type="string" pos:line="12" pos:column="39">"tag shorthand without &lt;tag&gt;"<pos:position pos:line="12" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="71"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="13" pos:column="25">ref<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">=<pos:position pos:line="13" pos:column="30"/></operator> <name><name pos:line="13" pos:column="31">refs<pos:position pos:line="13" pos:column="35"/></name><index pos:line="13" pos:column="35">[<expr><name pos:line="13" pos:column="36">i<pos:position pos:line="13" pos:column="37"/></name></expr>]<pos:position pos:line="13" pos:column="38"/></index></name></expr>;<pos:position pos:line="13" pos:column="39"/></expr_stmt>
			<if pos:line="14" pos:column="25">if <condition pos:line="14" pos:column="28">(<expr><name pos:line="14" pos:column="29">deleterefs<pos:position pos:line="14" pos:column="39"/></name></expr>)<pos:position pos:line="14" pos:column="40"/></condition><then pos:line="14" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="33">strbuf_addf<pos:position pos:line="15" pos:column="44"/></name><argument_list pos:line="15" pos:column="44">(<argument><expr><operator pos:line="15" pos:column="45">&amp;<pos:position pos:line="15" pos:column="50"/></operator><name pos:line="15" pos:column="46">tagref<pos:position pos:line="15" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="54">":refs/tags/%s"<pos:position pos:line="15" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="71">ref<pos:position pos:line="15" pos:column="74"/></name></expr></argument>)<pos:position pos:line="15" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="76"/></expr_stmt></block></then>
			<else pos:line="16" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="33">strbuf_addf<pos:position pos:line="17" pos:column="44"/></name><argument_list pos:line="17" pos:column="44">(<argument><expr><operator pos:line="17" pos:column="45">&amp;<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="46">tagref<pos:position pos:line="17" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="54">"refs/tags/%s"<pos:position pos:line="17" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="70">ref<pos:position pos:line="17" pos:column="73"/></name></expr></argument>)<pos:position pos:line="17" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="75"/></expr_stmt></block></else></if>
			<expr_stmt><expr><name pos:line="18" pos:column="25">ref<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">=<pos:position pos:line="18" pos:column="30"/></operator> <call><name pos:line="18" pos:column="31">strbuf_detach<pos:position pos:line="18" pos:column="44"/></name><argument_list pos:line="18" pos:column="44">(<argument><expr><operator pos:line="18" pos:column="45">&amp;<pos:position pos:line="18" pos:column="50"/></operator><name pos:line="18" pos:column="46">tagref<pos:position pos:line="18" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="54">NULL<pos:position pos:line="18" pos:column="58"/></name></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt>
		}<pos:position pos:line="19" pos:column="18"/></block></then> <elseif pos:line="19" pos:column="19">else <if pos:line="19" pos:column="24">if <condition pos:line="19" pos:column="27">(<expr><name pos:line="19" pos:column="28">deleterefs<pos:position pos:line="19" pos:column="38"/></name></expr>)<pos:position pos:line="19" pos:column="39"/></condition><then pos:line="19" pos:column="39"> <block pos:line="19" pos:column="40">{
			<decl_stmt><decl><type><name><name pos:line="20" pos:column="25">struct<pos:position pos:line="20" pos:column="31"/></name> <name pos:line="20" pos:column="32">strbuf<pos:position pos:line="20" pos:column="38"/></name></name></type> <name pos:line="20" pos:column="39">delref<pos:position pos:line="20" pos:column="45"/></name> <init pos:line="20" pos:column="46">= <expr><name pos:line="20" pos:column="48">STRBUF_INIT<pos:position pos:line="20" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="60"/></decl_stmt>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><call><name pos:line="21" pos:column="29">strchr<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><name pos:line="21" pos:column="36">ref<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="21" pos:column="41">':'<pos:position pos:line="21" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="46"/></condition><then pos:line="21" pos:column="46">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="33">die<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><call><name pos:line="22" pos:column="37">_<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><literal type="string" pos:line="22" pos:column="39">"--delete only accepts plain target ref names"<pos:position pos:line="22" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="88"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">strbuf_addf<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><operator pos:line="23" pos:column="37">&amp;<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="38">delref<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="46">":%s"<pos:position pos:line="23" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="53">ref<pos:position pos:line="23" pos:column="56"/></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">ref<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <call><name pos:line="24" pos:column="31">strbuf_detach<pos:position pos:line="24" pos:column="44"/></name><argument_list pos:line="24" pos:column="44">(<argument><expr><operator pos:line="24" pos:column="45">&amp;<pos:position pos:line="24" pos:column="50"/></operator><name pos:line="24" pos:column="46">delref<pos:position pos:line="24" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="54">NULL<pos:position pos:line="24" pos:column="58"/></name></expr></argument>)<pos:position pos:line="24" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="60"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if></elseif> <elseif pos:line="25" pos:column="19">else <if pos:line="25" pos:column="24">if <condition pos:line="25" pos:column="27">(<expr><operator pos:line="25" pos:column="28">!<pos:position pos:line="25" pos:column="29"/></operator><call><name pos:line="25" pos:column="29">strchr<pos:position pos:line="25" pos:column="35"/></name><argument_list pos:line="25" pos:column="35">(<argument><expr><name pos:line="25" pos:column="36">ref<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="41">':'<pos:position pos:line="25" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="46"/></condition><then pos:line="25" pos:column="46"> <block pos:line="25" pos:column="47">{
			<if pos:line="26" pos:column="25">if <condition pos:line="26" pos:column="28">(<expr><operator pos:line="26" pos:column="29">!<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">remote<pos:position pos:line="26" pos:column="36"/></name></expr>)<pos:position pos:line="26" pos:column="37"/></condition><then pos:line="26" pos:column="37"> <block pos:line="26" pos:column="38">{
				<comment type="block" pos:line="27" pos:column="33">/* lazily grab remote and local_refs */</comment>
				<expr_stmt><expr><name pos:line="28" pos:column="33">remote<pos:position pos:line="28" pos:column="39"/></name> <operator pos:line="28" pos:column="40">=<pos:position pos:line="28" pos:column="41"/></operator> <call><name pos:line="28" pos:column="42">remote_get<pos:position pos:line="28" pos:column="52"/></name><argument_list pos:line="28" pos:column="52">(<argument><expr><name pos:line="28" pos:column="53">repo<pos:position pos:line="28" pos:column="57"/></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><name pos:line="29" pos:column="33">local_refs<pos:position pos:line="29" pos:column="43"/></name> <operator pos:line="29" pos:column="44">=<pos:position pos:line="29" pos:column="45"/></operator> <call><name pos:line="29" pos:column="46">get_local_heads<pos:position pos:line="29" pos:column="61"/></name><argument_list pos:line="29" pos:column="61">()<pos:position pos:line="29" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="64"/></expr_stmt>
			}<pos:position pos:line="30" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="31" pos:column="25">ref<pos:position pos:line="31" pos:column="28"/></name> <operator pos:line="31" pos:column="29">=<pos:position pos:line="31" pos:column="30"/></operator> <call><name pos:line="31" pos:column="31">map_refspec<pos:position pos:line="31" pos:column="42"/></name><argument_list pos:line="31" pos:column="42">(<argument><expr><name pos:line="31" pos:column="43">ref<pos:position pos:line="31" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="48">remote<pos:position pos:line="31" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="56">local_refs<pos:position pos:line="31" pos:column="66"/></name></expr></argument>)<pos:position pos:line="31" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if></elseif></if>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">add_refspec<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name pos:line="33" pos:column="29">ref<pos:position pos:line="33" pos:column="32"/></name></expr></argument>)<pos:position pos:line="33" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></for>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
