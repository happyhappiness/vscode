<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5917_git-2.5.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mspace_malloc_stats<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">mspace<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">msp<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list> <block pos:line="1" pos:column="38">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">mstate<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">ms<pos:position pos:line="2" pos:column="12"/></name> <init pos:line="2" pos:column="13">= <expr><operator pos:line="2" pos:column="15">(<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">mstate<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">)<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">msp<pos:position pos:line="2" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="27"/></decl_stmt>
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><call><name pos:line="3" pos:column="7">ok_magic<pos:position pos:line="3" pos:column="15"/></name><argument_list pos:line="3" pos:column="15">(<argument><expr><name pos:line="3" pos:column="16">ms<pos:position pos:line="3" pos:column="18"/></name></expr></argument>)<pos:position pos:line="3" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="20"/></condition><then pos:line="3" pos:column="20"> <block pos:line="3" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">internal_malloc_stats<pos:position pos:line="4" pos:column="26"/></name><argument_list pos:line="4" pos:column="26">(<argument><expr><name pos:line="4" pos:column="27">ms<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="5" pos:column="4"/></block></then>
  <else pos:line="6" pos:column="3">else <block pos:line="6" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">USAGE_ERROR_ACTION<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><name pos:line="7" pos:column="24">ms<pos:position pos:line="7" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="7" pos:column="27">ms<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="8" pos:column="4"/></block></else></if>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
