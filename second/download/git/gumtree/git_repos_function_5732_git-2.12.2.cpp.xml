<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5732_git-2.12.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">update_clone<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">argc<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier><modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">argv<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">prefix<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">update<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><name pos:line="3" pos:column="30">NULL<pos:position pos:line="3" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">max_jobs<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><operator pos:line="4" pos:column="24">-<pos:position pos:line="4" pos:column="25"/></operator><literal type="number" pos:line="4" pos:column="25">1<pos:position pos:line="4" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">string_list_item<pos:position pos:line="5" pos:column="32"/></name></name> <modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></type><name pos:line="5" pos:column="34">item<pos:position pos:line="5" pos:column="38"/></name></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">pathspec<pos:position pos:line="6" pos:column="24"/></name></name></type> <name pos:line="6" pos:column="25">pathspec<pos:position pos:line="6" pos:column="33"/></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">submodule_update_clone<pos:position pos:line="7" pos:column="38"/></name></name></type> <name pos:line="7" pos:column="39">suc<pos:position pos:line="7" pos:column="42"/></name> <init pos:line="7" pos:column="43">= <expr><name pos:line="7" pos:column="45">SUBMODULE_UPDATE_CLONE_INIT<pos:position pos:line="7" pos:column="72"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="73"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">option<pos:position pos:line="9" pos:column="22"/></name></name></type> <name><name pos:line="9" pos:column="23">module_update_clone_options<pos:position pos:line="9" pos:column="50"/></name><index pos:line="9" pos:column="50">[]<pos:position pos:line="9" pos:column="52"/></index></name> <init pos:line="9" pos:column="53">= <expr><block pos:line="9" pos:column="55">{
		<expr><call><name pos:line="10" pos:column="17">OPT_STRING<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><literal type="number" pos:line="10" pos:column="28">0<pos:position pos:line="10" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="31">"prefix"<pos:position pos:line="10" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="10" pos:column="41">&amp;<pos:position pos:line="10" pos:column="46"/></operator><name pos:line="10" pos:column="42">prefix<pos:position pos:line="10" pos:column="48"/></name></expr></argument>,
			   <argument><expr><call><name pos:line="11" pos:column="28">N_<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><literal type="string" pos:line="11" pos:column="31">"path"<pos:position pos:line="11" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr></argument>,
			   <argument><expr><call><name pos:line="12" pos:column="28">N_<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><literal type="string" pos:line="12" pos:column="31">"path into the working tree"<pos:position pos:line="12" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr>,
		<expr><call><name pos:line="13" pos:column="17">OPT_STRING<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><literal type="number" pos:line="13" pos:column="28">0<pos:position pos:line="13" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="31">"recursive-prefix"<pos:position pos:line="13" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="13" pos:column="51">&amp;<pos:position pos:line="13" pos:column="56"/></operator><name><name pos:line="13" pos:column="52">suc<pos:position pos:line="13" pos:column="55"/></name><operator pos:line="13" pos:column="55">.<pos:position pos:line="13" pos:column="56"/></operator><name pos:line="13" pos:column="56">recursive_prefix<pos:position pos:line="13" pos:column="72"/></name></name></expr></argument>,
			   <argument><expr><call><name pos:line="14" pos:column="28">N_<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><literal type="string" pos:line="14" pos:column="31">"path"<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr></argument>,
			   <argument><expr><call><name pos:line="15" pos:column="28">N_<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><literal type="string" pos:line="15" pos:column="31">"path into the working tree, across nested "<pos:position pos:line="15" pos:column="75"/></literal>
			      <literal type="string" pos:line="16" pos:column="31">"submodule boundaries"<pos:position pos:line="16" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr>,
		<expr><call><name pos:line="17" pos:column="17">OPT_STRING<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><literal type="number" pos:line="17" pos:column="28">0<pos:position pos:line="17" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="31">"update"<pos:position pos:line="17" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="41">&amp;<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="42">update<pos:position pos:line="17" pos:column="48"/></name></expr></argument>,
			   <argument><expr><call><name pos:line="18" pos:column="28">N_<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><literal type="string" pos:line="18" pos:column="31">"string"<pos:position pos:line="18" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr></argument>,
			   <argument><expr><call><name pos:line="19" pos:column="28">N_<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><literal type="string" pos:line="19" pos:column="31">"rebase, merge, checkout or none"<pos:position pos:line="19" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="66"/></argument_list></call></expr>,
		<expr><call><name pos:line="20" pos:column="17">OPT_STRING_LIST<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><literal type="number" pos:line="20" pos:column="33">0<pos:position pos:line="20" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="36">"reference"<pos:position pos:line="20" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="49">&amp;<pos:position pos:line="20" pos:column="54"/></operator><name><name pos:line="20" pos:column="50">suc<pos:position pos:line="20" pos:column="53"/></name><operator pos:line="20" pos:column="53">.<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="54">references<pos:position pos:line="20" pos:column="64"/></name></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="66">N_<pos:position pos:line="20" pos:column="68"/></name><argument_list pos:line="20" pos:column="68">(<argument><expr><literal type="string" pos:line="20" pos:column="69">"repo"<pos:position pos:line="20" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr></argument>,
			   <argument><expr><call><name pos:line="21" pos:column="28">N_<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><literal type="string" pos:line="21" pos:column="31">"reference repository"<pos:position pos:line="21" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>,
		<expr><call><name pos:line="22" pos:column="17">OPT_STRING<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><literal type="number" pos:line="22" pos:column="28">0<pos:position pos:line="22" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="31">"depth"<pos:position pos:line="22" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="40">&amp;<pos:position pos:line="22" pos:column="45"/></operator><name><name pos:line="22" pos:column="41">suc<pos:position pos:line="22" pos:column="44"/></name><operator pos:line="22" pos:column="44">.<pos:position pos:line="22" pos:column="45"/></operator><name pos:line="22" pos:column="45">depth<pos:position pos:line="22" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="52">"&lt;depth&gt;"<pos:position pos:line="22" pos:column="67"/></literal></expr></argument>,
			   <argument><expr><call><name pos:line="23" pos:column="28">N_<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><literal type="string" pos:line="23" pos:column="31">"Create a shallow clone truncated to the "<pos:position pos:line="23" pos:column="73"/></literal>
			      <literal type="string" pos:line="24" pos:column="31">"specified number of revisions"<pos:position pos:line="24" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="64"/></argument_list></call></expr>,
		<expr><call><name pos:line="25" pos:column="17">OPT_INTEGER<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><literal type="char" pos:line="25" pos:column="29">'j'<pos:position pos:line="25" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="34">"jobs"<pos:position pos:line="25" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="25" pos:column="42">&amp;<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="43">max_jobs<pos:position pos:line="25" pos:column="51"/></name></expr></argument>,
			    <argument><expr><call><name pos:line="26" pos:column="29">N_<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><literal type="string" pos:line="26" pos:column="32">"parallel jobs"<pos:position pos:line="26" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>,
		<expr><call><name pos:line="27" pos:column="17">OPT_BOOL<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><literal type="number" pos:line="27" pos:column="26">0<pos:position pos:line="27" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="29">"recommend-shallow"<pos:position pos:line="27" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="50">&amp;<pos:position pos:line="27" pos:column="55"/></operator><name><name pos:line="27" pos:column="51">suc<pos:position pos:line="27" pos:column="54"/></name><operator pos:line="27" pos:column="54">.<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="55">recommend_shallow<pos:position pos:line="27" pos:column="72"/></name></name></expr></argument>,
			    <argument><expr><call><name pos:line="28" pos:column="29">N_<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><literal type="string" pos:line="28" pos:column="32">"whether the initial clone should follow the shallow recommendation"<pos:position pos:line="28" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="101"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="102"/></argument_list></call></expr>,
		<expr><call><name pos:line="29" pos:column="17">OPT__QUIET<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><operator pos:line="29" pos:column="28">&amp;<pos:position pos:line="29" pos:column="33"/></operator><name><name pos:line="29" pos:column="29">suc<pos:position pos:line="29" pos:column="32"/></name><operator pos:line="29" pos:column="32">.<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="33">quiet<pos:position pos:line="29" pos:column="38"/></name></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="40">N_<pos:position pos:line="29" pos:column="42"/></name><argument_list pos:line="29" pos:column="42">(<argument><expr><literal type="string" pos:line="29" pos:column="43">"don't print cloning progress"<pos:position pos:line="29" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="75"/></argument_list></call></expr>,
		<expr><call><name pos:line="30" pos:column="17">OPT_BOOL<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><literal type="number" pos:line="30" pos:column="26">0<pos:position pos:line="30" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="29">"progress"<pos:position pos:line="30" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="30" pos:column="41">&amp;<pos:position pos:line="30" pos:column="46"/></operator><name><name pos:line="30" pos:column="42">suc<pos:position pos:line="30" pos:column="45"/></name><operator pos:line="30" pos:column="45">.<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="46">progress<pos:position pos:line="30" pos:column="54"/></name></name></expr></argument>,
			    <argument><expr><call><name pos:line="31" pos:column="29">N_<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><literal type="string" pos:line="31" pos:column="32">"force cloning progress"<pos:position pos:line="31" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="58"/></argument_list></call></expr>,
		<macro><name pos:line="32" pos:column="17">OPT_END<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">()<pos:position pos:line="32" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="33" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="33" pos:column="11"/></decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="35" pos:column="9">const<pos:position pos:line="35" pos:column="14"/></specifier> <name pos:line="35" pos:column="15">char<pos:position pos:line="35" pos:column="19"/></name> <modifier pos:line="35" pos:column="20">*<pos:position pos:line="35" pos:column="21"/></modifier><specifier pos:line="35" pos:column="21">const<pos:position pos:line="35" pos:column="26"/></specifier></type> <name><name pos:line="35" pos:column="27">git_submodule_helper_usage<pos:position pos:line="35" pos:column="53"/></name><index pos:line="35" pos:column="53">[]<pos:position pos:line="35" pos:column="55"/></index></name> <init pos:line="35" pos:column="56">= <expr><block pos:line="35" pos:column="58">{
		<expr><call><name pos:line="36" pos:column="17">N_<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><literal type="string" pos:line="36" pos:column="20">"git submodule--helper update_clone [--prefix=&lt;path&gt;] [&lt;path&gt;...]"<pos:position pos:line="36" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="87"/></argument_list></call></expr>,
		<expr><name pos:line="37" pos:column="17">NULL<pos:position pos:line="37" pos:column="21"/></name></expr>
	}<pos:position pos:line="38" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="38" pos:column="11"/></decl_stmt>
	<expr_stmt><expr><name><name pos:line="39" pos:column="9">suc<pos:position pos:line="39" pos:column="12"/></name><operator pos:line="39" pos:column="12">.<pos:position pos:line="39" pos:column="13"/></operator><name pos:line="39" pos:column="13">prefix<pos:position pos:line="39" pos:column="19"/></name></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <name pos:line="39" pos:column="22">prefix<pos:position pos:line="39" pos:column="28"/></name></expr>;<pos:position pos:line="39" pos:column="29"/></expr_stmt>

	<expr_stmt><expr><name pos:line="41" pos:column="9">argc<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <call><name pos:line="41" pos:column="16">parse_options<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><name pos:line="41" pos:column="30">argc<pos:position pos:line="41" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="36">argv<pos:position pos:line="41" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="42">prefix<pos:position pos:line="41" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="50">module_update_clone_options<pos:position pos:line="41" pos:column="77"/></name></expr></argument>,
			     <argument><expr><name pos:line="42" pos:column="30">git_submodule_helper_usage<pos:position pos:line="42" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="58">0<pos:position pos:line="42" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="61"/></expr_stmt>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">update<pos:position pos:line="44" pos:column="19"/></name></expr>)<pos:position pos:line="44" pos:column="20"/></condition><then pos:line="44" pos:column="20">
		<block type="pseudo"><if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">parse_submodule_update_strategy<pos:position pos:line="45" pos:column="52"/></name><argument_list pos:line="45" pos:column="52">(<argument><expr><name pos:line="45" pos:column="53">update<pos:position pos:line="45" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="61">&amp;<pos:position pos:line="45" pos:column="66"/></operator><name><name pos:line="45" pos:column="62">suc<pos:position pos:line="45" pos:column="65"/></name><operator pos:line="45" pos:column="65">.<pos:position pos:line="45" pos:column="66"/></operator><name pos:line="45" pos:column="66">update<pos:position pos:line="45" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="73"/></argument_list></call> <operator pos:line="45" pos:column="74">&lt;<pos:position pos:line="45" pos:column="78"/></operator> <literal type="number" pos:line="45" pos:column="76">0<pos:position pos:line="45" pos:column="77"/></literal></expr>)<pos:position pos:line="45" pos:column="78"/></condition><then pos:line="45" pos:column="78">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="25">die<pos:position pos:line="46" pos:column="28"/></name><argument_list pos:line="46" pos:column="28">(<argument><expr><call><name pos:line="46" pos:column="29">_<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><literal type="string" pos:line="46" pos:column="31">"bad value for update parameter"<pos:position pos:line="46" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="66"/></expr_stmt></block></then></if></block></then></if>

	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><call><name pos:line="48" pos:column="13">module_list_compute<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">argc<pos:position pos:line="48" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="39">argv<pos:position pos:line="48" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="45">prefix<pos:position pos:line="48" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="53">&amp;<pos:position pos:line="48" pos:column="58"/></operator><name pos:line="48" pos:column="54">pathspec<pos:position pos:line="48" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="64">&amp;<pos:position pos:line="48" pos:column="69"/></operator><name><name pos:line="48" pos:column="65">suc<pos:position pos:line="48" pos:column="68"/></name><operator pos:line="48" pos:column="68">.<pos:position pos:line="48" pos:column="69"/></operator><name pos:line="48" pos:column="69">list<pos:position pos:line="48" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="74"/></argument_list></call> <operator pos:line="48" pos:column="75">&lt;<pos:position pos:line="48" pos:column="79"/></operator> <literal type="number" pos:line="48" pos:column="77">0<pos:position pos:line="48" pos:column="78"/></literal></expr>)<pos:position pos:line="48" pos:column="79"/></condition><then pos:line="48" pos:column="79">
		<block type="pseudo"><return pos:line="49" pos:column="17">return <expr><literal type="number" pos:line="49" pos:column="24">1<pos:position pos:line="49" pos:column="25"/></literal></expr>;<pos:position pos:line="49" pos:column="26"/></return></block></then></if>

	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name><name pos:line="51" pos:column="13">pathspec<pos:position pos:line="51" pos:column="21"/></name><operator pos:line="51" pos:column="21">.<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">nr<pos:position pos:line="51" pos:column="24"/></name></name></expr>)<pos:position pos:line="51" pos:column="25"/></condition><then pos:line="51" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="52" pos:column="17">suc<pos:position pos:line="52" pos:column="20"/></name><operator pos:line="52" pos:column="20">.<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="21">warn_if_uninitialized<pos:position pos:line="52" pos:column="42"/></name></name> <operator pos:line="52" pos:column="43">=<pos:position pos:line="52" pos:column="44"/></operator> <literal type="number" pos:line="52" pos:column="45">1<pos:position pos:line="52" pos:column="46"/></literal></expr>;<pos:position pos:line="52" pos:column="47"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="54" pos:column="9">/* Overlay the parsed .gitmodules file with .git/config */</comment>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">gitmodules_config<pos:position pos:line="55" pos:column="26"/></name><argument_list pos:line="55" pos:column="26">()<pos:position pos:line="55" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="56" pos:column="9">git_config<pos:position pos:line="56" pos:column="19"/></name><argument_list pos:line="56" pos:column="19">(<argument><expr><name pos:line="56" pos:column="20">submodule_config<pos:position pos:line="56" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="38">NULL<pos:position pos:line="56" pos:column="42"/></name></expr></argument>)<pos:position pos:line="56" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="44"/></expr_stmt>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">max_jobs<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">&lt;<pos:position pos:line="58" pos:column="26"/></operator> <literal type="number" pos:line="58" pos:column="24">0<pos:position pos:line="58" pos:column="25"/></literal></expr>)<pos:position pos:line="58" pos:column="26"/></condition><then pos:line="58" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="17">max_jobs<pos:position pos:line="59" pos:column="25"/></name> <operator pos:line="59" pos:column="26">=<pos:position pos:line="59" pos:column="27"/></operator> <call><name pos:line="59" pos:column="28">parallel_submodules<pos:position pos:line="59" pos:column="47"/></name><argument_list pos:line="59" pos:column="47">()<pos:position pos:line="59" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="50"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="61" pos:column="9">run_processes_parallel<pos:position pos:line="61" pos:column="31"/></name><argument_list pos:line="61" pos:column="31">(<argument><expr><name pos:line="61" pos:column="32">max_jobs<pos:position pos:line="61" pos:column="40"/></name></expr></argument>,
			       <argument><expr><name pos:line="62" pos:column="32">update_clone_get_next_task<pos:position pos:line="62" pos:column="58"/></name></expr></argument>,
			       <argument><expr><name pos:line="63" pos:column="32">update_clone_start_failure<pos:position pos:line="63" pos:column="58"/></name></expr></argument>,
			       <argument><expr><name pos:line="64" pos:column="32">update_clone_task_finished<pos:position pos:line="64" pos:column="58"/></name></expr></argument>,
			       <argument><expr><operator pos:line="65" pos:column="32">&amp;<pos:position pos:line="65" pos:column="37"/></operator><name pos:line="65" pos:column="33">suc<pos:position pos:line="65" pos:column="36"/></name></expr></argument>)<pos:position pos:line="65" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="38"/></expr_stmt>

	<comment type="block" pos:line="67" pos:column="9">/*
	 * We saved the output and put it out all at once now.
	 * That means:
	 * - the listener does not have to interleave their (checkout)
	 *   work with our fetching.  The writes involved in a
	 *   checkout involve more straightforward sequential I/O.
	 * - the listener can avoid doing any work if fetching failed.
	 */</comment>
	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name><name pos:line="75" pos:column="13">suc<pos:position pos:line="75" pos:column="16"/></name><operator pos:line="75" pos:column="16">.<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="17">quickstop<pos:position pos:line="75" pos:column="26"/></name></name></expr>)<pos:position pos:line="75" pos:column="27"/></condition><then pos:line="75" pos:column="27">
		<block type="pseudo"><return pos:line="76" pos:column="17">return <expr><literal type="number" pos:line="76" pos:column="24">1<pos:position pos:line="76" pos:column="25"/></literal></expr>;<pos:position pos:line="76" pos:column="26"/></return></block></then></if>

	<macro><name pos:line="78" pos:column="9">for_each_string_list_item<pos:position pos:line="78" pos:column="34"/></name><argument_list pos:line="78" pos:column="34">(<argument pos:line="78" pos:column="35">item<pos:position pos:line="78" pos:column="39"/></argument>, <argument pos:line="78" pos:column="41">&amp;suc.projectlines<pos:position pos:line="78" pos:column="58"/></argument>)<pos:position pos:line="78" pos:column="59"/></argument_list></macro>
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">utf8_fprintf<pos:position pos:line="79" pos:column="29"/></name><argument_list pos:line="79" pos:column="29">(<argument><expr><name pos:line="79" pos:column="30">stdout<pos:position pos:line="79" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="38">"%s"<pos:position pos:line="79" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="44">item<pos:position pos:line="79" pos:column="48"/></name><operator pos:line="79" pos:column="48">-&gt;<pos:position pos:line="79" pos:column="53"/></operator><name pos:line="79" pos:column="50">string<pos:position pos:line="79" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="58"/></expr_stmt>

	<return pos:line="81" pos:column="9">return <expr><literal type="number" pos:line="81" pos:column="16">0<pos:position pos:line="81" pos:column="17"/></literal></expr>;<pos:position pos:line="81" pos:column="18"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
