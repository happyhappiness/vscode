<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1292_git-2.3.10.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">i<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">git_extract_argv0_path<pos:position pos:line="5" pos:column="31"/></name><argument_list pos:line="5" pos:column="31">(<argument><expr><name><name pos:line="5" pos:column="32">argv<pos:position pos:line="5" pos:column="36"/></name><index pos:line="5" pos:column="36">[<expr><literal type="number" pos:line="5" pos:column="37">0<pos:position pos:line="5" pos:column="38"/></literal></expr>]<pos:position pos:line="5" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">git_setup_gettext<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">()<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="29"/></expr_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">argc<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">==<pos:position pos:line="9" pos:column="20"/></operator> <literal type="number" pos:line="9" pos:column="21">2<pos:position pos:line="9" pos:column="22"/></literal> <operator pos:line="9" pos:column="23">&amp;&amp;<pos:position pos:line="9" pos:column="33"/></operator> <operator pos:line="9" pos:column="26">!<pos:position pos:line="9" pos:column="27"/></operator><call><name pos:line="9" pos:column="27">strcmp<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument><expr><name><name pos:line="9" pos:column="34">argv<pos:position pos:line="9" pos:column="38"/></name><index pos:line="9" pos:column="38">[<expr><literal type="number" pos:line="9" pos:column="39">1<pos:position pos:line="9" pos:column="40"/></literal></expr>]<pos:position pos:line="9" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="43">"-h"<pos:position pos:line="9" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="49"/></condition><then pos:line="9" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">usage<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">fast_import_usage<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">setup_git_directory<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">()<pos:position pos:line="12" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">reset_pack_idx_option<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><operator pos:line="13" pos:column="31">&amp;<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="32">pack_idx_opts<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">git_pack_config<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">()<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">pack_compression_seen<pos:position pos:line="15" pos:column="35"/></name> <operator pos:line="15" pos:column="36">&amp;&amp;<pos:position pos:line="15" pos:column="46"/></operator> <name pos:line="15" pos:column="39">core_compression_seen<pos:position pos:line="15" pos:column="60"/></name></expr>)<pos:position pos:line="15" pos:column="61"/></condition><then pos:line="15" pos:column="61">
		<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="17">pack_compression_level<pos:position pos:line="16" pos:column="39"/></name> <operator pos:line="16" pos:column="40">=<pos:position pos:line="16" pos:column="41"/></operator> <name pos:line="16" pos:column="42">core_compression_level<pos:position pos:line="16" pos:column="64"/></name></expr>;<pos:position pos:line="16" pos:column="65"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">alloc_objects<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">object_entry_alloc<pos:position pos:line="18" pos:column="41"/></name></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">strbuf_init<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><operator pos:line="19" pos:column="21">&amp;<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="22">command_buf<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="35">0<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">atom_table<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <call><name pos:line="20" pos:column="22">xcalloc<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">atom_table_sz<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="45">sizeof<argument_list pos:line="20" pos:column="51">(<argument><expr pos:line="20" pos:column="52">struct <name pos:line="20" pos:column="59">atom_str<pos:position pos:line="20" pos:column="67"/></name><operator pos:line="20" pos:column="67">*<pos:position pos:line="20" pos:column="68"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="71"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">branch_table<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <call><name pos:line="21" pos:column="24">xcalloc<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">branch_table_sz<pos:position pos:line="21" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="49">sizeof<argument_list pos:line="21" pos:column="55">(<argument><expr pos:line="21" pos:column="56">struct <name pos:line="21" pos:column="63">branch<pos:position pos:line="21" pos:column="69"/></name><operator pos:line="21" pos:column="69">*<pos:position pos:line="21" pos:column="70"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="73"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">avail_tree_table<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">=<pos:position pos:line="22" pos:column="27"/></operator> <call><name pos:line="22" pos:column="28">xcalloc<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><name pos:line="22" pos:column="36">avail_tree_table_sz<pos:position pos:line="22" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="57">sizeof<argument_list pos:line="22" pos:column="63">(<argument><expr pos:line="22" pos:column="64">struct <name pos:line="22" pos:column="71">avail_tree_content<pos:position pos:line="22" pos:column="89"/></name><operator pos:line="22" pos:column="89">*<pos:position pos:line="22" pos:column="90"/></operator></expr></argument>)<pos:position pos:line="22" pos:column="91"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="93"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">marks<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <call><name pos:line="23" pos:column="17">pool_calloc<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><literal type="number" pos:line="23" pos:column="29">1<pos:position pos:line="23" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="32">sizeof<argument_list pos:line="23" pos:column="38">(<argument><expr pos:line="23" pos:column="39">struct <name pos:line="23" pos:column="46">mark_set<pos:position pos:line="23" pos:column="54"/></name></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="57"/></expr_stmt>

	<expr_stmt><expr><name pos:line="25" pos:column="9">global_argc<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="23">argc<pos:position pos:line="25" pos:column="27"/></name></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">global_argv<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">argv<pos:position pos:line="26" pos:column="27"/></name></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><name pos:line="28" pos:column="9">rc_free<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <call><name pos:line="28" pos:column="19">pool_alloc<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">cmd_save<pos:position pos:line="28" pos:column="38"/></name> <operator pos:line="28" pos:column="39">*<pos:position pos:line="28" pos:column="40"/></operator> <sizeof pos:line="28" pos:column="41">sizeof<argument_list pos:line="28" pos:column="47">(<argument><expr><operator pos:line="28" pos:column="48">*<pos:position pos:line="28" pos:column="49"/></operator><name pos:line="28" pos:column="49">rc_free<pos:position pos:line="28" pos:column="56"/></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
	<for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init><expr><name pos:line="29" pos:column="14">i<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <literal type="number" pos:line="29" pos:column="18">0<pos:position pos:line="29" pos:column="19"/></literal></expr>;<pos:position pos:line="29" pos:column="20"/></init> <condition><expr><name pos:line="29" pos:column="21">i<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">&lt;<pos:position pos:line="29" pos:column="27"/></operator> <operator pos:line="29" pos:column="25">(<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">cmd_save<pos:position pos:line="29" pos:column="34"/></name> <operator pos:line="29" pos:column="35">-<pos:position pos:line="29" pos:column="36"/></operator> <literal type="number" pos:line="29" pos:column="37">1<pos:position pos:line="29" pos:column="38"/></literal><operator pos:line="29" pos:column="38">)<pos:position pos:line="29" pos:column="39"/></operator></expr>;<pos:position pos:line="29" pos:column="40"/></condition> <incr><expr><name pos:line="29" pos:column="41">i<pos:position pos:line="29" pos:column="42"/></name><operator pos:line="29" pos:column="42">++<pos:position pos:line="29" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="45"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="17">rc_free<pos:position pos:line="30" pos:column="24"/></name><index pos:line="30" pos:column="24">[<expr><name pos:line="30" pos:column="25">i<pos:position pos:line="30" pos:column="26"/></name></expr>]<pos:position pos:line="30" pos:column="27"/></index></name><operator pos:line="30" pos:column="27">.<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="28">next<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">=<pos:position pos:line="30" pos:column="34"/></operator> <operator pos:line="30" pos:column="35">&amp;<pos:position pos:line="30" pos:column="40"/></operator><name><name pos:line="30" pos:column="36">rc_free<pos:position pos:line="30" pos:column="43"/></name><index pos:line="30" pos:column="43">[<expr><name pos:line="30" pos:column="44">i<pos:position pos:line="30" pos:column="45"/></name> <operator pos:line="30" pos:column="46">+<pos:position pos:line="30" pos:column="47"/></operator> <literal type="number" pos:line="30" pos:column="48">1<pos:position pos:line="30" pos:column="49"/></literal></expr>]<pos:position pos:line="30" pos:column="50"/></index></name></expr>;<pos:position pos:line="30" pos:column="51"/></expr_stmt></block></for>
	<expr_stmt><expr><name><name pos:line="31" pos:column="9">rc_free<pos:position pos:line="31" pos:column="16"/></name><index pos:line="31" pos:column="16">[<expr><name pos:line="31" pos:column="17">cmd_save<pos:position pos:line="31" pos:column="25"/></name> <operator pos:line="31" pos:column="26">-<pos:position pos:line="31" pos:column="27"/></operator> <literal type="number" pos:line="31" pos:column="28">1<pos:position pos:line="31" pos:column="29"/></literal></expr>]<pos:position pos:line="31" pos:column="30"/></index></name><operator pos:line="31" pos:column="30">.<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="31">next<pos:position pos:line="31" pos:column="35"/></name> <operator pos:line="31" pos:column="36">=<pos:position pos:line="31" pos:column="37"/></operator> <name pos:line="31" pos:column="38">NULL<pos:position pos:line="31" pos:column="42"/></name></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">prepare_packed_git<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">()<pos:position pos:line="33" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">start_packfile<pos:position pos:line="34" pos:column="23"/></name><argument_list pos:line="34" pos:column="23">()<pos:position pos:line="34" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">set_die_routine<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">die_nicely<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">set_checkpoint_signal<pos:position pos:line="36" pos:column="30"/></name><argument_list pos:line="36" pos:column="30">()<pos:position pos:line="36" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
	<while pos:line="37" pos:column="9">while <condition pos:line="37" pos:column="15">(<expr><call><name pos:line="37" pos:column="16">read_next_command<pos:position pos:line="37" pos:column="33"/></name><argument_list pos:line="37" pos:column="33">()<pos:position pos:line="37" pos:column="35"/></argument_list></call> <operator pos:line="37" pos:column="36">!=<pos:position pos:line="37" pos:column="38"/></operator> <name pos:line="37" pos:column="39">EOF<pos:position pos:line="37" pos:column="42"/></name></expr>)<pos:position pos:line="37" pos:column="43"/></condition> <block pos:line="37" pos:column="44">{
		<decl_stmt><decl><type><specifier pos:line="38" pos:column="17">const<pos:position pos:line="38" pos:column="22"/></specifier> <name pos:line="38" pos:column="23">char<pos:position pos:line="38" pos:column="27"/></name> <modifier pos:line="38" pos:column="28">*<pos:position pos:line="38" pos:column="29"/></modifier></type><name pos:line="38" pos:column="29">v<pos:position pos:line="38" pos:column="30"/></name></decl>;<pos:position pos:line="38" pos:column="31"/></decl_stmt>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><call><name pos:line="39" pos:column="22">strcmp<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><literal type="string" pos:line="39" pos:column="29">"blob"<pos:position pos:line="39" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="37">command_buf<pos:position pos:line="39" pos:column="48"/></name><operator pos:line="39" pos:column="48">.<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="49">buf<pos:position pos:line="39" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="54"/></condition><then pos:line="39" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="25">parse_new_blob<pos:position pos:line="40" pos:column="39"/></name><argument_list pos:line="40" pos:column="39">()<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt></block></then>
		<elseif pos:line="41" pos:column="17">else <if pos:line="41" pos:column="22">if <condition pos:line="41" pos:column="25">(<expr><call><name pos:line="41" pos:column="26">skip_prefix<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">(<argument><expr><name><name pos:line="41" pos:column="38">command_buf<pos:position pos:line="41" pos:column="49"/></name><operator pos:line="41" pos:column="49">.<pos:position pos:line="41" pos:column="50"/></operator><name pos:line="41" pos:column="50">buf<pos:position pos:line="41" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="55">"ls "<pos:position pos:line="41" pos:column="60"/></literal></expr></argument>, <argument><expr><operator pos:line="41" pos:column="62">&amp;<pos:position pos:line="41" pos:column="67"/></operator><name pos:line="41" pos:column="63">v<pos:position pos:line="41" pos:column="64"/></name></expr></argument>)<pos:position pos:line="41" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="66"/></condition><then pos:line="41" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">parse_ls<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">(<argument><expr><name pos:line="42" pos:column="34">v<pos:position pos:line="42" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="37">NULL<pos:position pos:line="42" pos:column="41"/></name></expr></argument>)<pos:position pos:line="42" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="43"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="43" pos:column="17">else <if pos:line="43" pos:column="22">if <condition pos:line="43" pos:column="25">(<expr><call><name pos:line="43" pos:column="26">skip_prefix<pos:position pos:line="43" pos:column="37"/></name><argument_list pos:line="43" pos:column="37">(<argument><expr><name><name pos:line="43" pos:column="38">command_buf<pos:position pos:line="43" pos:column="49"/></name><operator pos:line="43" pos:column="49">.<pos:position pos:line="43" pos:column="50"/></operator><name pos:line="43" pos:column="50">buf<pos:position pos:line="43" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="55">"commit "<pos:position pos:line="43" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="43" pos:column="66">&amp;<pos:position pos:line="43" pos:column="71"/></operator><name pos:line="43" pos:column="67">v<pos:position pos:line="43" pos:column="68"/></name></expr></argument>)<pos:position pos:line="43" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="70"/></condition><then pos:line="43" pos:column="70">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="25">parse_new_commit<pos:position pos:line="44" pos:column="41"/></name><argument_list pos:line="44" pos:column="41">(<argument><expr><name pos:line="44" pos:column="42">v<pos:position pos:line="44" pos:column="43"/></name></expr></argument>)<pos:position pos:line="44" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="45"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="45" pos:column="17">else <if pos:line="45" pos:column="22">if <condition pos:line="45" pos:column="25">(<expr><call><name pos:line="45" pos:column="26">skip_prefix<pos:position pos:line="45" pos:column="37"/></name><argument_list pos:line="45" pos:column="37">(<argument><expr><name><name pos:line="45" pos:column="38">command_buf<pos:position pos:line="45" pos:column="49"/></name><operator pos:line="45" pos:column="49">.<pos:position pos:line="45" pos:column="50"/></operator><name pos:line="45" pos:column="50">buf<pos:position pos:line="45" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="55">"tag "<pos:position pos:line="45" pos:column="61"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="63">&amp;<pos:position pos:line="45" pos:column="68"/></operator><name pos:line="45" pos:column="64">v<pos:position pos:line="45" pos:column="65"/></name></expr></argument>)<pos:position pos:line="45" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="67"/></condition><then pos:line="45" pos:column="67">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="25">parse_new_tag<pos:position pos:line="46" pos:column="38"/></name><argument_list pos:line="46" pos:column="38">(<argument><expr><name pos:line="46" pos:column="39">v<pos:position pos:line="46" pos:column="40"/></name></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="47" pos:column="17">else <if pos:line="47" pos:column="22">if <condition pos:line="47" pos:column="25">(<expr><call><name pos:line="47" pos:column="26">skip_prefix<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name><name pos:line="47" pos:column="38">command_buf<pos:position pos:line="47" pos:column="49"/></name><operator pos:line="47" pos:column="49">.<pos:position pos:line="47" pos:column="50"/></operator><name pos:line="47" pos:column="50">buf<pos:position pos:line="47" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="55">"reset "<pos:position pos:line="47" pos:column="63"/></literal></expr></argument>, <argument><expr><operator pos:line="47" pos:column="65">&amp;<pos:position pos:line="47" pos:column="70"/></operator><name pos:line="47" pos:column="66">v<pos:position pos:line="47" pos:column="67"/></name></expr></argument>)<pos:position pos:line="47" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="69"/></condition><then pos:line="47" pos:column="69">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="25">parse_reset_branch<pos:position pos:line="48" pos:column="43"/></name><argument_list pos:line="48" pos:column="43">(<argument><expr><name pos:line="48" pos:column="44">v<pos:position pos:line="48" pos:column="45"/></name></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="49" pos:column="17">else <if pos:line="49" pos:column="22">if <condition pos:line="49" pos:column="25">(<expr><operator pos:line="49" pos:column="26">!<pos:position pos:line="49" pos:column="27"/></operator><call><name pos:line="49" pos:column="27">strcmp<pos:position pos:line="49" pos:column="33"/></name><argument_list pos:line="49" pos:column="33">(<argument><expr><literal type="string" pos:line="49" pos:column="34">"checkpoint"<pos:position pos:line="49" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="48">command_buf<pos:position pos:line="49" pos:column="59"/></name><operator pos:line="49" pos:column="59">.<pos:position pos:line="49" pos:column="60"/></operator><name pos:line="49" pos:column="60">buf<pos:position pos:line="49" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="65"/></condition><then pos:line="49" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="25">parse_checkpoint<pos:position pos:line="50" pos:column="41"/></name><argument_list pos:line="50" pos:column="41">()<pos:position pos:line="50" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="44"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="51" pos:column="17">else <if pos:line="51" pos:column="22">if <condition pos:line="51" pos:column="25">(<expr><operator pos:line="51" pos:column="26">!<pos:position pos:line="51" pos:column="27"/></operator><call><name pos:line="51" pos:column="27">strcmp<pos:position pos:line="51" pos:column="33"/></name><argument_list pos:line="51" pos:column="33">(<argument><expr><literal type="string" pos:line="51" pos:column="34">"done"<pos:position pos:line="51" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="42">command_buf<pos:position pos:line="51" pos:column="53"/></name><operator pos:line="51" pos:column="53">.<pos:position pos:line="51" pos:column="54"/></operator><name pos:line="51" pos:column="54">buf<pos:position pos:line="51" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="59"/></condition><then pos:line="51" pos:column="59">
			<block type="pseudo"><break pos:line="52" pos:column="25">break;<pos:position pos:line="52" pos:column="31"/></break></block></then></if></elseif>
		<elseif pos:line="53" pos:column="17">else <if pos:line="53" pos:column="22">if <condition pos:line="53" pos:column="25">(<expr><call><name pos:line="53" pos:column="26">starts_with<pos:position pos:line="53" pos:column="37"/></name><argument_list pos:line="53" pos:column="37">(<argument><expr><name><name pos:line="53" pos:column="38">command_buf<pos:position pos:line="53" pos:column="49"/></name><operator pos:line="53" pos:column="49">.<pos:position pos:line="53" pos:column="50"/></operator><name pos:line="53" pos:column="50">buf<pos:position pos:line="53" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="55">"progress "<pos:position pos:line="53" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="68"/></condition><then pos:line="53" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="25">parse_progress<pos:position pos:line="54" pos:column="39"/></name><argument_list pos:line="54" pos:column="39">()<pos:position pos:line="54" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="42"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="55" pos:column="17">else <if pos:line="55" pos:column="22">if <condition pos:line="55" pos:column="25">(<expr><call><name pos:line="55" pos:column="26">skip_prefix<pos:position pos:line="55" pos:column="37"/></name><argument_list pos:line="55" pos:column="37">(<argument><expr><name><name pos:line="55" pos:column="38">command_buf<pos:position pos:line="55" pos:column="49"/></name><operator pos:line="55" pos:column="49">.<pos:position pos:line="55" pos:column="50"/></operator><name pos:line="55" pos:column="50">buf<pos:position pos:line="55" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="55">"feature "<pos:position pos:line="55" pos:column="65"/></literal></expr></argument>, <argument><expr><operator pos:line="55" pos:column="67">&amp;<pos:position pos:line="55" pos:column="72"/></operator><name pos:line="55" pos:column="68">v<pos:position pos:line="55" pos:column="69"/></name></expr></argument>)<pos:position pos:line="55" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="71"/></condition><then pos:line="55" pos:column="71">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="25">parse_feature<pos:position pos:line="56" pos:column="38"/></name><argument_list pos:line="56" pos:column="38">(<argument><expr><name pos:line="56" pos:column="39">v<pos:position pos:line="56" pos:column="40"/></name></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="42"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="57" pos:column="17">else <if pos:line="57" pos:column="22">if <condition pos:line="57" pos:column="25">(<expr><call><name pos:line="57" pos:column="26">skip_prefix<pos:position pos:line="57" pos:column="37"/></name><argument_list pos:line="57" pos:column="37">(<argument><expr><name><name pos:line="57" pos:column="38">command_buf<pos:position pos:line="57" pos:column="49"/></name><operator pos:line="57" pos:column="49">.<pos:position pos:line="57" pos:column="50"/></operator><name pos:line="57" pos:column="50">buf<pos:position pos:line="57" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="55">"option git "<pos:position pos:line="57" pos:column="68"/></literal></expr></argument>, <argument><expr><operator pos:line="57" pos:column="70">&amp;<pos:position pos:line="57" pos:column="75"/></operator><name pos:line="57" pos:column="71">v<pos:position pos:line="57" pos:column="72"/></name></expr></argument>)<pos:position pos:line="57" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="74"/></condition><then pos:line="57" pos:column="74">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="25">parse_option<pos:position pos:line="58" pos:column="37"/></name><argument_list pos:line="58" pos:column="37">(<argument><expr><name pos:line="58" pos:column="38">v<pos:position pos:line="58" pos:column="39"/></name></expr></argument>)<pos:position pos:line="58" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="59" pos:column="17">else <if pos:line="59" pos:column="22">if <condition pos:line="59" pos:column="25">(<expr><call><name pos:line="59" pos:column="26">starts_with<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><name><name pos:line="59" pos:column="38">command_buf<pos:position pos:line="59" pos:column="49"/></name><operator pos:line="59" pos:column="49">.<pos:position pos:line="59" pos:column="50"/></operator><name pos:line="59" pos:column="50">buf<pos:position pos:line="59" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="55">"option "<pos:position pos:line="59" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="66"/></condition><then pos:line="59" pos:column="66">
			<comment type="block" pos:line="60" pos:column="25">/* ignore non-git options*/</comment><block type="pseudo"><empty_stmt pos:line="60" pos:column="52">;<pos:position pos:line="60" pos:column="53"/></empty_stmt></block></then></if></elseif>
		<else pos:line="61" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="25">die<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><literal type="string" pos:line="62" pos:column="29">"Unsupported command: %s"<pos:position pos:line="62" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="56">command_buf<pos:position pos:line="62" pos:column="67"/></name><operator pos:line="62" pos:column="67">.<pos:position pos:line="62" pos:column="68"/></operator><name pos:line="62" pos:column="68">buf<pos:position pos:line="62" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="73"/></expr_stmt></block></else></if>

		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">checkpoint_requested<pos:position pos:line="64" pos:column="41"/></name></expr>)<pos:position pos:line="64" pos:column="42"/></condition><then pos:line="64" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="25">checkpoint<pos:position pos:line="65" pos:column="35"/></name><argument_list pos:line="65" pos:column="35">()<pos:position pos:line="65" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="38"/></expr_stmt></block></then></if>
	}<pos:position pos:line="66" pos:column="10"/></block></while>

	<comment type="block" pos:line="68" pos:column="9">/* argv hasn't been parsed yet, do so */</comment>
	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><operator pos:line="69" pos:column="13">!<pos:position pos:line="69" pos:column="14"/></operator><name pos:line="69" pos:column="14">seen_data_command<pos:position pos:line="69" pos:column="31"/></name></expr>)<pos:position pos:line="69" pos:column="32"/></condition><then pos:line="69" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="17">parse_argv<pos:position pos:line="70" pos:column="27"/></name><argument_list pos:line="70" pos:column="27">()<pos:position pos:line="70" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="30"/></expr_stmt></block></then></if>

	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><name pos:line="72" pos:column="13">require_explicit_termination<pos:position pos:line="72" pos:column="41"/></name> <operator pos:line="72" pos:column="42">&amp;&amp;<pos:position pos:line="72" pos:column="52"/></operator> <call><name pos:line="72" pos:column="45">feof<pos:position pos:line="72" pos:column="49"/></name><argument_list pos:line="72" pos:column="49">(<argument><expr><name pos:line="72" pos:column="50">stdin<pos:position pos:line="72" pos:column="55"/></name></expr></argument>)<pos:position pos:line="72" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="57"/></condition><then pos:line="72" pos:column="57">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="17">die<pos:position pos:line="73" pos:column="20"/></name><argument_list pos:line="73" pos:column="20">(<argument><expr><literal type="string" pos:line="73" pos:column="21">"stream ends early"<pos:position pos:line="73" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="42"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="75" pos:column="9">end_packfile<pos:position pos:line="75" pos:column="21"/></name><argument_list pos:line="75" pos:column="21">()<pos:position pos:line="75" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="77" pos:column="9">dump_branches<pos:position pos:line="77" pos:column="22"/></name><argument_list pos:line="77" pos:column="22">()<pos:position pos:line="77" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="78" pos:column="9">dump_tags<pos:position pos:line="78" pos:column="18"/></name><argument_list pos:line="78" pos:column="18">()<pos:position pos:line="78" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="79" pos:column="9">unkeep_all_packs<pos:position pos:line="79" pos:column="25"/></name><argument_list pos:line="79" pos:column="25">()<pos:position pos:line="79" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">dump_marks<pos:position pos:line="80" pos:column="19"/></name><argument_list pos:line="80" pos:column="19">()<pos:position pos:line="80" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="22"/></expr_stmt>

	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">pack_edges<pos:position pos:line="82" pos:column="23"/></name></expr>)<pos:position pos:line="82" pos:column="24"/></condition><then pos:line="82" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="17">fclose<pos:position pos:line="83" pos:column="23"/></name><argument_list pos:line="83" pos:column="23">(<argument><expr><name pos:line="83" pos:column="24">pack_edges<pos:position pos:line="83" pos:column="34"/></name></expr></argument>)<pos:position pos:line="83" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="36"/></expr_stmt></block></then></if>

	<if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name pos:line="85" pos:column="13">show_stats<pos:position pos:line="85" pos:column="23"/></name></expr>)<pos:position pos:line="85" pos:column="24"/></condition><then pos:line="85" pos:column="24"> <block pos:line="85" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="86" pos:column="17">uintmax_t<pos:position pos:line="86" pos:column="26"/></name></type> <name pos:line="86" pos:column="27">total_count<pos:position pos:line="86" pos:column="38"/></name> <init pos:line="86" pos:column="39">= <expr><literal type="number" pos:line="86" pos:column="41">0<pos:position pos:line="86" pos:column="42"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="86" pos:column="44">duplicate_count<pos:position pos:line="86" pos:column="59"/></name> <init pos:line="86" pos:column="60">= <expr><literal type="number" pos:line="86" pos:column="62">0<pos:position pos:line="86" pos:column="63"/></literal></expr></init></decl>;<pos:position pos:line="86" pos:column="64"/></decl_stmt>
		<for pos:line="87" pos:column="17">for <control pos:line="87" pos:column="21">(<init><expr><name pos:line="87" pos:column="22">i<pos:position pos:line="87" pos:column="23"/></name> <operator pos:line="87" pos:column="24">=<pos:position pos:line="87" pos:column="25"/></operator> <literal type="number" pos:line="87" pos:column="26">0<pos:position pos:line="87" pos:column="27"/></literal></expr>;<pos:position pos:line="87" pos:column="28"/></init> <condition><expr><name pos:line="87" pos:column="29">i<pos:position pos:line="87" pos:column="30"/></name> <operator pos:line="87" pos:column="31">&lt;<pos:position pos:line="87" pos:column="35"/></operator> <call><name pos:line="87" pos:column="33">ARRAY_SIZE<pos:position pos:line="87" pos:column="43"/></name><argument_list pos:line="87" pos:column="43">(<argument><expr><name pos:line="87" pos:column="44">object_count_by_type<pos:position pos:line="87" pos:column="64"/></name></expr></argument>)<pos:position pos:line="87" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="66"/></condition> <incr><expr><name pos:line="87" pos:column="67">i<pos:position pos:line="87" pos:column="68"/></name><operator pos:line="87" pos:column="68">++<pos:position pos:line="87" pos:column="70"/></operator></expr></incr>)<pos:position pos:line="87" pos:column="71"/></control>
			<block type="pseudo"><expr_stmt><expr><name pos:line="88" pos:column="25">total_count<pos:position pos:line="88" pos:column="36"/></name> <operator pos:line="88" pos:column="37">+=<pos:position pos:line="88" pos:column="39"/></operator> <name><name pos:line="88" pos:column="40">object_count_by_type<pos:position pos:line="88" pos:column="60"/></name><index pos:line="88" pos:column="60">[<expr><name pos:line="88" pos:column="61">i<pos:position pos:line="88" pos:column="62"/></name></expr>]<pos:position pos:line="88" pos:column="63"/></index></name></expr>;<pos:position pos:line="88" pos:column="64"/></expr_stmt></block></for>
		<for pos:line="89" pos:column="17">for <control pos:line="89" pos:column="21">(<init><expr><name pos:line="89" pos:column="22">i<pos:position pos:line="89" pos:column="23"/></name> <operator pos:line="89" pos:column="24">=<pos:position pos:line="89" pos:column="25"/></operator> <literal type="number" pos:line="89" pos:column="26">0<pos:position pos:line="89" pos:column="27"/></literal></expr>;<pos:position pos:line="89" pos:column="28"/></init> <condition><expr><name pos:line="89" pos:column="29">i<pos:position pos:line="89" pos:column="30"/></name> <operator pos:line="89" pos:column="31">&lt;<pos:position pos:line="89" pos:column="35"/></operator> <call><name pos:line="89" pos:column="33">ARRAY_SIZE<pos:position pos:line="89" pos:column="43"/></name><argument_list pos:line="89" pos:column="43">(<argument><expr><name pos:line="89" pos:column="44">duplicate_count_by_type<pos:position pos:line="89" pos:column="67"/></name></expr></argument>)<pos:position pos:line="89" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="69"/></condition> <incr><expr><name pos:line="89" pos:column="70">i<pos:position pos:line="89" pos:column="71"/></name><operator pos:line="89" pos:column="71">++<pos:position pos:line="89" pos:column="73"/></operator></expr></incr>)<pos:position pos:line="89" pos:column="74"/></control>
			<block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="25">duplicate_count<pos:position pos:line="90" pos:column="40"/></name> <operator pos:line="90" pos:column="41">+=<pos:position pos:line="90" pos:column="43"/></operator> <name><name pos:line="90" pos:column="44">duplicate_count_by_type<pos:position pos:line="90" pos:column="67"/></name><index pos:line="90" pos:column="67">[<expr><name pos:line="90" pos:column="68">i<pos:position pos:line="90" pos:column="69"/></name></expr>]<pos:position pos:line="90" pos:column="70"/></index></name></expr>;<pos:position pos:line="90" pos:column="71"/></expr_stmt></block></for>

		<expr_stmt><expr><call><name pos:line="92" pos:column="17">fprintf<pos:position pos:line="92" pos:column="24"/></name><argument_list pos:line="92" pos:column="24">(<argument><expr><name pos:line="92" pos:column="25">stderr<pos:position pos:line="92" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="33">"%s statistics:\n"<pos:position pos:line="92" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="53">argv<pos:position pos:line="92" pos:column="57"/></name><index pos:line="92" pos:column="57">[<expr><literal type="number" pos:line="92" pos:column="58">0<pos:position pos:line="92" pos:column="59"/></literal></expr>]<pos:position pos:line="92" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="92" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">fprintf<pos:position pos:line="93" pos:column="24"/></name><argument_list pos:line="93" pos:column="24">(<argument><expr><name pos:line="93" pos:column="25">stderr<pos:position pos:line="93" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="33">"---------------------------------------------------------------------\n"<pos:position pos:line="93" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="108"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="94" pos:column="17">fprintf<pos:position pos:line="94" pos:column="24"/></name><argument_list pos:line="94" pos:column="24">(<argument><expr><name pos:line="94" pos:column="25">stderr<pos:position pos:line="94" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="33">"Alloc'd objects: %10"<pos:position pos:line="94" pos:column="55"/></literal> <name pos:line="94" pos:column="56">PRIuMAX<pos:position pos:line="94" pos:column="63"/></name> <literal type="string" pos:line="94" pos:column="64">"\n"<pos:position pos:line="94" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="70">alloc_count<pos:position pos:line="94" pos:column="81"/></name></expr></argument>)<pos:position pos:line="94" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="83"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="95" pos:column="17">fprintf<pos:position pos:line="95" pos:column="24"/></name><argument_list pos:line="95" pos:column="24">(<argument><expr><name pos:line="95" pos:column="25">stderr<pos:position pos:line="95" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="33">"Total objects:   %10"<pos:position pos:line="95" pos:column="55"/></literal> <name pos:line="95" pos:column="56">PRIuMAX<pos:position pos:line="95" pos:column="63"/></name> <literal type="string" pos:line="95" pos:column="64">" (%10"<pos:position pos:line="95" pos:column="71"/></literal> <name pos:line="95" pos:column="72">PRIuMAX<pos:position pos:line="95" pos:column="79"/></name> <literal type="string" pos:line="95" pos:column="80">" duplicates                  )\n"<pos:position pos:line="95" pos:column="114"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="116">total_count<pos:position pos:line="95" pos:column="127"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="129">duplicate_count<pos:position pos:line="95" pos:column="144"/></name></expr></argument>)<pos:position pos:line="95" pos:column="145"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="146"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="96" pos:column="17">fprintf<pos:position pos:line="96" pos:column="24"/></name><argument_list pos:line="96" pos:column="24">(<argument><expr><name pos:line="96" pos:column="25">stderr<pos:position pos:line="96" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="33">"      blobs  :   %10"<pos:position pos:line="96" pos:column="55"/></literal> <name pos:line="96" pos:column="56">PRIuMAX<pos:position pos:line="96" pos:column="63"/></name> <literal type="string" pos:line="96" pos:column="64">" (%10"<pos:position pos:line="96" pos:column="71"/></literal> <name pos:line="96" pos:column="72">PRIuMAX<pos:position pos:line="96" pos:column="79"/></name> <literal type="string" pos:line="96" pos:column="80">" duplicates %10"<pos:position pos:line="96" pos:column="97"/></literal> <name pos:line="96" pos:column="98">PRIuMAX<pos:position pos:line="96" pos:column="105"/></name> <literal type="string" pos:line="96" pos:column="106">" deltas of %10"<pos:position pos:line="96" pos:column="122"/></literal> <name pos:line="96" pos:column="123">PRIuMAX<pos:position pos:line="96" pos:column="130"/></name><literal type="string" pos:line="96" pos:column="130">" attempts)\n"<pos:position pos:line="96" pos:column="144"/></literal></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="146">object_count_by_type<pos:position pos:line="96" pos:column="166"/></name><index pos:line="96" pos:column="166">[<expr><name pos:line="96" pos:column="167">OBJ_BLOB<pos:position pos:line="96" pos:column="175"/></name></expr>]<pos:position pos:line="96" pos:column="176"/></index></name></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="178">duplicate_count_by_type<pos:position pos:line="96" pos:column="201"/></name><index pos:line="96" pos:column="201">[<expr><name pos:line="96" pos:column="202">OBJ_BLOB<pos:position pos:line="96" pos:column="210"/></name></expr>]<pos:position pos:line="96" pos:column="211"/></index></name></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="213">delta_count_by_type<pos:position pos:line="96" pos:column="232"/></name><index pos:line="96" pos:column="232">[<expr><name pos:line="96" pos:column="233">OBJ_BLOB<pos:position pos:line="96" pos:column="241"/></name></expr>]<pos:position pos:line="96" pos:column="242"/></index></name></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="244">delta_count_attempts_by_type<pos:position pos:line="96" pos:column="272"/></name><index pos:line="96" pos:column="272">[<expr><name pos:line="96" pos:column="273">OBJ_BLOB<pos:position pos:line="96" pos:column="281"/></name></expr>]<pos:position pos:line="96" pos:column="282"/></index></name></expr></argument>)<pos:position pos:line="96" pos:column="283"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="284"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="97" pos:column="17">fprintf<pos:position pos:line="97" pos:column="24"/></name><argument_list pos:line="97" pos:column="24">(<argument><expr><name pos:line="97" pos:column="25">stderr<pos:position pos:line="97" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="33">"      trees  :   %10"<pos:position pos:line="97" pos:column="55"/></literal> <name pos:line="97" pos:column="56">PRIuMAX<pos:position pos:line="97" pos:column="63"/></name> <literal type="string" pos:line="97" pos:column="64">" (%10"<pos:position pos:line="97" pos:column="71"/></literal> <name pos:line="97" pos:column="72">PRIuMAX<pos:position pos:line="97" pos:column="79"/></name> <literal type="string" pos:line="97" pos:column="80">" duplicates %10"<pos:position pos:line="97" pos:column="97"/></literal> <name pos:line="97" pos:column="98">PRIuMAX<pos:position pos:line="97" pos:column="105"/></name> <literal type="string" pos:line="97" pos:column="106">" deltas of %10"<pos:position pos:line="97" pos:column="122"/></literal> <name pos:line="97" pos:column="123">PRIuMAX<pos:position pos:line="97" pos:column="130"/></name><literal type="string" pos:line="97" pos:column="130">" attempts)\n"<pos:position pos:line="97" pos:column="144"/></literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="146">object_count_by_type<pos:position pos:line="97" pos:column="166"/></name><index pos:line="97" pos:column="166">[<expr><name pos:line="97" pos:column="167">OBJ_TREE<pos:position pos:line="97" pos:column="175"/></name></expr>]<pos:position pos:line="97" pos:column="176"/></index></name></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="178">duplicate_count_by_type<pos:position pos:line="97" pos:column="201"/></name><index pos:line="97" pos:column="201">[<expr><name pos:line="97" pos:column="202">OBJ_TREE<pos:position pos:line="97" pos:column="210"/></name></expr>]<pos:position pos:line="97" pos:column="211"/></index></name></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="213">delta_count_by_type<pos:position pos:line="97" pos:column="232"/></name><index pos:line="97" pos:column="232">[<expr><name pos:line="97" pos:column="233">OBJ_TREE<pos:position pos:line="97" pos:column="241"/></name></expr>]<pos:position pos:line="97" pos:column="242"/></index></name></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="244">delta_count_attempts_by_type<pos:position pos:line="97" pos:column="272"/></name><index pos:line="97" pos:column="272">[<expr><name pos:line="97" pos:column="273">OBJ_TREE<pos:position pos:line="97" pos:column="281"/></name></expr>]<pos:position pos:line="97" pos:column="282"/></index></name></expr></argument>)<pos:position pos:line="97" pos:column="283"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="284"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="98" pos:column="17">fprintf<pos:position pos:line="98" pos:column="24"/></name><argument_list pos:line="98" pos:column="24">(<argument><expr><name pos:line="98" pos:column="25">stderr<pos:position pos:line="98" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="33">"      commits:   %10"<pos:position pos:line="98" pos:column="55"/></literal> <name pos:line="98" pos:column="56">PRIuMAX<pos:position pos:line="98" pos:column="63"/></name> <literal type="string" pos:line="98" pos:column="64">" (%10"<pos:position pos:line="98" pos:column="71"/></literal> <name pos:line="98" pos:column="72">PRIuMAX<pos:position pos:line="98" pos:column="79"/></name> <literal type="string" pos:line="98" pos:column="80">" duplicates %10"<pos:position pos:line="98" pos:column="97"/></literal> <name pos:line="98" pos:column="98">PRIuMAX<pos:position pos:line="98" pos:column="105"/></name> <literal type="string" pos:line="98" pos:column="106">" deltas of %10"<pos:position pos:line="98" pos:column="122"/></literal> <name pos:line="98" pos:column="123">PRIuMAX<pos:position pos:line="98" pos:column="130"/></name><literal type="string" pos:line="98" pos:column="130">" attempts)\n"<pos:position pos:line="98" pos:column="144"/></literal></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="146">object_count_by_type<pos:position pos:line="98" pos:column="166"/></name><index pos:line="98" pos:column="166">[<expr><name pos:line="98" pos:column="167">OBJ_COMMIT<pos:position pos:line="98" pos:column="177"/></name></expr>]<pos:position pos:line="98" pos:column="178"/></index></name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="180">duplicate_count_by_type<pos:position pos:line="98" pos:column="203"/></name><index pos:line="98" pos:column="203">[<expr><name pos:line="98" pos:column="204">OBJ_COMMIT<pos:position pos:line="98" pos:column="214"/></name></expr>]<pos:position pos:line="98" pos:column="215"/></index></name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="217">delta_count_by_type<pos:position pos:line="98" pos:column="236"/></name><index pos:line="98" pos:column="236">[<expr><name pos:line="98" pos:column="237">OBJ_COMMIT<pos:position pos:line="98" pos:column="247"/></name></expr>]<pos:position pos:line="98" pos:column="248"/></index></name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="250">delta_count_attempts_by_type<pos:position pos:line="98" pos:column="278"/></name><index pos:line="98" pos:column="278">[<expr><name pos:line="98" pos:column="279">OBJ_COMMIT<pos:position pos:line="98" pos:column="289"/></name></expr>]<pos:position pos:line="98" pos:column="290"/></index></name></expr></argument>)<pos:position pos:line="98" pos:column="291"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="292"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="99" pos:column="17">fprintf<pos:position pos:line="99" pos:column="24"/></name><argument_list pos:line="99" pos:column="24">(<argument><expr><name pos:line="99" pos:column="25">stderr<pos:position pos:line="99" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="33">"      tags   :   %10"<pos:position pos:line="99" pos:column="55"/></literal> <name pos:line="99" pos:column="56">PRIuMAX<pos:position pos:line="99" pos:column="63"/></name> <literal type="string" pos:line="99" pos:column="64">" (%10"<pos:position pos:line="99" pos:column="71"/></literal> <name pos:line="99" pos:column="72">PRIuMAX<pos:position pos:line="99" pos:column="79"/></name> <literal type="string" pos:line="99" pos:column="80">" duplicates %10"<pos:position pos:line="99" pos:column="97"/></literal> <name pos:line="99" pos:column="98">PRIuMAX<pos:position pos:line="99" pos:column="105"/></name> <literal type="string" pos:line="99" pos:column="106">" deltas of %10"<pos:position pos:line="99" pos:column="122"/></literal> <name pos:line="99" pos:column="123">PRIuMAX<pos:position pos:line="99" pos:column="130"/></name><literal type="string" pos:line="99" pos:column="130">" attempts)\n"<pos:position pos:line="99" pos:column="144"/></literal></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="146">object_count_by_type<pos:position pos:line="99" pos:column="166"/></name><index pos:line="99" pos:column="166">[<expr><name pos:line="99" pos:column="167">OBJ_TAG<pos:position pos:line="99" pos:column="174"/></name></expr>]<pos:position pos:line="99" pos:column="175"/></index></name></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="177">duplicate_count_by_type<pos:position pos:line="99" pos:column="200"/></name><index pos:line="99" pos:column="200">[<expr><name pos:line="99" pos:column="201">OBJ_TAG<pos:position pos:line="99" pos:column="208"/></name></expr>]<pos:position pos:line="99" pos:column="209"/></index></name></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="211">delta_count_by_type<pos:position pos:line="99" pos:column="230"/></name><index pos:line="99" pos:column="230">[<expr><name pos:line="99" pos:column="231">OBJ_TAG<pos:position pos:line="99" pos:column="238"/></name></expr>]<pos:position pos:line="99" pos:column="239"/></index></name></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="241">delta_count_attempts_by_type<pos:position pos:line="99" pos:column="269"/></name><index pos:line="99" pos:column="269">[<expr><name pos:line="99" pos:column="270">OBJ_TAG<pos:position pos:line="99" pos:column="277"/></name></expr>]<pos:position pos:line="99" pos:column="278"/></index></name></expr></argument>)<pos:position pos:line="99" pos:column="279"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="280"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="100" pos:column="17">fprintf<pos:position pos:line="100" pos:column="24"/></name><argument_list pos:line="100" pos:column="24">(<argument><expr><name pos:line="100" pos:column="25">stderr<pos:position pos:line="100" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="33">"Total branches:  %10lu (%10lu loads     )\n"<pos:position pos:line="100" pos:column="78"/></literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="80">branch_count<pos:position pos:line="100" pos:column="92"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="94">branch_load_count<pos:position pos:line="100" pos:column="111"/></name></expr></argument>)<pos:position pos:line="100" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="113"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="101" pos:column="17">fprintf<pos:position pos:line="101" pos:column="24"/></name><argument_list pos:line="101" pos:column="24">(<argument><expr><name pos:line="101" pos:column="25">stderr<pos:position pos:line="101" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="33">"      marks:     %10"<pos:position pos:line="101" pos:column="55"/></literal> <name pos:line="101" pos:column="56">PRIuMAX<pos:position pos:line="101" pos:column="63"/></name> <literal type="string" pos:line="101" pos:column="64">" (%10"<pos:position pos:line="101" pos:column="71"/></literal> <name pos:line="101" pos:column="72">PRIuMAX<pos:position pos:line="101" pos:column="79"/></name> <literal type="string" pos:line="101" pos:column="80">" unique    )\n"<pos:position pos:line="101" pos:column="96"/></literal></expr></argument>, <argument><expr><operator pos:line="101" pos:column="98">(<pos:position pos:line="101" pos:column="99"/></operator><operator pos:line="101" pos:column="99">(<pos:position pos:line="101" pos:column="100"/></operator><operator pos:line="101" pos:column="100">(<pos:position pos:line="101" pos:column="101"/></operator><name pos:line="101" pos:column="101">uintmax_t<pos:position pos:line="101" pos:column="110"/></name><operator pos:line="101" pos:column="110">)<pos:position pos:line="101" pos:column="111"/></operator><literal type="number" pos:line="101" pos:column="111">1<pos:position pos:line="101" pos:column="112"/></literal><operator pos:line="101" pos:column="112">)<pos:position pos:line="101" pos:column="113"/></operator> <operator pos:line="101" pos:column="114">&lt;&lt;<pos:position pos:line="101" pos:column="122"/></operator> <name><name pos:line="101" pos:column="117">marks<pos:position pos:line="101" pos:column="122"/></name><operator pos:line="101" pos:column="122">-&gt;<pos:position pos:line="101" pos:column="127"/></operator><name pos:line="101" pos:column="124">shift<pos:position pos:line="101" pos:column="129"/></name></name><operator pos:line="101" pos:column="129">)<pos:position pos:line="101" pos:column="130"/></operator> <operator pos:line="101" pos:column="131">*<pos:position pos:line="101" pos:column="132"/></operator> <literal type="number" pos:line="101" pos:column="133">1024<pos:position pos:line="101" pos:column="137"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="139">marks_set_count<pos:position pos:line="101" pos:column="154"/></name></expr></argument>)<pos:position pos:line="101" pos:column="155"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="156"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="102" pos:column="17">fprintf<pos:position pos:line="102" pos:column="24"/></name><argument_list pos:line="102" pos:column="24">(<argument><expr><name pos:line="102" pos:column="25">stderr<pos:position pos:line="102" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="33">"      atoms:     %10u\n"<pos:position pos:line="102" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="60">atom_cnt<pos:position pos:line="102" pos:column="68"/></name></expr></argument>)<pos:position pos:line="102" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="103" pos:column="17">fprintf<pos:position pos:line="103" pos:column="24"/></name><argument_list pos:line="103" pos:column="24">(<argument><expr><name pos:line="103" pos:column="25">stderr<pos:position pos:line="103" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="33">"Memory total:    %10"<pos:position pos:line="103" pos:column="55"/></literal> <name pos:line="103" pos:column="56">PRIuMAX<pos:position pos:line="103" pos:column="63"/></name> <literal type="string" pos:line="103" pos:column="64">" KiB\n"<pos:position pos:line="103" pos:column="72"/></literal></expr></argument>, <argument><expr><operator pos:line="103" pos:column="74">(<pos:position pos:line="103" pos:column="75"/></operator><name pos:line="103" pos:column="75">total_allocd<pos:position pos:line="103" pos:column="87"/></name> <operator pos:line="103" pos:column="88">+<pos:position pos:line="103" pos:column="89"/></operator> <name pos:line="103" pos:column="90">alloc_count<pos:position pos:line="103" pos:column="101"/></name><operator pos:line="103" pos:column="101">*<pos:position pos:line="103" pos:column="102"/></operator><sizeof pos:line="103" pos:column="102">sizeof<argument_list pos:line="103" pos:column="108">(<argument><expr pos:line="103" pos:column="109">struct <name pos:line="103" pos:column="116">object_entry<pos:position pos:line="103" pos:column="128"/></name></expr></argument>)<pos:position pos:line="103" pos:column="129"/></argument_list></sizeof><operator pos:line="103" pos:column="129">)<pos:position pos:line="103" pos:column="130"/></operator><operator pos:line="103" pos:column="130">/<pos:position pos:line="103" pos:column="131"/></operator><literal type="number" pos:line="103" pos:column="131">1024<pos:position pos:line="103" pos:column="135"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="136"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="137"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="104" pos:column="17">fprintf<pos:position pos:line="104" pos:column="24"/></name><argument_list pos:line="104" pos:column="24">(<argument><expr><name pos:line="104" pos:column="25">stderr<pos:position pos:line="104" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="33">"       pools:    %10lu KiB\n"<pos:position pos:line="104" pos:column="63"/></literal></expr></argument>, <argument><expr><call pos:line="104" pos:column="65">(<name pos:line="104" pos:column="66">unsigned<pos:position pos:line="104" pos:column="74"/></name> <name pos:line="104" pos:column="75">long<pos:position pos:line="104" pos:column="79"/></name>)<argument_list pos:line="104" pos:column="80">(<argument><expr><name pos:line="104" pos:column="81">total_allocd<pos:position pos:line="104" pos:column="93"/></name><operator pos:line="104" pos:column="93">/<pos:position pos:line="104" pos:column="94"/></operator><literal type="number" pos:line="104" pos:column="94">1024<pos:position pos:line="104" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="104" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="101"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="105" pos:column="17">fprintf<pos:position pos:line="105" pos:column="24"/></name><argument_list pos:line="105" pos:column="24">(<argument><expr><name pos:line="105" pos:column="25">stderr<pos:position pos:line="105" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="33">"     objects:    %10"<pos:position pos:line="105" pos:column="55"/></literal> <name pos:line="105" pos:column="56">PRIuMAX<pos:position pos:line="105" pos:column="63"/></name> <literal type="string" pos:line="105" pos:column="64">" KiB\n"<pos:position pos:line="105" pos:column="72"/></literal></expr></argument>, <argument><expr><operator pos:line="105" pos:column="74">(<pos:position pos:line="105" pos:column="75"/></operator><name pos:line="105" pos:column="75">alloc_count<pos:position pos:line="105" pos:column="86"/></name><operator pos:line="105" pos:column="86">*<pos:position pos:line="105" pos:column="87"/></operator><sizeof pos:line="105" pos:column="87">sizeof<argument_list pos:line="105" pos:column="93">(<argument><expr pos:line="105" pos:column="94">struct <name pos:line="105" pos:column="101">object_entry<pos:position pos:line="105" pos:column="113"/></name></expr></argument>)<pos:position pos:line="105" pos:column="114"/></argument_list></sizeof><operator pos:line="105" pos:column="114">)<pos:position pos:line="105" pos:column="115"/></operator><operator pos:line="105" pos:column="115">/<pos:position pos:line="105" pos:column="116"/></operator><literal type="number" pos:line="105" pos:column="116">1024<pos:position pos:line="105" pos:column="120"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="121"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="122"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="106" pos:column="17">fprintf<pos:position pos:line="106" pos:column="24"/></name><argument_list pos:line="106" pos:column="24">(<argument><expr><name pos:line="106" pos:column="25">stderr<pos:position pos:line="106" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="33">"---------------------------------------------------------------------\n"<pos:position pos:line="106" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="108"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="107" pos:column="17">pack_report<pos:position pos:line="107" pos:column="28"/></name><argument_list pos:line="107" pos:column="28">()<pos:position pos:line="107" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="108" pos:column="17">fprintf<pos:position pos:line="108" pos:column="24"/></name><argument_list pos:line="108" pos:column="24">(<argument><expr><name pos:line="108" pos:column="25">stderr<pos:position pos:line="108" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="33">"---------------------------------------------------------------------\n"<pos:position pos:line="108" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="108"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="109" pos:column="17">fprintf<pos:position pos:line="109" pos:column="24"/></name><argument_list pos:line="109" pos:column="24">(<argument><expr><name pos:line="109" pos:column="25">stderr<pos:position pos:line="109" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="33">"\n"<pos:position pos:line="109" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="110" pos:column="10"/></block></then></if>

	<return pos:line="112" pos:column="9">return <expr><ternary><condition><expr><name pos:line="112" pos:column="16">failure<pos:position pos:line="112" pos:column="23"/></name></expr> ?<pos:position pos:line="112" pos:column="25"/></condition><then pos:line="112" pos:column="25"> <expr><literal type="number" pos:line="112" pos:column="26">1<pos:position pos:line="112" pos:column="27"/></literal></expr> <pos:position pos:line="112" pos:column="28"/></then><else pos:line="112" pos:column="28">: <expr><literal type="number" pos:line="112" pos:column="30">0<pos:position pos:line="112" pos:column="31"/></literal></expr></else></ternary></expr>;<pos:position pos:line="112" pos:column="32"/></return>
}<pos:position pos:line="113" pos:column="2"/></block></function></unit>
