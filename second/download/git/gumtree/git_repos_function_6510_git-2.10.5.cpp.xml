<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6510_git-2.10.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bin_tree_t<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type>
<name pos:line="2" pos:column="1">build_charclass_op<pos:position pos:line="2" pos:column="19"/></name> <parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">re_dfa_t<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">dfa<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">RE_TRANSLATE_TYPE<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">trans<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>,
		    <parameter><decl><type><specifier pos:line="3" pos:column="21">const<pos:position pos:line="3" pos:column="26"/></specifier> <name pos:line="3" pos:column="27">char<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">class_name<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>,
		    <parameter><decl><type><specifier pos:line="4" pos:column="21">const<pos:position pos:line="4" pos:column="26"/></specifier> <name pos:line="4" pos:column="27">char<pos:position pos:line="4" pos:column="31"/></name> <modifier pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></modifier></type><name pos:line="4" pos:column="33">extra<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="40">int<pos:position pos:line="4" pos:column="43"/></name></type> <name pos:line="4" pos:column="44">non_match<pos:position pos:line="4" pos:column="53"/></name></decl></parameter>,
		    <parameter><decl><type><name pos:line="5" pos:column="21">reg_errcode_t<pos:position pos:line="5" pos:column="34"/></name> <modifier pos:line="5" pos:column="35">*<pos:position pos:line="5" pos:column="36"/></modifier></type><name pos:line="5" pos:column="36">err<pos:position pos:line="5" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="40"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">re_bitset_ptr_t<pos:position pos:line="7" pos:column="18"/></name></type> <name pos:line="7" pos:column="19">sbcset<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="8" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">re_charset_t<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">mbcset<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">alloc<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><literal type="number" pos:line="10" pos:column="15">0<pos:position pos:line="10" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="11" pos:column="8">/* not RE_ENABLE_I18N */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">reg_errcode_t<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">ret<pos:position pos:line="12" pos:column="20"/></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">re_token_t<pos:position pos:line="13" pos:column="13"/></name></type> <name pos:line="13" pos:column="14">br_token<pos:position pos:line="13" pos:column="22"/></name></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">bin_tree_t<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">tree<pos:position pos:line="14" pos:column="19"/></name></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><name pos:line="16" pos:column="3">sbcset<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">re_bitset_ptr_t<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">)<pos:position pos:line="16" pos:column="29"/></operator> <call><name pos:line="16" pos:column="30">calloc<pos:position pos:line="16" pos:column="36"/></name> <argument_list pos:line="16" pos:column="37">(<argument><expr><sizeof pos:line="16" pos:column="38">sizeof <argument_list pos:line="16" pos:column="45">(<argument><expr><name pos:line="16" pos:column="46">bitset_t<pos:position pos:line="16" pos:column="54"/></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="57">1<pos:position pos:line="16" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="60"/></expr_stmt>
<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="17" pos:column="22"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="18" pos:column="3">mbcset<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">re_charset_t<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">*<pos:position pos:line="18" pos:column="27"/></operator><operator pos:line="18" pos:column="27">)<pos:position pos:line="18" pos:column="28"/></operator> <call><name pos:line="18" pos:column="29">calloc<pos:position pos:line="18" pos:column="35"/></name> <argument_list pos:line="18" pos:column="36">(<argument><expr><sizeof pos:line="18" pos:column="37">sizeof <argument_list pos:line="18" pos:column="44">(<argument><expr><name pos:line="18" pos:column="45">re_charset_t<pos:position pos:line="18" pos:column="57"/></name></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="60">1<pos:position pos:line="18" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="19" pos:column="8">/* RE_ENABLE_I18N */</comment>

<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive> <name pos:line="21" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="21" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><call><name pos:line="22" pos:column="7">BE<pos:position pos:line="22" pos:column="9"/></name> <argument_list pos:line="22" pos:column="10">(<argument><expr><name pos:line="22" pos:column="11">sbcset<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">==<pos:position pos:line="22" pos:column="20"/></operator> <name pos:line="22" pos:column="21">NULL<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">||<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="29">mbcset<pos:position pos:line="22" pos:column="35"/></name> <operator pos:line="22" pos:column="36">==<pos:position pos:line="22" pos:column="38"/></operator> <name pos:line="22" pos:column="39">NULL<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="45">0<pos:position pos:line="22" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48">
<cpp:else pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">else<pos:position pos:line="23" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="23" pos:column="7">/* not RE_ENABLE_I18N */</comment>
  <block type="pseudo"><if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><call><name pos:line="24" pos:column="7">BE<pos:position pos:line="24" pos:column="9"/></name> <argument_list pos:line="24" pos:column="10">(<argument><expr><name pos:line="24" pos:column="11">sbcset<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">==<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">NULL<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="27">0<pos:position pos:line="24" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="30"/></condition><then pos:line="24" pos:column="30">
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="25" pos:column="8">/* not RE_ENABLE_I18N */</comment>
    <block pos:line="26" pos:column="5">{
      <expr_stmt><expr><operator pos:line="27" pos:column="7">*<pos:position pos:line="27" pos:column="8"/></operator><name pos:line="27" pos:column="8">err<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <name pos:line="27" pos:column="14">REG_ESPACE<pos:position pos:line="27" pos:column="24"/></name></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
      <return pos:line="28" pos:column="7">return <expr><name pos:line="28" pos:column="14">NULL<pos:position pos:line="28" pos:column="18"/></name></expr>;<pos:position pos:line="28" pos:column="19"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if></block></then></if>

  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">non_match<pos:position pos:line="31" pos:column="16"/></name></expr>)<pos:position pos:line="31" pos:column="17"/></condition><then pos:line="31" pos:column="17">
    <block pos:line="32" pos:column="5">{
<cpp:ifdef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifdef<pos:position pos:line="33" pos:column="7"/></cpp:directive> <name pos:line="33" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="33" pos:column="22"/></name></cpp:ifdef>
      <expr_stmt><expr><name><name pos:line="34" pos:column="7">mbcset<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">-&gt;<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="15">non_match<pos:position pos:line="34" pos:column="24"/></name></name> <operator pos:line="34" pos:column="25">=<pos:position pos:line="34" pos:column="26"/></operator> <literal type="number" pos:line="34" pos:column="27">1<pos:position pos:line="34" pos:column="28"/></literal></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="35" pos:column="8">/* not RE_ENABLE_I18N */</comment>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="38" pos:column="3">/* We don't care the syntax in this case.  */</comment>
  <expr_stmt><expr><name pos:line="39" pos:column="3">ret<pos:position pos:line="39" pos:column="6"/></name> <operator pos:line="39" pos:column="7">=<pos:position pos:line="39" pos:column="8"/></operator> <call><name pos:line="39" pos:column="9">build_charclass<pos:position pos:line="39" pos:column="24"/></name> <argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">trans<pos:position pos:line="39" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="33">sbcset<pos:position pos:line="39" pos:column="39"/></name></expr></argument>,
<cpp:ifdef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifdef<pos:position pos:line="40" pos:column="7"/></cpp:directive> <name pos:line="40" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="40" pos:column="22"/></name></cpp:ifdef>
			 <argument><expr><name pos:line="41" pos:column="26">mbcset<pos:position pos:line="41" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="34">&amp;<pos:position pos:line="41" pos:column="39"/></operator><name pos:line="41" pos:column="35">alloc<pos:position pos:line="41" pos:column="40"/></name></expr></argument>,
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="42" pos:column="8">/* RE_ENABLE_I18N */</comment>
			 <argument><expr><name pos:line="43" pos:column="26">class_name<pos:position pos:line="43" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="38">0<pos:position pos:line="43" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt>

  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><call><name pos:line="45" pos:column="7">BE<pos:position pos:line="45" pos:column="9"/></name> <argument_list pos:line="45" pos:column="10">(<argument><expr><name pos:line="45" pos:column="11">ret<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">!=<pos:position pos:line="45" pos:column="17"/></operator> <name pos:line="45" pos:column="18">REG_NOERROR<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="31">0<pos:position pos:line="45" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="34"/></condition><then pos:line="45" pos:column="34">
    <block pos:line="46" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">re_free<pos:position pos:line="47" pos:column="14"/></name> <argument_list pos:line="47" pos:column="15">(<argument><expr><name pos:line="47" pos:column="16">sbcset<pos:position pos:line="47" pos:column="22"/></name></expr></argument>)<pos:position pos:line="47" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>
<cpp:ifdef pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">ifdef<pos:position pos:line="48" pos:column="7"/></cpp:directive> <name pos:line="48" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="48" pos:column="22"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">free_charset<pos:position pos:line="49" pos:column="19"/></name> <argument_list pos:line="49" pos:column="20">(<argument><expr><name pos:line="49" pos:column="21">mbcset<pos:position pos:line="49" pos:column="27"/></name></expr></argument>)<pos:position pos:line="49" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="50" pos:column="8">/* RE_ENABLE_I18N */</comment>
      <expr_stmt><expr><operator pos:line="51" pos:column="7">*<pos:position pos:line="51" pos:column="8"/></operator><name pos:line="51" pos:column="8">err<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">=<pos:position pos:line="51" pos:column="13"/></operator> <name pos:line="51" pos:column="14">ret<pos:position pos:line="51" pos:column="17"/></name></expr>;<pos:position pos:line="51" pos:column="18"/></expr_stmt>
      <return pos:line="52" pos:column="7">return <expr><name pos:line="52" pos:column="14">NULL<pos:position pos:line="52" pos:column="18"/></name></expr>;<pos:position pos:line="52" pos:column="19"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>
  <comment type="block" pos:line="54" pos:column="3">/* \w match '_' also.  */</comment>
  <for pos:line="55" pos:column="3">for <control pos:line="55" pos:column="7">(<init pos:line="55" pos:column="8">;<pos:position pos:line="55" pos:column="9"/></init> <condition><expr><operator pos:line="55" pos:column="10">*<pos:position pos:line="55" pos:column="11"/></operator><name pos:line="55" pos:column="11">extra<pos:position pos:line="55" pos:column="16"/></name></expr>;<pos:position pos:line="55" pos:column="17"/></condition> <incr><expr><name pos:line="55" pos:column="18">extra<pos:position pos:line="55" pos:column="23"/></name><operator pos:line="55" pos:column="23">++<pos:position pos:line="55" pos:column="25"/></operator></expr></incr>)<pos:position pos:line="55" pos:column="26"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="5">bitset_set<pos:position pos:line="56" pos:column="15"/></name> <argument_list pos:line="56" pos:column="16">(<argument><expr><name pos:line="56" pos:column="17">sbcset<pos:position pos:line="56" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="25">*<pos:position pos:line="56" pos:column="26"/></operator><name pos:line="56" pos:column="26">extra<pos:position pos:line="56" pos:column="31"/></name></expr></argument>)<pos:position pos:line="56" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="33"/></expr_stmt></block></for>

  <comment type="block" pos:line="58" pos:column="3">/* If it is non-matching list.  */</comment>
  <if pos:line="59" pos:column="3">if <condition pos:line="59" pos:column="6">(<expr><name pos:line="59" pos:column="7">non_match<pos:position pos:line="59" pos:column="16"/></name></expr>)<pos:position pos:line="59" pos:column="17"/></condition><then pos:line="59" pos:column="17">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="5">bitset_not<pos:position pos:line="60" pos:column="15"/></name> <argument_list pos:line="60" pos:column="16">(<argument><expr><name pos:line="60" pos:column="17">sbcset<pos:position pos:line="60" pos:column="23"/></name></expr></argument>)<pos:position pos:line="60" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="25"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifdef<pos:position pos:line="62" pos:column="7"/></cpp:directive> <name pos:line="62" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="62" pos:column="22"/></name></cpp:ifdef>
  <comment type="block" pos:line="63" pos:column="3">/* Ensure only single byte characters are set.  */</comment>
  <if pos:line="64" pos:column="3">if <condition pos:line="64" pos:column="6">(<expr><name><name pos:line="64" pos:column="7">dfa<pos:position pos:line="64" pos:column="10"/></name><operator pos:line="64" pos:column="10">-&gt;<pos:position pos:line="64" pos:column="15"/></operator><name pos:line="64" pos:column="12">mb_cur_max<pos:position pos:line="64" pos:column="22"/></name></name> <operator pos:line="64" pos:column="23">&gt;<pos:position pos:line="64" pos:column="27"/></operator> <literal type="number" pos:line="64" pos:column="25">1<pos:position pos:line="64" pos:column="26"/></literal></expr>)<pos:position pos:line="64" pos:column="27"/></condition><then pos:line="64" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="5">bitset_mask<pos:position pos:line="65" pos:column="16"/></name> <argument_list pos:line="65" pos:column="17">(<argument><expr><name pos:line="65" pos:column="18">sbcset<pos:position pos:line="65" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="26">dfa<pos:position pos:line="65" pos:column="29"/></name><operator pos:line="65" pos:column="29">-&gt;<pos:position pos:line="65" pos:column="34"/></operator><name pos:line="65" pos:column="31">sb_char<pos:position pos:line="65" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="40"/></expr_stmt></block></then></if>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="68" pos:column="3">/* Build a tree for simple bracket.  */</comment>
  <expr_stmt><expr><name><name pos:line="69" pos:column="3">br_token<pos:position pos:line="69" pos:column="11"/></name><operator pos:line="69" pos:column="11">.<pos:position pos:line="69" pos:column="12"/></operator><name pos:line="69" pos:column="12">type<pos:position pos:line="69" pos:column="16"/></name></name> <operator pos:line="69" pos:column="17">=<pos:position pos:line="69" pos:column="18"/></operator> <name pos:line="69" pos:column="19">SIMPLE_BRACKET<pos:position pos:line="69" pos:column="33"/></name></expr>;<pos:position pos:line="69" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="70" pos:column="3">br_token<pos:position pos:line="70" pos:column="11"/></name><operator pos:line="70" pos:column="11">.<pos:position pos:line="70" pos:column="12"/></operator><name pos:line="70" pos:column="12">opr<pos:position pos:line="70" pos:column="15"/></name><operator pos:line="70" pos:column="15">.<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="16">sbcset<pos:position pos:line="70" pos:column="22"/></name></name> <operator pos:line="70" pos:column="23">=<pos:position pos:line="70" pos:column="24"/></operator> <name pos:line="70" pos:column="25">sbcset<pos:position pos:line="70" pos:column="31"/></name></expr>;<pos:position pos:line="70" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name pos:line="71" pos:column="3">tree<pos:position pos:line="71" pos:column="7"/></name> <operator pos:line="71" pos:column="8">=<pos:position pos:line="71" pos:column="9"/></operator> <call><name pos:line="71" pos:column="10">create_token_tree<pos:position pos:line="71" pos:column="27"/></name> <argument_list pos:line="71" pos:column="28">(<argument><expr><name pos:line="71" pos:column="29">dfa<pos:position pos:line="71" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="34">NULL<pos:position pos:line="71" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="40">NULL<pos:position pos:line="71" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="46">&amp;<pos:position pos:line="71" pos:column="51"/></operator><name pos:line="71" pos:column="47">br_token<pos:position pos:line="71" pos:column="55"/></name></expr></argument>)<pos:position pos:line="71" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="57"/></expr_stmt>
  <if pos:line="72" pos:column="3">if <condition pos:line="72" pos:column="6">(<expr><call><name pos:line="72" pos:column="7">BE<pos:position pos:line="72" pos:column="9"/></name> <argument_list pos:line="72" pos:column="10">(<argument><expr><name pos:line="72" pos:column="11">tree<pos:position pos:line="72" pos:column="15"/></name> <operator pos:line="72" pos:column="16">==<pos:position pos:line="72" pos:column="18"/></operator> <name pos:line="72" pos:column="19">NULL<pos:position pos:line="72" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="25">0<pos:position pos:line="72" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="28"/></condition><then pos:line="72" pos:column="28">
    <block type="pseudo"><goto pos:line="73" pos:column="5">goto <name pos:line="73" pos:column="10">build_word_op_espace<pos:position pos:line="73" pos:column="30"/></name>;<pos:position pos:line="73" pos:column="31"/></goto></block></then></if>

<cpp:ifdef pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">ifdef<pos:position pos:line="75" pos:column="7"/></cpp:directive> <name pos:line="75" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="75" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="76" pos:column="3">if <condition pos:line="76" pos:column="6">(<expr><name><name pos:line="76" pos:column="7">dfa<pos:position pos:line="76" pos:column="10"/></name><operator pos:line="76" pos:column="10">-&gt;<pos:position pos:line="76" pos:column="15"/></operator><name pos:line="76" pos:column="12">mb_cur_max<pos:position pos:line="76" pos:column="22"/></name></name> <operator pos:line="76" pos:column="23">&gt;<pos:position pos:line="76" pos:column="27"/></operator> <literal type="number" pos:line="76" pos:column="25">1<pos:position pos:line="76" pos:column="26"/></literal></expr>)<pos:position pos:line="76" pos:column="27"/></condition><then pos:line="76" pos:column="27">
    <block pos:line="77" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="78" pos:column="7">bin_tree_t<pos:position pos:line="78" pos:column="17"/></name> <modifier pos:line="78" pos:column="18">*<pos:position pos:line="78" pos:column="19"/></modifier></type><name pos:line="78" pos:column="19">mbc_tree<pos:position pos:line="78" pos:column="27"/></name></decl>;<pos:position pos:line="78" pos:column="28"/></decl_stmt>
      <comment type="block" pos:line="79" pos:column="7">/* Build a tree for complex bracket.  */</comment>
      <expr_stmt><expr><name><name pos:line="80" pos:column="7">br_token<pos:position pos:line="80" pos:column="15"/></name><operator pos:line="80" pos:column="15">.<pos:position pos:line="80" pos:column="16"/></operator><name pos:line="80" pos:column="16">type<pos:position pos:line="80" pos:column="20"/></name></name> <operator pos:line="80" pos:column="21">=<pos:position pos:line="80" pos:column="22"/></operator> <name pos:line="80" pos:column="23">COMPLEX_BRACKET<pos:position pos:line="80" pos:column="38"/></name></expr>;<pos:position pos:line="80" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="81" pos:column="7">br_token<pos:position pos:line="81" pos:column="15"/></name><operator pos:line="81" pos:column="15">.<pos:position pos:line="81" pos:column="16"/></operator><name pos:line="81" pos:column="16">opr<pos:position pos:line="81" pos:column="19"/></name><operator pos:line="81" pos:column="19">.<pos:position pos:line="81" pos:column="20"/></operator><name pos:line="81" pos:column="20">mbcset<pos:position pos:line="81" pos:column="26"/></name></name> <operator pos:line="81" pos:column="27">=<pos:position pos:line="81" pos:column="28"/></operator> <name pos:line="81" pos:column="29">mbcset<pos:position pos:line="81" pos:column="35"/></name></expr>;<pos:position pos:line="81" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="82" pos:column="7">dfa<pos:position pos:line="82" pos:column="10"/></name><operator pos:line="82" pos:column="10">-&gt;<pos:position pos:line="82" pos:column="15"/></operator><name pos:line="82" pos:column="12">has_mb_node<pos:position pos:line="82" pos:column="23"/></name></name> <operator pos:line="82" pos:column="24">=<pos:position pos:line="82" pos:column="25"/></operator> <literal type="number" pos:line="82" pos:column="26">1<pos:position pos:line="82" pos:column="27"/></literal></expr>;<pos:position pos:line="82" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="83" pos:column="7">mbc_tree<pos:position pos:line="83" pos:column="15"/></name> <operator pos:line="83" pos:column="16">=<pos:position pos:line="83" pos:column="17"/></operator> <call><name pos:line="83" pos:column="18">create_token_tree<pos:position pos:line="83" pos:column="35"/></name> <argument_list pos:line="83" pos:column="36">(<argument><expr><name pos:line="83" pos:column="37">dfa<pos:position pos:line="83" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="42">NULL<pos:position pos:line="83" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="48">NULL<pos:position pos:line="83" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="54">&amp;<pos:position pos:line="83" pos:column="59"/></operator><name pos:line="83" pos:column="55">br_token<pos:position pos:line="83" pos:column="63"/></name></expr></argument>)<pos:position pos:line="83" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="65"/></expr_stmt>
      <if pos:line="84" pos:column="7">if <condition pos:line="84" pos:column="10">(<expr><call><name pos:line="84" pos:column="11">BE<pos:position pos:line="84" pos:column="13"/></name> <argument_list pos:line="84" pos:column="14">(<argument><expr><name pos:line="84" pos:column="15">mbc_tree<pos:position pos:line="84" pos:column="23"/></name> <operator pos:line="84" pos:column="24">==<pos:position pos:line="84" pos:column="26"/></operator> <name pos:line="84" pos:column="27">NULL<pos:position pos:line="84" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="33">0<pos:position pos:line="84" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="36"/></condition><then pos:line="84" pos:column="36">
	<block type="pseudo"><goto pos:line="85" pos:column="9">goto <name pos:line="85" pos:column="14">build_word_op_espace<pos:position pos:line="85" pos:column="34"/></name>;<pos:position pos:line="85" pos:column="35"/></goto></block></then></if>
      <comment type="block" pos:line="86" pos:column="7">/* Then join them by ALT node.  */</comment>
      <expr_stmt><expr><name pos:line="87" pos:column="7">tree<pos:position pos:line="87" pos:column="11"/></name> <operator pos:line="87" pos:column="12">=<pos:position pos:line="87" pos:column="13"/></operator> <call><name pos:line="87" pos:column="14">create_tree<pos:position pos:line="87" pos:column="25"/></name> <argument_list pos:line="87" pos:column="26">(<argument><expr><name pos:line="87" pos:column="27">dfa<pos:position pos:line="87" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="32">tree<pos:position pos:line="87" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="38">mbc_tree<pos:position pos:line="87" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="48">OP_ALT<pos:position pos:line="87" pos:column="54"/></name></expr></argument>)<pos:position pos:line="87" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="56"/></expr_stmt>
      <if pos:line="88" pos:column="7">if <condition pos:line="88" pos:column="10">(<expr><call><name pos:line="88" pos:column="11">BE<pos:position pos:line="88" pos:column="13"/></name> <argument_list pos:line="88" pos:column="14">(<argument><expr><name pos:line="88" pos:column="15">mbc_tree<pos:position pos:line="88" pos:column="23"/></name> <operator pos:line="88" pos:column="24">!=<pos:position pos:line="88" pos:column="26"/></operator> <name pos:line="88" pos:column="27">NULL<pos:position pos:line="88" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="33">1<pos:position pos:line="88" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="36"/></condition><then pos:line="88" pos:column="36">
	<block type="pseudo"><return pos:line="89" pos:column="9">return <expr><name pos:line="89" pos:column="16">tree<pos:position pos:line="89" pos:column="20"/></name></expr>;<pos:position pos:line="89" pos:column="21"/></return></block></then></if>
    }<pos:position pos:line="90" pos:column="6"/></block></then>
  <else pos:line="91" pos:column="3">else
    <block pos:line="92" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="93" pos:column="7">free_charset<pos:position pos:line="93" pos:column="19"/></name> <argument_list pos:line="93" pos:column="20">(<argument><expr><name pos:line="93" pos:column="21">mbcset<pos:position pos:line="93" pos:column="27"/></name></expr></argument>)<pos:position pos:line="93" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="29"/></expr_stmt>
      <return pos:line="94" pos:column="7">return <expr><name pos:line="94" pos:column="14">tree<pos:position pos:line="94" pos:column="18"/></name></expr>;<pos:position pos:line="94" pos:column="19"/></return>
    }<pos:position pos:line="95" pos:column="6"/></block></else></if>
<cpp:else pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">else<pos:position pos:line="96" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="96" pos:column="7">/* not RE_ENABLE_I18N */</comment>
  <return pos:line="97" pos:column="3">return <expr><name pos:line="97" pos:column="10">tree<pos:position pos:line="97" pos:column="14"/></name></expr>;<pos:position pos:line="97" pos:column="15"/></return>
<cpp:endif pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">endif<pos:position pos:line="98" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="98" pos:column="8">/* not RE_ENABLE_I18N */</comment>

 <label><name pos:line="100" pos:column="2">build_word_op_espace<pos:position pos:line="100" pos:column="22"/></name>:<pos:position pos:line="100" pos:column="23"/></label>
  <expr_stmt><expr><call><name pos:line="101" pos:column="3">re_free<pos:position pos:line="101" pos:column="10"/></name> <argument_list pos:line="101" pos:column="11">(<argument><expr><name pos:line="101" pos:column="12">sbcset<pos:position pos:line="101" pos:column="18"/></name></expr></argument>)<pos:position pos:line="101" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="20"/></expr_stmt>
<cpp:ifdef pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">ifdef<pos:position pos:line="102" pos:column="7"/></cpp:directive> <name pos:line="102" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="102" pos:column="22"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="103" pos:column="3">free_charset<pos:position pos:line="103" pos:column="15"/></name> <argument_list pos:line="103" pos:column="16">(<argument><expr><name pos:line="103" pos:column="17">mbcset<pos:position pos:line="103" pos:column="23"/></name></expr></argument>)<pos:position pos:line="103" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">endif<pos:position pos:line="104" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="104" pos:column="8">/* RE_ENABLE_I18N */</comment>
  <expr_stmt><expr><operator pos:line="105" pos:column="3">*<pos:position pos:line="105" pos:column="4"/></operator><name pos:line="105" pos:column="4">err<pos:position pos:line="105" pos:column="7"/></name> <operator pos:line="105" pos:column="8">=<pos:position pos:line="105" pos:column="9"/></operator> <name pos:line="105" pos:column="10">REG_ESPACE<pos:position pos:line="105" pos:column="20"/></name></expr>;<pos:position pos:line="105" pos:column="21"/></expr_stmt>
  <return pos:line="106" pos:column="3">return <expr><name pos:line="106" pos:column="10">NULL<pos:position pos:line="106" pos:column="14"/></name></expr>;<pos:position pos:line="106" pos:column="15"/></return>
}<pos:position pos:line="107" pos:column="2"/></block></function></unit>
