<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2459_git-2.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">repack_without_refs<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">refnames<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">n<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ref_dir<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">packed<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">string_list<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">refs_to_delete<pos:position pos:line="4" pos:column="42"/></name> <init pos:line="4" pos:column="43">= <expr><name pos:line="4" pos:column="45">STRING_LIST_INIT_DUP<pos:position pos:line="4" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="66"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">string_list_item<pos:position pos:line="5" pos:column="32"/></name></name> <modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></type><name pos:line="5" pos:column="34">ref_to_delete<pos:position pos:line="5" pos:column="47"/></name></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="16">removed<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><literal type="number" pos:line="6" pos:column="26">0<pos:position pos:line="6" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/* Look for a packed ref */</comment>
	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init><expr><name pos:line="9" pos:column="14">i<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr>;<pos:position pos:line="9" pos:column="20"/></init> <condition><expr><name pos:line="9" pos:column="21">i<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&lt;<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="25">n<pos:position pos:line="9" pos:column="26"/></name></expr>;<pos:position pos:line="9" pos:column="27"/></condition> <incr><expr><name pos:line="9" pos:column="28">i<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">++<pos:position pos:line="9" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="32"/></control>
		<block type="pseudo"><if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">get_packed_ref<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><name><name pos:line="10" pos:column="36">refnames<pos:position pos:line="10" pos:column="44"/></name><index pos:line="10" pos:column="44">[<expr><name pos:line="10" pos:column="45">i<pos:position pos:line="10" pos:column="46"/></name></expr>]<pos:position pos:line="10" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="49"/></condition><then pos:line="10" pos:column="49">
			<block type="pseudo"><break pos:line="11" pos:column="25">break;<pos:position pos:line="11" pos:column="31"/></break></block></then></if></block></for>

	<comment type="block" pos:line="13" pos:column="9">/* Avoid locking if we have nothing to do */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">i<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">==<pos:position pos:line="14" pos:column="17"/></operator> <name pos:line="14" pos:column="18">n<pos:position pos:line="14" pos:column="19"/></name></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></return></block></then></if> <comment type="block" pos:line="15" pos:column="27">/* no refname exists in packed refs */</comment>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">lock_packed_refs<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><literal type="number" pos:line="17" pos:column="30">0<pos:position pos:line="17" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33"> <block pos:line="17" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">unable_to_lock_error<pos:position pos:line="18" pos:column="37"/></name><argument_list pos:line="18" pos:column="37">(<argument><expr><call><name pos:line="18" pos:column="38">git_path<pos:position pos:line="18" pos:column="46"/></name><argument_list pos:line="18" pos:column="46">(<argument><expr><literal type="string" pos:line="18" pos:column="47">"packed-refs"<pos:position pos:line="18" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="18" pos:column="63">errno<pos:position pos:line="18" pos:column="68"/></name></expr></argument>)<pos:position pos:line="18" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="70"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><call><name pos:line="19" pos:column="24">error<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><literal type="string" pos:line="19" pos:column="30">"cannot delete '%s' from packed refs"<pos:position pos:line="19" pos:column="67"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="69">refnames<pos:position pos:line="19" pos:column="77"/></name><index pos:line="19" pos:column="77">[<expr><name pos:line="19" pos:column="78">i<pos:position pos:line="19" pos:column="79"/></name></expr>]<pos:position pos:line="19" pos:column="80"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="82"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="21" pos:column="9">packed<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <call><name pos:line="21" pos:column="18">get_packed_refs<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><operator pos:line="21" pos:column="34">&amp;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="35">ref_cache<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>

	<comment type="block" pos:line="23" pos:column="9">/* Remove refnames from the cache */</comment>
	<for pos:line="24" pos:column="9">for <control pos:line="24" pos:column="13">(<init><expr><name pos:line="24" pos:column="14">i<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <literal type="number" pos:line="24" pos:column="18">0<pos:position pos:line="24" pos:column="19"/></literal></expr>;<pos:position pos:line="24" pos:column="20"/></init> <condition><expr><name pos:line="24" pos:column="21">i<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">&lt;<pos:position pos:line="24" pos:column="27"/></operator> <name pos:line="24" pos:column="25">n<pos:position pos:line="24" pos:column="26"/></name></expr>;<pos:position pos:line="24" pos:column="27"/></condition> <incr><expr><name pos:line="24" pos:column="28">i<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">++<pos:position pos:line="24" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="24" pos:column="32"/></control>
		<block type="pseudo"><if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">remove_entry<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">packed<pos:position pos:line="25" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="42">refnames<pos:position pos:line="25" pos:column="50"/></name><index pos:line="25" pos:column="50">[<expr><name pos:line="25" pos:column="51">i<pos:position pos:line="25" pos:column="52"/></name></expr>]<pos:position pos:line="25" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call> <operator pos:line="25" pos:column="55">!=<pos:position pos:line="25" pos:column="57"/></operator> <operator pos:line="25" pos:column="58">-<pos:position pos:line="25" pos:column="59"/></operator><literal type="number" pos:line="25" pos:column="59">1<pos:position pos:line="25" pos:column="60"/></literal></expr>)<pos:position pos:line="25" pos:column="61"/></condition><then pos:line="25" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="25">removed<pos:position pos:line="26" pos:column="32"/></name> <operator pos:line="26" pos:column="33">=<pos:position pos:line="26" pos:column="34"/></operator> <literal type="number" pos:line="26" pos:column="35">1<pos:position pos:line="26" pos:column="36"/></literal></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt></block></then></if></block></for>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">removed<pos:position pos:line="27" pos:column="21"/></name></expr>)<pos:position pos:line="27" pos:column="22"/></condition><then pos:line="27" pos:column="22"> <block pos:line="27" pos:column="23">{
		<comment type="block" pos:line="28" pos:column="17">/*
		 * All packed entries disappeared while we were
		 * acquiring the lock.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">rollback_packed_refs<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">()<pos:position pos:line="32" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>
		<return pos:line="33" pos:column="17">return <expr><literal type="number" pos:line="33" pos:column="24">0<pos:position pos:line="33" pos:column="25"/></literal></expr>;<pos:position pos:line="33" pos:column="26"/></return>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="36" pos:column="9">/* Remove any other accumulated cruft */</comment>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">do_for_each_entry_in_dir<pos:position pos:line="37" pos:column="33"/></name><argument_list pos:line="37" pos:column="33">(<argument><expr><name pos:line="37" pos:column="34">packed<pos:position pos:line="37" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="42">0<pos:position pos:line="37" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="45">curate_packed_ref_fn<pos:position pos:line="37" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="67">&amp;<pos:position pos:line="37" pos:column="72"/></operator><name pos:line="37" pos:column="68">refs_to_delete<pos:position pos:line="37" pos:column="82"/></name></expr></argument>)<pos:position pos:line="37" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="84"/></expr_stmt>
	<macro><name pos:line="38" pos:column="9">for_each_string_list_item<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument pos:line="38" pos:column="35">ref_to_delete<pos:position pos:line="38" pos:column="48"/></argument>, <argument pos:line="38" pos:column="50">&amp;refs_to_delete<pos:position pos:line="38" pos:column="65"/></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></macro> <block pos:line="38" pos:column="67">{
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><call><name pos:line="39" pos:column="21">remove_entry<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">packed<pos:position pos:line="39" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="42">ref_to_delete<pos:position pos:line="39" pos:column="55"/></name><operator pos:line="39" pos:column="55">-&gt;<pos:position pos:line="39" pos:column="60"/></operator><name pos:line="39" pos:column="57">string<pos:position pos:line="39" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call> <operator pos:line="39" pos:column="65">==<pos:position pos:line="39" pos:column="67"/></operator> <operator pos:line="39" pos:column="68">-<pos:position pos:line="39" pos:column="69"/></operator><literal type="number" pos:line="39" pos:column="69">1<pos:position pos:line="39" pos:column="70"/></literal></expr>)<pos:position pos:line="39" pos:column="71"/></condition><then pos:line="39" pos:column="71">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="25">die<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><literal type="string" pos:line="40" pos:column="29">"internal error"<pos:position pos:line="40" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="47"/></expr_stmt></block></then></if>
	}<pos:position pos:line="41" pos:column="10"/></block>

	<comment type="block" pos:line="43" pos:column="9">/* Write what remains */</comment>
	<return pos:line="44" pos:column="9">return <expr><call><name pos:line="44" pos:column="16">commit_packed_refs<pos:position pos:line="44" pos:column="34"/></name><argument_list pos:line="44" pos:column="34">()<pos:position pos:line="44" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="37"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
