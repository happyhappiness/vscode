<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1226_git-2.13.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">find_name_common<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">apply_state<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">state<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">line<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="3" pos:column="31">const<pos:position pos:line="3" pos:column="36"/></specifier> <name pos:line="3" pos:column="37">char<pos:position pos:line="3" pos:column="41"/></name> <modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">def<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="4" pos:column="31">int<pos:position pos:line="4" pos:column="34"/></name></type> <name pos:line="4" pos:column="35">p_value<pos:position pos:line="4" pos:column="42"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="5" pos:column="31">const<pos:position pos:line="5" pos:column="36"/></specifier> <name pos:line="5" pos:column="37">char<pos:position pos:line="5" pos:column="41"/></name> <modifier pos:line="5" pos:column="42">*<pos:position pos:line="5" pos:column="43"/></modifier></type><name pos:line="5" pos:column="43">end<pos:position pos:line="5" pos:column="46"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="6" pos:column="31">int<pos:position pos:line="6" pos:column="34"/></name></type> <name pos:line="6" pos:column="35">terminate<pos:position pos:line="6" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="45"/></parameter_list>
<block pos:line="7" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">len<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">start<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><name pos:line="9" pos:column="29">NULL<pos:position pos:line="9" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">p_value<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">==<pos:position pos:line="11" pos:column="23"/></operator> <literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>)<pos:position pos:line="11" pos:column="26"/></condition><then pos:line="11" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">start<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">=<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">line<pos:position pos:line="12" pos:column="29"/></name></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt></block></then></if>
	<while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><name pos:line="13" pos:column="16">line<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">!=<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="24">end<pos:position pos:line="13" pos:column="27"/></name></expr>)<pos:position pos:line="13" pos:column="28"/></condition> <block pos:line="13" pos:column="29">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">char<pos:position pos:line="14" pos:column="21"/></name></type> <name pos:line="14" pos:column="22">c<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><operator pos:line="14" pos:column="26">*<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">line<pos:position pos:line="14" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="32"/></decl_stmt>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">end<pos:position pos:line="16" pos:column="25"/></name> <operator pos:line="16" pos:column="26">&amp;&amp;<pos:position pos:line="16" pos:column="36"/></operator> <call><name pos:line="16" pos:column="29">isspace<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><name pos:line="16" pos:column="37">c<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="40"/></condition><then pos:line="16" pos:column="40"> <block pos:line="16" pos:column="41">{
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><name pos:line="17" pos:column="29">c<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">==<pos:position pos:line="17" pos:column="33"/></operator> <literal type="char" pos:line="17" pos:column="34">'\n'<pos:position pos:line="17" pos:column="38"/></literal></expr>)<pos:position pos:line="17" pos:column="39"/></condition><then pos:line="17" pos:column="39">
				<block type="pseudo"><break pos:line="18" pos:column="33">break;<pos:position pos:line="18" pos:column="39"/></break></block></then></if>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><call><name pos:line="19" pos:column="29">name_terminate<pos:position pos:line="19" pos:column="43"/></name><argument_list pos:line="19" pos:column="43">(<argument><expr><name pos:line="19" pos:column="44">c<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="47">terminate<pos:position pos:line="19" pos:column="56"/></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="58"/></condition><then pos:line="19" pos:column="58">
				<block type="pseudo"><break pos:line="20" pos:column="33">break;<pos:position pos:line="20" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="22" pos:column="17">line<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">++<pos:position pos:line="22" pos:column="23"/></operator></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">c<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">==<pos:position pos:line="23" pos:column="25"/></operator> <literal type="char" pos:line="23" pos:column="26">'/'<pos:position pos:line="23" pos:column="29"/></literal> <operator pos:line="23" pos:column="30">&amp;&amp;<pos:position pos:line="23" pos:column="40"/></operator> <operator pos:line="23" pos:column="33">!<pos:position pos:line="23" pos:column="34"/></operator><operator pos:line="23" pos:column="34">--<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="36">p_value<pos:position pos:line="23" pos:column="43"/></name></expr>)<pos:position pos:line="23" pos:column="44"/></condition><then pos:line="23" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="25">start<pos:position pos:line="24" pos:column="30"/></name> <operator pos:line="24" pos:column="31">=<pos:position pos:line="24" pos:column="32"/></operator> <name pos:line="24" pos:column="33">line<pos:position pos:line="24" pos:column="37"/></name></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></while>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">start<pos:position pos:line="26" pos:column="19"/></name></expr>)<pos:position pos:line="26" pos:column="20"/></condition><then pos:line="26" pos:column="20">
		<block type="pseudo"><return pos:line="27" pos:column="17">return <expr><call><name pos:line="27" pos:column="24">squash_slash<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><call><name pos:line="27" pos:column="37">xstrdup_or_null<pos:position pos:line="27" pos:column="52"/></name><argument_list pos:line="27" pos:column="52">(<argument><expr><name pos:line="27" pos:column="53">def<pos:position pos:line="27" pos:column="56"/></name></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="59"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="28" pos:column="9">len<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <name pos:line="28" pos:column="15">line<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">-<pos:position pos:line="28" pos:column="21"/></operator> <name pos:line="28" pos:column="22">start<pos:position pos:line="28" pos:column="27"/></name></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">len<pos:position pos:line="29" pos:column="17"/></name></expr>)<pos:position pos:line="29" pos:column="18"/></condition><then pos:line="29" pos:column="18">
		<block type="pseudo"><return pos:line="30" pos:column="17">return <expr><call><name pos:line="30" pos:column="24">squash_slash<pos:position pos:line="30" pos:column="36"/></name><argument_list pos:line="30" pos:column="36">(<argument><expr><call><name pos:line="30" pos:column="37">xstrdup_or_null<pos:position pos:line="30" pos:column="52"/></name><argument_list pos:line="30" pos:column="52">(<argument><expr><name pos:line="30" pos:column="53">def<pos:position pos:line="30" pos:column="56"/></name></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></return></block></then></if>

	<comment type="block" pos:line="32" pos:column="9">/*
	 * Generally we prefer the shorter name, especially
	 * if the other one is just a variation of that with
	 * something else tacked on to the end (ie "file.orig"
	 * or "file~").
	 */</comment>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">def<pos:position pos:line="38" pos:column="16"/></name></expr>)<pos:position pos:line="38" pos:column="17"/></condition><then pos:line="38" pos:column="17"> <block pos:line="38" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">int<pos:position pos:line="39" pos:column="20"/></name></type> <name pos:line="39" pos:column="21">deflen<pos:position pos:line="39" pos:column="27"/></name> <init pos:line="39" pos:column="28">= <expr><call><name pos:line="39" pos:column="30">strlen<pos:position pos:line="39" pos:column="36"/></name><argument_list pos:line="39" pos:column="36">(<argument><expr><name pos:line="39" pos:column="37">def<pos:position pos:line="39" pos:column="40"/></name></expr></argument>)<pos:position pos:line="39" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="42"/></decl_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">deflen<pos:position pos:line="40" pos:column="27"/></name> <operator pos:line="40" pos:column="28">&lt;<pos:position pos:line="40" pos:column="32"/></operator> <name pos:line="40" pos:column="30">len<pos:position pos:line="40" pos:column="33"/></name> <operator pos:line="40" pos:column="34">&amp;&amp;<pos:position pos:line="40" pos:column="44"/></operator> <operator pos:line="40" pos:column="37">!<pos:position pos:line="40" pos:column="38"/></operator><call><name pos:line="40" pos:column="38">strncmp<pos:position pos:line="40" pos:column="45"/></name><argument_list pos:line="40" pos:column="45">(<argument><expr><name pos:line="40" pos:column="46">start<pos:position pos:line="40" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="53">def<pos:position pos:line="40" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="58">deflen<pos:position pos:line="40" pos:column="64"/></name></expr></argument>)<pos:position pos:line="40" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="66"/></condition><then pos:line="40" pos:column="66">
			<block type="pseudo"><return pos:line="41" pos:column="25">return <expr><call><name pos:line="41" pos:column="32">squash_slash<pos:position pos:line="41" pos:column="44"/></name><argument_list pos:line="41" pos:column="44">(<argument><expr><call><name pos:line="41" pos:column="45">xstrdup<pos:position pos:line="41" pos:column="52"/></name><argument_list pos:line="41" pos:column="52">(<argument><expr><name pos:line="41" pos:column="53">def<pos:position pos:line="41" pos:column="56"/></name></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="59"/></return></block></then></if>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name><name pos:line="44" pos:column="13">state<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">-&gt;<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="20">root<pos:position pos:line="44" pos:column="24"/></name><operator pos:line="44" pos:column="24">.<pos:position pos:line="44" pos:column="25"/></operator><name pos:line="44" pos:column="25">len<pos:position pos:line="44" pos:column="28"/></name></name></expr>)<pos:position pos:line="44" pos:column="29"/></condition><then pos:line="44" pos:column="29"> <block pos:line="44" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">char<pos:position pos:line="45" pos:column="21"/></name> <modifier pos:line="45" pos:column="22">*<pos:position pos:line="45" pos:column="23"/></modifier></type><name pos:line="45" pos:column="23">ret<pos:position pos:line="45" pos:column="26"/></name> <init pos:line="45" pos:column="27">= <expr><call><name pos:line="45" pos:column="29">xstrfmt<pos:position pos:line="45" pos:column="36"/></name><argument_list pos:line="45" pos:column="36">(<argument><expr><literal type="string" pos:line="45" pos:column="37">"%s%.*s"<pos:position pos:line="45" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="47">state<pos:position pos:line="45" pos:column="52"/></name><operator pos:line="45" pos:column="52">-&gt;<pos:position pos:line="45" pos:column="57"/></operator><name pos:line="45" pos:column="54">root<pos:position pos:line="45" pos:column="58"/></name><operator pos:line="45" pos:column="58">.<pos:position pos:line="45" pos:column="59"/></operator><name pos:line="45" pos:column="59">buf<pos:position pos:line="45" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="64">len<pos:position pos:line="45" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="69">start<pos:position pos:line="45" pos:column="74"/></name></expr></argument>)<pos:position pos:line="45" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="45" pos:column="76"/></decl_stmt>
		<return pos:line="46" pos:column="17">return <expr><call><name pos:line="46" pos:column="24">squash_slash<pos:position pos:line="46" pos:column="36"/></name><argument_list pos:line="46" pos:column="36">(<argument><expr><name pos:line="46" pos:column="37">ret<pos:position pos:line="46" pos:column="40"/></name></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="42"/></return>
	}<pos:position pos:line="47" pos:column="10"/></block></then></if>

	<return pos:line="49" pos:column="9">return <expr><call><name pos:line="49" pos:column="16">squash_slash<pos:position pos:line="49" pos:column="28"/></name><argument_list pos:line="49" pos:column="28">(<argument><expr><call><name pos:line="49" pos:column="29">xmemdupz<pos:position pos:line="49" pos:column="37"/></name><argument_list pos:line="49" pos:column="37">(<argument><expr><name pos:line="49" pos:column="38">start<pos:position pos:line="49" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="45">len<pos:position pos:line="49" pos:column="48"/></name></expr></argument>)<pos:position pos:line="49" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="51"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
