<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_156_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">send_unshallow<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">object_array<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">shallows<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>

	<for pos:line="5" pos:column="9">for <control pos:line="5" pos:column="13">(<init><expr><name pos:line="5" pos:column="14">i<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">=<pos:position pos:line="5" pos:column="17"/></operator> <literal type="number" pos:line="5" pos:column="18">0<pos:position pos:line="5" pos:column="19"/></literal></expr>;<pos:position pos:line="5" pos:column="20"/></init> <condition><expr><name pos:line="5" pos:column="21">i<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">&lt;<pos:position pos:line="5" pos:column="27"/></operator> <name><name pos:line="5" pos:column="25">shallows<pos:position pos:line="5" pos:column="33"/></name><operator pos:line="5" pos:column="33">-&gt;<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="35">nr<pos:position pos:line="5" pos:column="37"/></name></name></expr>;<pos:position pos:line="5" pos:column="38"/></condition> <incr><expr><name pos:line="5" pos:column="39">i<pos:position pos:line="5" pos:column="40"/></name><operator pos:line="5" pos:column="40">++<pos:position pos:line="5" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="5" pos:column="43"/></control> <block pos:line="5" pos:column="44">{
		<decl_stmt><decl><type><name><name pos:line="6" pos:column="17">struct<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">object<pos:position pos:line="6" pos:column="30"/></name></name> <modifier pos:line="6" pos:column="31">*<pos:position pos:line="6" pos:column="32"/></modifier></type><name pos:line="6" pos:column="32">object<pos:position pos:line="6" pos:column="38"/></name> <init pos:line="6" pos:column="39">= <expr><name><name pos:line="6" pos:column="41">shallows<pos:position pos:line="6" pos:column="49"/></name><operator pos:line="6" pos:column="49">-&gt;<pos:position pos:line="6" pos:column="54"/></operator><name pos:line="6" pos:column="51">objects<pos:position pos:line="6" pos:column="58"/></name><index pos:line="6" pos:column="58">[<expr><name pos:line="6" pos:column="59">i<pos:position pos:line="6" pos:column="60"/></name></expr>]<pos:position pos:line="6" pos:column="61"/></index></name><operator pos:line="6" pos:column="61">.<pos:position pos:line="6" pos:column="62"/></operator><name pos:line="6" pos:column="62">item<pos:position pos:line="6" pos:column="66"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="67"/></decl_stmt>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name><name pos:line="7" pos:column="21">object<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">-&gt;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="29">flags<pos:position pos:line="7" pos:column="34"/></name></name> <operator pos:line="7" pos:column="35">&amp;<pos:position pos:line="7" pos:column="40"/></operator> <name pos:line="7" pos:column="37">NOT_SHALLOW<pos:position pos:line="7" pos:column="48"/></name></expr>)<pos:position pos:line="7" pos:column="49"/></condition><then pos:line="7" pos:column="49"> <block pos:line="7" pos:column="50">{
			<decl_stmt><decl><type><name><name pos:line="8" pos:column="25">struct<pos:position pos:line="8" pos:column="31"/></name> <name pos:line="8" pos:column="32">commit_list<pos:position pos:line="8" pos:column="43"/></name></name> <modifier pos:line="8" pos:column="44">*<pos:position pos:line="8" pos:column="45"/></modifier></type><name pos:line="8" pos:column="45">parents<pos:position pos:line="8" pos:column="52"/></name></decl>;<pos:position pos:line="8" pos:column="53"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="9" pos:column="25">packet_write_fmt<pos:position pos:line="9" pos:column="41"/></name><argument_list pos:line="9" pos:column="41">(<argument><expr><literal type="number" pos:line="9" pos:column="42">1<pos:position pos:line="9" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="45">"unshallow %s"<pos:position pos:line="9" pos:column="59"/></literal></expr></argument>,
					 <argument><expr><call><name pos:line="10" pos:column="42">oid_to_hex<pos:position pos:line="10" pos:column="52"/></name><argument_list pos:line="10" pos:column="52">(<argument><expr><operator pos:line="10" pos:column="53">&amp;<pos:position pos:line="10" pos:column="58"/></operator><name><name pos:line="10" pos:column="54">object<pos:position pos:line="10" pos:column="60"/></name><operator pos:line="10" pos:column="60">-&gt;<pos:position pos:line="10" pos:column="65"/></operator><name pos:line="10" pos:column="62">oid<pos:position pos:line="10" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="11" pos:column="25">object<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">-&gt;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="33">flags<pos:position pos:line="11" pos:column="38"/></name></name> <operator pos:line="11" pos:column="39">&amp;=<pos:position pos:line="11" pos:column="45"/></operator> <operator pos:line="11" pos:column="42">~<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="43">CLIENT_SHALLOW<pos:position pos:line="11" pos:column="57"/></name></expr>;<pos:position pos:line="11" pos:column="58"/></expr_stmt>
			<comment type="block" pos:line="12" pos:column="25">/*
			 * We want to _register_ "object" as shallow, but we
			 * also need to traverse object's parents to deepen a
			 * shallow clone. Unregister it for now so we can
			 * parse and add the parents to the want list, then
			 * re-register it.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">unregister_shallow<pos:position pos:line="19" pos:column="43"/></name><argument_list pos:line="19" pos:column="43">(<argument><expr><operator pos:line="19" pos:column="44">&amp;<pos:position pos:line="19" pos:column="49"/></operator><name><name pos:line="19" pos:column="45">object<pos:position pos:line="19" pos:column="51"/></name><operator pos:line="19" pos:column="51">-&gt;<pos:position pos:line="19" pos:column="56"/></operator><name pos:line="19" pos:column="53">oid<pos:position pos:line="19" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="20" pos:column="25">object<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">-&gt;<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="33">parsed<pos:position pos:line="20" pos:column="39"/></name></name> <operator pos:line="20" pos:column="40">=<pos:position pos:line="20" pos:column="41"/></operator> <literal type="number" pos:line="20" pos:column="42">0<pos:position pos:line="20" pos:column="43"/></literal></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">parse_commit_or_die<pos:position pos:line="21" pos:column="44"/></name><argument_list pos:line="21" pos:column="44">(<argument><expr><operator pos:line="21" pos:column="45">(<pos:position pos:line="21" pos:column="46"/></operator>struct <name pos:line="21" pos:column="53">commit<pos:position pos:line="21" pos:column="59"/></name> <operator pos:line="21" pos:column="60">*<pos:position pos:line="21" pos:column="61"/></operator><operator pos:line="21" pos:column="61">)<pos:position pos:line="21" pos:column="62"/></operator><name pos:line="21" pos:column="62">object<pos:position pos:line="21" pos:column="68"/></name></expr></argument>)<pos:position pos:line="21" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="70"/></expr_stmt>
			<expr_stmt><expr><name pos:line="22" pos:column="25">parents<pos:position pos:line="22" pos:column="32"/></name> <operator pos:line="22" pos:column="33">=<pos:position pos:line="22" pos:column="34"/></operator> <operator pos:line="22" pos:column="35">(<pos:position pos:line="22" pos:column="36"/></operator><operator pos:line="22" pos:column="36">(<pos:position pos:line="22" pos:column="37"/></operator>struct <name pos:line="22" pos:column="44">commit<pos:position pos:line="22" pos:column="50"/></name> <operator pos:line="22" pos:column="51">*<pos:position pos:line="22" pos:column="52"/></operator><operator pos:line="22" pos:column="52">)<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="53">object<pos:position pos:line="22" pos:column="59"/></name><operator pos:line="22" pos:column="59">)<pos:position pos:line="22" pos:column="60"/></operator><operator pos:line="22" pos:column="60">-&gt;<pos:position pos:line="22" pos:column="65"/></operator><name pos:line="22" pos:column="62">parents<pos:position pos:line="22" pos:column="69"/></name></expr>;<pos:position pos:line="22" pos:column="70"/></expr_stmt>
			<while pos:line="23" pos:column="25">while <condition pos:line="23" pos:column="31">(<expr><name pos:line="23" pos:column="32">parents<pos:position pos:line="23" pos:column="39"/></name></expr>)<pos:position pos:line="23" pos:column="40"/></condition> <block pos:line="23" pos:column="41">{
				<expr_stmt><expr><call><name pos:line="24" pos:column="33">add_object_array<pos:position pos:line="24" pos:column="49"/></name><argument_list pos:line="24" pos:column="49">(<argument><expr><operator pos:line="24" pos:column="50">&amp;<pos:position pos:line="24" pos:column="55"/></operator><name><name pos:line="24" pos:column="51">parents<pos:position pos:line="24" pos:column="58"/></name><operator pos:line="24" pos:column="58">-&gt;<pos:position pos:line="24" pos:column="63"/></operator><name pos:line="24" pos:column="60">item<pos:position pos:line="24" pos:column="64"/></name><operator pos:line="24" pos:column="64">-&gt;<pos:position pos:line="24" pos:column="69"/></operator><name pos:line="24" pos:column="66">object<pos:position pos:line="24" pos:column="72"/></name></name></expr></argument>,
						 <argument><expr><name pos:line="25" pos:column="50">NULL<pos:position pos:line="25" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="56">&amp;<pos:position pos:line="25" pos:column="61"/></operator><name pos:line="25" pos:column="57">want_obj<pos:position pos:line="25" pos:column="65"/></name></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><name pos:line="26" pos:column="33">parents<pos:position pos:line="26" pos:column="40"/></name> <operator pos:line="26" pos:column="41">=<pos:position pos:line="26" pos:column="42"/></operator> <name><name pos:line="26" pos:column="43">parents<pos:position pos:line="26" pos:column="50"/></name><operator pos:line="26" pos:column="50">-&gt;<pos:position pos:line="26" pos:column="55"/></operator><name pos:line="26" pos:column="52">next<pos:position pos:line="26" pos:column="56"/></name></name></expr>;<pos:position pos:line="26" pos:column="57"/></expr_stmt>
			}<pos:position pos:line="27" pos:column="26"/></block></while>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">add_object_array<pos:position pos:line="28" pos:column="41"/></name><argument_list pos:line="28" pos:column="41">(<argument><expr><name pos:line="28" pos:column="42">object<pos:position pos:line="28" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="50">NULL<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="56">&amp;<pos:position pos:line="28" pos:column="61"/></operator><name pos:line="28" pos:column="57">extra_edge_obj<pos:position pos:line="28" pos:column="71"/></name></expr></argument>)<pos:position pos:line="28" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="73"/></expr_stmt>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="30" pos:column="17">/* make sure commit traversal conforms to client */</comment>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">register_shallow<pos:position pos:line="31" pos:column="33"/></name><argument_list pos:line="31" pos:column="33">(<argument><expr><operator pos:line="31" pos:column="34">&amp;<pos:position pos:line="31" pos:column="39"/></operator><name><name pos:line="31" pos:column="35">object<pos:position pos:line="31" pos:column="41"/></name><operator pos:line="31" pos:column="41">-&gt;<pos:position pos:line="31" pos:column="46"/></operator><name pos:line="31" pos:column="43">oid<pos:position pos:line="31" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></for>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
