<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5886_git-2.9.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">initial_ref_transaction_commit<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">ref_transaction<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">transaction<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
				   <parameter><decl><type><name><name pos:line="2" pos:column="36">struct<pos:position pos:line="2" pos:column="42"/></name> <name pos:line="2" pos:column="43">strbuf<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">err<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="22">i<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">n<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><name><name pos:line="5" pos:column="17">transaction<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">-&gt;<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="30">nr<pos:position pos:line="5" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ref_update<pos:position pos:line="6" pos:column="26"/></name></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier><modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">updates<pos:position pos:line="6" pos:column="36"/></name> <init pos:line="6" pos:column="37">= <expr><name><name pos:line="6" pos:column="39">transaction<pos:position pos:line="6" pos:column="50"/></name><operator pos:line="6" pos:column="50">-&gt;<pos:position pos:line="6" pos:column="55"/></operator><name pos:line="6" pos:column="52">updates<pos:position pos:line="6" pos:column="59"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">string_list<pos:position pos:line="7" pos:column="27"/></name></name></type> <name pos:line="7" pos:column="28">affected_refnames<pos:position pos:line="7" pos:column="45"/></name> <init pos:line="7" pos:column="46">= <expr><name pos:line="7" pos:column="48">STRING_LIST_INIT_NODUP<pos:position pos:line="7" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="71"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">assert<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">err<pos:position pos:line="9" pos:column="19"/></name></expr></argument>)<pos:position pos:line="9" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="21"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">transaction<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">-&gt;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="26">state<pos:position pos:line="11" pos:column="31"/></name></name> <operator pos:line="11" pos:column="32">!=<pos:position pos:line="11" pos:column="34"/></operator> <name pos:line="11" pos:column="35">REF_TRANSACTION_OPEN<pos:position pos:line="11" pos:column="55"/></name></expr>)<pos:position pos:line="11" pos:column="56"/></condition><then pos:line="11" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">die<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><literal type="string" pos:line="12" pos:column="21">"BUG: commit called for transaction that is not open"<pos:position pos:line="12" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="76"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="14" pos:column="9">/* Fail if a refname appears more than once in the transaction: */</comment>
	<for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init><expr><name pos:line="15" pos:column="14">i<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>;<pos:position pos:line="15" pos:column="20"/></init> <condition><expr><name pos:line="15" pos:column="21">i<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&lt;<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="25">n<pos:position pos:line="15" pos:column="26"/></name></expr>;<pos:position pos:line="15" pos:column="27"/></condition> <incr><expr><name pos:line="15" pos:column="28">i<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">++<pos:position pos:line="15" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="32"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">string_list_append<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><operator pos:line="16" pos:column="36">&amp;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="37">affected_refnames<pos:position pos:line="16" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="56">updates<pos:position pos:line="16" pos:column="63"/></name><index pos:line="16" pos:column="63">[<expr><name pos:line="16" pos:column="64">i<pos:position pos:line="16" pos:column="65"/></name></expr>]<pos:position pos:line="16" pos:column="66"/></index></name><operator pos:line="16" pos:column="66">-&gt;<pos:position pos:line="16" pos:column="71"/></operator><name pos:line="16" pos:column="68">refname<pos:position pos:line="16" pos:column="75"/></name></expr></argument>)<pos:position pos:line="16" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="77"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">string_list_sort<pos:position pos:line="17" pos:column="25"/></name><argument_list pos:line="17" pos:column="25">(<argument><expr><operator pos:line="17" pos:column="26">&amp;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="27">affected_refnames<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">ref_update_reject_duplicates<pos:position pos:line="18" pos:column="41"/></name><argument_list pos:line="18" pos:column="41">(<argument><expr><operator pos:line="18" pos:column="42">&amp;<pos:position pos:line="18" pos:column="47"/></operator><name pos:line="18" pos:column="43">affected_refnames<pos:position pos:line="18" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="62">err<pos:position pos:line="18" pos:column="65"/></name></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="67"/></condition><then pos:line="18" pos:column="67"> <block pos:line="18" pos:column="68">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">ret<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="23">TRANSACTION_GENERIC_ERROR<pos:position pos:line="19" pos:column="48"/></name></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
		<goto pos:line="20" pos:column="17">goto <name pos:line="20" pos:column="22">cleanup<pos:position pos:line="20" pos:column="29"/></name>;<pos:position pos:line="20" pos:column="30"/></goto>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="23" pos:column="9">/*
	 * It's really undefined to call this function in an active
	 * repository or when there are existing references: we are
	 * only locking and changing packed-refs, so (1) any
	 * simultaneous processes might try to change a reference at
	 * the same time we do, and (2) any existing loose versions of
	 * the references that we are setting would have precedence
	 * over our values. But some remote helpers create the remote
	 * "HEAD" and "master" branches before calling this function,
	 * so here we really only check that none of the references
	 * that we are creating already exists.
	 */</comment>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><call><name pos:line="35" pos:column="13">for_each_rawref<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><name pos:line="35" pos:column="29">ref_present<pos:position pos:line="35" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="42">&amp;<pos:position pos:line="35" pos:column="47"/></operator><name pos:line="35" pos:column="43">affected_refnames<pos:position pos:line="35" pos:column="60"/></name></expr></argument>)<pos:position pos:line="35" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="62"/></condition><then pos:line="35" pos:column="62">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="17">die<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><literal type="string" pos:line="36" pos:column="21">"BUG: initial ref transaction called with existing refs"<pos:position pos:line="36" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="79"/></expr_stmt></block></then></if>

	<for pos:line="38" pos:column="9">for <control pos:line="38" pos:column="13">(<init><expr><name pos:line="38" pos:column="14">i<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <literal type="number" pos:line="38" pos:column="18">0<pos:position pos:line="38" pos:column="19"/></literal></expr>;<pos:position pos:line="38" pos:column="20"/></init> <condition><expr><name pos:line="38" pos:column="21">i<pos:position pos:line="38" pos:column="22"/></name> <operator pos:line="38" pos:column="23">&lt;<pos:position pos:line="38" pos:column="27"/></operator> <name pos:line="38" pos:column="25">n<pos:position pos:line="38" pos:column="26"/></name></expr>;<pos:position pos:line="38" pos:column="27"/></condition> <incr><expr><name pos:line="38" pos:column="28">i<pos:position pos:line="38" pos:column="29"/></name><operator pos:line="38" pos:column="29">++<pos:position pos:line="38" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="38" pos:column="32"/></control> <block pos:line="38" pos:column="33">{
		<decl_stmt><decl><type><name><name pos:line="39" pos:column="17">struct<pos:position pos:line="39" pos:column="23"/></name> <name pos:line="39" pos:column="24">ref_update<pos:position pos:line="39" pos:column="34"/></name></name> <modifier pos:line="39" pos:column="35">*<pos:position pos:line="39" pos:column="36"/></modifier></type><name pos:line="39" pos:column="36">update<pos:position pos:line="39" pos:column="42"/></name> <init pos:line="39" pos:column="43">= <expr><name><name pos:line="39" pos:column="45">updates<pos:position pos:line="39" pos:column="52"/></name><index pos:line="39" pos:column="52">[<expr><name pos:line="39" pos:column="53">i<pos:position pos:line="39" pos:column="54"/></name></expr>]<pos:position pos:line="39" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="39" pos:column="56"/></decl_stmt>

		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><operator pos:line="41" pos:column="21">(<pos:position pos:line="41" pos:column="22"/></operator><name><name pos:line="41" pos:column="22">update<pos:position pos:line="41" pos:column="28"/></name><operator pos:line="41" pos:column="28">-&gt;<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="30">flags<pos:position pos:line="41" pos:column="35"/></name></name> <operator pos:line="41" pos:column="36">&amp;<pos:position pos:line="41" pos:column="41"/></operator> <name pos:line="41" pos:column="38">REF_HAVE_OLD<pos:position pos:line="41" pos:column="50"/></name><operator pos:line="41" pos:column="50">)<pos:position pos:line="41" pos:column="51"/></operator> <operator pos:line="41" pos:column="52">&amp;&amp;<pos:position pos:line="41" pos:column="62"/></operator>
		    <operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><call><name pos:line="42" pos:column="22">is_null_sha1<pos:position pos:line="42" pos:column="34"/></name><argument_list pos:line="42" pos:column="34">(<argument><expr><name><name pos:line="42" pos:column="35">update<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">-&gt;<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="43">old_sha1<pos:position pos:line="42" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="53"/></condition><then pos:line="42" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="25">die<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><literal type="string" pos:line="43" pos:column="29">"BUG: initial ref transaction with old_sha1 set"<pos:position pos:line="43" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="79"/></expr_stmt></block></then></if>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><call><name pos:line="44" pos:column="21">verify_refname_available<pos:position pos:line="44" pos:column="45"/></name><argument_list pos:line="44" pos:column="45">(<argument><expr><name><name pos:line="44" pos:column="46">update<pos:position pos:line="44" pos:column="52"/></name><operator pos:line="44" pos:column="52">-&gt;<pos:position pos:line="44" pos:column="57"/></operator><name pos:line="44" pos:column="54">refname<pos:position pos:line="44" pos:column="61"/></name></name></expr></argument>,
					     <argument><expr><operator pos:line="45" pos:column="46">&amp;<pos:position pos:line="45" pos:column="51"/></operator><name pos:line="45" pos:column="47">affected_refnames<pos:position pos:line="45" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="66">NULL<pos:position pos:line="45" pos:column="70"/></name></expr></argument>,
					     <argument><expr><name pos:line="46" pos:column="46">err<pos:position pos:line="46" pos:column="49"/></name></expr></argument>)<pos:position pos:line="46" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="51"/></condition><then pos:line="46" pos:column="51"> <block pos:line="46" pos:column="52">{
			<expr_stmt><expr><name pos:line="47" pos:column="25">ret<pos:position pos:line="47" pos:column="28"/></name> <operator pos:line="47" pos:column="29">=<pos:position pos:line="47" pos:column="30"/></operator> <name pos:line="47" pos:column="31">TRANSACTION_NAME_CONFLICT<pos:position pos:line="47" pos:column="56"/></name></expr>;<pos:position pos:line="47" pos:column="57"/></expr_stmt>
			<goto pos:line="48" pos:column="25">goto <name pos:line="48" pos:column="30">cleanup<pos:position pos:line="48" pos:column="37"/></name>;<pos:position pos:line="48" pos:column="38"/></goto>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if>
	}<pos:position pos:line="50" pos:column="10"/></block></for>

	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">lock_packed_refs<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><literal type="number" pos:line="52" pos:column="30">0<pos:position pos:line="52" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="33"/></condition><then pos:line="52" pos:column="33"> <block pos:line="52" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">strbuf_addf<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name pos:line="53" pos:column="29">err<pos:position pos:line="53" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="34">"unable to lock packed-refs file: %s"<pos:position pos:line="53" pos:column="71"/></literal></expr></argument>,
			    <argument><expr><call><name pos:line="54" pos:column="29">strerror<pos:position pos:line="54" pos:column="37"/></name><argument_list pos:line="54" pos:column="37">(<argument><expr><name pos:line="54" pos:column="38">errno<pos:position pos:line="54" pos:column="43"/></name></expr></argument>)<pos:position pos:line="54" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="55" pos:column="17">ret<pos:position pos:line="55" pos:column="20"/></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <name pos:line="55" pos:column="23">TRANSACTION_GENERIC_ERROR<pos:position pos:line="55" pos:column="48"/></name></expr>;<pos:position pos:line="55" pos:column="49"/></expr_stmt>
		<goto pos:line="56" pos:column="17">goto <name pos:line="56" pos:column="22">cleanup<pos:position pos:line="56" pos:column="29"/></name>;<pos:position pos:line="56" pos:column="30"/></goto>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>

	<for pos:line="59" pos:column="9">for <control pos:line="59" pos:column="13">(<init><expr><name pos:line="59" pos:column="14">i<pos:position pos:line="59" pos:column="15"/></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <literal type="number" pos:line="59" pos:column="18">0<pos:position pos:line="59" pos:column="19"/></literal></expr>;<pos:position pos:line="59" pos:column="20"/></init> <condition><expr><name pos:line="59" pos:column="21">i<pos:position pos:line="59" pos:column="22"/></name> <operator pos:line="59" pos:column="23">&lt;<pos:position pos:line="59" pos:column="27"/></operator> <name pos:line="59" pos:column="25">n<pos:position pos:line="59" pos:column="26"/></name></expr>;<pos:position pos:line="59" pos:column="27"/></condition> <incr><expr><name pos:line="59" pos:column="28">i<pos:position pos:line="59" pos:column="29"/></name><operator pos:line="59" pos:column="29">++<pos:position pos:line="59" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="59" pos:column="32"/></control> <block pos:line="59" pos:column="33">{
		<decl_stmt><decl><type><name><name pos:line="60" pos:column="17">struct<pos:position pos:line="60" pos:column="23"/></name> <name pos:line="60" pos:column="24">ref_update<pos:position pos:line="60" pos:column="34"/></name></name> <modifier pos:line="60" pos:column="35">*<pos:position pos:line="60" pos:column="36"/></modifier></type><name pos:line="60" pos:column="36">update<pos:position pos:line="60" pos:column="42"/></name> <init pos:line="60" pos:column="43">= <expr><name><name pos:line="60" pos:column="45">updates<pos:position pos:line="60" pos:column="52"/></name><index pos:line="60" pos:column="52">[<expr><name pos:line="60" pos:column="53">i<pos:position pos:line="60" pos:column="54"/></name></expr>]<pos:position pos:line="60" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="60" pos:column="56"/></decl_stmt>

		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><operator pos:line="62" pos:column="21">(<pos:position pos:line="62" pos:column="22"/></operator><name><name pos:line="62" pos:column="22">update<pos:position pos:line="62" pos:column="28"/></name><operator pos:line="62" pos:column="28">-&gt;<pos:position pos:line="62" pos:column="33"/></operator><name pos:line="62" pos:column="30">flags<pos:position pos:line="62" pos:column="35"/></name></name> <operator pos:line="62" pos:column="36">&amp;<pos:position pos:line="62" pos:column="41"/></operator> <name pos:line="62" pos:column="38">REF_HAVE_NEW<pos:position pos:line="62" pos:column="50"/></name><operator pos:line="62" pos:column="50">)<pos:position pos:line="62" pos:column="51"/></operator> <operator pos:line="62" pos:column="52">&amp;&amp;<pos:position pos:line="62" pos:column="62"/></operator>
		    <operator pos:line="63" pos:column="21">!<pos:position pos:line="63" pos:column="22"/></operator><call><name pos:line="63" pos:column="22">is_null_sha1<pos:position pos:line="63" pos:column="34"/></name><argument_list pos:line="63" pos:column="34">(<argument><expr><name><name pos:line="63" pos:column="35">update<pos:position pos:line="63" pos:column="41"/></name><operator pos:line="63" pos:column="41">-&gt;<pos:position pos:line="63" pos:column="46"/></operator><name pos:line="63" pos:column="43">new_sha1<pos:position pos:line="63" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="53"/></condition><then pos:line="63" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="25">add_packed_ref<pos:position pos:line="64" pos:column="39"/></name><argument_list pos:line="64" pos:column="39">(<argument><expr><name><name pos:line="64" pos:column="40">update<pos:position pos:line="64" pos:column="46"/></name><operator pos:line="64" pos:column="46">-&gt;<pos:position pos:line="64" pos:column="51"/></operator><name pos:line="64" pos:column="48">refname<pos:position pos:line="64" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="57">update<pos:position pos:line="64" pos:column="63"/></name><operator pos:line="64" pos:column="63">-&gt;<pos:position pos:line="64" pos:column="68"/></operator><name pos:line="64" pos:column="65">new_sha1<pos:position pos:line="64" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="75"/></expr_stmt></block></then></if>
	}<pos:position pos:line="65" pos:column="10"/></block></for>

	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><call><name pos:line="67" pos:column="13">commit_packed_refs<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">()<pos:position pos:line="67" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="34"/></condition><then pos:line="67" pos:column="34"> <block pos:line="67" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">strbuf_addf<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><name pos:line="68" pos:column="29">err<pos:position pos:line="68" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="34">"unable to commit packed-refs file: %s"<pos:position pos:line="68" pos:column="73"/></literal></expr></argument>,
			    <argument><expr><call><name pos:line="69" pos:column="29">strerror<pos:position pos:line="69" pos:column="37"/></name><argument_list pos:line="69" pos:column="37">(<argument><expr><name pos:line="69" pos:column="38">errno<pos:position pos:line="69" pos:column="43"/></name></expr></argument>)<pos:position pos:line="69" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="70" pos:column="17">ret<pos:position pos:line="70" pos:column="20"/></name> <operator pos:line="70" pos:column="21">=<pos:position pos:line="70" pos:column="22"/></operator> <name pos:line="70" pos:column="23">TRANSACTION_GENERIC_ERROR<pos:position pos:line="70" pos:column="48"/></name></expr>;<pos:position pos:line="70" pos:column="49"/></expr_stmt>
		<goto pos:line="71" pos:column="17">goto <name pos:line="71" pos:column="22">cleanup<pos:position pos:line="71" pos:column="29"/></name>;<pos:position pos:line="71" pos:column="30"/></goto>
	}<pos:position pos:line="72" pos:column="10"/></block></then></if>

<label><name pos:line="74" pos:column="1">cleanup<pos:position pos:line="74" pos:column="8"/></name>:<pos:position pos:line="74" pos:column="9"/></label>
	<expr_stmt><expr><name><name pos:line="75" pos:column="9">transaction<pos:position pos:line="75" pos:column="20"/></name><operator pos:line="75" pos:column="20">-&gt;<pos:position pos:line="75" pos:column="25"/></operator><name pos:line="75" pos:column="22">state<pos:position pos:line="75" pos:column="27"/></name></name> <operator pos:line="75" pos:column="28">=<pos:position pos:line="75" pos:column="29"/></operator> <name pos:line="75" pos:column="30">REF_TRANSACTION_CLOSED<pos:position pos:line="75" pos:column="52"/></name></expr>;<pos:position pos:line="75" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="76" pos:column="9">string_list_clear<pos:position pos:line="76" pos:column="26"/></name><argument_list pos:line="76" pos:column="26">(<argument><expr><operator pos:line="76" pos:column="27">&amp;<pos:position pos:line="76" pos:column="32"/></operator><name pos:line="76" pos:column="28">affected_refnames<pos:position pos:line="76" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="47">0<pos:position pos:line="76" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="50"/></expr_stmt>
	<return pos:line="77" pos:column="9">return <expr><name pos:line="77" pos:column="16">ret<pos:position pos:line="77" pos:column="19"/></name></expr>;<pos:position pos:line="77" pos:column="20"/></return>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
