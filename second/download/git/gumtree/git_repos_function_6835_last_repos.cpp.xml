<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6835_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>   <name pos:line="1" pos:column="8">nedpfree<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">nedpool<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">p<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">void<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">mem<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list> <name pos:line="1" pos:column="40">THROWSPEC<pos:position pos:line="1" pos:column="49"/></name>
<block pos:line="2" pos:column="1">{	<comment type="block" pos:line="2" pos:column="9">/* Frees always happen in the mspace they happened in, so skip
	locking the preferred mspace for this thread */</comment>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">threadcache<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">tc<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">mymspace<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">memsize<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">assert<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">mem<pos:position pos:line="7" pos:column="19"/></name></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">GetThreadCache<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><operator pos:line="8" pos:column="24">&amp;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="25">p<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="28">&amp;<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="29">tc<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="33">&amp;<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="34">mymspace<pos:position pos:line="8" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="44">0<pos:position pos:line="8" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="47"/></expr_stmt>
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">THREADCACHEMAX<pos:position pos:line="9" pos:column="19"/></name></expr></cpp:if>
	<expr_stmt><expr><name pos:line="10" pos:column="9">memsize<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator><call><name pos:line="10" pos:column="17">nedblksize<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">mem<pos:position pos:line="10" pos:column="31"/></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">memsize<pos:position pos:line="11" pos:column="23"/></name></expr></argument>)<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
	<if pos:line="12" pos:column="9">if<condition pos:line="12" pos:column="11">(<expr><name pos:line="12" pos:column="12">mem<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">&amp;&amp;<pos:position pos:line="12" pos:column="26"/></operator> <name pos:line="12" pos:column="19">tc<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">&amp;&amp;<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="25">memsize<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">&lt;=<pos:position pos:line="12" pos:column="37"/></operator><operator pos:line="12" pos:column="34">(<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="35">THREADCACHEMAX<pos:position pos:line="12" pos:column="49"/></name><operator pos:line="12" pos:column="49">+<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="50">CHUNK_OVERHEAD<pos:position pos:line="12" pos:column="64"/></name><operator pos:line="12" pos:column="64">)<pos:position pos:line="12" pos:column="65"/></operator></expr>)<pos:position pos:line="12" pos:column="66"/></condition><then pos:line="12" pos:column="66">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">threadcache_free<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">p<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">tc<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">mymspace<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="51">mem<pos:position pos:line="13" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="56">memsize<pos:position pos:line="13" pos:column="63"/></name></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="65"/></expr_stmt></block></then>
	<else pos:line="14" pos:column="9">else
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">mspace_free<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><literal type="number" pos:line="16" pos:column="29">0<pos:position pos:line="16" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="32">mem<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt></block></else></if>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
