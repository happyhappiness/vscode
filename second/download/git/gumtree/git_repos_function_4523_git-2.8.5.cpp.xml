<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4523_git-2.8.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">list_paths<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">string_list<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">list<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">with_tree<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
		      <parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">prefix<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <name><name pos:line="2" pos:column="49">struct<pos:position pos:line="2" pos:column="55"/></name> <name pos:line="2" pos:column="56">pathspec<pos:position pos:line="2" pos:column="64"/></name></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">pattern<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">ret<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">m<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name><name pos:line="7" pos:column="14">pattern<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">nr<pos:position pos:line="7" pos:column="25"/></name></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr>;<pos:position pos:line="8" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="10" pos:column="9">m<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <call><name pos:line="10" pos:column="13">xcalloc<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><literal type="number" pos:line="10" pos:column="21">1<pos:position pos:line="10" pos:column="22"/></literal></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="24">pattern<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">nr<pos:position pos:line="10" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">with_tree<pos:position pos:line="12" pos:column="22"/></name></expr>)<pos:position pos:line="12" pos:column="23"/></condition><then pos:line="12" pos:column="23"> <block pos:line="12" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">char<pos:position pos:line="13" pos:column="21"/></name> <modifier pos:line="13" pos:column="22">*<pos:position pos:line="13" pos:column="23"/></modifier></type><name pos:line="13" pos:column="23">max_prefix<pos:position pos:line="13" pos:column="33"/></name> <init pos:line="13" pos:column="34">= <expr><call><name pos:line="13" pos:column="36">common_prefix<pos:position pos:line="13" pos:column="49"/></name><argument_list pos:line="13" pos:column="49">(<argument><expr><name pos:line="13" pos:column="50">pattern<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="59"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">overlay_tree_on_cache<pos:position pos:line="14" pos:column="38"/></name><argument_list pos:line="14" pos:column="38">(<argument><expr><name pos:line="14" pos:column="39">with_tree<pos:position pos:line="14" pos:column="48"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="14" pos:column="50">max_prefix<pos:position pos:line="14" pos:column="60"/></name></expr> ?<pos:position pos:line="14" pos:column="62"/></condition><then pos:line="14" pos:column="62"> <expr><name pos:line="14" pos:column="63">max_prefix<pos:position pos:line="14" pos:column="73"/></name></expr> <pos:position pos:line="14" pos:column="74"/></then><else pos:line="14" pos:column="74">: <expr><name pos:line="14" pos:column="76">prefix<pos:position pos:line="14" pos:column="82"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="14" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="84"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">free<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">max_prefix<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<for pos:line="18" pos:column="9">for <control pos:line="18" pos:column="13">(<init><expr><name pos:line="18" pos:column="14">i<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <literal type="number" pos:line="18" pos:column="18">0<pos:position pos:line="18" pos:column="19"/></literal></expr>;<pos:position pos:line="18" pos:column="20"/></init> <condition><expr><name pos:line="18" pos:column="21">i<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">&lt;<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="25">active_nr<pos:position pos:line="18" pos:column="34"/></name></expr>;<pos:position pos:line="18" pos:column="35"/></condition> <incr><expr><name pos:line="18" pos:column="36">i<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">++<pos:position pos:line="18" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="40"/></control> <block pos:line="18" pos:column="41">{
		<decl_stmt><decl><type><specifier pos:line="19" pos:column="17">const<pos:position pos:line="19" pos:column="22"/></specifier> <name><name pos:line="19" pos:column="23">struct<pos:position pos:line="19" pos:column="29"/></name> <name pos:line="19" pos:column="30">cache_entry<pos:position pos:line="19" pos:column="41"/></name></name> <modifier pos:line="19" pos:column="42">*<pos:position pos:line="19" pos:column="43"/></modifier></type><name pos:line="19" pos:column="43">ce<pos:position pos:line="19" pos:column="45"/></name> <init pos:line="19" pos:column="46">= <expr><name><name pos:line="19" pos:column="48">active_cache<pos:position pos:line="19" pos:column="60"/></name><index pos:line="19" pos:column="60">[<expr><name pos:line="19" pos:column="61">i<pos:position pos:line="19" pos:column="62"/></name></expr>]<pos:position pos:line="19" pos:column="63"/></index></name></expr></init></decl>;<pos:position pos:line="19" pos:column="64"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="20" pos:column="17">struct<pos:position pos:line="20" pos:column="23"/></name> <name pos:line="20" pos:column="24">string_list_item<pos:position pos:line="20" pos:column="40"/></name></name> <modifier pos:line="20" pos:column="41">*<pos:position pos:line="20" pos:column="42"/></modifier></type><name pos:line="20" pos:column="42">item<pos:position pos:line="20" pos:column="46"/></name></decl>;<pos:position pos:line="20" pos:column="47"/></decl_stmt>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name><name pos:line="22" pos:column="21">ce<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">-&gt;<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="25">ce_flags<pos:position pos:line="22" pos:column="33"/></name></name> <operator pos:line="22" pos:column="34">&amp;<pos:position pos:line="22" pos:column="39"/></operator> <name pos:line="22" pos:column="36">CE_UPDATE<pos:position pos:line="22" pos:column="45"/></name></expr>)<pos:position pos:line="22" pos:column="46"/></condition><then pos:line="22" pos:column="46">
			<block type="pseudo"><continue pos:line="23" pos:column="25">continue;<pos:position pos:line="23" pos:column="34"/></continue></block></then></if>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><call><name pos:line="24" pos:column="22">ce_path_match<pos:position pos:line="24" pos:column="35"/></name><argument_list pos:line="24" pos:column="35">(<argument><expr><name pos:line="24" pos:column="36">ce<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="40">pattern<pos:position pos:line="24" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="49">m<pos:position pos:line="24" pos:column="50"/></name></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="52"/></condition><then pos:line="24" pos:column="52">
			<block type="pseudo"><continue pos:line="25" pos:column="25">continue;<pos:position pos:line="25" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="26" pos:column="17">item<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">=<pos:position pos:line="26" pos:column="23"/></operator> <call><name pos:line="26" pos:column="24">string_list_insert<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">list<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="49">ce<pos:position pos:line="26" pos:column="51"/></name><operator pos:line="26" pos:column="51">-&gt;<pos:position pos:line="26" pos:column="56"/></operator><name pos:line="26" pos:column="53">name<pos:position pos:line="26" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">ce_skip_worktree<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">ce<pos:position pos:line="27" pos:column="40"/></name></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="42"/></condition><then pos:line="27" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="28" pos:column="25">item<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">-&gt;<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="31">util<pos:position pos:line="28" pos:column="35"/></name></name> <operator pos:line="28" pos:column="36">=<pos:position pos:line="28" pos:column="37"/></operator> <name pos:line="28" pos:column="38">item<pos:position pos:line="28" pos:column="42"/></name></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt></block></then></if> <comment type="block" pos:line="28" pos:column="44">/* better a valid pointer than a fake one */</comment>
	}<pos:position pos:line="29" pos:column="10"/></block></for>

	<expr_stmt><expr><name pos:line="31" pos:column="9">ret<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <call><name pos:line="31" pos:column="15">report_path_error<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">m<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="36">pattern<pos:position pos:line="31" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="45">prefix<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">free<pos:position pos:line="32" pos:column="13"/></name><argument_list pos:line="32" pos:column="13">(<argument><expr><name pos:line="32" pos:column="14">m<pos:position pos:line="32" pos:column="15"/></name></expr></argument>)<pos:position pos:line="32" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt>
	<return pos:line="33" pos:column="9">return <expr><name pos:line="33" pos:column="16">ret<pos:position pos:line="33" pos:column="19"/></name></expr>;<pos:position pos:line="33" pos:column="20"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
