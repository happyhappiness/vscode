<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_75.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_rev_parse<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">argc<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier><modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">argv<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">prefix<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">as_is<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><literal type="number" pos:line="3" pos:column="24">0<pos:position pos:line="3" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="27">verify<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><literal type="number" pos:line="3" pos:column="36">0<pos:position pos:line="3" pos:column="37"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="39">quiet<pos:position pos:line="3" pos:column="44"/></name> <init pos:line="3" pos:column="45">= <expr><literal type="number" pos:line="3" pos:column="47">0<pos:position pos:line="3" pos:column="48"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="50">revs_count<pos:position pos:line="3" pos:column="60"/></name> <init pos:line="3" pos:column="61">= <expr><literal type="number" pos:line="3" pos:column="63">0<pos:position pos:line="3" pos:column="64"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="66">type<pos:position pos:line="3" pos:column="70"/></name> <init pos:line="3" pos:column="71">= <expr><literal type="number" pos:line="3" pos:column="73">0<pos:position pos:line="3" pos:column="74"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="75"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">has_dashdash<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><literal type="number" pos:line="4" pos:column="28">0<pos:position pos:line="4" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">output_prefix<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><literal type="number" pos:line="5" pos:column="29">0<pos:position pos:line="5" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name></type> <name><name pos:line="6" pos:column="23">sha1<pos:position pos:line="6" pos:column="27"/></name><index pos:line="6" pos:column="27">[<expr><literal type="number" pos:line="6" pos:column="28">20<pos:position pos:line="6" pos:column="30"/></literal></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">name<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name pos:line="7" pos:column="28">NULL<pos:position pos:line="7" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">argc<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">&gt;<pos:position pos:line="9" pos:column="22"/></operator> <literal type="number" pos:line="9" pos:column="20">1<pos:position pos:line="9" pos:column="21"/></literal> <operator pos:line="9" pos:column="22">&amp;&amp;<pos:position pos:line="9" pos:column="32"/></operator> <operator pos:line="9" pos:column="25">!<pos:position pos:line="9" pos:column="26"/></operator><call><name pos:line="9" pos:column="26">strcmp<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><literal type="string" pos:line="9" pos:column="33">"--parseopt"<pos:position pos:line="9" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="47">argv<pos:position pos:line="9" pos:column="51"/></name><index pos:line="9" pos:column="51">[<expr><literal type="number" pos:line="9" pos:column="52">1<pos:position pos:line="9" pos:column="53"/></literal></expr>]<pos:position pos:line="9" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="56"/></condition><then pos:line="9" pos:column="56">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><call><name pos:line="10" pos:column="24">cmd_parseopt<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name pos:line="10" pos:column="37">argc<pos:position pos:line="10" pos:column="41"/></name> <operator pos:line="10" pos:column="42">-<pos:position pos:line="10" pos:column="43"/></operator> <literal type="number" pos:line="10" pos:column="44">1<pos:position pos:line="10" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="47">argv<pos:position pos:line="10" pos:column="51"/></name> <operator pos:line="10" pos:column="52">+<pos:position pos:line="10" pos:column="53"/></operator> <literal type="number" pos:line="10" pos:column="54">1<pos:position pos:line="10" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="57">prefix<pos:position pos:line="10" pos:column="63"/></name></expr></argument>)<pos:position pos:line="10" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="65"/></return></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">argc<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">&gt;<pos:position pos:line="12" pos:column="22"/></operator> <literal type="number" pos:line="12" pos:column="20">1<pos:position pos:line="12" pos:column="21"/></literal> <operator pos:line="12" pos:column="22">&amp;&amp;<pos:position pos:line="12" pos:column="32"/></operator> <operator pos:line="12" pos:column="25">!<pos:position pos:line="12" pos:column="26"/></operator><call><name pos:line="12" pos:column="26">strcmp<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><literal type="string" pos:line="12" pos:column="33">"--sq-quote"<pos:position pos:line="12" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="47">argv<pos:position pos:line="12" pos:column="51"/></name><index pos:line="12" pos:column="51">[<expr><literal type="number" pos:line="12" pos:column="52">1<pos:position pos:line="12" pos:column="53"/></literal></expr>]<pos:position pos:line="12" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="56"/></condition><then pos:line="12" pos:column="56">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><call><name pos:line="13" pos:column="24">cmd_sq_quote<pos:position pos:line="13" pos:column="36"/></name><argument_list pos:line="13" pos:column="36">(<argument><expr><name pos:line="13" pos:column="37">argc<pos:position pos:line="13" pos:column="41"/></name> <operator pos:line="13" pos:column="42">-<pos:position pos:line="13" pos:column="43"/></operator> <literal type="number" pos:line="13" pos:column="44">2<pos:position pos:line="13" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="47">argv<pos:position pos:line="13" pos:column="51"/></name> <operator pos:line="13" pos:column="52">+<pos:position pos:line="13" pos:column="53"/></operator> <literal type="number" pos:line="13" pos:column="54">2<pos:position pos:line="13" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="57"/></return></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">argc<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">&gt;<pos:position pos:line="15" pos:column="22"/></operator> <literal type="number" pos:line="15" pos:column="20">1<pos:position pos:line="15" pos:column="21"/></literal> <operator pos:line="15" pos:column="22">&amp;&amp;<pos:position pos:line="15" pos:column="32"/></operator> <operator pos:line="15" pos:column="25">!<pos:position pos:line="15" pos:column="26"/></operator><call><name pos:line="15" pos:column="26">strcmp<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><literal type="string" pos:line="15" pos:column="33">"-h"<pos:position pos:line="15" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="39">argv<pos:position pos:line="15" pos:column="43"/></name><index pos:line="15" pos:column="43">[<expr><literal type="number" pos:line="15" pos:column="44">1<pos:position pos:line="15" pos:column="45"/></literal></expr>]<pos:position pos:line="15" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">usage<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">builtin_rev_parse_usage<pos:position pos:line="16" pos:column="46"/></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt></block></then></if>

	<for pos:line="18" pos:column="9">for <control pos:line="18" pos:column="13">(<init><expr><name pos:line="18" pos:column="14">i<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <literal type="number" pos:line="18" pos:column="18">1<pos:position pos:line="18" pos:column="19"/></literal></expr>;<pos:position pos:line="18" pos:column="20"/></init> <condition><expr><name pos:line="18" pos:column="21">i<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">&lt;<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="25">argc<pos:position pos:line="18" pos:column="29"/></name></expr>;<pos:position pos:line="18" pos:column="30"/></condition> <incr><expr><name pos:line="18" pos:column="31">i<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">++<pos:position pos:line="18" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="35"/></control> <block pos:line="18" pos:column="36">{
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">!<pos:position pos:line="19" pos:column="22"/></operator><call><name pos:line="19" pos:column="22">strcmp<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><name><name pos:line="19" pos:column="29">argv<pos:position pos:line="19" pos:column="33"/></name><index pos:line="19" pos:column="33">[<expr><name pos:line="19" pos:column="34">i<pos:position pos:line="19" pos:column="35"/></name></expr>]<pos:position pos:line="19" pos:column="36"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="38">"--"<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="44"/></condition><then pos:line="19" pos:column="44"> <block pos:line="19" pos:column="45">{
			<expr_stmt><expr><name pos:line="20" pos:column="25">has_dashdash<pos:position pos:line="20" pos:column="37"/></name> <operator pos:line="20" pos:column="38">=<pos:position pos:line="20" pos:column="39"/></operator> <literal type="number" pos:line="20" pos:column="40">1<pos:position pos:line="20" pos:column="41"/></literal></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt>
			<break pos:line="21" pos:column="25">break;<pos:position pos:line="21" pos:column="31"/></break>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>
	}<pos:position pos:line="23" pos:column="10"/></block></for>

	<expr_stmt><expr><name pos:line="25" pos:column="9">prefix<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <call><name pos:line="25" pos:column="18">setup_git_directory<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">()<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">git_config<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">git_default_config<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="40">NULL<pos:position pos:line="26" pos:column="44"/></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt>
	<for pos:line="27" pos:column="9">for <control pos:line="27" pos:column="13">(<init><expr><name pos:line="27" pos:column="14">i<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <literal type="number" pos:line="27" pos:column="18">1<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></init> <condition><expr><name pos:line="27" pos:column="21">i<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="25">argc<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></condition> <incr><expr><name pos:line="27" pos:column="31">i<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">++<pos:position pos:line="27" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="35"/></control> <block pos:line="27" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="28" pos:column="17">const<pos:position pos:line="28" pos:column="22"/></specifier> <name pos:line="28" pos:column="23">char<pos:position pos:line="28" pos:column="27"/></name> <modifier pos:line="28" pos:column="28">*<pos:position pos:line="28" pos:column="29"/></modifier></type><name pos:line="28" pos:column="29">arg<pos:position pos:line="28" pos:column="32"/></name> <init pos:line="28" pos:column="33">= <expr><name><name pos:line="28" pos:column="35">argv<pos:position pos:line="28" pos:column="39"/></name><index pos:line="28" pos:column="39">[<expr><name pos:line="28" pos:column="40">i<pos:position pos:line="28" pos:column="41"/></name></expr>]<pos:position pos:line="28" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="28" pos:column="43"/></decl_stmt>

		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">as_is<pos:position pos:line="30" pos:column="26"/></name></expr>)<pos:position pos:line="30" pos:column="27"/></condition><then pos:line="30" pos:column="27"> <block pos:line="30" pos:column="28">{
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><call><name pos:line="31" pos:column="29">show_file<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><name pos:line="31" pos:column="39">arg<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="44">output_prefix<pos:position pos:line="31" pos:column="57"/></name></expr></argument>)<pos:position pos:line="31" pos:column="58"/></argument_list></call> <operator pos:line="31" pos:column="59">&amp;&amp;<pos:position pos:line="31" pos:column="69"/></operator> <name pos:line="31" pos:column="62">as_is<pos:position pos:line="31" pos:column="67"/></name> <operator pos:line="31" pos:column="68">&lt;<pos:position pos:line="31" pos:column="72"/></operator> <literal type="number" pos:line="31" pos:column="70">2<pos:position pos:line="31" pos:column="71"/></literal></expr>)<pos:position pos:line="31" pos:column="72"/></condition><then pos:line="31" pos:column="72">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="33">verify_filename<pos:position pos:line="32" pos:column="48"/></name><argument_list pos:line="32" pos:column="48">(<argument><expr><name pos:line="32" pos:column="49">prefix<pos:position pos:line="32" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="57">arg<pos:position pos:line="32" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="62">0<pos:position pos:line="32" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="65"/></expr_stmt></block></then></if>
			<continue pos:line="33" pos:column="25">continue;<pos:position pos:line="33" pos:column="34"/></continue>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">!<pos:position pos:line="35" pos:column="22"/></operator><call><name pos:line="35" pos:column="22">strcmp<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><name pos:line="35" pos:column="29">arg<pos:position pos:line="35" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="35" pos:column="33">"-n"<pos:position pos:line="35" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="39"/></condition><then pos:line="35" pos:column="39"> <block pos:line="35" pos:column="40">{
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><operator pos:line="36" pos:column="29">++<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="31">i<pos:position pos:line="36" pos:column="32"/></name> <operator pos:line="36" pos:column="33">&gt;=<pos:position pos:line="36" pos:column="38"/></operator> <name pos:line="36" pos:column="36">argc<pos:position pos:line="36" pos:column="40"/></name></expr>)<pos:position pos:line="36" pos:column="41"/></condition><then pos:line="36" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="33">die<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><literal type="string" pos:line="37" pos:column="37">"-n requires an argument"<pos:position pos:line="37" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="64"/></expr_stmt></block></then></if>
			<if pos:line="38" pos:column="25">if <condition pos:line="38" pos:column="28">(<expr><operator pos:line="38" pos:column="29">(<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="30">filter<pos:position pos:line="38" pos:column="36"/></name> <operator pos:line="38" pos:column="37">&amp;<pos:position pos:line="38" pos:column="42"/></operator> <name pos:line="38" pos:column="39">DO_FLAGS<pos:position pos:line="38" pos:column="47"/></name><operator pos:line="38" pos:column="47">)<pos:position pos:line="38" pos:column="48"/></operator> <operator pos:line="38" pos:column="49">&amp;&amp;<pos:position pos:line="38" pos:column="59"/></operator> <operator pos:line="38" pos:column="52">(<pos:position pos:line="38" pos:column="53"/></operator><name pos:line="38" pos:column="53">filter<pos:position pos:line="38" pos:column="59"/></name> <operator pos:line="38" pos:column="60">&amp;<pos:position pos:line="38" pos:column="65"/></operator> <name pos:line="38" pos:column="62">DO_REVS<pos:position pos:line="38" pos:column="69"/></name><operator pos:line="38" pos:column="69">)<pos:position pos:line="38" pos:column="70"/></operator></expr>)<pos:position pos:line="38" pos:column="71"/></condition><then pos:line="38" pos:column="71"> <block pos:line="38" pos:column="72">{
				<expr_stmt><expr><call><name pos:line="39" pos:column="33">show<pos:position pos:line="39" pos:column="37"/></name><argument_list pos:line="39" pos:column="37">(<argument><expr><name pos:line="39" pos:column="38">arg<pos:position pos:line="39" pos:column="41"/></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="40" pos:column="33">show<pos:position pos:line="40" pos:column="37"/></name><argument_list pos:line="40" pos:column="37">(<argument><expr><name><name pos:line="40" pos:column="38">argv<pos:position pos:line="40" pos:column="42"/></name><index pos:line="40" pos:column="42">[<expr><name pos:line="40" pos:column="43">i<pos:position pos:line="40" pos:column="44"/></name></expr>]<pos:position pos:line="40" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="47"/></expr_stmt>
			}<pos:position pos:line="41" pos:column="26"/></block></then></if>
			<continue pos:line="42" pos:column="25">continue;<pos:position pos:line="42" pos:column="34"/></continue>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><call><name pos:line="44" pos:column="21">starts_with<pos:position pos:line="44" pos:column="32"/></name><argument_list pos:line="44" pos:column="32">(<argument><expr><name pos:line="44" pos:column="33">arg<pos:position pos:line="44" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="38">"-n"<pos:position pos:line="44" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="44"/></condition><then pos:line="44" pos:column="44"> <block pos:line="44" pos:column="45">{
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><operator pos:line="45" pos:column="29">(<pos:position pos:line="45" pos:column="30"/></operator><name pos:line="45" pos:column="30">filter<pos:position pos:line="45" pos:column="36"/></name> <operator pos:line="45" pos:column="37">&amp;<pos:position pos:line="45" pos:column="42"/></operator> <name pos:line="45" pos:column="39">DO_FLAGS<pos:position pos:line="45" pos:column="47"/></name><operator pos:line="45" pos:column="47">)<pos:position pos:line="45" pos:column="48"/></operator> <operator pos:line="45" pos:column="49">&amp;&amp;<pos:position pos:line="45" pos:column="59"/></operator> <operator pos:line="45" pos:column="52">(<pos:position pos:line="45" pos:column="53"/></operator><name pos:line="45" pos:column="53">filter<pos:position pos:line="45" pos:column="59"/></name> <operator pos:line="45" pos:column="60">&amp;<pos:position pos:line="45" pos:column="65"/></operator> <name pos:line="45" pos:column="62">DO_REVS<pos:position pos:line="45" pos:column="69"/></name><operator pos:line="45" pos:column="69">)<pos:position pos:line="45" pos:column="70"/></operator></expr>)<pos:position pos:line="45" pos:column="71"/></condition><then pos:line="45" pos:column="71">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="33">show<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><name pos:line="46" pos:column="38">arg<pos:position pos:line="46" pos:column="41"/></name></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="43"/></expr_stmt></block></then></if>
			<continue pos:line="47" pos:column="25">continue;<pos:position pos:line="47" pos:column="34"/></continue>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>

		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><operator pos:line="50" pos:column="21">*<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">arg<pos:position pos:line="50" pos:column="25"/></name> <operator pos:line="50" pos:column="26">==<pos:position pos:line="50" pos:column="28"/></operator> <literal type="char" pos:line="50" pos:column="29">'-'<pos:position pos:line="50" pos:column="32"/></literal></expr>)<pos:position pos:line="50" pos:column="33"/></condition><then pos:line="50" pos:column="33"> <block pos:line="50" pos:column="34">{
			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><operator pos:line="51" pos:column="29">!<pos:position pos:line="51" pos:column="30"/></operator><call><name pos:line="51" pos:column="30">strcmp<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">(<argument><expr><name pos:line="51" pos:column="37">arg<pos:position pos:line="51" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="42">"--"<pos:position pos:line="51" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="48"/></condition><then pos:line="51" pos:column="48"> <block pos:line="51" pos:column="49">{
				<expr_stmt><expr><name pos:line="52" pos:column="33">as_is<pos:position pos:line="52" pos:column="38"/></name> <operator pos:line="52" pos:column="39">=<pos:position pos:line="52" pos:column="40"/></operator> <literal type="number" pos:line="52" pos:column="41">2<pos:position pos:line="52" pos:column="42"/></literal></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt>
				<comment type="block" pos:line="53" pos:column="33">/* Pass on the "--" if we show anything but files.. */</comment>
				<if pos:line="54" pos:column="33">if <condition pos:line="54" pos:column="36">(<expr><name pos:line="54" pos:column="37">filter<pos:position pos:line="54" pos:column="43"/></name> <operator pos:line="54" pos:column="44">&amp;<pos:position pos:line="54" pos:column="49"/></operator> <operator pos:line="54" pos:column="46">(<pos:position pos:line="54" pos:column="47"/></operator><name pos:line="54" pos:column="47">DO_FLAGS<pos:position pos:line="54" pos:column="55"/></name> <operator pos:line="54" pos:column="56">|<pos:position pos:line="54" pos:column="57"/></operator> <name pos:line="54" pos:column="58">DO_REVS<pos:position pos:line="54" pos:column="65"/></name><operator pos:line="54" pos:column="65">)<pos:position pos:line="54" pos:column="66"/></operator></expr>)<pos:position pos:line="54" pos:column="67"/></condition><then pos:line="54" pos:column="67">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="41">show_file<pos:position pos:line="55" pos:column="50"/></name><argument_list pos:line="55" pos:column="50">(<argument><expr><name pos:line="55" pos:column="51">arg<pos:position pos:line="55" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="56">0<pos:position pos:line="55" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="59"/></expr_stmt></block></then></if>
				<continue pos:line="56" pos:column="33">continue;<pos:position pos:line="56" pos:column="42"/></continue>
			}<pos:position pos:line="57" pos:column="26"/></block></then></if>
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><operator pos:line="58" pos:column="29">!<pos:position pos:line="58" pos:column="30"/></operator><call><name pos:line="58" pos:column="30">strcmp<pos:position pos:line="58" pos:column="36"/></name><argument_list pos:line="58" pos:column="36">(<argument><expr><name pos:line="58" pos:column="37">arg<pos:position pos:line="58" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="42">"--default"<pos:position pos:line="58" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="55"/></condition><then pos:line="58" pos:column="55"> <block pos:line="58" pos:column="56">{
				<expr_stmt><expr><name pos:line="59" pos:column="33">def<pos:position pos:line="59" pos:column="36"/></name> <operator pos:line="59" pos:column="37">=<pos:position pos:line="59" pos:column="38"/></operator> <name><name pos:line="59" pos:column="39">argv<pos:position pos:line="59" pos:column="43"/></name><index pos:line="59" pos:column="43">[<expr><operator pos:line="59" pos:column="44">++<pos:position pos:line="59" pos:column="46"/></operator><name pos:line="59" pos:column="46">i<pos:position pos:line="59" pos:column="47"/></name></expr>]<pos:position pos:line="59" pos:column="48"/></index></name></expr>;<pos:position pos:line="59" pos:column="49"/></expr_stmt>
				<if pos:line="60" pos:column="33">if <condition pos:line="60" pos:column="36">(<expr><operator pos:line="60" pos:column="37">!<pos:position pos:line="60" pos:column="38"/></operator><name pos:line="60" pos:column="38">def<pos:position pos:line="60" pos:column="41"/></name></expr>)<pos:position pos:line="60" pos:column="42"/></condition><then pos:line="60" pos:column="42">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="41">die<pos:position pos:line="61" pos:column="44"/></name><argument_list pos:line="61" pos:column="44">(<argument><expr><literal type="string" pos:line="61" pos:column="45">"--default requires an argument"<pos:position pos:line="61" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="79"/></expr_stmt></block></then></if>
				<continue pos:line="62" pos:column="33">continue;<pos:position pos:line="62" pos:column="42"/></continue>
			}<pos:position pos:line="63" pos:column="26"/></block></then></if>
			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><operator pos:line="64" pos:column="29">!<pos:position pos:line="64" pos:column="30"/></operator><call><name pos:line="64" pos:column="30">strcmp<pos:position pos:line="64" pos:column="36"/></name><argument_list pos:line="64" pos:column="36">(<argument><expr><name pos:line="64" pos:column="37">arg<pos:position pos:line="64" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="42">"--prefix"<pos:position pos:line="64" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="54"/></condition><then pos:line="64" pos:column="54"> <block pos:line="64" pos:column="55">{
				<expr_stmt><expr><name pos:line="65" pos:column="33">prefix<pos:position pos:line="65" pos:column="39"/></name> <operator pos:line="65" pos:column="40">=<pos:position pos:line="65" pos:column="41"/></operator> <name><name pos:line="65" pos:column="42">argv<pos:position pos:line="65" pos:column="46"/></name><index pos:line="65" pos:column="46">[<expr><operator pos:line="65" pos:column="47">++<pos:position pos:line="65" pos:column="49"/></operator><name pos:line="65" pos:column="49">i<pos:position pos:line="65" pos:column="50"/></name></expr>]<pos:position pos:line="65" pos:column="51"/></index></name></expr>;<pos:position pos:line="65" pos:column="52"/></expr_stmt>
				<if pos:line="66" pos:column="33">if <condition pos:line="66" pos:column="36">(<expr><operator pos:line="66" pos:column="37">!<pos:position pos:line="66" pos:column="38"/></operator><name pos:line="66" pos:column="38">prefix<pos:position pos:line="66" pos:column="44"/></name></expr>)<pos:position pos:line="66" pos:column="45"/></condition><then pos:line="66" pos:column="45">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="41">die<pos:position pos:line="67" pos:column="44"/></name><argument_list pos:line="67" pos:column="44">(<argument><expr><literal type="string" pos:line="67" pos:column="45">"--prefix requires an argument"<pos:position pos:line="67" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="78"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name><name pos:line="68" pos:column="33">startup_info<pos:position pos:line="68" pos:column="45"/></name><operator pos:line="68" pos:column="45">-&gt;<pos:position pos:line="68" pos:column="50"/></operator><name pos:line="68" pos:column="47">prefix<pos:position pos:line="68" pos:column="53"/></name></name> <operator pos:line="68" pos:column="54">=<pos:position pos:line="68" pos:column="55"/></operator> <name pos:line="68" pos:column="56">prefix<pos:position pos:line="68" pos:column="62"/></name></expr>;<pos:position pos:line="68" pos:column="63"/></expr_stmt>
				<expr_stmt><expr><name pos:line="69" pos:column="33">output_prefix<pos:position pos:line="69" pos:column="46"/></name> <operator pos:line="69" pos:column="47">=<pos:position pos:line="69" pos:column="48"/></operator> <literal type="number" pos:line="69" pos:column="49">1<pos:position pos:line="69" pos:column="50"/></literal></expr>;<pos:position pos:line="69" pos:column="51"/></expr_stmt>
				<continue pos:line="70" pos:column="33">continue;<pos:position pos:line="70" pos:column="42"/></continue>
			}<pos:position pos:line="71" pos:column="26"/></block></then></if>
			<if pos:line="72" pos:column="25">if <condition pos:line="72" pos:column="28">(<expr><operator pos:line="72" pos:column="29">!<pos:position pos:line="72" pos:column="30"/></operator><call><name pos:line="72" pos:column="30">strcmp<pos:position pos:line="72" pos:column="36"/></name><argument_list pos:line="72" pos:column="36">(<argument><expr><name pos:line="72" pos:column="37">arg<pos:position pos:line="72" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="42">"--revs-only"<pos:position pos:line="72" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="57"/></condition><then pos:line="72" pos:column="57"> <block pos:line="72" pos:column="58">{
				<expr_stmt><expr><name pos:line="73" pos:column="33">filter<pos:position pos:line="73" pos:column="39"/></name> <operator pos:line="73" pos:column="40">&amp;=<pos:position pos:line="73" pos:column="46"/></operator> <operator pos:line="73" pos:column="43">~<pos:position pos:line="73" pos:column="44"/></operator><name pos:line="73" pos:column="44">DO_NOREV<pos:position pos:line="73" pos:column="52"/></name></expr>;<pos:position pos:line="73" pos:column="53"/></expr_stmt>
				<continue pos:line="74" pos:column="33">continue;<pos:position pos:line="74" pos:column="42"/></continue>
			}<pos:position pos:line="75" pos:column="26"/></block></then></if>
			<if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><operator pos:line="76" pos:column="29">!<pos:position pos:line="76" pos:column="30"/></operator><call><name pos:line="76" pos:column="30">strcmp<pos:position pos:line="76" pos:column="36"/></name><argument_list pos:line="76" pos:column="36">(<argument><expr><name pos:line="76" pos:column="37">arg<pos:position pos:line="76" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="42">"--no-revs"<pos:position pos:line="76" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="55"/></condition><then pos:line="76" pos:column="55"> <block pos:line="76" pos:column="56">{
				<expr_stmt><expr><name pos:line="77" pos:column="33">filter<pos:position pos:line="77" pos:column="39"/></name> <operator pos:line="77" pos:column="40">&amp;=<pos:position pos:line="77" pos:column="46"/></operator> <operator pos:line="77" pos:column="43">~<pos:position pos:line="77" pos:column="44"/></operator><name pos:line="77" pos:column="44">DO_REVS<pos:position pos:line="77" pos:column="51"/></name></expr>;<pos:position pos:line="77" pos:column="52"/></expr_stmt>
				<continue pos:line="78" pos:column="33">continue;<pos:position pos:line="78" pos:column="42"/></continue>
			}<pos:position pos:line="79" pos:column="26"/></block></then></if>
			<if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><operator pos:line="80" pos:column="29">!<pos:position pos:line="80" pos:column="30"/></operator><call><name pos:line="80" pos:column="30">strcmp<pos:position pos:line="80" pos:column="36"/></name><argument_list pos:line="80" pos:column="36">(<argument><expr><name pos:line="80" pos:column="37">arg<pos:position pos:line="80" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="42">"--flags"<pos:position pos:line="80" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="53"/></condition><then pos:line="80" pos:column="53"> <block pos:line="80" pos:column="54">{
				<expr_stmt><expr><name pos:line="81" pos:column="33">filter<pos:position pos:line="81" pos:column="39"/></name> <operator pos:line="81" pos:column="40">&amp;=<pos:position pos:line="81" pos:column="46"/></operator> <operator pos:line="81" pos:column="43">~<pos:position pos:line="81" pos:column="44"/></operator><name pos:line="81" pos:column="44">DO_NONFLAGS<pos:position pos:line="81" pos:column="55"/></name></expr>;<pos:position pos:line="81" pos:column="56"/></expr_stmt>
				<continue pos:line="82" pos:column="33">continue;<pos:position pos:line="82" pos:column="42"/></continue>
			}<pos:position pos:line="83" pos:column="26"/></block></then></if>
			<if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><operator pos:line="84" pos:column="29">!<pos:position pos:line="84" pos:column="30"/></operator><call><name pos:line="84" pos:column="30">strcmp<pos:position pos:line="84" pos:column="36"/></name><argument_list pos:line="84" pos:column="36">(<argument><expr><name pos:line="84" pos:column="37">arg<pos:position pos:line="84" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="42">"--no-flags"<pos:position pos:line="84" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="56"/></condition><then pos:line="84" pos:column="56"> <block pos:line="84" pos:column="57">{
				<expr_stmt><expr><name pos:line="85" pos:column="33">filter<pos:position pos:line="85" pos:column="39"/></name> <operator pos:line="85" pos:column="40">&amp;=<pos:position pos:line="85" pos:column="46"/></operator> <operator pos:line="85" pos:column="43">~<pos:position pos:line="85" pos:column="44"/></operator><name pos:line="85" pos:column="44">DO_FLAGS<pos:position pos:line="85" pos:column="52"/></name></expr>;<pos:position pos:line="85" pos:column="53"/></expr_stmt>
				<continue pos:line="86" pos:column="33">continue;<pos:position pos:line="86" pos:column="42"/></continue>
			}<pos:position pos:line="87" pos:column="26"/></block></then></if>
			<if pos:line="88" pos:column="25">if <condition pos:line="88" pos:column="28">(<expr><operator pos:line="88" pos:column="29">!<pos:position pos:line="88" pos:column="30"/></operator><call><name pos:line="88" pos:column="30">strcmp<pos:position pos:line="88" pos:column="36"/></name><argument_list pos:line="88" pos:column="36">(<argument><expr><name pos:line="88" pos:column="37">arg<pos:position pos:line="88" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="42">"--verify"<pos:position pos:line="88" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="54"/></condition><then pos:line="88" pos:column="54"> <block pos:line="88" pos:column="55">{
				<expr_stmt><expr><name pos:line="89" pos:column="33">filter<pos:position pos:line="89" pos:column="39"/></name> <operator pos:line="89" pos:column="40">&amp;=<pos:position pos:line="89" pos:column="46"/></operator> <operator pos:line="89" pos:column="43">~<pos:position pos:line="89" pos:column="44"/></operator><operator pos:line="89" pos:column="44">(<pos:position pos:line="89" pos:column="45"/></operator><name pos:line="89" pos:column="45">DO_FLAGS<pos:position pos:line="89" pos:column="53"/></name><operator pos:line="89" pos:column="53">|<pos:position pos:line="89" pos:column="54"/></operator><name pos:line="89" pos:column="54">DO_NOREV<pos:position pos:line="89" pos:column="62"/></name><operator pos:line="89" pos:column="62">)<pos:position pos:line="89" pos:column="63"/></operator></expr>;<pos:position pos:line="89" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><name pos:line="90" pos:column="33">verify<pos:position pos:line="90" pos:column="39"/></name> <operator pos:line="90" pos:column="40">=<pos:position pos:line="90" pos:column="41"/></operator> <literal type="number" pos:line="90" pos:column="42">1<pos:position pos:line="90" pos:column="43"/></literal></expr>;<pos:position pos:line="90" pos:column="44"/></expr_stmt>
				<continue pos:line="91" pos:column="33">continue;<pos:position pos:line="91" pos:column="42"/></continue>
			}<pos:position pos:line="92" pos:column="26"/></block></then></if>
			<if pos:line="93" pos:column="25">if <condition pos:line="93" pos:column="28">(<expr><operator pos:line="93" pos:column="29">!<pos:position pos:line="93" pos:column="30"/></operator><call><name pos:line="93" pos:column="30">strcmp<pos:position pos:line="93" pos:column="36"/></name><argument_list pos:line="93" pos:column="36">(<argument><expr><name pos:line="93" pos:column="37">arg<pos:position pos:line="93" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="42">"--quiet"<pos:position pos:line="93" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="52"/></argument_list></call> <operator pos:line="93" pos:column="53">||<pos:position pos:line="93" pos:column="55"/></operator> <operator pos:line="93" pos:column="56">!<pos:position pos:line="93" pos:column="57"/></operator><call><name pos:line="93" pos:column="57">strcmp<pos:position pos:line="93" pos:column="63"/></name><argument_list pos:line="93" pos:column="63">(<argument><expr><name pos:line="93" pos:column="64">arg<pos:position pos:line="93" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="69">"-q"<pos:position pos:line="93" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="75"/></condition><then pos:line="93" pos:column="75"> <block pos:line="93" pos:column="76">{
				<expr_stmt><expr><name pos:line="94" pos:column="33">quiet<pos:position pos:line="94" pos:column="38"/></name> <operator pos:line="94" pos:column="39">=<pos:position pos:line="94" pos:column="40"/></operator> <literal type="number" pos:line="94" pos:column="41">1<pos:position pos:line="94" pos:column="42"/></literal></expr>;<pos:position pos:line="94" pos:column="43"/></expr_stmt>
				<continue pos:line="95" pos:column="33">continue;<pos:position pos:line="95" pos:column="42"/></continue>
			}<pos:position pos:line="96" pos:column="26"/></block></then></if>
			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><operator pos:line="97" pos:column="29">!<pos:position pos:line="97" pos:column="30"/></operator><call><name pos:line="97" pos:column="30">strcmp<pos:position pos:line="97" pos:column="36"/></name><argument_list pos:line="97" pos:column="36">(<argument><expr><name pos:line="97" pos:column="37">arg<pos:position pos:line="97" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="42">"--short"<pos:position pos:line="97" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="52"/></argument_list></call> <operator pos:line="97" pos:column="53">||<pos:position pos:line="97" pos:column="55"/></operator>
			    <call><name pos:line="98" pos:column="29">starts_with<pos:position pos:line="98" pos:column="40"/></name><argument_list pos:line="98" pos:column="40">(<argument><expr><name pos:line="98" pos:column="41">arg<pos:position pos:line="98" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="46">"--short="<pos:position pos:line="98" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="98" pos:column="58"/></condition><then pos:line="98" pos:column="58"> <block pos:line="98" pos:column="59">{
				<expr_stmt><expr><name pos:line="99" pos:column="33">filter<pos:position pos:line="99" pos:column="39"/></name> <operator pos:line="99" pos:column="40">&amp;=<pos:position pos:line="99" pos:column="46"/></operator> <operator pos:line="99" pos:column="43">~<pos:position pos:line="99" pos:column="44"/></operator><operator pos:line="99" pos:column="44">(<pos:position pos:line="99" pos:column="45"/></operator><name pos:line="99" pos:column="45">DO_FLAGS<pos:position pos:line="99" pos:column="53"/></name><operator pos:line="99" pos:column="53">|<pos:position pos:line="99" pos:column="54"/></operator><name pos:line="99" pos:column="54">DO_NOREV<pos:position pos:line="99" pos:column="62"/></name><operator pos:line="99" pos:column="62">)<pos:position pos:line="99" pos:column="63"/></operator></expr>;<pos:position pos:line="99" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><name pos:line="100" pos:column="33">verify<pos:position pos:line="100" pos:column="39"/></name> <operator pos:line="100" pos:column="40">=<pos:position pos:line="100" pos:column="41"/></operator> <literal type="number" pos:line="100" pos:column="42">1<pos:position pos:line="100" pos:column="43"/></literal></expr>;<pos:position pos:line="100" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><name pos:line="101" pos:column="33">abbrev<pos:position pos:line="101" pos:column="39"/></name> <operator pos:line="101" pos:column="40">=<pos:position pos:line="101" pos:column="41"/></operator> <name pos:line="101" pos:column="42">DEFAULT_ABBREV<pos:position pos:line="101" pos:column="56"/></name></expr>;<pos:position pos:line="101" pos:column="57"/></expr_stmt>
				<if pos:line="102" pos:column="33">if <condition pos:line="102" pos:column="36">(<expr><name><name pos:line="102" pos:column="37">arg<pos:position pos:line="102" pos:column="40"/></name><index pos:line="102" pos:column="40">[<expr><literal type="number" pos:line="102" pos:column="41">7<pos:position pos:line="102" pos:column="42"/></literal></expr>]<pos:position pos:line="102" pos:column="43"/></index></name> <operator pos:line="102" pos:column="44">==<pos:position pos:line="102" pos:column="46"/></operator> <literal type="char" pos:line="102" pos:column="47">'='<pos:position pos:line="102" pos:column="50"/></literal></expr>)<pos:position pos:line="102" pos:column="51"/></condition><then pos:line="102" pos:column="51">
					<block type="pseudo"><expr_stmt><expr><name pos:line="103" pos:column="41">abbrev<pos:position pos:line="103" pos:column="47"/></name> <operator pos:line="103" pos:column="48">=<pos:position pos:line="103" pos:column="49"/></operator> <call><name pos:line="103" pos:column="50">strtoul<pos:position pos:line="103" pos:column="57"/></name><argument_list pos:line="103" pos:column="57">(<argument><expr><name pos:line="103" pos:column="58">arg<pos:position pos:line="103" pos:column="61"/></name> <operator pos:line="103" pos:column="62">+<pos:position pos:line="103" pos:column="63"/></operator> <literal type="number" pos:line="103" pos:column="64">8<pos:position pos:line="103" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="67">NULL<pos:position pos:line="103" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="103" pos:column="73">10<pos:position pos:line="103" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="77"/></expr_stmt></block></then></if>
				<if pos:line="104" pos:column="33">if <condition pos:line="104" pos:column="36">(<expr><name pos:line="104" pos:column="37">abbrev<pos:position pos:line="104" pos:column="43"/></name> <operator pos:line="104" pos:column="44">&lt;<pos:position pos:line="104" pos:column="48"/></operator> <name pos:line="104" pos:column="46">MINIMUM_ABBREV<pos:position pos:line="104" pos:column="60"/></name></expr>)<pos:position pos:line="104" pos:column="61"/></condition><then pos:line="104" pos:column="61">
					<block type="pseudo"><expr_stmt><expr><name pos:line="105" pos:column="41">abbrev<pos:position pos:line="105" pos:column="47"/></name> <operator pos:line="105" pos:column="48">=<pos:position pos:line="105" pos:column="49"/></operator> <name pos:line="105" pos:column="50">MINIMUM_ABBREV<pos:position pos:line="105" pos:column="64"/></name></expr>;<pos:position pos:line="105" pos:column="65"/></expr_stmt></block></then>
				<elseif pos:line="106" pos:column="33">else <if pos:line="106" pos:column="38">if <condition pos:line="106" pos:column="41">(<expr><literal type="number" pos:line="106" pos:column="42">40<pos:position pos:line="106" pos:column="44"/></literal> <operator pos:line="106" pos:column="45">&lt;=<pos:position pos:line="106" pos:column="50"/></operator> <name pos:line="106" pos:column="48">abbrev<pos:position pos:line="106" pos:column="54"/></name></expr>)<pos:position pos:line="106" pos:column="55"/></condition><then pos:line="106" pos:column="55">
					<block type="pseudo"><expr_stmt><expr><name pos:line="107" pos:column="41">abbrev<pos:position pos:line="107" pos:column="47"/></name> <operator pos:line="107" pos:column="48">=<pos:position pos:line="107" pos:column="49"/></operator> <literal type="number" pos:line="107" pos:column="50">40<pos:position pos:line="107" pos:column="52"/></literal></expr>;<pos:position pos:line="107" pos:column="53"/></expr_stmt></block></then></if></elseif></if>
				<continue pos:line="108" pos:column="33">continue;<pos:position pos:line="108" pos:column="42"/></continue>
			}<pos:position pos:line="109" pos:column="26"/></block></then></if>
			<if pos:line="110" pos:column="25">if <condition pos:line="110" pos:column="28">(<expr><operator pos:line="110" pos:column="29">!<pos:position pos:line="110" pos:column="30"/></operator><call><name pos:line="110" pos:column="30">strcmp<pos:position pos:line="110" pos:column="36"/></name><argument_list pos:line="110" pos:column="36">(<argument><expr><name pos:line="110" pos:column="37">arg<pos:position pos:line="110" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="42">"--sq"<pos:position pos:line="110" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="110" pos:column="50"/></condition><then pos:line="110" pos:column="50"> <block pos:line="110" pos:column="51">{
				<expr_stmt><expr><name pos:line="111" pos:column="33">output_sq<pos:position pos:line="111" pos:column="42"/></name> <operator pos:line="111" pos:column="43">=<pos:position pos:line="111" pos:column="44"/></operator> <literal type="number" pos:line="111" pos:column="45">1<pos:position pos:line="111" pos:column="46"/></literal></expr>;<pos:position pos:line="111" pos:column="47"/></expr_stmt>
				<continue pos:line="112" pos:column="33">continue;<pos:position pos:line="112" pos:column="42"/></continue>
			}<pos:position pos:line="113" pos:column="26"/></block></then></if>
			<if pos:line="114" pos:column="25">if <condition pos:line="114" pos:column="28">(<expr><operator pos:line="114" pos:column="29">!<pos:position pos:line="114" pos:column="30"/></operator><call><name pos:line="114" pos:column="30">strcmp<pos:position pos:line="114" pos:column="36"/></name><argument_list pos:line="114" pos:column="36">(<argument><expr><name pos:line="114" pos:column="37">arg<pos:position pos:line="114" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="42">"--not"<pos:position pos:line="114" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="114" pos:column="51"/></condition><then pos:line="114" pos:column="51"> <block pos:line="114" pos:column="52">{
				<expr_stmt><expr><name pos:line="115" pos:column="33">show_type<pos:position pos:line="115" pos:column="42"/></name> <operator pos:line="115" pos:column="43">^=<pos:position pos:line="115" pos:column="45"/></operator> <name pos:line="115" pos:column="46">REVERSED<pos:position pos:line="115" pos:column="54"/></name></expr>;<pos:position pos:line="115" pos:column="55"/></expr_stmt>
				<continue pos:line="116" pos:column="33">continue;<pos:position pos:line="116" pos:column="42"/></continue>
			}<pos:position pos:line="117" pos:column="26"/></block></then></if>
			<if pos:line="118" pos:column="25">if <condition pos:line="118" pos:column="28">(<expr><operator pos:line="118" pos:column="29">!<pos:position pos:line="118" pos:column="30"/></operator><call><name pos:line="118" pos:column="30">strcmp<pos:position pos:line="118" pos:column="36"/></name><argument_list pos:line="118" pos:column="36">(<argument><expr><name pos:line="118" pos:column="37">arg<pos:position pos:line="118" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="42">"--symbolic"<pos:position pos:line="118" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="118" pos:column="56"/></condition><then pos:line="118" pos:column="56"> <block pos:line="118" pos:column="57">{
				<expr_stmt><expr><name pos:line="119" pos:column="33">symbolic<pos:position pos:line="119" pos:column="41"/></name> <operator pos:line="119" pos:column="42">=<pos:position pos:line="119" pos:column="43"/></operator> <name pos:line="119" pos:column="44">SHOW_SYMBOLIC_ASIS<pos:position pos:line="119" pos:column="62"/></name></expr>;<pos:position pos:line="119" pos:column="63"/></expr_stmt>
				<continue pos:line="120" pos:column="33">continue;<pos:position pos:line="120" pos:column="42"/></continue>
			}<pos:position pos:line="121" pos:column="26"/></block></then></if>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><operator pos:line="122" pos:column="29">!<pos:position pos:line="122" pos:column="30"/></operator><call><name pos:line="122" pos:column="30">strcmp<pos:position pos:line="122" pos:column="36"/></name><argument_list pos:line="122" pos:column="36">(<argument><expr><name pos:line="122" pos:column="37">arg<pos:position pos:line="122" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="42">"--symbolic-full-name"<pos:position pos:line="122" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="66"/></condition><then pos:line="122" pos:column="66"> <block pos:line="122" pos:column="67">{
				<expr_stmt><expr><name pos:line="123" pos:column="33">symbolic<pos:position pos:line="123" pos:column="41"/></name> <operator pos:line="123" pos:column="42">=<pos:position pos:line="123" pos:column="43"/></operator> <name pos:line="123" pos:column="44">SHOW_SYMBOLIC_FULL<pos:position pos:line="123" pos:column="62"/></name></expr>;<pos:position pos:line="123" pos:column="63"/></expr_stmt>
				<continue pos:line="124" pos:column="33">continue;<pos:position pos:line="124" pos:column="42"/></continue>
			}<pos:position pos:line="125" pos:column="26"/></block></then></if>
			<if pos:line="126" pos:column="25">if <condition pos:line="126" pos:column="28">(<expr><call><name pos:line="126" pos:column="29">starts_with<pos:position pos:line="126" pos:column="40"/></name><argument_list pos:line="126" pos:column="40">(<argument><expr><name pos:line="126" pos:column="41">arg<pos:position pos:line="126" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="126" pos:column="46">"--abbrev-ref"<pos:position pos:line="126" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="61"/></argument_list></call> <operator pos:line="126" pos:column="62">&amp;&amp;<pos:position pos:line="126" pos:column="72"/></operator>
			    <operator pos:line="127" pos:column="29">(<pos:position pos:line="127" pos:column="30"/></operator><operator pos:line="127" pos:column="30">!<pos:position pos:line="127" pos:column="31"/></operator><name><name pos:line="127" pos:column="31">arg<pos:position pos:line="127" pos:column="34"/></name><index pos:line="127" pos:column="34">[<expr><literal type="number" pos:line="127" pos:column="35">12<pos:position pos:line="127" pos:column="37"/></literal></expr>]<pos:position pos:line="127" pos:column="38"/></index></name> <operator pos:line="127" pos:column="39">||<pos:position pos:line="127" pos:column="41"/></operator> <name><name pos:line="127" pos:column="42">arg<pos:position pos:line="127" pos:column="45"/></name><index pos:line="127" pos:column="45">[<expr><literal type="number" pos:line="127" pos:column="46">12<pos:position pos:line="127" pos:column="48"/></literal></expr>]<pos:position pos:line="127" pos:column="49"/></index></name> <operator pos:line="127" pos:column="50">==<pos:position pos:line="127" pos:column="52"/></operator> <literal type="char" pos:line="127" pos:column="53">'='<pos:position pos:line="127" pos:column="56"/></literal><operator pos:line="127" pos:column="56">)<pos:position pos:line="127" pos:column="57"/></operator></expr>)<pos:position pos:line="127" pos:column="58"/></condition><then pos:line="127" pos:column="58"> <block pos:line="127" pos:column="59">{
				<expr_stmt><expr><name pos:line="128" pos:column="33">abbrev_ref<pos:position pos:line="128" pos:column="43"/></name> <operator pos:line="128" pos:column="44">=<pos:position pos:line="128" pos:column="45"/></operator> <literal type="number" pos:line="128" pos:column="46">1<pos:position pos:line="128" pos:column="47"/></literal></expr>;<pos:position pos:line="128" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><name pos:line="129" pos:column="33">abbrev_ref_strict<pos:position pos:line="129" pos:column="50"/></name> <operator pos:line="129" pos:column="51">=<pos:position pos:line="129" pos:column="52"/></operator> <name pos:line="129" pos:column="53">warn_ambiguous_refs<pos:position pos:line="129" pos:column="72"/></name></expr>;<pos:position pos:line="129" pos:column="73"/></expr_stmt>
				<if pos:line="130" pos:column="33">if <condition pos:line="130" pos:column="36">(<expr><name><name pos:line="130" pos:column="37">arg<pos:position pos:line="130" pos:column="40"/></name><index pos:line="130" pos:column="40">[<expr><literal type="number" pos:line="130" pos:column="41">12<pos:position pos:line="130" pos:column="43"/></literal></expr>]<pos:position pos:line="130" pos:column="44"/></index></name> <operator pos:line="130" pos:column="45">==<pos:position pos:line="130" pos:column="47"/></operator> <literal type="char" pos:line="130" pos:column="48">'='<pos:position pos:line="130" pos:column="51"/></literal></expr>)<pos:position pos:line="130" pos:column="52"/></condition><then pos:line="130" pos:column="52"> <block pos:line="130" pos:column="53">{
					<if pos:line="131" pos:column="41">if <condition pos:line="131" pos:column="44">(<expr><operator pos:line="131" pos:column="45">!<pos:position pos:line="131" pos:column="46"/></operator><call><name pos:line="131" pos:column="46">strcmp<pos:position pos:line="131" pos:column="52"/></name><argument_list pos:line="131" pos:column="52">(<argument><expr><name pos:line="131" pos:column="53">arg<pos:position pos:line="131" pos:column="56"/></name> <operator pos:line="131" pos:column="57">+<pos:position pos:line="131" pos:column="58"/></operator> <literal type="number" pos:line="131" pos:column="59">13<pos:position pos:line="131" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="63">"strict"<pos:position pos:line="131" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="131" pos:column="73"/></condition><then pos:line="131" pos:column="73">
						<block type="pseudo"><expr_stmt><expr><name pos:line="132" pos:column="49">abbrev_ref_strict<pos:position pos:line="132" pos:column="66"/></name> <operator pos:line="132" pos:column="67">=<pos:position pos:line="132" pos:column="68"/></operator> <literal type="number" pos:line="132" pos:column="69">1<pos:position pos:line="132" pos:column="70"/></literal></expr>;<pos:position pos:line="132" pos:column="71"/></expr_stmt></block></then>
					<elseif pos:line="133" pos:column="41">else <if pos:line="133" pos:column="46">if <condition pos:line="133" pos:column="49">(<expr><operator pos:line="133" pos:column="50">!<pos:position pos:line="133" pos:column="51"/></operator><call><name pos:line="133" pos:column="51">strcmp<pos:position pos:line="133" pos:column="57"/></name><argument_list pos:line="133" pos:column="57">(<argument><expr><name pos:line="133" pos:column="58">arg<pos:position pos:line="133" pos:column="61"/></name> <operator pos:line="133" pos:column="62">+<pos:position pos:line="133" pos:column="63"/></operator> <literal type="number" pos:line="133" pos:column="64">13<pos:position pos:line="133" pos:column="66"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="68">"loose"<pos:position pos:line="133" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="77"/></condition><then pos:line="133" pos:column="77">
						<block type="pseudo"><expr_stmt><expr><name pos:line="134" pos:column="49">abbrev_ref_strict<pos:position pos:line="134" pos:column="66"/></name> <operator pos:line="134" pos:column="67">=<pos:position pos:line="134" pos:column="68"/></operator> <literal type="number" pos:line="134" pos:column="69">0<pos:position pos:line="134" pos:column="70"/></literal></expr>;<pos:position pos:line="134" pos:column="71"/></expr_stmt></block></then></if></elseif>
					<else pos:line="135" pos:column="41">else
						<block type="pseudo"><expr_stmt><expr><call><name pos:line="136" pos:column="49">die<pos:position pos:line="136" pos:column="52"/></name><argument_list pos:line="136" pos:column="52">(<argument><expr><literal type="string" pos:line="136" pos:column="53">"unknown mode for %s"<pos:position pos:line="136" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="76">arg<pos:position pos:line="136" pos:column="79"/></name></expr></argument>)<pos:position pos:line="136" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="81"/></expr_stmt></block></else></if>
				}<pos:position pos:line="137" pos:column="34"/></block></then></if>
				<continue pos:line="138" pos:column="33">continue;<pos:position pos:line="138" pos:column="42"/></continue>
			}<pos:position pos:line="139" pos:column="26"/></block></then></if>
			<if pos:line="140" pos:column="25">if <condition pos:line="140" pos:column="28">(<expr><operator pos:line="140" pos:column="29">!<pos:position pos:line="140" pos:column="30"/></operator><call><name pos:line="140" pos:column="30">strcmp<pos:position pos:line="140" pos:column="36"/></name><argument_list pos:line="140" pos:column="36">(<argument><expr><name pos:line="140" pos:column="37">arg<pos:position pos:line="140" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="140" pos:column="42">"--all"<pos:position pos:line="140" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="140" pos:column="51"/></condition><then pos:line="140" pos:column="51"> <block pos:line="140" pos:column="52">{
				<expr_stmt><expr><call><name pos:line="141" pos:column="33">for_each_ref<pos:position pos:line="141" pos:column="45"/></name><argument_list pos:line="141" pos:column="45">(<argument><expr><name pos:line="141" pos:column="46">show_reference<pos:position pos:line="141" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="62">NULL<pos:position pos:line="141" pos:column="66"/></name></expr></argument>)<pos:position pos:line="141" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="68"/></expr_stmt>
				<continue pos:line="142" pos:column="33">continue;<pos:position pos:line="142" pos:column="42"/></continue>
			}<pos:position pos:line="143" pos:column="26"/></block></then></if>
			<if pos:line="144" pos:column="25">if <condition pos:line="144" pos:column="28">(<expr><call><name pos:line="144" pos:column="29">starts_with<pos:position pos:line="144" pos:column="40"/></name><argument_list pos:line="144" pos:column="40">(<argument><expr><name pos:line="144" pos:column="41">arg<pos:position pos:line="144" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="144" pos:column="46">"--disambiguate="<pos:position pos:line="144" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="144" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="144" pos:column="65"/></condition><then pos:line="144" pos:column="65"> <block pos:line="144" pos:column="66">{
				<expr_stmt><expr><call><name pos:line="145" pos:column="33">for_each_abbrev<pos:position pos:line="145" pos:column="48"/></name><argument_list pos:line="145" pos:column="48">(<argument><expr><name pos:line="145" pos:column="49">arg<pos:position pos:line="145" pos:column="52"/></name> <operator pos:line="145" pos:column="53">+<pos:position pos:line="145" pos:column="54"/></operator> <literal type="number" pos:line="145" pos:column="55">15<pos:position pos:line="145" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="145" pos:column="59">show_abbrev<pos:position pos:line="145" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="72">NULL<pos:position pos:line="145" pos:column="76"/></name></expr></argument>)<pos:position pos:line="145" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="78"/></expr_stmt>
				<continue pos:line="146" pos:column="33">continue;<pos:position pos:line="146" pos:column="42"/></continue>
			}<pos:position pos:line="147" pos:column="26"/></block></then></if>
			<if pos:line="148" pos:column="25">if <condition pos:line="148" pos:column="28">(<expr><operator pos:line="148" pos:column="29">!<pos:position pos:line="148" pos:column="30"/></operator><call><name pos:line="148" pos:column="30">strcmp<pos:position pos:line="148" pos:column="36"/></name><argument_list pos:line="148" pos:column="36">(<argument><expr><name pos:line="148" pos:column="37">arg<pos:position pos:line="148" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="148" pos:column="42">"--bisect"<pos:position pos:line="148" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="148" pos:column="54"/></condition><then pos:line="148" pos:column="54"> <block pos:line="148" pos:column="55">{
				<expr_stmt><expr><call><name pos:line="149" pos:column="33">for_each_ref_in<pos:position pos:line="149" pos:column="48"/></name><argument_list pos:line="149" pos:column="48">(<argument><expr><literal type="string" pos:line="149" pos:column="49">"refs/bisect/bad"<pos:position pos:line="149" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="149" pos:column="68">show_reference<pos:position pos:line="149" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="84">NULL<pos:position pos:line="149" pos:column="88"/></name></expr></argument>)<pos:position pos:line="149" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="90"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="150" pos:column="33">for_each_ref_in<pos:position pos:line="150" pos:column="48"/></name><argument_list pos:line="150" pos:column="48">(<argument><expr><literal type="string" pos:line="150" pos:column="49">"refs/bisect/good"<pos:position pos:line="150" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="150" pos:column="69">anti_reference<pos:position pos:line="150" pos:column="83"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="85">NULL<pos:position pos:line="150" pos:column="89"/></name></expr></argument>)<pos:position pos:line="150" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="91"/></expr_stmt>
				<continue pos:line="151" pos:column="33">continue;<pos:position pos:line="151" pos:column="42"/></continue>
			}<pos:position pos:line="152" pos:column="26"/></block></then></if>
			<if pos:line="153" pos:column="25">if <condition pos:line="153" pos:column="28">(<expr><call><name pos:line="153" pos:column="29">starts_with<pos:position pos:line="153" pos:column="40"/></name><argument_list pos:line="153" pos:column="40">(<argument><expr><name pos:line="153" pos:column="41">arg<pos:position pos:line="153" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="153" pos:column="46">"--branches="<pos:position pos:line="153" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="153" pos:column="61"/></condition><then pos:line="153" pos:column="61"> <block pos:line="153" pos:column="62">{
				<expr_stmt><expr><call><name pos:line="154" pos:column="33">for_each_glob_ref_in<pos:position pos:line="154" pos:column="53"/></name><argument_list pos:line="154" pos:column="53">(<argument><expr><name pos:line="154" pos:column="54">show_reference<pos:position pos:line="154" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="70">arg<pos:position pos:line="154" pos:column="73"/></name> <operator pos:line="154" pos:column="74">+<pos:position pos:line="154" pos:column="75"/></operator> <literal type="number" pos:line="154" pos:column="76">11<pos:position pos:line="154" pos:column="78"/></literal></expr></argument>,
					<argument><expr><literal type="string" pos:line="155" pos:column="41">"refs/heads/"<pos:position pos:line="155" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="56">NULL<pos:position pos:line="155" pos:column="60"/></name></expr></argument>)<pos:position pos:line="155" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="62"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="156" pos:column="33">clear_ref_exclusion<pos:position pos:line="156" pos:column="52"/></name><argument_list pos:line="156" pos:column="52">(<argument><expr><operator pos:line="156" pos:column="53">&amp;<pos:position pos:line="156" pos:column="58"/></operator><name pos:line="156" pos:column="54">ref_excludes<pos:position pos:line="156" pos:column="66"/></name></expr></argument>)<pos:position pos:line="156" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="68"/></expr_stmt>
				<continue pos:line="157" pos:column="33">continue;<pos:position pos:line="157" pos:column="42"/></continue>
			}<pos:position pos:line="158" pos:column="26"/></block></then></if>
			<if pos:line="159" pos:column="25">if <condition pos:line="159" pos:column="28">(<expr><operator pos:line="159" pos:column="29">!<pos:position pos:line="159" pos:column="30"/></operator><call><name pos:line="159" pos:column="30">strcmp<pos:position pos:line="159" pos:column="36"/></name><argument_list pos:line="159" pos:column="36">(<argument><expr><name pos:line="159" pos:column="37">arg<pos:position pos:line="159" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="42">"--branches"<pos:position pos:line="159" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="159" pos:column="56"/></condition><then pos:line="159" pos:column="56"> <block pos:line="159" pos:column="57">{
				<expr_stmt><expr><call><name pos:line="160" pos:column="33">for_each_branch_ref<pos:position pos:line="160" pos:column="52"/></name><argument_list pos:line="160" pos:column="52">(<argument><expr><name pos:line="160" pos:column="53">show_reference<pos:position pos:line="160" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="69">NULL<pos:position pos:line="160" pos:column="73"/></name></expr></argument>)<pos:position pos:line="160" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="161" pos:column="33">clear_ref_exclusion<pos:position pos:line="161" pos:column="52"/></name><argument_list pos:line="161" pos:column="52">(<argument><expr><operator pos:line="161" pos:column="53">&amp;<pos:position pos:line="161" pos:column="58"/></operator><name pos:line="161" pos:column="54">ref_excludes<pos:position pos:line="161" pos:column="66"/></name></expr></argument>)<pos:position pos:line="161" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="68"/></expr_stmt>
				<continue pos:line="162" pos:column="33">continue;<pos:position pos:line="162" pos:column="42"/></continue>
			}<pos:position pos:line="163" pos:column="26"/></block></then></if>
			<if pos:line="164" pos:column="25">if <condition pos:line="164" pos:column="28">(<expr><call><name pos:line="164" pos:column="29">starts_with<pos:position pos:line="164" pos:column="40"/></name><argument_list pos:line="164" pos:column="40">(<argument><expr><name pos:line="164" pos:column="41">arg<pos:position pos:line="164" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="164" pos:column="46">"--tags="<pos:position pos:line="164" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="164" pos:column="57"/></condition><then pos:line="164" pos:column="57"> <block pos:line="164" pos:column="58">{
				<expr_stmt><expr><call><name pos:line="165" pos:column="33">for_each_glob_ref_in<pos:position pos:line="165" pos:column="53"/></name><argument_list pos:line="165" pos:column="53">(<argument><expr><name pos:line="165" pos:column="54">show_reference<pos:position pos:line="165" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="70">arg<pos:position pos:line="165" pos:column="73"/></name> <operator pos:line="165" pos:column="74">+<pos:position pos:line="165" pos:column="75"/></operator> <literal type="number" pos:line="165" pos:column="76">7<pos:position pos:line="165" pos:column="77"/></literal></expr></argument>,
					<argument><expr><literal type="string" pos:line="166" pos:column="41">"refs/tags/"<pos:position pos:line="166" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="55">NULL<pos:position pos:line="166" pos:column="59"/></name></expr></argument>)<pos:position pos:line="166" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="61"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="167" pos:column="33">clear_ref_exclusion<pos:position pos:line="167" pos:column="52"/></name><argument_list pos:line="167" pos:column="52">(<argument><expr><operator pos:line="167" pos:column="53">&amp;<pos:position pos:line="167" pos:column="58"/></operator><name pos:line="167" pos:column="54">ref_excludes<pos:position pos:line="167" pos:column="66"/></name></expr></argument>)<pos:position pos:line="167" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="68"/></expr_stmt>
				<continue pos:line="168" pos:column="33">continue;<pos:position pos:line="168" pos:column="42"/></continue>
			}<pos:position pos:line="169" pos:column="26"/></block></then></if>
			<if pos:line="170" pos:column="25">if <condition pos:line="170" pos:column="28">(<expr><operator pos:line="170" pos:column="29">!<pos:position pos:line="170" pos:column="30"/></operator><call><name pos:line="170" pos:column="30">strcmp<pos:position pos:line="170" pos:column="36"/></name><argument_list pos:line="170" pos:column="36">(<argument><expr><name pos:line="170" pos:column="37">arg<pos:position pos:line="170" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="170" pos:column="42">"--tags"<pos:position pos:line="170" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="170" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="170" pos:column="52"/></condition><then pos:line="170" pos:column="52"> <block pos:line="170" pos:column="53">{
				<expr_stmt><expr><call><name pos:line="171" pos:column="33">for_each_tag_ref<pos:position pos:line="171" pos:column="49"/></name><argument_list pos:line="171" pos:column="49">(<argument><expr><name pos:line="171" pos:column="50">show_reference<pos:position pos:line="171" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="66">NULL<pos:position pos:line="171" pos:column="70"/></name></expr></argument>)<pos:position pos:line="171" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="72"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="172" pos:column="33">clear_ref_exclusion<pos:position pos:line="172" pos:column="52"/></name><argument_list pos:line="172" pos:column="52">(<argument><expr><operator pos:line="172" pos:column="53">&amp;<pos:position pos:line="172" pos:column="58"/></operator><name pos:line="172" pos:column="54">ref_excludes<pos:position pos:line="172" pos:column="66"/></name></expr></argument>)<pos:position pos:line="172" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="68"/></expr_stmt>
				<continue pos:line="173" pos:column="33">continue;<pos:position pos:line="173" pos:column="42"/></continue>
			}<pos:position pos:line="174" pos:column="26"/></block></then></if>
			<if pos:line="175" pos:column="25">if <condition pos:line="175" pos:column="28">(<expr><call><name pos:line="175" pos:column="29">starts_with<pos:position pos:line="175" pos:column="40"/></name><argument_list pos:line="175" pos:column="40">(<argument><expr><name pos:line="175" pos:column="41">arg<pos:position pos:line="175" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="175" pos:column="46">"--glob="<pos:position pos:line="175" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="175" pos:column="57"/></condition><then pos:line="175" pos:column="57"> <block pos:line="175" pos:column="58">{
				<expr_stmt><expr><call><name pos:line="176" pos:column="33">for_each_glob_ref<pos:position pos:line="176" pos:column="50"/></name><argument_list pos:line="176" pos:column="50">(<argument><expr><name pos:line="176" pos:column="51">show_reference<pos:position pos:line="176" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="67">arg<pos:position pos:line="176" pos:column="70"/></name> <operator pos:line="176" pos:column="71">+<pos:position pos:line="176" pos:column="72"/></operator> <literal type="number" pos:line="176" pos:column="73">7<pos:position pos:line="176" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="176" pos:column="76">NULL<pos:position pos:line="176" pos:column="80"/></name></expr></argument>)<pos:position pos:line="176" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="82"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="177" pos:column="33">clear_ref_exclusion<pos:position pos:line="177" pos:column="52"/></name><argument_list pos:line="177" pos:column="52">(<argument><expr><operator pos:line="177" pos:column="53">&amp;<pos:position pos:line="177" pos:column="58"/></operator><name pos:line="177" pos:column="54">ref_excludes<pos:position pos:line="177" pos:column="66"/></name></expr></argument>)<pos:position pos:line="177" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="68"/></expr_stmt>
				<continue pos:line="178" pos:column="33">continue;<pos:position pos:line="178" pos:column="42"/></continue>
			}<pos:position pos:line="179" pos:column="26"/></block></then></if>
			<if pos:line="180" pos:column="25">if <condition pos:line="180" pos:column="28">(<expr><call><name pos:line="180" pos:column="29">starts_with<pos:position pos:line="180" pos:column="40"/></name><argument_list pos:line="180" pos:column="40">(<argument><expr><name pos:line="180" pos:column="41">arg<pos:position pos:line="180" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="180" pos:column="46">"--remotes="<pos:position pos:line="180" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="180" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="180" pos:column="60"/></condition><then pos:line="180" pos:column="60"> <block pos:line="180" pos:column="61">{
				<expr_stmt><expr><call><name pos:line="181" pos:column="33">for_each_glob_ref_in<pos:position pos:line="181" pos:column="53"/></name><argument_list pos:line="181" pos:column="53">(<argument><expr><name pos:line="181" pos:column="54">show_reference<pos:position pos:line="181" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="181" pos:column="70">arg<pos:position pos:line="181" pos:column="73"/></name> <operator pos:line="181" pos:column="74">+<pos:position pos:line="181" pos:column="75"/></operator> <literal type="number" pos:line="181" pos:column="76">10<pos:position pos:line="181" pos:column="78"/></literal></expr></argument>,
					<argument><expr><literal type="string" pos:line="182" pos:column="41">"refs/remotes/"<pos:position pos:line="182" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="182" pos:column="58">NULL<pos:position pos:line="182" pos:column="62"/></name></expr></argument>)<pos:position pos:line="182" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="183" pos:column="33">clear_ref_exclusion<pos:position pos:line="183" pos:column="52"/></name><argument_list pos:line="183" pos:column="52">(<argument><expr><operator pos:line="183" pos:column="53">&amp;<pos:position pos:line="183" pos:column="58"/></operator><name pos:line="183" pos:column="54">ref_excludes<pos:position pos:line="183" pos:column="66"/></name></expr></argument>)<pos:position pos:line="183" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="68"/></expr_stmt>
				<continue pos:line="184" pos:column="33">continue;<pos:position pos:line="184" pos:column="42"/></continue>
			}<pos:position pos:line="185" pos:column="26"/></block></then></if>
			<if pos:line="186" pos:column="25">if <condition pos:line="186" pos:column="28">(<expr><operator pos:line="186" pos:column="29">!<pos:position pos:line="186" pos:column="30"/></operator><call><name pos:line="186" pos:column="30">strcmp<pos:position pos:line="186" pos:column="36"/></name><argument_list pos:line="186" pos:column="36">(<argument><expr><name pos:line="186" pos:column="37">arg<pos:position pos:line="186" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="186" pos:column="42">"--remotes"<pos:position pos:line="186" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="186" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="186" pos:column="55"/></condition><then pos:line="186" pos:column="55"> <block pos:line="186" pos:column="56">{
				<expr_stmt><expr><call><name pos:line="187" pos:column="33">for_each_remote_ref<pos:position pos:line="187" pos:column="52"/></name><argument_list pos:line="187" pos:column="52">(<argument><expr><name pos:line="187" pos:column="53">show_reference<pos:position pos:line="187" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="69">NULL<pos:position pos:line="187" pos:column="73"/></name></expr></argument>)<pos:position pos:line="187" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="188" pos:column="33">clear_ref_exclusion<pos:position pos:line="188" pos:column="52"/></name><argument_list pos:line="188" pos:column="52">(<argument><expr><operator pos:line="188" pos:column="53">&amp;<pos:position pos:line="188" pos:column="58"/></operator><name pos:line="188" pos:column="54">ref_excludes<pos:position pos:line="188" pos:column="66"/></name></expr></argument>)<pos:position pos:line="188" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="68"/></expr_stmt>
				<continue pos:line="189" pos:column="33">continue;<pos:position pos:line="189" pos:column="42"/></continue>
			}<pos:position pos:line="190" pos:column="26"/></block></then></if>
			<if pos:line="191" pos:column="25">if <condition pos:line="191" pos:column="28">(<expr><call><name pos:line="191" pos:column="29">starts_with<pos:position pos:line="191" pos:column="40"/></name><argument_list pos:line="191" pos:column="40">(<argument><expr><name pos:line="191" pos:column="41">arg<pos:position pos:line="191" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="191" pos:column="46">"--exclude="<pos:position pos:line="191" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="191" pos:column="60"/></condition><then pos:line="191" pos:column="60"> <block pos:line="191" pos:column="61">{
				<expr_stmt><expr><call><name pos:line="192" pos:column="33">add_ref_exclusion<pos:position pos:line="192" pos:column="50"/></name><argument_list pos:line="192" pos:column="50">(<argument><expr><operator pos:line="192" pos:column="51">&amp;<pos:position pos:line="192" pos:column="56"/></operator><name pos:line="192" pos:column="52">ref_excludes<pos:position pos:line="192" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="66">arg<pos:position pos:line="192" pos:column="69"/></name> <operator pos:line="192" pos:column="70">+<pos:position pos:line="192" pos:column="71"/></operator> <literal type="number" pos:line="192" pos:column="72">10<pos:position pos:line="192" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="192" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="76"/></expr_stmt>
				<continue pos:line="193" pos:column="33">continue;<pos:position pos:line="193" pos:column="42"/></continue>
			}<pos:position pos:line="194" pos:column="26"/></block></then></if>
			<if pos:line="195" pos:column="25">if <condition pos:line="195" pos:column="28">(<expr><operator pos:line="195" pos:column="29">!<pos:position pos:line="195" pos:column="30"/></operator><call><name pos:line="195" pos:column="30">strcmp<pos:position pos:line="195" pos:column="36"/></name><argument_list pos:line="195" pos:column="36">(<argument><expr><name pos:line="195" pos:column="37">arg<pos:position pos:line="195" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="195" pos:column="42">"--local-env-vars"<pos:position pos:line="195" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="195" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="195" pos:column="62"/></condition><then pos:line="195" pos:column="62"> <block pos:line="195" pos:column="63">{
				<decl_stmt><decl><type><name pos:line="196" pos:column="33">int<pos:position pos:line="196" pos:column="36"/></name></type> <name pos:line="196" pos:column="37">i<pos:position pos:line="196" pos:column="38"/></name></decl>;<pos:position pos:line="196" pos:column="39"/></decl_stmt>
				<for pos:line="197" pos:column="33">for <control pos:line="197" pos:column="37">(<init><expr><name pos:line="197" pos:column="38">i<pos:position pos:line="197" pos:column="39"/></name> <operator pos:line="197" pos:column="40">=<pos:position pos:line="197" pos:column="41"/></operator> <literal type="number" pos:line="197" pos:column="42">0<pos:position pos:line="197" pos:column="43"/></literal></expr>;<pos:position pos:line="197" pos:column="44"/></init> <condition><expr><name><name pos:line="197" pos:column="45">local_repo_env<pos:position pos:line="197" pos:column="59"/></name><index pos:line="197" pos:column="59">[<expr><name pos:line="197" pos:column="60">i<pos:position pos:line="197" pos:column="61"/></name></expr>]<pos:position pos:line="197" pos:column="62"/></index></name></expr>;<pos:position pos:line="197" pos:column="63"/></condition> <incr><expr><name pos:line="197" pos:column="64">i<pos:position pos:line="197" pos:column="65"/></name><operator pos:line="197" pos:column="65">++<pos:position pos:line="197" pos:column="67"/></operator></expr></incr>)<pos:position pos:line="197" pos:column="68"/></control>
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="198" pos:column="41">printf<pos:position pos:line="198" pos:column="47"/></name><argument_list pos:line="198" pos:column="47">(<argument><expr><literal type="string" pos:line="198" pos:column="48">"%s\n"<pos:position pos:line="198" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="198" pos:column="56">local_repo_env<pos:position pos:line="198" pos:column="70"/></name><index pos:line="198" pos:column="70">[<expr><name pos:line="198" pos:column="71">i<pos:position pos:line="198" pos:column="72"/></name></expr>]<pos:position pos:line="198" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="198" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="75"/></expr_stmt></block></for>
				<continue pos:line="199" pos:column="33">continue;<pos:position pos:line="199" pos:column="42"/></continue>
			}<pos:position pos:line="200" pos:column="26"/></block></then></if>
			<if pos:line="201" pos:column="25">if <condition pos:line="201" pos:column="28">(<expr><operator pos:line="201" pos:column="29">!<pos:position pos:line="201" pos:column="30"/></operator><call><name pos:line="201" pos:column="30">strcmp<pos:position pos:line="201" pos:column="36"/></name><argument_list pos:line="201" pos:column="36">(<argument><expr><name pos:line="201" pos:column="37">arg<pos:position pos:line="201" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="201" pos:column="42">"--show-toplevel"<pos:position pos:line="201" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="201" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="201" pos:column="61"/></condition><then pos:line="201" pos:column="61"> <block pos:line="201" pos:column="62">{
				<decl_stmt><decl><type><specifier pos:line="202" pos:column="33">const<pos:position pos:line="202" pos:column="38"/></specifier> <name pos:line="202" pos:column="39">char<pos:position pos:line="202" pos:column="43"/></name> <modifier pos:line="202" pos:column="44">*<pos:position pos:line="202" pos:column="45"/></modifier></type><name pos:line="202" pos:column="45">work_tree<pos:position pos:line="202" pos:column="54"/></name> <init pos:line="202" pos:column="55">= <expr><call><name pos:line="202" pos:column="57">get_git_work_tree<pos:position pos:line="202" pos:column="74"/></name><argument_list pos:line="202" pos:column="74">()<pos:position pos:line="202" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="202" pos:column="77"/></decl_stmt>
				<if pos:line="203" pos:column="33">if <condition pos:line="203" pos:column="36">(<expr><name pos:line="203" pos:column="37">work_tree<pos:position pos:line="203" pos:column="46"/></name></expr>)<pos:position pos:line="203" pos:column="47"/></condition><then pos:line="203" pos:column="47">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="204" pos:column="41">puts<pos:position pos:line="204" pos:column="45"/></name><argument_list pos:line="204" pos:column="45">(<argument><expr><name pos:line="204" pos:column="46">work_tree<pos:position pos:line="204" pos:column="55"/></name></expr></argument>)<pos:position pos:line="204" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="57"/></expr_stmt></block></then></if>
				<continue pos:line="205" pos:column="33">continue;<pos:position pos:line="205" pos:column="42"/></continue>
			}<pos:position pos:line="206" pos:column="26"/></block></then></if>
			<if pos:line="207" pos:column="25">if <condition pos:line="207" pos:column="28">(<expr><operator pos:line="207" pos:column="29">!<pos:position pos:line="207" pos:column="30"/></operator><call><name pos:line="207" pos:column="30">strcmp<pos:position pos:line="207" pos:column="36"/></name><argument_list pos:line="207" pos:column="36">(<argument><expr><name pos:line="207" pos:column="37">arg<pos:position pos:line="207" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="207" pos:column="42">"--show-prefix"<pos:position pos:line="207" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="207" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="207" pos:column="59"/></condition><then pos:line="207" pos:column="59"> <block pos:line="207" pos:column="60">{
				<if pos:line="208" pos:column="33">if <condition pos:line="208" pos:column="36">(<expr><name pos:line="208" pos:column="37">prefix<pos:position pos:line="208" pos:column="43"/></name></expr>)<pos:position pos:line="208" pos:column="44"/></condition><then pos:line="208" pos:column="44">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="209" pos:column="41">puts<pos:position pos:line="209" pos:column="45"/></name><argument_list pos:line="209" pos:column="45">(<argument><expr><name pos:line="209" pos:column="46">prefix<pos:position pos:line="209" pos:column="52"/></name></expr></argument>)<pos:position pos:line="209" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="54"/></expr_stmt></block></then>
				<else pos:line="210" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="211" pos:column="41">putchar<pos:position pos:line="211" pos:column="48"/></name><argument_list pos:line="211" pos:column="48">(<argument><expr><literal type="char" pos:line="211" pos:column="49">'\n'<pos:position pos:line="211" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="211" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="55"/></expr_stmt></block></else></if>
				<continue pos:line="212" pos:column="33">continue;<pos:position pos:line="212" pos:column="42"/></continue>
			}<pos:position pos:line="213" pos:column="26"/></block></then></if>
			<if pos:line="214" pos:column="25">if <condition pos:line="214" pos:column="28">(<expr><operator pos:line="214" pos:column="29">!<pos:position pos:line="214" pos:column="30"/></operator><call><name pos:line="214" pos:column="30">strcmp<pos:position pos:line="214" pos:column="36"/></name><argument_list pos:line="214" pos:column="36">(<argument><expr><name pos:line="214" pos:column="37">arg<pos:position pos:line="214" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="214" pos:column="42">"--show-cdup"<pos:position pos:line="214" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="214" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="214" pos:column="57"/></condition><then pos:line="214" pos:column="57"> <block pos:line="214" pos:column="58">{
				<decl_stmt><decl><type><specifier pos:line="215" pos:column="33">const<pos:position pos:line="215" pos:column="38"/></specifier> <name pos:line="215" pos:column="39">char<pos:position pos:line="215" pos:column="43"/></name> <modifier pos:line="215" pos:column="44">*<pos:position pos:line="215" pos:column="45"/></modifier></type><name pos:line="215" pos:column="45">pfx<pos:position pos:line="215" pos:column="48"/></name> <init pos:line="215" pos:column="49">= <expr><name pos:line="215" pos:column="51">prefix<pos:position pos:line="215" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="215" pos:column="58"/></decl_stmt>
				<if pos:line="216" pos:column="33">if <condition pos:line="216" pos:column="36">(<expr><operator pos:line="216" pos:column="37">!<pos:position pos:line="216" pos:column="38"/></operator><call><name pos:line="216" pos:column="38">is_inside_work_tree<pos:position pos:line="216" pos:column="57"/></name><argument_list pos:line="216" pos:column="57">()<pos:position pos:line="216" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="216" pos:column="60"/></condition><then pos:line="216" pos:column="60"> <block pos:line="216" pos:column="61">{
					<decl_stmt><decl><type><specifier pos:line="217" pos:column="41">const<pos:position pos:line="217" pos:column="46"/></specifier> <name pos:line="217" pos:column="47">char<pos:position pos:line="217" pos:column="51"/></name> <modifier pos:line="217" pos:column="52">*<pos:position pos:line="217" pos:column="53"/></modifier></type><name pos:line="217" pos:column="53">work_tree<pos:position pos:line="217" pos:column="62"/></name> <init pos:line="217" pos:column="63">=
						<expr><call><name pos:line="218" pos:column="49">get_git_work_tree<pos:position pos:line="218" pos:column="66"/></name><argument_list pos:line="218" pos:column="66">()<pos:position pos:line="218" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="218" pos:column="69"/></decl_stmt>
					<if pos:line="219" pos:column="41">if <condition pos:line="219" pos:column="44">(<expr><name pos:line="219" pos:column="45">work_tree<pos:position pos:line="219" pos:column="54"/></name></expr>)<pos:position pos:line="219" pos:column="55"/></condition><then pos:line="219" pos:column="55">
						<block type="pseudo"><expr_stmt><expr><call><name pos:line="220" pos:column="49">printf<pos:position pos:line="220" pos:column="55"/></name><argument_list pos:line="220" pos:column="55">(<argument><expr><literal type="string" pos:line="220" pos:column="56">"%s\n"<pos:position pos:line="220" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="220" pos:column="64">work_tree<pos:position pos:line="220" pos:column="73"/></name></expr></argument>)<pos:position pos:line="220" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="75"/></expr_stmt></block></then></if>
					<continue pos:line="221" pos:column="41">continue;<pos:position pos:line="221" pos:column="50"/></continue>
				}<pos:position pos:line="222" pos:column="34"/></block></then></if>
				<while pos:line="223" pos:column="33">while <condition pos:line="223" pos:column="39">(<expr><name pos:line="223" pos:column="40">pfx<pos:position pos:line="223" pos:column="43"/></name></expr>)<pos:position pos:line="223" pos:column="44"/></condition> <block pos:line="223" pos:column="45">{
					<expr_stmt><expr><name pos:line="224" pos:column="41">pfx<pos:position pos:line="224" pos:column="44"/></name> <operator pos:line="224" pos:column="45">=<pos:position pos:line="224" pos:column="46"/></operator> <call><name pos:line="224" pos:column="47">strchr<pos:position pos:line="224" pos:column="53"/></name><argument_list pos:line="224" pos:column="53">(<argument><expr><name pos:line="224" pos:column="54">pfx<pos:position pos:line="224" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="224" pos:column="59">'/'<pos:position pos:line="224" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="224" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="64"/></expr_stmt>
					<if pos:line="225" pos:column="41">if <condition pos:line="225" pos:column="44">(<expr><name pos:line="225" pos:column="45">pfx<pos:position pos:line="225" pos:column="48"/></name></expr>)<pos:position pos:line="225" pos:column="49"/></condition><then pos:line="225" pos:column="49"> <block pos:line="225" pos:column="50">{
						<expr_stmt><expr><name pos:line="226" pos:column="49">pfx<pos:position pos:line="226" pos:column="52"/></name><operator pos:line="226" pos:column="52">++<pos:position pos:line="226" pos:column="54"/></operator></expr>;<pos:position pos:line="226" pos:column="55"/></expr_stmt>
						<expr_stmt><expr><call><name pos:line="227" pos:column="49">printf<pos:position pos:line="227" pos:column="55"/></name><argument_list pos:line="227" pos:column="55">(<argument><expr><literal type="string" pos:line="227" pos:column="56">"../"<pos:position pos:line="227" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="227" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="227" pos:column="63"/></expr_stmt>
					}<pos:position pos:line="228" pos:column="42"/></block></then></if>
				}<pos:position pos:line="229" pos:column="34"/></block></while>
				<expr_stmt><expr><call><name pos:line="230" pos:column="33">putchar<pos:position pos:line="230" pos:column="40"/></name><argument_list pos:line="230" pos:column="40">(<argument><expr><literal type="char" pos:line="230" pos:column="41">'\n'<pos:position pos:line="230" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="230" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="47"/></expr_stmt>
				<continue pos:line="231" pos:column="33">continue;<pos:position pos:line="231" pos:column="42"/></continue>
			}<pos:position pos:line="232" pos:column="26"/></block></then></if>
			<if pos:line="233" pos:column="25">if <condition pos:line="233" pos:column="28">(<expr><operator pos:line="233" pos:column="29">!<pos:position pos:line="233" pos:column="30"/></operator><call><name pos:line="233" pos:column="30">strcmp<pos:position pos:line="233" pos:column="36"/></name><argument_list pos:line="233" pos:column="36">(<argument><expr><name pos:line="233" pos:column="37">arg<pos:position pos:line="233" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="233" pos:column="42">"--git-dir"<pos:position pos:line="233" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="233" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="233" pos:column="55"/></condition><then pos:line="233" pos:column="55"> <block pos:line="233" pos:column="56">{
				<decl_stmt><decl><type><specifier pos:line="234" pos:column="33">const<pos:position pos:line="234" pos:column="38"/></specifier> <name pos:line="234" pos:column="39">char<pos:position pos:line="234" pos:column="43"/></name> <modifier pos:line="234" pos:column="44">*<pos:position pos:line="234" pos:column="45"/></modifier></type><name pos:line="234" pos:column="45">gitdir<pos:position pos:line="234" pos:column="51"/></name> <init pos:line="234" pos:column="52">= <expr><call><name pos:line="234" pos:column="54">getenv<pos:position pos:line="234" pos:column="60"/></name><argument_list pos:line="234" pos:column="60">(<argument><expr><name pos:line="234" pos:column="61">GIT_DIR_ENVIRONMENT<pos:position pos:line="234" pos:column="80"/></name></expr></argument>)<pos:position pos:line="234" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="234" pos:column="82"/></decl_stmt>
				<decl_stmt><decl><specifier pos:line="235" pos:column="33">static<pos:position pos:line="235" pos:column="39"/></specifier> <type><name pos:line="235" pos:column="40">char<pos:position pos:line="235" pos:column="44"/></name></type> <name><name pos:line="235" pos:column="45">cwd<pos:position pos:line="235" pos:column="48"/></name><index pos:line="235" pos:column="48">[<expr><name pos:line="235" pos:column="49">PATH_MAX<pos:position pos:line="235" pos:column="57"/></name></expr>]<pos:position pos:line="235" pos:column="58"/></index></name></decl>;<pos:position pos:line="235" pos:column="59"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="236" pos:column="33">int<pos:position pos:line="236" pos:column="36"/></name></type> <name pos:line="236" pos:column="37">len<pos:position pos:line="236" pos:column="40"/></name></decl>;<pos:position pos:line="236" pos:column="41"/></decl_stmt>
				<if pos:line="237" pos:column="33">if <condition pos:line="237" pos:column="36">(<expr><name pos:line="237" pos:column="37">gitdir<pos:position pos:line="237" pos:column="43"/></name></expr>)<pos:position pos:line="237" pos:column="44"/></condition><then pos:line="237" pos:column="44"> <block pos:line="237" pos:column="45">{
					<expr_stmt><expr><call><name pos:line="238" pos:column="41">puts<pos:position pos:line="238" pos:column="45"/></name><argument_list pos:line="238" pos:column="45">(<argument><expr><name pos:line="238" pos:column="46">gitdir<pos:position pos:line="238" pos:column="52"/></name></expr></argument>)<pos:position pos:line="238" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="54"/></expr_stmt>
					<continue pos:line="239" pos:column="41">continue;<pos:position pos:line="239" pos:column="50"/></continue>
				}<pos:position pos:line="240" pos:column="34"/></block></then></if>
				<if pos:line="241" pos:column="33">if <condition pos:line="241" pos:column="36">(<expr><operator pos:line="241" pos:column="37">!<pos:position pos:line="241" pos:column="38"/></operator><name pos:line="241" pos:column="38">prefix<pos:position pos:line="241" pos:column="44"/></name></expr>)<pos:position pos:line="241" pos:column="45"/></condition><then pos:line="241" pos:column="45"> <block pos:line="241" pos:column="46">{
					<expr_stmt><expr><call><name pos:line="242" pos:column="41">puts<pos:position pos:line="242" pos:column="45"/></name><argument_list pos:line="242" pos:column="45">(<argument><expr><literal type="string" pos:line="242" pos:column="46">".git"<pos:position pos:line="242" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="242" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="54"/></expr_stmt>
					<continue pos:line="243" pos:column="41">continue;<pos:position pos:line="243" pos:column="50"/></continue>
				}<pos:position pos:line="244" pos:column="34"/></block></then></if>
				<if pos:line="245" pos:column="33">if <condition pos:line="245" pos:column="36">(<expr><operator pos:line="245" pos:column="37">!<pos:position pos:line="245" pos:column="38"/></operator><call><name pos:line="245" pos:column="38">getcwd<pos:position pos:line="245" pos:column="44"/></name><argument_list pos:line="245" pos:column="44">(<argument><expr><name pos:line="245" pos:column="45">cwd<pos:position pos:line="245" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="245" pos:column="50">PATH_MAX<pos:position pos:line="245" pos:column="58"/></name></expr></argument>)<pos:position pos:line="245" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="245" pos:column="60"/></condition><then pos:line="245" pos:column="60">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="246" pos:column="41">die_errno<pos:position pos:line="246" pos:column="50"/></name><argument_list pos:line="246" pos:column="50">(<argument><expr><literal type="string" pos:line="246" pos:column="51">"unable to get current working directory"<pos:position pos:line="246" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="246" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="94"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name pos:line="247" pos:column="33">len<pos:position pos:line="247" pos:column="36"/></name> <operator pos:line="247" pos:column="37">=<pos:position pos:line="247" pos:column="38"/></operator> <call><name pos:line="247" pos:column="39">strlen<pos:position pos:line="247" pos:column="45"/></name><argument_list pos:line="247" pos:column="45">(<argument><expr><name pos:line="247" pos:column="46">cwd<pos:position pos:line="247" pos:column="49"/></name></expr></argument>)<pos:position pos:line="247" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="248" pos:column="33">printf<pos:position pos:line="248" pos:column="39"/></name><argument_list pos:line="248" pos:column="39">(<argument><expr><literal type="string" pos:line="248" pos:column="40">"%s%s.git\n"<pos:position pos:line="248" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="248" pos:column="54">cwd<pos:position pos:line="248" pos:column="57"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="248" pos:column="59">len<pos:position pos:line="248" pos:column="62"/></name> <operator pos:line="248" pos:column="63">&amp;&amp;<pos:position pos:line="248" pos:column="73"/></operator> <name><name pos:line="248" pos:column="66">cwd<pos:position pos:line="248" pos:column="69"/></name><index pos:line="248" pos:column="69">[<expr><name pos:line="248" pos:column="70">len<pos:position pos:line="248" pos:column="73"/></name><operator pos:line="248" pos:column="73">-<pos:position pos:line="248" pos:column="74"/></operator><literal type="number" pos:line="248" pos:column="74">1<pos:position pos:line="248" pos:column="75"/></literal></expr>]<pos:position pos:line="248" pos:column="76"/></index></name> <operator pos:line="248" pos:column="77">!=<pos:position pos:line="248" pos:column="79"/></operator> <literal type="char" pos:line="248" pos:column="80">'/'<pos:position pos:line="248" pos:column="83"/></literal></expr> ?<pos:position pos:line="248" pos:column="85"/></condition><then pos:line="248" pos:column="85"> <expr><literal type="string" pos:line="248" pos:column="86">"/"<pos:position pos:line="248" pos:column="89"/></literal></expr> <pos:position pos:line="248" pos:column="90"/></then><else pos:line="248" pos:column="90">: <expr><literal type="string" pos:line="248" pos:column="92">""<pos:position pos:line="248" pos:column="94"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="248" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="96"/></expr_stmt>
				<continue pos:line="249" pos:column="33">continue;<pos:position pos:line="249" pos:column="42"/></continue>
			}<pos:position pos:line="250" pos:column="26"/></block></then></if>
			<if pos:line="251" pos:column="25">if <condition pos:line="251" pos:column="28">(<expr><operator pos:line="251" pos:column="29">!<pos:position pos:line="251" pos:column="30"/></operator><call><name pos:line="251" pos:column="30">strcmp<pos:position pos:line="251" pos:column="36"/></name><argument_list pos:line="251" pos:column="36">(<argument><expr><name pos:line="251" pos:column="37">arg<pos:position pos:line="251" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="251" pos:column="42">"--resolve-git-dir"<pos:position pos:line="251" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="251" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="251" pos:column="63"/></condition><then pos:line="251" pos:column="63"> <block pos:line="251" pos:column="64">{
				<decl_stmt><decl><type><specifier pos:line="252" pos:column="33">const<pos:position pos:line="252" pos:column="38"/></specifier> <name pos:line="252" pos:column="39">char<pos:position pos:line="252" pos:column="43"/></name> <modifier pos:line="252" pos:column="44">*<pos:position pos:line="252" pos:column="45"/></modifier></type><name pos:line="252" pos:column="45">gitdir<pos:position pos:line="252" pos:column="51"/></name> <init pos:line="252" pos:column="52">= <expr><name><name pos:line="252" pos:column="54">argv<pos:position pos:line="252" pos:column="58"/></name><index pos:line="252" pos:column="58">[<expr><operator pos:line="252" pos:column="59">++<pos:position pos:line="252" pos:column="61"/></operator><name pos:line="252" pos:column="61">i<pos:position pos:line="252" pos:column="62"/></name></expr>]<pos:position pos:line="252" pos:column="63"/></index></name></expr></init></decl>;<pos:position pos:line="252" pos:column="64"/></decl_stmt>
				<if pos:line="253" pos:column="33">if <condition pos:line="253" pos:column="36">(<expr><operator pos:line="253" pos:column="37">!<pos:position pos:line="253" pos:column="38"/></operator><name pos:line="253" pos:column="38">gitdir<pos:position pos:line="253" pos:column="44"/></name></expr>)<pos:position pos:line="253" pos:column="45"/></condition><then pos:line="253" pos:column="45">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="254" pos:column="41">die<pos:position pos:line="254" pos:column="44"/></name><argument_list pos:line="254" pos:column="44">(<argument><expr><literal type="string" pos:line="254" pos:column="45">"--resolve-git-dir requires an argument"<pos:position pos:line="254" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="254" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="87"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name pos:line="255" pos:column="33">gitdir<pos:position pos:line="255" pos:column="39"/></name> <operator pos:line="255" pos:column="40">=<pos:position pos:line="255" pos:column="41"/></operator> <call><name pos:line="255" pos:column="42">resolve_gitdir<pos:position pos:line="255" pos:column="56"/></name><argument_list pos:line="255" pos:column="56">(<argument><expr><name pos:line="255" pos:column="57">gitdir<pos:position pos:line="255" pos:column="63"/></name></expr></argument>)<pos:position pos:line="255" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="65"/></expr_stmt>
				<if pos:line="256" pos:column="33">if <condition pos:line="256" pos:column="36">(<expr><operator pos:line="256" pos:column="37">!<pos:position pos:line="256" pos:column="38"/></operator><name pos:line="256" pos:column="38">gitdir<pos:position pos:line="256" pos:column="44"/></name></expr>)<pos:position pos:line="256" pos:column="45"/></condition><then pos:line="256" pos:column="45">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="257" pos:column="41">die<pos:position pos:line="257" pos:column="44"/></name><argument_list pos:line="257" pos:column="44">(<argument><expr><literal type="string" pos:line="257" pos:column="45">"not a gitdir '%s'"<pos:position pos:line="257" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="257" pos:column="66">argv<pos:position pos:line="257" pos:column="70"/></name><index pos:line="257" pos:column="70">[<expr><name pos:line="257" pos:column="71">i<pos:position pos:line="257" pos:column="72"/></name></expr>]<pos:position pos:line="257" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="257" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="75"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="258" pos:column="33">puts<pos:position pos:line="258" pos:column="37"/></name><argument_list pos:line="258" pos:column="37">(<argument><expr><name pos:line="258" pos:column="38">gitdir<pos:position pos:line="258" pos:column="44"/></name></expr></argument>)<pos:position pos:line="258" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="46"/></expr_stmt>
				<continue pos:line="259" pos:column="33">continue;<pos:position pos:line="259" pos:column="42"/></continue>
			}<pos:position pos:line="260" pos:column="26"/></block></then></if>
			<if pos:line="261" pos:column="25">if <condition pos:line="261" pos:column="28">(<expr><operator pos:line="261" pos:column="29">!<pos:position pos:line="261" pos:column="30"/></operator><call><name pos:line="261" pos:column="30">strcmp<pos:position pos:line="261" pos:column="36"/></name><argument_list pos:line="261" pos:column="36">(<argument><expr><name pos:line="261" pos:column="37">arg<pos:position pos:line="261" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="261" pos:column="42">"--is-inside-git-dir"<pos:position pos:line="261" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="261" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="261" pos:column="65"/></condition><then pos:line="261" pos:column="65"> <block pos:line="261" pos:column="66">{
				<expr_stmt><expr><call><name pos:line="262" pos:column="33">printf<pos:position pos:line="262" pos:column="39"/></name><argument_list pos:line="262" pos:column="39">(<argument><expr><literal type="string" pos:line="262" pos:column="40">"%s\n"<pos:position pos:line="262" pos:column="46"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name pos:line="262" pos:column="48">is_inside_git_dir<pos:position pos:line="262" pos:column="65"/></name><argument_list pos:line="262" pos:column="65">()<pos:position pos:line="262" pos:column="67"/></argument_list></call></expr> ?<pos:position pos:line="262" pos:column="69"/></condition><then pos:line="262" pos:column="69"> <expr><literal type="string" pos:line="262" pos:column="70">"true"<pos:position pos:line="262" pos:column="76"/></literal></expr>
						<pos:position pos:line="263" pos:column="7"/></then><else pos:line="263" pos:column="49">: <expr><literal type="string" pos:line="263" pos:column="51">"false"<pos:position pos:line="263" pos:column="58"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="263" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="60"/></expr_stmt>
				<continue pos:line="264" pos:column="33">continue;<pos:position pos:line="264" pos:column="42"/></continue>
			}<pos:position pos:line="265" pos:column="26"/></block></then></if>
			<if pos:line="266" pos:column="25">if <condition pos:line="266" pos:column="28">(<expr><operator pos:line="266" pos:column="29">!<pos:position pos:line="266" pos:column="30"/></operator><call><name pos:line="266" pos:column="30">strcmp<pos:position pos:line="266" pos:column="36"/></name><argument_list pos:line="266" pos:column="36">(<argument><expr><name pos:line="266" pos:column="37">arg<pos:position pos:line="266" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="266" pos:column="42">"--is-inside-work-tree"<pos:position pos:line="266" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="266" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="266" pos:column="67"/></condition><then pos:line="266" pos:column="67"> <block pos:line="266" pos:column="68">{
				<expr_stmt><expr><call><name pos:line="267" pos:column="33">printf<pos:position pos:line="267" pos:column="39"/></name><argument_list pos:line="267" pos:column="39">(<argument><expr><literal type="string" pos:line="267" pos:column="40">"%s\n"<pos:position pos:line="267" pos:column="46"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name pos:line="267" pos:column="48">is_inside_work_tree<pos:position pos:line="267" pos:column="67"/></name><argument_list pos:line="267" pos:column="67">()<pos:position pos:line="267" pos:column="69"/></argument_list></call></expr> ?<pos:position pos:line="267" pos:column="71"/></condition><then pos:line="267" pos:column="71"> <expr><literal type="string" pos:line="267" pos:column="72">"true"<pos:position pos:line="267" pos:column="78"/></literal></expr>
						<pos:position pos:line="268" pos:column="7"/></then><else pos:line="268" pos:column="49">: <expr><literal type="string" pos:line="268" pos:column="51">"false"<pos:position pos:line="268" pos:column="58"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="268" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="268" pos:column="60"/></expr_stmt>
				<continue pos:line="269" pos:column="33">continue;<pos:position pos:line="269" pos:column="42"/></continue>
			}<pos:position pos:line="270" pos:column="26"/></block></then></if>
			<if pos:line="271" pos:column="25">if <condition pos:line="271" pos:column="28">(<expr><operator pos:line="271" pos:column="29">!<pos:position pos:line="271" pos:column="30"/></operator><call><name pos:line="271" pos:column="30">strcmp<pos:position pos:line="271" pos:column="36"/></name><argument_list pos:line="271" pos:column="36">(<argument><expr><name pos:line="271" pos:column="37">arg<pos:position pos:line="271" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="271" pos:column="42">"--is-bare-repository"<pos:position pos:line="271" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="271" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="271" pos:column="66"/></condition><then pos:line="271" pos:column="66"> <block pos:line="271" pos:column="67">{
				<expr_stmt><expr><call><name pos:line="272" pos:column="33">printf<pos:position pos:line="272" pos:column="39"/></name><argument_list pos:line="272" pos:column="39">(<argument><expr><literal type="string" pos:line="272" pos:column="40">"%s\n"<pos:position pos:line="272" pos:column="46"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name pos:line="272" pos:column="48">is_bare_repository<pos:position pos:line="272" pos:column="66"/></name><argument_list pos:line="272" pos:column="66">()<pos:position pos:line="272" pos:column="68"/></argument_list></call></expr> ?<pos:position pos:line="272" pos:column="70"/></condition><then pos:line="272" pos:column="70"> <expr><literal type="string" pos:line="272" pos:column="71">"true"<pos:position pos:line="272" pos:column="77"/></literal></expr>
						<pos:position pos:line="273" pos:column="7"/></then><else pos:line="273" pos:column="49">: <expr><literal type="string" pos:line="273" pos:column="51">"false"<pos:position pos:line="273" pos:column="58"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="273" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="60"/></expr_stmt>
				<continue pos:line="274" pos:column="33">continue;<pos:position pos:line="274" pos:column="42"/></continue>
			}<pos:position pos:line="275" pos:column="26"/></block></then></if>
			<if pos:line="276" pos:column="25">if <condition pos:line="276" pos:column="28">(<expr><operator pos:line="276" pos:column="29">!<pos:position pos:line="276" pos:column="30"/></operator><call><name pos:line="276" pos:column="30">strcmp<pos:position pos:line="276" pos:column="36"/></name><argument_list pos:line="276" pos:column="36">(<argument><expr><name pos:line="276" pos:column="37">arg<pos:position pos:line="276" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="276" pos:column="42">"--shared-index-path"<pos:position pos:line="276" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="276" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="276" pos:column="65"/></condition><then pos:line="276" pos:column="65"> <block pos:line="276" pos:column="66">{
				<if pos:line="277" pos:column="33">if <condition pos:line="277" pos:column="36">(<expr><call><name pos:line="277" pos:column="37">read_cache<pos:position pos:line="277" pos:column="47"/></name><argument_list pos:line="277" pos:column="47">()<pos:position pos:line="277" pos:column="49"/></argument_list></call> <operator pos:line="277" pos:column="50">&lt;<pos:position pos:line="277" pos:column="54"/></operator> <literal type="number" pos:line="277" pos:column="52">0<pos:position pos:line="277" pos:column="53"/></literal></expr>)<pos:position pos:line="277" pos:column="54"/></condition><then pos:line="277" pos:column="54">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="278" pos:column="41">die<pos:position pos:line="278" pos:column="44"/></name><argument_list pos:line="278" pos:column="44">(<argument><expr><call><name pos:line="278" pos:column="45">_<pos:position pos:line="278" pos:column="46"/></name><argument_list pos:line="278" pos:column="46">(<argument><expr><literal type="string" pos:line="278" pos:column="47">"Could not read the index"<pos:position pos:line="278" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="278" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="278" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="278" pos:column="76"/></expr_stmt></block></then></if>
				<if pos:line="279" pos:column="33">if <condition pos:line="279" pos:column="36">(<expr><name><name pos:line="279" pos:column="37">the_index<pos:position pos:line="279" pos:column="46"/></name><operator pos:line="279" pos:column="46">.<pos:position pos:line="279" pos:column="47"/></operator><name pos:line="279" pos:column="47">split_index<pos:position pos:line="279" pos:column="58"/></name></name></expr>)<pos:position pos:line="279" pos:column="59"/></condition><then pos:line="279" pos:column="59"> <block pos:line="279" pos:column="60">{
					<decl_stmt><decl><type><specifier pos:line="280" pos:column="41">const<pos:position pos:line="280" pos:column="46"/></specifier> <name pos:line="280" pos:column="47">unsigned<pos:position pos:line="280" pos:column="55"/></name> <name pos:line="280" pos:column="56">char<pos:position pos:line="280" pos:column="60"/></name> <modifier pos:line="280" pos:column="61">*<pos:position pos:line="280" pos:column="62"/></modifier></type><name pos:line="280" pos:column="62">sha1<pos:position pos:line="280" pos:column="66"/></name> <init pos:line="280" pos:column="67">= <expr><name><name pos:line="280" pos:column="69">the_index<pos:position pos:line="280" pos:column="78"/></name><operator pos:line="280" pos:column="78">.<pos:position pos:line="280" pos:column="79"/></operator><name pos:line="280" pos:column="79">split_index<pos:position pos:line="280" pos:column="90"/></name><operator pos:line="280" pos:column="90">-&gt;<pos:position pos:line="280" pos:column="95"/></operator><name pos:line="280" pos:column="92">base_sha1<pos:position pos:line="280" pos:column="101"/></name></name></expr></init></decl>;<pos:position pos:line="280" pos:column="102"/></decl_stmt>
					<expr_stmt><expr><call><name pos:line="281" pos:column="41">puts<pos:position pos:line="281" pos:column="45"/></name><argument_list pos:line="281" pos:column="45">(<argument><expr><call><name pos:line="281" pos:column="46">git_path<pos:position pos:line="281" pos:column="54"/></name><argument_list pos:line="281" pos:column="54">(<argument><expr><literal type="string" pos:line="281" pos:column="55">"sharedindex.%s"<pos:position pos:line="281" pos:column="71"/></literal></expr></argument>, <argument><expr><call><name pos:line="281" pos:column="73">sha1_to_hex<pos:position pos:line="281" pos:column="84"/></name><argument_list pos:line="281" pos:column="84">(<argument><expr><name pos:line="281" pos:column="85">sha1<pos:position pos:line="281" pos:column="89"/></name></expr></argument>)<pos:position pos:line="281" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="281" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="281" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="281" pos:column="93"/></expr_stmt>
				}<pos:position pos:line="282" pos:column="34"/></block></then></if>
				<continue pos:line="283" pos:column="33">continue;<pos:position pos:line="283" pos:column="42"/></continue>
			}<pos:position pos:line="284" pos:column="26"/></block></then></if>
			<if pos:line="285" pos:column="25">if <condition pos:line="285" pos:column="28">(<expr><call><name pos:line="285" pos:column="29">starts_with<pos:position pos:line="285" pos:column="40"/></name><argument_list pos:line="285" pos:column="40">(<argument><expr><name pos:line="285" pos:column="41">arg<pos:position pos:line="285" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="285" pos:column="46">"--since="<pos:position pos:line="285" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="285" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="285" pos:column="58"/></condition><then pos:line="285" pos:column="58"> <block pos:line="285" pos:column="59">{
				<expr_stmt><expr><call><name pos:line="286" pos:column="33">show_datestring<pos:position pos:line="286" pos:column="48"/></name><argument_list pos:line="286" pos:column="48">(<argument><expr><literal type="string" pos:line="286" pos:column="49">"--max-age="<pos:position pos:line="286" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="286" pos:column="63">arg<pos:position pos:line="286" pos:column="66"/></name><operator pos:line="286" pos:column="66">+<pos:position pos:line="286" pos:column="67"/></operator><literal type="number" pos:line="286" pos:column="67">8<pos:position pos:line="286" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="286" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="286" pos:column="70"/></expr_stmt>
				<continue pos:line="287" pos:column="33">continue;<pos:position pos:line="287" pos:column="42"/></continue>
			}<pos:position pos:line="288" pos:column="26"/></block></then></if>
			<if pos:line="289" pos:column="25">if <condition pos:line="289" pos:column="28">(<expr><call><name pos:line="289" pos:column="29">starts_with<pos:position pos:line="289" pos:column="40"/></name><argument_list pos:line="289" pos:column="40">(<argument><expr><name pos:line="289" pos:column="41">arg<pos:position pos:line="289" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="289" pos:column="46">"--after="<pos:position pos:line="289" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="289" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="289" pos:column="58"/></condition><then pos:line="289" pos:column="58"> <block pos:line="289" pos:column="59">{
				<expr_stmt><expr><call><name pos:line="290" pos:column="33">show_datestring<pos:position pos:line="290" pos:column="48"/></name><argument_list pos:line="290" pos:column="48">(<argument><expr><literal type="string" pos:line="290" pos:column="49">"--max-age="<pos:position pos:line="290" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="290" pos:column="63">arg<pos:position pos:line="290" pos:column="66"/></name><operator pos:line="290" pos:column="66">+<pos:position pos:line="290" pos:column="67"/></operator><literal type="number" pos:line="290" pos:column="67">8<pos:position pos:line="290" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="290" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="70"/></expr_stmt>
				<continue pos:line="291" pos:column="33">continue;<pos:position pos:line="291" pos:column="42"/></continue>
			}<pos:position pos:line="292" pos:column="26"/></block></then></if>
			<if pos:line="293" pos:column="25">if <condition pos:line="293" pos:column="28">(<expr><call><name pos:line="293" pos:column="29">starts_with<pos:position pos:line="293" pos:column="40"/></name><argument_list pos:line="293" pos:column="40">(<argument><expr><name pos:line="293" pos:column="41">arg<pos:position pos:line="293" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="293" pos:column="46">"--before="<pos:position pos:line="293" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="293" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="293" pos:column="59"/></condition><then pos:line="293" pos:column="59"> <block pos:line="293" pos:column="60">{
				<expr_stmt><expr><call><name pos:line="294" pos:column="33">show_datestring<pos:position pos:line="294" pos:column="48"/></name><argument_list pos:line="294" pos:column="48">(<argument><expr><literal type="string" pos:line="294" pos:column="49">"--min-age="<pos:position pos:line="294" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="294" pos:column="63">arg<pos:position pos:line="294" pos:column="66"/></name><operator pos:line="294" pos:column="66">+<pos:position pos:line="294" pos:column="67"/></operator><literal type="number" pos:line="294" pos:column="67">9<pos:position pos:line="294" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="294" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="294" pos:column="70"/></expr_stmt>
				<continue pos:line="295" pos:column="33">continue;<pos:position pos:line="295" pos:column="42"/></continue>
			}<pos:position pos:line="296" pos:column="26"/></block></then></if>
			<if pos:line="297" pos:column="25">if <condition pos:line="297" pos:column="28">(<expr><call><name pos:line="297" pos:column="29">starts_with<pos:position pos:line="297" pos:column="40"/></name><argument_list pos:line="297" pos:column="40">(<argument><expr><name pos:line="297" pos:column="41">arg<pos:position pos:line="297" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="297" pos:column="46">"--until="<pos:position pos:line="297" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="297" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="297" pos:column="58"/></condition><then pos:line="297" pos:column="58"> <block pos:line="297" pos:column="59">{
				<expr_stmt><expr><call><name pos:line="298" pos:column="33">show_datestring<pos:position pos:line="298" pos:column="48"/></name><argument_list pos:line="298" pos:column="48">(<argument><expr><literal type="string" pos:line="298" pos:column="49">"--min-age="<pos:position pos:line="298" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="298" pos:column="63">arg<pos:position pos:line="298" pos:column="66"/></name><operator pos:line="298" pos:column="66">+<pos:position pos:line="298" pos:column="67"/></operator><literal type="number" pos:line="298" pos:column="67">8<pos:position pos:line="298" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="298" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="298" pos:column="70"/></expr_stmt>
				<continue pos:line="299" pos:column="33">continue;<pos:position pos:line="299" pos:column="42"/></continue>
			}<pos:position pos:line="300" pos:column="26"/></block></then></if>
			<if pos:line="301" pos:column="25">if <condition pos:line="301" pos:column="28">(<expr><call><name pos:line="301" pos:column="29">show_flag<pos:position pos:line="301" pos:column="38"/></name><argument_list pos:line="301" pos:column="38">(<argument><expr><name pos:line="301" pos:column="39">arg<pos:position pos:line="301" pos:column="42"/></name></expr></argument>)<pos:position pos:line="301" pos:column="43"/></argument_list></call> <operator pos:line="301" pos:column="44">&amp;&amp;<pos:position pos:line="301" pos:column="54"/></operator> <name pos:line="301" pos:column="47">verify<pos:position pos:line="301" pos:column="53"/></name></expr>)<pos:position pos:line="301" pos:column="54"/></condition><then pos:line="301" pos:column="54">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="302" pos:column="33">die_no_single_rev<pos:position pos:line="302" pos:column="50"/></name><argument_list pos:line="302" pos:column="50">(<argument><expr><name pos:line="302" pos:column="51">quiet<pos:position pos:line="302" pos:column="56"/></name></expr></argument>)<pos:position pos:line="302" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="302" pos:column="58"/></expr_stmt></block></then></if>
			<continue pos:line="303" pos:column="25">continue;<pos:position pos:line="303" pos:column="34"/></continue>
		}<pos:position pos:line="304" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="306" pos:column="17">/* Not a flag argument */</comment>
		<if pos:line="307" pos:column="17">if <condition pos:line="307" pos:column="20">(<expr><call><name pos:line="307" pos:column="21">try_difference<pos:position pos:line="307" pos:column="35"/></name><argument_list pos:line="307" pos:column="35">(<argument><expr><name pos:line="307" pos:column="36">arg<pos:position pos:line="307" pos:column="39"/></name></expr></argument>)<pos:position pos:line="307" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="307" pos:column="41"/></condition><then pos:line="307" pos:column="41">
			<block type="pseudo"><continue pos:line="308" pos:column="25">continue;<pos:position pos:line="308" pos:column="34"/></continue></block></then></if>
		<if pos:line="309" pos:column="17">if <condition pos:line="309" pos:column="20">(<expr><call><name pos:line="309" pos:column="21">try_parent_shorthands<pos:position pos:line="309" pos:column="42"/></name><argument_list pos:line="309" pos:column="42">(<argument><expr><name pos:line="309" pos:column="43">arg<pos:position pos:line="309" pos:column="46"/></name></expr></argument>)<pos:position pos:line="309" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="309" pos:column="48"/></condition><then pos:line="309" pos:column="48">
			<block type="pseudo"><continue pos:line="310" pos:column="25">continue;<pos:position pos:line="310" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="311" pos:column="17">name<pos:position pos:line="311" pos:column="21"/></name> <operator pos:line="311" pos:column="22">=<pos:position pos:line="311" pos:column="23"/></operator> <name pos:line="311" pos:column="24">arg<pos:position pos:line="311" pos:column="27"/></name></expr>;<pos:position pos:line="311" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="312" pos:column="17">type<pos:position pos:line="312" pos:column="21"/></name> <operator pos:line="312" pos:column="22">=<pos:position pos:line="312" pos:column="23"/></operator> <name pos:line="312" pos:column="24">NORMAL<pos:position pos:line="312" pos:column="30"/></name></expr>;<pos:position pos:line="312" pos:column="31"/></expr_stmt>
		<if pos:line="313" pos:column="17">if <condition pos:line="313" pos:column="20">(<expr><operator pos:line="313" pos:column="21">*<pos:position pos:line="313" pos:column="22"/></operator><name pos:line="313" pos:column="22">arg<pos:position pos:line="313" pos:column="25"/></name> <operator pos:line="313" pos:column="26">==<pos:position pos:line="313" pos:column="28"/></operator> <literal type="char" pos:line="313" pos:column="29">'^'<pos:position pos:line="313" pos:column="32"/></literal></expr>)<pos:position pos:line="313" pos:column="33"/></condition><then pos:line="313" pos:column="33"> <block pos:line="313" pos:column="34">{
			<expr_stmt><expr><name pos:line="314" pos:column="25">name<pos:position pos:line="314" pos:column="29"/></name><operator pos:line="314" pos:column="29">++<pos:position pos:line="314" pos:column="31"/></operator></expr>;<pos:position pos:line="314" pos:column="32"/></expr_stmt>
			<expr_stmt><expr><name pos:line="315" pos:column="25">type<pos:position pos:line="315" pos:column="29"/></name> <operator pos:line="315" pos:column="30">=<pos:position pos:line="315" pos:column="31"/></operator> <name pos:line="315" pos:column="32">REVERSED<pos:position pos:line="315" pos:column="40"/></name></expr>;<pos:position pos:line="315" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="316" pos:column="18"/></block></then></if>
		<if pos:line="317" pos:column="17">if <condition pos:line="317" pos:column="20">(<expr><operator pos:line="317" pos:column="21">!<pos:position pos:line="317" pos:column="22"/></operator><call><name pos:line="317" pos:column="22">get_sha1<pos:position pos:line="317" pos:column="30"/></name><argument_list pos:line="317" pos:column="30">(<argument><expr><name pos:line="317" pos:column="31">name<pos:position pos:line="317" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="317" pos:column="37">sha1<pos:position pos:line="317" pos:column="41"/></name></expr></argument>)<pos:position pos:line="317" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="317" pos:column="43"/></condition><then pos:line="317" pos:column="43"> <block pos:line="317" pos:column="44">{
			<if pos:line="318" pos:column="25">if <condition pos:line="318" pos:column="28">(<expr><name pos:line="318" pos:column="29">verify<pos:position pos:line="318" pos:column="35"/></name></expr>)<pos:position pos:line="318" pos:column="36"/></condition><then pos:line="318" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><name pos:line="319" pos:column="33">revs_count<pos:position pos:line="319" pos:column="43"/></name><operator pos:line="319" pos:column="43">++<pos:position pos:line="319" pos:column="45"/></operator></expr>;<pos:position pos:line="319" pos:column="46"/></expr_stmt></block></then>
			<else pos:line="320" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="321" pos:column="33">show_rev<pos:position pos:line="321" pos:column="41"/></name><argument_list pos:line="321" pos:column="41">(<argument><expr><name pos:line="321" pos:column="42">type<pos:position pos:line="321" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="321" pos:column="48">sha1<pos:position pos:line="321" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="321" pos:column="54">name<pos:position pos:line="321" pos:column="58"/></name></expr></argument>)<pos:position pos:line="321" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="60"/></expr_stmt></block></else></if>
			<continue pos:line="322" pos:column="25">continue;<pos:position pos:line="322" pos:column="34"/></continue>
		}<pos:position pos:line="323" pos:column="18"/></block></then></if>
		<if pos:line="324" pos:column="17">if <condition pos:line="324" pos:column="20">(<expr><name pos:line="324" pos:column="21">verify<pos:position pos:line="324" pos:column="27"/></name></expr>)<pos:position pos:line="324" pos:column="28"/></condition><then pos:line="324" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="325" pos:column="25">die_no_single_rev<pos:position pos:line="325" pos:column="42"/></name><argument_list pos:line="325" pos:column="42">(<argument><expr><name pos:line="325" pos:column="43">quiet<pos:position pos:line="325" pos:column="48"/></name></expr></argument>)<pos:position pos:line="325" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="325" pos:column="50"/></expr_stmt></block></then></if>
		<if pos:line="326" pos:column="17">if <condition pos:line="326" pos:column="20">(<expr><name pos:line="326" pos:column="21">has_dashdash<pos:position pos:line="326" pos:column="33"/></name></expr>)<pos:position pos:line="326" pos:column="34"/></condition><then pos:line="326" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="327" pos:column="25">die<pos:position pos:line="327" pos:column="28"/></name><argument_list pos:line="327" pos:column="28">(<argument><expr><literal type="string" pos:line="327" pos:column="29">"bad revision '%s'"<pos:position pos:line="327" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="327" pos:column="50">arg<pos:position pos:line="327" pos:column="53"/></name></expr></argument>)<pos:position pos:line="327" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="327" pos:column="55"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="328" pos:column="17">as_is<pos:position pos:line="328" pos:column="22"/></name> <operator pos:line="328" pos:column="23">=<pos:position pos:line="328" pos:column="24"/></operator> <literal type="number" pos:line="328" pos:column="25">1<pos:position pos:line="328" pos:column="26"/></literal></expr>;<pos:position pos:line="328" pos:column="27"/></expr_stmt>
		<if pos:line="329" pos:column="17">if <condition pos:line="329" pos:column="20">(<expr><operator pos:line="329" pos:column="21">!<pos:position pos:line="329" pos:column="22"/></operator><call><name pos:line="329" pos:column="22">show_file<pos:position pos:line="329" pos:column="31"/></name><argument_list pos:line="329" pos:column="31">(<argument><expr><name pos:line="329" pos:column="32">arg<pos:position pos:line="329" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="329" pos:column="37">output_prefix<pos:position pos:line="329" pos:column="50"/></name></expr></argument>)<pos:position pos:line="329" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="329" pos:column="52"/></condition><then pos:line="329" pos:column="52">
			<block type="pseudo"><continue pos:line="330" pos:column="25">continue;<pos:position pos:line="330" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><call><name pos:line="331" pos:column="17">verify_filename<pos:position pos:line="331" pos:column="32"/></name><argument_list pos:line="331" pos:column="32">(<argument><expr><name pos:line="331" pos:column="33">prefix<pos:position pos:line="331" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="331" pos:column="41">arg<pos:position pos:line="331" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="331" pos:column="46">1<pos:position pos:line="331" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="331" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="331" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="332" pos:column="10"/></block></for>
	<if pos:line="333" pos:column="9">if <condition pos:line="333" pos:column="12">(<expr><name pos:line="333" pos:column="13">verify<pos:position pos:line="333" pos:column="19"/></name></expr>)<pos:position pos:line="333" pos:column="20"/></condition><then pos:line="333" pos:column="20"> <block pos:line="333" pos:column="21">{
		<if pos:line="334" pos:column="17">if <condition pos:line="334" pos:column="20">(<expr><name pos:line="334" pos:column="21">revs_count<pos:position pos:line="334" pos:column="31"/></name> <operator pos:line="334" pos:column="32">==<pos:position pos:line="334" pos:column="34"/></operator> <literal type="number" pos:line="334" pos:column="35">1<pos:position pos:line="334" pos:column="36"/></literal></expr>)<pos:position pos:line="334" pos:column="37"/></condition><then pos:line="334" pos:column="37"> <block pos:line="334" pos:column="38">{
			<expr_stmt><expr><call><name pos:line="335" pos:column="25">show_rev<pos:position pos:line="335" pos:column="33"/></name><argument_list pos:line="335" pos:column="33">(<argument><expr><name pos:line="335" pos:column="34">type<pos:position pos:line="335" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="335" pos:column="40">sha1<pos:position pos:line="335" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="335" pos:column="46">name<pos:position pos:line="335" pos:column="50"/></name></expr></argument>)<pos:position pos:line="335" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="335" pos:column="52"/></expr_stmt>
			<return pos:line="336" pos:column="25">return <expr><literal type="number" pos:line="336" pos:column="32">0<pos:position pos:line="336" pos:column="33"/></literal></expr>;<pos:position pos:line="336" pos:column="34"/></return>
		}<pos:position pos:line="337" pos:column="18"/></block></then> <elseif pos:line="337" pos:column="19">else <if pos:line="337" pos:column="24">if <condition pos:line="337" pos:column="27">(<expr><name pos:line="337" pos:column="28">revs_count<pos:position pos:line="337" pos:column="38"/></name> <operator pos:line="337" pos:column="39">==<pos:position pos:line="337" pos:column="41"/></operator> <literal type="number" pos:line="337" pos:column="42">0<pos:position pos:line="337" pos:column="43"/></literal> <operator pos:line="337" pos:column="44">&amp;&amp;<pos:position pos:line="337" pos:column="54"/></operator> <call><name pos:line="337" pos:column="47">show_default<pos:position pos:line="337" pos:column="59"/></name><argument_list pos:line="337" pos:column="59">()<pos:position pos:line="337" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="337" pos:column="62"/></condition><then pos:line="337" pos:column="62">
			<block type="pseudo"><return pos:line="338" pos:column="25">return <expr><literal type="number" pos:line="338" pos:column="32">0<pos:position pos:line="338" pos:column="33"/></literal></expr>;<pos:position pos:line="338" pos:column="34"/></return></block></then></if></elseif></if>
		<expr_stmt><expr><call><name pos:line="339" pos:column="17">die_no_single_rev<pos:position pos:line="339" pos:column="34"/></name><argument_list pos:line="339" pos:column="34">(<argument><expr><name pos:line="339" pos:column="35">quiet<pos:position pos:line="339" pos:column="40"/></name></expr></argument>)<pos:position pos:line="339" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="339" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="340" pos:column="10"/></block></then> <else pos:line="340" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="341" pos:column="17">show_default<pos:position pos:line="341" pos:column="29"/></name><argument_list pos:line="341" pos:column="29">()<pos:position pos:line="341" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="341" pos:column="32"/></expr_stmt></block></else></if>
	<return pos:line="342" pos:column="9">return <expr><literal type="number" pos:line="342" pos:column="16">0<pos:position pos:line="342" pos:column="17"/></literal></expr>;<pos:position pos:line="342" pos:column="18"/></return>
}<pos:position pos:line="343" pos:column="2"/></block></function></unit>
