<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1563_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sha1_loose_object_info<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">unsigned<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">sha1<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
				  <parameter><decl><type><name><name pos:line="2" pos:column="35">struct<pos:position pos:line="2" pos:column="41"/></name> <name pos:line="2" pos:column="42">object_info<pos:position pos:line="2" pos:column="53"/></name></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">oi<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">mapsize<pos:position pos:line="5" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="32">size<pos:position pos:line="5" pos:column="36"/></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">void<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">map<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">git_zstream<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">stream<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name></type> <name><name pos:line="8" pos:column="14">hdr<pos:position pos:line="8" pos:column="17"/></name><index pos:line="8" pos:column="17">[<expr><literal type="number" pos:line="8" pos:column="18">32<pos:position pos:line="8" pos:column="20"/></literal></expr>]<pos:position pos:line="8" pos:column="21"/></index></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">oi<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">-&gt;<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="17">delta_base_sha1<pos:position pos:line="10" pos:column="32"/></name></name></expr>)<pos:position pos:line="10" pos:column="33"/></condition><then pos:line="10" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">hashclr<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name><name pos:line="11" pos:column="25">oi<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">-&gt;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="29">delta_base_sha1<pos:position pos:line="11" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/*
	 * If we don't care about type or size, then we don't
	 * need to look inside the object at all. Note that we
	 * do not optimize out the stat call, even if the
	 * caller doesn't care about the disk-size, since our
	 * return value implicitly indicates whether the
	 * object even exists.
	 */</comment>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">!<pos:position pos:line="21" pos:column="14"/></operator><name><name pos:line="21" pos:column="14">oi<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">typep<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">&amp;&amp;<pos:position pos:line="21" pos:column="34"/></operator> <operator pos:line="21" pos:column="27">!<pos:position pos:line="21" pos:column="28"/></operator><name><name pos:line="21" pos:column="28">oi<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">-&gt;<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="32">sizep<pos:position pos:line="21" pos:column="37"/></name></name></expr>)<pos:position pos:line="21" pos:column="38"/></condition><then pos:line="21" pos:column="38"> <block pos:line="21" pos:column="39">{
		<decl_stmt><decl><type><name><name pos:line="22" pos:column="17">struct<pos:position pos:line="22" pos:column="23"/></name> <name pos:line="22" pos:column="24">stat<pos:position pos:line="22" pos:column="28"/></name></name></type> <name pos:line="22" pos:column="29">st<pos:position pos:line="22" pos:column="31"/></name></decl>;<pos:position pos:line="22" pos:column="32"/></decl_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><call><name pos:line="23" pos:column="21">stat_sha1_file<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><name pos:line="23" pos:column="36">sha1<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="42">&amp;<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="43">st<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call> <operator pos:line="23" pos:column="47">&lt;<pos:position pos:line="23" pos:column="51"/></operator> <literal type="number" pos:line="23" pos:column="49">0<pos:position pos:line="23" pos:column="50"/></literal></expr>)<pos:position pos:line="23" pos:column="51"/></condition><then pos:line="23" pos:column="51">
			<block type="pseudo"><return pos:line="24" pos:column="25">return <expr><operator pos:line="24" pos:column="32">-<pos:position pos:line="24" pos:column="33"/></operator><literal type="number" pos:line="24" pos:column="33">1<pos:position pos:line="24" pos:column="34"/></literal></expr>;<pos:position pos:line="24" pos:column="35"/></return></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name><name pos:line="25" pos:column="21">oi<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">-&gt;<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="25">disk_sizep<pos:position pos:line="25" pos:column="35"/></name></name></expr>)<pos:position pos:line="25" pos:column="36"/></condition><then pos:line="25" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="26" pos:column="25">*<pos:position pos:line="26" pos:column="26"/></operator><name><name pos:line="26" pos:column="26">oi<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">-&gt;<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="30">disk_sizep<pos:position pos:line="26" pos:column="40"/></name></name> <operator pos:line="26" pos:column="41">=<pos:position pos:line="26" pos:column="42"/></operator> <name><name pos:line="26" pos:column="43">st<pos:position pos:line="26" pos:column="45"/></name><operator pos:line="26" pos:column="45">.<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="46">st_size<pos:position pos:line="26" pos:column="53"/></name></name></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt></block></then></if>
		<return pos:line="27" pos:column="17">return <expr><literal type="number" pos:line="27" pos:column="24">0<pos:position pos:line="27" pos:column="25"/></literal></expr>;<pos:position pos:line="27" pos:column="26"/></return>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="30" pos:column="9">map<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <call><name pos:line="30" pos:column="15">map_sha1_file<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name pos:line="30" pos:column="29">sha1<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="35">&amp;<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="36">mapsize<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="45"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">map<pos:position pos:line="31" pos:column="17"/></name></expr>)<pos:position pos:line="31" pos:column="18"/></condition><then pos:line="31" pos:column="18">
		<block type="pseudo"><return pos:line="32" pos:column="17">return <expr><operator pos:line="32" pos:column="24">-<pos:position pos:line="32" pos:column="25"/></operator><literal type="number" pos:line="32" pos:column="25">1<pos:position pos:line="32" pos:column="26"/></literal></expr>;<pos:position pos:line="32" pos:column="27"/></return></block></then></if>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name><name pos:line="33" pos:column="13">oi<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">-&gt;<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="17">disk_sizep<pos:position pos:line="33" pos:column="27"/></name></name></expr>)<pos:position pos:line="33" pos:column="28"/></condition><then pos:line="33" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="34" pos:column="17">*<pos:position pos:line="34" pos:column="18"/></operator><name><name pos:line="34" pos:column="18">oi<pos:position pos:line="34" pos:column="20"/></name><operator pos:line="34" pos:column="20">-&gt;<pos:position pos:line="34" pos:column="25"/></operator><name pos:line="34" pos:column="22">disk_sizep<pos:position pos:line="34" pos:column="32"/></name></name> <operator pos:line="34" pos:column="33">=<pos:position pos:line="34" pos:column="34"/></operator> <name pos:line="34" pos:column="35">mapsize<pos:position pos:line="34" pos:column="42"/></name></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt></block></then></if>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><call><name pos:line="35" pos:column="13">unpack_sha1_header<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><operator pos:line="35" pos:column="32">&amp;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="33">stream<pos:position pos:line="35" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="41">map<pos:position pos:line="35" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="46">mapsize<pos:position pos:line="35" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="55">hdr<pos:position pos:line="35" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="60">sizeof<argument_list pos:line="35" pos:column="66">(<argument><expr><name pos:line="35" pos:column="67">hdr<pos:position pos:line="35" pos:column="70"/></name></expr></argument>)<pos:position pos:line="35" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="72"/></argument_list></call> <operator pos:line="35" pos:column="73">&lt;<pos:position pos:line="35" pos:column="77"/></operator> <literal type="number" pos:line="35" pos:column="75">0<pos:position pos:line="35" pos:column="76"/></literal></expr>)<pos:position pos:line="35" pos:column="77"/></condition><then pos:line="35" pos:column="77">
		<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="17">status<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">=<pos:position pos:line="36" pos:column="25"/></operator> <call><name pos:line="36" pos:column="26">error<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">(<argument><expr><literal type="string" pos:line="36" pos:column="32">"unable to unpack %s header"<pos:position pos:line="36" pos:column="60"/></literal></expr></argument>,
			       <argument><expr><call><name pos:line="37" pos:column="32">sha1_to_hex<pos:position pos:line="37" pos:column="43"/></name><argument_list pos:line="37" pos:column="43">(<argument><expr><name pos:line="37" pos:column="44">sha1<pos:position pos:line="37" pos:column="48"/></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt></block></then>
	<elseif pos:line="38" pos:column="9">else <if pos:line="38" pos:column="14">if <condition pos:line="38" pos:column="17">(<expr><operator pos:line="38" pos:column="18">(<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="19">status<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">=<pos:position pos:line="38" pos:column="27"/></operator> <call><name pos:line="38" pos:column="28">parse_sha1_header<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><name pos:line="38" pos:column="46">hdr<pos:position pos:line="38" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="51">&amp;<pos:position pos:line="38" pos:column="56"/></operator><name pos:line="38" pos:column="52">size<pos:position pos:line="38" pos:column="56"/></name></expr></argument>)<pos:position pos:line="38" pos:column="57"/></argument_list></call><operator pos:line="38" pos:column="57">)<pos:position pos:line="38" pos:column="58"/></operator> <operator pos:line="38" pos:column="59">&lt;<pos:position pos:line="38" pos:column="63"/></operator> <literal type="number" pos:line="38" pos:column="61">0<pos:position pos:line="38" pos:column="62"/></literal></expr>)<pos:position pos:line="38" pos:column="63"/></condition><then pos:line="38" pos:column="63">
		<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="17">status<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">=<pos:position pos:line="39" pos:column="25"/></operator> <call><name pos:line="39" pos:column="26">error<pos:position pos:line="39" pos:column="31"/></name><argument_list pos:line="39" pos:column="31">(<argument><expr><literal type="string" pos:line="39" pos:column="32">"unable to parse %s header"<pos:position pos:line="39" pos:column="59"/></literal></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="61">sha1_to_hex<pos:position pos:line="39" pos:column="72"/></name><argument_list pos:line="39" pos:column="72">(<argument><expr><name pos:line="39" pos:column="73">sha1<pos:position pos:line="39" pos:column="77"/></name></expr></argument>)<pos:position pos:line="39" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="80"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="40" pos:column="9">else <if pos:line="40" pos:column="14">if <condition pos:line="40" pos:column="17">(<expr><name><name pos:line="40" pos:column="18">oi<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">-&gt;<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="22">sizep<pos:position pos:line="40" pos:column="27"/></name></name></expr>)<pos:position pos:line="40" pos:column="28"/></condition><then pos:line="40" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="41" pos:column="17">*<pos:position pos:line="41" pos:column="18"/></operator><name><name pos:line="41" pos:column="18">oi<pos:position pos:line="41" pos:column="20"/></name><operator pos:line="41" pos:column="20">-&gt;<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="22">sizep<pos:position pos:line="41" pos:column="27"/></name></name> <operator pos:line="41" pos:column="28">=<pos:position pos:line="41" pos:column="29"/></operator> <name pos:line="41" pos:column="30">size<pos:position pos:line="41" pos:column="34"/></name></expr>;<pos:position pos:line="41" pos:column="35"/></expr_stmt></block></then></if></elseif></if>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">git_inflate_end<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><operator pos:line="42" pos:column="25">&amp;<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="26">stream<pos:position pos:line="42" pos:column="32"/></name></expr></argument>)<pos:position pos:line="42" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">munmap<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><name pos:line="43" pos:column="16">map<pos:position pos:line="43" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="21">mapsize<pos:position pos:line="43" pos:column="28"/></name></expr></argument>)<pos:position pos:line="43" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name><name pos:line="44" pos:column="13">oi<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">typep<pos:position pos:line="44" pos:column="22"/></name></name></expr>)<pos:position pos:line="44" pos:column="23"/></condition><then pos:line="44" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="45" pos:column="17">*<pos:position pos:line="45" pos:column="18"/></operator><name><name pos:line="45" pos:column="18">oi<pos:position pos:line="45" pos:column="20"/></name><operator pos:line="45" pos:column="20">-&gt;<pos:position pos:line="45" pos:column="25"/></operator><name pos:line="45" pos:column="22">typep<pos:position pos:line="45" pos:column="27"/></name></name> <operator pos:line="45" pos:column="28">=<pos:position pos:line="45" pos:column="29"/></operator> <name pos:line="45" pos:column="30">status<pos:position pos:line="45" pos:column="36"/></name></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt></block></then></if>
	<return pos:line="46" pos:column="9">return <expr><literal type="number" pos:line="46" pos:column="16">0<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
