<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2971_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">is_index_unchanged<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object_id<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">head_oid<pos:position pos:line="3" pos:column="34"/></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">commit<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">head_commit<pos:position pos:line="4" pos:column="35"/></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">resolve_ref_unsafe<pos:position pos:line="6" pos:column="32"/></name><argument_list pos:line="6" pos:column="32">(<argument><expr><literal type="string" pos:line="6" pos:column="33">"HEAD"<pos:position pos:line="6" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="41">RESOLVE_REF_READING<pos:position pos:line="6" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="62">head_oid<pos:position pos:line="6" pos:column="70"/></name><operator pos:line="6" pos:column="70">.<pos:position pos:line="6" pos:column="71"/></operator><name pos:line="6" pos:column="71">hash<pos:position pos:line="6" pos:column="75"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="77">NULL<pos:position pos:line="6" pos:column="81"/></name></expr></argument>)<pos:position pos:line="6" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="83"/></condition><then pos:line="6" pos:column="83">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><call><name pos:line="7" pos:column="24">error<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><call><name pos:line="7" pos:column="30">_<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><literal type="string" pos:line="7" pos:column="32">"could not resolve HEAD commit\n"<pos:position pos:line="7" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="68"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="9" pos:column="9">head_commit<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <call><name pos:line="9" pos:column="23">lookup_commit<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><operator pos:line="9" pos:column="37">&amp;<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="38">head_oid<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="48"/></expr_stmt>

	<comment type="block" pos:line="11" pos:column="9">/*
	 * If head_commit is NULL, check_commit, called from
	 * lookup_commit, would have indicated that head_commit is not
	 * a commit object already.  parse_commit() will return failure
	 * without further complaints in such a case.  Otherwise, if
	 * the commit is invalid, parse_commit() will complain.  So
	 * there is nothing for us to say here.  Just return failure.
	 */</comment>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">parse_commit<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">head_commit<pos:position pos:line="19" pos:column="37"/></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="39"/></condition><then pos:line="19" pos:column="39">
		<block type="pseudo"><return pos:line="20" pos:column="17">return <expr><operator pos:line="20" pos:column="24">-<pos:position pos:line="20" pos:column="25"/></operator><literal type="number" pos:line="20" pos:column="25">1<pos:position pos:line="20" pos:column="26"/></literal></expr>;<pos:position pos:line="20" pos:column="27"/></return></block></then></if>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">active_cache_tree<pos:position pos:line="22" pos:column="31"/></name></expr>)<pos:position pos:line="22" pos:column="32"/></condition><then pos:line="22" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">active_cache_tree<pos:position pos:line="23" pos:column="34"/></name> <operator pos:line="23" pos:column="35">=<pos:position pos:line="23" pos:column="36"/></operator> <call><name pos:line="23" pos:column="37">cache_tree<pos:position pos:line="23" pos:column="47"/></name><argument_list pos:line="23" pos:column="47">()<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><call><name pos:line="25" pos:column="14">cache_tree_fully_valid<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">active_cache_tree<pos:position pos:line="25" pos:column="54"/></name></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="56"/></condition><then pos:line="25" pos:column="56">
		<block type="pseudo"><if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><call><name pos:line="26" pos:column="21">cache_tree_update<pos:position pos:line="26" pos:column="38"/></name><argument_list pos:line="26" pos:column="38">(<argument><expr><operator pos:line="26" pos:column="39">&amp;<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="40">the_index<pos:position pos:line="26" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="51">0<pos:position pos:line="26" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="54"/></condition><then pos:line="26" pos:column="54">
			<block type="pseudo"><return pos:line="27" pos:column="25">return <expr><call><name pos:line="27" pos:column="32">error<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><call><name pos:line="27" pos:column="38">_<pos:position pos:line="27" pos:column="39"/></name><argument_list pos:line="27" pos:column="39">(<argument><expr><literal type="string" pos:line="27" pos:column="40">"unable to update cache tree\n"<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="74"/></return></block></then></if></block></then></if>

	<return pos:line="29" pos:column="9">return <expr><operator pos:line="29" pos:column="16">!<pos:position pos:line="29" pos:column="17"/></operator><call><name pos:line="29" pos:column="17">oidcmp<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><operator pos:line="29" pos:column="24">&amp;<pos:position pos:line="29" pos:column="29"/></operator><name><name pos:line="29" pos:column="25">active_cache_tree<pos:position pos:line="29" pos:column="42"/></name><operator pos:line="29" pos:column="42">-&gt;<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="44">oid<pos:position pos:line="29" pos:column="47"/></name></name></expr></argument>,
		       <argument><expr><operator pos:line="30" pos:column="24">&amp;<pos:position pos:line="30" pos:column="29"/></operator><name><name pos:line="30" pos:column="25">head_commit<pos:position pos:line="30" pos:column="36"/></name><operator pos:line="30" pos:column="36">-&gt;<pos:position pos:line="30" pos:column="41"/></operator><name pos:line="30" pos:column="38">tree<pos:position pos:line="30" pos:column="42"/></name><operator pos:line="30" pos:column="42">-&gt;<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="44">object<pos:position pos:line="30" pos:column="50"/></name><operator pos:line="30" pos:column="50">.<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="51">oid<pos:position pos:line="30" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
