<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6767_git-2.13.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_check_any_chunk<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">mstate<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">m<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">mchunkptr<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">p<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list> <block pos:line="1" pos:column="55">{
  <expr_stmt><expr><call><name pos:line="2" pos:column="3">assert<pos:position pos:line="2" pos:column="9"/></name><argument_list pos:line="2" pos:column="9">(<argument><expr><operator pos:line="2" pos:column="10">(<pos:position pos:line="2" pos:column="11"/></operator><call><name pos:line="2" pos:column="11">is_aligned<pos:position pos:line="2" pos:column="21"/></name><argument_list pos:line="2" pos:column="21">(<argument><expr><call><name pos:line="2" pos:column="22">chunk2mem<pos:position pos:line="2" pos:column="31"/></name><argument_list pos:line="2" pos:column="31">(<argument><expr><name pos:line="2" pos:column="32">p<pos:position pos:line="2" pos:column="33"/></name></expr></argument>)<pos:position pos:line="2" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="2" pos:column="35"/></argument_list></call><operator pos:line="2" pos:column="35">)<pos:position pos:line="2" pos:column="36"/></operator> <operator pos:line="2" pos:column="37">||<pos:position pos:line="2" pos:column="39"/></operator> <operator pos:line="2" pos:column="40">(<pos:position pos:line="2" pos:column="41"/></operator><name><name pos:line="2" pos:column="41">p<pos:position pos:line="2" pos:column="42"/></name><operator pos:line="2" pos:column="42">-&gt;<pos:position pos:line="2" pos:column="47"/></operator><name pos:line="2" pos:column="44">head<pos:position pos:line="2" pos:column="48"/></name></name> <operator pos:line="2" pos:column="49">==<pos:position pos:line="2" pos:column="51"/></operator> <name pos:line="2" pos:column="52">FENCEPOST_HEAD<pos:position pos:line="2" pos:column="66"/></name><operator pos:line="2" pos:column="66">)<pos:position pos:line="2" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="2" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="2" pos:column="69"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">assert<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><call><name pos:line="3" pos:column="10">ok_address<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><name pos:line="3" pos:column="21">m<pos:position pos:line="3" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="24">p<pos:position pos:line="3" pos:column="25"/></name></expr></argument>)<pos:position pos:line="3" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="28"/></expr_stmt>
}<pos:position pos:line="4" pos:column="2"/></block></function></unit>
