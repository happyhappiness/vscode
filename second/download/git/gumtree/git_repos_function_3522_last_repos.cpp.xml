<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3522_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_invalidate_path<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">cache_tree<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">it<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">path<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/* a/b/c
	 * ==&gt; invalidate self
	 * ==&gt; find "a", have it invalidate "b/c"
	 * a
	 * ==&gt; invalidate self
	 * ==&gt; if "a" exists as a subtree, remove it.
	 */</comment>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">slash<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">namelen<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">cache_tree_sub<pos:position pos:line="12" pos:column="30"/></name></name> <modifier pos:line="12" pos:column="31">*<pos:position pos:line="12" pos:column="32"/></modifier></type><name pos:line="12" pos:column="32">down<pos:position pos:line="12" pos:column="36"/></name></decl>;<pos:position pos:line="12" pos:column="37"/></decl_stmt>

<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><name pos:line="14" pos:column="5">DEBUG<pos:position pos:line="14" pos:column="10"/></name></expr></cpp:if>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">fprintf<pos:position pos:line="15" pos:column="16"/></name><argument_list pos:line="15" pos:column="16">(<argument><expr><name pos:line="15" pos:column="17">stderr<pos:position pos:line="15" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="25">"cache-tree invalidate &lt;%s&gt;\n"<pos:position pos:line="15" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="57">path<pos:position pos:line="15" pos:column="61"/></name></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="63"/></expr_stmt>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">it<pos:position pos:line="18" pos:column="16"/></name></expr>)<pos:position pos:line="18" pos:column="17"/></condition><then pos:line="18" pos:column="17">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="20" pos:column="9">slash<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <call><name pos:line="20" pos:column="17">strchrnul<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">path<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="20" pos:column="33">'/'<pos:position pos:line="20" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">namelen<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">slash<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">-<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">path<pos:position pos:line="21" pos:column="31"/></name></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">it<pos:position pos:line="22" pos:column="11"/></name><operator pos:line="22" pos:column="11">-&gt;<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="13">entry_count<pos:position pos:line="22" pos:column="24"/></name></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <operator pos:line="22" pos:column="27">-<pos:position pos:line="22" pos:column="28"/></operator><literal type="number" pos:line="22" pos:column="28">1<pos:position pos:line="22" pos:column="29"/></literal></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><operator pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">slash<pos:position pos:line="23" pos:column="20"/></name></expr>)<pos:position pos:line="23" pos:column="21"/></condition><then pos:line="23" pos:column="21"> <block pos:line="23" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">int<pos:position pos:line="24" pos:column="20"/></name></type> <name pos:line="24" pos:column="21">pos<pos:position pos:line="24" pos:column="24"/></name></decl>;<pos:position pos:line="24" pos:column="25"/></decl_stmt>
		<expr_stmt><expr><name pos:line="25" pos:column="17">pos<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <call><name pos:line="25" pos:column="23">subtree_pos<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">it<pos:position pos:line="25" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="39">path<pos:position pos:line="25" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="45">namelen<pos:position pos:line="25" pos:column="52"/></name></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="54"/></expr_stmt>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><literal type="number" pos:line="26" pos:column="21">0<pos:position pos:line="26" pos:column="22"/></literal> <operator pos:line="26" pos:column="23">&lt;=<pos:position pos:line="26" pos:column="28"/></operator> <name pos:line="26" pos:column="26">pos<pos:position pos:line="26" pos:column="29"/></name></expr>)<pos:position pos:line="26" pos:column="30"/></condition><then pos:line="26" pos:column="30"> <block pos:line="26" pos:column="31">{
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">cache_tree_free<pos:position pos:line="27" pos:column="40"/></name><argument_list pos:line="27" pos:column="40">(<argument><expr><operator pos:line="27" pos:column="41">&amp;<pos:position pos:line="27" pos:column="46"/></operator><name><name pos:line="27" pos:column="42">it<pos:position pos:line="27" pos:column="44"/></name><operator pos:line="27" pos:column="44">-&gt;<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="46">down<pos:position pos:line="27" pos:column="50"/></name><index pos:line="27" pos:column="50">[<expr><name pos:line="27" pos:column="51">pos<pos:position pos:line="27" pos:column="54"/></name></expr>]<pos:position pos:line="27" pos:column="55"/></index></name><operator pos:line="27" pos:column="55">-&gt;<pos:position pos:line="27" pos:column="60"/></operator><name pos:line="27" pos:column="57">cache_tree<pos:position pos:line="27" pos:column="67"/></name></expr></argument>)<pos:position pos:line="27" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">free<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name><name pos:line="28" pos:column="30">it<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">-&gt;<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="34">down<pos:position pos:line="28" pos:column="38"/></name><index pos:line="28" pos:column="38">[<expr><name pos:line="28" pos:column="39">pos<pos:position pos:line="28" pos:column="42"/></name></expr>]<pos:position pos:line="28" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
			<comment type="block" pos:line="29" pos:column="25">/* 0 1 2 3 4 5
			 *       ^     ^subtree_nr = 6
			 *       pos
			 * move 4 and 5 up one place (2 entries)
			 * 2 = 6 - 3 - 1 = subtree_nr - pos - 1
			 */</comment>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">MOVE_ARRAY<pos:position pos:line="35" pos:column="35"/></name><argument_list pos:line="35" pos:column="35">(<argument><expr><name><name pos:line="35" pos:column="36">it<pos:position pos:line="35" pos:column="38"/></name><operator pos:line="35" pos:column="38">-&gt;<pos:position pos:line="35" pos:column="43"/></operator><name pos:line="35" pos:column="40">down<pos:position pos:line="35" pos:column="44"/></name></name> <operator pos:line="35" pos:column="45">+<pos:position pos:line="35" pos:column="46"/></operator> <name pos:line="35" pos:column="47">pos<pos:position pos:line="35" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="52">it<pos:position pos:line="35" pos:column="54"/></name><operator pos:line="35" pos:column="54">-&gt;<pos:position pos:line="35" pos:column="59"/></operator><name pos:line="35" pos:column="56">down<pos:position pos:line="35" pos:column="60"/></name></name> <operator pos:line="35" pos:column="61">+<pos:position pos:line="35" pos:column="62"/></operator> <name pos:line="35" pos:column="63">pos<pos:position pos:line="35" pos:column="66"/></name> <operator pos:line="35" pos:column="67">+<pos:position pos:line="35" pos:column="68"/></operator> <literal type="number" pos:line="35" pos:column="69">1<pos:position pos:line="35" pos:column="70"/></literal></expr></argument>,
				   <argument><expr><name><name pos:line="36" pos:column="36">it<pos:position pos:line="36" pos:column="38"/></name><operator pos:line="36" pos:column="38">-&gt;<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="40">subtree_nr<pos:position pos:line="36" pos:column="50"/></name></name> <operator pos:line="36" pos:column="51">-<pos:position pos:line="36" pos:column="52"/></operator> <name pos:line="36" pos:column="53">pos<pos:position pos:line="36" pos:column="56"/></name> <operator pos:line="36" pos:column="57">-<pos:position pos:line="36" pos:column="58"/></operator> <literal type="number" pos:line="36" pos:column="59">1<pos:position pos:line="36" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="37" pos:column="25">it<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">-&gt;<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="29">subtree_nr<pos:position pos:line="37" pos:column="39"/></name></name><operator pos:line="37" pos:column="39">--<pos:position pos:line="37" pos:column="41"/></operator></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>
		<return pos:line="39" pos:column="17">return <expr><literal type="number" pos:line="39" pos:column="24">1<pos:position pos:line="39" pos:column="25"/></literal></expr>;<pos:position pos:line="39" pos:column="26"/></return>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="41" pos:column="9">down<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <call><name pos:line="41" pos:column="16">find_subtree<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">it<pos:position pos:line="41" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="33">path<pos:position pos:line="41" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="39">namelen<pos:position pos:line="41" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="48">0<pos:position pos:line="41" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="51"/></expr_stmt>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">down<pos:position pos:line="42" pos:column="17"/></name></expr>)<pos:position pos:line="42" pos:column="18"/></condition><then pos:line="42" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="17">do_invalidate_path<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">(<argument><expr><name><name pos:line="43" pos:column="36">down<pos:position pos:line="43" pos:column="40"/></name><operator pos:line="43" pos:column="40">-&gt;<pos:position pos:line="43" pos:column="45"/></operator><name pos:line="43" pos:column="42">cache_tree<pos:position pos:line="43" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="54">slash<pos:position pos:line="43" pos:column="59"/></name> <operator pos:line="43" pos:column="60">+<pos:position pos:line="43" pos:column="61"/></operator> <literal type="number" pos:line="43" pos:column="62">1<pos:position pos:line="43" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="65"/></expr_stmt></block></then></if>
	<return pos:line="44" pos:column="9">return <expr><literal type="number" pos:line="44" pos:column="16">1<pos:position pos:line="44" pos:column="17"/></literal></expr>;<pos:position pos:line="44" pos:column="18"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
