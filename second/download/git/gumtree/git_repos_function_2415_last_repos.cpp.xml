<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2415_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">compute_and_write_prerequisites<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">bundle_fd<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
					   <parameter><decl><type><name><name pos:line="2" pos:column="44">struct<pos:position pos:line="2" pos:column="50"/></name> <name pos:line="2" pos:column="51">rev_info<pos:position pos:line="2" pos:column="59"/></name></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">revs<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>,
					   <parameter><decl><type><name pos:line="3" pos:column="44">int<pos:position pos:line="3" pos:column="47"/></name></type> <name pos:line="3" pos:column="48">argc<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="54">const<pos:position pos:line="3" pos:column="59"/></specifier> <name pos:line="3" pos:column="60">char<pos:position pos:line="3" pos:column="64"/></name> <modifier pos:line="3" pos:column="65">*<pos:position pos:line="3" pos:column="66"/></modifier><modifier pos:line="3" pos:column="66">*<pos:position pos:line="3" pos:column="67"/></modifier></type><name pos:line="3" pos:column="67">argv<pos:position pos:line="3" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="72"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">child_process<pos:position pos:line="5" pos:column="29"/></name></name></type> <name pos:line="5" pos:column="30">rls<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><name pos:line="5" pos:column="36">CHILD_PROCESS_INIT<pos:position pos:line="5" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="55"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">buf<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><name pos:line="6" pos:column="29">STRBUF_INIT<pos:position pos:line="6" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">FILE<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">rls_fout<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">i<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">argv_array_pushl<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><operator pos:line="10" pos:column="26">&amp;<pos:position pos:line="10" pos:column="31"/></operator><name><name pos:line="10" pos:column="27">rls<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">.<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="31">args<pos:position pos:line="10" pos:column="35"/></name></name></expr></argument>,
			 <argument><expr><literal type="string" pos:line="11" pos:column="26">"rev-list"<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="38">"--boundary"<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="52">"--pretty=oneline"<pos:position pos:line="11" pos:column="70"/></literal></expr></argument>,
			 <argument><expr><name pos:line="12" pos:column="26">NULL<pos:position pos:line="12" pos:column="30"/></name></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
	<for pos:line="13" pos:column="9">for <control pos:line="13" pos:column="13">(<init><expr><name pos:line="13" pos:column="14">i<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="18">1<pos:position pos:line="13" pos:column="19"/></literal></expr>;<pos:position pos:line="13" pos:column="20"/></init> <condition><expr><name pos:line="13" pos:column="21">i<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">&lt;<pos:position pos:line="13" pos:column="27"/></operator> <name pos:line="13" pos:column="25">argc<pos:position pos:line="13" pos:column="29"/></name></expr>;<pos:position pos:line="13" pos:column="30"/></condition> <incr><expr><name pos:line="13" pos:column="31">i<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">++<pos:position pos:line="13" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="35"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">argv_array_push<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><operator pos:line="14" pos:column="33">&amp;<pos:position pos:line="14" pos:column="38"/></operator><name><name pos:line="14" pos:column="34">rls<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">.<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="38">args<pos:position pos:line="14" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="44">argv<pos:position pos:line="14" pos:column="48"/></name><index pos:line="14" pos:column="48">[<expr><name pos:line="14" pos:column="49">i<pos:position pos:line="14" pos:column="50"/></name></expr>]<pos:position pos:line="14" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt></block></for>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">rls<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">.<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">out<pos:position pos:line="15" pos:column="16"/></name></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <operator pos:line="15" pos:column="19">-<pos:position pos:line="15" pos:column="20"/></operator><literal type="number" pos:line="15" pos:column="20">1<pos:position pos:line="15" pos:column="21"/></literal></expr>;<pos:position pos:line="15" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">rls<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">.<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">git_cmd<pos:position pos:line="16" pos:column="20"/></name></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <literal type="number" pos:line="16" pos:column="23">1<pos:position pos:line="16" pos:column="24"/></literal></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">start_command<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><operator pos:line="17" pos:column="27">&amp;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="28">rls<pos:position pos:line="17" pos:column="31"/></name></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33">
		<block type="pseudo"><return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">-<pos:position pos:line="18" pos:column="25"/></operator><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal></expr>;<pos:position pos:line="18" pos:column="27"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="19" pos:column="9">rls_fout<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <call><name pos:line="19" pos:column="20">xfdopen<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name><name pos:line="19" pos:column="28">rls<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">.<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="32">out<pos:position pos:line="19" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="37">"r"<pos:position pos:line="19" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
	<while pos:line="20" pos:column="9">while <condition pos:line="20" pos:column="15">(<expr><call><name pos:line="20" pos:column="16">strbuf_getwholeline<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><operator pos:line="20" pos:column="36">&amp;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="37">buf<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">rls_fout<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="20" pos:column="52">'\n'<pos:position pos:line="20" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call> <operator pos:line="20" pos:column="58">!=<pos:position pos:line="20" pos:column="60"/></operator> <name pos:line="20" pos:column="61">EOF<pos:position pos:line="20" pos:column="64"/></name></expr>)<pos:position pos:line="20" pos:column="65"/></condition> <block pos:line="20" pos:column="66">{
		<decl_stmt><decl><type><name><name pos:line="21" pos:column="17">struct<pos:position pos:line="21" pos:column="23"/></name> <name pos:line="21" pos:column="24">object_id<pos:position pos:line="21" pos:column="33"/></name></name></type> <name pos:line="21" pos:column="34">oid<pos:position pos:line="21" pos:column="37"/></name></decl>;<pos:position pos:line="21" pos:column="38"/></decl_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name><name pos:line="22" pos:column="21">buf<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">.<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="25">len<pos:position pos:line="22" pos:column="28"/></name></name> <operator pos:line="22" pos:column="29">&gt;<pos:position pos:line="22" pos:column="33"/></operator> <literal type="number" pos:line="22" pos:column="31">0<pos:position pos:line="22" pos:column="32"/></literal> <operator pos:line="22" pos:column="33">&amp;&amp;<pos:position pos:line="22" pos:column="43"/></operator> <name><name pos:line="22" pos:column="36">buf<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">.<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="40">buf<pos:position pos:line="22" pos:column="43"/></name><index pos:line="22" pos:column="43">[<expr><literal type="number" pos:line="22" pos:column="44">0<pos:position pos:line="22" pos:column="45"/></literal></expr>]<pos:position pos:line="22" pos:column="46"/></index></name> <operator pos:line="22" pos:column="47">==<pos:position pos:line="22" pos:column="49"/></operator> <literal type="char" pos:line="22" pos:column="50">'-'<pos:position pos:line="22" pos:column="53"/></literal></expr>)<pos:position pos:line="22" pos:column="54"/></condition><then pos:line="22" pos:column="54"> <block pos:line="22" pos:column="55">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">write_or_die<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><name pos:line="23" pos:column="38">bundle_fd<pos:position pos:line="23" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="49">buf<pos:position pos:line="23" pos:column="52"/></name><operator pos:line="23" pos:column="52">.<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="53">buf<pos:position pos:line="23" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="58">buf<pos:position pos:line="23" pos:column="61"/></name><operator pos:line="23" pos:column="61">.<pos:position pos:line="23" pos:column="62"/></operator><name pos:line="23" pos:column="62">len<pos:position pos:line="23" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="67"/></expr_stmt>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><operator pos:line="24" pos:column="29">!<pos:position pos:line="24" pos:column="30"/></operator><call><name pos:line="24" pos:column="30">get_oid_hex<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name><name pos:line="24" pos:column="42">buf<pos:position pos:line="24" pos:column="45"/></name><operator pos:line="24" pos:column="45">.<pos:position pos:line="24" pos:column="46"/></operator><name pos:line="24" pos:column="46">buf<pos:position pos:line="24" pos:column="49"/></name></name> <operator pos:line="24" pos:column="50">+<pos:position pos:line="24" pos:column="51"/></operator> <literal type="number" pos:line="24" pos:column="52">1<pos:position pos:line="24" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="55">&amp;<pos:position pos:line="24" pos:column="60"/></operator><name pos:line="24" pos:column="56">oid<pos:position pos:line="24" pos:column="59"/></name></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="61"/></condition><then pos:line="24" pos:column="61"> <block pos:line="24" pos:column="62">{
				<decl_stmt><decl><type><name><name pos:line="25" pos:column="33">struct<pos:position pos:line="25" pos:column="39"/></name> <name pos:line="25" pos:column="40">object<pos:position pos:line="25" pos:column="46"/></name></name> <modifier pos:line="25" pos:column="47">*<pos:position pos:line="25" pos:column="48"/></modifier></type><name pos:line="25" pos:column="48">object<pos:position pos:line="25" pos:column="54"/></name> <init pos:line="25" pos:column="55">= <expr><call><name pos:line="25" pos:column="57">parse_object_or_die<pos:position pos:line="25" pos:column="76"/></name><argument_list pos:line="25" pos:column="76">(<argument><expr><operator pos:line="25" pos:column="77">&amp;<pos:position pos:line="25" pos:column="82"/></operator><name pos:line="25" pos:column="78">oid<pos:position pos:line="25" pos:column="81"/></name></expr></argument>,
									    <argument><expr><name><name pos:line="26" pos:column="77">buf<pos:position pos:line="26" pos:column="80"/></name><operator pos:line="26" pos:column="80">.<pos:position pos:line="26" pos:column="81"/></operator><name pos:line="26" pos:column="81">buf<pos:position pos:line="26" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="86"/></decl_stmt>
				<expr_stmt><expr><name><name pos:line="27" pos:column="33">object<pos:position pos:line="27" pos:column="39"/></name><operator pos:line="27" pos:column="39">-&gt;<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="41">flags<pos:position pos:line="27" pos:column="46"/></name></name> <operator pos:line="27" pos:column="47">|=<pos:position pos:line="27" pos:column="49"/></operator> <name pos:line="27" pos:column="50">UNINTERESTING<pos:position pos:line="27" pos:column="63"/></name></expr>;<pos:position pos:line="27" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="28" pos:column="33">add_pending_object<pos:position pos:line="28" pos:column="51"/></name><argument_list pos:line="28" pos:column="51">(<argument><expr><name pos:line="28" pos:column="52">revs<pos:position pos:line="28" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="58">object<pos:position pos:line="28" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="66">buf<pos:position pos:line="28" pos:column="69"/></name><operator pos:line="28" pos:column="69">.<pos:position pos:line="28" pos:column="70"/></operator><name pos:line="28" pos:column="70">buf<pos:position pos:line="28" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="75"/></expr_stmt>
			}<pos:position pos:line="29" pos:column="26"/></block></then></if>
		}<pos:position pos:line="30" pos:column="18"/></block></then> <elseif pos:line="30" pos:column="19">else <if pos:line="30" pos:column="24">if <condition pos:line="30" pos:column="27">(<expr><operator pos:line="30" pos:column="28">!<pos:position pos:line="30" pos:column="29"/></operator><call><name pos:line="30" pos:column="29">get_oid_hex<pos:position pos:line="30" pos:column="40"/></name><argument_list pos:line="30" pos:column="40">(<argument><expr><name><name pos:line="30" pos:column="41">buf<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">.<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="45">buf<pos:position pos:line="30" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="50">&amp;<pos:position pos:line="30" pos:column="55"/></operator><name pos:line="30" pos:column="51">oid<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="56"/></condition><then pos:line="30" pos:column="56"> <block pos:line="30" pos:column="57">{
			<decl_stmt><decl><type><name><name pos:line="31" pos:column="25">struct<pos:position pos:line="31" pos:column="31"/></name> <name pos:line="31" pos:column="32">object<pos:position pos:line="31" pos:column="38"/></name></name> <modifier pos:line="31" pos:column="39">*<pos:position pos:line="31" pos:column="40"/></modifier></type><name pos:line="31" pos:column="40">object<pos:position pos:line="31" pos:column="46"/></name> <init pos:line="31" pos:column="47">= <expr><call><name pos:line="31" pos:column="49">parse_object_or_die<pos:position pos:line="31" pos:column="68"/></name><argument_list pos:line="31" pos:column="68">(<argument><expr><operator pos:line="31" pos:column="69">&amp;<pos:position pos:line="31" pos:column="74"/></operator><name pos:line="31" pos:column="70">oid<pos:position pos:line="31" pos:column="73"/></name></expr></argument>,
								    <argument><expr><name><name pos:line="32" pos:column="69">buf<pos:position pos:line="32" pos:column="72"/></name><operator pos:line="32" pos:column="72">.<pos:position pos:line="32" pos:column="73"/></operator><name pos:line="32" pos:column="73">buf<pos:position pos:line="32" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="78"/></decl_stmt>
			<expr_stmt><expr><name><name pos:line="33" pos:column="25">object<pos:position pos:line="33" pos:column="31"/></name><operator pos:line="33" pos:column="31">-&gt;<pos:position pos:line="33" pos:column="36"/></operator><name pos:line="33" pos:column="33">flags<pos:position pos:line="33" pos:column="38"/></name></name> <operator pos:line="33" pos:column="39">|=<pos:position pos:line="33" pos:column="41"/></operator> <name pos:line="33" pos:column="42">SHOWN<pos:position pos:line="33" pos:column="47"/></name></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="35" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">strbuf_release<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><operator pos:line="36" pos:column="24">&amp;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="25">buf<pos:position pos:line="36" pos:column="28"/></name></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">fclose<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">rls_fout<pos:position pos:line="37" pos:column="24"/></name></expr></argument>)<pos:position pos:line="37" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">finish_command<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><operator pos:line="38" pos:column="28">&amp;<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="29">rls<pos:position pos:line="38" pos:column="32"/></name></expr></argument>)<pos:position pos:line="38" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="34"/></condition><then pos:line="38" pos:column="34">
		<block type="pseudo"><return pos:line="39" pos:column="17">return <expr><call><name pos:line="39" pos:column="24">error<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><call><name pos:line="39" pos:column="30">_<pos:position pos:line="39" pos:column="31"/></name><argument_list pos:line="39" pos:column="31">(<argument><expr><literal type="string" pos:line="39" pos:column="32">"rev-list died"<pos:position pos:line="39" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="50"/></return></block></then></if>
	<return pos:line="40" pos:column="9">return <expr><literal type="number" pos:line="40" pos:column="16">0<pos:position pos:line="40" pos:column="17"/></literal></expr>;<pos:position pos:line="40" pos:column="18"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
