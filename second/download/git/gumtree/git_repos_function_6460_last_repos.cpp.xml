<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6460_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">files_transaction_prepare<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">ref_store<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">ref_store<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
				     <parameter><decl><type><name><name pos:line="2" pos:column="38">struct<pos:position pos:line="2" pos:column="44"/></name> <name pos:line="2" pos:column="45">ref_transaction<pos:position pos:line="2" pos:column="60"/></name></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">transaction<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>,
				     <parameter><decl><type><name><name pos:line="3" pos:column="38">struct<pos:position pos:line="3" pos:column="44"/></name> <name pos:line="3" pos:column="45">strbuf<pos:position pos:line="3" pos:column="51"/></name></name> <modifier pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></modifier></type><name pos:line="3" pos:column="53">err<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="57"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">files_ref_store<pos:position pos:line="5" pos:column="31"/></name></name> <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier></type><name pos:line="5" pos:column="33">refs<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">=
		<expr><call><name pos:line="6" pos:column="17">files_downcast<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name pos:line="6" pos:column="32">ref_store<pos:position pos:line="6" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="43">REF_STORE_WRITE<pos:position pos:line="6" pos:column="58"/></name></expr></argument>,
			       <argument><expr><literal type="string" pos:line="7" pos:column="32">"ref_transaction_prepare"<pos:position pos:line="7" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">i<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">ret<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">string_list<pos:position pos:line="10" pos:column="27"/></name></name></type> <name pos:line="10" pos:column="28">affected_refnames<pos:position pos:line="10" pos:column="45"/></name> <init pos:line="10" pos:column="46">= <expr><name pos:line="10" pos:column="48">STRING_LIST_INIT_NODUP<pos:position pos:line="10" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="71"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">head_ref<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><name pos:line="11" pos:column="26">NULL<pos:position pos:line="11" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">head_type<pos:position pos:line="12" pos:column="22"/></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">struct<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">object_id<pos:position pos:line="13" pos:column="25"/></name></name></type> <name pos:line="13" pos:column="26">head_oid<pos:position pos:line="13" pos:column="34"/></name></decl>;<pos:position pos:line="13" pos:column="35"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">assert<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">err<pos:position pos:line="15" pos:column="19"/></name></expr></argument>)<pos:position pos:line="15" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name><name pos:line="17" pos:column="14">transaction<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">nr<pos:position pos:line="17" pos:column="29"/></name></name></expr>)<pos:position pos:line="17" pos:column="30"/></condition><then pos:line="17" pos:column="30">
		<block type="pseudo"><goto pos:line="18" pos:column="17">goto <name pos:line="18" pos:column="22">cleanup<pos:position pos:line="18" pos:column="29"/></name>;<pos:position pos:line="18" pos:column="30"/></goto></block></then></if>

	<comment type="block" pos:line="20" pos:column="9">/*
	 * Fail if a refname appears more than once in the
	 * transaction. (If we end up splitting up any updates using
	 * split_symref_update() or split_head_update(), those
	 * functions will check that the new updates don't have the
	 * same refname as any existing ones.)
	 */</comment>
	<for pos:line="27" pos:column="9">for <control pos:line="27" pos:column="13">(<init><expr><name pos:line="27" pos:column="14">i<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <literal type="number" pos:line="27" pos:column="18">0<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></init> <condition><expr><name pos:line="27" pos:column="21">i<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;<pos:position pos:line="27" pos:column="27"/></operator> <name><name pos:line="27" pos:column="25">transaction<pos:position pos:line="27" pos:column="36"/></name><operator pos:line="27" pos:column="36">-&gt;<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="38">nr<pos:position pos:line="27" pos:column="40"/></name></name></expr>;<pos:position pos:line="27" pos:column="41"/></condition> <incr><expr><name pos:line="27" pos:column="42">i<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">++<pos:position pos:line="27" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="46"/></control> <block pos:line="27" pos:column="47">{
		<decl_stmt><decl><type><name><name pos:line="28" pos:column="17">struct<pos:position pos:line="28" pos:column="23"/></name> <name pos:line="28" pos:column="24">ref_update<pos:position pos:line="28" pos:column="34"/></name></name> <modifier pos:line="28" pos:column="35">*<pos:position pos:line="28" pos:column="36"/></modifier></type><name pos:line="28" pos:column="36">update<pos:position pos:line="28" pos:column="42"/></name> <init pos:line="28" pos:column="43">= <expr><name><name pos:line="28" pos:column="45">transaction<pos:position pos:line="28" pos:column="56"/></name><operator pos:line="28" pos:column="56">-&gt;<pos:position pos:line="28" pos:column="61"/></operator><name pos:line="28" pos:column="58">updates<pos:position pos:line="28" pos:column="65"/></name><index pos:line="28" pos:column="65">[<expr><name pos:line="28" pos:column="66">i<pos:position pos:line="28" pos:column="67"/></name></expr>]<pos:position pos:line="28" pos:column="68"/></index></name></expr></init></decl>;<pos:position pos:line="28" pos:column="69"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="29" pos:column="17">struct<pos:position pos:line="29" pos:column="23"/></name> <name pos:line="29" pos:column="24">string_list_item<pos:position pos:line="29" pos:column="40"/></name></name> <modifier pos:line="29" pos:column="41">*<pos:position pos:line="29" pos:column="42"/></modifier></type><name pos:line="29" pos:column="42">item<pos:position pos:line="29" pos:column="46"/></name> <init pos:line="29" pos:column="47">=
			<expr><call><name pos:line="30" pos:column="25">string_list_append<pos:position pos:line="30" pos:column="43"/></name><argument_list pos:line="30" pos:column="43">(<argument><expr><operator pos:line="30" pos:column="44">&amp;<pos:position pos:line="30" pos:column="49"/></operator><name pos:line="30" pos:column="45">affected_refnames<pos:position pos:line="30" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="64">update<pos:position pos:line="30" pos:column="70"/></name><operator pos:line="30" pos:column="70">-&gt;<pos:position pos:line="30" pos:column="75"/></operator><name pos:line="30" pos:column="72">refname<pos:position pos:line="30" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="81"/></decl_stmt>

		<comment type="block" pos:line="32" pos:column="17">/*
		 * We store a pointer to update in item-&gt;util, but at
		 * the moment we never use the value of this field
		 * except to check whether it is non-NULL.
		 */</comment>
		<expr_stmt><expr><name><name pos:line="37" pos:column="17">item<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">-&gt;<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="23">util<pos:position pos:line="37" pos:column="27"/></name></name> <operator pos:line="37" pos:column="28">=<pos:position pos:line="37" pos:column="29"/></operator> <name pos:line="37" pos:column="30">update<pos:position pos:line="37" pos:column="36"/></name></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">string_list_sort<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><operator pos:line="39" pos:column="26">&amp;<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="27">affected_refnames<pos:position pos:line="39" pos:column="44"/></name></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="46"/></expr_stmt>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name pos:line="40" pos:column="13">ref_update_reject_duplicates<pos:position pos:line="40" pos:column="41"/></name><argument_list pos:line="40" pos:column="41">(<argument><expr><operator pos:line="40" pos:column="42">&amp;<pos:position pos:line="40" pos:column="47"/></operator><name pos:line="40" pos:column="43">affected_refnames<pos:position pos:line="40" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="62">err<pos:position pos:line="40" pos:column="65"/></name></expr></argument>)<pos:position pos:line="40" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="67"/></condition><then pos:line="40" pos:column="67"> <block pos:line="40" pos:column="68">{
		<expr_stmt><expr><name pos:line="41" pos:column="17">ret<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">=<pos:position pos:line="41" pos:column="22"/></operator> <name pos:line="41" pos:column="23">TRANSACTION_GENERIC_ERROR<pos:position pos:line="41" pos:column="48"/></name></expr>;<pos:position pos:line="41" pos:column="49"/></expr_stmt>
		<goto pos:line="42" pos:column="17">goto <name pos:line="42" pos:column="22">cleanup<pos:position pos:line="42" pos:column="29"/></name>;<pos:position pos:line="42" pos:column="30"/></goto>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="45" pos:column="9">/*
	 * Special hack: If a branch is updated directly and HEAD
	 * points to it (may happen on the remote side of a push
	 * for example) then logically the HEAD reflog should be
	 * updated too.
	 *
	 * A generic solution would require reverse symref lookups,
	 * but finding all symrefs pointing to a given branch would be
	 * rather costly for this rare event (the direct update of a
	 * branch) to be worth it. So let's cheat and check with HEAD
	 * only, which should cover 99% of all usage scenarios (even
	 * 100% of the default ones).
	 *
	 * So if HEAD is a symbolic reference, then record the name of
	 * the reference that it points to. If we see an update of
	 * head_ref within the transaction, then split_head_update()
	 * arranges for the reflog of HEAD to be updated, too.
	 */</comment>
	<expr_stmt><expr><name pos:line="63" pos:column="9">head_ref<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">=<pos:position pos:line="63" pos:column="19"/></operator> <call><name pos:line="63" pos:column="20">refs_resolve_refdup<pos:position pos:line="63" pos:column="39"/></name><argument_list pos:line="63" pos:column="39">(<argument><expr><name pos:line="63" pos:column="40">ref_store<pos:position pos:line="63" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="51">"HEAD"<pos:position pos:line="63" pos:column="57"/></literal></expr></argument>,
				       <argument><expr><name pos:line="64" pos:column="40">RESOLVE_REF_NO_RECURSE<pos:position pos:line="64" pos:column="62"/></name></expr></argument>,
				       <argument><expr><name><name pos:line="65" pos:column="40">head_oid<pos:position pos:line="65" pos:column="48"/></name><operator pos:line="65" pos:column="48">.<pos:position pos:line="65" pos:column="49"/></operator><name pos:line="65" pos:column="49">hash<pos:position pos:line="65" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="55">&amp;<pos:position pos:line="65" pos:column="60"/></operator><name pos:line="65" pos:column="56">head_type<pos:position pos:line="65" pos:column="65"/></name></expr></argument>)<pos:position pos:line="65" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="67"/></expr_stmt>

	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">head_ref<pos:position pos:line="67" pos:column="21"/></name> <operator pos:line="67" pos:column="22">&amp;&amp;<pos:position pos:line="67" pos:column="32"/></operator> <operator pos:line="67" pos:column="25">!<pos:position pos:line="67" pos:column="26"/></operator><operator pos:line="67" pos:column="26">(<pos:position pos:line="67" pos:column="27"/></operator><name pos:line="67" pos:column="27">head_type<pos:position pos:line="67" pos:column="36"/></name> <operator pos:line="67" pos:column="37">&amp;<pos:position pos:line="67" pos:column="42"/></operator> <name pos:line="67" pos:column="39">REF_ISSYMREF<pos:position pos:line="67" pos:column="51"/></name><operator pos:line="67" pos:column="51">)<pos:position pos:line="67" pos:column="52"/></operator></expr>)<pos:position pos:line="67" pos:column="53"/></condition><then pos:line="67" pos:column="53"> <block pos:line="67" pos:column="54">{
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">FREE_AND_NULL<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><name pos:line="68" pos:column="31">head_ref<pos:position pos:line="68" pos:column="39"/></name></expr></argument>)<pos:position pos:line="68" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="69" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="71" pos:column="9">/*
	 * Acquire all locks, verify old values if provided, check
	 * that new values are valid, and write new values to the
	 * lockfiles, ready to be activated. Only keep one lockfile
	 * open at a time to avoid running out of file descriptors.
	 * Note that lock_ref_for_update() might append more updates
	 * to the transaction.
	 */</comment>
	<for pos:line="79" pos:column="9">for <control pos:line="79" pos:column="13">(<init><expr><name pos:line="79" pos:column="14">i<pos:position pos:line="79" pos:column="15"/></name> <operator pos:line="79" pos:column="16">=<pos:position pos:line="79" pos:column="17"/></operator> <literal type="number" pos:line="79" pos:column="18">0<pos:position pos:line="79" pos:column="19"/></literal></expr>;<pos:position pos:line="79" pos:column="20"/></init> <condition><expr><name pos:line="79" pos:column="21">i<pos:position pos:line="79" pos:column="22"/></name> <operator pos:line="79" pos:column="23">&lt;<pos:position pos:line="79" pos:column="27"/></operator> <name><name pos:line="79" pos:column="25">transaction<pos:position pos:line="79" pos:column="36"/></name><operator pos:line="79" pos:column="36">-&gt;<pos:position pos:line="79" pos:column="41"/></operator><name pos:line="79" pos:column="38">nr<pos:position pos:line="79" pos:column="40"/></name></name></expr>;<pos:position pos:line="79" pos:column="41"/></condition> <incr><expr><name pos:line="79" pos:column="42">i<pos:position pos:line="79" pos:column="43"/></name><operator pos:line="79" pos:column="43">++<pos:position pos:line="79" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="79" pos:column="46"/></control> <block pos:line="79" pos:column="47">{
		<decl_stmt><decl><type><name><name pos:line="80" pos:column="17">struct<pos:position pos:line="80" pos:column="23"/></name> <name pos:line="80" pos:column="24">ref_update<pos:position pos:line="80" pos:column="34"/></name></name> <modifier pos:line="80" pos:column="35">*<pos:position pos:line="80" pos:column="36"/></modifier></type><name pos:line="80" pos:column="36">update<pos:position pos:line="80" pos:column="42"/></name> <init pos:line="80" pos:column="43">= <expr><name><name pos:line="80" pos:column="45">transaction<pos:position pos:line="80" pos:column="56"/></name><operator pos:line="80" pos:column="56">-&gt;<pos:position pos:line="80" pos:column="61"/></operator><name pos:line="80" pos:column="58">updates<pos:position pos:line="80" pos:column="65"/></name><index pos:line="80" pos:column="65">[<expr><name pos:line="80" pos:column="66">i<pos:position pos:line="80" pos:column="67"/></name></expr>]<pos:position pos:line="80" pos:column="68"/></index></name></expr></init></decl>;<pos:position pos:line="80" pos:column="69"/></decl_stmt>

		<expr_stmt><expr><name pos:line="82" pos:column="17">ret<pos:position pos:line="82" pos:column="20"/></name> <operator pos:line="82" pos:column="21">=<pos:position pos:line="82" pos:column="22"/></operator> <call><name pos:line="82" pos:column="23">lock_ref_for_update<pos:position pos:line="82" pos:column="42"/></name><argument_list pos:line="82" pos:column="42">(<argument><expr><name pos:line="82" pos:column="43">refs<pos:position pos:line="82" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="49">update<pos:position pos:line="82" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="57">transaction<pos:position pos:line="82" pos:column="68"/></name></expr></argument>,
					  <argument><expr><name pos:line="83" pos:column="43">head_ref<pos:position pos:line="83" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="53">&amp;<pos:position pos:line="83" pos:column="58"/></operator><name pos:line="83" pos:column="54">affected_refnames<pos:position pos:line="83" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="73">err<pos:position pos:line="83" pos:column="76"/></name></expr></argument>)<pos:position pos:line="83" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="78"/></expr_stmt>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name pos:line="84" pos:column="21">ret<pos:position pos:line="84" pos:column="24"/></name></expr>)<pos:position pos:line="84" pos:column="25"/></condition><then pos:line="84" pos:column="25">
			<block type="pseudo"><break pos:line="85" pos:column="25">break;<pos:position pos:line="85" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="86" pos:column="10"/></block></for>

<label><name pos:line="88" pos:column="1">cleanup<pos:position pos:line="88" pos:column="8"/></name>:<pos:position pos:line="88" pos:column="9"/></label>
	<expr_stmt><expr><call><name pos:line="89" pos:column="9">free<pos:position pos:line="89" pos:column="13"/></name><argument_list pos:line="89" pos:column="13">(<argument><expr><name pos:line="89" pos:column="14">head_ref<pos:position pos:line="89" pos:column="22"/></name></expr></argument>)<pos:position pos:line="89" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="90" pos:column="9">string_list_clear<pos:position pos:line="90" pos:column="26"/></name><argument_list pos:line="90" pos:column="26">(<argument><expr><operator pos:line="90" pos:column="27">&amp;<pos:position pos:line="90" pos:column="32"/></operator><name pos:line="90" pos:column="28">affected_refnames<pos:position pos:line="90" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="47">0<pos:position pos:line="90" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="50"/></expr_stmt>

	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">ret<pos:position pos:line="92" pos:column="16"/></name></expr>)<pos:position pos:line="92" pos:column="17"/></condition><then pos:line="92" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="17">files_transaction_cleanup<pos:position pos:line="93" pos:column="42"/></name><argument_list pos:line="93" pos:column="42">(<argument><expr><name pos:line="93" pos:column="43">transaction<pos:position pos:line="93" pos:column="54"/></name></expr></argument>)<pos:position pos:line="93" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="56"/></expr_stmt></block></then>
	<else pos:line="94" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="95" pos:column="17">transaction<pos:position pos:line="95" pos:column="28"/></name><operator pos:line="95" pos:column="28">-&gt;<pos:position pos:line="95" pos:column="33"/></operator><name pos:line="95" pos:column="30">state<pos:position pos:line="95" pos:column="35"/></name></name> <operator pos:line="95" pos:column="36">=<pos:position pos:line="95" pos:column="37"/></operator> <name pos:line="95" pos:column="38">REF_TRANSACTION_PREPARED<pos:position pos:line="95" pos:column="62"/></name></expr>;<pos:position pos:line="95" pos:column="63"/></expr_stmt></block></else></if>

	<return pos:line="97" pos:column="9">return <expr><name pos:line="97" pos:column="16">ret<pos:position pos:line="97" pos:column="19"/></name></expr>;<pos:position pos:line="97" pos:column="20"/></return>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
