<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3382_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">refname_is_safe<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">refname<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">rest<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">skip_prefix<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><name pos:line="5" pos:column="25">refname<pos:position pos:line="5" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="34">"refs/"<pos:position pos:line="5" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="5" pos:column="43">&amp;<pos:position pos:line="5" pos:column="48"/></operator><name pos:line="5" pos:column="44">rest<pos:position pos:line="5" pos:column="48"/></name></expr></argument>)<pos:position pos:line="5" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="50"/></condition><then pos:line="5" pos:column="50"> <block pos:line="5" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">char<pos:position pos:line="6" pos:column="21"/></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">buf<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">result<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">size_t<pos:position pos:line="8" pos:column="23"/></name></type> <name pos:line="8" pos:column="24">restlen<pos:position pos:line="8" pos:column="31"/></name> <init pos:line="8" pos:column="32">= <expr><call><name pos:line="8" pos:column="34">strlen<pos:position pos:line="8" pos:column="40"/></name><argument_list pos:line="8" pos:column="40">(<argument><expr><name pos:line="8" pos:column="41">rest<pos:position pos:line="8" pos:column="45"/></name></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="47"/></decl_stmt>

		<comment type="block" pos:line="10" pos:column="17">/* rest must not be empty, or start or end with "/" */</comment>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">restlen<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">||<pos:position pos:line="11" pos:column="32"/></operator> <operator pos:line="11" pos:column="33">*<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">rest<pos:position pos:line="11" pos:column="38"/></name> <operator pos:line="11" pos:column="39">==<pos:position pos:line="11" pos:column="41"/></operator> <literal type="char" pos:line="11" pos:column="42">'/'<pos:position pos:line="11" pos:column="45"/></literal> <operator pos:line="11" pos:column="46">||<pos:position pos:line="11" pos:column="48"/></operator> <name><name pos:line="11" pos:column="49">rest<pos:position pos:line="11" pos:column="53"/></name><index pos:line="11" pos:column="53">[<expr><name pos:line="11" pos:column="54">restlen<pos:position pos:line="11" pos:column="61"/></name> <operator pos:line="11" pos:column="62">-<pos:position pos:line="11" pos:column="63"/></operator> <literal type="number" pos:line="11" pos:column="64">1<pos:position pos:line="11" pos:column="65"/></literal></expr>]<pos:position pos:line="11" pos:column="66"/></index></name> <operator pos:line="11" pos:column="67">==<pos:position pos:line="11" pos:column="69"/></operator> <literal type="char" pos:line="11" pos:column="70">'/'<pos:position pos:line="11" pos:column="73"/></literal></expr>)<pos:position pos:line="11" pos:column="74"/></condition><then pos:line="11" pos:column="74">
			<block type="pseudo"><return pos:line="12" pos:column="25">return <expr><literal type="number" pos:line="12" pos:column="32">0<pos:position pos:line="12" pos:column="33"/></literal></expr>;<pos:position pos:line="12" pos:column="34"/></return></block></then></if>

		<comment type="block" pos:line="14" pos:column="17">/*
		 * Does the refname try to escape refs/?
		 * For example: refs/foo/../bar is safe but refs/foo/../../bar
		 * is not.
		 */</comment>
		<expr_stmt><expr><name pos:line="19" pos:column="17">buf<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <call><name pos:line="19" pos:column="23">xmallocz<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">restlen<pos:position pos:line="19" pos:column="39"/></name></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">result<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <operator pos:line="20" pos:column="26">!<pos:position pos:line="20" pos:column="27"/></operator><call><name pos:line="20" pos:column="27">normalize_path_copy<pos:position pos:line="20" pos:column="46"/></name><argument_list pos:line="20" pos:column="46">(<argument><expr><name pos:line="20" pos:column="47">buf<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="52">rest<pos:position pos:line="20" pos:column="56"/></name></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call> <operator pos:line="20" pos:column="58">&amp;&amp;<pos:position pos:line="20" pos:column="68"/></operator> <operator pos:line="20" pos:column="61">!<pos:position pos:line="20" pos:column="62"/></operator><call><name pos:line="20" pos:column="62">strcmp<pos:position pos:line="20" pos:column="68"/></name><argument_list pos:line="20" pos:column="68">(<argument><expr><name pos:line="20" pos:column="69">buf<pos:position pos:line="20" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="74">rest<pos:position pos:line="20" pos:column="78"/></name></expr></argument>)<pos:position pos:line="20" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="80"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">free<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">buf<pos:position pos:line="21" pos:column="25"/></name></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
		<return pos:line="22" pos:column="17">return <expr><name pos:line="22" pos:column="24">result<pos:position pos:line="22" pos:column="30"/></name></expr>;<pos:position pos:line="22" pos:column="31"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<do pos:line="25" pos:column="9">do <block pos:line="25" pos:column="12">{
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">!<pos:position pos:line="26" pos:column="22"/></operator><call><name pos:line="26" pos:column="22">isupper<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><operator pos:line="26" pos:column="30">*<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="31">refname<pos:position pos:line="26" pos:column="38"/></name></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call> <operator pos:line="26" pos:column="40">&amp;&amp;<pos:position pos:line="26" pos:column="50"/></operator> <operator pos:line="26" pos:column="43">*<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="44">refname<pos:position pos:line="26" pos:column="51"/></name> <operator pos:line="26" pos:column="52">!=<pos:position pos:line="26" pos:column="54"/></operator> <literal type="char" pos:line="26" pos:column="55">'_'<pos:position pos:line="26" pos:column="58"/></literal></expr>)<pos:position pos:line="26" pos:column="59"/></condition><then pos:line="26" pos:column="59">
			<block type="pseudo"><return pos:line="27" pos:column="25">return <expr><literal type="number" pos:line="27" pos:column="32">0<pos:position pos:line="27" pos:column="33"/></literal></expr>;<pos:position pos:line="27" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="28" pos:column="17">refname<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">++<pos:position pos:line="28" pos:column="26"/></operator></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block> while <condition pos:line="29" pos:column="17">(<expr><operator pos:line="29" pos:column="18">*<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">refname<pos:position pos:line="29" pos:column="26"/></name></expr>)<pos:position pos:line="29" pos:column="27"/></condition>;<pos:position pos:line="29" pos:column="28"/></do>
	<return pos:line="30" pos:column="9">return <expr><literal type="number" pos:line="30" pos:column="16">1<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
