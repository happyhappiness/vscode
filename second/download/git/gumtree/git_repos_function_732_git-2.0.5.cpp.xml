<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_732_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">read_and_strip_branch<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">path<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">sb<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name pos:line="3" pos:column="28">STRBUF_INIT<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">sha1<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">strbuf_read_file<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><operator pos:line="6" pos:column="30">&amp;<pos:position pos:line="6" pos:column="35"/></operator><name pos:line="6" pos:column="31">sb<pos:position pos:line="6" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="35">git_path<pos:position pos:line="6" pos:column="43"/></name><argument_list pos:line="6" pos:column="43">(<argument><expr><literal type="string" pos:line="6" pos:column="44">"%s"<pos:position pos:line="6" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="50">path<pos:position pos:line="6" pos:column="54"/></name></expr></argument>)<pos:position pos:line="6" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="57">0<pos:position pos:line="6" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="59"/></argument_list></call> <operator pos:line="6" pos:column="60">&lt;=<pos:position pos:line="6" pos:column="65"/></operator> <literal type="number" pos:line="6" pos:column="63">0<pos:position pos:line="6" pos:column="64"/></literal></expr>)<pos:position pos:line="6" pos:column="65"/></condition><then pos:line="6" pos:column="65">
		<block type="pseudo"><goto pos:line="7" pos:column="17">goto <name pos:line="7" pos:column="22">got_nothing<pos:position pos:line="7" pos:column="33"/></name>;<pos:position pos:line="7" pos:column="34"/></goto></block></then></if>

	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><operator pos:line="9" pos:column="16">&amp;<pos:position pos:line="9" pos:column="21"/></operator><name><name pos:line="9" pos:column="17">sb<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">.<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">len<pos:position pos:line="9" pos:column="23"/></name></name> <operator pos:line="9" pos:column="24">&amp;&amp;<pos:position pos:line="9" pos:column="34"/></operator> <name><name pos:line="9" pos:column="27">sb<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">.<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="30">buf<pos:position pos:line="9" pos:column="33"/></name><index pos:line="9" pos:column="33">[<expr><name><name pos:line="9" pos:column="34">sb<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">.<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="37">len<pos:position pos:line="9" pos:column="40"/></name></name> <operator pos:line="9" pos:column="41">-<pos:position pos:line="9" pos:column="42"/></operator> <literal type="number" pos:line="9" pos:column="43">1<pos:position pos:line="9" pos:column="44"/></literal></expr>]<pos:position pos:line="9" pos:column="45"/></index></name> <operator pos:line="9" pos:column="46">==<pos:position pos:line="9" pos:column="48"/></operator> <literal type="char" pos:line="9" pos:column="49">'\n'<pos:position pos:line="9" pos:column="53"/></literal></expr>)<pos:position pos:line="9" pos:column="54"/></condition>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">strbuf_setlen<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><operator pos:line="10" pos:column="31">&amp;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="32">sb<pos:position pos:line="10" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="36">sb<pos:position pos:line="10" pos:column="38"/></name><operator pos:line="10" pos:column="38">.<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="39">len<pos:position pos:line="10" pos:column="42"/></name></name> <operator pos:line="10" pos:column="43">-<pos:position pos:line="10" pos:column="44"/></operator> <literal type="number" pos:line="10" pos:column="45">1<pos:position pos:line="10" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt></block></while>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name><name pos:line="11" pos:column="14">sb<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">len<pos:position pos:line="11" pos:column="20"/></name></name></expr>)<pos:position pos:line="11" pos:column="21"/></condition><then pos:line="11" pos:column="21">
		<block type="pseudo"><goto pos:line="12" pos:column="17">goto <name pos:line="12" pos:column="22">got_nothing<pos:position pos:line="12" pos:column="33"/></name>;<pos:position pos:line="12" pos:column="34"/></goto></block></then></if>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">starts_with<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name><name pos:line="13" pos:column="25">sb<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">.<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="28">buf<pos:position pos:line="13" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="33">"refs/heads/"<pos:position pos:line="13" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="48"/></condition><then pos:line="13" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_remove<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><operator pos:line="14" pos:column="31">&amp;<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="32">sb<pos:position pos:line="14" pos:column="34"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="14" pos:column="35">0<pos:position pos:line="14" pos:column="36"/></literal></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="38">strlen<pos:position pos:line="14" pos:column="44"/></name><argument_list pos:line="14" pos:column="44">(<argument><expr><literal type="string" pos:line="14" pos:column="45">"refs/heads/"<pos:position pos:line="14" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="61"/></expr_stmt></block></then>
	<elseif pos:line="15" pos:column="9">else <if pos:line="15" pos:column="14">if <condition pos:line="15" pos:column="17">(<expr><call><name pos:line="15" pos:column="18">starts_with<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name><name pos:line="15" pos:column="30">sb<pos:position pos:line="15" pos:column="32"/></name><operator pos:line="15" pos:column="32">.<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="33">buf<pos:position pos:line="15" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="38">"refs/"<pos:position pos:line="15" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="47"/></condition><then pos:line="15" pos:column="47">
		<block type="pseudo"><empty_stmt pos:line="16" pos:column="17">;<pos:position pos:line="16" pos:column="18"/></empty_stmt></block></then></if></elseif>
	<elseif pos:line="17" pos:column="9">else <if pos:line="17" pos:column="14">if <condition pos:line="17" pos:column="17">(<expr><operator pos:line="17" pos:column="18">!<pos:position pos:line="17" pos:column="19"/></operator><call><name pos:line="17" pos:column="19">get_sha1_hex<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name><name pos:line="17" pos:column="32">sb<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">.<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="35">buf<pos:position pos:line="17" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="40">sha1<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46"> <block pos:line="17" pos:column="47">{
		<decl_stmt><decl><type><specifier pos:line="18" pos:column="17">const<pos:position pos:line="18" pos:column="22"/></specifier> <name pos:line="18" pos:column="23">char<pos:position pos:line="18" pos:column="27"/></name> <modifier pos:line="18" pos:column="28">*<pos:position pos:line="18" pos:column="29"/></modifier></type><name pos:line="18" pos:column="29">abbrev<pos:position pos:line="18" pos:column="35"/></name></decl>;<pos:position pos:line="18" pos:column="36"/></decl_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">abbrev<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <call><name pos:line="19" pos:column="26">find_unique_abbrev<pos:position pos:line="19" pos:column="44"/></name><argument_list pos:line="19" pos:column="44">(<argument><expr><name pos:line="19" pos:column="45">sha1<pos:position pos:line="19" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="51">DEFAULT_ABBREV<pos:position pos:line="19" pos:column="65"/></name></expr></argument>)<pos:position pos:line="19" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">strbuf_reset<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><operator pos:line="20" pos:column="30">&amp;<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="31">sb<pos:position pos:line="20" pos:column="33"/></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">strbuf_addstr<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><operator pos:line="21" pos:column="31">&amp;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="32">sb<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="36">abbrev<pos:position pos:line="21" pos:column="42"/></name></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if></elseif> <elseif pos:line="22" pos:column="11">else <if pos:line="22" pos:column="16">if <condition pos:line="22" pos:column="19">(<expr><operator pos:line="22" pos:column="20">!<pos:position pos:line="22" pos:column="21"/></operator><call><name pos:line="22" pos:column="21">strcmp<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name><name pos:line="22" pos:column="28">sb<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">.<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">buf<pos:position pos:line="22" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="36">"detached HEAD"<pos:position pos:line="22" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="53"/></condition><then pos:line="22" pos:column="53"> <comment type="block" pos:line="22" pos:column="54">/* rebase */</comment>
		<block type="pseudo"><goto pos:line="23" pos:column="17">goto <name pos:line="23" pos:column="22">got_nothing<pos:position pos:line="23" pos:column="33"/></name>;<pos:position pos:line="23" pos:column="34"/></goto></block></then></if></elseif>
	<else pos:line="24" pos:column="9">else			<comment type="block" pos:line="24" pos:column="33">/* bisect */</comment>
		<block type="pseudo"><empty_stmt pos:line="25" pos:column="17">;<pos:position pos:line="25" pos:column="18"/></empty_stmt></block></else></if>
	<return pos:line="26" pos:column="9">return <expr><call><name pos:line="26" pos:column="16">strbuf_detach<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><operator pos:line="26" pos:column="30">&amp;<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="31">sb<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">NULL<pos:position pos:line="26" pos:column="39"/></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></return>

<label><name pos:line="28" pos:column="1">got_nothing<pos:position pos:line="28" pos:column="12"/></name>:<pos:position pos:line="28" pos:column="13"/></label>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">strbuf_release<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><operator pos:line="29" pos:column="24">&amp;<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="25">sb<pos:position pos:line="29" pos:column="27"/></name></expr></argument>)<pos:position pos:line="29" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>
	<return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">NULL<pos:position pos:line="30" pos:column="20"/></name></expr>;<pos:position pos:line="30" pos:column="21"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
