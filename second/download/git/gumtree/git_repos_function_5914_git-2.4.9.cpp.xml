<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5914_git-2.4.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">parse_bracket_symbol<pos:position pos:line="2" pos:column="21"/></name> <parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">bracket_elem_t<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">elem<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">re_string_t<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">regexp<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="3" pos:column="23">re_token_t<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">token<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="41"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">ch<pos:position pos:line="5" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="21">delim<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name><name pos:line="5" pos:column="29">token<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">-&gt;<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="36">opr<pos:position pos:line="5" pos:column="39"/></name><operator pos:line="5" pos:column="39">.<pos:position pos:line="5" pos:column="40"/></operator><name pos:line="5" pos:column="40">c<pos:position pos:line="5" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name> <init pos:line="6" pos:column="9">= <expr><literal type="number" pos:line="6" pos:column="11">0<pos:position pos:line="6" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><call><name pos:line="7" pos:column="7">re_string_eoi<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">regexp<pos:position pos:line="7" pos:column="27"/></name></expr></argument>)<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="29"/></condition><then pos:line="7" pos:column="29">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><name pos:line="8" pos:column="12">REG_EBRACK<pos:position pos:line="8" pos:column="22"/></name></expr>;<pos:position pos:line="8" pos:column="23"/></return></block></then></if>
  <for pos:line="9" pos:column="3">for <control pos:line="9" pos:column="7">(<init pos:line="9" pos:column="8">;<pos:position pos:line="9" pos:column="9"/></init><condition pos:line="9" pos:column="9">;<pos:position pos:line="9" pos:column="10"/></condition> <incr><expr><operator pos:line="9" pos:column="11">++<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">i<pos:position pos:line="9" pos:column="14"/></name></expr></incr>)<pos:position pos:line="9" pos:column="15"/></control>
    <block pos:line="10" pos:column="5">{
      <if pos:line="11" pos:column="7">if <condition pos:line="11" pos:column="10">(<expr><name pos:line="11" pos:column="11">i<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">&gt;=<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="16">BRACKET_NAME_BUF_SIZE<pos:position pos:line="11" pos:column="37"/></name></expr>)<pos:position pos:line="11" pos:column="38"/></condition><then pos:line="11" pos:column="38">
	<block type="pseudo"><return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">REG_EBRACK<pos:position pos:line="12" pos:column="26"/></name></expr>;<pos:position pos:line="12" pos:column="27"/></return></block></then></if>
      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><name><name pos:line="13" pos:column="11">token<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">-&gt;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="18">type<pos:position pos:line="13" pos:column="22"/></name></name> <operator pos:line="13" pos:column="23">==<pos:position pos:line="13" pos:column="25"/></operator> <name pos:line="13" pos:column="26">OP_OPEN_CHAR_CLASS<pos:position pos:line="13" pos:column="44"/></name></expr>)<pos:position pos:line="13" pos:column="45"/></condition><then pos:line="13" pos:column="45">
	<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="9">ch<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <call><name pos:line="14" pos:column="14">re_string_fetch_byte_case<pos:position pos:line="14" pos:column="39"/></name> <argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">regexp<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt></block></then>
      <else pos:line="15" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="9">ch<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">re_string_fetch_byte<pos:position pos:line="16" pos:column="34"/></name> <argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">regexp<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt></block></else></if>
      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><call><name pos:line="17" pos:column="11">re_string_eoi<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">regexp<pos:position pos:line="17" pos:column="31"/></name></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33">
	<block type="pseudo"><return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">REG_EBRACK<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></return></block></then></if>
      <if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><name pos:line="19" pos:column="11">ch<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">==<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="17">delim<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">&amp;&amp;<pos:position pos:line="19" pos:column="33"/></operator> <call><name pos:line="19" pos:column="26">re_string_peek_byte<pos:position pos:line="19" pos:column="45"/></name> <argument_list pos:line="19" pos:column="46">(<argument><expr><name pos:line="19" pos:column="47">regexp<pos:position pos:line="19" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="55">0<pos:position pos:line="19" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call> <operator pos:line="19" pos:column="58">==<pos:position pos:line="19" pos:column="60"/></operator> <literal type="char" pos:line="19" pos:column="61">']'<pos:position pos:line="19" pos:column="64"/></literal></expr>)<pos:position pos:line="19" pos:column="65"/></condition><then pos:line="19" pos:column="65">
	<block type="pseudo"><break pos:line="20" pos:column="9">break;<pos:position pos:line="20" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><name><name pos:line="21" pos:column="7">elem<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">-&gt;<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="13">opr<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">.<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">name<pos:position pos:line="21" pos:column="21"/></name><index pos:line="21" pos:column="21">[<expr><name pos:line="21" pos:column="22">i<pos:position pos:line="21" pos:column="23"/></name></expr>]<pos:position pos:line="21" pos:column="24"/></index></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">ch<pos:position pos:line="21" pos:column="29"/></name></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></for>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">re_string_skip_bytes<pos:position pos:line="23" pos:column="23"/></name> <argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">regexp<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="33">1<pos:position pos:line="23" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">elem<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">-&gt;<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="9">opr<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">.<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">name<pos:position pos:line="24" pos:column="17"/></name><index pos:line="24" pos:column="17">[<expr><name pos:line="24" pos:column="18">i<pos:position pos:line="24" pos:column="19"/></name></expr>]<pos:position pos:line="24" pos:column="20"/></index></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <literal type="char" pos:line="24" pos:column="23">'\0'<pos:position pos:line="24" pos:column="27"/></literal></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
  <switch pos:line="25" pos:column="3">switch <condition pos:line="25" pos:column="10">(<expr><name><name pos:line="25" pos:column="11">token<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">-&gt;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="18">type<pos:position pos:line="25" pos:column="22"/></name></name></expr>)<pos:position pos:line="25" pos:column="23"/></condition>
    <block pos:line="26" pos:column="5">{
    <case pos:line="27" pos:column="5">case <expr><name pos:line="27" pos:column="10">OP_OPEN_COLL_ELEM<pos:position pos:line="27" pos:column="27"/></name></expr>:<pos:position pos:line="27" pos:column="28"/></case>
      <expr_stmt><expr><name><name pos:line="28" pos:column="7">elem<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">-&gt;<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="13">type<pos:position pos:line="28" pos:column="17"/></name></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <name pos:line="28" pos:column="20">COLL_SYM<pos:position pos:line="28" pos:column="28"/></name></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
      <break pos:line="29" pos:column="7">break;<pos:position pos:line="29" pos:column="13"/></break>
    <case pos:line="30" pos:column="5">case <expr><name pos:line="30" pos:column="10">OP_OPEN_EQUIV_CLASS<pos:position pos:line="30" pos:column="29"/></name></expr>:<pos:position pos:line="30" pos:column="30"/></case>
      <expr_stmt><expr><name><name pos:line="31" pos:column="7">elem<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">-&gt;<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="13">type<pos:position pos:line="31" pos:column="17"/></name></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <name pos:line="31" pos:column="20">EQUIV_CLASS<pos:position pos:line="31" pos:column="31"/></name></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
      <break pos:line="32" pos:column="7">break;<pos:position pos:line="32" pos:column="13"/></break>
    <case pos:line="33" pos:column="5">case <expr><name pos:line="33" pos:column="10">OP_OPEN_CHAR_CLASS<pos:position pos:line="33" pos:column="28"/></name></expr>:<pos:position pos:line="33" pos:column="29"/></case>
      <expr_stmt><expr><name><name pos:line="34" pos:column="7">elem<pos:position pos:line="34" pos:column="11"/></name><operator pos:line="34" pos:column="11">-&gt;<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="13">type<pos:position pos:line="34" pos:column="17"/></name></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <name pos:line="34" pos:column="20">CHAR_CLASS<pos:position pos:line="34" pos:column="30"/></name></expr>;<pos:position pos:line="34" pos:column="31"/></expr_stmt>
      <break pos:line="35" pos:column="7">break;<pos:position pos:line="35" pos:column="13"/></break>
    <default pos:line="36" pos:column="5">default:<pos:position pos:line="36" pos:column="13"/></default>
      <break pos:line="37" pos:column="7">break;<pos:position pos:line="37" pos:column="13"/></break>
    }<pos:position pos:line="38" pos:column="6"/></block></switch>
  <return pos:line="39" pos:column="3">return <expr><name pos:line="39" pos:column="10">REG_NOERROR<pos:position pos:line="39" pos:column="21"/></name></expr>;<pos:position pos:line="39" pos:column="22"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
