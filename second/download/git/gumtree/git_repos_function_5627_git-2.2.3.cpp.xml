<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5627_git-2.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">threadcache_malloc<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">nedpool<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">p<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">threadcache<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">tc<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">size_t<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">size<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list> <name pos:line="1" pos:column="76">THROWSPEC<pos:position pos:line="1" pos:column="85"/></name>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">void<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">ret<pos:position pos:line="3" pos:column="18"/></name><init pos:line="3" pos:column="18">=<expr><literal type="number" pos:line="3" pos:column="19">0<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">int<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">bestsize<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">int<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">idx<pos:position pos:line="5" pos:column="25"/></name><init pos:line="5" pos:column="25">=<expr><call><name pos:line="5" pos:column="26">size2binidx<pos:position pos:line="5" pos:column="37"/></name><argument_list pos:line="5" pos:column="37">(<argument><expr><operator pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="39">size<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">blksize<pos:position pos:line="6" pos:column="23"/></name><init pos:line="6" pos:column="23">=<expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">threadcacheblk<pos:position pos:line="7" pos:column="23"/></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">blk<pos:position pos:line="7" pos:column="28"/></name></decl>, <modifier pos:line="7" pos:column="30">*<pos:position pos:line="7" pos:column="31"/></modifier><modifier pos:line="7" pos:column="31">*<pos:position pos:line="7" pos:column="32"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="32">binsptr<pos:position pos:line="7" pos:column="39"/></name></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">FULLSANITYCHECKS<pos:position pos:line="8" pos:column="24"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">tcfullsanitycheck<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">tc<pos:position pos:line="9" pos:column="29"/></name></expr></argument>)<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>
	<comment type="block" pos:line="11" pos:column="9">/* Calculate best fit bin size */</comment>
	<expr_stmt><expr><name pos:line="12" pos:column="9">bestsize<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator><literal type="number" pos:line="12" pos:column="18">1<pos:position pos:line="12" pos:column="19"/></literal><operator pos:line="12" pos:column="19">&lt;&lt;<pos:position pos:line="12" pos:column="27"/></operator><operator pos:line="12" pos:column="21">(<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">idx<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">+<pos:position pos:line="12" pos:column="26"/></operator><literal type="number" pos:line="12" pos:column="26">4<pos:position pos:line="12" pos:column="27"/></literal><operator pos:line="12" pos:column="27">)<pos:position pos:line="12" pos:column="28"/></operator></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="13" pos:column="5">0<pos:position pos:line="13" pos:column="6"/></literal></expr></cpp:if>
	<comment type="block" pos:line="14" pos:column="9">/* Finer grained bin fit */</comment>
	idx&lt;&lt;=1;
	if(*size&gt;bestsize)
	{
		idx++;
		bestsize+=bestsize&gt;&gt;1;
	}
	if(*size&gt;bestsize)
	{
		idx++;
		bestsize=1&lt;&lt;(4+(idx&gt;&gt;1));
	}
<cpp:else pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">else<pos:position pos:line="26" pos:column="6"/></cpp:directive></cpp:else>
	<if pos:line="27" pos:column="9">if<condition pos:line="27" pos:column="11">(<expr><operator pos:line="27" pos:column="12">*<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="13">size<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">&gt;<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="18">bestsize<pos:position pos:line="27" pos:column="26"/></name></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27">
	<block pos:line="28" pos:column="9">{
		<expr_stmt><expr><name pos:line="29" pos:column="17">idx<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">++<pos:position pos:line="29" pos:column="22"/></operator></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">bestsize<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">&lt;&lt;=<pos:position pos:line="30" pos:column="34"/></operator><literal type="number" pos:line="30" pos:column="28">1<pos:position pos:line="30" pos:column="29"/></literal></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">assert<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">bestsize<pos:position pos:line="33" pos:column="24"/></name><operator pos:line="33" pos:column="24">&gt;=<pos:position pos:line="33" pos:column="29"/></operator><operator pos:line="33" pos:column="26">*<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="27">size<pos:position pos:line="33" pos:column="31"/></name></expr></argument>)<pos:position pos:line="33" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
	<if pos:line="34" pos:column="9">if<condition pos:line="34" pos:column="11">(<expr><operator pos:line="34" pos:column="12">*<pos:position pos:line="34" pos:column="13"/></operator><name pos:line="34" pos:column="13">size<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">&lt;<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="18">bestsize<pos:position pos:line="34" pos:column="26"/></name></expr>)<pos:position pos:line="34" pos:column="27"/></condition><then pos:line="34" pos:column="27"> <block type="pseudo"><expr_stmt><expr><operator pos:line="34" pos:column="28">*<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="29">size<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">=<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="34">bestsize<pos:position pos:line="34" pos:column="42"/></name></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">assert<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><operator pos:line="35" pos:column="16">*<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">size<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">&lt;=<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="23">THREADCACHEMAX<pos:position pos:line="35" pos:column="37"/></name></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">assert<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">idx<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">&lt;=<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="21">THREADCACHEMAXBINS<pos:position pos:line="36" pos:column="39"/></name></expr></argument>)<pos:position pos:line="36" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name pos:line="37" pos:column="9">binsptr<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator><operator pos:line="37" pos:column="17">&amp;<pos:position pos:line="37" pos:column="22"/></operator><name><name pos:line="37" pos:column="18">tc<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">-&gt;<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="22">bins<pos:position pos:line="37" pos:column="26"/></name><index pos:line="37" pos:column="26">[<expr><name pos:line="37" pos:column="27">idx<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">*<pos:position pos:line="37" pos:column="31"/></operator><literal type="number" pos:line="37" pos:column="31">2<pos:position pos:line="37" pos:column="32"/></literal></expr>]<pos:position pos:line="37" pos:column="33"/></index></name></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>
	<comment type="block" pos:line="38" pos:column="9">/* Try to match close, but move up a bin if necessary */</comment>
	<expr_stmt><expr><name pos:line="39" pos:column="9">blk<pos:position pos:line="39" pos:column="12"/></name><operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator><operator pos:line="39" pos:column="13">*<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="14">binsptr<pos:position pos:line="39" pos:column="21"/></name></expr>;<pos:position pos:line="39" pos:column="22"/></expr_stmt>
	<if pos:line="40" pos:column="9">if<condition pos:line="40" pos:column="11">(<expr><operator pos:line="40" pos:column="12">!<pos:position pos:line="40" pos:column="13"/></operator><name pos:line="40" pos:column="13">blk<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">||<pos:position pos:line="40" pos:column="19"/></operator> <name><name pos:line="40" pos:column="20">blk<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">size<pos:position pos:line="40" pos:column="29"/></name></name><operator pos:line="40" pos:column="29">&lt;<pos:position pos:line="40" pos:column="33"/></operator><operator pos:line="40" pos:column="30">*<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="31">size<pos:position pos:line="40" pos:column="35"/></name></expr>)<pos:position pos:line="40" pos:column="36"/></condition><then pos:line="40" pos:column="36">
	<block pos:line="41" pos:column="9">{	<comment type="block" pos:line="41" pos:column="17">/* Bump it up a bin */</comment>
		<if pos:line="42" pos:column="17">if<condition pos:line="42" pos:column="19">(<expr><name pos:line="42" pos:column="20">idx<pos:position pos:line="42" pos:column="23"/></name><operator pos:line="42" pos:column="23">&lt;<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="24">THREADCACHEMAXBINS<pos:position pos:line="42" pos:column="42"/></name></expr>)<pos:position pos:line="42" pos:column="43"/></condition><then pos:line="42" pos:column="43">
		<block pos:line="43" pos:column="17">{
			<expr_stmt><expr><name pos:line="44" pos:column="25">idx<pos:position pos:line="44" pos:column="28"/></name><operator pos:line="44" pos:column="28">++<pos:position pos:line="44" pos:column="30"/></operator></expr>;<pos:position pos:line="44" pos:column="31"/></expr_stmt>
			<expr_stmt><expr><name pos:line="45" pos:column="25">binsptr<pos:position pos:line="45" pos:column="32"/></name><operator pos:line="45" pos:column="32">+=<pos:position pos:line="45" pos:column="34"/></operator><literal type="number" pos:line="45" pos:column="34">2<pos:position pos:line="45" pos:column="35"/></literal></expr>;<pos:position pos:line="45" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name pos:line="46" pos:column="25">blk<pos:position pos:line="46" pos:column="28"/></name><operator pos:line="46" pos:column="28">=<pos:position pos:line="46" pos:column="29"/></operator><operator pos:line="46" pos:column="29">*<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="30">binsptr<pos:position pos:line="46" pos:column="37"/></name></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>
	<if pos:line="49" pos:column="9">if<condition pos:line="49" pos:column="11">(<expr><name pos:line="49" pos:column="12">blk<pos:position pos:line="49" pos:column="15"/></name></expr>)<pos:position pos:line="49" pos:column="16"/></condition><then pos:line="49" pos:column="16">
	<block pos:line="50" pos:column="9">{
		<expr_stmt><expr><name pos:line="51" pos:column="17">blksize<pos:position pos:line="51" pos:column="24"/></name><operator pos:line="51" pos:column="24">=<pos:position pos:line="51" pos:column="25"/></operator><name><name pos:line="51" pos:column="25">blk<pos:position pos:line="51" pos:column="28"/></name><operator pos:line="51" pos:column="28">-&gt;<pos:position pos:line="51" pos:column="33"/></operator><name pos:line="51" pos:column="30">size<pos:position pos:line="51" pos:column="34"/></name></name></expr>;<pos:position pos:line="51" pos:column="35"/></expr_stmt> <comment type="block" pos:line="51" pos:column="36">/*nedblksize(blk);*/</comment>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">assert<pos:position pos:line="52" pos:column="23"/></name><argument_list pos:line="52" pos:column="23">(<argument><expr><call><name pos:line="52" pos:column="24">nedblksize<pos:position pos:line="52" pos:column="34"/></name><argument_list pos:line="52" pos:column="34">(<argument><expr><name pos:line="52" pos:column="35">blk<pos:position pos:line="52" pos:column="38"/></name></expr></argument>)<pos:position pos:line="52" pos:column="39"/></argument_list></call><operator pos:line="52" pos:column="39">&gt;=<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="41">blksize<pos:position pos:line="52" pos:column="48"/></name></expr></argument>)<pos:position pos:line="52" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">assert<pos:position pos:line="53" pos:column="23"/></name><argument_list pos:line="53" pos:column="23">(<argument><expr><name pos:line="53" pos:column="24">blksize<pos:position pos:line="53" pos:column="31"/></name><operator pos:line="53" pos:column="31">&gt;=<pos:position pos:line="53" pos:column="36"/></operator><operator pos:line="53" pos:column="33">*<pos:position pos:line="53" pos:column="34"/></operator><name pos:line="53" pos:column="34">size<pos:position pos:line="53" pos:column="38"/></name></expr></argument>)<pos:position pos:line="53" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="40"/></expr_stmt>
		<if pos:line="54" pos:column="17">if<condition pos:line="54" pos:column="19">(<expr><name><name pos:line="54" pos:column="20">blk<pos:position pos:line="54" pos:column="23"/></name><operator pos:line="54" pos:column="23">-&gt;<pos:position pos:line="54" pos:column="28"/></operator><name pos:line="54" pos:column="25">next<pos:position pos:line="54" pos:column="29"/></name></name></expr>)<pos:position pos:line="54" pos:column="30"/></condition><then pos:line="54" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="55" pos:column="25">blk<pos:position pos:line="55" pos:column="28"/></name><operator pos:line="55" pos:column="28">-&gt;<pos:position pos:line="55" pos:column="33"/></operator><name pos:line="55" pos:column="30">next<pos:position pos:line="55" pos:column="34"/></name><operator pos:line="55" pos:column="34">-&gt;<pos:position pos:line="55" pos:column="39"/></operator><name pos:line="55" pos:column="36">prev<pos:position pos:line="55" pos:column="40"/></name></name><operator pos:line="55" pos:column="40">=<pos:position pos:line="55" pos:column="41"/></operator><literal type="number" pos:line="55" pos:column="41">0<pos:position pos:line="55" pos:column="42"/></literal></expr>;<pos:position pos:line="55" pos:column="43"/></expr_stmt></block></then></if>
		<expr_stmt><expr><operator pos:line="56" pos:column="17">*<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="18">binsptr<pos:position pos:line="56" pos:column="25"/></name><operator pos:line="56" pos:column="25">=<pos:position pos:line="56" pos:column="26"/></operator><name><name pos:line="56" pos:column="26">blk<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">-&gt;<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="31">next<pos:position pos:line="56" pos:column="35"/></name></name></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
		<if pos:line="57" pos:column="17">if<condition pos:line="57" pos:column="19">(<expr><operator pos:line="57" pos:column="20">!<pos:position pos:line="57" pos:column="21"/></operator><operator pos:line="57" pos:column="21">*<pos:position pos:line="57" pos:column="22"/></operator><name pos:line="57" pos:column="22">binsptr<pos:position pos:line="57" pos:column="29"/></name></expr>)<pos:position pos:line="57" pos:column="30"/></condition><then pos:line="57" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="58" pos:column="25">binsptr<pos:position pos:line="58" pos:column="32"/></name><index pos:line="58" pos:column="32">[<expr><literal type="number" pos:line="58" pos:column="33">1<pos:position pos:line="58" pos:column="34"/></literal></expr>]<pos:position pos:line="58" pos:column="35"/></index></name><operator pos:line="58" pos:column="35">=<pos:position pos:line="58" pos:column="36"/></operator><literal type="number" pos:line="58" pos:column="36">0<pos:position pos:line="58" pos:column="37"/></literal></expr>;<pos:position pos:line="58" pos:column="38"/></expr_stmt></block></then></if>
<cpp:ifdef pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">ifdef<pos:position pos:line="59" pos:column="7"/></cpp:directive> <name pos:line="59" pos:column="8">FULLSANITYCHECKS<pos:position pos:line="59" pos:column="24"/></name></cpp:ifdef>
		<expr_stmt><expr><name><name pos:line="60" pos:column="17">blk<pos:position pos:line="60" pos:column="20"/></name><operator pos:line="60" pos:column="20">-&gt;<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="22">magic<pos:position pos:line="60" pos:column="27"/></name></name><operator pos:line="60" pos:column="27">=<pos:position pos:line="60" pos:column="28"/></operator><literal type="number" pos:line="60" pos:column="28">0<pos:position pos:line="60" pos:column="29"/></literal></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif<pos:position pos:line="61" pos:column="7"/></cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">assert<pos:position pos:line="62" pos:column="23"/></name><argument_list pos:line="62" pos:column="23">(<argument><expr><name><name pos:line="62" pos:column="24">binsptr<pos:position pos:line="62" pos:column="31"/></name><index pos:line="62" pos:column="31">[<expr><literal type="number" pos:line="62" pos:column="32">0<pos:position pos:line="62" pos:column="33"/></literal></expr>]<pos:position pos:line="62" pos:column="34"/></index></name><operator pos:line="62" pos:column="34">!=<pos:position pos:line="62" pos:column="36"/></operator><name pos:line="62" pos:column="36">blk<pos:position pos:line="62" pos:column="39"/></name> <operator pos:line="62" pos:column="40">&amp;&amp;<pos:position pos:line="62" pos:column="50"/></operator> <name><name pos:line="62" pos:column="43">binsptr<pos:position pos:line="62" pos:column="50"/></name><index pos:line="62" pos:column="50">[<expr><literal type="number" pos:line="62" pos:column="51">1<pos:position pos:line="62" pos:column="52"/></literal></expr>]<pos:position pos:line="62" pos:column="53"/></index></name><operator pos:line="62" pos:column="53">!=<pos:position pos:line="62" pos:column="55"/></operator><name pos:line="62" pos:column="55">blk<pos:position pos:line="62" pos:column="58"/></name></expr></argument>)<pos:position pos:line="62" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">assert<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><call><name pos:line="63" pos:column="24">nedblksize<pos:position pos:line="63" pos:column="34"/></name><argument_list pos:line="63" pos:column="34">(<argument><expr><name pos:line="63" pos:column="35">blk<pos:position pos:line="63" pos:column="38"/></name></expr></argument>)<pos:position pos:line="63" pos:column="39"/></argument_list></call><operator pos:line="63" pos:column="39">&gt;=<pos:position pos:line="63" pos:column="44"/></operator><sizeof pos:line="63" pos:column="41">sizeof<argument_list pos:line="63" pos:column="47">(<argument><expr><name pos:line="63" pos:column="48">threadcacheblk<pos:position pos:line="63" pos:column="62"/></name></expr></argument>)<pos:position pos:line="63" pos:column="63"/></argument_list></sizeof> <operator pos:line="63" pos:column="64">&amp;&amp;<pos:position pos:line="63" pos:column="74"/></operator> <call><name pos:line="63" pos:column="67">nedblksize<pos:position pos:line="63" pos:column="77"/></name><argument_list pos:line="63" pos:column="77">(<argument><expr><name pos:line="63" pos:column="78">blk<pos:position pos:line="63" pos:column="81"/></name></expr></argument>)<pos:position pos:line="63" pos:column="82"/></argument_list></call><operator pos:line="63" pos:column="82">&lt;=<pos:position pos:line="63" pos:column="87"/></operator><name pos:line="63" pos:column="84">THREADCACHEMAX<pos:position pos:line="63" pos:column="98"/></name><operator pos:line="63" pos:column="98">+<pos:position pos:line="63" pos:column="99"/></operator><name pos:line="63" pos:column="99">CHUNK_OVERHEAD<pos:position pos:line="63" pos:column="113"/></name></expr></argument>)<pos:position pos:line="63" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="115"/></expr_stmt>
		<comment type="block" pos:line="64" pos:column="17">/*printf("malloc: %p, %p, %p, %lu\n", p, tc, blk, (long) size);*/</comment>
		<expr_stmt><expr><name pos:line="65" pos:column="17">ret<pos:position pos:line="65" pos:column="20"/></name><operator pos:line="65" pos:column="20">=<pos:position pos:line="65" pos:column="21"/></operator><operator pos:line="65" pos:column="21">(<pos:position pos:line="65" pos:column="22"/></operator><name pos:line="65" pos:column="22">void<pos:position pos:line="65" pos:column="26"/></name> <operator pos:line="65" pos:column="27">*<pos:position pos:line="65" pos:column="28"/></operator><operator pos:line="65" pos:column="28">)<pos:position pos:line="65" pos:column="29"/></operator> <name pos:line="65" pos:column="30">blk<pos:position pos:line="65" pos:column="33"/></name></expr>;<pos:position pos:line="65" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if>
	<expr_stmt><expr><operator pos:line="67" pos:column="9">++<pos:position pos:line="67" pos:column="11"/></operator><name><name pos:line="67" pos:column="11">tc<pos:position pos:line="67" pos:column="13"/></name><operator pos:line="67" pos:column="13">-&gt;<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="15">mallocs<pos:position pos:line="67" pos:column="22"/></name></name></expr>;<pos:position pos:line="67" pos:column="23"/></expr_stmt>
	<if pos:line="68" pos:column="9">if<condition pos:line="68" pos:column="11">(<expr><name pos:line="68" pos:column="12">ret<pos:position pos:line="68" pos:column="15"/></name></expr>)<pos:position pos:line="68" pos:column="16"/></condition><then pos:line="68" pos:column="16">
	<block pos:line="69" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">assert<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><name pos:line="70" pos:column="24">blksize<pos:position pos:line="70" pos:column="31"/></name><operator pos:line="70" pos:column="31">&gt;=<pos:position pos:line="70" pos:column="36"/></operator><operator pos:line="70" pos:column="33">*<pos:position pos:line="70" pos:column="34"/></operator><name pos:line="70" pos:column="34">size<pos:position pos:line="70" pos:column="38"/></name></expr></argument>)<pos:position pos:line="70" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="71" pos:column="17">++<pos:position pos:line="71" pos:column="19"/></operator><name><name pos:line="71" pos:column="19">tc<pos:position pos:line="71" pos:column="21"/></name><operator pos:line="71" pos:column="21">-&gt;<pos:position pos:line="71" pos:column="26"/></operator><name pos:line="71" pos:column="23">successes<pos:position pos:line="71" pos:column="32"/></name></name></expr>;<pos:position pos:line="71" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="72" pos:column="17">tc<pos:position pos:line="72" pos:column="19"/></name><operator pos:line="72" pos:column="19">-&gt;<pos:position pos:line="72" pos:column="24"/></operator><name pos:line="72" pos:column="21">freeInCache<pos:position pos:line="72" pos:column="32"/></name></name><operator pos:line="72" pos:column="32">-=<pos:position pos:line="72" pos:column="34"/></operator><name pos:line="72" pos:column="34">blksize<pos:position pos:line="72" pos:column="41"/></name></expr>;<pos:position pos:line="72" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">assert<pos:position pos:line="73" pos:column="23"/></name><argument_list pos:line="73" pos:column="23">(<argument><expr><operator pos:line="73" pos:column="24">(<pos:position pos:line="73" pos:column="25"/></operator><name pos:line="73" pos:column="25">long<pos:position pos:line="73" pos:column="29"/></name><operator pos:line="73" pos:column="29">)<pos:position pos:line="73" pos:column="30"/></operator> <name><name pos:line="73" pos:column="31">tc<pos:position pos:line="73" pos:column="33"/></name><operator pos:line="73" pos:column="33">-&gt;<pos:position pos:line="73" pos:column="38"/></operator><name pos:line="73" pos:column="35">freeInCache<pos:position pos:line="73" pos:column="46"/></name></name><operator pos:line="73" pos:column="46">&gt;=<pos:position pos:line="73" pos:column="51"/></operator><literal type="number" pos:line="73" pos:column="48">0<pos:position pos:line="73" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="74" pos:column="10"/></block></then></if>
<cpp:if pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">if<pos:position pos:line="75" pos:column="4"/></cpp:directive> <expr><call><name pos:line="75" pos:column="5">defined<pos:position pos:line="75" pos:column="12"/></name><argument_list pos:line="75" pos:column="12">(<argument><expr><name pos:line="75" pos:column="13">DEBUG<pos:position pos:line="75" pos:column="18"/></name></expr></argument>)<pos:position pos:line="75" pos:column="19"/></argument_list></call> <operator pos:line="75" pos:column="20">&amp;&amp;<pos:position pos:line="75" pos:column="30"/></operator> <literal type="number" pos:line="75" pos:column="23">0<pos:position pos:line="75" pos:column="24"/></literal></expr></cpp:if>
	<if pos:line="76" pos:column="9">if<condition pos:line="76" pos:column="11">(<expr><operator pos:line="76" pos:column="12">!<pos:position pos:line="76" pos:column="13"/></operator><operator pos:line="76" pos:column="13">(<pos:position pos:line="76" pos:column="14"/></operator><name><name pos:line="76" pos:column="14">tc<pos:position pos:line="76" pos:column="16"/></name><operator pos:line="76" pos:column="16">-&gt;<pos:position pos:line="76" pos:column="21"/></operator><name pos:line="76" pos:column="18">mallocs<pos:position pos:line="76" pos:column="25"/></name></name> <operator pos:line="76" pos:column="26">&amp;<pos:position pos:line="76" pos:column="31"/></operator> <literal type="number" pos:line="76" pos:column="28">0xfff<pos:position pos:line="76" pos:column="33"/></literal><operator pos:line="76" pos:column="33">)<pos:position pos:line="76" pos:column="34"/></operator></expr>)<pos:position pos:line="76" pos:column="35"/></condition><then pos:line="76" pos:column="35">
	<block pos:line="77" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="78" pos:column="17">printf<pos:position pos:line="78" pos:column="23"/></name><argument_list pos:line="78" pos:column="23">(<argument><expr><literal type="string" pos:line="78" pos:column="24">"*** threadcache=%u, mallocs=%u (%f), free=%u (%f), freeInCache=%u\n"<pos:position pos:line="78" pos:column="93"/></literal></expr></argument>, <argument><expr><operator pos:line="78" pos:column="95">(<pos:position pos:line="78" pos:column="96"/></operator><name pos:line="78" pos:column="96">unsigned<pos:position pos:line="78" pos:column="104"/></name> <name pos:line="78" pos:column="105">int<pos:position pos:line="78" pos:column="108"/></name><operator pos:line="78" pos:column="108">)<pos:position pos:line="78" pos:column="109"/></operator> <name><name pos:line="78" pos:column="110">tc<pos:position pos:line="78" pos:column="112"/></name><operator pos:line="78" pos:column="112">-&gt;<pos:position pos:line="78" pos:column="117"/></operator><name pos:line="78" pos:column="114">threadid<pos:position pos:line="78" pos:column="122"/></name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="124">tc<pos:position pos:line="78" pos:column="126"/></name><operator pos:line="78" pos:column="126">-&gt;<pos:position pos:line="78" pos:column="131"/></operator><name pos:line="78" pos:column="128">mallocs<pos:position pos:line="78" pos:column="135"/></name></name></expr></argument>,
			<argument><expr><operator pos:line="79" pos:column="25">(<pos:position pos:line="79" pos:column="26"/></operator><name pos:line="79" pos:column="26">float<pos:position pos:line="79" pos:column="31"/></name><operator pos:line="79" pos:column="31">)<pos:position pos:line="79" pos:column="32"/></operator> <name><name pos:line="79" pos:column="33">tc<pos:position pos:line="79" pos:column="35"/></name><operator pos:line="79" pos:column="35">-&gt;<pos:position pos:line="79" pos:column="40"/></operator><name pos:line="79" pos:column="37">successes<pos:position pos:line="79" pos:column="46"/></name></name><operator pos:line="79" pos:column="46">/<pos:position pos:line="79" pos:column="47"/></operator><name><name pos:line="79" pos:column="47">tc<pos:position pos:line="79" pos:column="49"/></name><operator pos:line="79" pos:column="49">-&gt;<pos:position pos:line="79" pos:column="54"/></operator><name pos:line="79" pos:column="51">mallocs<pos:position pos:line="79" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="60">tc<pos:position pos:line="79" pos:column="62"/></name><operator pos:line="79" pos:column="62">-&gt;<pos:position pos:line="79" pos:column="67"/></operator><name pos:line="79" pos:column="64">frees<pos:position pos:line="79" pos:column="69"/></name></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="71">(<pos:position pos:line="79" pos:column="72"/></operator><name pos:line="79" pos:column="72">float<pos:position pos:line="79" pos:column="77"/></name><operator pos:line="79" pos:column="77">)<pos:position pos:line="79" pos:column="78"/></operator> <name><name pos:line="79" pos:column="79">tc<pos:position pos:line="79" pos:column="81"/></name><operator pos:line="79" pos:column="81">-&gt;<pos:position pos:line="79" pos:column="86"/></operator><name pos:line="79" pos:column="83">successes<pos:position pos:line="79" pos:column="92"/></name></name><operator pos:line="79" pos:column="92">/<pos:position pos:line="79" pos:column="93"/></operator><name><name pos:line="79" pos:column="93">tc<pos:position pos:line="79" pos:column="95"/></name><operator pos:line="79" pos:column="95">-&gt;<pos:position pos:line="79" pos:column="100"/></operator><name pos:line="79" pos:column="97">frees<pos:position pos:line="79" pos:column="102"/></name></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="104">(<pos:position pos:line="79" pos:column="105"/></operator><name pos:line="79" pos:column="105">unsigned<pos:position pos:line="79" pos:column="113"/></name> <name pos:line="79" pos:column="114">int<pos:position pos:line="79" pos:column="117"/></name><operator pos:line="79" pos:column="117">)<pos:position pos:line="79" pos:column="118"/></operator> <name><name pos:line="79" pos:column="119">tc<pos:position pos:line="79" pos:column="121"/></name><operator pos:line="79" pos:column="121">-&gt;<pos:position pos:line="79" pos:column="126"/></operator><name pos:line="79" pos:column="123">freeInCache<pos:position pos:line="79" pos:column="134"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="135"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="136"/></expr_stmt>
	}<pos:position pos:line="80" pos:column="10"/></block></then></if>
<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif<pos:position pos:line="81" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">ifdef<pos:position pos:line="82" pos:column="7"/></cpp:directive> <name pos:line="82" pos:column="8">FULLSANITYCHECKS<pos:position pos:line="82" pos:column="24"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="83" pos:column="9">tcfullsanitycheck<pos:position pos:line="83" pos:column="26"/></name><argument_list pos:line="83" pos:column="26">(<argument><expr><name pos:line="83" pos:column="27">tc<pos:position pos:line="83" pos:column="29"/></name></expr></argument>)<pos:position pos:line="83" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>
	<return pos:line="85" pos:column="9">return <expr><name pos:line="85" pos:column="16">ret<pos:position pos:line="85" pos:column="19"/></name></expr>;<pos:position pos:line="85" pos:column="20"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
