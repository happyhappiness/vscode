<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1073.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parse_pathspec_attr_match<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">pathspec_item<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">item<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="67">const<pos:position pos:line="1" pos:column="72"/></specifier> <name pos:line="1" pos:column="73">char<pos:position pos:line="1" pos:column="77"/></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">value<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="85"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">string_list_item<pos:position pos:line="3" pos:column="32"/></name></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">si<pos:position pos:line="3" pos:column="36"/></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">string_list<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">list<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><name pos:line="4" pos:column="35">STRING_LIST_INIT_DUP<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">item<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">attr_check<pos:position pos:line="6" pos:column="29"/></name></name> <operator pos:line="6" pos:column="30">||<pos:position pos:line="6" pos:column="32"/></operator> <name><name pos:line="6" pos:column="33">item<pos:position pos:line="6" pos:column="37"/></name><operator pos:line="6" pos:column="37">-&gt;<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="39">attr_match<pos:position pos:line="6" pos:column="49"/></name></name></expr>)<pos:position pos:line="6" pos:column="50"/></condition><then pos:line="6" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">die<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><call><name pos:line="7" pos:column="21">_<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><literal type="string" pos:line="7" pos:column="23">"Only one 'attr:' specification is allowed."<pos:position pos:line="7" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="70"/></expr_stmt></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">value<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">||<pos:position pos:line="9" pos:column="22"/></operator> <operator pos:line="9" pos:column="23">!<pos:position pos:line="9" pos:column="24"/></operator><operator pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="25">value<pos:position pos:line="9" pos:column="30"/></name></expr>)<pos:position pos:line="9" pos:column="31"/></condition><then pos:line="9" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">die<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><call><name pos:line="10" pos:column="21">_<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><literal type="string" pos:line="10" pos:column="23">"attr spec must not be empty"<pos:position pos:line="10" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">string_list_split<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><operator pos:line="12" pos:column="27">&amp;<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="28">list<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="34">value<pos:position pos:line="12" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="41">' '<pos:position pos:line="12" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="46">-<pos:position pos:line="12" pos:column="47"/></operator><literal type="number" pos:line="12" pos:column="47">1<pos:position pos:line="12" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">string_list_remove_empty_items<pos:position pos:line="13" pos:column="39"/></name><argument_list pos:line="13" pos:column="39">(<argument><expr><operator pos:line="13" pos:column="40">&amp;<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="41">list<pos:position pos:line="13" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="47">0<pos:position pos:line="13" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="15" pos:column="9">item<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">attr_check<pos:position pos:line="15" pos:column="25"/></name></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <call><name pos:line="15" pos:column="28">attr_check_alloc<pos:position pos:line="15" pos:column="44"/></name><argument_list pos:line="15" pos:column="44">()<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">item<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">attr_match<pos:position pos:line="16" pos:column="25"/></name></name> <operator pos:line="16" pos:column="26">=<pos:position pos:line="16" pos:column="27"/></operator> <call><name pos:line="16" pos:column="28">xcalloc<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name><name pos:line="16" pos:column="36">list<pos:position pos:line="16" pos:column="40"/></name><operator pos:line="16" pos:column="40">.<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="41">nr<pos:position pos:line="16" pos:column="43"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="45">sizeof<argument_list pos:line="16" pos:column="51">(<argument><expr pos:line="16" pos:column="52">struct <name pos:line="16" pos:column="59">attr_match<pos:position pos:line="16" pos:column="69"/></name></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="72"/></expr_stmt>

	<macro><name pos:line="18" pos:column="9">for_each_string_list_item<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument pos:line="18" pos:column="35">si<pos:position pos:line="18" pos:column="37"/></argument>, <argument pos:line="18" pos:column="39">&amp;list<pos:position pos:line="18" pos:column="44"/></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></macro> <block pos:line="18" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">size_t<pos:position pos:line="19" pos:column="23"/></name></type> <name pos:line="19" pos:column="24">attr_len<pos:position pos:line="19" pos:column="32"/></name></decl>;<pos:position pos:line="19" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">char<pos:position pos:line="20" pos:column="21"/></name> <modifier pos:line="20" pos:column="22">*<pos:position pos:line="20" pos:column="23"/></modifier></type><name pos:line="20" pos:column="23">attr_name<pos:position pos:line="20" pos:column="32"/></name></decl>;<pos:position pos:line="20" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="21" pos:column="17">const<pos:position pos:line="21" pos:column="22"/></specifier> <name><name pos:line="21" pos:column="23">struct<pos:position pos:line="21" pos:column="29"/></name> <name pos:line="21" pos:column="30">git_attr<pos:position pos:line="21" pos:column="38"/></name></name> <modifier pos:line="21" pos:column="39">*<pos:position pos:line="21" pos:column="40"/></modifier></type><name pos:line="21" pos:column="40">a<pos:position pos:line="21" pos:column="41"/></name></decl>;<pos:position pos:line="21" pos:column="42"/></decl_stmt>

		<decl_stmt><decl><type><name pos:line="23" pos:column="17">int<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">j<pos:position pos:line="23" pos:column="22"/></name> <init pos:line="23" pos:column="23">= <expr><name><name pos:line="23" pos:column="25">item<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">-&gt;<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="31">attr_match_nr<pos:position pos:line="23" pos:column="44"/></name></name><operator pos:line="23" pos:column="44">++<pos:position pos:line="23" pos:column="46"/></operator></expr></init></decl>;<pos:position pos:line="23" pos:column="47"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="24" pos:column="17">const<pos:position pos:line="24" pos:column="22"/></specifier> <name pos:line="24" pos:column="23">char<pos:position pos:line="24" pos:column="27"/></name> <modifier pos:line="24" pos:column="28">*<pos:position pos:line="24" pos:column="29"/></modifier></type><name pos:line="24" pos:column="29">attr<pos:position pos:line="24" pos:column="33"/></name> <init pos:line="24" pos:column="34">= <expr><name><name pos:line="24" pos:column="36">si<pos:position pos:line="24" pos:column="38"/></name><operator pos:line="24" pos:column="38">-&gt;<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="40">string<pos:position pos:line="24" pos:column="46"/></name></name></expr></init></decl>;<pos:position pos:line="24" pos:column="47"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="25" pos:column="17">struct<pos:position pos:line="25" pos:column="23"/></name> <name pos:line="25" pos:column="24">attr_match<pos:position pos:line="25" pos:column="34"/></name></name> <modifier pos:line="25" pos:column="35">*<pos:position pos:line="25" pos:column="36"/></modifier></type><name pos:line="25" pos:column="36">am<pos:position pos:line="25" pos:column="38"/></name> <init pos:line="25" pos:column="39">= <expr><operator pos:line="25" pos:column="41">&amp;<pos:position pos:line="25" pos:column="46"/></operator><name><name pos:line="25" pos:column="42">item<pos:position pos:line="25" pos:column="46"/></name><operator pos:line="25" pos:column="46">-&gt;<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="48">attr_match<pos:position pos:line="25" pos:column="58"/></name><index pos:line="25" pos:column="58">[<expr><name pos:line="25" pos:column="59">j<pos:position pos:line="25" pos:column="60"/></name></expr>]<pos:position pos:line="25" pos:column="61"/></index></name></expr></init></decl>;<pos:position pos:line="25" pos:column="62"/></decl_stmt>

		<switch pos:line="27" pos:column="17">switch <condition pos:line="27" pos:column="24">(<expr><operator pos:line="27" pos:column="25">*<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="26">attr<pos:position pos:line="27" pos:column="30"/></name></expr>)<pos:position pos:line="27" pos:column="31"/></condition> <block pos:line="27" pos:column="32">{
		<case pos:line="28" pos:column="17">case <expr><literal type="char" pos:line="28" pos:column="22">'!'<pos:position pos:line="28" pos:column="25"/></literal></expr>:<pos:position pos:line="28" pos:column="26"/></case>
			<expr_stmt><expr><name><name pos:line="29" pos:column="25">am<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">-&gt;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="29">match_mode<pos:position pos:line="29" pos:column="39"/></name></name> <operator pos:line="29" pos:column="40">=<pos:position pos:line="29" pos:column="41"/></operator> <name pos:line="29" pos:column="42">MATCH_UNSPECIFIED<pos:position pos:line="29" pos:column="59"/></name></expr>;<pos:position pos:line="29" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><name pos:line="30" pos:column="25">attr<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">++<pos:position pos:line="30" pos:column="31"/></operator></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
			<expr_stmt><expr><name pos:line="31" pos:column="25">attr_len<pos:position pos:line="31" pos:column="33"/></name> <operator pos:line="31" pos:column="34">=<pos:position pos:line="31" pos:column="35"/></operator> <call><name pos:line="31" pos:column="36">strlen<pos:position pos:line="31" pos:column="42"/></name><argument_list pos:line="31" pos:column="42">(<argument><expr><name pos:line="31" pos:column="43">attr<pos:position pos:line="31" pos:column="47"/></name></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>
			<break pos:line="32" pos:column="25">break;<pos:position pos:line="32" pos:column="31"/></break>
		<case pos:line="33" pos:column="17">case <expr><literal type="char" pos:line="33" pos:column="22">'-'<pos:position pos:line="33" pos:column="25"/></literal></expr>:<pos:position pos:line="33" pos:column="26"/></case>
			<expr_stmt><expr><name><name pos:line="34" pos:column="25">am<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">-&gt;<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="29">match_mode<pos:position pos:line="34" pos:column="39"/></name></name> <operator pos:line="34" pos:column="40">=<pos:position pos:line="34" pos:column="41"/></operator> <name pos:line="34" pos:column="42">MATCH_UNSET<pos:position pos:line="34" pos:column="53"/></name></expr>;<pos:position pos:line="34" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><name pos:line="35" pos:column="25">attr<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">++<pos:position pos:line="35" pos:column="31"/></operator></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>
			<expr_stmt><expr><name pos:line="36" pos:column="25">attr_len<pos:position pos:line="36" pos:column="33"/></name> <operator pos:line="36" pos:column="34">=<pos:position pos:line="36" pos:column="35"/></operator> <call><name pos:line="36" pos:column="36">strlen<pos:position pos:line="36" pos:column="42"/></name><argument_list pos:line="36" pos:column="42">(<argument><expr><name pos:line="36" pos:column="43">attr<pos:position pos:line="36" pos:column="47"/></name></expr></argument>)<pos:position pos:line="36" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt>
			<break pos:line="37" pos:column="25">break;<pos:position pos:line="37" pos:column="31"/></break>
		<default pos:line="38" pos:column="17">default:<pos:position pos:line="38" pos:column="25"/></default>
			<expr_stmt><expr><name pos:line="39" pos:column="25">attr_len<pos:position pos:line="39" pos:column="33"/></name> <operator pos:line="39" pos:column="34">=<pos:position pos:line="39" pos:column="35"/></operator> <call><name pos:line="39" pos:column="36">strcspn<pos:position pos:line="39" pos:column="43"/></name><argument_list pos:line="39" pos:column="43">(<argument><expr><name pos:line="39" pos:column="44">attr<pos:position pos:line="39" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="50">"="<pos:position pos:line="39" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="55"/></expr_stmt>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><name><name pos:line="40" pos:column="29">attr<pos:position pos:line="40" pos:column="33"/></name><index pos:line="40" pos:column="33">[<expr><name pos:line="40" pos:column="34">attr_len<pos:position pos:line="40" pos:column="42"/></name></expr>]<pos:position pos:line="40" pos:column="43"/></index></name> <operator pos:line="40" pos:column="44">!=<pos:position pos:line="40" pos:column="46"/></operator> <literal type="char" pos:line="40" pos:column="47">'='<pos:position pos:line="40" pos:column="50"/></literal></expr>)<pos:position pos:line="40" pos:column="51"/></condition><then pos:line="40" pos:column="51">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="41" pos:column="33">am<pos:position pos:line="41" pos:column="35"/></name><operator pos:line="41" pos:column="35">-&gt;<pos:position pos:line="41" pos:column="40"/></operator><name pos:line="41" pos:column="37">match_mode<pos:position pos:line="41" pos:column="47"/></name></name> <operator pos:line="41" pos:column="48">=<pos:position pos:line="41" pos:column="49"/></operator> <name pos:line="41" pos:column="50">MATCH_SET<pos:position pos:line="41" pos:column="59"/></name></expr>;<pos:position pos:line="41" pos:column="60"/></expr_stmt></block></then>
			<else pos:line="42" pos:column="25">else <block pos:line="42" pos:column="30">{
				<decl_stmt><decl><type><specifier pos:line="43" pos:column="33">const<pos:position pos:line="43" pos:column="38"/></specifier> <name pos:line="43" pos:column="39">char<pos:position pos:line="43" pos:column="43"/></name> <modifier pos:line="43" pos:column="44">*<pos:position pos:line="43" pos:column="45"/></modifier></type><name pos:line="43" pos:column="45">v<pos:position pos:line="43" pos:column="46"/></name> <init pos:line="43" pos:column="47">= <expr><operator pos:line="43" pos:column="49">&amp;<pos:position pos:line="43" pos:column="54"/></operator><name><name pos:line="43" pos:column="50">attr<pos:position pos:line="43" pos:column="54"/></name><index pos:line="43" pos:column="54">[<expr><name pos:line="43" pos:column="55">attr_len<pos:position pos:line="43" pos:column="63"/></name> <operator pos:line="43" pos:column="64">+<pos:position pos:line="43" pos:column="65"/></operator> <literal type="number" pos:line="43" pos:column="66">1<pos:position pos:line="43" pos:column="67"/></literal></expr>]<pos:position pos:line="43" pos:column="68"/></index></name></expr></init></decl>;<pos:position pos:line="43" pos:column="69"/></decl_stmt>
				<expr_stmt><expr><name><name pos:line="44" pos:column="33">am<pos:position pos:line="44" pos:column="35"/></name><operator pos:line="44" pos:column="35">-&gt;<pos:position pos:line="44" pos:column="40"/></operator><name pos:line="44" pos:column="37">match_mode<pos:position pos:line="44" pos:column="47"/></name></name> <operator pos:line="44" pos:column="48">=<pos:position pos:line="44" pos:column="49"/></operator> <name pos:line="44" pos:column="50">MATCH_VALUE<pos:position pos:line="44" pos:column="61"/></name></expr>;<pos:position pos:line="44" pos:column="62"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="45" pos:column="33">am<pos:position pos:line="45" pos:column="35"/></name><operator pos:line="45" pos:column="35">-&gt;<pos:position pos:line="45" pos:column="40"/></operator><name pos:line="45" pos:column="37">value<pos:position pos:line="45" pos:column="42"/></name></name> <operator pos:line="45" pos:column="43">=<pos:position pos:line="45" pos:column="44"/></operator> <call><name pos:line="45" pos:column="45">attr_value_unescape<pos:position pos:line="45" pos:column="64"/></name><argument_list pos:line="45" pos:column="64">(<argument><expr><name pos:line="45" pos:column="65">v<pos:position pos:line="45" pos:column="66"/></name></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="68"/></expr_stmt>
			}<pos:position pos:line="46" pos:column="26"/></block></else></if>
			<break pos:line="47" pos:column="25">break;<pos:position pos:line="47" pos:column="31"/></break>
		}<pos:position pos:line="48" pos:column="18"/></block></switch>

		<expr_stmt><expr><name pos:line="50" pos:column="17">attr_name<pos:position pos:line="50" pos:column="26"/></name> <operator pos:line="50" pos:column="27">=<pos:position pos:line="50" pos:column="28"/></operator> <call><name pos:line="50" pos:column="29">xmemdupz<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name pos:line="50" pos:column="38">attr<pos:position pos:line="50" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="44">attr_len<pos:position pos:line="50" pos:column="52"/></name></expr></argument>)<pos:position pos:line="50" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name pos:line="51" pos:column="17">a<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">=<pos:position pos:line="51" pos:column="20"/></operator> <call><name pos:line="51" pos:column="21">git_attr<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">attr_name<pos:position pos:line="51" pos:column="39"/></name></expr></argument>)<pos:position pos:line="51" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><operator pos:line="52" pos:column="21">!<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="22">a<pos:position pos:line="52" pos:column="23"/></name></expr>)<pos:position pos:line="52" pos:column="24"/></condition><then pos:line="52" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="25">die<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><call><name pos:line="53" pos:column="29">_<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><literal type="string" pos:line="53" pos:column="31">"invalid attribute name %s"<pos:position pos:line="53" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="53" pos:column="61">attr_name<pos:position pos:line="53" pos:column="70"/></name></expr></argument>)<pos:position pos:line="53" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="72"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="55" pos:column="17">attr_check_append<pos:position pos:line="55" pos:column="34"/></name><argument_list pos:line="55" pos:column="34">(<argument><expr><name><name pos:line="55" pos:column="35">item<pos:position pos:line="55" pos:column="39"/></name><operator pos:line="55" pos:column="39">-&gt;<pos:position pos:line="55" pos:column="44"/></operator><name pos:line="55" pos:column="41">attr_check<pos:position pos:line="55" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="53">a<pos:position pos:line="55" pos:column="54"/></name></expr></argument>)<pos:position pos:line="55" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="56"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="57" pos:column="17">free<pos:position pos:line="57" pos:column="21"/></name><argument_list pos:line="57" pos:column="21">(<argument><expr><name pos:line="57" pos:column="22">attr_name<pos:position pos:line="57" pos:column="31"/></name></expr></argument>)<pos:position pos:line="57" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="58" pos:column="10"/></block>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name><name pos:line="60" pos:column="13">item<pos:position pos:line="60" pos:column="17"/></name><operator pos:line="60" pos:column="17">-&gt;<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="19">attr_check<pos:position pos:line="60" pos:column="29"/></name><operator pos:line="60" pos:column="29">-&gt;<pos:position pos:line="60" pos:column="34"/></operator><name pos:line="60" pos:column="31">nr<pos:position pos:line="60" pos:column="33"/></name></name> <operator pos:line="60" pos:column="34">!=<pos:position pos:line="60" pos:column="36"/></operator> <name><name pos:line="60" pos:column="37">item<pos:position pos:line="60" pos:column="41"/></name><operator pos:line="60" pos:column="41">-&gt;<pos:position pos:line="60" pos:column="46"/></operator><name pos:line="60" pos:column="43">attr_match_nr<pos:position pos:line="60" pos:column="56"/></name></name></expr>)<pos:position pos:line="60" pos:column="57"/></condition><then pos:line="60" pos:column="57">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="17">die<pos:position pos:line="61" pos:column="20"/></name><argument_list pos:line="61" pos:column="20">(<argument><expr><literal type="string" pos:line="61" pos:column="21">"BUG: should have same number of entries"<pos:position pos:line="61" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="64"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="63" pos:column="9">string_list_clear<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><operator pos:line="63" pos:column="27">&amp;<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="28">list<pos:position pos:line="63" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="34">0<pos:position pos:line="63" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="37"/></expr_stmt>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
