<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_92_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">add_rfc2047<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">strbuf<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">sb<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">line<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">size_t<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">len<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
		       <parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">encoding<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="46">enum<pos:position pos:line="2" pos:column="50"/></name> <name pos:line="2" pos:column="51">rfc2047_type<pos:position pos:line="2" pos:column="63"/></name></name></type> <name pos:line="2" pos:column="64">type<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><specifier pos:line="4" pos:column="16">const<pos:position pos:line="4" pos:column="21"/></specifier> <name pos:line="4" pos:column="22">int<pos:position pos:line="4" pos:column="25"/></name></type> <name pos:line="4" pos:column="26">max_encoded_length<pos:position pos:line="4" pos:column="44"/></name> <init pos:line="4" pos:column="45">= <expr><literal type="number" pos:line="4" pos:column="47">76<pos:position pos:line="4" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt> <comment type="block" pos:line="4" pos:column="51">/* per rfc2047 */</comment>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">line_len<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><call><name pos:line="6" pos:column="24">last_line_length<pos:position pos:line="6" pos:column="40"/></name><argument_list pos:line="6" pos:column="40">(<argument><expr><name pos:line="6" pos:column="41">sb<pos:position pos:line="6" pos:column="43"/></name></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="45"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">strbuf_grow<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">sb<pos:position pos:line="8" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="25">len<pos:position pos:line="8" pos:column="28"/></name> <operator pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></operator> <literal type="number" pos:line="8" pos:column="31">3<pos:position pos:line="8" pos:column="32"/></literal> <operator pos:line="8" pos:column="33">+<pos:position pos:line="8" pos:column="34"/></operator> <call><name pos:line="8" pos:column="35">strlen<pos:position pos:line="8" pos:column="41"/></name><argument_list pos:line="8" pos:column="41">(<argument><expr><name pos:line="8" pos:column="42">encoding<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call> <operator pos:line="8" pos:column="52">+<pos:position pos:line="8" pos:column="53"/></operator> <literal type="number" pos:line="8" pos:column="54">100<pos:position pos:line="8" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">strbuf_addf<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">sb<pos:position pos:line="9" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="25">"=?%s?q?"<pos:position pos:line="9" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="36">encoding<pos:position pos:line="9" pos:column="44"/></name></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name pos:line="10" pos:column="9">line_len<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">+=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">strlen<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">encoding<pos:position pos:line="10" pos:column="36"/></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call> <operator pos:line="10" pos:column="38">+<pos:position pos:line="10" pos:column="39"/></operator> <literal type="number" pos:line="10" pos:column="40">5<pos:position pos:line="10" pos:column="41"/></literal></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt> <comment type="block" pos:line="10" pos:column="43">/* 5 for =??q? */</comment>

	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><name pos:line="12" pos:column="16">len<pos:position pos:line="12" pos:column="19"/></name></expr>)<pos:position pos:line="12" pos:column="20"/></condition> <block pos:line="12" pos:column="21">{
		<comment type="block" pos:line="13" pos:column="17">/*
		 * RFC 2047, section 5 (3):
		 *
		 * Each 'encoded-word' MUST represent an integral number of
		 * characters.  A multi-octet character may not be split across
		 * adjacent 'encoded- word's.
		 */</comment>
		<decl_stmt><decl><type><specifier pos:line="20" pos:column="17">const<pos:position pos:line="20" pos:column="22"/></specifier> <name pos:line="20" pos:column="23">unsigned<pos:position pos:line="20" pos:column="31"/></name> <name pos:line="20" pos:column="32">char<pos:position pos:line="20" pos:column="36"/></name> <modifier pos:line="20" pos:column="37">*<pos:position pos:line="20" pos:column="38"/></modifier></type><name pos:line="20" pos:column="38">p<pos:position pos:line="20" pos:column="39"/></name> <init pos:line="20" pos:column="40">= <expr><operator pos:line="20" pos:column="42">(<pos:position pos:line="20" pos:column="43"/></operator><specifier pos:line="20" pos:column="43">const<pos:position pos:line="20" pos:column="48"/></specifier> <name pos:line="20" pos:column="49">unsigned<pos:position pos:line="20" pos:column="57"/></name> <name pos:line="20" pos:column="58">char<pos:position pos:line="20" pos:column="62"/></name> <operator pos:line="20" pos:column="63">*<pos:position pos:line="20" pos:column="64"/></operator><operator pos:line="20" pos:column="64">)<pos:position pos:line="20" pos:column="65"/></operator><name pos:line="20" pos:column="65">line<pos:position pos:line="20" pos:column="69"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="70"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">int<pos:position pos:line="21" pos:column="20"/></name></type> <name pos:line="21" pos:column="21">chrlen<pos:position pos:line="21" pos:column="27"/></name> <init pos:line="21" pos:column="28">= <expr><call><name pos:line="21" pos:column="30">mbs_chrlen<pos:position pos:line="21" pos:column="40"/></name><argument_list pos:line="21" pos:column="40">(<argument><expr><operator pos:line="21" pos:column="41">&amp;<pos:position pos:line="21" pos:column="46"/></operator><name pos:line="21" pos:column="42">line<pos:position pos:line="21" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="48">&amp;<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="49">len<pos:position pos:line="21" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="54">encoding<pos:position pos:line="21" pos:column="62"/></name></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="64"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">int<pos:position pos:line="22" pos:column="20"/></name></type> <name pos:line="22" pos:column="21">is_special<pos:position pos:line="22" pos:column="31"/></name> <init pos:line="22" pos:column="32">= <expr><operator pos:line="22" pos:column="34">(<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="35">chrlen<pos:position pos:line="22" pos:column="41"/></name> <operator pos:line="22" pos:column="42">&gt;<pos:position pos:line="22" pos:column="46"/></operator> <literal type="number" pos:line="22" pos:column="44">1<pos:position pos:line="22" pos:column="45"/></literal><operator pos:line="22" pos:column="45">)<pos:position pos:line="22" pos:column="46"/></operator> <operator pos:line="22" pos:column="47">||<pos:position pos:line="22" pos:column="49"/></operator> <call><name pos:line="22" pos:column="50">is_rfc2047_special<pos:position pos:line="22" pos:column="68"/></name><argument_list pos:line="22" pos:column="68">(<argument><expr><operator pos:line="22" pos:column="69">*<pos:position pos:line="22" pos:column="70"/></operator><name pos:line="22" pos:column="70">p<pos:position pos:line="22" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="73">type<pos:position pos:line="22" pos:column="77"/></name></expr></argument>)<pos:position pos:line="22" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="79"/></decl_stmt>

		<comment type="block" pos:line="24" pos:column="17">/* "=%02X" * chrlen, or the byte itself */</comment>
		<decl_stmt><decl><type><specifier pos:line="25" pos:column="17">const<pos:position pos:line="25" pos:column="22"/></specifier> <name pos:line="25" pos:column="23">char<pos:position pos:line="25" pos:column="27"/></name> <modifier pos:line="25" pos:column="28">*<pos:position pos:line="25" pos:column="29"/></modifier></type><name pos:line="25" pos:column="29">encoded_fmt<pos:position pos:line="25" pos:column="40"/></name> <init pos:line="25" pos:column="41">= <expr><ternary><condition><expr><name pos:line="25" pos:column="43">is_special<pos:position pos:line="25" pos:column="53"/></name></expr> ?<pos:position pos:line="25" pos:column="55"/></condition><then pos:line="25" pos:column="55"> <expr><literal type="string" pos:line="25" pos:column="56">"=%02X"<pos:position pos:line="25" pos:column="63"/></literal></expr>    <pos:position pos:line="25" pos:column="67"/></then><else pos:line="25" pos:column="67">: <expr><literal type="string" pos:line="25" pos:column="69">"%c"<pos:position pos:line="25" pos:column="73"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="25" pos:column="74"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">int<pos:position pos:line="26" pos:column="20"/></name></type>	    <name pos:line="26" pos:column="29">encoded_len<pos:position pos:line="26" pos:column="40"/></name> <init pos:line="26" pos:column="41">= <expr><ternary><condition><expr><name pos:line="26" pos:column="43">is_special<pos:position pos:line="26" pos:column="53"/></name></expr> ?<pos:position pos:line="26" pos:column="55"/></condition><then pos:line="26" pos:column="55"> <expr><literal type="number" pos:line="26" pos:column="56">3<pos:position pos:line="26" pos:column="57"/></literal> <operator pos:line="26" pos:column="58">*<pos:position pos:line="26" pos:column="59"/></operator> <name pos:line="26" pos:column="60">chrlen<pos:position pos:line="26" pos:column="66"/></name></expr> <pos:position pos:line="26" pos:column="67"/></then><else pos:line="26" pos:column="67">: <expr><literal type="number" pos:line="26" pos:column="69">1<pos:position pos:line="26" pos:column="70"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="26" pos:column="71"/></decl_stmt>

		<comment type="block" pos:line="28" pos:column="17">/*
		 * According to RFC 2047, we could encode the special character
		 * ' ' (space) with '_' (underscore) for readability. But many
		 * programs do not understand this and just leave the
		 * underscore in place. Thus, we do nothing special here, which
		 * causes ' ' to be encoded as '=20', avoiding this problem.
		 */</comment>

		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">line_len<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">+<pos:position pos:line="36" pos:column="31"/></operator> <name pos:line="36" pos:column="32">encoded_len<pos:position pos:line="36" pos:column="43"/></name> <operator pos:line="36" pos:column="44">+<pos:position pos:line="36" pos:column="45"/></operator> <literal type="number" pos:line="36" pos:column="46">2<pos:position pos:line="36" pos:column="47"/></literal> <operator pos:line="36" pos:column="48">&gt;<pos:position pos:line="36" pos:column="52"/></operator> <name pos:line="36" pos:column="50">max_encoded_length<pos:position pos:line="36" pos:column="68"/></name></expr>)<pos:position pos:line="36" pos:column="69"/></condition><then pos:line="36" pos:column="69"> <block pos:line="36" pos:column="70">{
			<comment type="block" pos:line="37" pos:column="25">/* It won't fit with trailing "?=" --- break the line */</comment>
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">strbuf_addf<pos:position pos:line="38" pos:column="36"/></name><argument_list pos:line="38" pos:column="36">(<argument><expr><name pos:line="38" pos:column="37">sb<pos:position pos:line="38" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="41">"?=\n =?%s?q?"<pos:position pos:line="38" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="57">encoding<pos:position pos:line="38" pos:column="65"/></name></expr></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><name pos:line="39" pos:column="25">line_len<pos:position pos:line="39" pos:column="33"/></name> <operator pos:line="39" pos:column="34">=<pos:position pos:line="39" pos:column="35"/></operator> <call><name pos:line="39" pos:column="36">strlen<pos:position pos:line="39" pos:column="42"/></name><argument_list pos:line="39" pos:column="42">(<argument><expr><name pos:line="39" pos:column="43">encoding<pos:position pos:line="39" pos:column="51"/></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call> <operator pos:line="39" pos:column="53">+<pos:position pos:line="39" pos:column="54"/></operator> <literal type="number" pos:line="39" pos:column="55">5<pos:position pos:line="39" pos:column="56"/></literal> <operator pos:line="39" pos:column="57">+<pos:position pos:line="39" pos:column="58"/></operator> <literal type="number" pos:line="39" pos:column="59">1<pos:position pos:line="39" pos:column="60"/></literal></expr>;<pos:position pos:line="39" pos:column="61"/></expr_stmt> <comment type="block" pos:line="39" pos:column="62">/* =??q? plus SP */</comment>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>

		<for pos:line="42" pos:column="17">for <control pos:line="42" pos:column="21">(<init><expr><name pos:line="42" pos:column="22">i<pos:position pos:line="42" pos:column="23"/></name> <operator pos:line="42" pos:column="24">=<pos:position pos:line="42" pos:column="25"/></operator> <literal type="number" pos:line="42" pos:column="26">0<pos:position pos:line="42" pos:column="27"/></literal></expr>;<pos:position pos:line="42" pos:column="28"/></init> <condition><expr><name pos:line="42" pos:column="29">i<pos:position pos:line="42" pos:column="30"/></name> <operator pos:line="42" pos:column="31">&lt;<pos:position pos:line="42" pos:column="35"/></operator> <name pos:line="42" pos:column="33">chrlen<pos:position pos:line="42" pos:column="39"/></name></expr>;<pos:position pos:line="42" pos:column="40"/></condition> <incr><expr><name pos:line="42" pos:column="41">i<pos:position pos:line="42" pos:column="42"/></name><operator pos:line="42" pos:column="42">++<pos:position pos:line="42" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="42" pos:column="45"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="25">strbuf_addf<pos:position pos:line="43" pos:column="36"/></name><argument_list pos:line="43" pos:column="36">(<argument><expr><name pos:line="43" pos:column="37">sb<pos:position pos:line="43" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="41">encoded_fmt<pos:position pos:line="43" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="54">p<pos:position pos:line="43" pos:column="55"/></name><index pos:line="43" pos:column="55">[<expr><name pos:line="43" pos:column="56">i<pos:position pos:line="43" pos:column="57"/></name></expr>]<pos:position pos:line="43" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="60"/></expr_stmt></block></for>
		<expr_stmt><expr><name pos:line="44" pos:column="17">line_len<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">+=<pos:position pos:line="44" pos:column="28"/></operator> <name pos:line="44" pos:column="29">encoded_len<pos:position pos:line="44" pos:column="40"/></name></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">strbuf_addstr<pos:position pos:line="46" pos:column="22"/></name><argument_list pos:line="46" pos:column="22">(<argument><expr><name pos:line="46" pos:column="23">sb<pos:position pos:line="46" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="27">"?="<pos:position pos:line="46" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="33"/></expr_stmt>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
