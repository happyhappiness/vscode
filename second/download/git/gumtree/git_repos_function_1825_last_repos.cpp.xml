<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1825_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">note_change_n<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">p<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">branch<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">b<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">unsigned<pos:position pos:line="1" pos:column="68"/></name> <name pos:line="1" pos:column="69">char<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">old_fanout<pos:position pos:line="1" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="86"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">strbuf<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">uq<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><name pos:line="3" pos:column="35">STRBUF_INIT<pos:position pos:line="3" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">object_entry<pos:position pos:line="4" pos:column="28"/></name></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">oe<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">branch<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">s<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object_id<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">oid<pos:position pos:line="6" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="31">commit_oid<pos:position pos:line="6" pos:column="41"/></name></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">path<pos:position pos:line="7" pos:column="18"/></name><index pos:line="7" pos:column="18">[<expr><literal type="number" pos:line="7" pos:column="19">60<pos:position pos:line="7" pos:column="21"/></literal></expr>]<pos:position pos:line="7" pos:column="22"/></index></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">uint16_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">inline_data<pos:position pos:line="8" pos:column="29"/></name> <init pos:line="8" pos:column="30">= <expr><literal type="number" pos:line="8" pos:column="32">0<pos:position pos:line="8" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">char<pos:position pos:line="9" pos:column="22"/></name></type> <name pos:line="9" pos:column="23">new_fanout<pos:position pos:line="9" pos:column="33"/></name></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/*
	 * When loading a branch, we don't traverse its tree to count the real
	 * number of notes (too expensive to do this for all non-note refs).
	 * This means that recently loaded notes refs might incorrectly have
	 * b-&gt;num_notes == 0, and consequently, old_fanout might be wrong.
	 *
	 * Fix this by traversing the tree and counting the number of notes
	 * when b-&gt;num_notes == 0. If the notes tree is truly empty, the
	 * calculation should not take long.
	 */</comment>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name><name pos:line="21" pos:column="13">b<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">num_notes<pos:position pos:line="21" pos:column="25"/></name></name> <operator pos:line="21" pos:column="26">==<pos:position pos:line="21" pos:column="28"/></operator> <literal type="number" pos:line="21" pos:column="29">0<pos:position pos:line="21" pos:column="30"/></literal> <operator pos:line="21" pos:column="31">&amp;&amp;<pos:position pos:line="21" pos:column="41"/></operator> <operator pos:line="21" pos:column="34">*<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="35">old_fanout<pos:position pos:line="21" pos:column="45"/></name> <operator pos:line="21" pos:column="46">==<pos:position pos:line="21" pos:column="48"/></operator> <literal type="number" pos:line="21" pos:column="49">0<pos:position pos:line="21" pos:column="50"/></literal></expr>)<pos:position pos:line="21" pos:column="51"/></condition><then pos:line="21" pos:column="51"> <block pos:line="21" pos:column="52">{
		<comment type="block" pos:line="22" pos:column="17">/* Invoke change_note_fanout() in "counting mode". */</comment>
		<expr_stmt><expr><name><name pos:line="23" pos:column="17">b<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-&gt;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="20">num_notes<pos:position pos:line="23" pos:column="29"/></name></name> <operator pos:line="23" pos:column="30">=<pos:position pos:line="23" pos:column="31"/></operator> <call><name pos:line="23" pos:column="32">change_note_fanout<pos:position pos:line="23" pos:column="50"/></name><argument_list pos:line="23" pos:column="50">(<argument><expr><operator pos:line="23" pos:column="51">&amp;<pos:position pos:line="23" pos:column="56"/></operator><name><name pos:line="23" pos:column="52">b<pos:position pos:line="23" pos:column="53"/></name><operator pos:line="23" pos:column="53">-&gt;<pos:position pos:line="23" pos:column="58"/></operator><name pos:line="23" pos:column="55">branch_tree<pos:position pos:line="23" pos:column="66"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="68">0xff<pos:position pos:line="23" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="24" pos:column="17">*<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">old_fanout<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <call><name pos:line="24" pos:column="31">convert_num_notes_to_fanout<pos:position pos:line="24" pos:column="58"/></name><argument_list pos:line="24" pos:column="58">(<argument><expr><name><name pos:line="24" pos:column="59">b<pos:position pos:line="24" pos:column="60"/></name><operator pos:line="24" pos:column="60">-&gt;<pos:position pos:line="24" pos:column="65"/></operator><name pos:line="24" pos:column="62">num_notes<pos:position pos:line="24" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="73"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="27" pos:column="9">/* Now parse the notemodify command. */</comment>
	<comment type="block" pos:line="28" pos:column="9">/* &lt;dataref&gt; or 'inline' */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">*<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">p<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">==<pos:position pos:line="29" pos:column="18"/></operator> <literal type="char" pos:line="29" pos:column="19">':'<pos:position pos:line="29" pos:column="22"/></literal></expr>)<pos:position pos:line="29" pos:column="23"/></condition><then pos:line="29" pos:column="23"> <block pos:line="29" pos:column="24">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">oe<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <call><name pos:line="30" pos:column="22">find_mark<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><call><name pos:line="30" pos:column="32">parse_mark_ref_space<pos:position pos:line="30" pos:column="52"/></name><argument_list pos:line="30" pos:column="52">(<argument><expr><operator pos:line="30" pos:column="53">&amp;<pos:position pos:line="30" pos:column="58"/></operator><name pos:line="30" pos:column="54">p<pos:position pos:line="30" pos:column="55"/></name></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">oidcpy<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><operator pos:line="31" pos:column="24">&amp;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="25">oid<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="30">&amp;<pos:position pos:line="31" pos:column="35"/></operator><name><name pos:line="31" pos:column="31">oe<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">-&gt;<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="35">idx<pos:position pos:line="31" pos:column="38"/></name><operator pos:line="31" pos:column="38">.<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="39">oid<pos:position pos:line="31" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then> <elseif pos:line="32" pos:column="11">else <if pos:line="32" pos:column="16">if <condition pos:line="32" pos:column="19">(<expr><call><name pos:line="32" pos:column="20">skip_prefix<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><name pos:line="32" pos:column="32">p<pos:position pos:line="32" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="35">"inline "<pos:position pos:line="32" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="32" pos:column="46">&amp;<pos:position pos:line="32" pos:column="51"/></operator><name pos:line="32" pos:column="47">p<pos:position pos:line="32" pos:column="48"/></name></expr></argument>)<pos:position pos:line="32" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="50"/></condition><then pos:line="32" pos:column="50"> <block pos:line="32" pos:column="51">{
		<expr_stmt><expr><name pos:line="33" pos:column="17">inline_data<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">=<pos:position pos:line="33" pos:column="30"/></operator> <literal type="number" pos:line="33" pos:column="31">1<pos:position pos:line="33" pos:column="32"/></literal></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">oe<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">=<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="22">NULL<pos:position pos:line="34" pos:column="26"/></name></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt> <comment type="block" pos:line="34" pos:column="28">/* not used with inline_data, but makes gcc happy */</comment>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if></elseif> <else pos:line="35" pos:column="11">else <block pos:line="35" pos:column="16">{
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><call><name pos:line="36" pos:column="21">parse_oid_hex<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><name pos:line="36" pos:column="35">p<pos:position pos:line="36" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="38">&amp;<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="39">oid<pos:position pos:line="36" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="44">&amp;<pos:position pos:line="36" pos:column="49"/></operator><name pos:line="36" pos:column="45">p<pos:position pos:line="36" pos:column="46"/></name></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="48"/></condition><then pos:line="36" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="25">die<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><literal type="string" pos:line="37" pos:column="29">"Invalid dataref: %s"<pos:position pos:line="37" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="52">command_buf<pos:position pos:line="37" pos:column="63"/></name><operator pos:line="37" pos:column="63">.<pos:position pos:line="37" pos:column="64"/></operator><name pos:line="37" pos:column="64">buf<pos:position pos:line="37" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="69"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="38" pos:column="17">oe<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">=<pos:position pos:line="38" pos:column="21"/></operator> <call><name pos:line="38" pos:column="22">find_object<pos:position pos:line="38" pos:column="33"/></name><argument_list pos:line="38" pos:column="33">(<argument><expr><operator pos:line="38" pos:column="34">&amp;<pos:position pos:line="38" pos:column="39"/></operator><name pos:line="38" pos:column="35">oid<pos:position pos:line="38" pos:column="38"/></name></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">*<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">p<pos:position pos:line="39" pos:column="23"/></name><operator pos:line="39" pos:column="23">++<pos:position pos:line="39" pos:column="25"/></operator> <operator pos:line="39" pos:column="26">!=<pos:position pos:line="39" pos:column="28"/></operator> <literal type="char" pos:line="39" pos:column="29">' '<pos:position pos:line="39" pos:column="32"/></literal></expr>)<pos:position pos:line="39" pos:column="33"/></condition><then pos:line="39" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="25">die<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><literal type="string" pos:line="40" pos:column="29">"Missing space after SHA1: %s"<pos:position pos:line="40" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="61">command_buf<pos:position pos:line="40" pos:column="72"/></name><operator pos:line="40" pos:column="72">.<pos:position pos:line="40" pos:column="73"/></operator><name pos:line="40" pos:column="73">buf<pos:position pos:line="40" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="78"/></expr_stmt></block></then></if>
	}<pos:position pos:line="41" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="43" pos:column="9">/* &lt;commit-ish&gt; */</comment>
	<expr_stmt><expr><name pos:line="44" pos:column="9">s<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <call><name pos:line="44" pos:column="13">lookup_branch<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name pos:line="44" pos:column="27">p<pos:position pos:line="44" pos:column="28"/></name></expr></argument>)<pos:position pos:line="44" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="30"/></expr_stmt>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">s<pos:position pos:line="45" pos:column="14"/></name></expr>)<pos:position pos:line="45" pos:column="15"/></condition><then pos:line="45" pos:column="15"> <block pos:line="45" pos:column="16">{
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><call><name pos:line="46" pos:column="21">is_null_oid<pos:position pos:line="46" pos:column="32"/></name><argument_list pos:line="46" pos:column="32">(<argument><expr><operator pos:line="46" pos:column="33">&amp;<pos:position pos:line="46" pos:column="38"/></operator><name><name pos:line="46" pos:column="34">s<pos:position pos:line="46" pos:column="35"/></name><operator pos:line="46" pos:column="35">-&gt;<pos:position pos:line="46" pos:column="40"/></operator><name pos:line="46" pos:column="37">oid<pos:position pos:line="46" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="42"/></condition><then pos:line="46" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="25">die<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><literal type="string" pos:line="47" pos:column="29">"Can't add a note on empty branch."<pos:position pos:line="47" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="66"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">oidcpy<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><operator pos:line="48" pos:column="24">&amp;<pos:position pos:line="48" pos:column="29"/></operator><name pos:line="48" pos:column="25">commit_oid<pos:position pos:line="48" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="37">&amp;<pos:position pos:line="48" pos:column="42"/></operator><name><name pos:line="48" pos:column="38">s<pos:position pos:line="48" pos:column="39"/></name><operator pos:line="48" pos:column="39">-&gt;<pos:position pos:line="48" pos:column="44"/></operator><name pos:line="48" pos:column="41">oid<pos:position pos:line="48" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></then> <elseif pos:line="49" pos:column="11">else <if pos:line="49" pos:column="16">if <condition pos:line="49" pos:column="19">(<expr><operator pos:line="49" pos:column="20">*<pos:position pos:line="49" pos:column="21"/></operator><name pos:line="49" pos:column="21">p<pos:position pos:line="49" pos:column="22"/></name> <operator pos:line="49" pos:column="23">==<pos:position pos:line="49" pos:column="25"/></operator> <literal type="char" pos:line="49" pos:column="26">':'<pos:position pos:line="49" pos:column="29"/></literal></expr>)<pos:position pos:line="49" pos:column="30"/></condition><then pos:line="49" pos:column="30"> <block pos:line="49" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="50" pos:column="17">uintmax_t<pos:position pos:line="50" pos:column="26"/></name></type> <name pos:line="50" pos:column="27">commit_mark<pos:position pos:line="50" pos:column="38"/></name> <init pos:line="50" pos:column="39">= <expr><call><name pos:line="50" pos:column="41">parse_mark_ref_eol<pos:position pos:line="50" pos:column="59"/></name><argument_list pos:line="50" pos:column="59">(<argument><expr><name pos:line="50" pos:column="60">p<pos:position pos:line="50" pos:column="61"/></name></expr></argument>)<pos:position pos:line="50" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="63"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="51" pos:column="17">struct<pos:position pos:line="51" pos:column="23"/></name> <name pos:line="51" pos:column="24">object_entry<pos:position pos:line="51" pos:column="36"/></name></name> <modifier pos:line="51" pos:column="37">*<pos:position pos:line="51" pos:column="38"/></modifier></type><name pos:line="51" pos:column="38">commit_oe<pos:position pos:line="51" pos:column="47"/></name> <init pos:line="51" pos:column="48">= <expr><call><name pos:line="51" pos:column="50">find_mark<pos:position pos:line="51" pos:column="59"/></name><argument_list pos:line="51" pos:column="59">(<argument><expr><name pos:line="51" pos:column="60">commit_mark<pos:position pos:line="51" pos:column="71"/></name></expr></argument>)<pos:position pos:line="51" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="51" pos:column="73"/></decl_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name><name pos:line="52" pos:column="21">commit_oe<pos:position pos:line="52" pos:column="30"/></name><operator pos:line="52" pos:column="30">-&gt;<pos:position pos:line="52" pos:column="35"/></operator><name pos:line="52" pos:column="32">type<pos:position pos:line="52" pos:column="36"/></name></name> <operator pos:line="52" pos:column="37">!=<pos:position pos:line="52" pos:column="39"/></operator> <name pos:line="52" pos:column="40">OBJ_COMMIT<pos:position pos:line="52" pos:column="50"/></name></expr>)<pos:position pos:line="52" pos:column="51"/></condition><then pos:line="52" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="25">die<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><literal type="string" pos:line="53" pos:column="29">"Mark :%"<pos:position pos:line="53" pos:column="38"/></literal> <name pos:line="53" pos:column="39">PRIuMAX<pos:position pos:line="53" pos:column="46"/></name> <literal type="string" pos:line="53" pos:column="47">" not a commit"<pos:position pos:line="53" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="64">commit_mark<pos:position pos:line="53" pos:column="75"/></name></expr></argument>)<pos:position pos:line="53" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="77"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">oidcpy<pos:position pos:line="54" pos:column="23"/></name><argument_list pos:line="54" pos:column="23">(<argument><expr><operator pos:line="54" pos:column="24">&amp;<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="25">commit_oid<pos:position pos:line="54" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="37">&amp;<pos:position pos:line="54" pos:column="42"/></operator><name><name pos:line="54" pos:column="38">commit_oe<pos:position pos:line="54" pos:column="47"/></name><operator pos:line="54" pos:column="47">-&gt;<pos:position pos:line="54" pos:column="52"/></operator><name pos:line="54" pos:column="49">idx<pos:position pos:line="54" pos:column="52"/></name><operator pos:line="54" pos:column="52">.<pos:position pos:line="54" pos:column="53"/></operator><name pos:line="54" pos:column="53">oid<pos:position pos:line="54" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if></elseif> <elseif pos:line="55" pos:column="11">else <if pos:line="55" pos:column="16">if <condition pos:line="55" pos:column="19">(<expr><operator pos:line="55" pos:column="20">!<pos:position pos:line="55" pos:column="21"/></operator><call><name pos:line="55" pos:column="21">get_oid<pos:position pos:line="55" pos:column="28"/></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">p<pos:position pos:line="55" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="32">&amp;<pos:position pos:line="55" pos:column="37"/></operator><name pos:line="55" pos:column="33">commit_oid<pos:position pos:line="55" pos:column="43"/></name></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="45"/></condition><then pos:line="55" pos:column="45"> <block pos:line="55" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="56" pos:column="17">unsigned<pos:position pos:line="56" pos:column="25"/></name> <name pos:line="56" pos:column="26">long<pos:position pos:line="56" pos:column="30"/></name></type> <name pos:line="56" pos:column="31">size<pos:position pos:line="56" pos:column="35"/></name></decl>;<pos:position pos:line="56" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="57" pos:column="17">char<pos:position pos:line="57" pos:column="21"/></name> <modifier pos:line="57" pos:column="22">*<pos:position pos:line="57" pos:column="23"/></modifier></type><name pos:line="57" pos:column="23">buf<pos:position pos:line="57" pos:column="26"/></name> <init pos:line="57" pos:column="27">= <expr><call><name pos:line="57" pos:column="29">read_object_with_reference<pos:position pos:line="57" pos:column="55"/></name><argument_list pos:line="57" pos:column="55">(<argument><expr><name><name pos:line="57" pos:column="56">commit_oid<pos:position pos:line="57" pos:column="66"/></name><operator pos:line="57" pos:column="66">.<pos:position pos:line="57" pos:column="67"/></operator><name pos:line="57" pos:column="67">hash<pos:position pos:line="57" pos:column="71"/></name></name></expr></argument>,
			<argument><expr><name pos:line="58" pos:column="25">commit_type<pos:position pos:line="58" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="38">&amp;<pos:position pos:line="58" pos:column="43"/></operator><name pos:line="58" pos:column="39">size<pos:position pos:line="58" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="45">commit_oid<pos:position pos:line="58" pos:column="55"/></name><operator pos:line="58" pos:column="55">.<pos:position pos:line="58" pos:column="56"/></operator><name pos:line="58" pos:column="56">hash<pos:position pos:line="58" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="58" pos:column="62"/></decl_stmt>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><operator pos:line="59" pos:column="21">!<pos:position pos:line="59" pos:column="22"/></operator><name pos:line="59" pos:column="22">buf<pos:position pos:line="59" pos:column="25"/></name> <operator pos:line="59" pos:column="26">||<pos:position pos:line="59" pos:column="28"/></operator> <name pos:line="59" pos:column="29">size<pos:position pos:line="59" pos:column="33"/></name> <operator pos:line="59" pos:column="34">&lt;<pos:position pos:line="59" pos:column="38"/></operator> <literal type="number" pos:line="59" pos:column="36">46<pos:position pos:line="59" pos:column="38"/></literal></expr>)<pos:position pos:line="59" pos:column="39"/></condition><then pos:line="59" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="25">die<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><literal type="string" pos:line="60" pos:column="29">"Not a valid commit: %s"<pos:position pos:line="60" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="55">p<pos:position pos:line="60" pos:column="56"/></name></expr></argument>)<pos:position pos:line="60" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="58"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="61" pos:column="17">free<pos:position pos:line="61" pos:column="21"/></name><argument_list pos:line="61" pos:column="21">(<argument><expr><name pos:line="61" pos:column="22">buf<pos:position pos:line="61" pos:column="25"/></name></expr></argument>)<pos:position pos:line="61" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></then></if></elseif> <else pos:line="62" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="17">die<pos:position pos:line="63" pos:column="20"/></name><argument_list pos:line="63" pos:column="20">(<argument><expr><literal type="string" pos:line="63" pos:column="21">"Invalid ref name or SHA1 expression: %s"<pos:position pos:line="63" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="64">p<pos:position pos:line="63" pos:column="65"/></name></expr></argument>)<pos:position pos:line="63" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="67"/></expr_stmt></block></else></if>

	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">inline_data<pos:position pos:line="65" pos:column="24"/></name></expr>)<pos:position pos:line="65" pos:column="25"/></condition><then pos:line="65" pos:column="25"> <block pos:line="65" pos:column="26">{
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">p<pos:position pos:line="66" pos:column="22"/></name> <operator pos:line="66" pos:column="23">!=<pos:position pos:line="66" pos:column="25"/></operator> <name><name pos:line="66" pos:column="26">uq<pos:position pos:line="66" pos:column="28"/></name><operator pos:line="66" pos:column="28">.<pos:position pos:line="66" pos:column="29"/></operator><name pos:line="66" pos:column="29">buf<pos:position pos:line="66" pos:column="32"/></name></name></expr>)<pos:position pos:line="66" pos:column="33"/></condition><then pos:line="66" pos:column="33"> <block pos:line="66" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="67" pos:column="25">strbuf_addstr<pos:position pos:line="67" pos:column="38"/></name><argument_list pos:line="67" pos:column="38">(<argument><expr><operator pos:line="67" pos:column="39">&amp;<pos:position pos:line="67" pos:column="44"/></operator><name pos:line="67" pos:column="40">uq<pos:position pos:line="67" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="44">p<pos:position pos:line="67" pos:column="45"/></name></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="68" pos:column="25">p<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">=<pos:position pos:line="68" pos:column="28"/></operator> <name><name pos:line="68" pos:column="29">uq<pos:position pos:line="68" pos:column="31"/></name><operator pos:line="68" pos:column="31">.<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="32">buf<pos:position pos:line="68" pos:column="35"/></name></name></expr>;<pos:position pos:line="68" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="69" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">read_next_command<pos:position pos:line="70" pos:column="34"/></name><argument_list pos:line="70" pos:column="34">()<pos:position pos:line="70" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">parse_and_store_blob<pos:position pos:line="71" pos:column="37"/></name><argument_list pos:line="71" pos:column="37">(<argument><expr><operator pos:line="71" pos:column="38">&amp;<pos:position pos:line="71" pos:column="43"/></operator><name pos:line="71" pos:column="39">last_blob<pos:position pos:line="71" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="50">&amp;<pos:position pos:line="71" pos:column="55"/></operator><name pos:line="71" pos:column="51">oid<pos:position pos:line="71" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="56">0<pos:position pos:line="71" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="72" pos:column="10"/></block></then> <elseif pos:line="72" pos:column="11">else <if pos:line="72" pos:column="16">if <condition pos:line="72" pos:column="19">(<expr><name pos:line="72" pos:column="20">oe<pos:position pos:line="72" pos:column="22"/></name></expr>)<pos:position pos:line="72" pos:column="23"/></condition><then pos:line="72" pos:column="23"> <block pos:line="72" pos:column="24">{
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name><name pos:line="73" pos:column="21">oe<pos:position pos:line="73" pos:column="23"/></name><operator pos:line="73" pos:column="23">-&gt;<pos:position pos:line="73" pos:column="28"/></operator><name pos:line="73" pos:column="25">type<pos:position pos:line="73" pos:column="29"/></name></name> <operator pos:line="73" pos:column="30">!=<pos:position pos:line="73" pos:column="32"/></operator> <name pos:line="73" pos:column="33">OBJ_BLOB<pos:position pos:line="73" pos:column="41"/></name></expr>)<pos:position pos:line="73" pos:column="42"/></condition><then pos:line="73" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="25">die<pos:position pos:line="74" pos:column="28"/></name><argument_list pos:line="74" pos:column="28">(<argument><expr><literal type="string" pos:line="74" pos:column="29">"Not a blob (actually a %s): %s"<pos:position pos:line="74" pos:column="61"/></literal></expr></argument>,
				<argument><expr><name><typename pos:line="75" pos:column="33">typename<pos:position pos:line="75" pos:column="41"/></typename></name><operator pos:line="75" pos:column="41">(<pos:position pos:line="75" pos:column="42"/></operator><name><name pos:line="75" pos:column="42">oe<pos:position pos:line="75" pos:column="44"/></name><operator pos:line="75" pos:column="44">-&gt;<pos:position pos:line="75" pos:column="49"/></operator><name pos:line="75" pos:column="46">type<pos:position pos:line="75" pos:column="50"/></name></name><operator pos:line="75" pos:column="50">)<pos:position pos:line="75" pos:column="51"/></operator></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="53">command_buf<pos:position pos:line="75" pos:column="64"/></name><operator pos:line="75" pos:column="64">.<pos:position pos:line="75" pos:column="65"/></operator><name pos:line="75" pos:column="65">buf<pos:position pos:line="75" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="70"/></expr_stmt></block></then></if>
	}<pos:position pos:line="76" pos:column="10"/></block></then></if></elseif> <elseif pos:line="76" pos:column="11">else <if pos:line="76" pos:column="16">if <condition pos:line="76" pos:column="19">(<expr><operator pos:line="76" pos:column="20">!<pos:position pos:line="76" pos:column="21"/></operator><call><name pos:line="76" pos:column="21">is_null_oid<pos:position pos:line="76" pos:column="32"/></name><argument_list pos:line="76" pos:column="32">(<argument><expr><operator pos:line="76" pos:column="33">&amp;<pos:position pos:line="76" pos:column="38"/></operator><name pos:line="76" pos:column="34">oid<pos:position pos:line="76" pos:column="37"/></name></expr></argument>)<pos:position pos:line="76" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="39"/></condition><then pos:line="76" pos:column="39"> <block pos:line="76" pos:column="40">{
		<decl_stmt><decl><type><name><name pos:line="77" pos:column="17">enum<pos:position pos:line="77" pos:column="21"/></name> <name pos:line="77" pos:column="22">object_type<pos:position pos:line="77" pos:column="33"/></name></name></type> <name pos:line="77" pos:column="34">type<pos:position pos:line="77" pos:column="38"/></name> <init pos:line="77" pos:column="39">= <expr><call><name pos:line="77" pos:column="41">sha1_object_info<pos:position pos:line="77" pos:column="57"/></name><argument_list pos:line="77" pos:column="57">(<argument><expr><name><name pos:line="77" pos:column="58">oid<pos:position pos:line="77" pos:column="61"/></name><operator pos:line="77" pos:column="61">.<pos:position pos:line="77" pos:column="62"/></operator><name pos:line="77" pos:column="62">hash<pos:position pos:line="77" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="68">NULL<pos:position pos:line="77" pos:column="72"/></name></expr></argument>)<pos:position pos:line="77" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="77" pos:column="74"/></decl_stmt>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name pos:line="78" pos:column="21">type<pos:position pos:line="78" pos:column="25"/></name> <operator pos:line="78" pos:column="26">&lt;<pos:position pos:line="78" pos:column="30"/></operator> <literal type="number" pos:line="78" pos:column="28">0<pos:position pos:line="78" pos:column="29"/></literal></expr>)<pos:position pos:line="78" pos:column="30"/></condition><then pos:line="78" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="25">die<pos:position pos:line="79" pos:column="28"/></name><argument_list pos:line="79" pos:column="28">(<argument><expr><literal type="string" pos:line="79" pos:column="29">"Blob not found: %s"<pos:position pos:line="79" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="51">command_buf<pos:position pos:line="79" pos:column="62"/></name><operator pos:line="79" pos:column="62">.<pos:position pos:line="79" pos:column="63"/></operator><name pos:line="79" pos:column="63">buf<pos:position pos:line="79" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="68"/></expr_stmt></block></then></if>
		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><name pos:line="80" pos:column="21">type<pos:position pos:line="80" pos:column="25"/></name> <operator pos:line="80" pos:column="26">!=<pos:position pos:line="80" pos:column="28"/></operator> <name pos:line="80" pos:column="29">OBJ_BLOB<pos:position pos:line="80" pos:column="37"/></name></expr>)<pos:position pos:line="80" pos:column="38"/></condition><then pos:line="80" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="25">die<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><literal type="string" pos:line="81" pos:column="29">"Not a blob (actually a %s): %s"<pos:position pos:line="81" pos:column="61"/></literal></expr></argument>,
			    <argument><expr><name><typename pos:line="82" pos:column="29">typename<pos:position pos:line="82" pos:column="37"/></typename></name><operator pos:line="82" pos:column="37">(<pos:position pos:line="82" pos:column="38"/></operator><name pos:line="82" pos:column="38">type<pos:position pos:line="82" pos:column="42"/></name><operator pos:line="82" pos:column="42">)<pos:position pos:line="82" pos:column="43"/></operator></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="45">command_buf<pos:position pos:line="82" pos:column="56"/></name><operator pos:line="82" pos:column="56">.<pos:position pos:line="82" pos:column="57"/></operator><name pos:line="82" pos:column="57">buf<pos:position pos:line="82" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="62"/></expr_stmt></block></then></if>
	}<pos:position pos:line="83" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="85" pos:column="9">construct_path_with_fanout<pos:position pos:line="85" pos:column="35"/></name><argument_list pos:line="85" pos:column="35">(<argument><expr><call><name pos:line="85" pos:column="36">oid_to_hex<pos:position pos:line="85" pos:column="46"/></name><argument_list pos:line="85" pos:column="46">(<argument><expr><operator pos:line="85" pos:column="47">&amp;<pos:position pos:line="85" pos:column="52"/></operator><name pos:line="85" pos:column="48">commit_oid<pos:position pos:line="85" pos:column="58"/></name></expr></argument>)<pos:position pos:line="85" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="85" pos:column="61">*<pos:position pos:line="85" pos:column="62"/></operator><name pos:line="85" pos:column="62">old_fanout<pos:position pos:line="85" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="74">path<pos:position pos:line="85" pos:column="78"/></name></expr></argument>)<pos:position pos:line="85" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="80"/></expr_stmt>
	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><call><name pos:line="86" pos:column="13">tree_content_remove<pos:position pos:line="86" pos:column="32"/></name><argument_list pos:line="86" pos:column="32">(<argument><expr><operator pos:line="86" pos:column="33">&amp;<pos:position pos:line="86" pos:column="38"/></operator><name><name pos:line="86" pos:column="34">b<pos:position pos:line="86" pos:column="35"/></name><operator pos:line="86" pos:column="35">-&gt;<pos:position pos:line="86" pos:column="40"/></operator><name pos:line="86" pos:column="37">branch_tree<pos:position pos:line="86" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="50">path<pos:position pos:line="86" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="56">NULL<pos:position pos:line="86" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="62">0<pos:position pos:line="86" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="65"/></condition><then pos:line="86" pos:column="65">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="87" pos:column="17">b<pos:position pos:line="87" pos:column="18"/></name><operator pos:line="87" pos:column="18">-&gt;<pos:position pos:line="87" pos:column="23"/></operator><name pos:line="87" pos:column="20">num_notes<pos:position pos:line="87" pos:column="29"/></name></name><operator pos:line="87" pos:column="29">--<pos:position pos:line="87" pos:column="31"/></operator></expr>;<pos:position pos:line="87" pos:column="32"/></expr_stmt></block></then></if>

	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><call><name pos:line="89" pos:column="13">is_null_oid<pos:position pos:line="89" pos:column="24"/></name><argument_list pos:line="89" pos:column="24">(<argument><expr><operator pos:line="89" pos:column="25">&amp;<pos:position pos:line="89" pos:column="30"/></operator><name pos:line="89" pos:column="26">oid<pos:position pos:line="89" pos:column="29"/></name></expr></argument>)<pos:position pos:line="89" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="31"/></condition><then pos:line="89" pos:column="31">
		<block type="pseudo"><return pos:line="90" pos:column="17">return;<pos:position pos:line="90" pos:column="24"/></return></block></then></if> <comment type="block" pos:line="90" pos:column="25">/* nothing to insert */</comment>

	<expr_stmt><expr><name><name pos:line="92" pos:column="9">b<pos:position pos:line="92" pos:column="10"/></name><operator pos:line="92" pos:column="10">-&gt;<pos:position pos:line="92" pos:column="15"/></operator><name pos:line="92" pos:column="12">num_notes<pos:position pos:line="92" pos:column="21"/></name></name><operator pos:line="92" pos:column="21">++<pos:position pos:line="92" pos:column="23"/></operator></expr>;<pos:position pos:line="92" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name pos:line="93" pos:column="9">new_fanout<pos:position pos:line="93" pos:column="19"/></name> <operator pos:line="93" pos:column="20">=<pos:position pos:line="93" pos:column="21"/></operator> <call><name pos:line="93" pos:column="22">convert_num_notes_to_fanout<pos:position pos:line="93" pos:column="49"/></name><argument_list pos:line="93" pos:column="49">(<argument><expr><name><name pos:line="93" pos:column="50">b<pos:position pos:line="93" pos:column="51"/></name><operator pos:line="93" pos:column="51">-&gt;<pos:position pos:line="93" pos:column="56"/></operator><name pos:line="93" pos:column="53">num_notes<pos:position pos:line="93" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="64"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="94" pos:column="9">construct_path_with_fanout<pos:position pos:line="94" pos:column="35"/></name><argument_list pos:line="94" pos:column="35">(<argument><expr><call><name pos:line="94" pos:column="36">oid_to_hex<pos:position pos:line="94" pos:column="46"/></name><argument_list pos:line="94" pos:column="46">(<argument><expr><operator pos:line="94" pos:column="47">&amp;<pos:position pos:line="94" pos:column="52"/></operator><name pos:line="94" pos:column="48">commit_oid<pos:position pos:line="94" pos:column="58"/></name></expr></argument>)<pos:position pos:line="94" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="94" pos:column="61">new_fanout<pos:position pos:line="94" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="73">path<pos:position pos:line="94" pos:column="77"/></name></expr></argument>)<pos:position pos:line="94" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="79"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="95" pos:column="9">tree_content_set<pos:position pos:line="95" pos:column="25"/></name><argument_list pos:line="95" pos:column="25">(<argument><expr><operator pos:line="95" pos:column="26">&amp;<pos:position pos:line="95" pos:column="31"/></operator><name><name pos:line="95" pos:column="27">b<pos:position pos:line="95" pos:column="28"/></name><operator pos:line="95" pos:column="28">-&gt;<pos:position pos:line="95" pos:column="33"/></operator><name pos:line="95" pos:column="30">branch_tree<pos:position pos:line="95" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="43">path<pos:position pos:line="95" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="49">&amp;<pos:position pos:line="95" pos:column="54"/></operator><name pos:line="95" pos:column="50">oid<pos:position pos:line="95" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="55">S_IFREG<pos:position pos:line="95" pos:column="62"/></name> <operator pos:line="95" pos:column="63">|<pos:position pos:line="95" pos:column="64"/></operator> <literal type="number" pos:line="95" pos:column="65">0644<pos:position pos:line="95" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="71">NULL<pos:position pos:line="95" pos:column="75"/></name></expr></argument>)<pos:position pos:line="95" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="77"/></expr_stmt>
}<pos:position pos:line="96" pos:column="2"/></block></function></unit>
