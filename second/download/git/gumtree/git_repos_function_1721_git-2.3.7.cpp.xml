<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1721_git-2.3.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">prefix_path_gently<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">prefix<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">len<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="2" pos:column="26">int<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">remaining_prefix<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="49">const<pos:position pos:line="2" pos:column="54"/></specifier> <name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">path<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">orig<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">path<pos:position pos:line="4" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">sanitized<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">is_absolute_path<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">orig<pos:position pos:line="6" pos:column="34"/></name></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="36"/></condition><then pos:line="6" pos:column="36"> <block pos:line="6" pos:column="37">{
		<expr_stmt><expr><name pos:line="7" pos:column="17">sanitized<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">=<pos:position pos:line="7" pos:column="28"/></operator> <call><name pos:line="7" pos:column="29">xmalloc<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><call><name pos:line="7" pos:column="37">strlen<pos:position pos:line="7" pos:column="43"/></name><argument_list pos:line="7" pos:column="43">(<argument><expr><name pos:line="7" pos:column="44">path<pos:position pos:line="7" pos:column="48"/></name></expr></argument>)<pos:position pos:line="7" pos:column="49"/></argument_list></call> <operator pos:line="7" pos:column="50">+<pos:position pos:line="7" pos:column="51"/></operator> <literal type="number" pos:line="7" pos:column="52">1<pos:position pos:line="7" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="55"/></expr_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">remaining_prefix<pos:position pos:line="8" pos:column="37"/></name></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">remaining_prefix<pos:position pos:line="9" pos:column="42"/></name> <operator pos:line="9" pos:column="43">=<pos:position pos:line="9" pos:column="44"/></operator> <literal type="number" pos:line="9" pos:column="45">0<pos:position pos:line="9" pos:column="46"/></literal></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt></block></then></if>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">normalize_path_copy_len<pos:position pos:line="10" pos:column="44"/></name><argument_list pos:line="10" pos:column="44">(<argument><expr><name pos:line="10" pos:column="45">sanitized<pos:position pos:line="10" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="56">path<pos:position pos:line="10" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="62">remaining_prefix<pos:position pos:line="10" pos:column="78"/></name></expr></argument>)<pos:position pos:line="10" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="80"/></condition><then pos:line="10" pos:column="80"> <block pos:line="10" pos:column="81">{
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">free<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">sanitized<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
			<return pos:line="12" pos:column="25">return <expr><name pos:line="12" pos:column="32">NULL<pos:position pos:line="12" pos:column="36"/></name></expr>;<pos:position pos:line="12" pos:column="37"/></return>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><call><name pos:line="14" pos:column="21">abspath_part_inside_repo<pos:position pos:line="14" pos:column="45"/></name><argument_list pos:line="14" pos:column="45">(<argument><expr><name pos:line="14" pos:column="46">sanitized<pos:position pos:line="14" pos:column="55"/></name></expr></argument>)<pos:position pos:line="14" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="57"/></condition><then pos:line="14" pos:column="57"> <block pos:line="14" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="15" pos:column="25">free<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">sanitized<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
			<return pos:line="16" pos:column="25">return <expr><name pos:line="16" pos:column="32">NULL<pos:position pos:line="16" pos:column="36"/></name></expr>;<pos:position pos:line="16" pos:column="37"/></return>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if>
	}<pos:position pos:line="18" pos:column="10"/></block></then> <else pos:line="18" pos:column="11">else <block pos:line="18" pos:column="16">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">sanitized<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <call><name pos:line="19" pos:column="29">xmalloc<pos:position pos:line="19" pos:column="36"/></name><argument_list pos:line="19" pos:column="36">(<argument><expr><name pos:line="19" pos:column="37">len<pos:position pos:line="19" pos:column="40"/></name> <operator pos:line="19" pos:column="41">+<pos:position pos:line="19" pos:column="42"/></operator> <call><name pos:line="19" pos:column="43">strlen<pos:position pos:line="19" pos:column="49"/></name><argument_list pos:line="19" pos:column="49">(<argument><expr><name pos:line="19" pos:column="50">path<pos:position pos:line="19" pos:column="54"/></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call> <operator pos:line="19" pos:column="56">+<pos:position pos:line="19" pos:column="57"/></operator> <literal type="number" pos:line="19" pos:column="58">1<pos:position pos:line="19" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="61"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">len<pos:position pos:line="20" pos:column="24"/></name></expr>)<pos:position pos:line="20" pos:column="25"/></condition><then pos:line="20" pos:column="25">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">memcpy<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">sanitized<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="43">prefix<pos:position pos:line="21" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="51">len<pos:position pos:line="21" pos:column="54"/></name></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">strcpy<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><name pos:line="22" pos:column="24">sanitized<pos:position pos:line="22" pos:column="33"/></name> <operator pos:line="22" pos:column="34">+<pos:position pos:line="22" pos:column="35"/></operator> <name pos:line="22" pos:column="36">len<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="41">path<pos:position pos:line="22" pos:column="45"/></name></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">remaining_prefix<pos:position pos:line="23" pos:column="37"/></name></expr>)<pos:position pos:line="23" pos:column="38"/></condition><then pos:line="23" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="24" pos:column="25">*<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">remaining_prefix<pos:position pos:line="24" pos:column="42"/></name> <operator pos:line="24" pos:column="43">=<pos:position pos:line="24" pos:column="44"/></operator> <name pos:line="24" pos:column="45">len<pos:position pos:line="24" pos:column="48"/></name></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">normalize_path_copy_len<pos:position pos:line="25" pos:column="44"/></name><argument_list pos:line="25" pos:column="44">(<argument><expr><name pos:line="25" pos:column="45">sanitized<pos:position pos:line="25" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="56">sanitized<pos:position pos:line="25" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="67">remaining_prefix<pos:position pos:line="25" pos:column="83"/></name></expr></argument>)<pos:position pos:line="25" pos:column="84"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="85"/></condition><then pos:line="25" pos:column="85"> <block pos:line="25" pos:column="86">{
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">free<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">sanitized<pos:position pos:line="26" pos:column="39"/></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
			<return pos:line="27" pos:column="25">return <expr><name pos:line="27" pos:column="32">NULL<pos:position pos:line="27" pos:column="36"/></name></expr>;<pos:position pos:line="27" pos:column="37"/></return>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>
	}<pos:position pos:line="29" pos:column="10"/></block></else></if>
	<return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">sanitized<pos:position pos:line="30" pos:column="25"/></name></expr>;<pos:position pos:line="30" pos:column="26"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
