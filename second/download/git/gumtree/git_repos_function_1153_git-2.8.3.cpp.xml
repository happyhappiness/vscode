<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1153_git-2.8.3.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">delta_index<pos:position pos:line="1" pos:column="19"/></name></name> <modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier></type> <name pos:line="1" pos:column="22">create_delta_index<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">void<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">buf<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">unsigned<pos:position pos:line="1" pos:column="66"/></name> <name pos:line="1" pos:column="67">long<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">bufsize<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">i<pos:position pos:line="3" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="25">hsize<pos:position pos:line="3" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="32">hmask<pos:position pos:line="3" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="39">entries<pos:position pos:line="3" pos:column="46"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="48">prev_val<pos:position pos:line="3" pos:column="56"/></name></decl>, <modifier pos:line="3" pos:column="58">*<pos:position pos:line="3" pos:column="59"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="59">hash_count<pos:position pos:line="3" pos:column="69"/></name></decl>;<pos:position pos:line="3" pos:column="70"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">unsigned<pos:position pos:line="4" pos:column="23"/></name> <name pos:line="4" pos:column="24">char<pos:position pos:line="4" pos:column="28"/></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">data<pos:position pos:line="4" pos:column="34"/></name></decl>, <modifier pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="37">buffer<pos:position pos:line="4" pos:column="43"/></name> <init pos:line="4" pos:column="44">= <expr><name pos:line="4" pos:column="46">buf<pos:position pos:line="4" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">delta_index<pos:position pos:line="5" pos:column="27"/></name></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">index<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">unpacked_index_entry<pos:position pos:line="6" pos:column="36"/></name></name> <modifier pos:line="6" pos:column="37">*<pos:position pos:line="6" pos:column="38"/></modifier></type><name pos:line="6" pos:column="38">entry<pos:position pos:line="6" pos:column="43"/></name></decl>, <modifier pos:line="6" pos:column="45">*<pos:position pos:line="6" pos:column="46"/></modifier><modifier pos:line="6" pos:column="46">*<pos:position pos:line="6" pos:column="47"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="47">hash<pos:position pos:line="6" pos:column="51"/></name></decl>;<pos:position pos:line="6" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">index_entry<pos:position pos:line="7" pos:column="27"/></name></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">packed_entry<pos:position pos:line="7" pos:column="41"/></name></decl>, <modifier pos:line="7" pos:column="43">*<pos:position pos:line="7" pos:column="44"/></modifier><modifier pos:line="7" pos:column="44">*<pos:position pos:line="7" pos:column="45"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="45">packed_hash<pos:position pos:line="7" pos:column="56"/></name></decl>;<pos:position pos:line="7" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">void<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">mem<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">long<pos:position pos:line="9" pos:column="22"/></name></type> <name pos:line="9" pos:column="23">memsize<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">buf<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">||<pos:position pos:line="11" pos:column="20"/></operator> <operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">bufsize<pos:position pos:line="11" pos:column="29"/></name></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><name pos:line="12" pos:column="24">NULL<pos:position pos:line="12" pos:column="28"/></name></expr>;<pos:position pos:line="12" pos:column="29"/></return></block></then></if>

	<comment type="block" pos:line="14" pos:column="9">/* Determine index hash size.  Note that indexing skips the
	   first byte to allow for optimizing the Rabin's polynomial
	   initialization in create_delta(). */</comment>
	<expr_stmt><expr><name pos:line="17" pos:column="9">entries<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <operator pos:line="17" pos:column="19">(<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">bufsize<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">-<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="30">1<pos:position pos:line="17" pos:column="31"/></literal><operator pos:line="17" pos:column="31">)<pos:position pos:line="17" pos:column="32"/></operator> <operator pos:line="17" pos:column="33">/<pos:position pos:line="17" pos:column="34"/></operator> <name pos:line="17" pos:column="35">RABIN_WINDOW<pos:position pos:line="17" pos:column="47"/></name></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">bufsize<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">&gt;=<pos:position pos:line="18" pos:column="26"/></operator> <literal type="number" pos:line="18" pos:column="24">0xffffffffUL<pos:position pos:line="18" pos:column="36"/></literal></expr>)<pos:position pos:line="18" pos:column="37"/></condition><then pos:line="18" pos:column="37"> <block pos:line="18" pos:column="38">{
		<comment type="block" pos:line="19" pos:column="17">/*
		 * Current delta format can't encode offsets into
		 * reference buffer with more than 32 bits.
		 */</comment>
		<expr_stmt><expr><name pos:line="23" pos:column="17">entries<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">=<pos:position pos:line="23" pos:column="26"/></operator> <literal type="number" pos:line="23" pos:column="27">0xfffffffeU<pos:position pos:line="23" pos:column="38"/></literal> <operator pos:line="23" pos:column="39">/<pos:position pos:line="23" pos:column="40"/></operator> <name pos:line="23" pos:column="41">RABIN_WINDOW<pos:position pos:line="23" pos:column="53"/></name></expr>;<pos:position pos:line="23" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="25" pos:column="9">hsize<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <name pos:line="25" pos:column="17">entries<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">/<pos:position pos:line="25" pos:column="26"/></operator> <literal type="number" pos:line="25" pos:column="27">4<pos:position pos:line="25" pos:column="28"/></literal></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
	<for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init><expr><name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">4<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></init> <condition><expr><operator pos:line="26" pos:column="21">(<pos:position pos:line="26" pos:column="22"/></operator><literal type="number" pos:line="26" pos:column="22">1u<pos:position pos:line="26" pos:column="24"/></literal> <operator pos:line="26" pos:column="25">&lt;&lt;<pos:position pos:line="26" pos:column="33"/></operator> <name pos:line="26" pos:column="28">i<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">)<pos:position pos:line="26" pos:column="30"/></operator> <operator pos:line="26" pos:column="31">&lt;<pos:position pos:line="26" pos:column="35"/></operator> <name pos:line="26" pos:column="33">hsize<pos:position pos:line="26" pos:column="38"/></name></expr>;<pos:position pos:line="26" pos:column="39"/></condition> <incr><expr><name pos:line="26" pos:column="40">i<pos:position pos:line="26" pos:column="41"/></name><operator pos:line="26" pos:column="41">++<pos:position pos:line="26" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="44"/></control><block type="pseudo"><empty_stmt pos:line="26" pos:column="44">;<pos:position pos:line="26" pos:column="45"/></empty_stmt></block></for>
	<expr_stmt><expr><name pos:line="27" pos:column="9">hsize<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <literal type="number" pos:line="27" pos:column="17">1<pos:position pos:line="27" pos:column="18"/></literal> <operator pos:line="27" pos:column="19">&lt;&lt;<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="22">i<pos:position pos:line="27" pos:column="23"/></name></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">hmask<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <name pos:line="28" pos:column="17">hsize<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">-<pos:position pos:line="28" pos:column="24"/></operator> <literal type="number" pos:line="28" pos:column="25">1<pos:position pos:line="28" pos:column="26"/></literal></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="30" pos:column="9">/* allocate lookup index */</comment>
	<expr_stmt><expr><name pos:line="31" pos:column="9">memsize<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <sizeof pos:line="31" pos:column="19">sizeof<argument_list pos:line="31" pos:column="25">(<argument><expr><operator pos:line="31" pos:column="26">*<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="27">hash<pos:position pos:line="31" pos:column="31"/></name></expr></argument>)<pos:position pos:line="31" pos:column="32"/></argument_list></sizeof> <operator pos:line="31" pos:column="33">*<pos:position pos:line="31" pos:column="34"/></operator> <name pos:line="31" pos:column="35">hsize<pos:position pos:line="31" pos:column="40"/></name> <operator pos:line="31" pos:column="41">+<pos:position pos:line="31" pos:column="42"/></operator>
		  <sizeof pos:line="32" pos:column="19">sizeof<argument_list pos:line="32" pos:column="25">(<argument><expr><operator pos:line="32" pos:column="26">*<pos:position pos:line="32" pos:column="27"/></operator><name pos:line="32" pos:column="27">entry<pos:position pos:line="32" pos:column="32"/></name></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></sizeof> <operator pos:line="32" pos:column="34">*<pos:position pos:line="32" pos:column="35"/></operator> <name pos:line="32" pos:column="36">entries<pos:position pos:line="32" pos:column="43"/></name></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name pos:line="33" pos:column="9">mem<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <call><name pos:line="33" pos:column="15">malloc<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">memsize<pos:position pos:line="33" pos:column="29"/></name></expr></argument>)<pos:position pos:line="33" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">mem<pos:position pos:line="34" pos:column="17"/></name></expr>)<pos:position pos:line="34" pos:column="18"/></condition><then pos:line="34" pos:column="18">
		<block type="pseudo"><return pos:line="35" pos:column="17">return <expr><name pos:line="35" pos:column="24">NULL<pos:position pos:line="35" pos:column="28"/></name></expr>;<pos:position pos:line="35" pos:column="29"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="36" pos:column="9">hash<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">=<pos:position pos:line="36" pos:column="15"/></operator> <name pos:line="36" pos:column="16">mem<pos:position pos:line="36" pos:column="19"/></name></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="37" pos:column="9">mem<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <name pos:line="37" pos:column="15">hash<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">+<pos:position pos:line="37" pos:column="21"/></operator> <name pos:line="37" pos:column="22">hsize<pos:position pos:line="37" pos:column="27"/></name></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="38" pos:column="9">entry<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">=<pos:position pos:line="38" pos:column="16"/></operator> <name pos:line="38" pos:column="17">mem<pos:position pos:line="38" pos:column="20"/></name></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="40" pos:column="9">memset<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><name pos:line="40" pos:column="16">hash<pos:position pos:line="40" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="22">0<pos:position pos:line="40" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="25">hsize<pos:position pos:line="40" pos:column="30"/></name> <operator pos:line="40" pos:column="31">*<pos:position pos:line="40" pos:column="32"/></operator> <sizeof pos:line="40" pos:column="33">sizeof<argument_list pos:line="40" pos:column="39">(<argument><expr><operator pos:line="40" pos:column="40">*<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="41">hash<pos:position pos:line="40" pos:column="45"/></name></expr></argument>)<pos:position pos:line="40" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="48"/></expr_stmt>

	<comment type="block" pos:line="42" pos:column="9">/* allocate an array to count hash entries */</comment>
	<expr_stmt><expr><name pos:line="43" pos:column="9">hash_count<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">=<pos:position pos:line="43" pos:column="21"/></operator> <call><name pos:line="43" pos:column="22">calloc<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">hsize<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="36">sizeof<argument_list pos:line="43" pos:column="42">(<argument><expr><operator pos:line="43" pos:column="43">*<pos:position pos:line="43" pos:column="44"/></operator><name pos:line="43" pos:column="44">hash_count<pos:position pos:line="43" pos:column="54"/></name></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="57"/></expr_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">hash_count<pos:position pos:line="44" pos:column="24"/></name></expr>)<pos:position pos:line="44" pos:column="25"/></condition><then pos:line="44" pos:column="25"> <block pos:line="44" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">free<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">hash<pos:position pos:line="45" pos:column="26"/></name></expr></argument>)<pos:position pos:line="45" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt>
		<return pos:line="46" pos:column="17">return <expr><name pos:line="46" pos:column="24">NULL<pos:position pos:line="46" pos:column="28"/></name></expr>;<pos:position pos:line="46" pos:column="29"/></return>
	}<pos:position pos:line="47" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="49" pos:column="9">/* then populate the index */</comment>
	<expr_stmt><expr><name pos:line="50" pos:column="9">prev_val<pos:position pos:line="50" pos:column="17"/></name> <operator pos:line="50" pos:column="18">=<pos:position pos:line="50" pos:column="19"/></operator> <operator pos:line="50" pos:column="20">~<pos:position pos:line="50" pos:column="21"/></operator><literal type="number" pos:line="50" pos:column="21">0<pos:position pos:line="50" pos:column="22"/></literal></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>
	<for pos:line="51" pos:column="9">for <control pos:line="51" pos:column="13">(<init><expr><name pos:line="51" pos:column="14">data<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">=<pos:position pos:line="51" pos:column="20"/></operator> <name pos:line="51" pos:column="21">buffer<pos:position pos:line="51" pos:column="27"/></name> <operator pos:line="51" pos:column="28">+<pos:position pos:line="51" pos:column="29"/></operator> <name pos:line="51" pos:column="30">entries<pos:position pos:line="51" pos:column="37"/></name> <operator pos:line="51" pos:column="38">*<pos:position pos:line="51" pos:column="39"/></operator> <name pos:line="51" pos:column="40">RABIN_WINDOW<pos:position pos:line="51" pos:column="52"/></name> <operator pos:line="51" pos:column="53">-<pos:position pos:line="51" pos:column="54"/></operator> <name pos:line="51" pos:column="55">RABIN_WINDOW<pos:position pos:line="51" pos:column="67"/></name></expr>;<pos:position pos:line="51" pos:column="68"/></init>
	     <condition><expr><name pos:line="52" pos:column="14">data<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">&gt;=<pos:position pos:line="52" pos:column="24"/></operator> <name pos:line="52" pos:column="22">buffer<pos:position pos:line="52" pos:column="28"/></name></expr>;<pos:position pos:line="52" pos:column="29"/></condition>
	     <incr><expr><name pos:line="53" pos:column="14">data<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">-=<pos:position pos:line="53" pos:column="21"/></operator> <name pos:line="53" pos:column="22">RABIN_WINDOW<pos:position pos:line="53" pos:column="34"/></name></expr></incr>)<pos:position pos:line="53" pos:column="35"/></control> <block pos:line="53" pos:column="36">{
		<decl_stmt><decl><type><name pos:line="54" pos:column="17">unsigned<pos:position pos:line="54" pos:column="25"/></name> <name pos:line="54" pos:column="26">int<pos:position pos:line="54" pos:column="29"/></name></type> <name pos:line="54" pos:column="30">val<pos:position pos:line="54" pos:column="33"/></name> <init pos:line="54" pos:column="34">= <expr><literal type="number" pos:line="54" pos:column="36">0<pos:position pos:line="54" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="54" pos:column="38"/></decl_stmt>
		<for pos:line="55" pos:column="17">for <control pos:line="55" pos:column="21">(<init><expr><name pos:line="55" pos:column="22">i<pos:position pos:line="55" pos:column="23"/></name> <operator pos:line="55" pos:column="24">=<pos:position pos:line="55" pos:column="25"/></operator> <literal type="number" pos:line="55" pos:column="26">1<pos:position pos:line="55" pos:column="27"/></literal></expr>;<pos:position pos:line="55" pos:column="28"/></init> <condition><expr><name pos:line="55" pos:column="29">i<pos:position pos:line="55" pos:column="30"/></name> <operator pos:line="55" pos:column="31">&lt;=<pos:position pos:line="55" pos:column="36"/></operator> <name pos:line="55" pos:column="34">RABIN_WINDOW<pos:position pos:line="55" pos:column="46"/></name></expr>;<pos:position pos:line="55" pos:column="47"/></condition> <incr><expr><name pos:line="55" pos:column="48">i<pos:position pos:line="55" pos:column="49"/></name><operator pos:line="55" pos:column="49">++<pos:position pos:line="55" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="55" pos:column="52"/></control>
			<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="25">val<pos:position pos:line="56" pos:column="28"/></name> <operator pos:line="56" pos:column="29">=<pos:position pos:line="56" pos:column="30"/></operator> <operator pos:line="56" pos:column="31">(<pos:position pos:line="56" pos:column="32"/></operator><operator pos:line="56" pos:column="32">(<pos:position pos:line="56" pos:column="33"/></operator><name pos:line="56" pos:column="33">val<pos:position pos:line="56" pos:column="36"/></name> <operator pos:line="56" pos:column="37">&lt;&lt;<pos:position pos:line="56" pos:column="45"/></operator> <literal type="number" pos:line="56" pos:column="40">8<pos:position pos:line="56" pos:column="41"/></literal><operator pos:line="56" pos:column="41">)<pos:position pos:line="56" pos:column="42"/></operator> <operator pos:line="56" pos:column="43">|<pos:position pos:line="56" pos:column="44"/></operator> <name><name pos:line="56" pos:column="45">data<pos:position pos:line="56" pos:column="49"/></name><index pos:line="56" pos:column="49">[<expr><name pos:line="56" pos:column="50">i<pos:position pos:line="56" pos:column="51"/></name></expr>]<pos:position pos:line="56" pos:column="52"/></index></name><operator pos:line="56" pos:column="52">)<pos:position pos:line="56" pos:column="53"/></operator> <operator pos:line="56" pos:column="54">^<pos:position pos:line="56" pos:column="55"/></operator> <name><name pos:line="56" pos:column="56">T<pos:position pos:line="56" pos:column="57"/></name><index pos:line="56" pos:column="57">[<expr><name pos:line="56" pos:column="58">val<pos:position pos:line="56" pos:column="61"/></name> <operator pos:line="56" pos:column="62">&gt;&gt;<pos:position pos:line="56" pos:column="67"/></operator> <name pos:line="56" pos:column="65">RABIN_SHIFT<pos:position pos:line="56" pos:column="76"/></name></expr>]<pos:position pos:line="56" pos:column="77"/></index></name></expr>;<pos:position pos:line="56" pos:column="78"/></expr_stmt></block></for>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name pos:line="57" pos:column="21">val<pos:position pos:line="57" pos:column="24"/></name> <operator pos:line="57" pos:column="25">==<pos:position pos:line="57" pos:column="27"/></operator> <name pos:line="57" pos:column="28">prev_val<pos:position pos:line="57" pos:column="36"/></name></expr>)<pos:position pos:line="57" pos:column="37"/></condition><then pos:line="57" pos:column="37"> <block pos:line="57" pos:column="38">{
			<comment type="block" pos:line="58" pos:column="25">/* keep the lowest of consecutive identical blocks */</comment>
			<expr_stmt><expr><name><name pos:line="59" pos:column="25">entry<pos:position pos:line="59" pos:column="30"/></name><index pos:line="59" pos:column="30">[<expr><operator pos:line="59" pos:column="31">-<pos:position pos:line="59" pos:column="32"/></operator><literal type="number" pos:line="59" pos:column="32">1<pos:position pos:line="59" pos:column="33"/></literal></expr>]<pos:position pos:line="59" pos:column="34"/></index></name><operator pos:line="59" pos:column="34">.<pos:position pos:line="59" pos:column="35"/></operator><name><name pos:line="59" pos:column="35">entry<pos:position pos:line="59" pos:column="40"/></name><operator pos:line="59" pos:column="40">.<pos:position pos:line="59" pos:column="41"/></operator><name pos:line="59" pos:column="41">ptr<pos:position pos:line="59" pos:column="44"/></name></name> <operator pos:line="59" pos:column="45">=<pos:position pos:line="59" pos:column="46"/></operator> <name pos:line="59" pos:column="47">data<pos:position pos:line="59" pos:column="51"/></name> <operator pos:line="59" pos:column="52">+<pos:position pos:line="59" pos:column="53"/></operator> <name pos:line="59" pos:column="54">RABIN_WINDOW<pos:position pos:line="59" pos:column="66"/></name></expr>;<pos:position pos:line="59" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="60" pos:column="25">--<pos:position pos:line="60" pos:column="27"/></operator><name pos:line="60" pos:column="27">entries<pos:position pos:line="60" pos:column="34"/></name></expr>;<pos:position pos:line="60" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="61" pos:column="18"/></block></then> <else pos:line="61" pos:column="19">else <block pos:line="61" pos:column="24">{
			<expr_stmt><expr><name pos:line="62" pos:column="25">prev_val<pos:position pos:line="62" pos:column="33"/></name> <operator pos:line="62" pos:column="34">=<pos:position pos:line="62" pos:column="35"/></operator> <name pos:line="62" pos:column="36">val<pos:position pos:line="62" pos:column="39"/></name></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="63" pos:column="25">i<pos:position pos:line="63" pos:column="26"/></name> <operator pos:line="63" pos:column="27">=<pos:position pos:line="63" pos:column="28"/></operator> <name pos:line="63" pos:column="29">val<pos:position pos:line="63" pos:column="32"/></name> <operator pos:line="63" pos:column="33">&amp;<pos:position pos:line="63" pos:column="38"/></operator> <name pos:line="63" pos:column="35">hmask<pos:position pos:line="63" pos:column="40"/></name></expr>;<pos:position pos:line="63" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="64" pos:column="25">entry<pos:position pos:line="64" pos:column="30"/></name><operator pos:line="64" pos:column="30">-&gt;<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="32">entry<pos:position pos:line="64" pos:column="37"/></name><operator pos:line="64" pos:column="37">.<pos:position pos:line="64" pos:column="38"/></operator><name pos:line="64" pos:column="38">ptr<pos:position pos:line="64" pos:column="41"/></name></name> <operator pos:line="64" pos:column="42">=<pos:position pos:line="64" pos:column="43"/></operator> <name pos:line="64" pos:column="44">data<pos:position pos:line="64" pos:column="48"/></name> <operator pos:line="64" pos:column="49">+<pos:position pos:line="64" pos:column="50"/></operator> <name pos:line="64" pos:column="51">RABIN_WINDOW<pos:position pos:line="64" pos:column="63"/></name></expr>;<pos:position pos:line="64" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="65" pos:column="25">entry<pos:position pos:line="65" pos:column="30"/></name><operator pos:line="65" pos:column="30">-&gt;<pos:position pos:line="65" pos:column="35"/></operator><name pos:line="65" pos:column="32">entry<pos:position pos:line="65" pos:column="37"/></name><operator pos:line="65" pos:column="37">.<pos:position pos:line="65" pos:column="38"/></operator><name pos:line="65" pos:column="38">val<pos:position pos:line="65" pos:column="41"/></name></name> <operator pos:line="65" pos:column="42">=<pos:position pos:line="65" pos:column="43"/></operator> <name pos:line="65" pos:column="44">val<pos:position pos:line="65" pos:column="47"/></name></expr>;<pos:position pos:line="65" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="66" pos:column="25">entry<pos:position pos:line="66" pos:column="30"/></name><operator pos:line="66" pos:column="30">-&gt;<pos:position pos:line="66" pos:column="35"/></operator><name pos:line="66" pos:column="32">next<pos:position pos:line="66" pos:column="36"/></name></name> <operator pos:line="66" pos:column="37">=<pos:position pos:line="66" pos:column="38"/></operator> <name><name pos:line="66" pos:column="39">hash<pos:position pos:line="66" pos:column="43"/></name><index pos:line="66" pos:column="43">[<expr><name pos:line="66" pos:column="44">i<pos:position pos:line="66" pos:column="45"/></name></expr>]<pos:position pos:line="66" pos:column="46"/></index></name></expr>;<pos:position pos:line="66" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="67" pos:column="25">hash<pos:position pos:line="67" pos:column="29"/></name><index pos:line="67" pos:column="29">[<expr><name pos:line="67" pos:column="30">i<pos:position pos:line="67" pos:column="31"/></name></expr>]<pos:position pos:line="67" pos:column="32"/></index></name> <operator pos:line="67" pos:column="33">=<pos:position pos:line="67" pos:column="34"/></operator> <name pos:line="67" pos:column="35">entry<pos:position pos:line="67" pos:column="40"/></name><operator pos:line="67" pos:column="40">++<pos:position pos:line="67" pos:column="42"/></operator></expr>;<pos:position pos:line="67" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="68" pos:column="25">hash_count<pos:position pos:line="68" pos:column="35"/></name><index pos:line="68" pos:column="35">[<expr><name pos:line="68" pos:column="36">i<pos:position pos:line="68" pos:column="37"/></name></expr>]<pos:position pos:line="68" pos:column="38"/></index></name><operator pos:line="68" pos:column="38">++<pos:position pos:line="68" pos:column="40"/></operator></expr>;<pos:position pos:line="68" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="69" pos:column="18"/></block></else></if>
	}<pos:position pos:line="70" pos:column="10"/></block></for>

	<comment type="block" pos:line="72" pos:column="9">/*
	 * Determine a limit on the number of entries in the same hash
	 * bucket.  This guards us against pathological data sets causing
	 * really bad hash distribution with most entries in the same hash
	 * bucket that would bring us to O(m*n) computing costs (m and n
	 * corresponding to reference and target buffer sizes).
	 *
	 * Make sure none of the hash buckets has more entries than
	 * we're willing to test.  Otherwise we cull the entry list
	 * uniformly to still preserve a good repartition across
	 * the reference buffer.
	 */</comment>
	<for pos:line="84" pos:column="9">for <control pos:line="84" pos:column="13">(<init><expr><name pos:line="84" pos:column="14">i<pos:position pos:line="84" pos:column="15"/></name> <operator pos:line="84" pos:column="16">=<pos:position pos:line="84" pos:column="17"/></operator> <literal type="number" pos:line="84" pos:column="18">0<pos:position pos:line="84" pos:column="19"/></literal></expr>;<pos:position pos:line="84" pos:column="20"/></init> <condition><expr><name pos:line="84" pos:column="21">i<pos:position pos:line="84" pos:column="22"/></name> <operator pos:line="84" pos:column="23">&lt;<pos:position pos:line="84" pos:column="27"/></operator> <name pos:line="84" pos:column="25">hsize<pos:position pos:line="84" pos:column="30"/></name></expr>;<pos:position pos:line="84" pos:column="31"/></condition> <incr><expr><name pos:line="84" pos:column="32">i<pos:position pos:line="84" pos:column="33"/></name><operator pos:line="84" pos:column="33">++<pos:position pos:line="84" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="84" pos:column="36"/></control> <block pos:line="84" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="85" pos:column="17">int<pos:position pos:line="85" pos:column="20"/></name></type> <name pos:line="85" pos:column="21">acc<pos:position pos:line="85" pos:column="24"/></name></decl>;<pos:position pos:line="85" pos:column="25"/></decl_stmt>

		<if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><name><name pos:line="87" pos:column="21">hash_count<pos:position pos:line="87" pos:column="31"/></name><index pos:line="87" pos:column="31">[<expr><name pos:line="87" pos:column="32">i<pos:position pos:line="87" pos:column="33"/></name></expr>]<pos:position pos:line="87" pos:column="34"/></index></name> <operator pos:line="87" pos:column="35">&lt;=<pos:position pos:line="87" pos:column="40"/></operator> <name pos:line="87" pos:column="38">HASH_LIMIT<pos:position pos:line="87" pos:column="48"/></name></expr>)<pos:position pos:line="87" pos:column="49"/></condition><then pos:line="87" pos:column="49">
			<block type="pseudo"><continue pos:line="88" pos:column="25">continue;<pos:position pos:line="88" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="90" pos:column="17">/* We leave exactly HASH_LIMIT entries in the bucket */</comment>
		<expr_stmt><expr><name pos:line="91" pos:column="17">entries<pos:position pos:line="91" pos:column="24"/></name> <operator pos:line="91" pos:column="25">-=<pos:position pos:line="91" pos:column="27"/></operator> <name><name pos:line="91" pos:column="28">hash_count<pos:position pos:line="91" pos:column="38"/></name><index pos:line="91" pos:column="38">[<expr><name pos:line="91" pos:column="39">i<pos:position pos:line="91" pos:column="40"/></name></expr>]<pos:position pos:line="91" pos:column="41"/></index></name> <operator pos:line="91" pos:column="42">-<pos:position pos:line="91" pos:column="43"/></operator> <name pos:line="91" pos:column="44">HASH_LIMIT<pos:position pos:line="91" pos:column="54"/></name></expr>;<pos:position pos:line="91" pos:column="55"/></expr_stmt>

		<expr_stmt><expr><name pos:line="93" pos:column="17">entry<pos:position pos:line="93" pos:column="22"/></name> <operator pos:line="93" pos:column="23">=<pos:position pos:line="93" pos:column="24"/></operator> <name><name pos:line="93" pos:column="25">hash<pos:position pos:line="93" pos:column="29"/></name><index pos:line="93" pos:column="29">[<expr><name pos:line="93" pos:column="30">i<pos:position pos:line="93" pos:column="31"/></name></expr>]<pos:position pos:line="93" pos:column="32"/></index></name></expr>;<pos:position pos:line="93" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="94" pos:column="17">acc<pos:position pos:line="94" pos:column="20"/></name> <operator pos:line="94" pos:column="21">=<pos:position pos:line="94" pos:column="22"/></operator> <literal type="number" pos:line="94" pos:column="23">0<pos:position pos:line="94" pos:column="24"/></literal></expr>;<pos:position pos:line="94" pos:column="25"/></expr_stmt>

		<comment type="block" pos:line="96" pos:column="17">/*
		 * Assume that this loop is gone through exactly
		 * HASH_LIMIT times and is entered and left with
		 * acc==0.  So the first statement in the loop
		 * contributes (hash_count[i]-HASH_LIMIT)*HASH_LIMIT
		 * to the accumulator, and the inner loop consequently
		 * is run (hash_count[i]-HASH_LIMIT) times, removing
		 * one element from the list each time.  Since acc
		 * balances out to 0 at the final run, the inner loop
		 * body can't be left with entry==NULL.  So we indeed
		 * encounter entry==NULL in the outer loop only.
		 */</comment>
		<do pos:line="108" pos:column="17">do <block pos:line="108" pos:column="20">{
			<expr_stmt><expr><name pos:line="109" pos:column="25">acc<pos:position pos:line="109" pos:column="28"/></name> <operator pos:line="109" pos:column="29">+=<pos:position pos:line="109" pos:column="31"/></operator> <name><name pos:line="109" pos:column="32">hash_count<pos:position pos:line="109" pos:column="42"/></name><index pos:line="109" pos:column="42">[<expr><name pos:line="109" pos:column="43">i<pos:position pos:line="109" pos:column="44"/></name></expr>]<pos:position pos:line="109" pos:column="45"/></index></name> <operator pos:line="109" pos:column="46">-<pos:position pos:line="109" pos:column="47"/></operator> <name pos:line="109" pos:column="48">HASH_LIMIT<pos:position pos:line="109" pos:column="58"/></name></expr>;<pos:position pos:line="109" pos:column="59"/></expr_stmt>
			<if pos:line="110" pos:column="25">if <condition pos:line="110" pos:column="28">(<expr><name pos:line="110" pos:column="29">acc<pos:position pos:line="110" pos:column="32"/></name> <operator pos:line="110" pos:column="33">&gt;<pos:position pos:line="110" pos:column="37"/></operator> <literal type="number" pos:line="110" pos:column="35">0<pos:position pos:line="110" pos:column="36"/></literal></expr>)<pos:position pos:line="110" pos:column="37"/></condition><then pos:line="110" pos:column="37"> <block pos:line="110" pos:column="38">{
				<decl_stmt><decl><type><name><name pos:line="111" pos:column="33">struct<pos:position pos:line="111" pos:column="39"/></name> <name pos:line="111" pos:column="40">unpacked_index_entry<pos:position pos:line="111" pos:column="60"/></name></name> <modifier pos:line="111" pos:column="61">*<pos:position pos:line="111" pos:column="62"/></modifier></type><name pos:line="111" pos:column="62">keep<pos:position pos:line="111" pos:column="66"/></name> <init pos:line="111" pos:column="67">= <expr><name pos:line="111" pos:column="69">entry<pos:position pos:line="111" pos:column="74"/></name></expr></init></decl>;<pos:position pos:line="111" pos:column="75"/></decl_stmt>
				<do pos:line="112" pos:column="33">do <block pos:line="112" pos:column="36">{
					<expr_stmt><expr><name pos:line="113" pos:column="41">entry<pos:position pos:line="113" pos:column="46"/></name> <operator pos:line="113" pos:column="47">=<pos:position pos:line="113" pos:column="48"/></operator> <name><name pos:line="113" pos:column="49">entry<pos:position pos:line="113" pos:column="54"/></name><operator pos:line="113" pos:column="54">-&gt;<pos:position pos:line="113" pos:column="59"/></operator><name pos:line="113" pos:column="56">next<pos:position pos:line="113" pos:column="60"/></name></name></expr>;<pos:position pos:line="113" pos:column="61"/></expr_stmt>
					<expr_stmt><expr><name pos:line="114" pos:column="41">acc<pos:position pos:line="114" pos:column="44"/></name> <operator pos:line="114" pos:column="45">-=<pos:position pos:line="114" pos:column="47"/></operator> <name pos:line="114" pos:column="48">HASH_LIMIT<pos:position pos:line="114" pos:column="58"/></name></expr>;<pos:position pos:line="114" pos:column="59"/></expr_stmt>
				}<pos:position pos:line="115" pos:column="34"/></block> while <condition pos:line="115" pos:column="41">(<expr><name pos:line="115" pos:column="42">acc<pos:position pos:line="115" pos:column="45"/></name> <operator pos:line="115" pos:column="46">&gt;<pos:position pos:line="115" pos:column="50"/></operator> <literal type="number" pos:line="115" pos:column="48">0<pos:position pos:line="115" pos:column="49"/></literal></expr>)<pos:position pos:line="115" pos:column="50"/></condition>;<pos:position pos:line="115" pos:column="51"/></do>
				<expr_stmt><expr><name><name pos:line="116" pos:column="33">keep<pos:position pos:line="116" pos:column="37"/></name><operator pos:line="116" pos:column="37">-&gt;<pos:position pos:line="116" pos:column="42"/></operator><name pos:line="116" pos:column="39">next<pos:position pos:line="116" pos:column="43"/></name></name> <operator pos:line="116" pos:column="44">=<pos:position pos:line="116" pos:column="45"/></operator> <name><name pos:line="116" pos:column="46">entry<pos:position pos:line="116" pos:column="51"/></name><operator pos:line="116" pos:column="51">-&gt;<pos:position pos:line="116" pos:column="56"/></operator><name pos:line="116" pos:column="53">next<pos:position pos:line="116" pos:column="57"/></name></name></expr>;<pos:position pos:line="116" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="117" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="118" pos:column="25">entry<pos:position pos:line="118" pos:column="30"/></name> <operator pos:line="118" pos:column="31">=<pos:position pos:line="118" pos:column="32"/></operator> <name><name pos:line="118" pos:column="33">entry<pos:position pos:line="118" pos:column="38"/></name><operator pos:line="118" pos:column="38">-&gt;<pos:position pos:line="118" pos:column="43"/></operator><name pos:line="118" pos:column="40">next<pos:position pos:line="118" pos:column="44"/></name></name></expr>;<pos:position pos:line="118" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="119" pos:column="18"/></block> while <condition pos:line="119" pos:column="25">(<expr><name pos:line="119" pos:column="26">entry<pos:position pos:line="119" pos:column="31"/></name></expr>)<pos:position pos:line="119" pos:column="32"/></condition>;<pos:position pos:line="119" pos:column="33"/></do>
	}<pos:position pos:line="120" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="121" pos:column="9">free<pos:position pos:line="121" pos:column="13"/></name><argument_list pos:line="121" pos:column="13">(<argument><expr><name pos:line="121" pos:column="14">hash_count<pos:position pos:line="121" pos:column="24"/></name></expr></argument>)<pos:position pos:line="121" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="26"/></expr_stmt>

	<comment type="block" pos:line="123" pos:column="9">/*
	 * Now create the packed index in array form
	 * rather than linked lists.
	 */</comment>
	<expr_stmt><expr><name pos:line="127" pos:column="9">memsize<pos:position pos:line="127" pos:column="16"/></name> <operator pos:line="127" pos:column="17">=<pos:position pos:line="127" pos:column="18"/></operator> <sizeof pos:line="127" pos:column="19">sizeof<argument_list pos:line="127" pos:column="25">(<argument><expr><operator pos:line="127" pos:column="26">*<pos:position pos:line="127" pos:column="27"/></operator><name pos:line="127" pos:column="27">index<pos:position pos:line="127" pos:column="32"/></name></expr></argument>)<pos:position pos:line="127" pos:column="33"/></argument_list></sizeof>
		<operator pos:line="128" pos:column="17">+<pos:position pos:line="128" pos:column="18"/></operator> <sizeof pos:line="128" pos:column="19">sizeof<argument_list pos:line="128" pos:column="25">(<argument><expr><operator pos:line="128" pos:column="26">*<pos:position pos:line="128" pos:column="27"/></operator><name pos:line="128" pos:column="27">packed_hash<pos:position pos:line="128" pos:column="38"/></name></expr></argument>)<pos:position pos:line="128" pos:column="39"/></argument_list></sizeof> <operator pos:line="128" pos:column="40">*<pos:position pos:line="128" pos:column="41"/></operator> <operator pos:line="128" pos:column="42">(<pos:position pos:line="128" pos:column="43"/></operator><name pos:line="128" pos:column="43">hsize<pos:position pos:line="128" pos:column="48"/></name><operator pos:line="128" pos:column="48">+<pos:position pos:line="128" pos:column="49"/></operator><literal type="number" pos:line="128" pos:column="49">1<pos:position pos:line="128" pos:column="50"/></literal><operator pos:line="128" pos:column="50">)<pos:position pos:line="128" pos:column="51"/></operator>
		<operator pos:line="129" pos:column="17">+<pos:position pos:line="129" pos:column="18"/></operator> <sizeof pos:line="129" pos:column="19">sizeof<argument_list pos:line="129" pos:column="25">(<argument><expr><operator pos:line="129" pos:column="26">*<pos:position pos:line="129" pos:column="27"/></operator><name pos:line="129" pos:column="27">packed_entry<pos:position pos:line="129" pos:column="39"/></name></expr></argument>)<pos:position pos:line="129" pos:column="40"/></argument_list></sizeof> <operator pos:line="129" pos:column="41">*<pos:position pos:line="129" pos:column="42"/></operator> <name pos:line="129" pos:column="43">entries<pos:position pos:line="129" pos:column="50"/></name></expr>;<pos:position pos:line="129" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name pos:line="130" pos:column="9">mem<pos:position pos:line="130" pos:column="12"/></name> <operator pos:line="130" pos:column="13">=<pos:position pos:line="130" pos:column="14"/></operator> <call><name pos:line="130" pos:column="15">malloc<pos:position pos:line="130" pos:column="21"/></name><argument_list pos:line="130" pos:column="21">(<argument><expr><name pos:line="130" pos:column="22">memsize<pos:position pos:line="130" pos:column="29"/></name></expr></argument>)<pos:position pos:line="130" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="31"/></expr_stmt>
	<if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><operator pos:line="131" pos:column="13">!<pos:position pos:line="131" pos:column="14"/></operator><name pos:line="131" pos:column="14">mem<pos:position pos:line="131" pos:column="17"/></name></expr>)<pos:position pos:line="131" pos:column="18"/></condition><then pos:line="131" pos:column="18"> <block pos:line="131" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="132" pos:column="17">free<pos:position pos:line="132" pos:column="21"/></name><argument_list pos:line="132" pos:column="21">(<argument><expr><name pos:line="132" pos:column="22">hash<pos:position pos:line="132" pos:column="26"/></name></expr></argument>)<pos:position pos:line="132" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="28"/></expr_stmt>
		<return pos:line="133" pos:column="17">return <expr><name pos:line="133" pos:column="24">NULL<pos:position pos:line="133" pos:column="28"/></name></expr>;<pos:position pos:line="133" pos:column="29"/></return>
	}<pos:position pos:line="134" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="136" pos:column="9">index<pos:position pos:line="136" pos:column="14"/></name> <operator pos:line="136" pos:column="15">=<pos:position pos:line="136" pos:column="16"/></operator> <name pos:line="136" pos:column="17">mem<pos:position pos:line="136" pos:column="20"/></name></expr>;<pos:position pos:line="136" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="137" pos:column="9">index<pos:position pos:line="137" pos:column="14"/></name><operator pos:line="137" pos:column="14">-&gt;<pos:position pos:line="137" pos:column="19"/></operator><name pos:line="137" pos:column="16">memsize<pos:position pos:line="137" pos:column="23"/></name></name> <operator pos:line="137" pos:column="24">=<pos:position pos:line="137" pos:column="25"/></operator> <name pos:line="137" pos:column="26">memsize<pos:position pos:line="137" pos:column="33"/></name></expr>;<pos:position pos:line="137" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="138" pos:column="9">index<pos:position pos:line="138" pos:column="14"/></name><operator pos:line="138" pos:column="14">-&gt;<pos:position pos:line="138" pos:column="19"/></operator><name pos:line="138" pos:column="16">src_buf<pos:position pos:line="138" pos:column="23"/></name></name> <operator pos:line="138" pos:column="24">=<pos:position pos:line="138" pos:column="25"/></operator> <name pos:line="138" pos:column="26">buf<pos:position pos:line="138" pos:column="29"/></name></expr>;<pos:position pos:line="138" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="139" pos:column="9">index<pos:position pos:line="139" pos:column="14"/></name><operator pos:line="139" pos:column="14">-&gt;<pos:position pos:line="139" pos:column="19"/></operator><name pos:line="139" pos:column="16">src_size<pos:position pos:line="139" pos:column="24"/></name></name> <operator pos:line="139" pos:column="25">=<pos:position pos:line="139" pos:column="26"/></operator> <name pos:line="139" pos:column="27">bufsize<pos:position pos:line="139" pos:column="34"/></name></expr>;<pos:position pos:line="139" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="140" pos:column="9">index<pos:position pos:line="140" pos:column="14"/></name><operator pos:line="140" pos:column="14">-&gt;<pos:position pos:line="140" pos:column="19"/></operator><name pos:line="140" pos:column="16">hash_mask<pos:position pos:line="140" pos:column="25"/></name></name> <operator pos:line="140" pos:column="26">=<pos:position pos:line="140" pos:column="27"/></operator> <name pos:line="140" pos:column="28">hmask<pos:position pos:line="140" pos:column="33"/></name></expr>;<pos:position pos:line="140" pos:column="34"/></expr_stmt>

	<expr_stmt><expr><name pos:line="142" pos:column="9">mem<pos:position pos:line="142" pos:column="12"/></name> <operator pos:line="142" pos:column="13">=<pos:position pos:line="142" pos:column="14"/></operator> <name><name pos:line="142" pos:column="15">index<pos:position pos:line="142" pos:column="20"/></name><operator pos:line="142" pos:column="20">-&gt;<pos:position pos:line="142" pos:column="25"/></operator><name pos:line="142" pos:column="22">hash<pos:position pos:line="142" pos:column="26"/></name></name></expr>;<pos:position pos:line="142" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="143" pos:column="9">packed_hash<pos:position pos:line="143" pos:column="20"/></name> <operator pos:line="143" pos:column="21">=<pos:position pos:line="143" pos:column="22"/></operator> <name pos:line="143" pos:column="23">mem<pos:position pos:line="143" pos:column="26"/></name></expr>;<pos:position pos:line="143" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="144" pos:column="9">mem<pos:position pos:line="144" pos:column="12"/></name> <operator pos:line="144" pos:column="13">=<pos:position pos:line="144" pos:column="14"/></operator> <name pos:line="144" pos:column="15">packed_hash<pos:position pos:line="144" pos:column="26"/></name> <operator pos:line="144" pos:column="27">+<pos:position pos:line="144" pos:column="28"/></operator> <operator pos:line="144" pos:column="29">(<pos:position pos:line="144" pos:column="30"/></operator><name pos:line="144" pos:column="30">hsize<pos:position pos:line="144" pos:column="35"/></name><operator pos:line="144" pos:column="35">+<pos:position pos:line="144" pos:column="36"/></operator><literal type="number" pos:line="144" pos:column="36">1<pos:position pos:line="144" pos:column="37"/></literal><operator pos:line="144" pos:column="37">)<pos:position pos:line="144" pos:column="38"/></operator></expr>;<pos:position pos:line="144" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name pos:line="145" pos:column="9">packed_entry<pos:position pos:line="145" pos:column="21"/></name> <operator pos:line="145" pos:column="22">=<pos:position pos:line="145" pos:column="23"/></operator> <name pos:line="145" pos:column="24">mem<pos:position pos:line="145" pos:column="27"/></name></expr>;<pos:position pos:line="145" pos:column="28"/></expr_stmt>

	<for pos:line="147" pos:column="9">for <control pos:line="147" pos:column="13">(<init><expr><name pos:line="147" pos:column="14">i<pos:position pos:line="147" pos:column="15"/></name> <operator pos:line="147" pos:column="16">=<pos:position pos:line="147" pos:column="17"/></operator> <literal type="number" pos:line="147" pos:column="18">0<pos:position pos:line="147" pos:column="19"/></literal></expr>;<pos:position pos:line="147" pos:column="20"/></init> <condition><expr><name pos:line="147" pos:column="21">i<pos:position pos:line="147" pos:column="22"/></name> <operator pos:line="147" pos:column="23">&lt;<pos:position pos:line="147" pos:column="27"/></operator> <name pos:line="147" pos:column="25">hsize<pos:position pos:line="147" pos:column="30"/></name></expr>;<pos:position pos:line="147" pos:column="31"/></condition> <incr><expr><name pos:line="147" pos:column="32">i<pos:position pos:line="147" pos:column="33"/></name><operator pos:line="147" pos:column="33">++<pos:position pos:line="147" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="147" pos:column="36"/></control> <block pos:line="147" pos:column="37">{
		<comment type="block" pos:line="148" pos:column="17">/*
		 * Coalesce all entries belonging to one linked list
		 * into consecutive array entries.
		 */</comment>
		<expr_stmt><expr><name><name pos:line="152" pos:column="17">packed_hash<pos:position pos:line="152" pos:column="28"/></name><index pos:line="152" pos:column="28">[<expr><macro><name pos:line="152" pos:column="29">i<pos:position pos:line="152" pos:column="30"/></name></macro></expr></index></name></expr></expr_stmt></block></for></block></function></unit>
