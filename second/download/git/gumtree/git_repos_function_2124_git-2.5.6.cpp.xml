<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2124_git-2.5.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">quote_c_style_counted<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">name<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">ssize_t<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">maxlen<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
                                    <parameter><decl><type><name><name pos:line="2" pos:column="37">struct<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">strbuf<pos:position pos:line="2" pos:column="50"/></name></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">sb<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">FILE<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">fp<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">int<pos:position pos:line="2" pos:column="69"/></name></type> <name pos:line="2" pos:column="70">no_dq<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:undef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">undef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">EMIT<pos:position pos:line="4" pos:column="12"/></name></cpp:undef>
<cpp:define pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">define<pos:position pos:line="5" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="5" pos:column="9">EMIT<pos:position pos:line="5" pos:column="13"/></name><parameter_list pos:line="5" pos:column="13">(<parameter><type><name pos:line="5" pos:column="14">c<pos:position pos:line="5" pos:column="15"/></name></type></parameter>)<pos:position pos:line="5" pos:column="16"/></parameter_list></cpp:macro>                                 \
	<cpp:value pos:line="6" pos:column="9">do {                                        \
		if (sb) strbuf_addch(sb, (c));          \
		if (fp) fputc((c), fp);                 \
		count++;                                \
	} while (0)<pos:position pos:line="10" pos:column="20"/></cpp:value></cpp:define>
<cpp:define pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">define<pos:position pos:line="11" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="11" pos:column="9">EMITBUF<pos:position pos:line="11" pos:column="16"/></name><parameter_list pos:line="11" pos:column="16">(<parameter><type><name pos:line="11" pos:column="17">s<pos:position pos:line="11" pos:column="18"/></name></type></parameter>, <parameter><type><name pos:line="11" pos:column="20">l<pos:position pos:line="11" pos:column="21"/></name></type></parameter>)<pos:position pos:line="11" pos:column="22"/></parameter_list></cpp:macro>                           \
	<cpp:value pos:line="12" pos:column="9">do {                                        \
		if (sb) strbuf_add(sb, (s), (l));       \
		if (fp) fwrite((s), (l), 1, fp);        \
		count += (l);                           \
	} while (0)<pos:position pos:line="16" pos:column="20"/></cpp:value></cpp:define>

	<decl_stmt><decl><type><name pos:line="18" pos:column="9">size_t<pos:position pos:line="18" pos:column="15"/></name></type> <name pos:line="18" pos:column="16">len<pos:position pos:line="18" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="21">count<pos:position pos:line="18" pos:column="26"/></name> <init pos:line="18" pos:column="27">= <expr><literal type="number" pos:line="18" pos:column="29">0<pos:position pos:line="18" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="19" pos:column="9">const<pos:position pos:line="19" pos:column="14"/></specifier> <name pos:line="19" pos:column="15">char<pos:position pos:line="19" pos:column="19"/></name> <modifier pos:line="19" pos:column="20">*<pos:position pos:line="19" pos:column="21"/></modifier></type><name pos:line="19" pos:column="21">p<pos:position pos:line="19" pos:column="22"/></name> <init pos:line="19" pos:column="23">= <expr><name pos:line="19" pos:column="25">name<pos:position pos:line="19" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="30"/></decl_stmt>

	<for pos:line="21" pos:column="9">for <control pos:line="21" pos:column="13">(<init pos:line="21" pos:column="14">;<pos:position pos:line="21" pos:column="15"/></init><condition pos:line="21" pos:column="15">;<pos:position pos:line="21" pos:column="16"/></condition><incr/>)<pos:position pos:line="21" pos:column="17"/></control> <block pos:line="21" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">int<pos:position pos:line="22" pos:column="20"/></name></type> <name pos:line="22" pos:column="21">ch<pos:position pos:line="22" pos:column="23"/></name></decl>;<pos:position pos:line="22" pos:column="24"/></decl_stmt>

		<expr_stmt><expr><name pos:line="24" pos:column="17">len<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <call><name pos:line="24" pos:column="23">next_quote_pos<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><name pos:line="24" pos:column="38">p<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">maxlen<pos:position pos:line="24" pos:column="47"/></name></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">len<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">==<pos:position pos:line="25" pos:column="27"/></operator> <name pos:line="25" pos:column="28">maxlen<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">||<pos:position pos:line="25" pos:column="37"/></operator> <operator pos:line="25" pos:column="38">(<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="39">maxlen<pos:position pos:line="25" pos:column="45"/></name> <operator pos:line="25" pos:column="46">&lt;<pos:position pos:line="25" pos:column="50"/></operator> <literal type="number" pos:line="25" pos:column="48">0<pos:position pos:line="25" pos:column="49"/></literal> <operator pos:line="25" pos:column="50">&amp;&amp;<pos:position pos:line="25" pos:column="60"/></operator> <operator pos:line="25" pos:column="53">!<pos:position pos:line="25" pos:column="54"/></operator><name><name pos:line="25" pos:column="54">p<pos:position pos:line="25" pos:column="55"/></name><index pos:line="25" pos:column="55">[<expr><name pos:line="25" pos:column="56">len<pos:position pos:line="25" pos:column="59"/></name></expr>]<pos:position pos:line="25" pos:column="60"/></index></name><operator pos:line="25" pos:column="60">)<pos:position pos:line="25" pos:column="61"/></operator></expr>)<pos:position pos:line="25" pos:column="62"/></condition><then pos:line="25" pos:column="62">
			<block type="pseudo"><break pos:line="26" pos:column="25">break;<pos:position pos:line="26" pos:column="31"/></break></block></then></if>

		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><operator pos:line="28" pos:column="21">!<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">no_dq<pos:position pos:line="28" pos:column="27"/></name> <operator pos:line="28" pos:column="28">&amp;&amp;<pos:position pos:line="28" pos:column="38"/></operator> <name pos:line="28" pos:column="31">p<pos:position pos:line="28" pos:column="32"/></name> <operator pos:line="28" pos:column="33">==<pos:position pos:line="28" pos:column="35"/></operator> <name pos:line="28" pos:column="36">name<pos:position pos:line="28" pos:column="40"/></name></expr>)<pos:position pos:line="28" pos:column="41"/></condition><then pos:line="28" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">EMIT<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><literal type="char" pos:line="29" pos:column="30">'"'<pos:position pos:line="29" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="31" pos:column="17">EMITBUF<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">p<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="28">len<pos:position pos:line="31" pos:column="31"/></name></expr></argument>)<pos:position pos:line="31" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">EMIT<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><literal type="char" pos:line="32" pos:column="22">'\\'<pos:position pos:line="32" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">p<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">+=<pos:position pos:line="33" pos:column="21"/></operator> <name pos:line="33" pos:column="22">len<pos:position pos:line="33" pos:column="25"/></name></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">ch<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">=<pos:position pos:line="34" pos:column="21"/></operator> <operator pos:line="34" pos:column="22">(<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">unsigned<pos:position pos:line="34" pos:column="31"/></name> <name pos:line="34" pos:column="32">char<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">)<pos:position pos:line="34" pos:column="37"/></operator><operator pos:line="34" pos:column="37">*<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="38">p<pos:position pos:line="34" pos:column="39"/></name><operator pos:line="34" pos:column="39">++<pos:position pos:line="34" pos:column="41"/></operator></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">maxlen<pos:position pos:line="35" pos:column="27"/></name> <operator pos:line="35" pos:column="28">&gt;=<pos:position pos:line="35" pos:column="33"/></operator> <literal type="number" pos:line="35" pos:column="31">0<pos:position pos:line="35" pos:column="32"/></literal></expr>)<pos:position pos:line="35" pos:column="33"/></condition><then pos:line="35" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="25">maxlen<pos:position pos:line="36" pos:column="31"/></name> <operator pos:line="36" pos:column="32">-=<pos:position pos:line="36" pos:column="34"/></operator> <name pos:line="36" pos:column="35">len<pos:position pos:line="36" pos:column="38"/></name> <operator pos:line="36" pos:column="39">+<pos:position pos:line="36" pos:column="40"/></operator> <literal type="number" pos:line="36" pos:column="41">1<pos:position pos:line="36" pos:column="42"/></literal></expr>;<pos:position pos:line="36" pos:column="43"/></expr_stmt></block></then></if>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name><name pos:line="37" pos:column="21">sq_lookup<pos:position pos:line="37" pos:column="30"/></name><index pos:line="37" pos:column="30">[<expr><name pos:line="37" pos:column="31">ch<pos:position pos:line="37" pos:column="33"/></name></expr>]<pos:position pos:line="37" pos:column="34"/></index></name> <operator pos:line="37" pos:column="35">&gt;=<pos:position pos:line="37" pos:column="40"/></operator> <literal type="char" pos:line="37" pos:column="38">' '<pos:position pos:line="37" pos:column="41"/></literal></expr>)<pos:position pos:line="37" pos:column="42"/></condition><then pos:line="37" pos:column="42"> <block pos:line="37" pos:column="43">{
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">EMIT<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><name><name pos:line="38" pos:column="30">sq_lookup<pos:position pos:line="38" pos:column="39"/></name><index pos:line="38" pos:column="39">[<expr><name pos:line="38" pos:column="40">ch<pos:position pos:line="38" pos:column="42"/></name></expr>]<pos:position pos:line="38" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="39" pos:column="18"/></block></then> <else pos:line="39" pos:column="19">else <block pos:line="39" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">EMIT<pos:position pos:line="40" pos:column="29"/></name><argument_list pos:line="40" pos:column="29">(<argument><expr><operator pos:line="40" pos:column="30">(<pos:position pos:line="40" pos:column="31"/></operator><operator pos:line="40" pos:column="31">(<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="32">ch<pos:position pos:line="40" pos:column="34"/></name> <operator pos:line="40" pos:column="35">&gt;&gt;<pos:position pos:line="40" pos:column="40"/></operator> <literal type="number" pos:line="40" pos:column="38">6<pos:position pos:line="40" pos:column="39"/></literal><operator pos:line="40" pos:column="39">)<pos:position pos:line="40" pos:column="40"/></operator> <operator pos:line="40" pos:column="41">&amp;<pos:position pos:line="40" pos:column="46"/></operator> <literal type="number" pos:line="40" pos:column="43">03<pos:position pos:line="40" pos:column="45"/></literal><operator pos:line="40" pos:column="45">)<pos:position pos:line="40" pos:column="46"/></operator> <operator pos:line="40" pos:column="47">+<pos:position pos:line="40" pos:column="48"/></operator> <literal type="char" pos:line="40" pos:column="49">'0'<pos:position pos:line="40" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">EMIT<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><operator pos:line="41" pos:column="30">(<pos:position pos:line="41" pos:column="31"/></operator><operator pos:line="41" pos:column="31">(<pos:position pos:line="41" pos:column="32"/></operator><name pos:line="41" pos:column="32">ch<pos:position pos:line="41" pos:column="34"/></name> <operator pos:line="41" pos:column="35">&gt;&gt;<pos:position pos:line="41" pos:column="40"/></operator> <literal type="number" pos:line="41" pos:column="38">3<pos:position pos:line="41" pos:column="39"/></literal><operator pos:line="41" pos:column="39">)<pos:position pos:line="41" pos:column="40"/></operator> <operator pos:line="41" pos:column="41">&amp;<pos:position pos:line="41" pos:column="46"/></operator> <literal type="number" pos:line="41" pos:column="43">07<pos:position pos:line="41" pos:column="45"/></literal><operator pos:line="41" pos:column="45">)<pos:position pos:line="41" pos:column="46"/></operator> <operator pos:line="41" pos:column="47">+<pos:position pos:line="41" pos:column="48"/></operator> <literal type="char" pos:line="41" pos:column="49">'0'<pos:position pos:line="41" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">EMIT<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><operator pos:line="42" pos:column="30">(<pos:position pos:line="42" pos:column="31"/></operator><operator pos:line="42" pos:column="31">(<pos:position pos:line="42" pos:column="32"/></operator><name pos:line="42" pos:column="32">ch<pos:position pos:line="42" pos:column="34"/></name> <operator pos:line="42" pos:column="35">&gt;&gt;<pos:position pos:line="42" pos:column="40"/></operator> <literal type="number" pos:line="42" pos:column="38">0<pos:position pos:line="42" pos:column="39"/></literal><operator pos:line="42" pos:column="39">)<pos:position pos:line="42" pos:column="40"/></operator> <operator pos:line="42" pos:column="41">&amp;<pos:position pos:line="42" pos:column="46"/></operator> <literal type="number" pos:line="42" pos:column="43">07<pos:position pos:line="42" pos:column="45"/></literal><operator pos:line="42" pos:column="45">)<pos:position pos:line="42" pos:column="46"/></operator> <operator pos:line="42" pos:column="47">+<pos:position pos:line="42" pos:column="48"/></operator> <literal type="char" pos:line="42" pos:column="49">'0'<pos:position pos:line="42" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="43" pos:column="18"/></block></else></if>
	}<pos:position pos:line="44" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="46" pos:column="9">EMITBUF<pos:position pos:line="46" pos:column="16"/></name><argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">p<pos:position pos:line="46" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="20">len<pos:position pos:line="46" pos:column="23"/></name></expr></argument>)<pos:position pos:line="46" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="25"/></expr_stmt>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">p<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">==<pos:position pos:line="47" pos:column="17"/></operator> <name pos:line="47" pos:column="18">name<pos:position pos:line="47" pos:column="22"/></name></expr>)<pos:position pos:line="47" pos:column="23"/></condition><then pos:line="47" pos:column="23">   <comment type="block" pos:line="47" pos:column="26">/* no ending quote needed */</comment>
		<block type="pseudo"><return pos:line="48" pos:column="17">return <expr><literal type="number" pos:line="48" pos:column="24">0<pos:position pos:line="48" pos:column="25"/></literal></expr>;<pos:position pos:line="48" pos:column="26"/></return></block></then></if>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">!<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">no_dq<pos:position pos:line="50" pos:column="19"/></name></expr>)<pos:position pos:line="50" pos:column="20"/></condition><then pos:line="50" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="17">EMIT<pos:position pos:line="51" pos:column="21"/></name><argument_list pos:line="51" pos:column="21">(<argument><expr><literal type="char" pos:line="51" pos:column="22">'"'<pos:position pos:line="51" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="27"/></expr_stmt></block></then></if>
	<return pos:line="52" pos:column="9">return <expr><name pos:line="52" pos:column="16">count<pos:position pos:line="52" pos:column="21"/></name></expr>;<pos:position pos:line="52" pos:column="22"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
