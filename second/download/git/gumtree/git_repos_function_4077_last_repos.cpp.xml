<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4077_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fetch_with_import<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">transport<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">transport<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">nr_heads<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="44">struct<pos:position pos:line="2" pos:column="50"/></name> <name pos:line="2" pos:column="51">ref<pos:position pos:line="2" pos:column="54"/></name></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier><modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">to_fetch<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">child_process<pos:position pos:line="4" pos:column="29"/></name></name></type> <name pos:line="4" pos:column="30">fastimport<pos:position pos:line="4" pos:column="40"/></name></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">helper_data<pos:position pos:line="5" pos:column="27"/></name></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">data<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><name><name pos:line="5" pos:column="36">transport<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">-&gt;<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="47">data<pos:position pos:line="5" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">ref<pos:position pos:line="7" pos:column="19"/></name></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">posn<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">buf<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name pos:line="8" pos:column="29">STRBUF_INIT<pos:position pos:line="8" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">get_helper<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">transport<pos:position pos:line="10" pos:column="29"/></name></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">get_importer<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">transport<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="37">&amp;<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="38">fastimport<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="50"/></condition><then pos:line="12" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">die<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><literal type="string" pos:line="13" pos:column="21">"Couldn't run fast-import"<pos:position pos:line="13" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt></block></then></if>

	<for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init><expr><name pos:line="15" pos:column="14">i<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>;<pos:position pos:line="15" pos:column="20"/></init> <condition><expr><name pos:line="15" pos:column="21">i<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&lt;<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="25">nr_heads<pos:position pos:line="15" pos:column="33"/></name></expr>;<pos:position pos:line="15" pos:column="34"/></condition> <incr><expr><name pos:line="15" pos:column="35">i<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">++<pos:position pos:line="15" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="39"/></control> <block pos:line="15" pos:column="40">{
		<expr_stmt><expr><name pos:line="16" pos:column="17">posn<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <name><name pos:line="16" pos:column="24">to_fetch<pos:position pos:line="16" pos:column="32"/></name><index pos:line="16" pos:column="32">[<expr><name pos:line="16" pos:column="33">i<pos:position pos:line="16" pos:column="34"/></name></expr>]<pos:position pos:line="16" pos:column="35"/></index></name></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">posn<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">status<pos:position pos:line="17" pos:column="33"/></name></name> <operator pos:line="17" pos:column="34">&amp;<pos:position pos:line="17" pos:column="39"/></operator> <name pos:line="17" pos:column="36">REF_STATUS_UPTODATE<pos:position pos:line="17" pos:column="55"/></name></expr>)<pos:position pos:line="17" pos:column="56"/></condition><then pos:line="17" pos:column="56">
			<block type="pseudo"><continue pos:line="18" pos:column="25">continue;<pos:position pos:line="18" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="20" pos:column="17">strbuf_addf<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><operator pos:line="20" pos:column="29">&amp;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="30">buf<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="35">"import %s\n"<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>,
			    <argument><expr><ternary><condition><expr><name><name pos:line="21" pos:column="29">posn<pos:position pos:line="21" pos:column="33"/></name><operator pos:line="21" pos:column="33">-&gt;<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="35">symref<pos:position pos:line="21" pos:column="41"/></name></name></expr> ?<pos:position pos:line="21" pos:column="43"/></condition><then pos:line="21" pos:column="43"> <expr><name><name pos:line="21" pos:column="44">posn<pos:position pos:line="21" pos:column="48"/></name><operator pos:line="21" pos:column="48">-&gt;<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="50">symref<pos:position pos:line="21" pos:column="56"/></name></name></expr> <pos:position pos:line="21" pos:column="57"/></then><else pos:line="21" pos:column="57">: <expr><name><name pos:line="21" pos:column="59">posn<pos:position pos:line="21" pos:column="63"/></name><operator pos:line="21" pos:column="63">-&gt;<pos:position pos:line="21" pos:column="68"/></operator><name pos:line="21" pos:column="65">name<pos:position pos:line="21" pos:column="69"/></name></name></expr></else></ternary></expr></argument>)<pos:position pos:line="21" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="71"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">sendline<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">data<pos:position pos:line="22" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="32">&amp;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="33">buf<pos:position pos:line="22" pos:column="36"/></name></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">strbuf_reset<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><operator pos:line="23" pos:column="30">&amp;<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="31">buf<pos:position pos:line="23" pos:column="34"/></name></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="26" pos:column="9">write_constant<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name><name pos:line="26" pos:column="24">data<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">-&gt;<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="30">helper<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">-&gt;<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="38">in<pos:position pos:line="26" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="42">"\n"<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>
	<comment type="block" pos:line="27" pos:column="9">/*
	 * remote-helpers that advertise the bidi-import capability are required to
	 * buffer the complete batch of import commands until this newline before
	 * sending data to fast-import.
	 * These helpers read back data from fast-import on their stdin, which could
	 * be mixed with import commands, otherwise.
	 */</comment>

	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><call><name pos:line="35" pos:column="13">finish_command<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><operator pos:line="35" pos:column="28">&amp;<pos:position pos:line="35" pos:column="33"/></operator><name pos:line="35" pos:column="29">fastimport<pos:position pos:line="35" pos:column="39"/></name></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="41"/></condition><then pos:line="35" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="17">die<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><literal type="string" pos:line="36" pos:column="21">"Error while running fast-import"<pos:position pos:line="36" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="56"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="38" pos:column="9">/*
	 * The fast-import stream of a remote helper that advertises
	 * the "refspec" capability writes to the refs named after the
	 * right hand side of the first refspec matching each ref we
	 * were fetching.
	 *
	 * (If no "refspec" capability was specified, for historical
	 * reasons we default to the equivalent of *:*.)
	 *
	 * Store the result in to_fetch[i].old_sha1.  Callers such
	 * as "git fetch" can use the value to write feedback to the
	 * terminal, populate FETCH_HEAD, and determine what new value
	 * should be written to peer_ref if the update is a
	 * fast-forward or this is a forced update.
	 */</comment>
	<for pos:line="53" pos:column="9">for <control pos:line="53" pos:column="13">(<init><expr><name pos:line="53" pos:column="14">i<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <literal type="number" pos:line="53" pos:column="18">0<pos:position pos:line="53" pos:column="19"/></literal></expr>;<pos:position pos:line="53" pos:column="20"/></init> <condition><expr><name pos:line="53" pos:column="21">i<pos:position pos:line="53" pos:column="22"/></name> <operator pos:line="53" pos:column="23">&lt;<pos:position pos:line="53" pos:column="27"/></operator> <name pos:line="53" pos:column="25">nr_heads<pos:position pos:line="53" pos:column="33"/></name></expr>;<pos:position pos:line="53" pos:column="34"/></condition> <incr><expr><name pos:line="53" pos:column="35">i<pos:position pos:line="53" pos:column="36"/></name><operator pos:line="53" pos:column="36">++<pos:position pos:line="53" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="53" pos:column="39"/></control> <block pos:line="53" pos:column="40">{
		<macro><name pos:line="54" pos:column="17">char<pos:position pos:line="54" pos:column="21"/></name></macro> <expr_stmt><expr><operator pos:line="54" pos:column="22">*<pos:position pos:line="54" pos:column="23"/></operator><specifier pos:line="54" pos:column="23">private<pos:position pos:line="54" pos:column="30"/></specifier></expr><operator pos:line="54" pos:column="30">,<pos:position pos:line="54" pos:column="31"/></operator> <expr><operator pos:line="54" pos:column="32">*<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="33">name<pos:position pos:line="54" pos:column="37"/></name></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="55" pos:column="17">posn<pos:position pos:line="55" pos:column="21"/></name> <operator pos:line="55" pos:column="22">=<pos:position pos:line="55" pos:column="23"/></operator> <name><name pos:line="55" pos:column="24">to_fetch<pos:position pos:line="55" pos:column="32"/></name><index pos:line="55" pos:column="32">[<expr><name pos:line="55" pos:column="33">i<pos:position pos:line="55" pos:column="34"/></name></expr>]<pos:position pos:line="55" pos:column="35"/></index></name></expr>;<pos:position pos:line="55" pos:column="36"/></expr_stmt>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name><name pos:line="56" pos:column="21">posn<pos:position pos:line="56" pos:column="25"/></name><operator pos:line="56" pos:column="25">-&gt;<pos:position pos:line="56" pos:column="30"/></operator><name pos:line="56" pos:column="27">status<pos:position pos:line="56" pos:column="33"/></name></name> <operator pos:line="56" pos:column="34">&amp;<pos:position pos:line="56" pos:column="39"/></operator> <name pos:line="56" pos:column="36">REF_STATUS_UPTODATE<pos:position pos:line="56" pos:column="55"/></name></expr>)<pos:position pos:line="56" pos:column="56"/></condition><then pos:line="56" pos:column="56">
			<block type="pseudo"><continue pos:line="57" pos:column="25">continue;<pos:position pos:line="57" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="58" pos:column="17">name<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <ternary><condition><expr><name><name pos:line="58" pos:column="24">posn<pos:position pos:line="58" pos:column="28"/></name><operator pos:line="58" pos:column="28">-&gt;<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="30">symref<pos:position pos:line="58" pos:column="36"/></name></name></expr> ?<pos:position pos:line="58" pos:column="38"/></condition><then pos:line="58" pos:column="38"> <expr><name><name pos:line="58" pos:column="39">posn<pos:position pos:line="58" pos:column="43"/></name><operator pos:line="58" pos:column="43">-&gt;<pos:position pos:line="58" pos:column="48"/></operator><name pos:line="58" pos:column="45">symref<pos:position pos:line="58" pos:column="51"/></name></name></expr> <pos:position pos:line="58" pos:column="52"/></then><else pos:line="58" pos:column="52">: <expr><name><name pos:line="58" pos:column="54">posn<pos:position pos:line="58" pos:column="58"/></name><operator pos:line="58" pos:column="58">-&gt;<pos:position pos:line="58" pos:column="63"/></operator><name pos:line="58" pos:column="60">name<pos:position pos:line="58" pos:column="64"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="58" pos:column="65"/></expr_stmt>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name><name pos:line="59" pos:column="21">data<pos:position pos:line="59" pos:column="25"/></name><operator pos:line="59" pos:column="25">-&gt;<pos:position pos:line="59" pos:column="30"/></operator><name pos:line="59" pos:column="27">refspecs<pos:position pos:line="59" pos:column="35"/></name></name></expr>)<pos:position pos:line="59" pos:column="36"/></condition><then pos:line="59" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><specifier pos:line="60" pos:column="25">private<pos:position pos:line="60" pos:column="32"/></specifier> <operator pos:line="60" pos:column="33">=<pos:position pos:line="60" pos:column="34"/></operator> <call><name pos:line="60" pos:column="35">apply_refspecs<pos:position pos:line="60" pos:column="49"/></name><argument_list pos:line="60" pos:column="49">(<argument><expr><name><name pos:line="60" pos:column="50">data<pos:position pos:line="60" pos:column="54"/></name><operator pos:line="60" pos:column="54">-&gt;<pos:position pos:line="60" pos:column="59"/></operator><name pos:line="60" pos:column="56">refspecs<pos:position pos:line="60" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="66">data<pos:position pos:line="60" pos:column="70"/></name><operator pos:line="60" pos:column="70">-&gt;<pos:position pos:line="60" pos:column="75"/></operator><name pos:line="60" pos:column="72">refspec_nr<pos:position pos:line="60" pos:column="82"/></name></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="84">name<pos:position pos:line="60" pos:column="88"/></name></expr></argument>)<pos:position pos:line="60" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="90"/></expr_stmt></block></then>
		<else pos:line="61" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><specifier pos:line="62" pos:column="25">private<pos:position pos:line="62" pos:column="32"/></specifier> <operator pos:line="62" pos:column="33">=<pos:position pos:line="62" pos:column="34"/></operator> <call><name pos:line="62" pos:column="35">xstrdup<pos:position pos:line="62" pos:column="42"/></name><argument_list pos:line="62" pos:column="42">(<argument><expr><name pos:line="62" pos:column="43">name<pos:position pos:line="62" pos:column="47"/></name></expr></argument>)<pos:position pos:line="62" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="49"/></expr_stmt></block></else></if>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><specifier pos:line="63" pos:column="21">private<pos:position pos:line="63" pos:column="28"/></specifier></expr>)<pos:position pos:line="63" pos:column="29"/></condition><then pos:line="63" pos:column="29"> <block pos:line="63" pos:column="30">{
			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><call><name pos:line="64" pos:column="29">read_ref<pos:position pos:line="64" pos:column="37"/></name><argument_list pos:line="64" pos:column="37">(<argument><expr><specifier pos:line="64" pos:column="38">private<pos:position pos:line="64" pos:column="45"/></specifier></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="47">posn<pos:position pos:line="64" pos:column="51"/></name><operator pos:line="64" pos:column="51">-&gt;<pos:position pos:line="64" pos:column="56"/></operator><name pos:line="64" pos:column="53">old_oid<pos:position pos:line="64" pos:column="60"/></name><operator pos:line="64" pos:column="60">.<pos:position pos:line="64" pos:column="61"/></operator><name pos:line="64" pos:column="61">hash<pos:position pos:line="64" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="66"/></argument_list></call> <operator pos:line="64" pos:column="67">&lt;<pos:position pos:line="64" pos:column="71"/></operator> <literal type="number" pos:line="64" pos:column="69">0<pos:position pos:line="64" pos:column="70"/></literal></expr>)<pos:position pos:line="64" pos:column="71"/></condition><then pos:line="64" pos:column="71">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="33">die<pos:position pos:line="65" pos:column="36"/></name><argument_list pos:line="65" pos:column="36">(<argument><expr><literal type="string" pos:line="65" pos:column="37">"Could not read ref %s"<pos:position pos:line="65" pos:column="60"/></literal></expr></argument>, <argument><expr><specifier pos:line="65" pos:column="62">private<pos:position pos:line="65" pos:column="69"/></specifier></expr></argument>)<pos:position pos:line="65" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="71"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">free<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">(<argument><expr><specifier pos:line="66" pos:column="30">private<pos:position pos:line="66" pos:column="37"/></specifier></expr></argument>)<pos:position pos:line="66" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="67" pos:column="18"/></block></then></if>
	}<pos:position pos:line="68" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="69" pos:column="9">strbuf_release<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><operator pos:line="69" pos:column="24">&amp;<pos:position pos:line="69" pos:column="29"/></operator><name pos:line="69" pos:column="25">buf<pos:position pos:line="69" pos:column="28"/></name></expr></argument>)<pos:position pos:line="69" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="30"/></expr_stmt>
	<return pos:line="70" pos:column="9">return <expr><literal type="number" pos:line="70" pos:column="16">0<pos:position pos:line="70" pos:column="17"/></literal></expr>;<pos:position pos:line="70" pos:column="18"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
