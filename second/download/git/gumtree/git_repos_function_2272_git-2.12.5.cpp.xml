<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2272_git-2.12.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">match_pathname<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">pathname<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">pathlen<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
		   <parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">base<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">int<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">baselen<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>,
		   <parameter><decl><type><specifier pos:line="3" pos:column="20">const<pos:position pos:line="3" pos:column="25"/></specifier> <name pos:line="3" pos:column="26">char<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">pattern<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="41">int<pos:position pos:line="3" pos:column="44"/></name></type> <name pos:line="3" pos:column="45">prefix<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="53">int<pos:position pos:line="3" pos:column="56"/></name></type> <name pos:line="3" pos:column="57">patternlen<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>,
		   <parameter><decl><type><name pos:line="4" pos:column="20">unsigned<pos:position pos:line="4" pos:column="28"/></name></type> <name pos:line="4" pos:column="29">flags<pos:position pos:line="4" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="35"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">name<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">namelen<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * match with FNM_PATHNAME; the pattern has base implicitly
	 * in front of it.
	 */</comment>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">*<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">pattern<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">==<pos:position pos:line="13" pos:column="24"/></operator> <literal type="char" pos:line="13" pos:column="25">'/'<pos:position pos:line="13" pos:column="28"/></literal></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29"> <block pos:line="13" pos:column="30">{
		<expr_stmt><expr><name pos:line="14" pos:column="17">pattern<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">++<pos:position pos:line="14" pos:column="26"/></operator></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">patternlen<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">--<pos:position pos:line="15" pos:column="29"/></operator></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">prefix<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">--<pos:position pos:line="16" pos:column="25"/></operator></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="19" pos:column="9">/*
	 * baselen does not count the trailing slash. base[] may or
	 * may not end with a trailing slash though.
	 */</comment>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">pathlen<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">&lt;<pos:position pos:line="23" pos:column="25"/></operator> <name pos:line="23" pos:column="23">baselen<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">+<pos:position pos:line="23" pos:column="32"/></operator> <literal type="number" pos:line="23" pos:column="33">1<pos:position pos:line="23" pos:column="34"/></literal> <operator pos:line="23" pos:column="35">||<pos:position pos:line="23" pos:column="37"/></operator>
	    <operator pos:line="24" pos:column="13">(<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">baselen<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">&amp;&amp;<pos:position pos:line="24" pos:column="32"/></operator> <name><name pos:line="24" pos:column="25">pathname<pos:position pos:line="24" pos:column="33"/></name><index pos:line="24" pos:column="33">[<expr><name pos:line="24" pos:column="34">baselen<pos:position pos:line="24" pos:column="41"/></name></expr>]<pos:position pos:line="24" pos:column="42"/></index></name> <operator pos:line="24" pos:column="43">!=<pos:position pos:line="24" pos:column="45"/></operator> <literal type="char" pos:line="24" pos:column="46">'/'<pos:position pos:line="24" pos:column="49"/></literal><operator pos:line="24" pos:column="49">)<pos:position pos:line="24" pos:column="50"/></operator> <operator pos:line="24" pos:column="51">||<pos:position pos:line="24" pos:column="53"/></operator>
	    <call><name pos:line="25" pos:column="13">fspathncmp<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">pathname<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">base<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">baselen<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="49"/></condition><then pos:line="25" pos:column="49">
		<block type="pseudo"><return pos:line="26" pos:column="17">return <expr><literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="28" pos:column="9">namelen<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <ternary><condition><expr><name pos:line="28" pos:column="19">baselen<pos:position pos:line="28" pos:column="26"/></name></expr> ?<pos:position pos:line="28" pos:column="28"/></condition><then pos:line="28" pos:column="28"> <expr><name pos:line="28" pos:column="29">pathlen<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">-<pos:position pos:line="28" pos:column="38"/></operator> <name pos:line="28" pos:column="39">baselen<pos:position pos:line="28" pos:column="46"/></name> <operator pos:line="28" pos:column="47">-<pos:position pos:line="28" pos:column="48"/></operator> <literal type="number" pos:line="28" pos:column="49">1<pos:position pos:line="28" pos:column="50"/></literal></expr> <pos:position pos:line="28" pos:column="51"/></then><else pos:line="28" pos:column="51">: <expr><name pos:line="28" pos:column="53">pathlen<pos:position pos:line="28" pos:column="60"/></name></expr></else></ternary></expr>;<pos:position pos:line="28" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">name<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <name pos:line="29" pos:column="16">pathname<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">+<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">pathlen<pos:position pos:line="29" pos:column="34"/></name> <operator pos:line="29" pos:column="35">-<pos:position pos:line="29" pos:column="36"/></operator> <name pos:line="29" pos:column="37">namelen<pos:position pos:line="29" pos:column="44"/></name></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">prefix<pos:position pos:line="31" pos:column="19"/></name></expr>)<pos:position pos:line="31" pos:column="20"/></condition><then pos:line="31" pos:column="20"> <block pos:line="31" pos:column="21">{
		<comment type="block" pos:line="32" pos:column="17">/*
		 * if the non-wildcard part is longer than the
		 * remaining pathname, surely it cannot match.
		 */</comment>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">prefix<pos:position pos:line="36" pos:column="27"/></name> <operator pos:line="36" pos:column="28">&gt;<pos:position pos:line="36" pos:column="32"/></operator> <name pos:line="36" pos:column="30">namelen<pos:position pos:line="36" pos:column="37"/></name></expr>)<pos:position pos:line="36" pos:column="38"/></condition><then pos:line="36" pos:column="38">
			<block type="pseudo"><return pos:line="37" pos:column="25">return <expr><literal type="number" pos:line="37" pos:column="32">0<pos:position pos:line="37" pos:column="33"/></literal></expr>;<pos:position pos:line="37" pos:column="34"/></return></block></then></if>

		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><call><name pos:line="39" pos:column="21">fspathncmp<pos:position pos:line="39" pos:column="31"/></name><argument_list pos:line="39" pos:column="31">(<argument><expr><name pos:line="39" pos:column="32">pattern<pos:position pos:line="39" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="41">name<pos:position pos:line="39" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="47">prefix<pos:position pos:line="39" pos:column="53"/></name></expr></argument>)<pos:position pos:line="39" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="55"/></condition><then pos:line="39" pos:column="55">
			<block type="pseudo"><return pos:line="40" pos:column="25">return <expr><literal type="number" pos:line="40" pos:column="32">0<pos:position pos:line="40" pos:column="33"/></literal></expr>;<pos:position pos:line="40" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="41" pos:column="17">pattern<pos:position pos:line="41" pos:column="24"/></name> <operator pos:line="41" pos:column="25">+=<pos:position pos:line="41" pos:column="27"/></operator> <name pos:line="41" pos:column="28">prefix<pos:position pos:line="41" pos:column="34"/></name></expr>;<pos:position pos:line="41" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="42" pos:column="17">patternlen<pos:position pos:line="42" pos:column="27"/></name> <operator pos:line="42" pos:column="28">-=<pos:position pos:line="42" pos:column="30"/></operator> <name pos:line="42" pos:column="31">prefix<pos:position pos:line="42" pos:column="37"/></name></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">name<pos:position pos:line="43" pos:column="21"/></name>    <operator pos:line="43" pos:column="25">+=<pos:position pos:line="43" pos:column="27"/></operator> <name pos:line="43" pos:column="28">prefix<pos:position pos:line="43" pos:column="34"/></name></expr>;<pos:position pos:line="43" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="44" pos:column="17">namelen<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">-=<pos:position pos:line="44" pos:column="27"/></operator> <name pos:line="44" pos:column="28">prefix<pos:position pos:line="44" pos:column="34"/></name></expr>;<pos:position pos:line="44" pos:column="35"/></expr_stmt>

		<comment type="block" pos:line="46" pos:column="17">/*
		 * If the whole pattern did not have a wildcard,
		 * then our prefix match is all we need; we
		 * do not need to call fnmatch at all.
		 */</comment>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">!<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">patternlen<pos:position pos:line="51" pos:column="32"/></name> <operator pos:line="51" pos:column="33">&amp;&amp;<pos:position pos:line="51" pos:column="43"/></operator> <operator pos:line="51" pos:column="36">!<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="37">namelen<pos:position pos:line="51" pos:column="44"/></name></expr>)<pos:position pos:line="51" pos:column="45"/></condition><then pos:line="51" pos:column="45">
			<block type="pseudo"><return pos:line="52" pos:column="25">return <expr><literal type="number" pos:line="52" pos:column="32">1<pos:position pos:line="52" pos:column="33"/></literal></expr>;<pos:position pos:line="52" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if>

	<return pos:line="55" pos:column="9">return <expr><call><name pos:line="55" pos:column="16">fnmatch_icase_mem<pos:position pos:line="55" pos:column="33"/></name><argument_list pos:line="55" pos:column="33">(<argument><expr><name pos:line="55" pos:column="34">pattern<pos:position pos:line="55" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="43">patternlen<pos:position pos:line="55" pos:column="53"/></name></expr></argument>,
				 <argument><expr><name pos:line="56" pos:column="34">name<pos:position pos:line="56" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="40">namelen<pos:position pos:line="56" pos:column="47"/></name></expr></argument>,
				 <argument><expr><name pos:line="57" pos:column="34">WM_PATHNAME<pos:position pos:line="57" pos:column="45"/></name></expr></argument>)<pos:position pos:line="57" pos:column="46"/></argument_list></call> <operator pos:line="57" pos:column="47">==<pos:position pos:line="57" pos:column="49"/></operator> <literal type="number" pos:line="57" pos:column="50">0<pos:position pos:line="57" pos:column="51"/></literal></expr>;<pos:position pos:line="57" pos:column="52"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
