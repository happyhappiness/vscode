<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_938.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">final<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">final_pack_name<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">curr_pack_name<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>,
		  <parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">final_index_name<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="49">const<pos:position pos:line="2" pos:column="54"/></specifier> <name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">curr_index_name<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>,
		  <parameter><decl><type><specifier pos:line="3" pos:column="19">const<pos:position pos:line="3" pos:column="24"/></specifier> <name pos:line="3" pos:column="25">char<pos:position pos:line="3" pos:column="29"/></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">keep_name<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="42">const<pos:position pos:line="3" pos:column="47"/></specifier> <name pos:line="3" pos:column="48">char<pos:position pos:line="3" pos:column="52"/></name> <modifier pos:line="3" pos:column="53">*<pos:position pos:line="3" pos:column="54"/></modifier></type><name pos:line="3" pos:column="54">keep_msg<pos:position pos:line="3" pos:column="62"/></name></decl></parameter>,
		  <parameter><decl><type><name pos:line="4" pos:column="19">unsigned<pos:position pos:line="4" pos:column="27"/></name> <name pos:line="4" pos:column="28">char<pos:position pos:line="4" pos:column="32"/></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">sha1<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="39"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">report<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><literal type="string" pos:line="6" pos:column="30">"pack"<pos:position pos:line="6" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">name<pos:position pos:line="7" pos:column="18"/></name><index pos:line="7" pos:column="18">[<expr><name pos:line="7" pos:column="19">PATH_MAX<pos:position pos:line="7" pos:column="27"/></name></expr>]<pos:position pos:line="7" pos:column="28"/></index></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">err<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">from_stdin<pos:position pos:line="10" pos:column="24"/></name></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25"> <block pos:line="10" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">close<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">input_fd<pos:position pos:line="11" pos:column="31"/></name></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then> <else pos:line="12" pos:column="11">else <block pos:line="12" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">fsync_or_die<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">output_fd<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">curr_pack_name<pos:position pos:line="13" pos:column="55"/></name></expr></argument>)<pos:position pos:line="13" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">err<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <call><name pos:line="14" pos:column="23">close<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">output_fd<pos:position pos:line="14" pos:column="38"/></name></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">err<pos:position pos:line="15" pos:column="24"/></name></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">die_errno<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><call><name pos:line="16" pos:column="35">_<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><literal type="string" pos:line="16" pos:column="37">"error while closing pack file"<pos:position pos:line="16" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="71"/></expr_stmt></block></then></if>
	}<pos:position pos:line="17" pos:column="10"/></block></else></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">keep_msg<pos:position pos:line="19" pos:column="21"/></name></expr>)<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22"> <block pos:line="19" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">int<pos:position pos:line="20" pos:column="20"/></name></type> <name pos:line="20" pos:column="21">keep_fd<pos:position pos:line="20" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="20" pos:column="30">keep_msg_len<pos:position pos:line="20" pos:column="42"/></name> <init pos:line="20" pos:column="43">= <expr><call><name pos:line="20" pos:column="45">strlen<pos:position pos:line="20" pos:column="51"/></name><argument_list pos:line="20" pos:column="51">(<argument><expr><name pos:line="20" pos:column="52">keep_msg<pos:position pos:line="20" pos:column="60"/></name></expr></argument>)<pos:position pos:line="20" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="62"/></decl_stmt>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">keep_name<pos:position pos:line="22" pos:column="31"/></name></expr>)<pos:position pos:line="22" pos:column="32"/></condition><then pos:line="22" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="25">keep_fd<pos:position pos:line="23" pos:column="32"/></name> <operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator> <call><name pos:line="23" pos:column="35">odb_pack_keep<pos:position pos:line="23" pos:column="48"/></name><argument_list pos:line="23" pos:column="48">(<argument><expr><name pos:line="23" pos:column="49">name<pos:position pos:line="23" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="55">sizeof<argument_list pos:line="23" pos:column="61">(<argument><expr><name pos:line="23" pos:column="62">name<pos:position pos:line="23" pos:column="66"/></name></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="23" pos:column="69">sha1<pos:position pos:line="23" pos:column="73"/></name></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="75"/></expr_stmt></block></then>
		<else pos:line="24" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="25">keep_fd<pos:position pos:line="25" pos:column="32"/></name> <operator pos:line="25" pos:column="33">=<pos:position pos:line="25" pos:column="34"/></operator> <call><name pos:line="25" pos:column="35">open<pos:position pos:line="25" pos:column="39"/></name><argument_list pos:line="25" pos:column="39">(<argument><expr><name pos:line="25" pos:column="40">keep_name<pos:position pos:line="25" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="51">O_RDWR<pos:position pos:line="25" pos:column="57"/></name><operator pos:line="25" pos:column="57">|<pos:position pos:line="25" pos:column="58"/></operator><name pos:line="25" pos:column="58">O_CREAT<pos:position pos:line="25" pos:column="65"/></name><operator pos:line="25" pos:column="65">|<pos:position pos:line="25" pos:column="66"/></operator><name pos:line="25" pos:column="66">O_EXCL<pos:position pos:line="25" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="74">0600<pos:position pos:line="25" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="80"/></expr_stmt></block></else></if>

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">keep_fd<pos:position pos:line="27" pos:column="28"/></name> <operator pos:line="27" pos:column="29">&lt;<pos:position pos:line="27" pos:column="33"/></operator> <literal type="number" pos:line="27" pos:column="31">0<pos:position pos:line="27" pos:column="32"/></literal></expr>)<pos:position pos:line="27" pos:column="33"/></condition><then pos:line="27" pos:column="33"> <block pos:line="27" pos:column="34">{
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><name pos:line="28" pos:column="29">errno<pos:position pos:line="28" pos:column="34"/></name> <operator pos:line="28" pos:column="35">!=<pos:position pos:line="28" pos:column="37"/></operator> <name pos:line="28" pos:column="38">EEXIST<pos:position pos:line="28" pos:column="44"/></name></expr>)<pos:position pos:line="28" pos:column="45"/></condition><then pos:line="28" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="33">die_errno<pos:position pos:line="29" pos:column="42"/></name><argument_list pos:line="29" pos:column="42">(<argument><expr><call><name pos:line="29" pos:column="43">_<pos:position pos:line="29" pos:column="44"/></name><argument_list pos:line="29" pos:column="44">(<argument><expr><literal type="string" pos:line="29" pos:column="45">"cannot write keep file '%s'"<pos:position pos:line="29" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="75"/></argument_list></call></expr></argument>,
					  <argument><expr><ternary><condition><expr><name pos:line="30" pos:column="43">keep_name<pos:position pos:line="30" pos:column="52"/></name></expr> ?<pos:position pos:line="30" pos:column="54"/></condition><then pos:line="30" pos:column="54"> <expr><name pos:line="30" pos:column="55">keep_name<pos:position pos:line="30" pos:column="64"/></name></expr> <pos:position pos:line="30" pos:column="65"/></then><else pos:line="30" pos:column="65">: <expr><name pos:line="30" pos:column="67">name<pos:position pos:line="30" pos:column="71"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="30" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="73"/></expr_stmt></block></then></if>
		}<pos:position pos:line="31" pos:column="18"/></block></then> <else pos:line="31" pos:column="19">else <block pos:line="31" pos:column="24">{
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><name pos:line="32" pos:column="29">keep_msg_len<pos:position pos:line="32" pos:column="41"/></name> <operator pos:line="32" pos:column="42">&gt;<pos:position pos:line="32" pos:column="46"/></operator> <literal type="number" pos:line="32" pos:column="44">0<pos:position pos:line="32" pos:column="45"/></literal></expr>)<pos:position pos:line="32" pos:column="46"/></condition><then pos:line="32" pos:column="46"> <block pos:line="32" pos:column="47">{
				<expr_stmt><expr><call><name pos:line="33" pos:column="33">write_or_die<pos:position pos:line="33" pos:column="45"/></name><argument_list pos:line="33" pos:column="45">(<argument><expr><name pos:line="33" pos:column="46">keep_fd<pos:position pos:line="33" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="55">keep_msg<pos:position pos:line="33" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="65">keep_msg_len<pos:position pos:line="33" pos:column="77"/></name></expr></argument>)<pos:position pos:line="33" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="79"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="34" pos:column="33">write_or_die<pos:position pos:line="34" pos:column="45"/></name><argument_list pos:line="34" pos:column="45">(<argument><expr><name pos:line="34" pos:column="46">keep_fd<pos:position pos:line="34" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="55">"\n"<pos:position pos:line="34" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="61">1<pos:position pos:line="34" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="64"/></expr_stmt>
			}<pos:position pos:line="35" pos:column="26"/></block></then></if>
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><call><name pos:line="36" pos:column="29">close<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><name pos:line="36" pos:column="35">keep_fd<pos:position pos:line="36" pos:column="42"/></name></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call> <operator pos:line="36" pos:column="44">!=<pos:position pos:line="36" pos:column="46"/></operator> <literal type="number" pos:line="36" pos:column="47">0<pos:position pos:line="36" pos:column="48"/></literal></expr>)<pos:position pos:line="36" pos:column="49"/></condition><then pos:line="36" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="33">die_errno<pos:position pos:line="37" pos:column="42"/></name><argument_list pos:line="37" pos:column="42">(<argument><expr><call><name pos:line="37" pos:column="43">_<pos:position pos:line="37" pos:column="44"/></name><argument_list pos:line="37" pos:column="44">(<argument><expr><literal type="string" pos:line="37" pos:column="45">"cannot close written keep file '%s'"<pos:position pos:line="37" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="83"/></argument_list></call></expr></argument>,
					  <argument><expr><ternary><condition><expr><name pos:line="38" pos:column="43">keep_name<pos:position pos:line="38" pos:column="52"/></name></expr> ?<pos:position pos:line="38" pos:column="54"/></condition><then pos:line="38" pos:column="54"> <expr><name pos:line="38" pos:column="55">keep_name<pos:position pos:line="38" pos:column="64"/></name></expr> <pos:position pos:line="38" pos:column="65"/></then><else pos:line="38" pos:column="65">: <expr><name pos:line="38" pos:column="67">name<pos:position pos:line="38" pos:column="71"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="73"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="39" pos:column="25">report<pos:position pos:line="39" pos:column="31"/></name> <operator pos:line="39" pos:column="32">=<pos:position pos:line="39" pos:column="33"/></operator> <literal type="string" pos:line="39" pos:column="34">"keep"<pos:position pos:line="39" pos:column="40"/></literal></expr>;<pos:position pos:line="39" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></else></if>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">final_pack_name<pos:position pos:line="43" pos:column="28"/></name> <operator pos:line="43" pos:column="29">!=<pos:position pos:line="43" pos:column="31"/></operator> <name pos:line="43" pos:column="32">curr_pack_name<pos:position pos:line="43" pos:column="46"/></name></expr>)<pos:position pos:line="43" pos:column="47"/></condition><then pos:line="43" pos:column="47"> <block pos:line="43" pos:column="48">{
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><operator pos:line="44" pos:column="21">!<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">final_pack_name<pos:position pos:line="44" pos:column="37"/></name></expr>)<pos:position pos:line="44" pos:column="38"/></condition><then pos:line="44" pos:column="38"> <block pos:line="44" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">snprintf<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><name pos:line="45" pos:column="34">name<pos:position pos:line="45" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="40">sizeof<argument_list pos:line="45" pos:column="46">(<argument><expr><name pos:line="45" pos:column="47">name<pos:position pos:line="45" pos:column="51"/></name></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="54">"%s/pack/pack-%s.pack"<pos:position pos:line="45" pos:column="76"/></literal></expr></argument>,
				 <argument><expr><call><name pos:line="46" pos:column="34">get_object_directory<pos:position pos:line="46" pos:column="54"/></name><argument_list pos:line="46" pos:column="54">()<pos:position pos:line="46" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="58">sha1_to_hex<pos:position pos:line="46" pos:column="69"/></name><argument_list pos:line="46" pos:column="69">(<argument><expr><name pos:line="46" pos:column="70">sha1<pos:position pos:line="46" pos:column="74"/></name></expr></argument>)<pos:position pos:line="46" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><name pos:line="47" pos:column="25">final_pack_name<pos:position pos:line="47" pos:column="40"/></name> <operator pos:line="47" pos:column="41">=<pos:position pos:line="47" pos:column="42"/></operator> <name pos:line="47" pos:column="43">name<pos:position pos:line="47" pos:column="47"/></name></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><call><name pos:line="49" pos:column="21">finalize_object_file<pos:position pos:line="49" pos:column="41"/></name><argument_list pos:line="49" pos:column="41">(<argument><expr><name pos:line="49" pos:column="42">curr_pack_name<pos:position pos:line="49" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="58">final_pack_name<pos:position pos:line="49" pos:column="73"/></name></expr></argument>)<pos:position pos:line="49" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="75"/></condition><then pos:line="49" pos:column="75">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="25">die<pos:position pos:line="50" pos:column="28"/></name><argument_list pos:line="50" pos:column="28">(<argument><expr><call><name pos:line="50" pos:column="29">_<pos:position pos:line="50" pos:column="30"/></name><argument_list pos:line="50" pos:column="30">(<argument><expr><literal type="string" pos:line="50" pos:column="31">"cannot store pack file"<pos:position pos:line="50" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt></block></then></if>
	}<pos:position pos:line="51" pos:column="10"/></block></then> <elseif pos:line="51" pos:column="11">else <if pos:line="51" pos:column="16">if <condition pos:line="51" pos:column="19">(<expr><name pos:line="51" pos:column="20">from_stdin<pos:position pos:line="51" pos:column="30"/></name></expr>)<pos:position pos:line="51" pos:column="31"/></condition><then pos:line="51" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="17">chmod<pos:position pos:line="52" pos:column="22"/></name><argument_list pos:line="52" pos:column="22">(<argument><expr><name pos:line="52" pos:column="23">final_pack_name<pos:position pos:line="52" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="40">0444<pos:position pos:line="52" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="46"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">final_index_name<pos:position pos:line="54" pos:column="29"/></name> <operator pos:line="54" pos:column="30">!=<pos:position pos:line="54" pos:column="32"/></operator> <name pos:line="54" pos:column="33">curr_index_name<pos:position pos:line="54" pos:column="48"/></name></expr>)<pos:position pos:line="54" pos:column="49"/></condition><then pos:line="54" pos:column="49"> <block pos:line="54" pos:column="50">{
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><operator pos:line="55" pos:column="21">!<pos:position pos:line="55" pos:column="22"/></operator><name pos:line="55" pos:column="22">final_index_name<pos:position pos:line="55" pos:column="38"/></name></expr>)<pos:position pos:line="55" pos:column="39"/></condition><then pos:line="55" pos:column="39"> <block pos:line="55" pos:column="40">{
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">snprintf<pos:position pos:line="56" pos:column="33"/></name><argument_list pos:line="56" pos:column="33">(<argument><expr><name pos:line="56" pos:column="34">name<pos:position pos:line="56" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="40">sizeof<argument_list pos:line="56" pos:column="46">(<argument><expr><name pos:line="56" pos:column="47">name<pos:position pos:line="56" pos:column="51"/></name></expr></argument>)<pos:position pos:line="56" pos:column="52"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="54">"%s/pack/pack-%s.idx"<pos:position pos:line="56" pos:column="75"/></literal></expr></argument>,
				 <argument><expr><call><name pos:line="57" pos:column="34">get_object_directory<pos:position pos:line="57" pos:column="54"/></name><argument_list pos:line="57" pos:column="54">()<pos:position pos:line="57" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="57" pos:column="58">sha1_to_hex<pos:position pos:line="57" pos:column="69"/></name><argument_list pos:line="57" pos:column="69">(<argument><expr><name pos:line="57" pos:column="70">sha1<pos:position pos:line="57" pos:column="74"/></name></expr></argument>)<pos:position pos:line="57" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><name pos:line="58" pos:column="25">final_index_name<pos:position pos:line="58" pos:column="41"/></name> <operator pos:line="58" pos:column="42">=<pos:position pos:line="58" pos:column="43"/></operator> <name pos:line="58" pos:column="44">name<pos:position pos:line="58" pos:column="48"/></name></expr>;<pos:position pos:line="58" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="59" pos:column="18"/></block></then></if>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><call><name pos:line="60" pos:column="21">finalize_object_file<pos:position pos:line="60" pos:column="41"/></name><argument_list pos:line="60" pos:column="41">(<argument><expr><name pos:line="60" pos:column="42">curr_index_name<pos:position pos:line="60" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="59">final_index_name<pos:position pos:line="60" pos:column="75"/></name></expr></argument>)<pos:position pos:line="60" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="77"/></condition><then pos:line="60" pos:column="77">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="25">die<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><call><name pos:line="61" pos:column="29">_<pos:position pos:line="61" pos:column="30"/></name><argument_list pos:line="61" pos:column="30">(<argument><expr><literal type="string" pos:line="61" pos:column="31">"cannot store index file"<pos:position pos:line="61" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="59"/></expr_stmt></block></then></if>
	}<pos:position pos:line="62" pos:column="10"/></block></then> <else pos:line="62" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="17">chmod<pos:position pos:line="63" pos:column="22"/></name><argument_list pos:line="63" pos:column="22">(<argument><expr><name pos:line="63" pos:column="23">final_index_name<pos:position pos:line="63" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="41">0444<pos:position pos:line="63" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="47"/></expr_stmt></block></else></if>

	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><operator pos:line="65" pos:column="13">!<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="14">from_stdin<pos:position pos:line="65" pos:column="24"/></name></expr>)<pos:position pos:line="65" pos:column="25"/></condition><then pos:line="65" pos:column="25"> <block pos:line="65" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">printf<pos:position pos:line="66" pos:column="23"/></name><argument_list pos:line="66" pos:column="23">(<argument><expr><literal type="string" pos:line="66" pos:column="24">"%s\n"<pos:position pos:line="66" pos:column="30"/></literal></expr></argument>, <argument><expr><call><name pos:line="66" pos:column="32">sha1_to_hex<pos:position pos:line="66" pos:column="43"/></name><argument_list pos:line="66" pos:column="43">(<argument><expr><name pos:line="66" pos:column="44">sha1<pos:position pos:line="66" pos:column="48"/></name></expr></argument>)<pos:position pos:line="66" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></then> <else pos:line="67" pos:column="11">else <block pos:line="67" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="68" pos:column="17">char<pos:position pos:line="68" pos:column="21"/></name></type> <name><name pos:line="68" pos:column="22">buf<pos:position pos:line="68" pos:column="25"/></name><index pos:line="68" pos:column="25">[<expr><literal type="number" pos:line="68" pos:column="26">48<pos:position pos:line="68" pos:column="28"/></literal></expr>]<pos:position pos:line="68" pos:column="29"/></index></name></decl>;<pos:position pos:line="68" pos:column="30"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="69" pos:column="17">int<pos:position pos:line="69" pos:column="20"/></name></type> <name pos:line="69" pos:column="21">len<pos:position pos:line="69" pos:column="24"/></name> <init pos:line="69" pos:column="25">= <expr><call><name pos:line="69" pos:column="27">snprintf<pos:position pos:line="69" pos:column="35"/></name><argument_list pos:line="69" pos:column="35">(<argument><expr><name pos:line="69" pos:column="36">buf<pos:position pos:line="69" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="41">sizeof<argument_list pos:line="69" pos:column="47">(<argument><expr><name pos:line="69" pos:column="48">buf<pos:position pos:line="69" pos:column="51"/></name></expr></argument>)<pos:position pos:line="69" pos:column="52"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="54">"%s\t%s\n"<pos:position pos:line="69" pos:column="64"/></literal></expr></argument>,
				   <argument><expr><name pos:line="70" pos:column="36">report<pos:position pos:line="70" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="70" pos:column="44">sha1_to_hex<pos:position pos:line="70" pos:column="55"/></name><argument_list pos:line="70" pos:column="55">(<argument><expr><name pos:line="70" pos:column="56">sha1<pos:position pos:line="70" pos:column="60"/></name></expr></argument>)<pos:position pos:line="70" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="70" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="70" pos:column="63"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">write_or_die<pos:position pos:line="71" pos:column="29"/></name><argument_list pos:line="71" pos:column="29">(<argument><expr><literal type="number" pos:line="71" pos:column="30">1<pos:position pos:line="71" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="33">buf<pos:position pos:line="71" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="38">len<pos:position pos:line="71" pos:column="41"/></name></expr></argument>)<pos:position pos:line="71" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="43"/></expr_stmt>

		<comment type="block" pos:line="73" pos:column="17">/*
		 * Let's just mimic git-unpack-objects here and write
		 * the last part of the input buffer to stdout.
		 */</comment>
		<while pos:line="77" pos:column="17">while <condition pos:line="77" pos:column="23">(<expr><name pos:line="77" pos:column="24">input_len<pos:position pos:line="77" pos:column="33"/></name></expr>)<pos:position pos:line="77" pos:column="34"/></condition> <block pos:line="77" pos:column="35">{
			<expr_stmt><expr><name pos:line="78" pos:column="25">err<pos:position pos:line="78" pos:column="28"/></name> <operator pos:line="78" pos:column="29">=<pos:position pos:line="78" pos:column="30"/></operator> <call><name pos:line="78" pos:column="31">xwrite<pos:position pos:line="78" pos:column="37"/></name><argument_list pos:line="78" pos:column="37">(<argument><expr><literal type="number" pos:line="78" pos:column="38">1<pos:position pos:line="78" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="41">input_buffer<pos:position pos:line="78" pos:column="53"/></name> <operator pos:line="78" pos:column="54">+<pos:position pos:line="78" pos:column="55"/></operator> <name pos:line="78" pos:column="56">input_offset<pos:position pos:line="78" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="70">input_len<pos:position pos:line="78" pos:column="79"/></name></expr></argument>)<pos:position pos:line="78" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="81"/></expr_stmt>
			<if pos:line="79" pos:column="25">if <condition pos:line="79" pos:column="28">(<expr><name pos:line="79" pos:column="29">err<pos:position pos:line="79" pos:column="32"/></name> <operator pos:line="79" pos:column="33">&lt;=<pos:position pos:line="79" pos:column="38"/></operator> <literal type="number" pos:line="79" pos:column="36">0<pos:position pos:line="79" pos:column="37"/></literal></expr>)<pos:position pos:line="79" pos:column="38"/></condition><then pos:line="79" pos:column="38">
				<block type="pseudo"><break pos:line="80" pos:column="33">break;<pos:position pos:line="80" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="81" pos:column="25">input_len<pos:position pos:line="81" pos:column="34"/></name> <operator pos:line="81" pos:column="35">-=<pos:position pos:line="81" pos:column="37"/></operator> <name pos:line="81" pos:column="38">err<pos:position pos:line="81" pos:column="41"/></name></expr>;<pos:position pos:line="81" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="82" pos:column="25">input_offset<pos:position pos:line="82" pos:column="37"/></name> <operator pos:line="82" pos:column="38">+=<pos:position pos:line="82" pos:column="40"/></operator> <name pos:line="82" pos:column="41">err<pos:position pos:line="82" pos:column="44"/></name></expr>;<pos:position pos:line="82" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="83" pos:column="18"/></block></while>
	}<pos:position pos:line="84" pos:column="10"/></block></else></if>
}<pos:position pos:line="85" pos:column="2"/></block></function></unit>
