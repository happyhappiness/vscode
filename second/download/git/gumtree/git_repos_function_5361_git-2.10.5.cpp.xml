<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5361_git-2.10.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">handle_line<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">line<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">merge_parents<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">merge_parents<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">len<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><call><name pos:line="3" pos:column="22">strlen<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">line<pos:position pos:line="3" pos:column="33"/></name></expr></argument>)<pos:position pos:line="3" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">origin_data<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">origin_data<pos:position pos:line="4" pos:column="40"/></name></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">src<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">origin<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">src_data<pos:position pos:line="7" pos:column="24"/></name></name> <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier></type><name pos:line="7" pos:column="26">src_data<pos:position pos:line="7" pos:column="34"/></name></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">string_list_item<pos:position pos:line="8" pos:column="32"/></name></name> <modifier pos:line="8" pos:column="33">*<pos:position pos:line="8" pos:column="34"/></modifier></type><name pos:line="8" pos:column="34">item<pos:position pos:line="8" pos:column="38"/></name></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">pulling_head<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><literal type="number" pos:line="9" pos:column="28">0<pos:position pos:line="9" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">unsigned<pos:position pos:line="10" pos:column="17"/></name> <name pos:line="10" pos:column="18">char<pos:position pos:line="10" pos:column="22"/></name></type> <name><name pos:line="10" pos:column="23">sha1<pos:position pos:line="10" pos:column="27"/></name><index pos:line="10" pos:column="27">[<expr><literal type="number" pos:line="10" pos:column="28">20<pos:position pos:line="10" pos:column="30"/></literal></expr>]<pos:position pos:line="10" pos:column="31"/></index></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">len<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">&lt;<pos:position pos:line="12" pos:column="21"/></operator> <literal type="number" pos:line="12" pos:column="19">43<pos:position pos:line="12" pos:column="21"/></literal> <operator pos:line="12" pos:column="22">||<pos:position pos:line="12" pos:column="24"/></operator> <name><name pos:line="12" pos:column="25">line<pos:position pos:line="12" pos:column="29"/></name><index pos:line="12" pos:column="29">[<expr><literal type="number" pos:line="12" pos:column="30">40<pos:position pos:line="12" pos:column="32"/></literal></expr>]<pos:position pos:line="12" pos:column="33"/></index></name> <operator pos:line="12" pos:column="34">!=<pos:position pos:line="12" pos:column="36"/></operator> <literal type="char" pos:line="12" pos:column="37">'\t'<pos:position pos:line="12" pos:column="41"/></literal></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><literal type="number" pos:line="13" pos:column="24">1<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></return></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">starts_with<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">line<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">+<pos:position pos:line="15" pos:column="31"/></operator> <literal type="number" pos:line="15" pos:column="32">41<pos:position pos:line="15" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="36">"not-for-merge"<pos:position pos:line="15" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="53"/></condition><then pos:line="15" pos:column="53">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><literal type="number" pos:line="16" pos:column="24">0<pos:position pos:line="16" pos:column="25"/></literal></expr>;<pos:position pos:line="16" pos:column="26"/></return></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name><name pos:line="18" pos:column="13">line<pos:position pos:line="18" pos:column="17"/></name><index pos:line="18" pos:column="17">[<expr><literal type="number" pos:line="18" pos:column="18">41<pos:position pos:line="18" pos:column="20"/></literal></expr>]<pos:position pos:line="18" pos:column="21"/></index></name> <operator pos:line="18" pos:column="22">!=<pos:position pos:line="18" pos:column="24"/></operator> <literal type="char" pos:line="18" pos:column="25">'\t'<pos:position pos:line="18" pos:column="29"/></literal></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">2<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="21" pos:column="9">i<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <call><name pos:line="21" pos:column="13">get_sha1_hex<pos:position pos:line="21" pos:column="25"/></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name pos:line="21" pos:column="26">line<pos:position pos:line="21" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="32">sha1<pos:position pos:line="21" pos:column="36"/></name></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">i<pos:position pos:line="22" pos:column="14"/></name></expr>)<pos:position pos:line="22" pos:column="15"/></condition><then pos:line="22" pos:column="15">
		<block type="pseudo"><return pos:line="23" pos:column="17">return <expr><literal type="number" pos:line="23" pos:column="24">3<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></return></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><call><name pos:line="25" pos:column="14">find_merge_parent<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><name pos:line="25" pos:column="32">merge_parents<pos:position pos:line="25" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="47">sha1<pos:position pos:line="25" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="53">NULL<pos:position pos:line="25" pos:column="57"/></name></expr></argument>)<pos:position pos:line="25" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="59"/></condition><then pos:line="25" pos:column="59">
		<block type="pseudo"><return pos:line="26" pos:column="17">return <expr><literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return></block></then></if> <comment type="block" pos:line="26" pos:column="27">/* subsumed by other parents */</comment>

	<expr_stmt><expr><name pos:line="28" pos:column="9">origin_data<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <call><name pos:line="28" pos:column="23">xcalloc<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><literal type="number" pos:line="28" pos:column="31">1<pos:position pos:line="28" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="34">sizeof<argument_list pos:line="28" pos:column="40">(<argument><expr pos:line="28" pos:column="41">struct <name pos:line="28" pos:column="48">origin_data<pos:position pos:line="28" pos:column="59"/></name></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">hashcpy<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name><name pos:line="29" pos:column="17">origin_data<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">-&gt;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="30">sha1<pos:position pos:line="29" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="36">sha1<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name><name pos:line="31" pos:column="13">line<pos:position pos:line="31" pos:column="17"/></name><index pos:line="31" pos:column="17">[<expr><name pos:line="31" pos:column="18">len<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">-<pos:position pos:line="31" pos:column="23"/></operator> <literal type="number" pos:line="31" pos:column="24">1<pos:position pos:line="31" pos:column="25"/></literal></expr>]<pos:position pos:line="31" pos:column="26"/></index></name> <operator pos:line="31" pos:column="27">==<pos:position pos:line="31" pos:column="29"/></operator> <literal type="char" pos:line="31" pos:column="30">'\n'<pos:position pos:line="31" pos:column="34"/></literal></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="17">line<pos:position pos:line="32" pos:column="21"/></name><index pos:line="32" pos:column="21">[<expr><name pos:line="32" pos:column="22">len<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">-<pos:position pos:line="32" pos:column="27"/></operator> <literal type="number" pos:line="32" pos:column="28">1<pos:position pos:line="32" pos:column="29"/></literal></expr>]<pos:position pos:line="32" pos:column="30"/></index></name> <operator pos:line="32" pos:column="31">=<pos:position pos:line="32" pos:column="32"/></operator> <literal type="number" pos:line="32" pos:column="33">0<pos:position pos:line="32" pos:column="34"/></literal></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="33" pos:column="9">line<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">+=<pos:position pos:line="33" pos:column="16"/></operator> <literal type="number" pos:line="33" pos:column="17">42<pos:position pos:line="33" pos:column="19"/></literal></expr>;<pos:position pos:line="33" pos:column="20"/></expr_stmt>

	<comment type="block" pos:line="35" pos:column="9">/*
	 * At this point, line points at the beginning of comment e.g.
	 * "branch 'frotz' of git://that/repository.git".
	 * Find the repository name and point it with src.
	 */</comment>
	<expr_stmt><expr><name pos:line="40" pos:column="9">src<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">=<pos:position pos:line="40" pos:column="14"/></operator> <call><name pos:line="40" pos:column="15">strstr<pos:position pos:line="40" pos:column="21"/></name><argument_list pos:line="40" pos:column="21">(<argument><expr><name pos:line="40" pos:column="22">line<pos:position pos:line="40" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="28">" of "<pos:position pos:line="40" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt>
	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">src<pos:position pos:line="41" pos:column="16"/></name></expr>)<pos:position pos:line="41" pos:column="17"/></condition><then pos:line="41" pos:column="17"> <block pos:line="41" pos:column="18">{
		<expr_stmt><expr><operator pos:line="42" pos:column="17">*<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">src<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">=<pos:position pos:line="42" pos:column="23"/></operator> <literal type="number" pos:line="42" pos:column="24">0<pos:position pos:line="42" pos:column="25"/></literal></expr>;<pos:position pos:line="42" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">src<pos:position pos:line="43" pos:column="20"/></name> <operator pos:line="43" pos:column="21">+=<pos:position pos:line="43" pos:column="23"/></operator> <literal type="number" pos:line="43" pos:column="24">4<pos:position pos:line="43" pos:column="25"/></literal></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="44" pos:column="17">pulling_head<pos:position pos:line="44" pos:column="29"/></name> <operator pos:line="44" pos:column="30">=<pos:position pos:line="44" pos:column="31"/></operator> <literal type="number" pos:line="44" pos:column="32">0<pos:position pos:line="44" pos:column="33"/></literal></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></then> <else pos:line="45" pos:column="11">else <block pos:line="45" pos:column="16">{
		<expr_stmt><expr><name pos:line="46" pos:column="17">src<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">line<pos:position pos:line="46" pos:column="27"/></name></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="47" pos:column="17">pulling_head<pos:position pos:line="47" pos:column="29"/></name> <operator pos:line="47" pos:column="30">=<pos:position pos:line="47" pos:column="31"/></operator> <literal type="number" pos:line="47" pos:column="32">1<pos:position pos:line="47" pos:column="33"/></literal></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name pos:line="50" pos:column="9">item<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <call><name pos:line="50" pos:column="16">unsorted_string_list_lookup<pos:position pos:line="50" pos:column="43"/></name><argument_list pos:line="50" pos:column="43">(<argument><expr><operator pos:line="50" pos:column="44">&amp;<pos:position pos:line="50" pos:column="49"/></operator><name pos:line="50" pos:column="45">srcs<pos:position pos:line="50" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="51">src<pos:position pos:line="50" pos:column="54"/></name></expr></argument>)<pos:position pos:line="50" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="56"/></expr_stmt>
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><operator pos:line="51" pos:column="13">!<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">item<pos:position pos:line="51" pos:column="18"/></name></expr>)<pos:position pos:line="51" pos:column="19"/></condition><then pos:line="51" pos:column="19"> <block pos:line="51" pos:column="20">{
		<expr_stmt><expr><name pos:line="52" pos:column="17">item<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <call><name pos:line="52" pos:column="24">string_list_append<pos:position pos:line="52" pos:column="42"/></name><argument_list pos:line="52" pos:column="42">(<argument><expr><operator pos:line="52" pos:column="43">&amp;<pos:position pos:line="52" pos:column="48"/></operator><name pos:line="52" pos:column="44">srcs<pos:position pos:line="52" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="50">src<pos:position pos:line="52" pos:column="53"/></name></expr></argument>)<pos:position pos:line="52" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="53" pos:column="17">item<pos:position pos:line="53" pos:column="21"/></name><operator pos:line="53" pos:column="21">-&gt;<pos:position pos:line="53" pos:column="26"/></operator><name pos:line="53" pos:column="23">util<pos:position pos:line="53" pos:column="27"/></name></name> <operator pos:line="53" pos:column="28">=<pos:position pos:line="53" pos:column="29"/></operator> <call><name pos:line="53" pos:column="30">xcalloc<pos:position pos:line="53" pos:column="37"/></name><argument_list pos:line="53" pos:column="37">(<argument><expr><literal type="number" pos:line="53" pos:column="38">1<pos:position pos:line="53" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="41">sizeof<argument_list pos:line="53" pos:column="47">(<argument><expr pos:line="53" pos:column="48">struct <name pos:line="53" pos:column="55">src_data<pos:position pos:line="53" pos:column="63"/></name></expr></argument>)<pos:position pos:line="53" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">init_src_data<pos:position pos:line="54" pos:column="30"/></name><argument_list pos:line="54" pos:column="30">(<argument><expr><name><name pos:line="54" pos:column="31">item<pos:position pos:line="54" pos:column="35"/></name><operator pos:line="54" pos:column="35">-&gt;<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="37">util<pos:position pos:line="54" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="56" pos:column="9">src_data<pos:position pos:line="56" pos:column="17"/></name> <operator pos:line="56" pos:column="18">=<pos:position pos:line="56" pos:column="19"/></operator> <name><name pos:line="56" pos:column="20">item<pos:position pos:line="56" pos:column="24"/></name><operator pos:line="56" pos:column="24">-&gt;<pos:position pos:line="56" pos:column="29"/></operator><name pos:line="56" pos:column="26">util<pos:position pos:line="56" pos:column="30"/></name></name></expr>;<pos:position pos:line="56" pos:column="31"/></expr_stmt>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">pulling_head<pos:position pos:line="58" pos:column="25"/></name></expr>)<pos:position pos:line="58" pos:column="26"/></condition><then pos:line="58" pos:column="26"> <block pos:line="58" pos:column="27">{
		<expr_stmt><expr><name pos:line="59" pos:column="17">origin<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <name pos:line="59" pos:column="26">src<pos:position pos:line="59" pos:column="29"/></name></expr>;<pos:position pos:line="59" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="60" pos:column="17">src_data<pos:position pos:line="60" pos:column="25"/></name><operator pos:line="60" pos:column="25">-&gt;<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="27">head_status<pos:position pos:line="60" pos:column="38"/></name></name> <operator pos:line="60" pos:column="39">|=<pos:position pos:line="60" pos:column="41"/></operator> <literal type="number" pos:line="60" pos:column="42">1<pos:position pos:line="60" pos:column="43"/></literal></expr>;<pos:position pos:line="60" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="61" pos:column="10"/></block></then> <elseif pos:line="61" pos:column="11">else <if pos:line="61" pos:column="16">if <condition pos:line="61" pos:column="19">(<expr><call><name pos:line="61" pos:column="20">starts_with<pos:position pos:line="61" pos:column="31"/></name><argument_list pos:line="61" pos:column="31">(<argument><expr><name pos:line="61" pos:column="32">line<pos:position pos:line="61" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="38">"branch "<pos:position pos:line="61" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="49"/></condition><then pos:line="61" pos:column="49"> <block pos:line="61" pos:column="50">{
		<expr_stmt><expr><name><name pos:line="62" pos:column="17">origin_data<pos:position pos:line="62" pos:column="28"/></name><operator pos:line="62" pos:column="28">-&gt;<pos:position pos:line="62" pos:column="33"/></operator><name pos:line="62" pos:column="30">is_local_branch<pos:position pos:line="62" pos:column="45"/></name></name> <operator pos:line="62" pos:column="46">=<pos:position pos:line="62" pos:column="47"/></operator> <literal type="number" pos:line="62" pos:column="48">1<pos:position pos:line="62" pos:column="49"/></literal></expr>;<pos:position pos:line="62" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name pos:line="63" pos:column="17">origin<pos:position pos:line="63" pos:column="23"/></name> <operator pos:line="63" pos:column="24">=<pos:position pos:line="63" pos:column="25"/></operator> <name pos:line="63" pos:column="26">line<pos:position pos:line="63" pos:column="30"/></name> <operator pos:line="63" pos:column="31">+<pos:position pos:line="63" pos:column="32"/></operator> <literal type="number" pos:line="63" pos:column="33">7<pos:position pos:line="63" pos:column="34"/></literal></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">string_list_append<pos:position pos:line="64" pos:column="35"/></name><argument_list pos:line="64" pos:column="35">(<argument><expr><operator pos:line="64" pos:column="36">&amp;<pos:position pos:line="64" pos:column="41"/></operator><name><name pos:line="64" pos:column="37">src_data<pos:position pos:line="64" pos:column="45"/></name><operator pos:line="64" pos:column="45">-&gt;<pos:position pos:line="64" pos:column="50"/></operator><name pos:line="64" pos:column="47">branch<pos:position pos:line="64" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="55">origin<pos:position pos:line="64" pos:column="61"/></name></expr></argument>)<pos:position pos:line="64" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="65" pos:column="17">src_data<pos:position pos:line="65" pos:column="25"/></name><operator pos:line="65" pos:column="25">-&gt;<pos:position pos:line="65" pos:column="30"/></operator><name pos:line="65" pos:column="27">head_status<pos:position pos:line="65" pos:column="38"/></name></name> <operator pos:line="65" pos:column="39">|=<pos:position pos:line="65" pos:column="41"/></operator> <literal type="number" pos:line="65" pos:column="42">2<pos:position pos:line="65" pos:column="43"/></literal></expr>;<pos:position pos:line="65" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if></elseif> <elseif pos:line="66" pos:column="11">else <if pos:line="66" pos:column="16">if <condition pos:line="66" pos:column="19">(<expr><call><name pos:line="66" pos:column="20">starts_with<pos:position pos:line="66" pos:column="31"/></name><argument_list pos:line="66" pos:column="31">(<argument><expr><name pos:line="66" pos:column="32">line<pos:position pos:line="66" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="38">"tag "<pos:position pos:line="66" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="46"/></condition><then pos:line="66" pos:column="46"> <block pos:line="66" pos:column="47">{
		<expr_stmt><expr><name pos:line="67" pos:column="17">origin<pos:position pos:line="67" pos:column="23"/></name> <operator pos:line="67" pos:column="24">=<pos:position pos:line="67" pos:column="25"/></operator> <name pos:line="67" pos:column="26">line<pos:position pos:line="67" pos:column="30"/></name></expr>;<pos:position pos:line="67" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">string_list_append<pos:position pos:line="68" pos:column="35"/></name><argument_list pos:line="68" pos:column="35">(<argument><expr><operator pos:line="68" pos:column="36">&amp;<pos:position pos:line="68" pos:column="41"/></operator><name><name pos:line="68" pos:column="37">src_data<pos:position pos:line="68" pos:column="45"/></name><operator pos:line="68" pos:column="45">-&gt;<pos:position pos:line="68" pos:column="50"/></operator><name pos:line="68" pos:column="47">tag<pos:position pos:line="68" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="52">origin<pos:position pos:line="68" pos:column="58"/></name> <operator pos:line="68" pos:column="59">+<pos:position pos:line="68" pos:column="60"/></operator> <literal type="number" pos:line="68" pos:column="61">4<pos:position pos:line="68" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="69" pos:column="17">src_data<pos:position pos:line="69" pos:column="25"/></name><operator pos:line="69" pos:column="25">-&gt;<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="27">head_status<pos:position pos:line="69" pos:column="38"/></name></name> <operator pos:line="69" pos:column="39">|=<pos:position pos:line="69" pos:column="41"/></operator> <literal type="number" pos:line="69" pos:column="42">2<pos:position pos:line="69" pos:column="43"/></literal></expr>;<pos:position pos:line="69" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="70" pos:column="10"/></block></then></if></elseif> <elseif pos:line="70" pos:column="11">else <if pos:line="70" pos:column="16">if <condition pos:line="70" pos:column="19">(<expr><call><name pos:line="70" pos:column="20">skip_prefix<pos:position pos:line="70" pos:column="31"/></name><argument_list pos:line="70" pos:column="31">(<argument><expr><name pos:line="70" pos:column="32">line<pos:position pos:line="70" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="38">"remote-tracking branch "<pos:position pos:line="70" pos:column="63"/></literal></expr></argument>, <argument><expr><operator pos:line="70" pos:column="65">&amp;<pos:position pos:line="70" pos:column="70"/></operator><name pos:line="70" pos:column="66">origin<pos:position pos:line="70" pos:column="72"/></name></expr></argument>)<pos:position pos:line="70" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="74"/></condition><then pos:line="70" pos:column="74"> <block pos:line="70" pos:column="75">{
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">string_list_append<pos:position pos:line="71" pos:column="35"/></name><argument_list pos:line="71" pos:column="35">(<argument><expr><operator pos:line="71" pos:column="36">&amp;<pos:position pos:line="71" pos:column="41"/></operator><name><name pos:line="71" pos:column="37">src_data<pos:position pos:line="71" pos:column="45"/></name><operator pos:line="71" pos:column="45">-&gt;<pos:position pos:line="71" pos:column="50"/></operator><name pos:line="71" pos:column="47">r_branch<pos:position pos:line="71" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="57">origin<pos:position pos:line="71" pos:column="63"/></name></expr></argument>)<pos:position pos:line="71" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="72" pos:column="17">src_data<pos:position pos:line="72" pos:column="25"/></name><operator pos:line="72" pos:column="25">-&gt;<pos:position pos:line="72" pos:column="30"/></operator><name pos:line="72" pos:column="27">head_status<pos:position pos:line="72" pos:column="38"/></name></name> <operator pos:line="72" pos:column="39">|=<pos:position pos:line="72" pos:column="41"/></operator> <literal type="number" pos:line="72" pos:column="42">2<pos:position pos:line="72" pos:column="43"/></literal></expr>;<pos:position pos:line="72" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="73" pos:column="10"/></block></then></if></elseif> <else pos:line="73" pos:column="11">else <block pos:line="73" pos:column="16">{
		<expr_stmt><expr><name pos:line="74" pos:column="17">origin<pos:position pos:line="74" pos:column="23"/></name> <operator pos:line="74" pos:column="24">=<pos:position pos:line="74" pos:column="25"/></operator> <name pos:line="74" pos:column="26">src<pos:position pos:line="74" pos:column="29"/></name></expr>;<pos:position pos:line="74" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="75" pos:column="17">string_list_append<pos:position pos:line="75" pos:column="35"/></name><argument_list pos:line="75" pos:column="35">(<argument><expr><operator pos:line="75" pos:column="36">&amp;<pos:position pos:line="75" pos:column="41"/></operator><name><name pos:line="75" pos:column="37">src_data<pos:position pos:line="75" pos:column="45"/></name><operator pos:line="75" pos:column="45">-&gt;<pos:position pos:line="75" pos:column="50"/></operator><name pos:line="75" pos:column="47">generic<pos:position pos:line="75" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="56">line<pos:position pos:line="75" pos:column="60"/></name></expr></argument>)<pos:position pos:line="75" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="76" pos:column="17">src_data<pos:position pos:line="76" pos:column="25"/></name><operator pos:line="76" pos:column="25">-&gt;<pos:position pos:line="76" pos:column="30"/></operator><name pos:line="76" pos:column="27">head_status<pos:position pos:line="76" pos:column="38"/></name></name> <operator pos:line="76" pos:column="39">|=<pos:position pos:line="76" pos:column="41"/></operator> <literal type="number" pos:line="76" pos:column="42">2<pos:position pos:line="76" pos:column="43"/></literal></expr>;<pos:position pos:line="76" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="77" pos:column="10"/></block></else></if>

	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><operator pos:line="79" pos:column="13">!<pos:position pos:line="79" pos:column="14"/></operator><call><name pos:line="79" pos:column="14">strcmp<pos:position pos:line="79" pos:column="20"/></name><argument_list pos:line="79" pos:column="20">(<argument><expr><literal type="string" pos:line="79" pos:column="21">"."<pos:position pos:line="79" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="26">src<pos:position pos:line="79" pos:column="29"/></name></expr></argument>)<pos:position pos:line="79" pos:column="30"/></argument_list></call> <operator pos:line="79" pos:column="31">||<pos:position pos:line="79" pos:column="33"/></operator> <operator pos:line="79" pos:column="34">!<pos:position pos:line="79" pos:column="35"/></operator><call><name pos:line="79" pos:column="35">strcmp<pos:position pos:line="79" pos:column="41"/></name><argument_list pos:line="79" pos:column="41">(<argument><expr><name pos:line="79" pos:column="42">src<pos:position pos:line="79" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="47">origin<pos:position pos:line="79" pos:column="53"/></name></expr></argument>)<pos:position pos:line="79" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="55"/></condition><then pos:line="79" pos:column="55"> <block pos:line="79" pos:column="56">{
		<decl_stmt><decl><type><name pos:line="80" pos:column="17">int<pos:position pos:line="80" pos:column="20"/></name></type> <name pos:line="80" pos:column="21">len<pos:position pos:line="80" pos:column="24"/></name> <init pos:line="80" pos:column="25">= <expr><call><name pos:line="80" pos:column="27">strlen<pos:position pos:line="80" pos:column="33"/></name><argument_list pos:line="80" pos:column="33">(<argument><expr><name pos:line="80" pos:column="34">origin<pos:position pos:line="80" pos:column="40"/></name></expr></argument>)<pos:position pos:line="80" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="80" pos:column="42"/></decl_stmt>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name><name pos:line="81" pos:column="21">origin<pos:position pos:line="81" pos:column="27"/></name><index pos:line="81" pos:column="27">[<expr><literal type="number" pos:line="81" pos:column="28">0<pos:position pos:line="81" pos:column="29"/></literal></expr>]<pos:position pos:line="81" pos:column="30"/></index></name> <operator pos:line="81" pos:column="31">==<pos:position pos:line="81" pos:column="33"/></operator> <literal type="char" pos:line="81" pos:column="34">'\''<pos:position pos:line="81" pos:column="38"/></literal> <operator pos:line="81" pos:column="39">&amp;&amp;<pos:position pos:line="81" pos:column="49"/></operator> <name><name pos:line="81" pos:column="42">origin<pos:position pos:line="81" pos:column="48"/></name><index pos:line="81" pos:column="48">[<expr><name pos:line="81" pos:column="49">len<pos:position pos:line="81" pos:column="52"/></name> <operator pos:line="81" pos:column="53">-<pos:position pos:line="81" pos:column="54"/></operator> <literal type="number" pos:line="81" pos:column="55">1<pos:position pos:line="81" pos:column="56"/></literal></expr>]<pos:position pos:line="81" pos:column="57"/></index></name> <operator pos:line="81" pos:column="58">==<pos:position pos:line="81" pos:column="60"/></operator> <literal type="char" pos:line="81" pos:column="61">'\''<pos:position pos:line="81" pos:column="65"/></literal></expr>)<pos:position pos:line="81" pos:column="66"/></condition><then pos:line="81" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><name pos:line="82" pos:column="25">origin<pos:position pos:line="82" pos:column="31"/></name> <operator pos:line="82" pos:column="32">=<pos:position pos:line="82" pos:column="33"/></operator> <call><name pos:line="82" pos:column="34">xmemdupz<pos:position pos:line="82" pos:column="42"/></name><argument_list pos:line="82" pos:column="42">(<argument><expr><name pos:line="82" pos:column="43">origin<pos:position pos:line="82" pos:column="49"/></name> <operator pos:line="82" pos:column="50">+<pos:position pos:line="82" pos:column="51"/></operator> <literal type="number" pos:line="82" pos:column="52">1<pos:position pos:line="82" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="55">len<pos:position pos:line="82" pos:column="58"/></name> <operator pos:line="82" pos:column="59">-<pos:position pos:line="82" pos:column="60"/></operator> <literal type="number" pos:line="82" pos:column="61">2<pos:position pos:line="82" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="64"/></expr_stmt></block></then></if>
	}<pos:position pos:line="83" pos:column="10"/></block></then> <else pos:line="83" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="84" pos:column="17">origin<pos:position pos:line="84" pos:column="23"/></name> <operator pos:line="84" pos:column="24">=<pos:position pos:line="84" pos:column="25"/></operator> <call><name pos:line="84" pos:column="26">xstrfmt<pos:position pos:line="84" pos:column="33"/></name><argument_list pos:line="84" pos:column="33">(<argument><expr><literal type="string" pos:line="84" pos:column="34">"%s of %s"<pos:position pos:line="84" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="46">origin<pos:position pos:line="84" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="54">src<pos:position pos:line="84" pos:column="57"/></name></expr></argument>)<pos:position pos:line="84" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="59"/></expr_stmt></block></else></if>
	<if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><call><name pos:line="85" pos:column="13">strcmp<pos:position pos:line="85" pos:column="19"/></name><argument_list pos:line="85" pos:column="19">(<argument><expr><literal type="string" pos:line="85" pos:column="20">"."<pos:position pos:line="85" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="25">src<pos:position pos:line="85" pos:column="28"/></name></expr></argument>)<pos:position pos:line="85" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="30"/></condition><then pos:line="85" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="86" pos:column="17">origin_data<pos:position pos:line="86" pos:column="28"/></name><operator pos:line="86" pos:column="28">-&gt;<pos:position pos:line="86" pos:column="33"/></operator><name pos:line="86" pos:column="30">is_local_branch<pos:position pos:line="86" pos:column="45"/></name></name> <operator pos:line="86" pos:column="46">=<pos:position pos:line="86" pos:column="47"/></operator> <literal type="number" pos:line="86" pos:column="48">0<pos:position pos:line="86" pos:column="49"/></literal></expr>;<pos:position pos:line="86" pos:column="50"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="87" pos:column="9">string_list_append<pos:position pos:line="87" pos:column="27"/></name><argument_list pos:line="87" pos:column="27">(<argument><expr><operator pos:line="87" pos:column="28">&amp;<pos:position pos:line="87" pos:column="33"/></operator><name pos:line="87" pos:column="29">origins<pos:position pos:line="87" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="38">origin<pos:position pos:line="87" pos:column="44"/></name></expr></argument>)<pos:position pos:line="87" pos:column="45"/></argument_list></call><operator pos:line="87" pos:column="45">-&gt;<pos:position pos:line="87" pos:column="50"/></operator><name pos:line="87" pos:column="47">util<pos:position pos:line="87" pos:column="51"/></name> <operator pos:line="87" pos:column="52">=<pos:position pos:line="87" pos:column="53"/></operator> <name pos:line="87" pos:column="54">origin_data<pos:position pos:line="87" pos:column="65"/></name></expr>;<pos:position pos:line="87" pos:column="66"/></expr_stmt>
	<return pos:line="88" pos:column="9">return <expr><literal type="number" pos:line="88" pos:column="16">0<pos:position pos:line="88" pos:column="17"/></literal></expr>;<pos:position pos:line="88" pos:column="18"/></return>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
