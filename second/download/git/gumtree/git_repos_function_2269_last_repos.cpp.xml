<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2269_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fill_pack_entry<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">unsigned<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">sha1<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
			   <parameter><decl><type><name><name pos:line="2" pos:column="28">struct<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">pack_entry<pos:position pos:line="2" pos:column="45"/></name></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">e<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>,
			   <parameter><decl><type><name><name pos:line="3" pos:column="28">struct<pos:position pos:line="3" pos:column="34"/></name> <name pos:line="3" pos:column="35">packed_git<pos:position pos:line="3" pos:column="45"/></name></name> <modifier pos:line="3" pos:column="46">*<pos:position pos:line="3" pos:column="47"/></modifier></type><name pos:line="3" pos:column="47">p<pos:position pos:line="3" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="49"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">off_t<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">offset<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">p<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">-&gt;<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="16">num_bad_objects<pos:position pos:line="7" pos:column="31"/></name></name></expr>)<pos:position pos:line="7" pos:column="32"/></condition><then pos:line="7" pos:column="32"> <block pos:line="7" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">unsigned<pos:position pos:line="8" pos:column="25"/></name></type> <name pos:line="8" pos:column="26">i<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
		<for pos:line="9" pos:column="17">for <control pos:line="9" pos:column="21">(<init><expr><name pos:line="9" pos:column="22">i<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">=<pos:position pos:line="9" pos:column="25"/></operator> <literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal></expr>;<pos:position pos:line="9" pos:column="28"/></init> <condition><expr><name pos:line="9" pos:column="29">i<pos:position pos:line="9" pos:column="30"/></name> <operator pos:line="9" pos:column="31">&lt;<pos:position pos:line="9" pos:column="35"/></operator> <name><name pos:line="9" pos:column="33">p<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">-&gt;<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="36">num_bad_objects<pos:position pos:line="9" pos:column="51"/></name></name></expr>;<pos:position pos:line="9" pos:column="52"/></condition> <incr><expr><name pos:line="9" pos:column="53">i<pos:position pos:line="9" pos:column="54"/></name><operator pos:line="9" pos:column="54">++<pos:position pos:line="9" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="57"/></control>
			<block type="pseudo"><if pos:line="10" pos:column="25">if <condition pos:line="10" pos:column="28">(<expr><operator pos:line="10" pos:column="29">!<pos:position pos:line="10" pos:column="30"/></operator><call><name pos:line="10" pos:column="30">hashcmp<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">sha1<pos:position pos:line="10" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="44">p<pos:position pos:line="10" pos:column="45"/></name><operator pos:line="10" pos:column="45">-&gt;<pos:position pos:line="10" pos:column="50"/></operator><name pos:line="10" pos:column="47">bad_object_sha1<pos:position pos:line="10" pos:column="62"/></name></name> <operator pos:line="10" pos:column="63">+<pos:position pos:line="10" pos:column="64"/></operator> <literal type="number" pos:line="10" pos:column="65">20<pos:position pos:line="10" pos:column="67"/></literal> <operator pos:line="10" pos:column="68">*<pos:position pos:line="10" pos:column="69"/></operator> <name pos:line="10" pos:column="70">i<pos:position pos:line="10" pos:column="71"/></name></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="73"/></condition><then pos:line="10" pos:column="73">
				<block type="pseudo"><return pos:line="11" pos:column="33">return <expr><literal type="number" pos:line="11" pos:column="40">0<pos:position pos:line="11" pos:column="41"/></literal></expr>;<pos:position pos:line="11" pos:column="42"/></return></block></then></if></block></for>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="14" pos:column="9">offset<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name pos:line="14" pos:column="18">find_pack_entry_one<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><name pos:line="14" pos:column="38">sha1<pos:position pos:line="14" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="44">p<pos:position pos:line="14" pos:column="45"/></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">offset<pos:position pos:line="15" pos:column="20"/></name></expr>)<pos:position pos:line="15" pos:column="21"/></condition><then pos:line="15" pos:column="21">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><literal type="number" pos:line="16" pos:column="24">0<pos:position pos:line="16" pos:column="25"/></literal></expr>;<pos:position pos:line="16" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="18" pos:column="9">/*
	 * We are about to tell the caller where they can locate the
	 * requested object.  We better make sure the packfile is
	 * still here and can be accessed before supplying that
	 * answer, as it may have been deleted since the index was
	 * loaded!
	 */</comment>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><call><name pos:line="25" pos:column="14">is_pack_valid<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">p<pos:position pos:line="25" pos:column="29"/></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="31"/></condition><then pos:line="25" pos:column="31">
		<block type="pseudo"><return pos:line="26" pos:column="17">return <expr><literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name><name pos:line="27" pos:column="9">e<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">offset<pos:position pos:line="27" pos:column="18"/></name></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <name pos:line="27" pos:column="21">offset<pos:position pos:line="27" pos:column="27"/></name></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">e<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">p<pos:position pos:line="28" pos:column="13"/></name></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <name pos:line="28" pos:column="16">p<pos:position pos:line="28" pos:column="17"/></name></expr>;<pos:position pos:line="28" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">hashcpy<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name><name pos:line="29" pos:column="17">e<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">sha1<pos:position pos:line="29" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="26">sha1<pos:position pos:line="29" pos:column="30"/></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
	<return pos:line="30" pos:column="9">return <expr><literal type="number" pos:line="30" pos:column="16">1<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
