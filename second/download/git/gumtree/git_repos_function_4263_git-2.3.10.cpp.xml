<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4263_git-2.3.10.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_check_ignore<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">argc<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">argv<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">prefix<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">num_ignored<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">dir_struct<pos:position pos:line="4" pos:column="26"/></name></name></type> <name pos:line="4" pos:column="27">dir<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">git_config<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">(<argument><expr><name pos:line="6" pos:column="20">git_default_config<pos:position pos:line="6" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="40">NULL<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">argc<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <call><name pos:line="8" pos:column="16">parse_options<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name pos:line="8" pos:column="30">argc<pos:position pos:line="8" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="36">argv<pos:position pos:line="8" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="42">prefix<pos:position pos:line="8" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="50">check_ignore_options<pos:position pos:line="8" pos:column="70"/></name></expr></argument>,
			     <argument><expr><name pos:line="9" pos:column="30">check_ignore_usage<pos:position pos:line="9" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="50">0<pos:position pos:line="9" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="53"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">stdin_paths<pos:position pos:line="11" pos:column="24"/></name></expr>)<pos:position pos:line="11" pos:column="25"/></condition><then pos:line="11" pos:column="25"> <block pos:line="11" pos:column="26">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">argc<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">&gt;<pos:position pos:line="12" pos:column="30"/></operator> <literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">die<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><call><name pos:line="13" pos:column="29">_<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><literal type="string" pos:line="13" pos:column="31">"cannot specify pathnames with --stdin"<pos:position pos:line="13" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="73"/></expr_stmt></block></then></if>
	}<pos:position pos:line="14" pos:column="10"/></block></then> <else pos:line="14" pos:column="11">else <block pos:line="14" pos:column="16">{
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">nul_term_line<pos:position pos:line="15" pos:column="34"/></name></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">die<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><call><name pos:line="16" pos:column="29">_<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><literal type="string" pos:line="16" pos:column="31">"-z only makes sense with --stdin"<pos:position pos:line="16" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="68"/></expr_stmt></block></then></if>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">argc<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">==<pos:position pos:line="17" pos:column="28"/></operator> <literal type="number" pos:line="17" pos:column="29">0<pos:position pos:line="17" pos:column="30"/></literal></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="25">die<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><call><name pos:line="18" pos:column="29">_<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><literal type="string" pos:line="18" pos:column="31">"no path specified"<pos:position pos:line="18" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt></block></then></if>
	}<pos:position pos:line="19" pos:column="10"/></block></else></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">quiet<pos:position pos:line="20" pos:column="18"/></name></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19"> <block pos:line="20" pos:column="20">{
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">argc<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">&gt;<pos:position pos:line="21" pos:column="30"/></operator> <literal type="number" pos:line="21" pos:column="28">1<pos:position pos:line="21" pos:column="29"/></literal></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">die<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><call><name pos:line="22" pos:column="29">_<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><literal type="string" pos:line="22" pos:column="31">"--quiet is only valid with a single pathname"<pos:position pos:line="22" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="80"/></expr_stmt></block></then></if>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">verbose<pos:position pos:line="23" pos:column="28"/></name></expr>)<pos:position pos:line="23" pos:column="29"/></condition><then pos:line="23" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">die<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><call><name pos:line="24" pos:column="29">_<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><literal type="string" pos:line="24" pos:column="31">"cannot have both --quiet and --verbose"<pos:position pos:line="24" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="74"/></expr_stmt></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">show_non_matching<pos:position pos:line="26" pos:column="30"/></name> <operator pos:line="26" pos:column="31">&amp;&amp;<pos:position pos:line="26" pos:column="41"/></operator> <operator pos:line="26" pos:column="34">!<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="35">verbose<pos:position pos:line="26" pos:column="42"/></name></expr>)<pos:position pos:line="26" pos:column="43"/></condition><then pos:line="26" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">die<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><call><name pos:line="27" pos:column="21">_<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><literal type="string" pos:line="27" pos:column="23">"--non-matching is only valid with --verbose"<pos:position pos:line="27" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="71"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="29" pos:column="9">/* read_cache() is only necessary so we can watch out for submodules. */</comment>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">no_index<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">&amp;&amp;<pos:position pos:line="30" pos:column="33"/></operator> <call><name pos:line="30" pos:column="26">read_cache<pos:position pos:line="30" pos:column="36"/></name><argument_list pos:line="30" pos:column="36">()<pos:position pos:line="30" pos:column="38"/></argument_list></call> <operator pos:line="30" pos:column="39">&lt;<pos:position pos:line="30" pos:column="43"/></operator> <literal type="number" pos:line="30" pos:column="41">0<pos:position pos:line="30" pos:column="42"/></literal></expr>)<pos:position pos:line="30" pos:column="43"/></condition><then pos:line="30" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">die<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><call><name pos:line="31" pos:column="21">_<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><literal type="string" pos:line="31" pos:column="23">"index file corrupt"<pos:position pos:line="31" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="46"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">memset<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><operator pos:line="33" pos:column="16">&amp;<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="17">dir<pos:position pos:line="33" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="22">0<pos:position pos:line="33" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="25">sizeof<argument_list pos:line="33" pos:column="31">(<argument><expr><name pos:line="33" pos:column="32">dir<pos:position pos:line="33" pos:column="35"/></name></expr></argument>)<pos:position pos:line="33" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">setup_standard_excludes<pos:position pos:line="34" pos:column="32"/></name><argument_list pos:line="34" pos:column="32">(<argument><expr><operator pos:line="34" pos:column="33">&amp;<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="34">dir<pos:position pos:line="34" pos:column="37"/></name></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">stdin_paths<pos:position pos:line="36" pos:column="24"/></name></expr>)<pos:position pos:line="36" pos:column="25"/></condition><then pos:line="36" pos:column="25"> <block pos:line="36" pos:column="26">{
		<expr_stmt><expr><name pos:line="37" pos:column="17">num_ignored<pos:position pos:line="37" pos:column="28"/></name> <operator pos:line="37" pos:column="29">=<pos:position pos:line="37" pos:column="30"/></operator> <call><name pos:line="37" pos:column="31">check_ignore_stdin_paths<pos:position pos:line="37" pos:column="55"/></name><argument_list pos:line="37" pos:column="55">(<argument><expr><operator pos:line="37" pos:column="56">&amp;<pos:position pos:line="37" pos:column="61"/></operator><name pos:line="37" pos:column="57">dir<pos:position pos:line="37" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="62">prefix<pos:position pos:line="37" pos:column="68"/></name></expr></argument>)<pos:position pos:line="37" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="70"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></then> <else pos:line="38" pos:column="11">else <block pos:line="38" pos:column="16">{
		<expr_stmt><expr><name pos:line="39" pos:column="17">num_ignored<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">=<pos:position pos:line="39" pos:column="30"/></operator> <call><name pos:line="39" pos:column="31">check_ignore<pos:position pos:line="39" pos:column="43"/></name><argument_list pos:line="39" pos:column="43">(<argument><expr><operator pos:line="39" pos:column="44">&amp;<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="45">dir<pos:position pos:line="39" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="50">prefix<pos:position pos:line="39" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="58">argc<pos:position pos:line="39" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="64">argv<pos:position pos:line="39" pos:column="68"/></name></expr></argument>)<pos:position pos:line="39" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">maybe_flush_or_die<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><name pos:line="40" pos:column="36">stdout<pos:position pos:line="40" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="44">"ignore to stdout"<pos:position pos:line="40" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="64"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="43" pos:column="9">clear_directory<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><operator pos:line="43" pos:column="25">&amp;<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="26">dir<pos:position pos:line="43" pos:column="29"/></name></expr></argument>)<pos:position pos:line="43" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>

	<return pos:line="45" pos:column="9">return <expr><operator pos:line="45" pos:column="16">!<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">num_ignored<pos:position pos:line="45" pos:column="28"/></name></expr>;<pos:position pos:line="45" pos:column="29"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
