<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5774_git-2.1.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_credential<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">void<pos:position pos:line="1" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buf<pos:position pos:line="3" pos:column="17"/></name><index pos:line="3" pos:column="17">[<expr><literal type="number" pos:line="3" pos:column="18">1024<pos:position pos:line="3" pos:column="22"/></literal></expr>]<pos:position pos:line="3" pos:column="23"/></index></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

	<while pos:line="5" pos:column="9">while <condition pos:line="5" pos:column="15">(<expr><call><name pos:line="5" pos:column="16">fgets<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">(<argument><expr><name pos:line="5" pos:column="22">buf<pos:position pos:line="5" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="27">sizeof<argument_list pos:line="5" pos:column="33">(<argument><expr><name pos:line="5" pos:column="34">buf<pos:position pos:line="5" pos:column="37"/></name></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="5" pos:column="40">stdin<pos:position pos:line="5" pos:column="45"/></name></expr></argument>)<pos:position pos:line="5" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="47"/></condition> <block pos:line="5" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">char<pos:position pos:line="6" pos:column="21"/></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">v<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>

		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><call><name pos:line="8" pos:column="22">strcmp<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">buf<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="34">"\n"<pos:position pos:line="8" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="40"/></condition><then pos:line="8" pos:column="40">
			<block type="pseudo"><break pos:line="9" pos:column="25">break;<pos:position pos:line="9" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name><name pos:line="10" pos:column="17">buf<pos:position pos:line="10" pos:column="20"/></name><index pos:line="10" pos:column="20">[<expr><call><name pos:line="10" pos:column="21">strlen<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">buf<pos:position pos:line="10" pos:column="31"/></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call><operator pos:line="10" pos:column="32">-<pos:position pos:line="10" pos:column="33"/></operator><literal type="number" pos:line="10" pos:column="33">1<pos:position pos:line="10" pos:column="34"/></literal></expr>]<pos:position pos:line="10" pos:column="35"/></index></name> <operator pos:line="10" pos:column="36">=<pos:position pos:line="10" pos:column="37"/></operator> <literal type="char" pos:line="10" pos:column="38">'\0'<pos:position pos:line="10" pos:column="42"/></literal></expr>;<pos:position pos:line="10" pos:column="43"/></expr_stmt>

		<expr_stmt><expr><name pos:line="12" pos:column="17">v<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <call><name pos:line="12" pos:column="21">strchr<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">buf<pos:position pos:line="12" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="33">'='<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">v<pos:position pos:line="13" pos:column="23"/></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="25">die<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><literal type="string" pos:line="14" pos:column="29">"bad input: %s"<pos:position pos:line="14" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="46">buf<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt></block></then></if>
		<expr_stmt><expr><operator pos:line="15" pos:column="17">*<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">v<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">++<pos:position pos:line="15" pos:column="21"/></operator> <operator pos:line="15" pos:column="22">=<pos:position pos:line="15" pos:column="23"/></operator> <literal type="char" pos:line="15" pos:column="24">'\0'<pos:position pos:line="15" pos:column="28"/></literal></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><call><name pos:line="17" pos:column="22">strcmp<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">buf<pos:position pos:line="17" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="34">"protocol"<pos:position pos:line="17" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46"> <block pos:line="17" pos:column="47">{
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><operator pos:line="18" pos:column="29">!<pos:position pos:line="18" pos:column="30"/></operator><call><name pos:line="18" pos:column="30">strcmp<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">(<argument><expr><name pos:line="18" pos:column="37">v<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="40">"imap"<pos:position pos:line="18" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="48"/></condition><then pos:line="18" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="33">protocol<pos:position pos:line="19" pos:column="41"/></name> <operator pos:line="19" pos:column="42">=<pos:position pos:line="19" pos:column="43"/></operator> <name pos:line="19" pos:column="44">kSecProtocolTypeIMAP<pos:position pos:line="19" pos:column="64"/></name></expr>;<pos:position pos:line="19" pos:column="65"/></expr_stmt></block></then>
			<elseif pos:line="20" pos:column="25">else <if pos:line="20" pos:column="30">if <condition pos:line="20" pos:column="33">(<expr><operator pos:line="20" pos:column="34">!<pos:position pos:line="20" pos:column="35"/></operator><call><name pos:line="20" pos:column="35">strcmp<pos:position pos:line="20" pos:column="41"/></name><argument_list pos:line="20" pos:column="41">(<argument><expr><name pos:line="20" pos:column="42">v<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="45">"imaps"<pos:position pos:line="20" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="54"/></condition><then pos:line="20" pos:column="54">
				<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="33">protocol<pos:position pos:line="21" pos:column="41"/></name> <operator pos:line="21" pos:column="42">=<pos:position pos:line="21" pos:column="43"/></operator> <name pos:line="21" pos:column="44">kSecProtocolTypeIMAPS<pos:position pos:line="21" pos:column="65"/></name></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="22" pos:column="25">else <if pos:line="22" pos:column="30">if <condition pos:line="22" pos:column="33">(<expr><operator pos:line="22" pos:column="34">!<pos:position pos:line="22" pos:column="35"/></operator><call><name pos:line="22" pos:column="35">strcmp<pos:position pos:line="22" pos:column="41"/></name><argument_list pos:line="22" pos:column="41">(<argument><expr><name pos:line="22" pos:column="42">v<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="45">"ftp"<pos:position pos:line="22" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="52"/></condition><then pos:line="22" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="33">protocol<pos:position pos:line="23" pos:column="41"/></name> <operator pos:line="23" pos:column="42">=<pos:position pos:line="23" pos:column="43"/></operator> <name pos:line="23" pos:column="44">kSecProtocolTypeFTP<pos:position pos:line="23" pos:column="63"/></name></expr>;<pos:position pos:line="23" pos:column="64"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="24" pos:column="25">else <if pos:line="24" pos:column="30">if <condition pos:line="24" pos:column="33">(<expr><operator pos:line="24" pos:column="34">!<pos:position pos:line="24" pos:column="35"/></operator><call><name pos:line="24" pos:column="35">strcmp<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name pos:line="24" pos:column="42">v<pos:position pos:line="24" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="45">"ftps"<pos:position pos:line="24" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="53"/></condition><then pos:line="24" pos:column="53">
				<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="33">protocol<pos:position pos:line="25" pos:column="41"/></name> <operator pos:line="25" pos:column="42">=<pos:position pos:line="25" pos:column="43"/></operator> <name pos:line="25" pos:column="44">kSecProtocolTypeFTPS<pos:position pos:line="25" pos:column="64"/></name></expr>;<pos:position pos:line="25" pos:column="65"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="26" pos:column="25">else <if pos:line="26" pos:column="30">if <condition pos:line="26" pos:column="33">(<expr><operator pos:line="26" pos:column="34">!<pos:position pos:line="26" pos:column="35"/></operator><call><name pos:line="26" pos:column="35">strcmp<pos:position pos:line="26" pos:column="41"/></name><argument_list pos:line="26" pos:column="41">(<argument><expr><name pos:line="26" pos:column="42">v<pos:position pos:line="26" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="45">"https"<pos:position pos:line="26" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="54"/></condition><then pos:line="26" pos:column="54">
				<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="33">protocol<pos:position pos:line="27" pos:column="41"/></name> <operator pos:line="27" pos:column="42">=<pos:position pos:line="27" pos:column="43"/></operator> <name pos:line="27" pos:column="44">kSecProtocolTypeHTTPS<pos:position pos:line="27" pos:column="65"/></name></expr>;<pos:position pos:line="27" pos:column="66"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="28" pos:column="25">else <if pos:line="28" pos:column="30">if <condition pos:line="28" pos:column="33">(<expr><operator pos:line="28" pos:column="34">!<pos:position pos:line="28" pos:column="35"/></operator><call><name pos:line="28" pos:column="35">strcmp<pos:position pos:line="28" pos:column="41"/></name><argument_list pos:line="28" pos:column="41">(<argument><expr><name pos:line="28" pos:column="42">v<pos:position pos:line="28" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="45">"http"<pos:position pos:line="28" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="53"/></condition><then pos:line="28" pos:column="53">
				<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="33">protocol<pos:position pos:line="29" pos:column="41"/></name> <operator pos:line="29" pos:column="42">=<pos:position pos:line="29" pos:column="43"/></operator> <name pos:line="29" pos:column="44">kSecProtocolTypeHTTP<pos:position pos:line="29" pos:column="64"/></name></expr>;<pos:position pos:line="29" pos:column="65"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="30" pos:column="25">else <if pos:line="30" pos:column="30">if <condition pos:line="30" pos:column="33">(<expr><operator pos:line="30" pos:column="34">!<pos:position pos:line="30" pos:column="35"/></operator><call><name pos:line="30" pos:column="35">strcmp<pos:position pos:line="30" pos:column="41"/></name><argument_list pos:line="30" pos:column="41">(<argument><expr><name pos:line="30" pos:column="42">v<pos:position pos:line="30" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="45">"smtp"<pos:position pos:line="30" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53">
				<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="33">protocol<pos:position pos:line="31" pos:column="41"/></name> <operator pos:line="31" pos:column="42">=<pos:position pos:line="31" pos:column="43"/></operator> <name pos:line="31" pos:column="44">kSecProtocolTypeSMTP<pos:position pos:line="31" pos:column="64"/></name></expr>;<pos:position pos:line="31" pos:column="65"/></expr_stmt></block></then></if></elseif>
			<else pos:line="32" pos:column="25">else <comment type="block" pos:line="32" pos:column="30">/* we don't yet handle other protocols */</comment>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="33">exit<pos:position pos:line="33" pos:column="37"/></name><argument_list pos:line="33" pos:column="37">(<argument><expr><literal type="number" pos:line="33" pos:column="38">0<pos:position pos:line="33" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt></block></else></if>
		}<pos:position pos:line="34" pos:column="18"/></block></then>
		<elseif pos:line="35" pos:column="17">else <if pos:line="35" pos:column="22">if <condition pos:line="35" pos:column="25">(<expr><operator pos:line="35" pos:column="26">!<pos:position pos:line="35" pos:column="27"/></operator><call><name pos:line="35" pos:column="27">strcmp<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><name pos:line="35" pos:column="34">buf<pos:position pos:line="35" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="39">"host"<pos:position pos:line="35" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="47"/></condition><then pos:line="35" pos:column="47"> <block pos:line="35" pos:column="48">{
			<decl_stmt><decl><type><name pos:line="36" pos:column="25">char<pos:position pos:line="36" pos:column="29"/></name> <modifier pos:line="36" pos:column="30">*<pos:position pos:line="36" pos:column="31"/></modifier></type><name pos:line="36" pos:column="31">colon<pos:position pos:line="36" pos:column="36"/></name> <init pos:line="36" pos:column="37">= <expr><call><name pos:line="36" pos:column="39">strchr<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">(<argument><expr><name pos:line="36" pos:column="46">v<pos:position pos:line="36" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="36" pos:column="49">':'<pos:position pos:line="36" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="54"/></decl_stmt>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><name pos:line="37" pos:column="29">colon<pos:position pos:line="37" pos:column="34"/></name></expr>)<pos:position pos:line="37" pos:column="35"/></condition><then pos:line="37" pos:column="35"> <block pos:line="37" pos:column="36">{
				<expr_stmt><expr><operator pos:line="38" pos:column="33">*<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="34">colon<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">++<pos:position pos:line="38" pos:column="41"/></operator> <operator pos:line="38" pos:column="42">=<pos:position pos:line="38" pos:column="43"/></operator> <literal type="char" pos:line="38" pos:column="44">'\0'<pos:position pos:line="38" pos:column="48"/></literal></expr>;<pos:position pos:line="38" pos:column="49"/></expr_stmt>
				<expr_stmt><expr><name pos:line="39" pos:column="33">port<pos:position pos:line="39" pos:column="37"/></name> <operator pos:line="39" pos:column="38">=<pos:position pos:line="39" pos:column="39"/></operator> <call><name pos:line="39" pos:column="40">atoi<pos:position pos:line="39" pos:column="44"/></name><argument_list pos:line="39" pos:column="44">(<argument><expr><name pos:line="39" pos:column="45">colon<pos:position pos:line="39" pos:column="50"/></name></expr></argument>)<pos:position pos:line="39" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="52"/></expr_stmt>
			}<pos:position pos:line="40" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="41" pos:column="25">host<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">=<pos:position pos:line="41" pos:column="31"/></operator> <call><name pos:line="41" pos:column="32">xstrdup<pos:position pos:line="41" pos:column="39"/></name><argument_list pos:line="41" pos:column="39">(<argument><expr><name pos:line="41" pos:column="40">v<pos:position pos:line="41" pos:column="41"/></name></expr></argument>)<pos:position pos:line="41" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="43" pos:column="17">else <if pos:line="43" pos:column="22">if <condition pos:line="43" pos:column="25">(<expr><operator pos:line="43" pos:column="26">!<pos:position pos:line="43" pos:column="27"/></operator><call><name pos:line="43" pos:column="27">strcmp<pos:position pos:line="43" pos:column="33"/></name><argument_list pos:line="43" pos:column="33">(<argument><expr><name pos:line="43" pos:column="34">buf<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="39">"path"<pos:position pos:line="43" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="47"/></condition><then pos:line="43" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="25">path<pos:position pos:line="44" pos:column="29"/></name> <operator pos:line="44" pos:column="30">=<pos:position pos:line="44" pos:column="31"/></operator> <call><name pos:line="44" pos:column="32">xstrdup<pos:position pos:line="44" pos:column="39"/></name><argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">v<pos:position pos:line="44" pos:column="41"/></name></expr></argument>)<pos:position pos:line="44" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="43"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="45" pos:column="17">else <if pos:line="45" pos:column="22">if <condition pos:line="45" pos:column="25">(<expr><operator pos:line="45" pos:column="26">!<pos:position pos:line="45" pos:column="27"/></operator><call><name pos:line="45" pos:column="27">strcmp<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><name pos:line="45" pos:column="34">buf<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="39">"username"<pos:position pos:line="45" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="51"/></condition><then pos:line="45" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="25">username<pos:position pos:line="46" pos:column="33"/></name> <operator pos:line="46" pos:column="34">=<pos:position pos:line="46" pos:column="35"/></operator> <call><name pos:line="46" pos:column="36">xstrdup<pos:position pos:line="46" pos:column="43"/></name><argument_list pos:line="46" pos:column="43">(<argument><expr><name pos:line="46" pos:column="44">v<pos:position pos:line="46" pos:column="45"/></name></expr></argument>)<pos:position pos:line="46" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="47"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="47" pos:column="17">else <if pos:line="47" pos:column="22">if <condition pos:line="47" pos:column="25">(<expr><operator pos:line="47" pos:column="26">!<pos:position pos:line="47" pos:column="27"/></operator><call><name pos:line="47" pos:column="27">strcmp<pos:position pos:line="47" pos:column="33"/></name><argument_list pos:line="47" pos:column="33">(<argument><expr><name pos:line="47" pos:column="34">buf<pos:position pos:line="47" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="39">"password"<pos:position pos:line="47" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="51"/></condition><then pos:line="47" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="25">password<pos:position pos:line="48" pos:column="33"/></name> <operator pos:line="48" pos:column="34">=<pos:position pos:line="48" pos:column="35"/></operator> <call><name pos:line="48" pos:column="36">xstrdup<pos:position pos:line="48" pos:column="43"/></name><argument_list pos:line="48" pos:column="43">(<argument><expr><name pos:line="48" pos:column="44">v<pos:position pos:line="48" pos:column="45"/></name></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="49" pos:column="10"/></block></while>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
