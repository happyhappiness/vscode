<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_349.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">apply_all_patches<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">apply_state<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">state<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">argc<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="3" pos:column="30">const<pos:position pos:line="3" pos:column="35"/></specifier> <name pos:line="3" pos:column="36">char<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier><modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">argv<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="4" pos:column="30">int<pos:position pos:line="4" pos:column="33"/></name></type> <name pos:line="4" pos:column="34">options<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="42"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">errs<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">read_stdin<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><literal type="number" pos:line="8" pos:column="26">1<pos:position pos:line="8" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>

	<for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init><expr><name pos:line="10" pos:column="14">i<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr>;<pos:position pos:line="10" pos:column="20"/></init> <condition><expr><name pos:line="10" pos:column="21">i<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">&lt;<pos:position pos:line="10" pos:column="27"/></operator> <name pos:line="10" pos:column="25">argc<pos:position pos:line="10" pos:column="29"/></name></expr>;<pos:position pos:line="10" pos:column="30"/></condition> <incr><expr><name pos:line="10" pos:column="31">i<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">++<pos:position pos:line="10" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="10" pos:column="35"/></control> <block pos:line="10" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="11" pos:column="17">const<pos:position pos:line="11" pos:column="22"/></specifier> <name pos:line="11" pos:column="23">char<pos:position pos:line="11" pos:column="27"/></name> <modifier pos:line="11" pos:column="28">*<pos:position pos:line="11" pos:column="29"/></modifier></type><name pos:line="11" pos:column="29">arg<pos:position pos:line="11" pos:column="32"/></name> <init pos:line="11" pos:column="33">= <expr><name><name pos:line="11" pos:column="35">argv<pos:position pos:line="11" pos:column="39"/></name><index pos:line="11" pos:column="39">[<expr><name pos:line="11" pos:column="40">i<pos:position pos:line="11" pos:column="41"/></name></expr>]<pos:position pos:line="11" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="11" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">int<pos:position pos:line="12" pos:column="20"/></name></type> <name pos:line="12" pos:column="21">fd<pos:position pos:line="12" pos:column="23"/></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>

		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><operator pos:line="14" pos:column="21">!<pos:position pos:line="14" pos:column="22"/></operator><call><name pos:line="14" pos:column="22">strcmp<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">arg<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="34">"-"<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39"> <block pos:line="14" pos:column="40">{
			<expr_stmt><expr><name pos:line="15" pos:column="25">errs<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">|=<pos:position pos:line="15" pos:column="32"/></operator> <call><name pos:line="15" pos:column="33">apply_patch<pos:position pos:line="15" pos:column="44"/></name><argument_list pos:line="15" pos:column="44">(<argument><expr><name pos:line="15" pos:column="45">state<pos:position pos:line="15" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="52">0<pos:position pos:line="15" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="55">"&lt;stdin&gt;"<pos:position pos:line="15" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="66">options<pos:position pos:line="15" pos:column="73"/></name></expr></argument>)<pos:position pos:line="15" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="75"/></expr_stmt>
			<expr_stmt><expr><name pos:line="16" pos:column="25">read_stdin<pos:position pos:line="16" pos:column="35"/></name> <operator pos:line="16" pos:column="36">=<pos:position pos:line="16" pos:column="37"/></operator> <literal type="number" pos:line="16" pos:column="38">0<pos:position pos:line="16" pos:column="39"/></literal></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>
			<continue pos:line="17" pos:column="25">continue;<pos:position pos:line="17" pos:column="34"/></continue>
		}<pos:position pos:line="18" pos:column="18"/></block></then> <elseif pos:line="18" pos:column="19">else <if pos:line="18" pos:column="24">if <condition pos:line="18" pos:column="27">(<expr><literal type="number" pos:line="18" pos:column="28">0<pos:position pos:line="18" pos:column="29"/></literal> <operator pos:line="18" pos:column="30">&lt;<pos:position pos:line="18" pos:column="34"/></operator> <name><name pos:line="18" pos:column="32">state<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">-&gt;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="39">prefix_length<pos:position pos:line="18" pos:column="52"/></name></name></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="25">arg<pos:position pos:line="19" pos:column="28"/></name> <operator pos:line="19" pos:column="29">=<pos:position pos:line="19" pos:column="30"/></operator> <call><name pos:line="19" pos:column="31">prefix_filename<pos:position pos:line="19" pos:column="46"/></name><argument_list pos:line="19" pos:column="46">(<argument><expr><name><name pos:line="19" pos:column="47">state<pos:position pos:line="19" pos:column="52"/></name><operator pos:line="19" pos:column="52">-&gt;<pos:position pos:line="19" pos:column="57"/></operator><name pos:line="19" pos:column="54">prefix<pos:position pos:line="19" pos:column="60"/></name></name></expr></argument>,
					      <argument><expr><name><name pos:line="20" pos:column="47">state<pos:position pos:line="20" pos:column="52"/></name><operator pos:line="20" pos:column="52">-&gt;<pos:position pos:line="20" pos:column="57"/></operator><name pos:line="20" pos:column="54">prefix_length<pos:position pos:line="20" pos:column="67"/></name></name></expr></argument>,
					      <argument><expr><name pos:line="21" pos:column="47">arg<pos:position pos:line="21" pos:column="50"/></name></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt></block></then></if></elseif></if>

		<expr_stmt><expr><name pos:line="23" pos:column="17">fd<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">=<pos:position pos:line="23" pos:column="21"/></operator> <call><name pos:line="23" pos:column="22">open<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><name pos:line="23" pos:column="27">arg<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">O_RDONLY<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">fd<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">&lt;<pos:position pos:line="24" pos:column="28"/></operator> <literal type="number" pos:line="24" pos:column="26">0<pos:position pos:line="24" pos:column="27"/></literal></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">die_errno<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><call><name pos:line="25" pos:column="35">_<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><literal type="string" pos:line="25" pos:column="37">"can't open patch '%s'"<pos:position pos:line="25" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="63">arg<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="26" pos:column="17">read_stdin<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">=<pos:position pos:line="26" pos:column="29"/></operator> <literal type="number" pos:line="26" pos:column="30">0<pos:position pos:line="26" pos:column="31"/></literal></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">set_default_whitespace_mode<pos:position pos:line="27" pos:column="44"/></name><argument_list pos:line="27" pos:column="44">(<argument><expr><name pos:line="27" pos:column="45">state<pos:position pos:line="27" pos:column="50"/></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">errs<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">|=<pos:position pos:line="28" pos:column="24"/></operator> <call><name pos:line="28" pos:column="25">apply_patch<pos:position pos:line="28" pos:column="36"/></name><argument_list pos:line="28" pos:column="36">(<argument><expr><name pos:line="28" pos:column="37">state<pos:position pos:line="28" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="44">fd<pos:position pos:line="28" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="48">arg<pos:position pos:line="28" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="53">options<pos:position pos:line="28" pos:column="60"/></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">close<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">fd<pos:position pos:line="29" pos:column="25"/></name></expr></argument>)<pos:position pos:line="29" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">set_default_whitespace_mode<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><name pos:line="31" pos:column="37">state<pos:position pos:line="31" pos:column="42"/></name></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">read_stdin<pos:position pos:line="32" pos:column="23"/></name></expr>)<pos:position pos:line="32" pos:column="24"/></condition><then pos:line="32" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="17">errs<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">|=<pos:position pos:line="33" pos:column="24"/></operator> <call><name pos:line="33" pos:column="25">apply_patch<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><name pos:line="33" pos:column="37">state<pos:position pos:line="33" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="44">0<pos:position pos:line="33" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="47">"&lt;stdin&gt;"<pos:position pos:line="33" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="58">options<pos:position pos:line="33" pos:column="65"/></name></expr></argument>)<pos:position pos:line="33" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="67"/></expr_stmt></block></then></if>

	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name><name pos:line="35" pos:column="13">state<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">-&gt;<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="20">whitespace_error<pos:position pos:line="35" pos:column="36"/></name></name></expr>)<pos:position pos:line="35" pos:column="37"/></condition><then pos:line="35" pos:column="37"> <block pos:line="35" pos:column="38">{
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name><name pos:line="36" pos:column="21">state<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">-&gt;<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="28">squelch_whitespace_errors<pos:position pos:line="36" pos:column="53"/></name></name> <operator pos:line="36" pos:column="54">&amp;&amp;<pos:position pos:line="36" pos:column="64"/></operator>
		    <name><name pos:line="37" pos:column="21">state<pos:position pos:line="37" pos:column="26"/></name><operator pos:line="37" pos:column="26">-&gt;<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="28">squelch_whitespace_errors<pos:position pos:line="37" pos:column="53"/></name></name> <operator pos:line="37" pos:column="54">&lt;<pos:position pos:line="37" pos:column="58"/></operator> <name><name pos:line="37" pos:column="56">state<pos:position pos:line="37" pos:column="61"/></name><operator pos:line="37" pos:column="61">-&gt;<pos:position pos:line="37" pos:column="66"/></operator><name pos:line="37" pos:column="63">whitespace_error<pos:position pos:line="37" pos:column="79"/></name></name></expr>)<pos:position pos:line="37" pos:column="80"/></condition><then pos:line="37" pos:column="80"> <block pos:line="37" pos:column="81">{
			<decl_stmt><decl><type><name pos:line="38" pos:column="25">int<pos:position pos:line="38" pos:column="28"/></name></type> <name pos:line="38" pos:column="29">squelched<pos:position pos:line="38" pos:column="38"/></name> <init pos:line="38" pos:column="39">=
				<expr><name><name pos:line="39" pos:column="33">state<pos:position pos:line="39" pos:column="38"/></name><operator pos:line="39" pos:column="38">-&gt;<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="40">whitespace_error<pos:position pos:line="39" pos:column="56"/></name></name> <operator pos:line="39" pos:column="57">-<pos:position pos:line="39" pos:column="58"/></operator> <name><name pos:line="39" pos:column="59">state<pos:position pos:line="39" pos:column="64"/></name><operator pos:line="39" pos:column="64">-&gt;<pos:position pos:line="39" pos:column="69"/></operator><name pos:line="39" pos:column="66">squelch_whitespace_errors<pos:position pos:line="39" pos:column="91"/></name></name></expr></init></decl>;<pos:position pos:line="39" pos:column="92"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">warning<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><call><name pos:line="40" pos:column="33">Q_<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><literal type="string" pos:line="40" pos:column="36">"squelched %d whitespace error"<pos:position pos:line="40" pos:column="67"/></literal></expr></argument>,
				   <argument><expr><literal type="string" pos:line="41" pos:column="36">"squelched %d whitespace errors"<pos:position pos:line="41" pos:column="68"/></literal></expr></argument>,
				   <argument><expr><name pos:line="42" pos:column="36">squelched<pos:position pos:line="42" pos:column="45"/></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr></argument>,
				<argument><expr><name pos:line="43" pos:column="33">squelched<pos:position pos:line="43" pos:column="42"/></name></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name><name pos:line="45" pos:column="21">state<pos:position pos:line="45" pos:column="26"/></name><operator pos:line="45" pos:column="26">-&gt;<pos:position pos:line="45" pos:column="31"/></operator><name pos:line="45" pos:column="28">ws_error_action<pos:position pos:line="45" pos:column="43"/></name></name> <operator pos:line="45" pos:column="44">==<pos:position pos:line="45" pos:column="46"/></operator> <name pos:line="45" pos:column="47">die_on_ws_error<pos:position pos:line="45" pos:column="62"/></name></expr>)<pos:position pos:line="45" pos:column="63"/></condition><then pos:line="45" pos:column="63">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="25">die<pos:position pos:line="46" pos:column="28"/></name><argument_list pos:line="46" pos:column="28">(<argument><expr><call><name pos:line="46" pos:column="29">Q_<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">(<argument><expr><literal type="string" pos:line="46" pos:column="32">"%d line adds whitespace errors."<pos:position pos:line="46" pos:column="65"/></literal></expr></argument>,
			       <argument><expr><literal type="string" pos:line="47" pos:column="32">"%d lines add whitespace errors."<pos:position pos:line="47" pos:column="65"/></literal></expr></argument>,
			       <argument><expr><name><name pos:line="48" pos:column="32">state<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">-&gt;<pos:position pos:line="48" pos:column="42"/></operator><name pos:line="48" pos:column="39">whitespace_error<pos:position pos:line="48" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="56"/></argument_list></call></expr></argument>,
			    <argument><expr><name><name pos:line="49" pos:column="29">state<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">-&gt;<pos:position pos:line="49" pos:column="39"/></operator><name pos:line="49" pos:column="36">whitespace_error<pos:position pos:line="49" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="54"/></expr_stmt></block></then></if>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name><name pos:line="50" pos:column="21">state<pos:position pos:line="50" pos:column="26"/></name><operator pos:line="50" pos:column="26">-&gt;<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="28">applied_after_fixing_ws<pos:position pos:line="50" pos:column="51"/></name></name> <operator pos:line="50" pos:column="52">&amp;&amp;<pos:position pos:line="50" pos:column="62"/></operator> <name><name pos:line="50" pos:column="55">state<pos:position pos:line="50" pos:column="60"/></name><operator pos:line="50" pos:column="60">-&gt;<pos:position pos:line="50" pos:column="65"/></operator><name pos:line="50" pos:column="62">apply<pos:position pos:line="50" pos:column="67"/></name></name></expr>)<pos:position pos:line="50" pos:column="68"/></condition><then pos:line="50" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="25">warning<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><literal type="string" pos:line="51" pos:column="33">"%d line%s applied after"<pos:position pos:line="51" pos:column="58"/></literal>
				<literal type="string" pos:line="52" pos:column="33">" fixing whitespace errors."<pos:position pos:line="52" pos:column="61"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="53" pos:column="33">state<pos:position pos:line="53" pos:column="38"/></name><operator pos:line="53" pos:column="38">-&gt;<pos:position pos:line="53" pos:column="43"/></operator><name pos:line="53" pos:column="40">applied_after_fixing_ws<pos:position pos:line="53" pos:column="63"/></name></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name><name pos:line="54" pos:column="33">state<pos:position pos:line="54" pos:column="38"/></name><operator pos:line="54" pos:column="38">-&gt;<pos:position pos:line="54" pos:column="43"/></operator><name pos:line="54" pos:column="40">applied_after_fixing_ws<pos:position pos:line="54" pos:column="63"/></name></name> <operator pos:line="54" pos:column="64">==<pos:position pos:line="54" pos:column="66"/></operator> <literal type="number" pos:line="54" pos:column="67">1<pos:position pos:line="54" pos:column="68"/></literal></expr> ?<pos:position pos:line="54" pos:column="70"/></condition><then pos:line="54" pos:column="70"> <expr><literal type="string" pos:line="54" pos:column="71">""<pos:position pos:line="54" pos:column="73"/></literal></expr> <pos:position pos:line="54" pos:column="74"/></then><else pos:line="54" pos:column="74">: <expr><literal type="string" pos:line="54" pos:column="76">"s"<pos:position pos:line="54" pos:column="79"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="54" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="81"/></expr_stmt></block></then>
		<elseif pos:line="55" pos:column="17">else <if pos:line="55" pos:column="22">if <condition pos:line="55" pos:column="25">(<expr><name><name pos:line="55" pos:column="26">state<pos:position pos:line="55" pos:column="31"/></name><operator pos:line="55" pos:column="31">-&gt;<pos:position pos:line="55" pos:column="36"/></operator><name pos:line="55" pos:column="33">whitespace_error<pos:position pos:line="55" pos:column="49"/></name></name></expr>)<pos:position pos:line="55" pos:column="50"/></condition><then pos:line="55" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="25">warning<pos:position pos:line="56" pos:column="32"/></name><argument_list pos:line="56" pos:column="32">(<argument><expr><call><name pos:line="56" pos:column="33">Q_<pos:position pos:line="56" pos:column="35"/></name><argument_list pos:line="56" pos:column="35">(<argument><expr><literal type="string" pos:line="56" pos:column="36">"%d line adds whitespace errors."<pos:position pos:line="56" pos:column="69"/></literal></expr></argument>,
				   <argument><expr><literal type="string" pos:line="57" pos:column="36">"%d lines add whitespace errors."<pos:position pos:line="57" pos:column="69"/></literal></expr></argument>,
				   <argument><expr><name><name pos:line="58" pos:column="36">state<pos:position pos:line="58" pos:column="41"/></name><operator pos:line="58" pos:column="41">-&gt;<pos:position pos:line="58" pos:column="46"/></operator><name pos:line="58" pos:column="43">whitespace_error<pos:position pos:line="58" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="60"/></argument_list></call></expr></argument>,
				<argument><expr><name><name pos:line="59" pos:column="33">state<pos:position pos:line="59" pos:column="38"/></name><operator pos:line="59" pos:column="38">-&gt;<pos:position pos:line="59" pos:column="43"/></operator><name pos:line="59" pos:column="40">whitespace_error<pos:position pos:line="59" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="58"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name><name pos:line="62" pos:column="13">state<pos:position pos:line="62" pos:column="18"/></name><operator pos:line="62" pos:column="18">-&gt;<pos:position pos:line="62" pos:column="23"/></operator><name pos:line="62" pos:column="20">update_index<pos:position pos:line="62" pos:column="32"/></name></name></expr>)<pos:position pos:line="62" pos:column="33"/></condition><then pos:line="62" pos:column="33"> <block pos:line="62" pos:column="34">{
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><call><name pos:line="63" pos:column="21">write_locked_index<pos:position pos:line="63" pos:column="39"/></name><argument_list pos:line="63" pos:column="39">(<argument><expr><operator pos:line="63" pos:column="40">&amp;<pos:position pos:line="63" pos:column="45"/></operator><name pos:line="63" pos:column="41">the_index<pos:position pos:line="63" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="52">state<pos:position pos:line="63" pos:column="57"/></name><operator pos:line="63" pos:column="57">-&gt;<pos:position pos:line="63" pos:column="62"/></operator><name pos:line="63" pos:column="59">lock_file<pos:position pos:line="63" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="70">COMMIT_LOCK<pos:position pos:line="63" pos:column="81"/></name></expr></argument>)<pos:position pos:line="63" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="83"/></condition><then pos:line="63" pos:column="83">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="25">die<pos:position pos:line="64" pos:column="28"/></name><argument_list pos:line="64" pos:column="28">(<argument><expr><call><name pos:line="64" pos:column="29">_<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><literal type="string" pos:line="64" pos:column="31">"Unable to write new index file"<pos:position pos:line="64" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="66"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="65" pos:column="17">state<pos:position pos:line="65" pos:column="22"/></name><operator pos:line="65" pos:column="22">-&gt;<pos:position pos:line="65" pos:column="27"/></operator><name pos:line="65" pos:column="24">newfd<pos:position pos:line="65" pos:column="29"/></name></name> <operator pos:line="65" pos:column="30">=<pos:position pos:line="65" pos:column="31"/></operator> <operator pos:line="65" pos:column="32">-<pos:position pos:line="65" pos:column="33"/></operator><literal type="number" pos:line="65" pos:column="33">1<pos:position pos:line="65" pos:column="34"/></literal></expr>;<pos:position pos:line="65" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if>

	<return pos:line="68" pos:column="9">return <expr><operator pos:line="68" pos:column="16">!<pos:position pos:line="68" pos:column="17"/></operator><operator pos:line="68" pos:column="17">!<pos:position pos:line="68" pos:column="18"/></operator><name pos:line="68" pos:column="18">errs<pos:position pos:line="68" pos:column="22"/></name></expr>;<pos:position pos:line="68" pos:column="23"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
