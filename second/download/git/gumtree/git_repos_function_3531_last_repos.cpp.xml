<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3531_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">cache_tree<pos:position pos:line="1" pos:column="25"/></name></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">read_one<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier><modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">buffer<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">unsigned<pos:position pos:line="1" pos:column="65"/></name> <name pos:line="1" pos:column="66">long<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">size_p<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">buf<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><operator pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></operator><name pos:line="3" pos:column="28">buffer<pos:position pos:line="3" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">long<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">size<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><operator pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="31">size_p<pos:position pos:line="4" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">cp<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">ep<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">cache_tree<pos:position pos:line="7" pos:column="26"/></name></name> <modifier pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></modifier></type><name pos:line="7" pos:column="28">it<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">i<pos:position pos:line="8" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="16">subtree_nr<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">it<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <name pos:line="10" pos:column="14">NULL<pos:position pos:line="10" pos:column="18"/></name></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
	<comment type="block" pos:line="11" pos:column="9">/* skip name, but make sure name exists */</comment>
	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><name pos:line="12" pos:column="16">size<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">&amp;&amp;<pos:position pos:line="12" pos:column="31"/></operator> <operator pos:line="12" pos:column="24">*<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="25">buf<pos:position pos:line="12" pos:column="28"/></name></expr>)<pos:position pos:line="12" pos:column="29"/></condition> <block pos:line="12" pos:column="30">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">size<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">--<pos:position pos:line="13" pos:column="23"/></operator></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">buf<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">++<pos:position pos:line="14" pos:column="22"/></operator></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></while>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">size<pos:position pos:line="16" pos:column="18"/></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19">
		<block type="pseudo"><goto pos:line="17" pos:column="17">goto <name pos:line="17" pos:column="22">free_return<pos:position pos:line="17" pos:column="33"/></name>;<pos:position pos:line="17" pos:column="34"/></goto></block></then></if>
	<expr_stmt><expr><name pos:line="18" pos:column="9">buf<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">++<pos:position pos:line="18" pos:column="14"/></operator></expr>;<pos:position pos:line="18" pos:column="15"/></expr_stmt> <expr_stmt><expr><name pos:line="18" pos:column="16">size<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">--<pos:position pos:line="18" pos:column="22"/></operator></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">it<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <call><name pos:line="19" pos:column="14">cache_tree<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">()<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>

	<expr_stmt><expr><name pos:line="21" pos:column="9">cp<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">buf<pos:position pos:line="21" pos:column="17"/></name></expr>;<pos:position pos:line="21" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">it<pos:position pos:line="22" pos:column="11"/></name><operator pos:line="22" pos:column="11">-&gt;<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="13">entry_count<pos:position pos:line="22" pos:column="24"/></name></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <call><name pos:line="22" pos:column="27">strtol<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">cp<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="38">&amp;<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="39">ep<pos:position pos:line="22" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="43">10<pos:position pos:line="22" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">cp<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">==<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">ep<pos:position pos:line="23" pos:column="21"/></name></expr>)<pos:position pos:line="23" pos:column="22"/></condition><then pos:line="23" pos:column="22">
		<block type="pseudo"><goto pos:line="24" pos:column="17">goto <name pos:line="24" pos:column="22">free_return<pos:position pos:line="24" pos:column="33"/></name>;<pos:position pos:line="24" pos:column="34"/></goto></block></then></if>
	<expr_stmt><expr><name pos:line="25" pos:column="9">cp<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <name pos:line="25" pos:column="14">ep<pos:position pos:line="25" pos:column="16"/></name></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">subtree_nr<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">strtol<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">cp<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="33">&amp;<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="34">ep<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="38">10<pos:position pos:line="26" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">cp<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">==<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">ep<pos:position pos:line="27" pos:column="21"/></name></expr>)<pos:position pos:line="27" pos:column="22"/></condition><then pos:line="27" pos:column="22">
		<block type="pseudo"><goto pos:line="28" pos:column="17">goto <name pos:line="28" pos:column="22">free_return<pos:position pos:line="28" pos:column="33"/></name>;<pos:position pos:line="28" pos:column="34"/></goto></block></then></if>
	<while pos:line="29" pos:column="9">while <condition pos:line="29" pos:column="15">(<expr><name pos:line="29" pos:column="16">size<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">&amp;&amp;<pos:position pos:line="29" pos:column="31"/></operator> <operator pos:line="29" pos:column="24">*<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">buf<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">&amp;&amp;<pos:position pos:line="29" pos:column="39"/></operator> <operator pos:line="29" pos:column="32">*<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="33">buf<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">!=<pos:position pos:line="29" pos:column="39"/></operator> <literal type="char" pos:line="29" pos:column="40">'\n'<pos:position pos:line="29" pos:column="44"/></literal></expr>)<pos:position pos:line="29" pos:column="45"/></condition> <block pos:line="29" pos:column="46">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">size<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">--<pos:position pos:line="30" pos:column="23"/></operator></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">buf<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">++<pos:position pos:line="31" pos:column="22"/></operator></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></while>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">size<pos:position pos:line="33" pos:column="18"/></name></expr>)<pos:position pos:line="33" pos:column="19"/></condition><then pos:line="33" pos:column="19">
		<block type="pseudo"><goto pos:line="34" pos:column="17">goto <name pos:line="34" pos:column="22">free_return<pos:position pos:line="34" pos:column="33"/></name>;<pos:position pos:line="34" pos:column="34"/></goto></block></then></if>
	<expr_stmt><expr><name pos:line="35" pos:column="9">buf<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">++<pos:position pos:line="35" pos:column="14"/></operator></expr>;<pos:position pos:line="35" pos:column="15"/></expr_stmt> <expr_stmt><expr><name pos:line="35" pos:column="16">size<pos:position pos:line="35" pos:column="20"/></name><operator pos:line="35" pos:column="20">--<pos:position pos:line="35" pos:column="22"/></operator></expr>;<pos:position pos:line="35" pos:column="23"/></expr_stmt>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><literal type="number" pos:line="36" pos:column="13">0<pos:position pos:line="36" pos:column="14"/></literal> <operator pos:line="36" pos:column="15">&lt;=<pos:position pos:line="36" pos:column="20"/></operator> <name><name pos:line="36" pos:column="18">it<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">-&gt;<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="22">entry_count<pos:position pos:line="36" pos:column="33"/></name></name></expr>)<pos:position pos:line="36" pos:column="34"/></condition><then pos:line="36" pos:column="34"> <block pos:line="36" pos:column="35">{
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">size<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">&lt;<pos:position pos:line="37" pos:column="30"/></operator> <literal type="number" pos:line="37" pos:column="28">20<pos:position pos:line="37" pos:column="30"/></literal></expr>)<pos:position pos:line="37" pos:column="31"/></condition><then pos:line="37" pos:column="31">
			<block type="pseudo"><goto pos:line="38" pos:column="25">goto <name pos:line="38" pos:column="30">free_return<pos:position pos:line="38" pos:column="41"/></name>;<pos:position pos:line="38" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">hashcpy<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name><name pos:line="39" pos:column="25">it<pos:position pos:line="39" pos:column="27"/></name><operator pos:line="39" pos:column="27">-&gt;<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="29">oid<pos:position pos:line="39" pos:column="32"/></name><operator pos:line="39" pos:column="32">.<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="33">hash<pos:position pos:line="39" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="39">(<pos:position pos:line="39" pos:column="40"/></operator><specifier pos:line="39" pos:column="40">const<pos:position pos:line="39" pos:column="45"/></specifier> <name pos:line="39" pos:column="46">unsigned<pos:position pos:line="39" pos:column="54"/></name> <name pos:line="39" pos:column="55">char<pos:position pos:line="39" pos:column="59"/></name><operator pos:line="39" pos:column="59">*<pos:position pos:line="39" pos:column="60"/></operator><operator pos:line="39" pos:column="60">)<pos:position pos:line="39" pos:column="61"/></operator><name pos:line="39" pos:column="61">buf<pos:position pos:line="39" pos:column="64"/></name></expr></argument>)<pos:position pos:line="39" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><name pos:line="40" pos:column="17">buf<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">+=<pos:position pos:line="40" pos:column="23"/></operator> <literal type="number" pos:line="40" pos:column="24">20<pos:position pos:line="40" pos:column="26"/></literal></expr>;<pos:position pos:line="40" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">size<pos:position pos:line="41" pos:column="21"/></name> <operator pos:line="41" pos:column="22">-=<pos:position pos:line="41" pos:column="24"/></operator> <literal type="number" pos:line="41" pos:column="25">20<pos:position pos:line="41" pos:column="27"/></literal></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

<cpp:if pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">if<pos:position pos:line="44" pos:column="4"/></cpp:directive> <expr><name pos:line="44" pos:column="5">DEBUG<pos:position pos:line="44" pos:column="10"/></name></expr></cpp:if>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><literal type="number" pos:line="45" pos:column="13">0<pos:position pos:line="45" pos:column="14"/></literal> <operator pos:line="45" pos:column="15">&lt;=<pos:position pos:line="45" pos:column="20"/></operator> <name><name pos:line="45" pos:column="18">it<pos:position pos:line="45" pos:column="20"/></name><operator pos:line="45" pos:column="20">-&gt;<pos:position pos:line="45" pos:column="25"/></operator><name pos:line="45" pos:column="22">entry_count<pos:position pos:line="45" pos:column="33"/></name></name></expr>)<pos:position pos:line="45" pos:column="34"/></condition><then pos:line="45" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="17">fprintf<pos:position pos:line="46" pos:column="24"/></name><argument_list pos:line="46" pos:column="24">(<argument><expr><name pos:line="46" pos:column="25">stderr<pos:position pos:line="46" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="33">"cache-tree &lt;%s&gt; (%d ent, %d subtree) %s\n"<pos:position pos:line="46" pos:column="82"/></literal></expr></argument>,
			<argument><expr><operator pos:line="47" pos:column="25">*<pos:position pos:line="47" pos:column="26"/></operator><name pos:line="47" pos:column="26">buffer<pos:position pos:line="47" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="34">it<pos:position pos:line="47" pos:column="36"/></name><operator pos:line="47" pos:column="36">-&gt;<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="38">entry_count<pos:position pos:line="47" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="51">subtree_nr<pos:position pos:line="47" pos:column="61"/></name></expr></argument>,
			<argument><expr><call><name pos:line="48" pos:column="25">oid_to_hex<pos:position pos:line="48" pos:column="35"/></name><argument_list pos:line="48" pos:column="35">(<argument><expr><operator pos:line="48" pos:column="36">&amp;<pos:position pos:line="48" pos:column="41"/></operator><name><name pos:line="48" pos:column="37">it<pos:position pos:line="48" pos:column="39"/></name><operator pos:line="48" pos:column="39">-&gt;<pos:position pos:line="48" pos:column="44"/></operator><name pos:line="48" pos:column="41">oid<pos:position pos:line="48" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt></block></then>
	<else pos:line="49" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="17">fprintf<pos:position pos:line="50" pos:column="24"/></name><argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">stderr<pos:position pos:line="50" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="33">"cache-tree &lt;%s&gt; (%d subtrees) invalid\n"<pos:position pos:line="50" pos:column="80"/></literal></expr></argument>,
			<argument><expr><operator pos:line="51" pos:column="25">*<pos:position pos:line="51" pos:column="26"/></operator><name pos:line="51" pos:column="26">buffer<pos:position pos:line="51" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="34">subtree_nr<pos:position pos:line="51" pos:column="44"/></name></expr></argument>)<pos:position pos:line="51" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="46"/></expr_stmt></block></else></if>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="54" pos:column="9">/*
	 * Just a heuristic -- we do not add directories that often but
	 * we do not want to have to extend it immediately when we do,
	 * hence +2.
	 */</comment>
	<expr_stmt><expr><name><name pos:line="59" pos:column="9">it<pos:position pos:line="59" pos:column="11"/></name><operator pos:line="59" pos:column="11">-&gt;<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="13">subtree_alloc<pos:position pos:line="59" pos:column="26"/></name></name> <operator pos:line="59" pos:column="27">=<pos:position pos:line="59" pos:column="28"/></operator> <name pos:line="59" pos:column="29">subtree_nr<pos:position pos:line="59" pos:column="39"/></name> <operator pos:line="59" pos:column="40">+<pos:position pos:line="59" pos:column="41"/></operator> <literal type="number" pos:line="59" pos:column="42">2<pos:position pos:line="59" pos:column="43"/></literal></expr>;<pos:position pos:line="59" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="60" pos:column="9">it<pos:position pos:line="60" pos:column="11"/></name><operator pos:line="60" pos:column="11">-&gt;<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="13">down<pos:position pos:line="60" pos:column="17"/></name></name> <operator pos:line="60" pos:column="18">=<pos:position pos:line="60" pos:column="19"/></operator> <call><name pos:line="60" pos:column="20">xcalloc<pos:position pos:line="60" pos:column="27"/></name><argument_list pos:line="60" pos:column="27">(<argument><expr><name><name pos:line="60" pos:column="28">it<pos:position pos:line="60" pos:column="30"/></name><operator pos:line="60" pos:column="30">-&gt;<pos:position pos:line="60" pos:column="35"/></operator><name pos:line="60" pos:column="32">subtree_alloc<pos:position pos:line="60" pos:column="45"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="47">sizeof<argument_list pos:line="60" pos:column="53">(<argument><expr pos:line="60" pos:column="54">struct <name pos:line="60" pos:column="61">cache_tree_sub<pos:position pos:line="60" pos:column="75"/></name> <operator pos:line="60" pos:column="76">*<pos:position pos:line="60" pos:column="77"/></operator></expr></argument>)<pos:position pos:line="60" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="80"/></expr_stmt>
	<for pos:line="61" pos:column="9">for <control pos:line="61" pos:column="13">(<init><expr><name pos:line="61" pos:column="14">i<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <literal type="number" pos:line="61" pos:column="18">0<pos:position pos:line="61" pos:column="19"/></literal></expr>;<pos:position pos:line="61" pos:column="20"/></init> <condition><expr><name pos:line="61" pos:column="21">i<pos:position pos:line="61" pos:column="22"/></name> <operator pos:line="61" pos:column="23">&lt;<pos:position pos:line="61" pos:column="27"/></operator> <name pos:line="61" pos:column="25">subtree_nr<pos:position pos:line="61" pos:column="35"/></name></expr>;<pos:position pos:line="61" pos:column="36"/></condition> <incr><expr><name pos:line="61" pos:column="37">i<pos:position pos:line="61" pos:column="38"/></name><operator pos:line="61" pos:column="38">++<pos:position pos:line="61" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="61" pos:column="41"/></control> <block pos:line="61" pos:column="42">{
		<comment type="block" pos:line="62" pos:column="17">/* read each subtree */</comment>
		<decl_stmt><decl><type><name><name pos:line="63" pos:column="17">struct<pos:position pos:line="63" pos:column="23"/></name> <name pos:line="63" pos:column="24">cache_tree<pos:position pos:line="63" pos:column="34"/></name></name> <modifier pos:line="63" pos:column="35">*<pos:position pos:line="63" pos:column="36"/></modifier></type><name pos:line="63" pos:column="36">sub<pos:position pos:line="63" pos:column="39"/></name></decl>;<pos:position pos:line="63" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="64" pos:column="17">struct<pos:position pos:line="64" pos:column="23"/></name> <name pos:line="64" pos:column="24">cache_tree_sub<pos:position pos:line="64" pos:column="38"/></name></name> <modifier pos:line="64" pos:column="39">*<pos:position pos:line="64" pos:column="40"/></modifier></type><name pos:line="64" pos:column="40">subtree<pos:position pos:line="64" pos:column="47"/></name></decl>;<pos:position pos:line="64" pos:column="48"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="65" pos:column="17">const<pos:position pos:line="65" pos:column="22"/></specifier> <name pos:line="65" pos:column="23">char<pos:position pos:line="65" pos:column="27"/></name> <modifier pos:line="65" pos:column="28">*<pos:position pos:line="65" pos:column="29"/></modifier></type><name pos:line="65" pos:column="29">name<pos:position pos:line="65" pos:column="33"/></name> <init pos:line="65" pos:column="34">= <expr><name pos:line="65" pos:column="36">buf<pos:position pos:line="65" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="65" pos:column="40"/></decl_stmt>

		<expr_stmt><expr><name pos:line="67" pos:column="17">sub<pos:position pos:line="67" pos:column="20"/></name> <operator pos:line="67" pos:column="21">=<pos:position pos:line="67" pos:column="22"/></operator> <call><name pos:line="67" pos:column="23">read_one<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">(<argument><expr><operator pos:line="67" pos:column="32">&amp;<pos:position pos:line="67" pos:column="37"/></operator><name pos:line="67" pos:column="33">buf<pos:position pos:line="67" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="38">&amp;<pos:position pos:line="67" pos:column="43"/></operator><name pos:line="67" pos:column="39">size<pos:position pos:line="67" pos:column="43"/></name></expr></argument>)<pos:position pos:line="67" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><operator pos:line="68" pos:column="21">!<pos:position pos:line="68" pos:column="22"/></operator><name pos:line="68" pos:column="22">sub<pos:position pos:line="68" pos:column="25"/></name></expr>)<pos:position pos:line="68" pos:column="26"/></condition><then pos:line="68" pos:column="26">
			<block type="pseudo"><goto pos:line="69" pos:column="25">goto <name pos:line="69" pos:column="30">free_return<pos:position pos:line="69" pos:column="41"/></name>;<pos:position pos:line="69" pos:column="42"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="70" pos:column="17">subtree<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">=<pos:position pos:line="70" pos:column="26"/></operator> <call><name pos:line="70" pos:column="27">cache_tree_sub<pos:position pos:line="70" pos:column="41"/></name><argument_list pos:line="70" pos:column="41">(<argument><expr><name pos:line="70" pos:column="42">it<pos:position pos:line="70" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="46">name<pos:position pos:line="70" pos:column="50"/></name></expr></argument>)<pos:position pos:line="70" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="71" pos:column="17">subtree<pos:position pos:line="71" pos:column="24"/></name><operator pos:line="71" pos:column="24">-&gt;<pos:position pos:line="71" pos:column="29"/></operator><name pos:line="71" pos:column="26">cache_tree<pos:position pos:line="71" pos:column="36"/></name></name> <operator pos:line="71" pos:column="37">=<pos:position pos:line="71" pos:column="38"/></operator> <name pos:line="71" pos:column="39">sub<pos:position pos:line="71" pos:column="42"/></name></expr>;<pos:position pos:line="71" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="72" pos:column="10"/></block></for>
	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">subtree_nr<pos:position pos:line="73" pos:column="23"/></name> <operator pos:line="73" pos:column="24">!=<pos:position pos:line="73" pos:column="26"/></operator> <name><name pos:line="73" pos:column="27">it<pos:position pos:line="73" pos:column="29"/></name><operator pos:line="73" pos:column="29">-&gt;<pos:position pos:line="73" pos:column="34"/></operator><name pos:line="73" pos:column="31">subtree_nr<pos:position pos:line="73" pos:column="41"/></name></name></expr>)<pos:position pos:line="73" pos:column="42"/></condition><then pos:line="73" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="17">die<pos:position pos:line="74" pos:column="20"/></name><argument_list pos:line="74" pos:column="20">(<argument><expr><literal type="string" pos:line="74" pos:column="21">"cache-tree: internal error"<pos:position pos:line="74" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="51"/></expr_stmt></block></then></if>
	<expr_stmt><expr><operator pos:line="75" pos:column="9">*<pos:position pos:line="75" pos:column="10"/></operator><name pos:line="75" pos:column="10">buffer<pos:position pos:line="75" pos:column="16"/></name> <operator pos:line="75" pos:column="17">=<pos:position pos:line="75" pos:column="18"/></operator> <name pos:line="75" pos:column="19">buf<pos:position pos:line="75" pos:column="22"/></name></expr>;<pos:position pos:line="75" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="76" pos:column="9">*<pos:position pos:line="76" pos:column="10"/></operator><name pos:line="76" pos:column="10">size_p<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <name pos:line="76" pos:column="19">size<pos:position pos:line="76" pos:column="23"/></name></expr>;<pos:position pos:line="76" pos:column="24"/></expr_stmt>
	<return pos:line="77" pos:column="9">return <expr><name pos:line="77" pos:column="16">it<pos:position pos:line="77" pos:column="18"/></name></expr>;<pos:position pos:line="77" pos:column="19"/></return>

 <label><name pos:line="79" pos:column="2">free_return<pos:position pos:line="79" pos:column="13"/></name>:<pos:position pos:line="79" pos:column="14"/></label>
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">cache_tree_free<pos:position pos:line="80" pos:column="24"/></name><argument_list pos:line="80" pos:column="24">(<argument><expr><operator pos:line="80" pos:column="25">&amp;<pos:position pos:line="80" pos:column="30"/></operator><name pos:line="80" pos:column="26">it<pos:position pos:line="80" pos:column="28"/></name></expr></argument>)<pos:position pos:line="80" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="30"/></expr_stmt>
	<return pos:line="81" pos:column="9">return <expr><name pos:line="81" pos:column="16">NULL<pos:position pos:line="81" pos:column="20"/></name></expr>;<pos:position pos:line="81" pos:column="21"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
