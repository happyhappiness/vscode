<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4403_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_binary<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">buffer<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">unsigned<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">long<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">size<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="59">struct<pos:position pos:line="1" pos:column="65"/></name> <name pos:line="1" pos:column="66">patch<pos:position pos:line="1" pos:column="71"/></name></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">patch<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * We have read "GIT binary patch\n"; what follows is a line
	 * that says the patch method (currently, either "literal" or
	 * "delta") and the length of data before deflating; a
	 * sequence of 'length-byte' followed by base-85 encoded data
	 * follows.
	 *
	 * When a binary patch is reversible, there is another binary
	 * hunk in the same format, starting with patch method (either
	 * "literal" or "delta") with the length of data, and a sequence
	 * of length-byte + base-85 encoded data, terminated with another
	 * empty line.  This data, when applied to the postimage, produces
	 * the preimage.
	 */</comment>
	<decl_stmt><decl><type><name><name pos:line="17" pos:column="9">struct<pos:position pos:line="17" pos:column="15"/></name> <name pos:line="17" pos:column="16">fragment<pos:position pos:line="17" pos:column="24"/></name></name> <modifier pos:line="17" pos:column="25">*<pos:position pos:line="17" pos:column="26"/></modifier></type><name pos:line="17" pos:column="26">forward<pos:position pos:line="17" pos:column="33"/></name></decl>;<pos:position pos:line="17" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="18" pos:column="9">struct<pos:position pos:line="18" pos:column="15"/></name> <name pos:line="18" pos:column="16">fragment<pos:position pos:line="18" pos:column="24"/></name></name> <modifier pos:line="18" pos:column="25">*<pos:position pos:line="18" pos:column="26"/></modifier></type><name pos:line="18" pos:column="26">reverse<pos:position pos:line="18" pos:column="33"/></name></decl>;<pos:position pos:line="18" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">int<pos:position pos:line="19" pos:column="12"/></name></type> <name pos:line="19" pos:column="13">status<pos:position pos:line="19" pos:column="19"/></name></decl>;<pos:position pos:line="19" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">int<pos:position pos:line="20" pos:column="12"/></name></type> <name pos:line="20" pos:column="13">used<pos:position pos:line="20" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="20" pos:column="19">used_1<pos:position pos:line="20" pos:column="25"/></name></decl>;<pos:position pos:line="20" pos:column="26"/></decl_stmt>

	<expr_stmt><expr><name pos:line="22" pos:column="9">forward<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <call><name pos:line="22" pos:column="19">parse_binary_hunk<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><operator pos:line="22" pos:column="37">&amp;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="38">buffer<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="46">&amp;<pos:position pos:line="22" pos:column="51"/></operator><name pos:line="22" pos:column="47">size<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="53">&amp;<pos:position pos:line="22" pos:column="58"/></operator><name pos:line="22" pos:column="54">status<pos:position pos:line="22" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="62">&amp;<pos:position pos:line="22" pos:column="67"/></operator><name pos:line="22" pos:column="63">used<pos:position pos:line="22" pos:column="67"/></name></expr></argument>)<pos:position pos:line="22" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="69"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">forward<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">&amp;&amp;<pos:position pos:line="23" pos:column="32"/></operator> <operator pos:line="23" pos:column="25">!<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">status<pos:position pos:line="23" pos:column="32"/></name></expr>)<pos:position pos:line="23" pos:column="33"/></condition><then pos:line="23" pos:column="33">
		<comment type="block" pos:line="24" pos:column="17">/* there has to be one hunk (forward hunk) */</comment>
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><call><name pos:line="25" pos:column="24">error<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><call><name pos:line="25" pos:column="30">_<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><literal type="string" pos:line="25" pos:column="32">"unrecognized binary patch at line %d"<pos:position pos:line="25" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="73">linenr<pos:position pos:line="25" pos:column="79"/></name><operator pos:line="25" pos:column="79">-<pos:position pos:line="25" pos:column="80"/></operator><literal type="number" pos:line="25" pos:column="80">1<pos:position pos:line="25" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="83"/></return></block></then></if>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">status<pos:position pos:line="26" pos:column="19"/></name></expr>)<pos:position pos:line="26" pos:column="20"/></condition><then pos:line="26" pos:column="20">
		<comment type="block" pos:line="27" pos:column="17">/* otherwise we already gave an error message */</comment>
		<block type="pseudo"><return pos:line="28" pos:column="17">return <expr><name pos:line="28" pos:column="24">status<pos:position pos:line="28" pos:column="30"/></name></expr>;<pos:position pos:line="28" pos:column="31"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="30" pos:column="9">reverse<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <call><name pos:line="30" pos:column="19">parse_binary_hunk<pos:position pos:line="30" pos:column="36"/></name><argument_list pos:line="30" pos:column="36">(<argument><expr><operator pos:line="30" pos:column="37">&amp;<pos:position pos:line="30" pos:column="42"/></operator><name pos:line="30" pos:column="38">buffer<pos:position pos:line="30" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="46">&amp;<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="47">size<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="53">&amp;<pos:position pos:line="30" pos:column="58"/></operator><name pos:line="30" pos:column="54">status<pos:position pos:line="30" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="62">&amp;<pos:position pos:line="30" pos:column="67"/></operator><name pos:line="30" pos:column="63">used_1<pos:position pos:line="30" pos:column="69"/></name></expr></argument>)<pos:position pos:line="30" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="71"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">reverse<pos:position pos:line="31" pos:column="20"/></name></expr>)<pos:position pos:line="31" pos:column="21"/></condition><then pos:line="31" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="17">used<pos:position pos:line="32" pos:column="21"/></name> <operator pos:line="32" pos:column="22">+=<pos:position pos:line="32" pos:column="24"/></operator> <name pos:line="32" pos:column="25">used_1<pos:position pos:line="32" pos:column="31"/></name></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt></block></then>
	<elseif pos:line="33" pos:column="9">else <if pos:line="33" pos:column="14">if <condition pos:line="33" pos:column="17">(<expr><name pos:line="33" pos:column="18">status<pos:position pos:line="33" pos:column="24"/></name></expr>)<pos:position pos:line="33" pos:column="25"/></condition><then pos:line="33" pos:column="25"> <block pos:line="33" pos:column="26">{
		<comment type="block" pos:line="34" pos:column="17">/*
		 * Not having reverse hunk is not an error, but having
		 * a corrupt reverse hunk is.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">free<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><operator pos:line="38" pos:column="22">(<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">void<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">*<pos:position pos:line="38" pos:column="28"/></operator><operator pos:line="38" pos:column="28">)<pos:position pos:line="38" pos:column="29"/></operator> <name><name pos:line="38" pos:column="30">forward<pos:position pos:line="38" pos:column="37"/></name><operator pos:line="38" pos:column="37">-&gt;<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="39">patch<pos:position pos:line="38" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">free<pos:position pos:line="39" pos:column="21"/></name><argument_list pos:line="39" pos:column="21">(<argument><expr><name pos:line="39" pos:column="22">forward<pos:position pos:line="39" pos:column="29"/></name></expr></argument>)<pos:position pos:line="39" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="31"/></expr_stmt>
		<return pos:line="40" pos:column="17">return <expr><name pos:line="40" pos:column="24">status<pos:position pos:line="40" pos:column="30"/></name></expr>;<pos:position pos:line="40" pos:column="31"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if></elseif></if>
	<expr_stmt><expr><name><name pos:line="42" pos:column="9">forward<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">-&gt;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="18">next<pos:position pos:line="42" pos:column="22"/></name></name> <operator pos:line="42" pos:column="23">=<pos:position pos:line="42" pos:column="24"/></operator> <name pos:line="42" pos:column="25">reverse<pos:position pos:line="42" pos:column="32"/></name></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="43" pos:column="9">patch<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">-&gt;<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="16">fragments<pos:position pos:line="43" pos:column="25"/></name></name> <operator pos:line="43" pos:column="26">=<pos:position pos:line="43" pos:column="27"/></operator> <name pos:line="43" pos:column="28">forward<pos:position pos:line="43" pos:column="35"/></name></expr>;<pos:position pos:line="43" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="44" pos:column="9">patch<pos:position pos:line="44" pos:column="14"/></name><operator pos:line="44" pos:column="14">-&gt;<pos:position pos:line="44" pos:column="19"/></operator><name pos:line="44" pos:column="16">is_binary<pos:position pos:line="44" pos:column="25"/></name></name> <operator pos:line="44" pos:column="26">=<pos:position pos:line="44" pos:column="27"/></operator> <literal type="number" pos:line="44" pos:column="28">1<pos:position pos:line="44" pos:column="29"/></literal></expr>;<pos:position pos:line="44" pos:column="30"/></expr_stmt>
	<return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">used<pos:position pos:line="45" pos:column="20"/></name></expr>;<pos:position pos:line="45" pos:column="21"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
