<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3403_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">head_ref_namespaced<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">each_ref_fn<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">fn<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">void<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">cb_data<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">buf<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">STRBUF_INIT<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">object_id<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">oid<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">flag<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">strbuf_addf<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><operator pos:line="8" pos:column="21">&amp;<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="22">buf<pos:position pos:line="8" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="27">"%sHEAD"<pos:position pos:line="8" pos:column="35"/></literal></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="37">get_git_namespace<pos:position pos:line="8" pos:column="54"/></name><argument_list pos:line="8" pos:column="54">()<pos:position pos:line="8" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="58"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">read_ref_full<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name><name pos:line="9" pos:column="28">buf<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">.<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="32">buf<pos:position pos:line="9" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="37">RESOLVE_REF_READING<pos:position pos:line="9" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="58">oid<pos:position pos:line="9" pos:column="61"/></name><operator pos:line="9" pos:column="61">.<pos:position pos:line="9" pos:column="62"/></operator><name pos:line="9" pos:column="62">hash<pos:position pos:line="9" pos:column="66"/></name></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="68">&amp;<pos:position pos:line="9" pos:column="73"/></operator><name pos:line="9" pos:column="69">flag<pos:position pos:line="9" pos:column="73"/></name></expr></argument>)<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="75"/></condition><then pos:line="9" pos:column="75">
		<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="17">ret<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">=<pos:position pos:line="10" pos:column="22"/></operator> <call><name pos:line="10" pos:column="23">fn<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name><name pos:line="10" pos:column="26">buf<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">.<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="30">buf<pos:position pos:line="10" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="35">&amp;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="36">oid<pos:position pos:line="10" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="41">flag<pos:position pos:line="10" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="47">cb_data<pos:position pos:line="10" pos:column="54"/></name></expr></argument>)<pos:position pos:line="10" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="56"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">strbuf_release<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><operator pos:line="11" pos:column="24">&amp;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="25">buf<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>

	<return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">ret<pos:position pos:line="13" pos:column="19"/></name></expr>;<pos:position pos:line="13" pos:column="20"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
