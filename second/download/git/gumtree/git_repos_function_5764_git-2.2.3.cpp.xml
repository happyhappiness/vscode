<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5764_git-2.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">add_epsilon_src_nodes<pos:position pos:line="3" pos:column="22"/></name> <parameter_list pos:line="3" pos:column="23">(<parameter><decl><type><specifier pos:line="3" pos:column="24">const<pos:position pos:line="3" pos:column="29"/></specifier> <name pos:line="3" pos:column="30">re_dfa_t<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">dfa<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="45">re_node_set<pos:position pos:line="3" pos:column="56"/></name> <modifier pos:line="3" pos:column="57">*<pos:position pos:line="3" pos:column="58"/></modifier></type><name pos:line="3" pos:column="58">dest_nodes<pos:position pos:line="3" pos:column="68"/></name></decl></parameter>,
		       <parameter><decl><type><specifier pos:line="4" pos:column="24">const<pos:position pos:line="4" pos:column="29"/></specifier> <name pos:line="4" pos:column="30">re_node_set<pos:position pos:line="4" pos:column="41"/></name> <modifier pos:line="4" pos:column="42">*<pos:position pos:line="4" pos:column="43"/></modifier></type><name pos:line="4" pos:column="43">candidates<pos:position pos:line="4" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="54"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">reg_errcode_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">err<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">REG_NOERROR<pos:position pos:line="6" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">re_dfastate_t<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">state<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><call><name pos:line="9" pos:column="26">re_acquire_state<pos:position pos:line="9" pos:column="42"/></name> <argument_list pos:line="9" pos:column="43">(<argument><expr><operator pos:line="9" pos:column="44">&amp;<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="45">err<pos:position pos:line="9" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="50">dfa<pos:position pos:line="9" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="55">dest_nodes<pos:position pos:line="9" pos:column="65"/></name></expr></argument>)<pos:position pos:line="9" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="67"/></decl_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><call><name pos:line="10" pos:column="7">BE<pos:position pos:line="10" pos:column="9"/></name> <argument_list pos:line="10" pos:column="10">(<argument><expr><name pos:line="10" pos:column="11">err<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">!=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">REG_NOERROR<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="31">0<pos:position pos:line="10" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">err<pos:position pos:line="11" pos:column="15"/></name></expr>;<pos:position pos:line="11" pos:column="16"/></return></block></then></if>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><operator pos:line="13" pos:column="7">!<pos:position pos:line="13" pos:column="8"/></operator><name><name pos:line="13" pos:column="8">state<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">inveclosure<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">.<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">alloc<pos:position pos:line="13" pos:column="32"/></name></name></expr>)<pos:position pos:line="13" pos:column="33"/></condition><then pos:line="13" pos:column="33">
    <block pos:line="14" pos:column="5">{
      <expr_stmt><expr><name pos:line="15" pos:column="7">err<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <call><name pos:line="15" pos:column="13">re_node_set_alloc<pos:position pos:line="15" pos:column="30"/></name> <argument_list pos:line="15" pos:column="31">(<argument><expr><operator pos:line="15" pos:column="32">&amp;<pos:position pos:line="15" pos:column="37"/></operator><name><name pos:line="15" pos:column="33">state<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">-&gt;<pos:position pos:line="15" pos:column="43"/></operator><name pos:line="15" pos:column="40">inveclosure<pos:position pos:line="15" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="53">dest_nodes<pos:position pos:line="15" pos:column="63"/></name><operator pos:line="15" pos:column="63">-&gt;<pos:position pos:line="15" pos:column="68"/></operator><name pos:line="15" pos:column="65">nelem<pos:position pos:line="15" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="72"/></expr_stmt>
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><call><name pos:line="16" pos:column="11">BE<pos:position pos:line="16" pos:column="13"/></name> <argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">err<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">!=<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">REG_NOERROR<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="35">0<pos:position pos:line="16" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="38"/></condition><then pos:line="16" pos:column="38">
	<block type="pseudo"><return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">REG_ESPACE<pos:position pos:line="17" pos:column="26"/></name></expr>;<pos:position pos:line="17" pos:column="27"/></return></block></then></if>
      <for pos:line="18" pos:column="7">for <control pos:line="18" pos:column="11">(<init><expr><name pos:line="18" pos:column="12">i<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <literal type="number" pos:line="18" pos:column="16">0<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></init> <condition><expr><name pos:line="18" pos:column="19">i<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">&lt;<pos:position pos:line="18" pos:column="25"/></operator> <name><name pos:line="18" pos:column="23">dest_nodes<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">-&gt;<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="35">nelem<pos:position pos:line="18" pos:column="40"/></name></name></expr>;<pos:position pos:line="18" pos:column="41"/></condition> <incr><expr><name pos:line="18" pos:column="42">i<pos:position pos:line="18" pos:column="43"/></name><operator pos:line="18" pos:column="43">++<pos:position pos:line="18" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="46"/></control>
	<block pos:line="19" pos:column="9">{
	  <expr_stmt><expr><name pos:line="20" pos:column="11">err<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <call><name pos:line="20" pos:column="17">re_node_set_merge<pos:position pos:line="20" pos:column="34"/></name> <argument_list pos:line="20" pos:column="35">(<argument><expr><operator pos:line="20" pos:column="36">&amp;<pos:position pos:line="20" pos:column="41"/></operator><name><name pos:line="20" pos:column="37">state<pos:position pos:line="20" pos:column="42"/></name><operator pos:line="20" pos:column="42">-&gt;<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="44">inveclosure<pos:position pos:line="20" pos:column="55"/></name></name></expr></argument>,
				   <argument><expr><name><name pos:line="21" pos:column="36">dfa<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">-&gt;<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="41">inveclosures<pos:position pos:line="21" pos:column="53"/></name></name> <operator pos:line="21" pos:column="54">+<pos:position pos:line="21" pos:column="55"/></operator> <name><name pos:line="21" pos:column="56">dest_nodes<pos:position pos:line="21" pos:column="66"/></name><operator pos:line="21" pos:column="66">-&gt;<pos:position pos:line="21" pos:column="71"/></operator><name pos:line="21" pos:column="68">elems<pos:position pos:line="21" pos:column="73"/></name><index pos:line="21" pos:column="73">[<expr><name pos:line="21" pos:column="74">i<pos:position pos:line="21" pos:column="75"/></name></expr>]<pos:position pos:line="21" pos:column="76"/></index></name></expr></argument>)<pos:position pos:line="21" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="78"/></expr_stmt>
	  <if pos:line="22" pos:column="11">if <condition pos:line="22" pos:column="14">(<expr><call><name pos:line="22" pos:column="15">BE<pos:position pos:line="22" pos:column="17"/></name> <argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">err<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">!=<pos:position pos:line="22" pos:column="25"/></operator> <name pos:line="22" pos:column="26">REG_NOERROR<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="39">0<pos:position pos:line="22" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42">
	    <block type="pseudo"><return pos:line="23" pos:column="13">return <expr><name pos:line="23" pos:column="20">REG_ESPACE<pos:position pos:line="23" pos:column="30"/></name></expr>;<pos:position pos:line="23" pos:column="31"/></return></block></then></if>
	}<pos:position pos:line="24" pos:column="10"/></block></for>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
  <return pos:line="26" pos:column="3">return <expr><call><name pos:line="26" pos:column="10">re_node_set_add_intersect<pos:position pos:line="26" pos:column="35"/></name> <argument_list pos:line="26" pos:column="36">(<argument><expr><name pos:line="26" pos:column="37">dest_nodes<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">candidates<pos:position pos:line="26" pos:column="59"/></name></expr></argument>,
				    <argument><expr><operator pos:line="27" pos:column="37">&amp;<pos:position pos:line="27" pos:column="42"/></operator><name><name pos:line="27" pos:column="38">state<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">-&gt;<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="45">inveclosure<pos:position pos:line="27" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
