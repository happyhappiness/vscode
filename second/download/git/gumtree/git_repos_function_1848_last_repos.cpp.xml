<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1848_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">long<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">ulong_arg<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">option<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">arg<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">endptr<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">long<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">rv<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><call><name pos:line="4" pos:column="28">strtoul<pos:position pos:line="4" pos:column="35"/></name><argument_list pos:line="4" pos:column="35">(<argument><expr><name pos:line="4" pos:column="36">arg<pos:position pos:line="4" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="4" pos:column="41">&amp;<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="42">endptr<pos:position pos:line="4" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="50">0<pos:position pos:line="4" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="53"/></decl_stmt>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">strchr<pos:position pos:line="5" pos:column="19"/></name><argument_list pos:line="5" pos:column="19">(<argument><expr><name pos:line="5" pos:column="20">arg<pos:position pos:line="5" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="5" pos:column="25">'-'<pos:position pos:line="5" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call> <operator pos:line="5" pos:column="30">||<pos:position pos:line="5" pos:column="32"/></operator> <name pos:line="5" pos:column="33">endptr<pos:position pos:line="5" pos:column="39"/></name> <operator pos:line="5" pos:column="40">==<pos:position pos:line="5" pos:column="42"/></operator> <name pos:line="5" pos:column="43">arg<pos:position pos:line="5" pos:column="46"/></name> <operator pos:line="5" pos:column="47">||<pos:position pos:line="5" pos:column="49"/></operator> <operator pos:line="5" pos:column="50">*<pos:position pos:line="5" pos:column="51"/></operator><name pos:line="5" pos:column="51">endptr<pos:position pos:line="5" pos:column="57"/></name></expr>)<pos:position pos:line="5" pos:column="58"/></condition><then pos:line="5" pos:column="58">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="17">die<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><literal type="string" pos:line="6" pos:column="21">"%s: argument must be a non-negative integer"<pos:position pos:line="6" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="68">option<pos:position pos:line="6" pos:column="74"/></name></expr></argument>)<pos:position pos:line="6" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="76"/></expr_stmt></block></then></if>
	<return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">rv<pos:position pos:line="7" pos:column="18"/></name></expr>;<pos:position pos:line="7" pos:column="19"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
