<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5954_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <specifier pos:line="1" pos:column="8">inline<pos:position pos:line="1" pos:column="14"/></specifier> <type><name><name pos:line="1" pos:column="15">struct<pos:position pos:line="1" pos:column="21"/></name> <name pos:line="1" pos:column="22">llist_item<pos:position pos:line="1" pos:column="32"/></name></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">llist_insert_sorted_unique<pos:position pos:line="1" pos:column="60"/></name><parameter_list pos:line="1" pos:column="60">(<parameter><decl><type><name><name pos:line="1" pos:column="61">struct<pos:position pos:line="1" pos:column="67"/></name> <name pos:line="1" pos:column="68">llist<pos:position pos:line="1" pos:column="73"/></name></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">list<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">unsigned<pos:position pos:line="2" pos:column="39"/></name> <name pos:line="2" pos:column="40">char<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">sha1<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="52">struct<pos:position pos:line="2" pos:column="58"/></name> <name pos:line="2" pos:column="59">llist_item<pos:position pos:line="2" pos:column="69"/></name></name> <modifier pos:line="2" pos:column="70">*<pos:position pos:line="2" pos:column="71"/></modifier></type><name pos:line="2" pos:column="71">hint<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">llist_item<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">prev<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><name pos:line="4" pos:column="35">NULL<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>, <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="42">l<pos:position pos:line="4" pos:column="43"/></name></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">l<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">=<pos:position pos:line="6" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="6" pos:column="13">(<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">hint<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">==<pos:position pos:line="6" pos:column="21"/></operator> <name pos:line="6" pos:column="22">NULL<pos:position pos:line="6" pos:column="26"/></name><operator pos:line="6" pos:column="26">)<pos:position pos:line="6" pos:column="27"/></operator></expr> ?<pos:position pos:line="6" pos:column="29"/></condition><then pos:line="6" pos:column="29"> <expr><name><name pos:line="6" pos:column="30">list<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">-&gt;<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="36">front<pos:position pos:line="6" pos:column="41"/></name></name></expr> <pos:position pos:line="6" pos:column="42"/></then><else pos:line="6" pos:column="42">: <expr><name pos:line="6" pos:column="44">hint<pos:position pos:line="6" pos:column="48"/></name></expr></else></ternary></expr>;<pos:position pos:line="6" pos:column="49"/></expr_stmt>
	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">l<pos:position pos:line="7" pos:column="17"/></name></expr>)<pos:position pos:line="7" pos:column="18"/></condition> <block pos:line="7" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">cmp<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><call><name pos:line="8" pos:column="27">hashcmp<pos:position pos:line="8" pos:column="34"/></name><argument_list pos:line="8" pos:column="34">(<argument><expr><name><name pos:line="8" pos:column="35">l<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">-&gt;<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="38">sha1<pos:position pos:line="8" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="44">sha1<pos:position pos:line="8" pos:column="48"/></name></expr></argument>)<pos:position pos:line="8" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="50"/></decl_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">cmp<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">&gt;<pos:position pos:line="9" pos:column="29"/></operator> <literal type="number" pos:line="9" pos:column="27">0<pos:position pos:line="9" pos:column="28"/></literal></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29"> <block pos:line="9" pos:column="30">{ <comment type="block" pos:line="9" pos:column="32">/* we insert before this entry */</comment>
			<return pos:line="10" pos:column="25">return <expr><call><name pos:line="10" pos:column="32">llist_insert<pos:position pos:line="10" pos:column="44"/></name><argument_list pos:line="10" pos:column="44">(<argument><expr><name pos:line="10" pos:column="45">list<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="51">prev<pos:position pos:line="10" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="57">sha1<pos:position pos:line="10" pos:column="61"/></name></expr></argument>)<pos:position pos:line="10" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="63"/></return>
		}<pos:position pos:line="11" pos:column="18"/></block></then></if>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">cmp<pos:position pos:line="12" pos:column="25"/></name></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26"> <block pos:line="12" pos:column="27">{ <comment type="block" pos:line="12" pos:column="29">/* already exists */</comment>
			<return pos:line="13" pos:column="25">return <expr><name pos:line="13" pos:column="32">l<pos:position pos:line="13" pos:column="33"/></name></expr>;<pos:position pos:line="13" pos:column="34"/></return>
		}<pos:position pos:line="14" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="15" pos:column="17">prev<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">=<pos:position pos:line="15" pos:column="23"/></operator> <name pos:line="15" pos:column="24">l<pos:position pos:line="15" pos:column="25"/></name></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">l<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <name><name pos:line="16" pos:column="21">l<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">-&gt;<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="24">next<pos:position pos:line="16" pos:column="28"/></name></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></while>
	<comment type="block" pos:line="18" pos:column="9">/* insert at the end */</comment>
	<return pos:line="19" pos:column="9">return <expr><call><name pos:line="19" pos:column="16">llist_insert_back<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">list<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="40">sha1<pos:position pos:line="19" pos:column="44"/></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="46"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
