<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4031_git-2.10.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">NORETURN<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">unsupported_magic<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">pattern<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
				       <parameter><decl><type><name pos:line="2" pos:column="40">unsigned<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">magic<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
				       <parameter><decl><type><name pos:line="3" pos:column="40">unsigned<pos:position pos:line="3" pos:column="48"/></name></type> <name pos:line="3" pos:column="49">short_magic<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="61"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">sb<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">STRBUF_INIT<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="16">n<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init><expr><name pos:line="7" pos:column="14">n<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <name pos:line="7" pos:column="18">i<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr>;<pos:position pos:line="7" pos:column="24"/></init> <condition><expr><name pos:line="7" pos:column="25">i<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">&lt;<pos:position pos:line="7" pos:column="31"/></operator> <call><name pos:line="7" pos:column="29">ARRAY_SIZE<pos:position pos:line="7" pos:column="39"/></name><argument_list pos:line="7" pos:column="39">(<argument><expr><name pos:line="7" pos:column="40">pathspec_magic<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="56"/></condition> <incr><expr><name pos:line="7" pos:column="57">i<pos:position pos:line="7" pos:column="58"/></name><operator pos:line="7" pos:column="58">++<pos:position pos:line="7" pos:column="60"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="61"/></control> <block pos:line="7" pos:column="62">{
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name><name pos:line="8" pos:column="23">struct<pos:position pos:line="8" pos:column="29"/></name> <name pos:line="8" pos:column="30">pathspec_magic<pos:position pos:line="8" pos:column="44"/></name></name> <modifier pos:line="8" pos:column="45">*<pos:position pos:line="8" pos:column="46"/></modifier></type><name pos:line="8" pos:column="46">m<pos:position pos:line="8" pos:column="47"/></name> <init pos:line="8" pos:column="48">= <expr><name pos:line="8" pos:column="50">pathspec_magic<pos:position pos:line="8" pos:column="64"/></name> <operator pos:line="8" pos:column="65">+<pos:position pos:line="8" pos:column="66"/></operator> <name pos:line="8" pos:column="67">i<pos:position pos:line="8" pos:column="68"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="69"/></decl_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">!<pos:position pos:line="9" pos:column="22"/></operator><operator pos:line="9" pos:column="22">(<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">magic<pos:position pos:line="9" pos:column="28"/></name> <operator pos:line="9" pos:column="29">&amp;<pos:position pos:line="9" pos:column="34"/></operator> <name><name pos:line="9" pos:column="31">m<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">-&gt;<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="34">bit<pos:position pos:line="9" pos:column="37"/></name></name><operator pos:line="9" pos:column="37">)<pos:position pos:line="9" pos:column="38"/></operator></expr>)<pos:position pos:line="9" pos:column="39"/></condition><then pos:line="9" pos:column="39">
			<block type="pseudo"><continue pos:line="10" pos:column="25">continue;<pos:position pos:line="10" pos:column="34"/></continue></block></then></if>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name><name pos:line="11" pos:column="21">sb<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">.<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">len<pos:position pos:line="11" pos:column="27"/></name></name></expr>)<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">strbuf_addch<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><operator pos:line="12" pos:column="38">&amp;<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="39">sb<pos:position pos:line="12" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="43">' '<pos:position pos:line="12" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt></block></then></if>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">short_magic<pos:position pos:line="13" pos:column="32"/></name> <operator pos:line="13" pos:column="33">&amp;<pos:position pos:line="13" pos:column="38"/></operator> <name><name pos:line="13" pos:column="35">m<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">-&gt;<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="38">bit<pos:position pos:line="13" pos:column="41"/></name></name></expr>)<pos:position pos:line="13" pos:column="42"/></condition><then pos:line="13" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="25">strbuf_addf<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><operator pos:line="14" pos:column="37">&amp;<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="38">sb<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="42">"'%c'"<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="50">m<pos:position pos:line="14" pos:column="51"/></name><operator pos:line="14" pos:column="51">-&gt;<pos:position pos:line="14" pos:column="56"/></operator><name pos:line="14" pos:column="53">mnemonic<pos:position pos:line="14" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="63"/></expr_stmt></block></then>
		<else pos:line="15" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">strbuf_addf<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><operator pos:line="16" pos:column="37">&amp;<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="38">sb<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="42">"'%s'"<pos:position pos:line="16" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="50">m<pos:position pos:line="16" pos:column="51"/></name><operator pos:line="16" pos:column="51">-&gt;<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="53">name<pos:position pos:line="16" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name pos:line="17" pos:column="17">n<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">++<pos:position pos:line="17" pos:column="20"/></operator></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></for>
	<comment type="block" pos:line="19" pos:column="9">/*
	 * We may want to substitute "this command" with a command
	 * name. E.g. when add--interactive dies when running
	 * "checkout -p"
	 */</comment>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">die<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><call><name pos:line="24" pos:column="13">_<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><literal type="string" pos:line="24" pos:column="15">"%s: pathspec magic not supported by this command: %s"<pos:position pos:line="24" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="70"/></argument_list></call></expr></argument>,
	    <argument><expr><name pos:line="25" pos:column="13">pattern<pos:position pos:line="25" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="22">sb<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">.<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="25">buf<pos:position pos:line="25" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
