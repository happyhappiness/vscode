<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2258_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">NORETURN<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">die_verify_filename<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">prefix<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
					 <parameter><decl><type><specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier> <name pos:line="2" pos:column="48">char<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">arg<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>,
					 <parameter><decl><type><name pos:line="3" pos:column="42">int<pos:position pos:line="3" pos:column="45"/></name></type> <name pos:line="3" pos:column="46">diagnose_misspelt_rev<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="68"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">diagnose_misspelt_rev<pos:position pos:line="5" pos:column="35"/></name></expr>)<pos:position pos:line="5" pos:column="36"/></condition><then pos:line="5" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="17">die<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><call><name pos:line="6" pos:column="21">_<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><literal type="string" pos:line="6" pos:column="23">"%s: no such path in the working tree.\n"<pos:position pos:line="6" pos:column="64"/></literal>
		      <literal type="string" pos:line="7" pos:column="23">"Use 'git &lt;command&gt; -- &lt;path&gt;...' to specify paths that do not exist locally."<pos:position pos:line="7" pos:column="113"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="102"/></argument_list></call></expr></argument>,
		    <argument><expr><name pos:line="8" pos:column="21">arg<pos:position pos:line="8" pos:column="24"/></name></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt></block></then></if>
	<comment type="block" pos:line="9" pos:column="9">/*
	 * Saying "'(icase)foo' does not exist in the index" when the
	 * user gave us ":(icase)foo" is just stupid.  A magic pathspec
	 * begins with a colon and is followed by a non-alnum; do not
	 * let maybe_die_on_misspelt_object_name() even trigger.
	 */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><operator pos:line="15" pos:column="14">(<pos:position pos:line="15" pos:column="15"/></operator><name><name pos:line="15" pos:column="15">arg<pos:position pos:line="15" pos:column="18"/></name><index pos:line="15" pos:column="18">[<expr><literal type="number" pos:line="15" pos:column="19">0<pos:position pos:line="15" pos:column="20"/></literal></expr>]<pos:position pos:line="15" pos:column="21"/></index></name> <operator pos:line="15" pos:column="22">==<pos:position pos:line="15" pos:column="24"/></operator> <literal type="char" pos:line="15" pos:column="25">':'<pos:position pos:line="15" pos:column="28"/></literal> <operator pos:line="15" pos:column="29">&amp;&amp;<pos:position pos:line="15" pos:column="39"/></operator> <operator pos:line="15" pos:column="32">!<pos:position pos:line="15" pos:column="33"/></operator><call><name pos:line="15" pos:column="33">isalnum<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name><name pos:line="15" pos:column="41">arg<pos:position pos:line="15" pos:column="44"/></name><index pos:line="15" pos:column="44">[<expr><literal type="number" pos:line="15" pos:column="45">1<pos:position pos:line="15" pos:column="46"/></literal></expr>]<pos:position pos:line="15" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call><operator pos:line="15" pos:column="48">)<pos:position pos:line="15" pos:column="49"/></operator></expr>)<pos:position pos:line="15" pos:column="50"/></condition><then pos:line="15" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">maybe_die_on_misspelt_object_name<pos:position pos:line="16" pos:column="50"/></name><argument_list pos:line="16" pos:column="50">(<argument><expr><name pos:line="16" pos:column="51">arg<pos:position pos:line="16" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="56">prefix<pos:position pos:line="16" pos:column="62"/></name></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="64"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="18" pos:column="9">/* ... or fall back the most general message. */</comment>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">die<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><call><name pos:line="19" pos:column="13">_<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><literal type="string" pos:line="19" pos:column="15">"ambiguous argument '%s': unknown revision or path not in the working tree.\n"<pos:position pos:line="19" pos:column="93"/></literal>
	      <literal type="string" pos:line="20" pos:column="15">"Use '--' to separate paths from revisions, like this:\n"<pos:position pos:line="20" pos:column="72"/></literal>
	      <literal type="string" pos:line="21" pos:column="15">"'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'"<pos:position pos:line="21" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="21" pos:column="66">arg<pos:position pos:line="21" pos:column="69"/></name></expr></argument>)<pos:position pos:line="21" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="71"/></expr_stmt>

}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
