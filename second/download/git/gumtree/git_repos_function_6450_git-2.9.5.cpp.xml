<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6450_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">register_state<pos:position pos:line="2" pos:column="15"/></name> <parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">re_dfa_t<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">dfa<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">re_dfastate_t<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">newstate<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="3" pos:column="17">unsigned<pos:position pos:line="3" pos:column="25"/></name> <name pos:line="3" pos:column="26">int<pos:position pos:line="3" pos:column="29"/></name></type> <name pos:line="3" pos:column="30">hash<pos:position pos:line="3" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="35"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">re_state_table_entry<pos:position pos:line="5" pos:column="30"/></name></name> <modifier pos:line="5" pos:column="31">*<pos:position pos:line="5" pos:column="32"/></modifier></type><name pos:line="5" pos:column="32">spot<pos:position pos:line="5" pos:column="36"/></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">reg_errcode_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">err<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="9" pos:column="3">newstate<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">hash<pos:position pos:line="9" pos:column="17"/></name></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <name pos:line="9" pos:column="20">hash<pos:position pos:line="9" pos:column="24"/></name></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">err<pos:position pos:line="10" pos:column="6"/></name> <operator pos:line="10" pos:column="7">=<pos:position pos:line="10" pos:column="8"/></operator> <call><name pos:line="10" pos:column="9">re_node_set_alloc<pos:position pos:line="10" pos:column="26"/></name> <argument_list pos:line="10" pos:column="27">(<argument><expr><operator pos:line="10" pos:column="28">&amp;<pos:position pos:line="10" pos:column="33"/></operator><name><name pos:line="10" pos:column="29">newstate<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">-&gt;<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="39">non_eps_nodes<pos:position pos:line="10" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="54">newstate<pos:position pos:line="10" pos:column="62"/></name><operator pos:line="10" pos:column="62">-&gt;<pos:position pos:line="10" pos:column="67"/></operator><name pos:line="10" pos:column="64">nodes<pos:position pos:line="10" pos:column="69"/></name><operator pos:line="10" pos:column="69">.<pos:position pos:line="10" pos:column="70"/></operator><name pos:line="10" pos:column="70">nelem<pos:position pos:line="10" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="77"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><call><name pos:line="11" pos:column="7">BE<pos:position pos:line="11" pos:column="9"/></name> <argument_list pos:line="11" pos:column="10">(<argument><expr><name pos:line="11" pos:column="11">err<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">!=<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">REG_NOERROR<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="31">0<pos:position pos:line="11" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="34"/></condition><then pos:line="11" pos:column="34">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">REG_ESPACE<pos:position pos:line="12" pos:column="22"/></name></expr>;<pos:position pos:line="12" pos:column="23"/></return></block></then></if>
  <for pos:line="13" pos:column="3">for <control pos:line="13" pos:column="7">(<init><expr><name pos:line="13" pos:column="8">i<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <literal type="number" pos:line="13" pos:column="12">0<pos:position pos:line="13" pos:column="13"/></literal></expr>;<pos:position pos:line="13" pos:column="14"/></init> <condition><expr><name pos:line="13" pos:column="15">i<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">&lt;<pos:position pos:line="13" pos:column="21"/></operator> <name><name pos:line="13" pos:column="19">newstate<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">-&gt;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="29">nodes<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">.<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="35">nelem<pos:position pos:line="13" pos:column="40"/></name></name></expr>;<pos:position pos:line="13" pos:column="41"/></condition> <incr><expr><name pos:line="13" pos:column="42">i<pos:position pos:line="13" pos:column="43"/></name><operator pos:line="13" pos:column="43">++<pos:position pos:line="13" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="46"/></control>
    <block pos:line="14" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="15" pos:column="7">int<pos:position pos:line="15" pos:column="10"/></name></type> <name pos:line="15" pos:column="11">elem<pos:position pos:line="15" pos:column="15"/></name> <init pos:line="15" pos:column="16">= <expr><name><name pos:line="15" pos:column="18">newstate<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="28">nodes<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">.<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">elems<pos:position pos:line="15" pos:column="39"/></name><index pos:line="15" pos:column="39">[<expr><name pos:line="15" pos:column="40">i<pos:position pos:line="15" pos:column="41"/></name></expr>]<pos:position pos:line="15" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="15" pos:column="43"/></decl_stmt>
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><operator pos:line="16" pos:column="11">!<pos:position pos:line="16" pos:column="12"/></operator><call><name pos:line="16" pos:column="12">IS_EPSILON_NODE<pos:position pos:line="16" pos:column="27"/></name> <argument_list pos:line="16" pos:column="28">(<argument><expr><name><name pos:line="16" pos:column="29">dfa<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">-&gt;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="34">nodes<pos:position pos:line="16" pos:column="39"/></name><index pos:line="16" pos:column="39">[<expr><name pos:line="16" pos:column="40">elem<pos:position pos:line="16" pos:column="44"/></name></expr>]<pos:position pos:line="16" pos:column="45"/></index></name><operator pos:line="16" pos:column="45">.<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">type<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="52"/></condition><then pos:line="16" pos:column="52">
	<block type="pseudo"><if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">re_node_set_insert_last<pos:position pos:line="17" pos:column="36"/></name> <argument_list pos:line="17" pos:column="37">(<argument><expr><operator pos:line="17" pos:column="38">&amp;<pos:position pos:line="17" pos:column="43"/></operator><name><name pos:line="17" pos:column="39">newstate<pos:position pos:line="17" pos:column="47"/></name><operator pos:line="17" pos:column="47">-&gt;<pos:position pos:line="17" pos:column="52"/></operator><name pos:line="17" pos:column="49">non_eps_nodes<pos:position pos:line="17" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="64">elem<pos:position pos:line="17" pos:column="68"/></name></expr></argument>)<pos:position pos:line="17" pos:column="69"/></argument_list></call> <operator pos:line="17" pos:column="70">&lt;<pos:position pos:line="17" pos:column="74"/></operator> <literal type="number" pos:line="17" pos:column="72">0<pos:position pos:line="17" pos:column="73"/></literal></expr>)<pos:position pos:line="17" pos:column="74"/></condition><then pos:line="17" pos:column="74">
	  <block type="pseudo"><return pos:line="18" pos:column="11">return <expr><name pos:line="18" pos:column="18">REG_ESPACE<pos:position pos:line="18" pos:column="28"/></name></expr>;<pos:position pos:line="18" pos:column="29"/></return></block></then></if></block></then></if>
    }<pos:position pos:line="19" pos:column="6"/></block></for>

  <expr_stmt><expr><name pos:line="21" pos:column="3">spot<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <name><name pos:line="21" pos:column="10">dfa<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">state_table<pos:position pos:line="21" pos:column="26"/></name></name> <operator pos:line="21" pos:column="27">+<pos:position pos:line="21" pos:column="28"/></operator> <operator pos:line="21" pos:column="29">(<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="30">hash<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">&amp;<pos:position pos:line="21" pos:column="40"/></operator> <name><name pos:line="21" pos:column="37">dfa<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">-&gt;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="42">state_hash_mask<pos:position pos:line="21" pos:column="57"/></name></name><operator pos:line="21" pos:column="57">)<pos:position pos:line="21" pos:column="58"/></operator></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><call><name pos:line="22" pos:column="7">BE<pos:position pos:line="22" pos:column="9"/></name> <argument_list pos:line="22" pos:column="10">(<argument><expr><name><name pos:line="22" pos:column="11">spot<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">-&gt;<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="17">alloc<pos:position pos:line="22" pos:column="22"/></name></name> <operator pos:line="22" pos:column="23">&lt;=<pos:position pos:line="22" pos:column="28"/></operator> <name><name pos:line="22" pos:column="26">spot<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">-&gt;<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="32">num<pos:position pos:line="22" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="37">0<pos:position pos:line="22" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="40"/></condition><then pos:line="22" pos:column="40">
    <block pos:line="23" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="24" pos:column="7">int<pos:position pos:line="24" pos:column="10"/></name></type> <name pos:line="24" pos:column="11">new_alloc<pos:position pos:line="24" pos:column="20"/></name> <init pos:line="24" pos:column="21">= <expr><literal type="number" pos:line="24" pos:column="23">2<pos:position pos:line="24" pos:column="24"/></literal> <operator pos:line="24" pos:column="25">*<pos:position pos:line="24" pos:column="26"/></operator> <name><name pos:line="24" pos:column="27">spot<pos:position pos:line="24" pos:column="31"/></name><operator pos:line="24" pos:column="31">-&gt;<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="33">num<pos:position pos:line="24" pos:column="36"/></name></name> <operator pos:line="24" pos:column="37">+<pos:position pos:line="24" pos:column="38"/></operator> <literal type="number" pos:line="24" pos:column="39">2<pos:position pos:line="24" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="41"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="25" pos:column="7">re_dfastate_t<pos:position pos:line="25" pos:column="20"/></name> <modifier pos:line="25" pos:column="21">*<pos:position pos:line="25" pos:column="22"/></modifier><modifier pos:line="25" pos:column="22">*<pos:position pos:line="25" pos:column="23"/></modifier></type><name pos:line="25" pos:column="23">new_array<pos:position pos:line="25" pos:column="32"/></name> <init pos:line="25" pos:column="33">= <expr><call><name pos:line="25" pos:column="35">re_realloc<pos:position pos:line="25" pos:column="45"/></name> <argument_list pos:line="25" pos:column="46">(<argument><expr><name><name pos:line="25" pos:column="47">spot<pos:position pos:line="25" pos:column="51"/></name><operator pos:line="25" pos:column="51">-&gt;<pos:position pos:line="25" pos:column="56"/></operator><name pos:line="25" pos:column="53">array<pos:position pos:line="25" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="60">re_dfastate_t<pos:position pos:line="25" pos:column="73"/></name> <operator pos:line="25" pos:column="74">*<pos:position pos:line="25" pos:column="75"/></operator></expr></argument>,
					      <argument><expr><name pos:line="26" pos:column="47">new_alloc<pos:position pos:line="26" pos:column="56"/></name></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="58"/></decl_stmt>
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><call><name pos:line="27" pos:column="11">BE<pos:position pos:line="27" pos:column="13"/></name> <argument_list pos:line="27" pos:column="14">(<argument><expr><name pos:line="27" pos:column="15">new_array<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">==<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="28">NULL<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="34">0<pos:position pos:line="27" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="37"/></condition><then pos:line="27" pos:column="37">
	<block type="pseudo"><return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">REG_ESPACE<pos:position pos:line="28" pos:column="26"/></name></expr>;<pos:position pos:line="28" pos:column="27"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="29" pos:column="7">spot<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">-&gt;<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="13">array<pos:position pos:line="29" pos:column="18"/></name></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">new_array<pos:position pos:line="29" pos:column="30"/></name></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="30" pos:column="7">spot<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">alloc<pos:position pos:line="30" pos:column="18"/></name></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <name pos:line="30" pos:column="21">new_alloc<pos:position pos:line="30" pos:column="30"/></name></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="32" pos:column="3">spot<pos:position pos:line="32" pos:column="7"/></name><operator pos:line="32" pos:column="7">-&gt;<pos:position pos:line="32" pos:column="12"/></operator><name pos:line="32" pos:column="9">array<pos:position pos:line="32" pos:column="14"/></name><index pos:line="32" pos:column="14">[<expr><name><name pos:line="32" pos:column="15">spot<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">-&gt;<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="21">num<pos:position pos:line="32" pos:column="24"/></name></name><operator pos:line="32" pos:column="24">++<pos:position pos:line="32" pos:column="26"/></operator></expr>]<pos:position pos:line="32" pos:column="27"/></index></name> <operator pos:line="32" pos:column="28">=<pos:position pos:line="32" pos:column="29"/></operator> <name pos:line="32" pos:column="30">newstate<pos:position pos:line="32" pos:column="38"/></name></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
  <return pos:line="33" pos:column="3">return <expr><name pos:line="33" pos:column="10">REG_NOERROR<pos:position pos:line="33" pos:column="21"/></name></expr>;<pos:position pos:line="33" pos:column="22"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
