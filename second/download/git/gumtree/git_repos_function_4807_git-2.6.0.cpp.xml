<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4807_git-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fall_back_threeway<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">am_state<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">state<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="61">const<pos:position pos:line="1" pos:column="66"/></specifier> <name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">index_path<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="84"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name><name pos:line="3" pos:column="23">orig_tree<pos:position pos:line="3" pos:column="32"/></name><index pos:line="3" pos:column="32">[<expr><name pos:line="3" pos:column="33">GIT_SHA1_RAWSZ<pos:position pos:line="3" pos:column="47"/></name></expr>]<pos:position pos:line="3" pos:column="48"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="3" pos:column="50">his_tree<pos:position pos:line="3" pos:column="58"/></name><index pos:line="3" pos:column="58">[<expr><name pos:line="3" pos:column="59">GIT_SHA1_RAWSZ<pos:position pos:line="3" pos:column="73"/></name></expr>]<pos:position pos:line="3" pos:column="74"/></index></name></decl>,
		      <decl><type ref="prev"/><name><name pos:line="4" pos:column="23">our_tree<pos:position pos:line="4" pos:column="31"/></name><index pos:line="4" pos:column="31">[<expr><name pos:line="4" pos:column="32">GIT_SHA1_RAWSZ<pos:position pos:line="4" pos:column="46"/></name></expr>]<pos:position pos:line="4" pos:column="47"/></index></name></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">unsigned<pos:position pos:line="5" pos:column="23"/></name> <name pos:line="5" pos:column="24">char<pos:position pos:line="5" pos:column="28"/></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name><name pos:line="5" pos:column="30">bases<pos:position pos:line="5" pos:column="35"/></name><index pos:line="5" pos:column="35">[<expr><literal type="number" pos:line="5" pos:column="36">1<pos:position pos:line="5" pos:column="37"/></literal></expr>]<pos:position pos:line="5" pos:column="38"/></index></name> <init pos:line="5" pos:column="39">= <expr><block pos:line="5" pos:column="41">{<expr><name pos:line="5" pos:column="42">orig_tree<pos:position pos:line="5" pos:column="51"/></name></expr>}<pos:position pos:line="5" pos:column="52"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="53"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">merge_options<pos:position pos:line="6" pos:column="29"/></name></name></type> <name pos:line="6" pos:column="30">o<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">commit<pos:position pos:line="7" pos:column="22"/></name></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">result<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">his_tree_name<pos:position pos:line="8" pos:column="28"/></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">get_sha1<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><literal type="string" pos:line="10" pos:column="22">"HEAD"<pos:position pos:line="10" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">our_tree<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call> <operator pos:line="10" pos:column="40">&lt;<pos:position pos:line="10" pos:column="44"/></operator> <literal type="number" pos:line="10" pos:column="42">0<pos:position pos:line="10" pos:column="43"/></literal></expr>)<pos:position pos:line="10" pos:column="44"/></condition><then pos:line="10" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">hashcpy<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">our_tree<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="35">EMPTY_TREE_SHA1_BIN<pos:position pos:line="11" pos:column="54"/></name></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="56"/></expr_stmt></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">build_fake_ancestor<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">state<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">index_path<pos:position pos:line="13" pos:column="50"/></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="52"/></condition><then pos:line="13" pos:column="52">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><call><name pos:line="14" pos:column="24">error<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><literal type="string" pos:line="14" pos:column="30">"could not build fake ancestor"<pos:position pos:line="14" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="63"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">discard_cache<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">()<pos:position pos:line="16" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">read_cache_from<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">index_path<pos:position pos:line="17" pos:column="35"/></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">write_index_as_tree<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">orig_tree<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="44">&amp;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="45">the_index<pos:position pos:line="19" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="56">index_path<pos:position pos:line="19" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="68">0<pos:position pos:line="19" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="71">NULL<pos:position pos:line="19" pos:column="75"/></name></expr></argument>)<pos:position pos:line="19" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="77"/></condition><then pos:line="19" pos:column="77">
		<block type="pseudo"><return pos:line="20" pos:column="17">return <expr><call><name pos:line="20" pos:column="24">error<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><call><name pos:line="20" pos:column="30">_<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><literal type="string" pos:line="20" pos:column="32">"Repository lacks necessary blobs to fall back on 3-way merge."<pos:position pos:line="20" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="98"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">say<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">state<pos:position pos:line="22" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="20">stdout<pos:position pos:line="22" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="28">_<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><literal type="string" pos:line="22" pos:column="30">"Using index info to reconstruct a base tree..."<pos:position pos:line="22" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="81"/></expr_stmt>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><name><name pos:line="24" pos:column="14">state<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">-&gt;<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="21">quiet<pos:position pos:line="24" pos:column="26"/></name></name></expr>)<pos:position pos:line="24" pos:column="27"/></condition><then pos:line="24" pos:column="27"> <block pos:line="24" pos:column="28">{
		<comment type="block" pos:line="25" pos:column="17">/*
		 * List paths that needed 3-way fallback, so that the user can
		 * review them with extra care to spot mismerges.
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="29" pos:column="17">struct<pos:position pos:line="29" pos:column="23"/></name> <name pos:line="29" pos:column="24">rev_info<pos:position pos:line="29" pos:column="32"/></name></name></type> <name pos:line="29" pos:column="33">rev_info<pos:position pos:line="29" pos:column="41"/></name></decl>;<pos:position pos:line="29" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="30" pos:column="17">const<pos:position pos:line="30" pos:column="22"/></specifier> <name pos:line="30" pos:column="23">char<pos:position pos:line="30" pos:column="27"/></name> <modifier pos:line="30" pos:column="28">*<pos:position pos:line="30" pos:column="29"/></modifier></type><name pos:line="30" pos:column="29">diff_filter_str<pos:position pos:line="30" pos:column="44"/></name> <init pos:line="30" pos:column="45">= <expr><literal type="string" pos:line="30" pos:column="47">"--diff-filter=AM"<pos:position pos:line="30" pos:column="65"/></literal></expr></init></decl>;<pos:position pos:line="30" pos:column="66"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="32" pos:column="17">init_revisions<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><operator pos:line="32" pos:column="32">&amp;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="33">rev_info<pos:position pos:line="32" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="43">NULL<pos:position pos:line="32" pos:column="47"/></name></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">rev_info<pos:position pos:line="33" pos:column="25"/></name><operator pos:line="33" pos:column="25">.<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="26">diffopt<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">.<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">output_format<pos:position pos:line="33" pos:column="47"/></name></name> <operator pos:line="33" pos:column="48">=<pos:position pos:line="33" pos:column="49"/></operator> <name pos:line="33" pos:column="50">DIFF_FORMAT_NAME_STATUS<pos:position pos:line="33" pos:column="73"/></name></expr>;<pos:position pos:line="33" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">diff_opt_parse<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><operator pos:line="34" pos:column="32">&amp;<pos:position pos:line="34" pos:column="37"/></operator><name><name pos:line="34" pos:column="33">rev_info<pos:position pos:line="34" pos:column="41"/></name><operator pos:line="34" pos:column="41">.<pos:position pos:line="34" pos:column="42"/></operator><name pos:line="34" pos:column="42">diffopt<pos:position pos:line="34" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="51">&amp;<pos:position pos:line="34" pos:column="56"/></operator><name pos:line="34" pos:column="52">diff_filter_str<pos:position pos:line="34" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="69">1<pos:position pos:line="34" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">add_pending_sha1<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><operator pos:line="35" pos:column="34">&amp;<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="35">rev_info<pos:position pos:line="35" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="45">"HEAD"<pos:position pos:line="35" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="53">our_tree<pos:position pos:line="35" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="63">0<pos:position pos:line="35" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">diff_setup_done<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><operator pos:line="36" pos:column="33">&amp;<pos:position pos:line="36" pos:column="38"/></operator><name><name pos:line="36" pos:column="34">rev_info<pos:position pos:line="36" pos:column="42"/></name><operator pos:line="36" pos:column="42">.<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="43">diffopt<pos:position pos:line="36" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">run_diff_index<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><operator pos:line="37" pos:column="32">&amp;<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="33">rev_info<pos:position pos:line="37" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="43">1<pos:position pos:line="37" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name pos:line="40" pos:column="13">run_apply<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><name pos:line="40" pos:column="23">state<pos:position pos:line="40" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="30">index_path<pos:position pos:line="40" pos:column="40"/></name></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="42"/></condition><then pos:line="40" pos:column="42">
		<block type="pseudo"><return pos:line="41" pos:column="17">return <expr><call><name pos:line="41" pos:column="24">error<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><call><name pos:line="41" pos:column="30">_<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><literal type="string" pos:line="41" pos:column="32">"Did you hand edit your patch?\n"<pos:position pos:line="41" pos:column="65"/></literal>
				<literal type="string" pos:line="42" pos:column="33">"It does not apply to blobs recorded in its index."<pos:position pos:line="42" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="87"/></return></block></then></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name pos:line="44" pos:column="13">write_index_as_tree<pos:position pos:line="44" pos:column="32"/></name><argument_list pos:line="44" pos:column="32">(<argument><expr><name pos:line="44" pos:column="33">his_tree<pos:position pos:line="44" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="43">&amp;<pos:position pos:line="44" pos:column="48"/></operator><name pos:line="44" pos:column="44">the_index<pos:position pos:line="44" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="55">index_path<pos:position pos:line="44" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="67">0<pos:position pos:line="44" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="70">NULL<pos:position pos:line="44" pos:column="74"/></name></expr></argument>)<pos:position pos:line="44" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="76"/></condition><then pos:line="44" pos:column="76">
		<block type="pseudo"><return pos:line="45" pos:column="17">return <expr><call><name pos:line="45" pos:column="24">error<pos:position pos:line="45" pos:column="29"/></name><argument_list pos:line="45" pos:column="29">(<argument><expr><literal type="string" pos:line="45" pos:column="30">"could not write tree"<pos:position pos:line="45" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="54"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="47" pos:column="9">say<pos:position pos:line="47" pos:column="12"/></name><argument_list pos:line="47" pos:column="12">(<argument><expr><name pos:line="47" pos:column="13">state<pos:position pos:line="47" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="20">stdout<pos:position pos:line="47" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="28">_<pos:position pos:line="47" pos:column="29"/></name><argument_list pos:line="47" pos:column="29">(<argument><expr><literal type="string" pos:line="47" pos:column="30">"Falling back to patching base and 3-way merge..."<pos:position pos:line="47" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="83"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="49" pos:column="9">discard_cache<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">()<pos:position pos:line="49" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">read_cache<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">()<pos:position pos:line="50" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="22"/></expr_stmt>

	<comment type="block" pos:line="52" pos:column="9">/*
	 * This is not so wrong. Depending on which base we picked, orig_tree
	 * may be wildly different from ours, but his_tree has the same set of
	 * wildly different changes in parts the patch did not touch, so
	 * recursive ends up canceling them, saying that we reverted all those
	 * changes.
	 */</comment>

	<expr_stmt><expr><call><name pos:line="60" pos:column="9">init_merge_options<pos:position pos:line="60" pos:column="27"/></name><argument_list pos:line="60" pos:column="27">(<argument><expr><operator pos:line="60" pos:column="28">&amp;<pos:position pos:line="60" pos:column="33"/></operator><name pos:line="60" pos:column="29">o<pos:position pos:line="60" pos:column="30"/></name></expr></argument>)<pos:position pos:line="60" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="62" pos:column="9">o<pos:position pos:line="62" pos:column="10"/></name><operator pos:line="62" pos:column="10">.<pos:position pos:line="62" pos:column="11"/></operator><name pos:line="62" pos:column="11">branch1<pos:position pos:line="62" pos:column="18"/></name></name> <operator pos:line="62" pos:column="19">=<pos:position pos:line="62" pos:column="20"/></operator> <literal type="string" pos:line="62" pos:column="21">"HEAD"<pos:position pos:line="62" pos:column="27"/></literal></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="63" pos:column="9">his_tree_name<pos:position pos:line="63" pos:column="22"/></name> <operator pos:line="63" pos:column="23">=<pos:position pos:line="63" pos:column="24"/></operator> <call><name pos:line="63" pos:column="25">xstrfmt<pos:position pos:line="63" pos:column="32"/></name><argument_list pos:line="63" pos:column="32">(<argument><expr><literal type="string" pos:line="63" pos:column="33">"%.*s"<pos:position pos:line="63" pos:column="39"/></literal></expr></argument>, <argument><expr><call><name pos:line="63" pos:column="41">linelen<pos:position pos:line="63" pos:column="48"/></name><argument_list pos:line="63" pos:column="48">(<argument><expr><name><name pos:line="63" pos:column="49">state<pos:position pos:line="63" pos:column="54"/></name><operator pos:line="63" pos:column="54">-&gt;<pos:position pos:line="63" pos:column="59"/></operator><name pos:line="63" pos:column="56">msg<pos:position pos:line="63" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="62">state<pos:position pos:line="63" pos:column="67"/></name><operator pos:line="63" pos:column="67">-&gt;<pos:position pos:line="63" pos:column="72"/></operator><name pos:line="63" pos:column="69">msg<pos:position pos:line="63" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="74"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="64" pos:column="9">o<pos:position pos:line="64" pos:column="10"/></name><operator pos:line="64" pos:column="10">.<pos:position pos:line="64" pos:column="11"/></operator><name pos:line="64" pos:column="11">branch2<pos:position pos:line="64" pos:column="18"/></name></name> <operator pos:line="64" pos:column="19">=<pos:position pos:line="64" pos:column="20"/></operator> <name pos:line="64" pos:column="21">his_tree_name<pos:position pos:line="64" pos:column="34"/></name></expr>;<pos:position pos:line="64" pos:column="35"/></expr_stmt>

	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name><name pos:line="66" pos:column="13">state<pos:position pos:line="66" pos:column="18"/></name><operator pos:line="66" pos:column="18">-&gt;<pos:position pos:line="66" pos:column="23"/></operator><name pos:line="66" pos:column="20">quiet<pos:position pos:line="66" pos:column="25"/></name></name></expr>)<pos:position pos:line="66" pos:column="26"/></condition><then pos:line="66" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="67" pos:column="17">o<pos:position pos:line="67" pos:column="18"/></name><operator pos:line="67" pos:column="18">.<pos:position pos:line="67" pos:column="19"/></operator><name pos:line="67" pos:column="19">verbosity<pos:position pos:line="67" pos:column="28"/></name></name> <operator pos:line="67" pos:column="29">=<pos:position pos:line="67" pos:column="30"/></operator> <literal type="number" pos:line="67" pos:column="31">0<pos:position pos:line="67" pos:column="32"/></literal></expr>;<pos:position pos:line="67" pos:column="33"/></expr_stmt></block></then></if>

	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><call><name pos:line="69" pos:column="13">merge_recursive_generic<pos:position pos:line="69" pos:column="36"/></name><argument_list pos:line="69" pos:column="36">(<argument><expr><operator pos:line="69" pos:column="37">&amp;<pos:position pos:line="69" pos:column="42"/></operator><name pos:line="69" pos:column="38">o<pos:position pos:line="69" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="41">our_tree<pos:position pos:line="69" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="51">his_tree<pos:position pos:line="69" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="61">1<pos:position pos:line="69" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="64">bases<pos:position pos:line="69" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="71">&amp;<pos:position pos:line="69" pos:column="76"/></operator><name pos:line="69" pos:column="72">result<pos:position pos:line="69" pos:column="78"/></name></expr></argument>)<pos:position pos:line="69" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="80"/></condition><then pos:line="69" pos:column="80"> <block pos:line="69" pos:column="81">{
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">rerere<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><name><name pos:line="70" pos:column="24">state<pos:position pos:line="70" pos:column="29"/></name><operator pos:line="70" pos:column="29">-&gt;<pos:position pos:line="70" pos:column="34"/></operator><name pos:line="70" pos:column="31">allow_rerere_autoupdate<pos:position pos:line="70" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">free<pos:position pos:line="71" pos:column="21"/></name><argument_list pos:line="71" pos:column="21">(<argument><expr><name pos:line="71" pos:column="22">his_tree_name<pos:position pos:line="71" pos:column="35"/></name></expr></argument>)<pos:position pos:line="71" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="37"/></expr_stmt>
		<return pos:line="72" pos:column="17">return <expr><call><name pos:line="72" pos:column="24">error<pos:position pos:line="72" pos:column="29"/></name><argument_list pos:line="72" pos:column="29">(<argument><expr><call><name pos:line="72" pos:column="30">_<pos:position pos:line="72" pos:column="31"/></name><argument_list pos:line="72" pos:column="31">(<argument><expr><literal type="string" pos:line="72" pos:column="32">"Failed to merge in the changes."<pos:position pos:line="72" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="72" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="68"/></return>
	}<pos:position pos:line="73" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="75" pos:column="9">free<pos:position pos:line="75" pos:column="13"/></name><argument_list pos:line="75" pos:column="13">(<argument><expr><name pos:line="75" pos:column="14">his_tree_name<pos:position pos:line="75" pos:column="27"/></name></expr></argument>)<pos:position pos:line="75" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="29"/></expr_stmt>
	<return pos:line="76" pos:column="9">return <expr><literal type="number" pos:line="76" pos:column="16">0<pos:position pos:line="76" pos:column="17"/></literal></expr>;<pos:position pos:line="76" pos:column="18"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
