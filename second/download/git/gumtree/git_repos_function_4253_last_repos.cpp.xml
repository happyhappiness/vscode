<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4253_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">score_trees<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">object_id<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">hash1<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name><name pos:line="1" pos:column="61">struct<pos:position pos:line="1" pos:column="67"/></name> <name pos:line="1" pos:column="68">object_id<pos:position pos:line="1" pos:column="77"/></name></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">hash2<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="85"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">tree_desc<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">one<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">tree_desc<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">two<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">void<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">one_buf<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><call><name pos:line="5" pos:column="25">fill_tree_desc_strict<pos:position pos:line="5" pos:column="46"/></name><argument_list pos:line="5" pos:column="46">(<argument><expr><operator pos:line="5" pos:column="47">&amp;<pos:position pos:line="5" pos:column="52"/></operator><name pos:line="5" pos:column="48">one<pos:position pos:line="5" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="53">hash1<pos:position pos:line="5" pos:column="58"/></name></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">void<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">two_buf<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><call><name pos:line="6" pos:column="25">fill_tree_desc_strict<pos:position pos:line="6" pos:column="46"/></name><argument_list pos:line="6" pos:column="46">(<argument><expr><operator pos:line="6" pos:column="47">&amp;<pos:position pos:line="6" pos:column="52"/></operator><name pos:line="6" pos:column="48">two<pos:position pos:line="6" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="53">hash2<pos:position pos:line="6" pos:column="58"/></name></expr></argument>)<pos:position pos:line="6" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">score<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>

	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init pos:line="9" pos:column="14">;<pos:position pos:line="9" pos:column="15"/></init><condition pos:line="9" pos:column="15">;<pos:position pos:line="9" pos:column="16"/></condition><incr/>)<pos:position pos:line="9" pos:column="17"/></control> <block pos:line="9" pos:column="18">{
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">name_entry<pos:position pos:line="10" pos:column="34"/></name></name></type> <name pos:line="10" pos:column="35">e1<pos:position pos:line="10" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="39">e2<pos:position pos:line="10" pos:column="41"/></name></decl>;<pos:position pos:line="10" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">got_entry_from_one<pos:position pos:line="11" pos:column="39"/></name> <init pos:line="11" pos:column="40">= <expr><call><name pos:line="11" pos:column="42">tree_entry<pos:position pos:line="11" pos:column="52"/></name><argument_list pos:line="11" pos:column="52">(<argument><expr><operator pos:line="11" pos:column="53">&amp;<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="54">one<pos:position pos:line="11" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="59">&amp;<pos:position pos:line="11" pos:column="64"/></operator><name pos:line="11" pos:column="60">e1<pos:position pos:line="11" pos:column="62"/></name></expr></argument>)<pos:position pos:line="11" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="64"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">int<pos:position pos:line="12" pos:column="20"/></name></type> <name pos:line="12" pos:column="21">got_entry_from_two<pos:position pos:line="12" pos:column="39"/></name> <init pos:line="12" pos:column="40">= <expr><call><name pos:line="12" pos:column="42">tree_entry<pos:position pos:line="12" pos:column="52"/></name><argument_list pos:line="12" pos:column="52">(<argument><expr><operator pos:line="12" pos:column="53">&amp;<pos:position pos:line="12" pos:column="58"/></operator><name pos:line="12" pos:column="54">two<pos:position pos:line="12" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="59">&amp;<pos:position pos:line="12" pos:column="64"/></operator><name pos:line="12" pos:column="60">e2<pos:position pos:line="12" pos:column="62"/></name></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="64"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">cmp<pos:position pos:line="13" pos:column="24"/></name></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">got_entry_from_one<pos:position pos:line="15" pos:column="39"/></name> <operator pos:line="15" pos:column="40">&amp;&amp;<pos:position pos:line="15" pos:column="50"/></operator> <name pos:line="15" pos:column="43">got_entry_from_two<pos:position pos:line="15" pos:column="61"/></name></expr>)<pos:position pos:line="15" pos:column="62"/></condition><then pos:line="15" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">cmp<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">=<pos:position pos:line="16" pos:column="30"/></operator> <call><name pos:line="16" pos:column="31">base_name_entries_compare<pos:position pos:line="16" pos:column="56"/></name><argument_list pos:line="16" pos:column="56">(<argument><expr><operator pos:line="16" pos:column="57">&amp;<pos:position pos:line="16" pos:column="62"/></operator><name pos:line="16" pos:column="58">e1<pos:position pos:line="16" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="62">&amp;<pos:position pos:line="16" pos:column="67"/></operator><name pos:line="16" pos:column="63">e2<pos:position pos:line="16" pos:column="65"/></name></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="67"/></expr_stmt></block></then>
		<elseif pos:line="17" pos:column="17">else <if pos:line="17" pos:column="22">if <condition pos:line="17" pos:column="25">(<expr><name pos:line="17" pos:column="26">got_entry_from_one<pos:position pos:line="17" pos:column="44"/></name></expr>)<pos:position pos:line="17" pos:column="45"/></condition><then pos:line="17" pos:column="45">
			<comment type="block" pos:line="18" pos:column="25">/* two lacks this entry */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="25">cmp<pos:position pos:line="19" pos:column="28"/></name> <operator pos:line="19" pos:column="29">=<pos:position pos:line="19" pos:column="30"/></operator> <operator pos:line="19" pos:column="31">-<pos:position pos:line="19" pos:column="32"/></operator><literal type="number" pos:line="19" pos:column="32">1<pos:position pos:line="19" pos:column="33"/></literal></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="20" pos:column="17">else <if pos:line="20" pos:column="22">if <condition pos:line="20" pos:column="25">(<expr><name pos:line="20" pos:column="26">got_entry_from_two<pos:position pos:line="20" pos:column="44"/></name></expr>)<pos:position pos:line="20" pos:column="45"/></condition><then pos:line="20" pos:column="45">
			<comment type="block" pos:line="21" pos:column="25">/* two has more entries */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="25">cmp<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">=<pos:position pos:line="22" pos:column="30"/></operator> <literal type="number" pos:line="22" pos:column="31">1<pos:position pos:line="22" pos:column="32"/></literal></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt></block></then></if></elseif>
		<else pos:line="23" pos:column="17">else
			<block type="pseudo"><break pos:line="24" pos:column="25">break;<pos:position pos:line="24" pos:column="31"/></break></block></else></if>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">cmp<pos:position pos:line="26" pos:column="24"/></name> <operator pos:line="26" pos:column="25">&lt;<pos:position pos:line="26" pos:column="29"/></operator> <literal type="number" pos:line="26" pos:column="27">0<pos:position pos:line="26" pos:column="28"/></literal></expr>)<pos:position pos:line="26" pos:column="29"/></condition><then pos:line="26" pos:column="29">
			<comment type="block" pos:line="27" pos:column="25">/* path1 does not appear in two */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="25">score<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">+=<pos:position pos:line="28" pos:column="33"/></operator> <call><name pos:line="28" pos:column="34">score_missing<pos:position pos:line="28" pos:column="47"/></name><argument_list pos:line="28" pos:column="47">(<argument><expr><name><name pos:line="28" pos:column="48">e1<pos:position pos:line="28" pos:column="50"/></name><operator pos:line="28" pos:column="50">.<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="51">mode<pos:position pos:line="28" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="57">e1<pos:position pos:line="28" pos:column="59"/></name><operator pos:line="28" pos:column="59">.<pos:position pos:line="28" pos:column="60"/></operator><name pos:line="28" pos:column="60">path<pos:position pos:line="28" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt></block></then>
		<elseif pos:line="29" pos:column="17">else <if pos:line="29" pos:column="22">if <condition pos:line="29" pos:column="25">(<expr><name pos:line="29" pos:column="26">cmp<pos:position pos:line="29" pos:column="29"/></name> <operator pos:line="29" pos:column="30">&gt;<pos:position pos:line="29" pos:column="34"/></operator> <literal type="number" pos:line="29" pos:column="32">0<pos:position pos:line="29" pos:column="33"/></literal></expr>)<pos:position pos:line="29" pos:column="34"/></condition><then pos:line="29" pos:column="34">
			<comment type="block" pos:line="30" pos:column="25">/* path2 does not appear in one */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="25">score<pos:position pos:line="31" pos:column="30"/></name> <operator pos:line="31" pos:column="31">+=<pos:position pos:line="31" pos:column="33"/></operator> <call><name pos:line="31" pos:column="34">score_missing<pos:position pos:line="31" pos:column="47"/></name><argument_list pos:line="31" pos:column="47">(<argument><expr><name><name pos:line="31" pos:column="48">e2<pos:position pos:line="31" pos:column="50"/></name><operator pos:line="31" pos:column="50">.<pos:position pos:line="31" pos:column="51"/></operator><name pos:line="31" pos:column="51">mode<pos:position pos:line="31" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="57">e2<pos:position pos:line="31" pos:column="59"/></name><operator pos:line="31" pos:column="59">.<pos:position pos:line="31" pos:column="60"/></operator><name pos:line="31" pos:column="60">path<pos:position pos:line="31" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="66"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="32" pos:column="17">else <if pos:line="32" pos:column="22">if <condition pos:line="32" pos:column="25">(<expr><call><name pos:line="32" pos:column="26">oidcmp<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name><name pos:line="32" pos:column="33">e1<pos:position pos:line="32" pos:column="35"/></name><operator pos:line="32" pos:column="35">.<pos:position pos:line="32" pos:column="36"/></operator><name pos:line="32" pos:column="36">oid<pos:position pos:line="32" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="41">e2<pos:position pos:line="32" pos:column="43"/></name><operator pos:line="32" pos:column="43">.<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="44">oid<pos:position pos:line="32" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="49"/></condition><then pos:line="32" pos:column="49">
			<comment type="block" pos:line="33" pos:column="25">/* they are different */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="25">score<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">+=<pos:position pos:line="34" pos:column="33"/></operator> <call><name pos:line="34" pos:column="34">score_differs<pos:position pos:line="34" pos:column="47"/></name><argument_list pos:line="34" pos:column="47">(<argument><expr><name><name pos:line="34" pos:column="48">e1<pos:position pos:line="34" pos:column="50"/></name><operator pos:line="34" pos:column="50">.<pos:position pos:line="34" pos:column="51"/></operator><name pos:line="34" pos:column="51">mode<pos:position pos:line="34" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="57">e2<pos:position pos:line="34" pos:column="59"/></name><operator pos:line="34" pos:column="59">.<pos:position pos:line="34" pos:column="60"/></operator><name pos:line="34" pos:column="60">mode<pos:position pos:line="34" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="66">e1<pos:position pos:line="34" pos:column="68"/></name><operator pos:line="34" pos:column="68">.<pos:position pos:line="34" pos:column="69"/></operator><name pos:line="34" pos:column="69">path<pos:position pos:line="34" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="75"/></expr_stmt></block></then></if></elseif>
		<else pos:line="35" pos:column="17">else
			<comment type="block" pos:line="36" pos:column="25">/* same subtree or blob */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="25">score<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">+=<pos:position pos:line="37" pos:column="33"/></operator> <call><name pos:line="37" pos:column="34">score_matches<pos:position pos:line="37" pos:column="47"/></name><argument_list pos:line="37" pos:column="47">(<argument><expr><name><name pos:line="37" pos:column="48">e1<pos:position pos:line="37" pos:column="50"/></name><operator pos:line="37" pos:column="50">.<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="51">mode<pos:position pos:line="37" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="57">e2<pos:position pos:line="37" pos:column="59"/></name><operator pos:line="37" pos:column="59">.<pos:position pos:line="37" pos:column="60"/></operator><name pos:line="37" pos:column="60">mode<pos:position pos:line="37" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="66">e1<pos:position pos:line="37" pos:column="68"/></name><operator pos:line="37" pos:column="68">.<pos:position pos:line="37" pos:column="69"/></operator><name pos:line="37" pos:column="69">path<pos:position pos:line="37" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="75"/></expr_stmt></block></else></if>
	}<pos:position pos:line="38" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">free<pos:position pos:line="39" pos:column="13"/></name><argument_list pos:line="39" pos:column="13">(<argument><expr><name pos:line="39" pos:column="14">one_buf<pos:position pos:line="39" pos:column="21"/></name></expr></argument>)<pos:position pos:line="39" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">free<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name pos:line="40" pos:column="14">two_buf<pos:position pos:line="40" pos:column="21"/></name></expr></argument>)<pos:position pos:line="40" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
	<return pos:line="41" pos:column="9">return <expr><name pos:line="41" pos:column="16">score<pos:position pos:line="41" pos:column="21"/></name></expr>;<pos:position pos:line="41" pos:column="22"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
