<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5112_git-2.5.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">anonymize_path<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">strbuf<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">out<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">path<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
			   <parameter><decl><type><name><name pos:line="2" pos:column="28">struct<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">hashmap<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">map<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
			   <parameter><function_decl><type><name pos:line="3" pos:column="28">void<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type>(<modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier><name pos:line="3" pos:column="36">generate<pos:position pos:line="3" pos:column="44"/></name>)<parameter_list pos:line="3" pos:column="45">(<parameter><decl><type><specifier pos:line="3" pos:column="46">const<pos:position pos:line="3" pos:column="51"/></specifier> <name pos:line="3" pos:column="52">void<pos:position pos:line="3" pos:column="56"/></name> <modifier pos:line="3" pos:column="57">*<pos:position pos:line="3" pos:column="58"/></modifier></type></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="60">size_t<pos:position pos:line="3" pos:column="66"/></name> <modifier pos:line="3" pos:column="67">*<pos:position pos:line="3" pos:column="68"/></modifier></type></decl></parameter>)<pos:position pos:line="3" pos:column="69"/></parameter_list></function_decl></parameter>)<pos:position pos:line="3" pos:column="70"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<while pos:line="5" pos:column="9">while <condition pos:line="5" pos:column="15">(<expr><operator pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">path<pos:position pos:line="5" pos:column="21"/></name></expr>)<pos:position pos:line="5" pos:column="22"/></condition> <block pos:line="5" pos:column="23">{
		<decl_stmt><decl><type><specifier pos:line="6" pos:column="17">const<pos:position pos:line="6" pos:column="22"/></specifier> <name pos:line="6" pos:column="23">char<pos:position pos:line="6" pos:column="27"/></name> <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">end_of_component<pos:position pos:line="6" pos:column="45"/></name> <init pos:line="6" pos:column="46">= <expr><call><name pos:line="6" pos:column="48">strchrnul<pos:position pos:line="6" pos:column="57"/></name><argument_list pos:line="6" pos:column="57">(<argument><expr><name pos:line="6" pos:column="58">path<pos:position pos:line="6" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="6" pos:column="64">'/'<pos:position pos:line="6" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="69"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">size_t<pos:position pos:line="7" pos:column="23"/></name></type> <name pos:line="7" pos:column="24">len<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><name pos:line="7" pos:column="30">end_of_component<pos:position pos:line="7" pos:column="46"/></name> <operator pos:line="7" pos:column="47">-<pos:position pos:line="7" pos:column="48"/></operator> <name pos:line="7" pos:column="49">path<pos:position pos:line="7" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="54"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">c<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><call><name pos:line="8" pos:column="33">anonymize_mem<pos:position pos:line="8" pos:column="46"/></name><argument_list pos:line="8" pos:column="46">(<argument><expr><name pos:line="8" pos:column="47">map<pos:position pos:line="8" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="52">generate<pos:position pos:line="8" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="62">path<pos:position pos:line="8" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="68">&amp;<pos:position pos:line="8" pos:column="73"/></operator><name pos:line="8" pos:column="69">len<pos:position pos:line="8" pos:column="72"/></name></expr></argument>)<pos:position pos:line="8" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="74"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">strbuf_add<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name pos:line="9" pos:column="28">out<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="33">c<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="36">len<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">path<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">=<pos:position pos:line="10" pos:column="23"/></operator> <name pos:line="10" pos:column="24">end_of_component<pos:position pos:line="10" pos:column="40"/></name></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">path<pos:position pos:line="11" pos:column="26"/></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">strbuf_addch<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><name pos:line="12" pos:column="38">out<pos:position pos:line="12" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="43">*<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="44">path<pos:position pos:line="12" pos:column="48"/></name><operator pos:line="12" pos:column="48">++<pos:position pos:line="12" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></while>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
