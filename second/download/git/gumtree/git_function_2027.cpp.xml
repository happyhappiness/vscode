<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2027.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">ref<pos:position pos:line="1" pos:column="18"/></name></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">get_refs_list<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">transport<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">transport<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">int<pos:position pos:line="1" pos:column="66"/></name></type> <name pos:line="1" pos:column="67">for_push<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">helper_data<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">data<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name><name pos:line="3" pos:column="36">transport<pos:position pos:line="3" pos:column="45"/></name><operator pos:line="3" pos:column="45">-&gt;<pos:position pos:line="3" pos:column="50"/></operator><name pos:line="3" pos:column="47">data<pos:position pos:line="3" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">child_process<pos:position pos:line="4" pos:column="29"/></name></name> <modifier pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></modifier></type><name pos:line="4" pos:column="31">helper<pos:position pos:line="4" pos:column="37"/></name></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">ref<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">ret<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name pos:line="5" pos:column="27">NULL<pos:position pos:line="5" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ref<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier><modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">tail<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="30">ret<pos:position pos:line="6" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">ref<pos:position pos:line="7" pos:column="19"/></name></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">posn<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">buf<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name pos:line="8" pos:column="29">STRBUF_INIT<pos:position pos:line="8" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">helper<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <call><name pos:line="10" pos:column="18">get_helper<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">transport<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">process_connect<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><name pos:line="12" pos:column="29">transport<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="40">for_push<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="50"/></condition><then pos:line="12" pos:column="50"> <block pos:line="12" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">do_take_over<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">transport<pos:position pos:line="13" pos:column="39"/></name></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt>
		<return pos:line="14" pos:column="17">return <expr><call><name><name pos:line="14" pos:column="24">transport<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">-&gt;<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="35">get_refs_list<pos:position pos:line="14" pos:column="48"/></name></name><argument_list pos:line="14" pos:column="48">(<argument><expr><name pos:line="14" pos:column="49">transport<pos:position pos:line="14" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="60">for_push<pos:position pos:line="14" pos:column="68"/></name></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="70"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">data<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">-&gt;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="19">push<pos:position pos:line="17" pos:column="23"/></name></name> <operator pos:line="17" pos:column="24">&amp;&amp;<pos:position pos:line="17" pos:column="34"/></operator> <name pos:line="17" pos:column="27">for_push<pos:position pos:line="17" pos:column="35"/></name></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">write_str_in_full<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><name><name pos:line="18" pos:column="35">helper<pos:position pos:line="18" pos:column="41"/></name><operator pos:line="18" pos:column="41">-&gt;<pos:position pos:line="18" pos:column="46"/></operator><name pos:line="18" pos:column="43">in<pos:position pos:line="18" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="47">"list for-push\n"<pos:position pos:line="18" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="66"/></expr_stmt></block></then>
	<else pos:line="19" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">write_str_in_full<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><name><name pos:line="20" pos:column="35">helper<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">-&gt;<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="43">in<pos:position pos:line="20" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="47">"list\n"<pos:position pos:line="20" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt></block></else></if>

	<while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><literal type="number" pos:line="22" pos:column="16">1<pos:position pos:line="22" pos:column="17"/></literal></expr>)<pos:position pos:line="22" pos:column="18"/></condition> <block pos:line="22" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">char<pos:position pos:line="23" pos:column="21"/></name> <modifier pos:line="23" pos:column="22">*<pos:position pos:line="23" pos:column="23"/></modifier></type><name pos:line="23" pos:column="23">eov<pos:position pos:line="23" pos:column="26"/></name></decl>, <modifier pos:line="23" pos:column="28">*<pos:position pos:line="23" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="23" pos:column="29">eon<pos:position pos:line="23" pos:column="32"/></name></decl>;<pos:position pos:line="23" pos:column="33"/></decl_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><call><name pos:line="24" pos:column="21">recvline<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">data<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="36">&amp;<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="37">buf<pos:position pos:line="24" pos:column="40"/></name></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">exit<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><literal type="number" pos:line="25" pos:column="30">128<pos:position pos:line="25" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt></block></then></if>

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><operator pos:line="27" pos:column="22">*<pos:position pos:line="27" pos:column="23"/></operator><name><name pos:line="27" pos:column="23">buf<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">.<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="27">buf<pos:position pos:line="27" pos:column="30"/></name></name></expr>)<pos:position pos:line="27" pos:column="31"/></condition><then pos:line="27" pos:column="31">
			<block type="pseudo"><break pos:line="28" pos:column="25">break;<pos:position pos:line="28" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><name pos:line="30" pos:column="17">eov<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">strchr<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name><name pos:line="30" pos:column="30">buf<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">.<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="34">buf<pos:position pos:line="30" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="39">' '<pos:position pos:line="30" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><operator pos:line="31" pos:column="21">!<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">eov<pos:position pos:line="31" pos:column="25"/></name></expr>)<pos:position pos:line="31" pos:column="26"/></condition><then pos:line="31" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="25">die<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><literal type="string" pos:line="32" pos:column="29">"Malformed response in ref list: %s"<pos:position pos:line="32" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="67">buf<pos:position pos:line="32" pos:column="70"/></name><operator pos:line="32" pos:column="70">.<pos:position pos:line="32" pos:column="71"/></operator><name pos:line="32" pos:column="71">buf<pos:position pos:line="32" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="76"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="33" pos:column="17">eon<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <call><name pos:line="33" pos:column="23">strchr<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">eov<pos:position pos:line="33" pos:column="33"/></name> <operator pos:line="33" pos:column="34">+<pos:position pos:line="33" pos:column="35"/></operator> <literal type="number" pos:line="33" pos:column="36">1<pos:position pos:line="33" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="33" pos:column="39">' '<pos:position pos:line="33" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="34" pos:column="17">*<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">eov<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">=<pos:position pos:line="34" pos:column="23"/></operator> <literal type="char" pos:line="34" pos:column="24">'\0'<pos:position pos:line="34" pos:column="28"/></literal></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">eon<pos:position pos:line="35" pos:column="24"/></name></expr>)<pos:position pos:line="35" pos:column="25"/></condition><then pos:line="35" pos:column="25">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="36" pos:column="25">*<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="26">eon<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">=<pos:position pos:line="36" pos:column="31"/></operator> <literal type="char" pos:line="36" pos:column="32">'\0'<pos:position pos:line="36" pos:column="36"/></literal></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt></block></then></if>
		<expr_stmt><expr><operator pos:line="37" pos:column="17">*<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="18">tail<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">=<pos:position pos:line="37" pos:column="24"/></operator> <call><name pos:line="37" pos:column="25">alloc_ref<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">eov<pos:position pos:line="37" pos:column="38"/></name> <operator pos:line="37" pos:column="39">+<pos:position pos:line="37" pos:column="40"/></operator> <literal type="number" pos:line="37" pos:column="41">1<pos:position pos:line="37" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name><name pos:line="38" pos:column="21">buf<pos:position pos:line="38" pos:column="24"/></name><operator pos:line="38" pos:column="24">.<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">buf<pos:position pos:line="38" pos:column="28"/></name><index pos:line="38" pos:column="28">[<expr><literal type="number" pos:line="38" pos:column="29">0<pos:position pos:line="38" pos:column="30"/></literal></expr>]<pos:position pos:line="38" pos:column="31"/></index></name> <operator pos:line="38" pos:column="32">==<pos:position pos:line="38" pos:column="34"/></operator> <literal type="char" pos:line="38" pos:column="35">'@'<pos:position pos:line="38" pos:column="38"/></literal></expr>)<pos:position pos:line="38" pos:column="39"/></condition><then pos:line="38" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><name><operator pos:line="39" pos:column="25">(<pos:position pos:line="39" pos:column="26"/></operator><operator pos:line="39" pos:column="26">*<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="27">tail<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">)<pos:position pos:line="39" pos:column="32"/></operator><operator pos:line="39" pos:column="32">-&gt;<pos:position pos:line="39" pos:column="37"/></operator><name pos:line="39" pos:column="34">symref<pos:position pos:line="39" pos:column="40"/></name></name> <operator pos:line="39" pos:column="41">=<pos:position pos:line="39" pos:column="42"/></operator> <call><name pos:line="39" pos:column="43">xstrdup<pos:position pos:line="39" pos:column="50"/></name><argument_list pos:line="39" pos:column="50">(<argument><expr><name><name pos:line="39" pos:column="51">buf<pos:position pos:line="39" pos:column="54"/></name><operator pos:line="39" pos:column="54">.<pos:position pos:line="39" pos:column="55"/></operator><name pos:line="39" pos:column="55">buf<pos:position pos:line="39" pos:column="58"/></name></name> <operator pos:line="39" pos:column="59">+<pos:position pos:line="39" pos:column="60"/></operator> <literal type="number" pos:line="39" pos:column="61">1<pos:position pos:line="39" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="64"/></expr_stmt></block></then>
		<elseif pos:line="40" pos:column="17">else <if pos:line="40" pos:column="22">if <condition pos:line="40" pos:column="25">(<expr><name><name pos:line="40" pos:column="26">buf<pos:position pos:line="40" pos:column="29"/></name><operator pos:line="40" pos:column="29">.<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="30">buf<pos:position pos:line="40" pos:column="33"/></name><index pos:line="40" pos:column="33">[<expr><literal type="number" pos:line="40" pos:column="34">0<pos:position pos:line="40" pos:column="35"/></literal></expr>]<pos:position pos:line="40" pos:column="36"/></index></name> <operator pos:line="40" pos:column="37">!=<pos:position pos:line="40" pos:column="39"/></operator> <literal type="char" pos:line="40" pos:column="40">'?'<pos:position pos:line="40" pos:column="43"/></literal></expr>)<pos:position pos:line="40" pos:column="44"/></condition><then pos:line="40" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="25">get_sha1_hex<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">(<argument><expr><name><name pos:line="41" pos:column="38">buf<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">.<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="42">buf<pos:position pos:line="41" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><operator pos:line="41" pos:column="47">(<pos:position pos:line="41" pos:column="48"/></operator><operator pos:line="41" pos:column="48">*<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="49">tail<pos:position pos:line="41" pos:column="53"/></name><operator pos:line="41" pos:column="53">)<pos:position pos:line="41" pos:column="54"/></operator><operator pos:line="41" pos:column="54">-&gt;<pos:position pos:line="41" pos:column="59"/></operator><name pos:line="41" pos:column="56">old_sha1<pos:position pos:line="41" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="66"/></expr_stmt></block></then></if></elseif></if>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">eon<pos:position pos:line="42" pos:column="24"/></name></expr>)<pos:position pos:line="42" pos:column="25"/></condition><then pos:line="42" pos:column="25"> <block pos:line="42" pos:column="26">{
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><call><name pos:line="43" pos:column="29">has_attribute<pos:position pos:line="43" pos:column="42"/></name><argument_list pos:line="43" pos:column="42">(<argument><expr><name pos:line="43" pos:column="43">eon<pos:position pos:line="43" pos:column="46"/></name> <operator pos:line="43" pos:column="47">+<pos:position pos:line="43" pos:column="48"/></operator> <literal type="number" pos:line="43" pos:column="49">1<pos:position pos:line="43" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="52">"unchanged"<pos:position pos:line="43" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="65"/></condition><then pos:line="43" pos:column="65"> <block pos:line="43" pos:column="66">{
				<expr_stmt><expr><name><operator pos:line="44" pos:column="33">(<pos:position pos:line="44" pos:column="34"/></operator><operator pos:line="44" pos:column="34">*<pos:position pos:line="44" pos:column="35"/></operator><name pos:line="44" pos:column="35">tail<pos:position pos:line="44" pos:column="39"/></name><operator pos:line="44" pos:column="39">)<pos:position pos:line="44" pos:column="40"/></operator><operator pos:line="44" pos:column="40">-&gt;<pos:position pos:line="44" pos:column="45"/></operator><name pos:line="44" pos:column="42">status<pos:position pos:line="44" pos:column="48"/></name></name> <operator pos:line="44" pos:column="49">|=<pos:position pos:line="44" pos:column="51"/></operator> <name pos:line="44" pos:column="52">REF_STATUS_UPTODATE<pos:position pos:line="44" pos:column="71"/></name></expr>;<pos:position pos:line="44" pos:column="72"/></expr_stmt>
				<if pos:line="45" pos:column="33">if <condition pos:line="45" pos:column="36">(<expr><call><name pos:line="45" pos:column="37">read_ref<pos:position pos:line="45" pos:column="45"/></name><argument_list pos:line="45" pos:column="45">(<argument><expr><name><operator pos:line="45" pos:column="46">(<pos:position pos:line="45" pos:column="47"/></operator><operator pos:line="45" pos:column="47">*<pos:position pos:line="45" pos:column="48"/></operator><name pos:line="45" pos:column="48">tail<pos:position pos:line="45" pos:column="52"/></name><operator pos:line="45" pos:column="52">)<pos:position pos:line="45" pos:column="53"/></operator><operator pos:line="45" pos:column="53">-&gt;<pos:position pos:line="45" pos:column="58"/></operator><name pos:line="45" pos:column="55">name<pos:position pos:line="45" pos:column="59"/></name></name></expr></argument>,
					     <argument><expr><name><operator pos:line="46" pos:column="46">(<pos:position pos:line="46" pos:column="47"/></operator><operator pos:line="46" pos:column="47">*<pos:position pos:line="46" pos:column="48"/></operator><name pos:line="46" pos:column="48">tail<pos:position pos:line="46" pos:column="52"/></name><operator pos:line="46" pos:column="52">)<pos:position pos:line="46" pos:column="53"/></operator><operator pos:line="46" pos:column="53">-&gt;<pos:position pos:line="46" pos:column="58"/></operator><name pos:line="46" pos:column="55">old_sha1<pos:position pos:line="46" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="64"/></argument_list></call> <operator pos:line="46" pos:column="65">&lt;<pos:position pos:line="46" pos:column="69"/></operator> <literal type="number" pos:line="46" pos:column="67">0<pos:position pos:line="46" pos:column="68"/></literal></expr>)<pos:position pos:line="46" pos:column="69"/></condition><then pos:line="46" pos:column="69">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="41">die<pos:position pos:line="47" pos:column="44"/></name><argument_list pos:line="47" pos:column="44">(<argument><expr><call><name pos:line="47" pos:column="45">N_<pos:position pos:line="47" pos:column="47"/></name><argument_list pos:line="47" pos:column="47">(<argument><expr><literal type="string" pos:line="47" pos:column="48">"Could not read ref %s"<pos:position pos:line="47" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="72"/></argument_list></call></expr></argument>,
					    <argument><expr><name><operator pos:line="48" pos:column="45">(<pos:position pos:line="48" pos:column="46"/></operator><operator pos:line="48" pos:column="46">*<pos:position pos:line="48" pos:column="47"/></operator><name pos:line="48" pos:column="47">tail<pos:position pos:line="48" pos:column="51"/></name><operator pos:line="48" pos:column="51">)<pos:position pos:line="48" pos:column="52"/></operator><operator pos:line="48" pos:column="52">-&gt;<pos:position pos:line="48" pos:column="57"/></operator><name pos:line="48" pos:column="54">name<pos:position pos:line="48" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="60"/></expr_stmt></block></then></if>
			}<pos:position pos:line="49" pos:column="26"/></block></then></if>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="51" pos:column="17">tail<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <operator pos:line="51" pos:column="24">&amp;<pos:position pos:line="51" pos:column="29"/></operator><operator pos:line="51" pos:column="25">(<pos:position pos:line="51" pos:column="26"/></operator><name><operator pos:line="51" pos:column="26">(<pos:position pos:line="51" pos:column="27"/></operator><operator pos:line="51" pos:column="27">*<pos:position pos:line="51" pos:column="28"/></operator><name pos:line="51" pos:column="28">tail<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">)<pos:position pos:line="51" pos:column="33"/></operator><operator pos:line="51" pos:column="33">-&gt;<pos:position pos:line="51" pos:column="38"/></operator><name pos:line="51" pos:column="35">next<pos:position pos:line="51" pos:column="39"/></name></name><operator pos:line="51" pos:column="39">)<pos:position pos:line="51" pos:column="40"/></operator></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></while>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">debug<pos:position pos:line="53" pos:column="18"/></name></expr>)<pos:position pos:line="53" pos:column="19"/></condition><then pos:line="53" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="17">fprintf<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><name pos:line="54" pos:column="25">stderr<pos:position pos:line="54" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="33">"Debug: Read ref listing.\n"<pos:position pos:line="54" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="63"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">strbuf_release<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><operator pos:line="55" pos:column="24">&amp;<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="25">buf<pos:position pos:line="55" pos:column="28"/></name></expr></argument>)<pos:position pos:line="55" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="30"/></expr_stmt>

	<for pos:line="57" pos:column="9">for <control pos:line="57" pos:column="13">(<init><expr><name pos:line="57" pos:column="14">posn<pos:position pos:line="57" pos:column="18"/></name> <operator pos:line="57" pos:column="19">=<pos:position pos:line="57" pos:column="20"/></operator> <name pos:line="57" pos:column="21">ret<pos:position pos:line="57" pos:column="24"/></name></expr>;<pos:position pos:line="57" pos:column="25"/></init> <condition><expr><name pos:line="57" pos:column="26">posn<pos:position pos:line="57" pos:column="30"/></name></expr>;<pos:position pos:line="57" pos:column="31"/></condition> <incr><expr><name pos:line="57" pos:column="32">posn<pos:position pos:line="57" pos:column="36"/></name> <operator pos:line="57" pos:column="37">=<pos:position pos:line="57" pos:column="38"/></operator> <name><name pos:line="57" pos:column="39">posn<pos:position pos:line="57" pos:column="43"/></name><operator pos:line="57" pos:column="43">-&gt;<pos:position pos:line="57" pos:column="48"/></operator><name pos:line="57" pos:column="45">next<pos:position pos:line="57" pos:column="49"/></name></name></expr></incr>)<pos:position pos:line="57" pos:column="50"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="17">resolve_remote_symref<pos:position pos:line="58" pos:column="38"/></name><argument_list pos:line="58" pos:column="38">(<argument><expr><name pos:line="58" pos:column="39">posn<pos:position pos:line="58" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="45">ret<pos:position pos:line="58" pos:column="48"/></name></expr></argument>)<pos:position pos:line="58" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="50"/></expr_stmt></block></for>

	<return pos:line="60" pos:column="9">return <expr><name pos:line="60" pos:column="16">ret<pos:position pos:line="60" pos:column="19"/></name></expr>;<pos:position pos:line="60" pos:column="20"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
