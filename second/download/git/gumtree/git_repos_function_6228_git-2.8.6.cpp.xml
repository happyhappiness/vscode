<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6228_git-2.8.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">mspace_usable_size<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name><modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type> <name pos:line="1" pos:column="33">mem<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list> <block pos:line="1" pos:column="38">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><name pos:line="2" pos:column="7">mem<pos:position pos:line="2" pos:column="10"/></name> <operator pos:line="2" pos:column="11">!=<pos:position pos:line="2" pos:column="13"/></operator> <literal type="number" pos:line="2" pos:column="14">0<pos:position pos:line="2" pos:column="15"/></literal></expr>)<pos:position pos:line="2" pos:column="16"/></condition><then pos:line="2" pos:column="16"> <block pos:line="2" pos:column="17">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">mchunkptr<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">p<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><call><name pos:line="3" pos:column="19">mem2chunk<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">mem<pos:position pos:line="3" pos:column="32"/></name></expr></argument>)<pos:position pos:line="3" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">cinuse<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">p<pos:position pos:line="4" pos:column="17"/></name></expr></argument>)<pos:position pos:line="4" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="19"/></condition><then pos:line="4" pos:column="19">
      <block type="pseudo"><return pos:line="5" pos:column="7">return <expr><call><name pos:line="5" pos:column="14">chunksize<pos:position pos:line="5" pos:column="23"/></name><argument_list pos:line="5" pos:column="23">(<argument><expr><name pos:line="5" pos:column="24">p<pos:position pos:line="5" pos:column="25"/></name></expr></argument>)<pos:position pos:line="5" pos:column="26"/></argument_list></call> <operator pos:line="5" pos:column="27">-<pos:position pos:line="5" pos:column="28"/></operator> <call><name pos:line="5" pos:column="29">overhead_for<pos:position pos:line="5" pos:column="41"/></name><argument_list pos:line="5" pos:column="41">(<argument><expr><name pos:line="5" pos:column="42">p<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="45"/></return></block></then></if>
  }<pos:position pos:line="6" pos:column="4"/></block></then></if>
  <return pos:line="7" pos:column="3">return <expr><literal type="number" pos:line="7" pos:column="10">0<pos:position pos:line="7" pos:column="11"/></literal></expr>;<pos:position pos:line="7" pos:column="12"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
