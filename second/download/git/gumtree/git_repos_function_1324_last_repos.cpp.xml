<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1324_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">find_name_gnu<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">apply_state<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">state<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
			   <parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">line<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>,
			   <parameter><decl><type><specifier pos:line="3" pos:column="28">const<pos:position pos:line="3" pos:column="33"/></specifier> <name pos:line="3" pos:column="34">char<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">def<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="4" pos:column="28">int<pos:position pos:line="4" pos:column="31"/></name></type> <name pos:line="4" pos:column="32">p_value<pos:position pos:line="4" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="40"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">name<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name pos:line="6" pos:column="30">STRBUF_INIT<pos:position pos:line="6" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">cp<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * Proposed "new-style" GNU patch/diff format; see
	 * http://marc.info/?l=git&amp;m=112927316408690&amp;w=2
	 */</comment>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">unquote_c_style<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><operator pos:line="13" pos:column="29">&amp;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="30">name<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="36">line<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="42">NULL<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="48"/></condition><then pos:line="13" pos:column="48"> <block pos:line="13" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_release<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><operator pos:line="14" pos:column="32">&amp;<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="33">name<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
		<return pos:line="15" pos:column="17">return <expr><name pos:line="15" pos:column="24">NULL<pos:position pos:line="15" pos:column="28"/></name></expr>;<pos:position pos:line="15" pos:column="29"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<for pos:line="18" pos:column="9">for <control pos:line="18" pos:column="13">(<init><expr><name pos:line="18" pos:column="14">cp<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <name><name pos:line="18" pos:column="19">name<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">.<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">buf<pos:position pos:line="18" pos:column="27"/></name></name></expr>;<pos:position pos:line="18" pos:column="28"/></init> <condition><expr><name pos:line="18" pos:column="29">p_value<pos:position pos:line="18" pos:column="36"/></name></expr>;<pos:position pos:line="18" pos:column="37"/></condition> <incr><expr><name pos:line="18" pos:column="38">p_value<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">--<pos:position pos:line="18" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="48"/></control> <block pos:line="18" pos:column="49">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">cp<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <call><name pos:line="19" pos:column="22">strchr<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><name pos:line="19" pos:column="29">cp<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="33">'/'<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">cp<pos:position pos:line="20" pos:column="24"/></name></expr>)<pos:position pos:line="20" pos:column="25"/></condition><then pos:line="20" pos:column="25"> <block pos:line="20" pos:column="26">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">strbuf_release<pos:position pos:line="21" pos:column="39"/></name><argument_list pos:line="21" pos:column="39">(<argument><expr><operator pos:line="21" pos:column="40">&amp;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="41">name<pos:position pos:line="21" pos:column="45"/></name></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>
			<return pos:line="22" pos:column="25">return <expr><name pos:line="22" pos:column="32">NULL<pos:position pos:line="22" pos:column="36"/></name></expr>;<pos:position pos:line="22" pos:column="37"/></return>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="24" pos:column="17">cp<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">++<pos:position pos:line="24" pos:column="21"/></operator></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">strbuf_remove<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><operator pos:line="27" pos:column="23">&amp;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="24">name<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="30">0<pos:position pos:line="27" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="33">cp<pos:position pos:line="27" pos:column="35"/></name> <operator pos:line="27" pos:column="36">-<pos:position pos:line="27" pos:column="37"/></operator> <name><name pos:line="27" pos:column="38">name<pos:position pos:line="27" pos:column="42"/></name><operator pos:line="27" pos:column="42">.<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="43">buf<pos:position pos:line="27" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name><name pos:line="28" pos:column="13">state<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">-&gt;<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="20">root<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">.<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">len<pos:position pos:line="28" pos:column="28"/></name></name></expr>)<pos:position pos:line="28" pos:column="29"/></condition><then pos:line="28" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="17">strbuf_insert<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><operator pos:line="29" pos:column="31">&amp;<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="32">name<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="38">0<pos:position pos:line="29" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="41">state<pos:position pos:line="29" pos:column="46"/></name><operator pos:line="29" pos:column="46">-&gt;<pos:position pos:line="29" pos:column="51"/></operator><name pos:line="29" pos:column="48">root<pos:position pos:line="29" pos:column="52"/></name><operator pos:line="29" pos:column="52">.<pos:position pos:line="29" pos:column="53"/></operator><name pos:line="29" pos:column="53">buf<pos:position pos:line="29" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="58">state<pos:position pos:line="29" pos:column="63"/></name><operator pos:line="29" pos:column="63">-&gt;<pos:position pos:line="29" pos:column="68"/></operator><name pos:line="29" pos:column="65">root<pos:position pos:line="29" pos:column="69"/></name><operator pos:line="29" pos:column="69">.<pos:position pos:line="29" pos:column="70"/></operator><name pos:line="29" pos:column="70">len<pos:position pos:line="29" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="75"/></expr_stmt></block></then></if>
	<return pos:line="30" pos:column="9">return <expr><call><name pos:line="30" pos:column="16">squash_slash<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><call><name pos:line="30" pos:column="29">strbuf_detach<pos:position pos:line="30" pos:column="42"/></name><argument_list pos:line="30" pos:column="42">(<argument><expr><operator pos:line="30" pos:column="43">&amp;<pos:position pos:line="30" pos:column="48"/></operator><name pos:line="30" pos:column="44">name<pos:position pos:line="30" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="50">NULL<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="57"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
