<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5100_git-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">strbuf<pos:position pos:line="1" pos:column="21"/></name></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">decode_q_segment<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name><name pos:line="1" pos:column="46">struct<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">strbuf<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">q_seg<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">int<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">rfc2047<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">in<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><name><name pos:line="3" pos:column="26">q_seg<pos:position pos:line="3" pos:column="31"/></name><operator pos:line="3" pos:column="31">-&gt;<pos:position pos:line="3" pos:column="36"/></operator><name pos:line="3" pos:column="33">buf<pos:position pos:line="3" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">c<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">out<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><call><name pos:line="5" pos:column="30">xmalloc<pos:position pos:line="5" pos:column="37"/></name><argument_list pos:line="5" pos:column="37">(<argument><expr><sizeof pos:line="5" pos:column="38">sizeof<argument_list pos:line="5" pos:column="44">(<argument><expr pos:line="5" pos:column="45">struct <name pos:line="5" pos:column="52">strbuf<pos:position pos:line="5" pos:column="58"/></name></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="61"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="6" pos:column="9">strbuf_init<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">out<pos:position pos:line="6" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="26">q_seg<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">-&gt;<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="33">len<pos:position pos:line="6" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="38"/></expr_stmt>

	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><operator pos:line="8" pos:column="16">(<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">c<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">=<pos:position pos:line="8" pos:column="20"/></operator> <operator pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">in<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">++<pos:position pos:line="8" pos:column="26"/></operator><operator pos:line="8" pos:column="26">)<pos:position pos:line="8" pos:column="27"/></operator> <operator pos:line="8" pos:column="28">!=<pos:position pos:line="8" pos:column="30"/></operator> <literal type="number" pos:line="8" pos:column="31">0<pos:position pos:line="8" pos:column="32"/></literal></expr>)<pos:position pos:line="8" pos:column="33"/></condition> <block pos:line="8" pos:column="34">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">c<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">==<pos:position pos:line="9" pos:column="25"/></operator> <literal type="char" pos:line="9" pos:column="26">'='<pos:position pos:line="9" pos:column="29"/></literal></expr>)<pos:position pos:line="9" pos:column="30"/></condition><then pos:line="9" pos:column="30"> <block pos:line="9" pos:column="31">{
			<decl_stmt><decl><type><name pos:line="10" pos:column="25">int<pos:position pos:line="10" pos:column="28"/></name></type> <name pos:line="10" pos:column="29">d<pos:position pos:line="10" pos:column="30"/></name> <init pos:line="10" pos:column="31">= <expr><operator pos:line="10" pos:column="33">*<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="34">in<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">++<pos:position pos:line="10" pos:column="38"/></operator></expr></init></decl>;<pos:position pos:line="10" pos:column="39"/></decl_stmt>
			<if pos:line="11" pos:column="25">if <condition pos:line="11" pos:column="28">(<expr><name pos:line="11" pos:column="29">d<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">==<pos:position pos:line="11" pos:column="33"/></operator> <literal type="char" pos:line="11" pos:column="34">'\n'<pos:position pos:line="11" pos:column="38"/></literal> <operator pos:line="11" pos:column="39">||<pos:position pos:line="11" pos:column="41"/></operator> <operator pos:line="11" pos:column="42">!<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="43">d<pos:position pos:line="11" pos:column="44"/></name></expr>)<pos:position pos:line="11" pos:column="45"/></condition><then pos:line="11" pos:column="45">
				<block type="pseudo"><break pos:line="12" pos:column="33">break;<pos:position pos:line="12" pos:column="39"/></break></block></then></if> <comment type="block" pos:line="12" pos:column="40">/* drop trailing newline */</comment>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">strbuf_addch<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">out<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="43">(<pos:position pos:line="13" pos:column="44"/></operator><call><name pos:line="13" pos:column="44">hexval<pos:position pos:line="13" pos:column="50"/></name><argument_list pos:line="13" pos:column="50">(<argument><expr><name pos:line="13" pos:column="51">d<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call> <operator pos:line="13" pos:column="54">&lt;&lt;<pos:position pos:line="13" pos:column="62"/></operator> <literal type="number" pos:line="13" pos:column="57">4<pos:position pos:line="13" pos:column="58"/></literal><operator pos:line="13" pos:column="58">)<pos:position pos:line="13" pos:column="59"/></operator> <operator pos:line="13" pos:column="60">|<pos:position pos:line="13" pos:column="61"/></operator> <call><name pos:line="13" pos:column="62">hexval<pos:position pos:line="13" pos:column="68"/></name><argument_list pos:line="13" pos:column="68">(<argument><expr><operator pos:line="13" pos:column="69">*<pos:position pos:line="13" pos:column="70"/></operator><name pos:line="13" pos:column="70">in<pos:position pos:line="13" pos:column="72"/></name><operator pos:line="13" pos:column="72">++<pos:position pos:line="13" pos:column="74"/></operator></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="77"/></expr_stmt>
			<continue pos:line="14" pos:column="25">continue;<pos:position pos:line="14" pos:column="34"/></continue>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">rfc2047<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">&amp;&amp;<pos:position pos:line="16" pos:column="39"/></operator> <name pos:line="16" pos:column="32">c<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">==<pos:position pos:line="16" pos:column="36"/></operator> <literal type="char" pos:line="16" pos:column="37">'_'<pos:position pos:line="16" pos:column="40"/></literal></expr>)<pos:position pos:line="16" pos:column="41"/></condition><then pos:line="16" pos:column="41"> <comment type="block" pos:line="16" pos:column="42">/* rfc2047 4.2 (2) */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="25">c<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">=<pos:position pos:line="17" pos:column="28"/></operator> <literal type="number" pos:line="17" pos:column="29">0x20<pos:position pos:line="17" pos:column="33"/></literal></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">strbuf_addch<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">out<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">c<pos:position pos:line="18" pos:column="36"/></name></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></while>
	<return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">out<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
