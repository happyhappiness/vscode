<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1177_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">versioncmp<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><specifier pos:line="1" pos:column="16">const<pos:position pos:line="1" pos:column="21"/></specifier> <name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">s1<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">s2<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">unsigned<pos:position pos:line="3" pos:column="23"/></name> <name pos:line="3" pos:column="24">char<pos:position pos:line="3" pos:column="28"/></name> <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier></type><name pos:line="3" pos:column="30">p1<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><operator pos:line="3" pos:column="35">(<pos:position pos:line="3" pos:column="36"/></operator><specifier pos:line="3" pos:column="36">const<pos:position pos:line="3" pos:column="41"/></specifier> <name pos:line="3" pos:column="42">unsigned<pos:position pos:line="3" pos:column="50"/></name> <name pos:line="3" pos:column="51">char<pos:position pos:line="3" pos:column="55"/></name> <operator pos:line="3" pos:column="56">*<pos:position pos:line="3" pos:column="57"/></operator><operator pos:line="3" pos:column="57">)<pos:position pos:line="3" pos:column="58"/></operator> <name pos:line="3" pos:column="59">s1<pos:position pos:line="3" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="62"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">unsigned<pos:position pos:line="4" pos:column="23"/></name> <name pos:line="4" pos:column="24">char<pos:position pos:line="4" pos:column="28"/></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">p2<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><operator pos:line="4" pos:column="35">(<pos:position pos:line="4" pos:column="36"/></operator><specifier pos:line="4" pos:column="36">const<pos:position pos:line="4" pos:column="41"/></specifier> <name pos:line="4" pos:column="42">unsigned<pos:position pos:line="4" pos:column="50"/></name> <name pos:line="4" pos:column="51">char<pos:position pos:line="4" pos:column="55"/></name> <operator pos:line="4" pos:column="56">*<pos:position pos:line="4" pos:column="57"/></operator><operator pos:line="4" pos:column="57">)<pos:position pos:line="4" pos:column="58"/></operator> <name pos:line="4" pos:column="59">s2<pos:position pos:line="4" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">c1<pos:position pos:line="5" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="27">c2<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">state<pos:position pos:line="6" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="20">diff<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/*
	 * Symbol(s)    0       [1-9]   others
	 * Transition   (10) 0  (01) d  (00) x
	 */</comment>
	<decl_stmt><decl><specifier pos:line="12" pos:column="9">static<pos:position pos:line="12" pos:column="15"/></specifier> <type><specifier pos:line="12" pos:column="16">const<pos:position pos:line="12" pos:column="21"/></specifier> <name pos:line="12" pos:column="22">uint8_t<pos:position pos:line="12" pos:column="29"/></name></type> <name><name pos:line="12" pos:column="30">next_state<pos:position pos:line="12" pos:column="40"/></name><index pos:line="12" pos:column="40">[]<pos:position pos:line="12" pos:column="42"/></index></name> <init pos:line="12" pos:column="43">= <expr><block pos:line="12" pos:column="45">{
		<comment type="block" pos:line="13" pos:column="17">/* state    x    d    0  */</comment>
		<comment type="block" pos:line="14" pos:column="17">/* S_N */</comment>  <expr><name pos:line="14" pos:column="28">S_N<pos:position pos:line="14" pos:column="31"/></name></expr>, <expr><name pos:line="14" pos:column="33">S_I<pos:position pos:line="14" pos:column="36"/></name></expr>, <expr><name pos:line="14" pos:column="38">S_Z<pos:position pos:line="14" pos:column="41"/></name></expr>,
		<comment type="block" pos:line="15" pos:column="17">/* S_I */</comment>  <expr><name pos:line="15" pos:column="28">S_N<pos:position pos:line="15" pos:column="31"/></name></expr>, <expr><name pos:line="15" pos:column="33">S_I<pos:position pos:line="15" pos:column="36"/></name></expr>, <expr><name pos:line="15" pos:column="38">S_I<pos:position pos:line="15" pos:column="41"/></name></expr>,
		<comment type="block" pos:line="16" pos:column="17">/* S_F */</comment>  <expr><name pos:line="16" pos:column="28">S_N<pos:position pos:line="16" pos:column="31"/></name></expr>, <expr><name pos:line="16" pos:column="33">S_F<pos:position pos:line="16" pos:column="36"/></name></expr>, <expr><name pos:line="16" pos:column="38">S_F<pos:position pos:line="16" pos:column="41"/></name></expr>,
		<comment type="block" pos:line="17" pos:column="17">/* S_Z */</comment>  <expr><name pos:line="17" pos:column="28">S_N<pos:position pos:line="17" pos:column="31"/></name></expr>, <expr><name pos:line="17" pos:column="33">S_F<pos:position pos:line="17" pos:column="36"/></name></expr>, <expr><name pos:line="17" pos:column="38">S_Z<pos:position pos:line="17" pos:column="41"/></name></expr>
	}<pos:position pos:line="18" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="18" pos:column="11"/></decl_stmt>

	<decl_stmt><decl><specifier pos:line="20" pos:column="9">static<pos:position pos:line="20" pos:column="15"/></specifier> <type><specifier pos:line="20" pos:column="16">const<pos:position pos:line="20" pos:column="21"/></specifier> <name pos:line="20" pos:column="22">int8_t<pos:position pos:line="20" pos:column="28"/></name></type> <name><name pos:line="20" pos:column="29">result_type<pos:position pos:line="20" pos:column="40"/></name><index pos:line="20" pos:column="40">[]<pos:position pos:line="20" pos:column="42"/></index></name> <init pos:line="20" pos:column="43">= <expr><block pos:line="20" pos:column="45">{
		<comment type="block" pos:line="21" pos:column="17">/* state   x/x  x/d  x/0  d/x  d/d  d/0  0/x  0/d  0/0  */</comment>

		<comment type="block" pos:line="23" pos:column="17">/* S_N */</comment>  <expr><name pos:line="23" pos:column="28">CMP<pos:position pos:line="23" pos:column="31"/></name></expr>, <expr><name pos:line="23" pos:column="33">CMP<pos:position pos:line="23" pos:column="36"/></name></expr>, <expr><name pos:line="23" pos:column="38">CMP<pos:position pos:line="23" pos:column="41"/></name></expr>, <expr><name pos:line="23" pos:column="43">CMP<pos:position pos:line="23" pos:column="46"/></name></expr>, <expr><name pos:line="23" pos:column="48">LEN<pos:position pos:line="23" pos:column="51"/></name></expr>, <expr><name pos:line="23" pos:column="53">CMP<pos:position pos:line="23" pos:column="56"/></name></expr>, <expr><name pos:line="23" pos:column="58">CMP<pos:position pos:line="23" pos:column="61"/></name></expr>, <expr><name pos:line="23" pos:column="63">CMP<pos:position pos:line="23" pos:column="66"/></name></expr>, <expr><name pos:line="23" pos:column="68">CMP<pos:position pos:line="23" pos:column="71"/></name></expr>,
		<comment type="block" pos:line="24" pos:column="17">/* S_I */</comment>  <expr><name pos:line="24" pos:column="28">CMP<pos:position pos:line="24" pos:column="31"/></name></expr>, <expr><operator pos:line="24" pos:column="33">-<pos:position pos:line="24" pos:column="34"/></operator><literal type="number" pos:line="24" pos:column="34">1<pos:position pos:line="24" pos:column="35"/></literal></expr>,  <expr><operator pos:line="24" pos:column="38">-<pos:position pos:line="24" pos:column="39"/></operator><literal type="number" pos:line="24" pos:column="39">1<pos:position pos:line="24" pos:column="40"/></literal></expr>,  <expr><operator pos:line="24" pos:column="43">+<pos:position pos:line="24" pos:column="44"/></operator><literal type="number" pos:line="24" pos:column="44">1<pos:position pos:line="24" pos:column="45"/></literal></expr>,  <expr><name pos:line="24" pos:column="48">LEN<pos:position pos:line="24" pos:column="51"/></name></expr>, <expr><name pos:line="24" pos:column="53">LEN<pos:position pos:line="24" pos:column="56"/></name></expr>, <expr><operator pos:line="24" pos:column="58">+<pos:position pos:line="24" pos:column="59"/></operator><literal type="number" pos:line="24" pos:column="59">1<pos:position pos:line="24" pos:column="60"/></literal></expr>,  <expr><name pos:line="24" pos:column="63">LEN<pos:position pos:line="24" pos:column="66"/></name></expr>, <expr><name pos:line="24" pos:column="68">LEN<pos:position pos:line="24" pos:column="71"/></name></expr>,
		<comment type="block" pos:line="25" pos:column="17">/* S_F */</comment>  <expr><name pos:line="25" pos:column="28">CMP<pos:position pos:line="25" pos:column="31"/></name></expr>, <expr><name pos:line="25" pos:column="33">CMP<pos:position pos:line="25" pos:column="36"/></name></expr>, <expr><name pos:line="25" pos:column="38">CMP<pos:position pos:line="25" pos:column="41"/></name></expr>, <expr><name pos:line="25" pos:column="43">CMP<pos:position pos:line="25" pos:column="46"/></name></expr>, <expr><name pos:line="25" pos:column="48">CMP<pos:position pos:line="25" pos:column="51"/></name></expr>, <expr><name pos:line="25" pos:column="53">CMP<pos:position pos:line="25" pos:column="56"/></name></expr>, <expr><name pos:line="25" pos:column="58">CMP<pos:position pos:line="25" pos:column="61"/></name></expr>, <expr><name pos:line="25" pos:column="63">CMP<pos:position pos:line="25" pos:column="66"/></name></expr>, <expr><name pos:line="25" pos:column="68">CMP<pos:position pos:line="25" pos:column="71"/></name></expr>,
		<comment type="block" pos:line="26" pos:column="17">/* S_Z */</comment>  <expr><name pos:line="26" pos:column="28">CMP<pos:position pos:line="26" pos:column="31"/></name></expr>, <expr><operator pos:line="26" pos:column="33">+<pos:position pos:line="26" pos:column="34"/></operator><literal type="number" pos:line="26" pos:column="34">1<pos:position pos:line="26" pos:column="35"/></literal></expr>,  <expr><operator pos:line="26" pos:column="38">+<pos:position pos:line="26" pos:column="39"/></operator><literal type="number" pos:line="26" pos:column="39">1<pos:position pos:line="26" pos:column="40"/></literal></expr>,  <expr><operator pos:line="26" pos:column="43">-<pos:position pos:line="26" pos:column="44"/></operator><literal type="number" pos:line="26" pos:column="44">1<pos:position pos:line="26" pos:column="45"/></literal></expr>,  <expr><name pos:line="26" pos:column="48">CMP<pos:position pos:line="26" pos:column="51"/></name></expr>, <expr><name pos:line="26" pos:column="53">CMP<pos:position pos:line="26" pos:column="56"/></name></expr>, <expr><operator pos:line="26" pos:column="58">-<pos:position pos:line="26" pos:column="59"/></operator><literal type="number" pos:line="26" pos:column="59">1<pos:position pos:line="26" pos:column="60"/></literal></expr>,  <expr><name pos:line="26" pos:column="63">CMP<pos:position pos:line="26" pos:column="66"/></name></expr>, <expr><name pos:line="26" pos:column="68">CMP<pos:position pos:line="26" pos:column="71"/></name></expr>
	}<pos:position pos:line="27" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="27" pos:column="11"/></decl_stmt>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">p1<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">==<pos:position pos:line="29" pos:column="18"/></operator> <name pos:line="29" pos:column="19">p2<pos:position pos:line="29" pos:column="21"/></name></expr>)<pos:position pos:line="29" pos:column="22"/></condition><then pos:line="29" pos:column="22">
		<block type="pseudo"><return pos:line="30" pos:column="17">return <expr><literal type="number" pos:line="30" pos:column="24">0<pos:position pos:line="30" pos:column="25"/></literal></expr>;<pos:position pos:line="30" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="32" pos:column="9">c1<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <operator pos:line="32" pos:column="14">*<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">p1<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">++<pos:position pos:line="32" pos:column="19"/></operator></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="33" pos:column="9">c2<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <operator pos:line="33" pos:column="14">*<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="15">p2<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">++<pos:position pos:line="33" pos:column="19"/></operator></expr>;<pos:position pos:line="33" pos:column="20"/></expr_stmt>
	<comment type="block" pos:line="34" pos:column="9">/* Hint: '0' is a digit too.  */</comment>
	<expr_stmt><expr><name pos:line="35" pos:column="9">state<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="17">S_N<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">+<pos:position pos:line="35" pos:column="22"/></operator> <operator pos:line="35" pos:column="23">(<pos:position pos:line="35" pos:column="24"/></operator><operator pos:line="35" pos:column="24">(<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="25">c1<pos:position pos:line="35" pos:column="27"/></name> <operator pos:line="35" pos:column="28">==<pos:position pos:line="35" pos:column="30"/></operator> <literal type="char" pos:line="35" pos:column="31">'0'<pos:position pos:line="35" pos:column="34"/></literal><operator pos:line="35" pos:column="34">)<pos:position pos:line="35" pos:column="35"/></operator> <operator pos:line="35" pos:column="36">+<pos:position pos:line="35" pos:column="37"/></operator> <operator pos:line="35" pos:column="38">(<pos:position pos:line="35" pos:column="39"/></operator><call><name pos:line="35" pos:column="39">isdigit<pos:position pos:line="35" pos:column="46"/></name> <argument_list pos:line="35" pos:column="47">(<argument><expr><name pos:line="35" pos:column="48">c1<pos:position pos:line="35" pos:column="50"/></name></expr></argument>)<pos:position pos:line="35" pos:column="51"/></argument_list></call> <operator pos:line="35" pos:column="52">!=<pos:position pos:line="35" pos:column="54"/></operator> <literal type="number" pos:line="35" pos:column="55">0<pos:position pos:line="35" pos:column="56"/></literal><operator pos:line="35" pos:column="56">)<pos:position pos:line="35" pos:column="57"/></operator><operator pos:line="35" pos:column="57">)<pos:position pos:line="35" pos:column="58"/></operator></expr>;<pos:position pos:line="35" pos:column="59"/></expr_stmt>

	<while pos:line="37" pos:column="9">while <condition pos:line="37" pos:column="15">(<expr><operator pos:line="37" pos:column="16">(<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="17">diff<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">c1<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">-<pos:position pos:line="37" pos:column="28"/></operator> <name pos:line="37" pos:column="29">c2<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">)<pos:position pos:line="37" pos:column="32"/></operator> <operator pos:line="37" pos:column="33">==<pos:position pos:line="37" pos:column="35"/></operator> <literal type="number" pos:line="37" pos:column="36">0<pos:position pos:line="37" pos:column="37"/></literal></expr>)<pos:position pos:line="37" pos:column="38"/></condition> <block pos:line="37" pos:column="39">{
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">c1<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">==<pos:position pos:line="38" pos:column="26"/></operator> <literal type="char" pos:line="38" pos:column="27">'\0'<pos:position pos:line="38" pos:column="31"/></literal></expr>)<pos:position pos:line="38" pos:column="32"/></condition><then pos:line="38" pos:column="32">
			<block type="pseudo"><return pos:line="39" pos:column="25">return <expr><name pos:line="39" pos:column="32">diff<pos:position pos:line="39" pos:column="36"/></name></expr>;<pos:position pos:line="39" pos:column="37"/></return></block></then></if>

		<expr_stmt><expr><name pos:line="41" pos:column="17">state<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <name><name pos:line="41" pos:column="25">next_state<pos:position pos:line="41" pos:column="35"/></name><index pos:line="41" pos:column="35">[<expr><name pos:line="41" pos:column="36">state<pos:position pos:line="41" pos:column="41"/></name></expr>]<pos:position pos:line="41" pos:column="42"/></index></name></expr>;<pos:position pos:line="41" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="42" pos:column="17">c1<pos:position pos:line="42" pos:column="19"/></name> <operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator> <operator pos:line="42" pos:column="22">*<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="23">p1<pos:position pos:line="42" pos:column="25"/></name><operator pos:line="42" pos:column="25">++<pos:position pos:line="42" pos:column="27"/></operator></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">c2<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">=<pos:position pos:line="43" pos:column="21"/></operator> <operator pos:line="43" pos:column="22">*<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">p2<pos:position pos:line="43" pos:column="25"/></name><operator pos:line="43" pos:column="25">++<pos:position pos:line="43" pos:column="27"/></operator></expr>;<pos:position pos:line="43" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="44" pos:column="17">state<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">+=<pos:position pos:line="44" pos:column="25"/></operator> <operator pos:line="44" pos:column="26">(<pos:position pos:line="44" pos:column="27"/></operator><name pos:line="44" pos:column="27">c1<pos:position pos:line="44" pos:column="29"/></name> <operator pos:line="44" pos:column="30">==<pos:position pos:line="44" pos:column="32"/></operator> <literal type="char" pos:line="44" pos:column="33">'0'<pos:position pos:line="44" pos:column="36"/></literal><operator pos:line="44" pos:column="36">)<pos:position pos:line="44" pos:column="37"/></operator> <operator pos:line="44" pos:column="38">+<pos:position pos:line="44" pos:column="39"/></operator> <operator pos:line="44" pos:column="40">(<pos:position pos:line="44" pos:column="41"/></operator><call><name pos:line="44" pos:column="41">isdigit<pos:position pos:line="44" pos:column="48"/></name> <argument_list pos:line="44" pos:column="49">(<argument><expr><name pos:line="44" pos:column="50">c1<pos:position pos:line="44" pos:column="52"/></name></expr></argument>)<pos:position pos:line="44" pos:column="53"/></argument_list></call> <operator pos:line="44" pos:column="54">!=<pos:position pos:line="44" pos:column="56"/></operator> <literal type="number" pos:line="44" pos:column="57">0<pos:position pos:line="44" pos:column="58"/></literal><operator pos:line="44" pos:column="58">)<pos:position pos:line="44" pos:column="59"/></operator></expr>;<pos:position pos:line="44" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></while>

	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">!<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="14">initialized<pos:position pos:line="47" pos:column="25"/></name></expr>)<pos:position pos:line="47" pos:column="26"/></condition><then pos:line="47" pos:column="26"> <block pos:line="47" pos:column="27">{
		<decl_stmt><decl><type><specifier pos:line="48" pos:column="17">const<pos:position pos:line="48" pos:column="22"/></specifier> <name><name pos:line="48" pos:column="23">struct<pos:position pos:line="48" pos:column="29"/></name> <name pos:line="48" pos:column="30">string_list<pos:position pos:line="48" pos:column="41"/></name></name> <modifier pos:line="48" pos:column="42">*<pos:position pos:line="48" pos:column="43"/></modifier></type><name pos:line="48" pos:column="43">deprecated_prereleases<pos:position pos:line="48" pos:column="65"/></name></decl>;<pos:position pos:line="48" pos:column="66"/></decl_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">initialized<pos:position pos:line="49" pos:column="28"/></name> <operator pos:line="49" pos:column="29">=<pos:position pos:line="49" pos:column="30"/></operator> <literal type="number" pos:line="49" pos:column="31">1<pos:position pos:line="49" pos:column="32"/></literal></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="50" pos:column="17">prereleases<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">=<pos:position pos:line="50" pos:column="30"/></operator> <call><name pos:line="50" pos:column="31">git_config_get_value_multi<pos:position pos:line="50" pos:column="57"/></name><argument_list pos:line="50" pos:column="57">(<argument><expr><literal type="string" pos:line="50" pos:column="58">"versionsort.suffix"<pos:position pos:line="50" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="80"/></expr_stmt>
		<expr_stmt><expr><name pos:line="51" pos:column="17">deprecated_prereleases<pos:position pos:line="51" pos:column="39"/></name> <operator pos:line="51" pos:column="40">=<pos:position pos:line="51" pos:column="41"/></operator> <call><name pos:line="51" pos:column="42">git_config_get_value_multi<pos:position pos:line="51" pos:column="68"/></name><argument_list pos:line="51" pos:column="68">(<argument><expr><literal type="string" pos:line="51" pos:column="69">"versionsort.prereleasesuffix"<pos:position pos:line="51" pos:column="99"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="101"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">prereleases<pos:position pos:line="52" pos:column="32"/></name></expr>)<pos:position pos:line="52" pos:column="33"/></condition><then pos:line="52" pos:column="33"> <block pos:line="52" pos:column="34">{
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><name pos:line="53" pos:column="29">deprecated_prereleases<pos:position pos:line="53" pos:column="51"/></name></expr>)<pos:position pos:line="53" pos:column="52"/></condition><then pos:line="53" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="33">warning<pos:position pos:line="54" pos:column="40"/></name><argument_list pos:line="54" pos:column="40">(<argument><expr><literal type="string" pos:line="54" pos:column="41">"ignoring versionsort.prereleasesuffix because versionsort.suffix is set"<pos:position pos:line="54" pos:column="114"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="115"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="116"/></expr_stmt></block></then></if>
		}<pos:position pos:line="55" pos:column="18"/></block></then> <else pos:line="55" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="25">prereleases<pos:position pos:line="56" pos:column="36"/></name> <operator pos:line="56" pos:column="37">=<pos:position pos:line="56" pos:column="38"/></operator> <name pos:line="56" pos:column="39">deprecated_prereleases<pos:position pos:line="56" pos:column="61"/></name></expr>;<pos:position pos:line="56" pos:column="62"/></expr_stmt></block></else></if>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">prereleases<pos:position pos:line="58" pos:column="24"/></name> <operator pos:line="58" pos:column="25">&amp;&amp;<pos:position pos:line="58" pos:column="35"/></operator> <call><name pos:line="58" pos:column="28">swap_prereleases<pos:position pos:line="58" pos:column="44"/></name><argument_list pos:line="58" pos:column="44">(<argument><expr><name pos:line="58" pos:column="45">s1<pos:position pos:line="58" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="49">s2<pos:position pos:line="58" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="53">(<pos:position pos:line="58" pos:column="54"/></operator><specifier pos:line="58" pos:column="54">const<pos:position pos:line="58" pos:column="59"/></specifier> <name pos:line="58" pos:column="60">char<pos:position pos:line="58" pos:column="64"/></name> <operator pos:line="58" pos:column="65">*<pos:position pos:line="58" pos:column="66"/></operator><operator pos:line="58" pos:column="66">)<pos:position pos:line="58" pos:column="67"/></operator> <name pos:line="58" pos:column="68">p1<pos:position pos:line="58" pos:column="70"/></name> <operator pos:line="58" pos:column="71">-<pos:position pos:line="58" pos:column="72"/></operator> <name pos:line="58" pos:column="73">s1<pos:position pos:line="58" pos:column="75"/></name> <operator pos:line="58" pos:column="76">-<pos:position pos:line="58" pos:column="77"/></operator> <literal type="number" pos:line="58" pos:column="78">1<pos:position pos:line="58" pos:column="79"/></literal></expr></argument>,
					    <argument><expr><operator pos:line="59" pos:column="45">&amp;<pos:position pos:line="59" pos:column="50"/></operator><name pos:line="59" pos:column="46">diff<pos:position pos:line="59" pos:column="50"/></name></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="52"/></condition><then pos:line="59" pos:column="52">
		<block type="pseudo"><return pos:line="60" pos:column="17">return <expr><name pos:line="60" pos:column="24">diff<pos:position pos:line="60" pos:column="28"/></name></expr>;<pos:position pos:line="60" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="62" pos:column="9">state<pos:position pos:line="62" pos:column="14"/></name> <operator pos:line="62" pos:column="15">=<pos:position pos:line="62" pos:column="16"/></operator> <name><name pos:line="62" pos:column="17">result_type<pos:position pos:line="62" pos:column="28"/></name><index pos:line="62" pos:column="28">[<expr><name pos:line="62" pos:column="29">state<pos:position pos:line="62" pos:column="34"/></name> <operator pos:line="62" pos:column="35">*<pos:position pos:line="62" pos:column="36"/></operator> <literal type="number" pos:line="62" pos:column="37">3<pos:position pos:line="62" pos:column="38"/></literal> <operator pos:line="62" pos:column="39">+<pos:position pos:line="62" pos:column="40"/></operator> <operator pos:line="62" pos:column="41">(<pos:position pos:line="62" pos:column="42"/></operator><operator pos:line="62" pos:column="42">(<pos:position pos:line="62" pos:column="43"/></operator><operator pos:line="62" pos:column="43">(<pos:position pos:line="62" pos:column="44"/></operator><name pos:line="62" pos:column="44">c2<pos:position pos:line="62" pos:column="46"/></name> <operator pos:line="62" pos:column="47">==<pos:position pos:line="62" pos:column="49"/></operator> <literal type="char" pos:line="62" pos:column="50">'0'<pos:position pos:line="62" pos:column="53"/></literal><operator pos:line="62" pos:column="53">)<pos:position pos:line="62" pos:column="54"/></operator> <operator pos:line="62" pos:column="55">+<pos:position pos:line="62" pos:column="56"/></operator> <operator pos:line="62" pos:column="57">(<pos:position pos:line="62" pos:column="58"/></operator><call><name pos:line="62" pos:column="58">isdigit<pos:position pos:line="62" pos:column="65"/></name> <argument_list pos:line="62" pos:column="66">(<argument><expr><name pos:line="62" pos:column="67">c2<pos:position pos:line="62" pos:column="69"/></name></expr></argument>)<pos:position pos:line="62" pos:column="70"/></argument_list></call> <operator pos:line="62" pos:column="71">!=<pos:position pos:line="62" pos:column="73"/></operator> <literal type="number" pos:line="62" pos:column="74">0<pos:position pos:line="62" pos:column="75"/></literal><operator pos:line="62" pos:column="75">)<pos:position pos:line="62" pos:column="76"/></operator><operator pos:line="62" pos:column="76">)<pos:position pos:line="62" pos:column="77"/></operator><operator pos:line="62" pos:column="77">)<pos:position pos:line="62" pos:column="78"/></operator></expr>]<pos:position pos:line="62" pos:column="79"/></index></name></expr>;<pos:position pos:line="62" pos:column="80"/></expr_stmt>

	<switch pos:line="64" pos:column="9">switch <condition pos:line="64" pos:column="16">(<expr><name pos:line="64" pos:column="17">state<pos:position pos:line="64" pos:column="22"/></name></expr>)<pos:position pos:line="64" pos:column="23"/></condition> <block pos:line="64" pos:column="24">{
	<case pos:line="65" pos:column="9">case <expr><name pos:line="65" pos:column="14">CMP<pos:position pos:line="65" pos:column="17"/></name></expr>:<pos:position pos:line="65" pos:column="18"/></case>
		<return pos:line="66" pos:column="17">return <expr><name pos:line="66" pos:column="24">diff<pos:position pos:line="66" pos:column="28"/></name></expr>;<pos:position pos:line="66" pos:column="29"/></return>

	<case pos:line="68" pos:column="9">case <expr><name pos:line="68" pos:column="14">LEN<pos:position pos:line="68" pos:column="17"/></name></expr>:<pos:position pos:line="68" pos:column="18"/></case>
		<while pos:line="69" pos:column="17">while <condition pos:line="69" pos:column="23">(<expr><call><name pos:line="69" pos:column="24">isdigit<pos:position pos:line="69" pos:column="31"/></name> <argument_list pos:line="69" pos:column="32">(<argument><expr><operator pos:line="69" pos:column="33">*<pos:position pos:line="69" pos:column="34"/></operator><name pos:line="69" pos:column="34">p1<pos:position pos:line="69" pos:column="36"/></name><operator pos:line="69" pos:column="36">++<pos:position pos:line="69" pos:column="38"/></operator></expr></argument>)<pos:position pos:line="69" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="40"/></condition>
			<block type="pseudo"><if pos:line="70" pos:column="25">if <condition pos:line="70" pos:column="28">(<expr><operator pos:line="70" pos:column="29">!<pos:position pos:line="70" pos:column="30"/></operator><call><name pos:line="70" pos:column="30">isdigit<pos:position pos:line="70" pos:column="37"/></name> <argument_list pos:line="70" pos:column="38">(<argument><expr><operator pos:line="70" pos:column="39">*<pos:position pos:line="70" pos:column="40"/></operator><name pos:line="70" pos:column="40">p2<pos:position pos:line="70" pos:column="42"/></name><operator pos:line="70" pos:column="42">++<pos:position pos:line="70" pos:column="44"/></operator></expr></argument>)<pos:position pos:line="70" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="46"/></condition><then pos:line="70" pos:column="46">
				<block type="pseudo"><return pos:line="71" pos:column="33">return <expr><literal type="number" pos:line="71" pos:column="40">1<pos:position pos:line="71" pos:column="41"/></literal></expr>;<pos:position pos:line="71" pos:column="42"/></return></block></then></if></block></while>

		<return pos:line="73" pos:column="17">return <expr><ternary><condition><expr><call><name pos:line="73" pos:column="24">isdigit<pos:position pos:line="73" pos:column="31"/></name> <argument_list pos:line="73" pos:column="32">(<argument><expr><operator pos:line="73" pos:column="33">*<pos:position pos:line="73" pos:column="34"/></operator><name pos:line="73" pos:column="34">p2<pos:position pos:line="73" pos:column="36"/></name></expr></argument>)<pos:position pos:line="73" pos:column="37"/></argument_list></call></expr> ?<pos:position pos:line="73" pos:column="39"/></condition><then pos:line="73" pos:column="39"> <expr><operator pos:line="73" pos:column="40">-<pos:position pos:line="73" pos:column="41"/></operator><literal type="number" pos:line="73" pos:column="41">1<pos:position pos:line="73" pos:column="42"/></literal></expr> <pos:position pos:line="73" pos:column="43"/></then><else pos:line="73" pos:column="43">: <expr><name pos:line="73" pos:column="45">diff<pos:position pos:line="73" pos:column="49"/></name></expr></else></ternary></expr>;<pos:position pos:line="73" pos:column="50"/></return>

	<default pos:line="75" pos:column="9">default:<pos:position pos:line="75" pos:column="17"/></default>
		<return pos:line="76" pos:column="17">return <expr><name pos:line="76" pos:column="24">state<pos:position pos:line="76" pos:column="29"/></name></expr>;<pos:position pos:line="76" pos:column="30"/></return>
	}<pos:position pos:line="77" pos:column="10"/></block></switch>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
