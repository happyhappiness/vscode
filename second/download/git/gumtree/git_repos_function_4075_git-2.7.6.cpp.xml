<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4075_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">binary_search<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">entry<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier><modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">sequence<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">longest<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">entry<pos:position pos:line="2" pos:column="29"/></name></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">entry<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">left<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><operator pos:line="4" pos:column="20">-<pos:position pos:line="4" pos:column="21"/></operator><literal type="number" pos:line="4" pos:column="21">1<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="24">right<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name pos:line="4" pos:column="32">longest<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><name pos:line="6" pos:column="16">left<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">+<pos:position pos:line="6" pos:column="22"/></operator> <literal type="number" pos:line="6" pos:column="23">1<pos:position pos:line="6" pos:column="24"/></literal> <operator pos:line="6" pos:column="25">&lt;<pos:position pos:line="6" pos:column="29"/></operator> <name pos:line="6" pos:column="27">right<pos:position pos:line="6" pos:column="32"/></name></expr>)<pos:position pos:line="6" pos:column="33"/></condition> <block pos:line="6" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">middle<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><operator pos:line="7" pos:column="30">(<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="31">left<pos:position pos:line="7" pos:column="35"/></name> <operator pos:line="7" pos:column="36">+<pos:position pos:line="7" pos:column="37"/></operator> <name pos:line="7" pos:column="38">right<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">)<pos:position pos:line="7" pos:column="44"/></operator> <operator pos:line="7" pos:column="45">/<pos:position pos:line="7" pos:column="46"/></operator> <literal type="number" pos:line="7" pos:column="47">2<pos:position pos:line="7" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>
		<comment type="block" pos:line="8" pos:column="17">/* by construction, no two entries can be equal */</comment>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name><name pos:line="9" pos:column="21">sequence<pos:position pos:line="9" pos:column="29"/></name><index pos:line="9" pos:column="29">[<expr><name pos:line="9" pos:column="30">middle<pos:position pos:line="9" pos:column="36"/></name></expr>]<pos:position pos:line="9" pos:column="37"/></index></name><operator pos:line="9" pos:column="37">-&gt;<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="39">line2<pos:position pos:line="9" pos:column="44"/></name> <operator pos:line="9" pos:column="45">&gt;<pos:position pos:line="9" pos:column="49"/></operator> <name><name pos:line="9" pos:column="47">entry<pos:position pos:line="9" pos:column="52"/></name><operator pos:line="9" pos:column="52">-&gt;<pos:position pos:line="9" pos:column="57"/></operator><name pos:line="9" pos:column="54">line2<pos:position pos:line="9" pos:column="59"/></name></name></expr>)<pos:position pos:line="9" pos:column="60"/></condition><then pos:line="9" pos:column="60">
			<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="25">right<pos:position pos:line="10" pos:column="30"/></name> <operator pos:line="10" pos:column="31">=<pos:position pos:line="10" pos:column="32"/></operator> <name pos:line="10" pos:column="33">middle<pos:position pos:line="10" pos:column="39"/></name></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt></block></then>
		<else pos:line="11" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="25">left<pos:position pos:line="12" pos:column="29"/></name> <operator pos:line="12" pos:column="30">=<pos:position pos:line="12" pos:column="31"/></operator> <name pos:line="12" pos:column="32">middle<pos:position pos:line="12" pos:column="38"/></name></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt></block></else></if>
	}<pos:position pos:line="13" pos:column="10"/></block></while>
	<comment type="block" pos:line="14" pos:column="9">/* return the index in "sequence", _not_ the sequence length */</comment>
	<return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">left<pos:position pos:line="15" pos:column="20"/></name></expr>;<pos:position pos:line="15" pos:column="21"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
