<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_286_git-2.4.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">cache_entry<pos:position pos:line="1" pos:column="26"/></name></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">create_alias_ce<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name><name pos:line="1" pos:column="44">struct<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">index_state<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">istate<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
					   <parameter><decl><type><name><name pos:line="2" pos:column="44">struct<pos:position pos:line="2" pos:column="50"/></name> <name pos:line="2" pos:column="51">cache_entry<pos:position pos:line="2" pos:column="62"/></name></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">ce<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
					   <parameter><decl><type><name><name pos:line="3" pos:column="44">struct<pos:position pos:line="3" pos:column="50"/></name> <name pos:line="3" pos:column="51">cache_entry<pos:position pos:line="3" pos:column="62"/></name></name> <modifier pos:line="3" pos:column="63">*<pos:position pos:line="3" pos:column="64"/></modifier></type><name pos:line="3" pos:column="64">alias<pos:position pos:line="3" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="70"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
	struct <expr_stmt><expr><name pos:line="6" pos:column="16">cache_entry<pos:position pos:line="6" pos:column="27"/></name> <operator pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></operator><operator pos:line="6" pos:column="29">new<pos:position pos:line="6" pos:column="32"/></operator></expr>;<pos:position pos:line="6" pos:column="33"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">alias<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">-&gt;<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="20">ce_flags<pos:position pos:line="8" pos:column="28"/></name></name> <operator pos:line="8" pos:column="29">&amp;<pos:position pos:line="8" pos:column="34"/></operator> <name pos:line="8" pos:column="31">CE_ADDED<pos:position pos:line="8" pos:column="39"/></name></expr>)<pos:position pos:line="8" pos:column="40"/></condition><then pos:line="8" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">die<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><literal type="string" pos:line="9" pos:column="21">"Will not add file alias '%s' ('%s' already exists in index)"<pos:position pos:line="9" pos:column="82"/></literal></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="84">ce<pos:position pos:line="9" pos:column="86"/></name><operator pos:line="9" pos:column="86">-&gt;<pos:position pos:line="9" pos:column="91"/></operator><name pos:line="9" pos:column="88">name<pos:position pos:line="9" pos:column="92"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="94">alias<pos:position pos:line="9" pos:column="99"/></name><operator pos:line="9" pos:column="99">-&gt;<pos:position pos:line="9" pos:column="104"/></operator><name pos:line="9" pos:column="101">name<pos:position pos:line="9" pos:column="105"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="107"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="11" pos:column="9">/* Ok, create the new entry using the name of the existing alias */</comment>
	<expr_stmt><expr><name pos:line="12" pos:column="9">len<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <call><name pos:line="12" pos:column="15">ce_namelen<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">alias<pos:position pos:line="12" pos:column="31"/></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="13" pos:column="9">new<pos:position pos:line="13" pos:column="12"/></operator> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">xcalloc<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><literal type="number" pos:line="13" pos:column="23">1<pos:position pos:line="13" pos:column="24"/></literal></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="26">cache_entry_size<pos:position pos:line="13" pos:column="42"/></name><argument_list pos:line="13" pos:column="42">(<argument><expr><name pos:line="13" pos:column="43">len<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">memcpy<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><operator pos:line="14" pos:column="16">new<pos:position pos:line="14" pos:column="19"/></operator><operator pos:line="14" pos:column="19">-&gt;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="21">name<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="27">alias<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">-&gt;<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="34">name<pos:position pos:line="14" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="40">len<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">copy_cache_entry<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><operator pos:line="15" pos:column="26">new<pos:position pos:line="15" pos:column="29"/></operator></expr></argument>, <argument><expr><name pos:line="15" pos:column="31">ce<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">save_or_free_index_entry<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><name pos:line="16" pos:column="34">istate<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">ce<pos:position pos:line="16" pos:column="44"/></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt>
	<return pos:line="17" pos:column="9">return <expr><operator pos:line="17" pos:column="16">new<pos:position pos:line="17" pos:column="19"/></operator></expr>;<pos:position pos:line="17" pos:column="20"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
