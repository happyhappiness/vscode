<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2537_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">inflate_request<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">prog_name<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">out<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">buffer_input<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">git_zstream<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">stream<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">full_request<pos:position pos:line="4" pos:column="36"/></name> <init pos:line="4" pos:column="37">= <expr><name pos:line="4" pos:column="39">NULL<pos:position pos:line="4" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name><name pos:line="5" pos:column="23">in_buf<pos:position pos:line="5" pos:column="29"/></name><index pos:line="5" pos:column="29">[<expr><literal type="number" pos:line="5" pos:column="30">8192<pos:position pos:line="5" pos:column="34"/></literal></expr>]<pos:position pos:line="5" pos:column="35"/></index></name></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name></type> <name><name pos:line="6" pos:column="23">out_buf<pos:position pos:line="6" pos:column="30"/></name><index pos:line="6" pos:column="30">[<expr><literal type="number" pos:line="6" pos:column="31">8192<pos:position pos:line="6" pos:column="35"/></literal></expr>]<pos:position pos:line="6" pos:column="36"/></index></name></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">long<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">cnt<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">memset<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><operator pos:line="9" pos:column="16">&amp;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="17">stream<pos:position pos:line="9" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="25">0<pos:position pos:line="9" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="28">sizeof<argument_list pos:line="9" pos:column="34">(<argument><expr><name pos:line="9" pos:column="35">stream<pos:position pos:line="9" pos:column="41"/></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">git_inflate_init_gzip_only<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><operator pos:line="10" pos:column="36">&amp;<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="37">stream<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>

	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><literal type="number" pos:line="12" pos:column="16">1<pos:position pos:line="12" pos:column="17"/></literal></expr>)<pos:position pos:line="12" pos:column="18"/></condition> <block pos:line="12" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">ssize_t<pos:position pos:line="13" pos:column="24"/></name></type> <name pos:line="13" pos:column="25">n<pos:position pos:line="13" pos:column="26"/></name></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">buffer_input<pos:position pos:line="15" pos:column="33"/></name></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34"> <block pos:line="15" pos:column="35">{
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><name pos:line="16" pos:column="29">full_request<pos:position pos:line="16" pos:column="41"/></name></expr>)<pos:position pos:line="16" pos:column="42"/></condition><then pos:line="16" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="33">n<pos:position pos:line="17" pos:column="34"/></name> <operator pos:line="17" pos:column="35">=<pos:position pos:line="17" pos:column="36"/></operator> <literal type="number" pos:line="17" pos:column="37">0<pos:position pos:line="17" pos:column="38"/></literal></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt></block></then> <comment type="block" pos:line="17" pos:column="40">/* nothing left to read */</comment>
			<else pos:line="18" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="33">n<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">=<pos:position pos:line="19" pos:column="36"/></operator> <call><name pos:line="19" pos:column="37">read_request<pos:position pos:line="19" pos:column="49"/></name><argument_list pos:line="19" pos:column="49">(<argument><expr><literal type="number" pos:line="19" pos:column="50">0<pos:position pos:line="19" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="53">&amp;<pos:position pos:line="19" pos:column="58"/></operator><name pos:line="19" pos:column="54">full_request<pos:position pos:line="19" pos:column="66"/></name></expr></argument>)<pos:position pos:line="19" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="68"/></expr_stmt></block></else></if>
			<expr_stmt><expr><name><name pos:line="20" pos:column="25">stream<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">.<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">next_in<pos:position pos:line="20" pos:column="39"/></name></name> <operator pos:line="20" pos:column="40">=<pos:position pos:line="20" pos:column="41"/></operator> <name pos:line="20" pos:column="42">full_request<pos:position pos:line="20" pos:column="54"/></name></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="21" pos:column="18"/></block></then> <else pos:line="21" pos:column="19">else <block pos:line="21" pos:column="24">{
			<expr_stmt><expr><name pos:line="22" pos:column="25">n<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <call><name pos:line="22" pos:column="29">xread<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(<argument><expr><literal type="number" pos:line="22" pos:column="35">0<pos:position pos:line="22" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="38">in_buf<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="46">sizeof<argument_list pos:line="22" pos:column="52">(<argument><expr><name pos:line="22" pos:column="53">in_buf<pos:position pos:line="22" pos:column="59"/></name></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="23" pos:column="25">stream<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">.<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">next_in<pos:position pos:line="23" pos:column="39"/></name></name> <operator pos:line="23" pos:column="40">=<pos:position pos:line="23" pos:column="41"/></operator> <name pos:line="23" pos:column="42">in_buf<pos:position pos:line="23" pos:column="48"/></name></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="24" pos:column="18"/></block></else></if>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">n<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">&lt;=<pos:position pos:line="26" pos:column="28"/></operator> <literal type="number" pos:line="26" pos:column="26">0<pos:position pos:line="26" pos:column="27"/></literal></expr>)<pos:position pos:line="26" pos:column="28"/></condition><then pos:line="26" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">die<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><literal type="string" pos:line="27" pos:column="29">"request ended in the middle of the gzip stream"<pos:position pos:line="27" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="79"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">stream<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">.<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="24">avail_in<pos:position pos:line="28" pos:column="32"/></name></name> <operator pos:line="28" pos:column="33">=<pos:position pos:line="28" pos:column="34"/></operator> <name pos:line="28" pos:column="35">n<pos:position pos:line="28" pos:column="36"/></name></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>

		<while pos:line="30" pos:column="17">while <condition pos:line="30" pos:column="23">(<expr><literal type="number" pos:line="30" pos:column="24">0<pos:position pos:line="30" pos:column="25"/></literal> <operator pos:line="30" pos:column="26">&lt;<pos:position pos:line="30" pos:column="30"/></operator> <name><name pos:line="30" pos:column="28">stream<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">.<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="35">avail_in<pos:position pos:line="30" pos:column="43"/></name></name></expr>)<pos:position pos:line="30" pos:column="44"/></condition> <block pos:line="30" pos:column="45">{
			<decl_stmt><decl><type><name pos:line="31" pos:column="25">int<pos:position pos:line="31" pos:column="28"/></name></type> <name pos:line="31" pos:column="29">ret<pos:position pos:line="31" pos:column="32"/></name></decl>;<pos:position pos:line="31" pos:column="33"/></decl_stmt>

			<expr_stmt><expr><name><name pos:line="33" pos:column="25">stream<pos:position pos:line="33" pos:column="31"/></name><operator pos:line="33" pos:column="31">.<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="32">next_out<pos:position pos:line="33" pos:column="40"/></name></name> <operator pos:line="33" pos:column="41">=<pos:position pos:line="33" pos:column="42"/></operator> <name pos:line="33" pos:column="43">out_buf<pos:position pos:line="33" pos:column="50"/></name></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="34" pos:column="25">stream<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">.<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="32">avail_out<pos:position pos:line="34" pos:column="41"/></name></name> <operator pos:line="34" pos:column="42">=<pos:position pos:line="34" pos:column="43"/></operator> <sizeof pos:line="34" pos:column="44">sizeof<argument_list pos:line="34" pos:column="50">(<argument><expr><name pos:line="34" pos:column="51">out_buf<pos:position pos:line="34" pos:column="58"/></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></sizeof></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>

			<expr_stmt><expr><name pos:line="36" pos:column="25">ret<pos:position pos:line="36" pos:column="28"/></name> <operator pos:line="36" pos:column="29">=<pos:position pos:line="36" pos:column="30"/></operator> <call><name pos:line="36" pos:column="31">git_inflate<pos:position pos:line="36" pos:column="42"/></name><argument_list pos:line="36" pos:column="42">(<argument><expr><operator pos:line="36" pos:column="43">&amp;<pos:position pos:line="36" pos:column="48"/></operator><name pos:line="36" pos:column="44">stream<pos:position pos:line="36" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="52">Z_NO_FLUSH<pos:position pos:line="36" pos:column="62"/></name></expr></argument>)<pos:position pos:line="36" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="64"/></expr_stmt>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><name pos:line="37" pos:column="29">ret<pos:position pos:line="37" pos:column="32"/></name> <operator pos:line="37" pos:column="33">!=<pos:position pos:line="37" pos:column="35"/></operator> <name pos:line="37" pos:column="36">Z_OK<pos:position pos:line="37" pos:column="40"/></name> <operator pos:line="37" pos:column="41">&amp;&amp;<pos:position pos:line="37" pos:column="51"/></operator> <name pos:line="37" pos:column="44">ret<pos:position pos:line="37" pos:column="47"/></name> <operator pos:line="37" pos:column="48">!=<pos:position pos:line="37" pos:column="50"/></operator> <name pos:line="37" pos:column="51">Z_STREAM_END<pos:position pos:line="37" pos:column="63"/></name></expr>)<pos:position pos:line="37" pos:column="64"/></condition><then pos:line="37" pos:column="64">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="33">die<pos:position pos:line="38" pos:column="36"/></name><argument_list pos:line="38" pos:column="36">(<argument><expr><literal type="string" pos:line="38" pos:column="37">"zlib error inflating request, result %d"<pos:position pos:line="38" pos:column="78"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="80">ret<pos:position pos:line="38" pos:column="83"/></name></expr></argument>)<pos:position pos:line="38" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="85"/></expr_stmt></block></then></if>

			<expr_stmt><expr><name pos:line="40" pos:column="25">n<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">=<pos:position pos:line="40" pos:column="28"/></operator> <name><name pos:line="40" pos:column="29">stream<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">.<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="36">total_out<pos:position pos:line="40" pos:column="45"/></name></name> <operator pos:line="40" pos:column="46">-<pos:position pos:line="40" pos:column="47"/></operator> <name pos:line="40" pos:column="48">cnt<pos:position pos:line="40" pos:column="51"/></name></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><call><name pos:line="41" pos:column="29">write_in_full<pos:position pos:line="41" pos:column="42"/></name><argument_list pos:line="41" pos:column="42">(<argument><expr><name pos:line="41" pos:column="43">out<pos:position pos:line="41" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="48">out_buf<pos:position pos:line="41" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="57">n<pos:position pos:line="41" pos:column="58"/></name></expr></argument>)<pos:position pos:line="41" pos:column="59"/></argument_list></call> <operator pos:line="41" pos:column="60">!=<pos:position pos:line="41" pos:column="62"/></operator> <name pos:line="41" pos:column="63">n<pos:position pos:line="41" pos:column="64"/></name></expr>)<pos:position pos:line="41" pos:column="65"/></condition><then pos:line="41" pos:column="65">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="33">die<pos:position pos:line="42" pos:column="36"/></name><argument_list pos:line="42" pos:column="36">(<argument><expr><literal type="string" pos:line="42" pos:column="37">"%s aborted reading request"<pos:position pos:line="42" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="67">prog_name<pos:position pos:line="42" pos:column="76"/></name></expr></argument>)<pos:position pos:line="42" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="78"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="43" pos:column="25">cnt<pos:position pos:line="43" pos:column="28"/></name> <operator pos:line="43" pos:column="29">+=<pos:position pos:line="43" pos:column="31"/></operator> <name pos:line="43" pos:column="32">n<pos:position pos:line="43" pos:column="33"/></name></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt>

			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><name pos:line="45" pos:column="29">ret<pos:position pos:line="45" pos:column="32"/></name> <operator pos:line="45" pos:column="33">==<pos:position pos:line="45" pos:column="35"/></operator> <name pos:line="45" pos:column="36">Z_STREAM_END<pos:position pos:line="45" pos:column="48"/></name></expr>)<pos:position pos:line="45" pos:column="49"/></condition><then pos:line="45" pos:column="49">
				<block type="pseudo"><goto pos:line="46" pos:column="33">goto <name pos:line="46" pos:column="38">done<pos:position pos:line="46" pos:column="42"/></name>;<pos:position pos:line="46" pos:column="43"/></goto></block></then></if>
		}<pos:position pos:line="47" pos:column="18"/></block></while>
	}<pos:position pos:line="48" pos:column="10"/></block></while>

<label><name pos:line="50" pos:column="1">done<pos:position pos:line="50" pos:column="5"/></name>:<pos:position pos:line="50" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="51" pos:column="9">git_inflate_end<pos:position pos:line="51" pos:column="24"/></name><argument_list pos:line="51" pos:column="24">(<argument><expr><operator pos:line="51" pos:column="25">&amp;<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="26">stream<pos:position pos:line="51" pos:column="32"/></name></expr></argument>)<pos:position pos:line="51" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">close<pos:position pos:line="52" pos:column="14"/></name><argument_list pos:line="52" pos:column="14">(<argument><expr><name pos:line="52" pos:column="15">out<pos:position pos:line="52" pos:column="18"/></name></expr></argument>)<pos:position pos:line="52" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="53" pos:column="9">free<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">(<argument><expr><name pos:line="53" pos:column="14">full_request<pos:position pos:line="53" pos:column="26"/></name></expr></argument>)<pos:position pos:line="53" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="28"/></expr_stmt>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
