<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5562_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">fill<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">min<pos:position pos:line="1" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">min<pos:position pos:line="3" pos:column="16"/></name> <operator pos:line="3" pos:column="17">&lt;=<pos:position pos:line="3" pos:column="22"/></operator> <name pos:line="3" pos:column="20">input_len<pos:position pos:line="3" pos:column="29"/></name></expr>)<pos:position pos:line="3" pos:column="30"/></condition><then pos:line="3" pos:column="30">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><name pos:line="4" pos:column="24">input_buffer<pos:position pos:line="4" pos:column="36"/></name> <operator pos:line="4" pos:column="37">+<pos:position pos:line="4" pos:column="38"/></operator> <name pos:line="4" pos:column="39">input_offset<pos:position pos:line="4" pos:column="51"/></name></expr>;<pos:position pos:line="4" pos:column="52"/></return></block></then></if>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">min<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">&gt;<pos:position pos:line="5" pos:column="21"/></operator> <sizeof pos:line="5" pos:column="19">sizeof<argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">input_buffer<pos:position pos:line="5" pos:column="38"/></name></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></sizeof></expr>)<pos:position pos:line="5" pos:column="40"/></condition><then pos:line="5" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="17">die<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><call><name pos:line="6" pos:column="21">Q_<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><literal type="string" pos:line="6" pos:column="24">"cannot fill %d byte"<pos:position pos:line="6" pos:column="45"/></literal></expr></argument>,
		       <argument><expr><literal type="string" pos:line="7" pos:column="24">"cannot fill %d bytes"<pos:position pos:line="7" pos:column="46"/></literal></expr></argument>,
		       <argument><expr><name pos:line="8" pos:column="24">min<pos:position pos:line="8" pos:column="27"/></name></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call></expr></argument>,
		    <argument><expr><name pos:line="9" pos:column="21">min<pos:position pos:line="9" pos:column="24"/></name></expr></argument>)<pos:position pos:line="9" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">flush<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">()<pos:position pos:line="10" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>
	<do pos:line="11" pos:column="9">do <block pos:line="11" pos:column="12">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">ssize_t<pos:position pos:line="12" pos:column="24"/></name></type> <name pos:line="12" pos:column="25">ret<pos:position pos:line="12" pos:column="28"/></name> <init pos:line="12" pos:column="29">= <expr><call><name pos:line="12" pos:column="31">xread<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><name pos:line="12" pos:column="37">input_fd<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="47">input_buffer<pos:position pos:line="12" pos:column="59"/></name> <operator pos:line="12" pos:column="60">+<pos:position pos:line="12" pos:column="61"/></operator> <name pos:line="12" pos:column="62">input_len<pos:position pos:line="12" pos:column="71"/></name></expr></argument>,
				<argument><expr><sizeof pos:line="13" pos:column="33">sizeof<argument_list pos:line="13" pos:column="39">(<argument><expr><name pos:line="13" pos:column="40">input_buffer<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></sizeof> <operator pos:line="13" pos:column="54">-<pos:position pos:line="13" pos:column="55"/></operator> <name pos:line="13" pos:column="56">input_len<pos:position pos:line="13" pos:column="65"/></name></expr></argument>)<pos:position pos:line="13" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="67"/></decl_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">ret<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">&lt;=<pos:position pos:line="14" pos:column="30"/></operator> <literal type="number" pos:line="14" pos:column="28">0<pos:position pos:line="14" pos:column="29"/></literal></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30"> <block pos:line="14" pos:column="31">{
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><operator pos:line="15" pos:column="29">!<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">ret<pos:position pos:line="15" pos:column="33"/></name></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="33">die<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><call><name pos:line="16" pos:column="37">_<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">(<argument><expr><literal type="string" pos:line="16" pos:column="39">"early EOF"<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="53"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">die_errno<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><call><name pos:line="17" pos:column="35">_<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><literal type="string" pos:line="17" pos:column="37">"read error on input"<pos:position pos:line="17" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="19" pos:column="17">input_len<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">+=<pos:position pos:line="19" pos:column="29"/></operator> <name pos:line="19" pos:column="30">ret<pos:position pos:line="19" pos:column="33"/></name></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">from_stdin<pos:position pos:line="20" pos:column="31"/></name></expr>)<pos:position pos:line="20" pos:column="32"/></condition><then pos:line="20" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">display_throughput<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">progress<pos:position pos:line="21" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="54">consumed_bytes<pos:position pos:line="21" pos:column="68"/></name> <operator pos:line="21" pos:column="69">+<pos:position pos:line="21" pos:column="70"/></operator> <name pos:line="21" pos:column="71">input_len<pos:position pos:line="21" pos:column="80"/></name></expr></argument>)<pos:position pos:line="21" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="82"/></expr_stmt></block></then></if>
	}<pos:position pos:line="22" pos:column="10"/></block> while <condition pos:line="22" pos:column="17">(<expr><name pos:line="22" pos:column="18">input_len<pos:position pos:line="22" pos:column="27"/></name> <operator pos:line="22" pos:column="28">&lt;<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="30">min<pos:position pos:line="22" pos:column="33"/></name></expr>)<pos:position pos:line="22" pos:column="34"/></condition>;<pos:position pos:line="22" pos:column="35"/></do>
	<return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">input_buffer<pos:position pos:line="23" pos:column="28"/></name></expr>;<pos:position pos:line="23" pos:column="29"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
