<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3362_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ssize_t<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">read_request<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">fd<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">unsigned<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier><modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">out<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">len<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="25">alloc<pos:position pos:line="3" pos:column="30"/></name> <init pos:line="3" pos:column="31">= <expr><literal type="number" pos:line="3" pos:column="33">8192<pos:position pos:line="3" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">buf<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><call><name pos:line="4" pos:column="30">xmalloc<pos:position pos:line="4" pos:column="37"/></name><argument_list pos:line="4" pos:column="37">(<argument><expr><name pos:line="4" pos:column="38">alloc<pos:position pos:line="4" pos:column="43"/></name></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">max_request_buffer<pos:position pos:line="6" pos:column="31"/></name> <operator pos:line="6" pos:column="32">&lt;<pos:position pos:line="6" pos:column="36"/></operator> <name pos:line="6" pos:column="34">alloc<pos:position pos:line="6" pos:column="39"/></name></expr>)<pos:position pos:line="6" pos:column="40"/></condition><then pos:line="6" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="17">max_request_buffer<pos:position pos:line="7" pos:column="35"/></name> <operator pos:line="7" pos:column="36">=<pos:position pos:line="7" pos:column="37"/></operator> <name pos:line="7" pos:column="38">alloc<pos:position pos:line="7" pos:column="43"/></name></expr>;<pos:position pos:line="7" pos:column="44"/></expr_stmt></block></then></if>

	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><literal type="number" pos:line="9" pos:column="16">1<pos:position pos:line="9" pos:column="17"/></literal></expr>)<pos:position pos:line="9" pos:column="18"/></condition> <block pos:line="9" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">ssize_t<pos:position pos:line="10" pos:column="24"/></name></type> <name pos:line="10" pos:column="25">cnt<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>

		<expr_stmt><expr><name pos:line="12" pos:column="17">cnt<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <call><name pos:line="12" pos:column="23">read_in_full<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">fd<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="40">buf<pos:position pos:line="12" pos:column="43"/></name> <operator pos:line="12" pos:column="44">+<pos:position pos:line="12" pos:column="45"/></operator> <name pos:line="12" pos:column="46">len<pos:position pos:line="12" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="51">alloc<pos:position pos:line="12" pos:column="56"/></name> <operator pos:line="12" pos:column="57">-<pos:position pos:line="12" pos:column="58"/></operator> <name pos:line="12" pos:column="59">len<pos:position pos:line="12" pos:column="62"/></name></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">cnt<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">&lt;<pos:position pos:line="13" pos:column="29"/></operator> <literal type="number" pos:line="13" pos:column="27">0<pos:position pos:line="13" pos:column="28"/></literal></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29"> <block pos:line="13" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">free<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">buf<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
			<return pos:line="15" pos:column="25">return <expr><operator pos:line="15" pos:column="32">-<pos:position pos:line="15" pos:column="33"/></operator><literal type="number" pos:line="15" pos:column="33">1<pos:position pos:line="15" pos:column="34"/></literal></expr>;<pos:position pos:line="15" pos:column="35"/></return>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="18" pos:column="17">/* partial read from read_in_full means we hit EOF */</comment>
		<expr_stmt><expr><name pos:line="19" pos:column="17">len<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">+=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">cnt<pos:position pos:line="19" pos:column="27"/></name></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">len<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">&lt;<pos:position pos:line="20" pos:column="29"/></operator> <name pos:line="20" pos:column="27">alloc<pos:position pos:line="20" pos:column="32"/></name></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33"> <block pos:line="20" pos:column="34">{
			<expr_stmt><expr><operator pos:line="21" pos:column="25">*<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">out<pos:position pos:line="21" pos:column="29"/></name> <operator pos:line="21" pos:column="30">=<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">buf<pos:position pos:line="21" pos:column="35"/></name></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
			<return pos:line="22" pos:column="25">return <expr><name pos:line="22" pos:column="32">len<pos:position pos:line="22" pos:column="35"/></name></expr>;<pos:position pos:line="22" pos:column="36"/></return>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="25" pos:column="17">/* otherwise, grow and try again (if we can) */</comment>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">alloc<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">==<pos:position pos:line="26" pos:column="29"/></operator> <name pos:line="26" pos:column="30">max_request_buffer<pos:position pos:line="26" pos:column="48"/></name></expr>)<pos:position pos:line="26" pos:column="49"/></condition><then pos:line="26" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">die<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><literal type="string" pos:line="27" pos:column="29">"request was larger than our maximum size (%lu);"<pos:position pos:line="27" pos:column="78"/></literal>
			    <literal type="string" pos:line="28" pos:column="29">" try setting GIT_HTTP_MAX_REQUEST_BUFFER"<pos:position pos:line="28" pos:column="71"/></literal></expr></argument>,
			    <argument><expr><name pos:line="29" pos:column="29">max_request_buffer<pos:position pos:line="29" pos:column="47"/></name></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="31" pos:column="17">alloc<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <call><name pos:line="31" pos:column="25">alloc_nr<pos:position pos:line="31" pos:column="33"/></name><argument_list pos:line="31" pos:column="33">(<argument><expr><name pos:line="31" pos:column="34">alloc<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">alloc<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">&gt;<pos:position pos:line="32" pos:column="31"/></operator> <name pos:line="32" pos:column="29">max_request_buffer<pos:position pos:line="32" pos:column="47"/></name></expr>)<pos:position pos:line="32" pos:column="48"/></condition><then pos:line="32" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="25">alloc<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">=<pos:position pos:line="33" pos:column="32"/></operator> <name pos:line="33" pos:column="33">max_request_buffer<pos:position pos:line="33" pos:column="51"/></name></expr>;<pos:position pos:line="33" pos:column="52"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">REALLOC_ARRAY<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><name pos:line="34" pos:column="31">buf<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="36">alloc<pos:position pos:line="34" pos:column="41"/></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></while>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
