<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4068_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">disconnect_helper<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">transport<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">transport<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">helper_data<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">data<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name><name pos:line="3" pos:column="36">transport<pos:position pos:line="3" pos:column="45"/></name><operator pos:line="3" pos:column="45">-&gt;<pos:position pos:line="3" pos:column="50"/></operator><name pos:line="3" pos:column="47">data<pos:position pos:line="3" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">res<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">data<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">helper<pos:position pos:line="6" pos:column="25"/></name></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26"> <block pos:line="6" pos:column="27">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">debug<pos:position pos:line="7" pos:column="26"/></name></expr>)<pos:position pos:line="7" pos:column="27"/></condition><then pos:line="7" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="25">fprintf<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">stderr<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="41">"Debug: Disconnecting.\n"<pos:position pos:line="8" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="68"/></expr_stmt></block></then></if>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">!<pos:position pos:line="9" pos:column="22"/></operator><name><name pos:line="9" pos:column="22">data<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">-&gt;<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="28">no_disconnect_req<pos:position pos:line="9" pos:column="45"/></name></name></expr>)<pos:position pos:line="9" pos:column="46"/></condition><then pos:line="9" pos:column="46"> <block pos:line="9" pos:column="47">{
			<comment type="block" pos:line="10" pos:column="25">/*
			 * Ignore write errors; there's nothing we can do,
			 * since we're about to close the pipe anyway. And the
			 * most likely error is EPIPE due to the helper dying
			 * to report an error itself.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">sigchain_push<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">(<argument><expr><name pos:line="16" pos:column="39">SIGPIPE<pos:position pos:line="16" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="48">SIG_IGN<pos:position pos:line="16" pos:column="55"/></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">xwrite<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name><name pos:line="17" pos:column="32">data<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">-&gt;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="38">helper<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">-&gt;<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="46">in<pos:position pos:line="17" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="50">"\n"<pos:position pos:line="17" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="56">1<pos:position pos:line="17" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">sigchain_pop<pos:position pos:line="18" pos:column="37"/></name><argument_list pos:line="18" pos:column="37">(<argument><expr><name pos:line="18" pos:column="38">SIGPIPE<pos:position pos:line="18" pos:column="45"/></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">close<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name><name pos:line="20" pos:column="23">data<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">-&gt;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="29">helper<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">-&gt;<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="37">in<pos:position pos:line="20" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">close<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name><name pos:line="21" pos:column="23">data<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">-&gt;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="29">helper<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">-&gt;<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="37">out<pos:position pos:line="21" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">fclose<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><name><name pos:line="22" pos:column="24">data<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">-&gt;<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="30">out<pos:position pos:line="22" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">res<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <call><name pos:line="23" pos:column="23">finish_command<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><name><name pos:line="23" pos:column="38">data<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">-&gt;<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="44">helper<pos:position pos:line="23" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">FREE_AND_NULL<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name><name pos:line="24" pos:column="31">data<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">-&gt;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="37">helper<pos:position pos:line="24" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>
	<return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">res<pos:position pos:line="26" pos:column="19"/></name></expr>;<pos:position pos:line="26" pos:column="20"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
