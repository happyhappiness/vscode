<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3867_git-2.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_count_objects<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">int<pos:position pos:line="1" pos:column="26"/></name></type> <name pos:line="1" pos:column="27">argc<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier><modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">argv<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">prefix<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">verbose<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><literal type="number" pos:line="3" pos:column="26">0<pos:position pos:line="3" pos:column="27"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="29">human_readable<pos:position pos:line="3" pos:column="43"/></name> <init pos:line="3" pos:column="44">= <expr><literal type="number" pos:line="3" pos:column="46">0<pos:position pos:line="3" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">objdir<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><call><name pos:line="4" pos:column="30">get_object_directory<pos:position pos:line="4" pos:column="50"/></name><argument_list pos:line="4" pos:column="50">()<pos:position pos:line="4" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="53"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><call><name pos:line="5" pos:column="19">strlen<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">objdir<pos:position pos:line="5" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">path<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><call><name pos:line="6" pos:column="22">xmalloc<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">len<pos:position pos:line="6" pos:column="33"/></name> <operator pos:line="6" pos:column="34">+<pos:position pos:line="6" pos:column="35"/></operator> <literal type="number" pos:line="6" pos:column="36">50<pos:position pos:line="6" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">long<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">loose<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><literal type="number" pos:line="7" pos:column="31">0<pos:position pos:line="7" pos:column="32"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="34">packed<pos:position pos:line="7" pos:column="40"/></name> <init pos:line="7" pos:column="41">= <expr><literal type="number" pos:line="7" pos:column="43">0<pos:position pos:line="7" pos:column="44"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="46">packed_loose<pos:position pos:line="7" pos:column="58"/></name> <init pos:line="7" pos:column="59">= <expr><literal type="number" pos:line="7" pos:column="61">0<pos:position pos:line="7" pos:column="62"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="63"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">off_t<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">loose_size<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><literal type="number" pos:line="8" pos:column="28">0<pos:position pos:line="8" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">option<pos:position pos:line="9" pos:column="22"/></name></name></type> <name><name pos:line="9" pos:column="23">opts<pos:position pos:line="9" pos:column="27"/></name><index pos:line="9" pos:column="27">[]<pos:position pos:line="9" pos:column="29"/></index></name> <init pos:line="9" pos:column="30">= <expr><block pos:line="9" pos:column="32">{
		<expr><call><name pos:line="10" pos:column="17">OPT__VERBOSE<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><operator pos:line="10" pos:column="30">&amp;<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="31">verbose<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="40">N_<pos:position pos:line="10" pos:column="42"/></name><argument_list pos:line="10" pos:column="42">(<argument><expr><literal type="string" pos:line="10" pos:column="43">"be verbose"<pos:position pos:line="10" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr>,
		<expr><call><name pos:line="11" pos:column="17">OPT_BOOL<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><literal type="char" pos:line="11" pos:column="26">'H'<pos:position pos:line="11" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="31">"human-readable"<pos:position pos:line="11" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="49">&amp;<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="50">human_readable<pos:position pos:line="11" pos:column="64"/></name></expr></argument>,
			 <argument><expr><call><name pos:line="12" pos:column="26">N_<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><literal type="string" pos:line="12" pos:column="29">"print sizes in human readable format"<pos:position pos:line="12" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr>,
		<expr><call><name pos:line="13" pos:column="17">OPT_END<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">()<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>,
	}<pos:position pos:line="14" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="14" pos:column="11"/></decl_stmt>

	<expr_stmt><expr><name pos:line="16" pos:column="9">argc<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">parse_options<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">argc<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="36">argv<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">prefix<pos:position pos:line="16" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="50">opts<pos:position pos:line="16" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="56">count_objects_usage<pos:position pos:line="16" pos:column="75"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="77">0<pos:position pos:line="16" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="80"/></expr_stmt>
	<comment type="block" pos:line="17" pos:column="9">/* we do not take arguments other than flags for now */</comment>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">argc<pos:position pos:line="18" pos:column="17"/></name></expr>)<pos:position pos:line="18" pos:column="18"/></condition><then pos:line="18" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="17">usage_with_options<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">count_objects_usage<pos:position pos:line="19" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="57">opts<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="63"/></expr_stmt></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">verbose<pos:position pos:line="20" pos:column="20"/></name></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">report_garbage<pos:position pos:line="21" pos:column="31"/></name> <operator pos:line="21" pos:column="32">=<pos:position pos:line="21" pos:column="33"/></operator> <name pos:line="21" pos:column="34">real_report_garbage<pos:position pos:line="21" pos:column="53"/></name></expr>;<pos:position pos:line="21" pos:column="54"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">memcpy<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">path<pos:position pos:line="22" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="22">objdir<pos:position pos:line="22" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="30">len<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">len<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">&amp;&amp;<pos:position pos:line="23" pos:column="27"/></operator> <name><name pos:line="23" pos:column="20">objdir<pos:position pos:line="23" pos:column="26"/></name><index pos:line="23" pos:column="26">[<expr><name pos:line="23" pos:column="27">len<pos:position pos:line="23" pos:column="30"/></name><operator pos:line="23" pos:column="30">-<pos:position pos:line="23" pos:column="31"/></operator><literal type="number" pos:line="23" pos:column="31">1<pos:position pos:line="23" pos:column="32"/></literal></expr>]<pos:position pos:line="23" pos:column="33"/></index></name> <operator pos:line="23" pos:column="34">!=<pos:position pos:line="23" pos:column="36"/></operator> <literal type="char" pos:line="23" pos:column="37">'/'<pos:position pos:line="23" pos:column="40"/></literal></expr>)<pos:position pos:line="23" pos:column="41"/></condition><then pos:line="23" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="24" pos:column="17">path<pos:position pos:line="24" pos:column="21"/></name><index pos:line="24" pos:column="21">[<expr><name pos:line="24" pos:column="22">len<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">++<pos:position pos:line="24" pos:column="27"/></operator></expr>]<pos:position pos:line="24" pos:column="28"/></index></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <literal type="char" pos:line="24" pos:column="31">'/'<pos:position pos:line="24" pos:column="34"/></literal></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt></block></then></if>
	<for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">i<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="18">0<pos:position pos:line="25" pos:column="19"/></literal></expr>;<pos:position pos:line="25" pos:column="20"/></init> <condition><expr><name pos:line="25" pos:column="21">i<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">&lt;<pos:position pos:line="25" pos:column="27"/></operator> <literal type="number" pos:line="25" pos:column="25">256<pos:position pos:line="25" pos:column="28"/></literal></expr>;<pos:position pos:line="25" pos:column="29"/></condition> <incr><expr><name pos:line="25" pos:column="30">i<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">++<pos:position pos:line="25" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="34"/></control> <block pos:line="25" pos:column="35">{
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">DIR<pos:position pos:line="26" pos:column="20"/></name> <modifier pos:line="26" pos:column="21">*<pos:position pos:line="26" pos:column="22"/></modifier></type><name pos:line="26" pos:column="22">d<pos:position pos:line="26" pos:column="23"/></name></decl>;<pos:position pos:line="26" pos:column="24"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">sprintf<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">path<pos:position pos:line="27" pos:column="29"/></name> <operator pos:line="27" pos:column="30">+<pos:position pos:line="27" pos:column="31"/></operator> <name pos:line="27" pos:column="32">len<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="37">"%02x"<pos:position pos:line="27" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="45">i<pos:position pos:line="27" pos:column="46"/></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">d<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <call><name pos:line="28" pos:column="21">opendir<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">path<pos:position pos:line="28" pos:column="33"/></name></expr></argument>)<pos:position pos:line="28" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">!<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">d<pos:position pos:line="29" pos:column="23"/></name></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24">
			<block type="pseudo"><continue pos:line="30" pos:column="25">continue;<pos:position pos:line="30" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">count_objects<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">d<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">path<pos:position pos:line="31" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="40">len<pos:position pos:line="31" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="45">verbose<pos:position pos:line="31" pos:column="52"/></name></expr></argument>,
			      <argument><expr><operator pos:line="32" pos:column="31">&amp;<pos:position pos:line="32" pos:column="36"/></operator><name pos:line="32" pos:column="32">loose<pos:position pos:line="32" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="39">&amp;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="40">loose_size<pos:position pos:line="32" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="52">&amp;<pos:position pos:line="32" pos:column="57"/></operator><name pos:line="32" pos:column="53">packed_loose<pos:position pos:line="32" pos:column="65"/></name></expr></argument>)<pos:position pos:line="32" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">closedir<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">d<pos:position pos:line="33" pos:column="27"/></name></expr></argument>)<pos:position pos:line="33" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></for>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">verbose<pos:position pos:line="35" pos:column="20"/></name></expr>)<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21"> <block pos:line="35" pos:column="22">{
		<decl_stmt><decl><type><name><name pos:line="36" pos:column="17">struct<pos:position pos:line="36" pos:column="23"/></name> <name pos:line="36" pos:column="24">packed_git<pos:position pos:line="36" pos:column="34"/></name></name> <modifier pos:line="36" pos:column="35">*<pos:position pos:line="36" pos:column="36"/></modifier></type><name pos:line="36" pos:column="36">p<pos:position pos:line="36" pos:column="37"/></name></decl>;<pos:position pos:line="36" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">unsigned<pos:position pos:line="37" pos:column="25"/></name> <name pos:line="37" pos:column="26">long<pos:position pos:line="37" pos:column="30"/></name></type> <name pos:line="37" pos:column="31">num_pack<pos:position pos:line="37" pos:column="39"/></name> <init pos:line="37" pos:column="40">= <expr><literal type="number" pos:line="37" pos:column="42">0<pos:position pos:line="37" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="37" pos:column="44"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">off_t<pos:position pos:line="38" pos:column="22"/></name></type> <name pos:line="38" pos:column="23">size_pack<pos:position pos:line="38" pos:column="32"/></name> <init pos:line="38" pos:column="33">= <expr><literal type="number" pos:line="38" pos:column="35">0<pos:position pos:line="38" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="38" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="39" pos:column="17">struct<pos:position pos:line="39" pos:column="23"/></name> <name pos:line="39" pos:column="24">strbuf<pos:position pos:line="39" pos:column="30"/></name></name></type> <name pos:line="39" pos:column="31">loose_buf<pos:position pos:line="39" pos:column="40"/></name> <init pos:line="39" pos:column="41">= <expr><name pos:line="39" pos:column="43">STRBUF_INIT<pos:position pos:line="39" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="39" pos:column="55"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="40" pos:column="17">struct<pos:position pos:line="40" pos:column="23"/></name> <name pos:line="40" pos:column="24">strbuf<pos:position pos:line="40" pos:column="30"/></name></name></type> <name pos:line="40" pos:column="31">pack_buf<pos:position pos:line="40" pos:column="39"/></name> <init pos:line="40" pos:column="40">= <expr><name pos:line="40" pos:column="42">STRBUF_INIT<pos:position pos:line="40" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="54"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="41" pos:column="17">struct<pos:position pos:line="41" pos:column="23"/></name> <name pos:line="41" pos:column="24">strbuf<pos:position pos:line="41" pos:column="30"/></name></name></type> <name pos:line="41" pos:column="31">garbage_buf<pos:position pos:line="41" pos:column="42"/></name> <init pos:line="41" pos:column="43">= <expr><name pos:line="41" pos:column="45">STRBUF_INIT<pos:position pos:line="41" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="57"/></decl_stmt>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="22">packed_git<pos:position pos:line="42" pos:column="32"/></name></expr>)<pos:position pos:line="42" pos:column="33"/></condition><then pos:line="42" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="25">prepare_packed_git<pos:position pos:line="43" pos:column="43"/></name><argument_list pos:line="43" pos:column="43">()<pos:position pos:line="43" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="46"/></expr_stmt></block></then></if>
		<for pos:line="44" pos:column="17">for <control pos:line="44" pos:column="21">(<init><expr><name pos:line="44" pos:column="22">p<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <name pos:line="44" pos:column="26">packed_git<pos:position pos:line="44" pos:column="36"/></name></expr>;<pos:position pos:line="44" pos:column="37"/></init> <condition><expr><name pos:line="44" pos:column="38">p<pos:position pos:line="44" pos:column="39"/></name></expr>;<pos:position pos:line="44" pos:column="40"/></condition> <incr><expr><name pos:line="44" pos:column="41">p<pos:position pos:line="44" pos:column="42"/></name> <operator pos:line="44" pos:column="43">=<pos:position pos:line="44" pos:column="44"/></operator> <name><name pos:line="44" pos:column="45">p<pos:position pos:line="44" pos:column="46"/></name><operator pos:line="44" pos:column="46">-&gt;<pos:position pos:line="44" pos:column="51"/></operator><name pos:line="44" pos:column="48">next<pos:position pos:line="44" pos:column="52"/></name></name></expr></incr>)<pos:position pos:line="44" pos:column="53"/></control> <block pos:line="44" pos:column="54">{
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><operator pos:line="45" pos:column="29">!<pos:position pos:line="45" pos:column="30"/></operator><name><name pos:line="45" pos:column="30">p<pos:position pos:line="45" pos:column="31"/></name><operator pos:line="45" pos:column="31">-&gt;<pos:position pos:line="45" pos:column="36"/></operator><name pos:line="45" pos:column="33">pack_local<pos:position pos:line="45" pos:column="43"/></name></name></expr>)<pos:position pos:line="45" pos:column="44"/></condition><then pos:line="45" pos:column="44">
				<block type="pseudo"><continue pos:line="46" pos:column="33">continue;<pos:position pos:line="46" pos:column="42"/></continue></block></then></if>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><call><name pos:line="47" pos:column="29">open_pack_index<pos:position pos:line="47" pos:column="44"/></name><argument_list pos:line="47" pos:column="44">(<argument><expr><name pos:line="47" pos:column="45">p<pos:position pos:line="47" pos:column="46"/></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="48"/></condition><then pos:line="47" pos:column="48">
				<block type="pseudo"><continue pos:line="48" pos:column="33">continue;<pos:position pos:line="48" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="49" pos:column="25">packed<pos:position pos:line="49" pos:column="31"/></name> <operator pos:line="49" pos:column="32">+=<pos:position pos:line="49" pos:column="34"/></operator> <name><name pos:line="49" pos:column="35">p<pos:position pos:line="49" pos:column="36"/></name><operator pos:line="49" pos:column="36">-&gt;<pos:position pos:line="49" pos:column="41"/></operator><name pos:line="49" pos:column="38">num_objects<pos:position pos:line="49" pos:column="49"/></name></name></expr>;<pos:position pos:line="49" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><name pos:line="50" pos:column="25">size_pack<pos:position pos:line="50" pos:column="34"/></name> <operator pos:line="50" pos:column="35">+=<pos:position pos:line="50" pos:column="37"/></operator> <name><name pos:line="50" pos:column="38">p<pos:position pos:line="50" pos:column="39"/></name><operator pos:line="50" pos:column="39">-&gt;<pos:position pos:line="50" pos:column="44"/></operator><name pos:line="50" pos:column="41">pack_size<pos:position pos:line="50" pos:column="50"/></name></name> <operator pos:line="50" pos:column="51">+<pos:position pos:line="50" pos:column="52"/></operator> <name><name pos:line="50" pos:column="53">p<pos:position pos:line="50" pos:column="54"/></name><operator pos:line="50" pos:column="54">-&gt;<pos:position pos:line="50" pos:column="59"/></operator><name pos:line="50" pos:column="56">index_size<pos:position pos:line="50" pos:column="66"/></name></name></expr>;<pos:position pos:line="50" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><name pos:line="51" pos:column="25">num_pack<pos:position pos:line="51" pos:column="33"/></name><operator pos:line="51" pos:column="33">++<pos:position pos:line="51" pos:column="35"/></operator></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></for>

		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name pos:line="54" pos:column="21">human_readable<pos:position pos:line="54" pos:column="35"/></name></expr>)<pos:position pos:line="54" pos:column="36"/></condition><then pos:line="54" pos:column="36"> <block pos:line="54" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">strbuf_humanise_bytes<pos:position pos:line="55" pos:column="46"/></name><argument_list pos:line="55" pos:column="46">(<argument><expr><operator pos:line="55" pos:column="47">&amp;<pos:position pos:line="55" pos:column="52"/></operator><name pos:line="55" pos:column="48">loose_buf<pos:position pos:line="55" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="59">loose_size<pos:position pos:line="55" pos:column="69"/></name></expr></argument>)<pos:position pos:line="55" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="71"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">strbuf_humanise_bytes<pos:position pos:line="56" pos:column="46"/></name><argument_list pos:line="56" pos:column="46">(<argument><expr><operator pos:line="56" pos:column="47">&amp;<pos:position pos:line="56" pos:column="52"/></operator><name pos:line="56" pos:column="48">pack_buf<pos:position pos:line="56" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="58">size_pack<pos:position pos:line="56" pos:column="67"/></name></expr></argument>)<pos:position pos:line="56" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="57" pos:column="25">strbuf_humanise_bytes<pos:position pos:line="57" pos:column="46"/></name><argument_list pos:line="57" pos:column="46">(<argument><expr><operator pos:line="57" pos:column="47">&amp;<pos:position pos:line="57" pos:column="52"/></operator><name pos:line="57" pos:column="48">garbage_buf<pos:position pos:line="57" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="61">size_garbage<pos:position pos:line="57" pos:column="73"/></name></expr></argument>)<pos:position pos:line="57" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="75"/></expr_stmt>
		}<pos:position pos:line="58" pos:column="18"/></block></then> <else pos:line="58" pos:column="19">else <block pos:line="58" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">strbuf_addf<pos:position pos:line="59" pos:column="36"/></name><argument_list pos:line="59" pos:column="36">(<argument><expr><operator pos:line="59" pos:column="37">&amp;<pos:position pos:line="59" pos:column="42"/></operator><name pos:line="59" pos:column="38">loose_buf<pos:position pos:line="59" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="49">"%lu"<pos:position pos:line="59" pos:column="54"/></literal></expr></argument>,
				    <argument><expr><call pos:line="60" pos:column="37">(<name pos:line="60" pos:column="38">unsigned<pos:position pos:line="60" pos:column="46"/></name> <name pos:line="60" pos:column="47">long<pos:position pos:line="60" pos:column="51"/></name>)<argument_list pos:line="60" pos:column="52">(<argument><expr><name pos:line="60" pos:column="53">loose_size<pos:position pos:line="60" pos:column="63"/></name> <operator pos:line="60" pos:column="64">/<pos:position pos:line="60" pos:column="65"/></operator> <literal type="number" pos:line="60" pos:column="66">1024<pos:position pos:line="60" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="73"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="61" pos:column="25">strbuf_addf<pos:position pos:line="61" pos:column="36"/></name><argument_list pos:line="61" pos:column="36">(<argument><expr><operator pos:line="61" pos:column="37">&amp;<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="38">pack_buf<pos:position pos:line="61" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="48">"%lu"<pos:position pos:line="61" pos:column="53"/></literal></expr></argument>,
				    <argument><expr><call pos:line="62" pos:column="37">(<name pos:line="62" pos:column="38">unsigned<pos:position pos:line="62" pos:column="46"/></name> <name pos:line="62" pos:column="47">long<pos:position pos:line="62" pos:column="51"/></name>)<argument_list pos:line="62" pos:column="52">(<argument><expr><name pos:line="62" pos:column="53">size_pack<pos:position pos:line="62" pos:column="62"/></name> <operator pos:line="62" pos:column="63">/<pos:position pos:line="62" pos:column="64"/></operator> <literal type="number" pos:line="62" pos:column="65">1024<pos:position pos:line="62" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">strbuf_addf<pos:position pos:line="63" pos:column="36"/></name><argument_list pos:line="63" pos:column="36">(<argument><expr><operator pos:line="63" pos:column="37">&amp;<pos:position pos:line="63" pos:column="42"/></operator><name pos:line="63" pos:column="38">garbage_buf<pos:position pos:line="63" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="51">"%lu"<pos:position pos:line="63" pos:column="56"/></literal></expr></argument>,
				    <argument><expr><call pos:line="64" pos:column="37">(<name pos:line="64" pos:column="38">unsigned<pos:position pos:line="64" pos:column="46"/></name> <name pos:line="64" pos:column="47">long<pos:position pos:line="64" pos:column="51"/></name>)<argument_list pos:line="64" pos:column="52">(<argument><expr><name pos:line="64" pos:column="53">size_garbage<pos:position pos:line="64" pos:column="65"/></name> <operator pos:line="64" pos:column="66">/<pos:position pos:line="64" pos:column="67"/></operator> <literal type="number" pos:line="64" pos:column="68">1024<pos:position pos:line="64" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="75"/></expr_stmt>
		}<pos:position pos:line="65" pos:column="18"/></block></else></if>

		<expr_stmt><expr><call><name pos:line="67" pos:column="17">printf<pos:position pos:line="67" pos:column="23"/></name><argument_list pos:line="67" pos:column="23">(<argument><expr><literal type="string" pos:line="67" pos:column="24">"count: %lu\n"<pos:position pos:line="67" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="40">loose<pos:position pos:line="67" pos:column="45"/></name></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">printf<pos:position pos:line="68" pos:column="23"/></name><argument_list pos:line="68" pos:column="23">(<argument><expr><literal type="string" pos:line="68" pos:column="24">"size: %s\n"<pos:position pos:line="68" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="38">loose_buf<pos:position pos:line="68" pos:column="47"/></name><operator pos:line="68" pos:column="47">.<pos:position pos:line="68" pos:column="48"/></operator><name pos:line="68" pos:column="48">buf<pos:position pos:line="68" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">printf<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><literal type="string" pos:line="69" pos:column="24">"in-pack: %lu\n"<pos:position pos:line="69" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="42">packed<pos:position pos:line="69" pos:column="48"/></name></expr></argument>)<pos:position pos:line="69" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">printf<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><literal type="string" pos:line="70" pos:column="24">"packs: %lu\n"<pos:position pos:line="70" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="40">num_pack<pos:position pos:line="70" pos:column="48"/></name></expr></argument>)<pos:position pos:line="70" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">printf<pos:position pos:line="71" pos:column="23"/></name><argument_list pos:line="71" pos:column="23">(<argument><expr><literal type="string" pos:line="71" pos:column="24">"size-pack: %s\n"<pos:position pos:line="71" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="43">pack_buf<pos:position pos:line="71" pos:column="51"/></name><operator pos:line="71" pos:column="51">.<pos:position pos:line="71" pos:column="52"/></operator><name pos:line="71" pos:column="52">buf<pos:position pos:line="71" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">printf<pos:position pos:line="72" pos:column="23"/></name><argument_list pos:line="72" pos:column="23">(<argument><expr><literal type="string" pos:line="72" pos:column="24">"prune-packable: %lu\n"<pos:position pos:line="72" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="49">packed_loose<pos:position pos:line="72" pos:column="61"/></name></expr></argument>)<pos:position pos:line="72" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">printf<pos:position pos:line="73" pos:column="23"/></name><argument_list pos:line="73" pos:column="23">(<argument><expr><literal type="string" pos:line="73" pos:column="24">"garbage: %lu\n"<pos:position pos:line="73" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="42">garbage<pos:position pos:line="73" pos:column="49"/></name></expr></argument>)<pos:position pos:line="73" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">printf<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><literal type="string" pos:line="74" pos:column="24">"size-garbage: %s\n"<pos:position pos:line="74" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="46">garbage_buf<pos:position pos:line="74" pos:column="57"/></name><operator pos:line="74" pos:column="57">.<pos:position pos:line="74" pos:column="58"/></operator><name pos:line="74" pos:column="58">buf<pos:position pos:line="74" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="75" pos:column="17">strbuf_release<pos:position pos:line="75" pos:column="31"/></name><argument_list pos:line="75" pos:column="31">(<argument><expr><operator pos:line="75" pos:column="32">&amp;<pos:position pos:line="75" pos:column="37"/></operator><name pos:line="75" pos:column="33">loose_buf<pos:position pos:line="75" pos:column="42"/></name></expr></argument>)<pos:position pos:line="75" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">strbuf_release<pos:position pos:line="76" pos:column="31"/></name><argument_list pos:line="76" pos:column="31">(<argument><expr><operator pos:line="76" pos:column="32">&amp;<pos:position pos:line="76" pos:column="37"/></operator><name pos:line="76" pos:column="33">pack_buf<pos:position pos:line="76" pos:column="41"/></name></expr></argument>)<pos:position pos:line="76" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">strbuf_release<pos:position pos:line="77" pos:column="31"/></name><argument_list pos:line="77" pos:column="31">(<argument><expr><operator pos:line="77" pos:column="32">&amp;<pos:position pos:line="77" pos:column="37"/></operator><name pos:line="77" pos:column="33">garbage_buf<pos:position pos:line="77" pos:column="44"/></name></expr></argument>)<pos:position pos:line="77" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="78" pos:column="10"/></block></then> <else pos:line="78" pos:column="11">else <block pos:line="78" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="79" pos:column="17">struct<pos:position pos:line="79" pos:column="23"/></name> <name pos:line="79" pos:column="24">strbuf<pos:position pos:line="79" pos:column="30"/></name></name></type> <name pos:line="79" pos:column="31">buf<pos:position pos:line="79" pos:column="34"/></name> <init pos:line="79" pos:column="35">= <expr><name pos:line="79" pos:column="37">STRBUF_INIT<pos:position pos:line="79" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="79" pos:column="49"/></decl_stmt>
		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><name pos:line="80" pos:column="21">human_readable<pos:position pos:line="80" pos:column="35"/></name></expr>)<pos:position pos:line="80" pos:column="36"/></condition><then pos:line="80" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="25">strbuf_humanise_bytes<pos:position pos:line="81" pos:column="46"/></name><argument_list pos:line="81" pos:column="46">(<argument><expr><operator pos:line="81" pos:column="47">&amp;<pos:position pos:line="81" pos:column="52"/></operator><name pos:line="81" pos:column="48">buf<pos:position pos:line="81" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="53">loose_size<pos:position pos:line="81" pos:column="63"/></name></expr></argument>)<pos:position pos:line="81" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="65"/></expr_stmt></block></then>
		<else pos:line="82" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="25">strbuf_addf<pos:position pos:line="83" pos:column="36"/></name><argument_list pos:line="83" pos:column="36">(<argument><expr><operator pos:line="83" pos:column="37">&amp;<pos:position pos:line="83" pos:column="42"/></operator><name pos:line="83" pos:column="38">buf<pos:position pos:line="83" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="43">"%lu kilobytes"<pos:position pos:line="83" pos:column="58"/></literal></expr></argument>,
				    <argument><expr><call pos:line="84" pos:column="37">(<name pos:line="84" pos:column="38">unsigned<pos:position pos:line="84" pos:column="46"/></name> <name pos:line="84" pos:column="47">long<pos:position pos:line="84" pos:column="51"/></name>)<argument_list pos:line="84" pos:column="52">(<argument><expr><name pos:line="84" pos:column="53">loose_size<pos:position pos:line="84" pos:column="63"/></name> <operator pos:line="84" pos:column="64">/<pos:position pos:line="84" pos:column="65"/></operator> <literal type="number" pos:line="84" pos:column="66">1024<pos:position pos:line="84" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="84" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="73"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">printf<pos:position pos:line="85" pos:column="23"/></name><argument_list pos:line="85" pos:column="23">(<argument><expr><literal type="string" pos:line="85" pos:column="24">"%lu objects, %s\n"<pos:position pos:line="85" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="45">loose<pos:position pos:line="85" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="52">buf<pos:position pos:line="85" pos:column="55"/></name><operator pos:line="85" pos:column="55">.<pos:position pos:line="85" pos:column="56"/></operator><name pos:line="85" pos:column="56">buf<pos:position pos:line="85" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="86" pos:column="17">strbuf_release<pos:position pos:line="86" pos:column="31"/></name><argument_list pos:line="86" pos:column="31">(<argument><expr><operator pos:line="86" pos:column="32">&amp;<pos:position pos:line="86" pos:column="37"/></operator><name pos:line="86" pos:column="33">buf<pos:position pos:line="86" pos:column="36"/></name></expr></argument>)<pos:position pos:line="86" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="87" pos:column="10"/></block></else></if>
	<return pos:line="88" pos:column="9">return <expr><literal type="number" pos:line="88" pos:column="16">0<pos:position pos:line="88" pos:column="17"/></literal></expr>;<pos:position pos:line="88" pos:column="18"/></return>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
