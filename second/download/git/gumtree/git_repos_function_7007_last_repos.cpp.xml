<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7007_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">create_initial_state<pos:position pos:line="2" pos:column="21"/></name> <parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">re_dfa_t<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">dfa<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">first<pos:position pos:line="4" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="14">i<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">reg_errcode_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">err<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">re_node_set<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">init_nodes<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Initial states have the epsilon closure of the node which is
     the first node of the regular expression.  */</comment>
  <expr_stmt><expr><name pos:line="10" pos:column="3">first<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <name><name pos:line="10" pos:column="11">dfa<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">-&gt;<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="16">str_tree<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">-&gt;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="26">first<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">node_idx<pos:position pos:line="10" pos:column="41"/></name></name></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">dfa<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">-&gt;<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="8">init_node<pos:position pos:line="11" pos:column="17"/></name></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">first<pos:position pos:line="11" pos:column="25"/></name></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="12" pos:column="3">err<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">re_node_set_init_copy<pos:position pos:line="12" pos:column="30"/></name> <argument_list pos:line="12" pos:column="31">(<argument><expr><operator pos:line="12" pos:column="32">&amp;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="33">init_nodes<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="45">dfa<pos:position pos:line="12" pos:column="48"/></name><operator pos:line="12" pos:column="48">-&gt;<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="50">eclosures<pos:position pos:line="12" pos:column="59"/></name></name> <operator pos:line="12" pos:column="60">+<pos:position pos:line="12" pos:column="61"/></operator> <name pos:line="12" pos:column="62">first<pos:position pos:line="12" pos:column="67"/></name></expr></argument>)<pos:position pos:line="12" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="69"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><call><name pos:line="13" pos:column="7">BE<pos:position pos:line="13" pos:column="9"/></name> <argument_list pos:line="13" pos:column="10">(<argument><expr><name pos:line="13" pos:column="11">err<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">!=<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">REG_NOERROR<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="31">0<pos:position pos:line="13" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="34"/></condition><then pos:line="13" pos:column="34">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">err<pos:position pos:line="14" pos:column="15"/></name></expr>;<pos:position pos:line="14" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="16" pos:column="3">/* The back-references which are in initial states can epsilon transit,
     since in this case all of the subexpressions can be null.
     Then we add epsilon closures of the nodes which are the next nodes of
     the back-references.  */</comment>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name><name pos:line="20" pos:column="7">dfa<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">nbackref<pos:position pos:line="20" pos:column="20"/></name></name> <operator pos:line="20" pos:column="21">&gt;<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="23">0<pos:position pos:line="20" pos:column="24"/></literal></expr>)<pos:position pos:line="20" pos:column="25"/></condition><then pos:line="20" pos:column="25">
    <block type="pseudo"><for pos:line="21" pos:column="5">for <control pos:line="21" pos:column="9">(<init><expr><name pos:line="21" pos:column="10">i<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>;<pos:position pos:line="21" pos:column="16"/></init> <condition><expr><name pos:line="21" pos:column="17">i<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">&lt;<pos:position pos:line="21" pos:column="23"/></operator> <name><name pos:line="21" pos:column="21">init_nodes<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">.<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="32">nelem<pos:position pos:line="21" pos:column="37"/></name></name></expr>;<pos:position pos:line="21" pos:column="38"/></condition> <incr><expr><operator pos:line="21" pos:column="39">++<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="41">i<pos:position pos:line="21" pos:column="42"/></name></expr></incr>)<pos:position pos:line="21" pos:column="43"/></control>
      <block pos:line="22" pos:column="7">{
	<decl_stmt><decl><type><name pos:line="23" pos:column="9">int<pos:position pos:line="23" pos:column="12"/></name></type> <name pos:line="23" pos:column="13">node_idx<pos:position pos:line="23" pos:column="21"/></name> <init pos:line="23" pos:column="22">= <expr><name><name pos:line="23" pos:column="24">init_nodes<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">.<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="35">elems<pos:position pos:line="23" pos:column="40"/></name><index pos:line="23" pos:column="40">[<expr><name pos:line="23" pos:column="41">i<pos:position pos:line="23" pos:column="42"/></name></expr>]<pos:position pos:line="23" pos:column="43"/></index></name></expr></init></decl>;<pos:position pos:line="23" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="24" pos:column="9">re_token_type_t<pos:position pos:line="24" pos:column="24"/></name></type> <name pos:line="24" pos:column="25">type<pos:position pos:line="24" pos:column="29"/></name> <init pos:line="24" pos:column="30">= <expr><name><name pos:line="24" pos:column="32">dfa<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">-&gt;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="37">nodes<pos:position pos:line="24" pos:column="42"/></name><index pos:line="24" pos:column="42">[<expr><name pos:line="24" pos:column="43">node_idx<pos:position pos:line="24" pos:column="51"/></name></expr>]<pos:position pos:line="24" pos:column="52"/></index></name><operator pos:line="24" pos:column="52">.<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="53">type<pos:position pos:line="24" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="58"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="26" pos:column="9">int<pos:position pos:line="26" pos:column="12"/></name></type> <name pos:line="26" pos:column="13">clexp_idx<pos:position pos:line="26" pos:column="22"/></name></decl>;<pos:position pos:line="26" pos:column="23"/></decl_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">type<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">!=<pos:position pos:line="27" pos:column="20"/></operator> <name pos:line="27" pos:column="21">OP_BACK_REF<pos:position pos:line="27" pos:column="32"/></name></expr>)<pos:position pos:line="27" pos:column="33"/></condition><then pos:line="27" pos:column="33">
	  <block type="pseudo"><continue pos:line="28" pos:column="11">continue;<pos:position pos:line="28" pos:column="20"/></continue></block></then></if>
	<for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init><expr><name pos:line="29" pos:column="14">clexp_idx<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">=<pos:position pos:line="29" pos:column="25"/></operator> <literal type="number" pos:line="29" pos:column="26">0<pos:position pos:line="29" pos:column="27"/></literal></expr>;<pos:position pos:line="29" pos:column="28"/></init> <condition><expr><name pos:line="29" pos:column="29">clexp_idx<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">&lt;<pos:position pos:line="29" pos:column="43"/></operator> <name><name pos:line="29" pos:column="41">init_nodes<pos:position pos:line="29" pos:column="51"/></name><operator pos:line="29" pos:column="51">.<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="52">nelem<pos:position pos:line="29" pos:column="57"/></name></name></expr>;<pos:position pos:line="29" pos:column="58"/></condition> <incr><expr><operator pos:line="29" pos:column="59">++<pos:position pos:line="29" pos:column="61"/></operator><name pos:line="29" pos:column="61">clexp_idx<pos:position pos:line="29" pos:column="70"/></name></expr></incr>)<pos:position pos:line="29" pos:column="71"/></control>
	  <block pos:line="30" pos:column="11">{
	    <decl_stmt><decl><type><name pos:line="31" pos:column="13">re_token_t<pos:position pos:line="31" pos:column="23"/></name> <modifier pos:line="31" pos:column="24">*<pos:position pos:line="31" pos:column="25"/></modifier></type><name pos:line="31" pos:column="25">clexp_node<pos:position pos:line="31" pos:column="35"/></name></decl>;<pos:position pos:line="31" pos:column="36"/></decl_stmt>
	    <expr_stmt><expr><name pos:line="32" pos:column="13">clexp_node<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <name><name pos:line="32" pos:column="26">dfa<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">-&gt;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="31">nodes<pos:position pos:line="32" pos:column="36"/></name></name> <operator pos:line="32" pos:column="37">+<pos:position pos:line="32" pos:column="38"/></operator> <name><name pos:line="32" pos:column="39">init_nodes<pos:position pos:line="32" pos:column="49"/></name><operator pos:line="32" pos:column="49">.<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="50">elems<pos:position pos:line="32" pos:column="55"/></name><index pos:line="32" pos:column="55">[<expr><name pos:line="32" pos:column="56">clexp_idx<pos:position pos:line="32" pos:column="65"/></name></expr>]<pos:position pos:line="32" pos:column="66"/></index></name></expr>;<pos:position pos:line="32" pos:column="67"/></expr_stmt>
	    <if pos:line="33" pos:column="13">if <condition pos:line="33" pos:column="16">(<expr><name><name pos:line="33" pos:column="17">clexp_node<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">-&gt;<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="29">type<pos:position pos:line="33" pos:column="33"/></name></name> <operator pos:line="33" pos:column="34">==<pos:position pos:line="33" pos:column="36"/></operator> <name pos:line="33" pos:column="37">OP_CLOSE_SUBEXP<pos:position pos:line="33" pos:column="52"/></name>
		<operator pos:line="34" pos:column="17">&amp;&amp;<pos:position pos:line="34" pos:column="27"/></operator> <name><name pos:line="34" pos:column="20">clexp_node<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">-&gt;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="32">opr<pos:position pos:line="34" pos:column="35"/></name><operator pos:line="34" pos:column="35">.<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="36">idx<pos:position pos:line="34" pos:column="39"/></name></name> <operator pos:line="34" pos:column="40">==<pos:position pos:line="34" pos:column="42"/></operator> <name><name pos:line="34" pos:column="43">dfa<pos:position pos:line="34" pos:column="46"/></name><operator pos:line="34" pos:column="46">-&gt;<pos:position pos:line="34" pos:column="51"/></operator><name pos:line="34" pos:column="48">nodes<pos:position pos:line="34" pos:column="53"/></name><index pos:line="34" pos:column="53">[<expr><name pos:line="34" pos:column="54">node_idx<pos:position pos:line="34" pos:column="62"/></name></expr>]<pos:position pos:line="34" pos:column="63"/></index></name><operator pos:line="34" pos:column="63">.<pos:position pos:line="34" pos:column="64"/></operator><name><name pos:line="34" pos:column="64">opr<pos:position pos:line="34" pos:column="67"/></name><operator pos:line="34" pos:column="67">.<pos:position pos:line="34" pos:column="68"/></operator><name pos:line="34" pos:column="68">idx<pos:position pos:line="34" pos:column="71"/></name></name></expr>)<pos:position pos:line="34" pos:column="72"/></condition><then pos:line="34" pos:column="72">
	      <block type="pseudo"><break pos:line="35" pos:column="15">break;<pos:position pos:line="35" pos:column="21"/></break></block></then></if>
	  }<pos:position pos:line="36" pos:column="12"/></block></for>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">clexp_idx<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">==<pos:position pos:line="37" pos:column="25"/></operator> <name><name pos:line="37" pos:column="26">init_nodes<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">.<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="37">nelem<pos:position pos:line="37" pos:column="42"/></name></name></expr>)<pos:position pos:line="37" pos:column="43"/></condition><then pos:line="37" pos:column="43">
	  <block type="pseudo"><continue pos:line="38" pos:column="11">continue;<pos:position pos:line="38" pos:column="20"/></continue></block></then></if>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">type<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">==<pos:position pos:line="40" pos:column="20"/></operator> <name pos:line="40" pos:column="21">OP_BACK_REF<pos:position pos:line="40" pos:column="32"/></name></expr>)<pos:position pos:line="40" pos:column="33"/></condition><then pos:line="40" pos:column="33">
	  <block pos:line="41" pos:column="11">{
	    <decl_stmt><decl><type><name pos:line="42" pos:column="13">int<pos:position pos:line="42" pos:column="16"/></name></type> <name pos:line="42" pos:column="17">dest_idx<pos:position pos:line="42" pos:column="25"/></name> <init pos:line="42" pos:column="26">= <expr><name><name pos:line="42" pos:column="28">dfa<pos:position pos:line="42" pos:column="31"/></name><operator pos:line="42" pos:column="31">-&gt;<pos:position pos:line="42" pos:column="36"/></operator><name pos:line="42" pos:column="33">edests<pos:position pos:line="42" pos:column="39"/></name><index pos:line="42" pos:column="39">[<expr><name pos:line="42" pos:column="40">node_idx<pos:position pos:line="42" pos:column="48"/></name></expr>]<pos:position pos:line="42" pos:column="49"/></index></name><operator pos:line="42" pos:column="49">.<pos:position pos:line="42" pos:column="50"/></operator><name><name pos:line="42" pos:column="50">elems<pos:position pos:line="42" pos:column="55"/></name><index pos:line="42" pos:column="55">[<expr><literal type="number" pos:line="42" pos:column="56">0<pos:position pos:line="42" pos:column="57"/></literal></expr>]<pos:position pos:line="42" pos:column="58"/></index></name></expr></init></decl>;<pos:position pos:line="42" pos:column="59"/></decl_stmt>
	    <if pos:line="43" pos:column="13">if <condition pos:line="43" pos:column="16">(<expr><operator pos:line="43" pos:column="17">!<pos:position pos:line="43" pos:column="18"/></operator><call><name pos:line="43" pos:column="18">re_node_set_contains<pos:position pos:line="43" pos:column="38"/></name> <argument_list pos:line="43" pos:column="39">(<argument><expr><operator pos:line="43" pos:column="40">&amp;<pos:position pos:line="43" pos:column="45"/></operator><name pos:line="43" pos:column="41">init_nodes<pos:position pos:line="43" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="53">dest_idx<pos:position pos:line="43" pos:column="61"/></name></expr></argument>)<pos:position pos:line="43" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="63"/></condition><then pos:line="43" pos:column="63">
	      <block pos:line="44" pos:column="15">{
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">reg_errcode_t<pos:position pos:line="45" pos:column="30"/></name></type> <name pos:line="45" pos:column="31">err<pos:position pos:line="45" pos:column="34"/></name> <init pos:line="45" pos:column="35">= <expr><call><name pos:line="45" pos:column="37">re_node_set_merge<pos:position pos:line="45" pos:column="54"/></name> <argument_list pos:line="45" pos:column="55">(<argument><expr><operator pos:line="45" pos:column="56">&amp;<pos:position pos:line="45" pos:column="61"/></operator><name pos:line="45" pos:column="57">init_nodes<pos:position pos:line="45" pos:column="67"/></name></expr></argument>,
						       <argument><expr><name><name pos:line="46" pos:column="56">dfa<pos:position pos:line="46" pos:column="59"/></name><operator pos:line="46" pos:column="59">-&gt;<pos:position pos:line="46" pos:column="64"/></operator><name pos:line="46" pos:column="61">eclosures<pos:position pos:line="46" pos:column="70"/></name></name>
						       <operator pos:line="47" pos:column="56">+<pos:position pos:line="47" pos:column="57"/></operator> <name pos:line="47" pos:column="58">dest_idx<pos:position pos:line="47" pos:column="66"/></name></expr></argument>)<pos:position pos:line="47" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="47" pos:column="68"/></decl_stmt>
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name pos:line="48" pos:column="21">err<pos:position pos:line="48" pos:column="24"/></name> <operator pos:line="48" pos:column="25">!=<pos:position pos:line="48" pos:column="27"/></operator> <name pos:line="48" pos:column="28">REG_NOERROR<pos:position pos:line="48" pos:column="39"/></name></expr>)<pos:position pos:line="48" pos:column="40"/></condition><then pos:line="48" pos:column="40">
		  <block type="pseudo"><return pos:line="49" pos:column="19">return <expr><name pos:line="49" pos:column="26">err<pos:position pos:line="49" pos:column="29"/></name></expr>;<pos:position pos:line="49" pos:column="30"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="50" pos:column="17">i<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <literal type="number" pos:line="50" pos:column="21">0<pos:position pos:line="50" pos:column="22"/></literal></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>
	      }<pos:position pos:line="51" pos:column="16"/></block></then></if>
	  }<pos:position pos:line="52" pos:column="12"/></block></then></if>
      }<pos:position pos:line="53" pos:column="8"/></block></for></block></then></if>

  <comment type="block" pos:line="55" pos:column="3">/* It must be the first time to invoke acquire_state.  */</comment>
  <expr_stmt><expr><name><name pos:line="56" pos:column="3">dfa<pos:position pos:line="56" pos:column="6"/></name><operator pos:line="56" pos:column="6">-&gt;<pos:position pos:line="56" pos:column="11"/></operator><name pos:line="56" pos:column="8">init_state<pos:position pos:line="56" pos:column="18"/></name></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <call><name pos:line="56" pos:column="21">re_acquire_state_context<pos:position pos:line="56" pos:column="45"/></name> <argument_list pos:line="56" pos:column="46">(<argument><expr><operator pos:line="56" pos:column="47">&amp;<pos:position pos:line="56" pos:column="52"/></operator><name pos:line="56" pos:column="48">err<pos:position pos:line="56" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="53">dfa<pos:position pos:line="56" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="58">&amp;<pos:position pos:line="56" pos:column="63"/></operator><name pos:line="56" pos:column="59">init_nodes<pos:position pos:line="56" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="71">0<pos:position pos:line="56" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="74"/></expr_stmt>
  <comment type="block" pos:line="57" pos:column="3">/* We don't check ERR here, since the initial state must not be NULL.  */</comment>
  <if pos:line="58" pos:column="3">if <condition pos:line="58" pos:column="6">(<expr><call><name pos:line="58" pos:column="7">BE<pos:position pos:line="58" pos:column="9"/></name> <argument_list pos:line="58" pos:column="10">(<argument><expr><name><name pos:line="58" pos:column="11">dfa<pos:position pos:line="58" pos:column="14"/></name><operator pos:line="58" pos:column="14">-&gt;<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="16">init_state<pos:position pos:line="58" pos:column="26"/></name></name> <operator pos:line="58" pos:column="27">==<pos:position pos:line="58" pos:column="29"/></operator> <name pos:line="58" pos:column="30">NULL<pos:position pos:line="58" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="36">0<pos:position pos:line="58" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="39"/></condition><then pos:line="58" pos:column="39">
    <block type="pseudo"><return pos:line="59" pos:column="5">return <expr><name pos:line="59" pos:column="12">err<pos:position pos:line="59" pos:column="15"/></name></expr>;<pos:position pos:line="59" pos:column="16"/></return></block></then></if>
  <if pos:line="60" pos:column="3">if <condition pos:line="60" pos:column="6">(<expr><name><name pos:line="60" pos:column="7">dfa<pos:position pos:line="60" pos:column="10"/></name><operator pos:line="60" pos:column="10">-&gt;<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="12">init_state<pos:position pos:line="60" pos:column="22"/></name><operator pos:line="60" pos:column="22">-&gt;<pos:position pos:line="60" pos:column="27"/></operator><name pos:line="60" pos:column="24">has_constraint<pos:position pos:line="60" pos:column="38"/></name></name></expr>)<pos:position pos:line="60" pos:column="39"/></condition><then pos:line="60" pos:column="39">
    <block pos:line="61" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="62" pos:column="7">dfa<pos:position pos:line="62" pos:column="10"/></name><operator pos:line="62" pos:column="10">-&gt;<pos:position pos:line="62" pos:column="15"/></operator><name pos:line="62" pos:column="12">init_state_word<pos:position pos:line="62" pos:column="27"/></name></name> <operator pos:line="62" pos:column="28">=<pos:position pos:line="62" pos:column="29"/></operator> <call><name pos:line="62" pos:column="30">re_acquire_state_context<pos:position pos:line="62" pos:column="54"/></name> <argument_list pos:line="62" pos:column="55">(<argument><expr><operator pos:line="62" pos:column="56">&amp;<pos:position pos:line="62" pos:column="61"/></operator><name pos:line="62" pos:column="57">err<pos:position pos:line="62" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="62">dfa<pos:position pos:line="62" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="67">&amp;<pos:position pos:line="62" pos:column="72"/></operator><name pos:line="62" pos:column="68">init_nodes<pos:position pos:line="62" pos:column="78"/></name></expr></argument>,
						       <argument><expr><name pos:line="63" pos:column="56">CONTEXT_WORD<pos:position pos:line="63" pos:column="68"/></name></expr></argument>)<pos:position pos:line="63" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="64" pos:column="7">dfa<pos:position pos:line="64" pos:column="10"/></name><operator pos:line="64" pos:column="10">-&gt;<pos:position pos:line="64" pos:column="15"/></operator><name pos:line="64" pos:column="12">init_state_nl<pos:position pos:line="64" pos:column="25"/></name></name> <operator pos:line="64" pos:column="26">=<pos:position pos:line="64" pos:column="27"/></operator> <call><name pos:line="64" pos:column="28">re_acquire_state_context<pos:position pos:line="64" pos:column="52"/></name> <argument_list pos:line="64" pos:column="53">(<argument><expr><operator pos:line="64" pos:column="54">&amp;<pos:position pos:line="64" pos:column="59"/></operator><name pos:line="64" pos:column="55">err<pos:position pos:line="64" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="60">dfa<pos:position pos:line="64" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="65">&amp;<pos:position pos:line="64" pos:column="70"/></operator><name pos:line="64" pos:column="66">init_nodes<pos:position pos:line="64" pos:column="76"/></name></expr></argument>,
						     <argument><expr><name pos:line="65" pos:column="54">CONTEXT_NEWLINE<pos:position pos:line="65" pos:column="69"/></name></expr></argument>)<pos:position pos:line="65" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="71"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="66" pos:column="7">dfa<pos:position pos:line="66" pos:column="10"/></name><operator pos:line="66" pos:column="10">-&gt;<pos:position pos:line="66" pos:column="15"/></operator><name pos:line="66" pos:column="12">init_state_begbuf<pos:position pos:line="66" pos:column="29"/></name></name> <operator pos:line="66" pos:column="30">=<pos:position pos:line="66" pos:column="31"/></operator> <call><name pos:line="66" pos:column="32">re_acquire_state_context<pos:position pos:line="66" pos:column="56"/></name> <argument_list pos:line="66" pos:column="57">(<argument><expr><operator pos:line="66" pos:column="58">&amp;<pos:position pos:line="66" pos:column="63"/></operator><name pos:line="66" pos:column="59">err<pos:position pos:line="66" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="64">dfa<pos:position pos:line="66" pos:column="67"/></name></expr></argument>,
							 <argument><expr><operator pos:line="67" pos:column="58">&amp;<pos:position pos:line="67" pos:column="63"/></operator><name pos:line="67" pos:column="59">init_nodes<pos:position pos:line="67" pos:column="69"/></name></expr></argument>,
							 <argument><expr><name pos:line="68" pos:column="58">CONTEXT_NEWLINE<pos:position pos:line="68" pos:column="73"/></name>
							 <operator pos:line="69" pos:column="58">|<pos:position pos:line="69" pos:column="59"/></operator> <name pos:line="69" pos:column="60">CONTEXT_BEGBUF<pos:position pos:line="69" pos:column="74"/></name></expr></argument>)<pos:position pos:line="69" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="76"/></expr_stmt>
      <if pos:line="70" pos:column="7">if <condition pos:line="70" pos:column="10">(<expr><call><name pos:line="70" pos:column="11">BE<pos:position pos:line="70" pos:column="13"/></name> <argument_list pos:line="70" pos:column="14">(<argument><expr><name><name pos:line="70" pos:column="15">dfa<pos:position pos:line="70" pos:column="18"/></name><operator pos:line="70" pos:column="18">-&gt;<pos:position pos:line="70" pos:column="23"/></operator><name pos:line="70" pos:column="20">init_state_word<pos:position pos:line="70" pos:column="35"/></name></name> <operator pos:line="70" pos:column="36">==<pos:position pos:line="70" pos:column="38"/></operator> <name pos:line="70" pos:column="39">NULL<pos:position pos:line="70" pos:column="43"/></name> <operator pos:line="70" pos:column="44">||<pos:position pos:line="70" pos:column="46"/></operator> <name><name pos:line="70" pos:column="47">dfa<pos:position pos:line="70" pos:column="50"/></name><operator pos:line="70" pos:column="50">-&gt;<pos:position pos:line="70" pos:column="55"/></operator><name pos:line="70" pos:column="52">init_state_nl<pos:position pos:line="70" pos:column="65"/></name></name> <operator pos:line="70" pos:column="66">==<pos:position pos:line="70" pos:column="68"/></operator> <name pos:line="70" pos:column="69">NULL<pos:position pos:line="70" pos:column="73"/></name>
	      <operator pos:line="71" pos:column="15">||<pos:position pos:line="71" pos:column="17"/></operator> <name><name pos:line="71" pos:column="18">dfa<pos:position pos:line="71" pos:column="21"/></name><operator pos:line="71" pos:column="21">-&gt;<pos:position pos:line="71" pos:column="26"/></operator><name pos:line="71" pos:column="23">init_state_begbuf<pos:position pos:line="71" pos:column="40"/></name></name> <operator pos:line="71" pos:column="41">==<pos:position pos:line="71" pos:column="43"/></operator> <name pos:line="71" pos:column="44">NULL<pos:position pos:line="71" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="50">0<pos:position pos:line="71" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="53"/></condition><then pos:line="71" pos:column="53">
	<block type="pseudo"><return pos:line="72" pos:column="9">return <expr><name pos:line="72" pos:column="16">err<pos:position pos:line="72" pos:column="19"/></name></expr>;<pos:position pos:line="72" pos:column="20"/></return></block></then></if>
    }<pos:position pos:line="73" pos:column="6"/></block></then>
  <else pos:line="74" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="75" pos:column="5">dfa<pos:position pos:line="75" pos:column="8"/></name><operator pos:line="75" pos:column="8">-&gt;<pos:position pos:line="75" pos:column="13"/></operator><name pos:line="75" pos:column="10">init_state_word<pos:position pos:line="75" pos:column="25"/></name></name> <operator pos:line="75" pos:column="26">=<pos:position pos:line="75" pos:column="27"/></operator> <name><name pos:line="75" pos:column="28">dfa<pos:position pos:line="75" pos:column="31"/></name><operator pos:line="75" pos:column="31">-&gt;<pos:position pos:line="75" pos:column="36"/></operator><name pos:line="75" pos:column="33">init_state_nl<pos:position pos:line="75" pos:column="46"/></name></name>
      <operator pos:line="76" pos:column="7">=<pos:position pos:line="76" pos:column="8"/></operator> <name><name pos:line="76" pos:column="9">dfa<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">-&gt;<pos:position pos:line="76" pos:column="17"/></operator><name pos:line="76" pos:column="14">init_state_begbuf<pos:position pos:line="76" pos:column="31"/></name></name> <operator pos:line="76" pos:column="32">=<pos:position pos:line="76" pos:column="33"/></operator> <name><name pos:line="76" pos:column="34">dfa<pos:position pos:line="76" pos:column="37"/></name><operator pos:line="76" pos:column="37">-&gt;<pos:position pos:line="76" pos:column="42"/></operator><name pos:line="76" pos:column="39">init_state<pos:position pos:line="76" pos:column="49"/></name></name></expr>;<pos:position pos:line="76" pos:column="50"/></expr_stmt></block></else></if>

  <expr_stmt><expr><call><name pos:line="78" pos:column="3">re_node_set_free<pos:position pos:line="78" pos:column="19"/></name> <argument_list pos:line="78" pos:column="20">(<argument><expr><operator pos:line="78" pos:column="21">&amp;<pos:position pos:line="78" pos:column="26"/></operator><name pos:line="78" pos:column="22">init_nodes<pos:position pos:line="78" pos:column="32"/></name></expr></argument>)<pos:position pos:line="78" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="34"/></expr_stmt>
  <return pos:line="79" pos:column="3">return <expr><name pos:line="79" pos:column="10">REG_NOERROR<pos:position pos:line="79" pos:column="21"/></name></expr>;<pos:position pos:line="79" pos:column="22"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
