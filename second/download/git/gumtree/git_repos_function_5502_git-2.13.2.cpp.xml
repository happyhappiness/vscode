<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5502_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">base_data<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">find_unresolved_deltas_1<pos:position pos:line="1" pos:column="50"/></name><parameter_list pos:line="1" pos:column="50">(<parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">base_data<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">base<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
						  <parameter><decl><type><name><name pos:line="2" pos:column="51">struct<pos:position pos:line="2" pos:column="57"/></name> <name pos:line="2" pos:column="58">base_data<pos:position pos:line="2" pos:column="67"/></name></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">prev_base<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name><name pos:line="4" pos:column="13">base<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">-&gt;<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="19">ref_last<pos:position pos:line="4" pos:column="27"/></name></name> <operator pos:line="4" pos:column="28">==<pos:position pos:line="4" pos:column="30"/></operator> <operator pos:line="4" pos:column="31">-<pos:position pos:line="4" pos:column="32"/></operator><literal type="number" pos:line="4" pos:column="32">1<pos:position pos:line="4" pos:column="33"/></literal> <operator pos:line="4" pos:column="34">&amp;&amp;<pos:position pos:line="4" pos:column="44"/></operator> <name><name pos:line="4" pos:column="37">base<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">-&gt;<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="43">ofs_last<pos:position pos:line="4" pos:column="51"/></name></name> <operator pos:line="4" pos:column="52">==<pos:position pos:line="4" pos:column="54"/></operator> <operator pos:line="4" pos:column="55">-<pos:position pos:line="4" pos:column="56"/></operator><literal type="number" pos:line="4" pos:column="56">1<pos:position pos:line="4" pos:column="57"/></literal></expr>)<pos:position pos:line="4" pos:column="58"/></condition><then pos:line="4" pos:column="58"> <block pos:line="4" pos:column="59">{
		<expr_stmt><expr><call><name pos:line="5" pos:column="17">find_ref_delta_children<pos:position pos:line="5" pos:column="40"/></name><argument_list pos:line="5" pos:column="40">(<argument><expr><name><name pos:line="5" pos:column="41">base<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">-&gt;<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="47">obj<pos:position pos:line="5" pos:column="50"/></name><operator pos:line="5" pos:column="50">-&gt;<pos:position pos:line="5" pos:column="55"/></operator><name pos:line="5" pos:column="52">idx<pos:position pos:line="5" pos:column="55"/></name><operator pos:line="5" pos:column="55">.<pos:position pos:line="5" pos:column="56"/></operator><name pos:line="5" pos:column="56">sha1<pos:position pos:line="5" pos:column="60"/></name></name></expr></argument>,
					<argument><expr><operator pos:line="6" pos:column="41">&amp;<pos:position pos:line="6" pos:column="46"/></operator><name><name pos:line="6" pos:column="42">base<pos:position pos:line="6" pos:column="46"/></name><operator pos:line="6" pos:column="46">-&gt;<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="48">ref_first<pos:position pos:line="6" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="59">&amp;<pos:position pos:line="6" pos:column="64"/></operator><name><name pos:line="6" pos:column="60">base<pos:position pos:line="6" pos:column="64"/></name><operator pos:line="6" pos:column="64">-&gt;<pos:position pos:line="6" pos:column="69"/></operator><name pos:line="6" pos:column="66">ref_last<pos:position pos:line="6" pos:column="74"/></name></name></expr></argument>,
					<argument><expr><name pos:line="7" pos:column="41">OBJ_REF_DELTA<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="56"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="9" pos:column="17">find_ofs_delta_children<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">(<argument><expr><name><name pos:line="9" pos:column="41">base<pos:position pos:line="9" pos:column="45"/></name><operator pos:line="9" pos:column="45">-&gt;<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="47">obj<pos:position pos:line="9" pos:column="50"/></name><operator pos:line="9" pos:column="50">-&gt;<pos:position pos:line="9" pos:column="55"/></operator><name pos:line="9" pos:column="52">idx<pos:position pos:line="9" pos:column="55"/></name><operator pos:line="9" pos:column="55">.<pos:position pos:line="9" pos:column="56"/></operator><name pos:line="9" pos:column="56">offset<pos:position pos:line="9" pos:column="62"/></name></name></expr></argument>,
					<argument><expr><operator pos:line="10" pos:column="41">&amp;<pos:position pos:line="10" pos:column="46"/></operator><name><name pos:line="10" pos:column="42">base<pos:position pos:line="10" pos:column="46"/></name><operator pos:line="10" pos:column="46">-&gt;<pos:position pos:line="10" pos:column="51"/></operator><name pos:line="10" pos:column="48">ofs_first<pos:position pos:line="10" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="59">&amp;<pos:position pos:line="10" pos:column="64"/></operator><name><name pos:line="10" pos:column="60">base<pos:position pos:line="10" pos:column="64"/></name><operator pos:line="10" pos:column="64">-&gt;<pos:position pos:line="10" pos:column="69"/></operator><name pos:line="10" pos:column="66">ofs_last<pos:position pos:line="10" pos:column="74"/></name></name></expr></argument>,
					<argument><expr><name pos:line="11" pos:column="41">OBJ_OFS_DELTA<pos:position pos:line="11" pos:column="54"/></name></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="56"/></expr_stmt>

		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name><name pos:line="13" pos:column="21">base<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">-&gt;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="27">ref_last<pos:position pos:line="13" pos:column="35"/></name></name> <operator pos:line="13" pos:column="36">==<pos:position pos:line="13" pos:column="38"/></operator> <operator pos:line="13" pos:column="39">-<pos:position pos:line="13" pos:column="40"/></operator><literal type="number" pos:line="13" pos:column="40">1<pos:position pos:line="13" pos:column="41"/></literal> <operator pos:line="13" pos:column="42">&amp;&amp;<pos:position pos:line="13" pos:column="52"/></operator> <name><name pos:line="13" pos:column="45">base<pos:position pos:line="13" pos:column="49"/></name><operator pos:line="13" pos:column="49">-&gt;<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="51">ofs_last<pos:position pos:line="13" pos:column="59"/></name></name> <operator pos:line="13" pos:column="60">==<pos:position pos:line="13" pos:column="62"/></operator> <operator pos:line="13" pos:column="63">-<pos:position pos:line="13" pos:column="64"/></operator><literal type="number" pos:line="13" pos:column="64">1<pos:position pos:line="13" pos:column="65"/></literal></expr>)<pos:position pos:line="13" pos:column="66"/></condition><then pos:line="13" pos:column="66"> <block pos:line="13" pos:column="67">{
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">free<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name><name pos:line="14" pos:column="30">base<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">data<pos:position pos:line="14" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>
			<return pos:line="15" pos:column="25">return <expr><name pos:line="15" pos:column="32">NULL<pos:position pos:line="15" pos:column="36"/></name></expr>;<pos:position pos:line="15" pos:column="37"/></return>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="18" pos:column="17">link_base_data<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">prev_base<pos:position pos:line="18" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="43">base<pos:position pos:line="18" pos:column="47"/></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name><name pos:line="21" pos:column="13">base<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">-&gt;<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="19">ref_first<pos:position pos:line="21" pos:column="28"/></name></name> <operator pos:line="21" pos:column="29">&lt;=<pos:position pos:line="21" pos:column="34"/></operator> <name><name pos:line="21" pos:column="32">base<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">-&gt;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="38">ref_last<pos:position pos:line="21" pos:column="46"/></name></name></expr>)<pos:position pos:line="21" pos:column="47"/></condition><then pos:line="21" pos:column="47"> <block pos:line="21" pos:column="48">{
		<decl_stmt><decl><type><name><name pos:line="22" pos:column="17">struct<pos:position pos:line="22" pos:column="23"/></name> <name pos:line="22" pos:column="24">object_entry<pos:position pos:line="22" pos:column="36"/></name></name> <modifier pos:line="22" pos:column="37">*<pos:position pos:line="22" pos:column="38"/></modifier></type><name pos:line="22" pos:column="38">child<pos:position pos:line="22" pos:column="43"/></name> <init pos:line="22" pos:column="44">= <expr><name pos:line="22" pos:column="46">objects<pos:position pos:line="22" pos:column="53"/></name> <operator pos:line="22" pos:column="54">+<pos:position pos:line="22" pos:column="55"/></operator> <name><name pos:line="22" pos:column="56">ref_deltas<pos:position pos:line="22" pos:column="66"/></name><index pos:line="22" pos:column="66">[<expr><name><name pos:line="22" pos:column="67">base<pos:position pos:line="22" pos:column="71"/></name><operator pos:line="22" pos:column="71">-&gt;<pos:position pos:line="22" pos:column="76"/></operator><name pos:line="22" pos:column="73">ref_first<pos:position pos:line="22" pos:column="82"/></name></name></expr>]<pos:position pos:line="22" pos:column="83"/></index></name><operator pos:line="22" pos:column="83">.<pos:position pos:line="22" pos:column="84"/></operator><name pos:line="22" pos:column="84">obj_no<pos:position pos:line="22" pos:column="90"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="91"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="23" pos:column="17">struct<pos:position pos:line="23" pos:column="23"/></name> <name pos:line="23" pos:column="24">base_data<pos:position pos:line="23" pos:column="33"/></name></name> <modifier pos:line="23" pos:column="34">*<pos:position pos:line="23" pos:column="35"/></modifier></type><name pos:line="23" pos:column="35">result<pos:position pos:line="23" pos:column="41"/></name> <init pos:line="23" pos:column="42">= <expr><call><name pos:line="23" pos:column="44">alloc_base_data<pos:position pos:line="23" pos:column="59"/></name><argument_list pos:line="23" pos:column="59">()<pos:position pos:line="23" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="62"/></decl_stmt>

		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">!<pos:position pos:line="25" pos:column="22"/></operator><call><name pos:line="25" pos:column="22">compare_and_swap_type<pos:position pos:line="25" pos:column="43"/></name><argument_list pos:line="25" pos:column="43">(<argument><expr><operator pos:line="25" pos:column="44">&amp;<pos:position pos:line="25" pos:column="49"/></operator><name><name pos:line="25" pos:column="45">child<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">-&gt;<pos:position pos:line="25" pos:column="55"/></operator><name pos:line="25" pos:column="52">real_type<pos:position pos:line="25" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="63">OBJ_REF_DELTA<pos:position pos:line="25" pos:column="76"/></name></expr></argument>,
					   <argument><expr><name><name pos:line="26" pos:column="44">base<pos:position pos:line="26" pos:column="48"/></name><operator pos:line="26" pos:column="48">-&gt;<pos:position pos:line="26" pos:column="53"/></operator><name pos:line="26" pos:column="50">obj<pos:position pos:line="26" pos:column="53"/></name><operator pos:line="26" pos:column="53">-&gt;<pos:position pos:line="26" pos:column="58"/></operator><name pos:line="26" pos:column="55">real_type<pos:position pos:line="26" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="66"/></condition><then pos:line="26" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">die<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><literal type="string" pos:line="27" pos:column="29">"BUG: child-&gt;real_type != OBJ_REF_DELTA"<pos:position pos:line="27" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="71"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="29" pos:column="17">resolve_delta<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">child<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="38">base<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="44">result<pos:position pos:line="29" pos:column="50"/></name></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="52"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name><name pos:line="30" pos:column="21">base<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">-&gt;<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="27">ref_first<pos:position pos:line="30" pos:column="36"/></name></name> <operator pos:line="30" pos:column="37">==<pos:position pos:line="30" pos:column="39"/></operator> <name><name pos:line="30" pos:column="40">base<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">-&gt;<pos:position pos:line="30" pos:column="49"/></operator><name pos:line="30" pos:column="46">ref_last<pos:position pos:line="30" pos:column="54"/></name></name> <operator pos:line="30" pos:column="55">&amp;&amp;<pos:position pos:line="30" pos:column="65"/></operator> <name><name pos:line="30" pos:column="58">base<pos:position pos:line="30" pos:column="62"/></name><operator pos:line="30" pos:column="62">-&gt;<pos:position pos:line="30" pos:column="67"/></operator><name pos:line="30" pos:column="64">ofs_last<pos:position pos:line="30" pos:column="72"/></name></name> <operator pos:line="30" pos:column="73">==<pos:position pos:line="30" pos:column="75"/></operator> <operator pos:line="30" pos:column="76">-<pos:position pos:line="30" pos:column="77"/></operator><literal type="number" pos:line="30" pos:column="77">1<pos:position pos:line="30" pos:column="78"/></literal></expr>)<pos:position pos:line="30" pos:column="79"/></condition><then pos:line="30" pos:column="79">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">free_base_data<pos:position pos:line="31" pos:column="39"/></name><argument_list pos:line="31" pos:column="39">(<argument><expr><name pos:line="31" pos:column="40">base<pos:position pos:line="31" pos:column="44"/></name></expr></argument>)<pos:position pos:line="31" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="46"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name><name pos:line="33" pos:column="17">base<pos:position pos:line="33" pos:column="21"/></name><operator pos:line="33" pos:column="21">-&gt;<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="23">ref_first<pos:position pos:line="33" pos:column="32"/></name></name><operator pos:line="33" pos:column="32">++<pos:position pos:line="33" pos:column="34"/></operator></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
		<return pos:line="34" pos:column="17">return <expr><name pos:line="34" pos:column="24">result<pos:position pos:line="34" pos:column="30"/></name></expr>;<pos:position pos:line="34" pos:column="31"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name><name pos:line="37" pos:column="13">base<pos:position pos:line="37" pos:column="17"/></name><operator pos:line="37" pos:column="17">-&gt;<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="19">ofs_first<pos:position pos:line="37" pos:column="28"/></name></name> <operator pos:line="37" pos:column="29">&lt;=<pos:position pos:line="37" pos:column="34"/></operator> <name><name pos:line="37" pos:column="32">base<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">-&gt;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="38">ofs_last<pos:position pos:line="37" pos:column="46"/></name></name></expr>)<pos:position pos:line="37" pos:column="47"/></condition><then pos:line="37" pos:column="47"> <block pos:line="37" pos:column="48">{
		<decl_stmt><decl><type><name><name pos:line="38" pos:column="17">struct<pos:position pos:line="38" pos:column="23"/></name> <name pos:line="38" pos:column="24">object_entry<pos:position pos:line="38" pos:column="36"/></name></name> <modifier pos:line="38" pos:column="37">*<pos:position pos:line="38" pos:column="38"/></modifier></type><name pos:line="38" pos:column="38">child<pos:position pos:line="38" pos:column="43"/></name> <init pos:line="38" pos:column="44">= <expr><name pos:line="38" pos:column="46">objects<pos:position pos:line="38" pos:column="53"/></name> <operator pos:line="38" pos:column="54">+<pos:position pos:line="38" pos:column="55"/></operator> <name><name pos:line="38" pos:column="56">ofs_deltas<pos:position pos:line="38" pos:column="66"/></name><index pos:line="38" pos:column="66">[<expr><name><name pos:line="38" pos:column="67">base<pos:position pos:line="38" pos:column="71"/></name><operator pos:line="38" pos:column="71">-&gt;<pos:position pos:line="38" pos:column="76"/></operator><name pos:line="38" pos:column="73">ofs_first<pos:position pos:line="38" pos:column="82"/></name></name></expr>]<pos:position pos:line="38" pos:column="83"/></index></name><operator pos:line="38" pos:column="83">.<pos:position pos:line="38" pos:column="84"/></operator><name pos:line="38" pos:column="84">obj_no<pos:position pos:line="38" pos:column="90"/></name></expr></init></decl>;<pos:position pos:line="38" pos:column="91"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="39" pos:column="17">struct<pos:position pos:line="39" pos:column="23"/></name> <name pos:line="39" pos:column="24">base_data<pos:position pos:line="39" pos:column="33"/></name></name> <modifier pos:line="39" pos:column="34">*<pos:position pos:line="39" pos:column="35"/></modifier></type><name pos:line="39" pos:column="35">result<pos:position pos:line="39" pos:column="41"/></name> <init pos:line="39" pos:column="42">= <expr><call><name pos:line="39" pos:column="44">alloc_base_data<pos:position pos:line="39" pos:column="59"/></name><argument_list pos:line="39" pos:column="59">()<pos:position pos:line="39" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="62"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="41" pos:column="17">assert<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><name><name pos:line="41" pos:column="24">child<pos:position pos:line="41" pos:column="29"/></name><operator pos:line="41" pos:column="29">-&gt;<pos:position pos:line="41" pos:column="34"/></operator><name pos:line="41" pos:column="31">real_type<pos:position pos:line="41" pos:column="40"/></name></name> <operator pos:line="41" pos:column="41">==<pos:position pos:line="41" pos:column="43"/></operator> <name pos:line="41" pos:column="44">OBJ_OFS_DELTA<pos:position pos:line="41" pos:column="57"/></name></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">child<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">-&gt;<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="24">real_type<pos:position pos:line="42" pos:column="33"/></name></name> <operator pos:line="42" pos:column="34">=<pos:position pos:line="42" pos:column="35"/></operator> <name><name pos:line="42" pos:column="36">base<pos:position pos:line="42" pos:column="40"/></name><operator pos:line="42" pos:column="40">-&gt;<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="42">obj<pos:position pos:line="42" pos:column="45"/></name><operator pos:line="42" pos:column="45">-&gt;<pos:position pos:line="42" pos:column="50"/></operator><name pos:line="42" pos:column="47">real_type<pos:position pos:line="42" pos:column="56"/></name></name></expr>;<pos:position pos:line="42" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">resolve_delta<pos:position pos:line="43" pos:column="30"/></name><argument_list pos:line="43" pos:column="30">(<argument><expr><name pos:line="43" pos:column="31">child<pos:position pos:line="43" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="38">base<pos:position pos:line="43" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="44">result<pos:position pos:line="43" pos:column="50"/></name></expr></argument>)<pos:position pos:line="43" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="52"/></expr_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name><name pos:line="44" pos:column="21">base<pos:position pos:line="44" pos:column="25"/></name><operator pos:line="44" pos:column="25">-&gt;<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="27">ofs_first<pos:position pos:line="44" pos:column="36"/></name></name> <operator pos:line="44" pos:column="37">==<pos:position pos:line="44" pos:column="39"/></operator> <name><name pos:line="44" pos:column="40">base<pos:position pos:line="44" pos:column="44"/></name><operator pos:line="44" pos:column="44">-&gt;<pos:position pos:line="44" pos:column="49"/></operator><name pos:line="44" pos:column="46">ofs_last<pos:position pos:line="44" pos:column="54"/></name></name></expr>)<pos:position pos:line="44" pos:column="55"/></condition><then pos:line="44" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">free_base_data<pos:position pos:line="45" pos:column="39"/></name><argument_list pos:line="45" pos:column="39">(<argument><expr><name pos:line="45" pos:column="40">base<pos:position pos:line="45" pos:column="44"/></name></expr></argument>)<pos:position pos:line="45" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="46"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name><name pos:line="47" pos:column="17">base<pos:position pos:line="47" pos:column="21"/></name><operator pos:line="47" pos:column="21">-&gt;<pos:position pos:line="47" pos:column="26"/></operator><name pos:line="47" pos:column="23">ofs_first<pos:position pos:line="47" pos:column="32"/></name></name><operator pos:line="47" pos:column="32">++<pos:position pos:line="47" pos:column="34"/></operator></expr>;<pos:position pos:line="47" pos:column="35"/></expr_stmt>
		<return pos:line="48" pos:column="17">return <expr><name pos:line="48" pos:column="24">result<pos:position pos:line="48" pos:column="30"/></name></expr>;<pos:position pos:line="48" pos:column="31"/></return>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="51" pos:column="9">unlink_base_data<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">base<pos:position pos:line="51" pos:column="30"/></name></expr></argument>)<pos:position pos:line="51" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
	<return pos:line="52" pos:column="9">return <expr><name pos:line="52" pos:column="16">NULL<pos:position pos:line="52" pos:column="20"/></name></expr>;<pos:position pos:line="52" pos:column="21"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
