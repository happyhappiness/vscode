<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4330_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">NORETURN<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">void<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">compile_regexp_failed<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name><name pos:line="1" pos:column="50">struct<pos:position pos:line="1" pos:column="56"/></name> <name pos:line="1" pos:column="57">grep_pat<pos:position pos:line="1" pos:column="65"/></name></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">p<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">error<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">where<pos:position pos:line="4" pos:column="19"/></name><index pos:line="4" pos:column="19">[<expr><literal type="number" pos:line="4" pos:column="20">1024<pos:position pos:line="4" pos:column="24"/></literal></expr>]<pos:position pos:line="4" pos:column="25"/></index></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">p<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">-&gt;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="16">no<pos:position pos:line="6" pos:column="18"/></name></name></expr>)<pos:position pos:line="6" pos:column="19"/></condition><then pos:line="6" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">xsnprintf<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">where<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="34">sizeof<argument_list pos:line="7" pos:column="40">(<argument><expr><name pos:line="7" pos:column="41">where<pos:position pos:line="7" pos:column="46"/></name></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="49">"In '%s' at %d, "<pos:position pos:line="7" pos:column="66"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="68">p<pos:position pos:line="7" pos:column="69"/></name><operator pos:line="7" pos:column="69">-&gt;<pos:position pos:line="7" pos:column="74"/></operator><name pos:line="7" pos:column="71">origin<pos:position pos:line="7" pos:column="77"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="79">p<pos:position pos:line="7" pos:column="80"/></name><operator pos:line="7" pos:column="80">-&gt;<pos:position pos:line="7" pos:column="85"/></operator><name pos:line="7" pos:column="82">no<pos:position pos:line="7" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="86"/></expr_stmt></block></then>
	<elseif pos:line="8" pos:column="9">else <if pos:line="8" pos:column="14">if <condition pos:line="8" pos:column="17">(<expr><name><name pos:line="8" pos:column="18">p<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">-&gt;<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="21">origin<pos:position pos:line="8" pos:column="27"/></name></name></expr>)<pos:position pos:line="8" pos:column="28"/></condition><then pos:line="8" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">xsnprintf<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">where<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="34">sizeof<argument_list pos:line="9" pos:column="40">(<argument><expr><name pos:line="9" pos:column="41">where<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="49">"%s, "<pos:position pos:line="9" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="57">p<pos:position pos:line="9" pos:column="58"/></name><operator pos:line="9" pos:column="58">-&gt;<pos:position pos:line="9" pos:column="63"/></operator><name pos:line="9" pos:column="60">origin<pos:position pos:line="9" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="68"/></expr_stmt></block></then></if></elseif>
	<else pos:line="10" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="11" pos:column="17">where<pos:position pos:line="11" pos:column="22"/></name><index pos:line="11" pos:column="22">[<expr><literal type="number" pos:line="11" pos:column="23">0<pos:position pos:line="11" pos:column="24"/></literal></expr>]<pos:position pos:line="11" pos:column="25"/></index></name> <operator pos:line="11" pos:column="26">=<pos:position pos:line="11" pos:column="27"/></operator> <literal type="number" pos:line="11" pos:column="28">0<pos:position pos:line="11" pos:column="29"/></literal></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">die<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><literal type="string" pos:line="13" pos:column="13">"%s'%s': %s"<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="27">where<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="34">p<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">-&gt;<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="37">pattern<pos:position pos:line="13" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="46">error<pos:position pos:line="13" pos:column="51"/></name></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="53"/></expr_stmt>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
