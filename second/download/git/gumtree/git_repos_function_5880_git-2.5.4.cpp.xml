<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5880_git-2.5.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name><modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type> <name pos:line="1" pos:column="14">sys_alloc<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">mstate<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">m<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">size_t<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">nb<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> <block pos:line="1" pos:column="45">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name><modifier pos:line="2" pos:column="7">*<pos:position pos:line="2" pos:column="8"/></modifier></type> <name pos:line="2" pos:column="9">tbase<pos:position pos:line="2" pos:column="14"/></name> <init pos:line="2" pos:column="15">= <expr><name pos:line="2" pos:column="17">CMFAIL<pos:position pos:line="2" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">tsize<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><literal type="number" pos:line="3" pos:column="18">0<pos:position pos:line="3" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">flag_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">mmap_flag<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><literal type="number" pos:line="4" pos:column="22">0<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">ensure_initialization<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">()<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Directly map large chunks */</comment>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><call><name pos:line="9" pos:column="7">use_mmap<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">m<pos:position pos:line="9" pos:column="17"/></name></expr></argument>)<pos:position pos:line="9" pos:column="18"/></argument_list></call> <operator pos:line="9" pos:column="19">&amp;&amp;<pos:position pos:line="9" pos:column="29"/></operator> <name pos:line="9" pos:column="22">nb<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">&gt;=<pos:position pos:line="9" pos:column="30"/></operator> <name><name pos:line="9" pos:column="28">mparams<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">.<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="36">mmap_threshold<pos:position pos:line="9" pos:column="50"/></name></name></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51"> <block pos:line="9" pos:column="52">{
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">void<pos:position pos:line="10" pos:column="9"/></name><modifier pos:line="10" pos:column="9">*<pos:position pos:line="10" pos:column="10"/></modifier></type> <name pos:line="10" pos:column="11">mem<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><call><name pos:line="10" pos:column="17">mmap_alloc<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">m<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="31">nb<pos:position pos:line="10" pos:column="33"/></name></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">mem<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">!=<pos:position pos:line="11" pos:column="15"/></operator> <literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr>)<pos:position pos:line="11" pos:column="18"/></condition><then pos:line="11" pos:column="18">
      <block type="pseudo"><return pos:line="12" pos:column="7">return <expr><name pos:line="12" pos:column="14">mem<pos:position pos:line="12" pos:column="17"/></name></expr>;<pos:position pos:line="12" pos:column="18"/></return></block></then></if>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="15" pos:column="3">/*
    Try getting memory in any of three ways (in most-preferred to
    least-preferred order):
    1. A call to MORECORE that can normally contiguously extend memory.
       (disabled if not MORECORE_CONTIGUOUS or not HAVE_MORECORE or
       main space is mmapped or a previous contiguous call failed)
    2. A call to MMAP new space (disabled if not HAVE_MMAP).
       Note that under the default settings, if MORECORE is unable to
       fulfill a request, and HAVE_MMAP is true, then mmap is
       used as a noncontiguous system allocator. This is a useful backup
       strategy for systems with holes in address spaces -- in this case
       sbrk cannot contiguously expand the heap, but mmap may be able to
       find space.
    3. A call to MORECORE that cannot usually contiguously extend memory.
       (disabled if not HAVE_MORECORE)

   In all cases, we need to request enough bytes from system to ensure
   we can malloc nb bytes upon success, so pad with enough space for
   top_foot, plus alignment-pad to make sure we don't lose bytes if
   not on boundary, and round this up to a granularity unit.
  */</comment>

  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><name pos:line="37" pos:column="7">MORECORE_CONTIGUOUS<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">&amp;&amp;<pos:position pos:line="37" pos:column="37"/></operator> <operator pos:line="37" pos:column="30">!<pos:position pos:line="37" pos:column="31"/></operator><call><name pos:line="37" pos:column="31">use_noncontiguous<pos:position pos:line="37" pos:column="48"/></name><argument_list pos:line="37" pos:column="48">(<argument><expr><name pos:line="37" pos:column="49">m<pos:position pos:line="37" pos:column="50"/></name></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="52"/></condition><then pos:line="37" pos:column="52"> <block pos:line="37" pos:column="53">{
    <decl_stmt><decl><type><name pos:line="38" pos:column="5">char<pos:position pos:line="38" pos:column="9"/></name><modifier pos:line="38" pos:column="9">*<pos:position pos:line="38" pos:column="10"/></modifier></type> <name pos:line="38" pos:column="11">br<pos:position pos:line="38" pos:column="13"/></name> <init pos:line="38" pos:column="14">= <expr><name pos:line="38" pos:column="16">CMFAIL<pos:position pos:line="38" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="38" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="39" pos:column="5">msegmentptr<pos:position pos:line="39" pos:column="16"/></name></type> <name pos:line="39" pos:column="17">ss<pos:position pos:line="39" pos:column="19"/></name> <init pos:line="39" pos:column="20">= <expr><ternary><condition><expr><operator pos:line="39" pos:column="22">(<pos:position pos:line="39" pos:column="23"/></operator><name><name pos:line="39" pos:column="23">m<pos:position pos:line="39" pos:column="24"/></name><operator pos:line="39" pos:column="24">-&gt;<pos:position pos:line="39" pos:column="29"/></operator><name pos:line="39" pos:column="26">top<pos:position pos:line="39" pos:column="29"/></name></name> <operator pos:line="39" pos:column="30">==<pos:position pos:line="39" pos:column="32"/></operator> <literal type="number" pos:line="39" pos:column="33">0<pos:position pos:line="39" pos:column="34"/></literal><operator pos:line="39" pos:column="34">)<pos:position pos:line="39" pos:column="35"/></operator></expr>?<pos:position pos:line="39" pos:column="36"/></condition><then pos:line="39" pos:column="36"> <expr><literal type="number" pos:line="39" pos:column="37">0<pos:position pos:line="39" pos:column="38"/></literal></expr> <pos:position pos:line="39" pos:column="39"/></then><else pos:line="39" pos:column="39">: <expr><call><name pos:line="39" pos:column="41">segment_holding<pos:position pos:line="39" pos:column="56"/></name><argument_list pos:line="39" pos:column="56">(<argument><expr><name pos:line="39" pos:column="57">m<pos:position pos:line="39" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="60">(<pos:position pos:line="39" pos:column="61"/></operator><name pos:line="39" pos:column="61">char<pos:position pos:line="39" pos:column="65"/></name><operator pos:line="39" pos:column="65">*<pos:position pos:line="39" pos:column="66"/></operator><operator pos:line="39" pos:column="66">)<pos:position pos:line="39" pos:column="67"/></operator><name><name pos:line="39" pos:column="67">m<pos:position pos:line="39" pos:column="68"/></name><operator pos:line="39" pos:column="68">-&gt;<pos:position pos:line="39" pos:column="73"/></operator><name pos:line="39" pos:column="70">top<pos:position pos:line="39" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="74"/></argument_list></call></expr></else></ternary></expr></init></decl>;<pos:position pos:line="39" pos:column="75"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="40" pos:column="5">size_t<pos:position pos:line="40" pos:column="11"/></name></type> <name pos:line="40" pos:column="12">asize<pos:position pos:line="40" pos:column="17"/></name> <init pos:line="40" pos:column="18">= <expr><literal type="number" pos:line="40" pos:column="20">0<pos:position pos:line="40" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="40" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">ACQUIRE_MALLOC_GLOBAL_LOCK<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">()<pos:position pos:line="41" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">ss<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">==<pos:position pos:line="43" pos:column="14"/></operator> <literal type="number" pos:line="43" pos:column="15">0<pos:position pos:line="43" pos:column="16"/></literal></expr>)<pos:position pos:line="43" pos:column="17"/></condition><then pos:line="43" pos:column="17"> <block pos:line="43" pos:column="18">{  <comment type="block" pos:line="43" pos:column="21">/* First time through or recovery */</comment>
      <decl_stmt><decl><type><name pos:line="44" pos:column="7">char<pos:position pos:line="44" pos:column="11"/></name><modifier pos:line="44" pos:column="11">*<pos:position pos:line="44" pos:column="12"/></modifier></type> <name pos:line="44" pos:column="13">base<pos:position pos:line="44" pos:column="17"/></name> <init pos:line="44" pos:column="18">= <expr><operator pos:line="44" pos:column="20">(<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="21">char<pos:position pos:line="44" pos:column="25"/></name><operator pos:line="44" pos:column="25">*<pos:position pos:line="44" pos:column="26"/></operator><operator pos:line="44" pos:column="26">)<pos:position pos:line="44" pos:column="27"/></operator><call><name pos:line="44" pos:column="27">CALL_MORECORE<pos:position pos:line="44" pos:column="40"/></name><argument_list pos:line="44" pos:column="40">(<argument><expr><literal type="number" pos:line="44" pos:column="41">0<pos:position pos:line="44" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="44" pos:column="44"/></decl_stmt>
      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><name pos:line="45" pos:column="11">base<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">!=<pos:position pos:line="45" pos:column="18"/></operator> <name pos:line="45" pos:column="19">CMFAIL<pos:position pos:line="45" pos:column="25"/></name></expr>)<pos:position pos:line="45" pos:column="26"/></condition><then pos:line="45" pos:column="26"> <block pos:line="45" pos:column="27">{
	<expr_stmt><expr><name pos:line="46" pos:column="9">asize<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">=<pos:position pos:line="46" pos:column="16"/></operator> <call><name pos:line="46" pos:column="17">granularity_align<pos:position pos:line="46" pos:column="34"/></name><argument_list pos:line="46" pos:column="34">(<argument><expr><name pos:line="46" pos:column="35">nb<pos:position pos:line="46" pos:column="37"/></name> <operator pos:line="46" pos:column="38">+<pos:position pos:line="46" pos:column="39"/></operator> <name pos:line="46" pos:column="40">SYS_ALLOC_PADDING<pos:position pos:line="46" pos:column="57"/></name></expr></argument>)<pos:position pos:line="46" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="59"/></expr_stmt>
	<comment type="block" pos:line="47" pos:column="9">/* Adjust to end on a page boundary */</comment>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><operator pos:line="48" pos:column="13">!<pos:position pos:line="48" pos:column="14"/></operator><call><name pos:line="48" pos:column="14">is_page_aligned<pos:position pos:line="48" pos:column="29"/></name><argument_list pos:line="48" pos:column="29">(<argument><expr><name pos:line="48" pos:column="30">base<pos:position pos:line="48" pos:column="34"/></name></expr></argument>)<pos:position pos:line="48" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="36"/></condition><then pos:line="48" pos:column="36">
	  <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="11">asize<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">+=<pos:position pos:line="49" pos:column="19"/></operator> <operator pos:line="49" pos:column="20">(<pos:position pos:line="49" pos:column="21"/></operator><call><name pos:line="49" pos:column="21">page_align<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><operator pos:line="49" pos:column="32">(<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="33">size_t<pos:position pos:line="49" pos:column="39"/></name><operator pos:line="49" pos:column="39">)<pos:position pos:line="49" pos:column="40"/></operator><name pos:line="49" pos:column="40">base<pos:position pos:line="49" pos:column="44"/></name></expr></argument>)<pos:position pos:line="49" pos:column="45"/></argument_list></call> <operator pos:line="49" pos:column="46">-<pos:position pos:line="49" pos:column="47"/></operator> <operator pos:line="49" pos:column="48">(<pos:position pos:line="49" pos:column="49"/></operator><name pos:line="49" pos:column="49">size_t<pos:position pos:line="49" pos:column="55"/></name><operator pos:line="49" pos:column="55">)<pos:position pos:line="49" pos:column="56"/></operator><name pos:line="49" pos:column="56">base<pos:position pos:line="49" pos:column="60"/></name><operator pos:line="49" pos:column="60">)<pos:position pos:line="49" pos:column="61"/></operator></expr>;<pos:position pos:line="49" pos:column="62"/></expr_stmt></block></then></if>
	<comment type="block" pos:line="50" pos:column="9">/* Can't call MORECORE if size is negative when treated as signed */</comment>
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">asize<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">&lt;<pos:position pos:line="51" pos:column="23"/></operator> <name pos:line="51" pos:column="21">HALF_MAX_SIZE_T<pos:position pos:line="51" pos:column="36"/></name> <operator pos:line="51" pos:column="37">&amp;&amp;<pos:position pos:line="51" pos:column="47"/></operator>
	    <operator pos:line="52" pos:column="13">(<pos:position pos:line="52" pos:column="14"/></operator><name pos:line="52" pos:column="14">br<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">=<pos:position pos:line="52" pos:column="18"/></operator> <operator pos:line="52" pos:column="19">(<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="20">char<pos:position pos:line="52" pos:column="24"/></name><operator pos:line="52" pos:column="24">*<pos:position pos:line="52" pos:column="25"/></operator><operator pos:line="52" pos:column="25">)<pos:position pos:line="52" pos:column="26"/></operator><operator pos:line="52" pos:column="26">(<pos:position pos:line="52" pos:column="27"/></operator><call><name pos:line="52" pos:column="27">CALL_MORECORE<pos:position pos:line="52" pos:column="40"/></name><argument_list pos:line="52" pos:column="40">(<argument><expr><name pos:line="52" pos:column="41">asize<pos:position pos:line="52" pos:column="46"/></name></expr></argument>)<pos:position pos:line="52" pos:column="47"/></argument_list></call><operator pos:line="52" pos:column="47">)<pos:position pos:line="52" pos:column="48"/></operator><operator pos:line="52" pos:column="48">)<pos:position pos:line="52" pos:column="49"/></operator> <operator pos:line="52" pos:column="50">==<pos:position pos:line="52" pos:column="52"/></operator> <name pos:line="52" pos:column="53">base<pos:position pos:line="52" pos:column="57"/></name></expr>)<pos:position pos:line="52" pos:column="58"/></condition><then pos:line="52" pos:column="58"> <block pos:line="52" pos:column="59">{
	  <expr_stmt><expr><name pos:line="53" pos:column="11">tbase<pos:position pos:line="53" pos:column="16"/></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">base<pos:position pos:line="53" pos:column="23"/></name></expr>;<pos:position pos:line="53" pos:column="24"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="54" pos:column="11">tsize<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">=<pos:position pos:line="54" pos:column="18"/></operator> <name pos:line="54" pos:column="19">asize<pos:position pos:line="54" pos:column="24"/></name></expr>;<pos:position pos:line="54" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if>
      }<pos:position pos:line="56" pos:column="8"/></block></then></if>
    }<pos:position pos:line="57" pos:column="6"/></block></then>
    <else pos:line="58" pos:column="5">else <block pos:line="58" pos:column="10">{
      <comment type="block" pos:line="59" pos:column="7">/* Subtract out existing available top space from MORECORE request. */</comment>
      <expr_stmt><expr><name pos:line="60" pos:column="7">asize<pos:position pos:line="60" pos:column="12"/></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <call><name pos:line="60" pos:column="15">granularity_align<pos:position pos:line="60" pos:column="32"/></name><argument_list pos:line="60" pos:column="32">(<argument><expr><name pos:line="60" pos:column="33">nb<pos:position pos:line="60" pos:column="35"/></name> <operator pos:line="60" pos:column="36">-<pos:position pos:line="60" pos:column="37"/></operator> <name><name pos:line="60" pos:column="38">m<pos:position pos:line="60" pos:column="39"/></name><operator pos:line="60" pos:column="39">-&gt;<pos:position pos:line="60" pos:column="44"/></operator><name pos:line="60" pos:column="41">topsize<pos:position pos:line="60" pos:column="48"/></name></name> <operator pos:line="60" pos:column="49">+<pos:position pos:line="60" pos:column="50"/></operator> <name pos:line="60" pos:column="51">SYS_ALLOC_PADDING<pos:position pos:line="60" pos:column="68"/></name></expr></argument>)<pos:position pos:line="60" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="70"/></expr_stmt>
      <comment type="block" pos:line="61" pos:column="7">/* Use mem here only if it did continuously extend old space */</comment>
      <if pos:line="62" pos:column="7">if <condition pos:line="62" pos:column="10">(<expr><name pos:line="62" pos:column="11">asize<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">&lt;<pos:position pos:line="62" pos:column="21"/></operator> <name pos:line="62" pos:column="19">HALF_MAX_SIZE_T<pos:position pos:line="62" pos:column="34"/></name> <operator pos:line="62" pos:column="35">&amp;&amp;<pos:position pos:line="62" pos:column="45"/></operator>
	  <operator pos:line="63" pos:column="11">(<pos:position pos:line="63" pos:column="12"/></operator><name pos:line="63" pos:column="12">br<pos:position pos:line="63" pos:column="14"/></name> <operator pos:line="63" pos:column="15">=<pos:position pos:line="63" pos:column="16"/></operator> <operator pos:line="63" pos:column="17">(<pos:position pos:line="63" pos:column="18"/></operator><name pos:line="63" pos:column="18">char<pos:position pos:line="63" pos:column="22"/></name><operator pos:line="63" pos:column="22">*<pos:position pos:line="63" pos:column="23"/></operator><operator pos:line="63" pos:column="23">)<pos:position pos:line="63" pos:column="24"/></operator><operator pos:line="63" pos:column="24">(<pos:position pos:line="63" pos:column="25"/></operator><call><name pos:line="63" pos:column="25">CALL_MORECORE<pos:position pos:line="63" pos:column="38"/></name><argument_list pos:line="63" pos:column="38">(<argument><expr><name pos:line="63" pos:column="39">asize<pos:position pos:line="63" pos:column="44"/></name></expr></argument>)<pos:position pos:line="63" pos:column="45"/></argument_list></call><operator pos:line="63" pos:column="45">)<pos:position pos:line="63" pos:column="46"/></operator><operator pos:line="63" pos:column="46">)<pos:position pos:line="63" pos:column="47"/></operator> <operator pos:line="63" pos:column="48">==<pos:position pos:line="63" pos:column="50"/></operator> <name><name pos:line="63" pos:column="51">ss<pos:position pos:line="63" pos:column="53"/></name><operator pos:line="63" pos:column="53">-&gt;<pos:position pos:line="63" pos:column="58"/></operator><name pos:line="63" pos:column="55">base<pos:position pos:line="63" pos:column="59"/></name></name><operator pos:line="63" pos:column="59">+<pos:position pos:line="63" pos:column="60"/></operator><name><name pos:line="63" pos:column="60">ss<pos:position pos:line="63" pos:column="62"/></name><operator pos:line="63" pos:column="62">-&gt;<pos:position pos:line="63" pos:column="67"/></operator><name pos:line="63" pos:column="64">size<pos:position pos:line="63" pos:column="68"/></name></name></expr>)<pos:position pos:line="63" pos:column="69"/></condition><then pos:line="63" pos:column="69"> <block pos:line="63" pos:column="70">{
	<expr_stmt><expr><name pos:line="64" pos:column="9">tbase<pos:position pos:line="64" pos:column="14"/></name> <operator pos:line="64" pos:column="15">=<pos:position pos:line="64" pos:column="16"/></operator> <name pos:line="64" pos:column="17">br<pos:position pos:line="64" pos:column="19"/></name></expr>;<pos:position pos:line="64" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="65" pos:column="9">tsize<pos:position pos:line="65" pos:column="14"/></name> <operator pos:line="65" pos:column="15">=<pos:position pos:line="65" pos:column="16"/></operator> <name pos:line="65" pos:column="17">asize<pos:position pos:line="65" pos:column="22"/></name></expr>;<pos:position pos:line="65" pos:column="23"/></expr_stmt>
      }<pos:position pos:line="66" pos:column="8"/></block></then></if>
    }<pos:position pos:line="67" pos:column="6"/></block></else></if>

    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><name pos:line="69" pos:column="9">tbase<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">==<pos:position pos:line="69" pos:column="17"/></operator> <name pos:line="69" pos:column="18">CMFAIL<pos:position pos:line="69" pos:column="24"/></name></expr>)<pos:position pos:line="69" pos:column="25"/></condition><then pos:line="69" pos:column="25"> <block pos:line="69" pos:column="26">{    <comment type="block" pos:line="69" pos:column="31">/* Cope with partial failure */</comment>
      <if pos:line="70" pos:column="7">if <condition pos:line="70" pos:column="10">(<expr><name pos:line="70" pos:column="11">br<pos:position pos:line="70" pos:column="13"/></name> <operator pos:line="70" pos:column="14">!=<pos:position pos:line="70" pos:column="16"/></operator> <name pos:line="70" pos:column="17">CMFAIL<pos:position pos:line="70" pos:column="23"/></name></expr>)<pos:position pos:line="70" pos:column="24"/></condition><then pos:line="70" pos:column="24"> <block pos:line="70" pos:column="25">{    <comment type="block" pos:line="70" pos:column="30">/* Try to use/extend the space we did get */</comment>
	<if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><name pos:line="71" pos:column="13">asize<pos:position pos:line="71" pos:column="18"/></name> <operator pos:line="71" pos:column="19">&lt;<pos:position pos:line="71" pos:column="23"/></operator> <name pos:line="71" pos:column="21">HALF_MAX_SIZE_T<pos:position pos:line="71" pos:column="36"/></name> <operator pos:line="71" pos:column="37">&amp;&amp;<pos:position pos:line="71" pos:column="47"/></operator>
	    <name pos:line="72" pos:column="13">asize<pos:position pos:line="72" pos:column="18"/></name> <operator pos:line="72" pos:column="19">&lt;<pos:position pos:line="72" pos:column="23"/></operator> <name pos:line="72" pos:column="21">nb<pos:position pos:line="72" pos:column="23"/></name> <operator pos:line="72" pos:column="24">+<pos:position pos:line="72" pos:column="25"/></operator> <name pos:line="72" pos:column="26">SYS_ALLOC_PADDING<pos:position pos:line="72" pos:column="43"/></name></expr>)<pos:position pos:line="72" pos:column="44"/></condition><then pos:line="72" pos:column="44"> <block pos:line="72" pos:column="45">{
	  <decl_stmt><decl><type><name pos:line="73" pos:column="11">size_t<pos:position pos:line="73" pos:column="17"/></name></type> <name pos:line="73" pos:column="18">esize<pos:position pos:line="73" pos:column="23"/></name> <init pos:line="73" pos:column="24">= <expr><call><name pos:line="73" pos:column="26">granularity_align<pos:position pos:line="73" pos:column="43"/></name><argument_list pos:line="73" pos:column="43">(<argument><expr><name pos:line="73" pos:column="44">nb<pos:position pos:line="73" pos:column="46"/></name> <operator pos:line="73" pos:column="47">+<pos:position pos:line="73" pos:column="48"/></operator> <name pos:line="73" pos:column="49">SYS_ALLOC_PADDING<pos:position pos:line="73" pos:column="66"/></name> <operator pos:line="73" pos:column="67">-<pos:position pos:line="73" pos:column="68"/></operator> <name pos:line="73" pos:column="69">asize<pos:position pos:line="73" pos:column="74"/></name></expr></argument>)<pos:position pos:line="73" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="73" pos:column="76"/></decl_stmt>
	  <if pos:line="74" pos:column="11">if <condition pos:line="74" pos:column="14">(<expr><name pos:line="74" pos:column="15">esize<pos:position pos:line="74" pos:column="20"/></name> <operator pos:line="74" pos:column="21">&lt;<pos:position pos:line="74" pos:column="25"/></operator> <name pos:line="74" pos:column="23">HALF_MAX_SIZE_T<pos:position pos:line="74" pos:column="38"/></name></expr>)<pos:position pos:line="74" pos:column="39"/></condition><then pos:line="74" pos:column="39"> <block pos:line="74" pos:column="40">{
	    <decl_stmt><decl><type><name pos:line="75" pos:column="13">char<pos:position pos:line="75" pos:column="17"/></name><modifier pos:line="75" pos:column="17">*<pos:position pos:line="75" pos:column="18"/></modifier></type> <name pos:line="75" pos:column="19">end<pos:position pos:line="75" pos:column="22"/></name> <init pos:line="75" pos:column="23">= <expr><operator pos:line="75" pos:column="25">(<pos:position pos:line="75" pos:column="26"/></operator><name pos:line="75" pos:column="26">char<pos:position pos:line="75" pos:column="30"/></name><operator pos:line="75" pos:column="30">*<pos:position pos:line="75" pos:column="31"/></operator><operator pos:line="75" pos:column="31">)<pos:position pos:line="75" pos:column="32"/></operator><call><name pos:line="75" pos:column="32">CALL_MORECORE<pos:position pos:line="75" pos:column="45"/></name><argument_list pos:line="75" pos:column="45">(<argument><expr><name pos:line="75" pos:column="46">esize<pos:position pos:line="75" pos:column="51"/></name></expr></argument>)<pos:position pos:line="75" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="75" pos:column="53"/></decl_stmt>
	    <if pos:line="76" pos:column="13">if <condition pos:line="76" pos:column="16">(<expr><name pos:line="76" pos:column="17">end<pos:position pos:line="76" pos:column="20"/></name> <operator pos:line="76" pos:column="21">!=<pos:position pos:line="76" pos:column="23"/></operator> <name pos:line="76" pos:column="24">CMFAIL<pos:position pos:line="76" pos:column="30"/></name></expr>)<pos:position pos:line="76" pos:column="31"/></condition><then pos:line="76" pos:column="31">
	      <block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="15">asize<pos:position pos:line="77" pos:column="20"/></name> <operator pos:line="77" pos:column="21">+=<pos:position pos:line="77" pos:column="23"/></operator> <name pos:line="77" pos:column="24">esize<pos:position pos:line="77" pos:column="29"/></name></expr>;<pos:position pos:line="77" pos:column="30"/></expr_stmt></block></then>
	    <else pos:line="78" pos:column="13">else <block pos:line="78" pos:column="18">{            <comment type="block" pos:line="78" pos:column="31">/* Can't use; try to release */</comment>
	      <expr_stmt><expr><operator pos:line="79" pos:column="15">(<pos:position pos:line="79" pos:column="16"/></operator><name pos:line="79" pos:column="16">void<pos:position pos:line="79" pos:column="20"/></name><operator pos:line="79" pos:column="20">)<pos:position pos:line="79" pos:column="21"/></operator> <call><name pos:line="79" pos:column="22">CALL_MORECORE<pos:position pos:line="79" pos:column="35"/></name><argument_list pos:line="79" pos:column="35">(<argument><expr><operator pos:line="79" pos:column="36">-<pos:position pos:line="79" pos:column="37"/></operator><name pos:line="79" pos:column="37">asize<pos:position pos:line="79" pos:column="42"/></name></expr></argument>)<pos:position pos:line="79" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="44"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="80" pos:column="15">br<pos:position pos:line="80" pos:column="17"/></name> <operator pos:line="80" pos:column="18">=<pos:position pos:line="80" pos:column="19"/></operator> <name pos:line="80" pos:column="20">CMFAIL<pos:position pos:line="80" pos:column="26"/></name></expr>;<pos:position pos:line="80" pos:column="27"/></expr_stmt>
	    }<pos:position pos:line="81" pos:column="14"/></block></else></if>
	  }<pos:position pos:line="82" pos:column="12"/></block></then></if>
	}<pos:position pos:line="83" pos:column="10"/></block></then></if>
      }<pos:position pos:line="84" pos:column="8"/></block></then></if>
      <if pos:line="85" pos:column="7">if <condition pos:line="85" pos:column="10">(<expr><name pos:line="85" pos:column="11">br<pos:position pos:line="85" pos:column="13"/></name> <operator pos:line="85" pos:column="14">!=<pos:position pos:line="85" pos:column="16"/></operator> <name pos:line="85" pos:column="17">CMFAIL<pos:position pos:line="85" pos:column="23"/></name></expr>)<pos:position pos:line="85" pos:column="24"/></condition><then pos:line="85" pos:column="24"> <block pos:line="85" pos:column="25">{    <comment type="block" pos:line="85" pos:column="30">/* Use the space we did get */</comment>
	<expr_stmt><expr><name pos:line="86" pos:column="9">tbase<pos:position pos:line="86" pos:column="14"/></name> <operator pos:line="86" pos:column="15">=<pos:position pos:line="86" pos:column="16"/></operator> <name pos:line="86" pos:column="17">br<pos:position pos:line="86" pos:column="19"/></name></expr>;<pos:position pos:line="86" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="87" pos:column="9">tsize<pos:position pos:line="87" pos:column="14"/></name> <operator pos:line="87" pos:column="15">=<pos:position pos:line="87" pos:column="16"/></operator> <name pos:line="87" pos:column="17">asize<pos:position pos:line="87" pos:column="22"/></name></expr>;<pos:position pos:line="87" pos:column="23"/></expr_stmt>
      }<pos:position pos:line="88" pos:column="8"/></block></then>
      <else pos:line="89" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="9">disable_contiguous<pos:position pos:line="90" pos:column="27"/></name><argument_list pos:line="90" pos:column="27">(<argument><expr><name pos:line="90" pos:column="28">m<pos:position pos:line="90" pos:column="29"/></name></expr></argument>)<pos:position pos:line="90" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="31"/></expr_stmt></block></else></if> <comment type="block" pos:line="90" pos:column="32">/* Don't try contiguous path in the future */</comment>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="93" pos:column="5">RELEASE_MALLOC_GLOBAL_LOCK<pos:position pos:line="93" pos:column="31"/></name><argument_list pos:line="93" pos:column="31">()<pos:position pos:line="93" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="94" pos:column="4"/></block></then></if>

  <if pos:line="96" pos:column="3">if <condition pos:line="96" pos:column="6">(<expr><name pos:line="96" pos:column="7">HAVE_MMAP<pos:position pos:line="96" pos:column="16"/></name> <operator pos:line="96" pos:column="17">&amp;&amp;<pos:position pos:line="96" pos:column="27"/></operator> <name pos:line="96" pos:column="20">tbase<pos:position pos:line="96" pos:column="25"/></name> <operator pos:line="96" pos:column="26">==<pos:position pos:line="96" pos:column="28"/></operator> <name pos:line="96" pos:column="29">CMFAIL<pos:position pos:line="96" pos:column="35"/></name></expr>)<pos:position pos:line="96" pos:column="36"/></condition><then pos:line="96" pos:column="36"> <block pos:line="96" pos:column="37">{  <comment type="block" pos:line="96" pos:column="40">/* Try MMAP */</comment>
    <decl_stmt><decl><type><name pos:line="97" pos:column="5">size_t<pos:position pos:line="97" pos:column="11"/></name></type> <name pos:line="97" pos:column="12">rsize<pos:position pos:line="97" pos:column="17"/></name> <init pos:line="97" pos:column="18">= <expr><call><name pos:line="97" pos:column="20">granularity_align<pos:position pos:line="97" pos:column="37"/></name><argument_list pos:line="97" pos:column="37">(<argument><expr><name pos:line="97" pos:column="38">nb<pos:position pos:line="97" pos:column="40"/></name> <operator pos:line="97" pos:column="41">+<pos:position pos:line="97" pos:column="42"/></operator> <name pos:line="97" pos:column="43">SYS_ALLOC_PADDING<pos:position pos:line="97" pos:column="60"/></name></expr></argument>)<pos:position pos:line="97" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="97" pos:column="62"/></decl_stmt>
    <if pos:line="98" pos:column="5">if <condition pos:line="98" pos:column="8">(<expr><name pos:line="98" pos:column="9">rsize<pos:position pos:line="98" pos:column="14"/></name> <operator pos:line="98" pos:column="15">&gt;<pos:position pos:line="98" pos:column="19"/></operator> <name pos:line="98" pos:column="17">nb<pos:position pos:line="98" pos:column="19"/></name></expr>)<pos:position pos:line="98" pos:column="20"/></condition><then pos:line="98" pos:column="20"> <block pos:line="98" pos:column="21">{ <comment type="block" pos:line="98" pos:column="23">/* Fail if wraps around zero */</comment>
      <decl_stmt><decl><type><name pos:line="99" pos:column="7">char<pos:position pos:line="99" pos:column="11"/></name><modifier pos:line="99" pos:column="11">*<pos:position pos:line="99" pos:column="12"/></modifier></type> <name pos:line="99" pos:column="13">mp<pos:position pos:line="99" pos:column="15"/></name> <init pos:line="99" pos:column="16">= <expr><operator pos:line="99" pos:column="18">(<pos:position pos:line="99" pos:column="19"/></operator><name pos:line="99" pos:column="19">char<pos:position pos:line="99" pos:column="23"/></name><operator pos:line="99" pos:column="23">*<pos:position pos:line="99" pos:column="24"/></operator><operator pos:line="99" pos:column="24">)<pos:position pos:line="99" pos:column="25"/></operator><operator pos:line="99" pos:column="25">(<pos:position pos:line="99" pos:column="26"/></operator><call><name pos:line="99" pos:column="26">CALL_MMAP<pos:position pos:line="99" pos:column="35"/></name><argument_list pos:line="99" pos:column="35">(<argument><expr><name pos:line="99" pos:column="36">rsize<pos:position pos:line="99" pos:column="41"/></name></expr></argument>)<pos:position pos:line="99" pos:column="42"/></argument_list></call><operator pos:line="99" pos:column="42">)<pos:position pos:line="99" pos:column="43"/></operator></expr></init></decl>;<pos:position pos:line="99" pos:column="44"/></decl_stmt>
      <if pos:line="100" pos:column="7">if <condition pos:line="100" pos:column="10">(<expr><name pos:line="100" pos:column="11">mp<pos:position pos:line="100" pos:column="13"/></name> <operator pos:line="100" pos:column="14">!=<pos:position pos:line="100" pos:column="16"/></operator> <name pos:line="100" pos:column="17">CMFAIL<pos:position pos:line="100" pos:column="23"/></name></expr>)<pos:position pos:line="100" pos:column="24"/></condition><then pos:line="100" pos:column="24"> <block pos:line="100" pos:column="25">{
	<expr_stmt><expr><name pos:line="101" pos:column="9">tbase<pos:position pos:line="101" pos:column="14"/></name> <operator pos:line="101" pos:column="15">=<pos:position pos:line="101" pos:column="16"/></operator> <name pos:line="101" pos:column="17">mp<pos:position pos:line="101" pos:column="19"/></name></expr>;<pos:position pos:line="101" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="102" pos:column="9">tsize<pos:position pos:line="102" pos:column="14"/></name> <operator pos:line="102" pos:column="15">=<pos:position pos:line="102" pos:column="16"/></operator> <name pos:line="102" pos:column="17">rsize<pos:position pos:line="102" pos:column="22"/></name></expr>;<pos:position pos:line="102" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name pos:line="103" pos:column="9">mmap_flag<pos:position pos:line="103" pos:column="18"/></name> <operator pos:line="103" pos:column="19">=<pos:position pos:line="103" pos:column="20"/></operator> <name pos:line="103" pos:column="21">IS_MMAPPED_BIT<pos:position pos:line="103" pos:column="35"/></name></expr>;<pos:position pos:line="103" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="104" pos:column="8"/></block></then></if>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>
  }<pos:position pos:line="106" pos:column="4"/></block></then></if>

  <if pos:line="108" pos:column="3">if <condition pos:line="108" pos:column="6">(<expr><name pos:line="108" pos:column="7">HAVE_MORECORE<pos:position pos:line="108" pos:column="20"/></name> <operator pos:line="108" pos:column="21">&amp;&amp;<pos:position pos:line="108" pos:column="31"/></operator> <name pos:line="108" pos:column="24">tbase<pos:position pos:line="108" pos:column="29"/></name> <operator pos:line="108" pos:column="30">==<pos:position pos:line="108" pos:column="32"/></operator> <name pos:line="108" pos:column="33">CMFAIL<pos:position pos:line="108" pos:column="39"/></name></expr>)<pos:position pos:line="108" pos:column="40"/></condition><then pos:line="108" pos:column="40"> <block pos:line="108" pos:column="41">{ <comment type="block" pos:line="108" pos:column="43">/* Try noncontiguous MORECORE */</comment>
    <decl_stmt><decl><type><name pos:line="109" pos:column="5">size_t<pos:position pos:line="109" pos:column="11"/></name></type> <name pos:line="109" pos:column="12">asize<pos:position pos:line="109" pos:column="17"/></name> <init pos:line="109" pos:column="18">= <expr><call><name pos:line="109" pos:column="20">granularity_align<pos:position pos:line="109" pos:column="37"/></name><argument_list pos:line="109" pos:column="37">(<argument><expr><name pos:line="109" pos:column="38">nb<pos:position pos:line="109" pos:column="40"/></name> <operator pos:line="109" pos:column="41">+<pos:position pos:line="109" pos:column="42"/></operator> <name pos:line="109" pos:column="43">SYS_ALLOC_PADDING<pos:position pos:line="109" pos:column="60"/></name></expr></argument>)<pos:position pos:line="109" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="109" pos:column="62"/></decl_stmt>
    <if pos:line="110" pos:column="5">if <condition pos:line="110" pos:column="8">(<expr><name pos:line="110" pos:column="9">asize<pos:position pos:line="110" pos:column="14"/></name> <operator pos:line="110" pos:column="15">&lt;<pos:position pos:line="110" pos:column="19"/></operator> <name pos:line="110" pos:column="17">HALF_MAX_SIZE_T<pos:position pos:line="110" pos:column="32"/></name></expr>)<pos:position pos:line="110" pos:column="33"/></condition><then pos:line="110" pos:column="33"> <block pos:line="110" pos:column="34">{
      <decl_stmt><decl><type><name pos:line="111" pos:column="7">char<pos:position pos:line="111" pos:column="11"/></name><modifier pos:line="111" pos:column="11">*<pos:position pos:line="111" pos:column="12"/></modifier></type> <name pos:line="111" pos:column="13">br<pos:position pos:line="111" pos:column="15"/></name> <init pos:line="111" pos:column="16">= <expr><name pos:line="111" pos:column="18">CMFAIL<pos:position pos:line="111" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="111" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="112" pos:column="7">char<pos:position pos:line="112" pos:column="11"/></name><modifier pos:line="112" pos:column="11">*<pos:position pos:line="112" pos:column="12"/></modifier></type> <name pos:line="112" pos:column="13">end<pos:position pos:line="112" pos:column="16"/></name> <init pos:line="112" pos:column="17">= <expr><name pos:line="112" pos:column="19">CMFAIL<pos:position pos:line="112" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="112" pos:column="26"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="113" pos:column="7">ACQUIRE_MALLOC_GLOBAL_LOCK<pos:position pos:line="113" pos:column="33"/></name><argument_list pos:line="113" pos:column="33">()<pos:position pos:line="113" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name pos:line="114" pos:column="7">br<pos:position pos:line="114" pos:column="9"/></name> <operator pos:line="114" pos:column="10">=<pos:position pos:line="114" pos:column="11"/></operator> <operator pos:line="114" pos:column="12">(<pos:position pos:line="114" pos:column="13"/></operator><name pos:line="114" pos:column="13">char<pos:position pos:line="114" pos:column="17"/></name><operator pos:line="114" pos:column="17">*<pos:position pos:line="114" pos:column="18"/></operator><operator pos:line="114" pos:column="18">)<pos:position pos:line="114" pos:column="19"/></operator><operator pos:line="114" pos:column="19">(<pos:position pos:line="114" pos:column="20"/></operator><call><name pos:line="114" pos:column="20">CALL_MORECORE<pos:position pos:line="114" pos:column="33"/></name><argument_list pos:line="114" pos:column="33">(<argument><expr><name pos:line="114" pos:column="34">asize<pos:position pos:line="114" pos:column="39"/></name></expr></argument>)<pos:position pos:line="114" pos:column="40"/></argument_list></call><operator pos:line="114" pos:column="40">)<pos:position pos:line="114" pos:column="41"/></operator></expr>;<pos:position pos:line="114" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><name pos:line="115" pos:column="7">end<pos:position pos:line="115" pos:column="10"/></name> <operator pos:line="115" pos:column="11">=<pos:position pos:line="115" pos:column="12"/></operator> <operator pos:line="115" pos:column="13">(<pos:position pos:line="115" pos:column="14"/></operator><name pos:line="115" pos:column="14">char<pos:position pos:line="115" pos:column="18"/></name><operator pos:line="115" pos:column="18">*<pos:position pos:line="115" pos:column="19"/></operator><operator pos:line="115" pos:column="19">)<pos:position pos:line="115" pos:column="20"/></operator><operator pos:line="115" pos:column="20">(<pos:position pos:line="115" pos:column="21"/></operator><call><name pos:line="115" pos:column="21">CALL_MORECORE<pos:position pos:line="115" pos:column="34"/></name><argument_list pos:line="115" pos:column="34">(<argument><expr><literal type="number" pos:line="115" pos:column="35">0<pos:position pos:line="115" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="37"/></argument_list></call><operator pos:line="115" pos:column="37">)<pos:position pos:line="115" pos:column="38"/></operator></expr>;<pos:position pos:line="115" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="116" pos:column="7">RELEASE_MALLOC_GLOBAL_LOCK<pos:position pos:line="116" pos:column="33"/></name><argument_list pos:line="116" pos:column="33">()<pos:position pos:line="116" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="36"/></expr_stmt>
      <if pos:line="117" pos:column="7">if <condition pos:line="117" pos:column="10">(<expr><name pos:line="117" pos:column="11">br<pos:position pos:line="117" pos:column="13"/></name> <operator pos:line="117" pos:column="14">!=<pos:position pos:line="117" pos:column="16"/></operator> <name pos:line="117" pos:column="17">CMFAIL<pos:position pos:line="117" pos:column="23"/></name> <operator pos:line="117" pos:column="24">&amp;&amp;<pos:position pos:line="117" pos:column="34"/></operator> <name pos:line="117" pos:column="27">end<pos:position pos:line="117" pos:column="30"/></name> <operator pos:line="117" pos:column="31">!=<pos:position pos:line="117" pos:column="33"/></operator> <name pos:line="117" pos:column="34">CMFAIL<pos:position pos:line="117" pos:column="40"/></name> <operator pos:line="117" pos:column="41">&amp;&amp;<pos:position pos:line="117" pos:column="51"/></operator> <name pos:line="117" pos:column="44">br<pos:position pos:line="117" pos:column="46"/></name> <operator pos:line="117" pos:column="47">&lt;<pos:position pos:line="117" pos:column="51"/></operator> <name pos:line="117" pos:column="49">end<pos:position pos:line="117" pos:column="52"/></name></expr>)<pos:position pos:line="117" pos:column="53"/></condition><then pos:line="117" pos:column="53"> <block pos:line="117" pos:column="54">{
	<decl_stmt><decl><type><name pos:line="118" pos:column="9">size_t<pos:position pos:line="118" pos:column="15"/></name></type> <name pos:line="118" pos:column="16">ssize<pos:position pos:line="118" pos:column="21"/></name> <init pos:line="118" pos:column="22">= <expr><name pos:line="118" pos:column="24">end<pos:position pos:line="118" pos:column="27"/></name> <operator pos:line="118" pos:column="28">-<pos:position pos:line="118" pos:column="29"/></operator> <name pos:line="118" pos:column="30">br<pos:position pos:line="118" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="118" pos:column="33"/></decl_stmt>
	<if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><name pos:line="119" pos:column="13">ssize<pos:position pos:line="119" pos:column="18"/></name> <operator pos:line="119" pos:column="19">&gt;<pos:position pos:line="119" pos:column="23"/></operator> <name pos:line="119" pos:column="21">nb<pos:position pos:line="119" pos:column="23"/></name> <operator pos:line="119" pos:column="24">+<pos:position pos:line="119" pos:column="25"/></operator> <name pos:line="119" pos:column="26">TOP_FOOT_SIZE<pos:position pos:line="119" pos:column="39"/></name></expr>)<pos:position pos:line="119" pos:column="40"/></condition><then pos:line="119" pos:column="40"> <block pos:line="119" pos:column="41">{
	  <expr_stmt><expr><name pos:line="120" pos:column="11">tbase<pos:position pos:line="120" pos:column="16"/></name> <operator pos:line="120" pos:column="17">=<pos:position pos:line="120" pos:column="18"/></operator> <name pos:line="120" pos:column="19">br<pos:position pos:line="120" pos:column="21"/></name></expr>;<pos:position pos:line="120" pos:column="22"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="121" pos:column="11">tsize<pos:position pos:line="121" pos:column="16"/></name> <operator pos:line="121" pos:column="17">=<pos:position pos:line="121" pos:column="18"/></operator> <name pos:line="121" pos:column="19">ssize<pos:position pos:line="121" pos:column="24"/></name></expr>;<pos:position pos:line="121" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="122" pos:column="10"/></block></then></if>
      }<pos:position pos:line="123" pos:column="8"/></block></then></if>
    }<pos:position pos:line="124" pos:column="6"/></block></then></if>
  }<pos:position pos:line="125" pos:column="4"/></block></then></if>

  <if pos:line="127" pos:column="3">if <condition pos:line="127" pos:column="6">(<expr><name pos:line="127" pos:column="7">tbase<pos:position pos:line="127" pos:column="12"/></name> <operator pos:line="127" pos:column="13">!=<pos:position pos:line="127" pos:column="15"/></operator> <name pos:line="127" pos:column="16">CMFAIL<pos:position pos:line="127" pos:column="22"/></name></expr>)<pos:position pos:line="127" pos:column="23"/></condition><then pos:line="127" pos:column="23"> <block pos:line="127" pos:column="24">{

    <if pos:line="129" pos:column="5">if <condition pos:line="129" pos:column="8">(<expr><operator pos:line="129" pos:column="9">(<pos:position pos:line="129" pos:column="10"/></operator><name><name pos:line="129" pos:column="10">m<pos:position pos:line="129" pos:column="11"/></name><operator pos:line="129" pos:column="11">-&gt;<pos:position pos:line="129" pos:column="16"/></operator><name pos:line="129" pos:column="13">footprint<pos:position pos:line="129" pos:column="22"/></name></name> <operator pos:line="129" pos:column="23">+=<pos:position pos:line="129" pos:column="25"/></operator> <name pos:line="129" pos:column="26">tsize<pos:position pos:line="129" pos:column="31"/></name><operator pos:line="129" pos:column="31">)<pos:position pos:line="129" pos:column="32"/></operator> <operator pos:line="129" pos:column="33">&gt;<pos:position pos:line="129" pos:column="37"/></operator> <name><name pos:line="129" pos:column="35">m<pos:position pos:line="129" pos:column="36"/></name><operator pos:line="129" pos:column="36">-&gt;<pos:position pos:line="129" pos:column="41"/></operator><name pos:line="129" pos:column="38">max_footprint<pos:position pos:line="129" pos:column="51"/></name></name></expr>)<pos:position pos:line="129" pos:column="52"/></condition><then pos:line="129" pos:column="52">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="130" pos:column="7">m<pos:position pos:line="130" pos:column="8"/></name><operator pos:line="130" pos:column="8">-&gt;<pos:position pos:line="130" pos:column="13"/></operator><name pos:line="130" pos:column="10">max_footprint<pos:position pos:line="130" pos:column="23"/></name></name> <operator pos:line="130" pos:column="24">=<pos:position pos:line="130" pos:column="25"/></operator> <name><name pos:line="130" pos:column="26">m<pos:position pos:line="130" pos:column="27"/></name><operator pos:line="130" pos:column="27">-&gt;<pos:position pos:line="130" pos:column="32"/></operator><name pos:line="130" pos:column="29">footprint<pos:position pos:line="130" pos:column="38"/></name></name></expr>;<pos:position pos:line="130" pos:column="39"/></expr_stmt></block></then></if>

    <if pos:line="132" pos:column="5">if <condition pos:line="132" pos:column="8">(<expr><operator pos:line="132" pos:column="9">!<pos:position pos:line="132" pos:column="10"/></operator><call><name pos:line="132" pos:column="10">is_initialized<pos:position pos:line="132" pos:column="24"/></name><argument_list pos:line="132" pos:column="24">(<argument><expr><name pos:line="132" pos:column="25">m<pos:position pos:line="132" pos:column="26"/></name></expr></argument>)<pos:position pos:line="132" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="132" pos:column="28"/></condition><then pos:line="132" pos:column="28"> <block pos:line="132" pos:column="29">{ <comment type="block" pos:line="132" pos:column="31">/* first-time initialization */</comment>
      <expr_stmt><expr><name><name pos:line="133" pos:column="7">m<pos:position pos:line="133" pos:column="8"/></name><operator pos:line="133" pos:column="8">-&gt;<pos:position pos:line="133" pos:column="13"/></operator><name pos:line="133" pos:column="10">seg<pos:position pos:line="133" pos:column="13"/></name><operator pos:line="133" pos:column="13">.<pos:position pos:line="133" pos:column="14"/></operator><name pos:line="133" pos:column="14">base<pos:position pos:line="133" pos:column="18"/></name></name> <operator pos:line="133" pos:column="19">=<pos:position pos:line="133" pos:column="20"/></operator> <name><name pos:line="133" pos:column="21">m<pos:position pos:line="133" pos:column="22"/></name><operator pos:line="133" pos:column="22">-&gt;<pos:position pos:line="133" pos:column="27"/></operator><name pos:line="133" pos:column="24">least_addr<pos:position pos:line="133" pos:column="34"/></name></name> <operator pos:line="133" pos:column="35">=<pos:position pos:line="133" pos:column="36"/></operator> <name pos:line="133" pos:column="37">tbase<pos:position pos:line="133" pos:column="42"/></name></expr>;<pos:position pos:line="133" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="134" pos:column="7">m<pos:position pos:line="134" pos:column="8"/></name><operator pos:line="134" pos:column="8">-&gt;<pos:position pos:line="134" pos:column="13"/></operator><name pos:line="134" pos:column="10">seg<pos:position pos:line="134" pos:column="13"/></name><operator pos:line="134" pos:column="13">.<pos:position pos:line="134" pos:column="14"/></operator><name pos:line="134" pos:column="14">size<pos:position pos:line="134" pos:column="18"/></name></name> <operator pos:line="134" pos:column="19">=<pos:position pos:line="134" pos:column="20"/></operator> <name pos:line="134" pos:column="21">tsize<pos:position pos:line="134" pos:column="26"/></name></expr>;<pos:position pos:line="134" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="135" pos:column="7">m<pos:position pos:line="135" pos:column="8"/></name><operator pos:line="135" pos:column="8">-&gt;<pos:position pos:line="135" pos:column="13"/></operator><name pos:line="135" pos:column="10">seg<pos:position pos:line="135" pos:column="13"/></name><operator pos:line="135" pos:column="13">.<pos:position pos:line="135" pos:column="14"/></operator><name pos:line="135" pos:column="14">sflags<pos:position pos:line="135" pos:column="20"/></name></name> <operator pos:line="135" pos:column="21">=<pos:position pos:line="135" pos:column="22"/></operator> <name pos:line="135" pos:column="23">mmap_flag<pos:position pos:line="135" pos:column="32"/></name></expr>;<pos:position pos:line="135" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="136" pos:column="7">m<pos:position pos:line="136" pos:column="8"/></name><operator pos:line="136" pos:column="8">-&gt;<pos:position pos:line="136" pos:column="13"/></operator><name pos:line="136" pos:column="10">magic<pos:position pos:line="136" pos:column="15"/></name></name> <operator pos:line="136" pos:column="16">=<pos:position pos:line="136" pos:column="17"/></operator> <name><name pos:line="136" pos:column="18">mparams<pos:position pos:line="136" pos:column="25"/></name><operator pos:line="136" pos:column="25">.<pos:position pos:line="136" pos:column="26"/></operator><name pos:line="136" pos:column="26">magic<pos:position pos:line="136" pos:column="31"/></name></name></expr>;<pos:position pos:line="136" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="137" pos:column="7">m<pos:position pos:line="137" pos:column="8"/></name><operator pos:line="137" pos:column="8">-&gt;<pos:position pos:line="137" pos:column="13"/></operator><name pos:line="137" pos:column="10">release_checks<pos:position pos:line="137" pos:column="24"/></name></name> <operator pos:line="137" pos:column="25">=<pos:position pos:line="137" pos:column="26"/></operator> <name pos:line="137" pos:column="27">MAX_RELEASE_CHECK_RATE<pos:position pos:line="137" pos:column="49"/></name></expr>;<pos:position pos:line="137" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="138" pos:column="7">init_bins<pos:position pos:line="138" pos:column="16"/></name><argument_list pos:line="138" pos:column="16">(<argument><expr><name pos:line="138" pos:column="17">m<pos:position pos:line="138" pos:column="18"/></name></expr></argument>)<pos:position pos:line="138" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="20"/></expr_stmt>
<cpp:if pos:line="139" pos:column="1">#<cpp:directive pos:line="139" pos:column="2">if<pos:position pos:line="139" pos:column="4"/></cpp:directive> <expr><operator pos:line="139" pos:column="5">!<pos:position pos:line="139" pos:column="6"/></operator><name pos:line="139" pos:column="6">ONLY_MSPACES<pos:position pos:line="139" pos:column="18"/></name></expr></cpp:if>
      <if pos:line="140" pos:column="7">if <condition pos:line="140" pos:column="10">(<expr><call><name pos:line="140" pos:column="11">is_global<pos:position pos:line="140" pos:column="20"/></name><argument_list pos:line="140" pos:column="20">(<argument><expr><name pos:line="140" pos:column="21">m<pos:position pos:line="140" pos:column="22"/></name></expr></argument>)<pos:position pos:line="140" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="140" pos:column="24"/></condition><then pos:line="140" pos:column="24">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="141" pos:column="9">init_top<pos:position pos:line="141" pos:column="17"/></name><argument_list pos:line="141" pos:column="17">(<argument><expr><name pos:line="141" pos:column="18">m<pos:position pos:line="141" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="141" pos:column="21">(<pos:position pos:line="141" pos:column="22"/></operator><name pos:line="141" pos:column="22">mchunkptr<pos:position pos:line="141" pos:column="31"/></name><operator pos:line="141" pos:column="31">)<pos:position pos:line="141" pos:column="32"/></operator><name pos:line="141" pos:column="32">tbase<pos:position pos:line="141" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="39">tsize<pos:position pos:line="141" pos:column="44"/></name> <operator pos:line="141" pos:column="45">-<pos:position pos:line="141" pos:column="46"/></operator> <name pos:line="141" pos:column="47">TOP_FOOT_SIZE<pos:position pos:line="141" pos:column="60"/></name></expr></argument>)<pos:position pos:line="141" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="62"/></expr_stmt></block></then>
      <else pos:line="142" pos:column="7">else
<cpp:endif pos:line="143" pos:column="1">#<cpp:directive pos:line="143" pos:column="2">endif<pos:position pos:line="143" pos:column="7"/></cpp:directive></cpp:endif>
      <block pos:line="144" pos:column="7">{
	<comment type="block" pos:line="145" pos:column="9">/* Offset top by embedded malloc_state */</comment>
	<decl_stmt><decl><type><name pos:line="146" pos:column="9">mchunkptr<pos:position pos:line="146" pos:column="18"/></name></type> <name pos:line="146" pos:column="19">mn<pos:position pos:line="146" pos:column="21"/></name> <init pos:line="146" pos:column="22">= <expr><call><name pos:line="146" pos:column="24">next_chunk<pos:position pos:line="146" pos:column="34"/></name><argument_list pos:line="146" pos:column="34">(<argument><expr><call><name pos:line="146" pos:column="35">mem2chunk<pos:position pos:line="146" pos:column="44"/></name><argument_list pos:line="146" pos:column="44">(<argument><expr><name pos:line="146" pos:column="45">m<pos:position pos:line="146" pos:column="46"/></name></expr></argument>)<pos:position pos:line="146" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="146" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="146" pos:column="49"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="147" pos:column="9">init_top<pos:position pos:line="147" pos:column="17"/></name><argument_list pos:line="147" pos:column="17">(<argument><expr><name pos:line="147" pos:column="18">m<pos:position pos:line="147" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="21">mn<pos:position pos:line="147" pos:column="23"/></name></expr></argument>, <argument><expr><call pos:line="147" pos:column="25">(<name pos:line="147" pos:column="26">size_t<pos:position pos:line="147" pos:column="32"/></name>)<argument_list pos:line="147" pos:column="33">(<argument><expr><operator pos:line="147" pos:column="34">(<pos:position pos:line="147" pos:column="35"/></operator><name pos:line="147" pos:column="35">tbase<pos:position pos:line="147" pos:column="40"/></name> <operator pos:line="147" pos:column="41">+<pos:position pos:line="147" pos:column="42"/></operator> <name pos:line="147" pos:column="43">tsize<pos:position pos:line="147" pos:column="48"/></name><operator pos:line="147" pos:column="48">)<pos:position pos:line="147" pos:column="49"/></operator> <operator pos:line="147" pos:column="50">-<pos:position pos:line="147" pos:column="51"/></operator> <operator pos:line="147" pos:column="52">(<pos:position pos:line="147" pos:column="53"/></operator><name pos:line="147" pos:column="53">char<pos:position pos:line="147" pos:column="57"/></name><operator pos:line="147" pos:column="57">*<pos:position pos:line="147" pos:column="58"/></operator><operator pos:line="147" pos:column="58">)<pos:position pos:line="147" pos:column="59"/></operator><name pos:line="147" pos:column="59">mn<pos:position pos:line="147" pos:column="61"/></name></expr></argument>)<pos:position pos:line="147" pos:column="62"/></argument_list></call> <operator pos:line="147" pos:column="63">-<pos:position pos:line="147" pos:column="64"/></operator><name pos:line="147" pos:column="64">TOP_FOOT_SIZE<pos:position pos:line="147" pos:column="77"/></name></expr></argument>)<pos:position pos:line="147" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="79"/></expr_stmt>
      }<pos:position pos:line="148" pos:column="8"/></block></else></if>
    }<pos:position pos:line="149" pos:column="6"/></block></then>

    <else pos:line="151" pos:column="5">else <block pos:line="151" pos:column="10">{
      <comment type="block" pos:line="152" pos:column="7">/* Try to merge with an existing segment */</comment>
      <decl_stmt><decl><type><name pos:line="153" pos:column="7">msegmentptr<pos:position pos:line="153" pos:column="18"/></name></type> <name pos:line="153" pos:column="19">sp<pos:position pos:line="153" pos:column="21"/></name> <init pos:line="153" pos:column="22">= <expr><operator pos:line="153" pos:column="24">&amp;<pos:position pos:line="153" pos:column="29"/></operator><name><name pos:line="153" pos:column="25">m<pos:position pos:line="153" pos:column="26"/></name><operator pos:line="153" pos:column="26">-&gt;<pos:position pos:line="153" pos:column="31"/></operator><name pos:line="153" pos:column="28">seg<pos:position pos:line="153" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="153" pos:column="32"/></decl_stmt>
      <comment type="block" pos:line="154" pos:column="7">/* Only consider most recent segment if traversal suppressed */</comment>
      <while pos:line="155" pos:column="7">while <condition pos:line="155" pos:column="13">(<expr><name pos:line="155" pos:column="14">sp<pos:position pos:line="155" pos:column="16"/></name> <operator pos:line="155" pos:column="17">!=<pos:position pos:line="155" pos:column="19"/></operator> <literal type="number" pos:line="155" pos:column="20">0<pos:position pos:line="155" pos:column="21"/></literal> <operator pos:line="155" pos:column="22">&amp;&amp;<pos:position pos:line="155" pos:column="32"/></operator> <name pos:line="155" pos:column="25">tbase<pos:position pos:line="155" pos:column="30"/></name> <operator pos:line="155" pos:column="31">!=<pos:position pos:line="155" pos:column="33"/></operator> <name><name pos:line="155" pos:column="34">sp<pos:position pos:line="155" pos:column="36"/></name><operator pos:line="155" pos:column="36">-&gt;<pos:position pos:line="155" pos:column="41"/></operator><name pos:line="155" pos:column="38">base<pos:position pos:line="155" pos:column="42"/></name></name> <operator pos:line="155" pos:column="43">+<pos:position pos:line="155" pos:column="44"/></operator> <name><name pos:line="155" pos:column="45">sp<pos:position pos:line="155" pos:column="47"/></name><operator pos:line="155" pos:column="47">-&gt;<pos:position pos:line="155" pos:column="52"/></operator><name pos:line="155" pos:column="49">size<pos:position pos:line="155" pos:column="53"/></name></name></expr>)<pos:position pos:line="155" pos:column="54"/></condition>
	<block type="pseudo"><expr_stmt><expr><name pos:line="156" pos:column="9">sp<pos:position pos:line="156" pos:column="11"/></name> <operator pos:line="156" pos:column="12">=<pos:position pos:line="156" pos:column="13"/></operator> <ternary><condition><expr><operator pos:line="156" pos:column="14">(<pos:position pos:line="156" pos:column="15"/></operator><name pos:line="156" pos:column="15">NO_SEGMENT_TRAVERSAL<pos:position pos:line="156" pos:column="35"/></name><operator pos:line="156" pos:column="35">)<pos:position pos:line="156" pos:column="36"/></operator></expr> ?<pos:position pos:line="156" pos:column="38"/></condition><then pos:line="156" pos:column="38"> <expr><literal type="number" pos:line="156" pos:column="39">0<pos:position pos:line="156" pos:column="40"/></literal></expr> <pos:position pos:line="156" pos:column="41"/></then><else pos:line="156" pos:column="41">: <expr><name><name pos:line="156" pos:column="43">sp<pos:position pos:line="156" pos:column="45"/></name><operator pos:line="156" pos:column="45">-&gt;<pos:position pos:line="156" pos:column="50"/></operator><name pos:line="156" pos:column="47">next<pos:position pos:line="156" pos:column="51"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="156" pos:column="52"/></expr_stmt></block></while>
      <if pos:line="157" pos:column="7">if <condition pos:line="157" pos:column="10">(<expr><name pos:line="157" pos:column="11">sp<pos:position pos:line="157" pos:column="13"/></name> <operator pos:line="157" pos:column="14">!=<pos:position pos:line="157" pos:column="16"/></operator> <literal type="number" pos:line="157" pos:column="17">0<pos:position pos:line="157" pos:column="18"/></literal> <operator pos:line="157" pos:column="19">&amp;&amp;<pos:position pos:line="157" pos:column="29"/></operator>
	  <operator pos:line="158" pos:column="11">!<pos:position pos:line="158" pos:column="12"/></operator><call><name pos:line="158" pos:column="12">is_extern_segment<pos:position pos:line="158" pos:column="29"/></name><argument_list pos:line="158" pos:column="29">(<argument><expr><name pos:line="158" pos:column="30">sp<pos:position pos:line="158" pos:column="32"/></name></expr></argument>)<pos:position pos:line="158" pos:column="33"/></argument_list></call> <operator pos:line="158" pos:column="34">&amp;&amp;<pos:position pos:line="158" pos:column="44"/></operator>
	  <operator pos:line="159" pos:column="11">(<pos:position pos:line="159" pos:column="12"/></operator><name><name pos:line="159" pos:column="12">sp<pos:position pos:line="159" pos:column="14"/></name><operator pos:line="159" pos:column="14">-&gt;<pos:position pos:line="159" pos:column="19"/></operator><name pos:line="159" pos:column="16">sflags<pos:position pos:line="159" pos:column="22"/></name></name> <operator pos:line="159" pos:column="23">&amp;<pos:position pos:line="159" pos:column="28"/></operator> <name pos:line="159" pos:column="25">IS_MMAPPED_BIT<pos:position pos:line="159" pos:column="39"/></name><operator pos:line="159" pos:column="39">)<pos:position pos:line="159" pos:column="40"/></operator> <operator pos:line="159" pos:column="41">==<pos:position pos:line="159" pos:column="43"/></operator> <name pos:line="159" pos:column="44">mmap_flag<pos:position pos:line="159" pos:column="53"/></name> <operator pos:line="159" pos:column="54">&amp;&amp;<pos:position pos:line="159" pos:column="64"/></operator>
	  <call><name pos:line="160" pos:column="11">segment_holds<pos:position pos:line="160" pos:column="24"/></name><argument_list pos:line="160" pos:column="24">(<argument><expr><name pos:line="160" pos:column="25">sp<pos:position pos:line="160" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="160" pos:column="29">m<pos:position pos:line="160" pos:column="30"/></name><operator pos:line="160" pos:column="30">-&gt;<pos:position pos:line="160" pos:column="35"/></operator><name pos:line="160" pos:column="32">top<pos:position pos:line="160" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="160" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="160" pos:column="37"/></condition><then pos:line="160" pos:column="37"> <block pos:line="160" pos:column="38">{ <comment type="block" pos:line="160" pos:column="40">/* append */</comment>
	<expr_stmt><expr><name><name pos:line="161" pos:column="9">sp<pos:position pos:line="161" pos:column="11"/></name><operator pos:line="161" pos:column="11">-&gt;<pos:position pos:line="161" pos:column="16"/></operator><name pos:line="161" pos:column="13">size<pos:position pos:line="161" pos:column="17"/></name></name> <operator pos:line="161" pos:column="18">+=<pos:position pos:line="161" pos:column="20"/></operator> <name pos:line="161" pos:column="21">tsize<pos:position pos:line="161" pos:column="26"/></name></expr>;<pos:position pos:line="161" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="162" pos:column="9">init_top<pos:position pos:line="162" pos:column="17"/></name><argument_list pos:line="162" pos:column="17">(<argument><expr><name pos:line="162" pos:column="18">m<pos:position pos:line="162" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="162" pos:column="21">m<pos:position pos:line="162" pos:column="22"/></name><operator pos:line="162" pos:column="22">-&gt;<pos:position pos:line="162" pos:column="27"/></operator><name pos:line="162" pos:column="24">top<pos:position pos:line="162" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="162" pos:column="29">m<pos:position pos:line="162" pos:column="30"/></name><operator pos:line="162" pos:column="30">-&gt;<pos:position pos:line="162" pos:column="35"/></operator><name pos:line="162" pos:column="32">topsize<pos:position pos:line="162" pos:column="39"/></name></name> <operator pos:line="162" pos:column="40">+<pos:position pos:line="162" pos:column="41"/></operator> <name pos:line="162" pos:column="42">tsize<pos:position pos:line="162" pos:column="47"/></name></expr></argument>)<pos:position pos:line="162" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="49"/></expr_stmt>
      }<pos:position pos:line="163" pos:column="8"/></block></then>
      <else pos:line="164" pos:column="7">else <block pos:line="164" pos:column="12">{
	<if pos:line="165" pos:column="9">if <condition pos:line="165" pos:column="12">(<expr><name pos:line="165" pos:column="13">tbase<pos:position pos:line="165" pos:column="18"/></name> <operator pos:line="165" pos:column="19">&lt;<pos:position pos:line="165" pos:column="23"/></operator> <name><name pos:line="165" pos:column="21">m<pos:position pos:line="165" pos:column="22"/></name><operator pos:line="165" pos:column="22">-&gt;<pos:position pos:line="165" pos:column="27"/></operator><name pos:line="165" pos:column="24">least_addr<pos:position pos:line="165" pos:column="34"/></name></name></expr>)<pos:position pos:line="165" pos:column="35"/></condition><then pos:line="165" pos:column="35">
	  <block type="pseudo"><expr_stmt><expr><name><name pos:line="166" pos:column="11">m<pos:position pos:line="166" pos:column="12"/></name><operator pos:line="166" pos:column="12">-&gt;<pos:position pos:line="166" pos:column="17"/></operator><name pos:line="166" pos:column="14">least_addr<pos:position pos:line="166" pos:column="24"/></name></name> <operator pos:line="166" pos:column="25">=<pos:position pos:line="166" pos:column="26"/></operator> <name pos:line="166" pos:column="27">tbase<pos:position pos:line="166" pos:column="32"/></name></expr>;<pos:position pos:line="166" pos:column="33"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="167" pos:column="9">sp<pos:position pos:line="167" pos:column="11"/></name> <operator pos:line="167" pos:column="12">=<pos:position pos:line="167" pos:column="13"/></operator> <operator pos:line="167" pos:column="14">&amp;<pos:position pos:line="167" pos:column="19"/></operator><name><name pos:line="167" pos:column="15">m<pos:position pos:line="167" pos:column="16"/></name><operator pos:line="167" pos:column="16">-&gt;<pos:position pos:line="167" pos:column="21"/></operator><name pos:line="167" pos:column="18">seg<pos:position pos:line="167" pos:column="21"/></name></name></expr>;<pos:position pos:line="167" pos:column="22"/></expr_stmt>
	<while pos:line="168" pos:column="9">while <condition pos:line="168" pos:column="15">(<expr><name pos:line="168" pos:column="16">sp<pos:position pos:line="168" pos:column="18"/></name> <operator pos:line="168" pos:column="19">!=<pos:position pos:line="168" pos:column="21"/></operator> <literal type="number" pos:line="168" pos:column="22">0<pos:position pos:line="168" pos:column="23"/></literal> <operator pos:line="168" pos:column="24">&amp;&amp;<pos:position pos:line="168" pos:column="34"/></operator> <name><name pos:line="168" pos:column="27">sp<pos:position pos:line="168" pos:column="29"/></name><operator pos:line="168" pos:column="29">-&gt;<pos:position pos:line="168" pos:column="34"/></operator><name pos:line="168" pos:column="31">base<pos:position pos:line="168" pos:column="35"/></name></name> <operator pos:line="168" pos:column="36">!=<pos:position pos:line="168" pos:column="38"/></operator> <name pos:line="168" pos:column="39">tbase<pos:position pos:line="168" pos:column="44"/></name> <operator pos:line="168" pos:column="45">+<pos:position pos:line="168" pos:column="46"/></operator> <name pos:line="168" pos:column="47">tsize<pos:position pos:line="168" pos:column="52"/></name></expr>)<pos:position pos:line="168" pos:column="53"/></condition>
	  <block type="pseudo"><expr_stmt><expr><name pos:line="169" pos:column="11">sp<pos:position pos:line="169" pos:column="13"/></name> <operator pos:line="169" pos:column="14">=<pos:position pos:line="169" pos:column="15"/></operator> <ternary><condition><expr><operator pos:line="169" pos:column="16">(<pos:position pos:line="169" pos:column="17"/></operator><name pos:line="169" pos:column="17">NO_SEGMENT_TRAVERSAL<pos:position pos:line="169" pos:column="37"/></name><operator pos:line="169" pos:column="37">)<pos:position pos:line="169" pos:column="38"/></operator></expr> ?<pos:position pos:line="169" pos:column="40"/></condition><then pos:line="169" pos:column="40"> <expr><literal type="number" pos:line="169" pos:column="41">0<pos:position pos:line="169" pos:column="42"/></literal></expr> <pos:position pos:line="169" pos:column="43"/></then><else pos:line="169" pos:column="43">: <expr><name><name pos:line="169" pos:column="45">sp<pos:position pos:line="169" pos:column="47"/></name><operator pos:line="169" pos:column="47">-&gt;<pos:position pos:line="169" pos:column="52"/></operator><name pos:line="169" pos:column="49">next<pos:position pos:line="169" pos:column="53"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="169" pos:column="54"/></expr_stmt></block></while>
	<if pos:line="170" pos:column="9">if <condition pos:line="170" pos:column="12">(<expr><name pos:line="170" pos:column="13">sp<pos:position pos:line="170" pos:column="15"/></name> <operator pos:line="170" pos:column="16">!=<pos:position pos:line="170" pos:column="18"/></operator> <literal type="number" pos:line="170" pos:column="19">0<pos:position pos:line="170" pos:column="20"/></literal> <operator pos:line="170" pos:column="21">&amp;&amp;<pos:position pos:line="170" pos:column="31"/></operator>
	    <operator pos:line="171" pos:column="13">!<pos:position pos:line="171" pos:column="14"/></operator><call><name pos:line="171" pos:column="14">is_extern_segment<pos:position pos:line="171" pos:column="31"/></name><argument_list pos:line="171" pos:column="31">(<argument><expr><name pos:line="171" pos:column="32">sp<pos:position pos:line="171" pos:column="34"/></name></expr></argument>)<pos:position pos:line="171" pos:column="35"/></argument_list></call> <operator pos:line="171" pos:column="36">&amp;&amp;<pos:position pos:line="171" pos:column="46"/></operator>
	    <operator pos:line="172" pos:column="13">(<pos:position pos:line="172" pos:column="14"/></operator><name><name pos:line="172" pos:column="14">sp<pos:position pos:line="172" pos:column="16"/></name><operator pos:line="172" pos:column="16">-&gt;<pos:position pos:line="172" pos:column="21"/></operator><name pos:line="172" pos:column="18">sflags<pos:position pos:line="172" pos:column="24"/></name></name> <operator pos:line="172" pos:column="25">&amp;<pos:position pos:line="172" pos:column="30"/></operator> <name pos:line="172" pos:column="27">IS_MMAPPED_BIT<pos:position pos:line="172" pos:column="41"/></name><operator pos:line="172" pos:column="41">)<pos:position pos:line="172" pos:column="42"/></operator> <operator pos:line="172" pos:column="43">==<pos:position pos:line="172" pos:column="45"/></operator> <name pos:line="172" pos:column="46">mmap_flag<pos:position pos:line="172" pos:column="55"/></name></expr>)<pos:position pos:line="172" pos:column="56"/></condition><then pos:line="172" pos:column="56"> <block pos:line="172" pos:column="57">{
	  <decl_stmt><decl><type><name pos:line="173" pos:column="11">char<pos:position pos:line="173" pos:column="15"/></name><modifier pos:line="173" pos:column="15">*<pos:position pos:line="173" pos:column="16"/></modifier></type> <name pos:line="173" pos:column="17">oldbase<pos:position pos:line="173" pos:column="24"/></name> <init pos:line="173" pos:column="25">= <expr><name><name pos:line="173" pos:column="27">sp<pos:position pos:line="173" pos:column="29"/></name><operator pos:line="173" pos:column="29">-&gt;<pos:position pos:line="173" pos:column="34"/></operator><name pos:line="173" pos:column="31">base<pos:position pos:line="173" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="173" pos:column="36"/></decl_stmt>
	  <expr_stmt><expr><name><name pos:line="174" pos:column="11">sp<pos:position pos:line="174" pos:column="13"/></name><operator pos:line="174" pos:column="13">-&gt;<pos:position pos:line="174" pos:column="18"/></operator><name pos:line="174" pos:column="15">base<pos:position pos:line="174" pos:column="19"/></name></name> <operator pos:line="174" pos:column="20">=<pos:position pos:line="174" pos:column="21"/></operator> <name pos:line="174" pos:column="22">tbase<pos:position pos:line="174" pos:column="27"/></name></expr>;<pos:position pos:line="174" pos:column="28"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="175" pos:column="11">sp<pos:position pos:line="175" pos:column="13"/></name><operator pos:line="175" pos:column="13">-&gt;<pos:position pos:line="175" pos:column="18"/></operator><name pos:line="175" pos:column="15">size<pos:position pos:line="175" pos:column="19"/></name></name> <operator pos:line="175" pos:column="20">+=<pos:position pos:line="175" pos:column="22"/></operator> <name pos:line="175" pos:column="23">tsize<pos:position pos:line="175" pos:column="28"/></name></expr>;<pos:position pos:line="175" pos:column="29"/></expr_stmt>
	  <return pos:line="176" pos:column="11">return <expr><call><name pos:line="176" pos:column="18">prepend_alloc<pos:position pos:line="176" pos:column="31"/></name><argument_list pos:line="176" pos:column="31">(<argument><expr><name pos:line="176" pos:column="32">m<pos:position pos:line="176" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="35">tbase<pos:position pos:line="176" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="42">oldbase<pos:position pos:line="176" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="51">nb<pos:position pos:line="176" pos:column="53"/></name></expr></argument>)<pos:position pos:line="176" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="55"/></return>
	}<pos:position pos:line="177" pos:column="10"/></block></then>
	<else pos:line="178" pos:column="9">else
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="179" pos:column="11">add_segment<pos:position pos:line="179" pos:column="22"/></name><argument_list pos:line="179" pos:column="22">(<argument><expr><name pos:line="179" pos:column="23">m<pos:position pos:line="179" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="26">tbase<pos:position pos:line="179" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="33">tsize<pos:position pos:line="179" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="40">mmap_flag<pos:position pos:line="179" pos:column="49"/></name></expr></argument>)<pos:position pos:line="179" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="51"/></expr_stmt></block></else></if>
      }<pos:position pos:line="180" pos:column="8"/></block></else></if>
    }<pos:position pos:line="181" pos:column="6"/></block></else></if>

    <if pos:line="183" pos:column="5">if <condition pos:line="183" pos:column="8">(<expr><name pos:line="183" pos:column="9">nb<pos:position pos:line="183" pos:column="11"/></name> <operator pos:line="183" pos:column="12">&lt;<pos:position pos:line="183" pos:column="16"/></operator> <name><name pos:line="183" pos:column="14">m<pos:position pos:line="183" pos:column="15"/></name><operator pos:line="183" pos:column="15">-&gt;<pos:position pos:line="183" pos:column="20"/></operator><name pos:line="183" pos:column="17">topsize<pos:position pos:line="183" pos:column="24"/></name></name></expr>)<pos:position pos:line="183" pos:column="25"/></condition><then pos:line="183" pos:column="25"> <block pos:line="183" pos:column="26">{ <comment type="block" pos:line="183" pos:column="28">/* Allocate from new or extended top space */</comment>
      <decl_stmt><decl><type><name pos:line="184" pos:column="7">size_t<pos:position pos:line="184" pos:column="13"/></name></type> <name pos:line="184" pos:column="14">rsize<pos:position pos:line="184" pos:column="19"/></name> <init pos:line="184" pos:column="20">= <expr><name><name pos:line="184" pos:column="22">m<pos:position pos:line="184" pos:column="23"/></name><operator pos:line="184" pos:column="23">-&gt;<pos:position pos:line="184" pos:column="28"/></operator><name pos:line="184" pos:column="25">topsize<pos:position pos:line="184" pos:column="32"/></name></name> <operator pos:line="184" pos:column="33">-=<pos:position pos:line="184" pos:column="35"/></operator> <name pos:line="184" pos:column="36">nb<pos:position pos:line="184" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="184" pos:column="39"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="185" pos:column="7">mchunkptr<pos:position pos:line="185" pos:column="16"/></name></type> <name pos:line="185" pos:column="17">p<pos:position pos:line="185" pos:column="18"/></name> <init pos:line="185" pos:column="19">= <expr><name><name pos:line="185" pos:column="21">m<pos:position pos:line="185" pos:column="22"/></name><operator pos:line="185" pos:column="22">-&gt;<pos:position pos:line="185" pos:column="27"/></operator><name pos:line="185" pos:column="24">top<pos:position pos:line="185" pos:column="27"/></name></name></expr></init></decl>;<pos:position pos:line="185" pos:column="28"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="186" pos:column="7">mchunkptr<pos:position pos:line="186" pos:column="16"/></name></type> <name pos:line="186" pos:column="17">r<pos:position pos:line="186" pos:column="18"/></name> <init pos:line="186" pos:column="19">= <expr><name><name pos:line="186" pos:column="21">m<pos:position pos:line="186" pos:column="22"/></name><operator pos:line="186" pos:column="22">-&gt;<pos:position pos:line="186" pos:column="27"/></operator><name pos:line="186" pos:column="24">top<pos:position pos:line="186" pos:column="27"/></name></name> <operator pos:line="186" pos:column="28">=<pos:position pos:line="186" pos:column="29"/></operator> <call><name pos:line="186" pos:column="30">chunk_plus_offset<pos:position pos:line="186" pos:column="47"/></name><argument_list pos:line="186" pos:column="47">(<argument><expr><name pos:line="186" pos:column="48">p<pos:position pos:line="186" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="51">nb<pos:position pos:line="186" pos:column="53"/></name></expr></argument>)<pos:position pos:line="186" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="186" pos:column="55"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="187" pos:column="7">r<pos:position pos:line="187" pos:column="8"/></name><operator pos:line="187" pos:column="8">-&gt;<pos:position pos:line="187" pos:column="13"/></operator><name pos:line="187" pos:column="10">head<pos:position pos:line="187" pos:column="14"/></name></name> <operator pos:line="187" pos:column="15">=<pos:position pos:line="187" pos:column="16"/></operator> <name pos:line="187" pos:column="17">rsize<pos:position pos:line="187" pos:column="22"/></name> <operator pos:line="187" pos:column="23">|<pos:position pos:line="187" pos:column="24"/></operator> <name pos:line="187" pos:column="25">PINUSE_BIT<pos:position pos:line="187" pos:column="35"/></name></expr>;<pos:position pos:line="187" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="188" pos:column="7">set_size_and_pinuse_of_inuse_chunk<pos:position pos:line="188" pos:column="41"/></name><argument_list pos:line="188" pos:column="41">(<argument><expr><name pos:line="188" pos:column="42">m<pos:position pos:line="188" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="45">p<pos:position pos:line="188" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="48">nb<pos:position pos:line="188" pos:column="50"/></name></expr></argument>)<pos:position pos:line="188" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="189" pos:column="7">check_top_chunk<pos:position pos:line="189" pos:column="22"/></name><argument_list pos:line="189" pos:column="22">(<argument><expr><name pos:line="189" pos:column="23">m<pos:position pos:line="189" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="26">m<pos:position pos:line="189" pos:column="27"/></name><operator pos:line="189" pos:column="27">-&gt;<pos:position pos:line="189" pos:column="32"/></operator><name pos:line="189" pos:column="29">top<pos:position pos:line="189" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="189" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="190" pos:column="7">check_malloced_chunk<pos:position pos:line="190" pos:column="27"/></name><argument_list pos:line="190" pos:column="27">(<argument><expr><name pos:line="190" pos:column="28">m<pos:position pos:line="190" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="190" pos:column="31">chunk2mem<pos:position pos:line="190" pos:column="40"/></name><argument_list pos:line="190" pos:column="40">(<argument><expr><name pos:line="190" pos:column="41">p<pos:position pos:line="190" pos:column="42"/></name></expr></argument>)<pos:position pos:line="190" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="190" pos:column="45">nb<pos:position pos:line="190" pos:column="47"/></name></expr></argument>)<pos:position pos:line="190" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="49"/></expr_stmt>
      <return pos:line="191" pos:column="7">return <expr><call><name pos:line="191" pos:column="14">chunk2mem<pos:position pos:line="191" pos:column="23"/></name><argument_list pos:line="191" pos:column="23">(<argument><expr><name pos:line="191" pos:column="24">p<pos:position pos:line="191" pos:column="25"/></name></expr></argument>)<pos:position pos:line="191" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="27"/></return>
    }<pos:position pos:line="192" pos:column="6"/></block></then></if>
  }<pos:position pos:line="193" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="195" pos:column="3">MALLOC_FAILURE_ACTION<pos:position pos:line="195" pos:column="24"/></name></expr>;<pos:position pos:line="195" pos:column="25"/></expr_stmt>
  <return pos:line="196" pos:column="3">return <expr><literal type="number" pos:line="196" pos:column="10">0<pos:position pos:line="196" pos:column="11"/></literal></expr>;<pos:position pos:line="196" pos:column="12"/></return>
}<pos:position pos:line="197" pos:column="2"/></block></function></unit>
