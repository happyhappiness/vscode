<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2647.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">check_pack_index_ptr<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">packed_git<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">p<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">void<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">vptr<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">unsigned<pos:position pos:line="3" pos:column="23"/></name> <name pos:line="3" pos:column="24">char<pos:position pos:line="3" pos:column="28"/></name> <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier></type><name pos:line="3" pos:column="30">ptr<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name pos:line="3" pos:column="36">vptr<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">unsigned<pos:position pos:line="4" pos:column="23"/></name> <name pos:line="4" pos:column="24">char<pos:position pos:line="4" pos:column="28"/></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">start<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><name><name pos:line="4" pos:column="38">p<pos:position pos:line="4" pos:column="39"/></name><operator pos:line="4" pos:column="39">-&gt;<pos:position pos:line="4" pos:column="44"/></operator><name pos:line="4" pos:column="41">index_data<pos:position pos:line="4" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">unsigned<pos:position pos:line="5" pos:column="23"/></name> <name pos:line="5" pos:column="24">char<pos:position pos:line="5" pos:column="28"/></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">end<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><name pos:line="5" pos:column="36">start<pos:position pos:line="5" pos:column="41"/></name> <operator pos:line="5" pos:column="42">+<pos:position pos:line="5" pos:column="43"/></operator> <name><name pos:line="5" pos:column="44">p<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">-&gt;<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="47">index_size<pos:position pos:line="5" pos:column="57"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="58"/></decl_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">ptr<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">&lt;<pos:position pos:line="6" pos:column="21"/></operator> <name pos:line="6" pos:column="19">start<pos:position pos:line="6" pos:column="24"/></name></expr>)<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">die<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><call><name pos:line="7" pos:column="21">_<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><literal type="string" pos:line="7" pos:column="23">"offset before start of pack index for %s (corrupt index?)"<pos:position pos:line="7" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="83"/></argument_list></call></expr></argument>,
		    <argument><expr><name><name pos:line="8" pos:column="21">p<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">-&gt;<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="24">pack_name<pos:position pos:line="8" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt></block></then></if>
	<comment type="block" pos:line="9" pos:column="9">/* No need to check for underflow; .idx files must be at least 8 bytes */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">ptr<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">&gt;=<pos:position pos:line="10" pos:column="22"/></operator> <name pos:line="10" pos:column="20">end<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">-<pos:position pos:line="10" pos:column="25"/></operator> <literal type="number" pos:line="10" pos:column="26">8<pos:position pos:line="10" pos:column="27"/></literal></expr>)<pos:position pos:line="10" pos:column="28"/></condition><then pos:line="10" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">die<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><call><name pos:line="11" pos:column="21">_<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><literal type="string" pos:line="11" pos:column="23">"offset beyond end of pack index for %s (truncated index?)"<pos:position pos:line="11" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="83"/></argument_list></call></expr></argument>,
		    <argument><expr><name><name pos:line="12" pos:column="21">p<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">-&gt;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="24">pack_name<pos:position pos:line="12" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt></block></then></if>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
