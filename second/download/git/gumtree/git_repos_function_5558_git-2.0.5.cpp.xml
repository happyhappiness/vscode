<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5558_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">peek_token_bracket<pos:position pos:line="3" pos:column="19"/></name> <parameter_list pos:line="3" pos:column="20">(<parameter><decl><type><name pos:line="3" pos:column="21">re_token_t<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">token<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="40">re_string_t<pos:position pos:line="3" pos:column="51"/></name> <modifier pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></modifier></type><name pos:line="3" pos:column="53">input<pos:position pos:line="3" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="60">reg_syntax_t<pos:position pos:line="3" pos:column="72"/></name></type> <name pos:line="3" pos:column="73">syntax<pos:position pos:line="3" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="80"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">c<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><call><name pos:line="6" pos:column="7">re_string_eoi<pos:position pos:line="6" pos:column="20"/></name> <argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">input<pos:position pos:line="6" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="29"/></condition><then pos:line="6" pos:column="29">
    <block pos:line="7" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="8" pos:column="7">token<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">type<pos:position pos:line="8" pos:column="18"/></name></name> <operator pos:line="8" pos:column="19">=<pos:position pos:line="8" pos:column="20"/></operator> <name pos:line="8" pos:column="21">END_OF_RE<pos:position pos:line="8" pos:column="30"/></name></expr>;<pos:position pos:line="8" pos:column="31"/></expr_stmt>
      <return pos:line="9" pos:column="7">return <expr><literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>;<pos:position pos:line="9" pos:column="16"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>
  <expr_stmt><expr><name pos:line="11" pos:column="3">c<pos:position pos:line="11" pos:column="4"/></name> <operator pos:line="11" pos:column="5">=<pos:position pos:line="11" pos:column="6"/></operator> <call><name pos:line="11" pos:column="7">re_string_peek_byte<pos:position pos:line="11" pos:column="26"/></name> <argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">input<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="35">0<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">token<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">-&gt;<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="10">opr<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">.<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">c<pos:position pos:line="12" pos:column="15"/></name></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <name pos:line="12" pos:column="18">c<pos:position pos:line="12" pos:column="19"/></name></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt>

<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="14" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name><name pos:line="15" pos:column="7">input<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">mb_cur_max<pos:position pos:line="15" pos:column="24"/></name></name> <operator pos:line="15" pos:column="25">&gt;<pos:position pos:line="15" pos:column="29"/></operator> <literal type="number" pos:line="15" pos:column="27">1<pos:position pos:line="15" pos:column="28"/></literal> <operator pos:line="15" pos:column="29">&amp;&amp;<pos:position pos:line="15" pos:column="39"/></operator>
      <operator pos:line="16" pos:column="7">!<pos:position pos:line="16" pos:column="8"/></operator><call><name pos:line="16" pos:column="8">re_string_first_byte<pos:position pos:line="16" pos:column="28"/></name> <argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">input<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="37">re_string_cur_idx<pos:position pos:line="16" pos:column="54"/></name> <argument_list pos:line="16" pos:column="55">(<argument><expr><name pos:line="16" pos:column="56">input<pos:position pos:line="16" pos:column="61"/></name></expr></argument>)<pos:position pos:line="16" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="64"/></condition><then pos:line="16" pos:column="64">
    <block pos:line="17" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="18" pos:column="7">token<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">type<pos:position pos:line="18" pos:column="18"/></name></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="21">CHARACTER<pos:position pos:line="18" pos:column="30"/></name></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>
      <return pos:line="19" pos:column="7">return <expr><literal type="number" pos:line="19" pos:column="14">1<pos:position pos:line="19" pos:column="15"/></literal></expr>;<pos:position pos:line="19" pos:column="16"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="21" pos:column="8">/* RE_ENABLE_I18N */</comment>

  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">c<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">==<pos:position pos:line="23" pos:column="11"/></operator> <literal type="char" pos:line="23" pos:column="12">'\\'<pos:position pos:line="23" pos:column="16"/></literal> <operator pos:line="23" pos:column="17">&amp;&amp;<pos:position pos:line="23" pos:column="27"/></operator> <operator pos:line="23" pos:column="20">(<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="21">syntax<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">&amp;<pos:position pos:line="23" pos:column="33"/></operator> <name pos:line="23" pos:column="30">RE_BACKSLASH_ESCAPE_IN_LISTS<pos:position pos:line="23" pos:column="58"/></name><operator pos:line="23" pos:column="58">)<pos:position pos:line="23" pos:column="59"/></operator>
      <operator pos:line="24" pos:column="7">&amp;&amp;<pos:position pos:line="24" pos:column="17"/></operator> <call><name pos:line="24" pos:column="10">re_string_cur_idx<pos:position pos:line="24" pos:column="27"/></name> <argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">input<pos:position pos:line="24" pos:column="34"/></name></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></call> <operator pos:line="24" pos:column="36">+<pos:position pos:line="24" pos:column="37"/></operator> <literal type="number" pos:line="24" pos:column="38">1<pos:position pos:line="24" pos:column="39"/></literal> <operator pos:line="24" pos:column="40">&lt;<pos:position pos:line="24" pos:column="44"/></operator> <call><name pos:line="24" pos:column="42">re_string_length<pos:position pos:line="24" pos:column="58"/></name> <argument_list pos:line="24" pos:column="59">(<argument><expr><name pos:line="24" pos:column="60">input<pos:position pos:line="24" pos:column="65"/></name></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="67"/></condition><then pos:line="24" pos:column="67">
    <block pos:line="25" pos:column="5">{
      <comment type="block" pos:line="26" pos:column="7">/* In this case, '\' escape a character.  */</comment>
      <decl_stmt><decl><type><name pos:line="27" pos:column="7">unsigned<pos:position pos:line="27" pos:column="15"/></name> <name pos:line="27" pos:column="16">char<pos:position pos:line="27" pos:column="20"/></name></type> <name pos:line="27" pos:column="21">c2<pos:position pos:line="27" pos:column="23"/></name></decl>;<pos:position pos:line="27" pos:column="24"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">re_string_skip_bytes<pos:position pos:line="28" pos:column="27"/></name> <argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">input<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="36">1<pos:position pos:line="28" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name pos:line="29" pos:column="7">c2<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">=<pos:position pos:line="29" pos:column="11"/></operator> <call><name pos:line="29" pos:column="12">re_string_peek_byte<pos:position pos:line="29" pos:column="31"/></name> <argument_list pos:line="29" pos:column="32">(<argument><expr><name pos:line="29" pos:column="33">input<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="40">0<pos:position pos:line="29" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="30" pos:column="7">token<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">opr<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">.<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">c<pos:position pos:line="30" pos:column="19"/></name></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <name pos:line="30" pos:column="22">c2<pos:position pos:line="30" pos:column="24"/></name></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="31" pos:column="7">token<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">-&gt;<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="14">type<pos:position pos:line="31" pos:column="18"/></name></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="21">CHARACTER<pos:position pos:line="31" pos:column="30"/></name></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
      <return pos:line="32" pos:column="7">return <expr><literal type="number" pos:line="32" pos:column="14">1<pos:position pos:line="32" pos:column="15"/></literal></expr>;<pos:position pos:line="32" pos:column="16"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><name pos:line="34" pos:column="7">c<pos:position pos:line="34" pos:column="8"/></name> <operator pos:line="34" pos:column="9">==<pos:position pos:line="34" pos:column="11"/></operator> <literal type="char" pos:line="34" pos:column="12">'['<pos:position pos:line="34" pos:column="15"/></literal></expr>)<pos:position pos:line="34" pos:column="16"/></condition><then pos:line="34" pos:column="16"> <comment type="block" pos:line="34" pos:column="17">/* '[' is a special char in a bracket exps.  */</comment>
    <block pos:line="35" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="36" pos:column="7">unsigned<pos:position pos:line="36" pos:column="15"/></name> <name pos:line="36" pos:column="16">char<pos:position pos:line="36" pos:column="20"/></name></type> <name pos:line="36" pos:column="21">c2<pos:position pos:line="36" pos:column="23"/></name></decl>;<pos:position pos:line="36" pos:column="24"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="37" pos:column="7">int<pos:position pos:line="37" pos:column="10"/></name></type> <name pos:line="37" pos:column="11">token_len<pos:position pos:line="37" pos:column="20"/></name></decl>;<pos:position pos:line="37" pos:column="21"/></decl_stmt>
      <if pos:line="38" pos:column="7">if <condition pos:line="38" pos:column="10">(<expr><call><name pos:line="38" pos:column="11">re_string_cur_idx<pos:position pos:line="38" pos:column="28"/></name> <argument_list pos:line="38" pos:column="29">(<argument><expr><name pos:line="38" pos:column="30">input<pos:position pos:line="38" pos:column="35"/></name></expr></argument>)<pos:position pos:line="38" pos:column="36"/></argument_list></call> <operator pos:line="38" pos:column="37">+<pos:position pos:line="38" pos:column="38"/></operator> <literal type="number" pos:line="38" pos:column="39">1<pos:position pos:line="38" pos:column="40"/></literal> <operator pos:line="38" pos:column="41">&lt;<pos:position pos:line="38" pos:column="45"/></operator> <call><name pos:line="38" pos:column="43">re_string_length<pos:position pos:line="38" pos:column="59"/></name> <argument_list pos:line="38" pos:column="60">(<argument><expr><name pos:line="38" pos:column="61">input<pos:position pos:line="38" pos:column="66"/></name></expr></argument>)<pos:position pos:line="38" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="68"/></condition><then pos:line="38" pos:column="68">
	<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="9">c2<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <call><name pos:line="39" pos:column="14">re_string_peek_byte<pos:position pos:line="39" pos:column="33"/></name> <argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">input<pos:position pos:line="39" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="42">1<pos:position pos:line="39" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt></block></then>
      <else pos:line="40" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="9">c2<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">=<pos:position pos:line="41" pos:column="13"/></operator> <literal type="number" pos:line="41" pos:column="14">0<pos:position pos:line="41" pos:column="15"/></literal></expr>;<pos:position pos:line="41" pos:column="16"/></expr_stmt></block></else></if>
      <expr_stmt><expr><name><name pos:line="42" pos:column="7">token<pos:position pos:line="42" pos:column="12"/></name><operator pos:line="42" pos:column="12">-&gt;<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="14">opr<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">.<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">c<pos:position pos:line="42" pos:column="19"/></name></name> <operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator> <name pos:line="42" pos:column="22">c2<pos:position pos:line="42" pos:column="24"/></name></expr>;<pos:position pos:line="42" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name pos:line="43" pos:column="7">token_len<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <literal type="number" pos:line="43" pos:column="19">2<pos:position pos:line="43" pos:column="20"/></literal></expr>;<pos:position pos:line="43" pos:column="21"/></expr_stmt>
      <switch pos:line="44" pos:column="7">switch <condition pos:line="44" pos:column="14">(<expr><name pos:line="44" pos:column="15">c2<pos:position pos:line="44" pos:column="17"/></name></expr>)<pos:position pos:line="44" pos:column="18"/></condition>
	<block pos:line="45" pos:column="9">{
	<case pos:line="46" pos:column="9">case <expr><literal type="char" pos:line="46" pos:column="14">'.'<pos:position pos:line="46" pos:column="17"/></literal></expr>:<pos:position pos:line="46" pos:column="18"/></case>
	  <expr_stmt><expr><name><name pos:line="47" pos:column="11">token<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">-&gt;<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="18">type<pos:position pos:line="47" pos:column="22"/></name></name> <operator pos:line="47" pos:column="23">=<pos:position pos:line="47" pos:column="24"/></operator> <name pos:line="47" pos:column="25">OP_OPEN_COLL_ELEM<pos:position pos:line="47" pos:column="42"/></name></expr>;<pos:position pos:line="47" pos:column="43"/></expr_stmt>
	  <break pos:line="48" pos:column="11">break;<pos:position pos:line="48" pos:column="17"/></break>
	<case pos:line="49" pos:column="9">case <expr><literal type="char" pos:line="49" pos:column="14">'='<pos:position pos:line="49" pos:column="17"/></literal></expr>:<pos:position pos:line="49" pos:column="18"/></case>
	  <expr_stmt><expr><name><name pos:line="50" pos:column="11">token<pos:position pos:line="50" pos:column="16"/></name><operator pos:line="50" pos:column="16">-&gt;<pos:position pos:line="50" pos:column="21"/></operator><name pos:line="50" pos:column="18">type<pos:position pos:line="50" pos:column="22"/></name></name> <operator pos:line="50" pos:column="23">=<pos:position pos:line="50" pos:column="24"/></operator> <name pos:line="50" pos:column="25">OP_OPEN_EQUIV_CLASS<pos:position pos:line="50" pos:column="44"/></name></expr>;<pos:position pos:line="50" pos:column="45"/></expr_stmt>
	  <break pos:line="51" pos:column="11">break;<pos:position pos:line="51" pos:column="17"/></break>
	<case pos:line="52" pos:column="9">case <expr><literal type="char" pos:line="52" pos:column="14">':'<pos:position pos:line="52" pos:column="17"/></literal></expr>:<pos:position pos:line="52" pos:column="18"/></case>
	  <if pos:line="53" pos:column="11">if <condition pos:line="53" pos:column="14">(<expr><name pos:line="53" pos:column="15">syntax<pos:position pos:line="53" pos:column="21"/></name> <operator pos:line="53" pos:column="22">&amp;<pos:position pos:line="53" pos:column="27"/></operator> <name pos:line="53" pos:column="24">RE_CHAR_CLASSES<pos:position pos:line="53" pos:column="39"/></name></expr>)<pos:position pos:line="53" pos:column="40"/></condition><then pos:line="53" pos:column="40">
	    <block pos:line="54" pos:column="13">{
	      <expr_stmt><expr><name><name pos:line="55" pos:column="15">token<pos:position pos:line="55" pos:column="20"/></name><operator pos:line="55" pos:column="20">-&gt;<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="22">type<pos:position pos:line="55" pos:column="26"/></name></name> <operator pos:line="55" pos:column="27">=<pos:position pos:line="55" pos:column="28"/></operator> <name pos:line="55" pos:column="29">OP_OPEN_CHAR_CLASS<pos:position pos:line="55" pos:column="47"/></name></expr>;<pos:position pos:line="55" pos:column="48"/></expr_stmt>
	      <break pos:line="56" pos:column="15">break;<pos:position pos:line="56" pos:column="21"/></break>
	    }<pos:position pos:line="57" pos:column="14"/></block></then></if>
	  <comment type="block" pos:line="58" pos:column="11">/* else fall through.  */</comment>
	<default pos:line="59" pos:column="9">default:<pos:position pos:line="59" pos:column="17"/></default>
	  <expr_stmt><expr><name><name pos:line="60" pos:column="11">token<pos:position pos:line="60" pos:column="16"/></name><operator pos:line="60" pos:column="16">-&gt;<pos:position pos:line="60" pos:column="21"/></operator><name pos:line="60" pos:column="18">type<pos:position pos:line="60" pos:column="22"/></name></name> <operator pos:line="60" pos:column="23">=<pos:position pos:line="60" pos:column="24"/></operator> <name pos:line="60" pos:column="25">CHARACTER<pos:position pos:line="60" pos:column="34"/></name></expr>;<pos:position pos:line="60" pos:column="35"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="61" pos:column="11">token<pos:position pos:line="61" pos:column="16"/></name><operator pos:line="61" pos:column="16">-&gt;<pos:position pos:line="61" pos:column="21"/></operator><name pos:line="61" pos:column="18">opr<pos:position pos:line="61" pos:column="21"/></name><operator pos:line="61" pos:column="21">.<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="22">c<pos:position pos:line="61" pos:column="23"/></name></name> <operator pos:line="61" pos:column="24">=<pos:position pos:line="61" pos:column="25"/></operator> <name pos:line="61" pos:column="26">c<pos:position pos:line="61" pos:column="27"/></name></expr>;<pos:position pos:line="61" pos:column="28"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="62" pos:column="11">token_len<pos:position pos:line="62" pos:column="20"/></name> <operator pos:line="62" pos:column="21">=<pos:position pos:line="62" pos:column="22"/></operator> <literal type="number" pos:line="62" pos:column="23">1<pos:position pos:line="62" pos:column="24"/></literal></expr>;<pos:position pos:line="62" pos:column="25"/></expr_stmt>
	  <break pos:line="63" pos:column="11">break;<pos:position pos:line="63" pos:column="17"/></break>
	}<pos:position pos:line="64" pos:column="10"/></block></switch>
      <return pos:line="65" pos:column="7">return <expr><name pos:line="65" pos:column="14">token_len<pos:position pos:line="65" pos:column="23"/></name></expr>;<pos:position pos:line="65" pos:column="24"/></return>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>
  <switch pos:line="67" pos:column="3">switch <condition pos:line="67" pos:column="10">(<expr><name pos:line="67" pos:column="11">c<pos:position pos:line="67" pos:column="12"/></name></expr>)<pos:position pos:line="67" pos:column="13"/></condition>
    <block pos:line="68" pos:column="5">{
    <case pos:line="69" pos:column="5">case <expr><literal type="char" pos:line="69" pos:column="10">'-'<pos:position pos:line="69" pos:column="13"/></literal></expr>:<pos:position pos:line="69" pos:column="14"/></case>
      <expr_stmt><expr><name><name pos:line="70" pos:column="7">token<pos:position pos:line="70" pos:column="12"/></name><operator pos:line="70" pos:column="12">-&gt;<pos:position pos:line="70" pos:column="17"/></operator><name pos:line="70" pos:column="14">type<pos:position pos:line="70" pos:column="18"/></name></name> <operator pos:line="70" pos:column="19">=<pos:position pos:line="70" pos:column="20"/></operator> <name pos:line="70" pos:column="21">OP_CHARSET_RANGE<pos:position pos:line="70" pos:column="37"/></name></expr>;<pos:position pos:line="70" pos:column="38"/></expr_stmt>
      <break pos:line="71" pos:column="7">break;<pos:position pos:line="71" pos:column="13"/></break>
    <case pos:line="72" pos:column="5">case <expr><literal type="char" pos:line="72" pos:column="10">']'<pos:position pos:line="72" pos:column="13"/></literal></expr>:<pos:position pos:line="72" pos:column="14"/></case>
      <expr_stmt><expr><name><name pos:line="73" pos:column="7">token<pos:position pos:line="73" pos:column="12"/></name><operator pos:line="73" pos:column="12">-&gt;<pos:position pos:line="73" pos:column="17"/></operator><name pos:line="73" pos:column="14">type<pos:position pos:line="73" pos:column="18"/></name></name> <operator pos:line="73" pos:column="19">=<pos:position pos:line="73" pos:column="20"/></operator> <name pos:line="73" pos:column="21">OP_CLOSE_BRACKET<pos:position pos:line="73" pos:column="37"/></name></expr>;<pos:position pos:line="73" pos:column="38"/></expr_stmt>
      <break pos:line="74" pos:column="7">break;<pos:position pos:line="74" pos:column="13"/></break>
    <case pos:line="75" pos:column="5">case <expr><literal type="char" pos:line="75" pos:column="10">'^'<pos:position pos:line="75" pos:column="13"/></literal></expr>:<pos:position pos:line="75" pos:column="14"/></case>
      <expr_stmt><expr><name><name pos:line="76" pos:column="7">token<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">-&gt;<pos:position pos:line="76" pos:column="17"/></operator><name pos:line="76" pos:column="14">type<pos:position pos:line="76" pos:column="18"/></name></name> <operator pos:line="76" pos:column="19">=<pos:position pos:line="76" pos:column="20"/></operator> <name pos:line="76" pos:column="21">OP_NON_MATCH_LIST<pos:position pos:line="76" pos:column="38"/></name></expr>;<pos:position pos:line="76" pos:column="39"/></expr_stmt>
      <break pos:line="77" pos:column="7">break;<pos:position pos:line="77" pos:column="13"/></break>
    <default pos:line="78" pos:column="5">default:<pos:position pos:line="78" pos:column="13"/></default>
      <expr_stmt><expr><name><name pos:line="79" pos:column="7">token<pos:position pos:line="79" pos:column="12"/></name><operator pos:line="79" pos:column="12">-&gt;<pos:position pos:line="79" pos:column="17"/></operator><name pos:line="79" pos:column="14">type<pos:position pos:line="79" pos:column="18"/></name></name> <operator pos:line="79" pos:column="19">=<pos:position pos:line="79" pos:column="20"/></operator> <name pos:line="79" pos:column="21">CHARACTER<pos:position pos:line="79" pos:column="30"/></name></expr>;<pos:position pos:line="79" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="80" pos:column="6"/></block></switch>
  <return pos:line="81" pos:column="3">return <expr><literal type="number" pos:line="81" pos:column="10">1<pos:position pos:line="81" pos:column="11"/></literal></expr>;<pos:position pos:line="81" pos:column="12"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
