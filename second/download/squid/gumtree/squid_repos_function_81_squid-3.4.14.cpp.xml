<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_81_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">filelevel<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">( <parameter><decl><type><specifier pos:line="2" pos:column="12">const<pos:position pos:line="2" pos:column="17"/></specifier> <name pos:line="2" pos:column="18">char<pos:position pos:line="2" pos:column="22"/></name><modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type> <name pos:line="2" pos:column="24">directory<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">REList<pos:position pos:line="2" pos:column="47"/></name><modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type> <name pos:line="2" pos:column="49">list<pos:position pos:line="2" pos:column="53"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="55"/></parameter_list>
<comment type="line" pos:line="3" pos:column="1">// purpose: from given starting point, look for squid xxxxxxxx files.</comment>
<comment type="line" pos:line="4" pos:column="1">// example: "/var/spool/cache/08/7F" as input, do action over files</comment>
<comment type="line" pos:line="5" pos:column="1">// paramtr: directory (IN): starting point</comment>
<comment type="line" pos:line="6" pos:column="1">//          list (IN): list of rexps to match URLs against</comment>
<comment type="line" pos:line="7" pos:column="1">// returns: true, if every subdir &amp;&amp; action was successful.</comment>
<block pos:line="8" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">dirent_t<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type> <name pos:line="9" pos:column="16">entry<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">( <expr><name pos:line="10" pos:column="10">debugFlag<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">&amp;<pos:position pos:line="10" pos:column="25"/></operator> <literal type="number" pos:line="10" pos:column="22">0x01<pos:position pos:line="10" pos:column="26"/></literal></expr> )<pos:position pos:line="10" pos:column="28"/></condition><then pos:line="10" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="9">fprintf<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">( <argument><expr><name pos:line="11" pos:column="18">stderr<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="26">"# [2] %s\n"<pos:position pos:line="11" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">directory<pos:position pos:line="11" pos:column="49"/></name></expr></argument> )<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">DIR<pos:position pos:line="13" pos:column="8"/></name><modifier pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></modifier></type> <name pos:line="13" pos:column="10">dir<pos:position pos:line="13" pos:column="13"/></name> <init pos:line="13" pos:column="14">= <expr><call><name pos:line="13" pos:column="16">opendir<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">( <argument><expr><name pos:line="13" pos:column="25">directory<pos:position pos:line="13" pos:column="34"/></name></expr></argument> )<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="37"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">( <expr><name pos:line="14" pos:column="10">dir<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">==<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">NULL<pos:position pos:line="14" pos:column="21"/></name></expr> )<pos:position pos:line="14" pos:column="23"/></condition><then pos:line="14" pos:column="23"> <block pos:line="14" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">fprintf<pos:position pos:line="15" pos:column="16"/></name><argument_list pos:line="15" pos:column="16">( <argument><expr><name pos:line="15" pos:column="18">stderr<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="26">"unable to open directory \"%s\": %s\n"<pos:position pos:line="15" pos:column="65"/></literal></expr></argument>,
                 <argument><expr><name pos:line="16" pos:column="18">directory<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="29">strerror<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">errno<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr></argument> )<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
        <return pos:line="17" pos:column="9">return <expr><literal type="boolean" pos:line="17" pos:column="16">false<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="20" pos:column="5">// display a rotating character as "i am alive" signal (slows purge).</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">( <expr><name><operator pos:line="21" pos:column="10">::<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="12">iamalive<pos:position pos:line="21" pos:column="20"/></name></name></expr> )<pos:position pos:line="21" pos:column="22"/></condition><then pos:line="21" pos:column="22"> <block pos:line="21" pos:column="23">{
        <decl_stmt><decl><specifier pos:line="22" pos:column="9">static<pos:position pos:line="22" pos:column="15"/></specifier> <type><name pos:line="22" pos:column="16">char<pos:position pos:line="22" pos:column="20"/></name></type> <name><name pos:line="22" pos:column="21">alivelist<pos:position pos:line="22" pos:column="30"/></name><index pos:line="22" pos:column="30">[<expr><literal type="number" pos:line="22" pos:column="31">4<pos:position pos:line="22" pos:column="32"/></literal></expr>]<pos:position pos:line="22" pos:column="33"/></index><index pos:line="22" pos:column="33">[<expr><literal type="number" pos:line="22" pos:column="34">3<pos:position pos:line="22" pos:column="35"/></literal></expr>]<pos:position pos:line="22" pos:column="36"/></index></name> <init pos:line="22" pos:column="37">= <expr><block pos:line="22" pos:column="39">{ <expr><literal type="string" pos:line="22" pos:column="41">"\\\b"<pos:position pos:line="22" pos:column="47"/></literal></expr>, <expr><literal type="string" pos:line="22" pos:column="49">"|\b"<pos:position pos:line="22" pos:column="54"/></literal></expr>, <expr><literal type="string" pos:line="22" pos:column="56">"/\b"<pos:position pos:line="22" pos:column="61"/></literal></expr>, <expr><literal type="string" pos:line="22" pos:column="63">"-\b"<pos:position pos:line="22" pos:column="68"/></literal></expr> }<pos:position pos:line="22" pos:column="70"/></block></expr></init></decl>;<pos:position pos:line="22" pos:column="71"/></decl_stmt>
        <decl_stmt><decl><specifier pos:line="23" pos:column="9">static<pos:position pos:line="23" pos:column="15"/></specifier> <type><name pos:line="23" pos:column="16">unsigned<pos:position pos:line="23" pos:column="24"/></name> <name pos:line="23" pos:column="25">short<pos:position pos:line="23" pos:column="30"/></name></type> <name pos:line="23" pos:column="31">alivecount<pos:position pos:line="23" pos:column="41"/></name> <init pos:line="23" pos:column="42">= <expr><literal type="number" pos:line="23" pos:column="44">0<pos:position pos:line="23" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="46"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">const<pos:position pos:line="24" pos:column="14"/></specifier> <name pos:line="24" pos:column="15">int<pos:position pos:line="24" pos:column="18"/></name></type> <name pos:line="24" pos:column="19">write_success<pos:position pos:line="24" pos:column="32"/></name> <init pos:line="24" pos:column="33">= <expr><call><name pos:line="24" pos:column="35">write<pos:position pos:line="24" pos:column="40"/></name><argument_list pos:line="24" pos:column="40">(<argument><expr><name pos:line="24" pos:column="41">STDOUT_FILENO<pos:position pos:line="24" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="56">alivelist<pos:position pos:line="24" pos:column="65"/></name><index pos:line="24" pos:column="65">[<expr><name pos:line="24" pos:column="66">alivecount<pos:position pos:line="24" pos:column="76"/></name><operator pos:line="24" pos:column="76">++<pos:position pos:line="24" pos:column="78"/></operator> <operator pos:line="24" pos:column="79">&amp;<pos:position pos:line="24" pos:column="84"/></operator> <literal type="number" pos:line="24" pos:column="81">3<pos:position pos:line="24" pos:column="82"/></literal></expr>]<pos:position pos:line="24" pos:column="83"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="85">2<pos:position pos:line="24" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="87"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="88"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">assert<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">write_success<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">==<pos:position pos:line="25" pos:column="32"/></operator> <literal type="number" pos:line="25" pos:column="33">2<pos:position pos:line="25" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="28" pos:column="5">bool<pos:position pos:line="28" pos:column="9"/></name></type> <name pos:line="28" pos:column="10">flag<pos:position pos:line="28" pos:column="14"/></name> <init pos:line="28" pos:column="15">= <expr><literal type="boolean" pos:line="28" pos:column="17">true<pos:position pos:line="28" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="22"/></decl_stmt>
    <while pos:line="29" pos:column="5">while <condition pos:line="29" pos:column="11">( <expr><operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">entry<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator><call><name pos:line="29" pos:column="20">readdir<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">dir<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call><operator pos:line="29" pos:column="32">)<pos:position pos:line="29" pos:column="33"/></operator> <operator pos:line="29" pos:column="34">&amp;&amp;<pos:position pos:line="29" pos:column="44"/></operator> <name pos:line="29" pos:column="37">flag<pos:position pos:line="29" pos:column="41"/></name></expr> )<pos:position pos:line="29" pos:column="43"/></condition> <block pos:line="29" pos:column="44">{
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">( <expr><call><name pos:line="30" pos:column="14">isxstring<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><name><name pos:line="30" pos:column="24">entry<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">-&gt;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="31">d_name<pos:position pos:line="30" pos:column="37"/></name></name></expr></argument>,<argument><expr><literal type="number" pos:line="30" pos:column="38">8<pos:position pos:line="30" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call></expr> )<pos:position pos:line="30" pos:column="42"/></condition><then pos:line="30" pos:column="42"> <block pos:line="30" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">char<pos:position pos:line="31" pos:column="17"/></name><modifier pos:line="31" pos:column="17">*<pos:position pos:line="31" pos:column="18"/></modifier></type> <name pos:line="31" pos:column="19">name<pos:position pos:line="31" pos:column="23"/></name> <init pos:line="31" pos:column="24">= <expr><call><name pos:line="31" pos:column="26">concat<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">( <argument><expr><name pos:line="31" pos:column="34">directory<pos:position pos:line="31" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="45">"/"<pos:position pos:line="31" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="50">entry<pos:position pos:line="31" pos:column="55"/></name><operator pos:line="31" pos:column="55">-&gt;<pos:position pos:line="31" pos:column="60"/></operator><name pos:line="31" pos:column="57">d_name<pos:position pos:line="31" pos:column="63"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="65">0<pos:position pos:line="31" pos:column="66"/></literal></expr></argument> )<pos:position pos:line="31" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="69"/></decl_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">flag<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">=<pos:position pos:line="32" pos:column="19"/></operator> <call><name pos:line="32" pos:column="20">match<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">( <argument><expr><name pos:line="32" pos:column="27">name<pos:position pos:line="32" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="33">list<pos:position pos:line="32" pos:column="37"/></name></expr></argument> )<pos:position pos:line="32" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="33" pos:column="13">delete<pos:position pos:line="33" pos:column="19"/></operator><index pos:line="33" pos:column="19">[]<pos:position pos:line="33" pos:column="21"/></index> <name pos:line="33" pos:column="22">name<pos:position pos:line="33" pos:column="26"/></name></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">closedir<pos:position pos:line="37" pos:column="13"/></name><argument_list pos:line="37" pos:column="13">(<argument><expr><name pos:line="37" pos:column="14">dir<pos:position pos:line="37" pos:column="17"/></name></expr></argument>)<pos:position pos:line="37" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt>
    <return pos:line="38" pos:column="5">return <expr><name pos:line="38" pos:column="12">flag<pos:position pos:line="38" pos:column="16"/></name></expr>;<pos:position pos:line="38" pos:column="17"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
