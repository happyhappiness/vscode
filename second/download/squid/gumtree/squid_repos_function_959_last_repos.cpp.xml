<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_959_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">PeerPoolMgr<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">openNewConnection<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">()<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// KISS: Do nothing else when we are already doing something.</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">opener<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">!=<pos:position pos:line="5" pos:column="18"/></operator> <name pos:line="5" pos:column="19">NULL<pos:position pos:line="5" pos:column="23"/></name> <operator pos:line="5" pos:column="24">||<pos:position pos:line="5" pos:column="26"/></operator> <name pos:line="5" pos:column="27">securer<pos:position pos:line="5" pos:column="34"/></name> <operator pos:line="5" pos:column="35">!=<pos:position pos:line="5" pos:column="37"/></operator> <name pos:line="5" pos:column="38">NULL<pos:position pos:line="5" pos:column="42"/></name> <operator pos:line="5" pos:column="43">||<pos:position pos:line="5" pos:column="45"/></operator> <name pos:line="5" pos:column="46">shutting_down<pos:position pos:line="5" pos:column="59"/></name></expr>)<pos:position pos:line="5" pos:column="60"/></condition><then pos:line="5" pos:column="60"> <block pos:line="5" pos:column="61">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">48<pos:position pos:line="6" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="20">7<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="23">"busy: "<pos:position pos:line="6" pos:column="31"/></literal> <operator pos:line="6" pos:column="32">&lt;&lt;<pos:position pos:line="6" pos:column="40"/></operator> <name pos:line="6" pos:column="35">opener<pos:position pos:line="6" pos:column="41"/></name> <operator pos:line="6" pos:column="42">&lt;&lt;<pos:position pos:line="6" pos:column="50"/></operator> <literal type="char" pos:line="6" pos:column="45">'|'<pos:position pos:line="6" pos:column="48"/></literal> <operator pos:line="6" pos:column="49">&lt;&lt;<pos:position pos:line="6" pos:column="57"/></operator> <name pos:line="6" pos:column="52">securer<pos:position pos:line="6" pos:column="59"/></name> <operator pos:line="6" pos:column="60">&lt;&lt;<pos:position pos:line="6" pos:column="68"/></operator> <literal type="char" pos:line="6" pos:column="63">'|'<pos:position pos:line="6" pos:column="66"/></literal> <operator pos:line="6" pos:column="67">&lt;&lt;<pos:position pos:line="6" pos:column="75"/></operator> <name pos:line="6" pos:column="70">shutting_down<pos:position pos:line="6" pos:column="83"/></name></expr></argument>)<pos:position pos:line="6" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="85"/></expr_stmt>
        <return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return> <comment type="line" pos:line="7" pos:column="17">// there will be another checkpoint when we are done opening/securing</comment>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="10" pos:column="5">// Do not talk to a peer until it is ready.</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name pos:line="11" pos:column="10">neighborUp<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">peer<pos:position pos:line="11" pos:column="25"/></name></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27"> <comment type="line" pos:line="11" pos:column="28">// provides debugging</comment>
        <block type="pseudo"><return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="12" pos:column="17">// there will be another checkpoint when peer is up</comment>

    <comment type="line" pos:line="14" pos:column="5">// Do not violate peer limits.</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><call><name pos:line="15" pos:column="10">peerCanOpenMore<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">peer<pos:position pos:line="15" pos:column="30"/></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="32"/></condition><then pos:line="15" pos:column="32"> <block pos:line="15" pos:column="33">{ <comment type="line" pos:line="15" pos:column="35">// provides debugging</comment>
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">peer<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">standby<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">.<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">waitingForClose<pos:position pos:line="16" pos:column="38"/></name></name> <operator pos:line="16" pos:column="39">=<pos:position pos:line="16" pos:column="40"/></operator> <literal type="boolean" pos:line="16" pos:column="41">true<pos:position pos:line="16" pos:column="45"/></literal></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt> <comment type="line" pos:line="16" pos:column="47">// may already be true</comment>
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return> <comment type="line" pos:line="17" pos:column="17">// there will be another checkpoint when a peer conn closes</comment>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="20" pos:column="5">// Do not violate global restrictions.</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">fdUsageHigh<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">()<pos:position pos:line="21" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="23"/></condition><then pos:line="21" pos:column="23"> <block pos:line="21" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">debugs<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><literal type="number" pos:line="22" pos:column="16">48<pos:position pos:line="22" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="20">7<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="23">"overwhelmed"<pos:position pos:line="22" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">peer<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">standby<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">.<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="23">waitingForClose<pos:position pos:line="23" pos:column="38"/></name></name> <operator pos:line="23" pos:column="39">=<pos:position pos:line="23" pos:column="40"/></operator> <literal type="boolean" pos:line="23" pos:column="41">true<pos:position pos:line="23" pos:column="45"/></literal></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt> <comment type="line" pos:line="23" pos:column="47">// may already be true</comment>
        <comment type="line" pos:line="24" pos:column="9">// There will be another checkpoint when a peer conn closes OR when</comment>
        <comment type="line" pos:line="25" pos:column="9">// a future pop() fails due to an empty pool. See PconnPool::pop().</comment>
        <return pos:line="26" pos:column="9">return;<pos:position pos:line="26" pos:column="16"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="29" pos:column="5">peer<pos:position pos:line="29" pos:column="9"/></name><operator pos:line="29" pos:column="9">-&gt;<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="11">standby<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">.<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">waitingForClose<pos:position pos:line="29" pos:column="34"/></name></name> <operator pos:line="29" pos:column="35">=<pos:position pos:line="29" pos:column="36"/></operator> <literal type="boolean" pos:line="29" pos:column="37">false<pos:position pos:line="29" pos:column="42"/></literal></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="31" pos:column="5">Comm<pos:position pos:line="31" pos:column="9"/></name><operator pos:line="31" pos:column="9">::<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="11">ConnectionPointer<pos:position pos:line="31" pos:column="28"/></name></name></type> <name pos:line="31" pos:column="29">conn<pos:position pos:line="31" pos:column="33"/></name> <init pos:line="31" pos:column="34">= <expr><operator pos:line="31" pos:column="36">new<pos:position pos:line="31" pos:column="39"/></operator> <name><name pos:line="31" pos:column="40">Comm<pos:position pos:line="31" pos:column="44"/></name><operator pos:line="31" pos:column="44">::<pos:position pos:line="31" pos:column="46"/></operator><name pos:line="31" pos:column="46">Connection<pos:position pos:line="31" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="31" pos:column="57"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">Must<pos:position pos:line="32" pos:column="9"/></name><argument_list pos:line="32" pos:column="9">(<argument><expr><name><name pos:line="32" pos:column="10">peer<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">-&gt;<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="16">n_addresses<pos:position pos:line="32" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt> <comment type="line" pos:line="32" pos:column="30">// guaranteed by neighborUp() above</comment>
    <comment type="line" pos:line="33" pos:column="5">// cycle through all available IP addresses</comment>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">conn<pos:position pos:line="34" pos:column="9"/></name><operator pos:line="34" pos:column="9">-&gt;<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="11">remote<pos:position pos:line="34" pos:column="17"/></name></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <name><name pos:line="34" pos:column="20">peer<pos:position pos:line="34" pos:column="24"/></name><operator pos:line="34" pos:column="24">-&gt;<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="26">addresses<pos:position pos:line="34" pos:column="35"/></name><index pos:line="34" pos:column="35">[<expr><name pos:line="34" pos:column="36">addrUsed<pos:position pos:line="34" pos:column="44"/></name><operator pos:line="34" pos:column="44">++<pos:position pos:line="34" pos:column="46"/></operator> <operator pos:line="34" pos:column="47">%<pos:position pos:line="34" pos:column="48"/></operator> <name><name pos:line="34" pos:column="49">peer<pos:position pos:line="34" pos:column="53"/></name><operator pos:line="34" pos:column="53">-&gt;<pos:position pos:line="34" pos:column="58"/></operator><name pos:line="34" pos:column="55">n_addresses<pos:position pos:line="34" pos:column="66"/></name></name></expr>]<pos:position pos:line="34" pos:column="67"/></index></name></expr>;<pos:position pos:line="34" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="35" pos:column="5">conn<pos:position pos:line="35" pos:column="9"/></name><operator pos:line="35" pos:column="9">-&gt;<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="11">remote<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">.<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="18">port<pos:position pos:line="35" pos:column="22"/></name></name><argument_list pos:line="35" pos:column="22">(<argument><expr><name><name pos:line="35" pos:column="23">peer<pos:position pos:line="35" pos:column="27"/></name><operator pos:line="35" pos:column="27">-&gt;<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="29">http_port<pos:position pos:line="35" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">conn<pos:position pos:line="36" pos:column="9"/></name><operator pos:line="36" pos:column="9">-&gt;<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="11">peerType<pos:position pos:line="36" pos:column="19"/></name></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <name pos:line="36" pos:column="22">STANDBY_POOL<pos:position pos:line="36" pos:column="34"/></name></expr>;<pos:position pos:line="36" pos:column="35"/></expr_stmt> <comment type="line" pos:line="36" pos:column="36">// should be reset by peerSelect()</comment>
    <expr_stmt><expr><call><name><name pos:line="37" pos:column="5">conn<pos:position pos:line="37" pos:column="9"/></name><operator pos:line="37" pos:column="9">-&gt;<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="11">setPeer<pos:position pos:line="37" pos:column="18"/></name></name><argument_list pos:line="37" pos:column="18">(<argument><expr><name pos:line="37" pos:column="19">peer<pos:position pos:line="37" pos:column="23"/></name></expr></argument>)<pos:position pos:line="37" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">getOutgoingAddress<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><call><name><name pos:line="38" pos:column="24">request<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">.<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="32">getRaw<pos:position pos:line="38" pos:column="38"/></name></name><argument_list pos:line="38" pos:column="38">()<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="38" pos:column="42">conn<pos:position pos:line="38" pos:column="46"/></name></expr></argument>)<pos:position pos:line="38" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">GetMarkingsToServer<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><call><name><name pos:line="39" pos:column="25">request<pos:position pos:line="39" pos:column="32"/></name><operator pos:line="39" pos:column="32">.<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="33">getRaw<pos:position pos:line="39" pos:column="39"/></name></name><argument_list pos:line="39" pos:column="39">()<pos:position pos:line="39" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="39" pos:column="43">*<pos:position pos:line="39" pos:column="44"/></operator><name pos:line="39" pos:column="44">conn<pos:position pos:line="39" pos:column="48"/></name></expr></argument>)<pos:position pos:line="39" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="50"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="41" pos:column="5">const<pos:position pos:line="41" pos:column="10"/></specifier> <name pos:line="41" pos:column="11">int<pos:position pos:line="41" pos:column="14"/></name></type> <name pos:line="41" pos:column="15">ctimeout<pos:position pos:line="41" pos:column="23"/></name> <init pos:line="41" pos:column="24">= <expr><call><name pos:line="41" pos:column="26">peerConnectTimeout<pos:position pos:line="41" pos:column="44"/></name><argument_list pos:line="41" pos:column="44">(<argument><expr><name pos:line="41" pos:column="45">peer<pos:position pos:line="41" pos:column="49"/></name></expr></argument>)<pos:position pos:line="41" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="51"/></decl_stmt>
    <typedef pos:line="42" pos:column="5">typedef <type><name><name pos:line="42" pos:column="13">CommCbMemFunT<pos:position pos:line="42" pos:column="26"/></name><argument_list type="generic" pos:line="42" pos:column="26">&lt;<argument><expr><name pos:line="42" pos:column="27">PeerPoolMgr<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="40">CommConnectCbParams<pos:position pos:line="42" pos:column="59"/></name></expr></argument>&gt;<pos:position pos:line="42" pos:column="63"/></argument_list></name></type> <name pos:line="42" pos:column="61">Dialer<pos:position pos:line="42" pos:column="67"/></name>;<pos:position pos:line="42" pos:column="68"/></typedef>
    <expr_stmt><expr><name pos:line="43" pos:column="5">opener<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <call><name pos:line="43" pos:column="14">JobCallback<pos:position pos:line="43" pos:column="25"/></name><argument_list pos:line="43" pos:column="25">(<argument><expr><literal type="number" pos:line="43" pos:column="26">48<pos:position pos:line="43" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="30">5<pos:position pos:line="43" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="33">Dialer<pos:position pos:line="43" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="41">this<pos:position pos:line="43" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="47">PeerPoolMgr<pos:position pos:line="43" pos:column="58"/></name><operator pos:line="43" pos:column="58">::<pos:position pos:line="43" pos:column="60"/></operator><name pos:line="43" pos:column="60">handleOpenedConnection<pos:position pos:line="43" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="84"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="44" pos:column="5">Comm<pos:position pos:line="44" pos:column="9"/></name><operator pos:line="44" pos:column="9">::<pos:position pos:line="44" pos:column="11"/></operator><name pos:line="44" pos:column="11">ConnOpener<pos:position pos:line="44" pos:column="21"/></name></name> <modifier pos:line="44" pos:column="22">*<pos:position pos:line="44" pos:column="23"/></modifier></type><name pos:line="44" pos:column="23">cs<pos:position pos:line="44" pos:column="25"/></name> <init pos:line="44" pos:column="26">= <expr><operator pos:line="44" pos:column="28">new<pos:position pos:line="44" pos:column="31"/></operator> <call><name><name pos:line="44" pos:column="32">Comm<pos:position pos:line="44" pos:column="36"/></name><operator pos:line="44" pos:column="36">::<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="38">ConnOpener<pos:position pos:line="44" pos:column="48"/></name></name><argument_list pos:line="44" pos:column="48">(<argument><expr><name pos:line="44" pos:column="49">conn<pos:position pos:line="44" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="55">opener<pos:position pos:line="44" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="63">ctimeout<pos:position pos:line="44" pos:column="71"/></name></expr></argument>)<pos:position pos:line="44" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="44" pos:column="73"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="45" pos:column="5">AsyncJob<pos:position pos:line="45" pos:column="13"/></name><operator pos:line="45" pos:column="13">::<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="15">Start<pos:position pos:line="45" pos:column="20"/></name></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name pos:line="45" pos:column="21">cs<pos:position pos:line="45" pos:column="23"/></name></expr></argument>)<pos:position pos:line="45" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
