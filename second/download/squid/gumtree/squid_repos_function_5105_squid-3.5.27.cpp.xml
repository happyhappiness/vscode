<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5105_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Parser<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">Tokenizer<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">int64<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">int64_t<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">&amp;<pos:position pos:line="2" pos:column="39"/></modifier></type> <name pos:line="2" pos:column="36">result<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">int<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">base<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name><name pos:line="4" pos:column="9">buf_<pos:position pos:line="4" pos:column="13"/></name><operator pos:line="4" pos:column="13">.<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">isEmpty<pos:position pos:line="4" pos:column="21"/></name></name><argument_list pos:line="4" pos:column="21">()<pos:position pos:line="4" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="24"/></condition><then pos:line="4" pos:column="24">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">false<pos:position pos:line="5" pos:column="21"/></literal></expr>;<pos:position pos:line="5" pos:column="22"/></return></block></then></if>

    <comment type="line" pos:line="7" pos:column="5">//fixme: account for buf_.size()</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">bool<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">neg<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">s<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><call><name><name pos:line="9" pos:column="21">buf_<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">.<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">rawContent<pos:position pos:line="9" pos:column="36"/></name></name><argument_list pos:line="9" pos:column="36">()<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">char<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">end<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><call><name><name pos:line="10" pos:column="23">buf_<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">.<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">rawContent<pos:position pos:line="10" pos:column="38"/></name></name><argument_list pos:line="10" pos:column="38">()<pos:position pos:line="10" pos:column="40"/></argument_list></call> <operator pos:line="10" pos:column="41">+<pos:position pos:line="10" pos:column="42"/></operator> <call><name><name pos:line="10" pos:column="43">buf_<pos:position pos:line="10" pos:column="47"/></name><operator pos:line="10" pos:column="47">.<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="48">length<pos:position pos:line="10" pos:column="54"/></name></name><argument_list pos:line="10" pos:column="54">()<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="57"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">s<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">==<pos:position pos:line="12" pos:column="14"/></operator> <literal type="char" pos:line="12" pos:column="15">'-'<pos:position pos:line="12" pos:column="18"/></literal></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19"> <block pos:line="12" pos:column="20">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">neg<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <literal type="boolean" pos:line="13" pos:column="15">true<pos:position pos:line="13" pos:column="19"/></literal></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="14" pos:column="9">++<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">s<pos:position pos:line="14" pos:column="12"/></name></expr>;<pos:position pos:line="14" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then> <elseif pos:line="15" pos:column="7">else <if pos:line="15" pos:column="12">if <condition pos:line="15" pos:column="15">(<expr><operator pos:line="15" pos:column="16">*<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">s<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">==<pos:position pos:line="15" pos:column="21"/></operator> <literal type="char" pos:line="15" pos:column="22">'+'<pos:position pos:line="15" pos:column="25"/></literal></expr>)<pos:position pos:line="15" pos:column="26"/></condition><then pos:line="15" pos:column="26"> <block pos:line="15" pos:column="27">{
        <expr_stmt><expr><operator pos:line="16" pos:column="9">++<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">s<pos:position pos:line="16" pos:column="12"/></name></expr>;<pos:position pos:line="16" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">s<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">&gt;=<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="14">end<pos:position pos:line="19" pos:column="17"/></name></expr>)<pos:position pos:line="19" pos:column="18"/></condition><then pos:line="19" pos:column="18"> <block type="pseudo"><return pos:line="19" pos:column="19">return <expr><literal type="boolean" pos:line="19" pos:column="26">false<pos:position pos:line="19" pos:column="31"/></literal></expr>;<pos:position pos:line="19" pos:column="32"/></return></block></then></if>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">(<pos:position pos:line="20" pos:column="10"/></operator> <name pos:line="20" pos:column="11">base<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">==<pos:position pos:line="20" pos:column="18"/></operator> <literal type="number" pos:line="20" pos:column="19">0<pos:position pos:line="20" pos:column="20"/></literal> <operator pos:line="20" pos:column="21">||<pos:position pos:line="20" pos:column="23"/></operator> <name pos:line="20" pos:column="24">base<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">==<pos:position pos:line="20" pos:column="31"/></operator> <literal type="number" pos:line="20" pos:column="32">16<pos:position pos:line="20" pos:column="34"/></literal><operator pos:line="20" pos:column="34">)<pos:position pos:line="20" pos:column="35"/></operator> <operator pos:line="20" pos:column="36">&amp;&amp;<pos:position pos:line="20" pos:column="46"/></operator> <operator pos:line="20" pos:column="39">*<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="40">s<pos:position pos:line="20" pos:column="41"/></name> <operator pos:line="20" pos:column="42">==<pos:position pos:line="20" pos:column="44"/></operator> <literal type="char" pos:line="20" pos:column="45">'0'<pos:position pos:line="20" pos:column="48"/></literal> <operator pos:line="20" pos:column="49">&amp;&amp;<pos:position pos:line="20" pos:column="59"/></operator> <operator pos:line="20" pos:column="52">(<pos:position pos:line="20" pos:column="53"/></operator><name pos:line="20" pos:column="53">s<pos:position pos:line="20" pos:column="54"/></name><operator pos:line="20" pos:column="54">+<pos:position pos:line="20" pos:column="55"/></operator><literal type="number" pos:line="20" pos:column="55">1<pos:position pos:line="20" pos:column="56"/></literal> <operator pos:line="20" pos:column="57">&lt;<pos:position pos:line="20" pos:column="61"/></operator> <name pos:line="20" pos:column="59">end<pos:position pos:line="20" pos:column="62"/></name> <operator pos:line="20" pos:column="63">)<pos:position pos:line="20" pos:column="64"/></operator> <operator pos:line="20" pos:column="65">&amp;&amp;<pos:position pos:line="20" pos:column="75"/></operator>
            <call><name pos:line="21" pos:column="13">tolower<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><operator pos:line="21" pos:column="21">*<pos:position pos:line="21" pos:column="22"/></operator><operator pos:line="21" pos:column="22">(<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">s<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">+<pos:position pos:line="21" pos:column="25"/></operator><literal type="number" pos:line="21" pos:column="25">1<pos:position pos:line="21" pos:column="26"/></literal><operator pos:line="21" pos:column="26">)<pos:position pos:line="21" pos:column="27"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="28"/></argument_list></call> <operator pos:line="21" pos:column="29">==<pos:position pos:line="21" pos:column="31"/></operator> <literal type="char" pos:line="21" pos:column="32">'x'<pos:position pos:line="21" pos:column="35"/></literal></expr>)<pos:position pos:line="21" pos:column="36"/></condition><then pos:line="21" pos:column="36"> <block pos:line="21" pos:column="37">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">s<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">+=<pos:position pos:line="22" pos:column="13"/></operator> <literal type="number" pos:line="22" pos:column="14">2<pos:position pos:line="22" pos:column="15"/></literal></expr>;<pos:position pos:line="22" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">base<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <literal type="number" pos:line="23" pos:column="16">16<pos:position pos:line="23" pos:column="18"/></literal></expr>;<pos:position pos:line="23" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">base<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">==<pos:position pos:line="25" pos:column="16"/></operator> <literal type="number" pos:line="25" pos:column="17">0<pos:position pos:line="25" pos:column="18"/></literal></expr>)<pos:position pos:line="25" pos:column="19"/></condition><then pos:line="25" pos:column="19"> <block pos:line="25" pos:column="20">{
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">( <expr><operator pos:line="26" pos:column="14">*<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">s<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">==<pos:position pos:line="26" pos:column="19"/></operator> <literal type="char" pos:line="26" pos:column="20">'0'<pos:position pos:line="26" pos:column="23"/></literal></expr>)<pos:position pos:line="26" pos:column="24"/></condition><then pos:line="26" pos:column="24"> <block pos:line="26" pos:column="25">{
            <expr_stmt><expr><name pos:line="27" pos:column="13">base<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <literal type="number" pos:line="27" pos:column="20">8<pos:position pos:line="27" pos:column="21"/></literal></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="28" pos:column="13">++<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">s<pos:position pos:line="28" pos:column="16"/></name></expr>;<pos:position pos:line="28" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></then> <else pos:line="29" pos:column="11">else <block pos:line="29" pos:column="16">{
            <expr_stmt><expr><name pos:line="30" pos:column="13">base<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <literal type="number" pos:line="30" pos:column="20">10<pos:position pos:line="30" pos:column="22"/></literal></expr>;<pos:position pos:line="30" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></else></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">s<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">&gt;=<pos:position pos:line="33" pos:column="16"/></operator> <name pos:line="33" pos:column="14">end<pos:position pos:line="33" pos:column="17"/></name></expr>)<pos:position pos:line="33" pos:column="18"/></condition><then pos:line="33" pos:column="18"> <block type="pseudo"><return pos:line="33" pos:column="19">return <expr><literal type="boolean" pos:line="33" pos:column="26">false<pos:position pos:line="33" pos:column="31"/></literal></expr>;<pos:position pos:line="33" pos:column="32"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="35" pos:column="5">uint64_t<pos:position pos:line="35" pos:column="13"/></name></type> <name pos:line="35" pos:column="14">cutoff<pos:position pos:line="35" pos:column="20"/></name></decl>;<pos:position pos:line="35" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="37" pos:column="5">cutoff<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <ternary><condition><expr><name pos:line="37" pos:column="14">neg<pos:position pos:line="37" pos:column="17"/></name></expr> ?<pos:position pos:line="37" pos:column="19"/></condition><then pos:line="37" pos:column="19"> <expr><operator pos:line="37" pos:column="20">-<pos:position pos:line="37" pos:column="21"/></operator><cast type="static" pos:line="37" pos:column="21">static_cast<argument_list type="generic" pos:line="37" pos:column="32">&lt;<argument><expr><name pos:line="37" pos:column="33">uint64_t<pos:position pos:line="37" pos:column="41"/></name></expr></argument>&gt;<pos:position pos:line="37" pos:column="45"/></argument_list><argument_list pos:line="37" pos:column="42">(<argument><expr><name pos:line="37" pos:column="43">INT64_MIN<pos:position pos:line="37" pos:column="52"/></name></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></cast></expr> <pos:position pos:line="37" pos:column="54"/></then><else pos:line="37" pos:column="54">: <expr><name pos:line="37" pos:column="56">INT64_MAX<pos:position pos:line="37" pos:column="65"/></name></expr></else></ternary></expr>;<pos:position pos:line="37" pos:column="66"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="38" pos:column="5">const<pos:position pos:line="38" pos:column="10"/></specifier> <name pos:line="38" pos:column="11">int<pos:position pos:line="38" pos:column="14"/></name></type> <name pos:line="38" pos:column="15">cutlim<pos:position pos:line="38" pos:column="21"/></name> <init pos:line="38" pos:column="22">= <expr><name pos:line="38" pos:column="24">cutoff<pos:position pos:line="38" pos:column="30"/></name> <operator pos:line="38" pos:column="31">%<pos:position pos:line="38" pos:column="32"/></operator> <cast type="static" pos:line="38" pos:column="33">static_cast<argument_list type="generic" pos:line="38" pos:column="44">&lt;<argument><expr><name pos:line="38" pos:column="45">int64_t<pos:position pos:line="38" pos:column="52"/></name></expr></argument>&gt;<pos:position pos:line="38" pos:column="56"/></argument_list><argument_list pos:line="38" pos:column="53">(<argument><expr><name pos:line="38" pos:column="54">base<pos:position pos:line="38" pos:column="58"/></name></expr></argument>)<pos:position pos:line="38" pos:column="59"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="38" pos:column="60"/></decl_stmt>
    <expr_stmt><expr><name pos:line="39" pos:column="5">cutoff<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">/=<pos:position pos:line="39" pos:column="14"/></operator> <cast type="static" pos:line="39" pos:column="15">static_cast<argument_list type="generic" pos:line="39" pos:column="26">&lt;<argument><expr><name pos:line="39" pos:column="27">uint64_t<pos:position pos:line="39" pos:column="35"/></name></expr></argument>&gt;<pos:position pos:line="39" pos:column="39"/></argument_list><argument_list pos:line="39" pos:column="36">(<argument><expr><name pos:line="39" pos:column="37">base<pos:position pos:line="39" pos:column="41"/></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></cast></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="41" pos:column="5">int<pos:position pos:line="41" pos:column="8"/></name></type> <name pos:line="41" pos:column="9">any<pos:position pos:line="41" pos:column="12"/></name> <init pos:line="41" pos:column="13">= <expr><literal type="number" pos:line="41" pos:column="15">0<pos:position pos:line="41" pos:column="16"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="41" pos:column="18">c<pos:position pos:line="41" pos:column="19"/></name></decl>;<pos:position pos:line="41" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="42" pos:column="5">int64_t<pos:position pos:line="42" pos:column="12"/></name></type> <name pos:line="42" pos:column="13">acc<pos:position pos:line="42" pos:column="16"/></name> <init pos:line="42" pos:column="17">= <expr><literal type="number" pos:line="42" pos:column="19">0<pos:position pos:line="42" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="42" pos:column="21"/></decl_stmt>
    <do pos:line="43" pos:column="5">do <block pos:line="43" pos:column="8">{
        <expr_stmt><expr><name pos:line="44" pos:column="9">c<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <operator pos:line="44" pos:column="13">*<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">s<pos:position pos:line="44" pos:column="15"/></name></expr>;<pos:position pos:line="44" pos:column="16"/></expr_stmt>
        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name pos:line="45" pos:column="13">xisdigit<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">c<pos:position pos:line="45" pos:column="23"/></name></expr></argument>)<pos:position pos:line="45" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="25"/></condition><then pos:line="45" pos:column="25"> <block pos:line="45" pos:column="26">{
            <expr_stmt><expr><name pos:line="46" pos:column="13">c<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">-=<pos:position pos:line="46" pos:column="17"/></operator> <literal type="char" pos:line="46" pos:column="18">'0'<pos:position pos:line="46" pos:column="21"/></literal></expr>;<pos:position pos:line="46" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="47" pos:column="10"/></block></then> <elseif pos:line="47" pos:column="11">else <if pos:line="47" pos:column="16">if <condition pos:line="47" pos:column="19">(<expr><call><name pos:line="47" pos:column="20">xisalpha<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">c<pos:position pos:line="47" pos:column="30"/></name></expr></argument>)<pos:position pos:line="47" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="32"/></condition><then pos:line="47" pos:column="32"> <block pos:line="47" pos:column="33">{
            <expr_stmt><expr><name pos:line="48" pos:column="13">c<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">-=<pos:position pos:line="48" pos:column="17"/></operator> <ternary><condition><expr><call><name pos:line="48" pos:column="18">xisupper<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">(<argument><expr><name pos:line="48" pos:column="27">c<pos:position pos:line="48" pos:column="28"/></name></expr></argument>)<pos:position pos:line="48" pos:column="29"/></argument_list></call></expr> ?<pos:position pos:line="48" pos:column="31"/></condition><then pos:line="48" pos:column="31"> <expr><literal type="char" pos:line="48" pos:column="32">'A'<pos:position pos:line="48" pos:column="35"/></literal> <operator pos:line="48" pos:column="36">-<pos:position pos:line="48" pos:column="37"/></operator> <literal type="number" pos:line="48" pos:column="38">10<pos:position pos:line="48" pos:column="40"/></literal></expr> <pos:position pos:line="48" pos:column="41"/></then><else pos:line="48" pos:column="41">: <expr><literal type="char" pos:line="48" pos:column="43">'a'<pos:position pos:line="48" pos:column="46"/></literal> <operator pos:line="48" pos:column="47">-<pos:position pos:line="48" pos:column="48"/></operator> <literal type="number" pos:line="48" pos:column="49">10<pos:position pos:line="48" pos:column="51"/></literal></expr></else></ternary></expr>;<pos:position pos:line="48" pos:column="52"/></expr_stmt>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if></elseif> <else pos:line="49" pos:column="11">else <block pos:line="49" pos:column="16">{
            <break pos:line="50" pos:column="13">break;<pos:position pos:line="50" pos:column="19"/></break>
        }<pos:position pos:line="51" pos:column="10"/></block></else></if>
        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">c<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">&gt;=<pos:position pos:line="52" pos:column="20"/></operator> <name pos:line="52" pos:column="18">base<pos:position pos:line="52" pos:column="22"/></name></expr>)<pos:position pos:line="52" pos:column="23"/></condition><then pos:line="52" pos:column="23">
            <block type="pseudo"><break pos:line="53" pos:column="13">break;<pos:position pos:line="53" pos:column="19"/></break></block></then></if>
        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">any<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">&lt;<pos:position pos:line="54" pos:column="21"/></operator> <literal type="number" pos:line="54" pos:column="19">0<pos:position pos:line="54" pos:column="20"/></literal> <operator pos:line="54" pos:column="21">||<pos:position pos:line="54" pos:column="23"/></operator> <cast type="static" pos:line="54" pos:column="24">static_cast<argument_list type="generic" pos:line="54" pos:column="35">&lt;<argument><expr><name pos:line="54" pos:column="36">uint64_t<pos:position pos:line="54" pos:column="44"/></name></expr></argument>&gt;<pos:position pos:line="54" pos:column="48"/></argument_list><argument_list pos:line="54" pos:column="45">(<argument><expr><name pos:line="54" pos:column="46">acc<pos:position pos:line="54" pos:column="49"/></name></expr></argument>)<pos:position pos:line="54" pos:column="50"/></argument_list></cast> <operator pos:line="54" pos:column="51">&gt;<pos:position pos:line="54" pos:column="55"/></operator> <name pos:line="54" pos:column="53">cutoff<pos:position pos:line="54" pos:column="59"/></name> <operator pos:line="54" pos:column="60">||<pos:position pos:line="54" pos:column="62"/></operator> <operator pos:line="54" pos:column="63">(<pos:position pos:line="54" pos:column="64"/></operator><cast type="static" pos:line="54" pos:column="64">static_cast<argument_list type="generic" pos:line="54" pos:column="75">&lt;<argument><expr><name pos:line="54" pos:column="76">uint64_t<pos:position pos:line="54" pos:column="84"/></name></expr></argument>&gt;<pos:position pos:line="54" pos:column="88"/></argument_list><argument_list pos:line="54" pos:column="85">(<argument><expr><name pos:line="54" pos:column="86">acc<pos:position pos:line="54" pos:column="89"/></name></expr></argument>)<pos:position pos:line="54" pos:column="90"/></argument_list></cast> <operator pos:line="54" pos:column="91">==<pos:position pos:line="54" pos:column="93"/></operator> <name pos:line="54" pos:column="94">cutoff<pos:position pos:line="54" pos:column="100"/></name> <operator pos:line="54" pos:column="101">&amp;&amp;<pos:position pos:line="54" pos:column="111"/></operator> <name pos:line="54" pos:column="104">c<pos:position pos:line="54" pos:column="105"/></name> <operator pos:line="54" pos:column="106">&gt;<pos:position pos:line="54" pos:column="110"/></operator> <name pos:line="54" pos:column="108">cutlim<pos:position pos:line="54" pos:column="114"/></name><operator pos:line="54" pos:column="114">)<pos:position pos:line="54" pos:column="115"/></operator></expr>)<pos:position pos:line="54" pos:column="116"/></condition><then pos:line="54" pos:column="116">
            <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="13">any<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">=<pos:position pos:line="55" pos:column="18"/></operator> <operator pos:line="55" pos:column="19">-<pos:position pos:line="55" pos:column="20"/></operator><literal type="number" pos:line="55" pos:column="20">1<pos:position pos:line="55" pos:column="21"/></literal></expr>;<pos:position pos:line="55" pos:column="22"/></expr_stmt></block></then>
        <else pos:line="56" pos:column="9">else <block pos:line="56" pos:column="14">{
            <expr_stmt><expr><name pos:line="57" pos:column="13">any<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">=<pos:position pos:line="57" pos:column="18"/></operator> <literal type="number" pos:line="57" pos:column="19">1<pos:position pos:line="57" pos:column="20"/></literal></expr>;<pos:position pos:line="57" pos:column="21"/></expr_stmt>
            <expr_stmt><expr><name pos:line="58" pos:column="13">acc<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">*=<pos:position pos:line="58" pos:column="19"/></operator> <name pos:line="58" pos:column="20">base<pos:position pos:line="58" pos:column="24"/></name></expr>;<pos:position pos:line="58" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><name pos:line="59" pos:column="13">acc<pos:position pos:line="59" pos:column="16"/></name> <operator pos:line="59" pos:column="17">+=<pos:position pos:line="59" pos:column="19"/></operator> <name pos:line="59" pos:column="20">c<pos:position pos:line="59" pos:column="21"/></name></expr>;<pos:position pos:line="59" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="60" pos:column="10"/></block></else></if>
    }<pos:position pos:line="61" pos:column="6"/></block> while <condition pos:line="61" pos:column="13">(<expr><operator pos:line="61" pos:column="14">++<pos:position pos:line="61" pos:column="16"/></operator><name pos:line="61" pos:column="16">s<pos:position pos:line="61" pos:column="17"/></name> <operator pos:line="61" pos:column="18">&lt;<pos:position pos:line="61" pos:column="22"/></operator> <name pos:line="61" pos:column="20">end<pos:position pos:line="61" pos:column="23"/></name></expr>)<pos:position pos:line="61" pos:column="24"/></condition>;<pos:position pos:line="61" pos:column="25"/></do>

    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">any<pos:position pos:line="63" pos:column="12"/></name> <operator pos:line="63" pos:column="13">==<pos:position pos:line="63" pos:column="15"/></operator> <literal type="number" pos:line="63" pos:column="16">0<pos:position pos:line="63" pos:column="17"/></literal></expr>)<pos:position pos:line="63" pos:column="18"/></condition><then pos:line="63" pos:column="18"> <comment type="line" pos:line="63" pos:column="19">// nothing was parsed</comment>
        <block type="pseudo"><return pos:line="64" pos:column="9">return <expr><literal type="boolean" pos:line="64" pos:column="16">false<pos:position pos:line="64" pos:column="21"/></literal></expr>;<pos:position pos:line="64" pos:column="22"/></return></block></then></if>
    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><name pos:line="65" pos:column="9">any<pos:position pos:line="65" pos:column="12"/></name> <operator pos:line="65" pos:column="13">&lt;<pos:position pos:line="65" pos:column="17"/></operator> <literal type="number" pos:line="65" pos:column="15">0<pos:position pos:line="65" pos:column="16"/></literal></expr>)<pos:position pos:line="65" pos:column="17"/></condition><then pos:line="65" pos:column="17"> <block pos:line="65" pos:column="18">{
        <expr_stmt><expr><name pos:line="66" pos:column="9">acc<pos:position pos:line="66" pos:column="12"/></name> <operator pos:line="66" pos:column="13">=<pos:position pos:line="66" pos:column="14"/></operator> <ternary><condition><expr><name pos:line="66" pos:column="15">neg<pos:position pos:line="66" pos:column="18"/></name></expr> ?<pos:position pos:line="66" pos:column="20"/></condition><then pos:line="66" pos:column="20"> <expr><name pos:line="66" pos:column="21">INT64_MIN<pos:position pos:line="66" pos:column="30"/></name></expr> <pos:position pos:line="66" pos:column="31"/></then><else pos:line="66" pos:column="31">: <expr><name pos:line="66" pos:column="33">INT64_MAX<pos:position pos:line="66" pos:column="42"/></name></expr></else></ternary></expr>;<pos:position pos:line="66" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="67" pos:column="9">errno<pos:position pos:line="67" pos:column="14"/></name> <operator pos:line="67" pos:column="15">=<pos:position pos:line="67" pos:column="16"/></operator> <name pos:line="67" pos:column="17">ERANGE<pos:position pos:line="67" pos:column="23"/></name></expr>;<pos:position pos:line="67" pos:column="24"/></expr_stmt>
        <return pos:line="68" pos:column="9">return <expr><literal type="boolean" pos:line="68" pos:column="16">false<pos:position pos:line="68" pos:column="21"/></literal></expr>;<pos:position pos:line="68" pos:column="22"/></return>
    }<pos:position pos:line="69" pos:column="6"/></block></then> <elseif pos:line="69" pos:column="7">else <if pos:line="69" pos:column="12">if <condition pos:line="69" pos:column="15">(<expr><name pos:line="69" pos:column="16">neg<pos:position pos:line="69" pos:column="19"/></name></expr>)<pos:position pos:line="69" pos:column="20"/></condition><then pos:line="69" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="9">acc<pos:position pos:line="70" pos:column="12"/></name> <operator pos:line="70" pos:column="13">=<pos:position pos:line="70" pos:column="14"/></operator> <operator pos:line="70" pos:column="15">-<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="16">acc<pos:position pos:line="70" pos:column="19"/></name></expr>;<pos:position pos:line="70" pos:column="20"/></expr_stmt></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="72" pos:column="5">result<pos:position pos:line="72" pos:column="11"/></name> <operator pos:line="72" pos:column="12">=<pos:position pos:line="72" pos:column="13"/></operator> <name pos:line="72" pos:column="14">acc<pos:position pos:line="72" pos:column="17"/></name></expr>;<pos:position pos:line="72" pos:column="18"/></expr_stmt>
    <return pos:line="73" pos:column="5">return <expr><call><name pos:line="73" pos:column="12">success<pos:position pos:line="73" pos:column="19"/></name><argument_list pos:line="73" pos:column="19">(<argument><expr><name pos:line="73" pos:column="20">s<pos:position pos:line="73" pos:column="21"/></name> <operator pos:line="73" pos:column="22">-<pos:position pos:line="73" pos:column="23"/></operator> <call><name><name pos:line="73" pos:column="24">buf_<pos:position pos:line="73" pos:column="28"/></name><operator pos:line="73" pos:column="28">.<pos:position pos:line="73" pos:column="29"/></operator><name pos:line="73" pos:column="29">rawContent<pos:position pos:line="73" pos:column="39"/></name></name><argument_list pos:line="73" pos:column="39">()<pos:position pos:line="73" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="43"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
