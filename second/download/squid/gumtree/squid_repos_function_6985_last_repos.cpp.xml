<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6985_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Forwarder<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">callException<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name><name pos:line="2" pos:column="37">std<pos:position pos:line="2" pos:column="40"/></name><operator pos:line="2" pos:column="40">::<pos:position pos:line="2" pos:column="42"/></operator><name pos:line="2" pos:column="42">exception<pos:position pos:line="2" pos:column="51"/></name></name><modifier pos:line="2" pos:column="51">&amp;<pos:position pos:line="2" pos:column="56"/></modifier></type> <name pos:line="2" pos:column="53">e<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <try pos:line="4" pos:column="5">try <block pos:line="4" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">handleException<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><name pos:line="5" pos:column="25">e<pos:position pos:line="5" pos:column="26"/></name></expr></argument>)<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="6" pos:column="6"/></block> <catch pos:line="6" pos:column="7">catch <parameter_list pos:line="6" pos:column="13">(<parameter><decl><type><specifier pos:line="6" pos:column="14">const<pos:position pos:line="6" pos:column="19"/></specifier> <name><name pos:line="6" pos:column="20">std<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">::<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="25">exception<pos:position pos:line="6" pos:column="34"/></name></name><modifier pos:line="6" pos:column="34">&amp;<pos:position pos:line="6" pos:column="39"/></modifier></type> <name pos:line="6" pos:column="36">ex<pos:position pos:line="6" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="39"/></parameter_list> <block pos:line="6" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">54<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="20">DBG_CRITICAL<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">HERE<pos:position pos:line="7" pos:column="38"/></name> <operator pos:line="7" pos:column="39">&lt;&lt;<pos:position pos:line="7" pos:column="47"/></operator> <call><name><name pos:line="7" pos:column="42">ex<pos:position pos:line="7" pos:column="44"/></name><operator pos:line="7" pos:column="44">.<pos:position pos:line="7" pos:column="45"/></operator><name pos:line="7" pos:column="45">what<pos:position pos:line="7" pos:column="49"/></name></name><argument_list pos:line="7" pos:column="49">()<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="8" pos:column="6"/></block></catch></try>
    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">AsyncJob<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">::<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">callException<pos:position pos:line="9" pos:column="28"/></name></name><argument_list pos:line="9" pos:column="28">(<argument><expr><name pos:line="9" pos:column="29">e<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
