<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_884.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">action<pos:position pos:line="2" pos:column="7"/></name><parameter_list pos:line="2" pos:column="7">( <parameter><decl><type><name pos:line="2" pos:column="9">int<pos:position pos:line="2" pos:column="12"/></name></type> <name pos:line="2" pos:column="13">fd<pos:position pos:line="2" pos:column="15"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="17">size_t<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">metasize<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>,
        <parameter><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name><modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type> <name pos:line="3" pos:column="21">fn<pos:position pos:line="3" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="25">const<pos:position pos:line="3" pos:column="30"/></specifier> <name pos:line="3" pos:column="31">char<pos:position pos:line="3" pos:column="35"/></name><modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier></type> <name pos:line="3" pos:column="37">url<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="42">const<pos:position pos:line="3" pos:column="47"/></specifier> <name pos:line="3" pos:column="48">SquidMetaList<pos:position pos:line="3" pos:column="61"/></name><modifier pos:line="3" pos:column="61">&amp;<pos:position pos:line="3" pos:column="66"/></modifier></type> <name pos:line="3" pos:column="63">meta<pos:position pos:line="3" pos:column="67"/></name></decl></parameter> )<pos:position pos:line="3" pos:column="69"/></parameter_list>
<comment type="line" pos:line="4" pos:column="1">// purpose: if cmdline-requested, send the purge request to the cache</comment>
<comment type="line" pos:line="5" pos:column="1">// paramtr: fd (IN): open FD for the object file</comment>
<comment type="line" pos:line="6" pos:column="1">//	      metasize (IN): offset into data portion of file (meta data size)</comment>
<comment type="line" pos:line="7" pos:column="1">//          fn (IN): name of the object file</comment>
<comment type="line" pos:line="8" pos:column="1">//          url (IN): URL string stored in the object file</comment>
<comment type="line" pos:line="9" pos:column="1">//	      meta (IN): list containing further meta data</comment>
<comment type="line" pos:line="10" pos:column="1">// returns: true for a successful action, false otherwise. The action</comment>
<comment type="line" pos:line="11" pos:column="1">//          may just print the file, send the purge request or even</comment>
<comment type="line" pos:line="12" pos:column="1">//          remove unwanted files.</comment>
<comment type="line" pos:line="13" pos:column="1">// globals: ::purgeMode (IN):  bit#0 set -&gt; send purge request.</comment>
<comment type="line" pos:line="14" pos:column="1">//                             bit#1 set -&gt; remove 404 object files.</comment>
<comment type="line" pos:line="15" pos:column="1">//          ::serverHost (IN): cache host address</comment>
<comment type="line" pos:line="16" pos:column="1">//          ::serverPort (IN): cache port number</comment>
<block pos:line="17" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="18" pos:column="5">static<pos:position pos:line="18" pos:column="11"/></specifier> <type><specifier pos:line="18" pos:column="12">const<pos:position pos:line="18" pos:column="17"/></specifier> <name pos:line="18" pos:column="18">char<pos:position pos:line="18" pos:column="22"/></name><modifier pos:line="18" pos:column="22">*<pos:position pos:line="18" pos:column="23"/></modifier></type> <name pos:line="18" pos:column="24">schablone<pos:position pos:line="18" pos:column="33"/></name> <init pos:line="18" pos:column="34">= <expr><literal type="string" pos:line="18" pos:column="36">"PURGE %s HTTP/1.0\r\nAccept: */*\r\n\r\n"<pos:position pos:line="18" pos:column="78"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="79"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="19" pos:column="5">struct<pos:position pos:line="19" pos:column="11"/></name> <name pos:line="19" pos:column="12">stat<pos:position pos:line="19" pos:column="16"/></name></name></type> <name pos:line="19" pos:column="17">st<pos:position pos:line="19" pos:column="19"/></name></decl>;<pos:position pos:line="19" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">long<pos:position pos:line="20" pos:column="9"/></name></type> <name pos:line="20" pos:column="10">size<pos:position pos:line="20" pos:column="14"/></name> <init pos:line="20" pos:column="15">= <expr><operator pos:line="20" pos:column="17">(<pos:position pos:line="20" pos:column="18"/></operator> <ternary><condition><expr><call><name pos:line="20" pos:column="19">fstat<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">fd<pos:position pos:line="20" pos:column="27"/></name></expr></argument>,<argument><expr><operator pos:line="20" pos:column="28">&amp;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="29">st<pos:position pos:line="20" pos:column="31"/></name></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call> <operator pos:line="20" pos:column="33">==<pos:position pos:line="20" pos:column="35"/></operator> <operator pos:line="20" pos:column="36">-<pos:position pos:line="20" pos:column="37"/></operator><literal type="number" pos:line="20" pos:column="37">1<pos:position pos:line="20" pos:column="38"/></literal></expr> ?<pos:position pos:line="20" pos:column="40"/></condition><then pos:line="20" pos:column="40"> <expr><operator pos:line="20" pos:column="41">-<pos:position pos:line="20" pos:column="42"/></operator><literal type="number" pos:line="20" pos:column="42">1<pos:position pos:line="20" pos:column="43"/></literal></expr> <pos:position pos:line="20" pos:column="44"/></then><else pos:line="20" pos:column="44">: <expr><call><name pos:line="20" pos:column="46">long<pos:position pos:line="20" pos:column="50"/></name><argument_list pos:line="20" pos:column="50">(<argument><expr><name><name pos:line="20" pos:column="51">st<pos:position pos:line="20" pos:column="53"/></name><operator pos:line="20" pos:column="53">.<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="54">st_size<pos:position pos:line="20" pos:column="61"/></name></name> <operator pos:line="20" pos:column="62">-<pos:position pos:line="20" pos:column="63"/></operator> <name pos:line="20" pos:column="64">metasize<pos:position pos:line="20" pos:column="72"/></name></expr></argument>)<pos:position pos:line="20" pos:column="73"/></argument_list></call></expr></else></ternary> <operator pos:line="20" pos:column="74">)<pos:position pos:line="20" pos:column="75"/></operator></expr></init></decl>;<pos:position pos:line="20" pos:column="76"/></decl_stmt>

    <comment type="line" pos:line="22" pos:column="5">// if we want to copy out the file, do that first of all.</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">( <expr><name><operator pos:line="23" pos:column="10">::<pos:position pos:line="23" pos:column="12"/></operator><name pos:line="23" pos:column="12">copydir<pos:position pos:line="23" pos:column="19"/></name></name> <operator pos:line="23" pos:column="20">&amp;&amp;<pos:position pos:line="23" pos:column="30"/></operator> <operator pos:line="23" pos:column="23">*<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="24">copydir<pos:position pos:line="23" pos:column="31"/></name> <operator pos:line="23" pos:column="32">&amp;&amp;<pos:position pos:line="23" pos:column="42"/></operator> <name pos:line="23" pos:column="35">size<pos:position pos:line="23" pos:column="39"/></name> <operator pos:line="23" pos:column="40">&gt;<pos:position pos:line="23" pos:column="44"/></operator> <literal type="number" pos:line="23" pos:column="42">0<pos:position pos:line="23" pos:column="43"/></literal></expr> )<pos:position pos:line="23" pos:column="45"/></condition><then pos:line="23" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="9">copy_out<pos:position pos:line="24" pos:column="17"/></name><argument_list pos:line="24" pos:column="17">( <argument><expr><name><name pos:line="24" pos:column="19">st<pos:position pos:line="24" pos:column="21"/></name><operator pos:line="24" pos:column="21">.<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">st_size<pos:position pos:line="24" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="31">metasize<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><name><operator pos:line="24" pos:column="41">::<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="43">debugFlag<pos:position pos:line="24" pos:column="52"/></name></name></expr></argument>,
                  <argument><expr><name pos:line="25" pos:column="19">fn<pos:position pos:line="25" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="23">url<pos:position pos:line="25" pos:column="26"/></name></expr></argument>, <argument><expr><name><operator pos:line="25" pos:column="28">::<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="30">copydir<pos:position pos:line="25" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><operator pos:line="25" pos:column="39">::<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="41">envelope<pos:position pos:line="25" pos:column="49"/></name></name></expr></argument> )<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="27" pos:column="5">// do we need to PURGE the file, yes, if purgemode bit#0 was set.</comment>
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">int<pos:position pos:line="28" pos:column="8"/></name></type> <name pos:line="28" pos:column="9">status<pos:position pos:line="28" pos:column="15"/></name> <init pos:line="28" pos:column="16">= <expr><literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="20"/></decl_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">( <expr><name><operator pos:line="29" pos:column="10">::<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="12">purgeMode<pos:position pos:line="29" pos:column="21"/></name></name> <operator pos:line="29" pos:column="22">&amp;<pos:position pos:line="29" pos:column="27"/></operator> <literal type="number" pos:line="29" pos:column="24">0x01<pos:position pos:line="29" pos:column="28"/></literal></expr> )<pos:position pos:line="29" pos:column="30"/></condition><then pos:line="29" pos:column="30"> <block pos:line="29" pos:column="31">{
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">unsigned<pos:position pos:line="30" pos:column="17"/></name> <name pos:line="30" pos:column="18">long<pos:position pos:line="30" pos:column="22"/></name></type> <name pos:line="30" pos:column="23">bufsize<pos:position pos:line="30" pos:column="30"/></name> <init pos:line="30" pos:column="31">= <expr><call><name pos:line="30" pos:column="33">strlen<pos:position pos:line="30" pos:column="39"/></name><argument_list pos:line="30" pos:column="39">(<argument><expr><name pos:line="30" pos:column="40">url<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call> <operator pos:line="30" pos:column="45">+<pos:position pos:line="30" pos:column="46"/></operator> <call><name pos:line="30" pos:column="47">strlen<pos:position pos:line="30" pos:column="53"/></name><argument_list pos:line="30" pos:column="53">(<argument><expr><name pos:line="30" pos:column="54">schablone<pos:position pos:line="30" pos:column="63"/></name></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call> <operator pos:line="30" pos:column="65">+<pos:position pos:line="30" pos:column="66"/></operator> <literal type="number" pos:line="30" pos:column="67">4<pos:position pos:line="30" pos:column="68"/></literal></expr></init></decl>;<pos:position pos:line="30" pos:column="69"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="31" pos:column="9">char<pos:position pos:line="31" pos:column="13"/></name><modifier pos:line="31" pos:column="13">*<pos:position pos:line="31" pos:column="14"/></modifier></type> <name pos:line="31" pos:column="15">buffer<pos:position pos:line="31" pos:column="21"/></name> <init pos:line="31" pos:column="22">= <expr><operator pos:line="31" pos:column="24">new<pos:position pos:line="31" pos:column="27"/></operator> <name><name pos:line="31" pos:column="28">char<pos:position pos:line="31" pos:column="32"/></name><index pos:line="31" pos:column="32">[<expr><name pos:line="31" pos:column="33">bufsize<pos:position pos:line="31" pos:column="40"/></name></expr>]<pos:position pos:line="31" pos:column="41"/></index></name></expr></init></decl>;<pos:position pos:line="31" pos:column="42"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="33" pos:column="9">snprintf<pos:position pos:line="33" pos:column="17"/></name><argument_list pos:line="33" pos:column="17">( <argument><expr><name pos:line="33" pos:column="19">buffer<pos:position pos:line="33" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="27">bufsize<pos:position pos:line="33" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="36">schablone<pos:position pos:line="33" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="47">url<pos:position pos:line="33" pos:column="50"/></name></expr></argument> )<pos:position pos:line="33" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="53"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="34" pos:column="9">int<pos:position pos:line="34" pos:column="12"/></name></type> <name pos:line="34" pos:column="13">sockfd<pos:position pos:line="34" pos:column="19"/></name> <init pos:line="34" pos:column="20">= <expr><call><name pos:line="34" pos:column="22">connectTo<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">( <argument><expr><name pos:line="34" pos:column="33">serverHost<pos:position pos:line="34" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="45">serverPort<pos:position pos:line="34" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="34" pos:column="57">true<pos:position pos:line="34" pos:column="61"/></literal></expr></argument> )<pos:position pos:line="34" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="64"/></decl_stmt>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">( <expr><name pos:line="35" pos:column="14">sockfd<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">==<pos:position pos:line="35" pos:column="23"/></operator> <operator pos:line="35" pos:column="24">-<pos:position pos:line="35" pos:column="25"/></operator><literal type="number" pos:line="35" pos:column="25">1<pos:position pos:line="35" pos:column="26"/></literal></expr> )<pos:position pos:line="35" pos:column="28"/></condition><then pos:line="35" pos:column="28"> <block pos:line="35" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">fprintf<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">( <argument><expr><name pos:line="36" pos:column="22">stderr<pos:position pos:line="36" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="30">"unable to connect to server: %s\n"<pos:position pos:line="36" pos:column="65"/></literal></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="67">strerror<pos:position pos:line="36" pos:column="75"/></name><argument_list pos:line="36" pos:column="75">(<argument><expr><name pos:line="36" pos:column="76">errno<pos:position pos:line="36" pos:column="81"/></name></expr></argument>)<pos:position pos:line="36" pos:column="82"/></argument_list></call></expr></argument> )<pos:position pos:line="36" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="85"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="37" pos:column="13">delete<pos:position pos:line="37" pos:column="19"/></operator><index pos:line="37" pos:column="19">[]<pos:position pos:line="37" pos:column="21"/></index> <name pos:line="37" pos:column="22">buffer<pos:position pos:line="37" pos:column="28"/></name></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>
            <return pos:line="38" pos:column="13">return <expr><literal type="boolean" pos:line="38" pos:column="20">false<pos:position pos:line="38" pos:column="25"/></literal></expr>;<pos:position pos:line="38" pos:column="26"/></return>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if>

        <decl_stmt><decl><type><name pos:line="41" pos:column="9">int<pos:position pos:line="41" pos:column="12"/></name></type> <name pos:line="41" pos:column="13">content_size<pos:position pos:line="41" pos:column="25"/></name> <init pos:line="41" pos:column="26">= <expr><call><name pos:line="41" pos:column="28">strlen<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">(<argument><expr><name pos:line="41" pos:column="35">buffer<pos:position pos:line="41" pos:column="41"/></name></expr></argument>)<pos:position pos:line="41" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="43"/></decl_stmt>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">( <expr><call><name pos:line="42" pos:column="14">write<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">( <argument><expr><name pos:line="42" pos:column="21">sockfd<pos:position pos:line="42" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="29">buffer<pos:position pos:line="42" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="37">content_size<pos:position pos:line="42" pos:column="49"/></name></expr></argument> )<pos:position pos:line="42" pos:column="51"/></argument_list></call> <operator pos:line="42" pos:column="52">!=<pos:position pos:line="42" pos:column="54"/></operator> <name pos:line="42" pos:column="55">content_size<pos:position pos:line="42" pos:column="67"/></name></expr> )<pos:position pos:line="42" pos:column="69"/></condition><then pos:line="42" pos:column="69"> <block pos:line="42" pos:column="70">{
            <comment type="line" pos:line="43" pos:column="13">// error while talking to squid</comment>
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">fprintf<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">( <argument><expr><name pos:line="44" pos:column="22">stderr<pos:position pos:line="44" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="30">"unable to talk to server: %s\n"<pos:position pos:line="44" pos:column="62"/></literal></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="64">strerror<pos:position pos:line="44" pos:column="72"/></name><argument_list pos:line="44" pos:column="72">(<argument><expr><name pos:line="44" pos:column="73">errno<pos:position pos:line="44" pos:column="78"/></name></expr></argument>)<pos:position pos:line="44" pos:column="79"/></argument_list></call></expr></argument> )<pos:position pos:line="44" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="82"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">close<pos:position pos:line="45" pos:column="18"/></name><argument_list pos:line="45" pos:column="18">(<argument><expr><name pos:line="45" pos:column="19">sockfd<pos:position pos:line="45" pos:column="25"/></name></expr></argument>)<pos:position pos:line="45" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="46" pos:column="13">delete<pos:position pos:line="46" pos:column="19"/></operator><index pos:line="46" pos:column="19">[]<pos:position pos:line="46" pos:column="21"/></index> <name pos:line="46" pos:column="22">buffer<pos:position pos:line="46" pos:column="28"/></name></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
            <return pos:line="47" pos:column="13">return <expr><literal type="boolean" pos:line="47" pos:column="20">false<pos:position pos:line="47" pos:column="25"/></literal></expr>;<pos:position pos:line="47" pos:column="26"/></return>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">memset<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">( <argument><expr><name pos:line="49" pos:column="17">buffer<pos:position pos:line="49" pos:column="23"/></name><operator pos:line="49" pos:column="23">+<pos:position pos:line="49" pos:column="24"/></operator><literal type="number" pos:line="49" pos:column="24">8<pos:position pos:line="49" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="27">0<pos:position pos:line="49" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="30">4<pos:position pos:line="49" pos:column="31"/></literal></expr></argument> )<pos:position pos:line="49" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="50" pos:column="9">int<pos:position pos:line="50" pos:column="12"/></name></type> <name pos:line="50" pos:column="13">readLen<pos:position pos:line="50" pos:column="20"/></name> <init pos:line="50" pos:column="21">= <expr><call><name pos:line="50" pos:column="23">read<pos:position pos:line="50" pos:column="27"/></name><argument_list pos:line="50" pos:column="27">(<argument><expr><name pos:line="50" pos:column="28">sockfd<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="36">buffer<pos:position pos:line="50" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="44">bufsize<pos:position pos:line="50" pos:column="51"/></name></expr></argument>)<pos:position pos:line="50" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="53"/></decl_stmt>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">readLen<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">&lt;<pos:position pos:line="51" pos:column="25"/></operator> <literal type="number" pos:line="51" pos:column="23">1<pos:position pos:line="51" pos:column="24"/></literal></expr>)<pos:position pos:line="51" pos:column="25"/></condition><then pos:line="51" pos:column="25"> <block pos:line="51" pos:column="26">{
            <comment type="line" pos:line="52" pos:column="13">// error while reading squid's answer</comment>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">fprintf<pos:position pos:line="53" pos:column="20"/></name><argument_list pos:line="53" pos:column="20">( <argument><expr><name pos:line="53" pos:column="22">stderr<pos:position pos:line="53" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="30">"unable to read answer: %s\n"<pos:position pos:line="53" pos:column="59"/></literal></expr></argument>, <argument><expr><call><name pos:line="53" pos:column="61">strerror<pos:position pos:line="53" pos:column="69"/></name><argument_list pos:line="53" pos:column="69">(<argument><expr><name pos:line="53" pos:column="70">errno<pos:position pos:line="53" pos:column="75"/></name></expr></argument>)<pos:position pos:line="53" pos:column="76"/></argument_list></call></expr></argument> )<pos:position pos:line="53" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="79"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">close<pos:position pos:line="54" pos:column="18"/></name><argument_list pos:line="54" pos:column="18">(<argument><expr><name pos:line="54" pos:column="19">sockfd<pos:position pos:line="54" pos:column="25"/></name></expr></argument>)<pos:position pos:line="54" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="55" pos:column="13">delete<pos:position pos:line="55" pos:column="19"/></operator><index pos:line="55" pos:column="19">[]<pos:position pos:line="55" pos:column="21"/></index> <name pos:line="55" pos:column="22">buffer<pos:position pos:line="55" pos:column="28"/></name></expr>;<pos:position pos:line="55" pos:column="29"/></expr_stmt>
            <return pos:line="56" pos:column="13">return <expr><literal type="boolean" pos:line="56" pos:column="20">false<pos:position pos:line="56" pos:column="25"/></literal></expr>;<pos:position pos:line="56" pos:column="26"/></return>
        }<pos:position pos:line="57" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="58" pos:column="9">buffer<pos:position pos:line="58" pos:column="15"/></name><index pos:line="58" pos:column="15">[<expr><name pos:line="58" pos:column="16">bufsize<pos:position pos:line="58" pos:column="23"/></name><operator pos:line="58" pos:column="23">-<pos:position pos:line="58" pos:column="24"/></operator><literal type="number" pos:line="58" pos:column="24">1<pos:position pos:line="58" pos:column="25"/></literal></expr>]<pos:position pos:line="58" pos:column="26"/></index></name> <operator pos:line="58" pos:column="27">=<pos:position pos:line="58" pos:column="28"/></operator> <literal type="char" pos:line="58" pos:column="29">'\0'<pos:position pos:line="58" pos:column="33"/></literal></expr>;<pos:position pos:line="58" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">close<pos:position pos:line="59" pos:column="14"/></name><argument_list pos:line="59" pos:column="14">(<argument><expr><name pos:line="59" pos:column="15">sockfd<pos:position pos:line="59" pos:column="21"/></name></expr></argument>)<pos:position pos:line="59" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="23"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="60" pos:column="9">int64_t<pos:position pos:line="60" pos:column="16"/></name></type> <name pos:line="60" pos:column="17">s<pos:position pos:line="60" pos:column="18"/></name> <init pos:line="60" pos:column="19">= <expr><call><name pos:line="60" pos:column="21">strtol<pos:position pos:line="60" pos:column="27"/></name><argument_list pos:line="60" pos:column="27">(<argument><expr><name pos:line="60" pos:column="28">buffer<pos:position pos:line="60" pos:column="34"/></name><operator pos:line="60" pos:column="34">+<pos:position pos:line="60" pos:column="35"/></operator><literal type="number" pos:line="60" pos:column="35">8<pos:position pos:line="60" pos:column="36"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="60" pos:column="37">0<pos:position pos:line="60" pos:column="38"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="60" pos:column="39">10<pos:position pos:line="60" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="43"/></decl_stmt>
        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">s<pos:position pos:line="61" pos:column="14"/></name> <operator pos:line="61" pos:column="15">&gt;<pos:position pos:line="61" pos:column="19"/></operator> <literal type="number" pos:line="61" pos:column="17">0<pos:position pos:line="61" pos:column="18"/></literal> <operator pos:line="61" pos:column="19">&amp;&amp;<pos:position pos:line="61" pos:column="29"/></operator> <name pos:line="61" pos:column="22">s<pos:position pos:line="61" pos:column="23"/></name> <operator pos:line="61" pos:column="24">&lt;<pos:position pos:line="61" pos:column="28"/></operator> <literal type="number" pos:line="61" pos:column="26">1000<pos:position pos:line="61" pos:column="30"/></literal></expr>)<pos:position pos:line="61" pos:column="31"/></condition><then pos:line="61" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="13">status<pos:position pos:line="62" pos:column="19"/></name> <operator pos:line="62" pos:column="20">=<pos:position pos:line="62" pos:column="21"/></operator> <name pos:line="62" pos:column="22">s<pos:position pos:line="62" pos:column="23"/></name></expr>;<pos:position pos:line="62" pos:column="24"/></expr_stmt></block></then>
        <else pos:line="63" pos:column="9">else <block pos:line="63" pos:column="14">{
            <comment type="line" pos:line="64" pos:column="13">// error while reading squid's answer</comment>
            <expr_stmt><expr><call><name pos:line="65" pos:column="13">fprintf<pos:position pos:line="65" pos:column="20"/></name><argument_list pos:line="65" pos:column="20">( <argument><expr><name pos:line="65" pos:column="22">stderr<pos:position pos:line="65" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="30">"invalid HTTP status in reply: %s\n"<pos:position pos:line="65" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="68">buffer<pos:position pos:line="65" pos:column="74"/></name><operator pos:line="65" pos:column="74">+<pos:position pos:line="65" pos:column="75"/></operator><literal type="number" pos:line="65" pos:column="75">8<pos:position pos:line="65" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="78"/></expr_stmt>
        }<pos:position pos:line="66" pos:column="10"/></block></else></if>
        <expr_stmt><expr><operator pos:line="67" pos:column="9">delete<pos:position pos:line="67" pos:column="15"/></operator><index pos:line="67" pos:column="15">[]<pos:position pos:line="67" pos:column="17"/></index> <name pos:line="67" pos:column="18">buffer<pos:position pos:line="67" pos:column="24"/></name></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="70" pos:column="5">// log the output of our operation</comment>
    <decl_stmt><decl><type><name pos:line="71" pos:column="5">bool<pos:position pos:line="71" pos:column="9"/></name></type> <name pos:line="71" pos:column="10">flag<pos:position pos:line="71" pos:column="14"/></name> <init pos:line="71" pos:column="15">= <expr><literal type="boolean" pos:line="71" pos:column="17">true<pos:position pos:line="71" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="71" pos:column="22"/></decl_stmt>
    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">( <expr><name><operator pos:line="72" pos:column="10">::<pos:position pos:line="72" pos:column="12"/></operator><name pos:line="72" pos:column="12">verbose<pos:position pos:line="72" pos:column="19"/></name></name></expr> )<pos:position pos:line="72" pos:column="21"/></condition><then pos:line="72" pos:column="21"> <block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="22">flag<pos:position pos:line="72" pos:column="26"/></name> <operator pos:line="72" pos:column="27">=<pos:position pos:line="72" pos:column="28"/></operator> <operator pos:line="72" pos:column="29">(<pos:position pos:line="72" pos:column="30"/></operator> <call><name pos:line="72" pos:column="31">log_extended<pos:position pos:line="72" pos:column="43"/></name><argument_list pos:line="72" pos:column="43">( <argument><expr><name pos:line="72" pos:column="45">fn<pos:position pos:line="72" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="49">status<pos:position pos:line="72" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="57">size<pos:position pos:line="72" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="63">&amp;<pos:position pos:line="72" pos:column="68"/></operator><name pos:line="72" pos:column="64">meta<pos:position pos:line="72" pos:column="68"/></name></expr></argument> )<pos:position pos:line="72" pos:column="70"/></argument_list></call> <operator pos:line="72" pos:column="71">&gt;=<pos:position pos:line="72" pos:column="76"/></operator> <literal type="number" pos:line="72" pos:column="74">0<pos:position pos:line="72" pos:column="75"/></literal> <operator pos:line="72" pos:column="76">)<pos:position pos:line="72" pos:column="77"/></operator></expr>;<pos:position pos:line="72" pos:column="78"/></expr_stmt></block></then>
    <else pos:line="73" pos:column="5">else <block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="10">flag<pos:position pos:line="73" pos:column="14"/></name> <operator pos:line="73" pos:column="15">=<pos:position pos:line="73" pos:column="16"/></operator> <operator pos:line="73" pos:column="17">(<pos:position pos:line="73" pos:column="18"/></operator> <call><name pos:line="73" pos:column="19">log_output<pos:position pos:line="73" pos:column="29"/></name><argument_list pos:line="73" pos:column="29">( <argument><expr><name pos:line="73" pos:column="31">fn<pos:position pos:line="73" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="35">status<pos:position pos:line="73" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="43">size<pos:position pos:line="73" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="49">url<pos:position pos:line="73" pos:column="52"/></name></expr></argument> )<pos:position pos:line="73" pos:column="54"/></argument_list></call> <operator pos:line="73" pos:column="55">&gt;=<pos:position pos:line="73" pos:column="60"/></operator> <literal type="number" pos:line="73" pos:column="58">0<pos:position pos:line="73" pos:column="59"/></literal> <operator pos:line="73" pos:column="60">)<pos:position pos:line="73" pos:column="61"/></operator></expr>;<pos:position pos:line="73" pos:column="62"/></expr_stmt></block></else></if>

    <comment type="line" pos:line="75" pos:column="5">// remove the file, if purgemode bit#1, and HTTP result status 404).</comment>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">( <expr><operator pos:line="76" pos:column="10">(<pos:position pos:line="76" pos:column="11"/></operator><name><operator pos:line="76" pos:column="11">::<pos:position pos:line="76" pos:column="13"/></operator><name pos:line="76" pos:column="13">purgeMode<pos:position pos:line="76" pos:column="22"/></name></name> <operator pos:line="76" pos:column="23">&amp;<pos:position pos:line="76" pos:column="28"/></operator> <literal type="number" pos:line="76" pos:column="25">0x02<pos:position pos:line="76" pos:column="29"/></literal><operator pos:line="76" pos:column="29">)<pos:position pos:line="76" pos:column="30"/></operator> <operator pos:line="76" pos:column="31">&amp;&amp;<pos:position pos:line="76" pos:column="41"/></operator> <name pos:line="76" pos:column="34">status<pos:position pos:line="76" pos:column="40"/></name> <operator pos:line="76" pos:column="41">==<pos:position pos:line="76" pos:column="43"/></operator> <literal type="number" pos:line="76" pos:column="44">404<pos:position pos:line="76" pos:column="47"/></literal></expr> )<pos:position pos:line="76" pos:column="49"/></condition><then pos:line="76" pos:column="49"> <block pos:line="76" pos:column="50">{
        <expr_stmt><expr><name pos:line="77" pos:column="9">reminder<pos:position pos:line="77" pos:column="17"/></name> <operator pos:line="77" pos:column="18">=<pos:position pos:line="77" pos:column="19"/></operator> <literal type="boolean" pos:line="77" pos:column="20">true<pos:position pos:line="77" pos:column="24"/></literal></expr>;<pos:position pos:line="77" pos:column="25"/></expr_stmt>
        <if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">( <expr><call><name pos:line="78" pos:column="14">unlink<pos:position pos:line="78" pos:column="20"/></name><argument_list pos:line="78" pos:column="20">(<argument><expr><name pos:line="78" pos:column="21">fn<pos:position pos:line="78" pos:column="23"/></name></expr></argument>)<pos:position pos:line="78" pos:column="24"/></argument_list></call> <operator pos:line="78" pos:column="25">==<pos:position pos:line="78" pos:column="27"/></operator> <operator pos:line="78" pos:column="28">-<pos:position pos:line="78" pos:column="29"/></operator><literal type="number" pos:line="78" pos:column="29">1<pos:position pos:line="78" pos:column="30"/></literal></expr> )<pos:position pos:line="78" pos:column="32"/></condition><then pos:line="78" pos:column="32">
            <comment type="line" pos:line="79" pos:column="13">// error while unlinking file, this may happen due to the cache</comment>
            <comment type="line" pos:line="80" pos:column="13">// unlinking a file while it is still in the readdir() cache of purge.</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="13">fprintf<pos:position pos:line="81" pos:column="20"/></name><argument_list pos:line="81" pos:column="20">( <argument><expr><name pos:line="81" pos:column="22">stderr<pos:position pos:line="81" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="30">"WARNING: unable to unlink %s: %s\n"<pos:position pos:line="81" pos:column="66"/></literal></expr></argument>,
                     <argument><expr><name pos:line="82" pos:column="22">fn<pos:position pos:line="82" pos:column="24"/></name></expr></argument>, <argument><expr><call><name pos:line="82" pos:column="26">strerror<pos:position pos:line="82" pos:column="34"/></name><argument_list pos:line="82" pos:column="34">(<argument><expr><name pos:line="82" pos:column="35">errno<pos:position pos:line="82" pos:column="40"/></name></expr></argument>)<pos:position pos:line="82" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="82" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="44"/></expr_stmt></block></then></if>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>

    <return pos:line="85" pos:column="5">return <expr><name pos:line="85" pos:column="12">flag<pos:position pos:line="85" pos:column="16"/></name></expr>;<pos:position pos:line="85" pos:column="17"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
