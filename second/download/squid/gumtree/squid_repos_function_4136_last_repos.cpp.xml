<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4136_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">allow_t<pos:position pos:line="1" pos:column="8"/></name> <specifier pos:line="1" pos:column="9">const<pos:position pos:line="1" pos:column="14"/></specifier> <modifier pos:line="1" pos:column="15">&amp;<pos:position pos:line="1" pos:column="20"/></modifier></type>
<name><name pos:line="2" pos:column="1">ACLChecklist<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">fastCheck<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">PROF_start<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">aclCheckFast<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">preCheck<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">(<argument><expr><literal type="string" pos:line="6" pos:column="14">"fast rules"<pos:position pos:line="6" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">asyncCaller_<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <literal type="boolean" pos:line="7" pos:column="20">false<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">28<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">5<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="19">"aclCheckFast: list: "<pos:position pos:line="9" pos:column="41"/></literal> <operator pos:line="9" pos:column="42">&lt;&lt;<pos:position pos:line="9" pos:column="50"/></operator> <name pos:line="9" pos:column="45">accessList<pos:position pos:line="9" pos:column="55"/></name></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="57"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name><name pos:line="10" pos:column="11">Acl<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">::<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">Tree<pos:position pos:line="10" pos:column="20"/></name></name> <modifier pos:line="10" pos:column="21">*<pos:position pos:line="10" pos:column="22"/></modifier></type><name pos:line="10" pos:column="22">acl<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><call><name pos:line="10" pos:column="28">cbdataReference<pos:position pos:line="10" pos:column="43"/></name><argument_list pos:line="10" pos:column="43">(<argument><expr><name pos:line="10" pos:column="44">accessList<pos:position pos:line="10" pos:column="54"/></name></expr></argument>)<pos:position pos:line="10" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="56"/></decl_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">acl<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">!=<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">NULL<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">&amp;&amp;<pos:position pos:line="11" pos:column="31"/></operator> <call><name pos:line="11" pos:column="24">cbdataReferenceValid<pos:position pos:line="11" pos:column="44"/></name><argument_list pos:line="11" pos:column="44">(<argument><expr><name pos:line="11" pos:column="45">acl<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="50"/></condition><then pos:line="11" pos:column="50"> <block pos:line="11" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">matchAndFinish<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">()<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt> <comment type="line" pos:line="12" pos:column="27">// calls markFinished() on success</comment>

        <comment type="line" pos:line="14" pos:column="9">// if finished (on a match or in exceptional cases), stop</comment>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">finished<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">()<pos:position pos:line="15" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="24"/></condition><then pos:line="15" pos:column="24"> <block pos:line="15" pos:column="25">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">cbdataReferenceDone<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">acl<pos:position pos:line="16" pos:column="36"/></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><name pos:line="17" pos:column="13">occupied_<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <literal type="boolean" pos:line="17" pos:column="25">false<pos:position pos:line="17" pos:column="30"/></literal></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">PROF_stop<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">aclCheckFast<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>
            <return pos:line="19" pos:column="13">return <expr><call><name pos:line="19" pos:column="20">currentAnswer<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">()<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></return>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="22" pos:column="9">// fall through for mismatch handling</comment>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="25" pos:column="5">// There were no rules to match or no rules matched</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">calcImplicitAnswer<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">()<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">cbdataReferenceDone<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">acl<pos:position pos:line="27" pos:column="28"/></name></expr></argument>)<pos:position pos:line="27" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">occupied_<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <literal type="boolean" pos:line="28" pos:column="17">false<pos:position pos:line="28" pos:column="22"/></literal></expr>;<pos:position pos:line="28" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">PROF_stop<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">aclCheckFast<pos:position pos:line="29" pos:column="27"/></name></expr></argument>)<pos:position pos:line="29" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>

    <return pos:line="31" pos:column="5">return <expr><call><name pos:line="31" pos:column="12">currentAnswer<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">()<pos:position pos:line="31" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="28"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
