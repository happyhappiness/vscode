<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2461_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">delayAwareRead<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name><name pos:line="2" pos:column="34">Comm<pos:position pos:line="2" pos:column="38"/></name><operator pos:line="2" pos:column="38">::<pos:position pos:line="2" pos:column="40"/></operator><name pos:line="2" pos:column="40">ConnectionPointer<pos:position pos:line="2" pos:column="57"/></name></name> <modifier pos:line="2" pos:column="58">&amp;<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="59">conn<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="65">char<pos:position pos:line="2" pos:column="69"/></name> <modifier pos:line="2" pos:column="70">*<pos:position pos:line="2" pos:column="71"/></modifier></type><name pos:line="2" pos:column="71">buf<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="76">int<pos:position pos:line="2" pos:column="79"/></name></type> <name pos:line="2" pos:column="80">len<pos:position pos:line="2" pos:column="83"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="85">AsyncCall<pos:position pos:line="2" pos:column="94"/></name><operator pos:line="2" pos:column="94">::<pos:position pos:line="2" pos:column="96"/></operator><name pos:line="2" pos:column="96">Pointer<pos:position pos:line="2" pos:column="103"/></name></name></type> <name pos:line="2" pos:column="104">callback<pos:position pos:line="2" pos:column="112"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="113"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">size_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">amountToRead<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><call><name pos:line="4" pos:column="27">bytesWanted<pos:position pos:line="4" pos:column="38"/></name><argument_list pos:line="4" pos:column="38">(<argument><expr><call><name><name pos:line="4" pos:column="39">Range<pos:position pos:line="4" pos:column="44"/></name><argument_list type="generic" pos:line="4" pos:column="44">&lt;<argument><expr><name pos:line="4" pos:column="45">size_t<pos:position pos:line="4" pos:column="51"/></name></expr></argument>&gt;<pos:position pos:line="4" pos:column="55"/></argument_list></name><argument_list pos:line="4" pos:column="52">(<argument><expr><literal type="number" pos:line="4" pos:column="53">0<pos:position pos:line="4" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="56">len<pos:position pos:line="4" pos:column="59"/></name></expr></argument>)<pos:position pos:line="4" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* sketch: readdeferer* = getdeferer.
     * -&gt;deferRead (fd, buf, len, callback, DelayAwareRead, this)
     */</comment>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">amountToRead<pos:position pos:line="9" pos:column="21"/></name> <operator pos:line="9" pos:column="22">&lt;=<pos:position pos:line="9" pos:column="27"/></operator> <literal type="number" pos:line="9" pos:column="25">0<pos:position pos:line="9" pos:column="26"/></literal></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27"> <block pos:line="9" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name> <argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">mem_obj<pos:position pos:line="10" pos:column="24"/></name></expr></argument>)<pos:position pos:line="10" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="11" pos:column="9">mem_obj<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">delayRead<pos:position pos:line="11" pos:column="27"/></name></name><argument_list pos:line="11" pos:column="27">(<argument><expr><call><name pos:line="11" pos:column="28">DeferredRead<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">DeferReader<pos:position pos:line="11" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="54">this<pos:position pos:line="11" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="60">CommRead<pos:position pos:line="11" pos:column="68"/></name><argument_list pos:line="11" pos:column="68">(<argument><expr><name pos:line="11" pos:column="69">conn<pos:position pos:line="11" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="75">buf<pos:position pos:line="11" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="80">len<pos:position pos:line="11" pos:column="83"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="85">callback<pos:position pos:line="11" pos:column="93"/></name></expr></argument>)<pos:position pos:line="11" pos:column="94"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="95"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="97"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">fd_table<pos:position pos:line="15" pos:column="17"/></name><index pos:line="15" pos:column="17">[<expr><name><name pos:line="15" pos:column="18">conn<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">-&gt;<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="24">fd<pos:position pos:line="15" pos:column="26"/></name></name></expr>]<pos:position pos:line="15" pos:column="27"/></index></name><operator pos:line="15" pos:column="27">.<pos:position pos:line="15" pos:column="28"/></operator><call><name pos:line="15" pos:column="28">closing<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">()<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="38"/></condition><then pos:line="15" pos:column="38"> <block pos:line="15" pos:column="39">{
        <comment type="line" pos:line="16" pos:column="9">// Readers must have closing callbacks if they want to be notified. No</comment>
        <comment type="line" pos:line="17" pos:column="9">// readers appeared to care around 2009/12/14 as they skipped reading</comment>
        <comment type="line" pos:line="18" pos:column="9">// for other reasons. Closing may already be true at the delyaAwareRead</comment>
        <comment type="line" pos:line="19" pos:column="9">// call time or may happen while we wait after delayRead() above.</comment>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">20<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="20">3<pos:position pos:line="20" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="23">HERE<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">&lt;&lt;<pos:position pos:line="20" pos:column="36"/></operator> <literal type="string" pos:line="20" pos:column="31">"wont read from closing "<pos:position pos:line="20" pos:column="56"/></literal> <operator pos:line="20" pos:column="57">&lt;&lt;<pos:position pos:line="20" pos:column="65"/></operator> <name pos:line="20" pos:column="60">conn<pos:position pos:line="20" pos:column="64"/></name> <operator pos:line="20" pos:column="65">&lt;&lt;<pos:position pos:line="20" pos:column="73"/></operator> <literal type="string" pos:line="20" pos:column="68">" for "<pos:position pos:line="20" pos:column="75"/></literal> <operator pos:line="20" pos:column="76">&lt;&lt;<pos:position pos:line="20" pos:column="84"/></operator>
               <name pos:line="21" pos:column="16">callback<pos:position pos:line="21" pos:column="24"/></name></expr></argument>)<pos:position pos:line="21" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt>
        <return pos:line="22" pos:column="9">return;<pos:position pos:line="22" pos:column="16"/></return> <comment type="line" pos:line="22" pos:column="17">// the read callback will never be called</comment>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">comm_read<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">conn<pos:position pos:line="25" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="21">buf<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="26">amountToRead<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">callback<pos:position pos:line="25" pos:column="48"/></name></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
