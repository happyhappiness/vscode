<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5417_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">Logfile<pos:position pos:line="1" pos:column="8"/></name> <modifier pos:line="1" pos:column="9">*<pos:position pos:line="1" pos:column="10"/></modifier></type>
<name pos:line="2" pos:column="1">logfileOpen<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><specifier pos:line="2" pos:column="13">const<pos:position pos:line="2" pos:column="18"/></specifier> <name pos:line="2" pos:column="19">char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">path<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">size_t<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">bufsz<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">int<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">fatal_flag<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">ret<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">patharg<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">50<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="16">DBG_IMPORTANT<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="31">"Logfile: opening log "<pos:position pos:line="7" pos:column="54"/></literal> <operator pos:line="7" pos:column="55">&lt;&lt;<pos:position pos:line="7" pos:column="63"/></operator> <name pos:line="7" pos:column="58">path<pos:position pos:line="7" pos:column="62"/></name></expr></argument>)<pos:position pos:line="7" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">CBDATA_INIT_TYPE<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">Logfile<pos:position pos:line="8" pos:column="29"/></name></expr></argument>)<pos:position pos:line="8" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="31"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">Logfile<pos:position pos:line="10" pos:column="12"/></name> <modifier pos:line="10" pos:column="13">*<pos:position pos:line="10" pos:column="14"/></modifier></type><name pos:line="10" pos:column="14">lf<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><call><name pos:line="10" pos:column="19">cbdataAlloc<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">Logfile<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="40"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">xstrncpy<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><name><name pos:line="11" pos:column="14">lf<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">path<pos:position pos:line="11" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="24">path<pos:position pos:line="11" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="30">MAXPATHLEN<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">patharg<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <name pos:line="12" pos:column="15">path<pos:position pos:line="12" pos:column="19"/></name></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt>
    <comment type="block" pos:line="13" pos:column="5">/* need to call the per-logfile-type code */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name pos:line="14" pos:column="9">strncmp<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">path<pos:position pos:line="14" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="23">"stdio:"<pos:position pos:line="14" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="33">6<pos:position pos:line="14" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call> <operator pos:line="14" pos:column="36">==<pos:position pos:line="14" pos:column="38"/></operator> <literal type="number" pos:line="14" pos:column="39">0<pos:position pos:line="14" pos:column="40"/></literal></expr>)<pos:position pos:line="14" pos:column="41"/></condition><then pos:line="14" pos:column="41"> <block pos:line="14" pos:column="42">{
        <expr_stmt><expr><name pos:line="15" pos:column="9">patharg<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <name pos:line="15" pos:column="19">path<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">+<pos:position pos:line="15" pos:column="25"/></operator> <literal type="number" pos:line="15" pos:column="26">6<pos:position pos:line="15" pos:column="27"/></literal></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name pos:line="16" pos:column="9">ret<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">logfile_mod_stdio_open<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">lf<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">patharg<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">bufsz<pos:position pos:line="16" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="58">fatal_flag<pos:position pos:line="16" pos:column="68"/></name></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="70"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then> <elseif pos:line="17" pos:column="7">else <if pos:line="17" pos:column="12">if <condition pos:line="17" pos:column="15">(<expr><call><name pos:line="17" pos:column="16">strncmp<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">path<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="30">"daemon:"<pos:position pos:line="17" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="41">7<pos:position pos:line="17" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call> <operator pos:line="17" pos:column="44">==<pos:position pos:line="17" pos:column="46"/></operator> <literal type="number" pos:line="17" pos:column="47">0<pos:position pos:line="17" pos:column="48"/></literal></expr>)<pos:position pos:line="17" pos:column="49"/></condition><then pos:line="17" pos:column="49"> <block pos:line="17" pos:column="50">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">patharg<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <name pos:line="18" pos:column="19">path<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">+<pos:position pos:line="18" pos:column="25"/></operator> <literal type="number" pos:line="18" pos:column="26">7<pos:position pos:line="18" pos:column="27"/></literal></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name pos:line="19" pos:column="9">ret<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <call><name pos:line="19" pos:column="15">logfile_mod_daemon_open<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><name pos:line="19" pos:column="39">lf<pos:position pos:line="19" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="43">patharg<pos:position pos:line="19" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="52">bufsz<pos:position pos:line="19" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="59">fatal_flag<pos:position pos:line="19" pos:column="69"/></name></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if></elseif> <elseif pos:line="20" pos:column="7">else <if pos:line="20" pos:column="12">if <condition pos:line="20" pos:column="15">(<expr><call><name pos:line="20" pos:column="16">strncmp<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">path<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="30">"tcp:"<pos:position pos:line="20" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="38">4<pos:position pos:line="20" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call> <operator pos:line="20" pos:column="41">==<pos:position pos:line="20" pos:column="43"/></operator> <literal type="number" pos:line="20" pos:column="44">0<pos:position pos:line="20" pos:column="45"/></literal></expr>)<pos:position pos:line="20" pos:column="46"/></condition><then pos:line="20" pos:column="46"> <block pos:line="20" pos:column="47">{
        <expr_stmt><expr><name pos:line="21" pos:column="9">patharg<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">path<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">+<pos:position pos:line="21" pos:column="25"/></operator> <literal type="number" pos:line="21" pos:column="26">4<pos:position pos:line="21" pos:column="27"/></literal></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">ret<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">logfile_mod_tcp_open<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><name pos:line="22" pos:column="36">lf<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">patharg<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="49">bufsz<pos:position pos:line="22" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="56">fatal_flag<pos:position pos:line="22" pos:column="66"/></name></expr></argument>)<pos:position pos:line="22" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if></elseif> <elseif pos:line="23" pos:column="7">else <if pos:line="23" pos:column="12">if <condition pos:line="23" pos:column="15">(<expr><call><name pos:line="23" pos:column="16">strncmp<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><name pos:line="23" pos:column="24">path<pos:position pos:line="23" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="30">"udp:"<pos:position pos:line="23" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="38">4<pos:position pos:line="23" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call> <operator pos:line="23" pos:column="41">==<pos:position pos:line="23" pos:column="43"/></operator> <literal type="number" pos:line="23" pos:column="44">0<pos:position pos:line="23" pos:column="45"/></literal></expr>)<pos:position pos:line="23" pos:column="46"/></condition><then pos:line="23" pos:column="46"> <block pos:line="23" pos:column="47">{
        <expr_stmt><expr><name pos:line="24" pos:column="9">patharg<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="19">path<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">+<pos:position pos:line="24" pos:column="25"/></operator> <literal type="number" pos:line="24" pos:column="26">4<pos:position pos:line="24" pos:column="27"/></literal></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">ret<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <call><name pos:line="25" pos:column="15">logfile_mod_udp_open<pos:position pos:line="25" pos:column="35"/></name><argument_list pos:line="25" pos:column="35">(<argument><expr><name pos:line="25" pos:column="36">lf<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">patharg<pos:position pos:line="25" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="49">bufsz<pos:position pos:line="25" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="56">fatal_flag<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><name pos:line="26" pos:column="5">HAVE_SYSLOG<pos:position pos:line="26" pos:column="16"/></name></expr></cpp:if>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if></elseif> <elseif pos:line="27" pos:column="7">else <if pos:line="27" pos:column="12">if <condition pos:line="27" pos:column="15">(<expr><call><name pos:line="27" pos:column="16">strncmp<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">path<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="30">"syslog:"<pos:position pos:line="27" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="41">7<pos:position pos:line="27" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call> <operator pos:line="27" pos:column="44">==<pos:position pos:line="27" pos:column="46"/></operator> <literal type="number" pos:line="27" pos:column="47">0<pos:position pos:line="27" pos:column="48"/></literal></expr>)<pos:position pos:line="27" pos:column="49"/></condition><then pos:line="27" pos:column="49"> <block pos:line="27" pos:column="50">{
        <expr_stmt><expr><name pos:line="28" pos:column="9">patharg<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <name pos:line="28" pos:column="19">path<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">+<pos:position pos:line="28" pos:column="25"/></operator> <literal type="number" pos:line="28" pos:column="26">7<pos:position pos:line="28" pos:column="27"/></literal></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name pos:line="29" pos:column="9">ret<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">logfile_mod_syslog_open<pos:position pos:line="29" pos:column="38"/></name><argument_list pos:line="29" pos:column="38">(<argument><expr><name pos:line="29" pos:column="39">lf<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">patharg<pos:position pos:line="29" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="52">bufsz<pos:position pos:line="29" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="59">fatal_flag<pos:position pos:line="29" pos:column="69"/></name></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="71"/></expr_stmt>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if></elseif> <else pos:line="31" pos:column="7">else <block pos:line="31" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">50<pos:position pos:line="32" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="20">DBG_IMPORTANT<pos:position pos:line="32" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="35">"WARNING: log parameters now start with a module name. Use 'stdio:"<pos:position pos:line="32" pos:column="102"/></literal> <operator pos:line="32" pos:column="103">&lt;&lt;<pos:position pos:line="32" pos:column="111"/></operator> <name pos:line="32" pos:column="106">patharg<pos:position pos:line="32" pos:column="113"/></name> <operator pos:line="32" pos:column="114">&lt;&lt;<pos:position pos:line="32" pos:column="122"/></operator> <literal type="string" pos:line="32" pos:column="117">"'"<pos:position pos:line="32" pos:column="120"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="121"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="122"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">snprintf<pos:position pos:line="33" pos:column="17"/></name><argument_list pos:line="33" pos:column="17">(<argument><expr><name><name pos:line="33" pos:column="18">lf<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">-&gt;<pos:position pos:line="33" pos:column="25"/></operator><name pos:line="33" pos:column="22">path<pos:position pos:line="33" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="28">MAXPATHLEN<pos:position pos:line="33" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="40">"stdio:%s"<pos:position pos:line="33" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="52">patharg<pos:position pos:line="33" pos:column="59"/></name></expr></argument>)<pos:position pos:line="33" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><name pos:line="34" pos:column="9">ret<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <call><name pos:line="34" pos:column="15">logfile_mod_stdio_open<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">lf<pos:position pos:line="34" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="42">patharg<pos:position pos:line="34" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="51">bufsz<pos:position pos:line="34" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="58">fatal_flag<pos:position pos:line="34" pos:column="68"/></name></expr></argument>)<pos:position pos:line="34" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="70"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></else></if>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">!<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">ret<pos:position pos:line="36" pos:column="13"/></name></expr>)<pos:position pos:line="36" pos:column="14"/></condition><then pos:line="36" pos:column="14"> <block pos:line="36" pos:column="15">{
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">fatal_flag<pos:position pos:line="37" pos:column="23"/></name></expr>)<pos:position pos:line="37" pos:column="24"/></condition><then pos:line="37" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="13">fatalf<pos:position pos:line="38" pos:column="19"/></name><argument_list pos:line="38" pos:column="19">(<argument><expr><literal type="string" pos:line="38" pos:column="20">"logfileOpen: %s: couldn't open!\n"<pos:position pos:line="38" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="57">path<pos:position pos:line="38" pos:column="61"/></name></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="63"/></expr_stmt></block></then>
        <else pos:line="39" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="13">debugs<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><literal type="number" pos:line="40" pos:column="20">50<pos:position pos:line="40" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="24">DBG_IMPORTANT<pos:position pos:line="40" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="39">"logfileOpen: "<pos:position pos:line="40" pos:column="54"/></literal> <operator pos:line="40" pos:column="55">&lt;&lt;<pos:position pos:line="40" pos:column="63"/></operator> <name pos:line="40" pos:column="58">path<pos:position pos:line="40" pos:column="62"/></name> <operator pos:line="40" pos:column="63">&lt;&lt;<pos:position pos:line="40" pos:column="71"/></operator> <literal type="string" pos:line="40" pos:column="66">": couldn't open!"<pos:position pos:line="40" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="86"/></expr_stmt></block></else></if>
        <expr_stmt><expr><call><name><name pos:line="41" pos:column="9">lf<pos:position pos:line="41" pos:column="11"/></name><operator pos:line="41" pos:column="11">-&gt;<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="13">f_close<pos:position pos:line="41" pos:column="20"/></name></name><argument_list pos:line="41" pos:column="20">(<argument><expr><name pos:line="41" pos:column="21">lf<pos:position pos:line="41" pos:column="23"/></name></expr></argument>)<pos:position pos:line="41" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">cbdataFree<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">lf<pos:position pos:line="42" pos:column="22"/></name></expr></argument>)<pos:position pos:line="42" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="24"/></expr_stmt>
        <return pos:line="43" pos:column="9">return <expr><name pos:line="43" pos:column="16">NULL<pos:position pos:line="43" pos:column="20"/></name></expr>;<pos:position pos:line="43" pos:column="21"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">assert<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><name><name pos:line="45" pos:column="12">lf<pos:position pos:line="45" pos:column="14"/></name><operator pos:line="45" pos:column="14">-&gt;<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="16">data<pos:position pos:line="45" pos:column="20"/></name></name> <operator pos:line="45" pos:column="21">!=<pos:position pos:line="45" pos:column="23"/></operator> <name pos:line="45" pos:column="24">NULL<pos:position pos:line="45" pos:column="28"/></name></expr></argument>)<pos:position pos:line="45" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="30"/></expr_stmt>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name pos:line="47" pos:column="9">fatal_flag<pos:position pos:line="47" pos:column="19"/></name></expr>)<pos:position pos:line="47" pos:column="20"/></condition><then pos:line="47" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="48" pos:column="9">lf<pos:position pos:line="48" pos:column="11"/></name><operator pos:line="48" pos:column="11">-&gt;<pos:position pos:line="48" pos:column="16"/></operator><name pos:line="48" pos:column="13">flags<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">.<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="19">fatal<pos:position pos:line="48" pos:column="24"/></name></name> <operator pos:line="48" pos:column="25">=<pos:position pos:line="48" pos:column="26"/></operator> <literal type="number" pos:line="48" pos:column="27">1<pos:position pos:line="48" pos:column="28"/></literal></expr>;<pos:position pos:line="48" pos:column="29"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="50" pos:column="5">lf<pos:position pos:line="50" pos:column="7"/></name><operator pos:line="50" pos:column="7">-&gt;<pos:position pos:line="50" pos:column="12"/></operator><name pos:line="50" pos:column="9">sequence_number<pos:position pos:line="50" pos:column="24"/></name></name> <operator pos:line="50" pos:column="25">=<pos:position pos:line="50" pos:column="26"/></operator> <literal type="number" pos:line="50" pos:column="27">0<pos:position pos:line="50" pos:column="28"/></literal></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>

    <return pos:line="52" pos:column="5">return <expr><name pos:line="52" pos:column="12">lf<pos:position pos:line="52" pos:column="14"/></name></expr>;<pos:position pos:line="52" pos:column="15"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
