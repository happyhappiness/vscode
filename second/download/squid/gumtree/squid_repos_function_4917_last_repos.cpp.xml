<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4917_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Http1<pos:position pos:line="1" pos:column="6"/></name><operator pos:line="1" pos:column="6">::<pos:position pos:line="1" pos:column="8"/></operator><name pos:line="1" pos:column="8">Parser<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">size_type<pos:position pos:line="1" pos:column="25"/></name></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">ResponseParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">firstLineSize<pos:position pos:line="2" pos:column="41"/></name></name><parameter_list pos:line="2" pos:column="41">()<pos:position pos:line="2" pos:column="43"/></parameter_list> <specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Http1<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">::<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="12">Parser<pos:position pos:line="4" pos:column="18"/></name><operator pos:line="4" pos:column="18">::<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="20">size_type<pos:position pos:line="4" pos:column="29"/></name></name></type> <name pos:line="4" pos:column="30">result<pos:position pos:line="4" pos:column="36"/></name> <init pos:line="4" pos:column="37">= <expr><literal type="number" pos:line="4" pos:column="39">0<pos:position pos:line="4" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>

    <switch pos:line="6" pos:column="5">switch <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">msgProtocol_<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">.<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">protocol<pos:position pos:line="6" pos:column="34"/></name></name></expr>)<pos:position pos:line="6" pos:column="35"/></condition>
    <block pos:line="7" pos:column="5">{
    <case pos:line="8" pos:column="5">case <expr><name><name pos:line="8" pos:column="10">AnyP<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">::<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">PROTO_HTTP<pos:position pos:line="8" pos:column="26"/></name></name></expr>:<pos:position pos:line="8" pos:column="27"/></case>
        <expr_stmt><expr><name pos:line="9" pos:column="9">result<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">+=<pos:position pos:line="9" pos:column="18"/></operator> <call><name><name pos:line="9" pos:column="19">Http1magic<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">.<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="30">length<pos:position pos:line="9" pos:column="36"/></name></name><argument_list pos:line="9" pos:column="36">()<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
        <break pos:line="10" pos:column="9">break;<pos:position pos:line="10" pos:column="15"/></break>
    <case pos:line="11" pos:column="5">case <expr><name><name pos:line="11" pos:column="10">AnyP<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">::<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">PROTO_ICY<pos:position pos:line="11" pos:column="25"/></name></name></expr>:<pos:position pos:line="11" pos:column="26"/></case>
        <expr_stmt><expr><name pos:line="12" pos:column="9">result<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">+=<pos:position pos:line="12" pos:column="18"/></operator> <call><name><name pos:line="12" pos:column="19">IcyMagic<pos:position pos:line="12" pos:column="27"/></name><operator pos:line="12" pos:column="27">.<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="28">length<pos:position pos:line="12" pos:column="34"/></name></name><argument_list pos:line="12" pos:column="34">()<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
        <break pos:line="13" pos:column="9">break;<pos:position pos:line="13" pos:column="15"/></break>
    <default pos:line="14" pos:column="5">default:<pos:position pos:line="14" pos:column="13"/></default> <comment type="line" pos:line="14" pos:column="14">// no other protocols supported</comment>
        <return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">result<pos:position pos:line="15" pos:column="22"/></name></expr>;<pos:position pos:line="15" pos:column="23"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></switch>
    <comment type="line" pos:line="17" pos:column="5">// NP: the parser does not accept &gt;2 DIGIT for version numbers</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">msgProtocol_<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">.<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">minor<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">&gt;<pos:position pos:line="18" pos:column="32"/></operator> <literal type="number" pos:line="18" pos:column="30">9<pos:position pos:line="18" pos:column="31"/></literal></expr>)<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="9">result<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">+=<pos:position pos:line="19" pos:column="18"/></operator> <literal type="number" pos:line="19" pos:column="19">2<pos:position pos:line="19" pos:column="20"/></literal></expr>;<pos:position pos:line="19" pos:column="21"/></expr_stmt></block></then>
    <else pos:line="20" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="9">result<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">+=<pos:position pos:line="21" pos:column="18"/></operator> <literal type="number" pos:line="21" pos:column="19">1<pos:position pos:line="21" pos:column="20"/></literal></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="23" pos:column="5">result<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">+=<pos:position pos:line="23" pos:column="14"/></operator> <literal type="number" pos:line="23" pos:column="15">5<pos:position pos:line="23" pos:column="16"/></literal></expr>;<pos:position pos:line="23" pos:column="17"/></expr_stmt> <comment type="block" pos:line="23" pos:column="18">/* 5 octets in: SP status SP */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">result<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">+=<pos:position pos:line="24" pos:column="14"/></operator> <call><name><name pos:line="24" pos:column="15">reasonPhrase_<pos:position pos:line="24" pos:column="28"/></name><operator pos:line="24" pos:column="28">.<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="29">length<pos:position pos:line="24" pos:column="35"/></name></name><argument_list pos:line="24" pos:column="35">()<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">result<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">+=<pos:position pos:line="25" pos:column="14"/></operator> <literal type="number" pos:line="25" pos:column="15">2<pos:position pos:line="25" pos:column="16"/></literal></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt> <comment type="block" pos:line="25" pos:column="18">/* CRLF terminator */</comment>
    <return pos:line="26" pos:column="5">return <expr><name pos:line="26" pos:column="12">result<pos:position pos:line="26" pos:column="18"/></name></expr>;<pos:position pos:line="26" pos:column="19"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
