<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1464.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">internalRemoteUri<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">host<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">unsigned<pos:position pos:line="2" pos:column="45"/></name> <name pos:line="2" pos:column="46">short<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">port<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="58">const<pos:position pos:line="2" pos:column="63"/></specifier> <name pos:line="2" pos:column="64">char<pos:position pos:line="2" pos:column="68"/></name> <modifier pos:line="2" pos:column="69">*<pos:position pos:line="2" pos:column="70"/></modifier></type><name pos:line="2" pos:column="70">dir<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="75">const<pos:position pos:line="2" pos:column="80"/></specifier> <name pos:line="2" pos:column="81">char<pos:position pos:line="2" pos:column="85"/></name> <modifier pos:line="2" pos:column="86">*<pos:position pos:line="2" pos:column="87"/></modifier></type><name pos:line="2" pos:column="87">name<pos:position pos:line="2" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="92"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">lc_host<pos:position pos:line="4" pos:column="24"/></name><index pos:line="4" pos:column="24">[<expr><name pos:line="4" pos:column="25">SQUIDHOSTNAMELEN<pos:position pos:line="4" pos:column="41"/></name></expr>]<pos:position pos:line="4" pos:column="42"/></index></name></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">host<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">&amp;&amp;<pos:position pos:line="5" pos:column="27"/></operator> <name pos:line="5" pos:column="20">name<pos:position pos:line="5" pos:column="24"/></name></expr></argument>)<pos:position pos:line="5" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="6" pos:column="5">/* convert host name to lower case */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">xstrncpy<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">lc_host<pos:position pos:line="7" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">host<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="29">SQUIDHOSTNAMELEN<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">Tolower<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">lc_host<pos:position pos:line="8" pos:column="20"/></name></expr></argument>)<pos:position pos:line="8" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* check for an IP address and format appropriately if found */</comment>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">Ip<pos:position pos:line="11" pos:column="7"/></name><operator pos:line="11" pos:column="7">::<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">Address<pos:position pos:line="11" pos:column="16"/></name></name></type> <name pos:line="11" pos:column="17">test<pos:position pos:line="11" pos:column="21"/></name> <init pos:line="11" pos:column="22">= <expr><name pos:line="11" pos:column="24">lc_host<pos:position pos:line="11" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="32"/></decl_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">( <expr><operator pos:line="12" pos:column="10">!<pos:position pos:line="12" pos:column="11"/></operator><call><name><name pos:line="12" pos:column="11">test<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">isAnyAddr<pos:position pos:line="12" pos:column="25"/></name></name><argument_list pos:line="12" pos:column="25">()<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr> )<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29"> <block pos:line="12" pos:column="30">{
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">test<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">.<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">toHostStr<pos:position pos:line="13" pos:column="23"/></name></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">lc_host<pos:position pos:line="13" pos:column="31"/></name></expr></argument>,<argument><expr><name pos:line="13" pos:column="32">SQUIDHOSTNAMELEN<pos:position pos:line="13" pos:column="48"/></name></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="16" pos:column="5">/*
     * append the domain in order to mirror the requests with appended
     * domains
     */</comment>

    <comment type="block" pos:line="21" pos:column="5">/* For IPv6 addresses also check for a colon */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name><name pos:line="22" pos:column="9">Config<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">.<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">appendDomain<pos:position pos:line="22" pos:column="28"/></name></name> <operator pos:line="22" pos:column="29">&amp;&amp;<pos:position pos:line="22" pos:column="39"/></operator> <operator pos:line="22" pos:column="32">!<pos:position pos:line="22" pos:column="33"/></operator><call><name pos:line="22" pos:column="33">strchr<pos:position pos:line="22" pos:column="39"/></name><argument_list pos:line="22" pos:column="39">(<argument><expr><name pos:line="22" pos:column="40">lc_host<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="22" pos:column="49">'.'<pos:position pos:line="22" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call> <operator pos:line="22" pos:column="54">&amp;&amp;<pos:position pos:line="22" pos:column="64"/></operator> <operator pos:line="22" pos:column="57">!<pos:position pos:line="22" pos:column="58"/></operator><call><name pos:line="22" pos:column="58">strchr<pos:position pos:line="22" pos:column="64"/></name><argument_list pos:line="22" pos:column="64">(<argument><expr><name pos:line="22" pos:column="65">lc_host<pos:position pos:line="22" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="22" pos:column="74">':'<pos:position pos:line="22" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="79"/></condition><then pos:line="22" pos:column="79">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="9">strncat<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name pos:line="23" pos:column="17">lc_host<pos:position pos:line="23" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="26">Config<pos:position pos:line="23" pos:column="32"/></name><operator pos:line="23" pos:column="32">.<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="33">appendDomain<pos:position pos:line="23" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="47">SQUIDHOSTNAMELEN<pos:position pos:line="23" pos:column="63"/></name> <operator pos:line="23" pos:column="64">-<pos:position pos:line="23" pos:column="65"/></operator>
                <call><name pos:line="24" pos:column="17">strlen<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><name pos:line="24" pos:column="24">lc_host<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call> <operator pos:line="24" pos:column="33">-<pos:position pos:line="24" pos:column="34"/></operator> <literal type="number" pos:line="24" pos:column="35">1<pos:position pos:line="24" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="26" pos:column="5">/* build uri in mb */</comment>
    <decl_stmt><decl><specifier pos:line="27" pos:column="5">static<pos:position pos:line="27" pos:column="11"/></specifier> <type><name pos:line="27" pos:column="12">MemBuf<pos:position pos:line="27" pos:column="18"/></name></type> <name pos:line="27" pos:column="19">mb<pos:position pos:line="27" pos:column="21"/></name></decl>;<pos:position pos:line="27" pos:column="22"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="29" pos:column="5">mb<pos:position pos:line="29" pos:column="7"/></name><operator pos:line="29" pos:column="7">.<pos:position pos:line="29" pos:column="8"/></operator><name pos:line="29" pos:column="8">reset<pos:position pos:line="29" pos:column="13"/></name></name><argument_list pos:line="29" pos:column="13">()<pos:position pos:line="29" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="31" pos:column="5">mb<pos:position pos:line="31" pos:column="7"/></name><operator pos:line="31" pos:column="7">.<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">Printf<pos:position pos:line="31" pos:column="14"/></name></name><argument_list pos:line="31" pos:column="14">(<argument><expr><literal type="string" pos:line="31" pos:column="15">"http://%s"<pos:position pos:line="31" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="28">lc_host<pos:position pos:line="31" pos:column="35"/></name></expr></argument>)<pos:position pos:line="31" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="33" pos:column="5">/* append port if not default */</comment>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">port<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">&amp;&amp;<pos:position pos:line="34" pos:column="24"/></operator> <name pos:line="34" pos:column="17">port<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">!=<pos:position pos:line="34" pos:column="24"/></operator> <call><name pos:line="34" pos:column="25">urlDefaultPort<pos:position pos:line="34" pos:column="39"/></name><argument_list pos:line="34" pos:column="39">(<argument><expr><name><name pos:line="34" pos:column="40">AnyP<pos:position pos:line="34" pos:column="44"/></name><operator pos:line="34" pos:column="44">::<pos:position pos:line="34" pos:column="46"/></operator><name pos:line="34" pos:column="46">PROTO_HTTP<pos:position pos:line="34" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="58"/></condition><then pos:line="34" pos:column="58">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="35" pos:column="9">mb<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">.<pos:position pos:line="35" pos:column="12"/></operator><name pos:line="35" pos:column="12">Printf<pos:position pos:line="35" pos:column="18"/></name></name><argument_list pos:line="35" pos:column="18">(<argument><expr><literal type="string" pos:line="35" pos:column="19">":%d"<pos:position pos:line="35" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="26">port<pos:position pos:line="35" pos:column="30"/></name></expr></argument>)<pos:position pos:line="35" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt></block></then></if>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">dir<pos:position pos:line="37" pos:column="12"/></name></expr>)<pos:position pos:line="37" pos:column="13"/></condition><then pos:line="37" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="38" pos:column="9">mb<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">.<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="12">Printf<pos:position pos:line="38" pos:column="18"/></name></name><argument_list pos:line="38" pos:column="18">(<argument><expr><literal type="string" pos:line="38" pos:column="19">"%s"<pos:position pos:line="38" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="25">dir<pos:position pos:line="38" pos:column="28"/></name></expr></argument>)<pos:position pos:line="38" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="30"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="40" pos:column="5">mb<pos:position pos:line="40" pos:column="7"/></name><operator pos:line="40" pos:column="7">.<pos:position pos:line="40" pos:column="8"/></operator><name pos:line="40" pos:column="8">Printf<pos:position pos:line="40" pos:column="14"/></name></name><argument_list pos:line="40" pos:column="14">(<argument><expr><literal type="string" pos:line="40" pos:column="15">"%s"<pos:position pos:line="40" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="21">name<pos:position pos:line="40" pos:column="25"/></name></expr></argument>)<pos:position pos:line="40" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="27"/></expr_stmt>

    <comment type="block" pos:line="42" pos:column="5">/* return a pointer to a local static buffer */</comment>
    <return pos:line="43" pos:column="5">return <expr><name><name pos:line="43" pos:column="12">mb<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">.<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">buf<pos:position pos:line="43" pos:column="18"/></name></name></expr>;<pos:position pos:line="43" pos:column="19"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
