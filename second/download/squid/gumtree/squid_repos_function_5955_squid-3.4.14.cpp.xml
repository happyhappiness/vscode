<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5955_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Snmp<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Var<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">unpack<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name><name pos:line="2" pos:column="25">Ipc<pos:position pos:line="2" pos:column="28"/></name><operator pos:line="2" pos:column="28">::<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">TypedMsgHdr<pos:position pos:line="2" pos:column="41"/></name></name><modifier pos:line="2" pos:column="41">&amp;<pos:position pos:line="2" pos:column="46"/></modifier></type> <name pos:line="2" pos:column="43">msg<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">clearName<pos:position pos:line="4" pos:column="14"/></name><argument_list pos:line="4" pos:column="14">()<pos:position pos:line="4" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">clearValue<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">()<pos:position pos:line="5" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">name_length<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">=<pos:position pos:line="6" pos:column="18"/></operator> <call><name><name pos:line="6" pos:column="19">msg<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">.<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="23">getInt<pos:position pos:line="6" pos:column="29"/></name></name><argument_list pos:line="6" pos:column="29">()<pos:position pos:line="6" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">Must<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><name pos:line="7" pos:column="10">name_length<pos:position pos:line="7" pos:column="21"/></name> <operator pos:line="7" pos:column="22">&gt;=<pos:position pos:line="7" pos:column="27"/></operator> <literal type="number" pos:line="7" pos:column="25">0<pos:position pos:line="7" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">name_length<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">&gt;<pos:position pos:line="8" pos:column="25"/></operator> <literal type="number" pos:line="8" pos:column="23">0<pos:position pos:line="8" pos:column="24"/></literal></expr>)<pos:position pos:line="8" pos:column="25"/></condition><then pos:line="8" pos:column="25"> <block pos:line="8" pos:column="26">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">name<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <cast type="static" pos:line="9" pos:column="16">static_cast<argument_list type="generic" pos:line="9" pos:column="27">&lt;<argument><expr><name pos:line="9" pos:column="28">oid<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">*<pos:position pos:line="9" pos:column="32"/></operator></expr></argument>&gt;<pos:position pos:line="9" pos:column="36"/></argument_list><argument_list pos:line="9" pos:column="33">(<argument><expr><call><name pos:line="9" pos:column="34">xmalloc<pos:position pos:line="9" pos:column="41"/></name><argument_list pos:line="9" pos:column="41">(<argument><expr><name pos:line="9" pos:column="42">name_length<pos:position pos:line="9" pos:column="53"/></name> <operator pos:line="9" pos:column="54">*<pos:position pos:line="9" pos:column="55"/></operator> <sizeof pos:line="9" pos:column="56">sizeof<argument_list pos:line="9" pos:column="62">(<argument><expr><name pos:line="9" pos:column="63">oid<pos:position pos:line="9" pos:column="66"/></name></expr></argument>)<pos:position pos:line="9" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></cast></expr>;<pos:position pos:line="9" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="10" pos:column="9">msg<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">.<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">getFixed<pos:position pos:line="10" pos:column="21"/></name></name><argument_list pos:line="10" pos:column="21">(<argument><expr><name pos:line="10" pos:column="22">name<pos:position pos:line="10" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="28">name_length<pos:position pos:line="10" pos:column="39"/></name> <operator pos:line="10" pos:column="40">*<pos:position pos:line="10" pos:column="41"/></operator> <sizeof pos:line="10" pos:column="42">sizeof<argument_list pos:line="10" pos:column="48">(<argument><expr><name pos:line="10" pos:column="49">oid<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">msg<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">.<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">getPod<pos:position pos:line="12" pos:column="15"/></name></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">type<pos:position pos:line="12" pos:column="20"/></name></expr></argument>)<pos:position pos:line="12" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">val_len<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name><name pos:line="13" pos:column="15">msg<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">getInt<pos:position pos:line="13" pos:column="25"/></name></name><argument_list pos:line="13" pos:column="25">()<pos:position pos:line="13" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">Must<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><name pos:line="14" pos:column="10">val_len<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">&gt;=<pos:position pos:line="14" pos:column="23"/></operator> <literal type="number" pos:line="14" pos:column="21">0<pos:position pos:line="14" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">val_len<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">&gt;<pos:position pos:line="15" pos:column="21"/></operator> <literal type="number" pos:line="15" pos:column="19">0<pos:position pos:line="15" pos:column="20"/></literal></expr>)<pos:position pos:line="15" pos:column="21"/></condition><then pos:line="15" pos:column="21"> <block pos:line="15" pos:column="22">{
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">val<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">.<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">string<pos:position pos:line="16" pos:column="19"/></name></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <cast type="static" pos:line="16" pos:column="22">static_cast<argument_list type="generic" pos:line="16" pos:column="33">&lt;<argument><expr><name pos:line="16" pos:column="34">u_char<pos:position pos:line="16" pos:column="40"/></name><operator pos:line="16" pos:column="40">*<pos:position pos:line="16" pos:column="41"/></operator></expr></argument>&gt;<pos:position pos:line="16" pos:column="45"/></argument_list><argument_list pos:line="16" pos:column="42">(<argument><expr><call><name pos:line="16" pos:column="43">xmalloc<pos:position pos:line="16" pos:column="50"/></name><argument_list pos:line="16" pos:column="50">(<argument><expr><name pos:line="16" pos:column="51">val_len<pos:position pos:line="16" pos:column="58"/></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></cast></expr>;<pos:position pos:line="16" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="17" pos:column="9">msg<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">.<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">getFixed<pos:position pos:line="17" pos:column="21"/></name></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name><name pos:line="17" pos:column="22">val<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">.<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">string<pos:position pos:line="17" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="34">val_len<pos:position pos:line="17" pos:column="41"/></name></expr></argument>)<pos:position pos:line="17" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
