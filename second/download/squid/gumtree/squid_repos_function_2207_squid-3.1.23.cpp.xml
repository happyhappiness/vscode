<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2207_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">httpHeaderParseQuotedString<pos:position pos:line="2" pos:column="28"/></name> <parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">start<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">String<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">val<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">end<pos:position pos:line="4" pos:column="20"/></name></decl>, <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="23">pos<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">val<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">-&gt;<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="10">clean<pos:position pos:line="5" pos:column="15"/></name></name><argument_list pos:line="5" pos:column="15">()<pos:position pos:line="5" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="18"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">start<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">!=<pos:position pos:line="6" pos:column="18"/></operator> <literal type="char" pos:line="6" pos:column="19">'"'<pos:position pos:line="6" pos:column="22"/></literal></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23"> <block pos:line="6" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">66<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">2<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="23">"failed to parse a quoted-string header field near '"<pos:position pos:line="7" pos:column="76"/></literal> <operator pos:line="7" pos:column="77">&lt;&lt;<pos:position pos:line="7" pos:column="85"/></operator> <name pos:line="7" pos:column="80">start<pos:position pos:line="7" pos:column="85"/></name> <operator pos:line="7" pos:column="86">&lt;&lt;<pos:position pos:line="7" pos:column="94"/></operator> <literal type="string" pos:line="7" pos:column="89">"'"<pos:position pos:line="7" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="94"/></expr_stmt>
        <return pos:line="8" pos:column="9">return <expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>;<pos:position pos:line="8" pos:column="18"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="10" pos:column="5">pos<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <name pos:line="10" pos:column="11">start<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">+<pos:position pos:line="10" pos:column="18"/></operator> <literal type="number" pos:line="10" pos:column="19">1<pos:position pos:line="10" pos:column="20"/></literal></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>

    <while pos:line="12" pos:column="5">while <condition pos:line="12" pos:column="11">(<expr><operator pos:line="12" pos:column="12">*<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">pos<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">!=<pos:position pos:line="12" pos:column="19"/></operator> <literal type="char" pos:line="12" pos:column="20">'"'<pos:position pos:line="12" pos:column="23"/></literal></expr>)<pos:position pos:line="12" pos:column="24"/></condition> <block pos:line="12" pos:column="25">{
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">bool<pos:position pos:line="13" pos:column="13"/></name></type> <name pos:line="13" pos:column="14">quoted<pos:position pos:line="13" pos:column="20"/></name> <init pos:line="13" pos:column="21">= <expr><operator pos:line="13" pos:column="23">(<pos:position pos:line="13" pos:column="24"/></operator><operator pos:line="13" pos:column="24">*<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="25">pos<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">==<pos:position pos:line="13" pos:column="31"/></operator> <literal type="char" pos:line="13" pos:column="32">'\\'<pos:position pos:line="13" pos:column="36"/></literal><operator pos:line="13" pos:column="36">)<pos:position pos:line="13" pos:column="37"/></operator></expr></init></decl>;<pos:position pos:line="13" pos:column="38"/></decl_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">quoted<pos:position pos:line="14" pos:column="19"/></name></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20">
            <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="13">pos<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">++<pos:position pos:line="15" pos:column="18"/></operator></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt></block></then></if>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><operator pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">pos<pos:position pos:line="16" pos:column="18"/></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19"> <block pos:line="16" pos:column="20">{
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">debugs<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><literal type="number" pos:line="17" pos:column="20">66<pos:position pos:line="17" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="24">2<pos:position pos:line="17" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="27">"failed to parse a quoted-string header field near '"<pos:position pos:line="17" pos:column="80"/></literal> <operator pos:line="17" pos:column="81">&lt;&lt;<pos:position pos:line="17" pos:column="89"/></operator> <name pos:line="17" pos:column="84">start<pos:position pos:line="17" pos:column="89"/></name> <operator pos:line="17" pos:column="90">&lt;&lt;<pos:position pos:line="17" pos:column="98"/></operator> <literal type="string" pos:line="17" pos:column="93">"'"<pos:position pos:line="17" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="98"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">val<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">clean<pos:position pos:line="18" pos:column="23"/></name></name><argument_list pos:line="18" pos:column="23">()<pos:position pos:line="18" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
            <return pos:line="19" pos:column="13">return <expr><literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></return>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="21" pos:column="9">end<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="15">pos<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">+<pos:position pos:line="21" pos:column="20"/></operator> <call><name pos:line="21" pos:column="21">strcspn<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">pos<pos:position pos:line="21" pos:column="32"/></name> <operator pos:line="21" pos:column="33">+<pos:position pos:line="21" pos:column="34"/></operator> <name pos:line="21" pos:column="35">quoted<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="43">"\"\\"<pos:position pos:line="21" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call> <operator pos:line="21" pos:column="51">+<pos:position pos:line="21" pos:column="52"/></operator> <name pos:line="21" pos:column="53">quoted<pos:position pos:line="21" pos:column="59"/></name></expr>;<pos:position pos:line="21" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="22" pos:column="9">val<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">append<pos:position pos:line="22" pos:column="20"/></name></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">pos<pos:position pos:line="22" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="26">end<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">-<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">pos<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">pos<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <name pos:line="23" pos:column="15">end<pos:position pos:line="23" pos:column="18"/></name></expr>;<pos:position pos:line="23" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></while>
    <comment type="block" pos:line="25" pos:column="5">/* Make sure it's defined even if empty "" */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><call><name><name pos:line="26" pos:column="10">val<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">-&gt;<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="15">defined<pos:position pos:line="26" pos:column="22"/></name></name><argument_list pos:line="26" pos:column="22">()<pos:position pos:line="26" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="25"/></condition><then pos:line="26" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="27" pos:column="9">val<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">limitInit<pos:position pos:line="27" pos:column="23"/></name></name><argument_list pos:line="27" pos:column="23">(<argument><expr><literal type="string" pos:line="27" pos:column="24">""<pos:position pos:line="27" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="28">0<pos:position pos:line="27" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt></block></then></if>
    <return pos:line="28" pos:column="5">return <expr><literal type="number" pos:line="28" pos:column="12">1<pos:position pos:line="28" pos:column="13"/></literal></expr>;<pos:position pos:line="28" pos:column="14"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
