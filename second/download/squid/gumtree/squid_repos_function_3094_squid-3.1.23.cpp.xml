<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3094_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type>
<name pos:line="2" pos:column="1">errorTryLoadText<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">page_name<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">char<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">dir<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="58">bool<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">silent<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">fd<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">path<pos:position pos:line="5" pos:column="14"/></name><index pos:line="5" pos:column="14">[<expr><name pos:line="5" pos:column="15">MAXPATHLEN<pos:position pos:line="5" pos:column="25"/></name></expr>]<pos:position pos:line="5" pos:column="26"/></index></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">buf<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><literal type="number" pos:line="6" pos:column="14">4096<pos:position pos:line="6" pos:column="18"/></literal></expr>]<pos:position pos:line="6" pos:column="19"/></index></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">text<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">ssize_t<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">len<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">MemBuf<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">textbuf<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

    <comment type="line" pos:line="11" pos:column="5">// maybe received compound parts, maybe an absolute page_name and no dir</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">dir<pos:position pos:line="12" pos:column="12"/></name></expr>)<pos:position pos:line="12" pos:column="13"/></condition><then pos:line="12" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="9">snprintf<pos:position pos:line="13" pos:column="17"/></name><argument_list pos:line="13" pos:column="17">(<argument><expr><name pos:line="13" pos:column="18">path<pos:position pos:line="13" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="24">sizeof<argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">path<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="38">"%s/%s"<pos:position pos:line="13" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="47">dir<pos:position pos:line="13" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="52">page_name<pos:position pos:line="13" pos:column="61"/></name></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="63"/></expr_stmt></block></then>
    <else pos:line="14" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="9">snprintf<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">path<pos:position pos:line="15" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="24">sizeof<argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">path<pos:position pos:line="15" pos:column="35"/></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="38">"%s"<pos:position pos:line="15" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="44">page_name<pos:position pos:line="15" pos:column="53"/></name></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="17" pos:column="5">fd<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <call><name pos:line="17" pos:column="10">file_open<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">path<pos:position pos:line="17" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="26">O_RDONLY<pos:position pos:line="17" pos:column="34"/></name> <operator pos:line="17" pos:column="35">|<pos:position pos:line="17" pos:column="36"/></operator> <name pos:line="17" pos:column="37">O_TEXT<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">fd<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">&lt;<pos:position pos:line="19" pos:column="16"/></operator> <literal type="number" pos:line="19" pos:column="14">0<pos:position pos:line="19" pos:column="15"/></literal></expr>)<pos:position pos:line="19" pos:column="16"/></condition><then pos:line="19" pos:column="16"> <block pos:line="19" pos:column="17">{
        <comment type="block" pos:line="20" pos:column="9">/* with dynamic locale negotiation we may see some failures before a success. */</comment>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">!<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">silent<pos:position pos:line="21" pos:column="20"/></name></expr>)<pos:position pos:line="21" pos:column="21"/></condition><then pos:line="21" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="13">debugs<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><literal type="number" pos:line="22" pos:column="20">4<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="23">DBG_CRITICAL<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="37">HERE<pos:position pos:line="22" pos:column="41"/></name> <operator pos:line="22" pos:column="42">&lt;&lt;<pos:position pos:line="22" pos:column="50"/></operator> <literal type="string" pos:line="22" pos:column="45">"'"<pos:position pos:line="22" pos:column="48"/></literal> <operator pos:line="22" pos:column="49">&lt;&lt;<pos:position pos:line="22" pos:column="57"/></operator> <name pos:line="22" pos:column="52">path<pos:position pos:line="22" pos:column="56"/></name> <operator pos:line="22" pos:column="57">&lt;&lt;<pos:position pos:line="22" pos:column="65"/></operator> <literal type="string" pos:line="22" pos:column="60">"': "<pos:position pos:line="22" pos:column="65"/></literal> <operator pos:line="22" pos:column="66">&lt;&lt;<pos:position pos:line="22" pos:column="74"/></operator> <call><name pos:line="22" pos:column="69">xstrerror<pos:position pos:line="22" pos:column="78"/></name><argument_list pos:line="22" pos:column="78">()<pos:position pos:line="22" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="82"/></expr_stmt></block></then></if>
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">NULL<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="26" pos:column="5">textbuf<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">.<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">init<pos:position pos:line="26" pos:column="17"/></name></name><argument_list pos:line="26" pos:column="17">()<pos:position pos:line="26" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="20"/></expr_stmt>

    <while pos:line="28" pos:column="5">while <condition pos:line="28" pos:column="11">(<expr><operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="13">len<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <call><name pos:line="28" pos:column="19">FD_READ_METHOD<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">fd<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="38">buf<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="43">sizeof<argument_list pos:line="28" pos:column="49">(<argument><expr><name pos:line="28" pos:column="50">buf<pos:position pos:line="28" pos:column="53"/></name></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call><operator pos:line="28" pos:column="55">)<pos:position pos:line="28" pos:column="56"/></operator> <operator pos:line="28" pos:column="57">&gt;<pos:position pos:line="28" pos:column="61"/></operator> <literal type="number" pos:line="28" pos:column="59">0<pos:position pos:line="28" pos:column="60"/></literal></expr>)<pos:position pos:line="28" pos:column="61"/></condition> <block pos:line="28" pos:column="62">{
        <expr_stmt><expr><call><name><name pos:line="29" pos:column="9">textbuf<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">.<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">append<pos:position pos:line="29" pos:column="23"/></name></name><argument_list pos:line="29" pos:column="23">(<argument><expr><name pos:line="29" pos:column="24">buf<pos:position pos:line="29" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="29">len<pos:position pos:line="29" pos:column="32"/></name></expr></argument>)<pos:position pos:line="29" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></while>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">len<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">&lt;<pos:position pos:line="32" pos:column="17"/></operator> <literal type="number" pos:line="32" pos:column="15">0<pos:position pos:line="32" pos:column="16"/></literal></expr>)<pos:position pos:line="32" pos:column="17"/></condition><then pos:line="32" pos:column="17"> <block pos:line="32" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">debugs<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="number" pos:line="33" pos:column="16">4<pos:position pos:line="33" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="19">DBG_CRITICAL<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="33">HERE<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">&lt;&lt;<pos:position pos:line="33" pos:column="46"/></operator> <literal type="string" pos:line="33" pos:column="41">"failed to fully read: '"<pos:position pos:line="33" pos:column="66"/></literal> <operator pos:line="33" pos:column="67">&lt;&lt;<pos:position pos:line="33" pos:column="75"/></operator> <name pos:line="33" pos:column="70">path<pos:position pos:line="33" pos:column="74"/></name> <operator pos:line="33" pos:column="75">&lt;&lt;<pos:position pos:line="33" pos:column="83"/></operator> <literal type="string" pos:line="33" pos:column="78">"': "<pos:position pos:line="33" pos:column="83"/></literal> <operator pos:line="33" pos:column="84">&lt;&lt;<pos:position pos:line="33" pos:column="92"/></operator> <call><name pos:line="33" pos:column="87">xstrerror<pos:position pos:line="33" pos:column="96"/></name><argument_list pos:line="33" pos:column="96">()<pos:position pos:line="33" pos:column="98"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="100"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">file_close<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">fd<pos:position pos:line="36" pos:column="18"/></name></expr></argument>)<pos:position pos:line="36" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>

    <comment type="block" pos:line="38" pos:column="5">/* Shrink memory size down to exact size. MemBuf has a tencendy
     * to be rather large..
     */</comment>
    <expr_stmt><expr><name pos:line="41" pos:column="5">text<pos:position pos:line="41" pos:column="9"/></name> <operator pos:line="41" pos:column="10">=<pos:position pos:line="41" pos:column="11"/></operator> <call><name pos:line="41" pos:column="12">xstrdup<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">(<argument><expr><name><name pos:line="41" pos:column="20">textbuf<pos:position pos:line="41" pos:column="27"/></name><operator pos:line="41" pos:column="27">.<pos:position pos:line="41" pos:column="28"/></operator><name pos:line="41" pos:column="28">buf<pos:position pos:line="41" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="43" pos:column="5">textbuf<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">.<pos:position pos:line="43" pos:column="13"/></operator><name pos:line="43" pos:column="13">clean<pos:position pos:line="43" pos:column="18"/></name></name><argument_list pos:line="43" pos:column="18">()<pos:position pos:line="43" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="21"/></expr_stmt>

    <return pos:line="45" pos:column="5">return <expr><name pos:line="45" pos:column="12">text<pos:position pos:line="45" pos:column="16"/></name></expr>;<pos:position pos:line="45" pos:column="17"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
