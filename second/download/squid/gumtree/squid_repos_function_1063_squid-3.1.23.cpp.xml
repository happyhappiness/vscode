<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1063_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">parse_authparam<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">authConfig<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type> <name pos:line="2" pos:column="30">config<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">type_str<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">param_str<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">(<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">type_str<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">=<pos:position pos:line="7" pos:column="20"/></operator> <call><name pos:line="7" pos:column="21">strtok<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">NULL<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">w_space<pos:position pos:line="7" pos:column="41"/></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call><operator pos:line="7" pos:column="42">)<pos:position pos:line="7" pos:column="43"/></operator> <operator pos:line="7" pos:column="44">==<pos:position pos:line="7" pos:column="46"/></operator> <name pos:line="7" pos:column="47">NULL<pos:position pos:line="7" pos:column="51"/></name></expr>)<pos:position pos:line="7" pos:column="52"/></condition><then pos:line="7" pos:column="52">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="9">self_destruct<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">()<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">(<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">param_str<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <call><name pos:line="10" pos:column="22">strtok<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">NULL<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="35">w_space<pos:position pos:line="10" pos:column="42"/></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call><operator pos:line="10" pos:column="43">)<pos:position pos:line="10" pos:column="44"/></operator> <operator pos:line="10" pos:column="45">==<pos:position pos:line="10" pos:column="47"/></operator> <name pos:line="10" pos:column="48">NULL<pos:position pos:line="10" pos:column="52"/></name></expr>)<pos:position pos:line="10" pos:column="53"/></condition><then pos:line="10" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="9">self_destruct<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="13" pos:column="5">/* find a configuration for the scheme */</comment>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">AuthConfig<pos:position pos:line="14" pos:column="15"/></name> <modifier pos:line="14" pos:column="16">*<pos:position pos:line="14" pos:column="17"/></modifier></type><name pos:line="14" pos:column="17">scheme<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><call><name><name pos:line="14" pos:column="26">AuthConfig<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">::<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="38">Find<pos:position pos:line="14" pos:column="42"/></name></name> <argument_list pos:line="14" pos:column="43">(<argument><expr><name pos:line="14" pos:column="44">type_str<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="54"/></decl_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">scheme<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">==<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">NULL<pos:position pos:line="16" pos:column="23"/></name></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24"> <block pos:line="16" pos:column="25">{
        <comment type="block" pos:line="17" pos:column="9">/* Create a configuration */</comment>
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">AuthScheme<pos:position pos:line="18" pos:column="19"/></name> <modifier pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></modifier></type><name pos:line="18" pos:column="21">theScheme<pos:position pos:line="18" pos:column="30"/></name></decl>;<pos:position pos:line="18" pos:column="31"/></decl_stmt>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">(<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">theScheme<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <call><name><name pos:line="20" pos:column="26">AuthScheme<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">::<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="38">Find<pos:position pos:line="20" pos:column="42"/></name></name><argument_list pos:line="20" pos:column="42">(<argument><expr><name pos:line="20" pos:column="43">type_str<pos:position pos:line="20" pos:column="51"/></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></call><operator pos:line="20" pos:column="52">)<pos:position pos:line="20" pos:column="53"/></operator> <operator pos:line="20" pos:column="54">==<pos:position pos:line="20" pos:column="56"/></operator> <name pos:line="20" pos:column="57">NULL<pos:position pos:line="20" pos:column="61"/></name></expr>)<pos:position pos:line="20" pos:column="62"/></condition><then pos:line="20" pos:column="62"> <block pos:line="20" pos:column="63">{
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">debugs<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">3<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="23">0<pos:position pos:line="21" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="26">"Parsing Config File: Unknown authentication scheme '"<pos:position pos:line="21" pos:column="80"/></literal> <operator pos:line="21" pos:column="81">&lt;&lt;<pos:position pos:line="21" pos:column="89"/></operator> <name pos:line="21" pos:column="84">type_str<pos:position pos:line="21" pos:column="92"/></name> <operator pos:line="21" pos:column="93">&lt;&lt;<pos:position pos:line="21" pos:column="101"/></operator> <literal type="string" pos:line="21" pos:column="96">"'."<pos:position pos:line="21" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="102"/></expr_stmt>
            <return pos:line="22" pos:column="13">return;<pos:position pos:line="22" pos:column="20"/></return>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="25" pos:column="9">config<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">-&gt;<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="17">push_back<pos:position pos:line="25" pos:column="26"/></name></name><argument_list pos:line="25" pos:column="26">(<argument><expr><call><name><name pos:line="25" pos:column="27">theScheme<pos:position pos:line="25" pos:column="36"/></name><operator pos:line="25" pos:column="36">-&gt;<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="38">createConfig<pos:position pos:line="25" pos:column="50"/></name></name><argument_list pos:line="25" pos:column="50">()<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">scheme<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <call><name><name pos:line="26" pos:column="18">config<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">-&gt;<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="26">back<pos:position pos:line="26" pos:column="30"/></name></name><argument_list pos:line="26" pos:column="30">()<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">assert<pos:position pos:line="27" pos:column="15"/></name> <argument_list pos:line="27" pos:column="16">(<argument><expr><name pos:line="27" pos:column="17">scheme<pos:position pos:line="27" pos:column="23"/></name></expr></argument>)<pos:position pos:line="27" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="30" pos:column="5">scheme<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">parse<pos:position pos:line="30" pos:column="18"/></name></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name pos:line="30" pos:column="19">scheme<pos:position pos:line="30" pos:column="25"/></name></expr></argument>, <argument><expr><call><name><name pos:line="30" pos:column="27">config<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">-&gt;<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="35">size<pos:position pos:line="30" pos:column="39"/></name></name><argument_list pos:line="30" pos:column="39">()<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="30" pos:column="43">param_str<pos:position pos:line="30" pos:column="52"/></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
