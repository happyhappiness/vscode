<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4237_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">compileRE<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name><name pos:line="2" pos:column="11">std<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name><name pos:line="2" pos:column="16">list<pos:position pos:line="2" pos:column="20"/></name><argument_list type="generic" pos:line="2" pos:column="20">&lt;<argument><expr><name pos:line="2" pos:column="21">RegexPattern<pos:position pos:line="2" pos:column="33"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="37"/></argument_list></name></name> <modifier pos:line="2" pos:column="35">&amp;<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="36">curlist<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <name pos:line="2" pos:column="51">char<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type> <name pos:line="2" pos:column="58">RE<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="62">int<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">flags<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">RE<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">==<pos:position pos:line="4" pos:column="14"/></operator> <name pos:line="4" pos:column="15">NULL<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">||<pos:position pos:line="4" pos:column="22"/></operator> <operator pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">RE<pos:position pos:line="4" pos:column="26"/></name> <operator pos:line="4" pos:column="27">==<pos:position pos:line="4" pos:column="29"/></operator> <literal type="char" pos:line="4" pos:column="30">'\0'<pos:position pos:line="4" pos:column="34"/></literal></expr>)<pos:position pos:line="4" pos:column="35"/></condition><then pos:line="4" pos:column="35">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><call><name><name pos:line="5" pos:column="16">curlist<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">.<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">empty<pos:position pos:line="5" pos:column="29"/></name></name><argument_list pos:line="5" pos:column="29">()<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></return></block></then></if> <comment type="line" pos:line="5" pos:column="33">// XXX: old code did this. It looks wrong.</comment>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">regex_t<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">comp<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">errcode<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><call><name pos:line="8" pos:column="23">regcomp<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><operator pos:line="8" pos:column="31">&amp;<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="32">comp<pos:position pos:line="8" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="38">RE<pos:position pos:line="8" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="42">flags<pos:position pos:line="8" pos:column="47"/></name></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr></init></decl>)<pos:position pos:line="8" pos:column="49"/></condition><then pos:line="8" pos:column="49"> <block pos:line="8" pos:column="50">{
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name></type> <name><name pos:line="9" pos:column="14">errbuf<pos:position pos:line="9" pos:column="20"/></name><index pos:line="9" pos:column="20">[<expr><literal type="number" pos:line="9" pos:column="21">256<pos:position pos:line="9" pos:column="24"/></literal></expr>]<pos:position pos:line="9" pos:column="25"/></index></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">regerror<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">errcode<pos:position pos:line="10" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="27">&amp;<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="28">comp<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">errbuf<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="42">sizeof <name pos:line="10" pos:column="49">errbuf<pos:position pos:line="10" pos:column="55"/></name></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">28<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="20">DBG_CRITICAL<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="34">cfg_filename<pos:position pos:line="11" pos:column="46"/></name> <operator pos:line="11" pos:column="47">&lt;&lt;<pos:position pos:line="11" pos:column="55"/></operator> <literal type="string" pos:line="11" pos:column="50">" line "<pos:position pos:line="11" pos:column="58"/></literal> <operator pos:line="11" pos:column="59">&lt;&lt;<pos:position pos:line="11" pos:column="67"/></operator> <name pos:line="11" pos:column="62">config_lineno<pos:position pos:line="11" pos:column="75"/></name> <operator pos:line="11" pos:column="76">&lt;&lt;<pos:position pos:line="11" pos:column="84"/></operator> <literal type="string" pos:line="11" pos:column="79">": "<pos:position pos:line="11" pos:column="83"/></literal> <operator pos:line="11" pos:column="84">&lt;&lt;<pos:position pos:line="11" pos:column="92"/></operator> <name pos:line="11" pos:column="87">config_input_line<pos:position pos:line="11" pos:column="104"/></name></expr></argument>)<pos:position pos:line="11" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="106"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">28<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="20">DBG_CRITICAL<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="34">"ERROR: invalid regular expression: '"<pos:position pos:line="12" pos:column="72"/></literal> <operator pos:line="12" pos:column="73">&lt;&lt;<pos:position pos:line="12" pos:column="81"/></operator> <name pos:line="12" pos:column="76">RE<pos:position pos:line="12" pos:column="78"/></name> <operator pos:line="12" pos:column="79">&lt;&lt;<pos:position pos:line="12" pos:column="87"/></operator> <literal type="string" pos:line="12" pos:column="82">"': "<pos:position pos:line="12" pos:column="87"/></literal> <operator pos:line="12" pos:column="88">&lt;&lt;<pos:position pos:line="12" pos:column="96"/></operator> <name pos:line="12" pos:column="91">errbuf<pos:position pos:line="12" pos:column="97"/></name></expr></argument>)<pos:position pos:line="12" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="99"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><literal type="boolean" pos:line="13" pos:column="16">false<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">debugs<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><literal type="number" pos:line="15" pos:column="12">28<pos:position pos:line="15" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="16">2<pos:position pos:line="15" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="19">"compiled '"<pos:position pos:line="15" pos:column="31"/></literal> <operator pos:line="15" pos:column="32">&lt;&lt;<pos:position pos:line="15" pos:column="40"/></operator> <name pos:line="15" pos:column="35">RE<pos:position pos:line="15" pos:column="37"/></name> <operator pos:line="15" pos:column="38">&lt;&lt;<pos:position pos:line="15" pos:column="46"/></operator> <literal type="string" pos:line="15" pos:column="41">"' with flags "<pos:position pos:line="15" pos:column="56"/></literal> <operator pos:line="15" pos:column="57">&lt;&lt;<pos:position pos:line="15" pos:column="65"/></operator> <name pos:line="15" pos:column="60">flags<pos:position pos:line="15" pos:column="65"/></name></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="67"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">curlist<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">.<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">emplace_back<pos:position pos:line="17" pos:column="25"/></name></name><argument_list pos:line="17" pos:column="25">(<argument><expr><name pos:line="17" pos:column="26">flags<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">RE<pos:position pos:line="17" pos:column="35"/></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="18" pos:column="5">curlist<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">.<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">back<pos:position pos:line="18" pos:column="17"/></name></name><argument_list pos:line="18" pos:column="17">()<pos:position pos:line="18" pos:column="19"/></argument_list></call><operator pos:line="18" pos:column="19">.<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">regex<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="28">comp<pos:position pos:line="18" pos:column="32"/></name></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>

    <return pos:line="20" pos:column="5">return <expr><literal type="boolean" pos:line="20" pos:column="12">true<pos:position pos:line="20" pos:column="16"/></literal></expr>;<pos:position pos:line="20" pos:column="17"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
