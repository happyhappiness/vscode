<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1429_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">pid_t<pos:position pos:line="1" pos:column="6"/></name></type>
<name pos:line="2" pos:column="1">ipcCreate<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">int<pos:position pos:line="2" pos:column="14"/></name></type> <name pos:line="2" pos:column="15">type<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier> <name pos:line="2" pos:column="27">char<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">prog<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier><specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier></type> <name><name pos:line="2" pos:column="57">args<pos:position pos:line="2" pos:column="61"/></name><index pos:line="2" pos:column="61">[]<pos:position pos:line="2" pos:column="63"/></index></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="65">const<pos:position pos:line="2" pos:column="70"/></specifier> <name pos:line="2" pos:column="71">char<pos:position pos:line="2" pos:column="75"/></name> <modifier pos:line="2" pos:column="76">*<pos:position pos:line="2" pos:column="77"/></modifier></type><name pos:line="2" pos:column="77">name<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="83">Ip<pos:position pos:line="2" pos:column="85"/></name><operator pos:line="2" pos:column="85">::<pos:position pos:line="2" pos:column="87"/></operator><name pos:line="2" pos:column="87">Address<pos:position pos:line="2" pos:column="94"/></name></name> <modifier pos:line="2" pos:column="95">&amp;<pos:position pos:line="2" pos:column="100"/></modifier></type><name pos:line="2" pos:column="96">local_addr<pos:position pos:line="2" pos:column="106"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="108">int<pos:position pos:line="2" pos:column="111"/></name> <modifier pos:line="2" pos:column="112">*<pos:position pos:line="2" pos:column="113"/></modifier></type><name pos:line="2" pos:column="113">rfd<pos:position pos:line="2" pos:column="116"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="118">int<pos:position pos:line="2" pos:column="121"/></name> <modifier pos:line="2" pos:column="122">*<pos:position pos:line="2" pos:column="123"/></modifier></type><name pos:line="2" pos:column="123">wfd<pos:position pos:line="2" pos:column="126"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="128">void<pos:position pos:line="2" pos:column="132"/></name> <modifier pos:line="2" pos:column="133">*<pos:position pos:line="2" pos:column="134"/></modifier><modifier pos:line="2" pos:column="134">*<pos:position pos:line="2" pos:column="135"/></modifier></type><name pos:line="2" pos:column="135">hIpc<pos:position pos:line="2" pos:column="139"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="140"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">pid_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">pid<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">Ip<pos:position pos:line="5" pos:column="7"/></name><operator pos:line="5" pos:column="7">::<pos:position pos:line="5" pos:column="9"/></operator><name pos:line="5" pos:column="9">Address<pos:position pos:line="5" pos:column="16"/></name></name></type> <name pos:line="5" pos:column="17">ChS<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">Ip<pos:position pos:line="6" pos:column="7"/></name><operator pos:line="6" pos:column="7">::<pos:position pos:line="6" pos:column="9"/></operator><name pos:line="6" pos:column="9">Address<pos:position pos:line="6" pos:column="16"/></name></name></type> <name pos:line="6" pos:column="17">PaS<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">addrinfo<pos:position pos:line="7" pos:column="20"/></name></name> <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier></type><name pos:line="7" pos:column="22">AI<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><name pos:line="7" pos:column="27">NULL<pos:position pos:line="7" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">crfd<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><operator pos:line="8" pos:column="16">-<pos:position pos:line="8" pos:column="17"/></operator><literal type="number" pos:line="8" pos:column="17">1<pos:position pos:line="8" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">prfd<pos:position pos:line="9" pos:column="13"/></name> <init pos:line="9" pos:column="14">= <expr><operator pos:line="9" pos:column="16">-<pos:position pos:line="9" pos:column="17"/></operator><literal type="number" pos:line="9" pos:column="17">1<pos:position pos:line="9" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">cwfd<pos:position pos:line="10" pos:column="13"/></name> <init pos:line="10" pos:column="14">= <expr><operator pos:line="10" pos:column="16">-<pos:position pos:line="10" pos:column="17"/></operator><literal type="number" pos:line="10" pos:column="17">1<pos:position pos:line="10" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">pwfd<pos:position pos:line="11" pos:column="13"/></name> <init pos:line="11" pos:column="14">= <expr><operator pos:line="11" pos:column="16">-<pos:position pos:line="11" pos:column="17"/></operator><literal type="number" pos:line="11" pos:column="17">1<pos:position pos:line="11" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">fd<pos:position pos:line="12" pos:column="11"/></name></decl>;<pos:position pos:line="12" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">t1<pos:position pos:line="13" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="13">t2<pos:position pos:line="13" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="17">t3<pos:position pos:line="13" pos:column="19"/></name></decl>;<pos:position pos:line="13" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">x<pos:position pos:line="14" pos:column="10"/></name></decl>;<pos:position pos:line="14" pos:column="11"/></decl_stmt>

<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">USE_POLL<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">&amp;&amp;<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="17">_SQUID_OSF_<pos:position pos:line="16" pos:column="28"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">assert<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">type<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">!=<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">IPC_FIFO<pos:position pos:line="17" pos:column="28"/></name></expr></argument>)<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">rfd<pos:position pos:line="20" pos:column="12"/></name></expr>)<pos:position pos:line="20" pos:column="13"/></condition><then pos:line="20" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="21" pos:column="9">*<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">rfd<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <operator pos:line="21" pos:column="16">-<pos:position pos:line="21" pos:column="17"/></operator><literal type="number" pos:line="21" pos:column="17">1<pos:position pos:line="21" pos:column="18"/></literal></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">wfd<pos:position pos:line="23" pos:column="12"/></name></expr>)<pos:position pos:line="23" pos:column="13"/></condition><then pos:line="23" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">wfd<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <operator pos:line="24" pos:column="16">-<pos:position pos:line="24" pos:column="17"/></operator><literal type="number" pos:line="24" pos:column="17">1<pos:position pos:line="24" pos:column="18"/></literal></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">hIpc<pos:position pos:line="26" pos:column="13"/></name></expr>)<pos:position pos:line="26" pos:column="14"/></condition><then pos:line="26" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="27" pos:column="9">*<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">hIpc<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <name pos:line="27" pos:column="17">NULL<pos:position pos:line="27" pos:column="21"/></name></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt></block></then></if>

<comment type="line" pos:line="29" pos:column="1">// NP: no wrapping around d and c usage since we *want* code expansion</comment>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define<pos:position pos:line="30" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">IPC_CHECK_FAIL<pos:position pos:line="30" pos:column="23"/></name><parameter_list pos:line="30" pos:column="23">(<parameter><type><name pos:line="30" pos:column="24">f<pos:position pos:line="30" pos:column="25"/></name></type></parameter>,<parameter><type><name pos:line="30" pos:column="26">d<pos:position pos:line="30" pos:column="27"/></name></type></parameter>,<parameter><type><name pos:line="30" pos:column="28">c<pos:position pos:line="30" pos:column="29"/></name></type></parameter>)<pos:position pos:line="30" pos:column="30"/></parameter_list></cpp:macro> \
    <cpp:value pos:line="31" pos:column="5">if ((f) &lt; 0) { \
        debugs(54, DBG_CRITICAL, "ERROR: Failed to create helper " d " FD: " &lt;&lt; c); \
        return ipcCloseAllFD(prfd, pwfd, crfd, cwfd); \
    } else void(0)<pos:position pos:line="34" pos:column="19"/></cpp:value></cpp:define>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">type<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">==<pos:position pos:line="36" pos:column="16"/></operator> <name pos:line="36" pos:column="17">IPC_TCP_SOCKET<pos:position pos:line="36" pos:column="31"/></name></expr>)<pos:position pos:line="36" pos:column="32"/></condition><then pos:line="36" pos:column="32"> <block pos:line="36" pos:column="33">{
        <expr_stmt><expr><name pos:line="37" pos:column="9">crfd<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <name pos:line="37" pos:column="16">cwfd<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <call><name pos:line="37" pos:column="23">comm_open<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">SOCK_STREAM<pos:position pos:line="37" pos:column="44"/></name></expr></argument>,
                                <argument><expr><literal type="number" pos:line="38" pos:column="33">0<pos:position pos:line="38" pos:column="34"/></literal></expr></argument>,
                                <argument><expr><name pos:line="39" pos:column="33">local_addr<pos:position pos:line="39" pos:column="43"/></name></expr></argument>,
                                <argument><expr><name pos:line="40" pos:column="33">COMM_NOCLOEXEC<pos:position pos:line="40" pos:column="47"/></name></expr></argument>,
                                <argument><expr><name pos:line="41" pos:column="33">name<pos:position pos:line="41" pos:column="37"/></name></expr></argument>)<pos:position pos:line="41" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="42" pos:column="9">prfd<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">=<pos:position pos:line="42" pos:column="15"/></operator> <name pos:line="42" pos:column="16">pwfd<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <call><name pos:line="42" pos:column="23">comm_open<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">SOCK_STREAM<pos:position pos:line="42" pos:column="44"/></name></expr></argument>,
                                <argument><expr><literal type="number" pos:line="43" pos:column="33">0<pos:position pos:line="43" pos:column="34"/></literal></expr></argument>,			<comment type="block" pos:line="43" pos:column="57">/* protocol */</comment>
                                <argument><expr><name pos:line="44" pos:column="33">local_addr<pos:position pos:line="44" pos:column="43"/></name></expr></argument>,
                                <argument><expr><literal type="number" pos:line="45" pos:column="33">0<pos:position pos:line="45" pos:column="34"/></literal></expr></argument>,			<comment type="block" pos:line="45" pos:column="57">/* blocking */</comment>
                                <argument><expr><name pos:line="46" pos:column="33">name<pos:position pos:line="46" pos:column="37"/></name></expr></argument>)<pos:position pos:line="46" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">IPC_CHECK_FAIL<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">(<argument><expr><name pos:line="47" pos:column="24">crfd<pos:position pos:line="47" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="30">"child read"<pos:position pos:line="47" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="44">"TCP "<pos:position pos:line="47" pos:column="50"/></literal> <operator pos:line="47" pos:column="51">&lt;&lt;<pos:position pos:line="47" pos:column="59"/></operator> <name pos:line="47" pos:column="54">local_addr<pos:position pos:line="47" pos:column="64"/></name></expr></argument>)<pos:position pos:line="47" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">IPC_CHECK_FAIL<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">prfd<pos:position pos:line="48" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="30">"parent read"<pos:position pos:line="48" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="45">"TCP "<pos:position pos:line="48" pos:column="51"/></literal> <operator pos:line="48" pos:column="52">&lt;&lt;<pos:position pos:line="48" pos:column="60"/></operator> <name pos:line="48" pos:column="55">local_addr<pos:position pos:line="48" pos:column="65"/></name></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then> <elseif pos:line="49" pos:column="7">else <if pos:line="49" pos:column="12">if <condition pos:line="49" pos:column="15">(<expr><name pos:line="49" pos:column="16">type<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">==<pos:position pos:line="49" pos:column="23"/></operator> <name pos:line="49" pos:column="24">IPC_UDP_SOCKET<pos:position pos:line="49" pos:column="38"/></name></expr>)<pos:position pos:line="49" pos:column="39"/></condition><then pos:line="49" pos:column="39"> <block pos:line="49" pos:column="40">{
        <expr_stmt><expr><name pos:line="50" pos:column="9">crfd<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <name pos:line="50" pos:column="16">cwfd<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">=<pos:position pos:line="50" pos:column="22"/></operator> <call><name pos:line="50" pos:column="23">comm_open<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name pos:line="50" pos:column="33">SOCK_DGRAM<pos:position pos:line="50" pos:column="43"/></name></expr></argument>,
                                <argument><expr><literal type="number" pos:line="51" pos:column="33">0<pos:position pos:line="51" pos:column="34"/></literal></expr></argument>,
                                <argument><expr><name pos:line="52" pos:column="33">local_addr<pos:position pos:line="52" pos:column="43"/></name></expr></argument>,
                                <argument><expr><name pos:line="53" pos:column="33">COMM_NOCLOEXEC<pos:position pos:line="53" pos:column="47"/></name></expr></argument>,
                                <argument><expr><name pos:line="54" pos:column="33">name<pos:position pos:line="54" pos:column="37"/></name></expr></argument>)<pos:position pos:line="54" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="55" pos:column="9">prfd<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <name pos:line="55" pos:column="16">pwfd<pos:position pos:line="55" pos:column="20"/></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <call><name pos:line="55" pos:column="23">comm_open<pos:position pos:line="55" pos:column="32"/></name><argument_list pos:line="55" pos:column="32">(<argument><expr><name pos:line="55" pos:column="33">SOCK_DGRAM<pos:position pos:line="55" pos:column="43"/></name></expr></argument>,
                                <argument><expr><literal type="number" pos:line="56" pos:column="33">0<pos:position pos:line="56" pos:column="34"/></literal></expr></argument>,
                                <argument><expr><name pos:line="57" pos:column="33">local_addr<pos:position pos:line="57" pos:column="43"/></name></expr></argument>,
                                <argument><expr><literal type="number" pos:line="58" pos:column="33">0<pos:position pos:line="58" pos:column="34"/></literal></expr></argument>,
                                <argument><expr><name pos:line="59" pos:column="33">name<pos:position pos:line="59" pos:column="37"/></name></expr></argument>)<pos:position pos:line="59" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">IPC_CHECK_FAIL<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><name pos:line="60" pos:column="24">crfd<pos:position pos:line="60" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="30">"child read"<pos:position pos:line="60" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="44">"UDP"<pos:position pos:line="60" pos:column="49"/></literal> <operator pos:line="60" pos:column="50">&lt;&lt;<pos:position pos:line="60" pos:column="58"/></operator> <name pos:line="60" pos:column="53">local_addr<pos:position pos:line="60" pos:column="63"/></name></expr></argument>)<pos:position pos:line="60" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">IPC_CHECK_FAIL<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><name pos:line="61" pos:column="24">prfd<pos:position pos:line="61" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="30">"parent read"<pos:position pos:line="61" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="45">"UDP"<pos:position pos:line="61" pos:column="50"/></literal> <operator pos:line="61" pos:column="51">&lt;&lt;<pos:position pos:line="61" pos:column="59"/></operator> <name pos:line="61" pos:column="54">local_addr<pos:position pos:line="61" pos:column="64"/></name></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if></elseif> <elseif pos:line="62" pos:column="7">else <if pos:line="62" pos:column="12">if <condition pos:line="62" pos:column="15">(<expr><name pos:line="62" pos:column="16">type<pos:position pos:line="62" pos:column="20"/></name> <operator pos:line="62" pos:column="21">==<pos:position pos:line="62" pos:column="23"/></operator> <name pos:line="62" pos:column="24">IPC_FIFO<pos:position pos:line="62" pos:column="32"/></name></expr>)<pos:position pos:line="62" pos:column="33"/></condition><then pos:line="62" pos:column="33"> <block pos:line="62" pos:column="34">{
        <decl_stmt><decl><type><name pos:line="63" pos:column="9">int<pos:position pos:line="63" pos:column="12"/></name></type> <name><name pos:line="63" pos:column="13">p2c<pos:position pos:line="63" pos:column="16"/></name><index pos:line="63" pos:column="16">[<expr><literal type="number" pos:line="63" pos:column="17">2<pos:position pos:line="63" pos:column="18"/></literal></expr>]<pos:position pos:line="63" pos:column="19"/></index></name></decl>;<pos:position pos:line="63" pos:column="20"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="64" pos:column="9">int<pos:position pos:line="64" pos:column="12"/></name></type> <name><name pos:line="64" pos:column="13">c2p<pos:position pos:line="64" pos:column="16"/></name><index pos:line="64" pos:column="16">[<expr><literal type="number" pos:line="64" pos:column="17">2<pos:position pos:line="64" pos:column="18"/></literal></expr>]<pos:position pos:line="64" pos:column="19"/></index></name></decl>;<pos:position pos:line="64" pos:column="20"/></decl_stmt>

        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><call><name pos:line="66" pos:column="13">pipe<pos:position pos:line="66" pos:column="17"/></name><argument_list pos:line="66" pos:column="17">(<argument><expr><name pos:line="66" pos:column="18">p2c<pos:position pos:line="66" pos:column="21"/></name></expr></argument>)<pos:position pos:line="66" pos:column="22"/></argument_list></call> <operator pos:line="66" pos:column="23">&lt;<pos:position pos:line="66" pos:column="27"/></operator> <literal type="number" pos:line="66" pos:column="25">0<pos:position pos:line="66" pos:column="26"/></literal></expr>)<pos:position pos:line="66" pos:column="27"/></condition><then pos:line="66" pos:column="27"> <block pos:line="66" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">debugs<pos:position pos:line="67" pos:column="19"/></name><argument_list pos:line="67" pos:column="19">(<argument><expr><literal type="number" pos:line="67" pos:column="20">54<pos:position pos:line="67" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="24">DBG_CRITICAL<pos:position pos:line="67" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="38">"ipcCreate: pipe: "<pos:position pos:line="67" pos:column="57"/></literal> <operator pos:line="67" pos:column="58">&lt;&lt;<pos:position pos:line="67" pos:column="66"/></operator> <call><name pos:line="67" pos:column="61">xstrerror<pos:position pos:line="67" pos:column="70"/></name><argument_list pos:line="67" pos:column="70">()<pos:position pos:line="67" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="67" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="74"/></expr_stmt>
            <return pos:line="68" pos:column="13">return <expr><operator pos:line="68" pos:column="20">-<pos:position pos:line="68" pos:column="21"/></operator><literal type="number" pos:line="68" pos:column="21">1<pos:position pos:line="68" pos:column="22"/></literal></expr>;<pos:position pos:line="68" pos:column="23"/></return> <comment type="line" pos:line="68" pos:column="24">// maybe ipcCloseAllFD(prfd, pwfd, crfd, cwfd);</comment>
        }<pos:position pos:line="69" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">fd_open<pos:position pos:line="70" pos:column="16"/></name><argument_list pos:line="70" pos:column="16">(<argument><expr><name pos:line="70" pos:column="17">prfd<pos:position pos:line="70" pos:column="21"/></name> <operator pos:line="70" pos:column="22">=<pos:position pos:line="70" pos:column="23"/></operator> <name><name pos:line="70" pos:column="24">p2c<pos:position pos:line="70" pos:column="27"/></name><index pos:line="70" pos:column="27">[<expr><literal type="number" pos:line="70" pos:column="28">0<pos:position pos:line="70" pos:column="29"/></literal></expr>]<pos:position pos:line="70" pos:column="30"/></index></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="32">FD_PIPE<pos:position pos:line="70" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="41">"IPC FIFO Parent Read"<pos:position pos:line="70" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">fd_open<pos:position pos:line="71" pos:column="16"/></name><argument_list pos:line="71" pos:column="16">(<argument><expr><name pos:line="71" pos:column="17">cwfd<pos:position pos:line="71" pos:column="21"/></name> <operator pos:line="71" pos:column="22">=<pos:position pos:line="71" pos:column="23"/></operator> <name><name pos:line="71" pos:column="24">p2c<pos:position pos:line="71" pos:column="27"/></name><index pos:line="71" pos:column="27">[<expr><literal type="number" pos:line="71" pos:column="28">1<pos:position pos:line="71" pos:column="29"/></literal></expr>]<pos:position pos:line="71" pos:column="30"/></index></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="32">FD_PIPE<pos:position pos:line="71" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="41">"IPC FIFO Child Write"<pos:position pos:line="71" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="65"/></expr_stmt>

        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><call><name pos:line="73" pos:column="13">pipe<pos:position pos:line="73" pos:column="17"/></name><argument_list pos:line="73" pos:column="17">(<argument><expr><name pos:line="73" pos:column="18">c2p<pos:position pos:line="73" pos:column="21"/></name></expr></argument>)<pos:position pos:line="73" pos:column="22"/></argument_list></call> <operator pos:line="73" pos:column="23">&lt;<pos:position pos:line="73" pos:column="27"/></operator> <literal type="number" pos:line="73" pos:column="25">0<pos:position pos:line="73" pos:column="26"/></literal></expr>)<pos:position pos:line="73" pos:column="27"/></condition><then pos:line="73" pos:column="27"> <block pos:line="73" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="74" pos:column="13">debugs<pos:position pos:line="74" pos:column="19"/></name><argument_list pos:line="74" pos:column="19">(<argument><expr><literal type="number" pos:line="74" pos:column="20">54<pos:position pos:line="74" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="24">DBG_CRITICAL<pos:position pos:line="74" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="38">"ipcCreate: pipe: "<pos:position pos:line="74" pos:column="57"/></literal> <operator pos:line="74" pos:column="58">&lt;&lt;<pos:position pos:line="74" pos:column="66"/></operator> <call><name pos:line="74" pos:column="61">xstrerror<pos:position pos:line="74" pos:column="70"/></name><argument_list pos:line="74" pos:column="70">()<pos:position pos:line="74" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="74"/></expr_stmt>
            <return pos:line="75" pos:column="13">return <expr><call><name pos:line="75" pos:column="20">ipcCloseAllFD<pos:position pos:line="75" pos:column="33"/></name><argument_list pos:line="75" pos:column="33">(<argument><expr><name pos:line="75" pos:column="34">prfd<pos:position pos:line="75" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="40">pwfd<pos:position pos:line="75" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="46">crfd<pos:position pos:line="75" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="52">cwfd<pos:position pos:line="75" pos:column="56"/></name></expr></argument>)<pos:position pos:line="75" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="58"/></return>
        }<pos:position pos:line="76" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">fd_open<pos:position pos:line="77" pos:column="16"/></name><argument_list pos:line="77" pos:column="16">(<argument><expr><name pos:line="77" pos:column="17">crfd<pos:position pos:line="77" pos:column="21"/></name> <operator pos:line="77" pos:column="22">=<pos:position pos:line="77" pos:column="23"/></operator> <name><name pos:line="77" pos:column="24">c2p<pos:position pos:line="77" pos:column="27"/></name><index pos:line="77" pos:column="27">[<expr><literal type="number" pos:line="77" pos:column="28">0<pos:position pos:line="77" pos:column="29"/></literal></expr>]<pos:position pos:line="77" pos:column="30"/></index></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="32">FD_PIPE<pos:position pos:line="77" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="41">"IPC FIFO Child Read"<pos:position pos:line="77" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">fd_open<pos:position pos:line="78" pos:column="16"/></name><argument_list pos:line="78" pos:column="16">(<argument><expr><name pos:line="78" pos:column="17">pwfd<pos:position pos:line="78" pos:column="21"/></name> <operator pos:line="78" pos:column="22">=<pos:position pos:line="78" pos:column="23"/></operator> <name><name pos:line="78" pos:column="24">c2p<pos:position pos:line="78" pos:column="27"/></name><index pos:line="78" pos:column="27">[<expr><literal type="number" pos:line="78" pos:column="28">1<pos:position pos:line="78" pos:column="29"/></literal></expr>]<pos:position pos:line="78" pos:column="30"/></index></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="32">FD_PIPE<pos:position pos:line="78" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="41">"IPC FIFO Parent Write"<pos:position pos:line="78" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="66"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="80" pos:column="9">IPC_CHECK_FAIL<pos:position pos:line="80" pos:column="23"/></name><argument_list pos:line="80" pos:column="23">(<argument><expr><name pos:line="80" pos:column="24">crfd<pos:position pos:line="80" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="30">"child read"<pos:position pos:line="80" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="44">"FIFO pipe"<pos:position pos:line="80" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="81" pos:column="9">IPC_CHECK_FAIL<pos:position pos:line="81" pos:column="23"/></name><argument_list pos:line="81" pos:column="23">(<argument><expr><name pos:line="81" pos:column="24">prfd<pos:position pos:line="81" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="30">"parent read"<pos:position pos:line="81" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="45">"FIFO pipe"<pos:position pos:line="81" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="58"/></expr_stmt>

<cpp:if pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">if<pos:position pos:line="83" pos:column="4"/></cpp:directive> <expr><name pos:line="83" pos:column="5">HAVE_SOCKETPAIR<pos:position pos:line="83" pos:column="20"/></name> <operator pos:line="83" pos:column="21">&amp;&amp;<pos:position pos:line="83" pos:column="31"/></operator> <call><name pos:line="83" pos:column="24">defined<pos:position pos:line="83" pos:column="31"/></name><argument_list pos:line="83" pos:column="31">(<argument><expr><name pos:line="83" pos:column="32">AF_UNIX<pos:position pos:line="83" pos:column="39"/></name></expr></argument>)<pos:position pos:line="83" pos:column="40"/></argument_list></call></expr></cpp:if>

    }<pos:position pos:line="85" pos:column="6"/></block></then></if></elseif> <elseif pos:line="85" pos:column="7">else <if pos:line="85" pos:column="12">if <condition pos:line="85" pos:column="15">(<expr><name pos:line="85" pos:column="16">type<pos:position pos:line="85" pos:column="20"/></name> <operator pos:line="85" pos:column="21">==<pos:position pos:line="85" pos:column="23"/></operator> <name pos:line="85" pos:column="24">IPC_UNIX_STREAM<pos:position pos:line="85" pos:column="39"/></name></expr>)<pos:position pos:line="85" pos:column="40"/></condition><then pos:line="85" pos:column="40"> <block pos:line="85" pos:column="41">{
        <decl_stmt><decl><type><name pos:line="86" pos:column="9">int<pos:position pos:line="86" pos:column="12"/></name></type> <name><name pos:line="86" pos:column="13">fds<pos:position pos:line="86" pos:column="16"/></name><index pos:line="86" pos:column="16">[<expr><literal type="number" pos:line="86" pos:column="17">2<pos:position pos:line="86" pos:column="18"/></literal></expr>]<pos:position pos:line="86" pos:column="19"/></index></name></decl>;<pos:position pos:line="86" pos:column="20"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="87" pos:column="9">int<pos:position pos:line="87" pos:column="12"/></name></type> <name pos:line="87" pos:column="13">buflen<pos:position pos:line="87" pos:column="19"/></name> <init pos:line="87" pos:column="20">= <expr><literal type="number" pos:line="87" pos:column="22">32768<pos:position pos:line="87" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="87" pos:column="28"/></decl_stmt>

        <if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><call><name pos:line="89" pos:column="13">socketpair<pos:position pos:line="89" pos:column="23"/></name><argument_list pos:line="89" pos:column="23">(<argument><expr><name pos:line="89" pos:column="24">AF_UNIX<pos:position pos:line="89" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="33">SOCK_STREAM<pos:position pos:line="89" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="89" pos:column="46">0<pos:position pos:line="89" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="49">fds<pos:position pos:line="89" pos:column="52"/></name></expr></argument>)<pos:position pos:line="89" pos:column="53"/></argument_list></call> <operator pos:line="89" pos:column="54">&lt;<pos:position pos:line="89" pos:column="58"/></operator> <literal type="number" pos:line="89" pos:column="56">0<pos:position pos:line="89" pos:column="57"/></literal></expr>)<pos:position pos:line="89" pos:column="58"/></condition><then pos:line="89" pos:column="58"> <block pos:line="89" pos:column="59">{
            <expr_stmt><expr><call><name pos:line="90" pos:column="13">debugs<pos:position pos:line="90" pos:column="19"/></name><argument_list pos:line="90" pos:column="19">(<argument><expr><literal type="number" pos:line="90" pos:column="20">54<pos:position pos:line="90" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="24">DBG_CRITICAL<pos:position pos:line="90" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="38">"ipcCreate: socketpair: "<pos:position pos:line="90" pos:column="63"/></literal> <operator pos:line="90" pos:column="64">&lt;&lt;<pos:position pos:line="90" pos:column="72"/></operator> <call><name pos:line="90" pos:column="67">xstrerror<pos:position pos:line="90" pos:column="76"/></name><argument_list pos:line="90" pos:column="76">()<pos:position pos:line="90" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="90" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="80"/></expr_stmt>
            <return pos:line="91" pos:column="13">return <expr><operator pos:line="91" pos:column="20">-<pos:position pos:line="91" pos:column="21"/></operator><literal type="number" pos:line="91" pos:column="21">1<pos:position pos:line="91" pos:column="22"/></literal></expr>;<pos:position pos:line="91" pos:column="23"/></return>
        }<pos:position pos:line="92" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="94" pos:column="9">setsockopt<pos:position pos:line="94" pos:column="19"/></name><argument_list pos:line="94" pos:column="19">(<argument><expr><name><name pos:line="94" pos:column="20">fds<pos:position pos:line="94" pos:column="23"/></name><index pos:line="94" pos:column="23">[<expr><literal type="number" pos:line="94" pos:column="24">0<pos:position pos:line="94" pos:column="25"/></literal></expr>]<pos:position pos:line="94" pos:column="26"/></index></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="28">SOL_SOCKET<pos:position pos:line="94" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="40">SO_SNDBUF<pos:position pos:line="94" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="94" pos:column="51">(<pos:position pos:line="94" pos:column="52"/></operator><name pos:line="94" pos:column="52">void<pos:position pos:line="94" pos:column="56"/></name> <operator pos:line="94" pos:column="57">*<pos:position pos:line="94" pos:column="58"/></operator><operator pos:line="94" pos:column="58">)<pos:position pos:line="94" pos:column="59"/></operator> <operator pos:line="94" pos:column="60">&amp;<pos:position pos:line="94" pos:column="65"/></operator><name pos:line="94" pos:column="61">buflen<pos:position pos:line="94" pos:column="67"/></name></expr></argument>, <argument><expr><sizeof pos:line="94" pos:column="69">sizeof<argument_list pos:line="94" pos:column="75">(<argument><expr><name pos:line="94" pos:column="76">buflen<pos:position pos:line="94" pos:column="82"/></name></expr></argument>)<pos:position pos:line="94" pos:column="83"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="94" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="95" pos:column="9">setsockopt<pos:position pos:line="95" pos:column="19"/></name><argument_list pos:line="95" pos:column="19">(<argument><expr><name><name pos:line="95" pos:column="20">fds<pos:position pos:line="95" pos:column="23"/></name><index pos:line="95" pos:column="23">[<expr><literal type="number" pos:line="95" pos:column="24">0<pos:position pos:line="95" pos:column="25"/></literal></expr>]<pos:position pos:line="95" pos:column="26"/></index></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="28">SOL_SOCKET<pos:position pos:line="95" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="40">SO_RCVBUF<pos:position pos:line="95" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="51">(<pos:position pos:line="95" pos:column="52"/></operator><name pos:line="95" pos:column="52">void<pos:position pos:line="95" pos:column="56"/></name> <operator pos:line="95" pos:column="57">*<pos:position pos:line="95" pos:column="58"/></operator><operator pos:line="95" pos:column="58">)<pos:position pos:line="95" pos:column="59"/></operator> <operator pos:line="95" pos:column="60">&amp;<pos:position pos:line="95" pos:column="65"/></operator><name pos:line="95" pos:column="61">buflen<pos:position pos:line="95" pos:column="67"/></name></expr></argument>, <argument><expr><sizeof pos:line="95" pos:column="69">sizeof<argument_list pos:line="95" pos:column="75">(<argument><expr><name pos:line="95" pos:column="76">buflen<pos:position pos:line="95" pos:column="82"/></name></expr></argument>)<pos:position pos:line="95" pos:column="83"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="95" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">setsockopt<pos:position pos:line="96" pos:column="19"/></name><argument_list pos:line="96" pos:column="19">(<argument><expr><name><name pos:line="96" pos:column="20">fds<pos:position pos:line="96" pos:column="23"/></name><index pos:line="96" pos:column="23">[<expr><literal type="number" pos:line="96" pos:column="24">1<pos:position pos:line="96" pos:column="25"/></literal></expr>]<pos:position pos:line="96" pos:column="26"/></index></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="28">SOL_SOCKET<pos:position pos:line="96" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="40">SO_SNDBUF<pos:position pos:line="96" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="51">(<pos:position pos:line="96" pos:column="52"/></operator><name pos:line="96" pos:column="52">void<pos:position pos:line="96" pos:column="56"/></name> <operator pos:line="96" pos:column="57">*<pos:position pos:line="96" pos:column="58"/></operator><operator pos:line="96" pos:column="58">)<pos:position pos:line="96" pos:column="59"/></operator> <operator pos:line="96" pos:column="60">&amp;<pos:position pos:line="96" pos:column="65"/></operator><name pos:line="96" pos:column="61">buflen<pos:position pos:line="96" pos:column="67"/></name></expr></argument>, <argument><expr><sizeof pos:line="96" pos:column="69">sizeof<argument_list pos:line="96" pos:column="75">(<argument><expr><name pos:line="96" pos:column="76">buflen<pos:position pos:line="96" pos:column="82"/></name></expr></argument>)<pos:position pos:line="96" pos:column="83"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="96" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">setsockopt<pos:position pos:line="97" pos:column="19"/></name><argument_list pos:line="97" pos:column="19">(<argument><expr><name><name pos:line="97" pos:column="20">fds<pos:position pos:line="97" pos:column="23"/></name><index pos:line="97" pos:column="23">[<expr><literal type="number" pos:line="97" pos:column="24">1<pos:position pos:line="97" pos:column="25"/></literal></expr>]<pos:position pos:line="97" pos:column="26"/></index></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="28">SOL_SOCKET<pos:position pos:line="97" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="40">SO_RCVBUF<pos:position pos:line="97" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="51">(<pos:position pos:line="97" pos:column="52"/></operator><name pos:line="97" pos:column="52">void<pos:position pos:line="97" pos:column="56"/></name> <operator pos:line="97" pos:column="57">*<pos:position pos:line="97" pos:column="58"/></operator><operator pos:line="97" pos:column="58">)<pos:position pos:line="97" pos:column="59"/></operator> <operator pos:line="97" pos:column="60">&amp;<pos:position pos:line="97" pos:column="65"/></operator><name pos:line="97" pos:column="61">buflen<pos:position pos:line="97" pos:column="67"/></name></expr></argument>, <argument><expr><sizeof pos:line="97" pos:column="69">sizeof<argument_list pos:line="97" pos:column="75">(<argument><expr><name pos:line="97" pos:column="76">buflen<pos:position pos:line="97" pos:column="82"/></name></expr></argument>)<pos:position pos:line="97" pos:column="83"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="97" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="98" pos:column="9">fd_open<pos:position pos:line="98" pos:column="16"/></name><argument_list pos:line="98" pos:column="16">(<argument><expr><name pos:line="98" pos:column="17">prfd<pos:position pos:line="98" pos:column="21"/></name> <operator pos:line="98" pos:column="22">=<pos:position pos:line="98" pos:column="23"/></operator> <name pos:line="98" pos:column="24">pwfd<pos:position pos:line="98" pos:column="28"/></name> <operator pos:line="98" pos:column="29">=<pos:position pos:line="98" pos:column="30"/></operator> <name><name pos:line="98" pos:column="31">fds<pos:position pos:line="98" pos:column="34"/></name><index pos:line="98" pos:column="34">[<expr><literal type="number" pos:line="98" pos:column="35">0<pos:position pos:line="98" pos:column="36"/></literal></expr>]<pos:position pos:line="98" pos:column="37"/></index></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="39">FD_PIPE<pos:position pos:line="98" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="48">"IPC UNIX STREAM Parent"<pos:position pos:line="98" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="99" pos:column="9">fd_open<pos:position pos:line="99" pos:column="16"/></name><argument_list pos:line="99" pos:column="16">(<argument><expr><name pos:line="99" pos:column="17">crfd<pos:position pos:line="99" pos:column="21"/></name> <operator pos:line="99" pos:column="22">=<pos:position pos:line="99" pos:column="23"/></operator> <name pos:line="99" pos:column="24">cwfd<pos:position pos:line="99" pos:column="28"/></name> <operator pos:line="99" pos:column="29">=<pos:position pos:line="99" pos:column="30"/></operator> <name><name pos:line="99" pos:column="31">fds<pos:position pos:line="99" pos:column="34"/></name><index pos:line="99" pos:column="34">[<expr><literal type="number" pos:line="99" pos:column="35">1<pos:position pos:line="99" pos:column="36"/></literal></expr>]<pos:position pos:line="99" pos:column="37"/></index></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="39">FD_PIPE<pos:position pos:line="99" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="48">"IPC UNIX STREAM Parent"<pos:position pos:line="99" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="100" pos:column="9">IPC_CHECK_FAIL<pos:position pos:line="100" pos:column="23"/></name><argument_list pos:line="100" pos:column="23">(<argument><expr><name pos:line="100" pos:column="24">crfd<pos:position pos:line="100" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="30">"child read"<pos:position pos:line="100" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="44">"UDS socket"<pos:position pos:line="100" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">IPC_CHECK_FAIL<pos:position pos:line="101" pos:column="23"/></name><argument_list pos:line="101" pos:column="23">(<argument><expr><name pos:line="101" pos:column="24">prfd<pos:position pos:line="101" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="30">"parent read"<pos:position pos:line="101" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="45">"UDS socket"<pos:position pos:line="101" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="59"/></expr_stmt>

    }<pos:position pos:line="103" pos:column="6"/></block></then></if></elseif> <elseif pos:line="103" pos:column="7">else <if pos:line="103" pos:column="12">if <condition pos:line="103" pos:column="15">(<expr><name pos:line="103" pos:column="16">type<pos:position pos:line="103" pos:column="20"/></name> <operator pos:line="103" pos:column="21">==<pos:position pos:line="103" pos:column="23"/></operator> <name pos:line="103" pos:column="24">IPC_UNIX_DGRAM<pos:position pos:line="103" pos:column="38"/></name></expr>)<pos:position pos:line="103" pos:column="39"/></condition><then pos:line="103" pos:column="39"> <block pos:line="103" pos:column="40">{
        <decl_stmt><decl><type><name pos:line="104" pos:column="9">int<pos:position pos:line="104" pos:column="12"/></name></type> <name><name pos:line="104" pos:column="13">fds<pos:position pos:line="104" pos:column="16"/></name><index pos:line="104" pos:column="16">[<expr><literal type="number" pos:line="104" pos:column="17">2<pos:position pos:line="104" pos:column="18"/></literal></expr>]<pos:position pos:line="104" pos:column="19"/></index></name></decl>;<pos:position pos:line="104" pos:column="20"/></decl_stmt>

        <if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><call><name pos:line="106" pos:column="13">socketpair<pos:position pos:line="106" pos:column="23"/></name><argument_list pos:line="106" pos:column="23">(<argument><expr><name pos:line="106" pos:column="24">AF_UNIX<pos:position pos:line="106" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="33">SOCK_DGRAM<pos:position pos:line="106" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="45">0<pos:position pos:line="106" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="48">fds<pos:position pos:line="106" pos:column="51"/></name></expr></argument>)<pos:position pos:line="106" pos:column="52"/></argument_list></call> <operator pos:line="106" pos:column="53">&lt;<pos:position pos:line="106" pos:column="57"/></operator> <literal type="number" pos:line="106" pos:column="55">0<pos:position pos:line="106" pos:column="56"/></literal></expr>)<pos:position pos:line="106" pos:column="57"/></condition><then pos:line="106" pos:column="57"> <block pos:line="106" pos:column="58">{
            <expr_stmt><expr><call><name pos:line="107" pos:column="13">debugs<pos:position pos:line="107" pos:column="19"/></name><argument_list pos:line="107" pos:column="19">(<argument><expr><literal type="number" pos:line="107" pos:column="20">54<pos:position pos:line="107" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="24">DBG_CRITICAL<pos:position pos:line="107" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="38">"ipcCreate: socketpair: "<pos:position pos:line="107" pos:column="63"/></literal> <operator pos:line="107" pos:column="64">&lt;&lt;<pos:position pos:line="107" pos:column="72"/></operator> <call><name pos:line="107" pos:column="67">xstrerror<pos:position pos:line="107" pos:column="76"/></name><argument_list pos:line="107" pos:column="76">()<pos:position pos:line="107" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="107" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="80"/></expr_stmt>
            <return pos:line="108" pos:column="13">return <expr><operator pos:line="108" pos:column="20">-<pos:position pos:line="108" pos:column="21"/></operator><literal type="number" pos:line="108" pos:column="21">1<pos:position pos:line="108" pos:column="22"/></literal></expr>;<pos:position pos:line="108" pos:column="23"/></return>
        }<pos:position pos:line="109" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="111" pos:column="9">fd_open<pos:position pos:line="111" pos:column="16"/></name><argument_list pos:line="111" pos:column="16">(<argument><expr><name pos:line="111" pos:column="17">prfd<pos:position pos:line="111" pos:column="21"/></name> <operator pos:line="111" pos:column="22">=<pos:position pos:line="111" pos:column="23"/></operator> <name pos:line="111" pos:column="24">pwfd<pos:position pos:line="111" pos:column="28"/></name> <operator pos:line="111" pos:column="29">=<pos:position pos:line="111" pos:column="30"/></operator> <name><name pos:line="111" pos:column="31">fds<pos:position pos:line="111" pos:column="34"/></name><index pos:line="111" pos:column="34">[<expr><literal type="number" pos:line="111" pos:column="35">0<pos:position pos:line="111" pos:column="36"/></literal></expr>]<pos:position pos:line="111" pos:column="37"/></index></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="39">FD_PIPE<pos:position pos:line="111" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="48">"IPC UNIX DGRAM Parent"<pos:position pos:line="111" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="112" pos:column="9">fd_open<pos:position pos:line="112" pos:column="16"/></name><argument_list pos:line="112" pos:column="16">(<argument><expr><name pos:line="112" pos:column="17">crfd<pos:position pos:line="112" pos:column="21"/></name> <operator pos:line="112" pos:column="22">=<pos:position pos:line="112" pos:column="23"/></operator> <name pos:line="112" pos:column="24">cwfd<pos:position pos:line="112" pos:column="28"/></name> <operator pos:line="112" pos:column="29">=<pos:position pos:line="112" pos:column="30"/></operator> <name><name pos:line="112" pos:column="31">fds<pos:position pos:line="112" pos:column="34"/></name><index pos:line="112" pos:column="34">[<expr><literal type="number" pos:line="112" pos:column="35">1<pos:position pos:line="112" pos:column="36"/></literal></expr>]<pos:position pos:line="112" pos:column="37"/></index></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="39">FD_PIPE<pos:position pos:line="112" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="48">"IPC UNIX DGRAM Parent"<pos:position pos:line="112" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="73"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="114" pos:column="9">IPC_CHECK_FAIL<pos:position pos:line="114" pos:column="23"/></name><argument_list pos:line="114" pos:column="23">(<argument><expr><name pos:line="114" pos:column="24">crfd<pos:position pos:line="114" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="30">"child read"<pos:position pos:line="114" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="44">"UDS datagram"<pos:position pos:line="114" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="115" pos:column="9">IPC_CHECK_FAIL<pos:position pos:line="115" pos:column="23"/></name><argument_list pos:line="115" pos:column="23">(<argument><expr><name pos:line="115" pos:column="24">prfd<pos:position pos:line="115" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="30">"parent read"<pos:position pos:line="115" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="45">"UDS datagram"<pos:position pos:line="115" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="61"/></expr_stmt>
<cpp:endif pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">endif<pos:position pos:line="116" pos:column="7"/></cpp:directive></cpp:endif>

    }<pos:position pos:line="118" pos:column="6"/></block></then></if></elseif> <else pos:line="118" pos:column="7">else <block pos:line="118" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="119" pos:column="9">assert<pos:position pos:line="119" pos:column="15"/></name><argument_list pos:line="119" pos:column="15">(<argument><expr><name pos:line="119" pos:column="16">IPC_NONE<pos:position pos:line="119" pos:column="24"/></name></expr></argument>)<pos:position pos:line="119" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="120" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="122" pos:column="5">debugs<pos:position pos:line="122" pos:column="11"/></name><argument_list pos:line="122" pos:column="11">(<argument><expr><literal type="number" pos:line="122" pos:column="12">54<pos:position pos:line="122" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="16">3<pos:position pos:line="122" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="19">"ipcCreate: prfd FD "<pos:position pos:line="122" pos:column="40"/></literal> <operator pos:line="122" pos:column="41">&lt;&lt;<pos:position pos:line="122" pos:column="49"/></operator> <name pos:line="122" pos:column="44">prfd<pos:position pos:line="122" pos:column="48"/></name></expr></argument>)<pos:position pos:line="122" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="123" pos:column="5">debugs<pos:position pos:line="123" pos:column="11"/></name><argument_list pos:line="123" pos:column="11">(<argument><expr><literal type="number" pos:line="123" pos:column="12">54<pos:position pos:line="123" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="123" pos:column="16">3<pos:position pos:line="123" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="19">"ipcCreate: pwfd FD "<pos:position pos:line="123" pos:column="40"/></literal> <operator pos:line="123" pos:column="41">&lt;&lt;<pos:position pos:line="123" pos:column="49"/></operator> <name pos:line="123" pos:column="44">pwfd<pos:position pos:line="123" pos:column="48"/></name></expr></argument>)<pos:position pos:line="123" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="124" pos:column="5">debugs<pos:position pos:line="124" pos:column="11"/></name><argument_list pos:line="124" pos:column="11">(<argument><expr><literal type="number" pos:line="124" pos:column="12">54<pos:position pos:line="124" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="124" pos:column="16">3<pos:position pos:line="124" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="124" pos:column="19">"ipcCreate: crfd FD "<pos:position pos:line="124" pos:column="40"/></literal> <operator pos:line="124" pos:column="41">&lt;&lt;<pos:position pos:line="124" pos:column="49"/></operator> <name pos:line="124" pos:column="44">crfd<pos:position pos:line="124" pos:column="48"/></name></expr></argument>)<pos:position pos:line="124" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="125" pos:column="5">debugs<pos:position pos:line="125" pos:column="11"/></name><argument_list pos:line="125" pos:column="11">(<argument><expr><literal type="number" pos:line="125" pos:column="12">54<pos:position pos:line="125" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="125" pos:column="16">3<pos:position pos:line="125" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="19">"ipcCreate: cwfd FD "<pos:position pos:line="125" pos:column="40"/></literal> <operator pos:line="125" pos:column="41">&lt;&lt;<pos:position pos:line="125" pos:column="49"/></operator> <name pos:line="125" pos:column="44">cwfd<pos:position pos:line="125" pos:column="48"/></name></expr></argument>)<pos:position pos:line="125" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="50"/></expr_stmt>

    <if pos:line="127" pos:column="5">if <condition pos:line="127" pos:column="8">(<expr><name pos:line="127" pos:column="9">type<pos:position pos:line="127" pos:column="13"/></name> <operator pos:line="127" pos:column="14">==<pos:position pos:line="127" pos:column="16"/></operator> <name pos:line="127" pos:column="17">IPC_TCP_SOCKET<pos:position pos:line="127" pos:column="31"/></name> <operator pos:line="127" pos:column="32">||<pos:position pos:line="127" pos:column="34"/></operator> <name pos:line="127" pos:column="35">type<pos:position pos:line="127" pos:column="39"/></name> <operator pos:line="127" pos:column="40">==<pos:position pos:line="127" pos:column="42"/></operator> <name pos:line="127" pos:column="43">IPC_UDP_SOCKET<pos:position pos:line="127" pos:column="57"/></name></expr>)<pos:position pos:line="127" pos:column="58"/></condition><then pos:line="127" pos:column="58"> <block pos:line="127" pos:column="59">{
        <expr_stmt><expr><call><name><name pos:line="128" pos:column="9">PaS<pos:position pos:line="128" pos:column="12"/></name><operator pos:line="128" pos:column="12">.<pos:position pos:line="128" pos:column="13"/></operator><name pos:line="128" pos:column="13">InitAddrInfo<pos:position pos:line="128" pos:column="25"/></name></name><argument_list pos:line="128" pos:column="25">(<argument><expr><name pos:line="128" pos:column="26">AI<pos:position pos:line="128" pos:column="28"/></name></expr></argument>)<pos:position pos:line="128" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="30"/></expr_stmt>

        <if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><call><name pos:line="130" pos:column="13">getsockname<pos:position pos:line="130" pos:column="24"/></name><argument_list pos:line="130" pos:column="24">(<argument><expr><name pos:line="130" pos:column="25">pwfd<pos:position pos:line="130" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="31">AI<pos:position pos:line="130" pos:column="33"/></name><operator pos:line="130" pos:column="33">-&gt;<pos:position pos:line="130" pos:column="38"/></operator><name pos:line="130" pos:column="35">ai_addr<pos:position pos:line="130" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="130" pos:column="44">&amp;<pos:position pos:line="130" pos:column="49"/></operator><name><name pos:line="130" pos:column="45">AI<pos:position pos:line="130" pos:column="47"/></name><operator pos:line="130" pos:column="47">-&gt;<pos:position pos:line="130" pos:column="52"/></operator><name pos:line="130" pos:column="49">ai_addrlen<pos:position pos:line="130" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="130" pos:column="60"/></argument_list></call> <operator pos:line="130" pos:column="61">&lt;<pos:position pos:line="130" pos:column="65"/></operator> <literal type="number" pos:line="130" pos:column="63">0<pos:position pos:line="130" pos:column="64"/></literal></expr>)<pos:position pos:line="130" pos:column="65"/></condition><then pos:line="130" pos:column="65"> <block pos:line="130" pos:column="66">{
            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">PaS<pos:position pos:line="131" pos:column="16"/></name><operator pos:line="131" pos:column="16">.<pos:position pos:line="131" pos:column="17"/></operator><name pos:line="131" pos:column="17">FreeAddrInfo<pos:position pos:line="131" pos:column="29"/></name></name><argument_list pos:line="131" pos:column="29">(<argument><expr><name pos:line="131" pos:column="30">AI<pos:position pos:line="131" pos:column="32"/></name></expr></argument>)<pos:position pos:line="131" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="132" pos:column="13">debugs<pos:position pos:line="132" pos:column="19"/></name><argument_list pos:line="132" pos:column="19">(<argument><expr><literal type="number" pos:line="132" pos:column="20">54<pos:position pos:line="132" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="132" pos:column="24">DBG_CRITICAL<pos:position pos:line="132" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="132" pos:column="38">"ipcCreate: getsockname: "<pos:position pos:line="132" pos:column="64"/></literal> <operator pos:line="132" pos:column="65">&lt;&lt;<pos:position pos:line="132" pos:column="73"/></operator> <call><name pos:line="132" pos:column="68">xstrerror<pos:position pos:line="132" pos:column="77"/></name><argument_list pos:line="132" pos:column="77">()<pos:position pos:line="132" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="132" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="81"/></expr_stmt>
            <return pos:line="133" pos:column="13">return <expr><call><name pos:line="133" pos:column="20">ipcCloseAllFD<pos:position pos:line="133" pos:column="33"/></name><argument_list pos:line="133" pos:column="33">(<argument><expr><name pos:line="133" pos:column="34">prfd<pos:position pos:line="133" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="40">pwfd<pos:position pos:line="133" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="46">crfd<pos:position pos:line="133" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="52">cwfd<pos:position pos:line="133" pos:column="56"/></name></expr></argument>)<pos:position pos:line="133" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="58"/></return>
        }<pos:position pos:line="134" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="136" pos:column="9">PaS<pos:position pos:line="136" pos:column="12"/></name> <operator pos:line="136" pos:column="13">=<pos:position pos:line="136" pos:column="14"/></operator> <operator pos:line="136" pos:column="15">*<pos:position pos:line="136" pos:column="16"/></operator><name pos:line="136" pos:column="16">AI<pos:position pos:line="136" pos:column="18"/></name></expr>;<pos:position pos:line="136" pos:column="19"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="138" pos:column="9">debugs<pos:position pos:line="138" pos:column="15"/></name><argument_list pos:line="138" pos:column="15">(<argument><expr><literal type="number" pos:line="138" pos:column="16">54<pos:position pos:line="138" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="138" pos:column="20">3<pos:position pos:line="138" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="138" pos:column="23">"ipcCreate: FD "<pos:position pos:line="138" pos:column="39"/></literal> <operator pos:line="138" pos:column="40">&lt;&lt;<pos:position pos:line="138" pos:column="48"/></operator> <name pos:line="138" pos:column="43">pwfd<pos:position pos:line="138" pos:column="47"/></name> <operator pos:line="138" pos:column="48">&lt;&lt;<pos:position pos:line="138" pos:column="56"/></operator> <literal type="string" pos:line="138" pos:column="51">" sockaddr "<pos:position pos:line="138" pos:column="63"/></literal> <operator pos:line="138" pos:column="64">&lt;&lt;<pos:position pos:line="138" pos:column="72"/></operator> <name pos:line="138" pos:column="67">PaS<pos:position pos:line="138" pos:column="70"/></name></expr></argument>)<pos:position pos:line="138" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="72"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="140" pos:column="9">PaS<pos:position pos:line="140" pos:column="12"/></name><operator pos:line="140" pos:column="12">.<pos:position pos:line="140" pos:column="13"/></operator><name pos:line="140" pos:column="13">FreeAddrInfo<pos:position pos:line="140" pos:column="25"/></name></name><argument_list pos:line="140" pos:column="25">(<argument><expr><name pos:line="140" pos:column="26">AI<pos:position pos:line="140" pos:column="28"/></name></expr></argument>)<pos:position pos:line="140" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="30"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="142" pos:column="9">ChS<pos:position pos:line="142" pos:column="12"/></name><operator pos:line="142" pos:column="12">.<pos:position pos:line="142" pos:column="13"/></operator><name pos:line="142" pos:column="13">InitAddrInfo<pos:position pos:line="142" pos:column="25"/></name></name><argument_list pos:line="142" pos:column="25">(<argument><expr><name pos:line="142" pos:column="26">AI<pos:position pos:line="142" pos:column="28"/></name></expr></argument>)<pos:position pos:line="142" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="30"/></expr_stmt>

        <if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">(<expr><call><name pos:line="144" pos:column="13">getsockname<pos:position pos:line="144" pos:column="24"/></name><argument_list pos:line="144" pos:column="24">(<argument><expr><name pos:line="144" pos:column="25">crfd<pos:position pos:line="144" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="144" pos:column="31">AI<pos:position pos:line="144" pos:column="33"/></name><operator pos:line="144" pos:column="33">-&gt;<pos:position pos:line="144" pos:column="38"/></operator><name pos:line="144" pos:column="35">ai_addr<pos:position pos:line="144" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="144" pos:column="44">&amp;<pos:position pos:line="144" pos:column="49"/></operator><name><name pos:line="144" pos:column="45">AI<pos:position pos:line="144" pos:column="47"/></name><operator pos:line="144" pos:column="47">-&gt;<pos:position pos:line="144" pos:column="52"/></operator><name pos:line="144" pos:column="49">ai_addrlen<pos:position pos:line="144" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="144" pos:column="60"/></argument_list></call> <operator pos:line="144" pos:column="61">&lt;<pos:position pos:line="144" pos:column="65"/></operator> <literal type="number" pos:line="144" pos:column="63">0<pos:position pos:line="144" pos:column="64"/></literal></expr>)<pos:position pos:line="144" pos:column="65"/></condition><then pos:line="144" pos:column="65"> <block pos:line="144" pos:column="66">{
            <expr_stmt><expr><call><name><name pos:line="145" pos:column="13">ChS<pos:position pos:line="145" pos:column="16"/></name><operator pos:line="145" pos:column="16">.<pos:position pos:line="145" pos:column="17"/></operator><name pos:line="145" pos:column="17">FreeAddrInfo<pos:position pos:line="145" pos:column="29"/></name></name><argument_list pos:line="145" pos:column="29">(<argument><expr><name pos:line="145" pos:column="30">AI<pos:position pos:line="145" pos:column="32"/></name></expr></argument>)<pos:position pos:line="145" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="146" pos:column="13">debugs<pos:position pos:line="146" pos:column="19"/></name><argument_list pos:line="146" pos:column="19">(<argument><expr><literal type="number" pos:line="146" pos:column="20">54<pos:position pos:line="146" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="24">DBG_CRITICAL<pos:position pos:line="146" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="38">"ipcCreate: getsockname: "<pos:position pos:line="146" pos:column="64"/></literal> <operator pos:line="146" pos:column="65">&lt;&lt;<pos:position pos:line="146" pos:column="73"/></operator> <call><name pos:line="146" pos:column="68">xstrerror<pos:position pos:line="146" pos:column="77"/></name><argument_list pos:line="146" pos:column="77">()<pos:position pos:line="146" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="146" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="81"/></expr_stmt>
            <return pos:line="147" pos:column="13">return <expr><call><name pos:line="147" pos:column="20">ipcCloseAllFD<pos:position pos:line="147" pos:column="33"/></name><argument_list pos:line="147" pos:column="33">(<argument><expr><name pos:line="147" pos:column="34">prfd<pos:position pos:line="147" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="40">pwfd<pos:position pos:line="147" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="46">crfd<pos:position pos:line="147" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="52">cwfd<pos:position pos:line="147" pos:column="56"/></name></expr></argument>)<pos:position pos:line="147" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="58"/></return>
        }<pos:position pos:line="148" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="150" pos:column="9">ChS<pos:position pos:line="150" pos:column="12"/></name> <operator pos:line="150" pos:column="13">=<pos:position pos:line="150" pos:column="14"/></operator> <operator pos:line="150" pos:column="15">*<pos:position pos:line="150" pos:column="16"/></operator><name pos:line="150" pos:column="16">AI<pos:position pos:line="150" pos:column="18"/></name></expr>;<pos:position pos:line="150" pos:column="19"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="152" pos:column="9">ChS<pos:position pos:line="152" pos:column="12"/></name><operator pos:line="152" pos:column="12">.<pos:position pos:line="152" pos:column="13"/></operator><name pos:line="152" pos:column="13">FreeAddrInfo<pos:position pos:line="152" pos:column="25"/></name></name><argument_list pos:line="152" pos:column="25">(<argument><expr><name pos:line="152" pos:column="26">AI<pos:position pos:line="152" pos:column="28"/></name></expr></argument>)<pos:position pos:line="152" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="30"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="154" pos:column="9">debugs<pos:position pos:line="154" pos:column="15"/></name><argument_list pos:line="154" pos:column="15">(<argument><expr><literal type="number" pos:line="154" pos:column="16">54<pos:position pos:line="154" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="154" pos:column="20">3<pos:position pos:line="154" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="154" pos:column="23">"ipcCreate: FD "<pos:position pos:line="154" pos:column="39"/></literal> <operator pos:line="154" pos:column="40">&lt;&lt;<pos:position pos:line="154" pos:column="48"/></operator> <name pos:line="154" pos:column="43">crfd<pos:position pos:line="154" pos:column="47"/></name> <operator pos:line="154" pos:column="48">&lt;&lt;<pos:position pos:line="154" pos:column="56"/></operator> <literal type="string" pos:line="154" pos:column="51">" sockaddr "<pos:position pos:line="154" pos:column="63"/></literal> <operator pos:line="154" pos:column="64">&lt;&lt;<pos:position pos:line="154" pos:column="72"/></operator> <name pos:line="154" pos:column="67">ChS<pos:position pos:line="154" pos:column="70"/></name></expr></argument> )<pos:position pos:line="154" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="73"/></expr_stmt>

    }<pos:position pos:line="156" pos:column="6"/></block></then></if>

    <if pos:line="158" pos:column="5">if <condition pos:line="158" pos:column="8">(<expr><name pos:line="158" pos:column="9">type<pos:position pos:line="158" pos:column="13"/></name> <operator pos:line="158" pos:column="14">==<pos:position pos:line="158" pos:column="16"/></operator> <name pos:line="158" pos:column="17">IPC_TCP_SOCKET<pos:position pos:line="158" pos:column="31"/></name></expr>)<pos:position pos:line="158" pos:column="32"/></condition><then pos:line="158" pos:column="32"> <block pos:line="158" pos:column="33">{
        <if pos:line="159" pos:column="9">if <condition pos:line="159" pos:column="12">(<expr><call><name pos:line="159" pos:column="13">listen<pos:position pos:line="159" pos:column="19"/></name><argument_list pos:line="159" pos:column="19">(<argument><expr><name pos:line="159" pos:column="20">crfd<pos:position pos:line="159" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="159" pos:column="26">1<pos:position pos:line="159" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="28"/></argument_list></call> <operator pos:line="159" pos:column="29">&lt;<pos:position pos:line="159" pos:column="33"/></operator> <literal type="number" pos:line="159" pos:column="31">0<pos:position pos:line="159" pos:column="32"/></literal></expr>)<pos:position pos:line="159" pos:column="33"/></condition><then pos:line="159" pos:column="33"> <block pos:line="159" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="160" pos:column="13">debugs<pos:position pos:line="160" pos:column="19"/></name><argument_list pos:line="160" pos:column="19">(<argument><expr><literal type="number" pos:line="160" pos:column="20">54<pos:position pos:line="160" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="160" pos:column="24">DBG_IMPORTANT<pos:position pos:line="160" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="160" pos:column="39">"ipcCreate: listen FD "<pos:position pos:line="160" pos:column="62"/></literal> <operator pos:line="160" pos:column="63">&lt;&lt;<pos:position pos:line="160" pos:column="71"/></operator> <name pos:line="160" pos:column="66">crfd<pos:position pos:line="160" pos:column="70"/></name> <operator pos:line="160" pos:column="71">&lt;&lt;<pos:position pos:line="160" pos:column="79"/></operator> <literal type="string" pos:line="160" pos:column="74">": "<pos:position pos:line="160" pos:column="78"/></literal> <operator pos:line="160" pos:column="79">&lt;&lt;<pos:position pos:line="160" pos:column="87"/></operator> <call><name pos:line="160" pos:column="82">xstrerror<pos:position pos:line="160" pos:column="91"/></name><argument_list pos:line="160" pos:column="91">()<pos:position pos:line="160" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="160" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="95"/></expr_stmt>
            <return pos:line="161" pos:column="13">return <expr><call><name pos:line="161" pos:column="20">ipcCloseAllFD<pos:position pos:line="161" pos:column="33"/></name><argument_list pos:line="161" pos:column="33">(<argument><expr><name pos:line="161" pos:column="34">prfd<pos:position pos:line="161" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="40">pwfd<pos:position pos:line="161" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="46">crfd<pos:position pos:line="161" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="52">cwfd<pos:position pos:line="161" pos:column="56"/></name></expr></argument>)<pos:position pos:line="161" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="58"/></return>
        }<pos:position pos:line="162" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="164" pos:column="9">debugs<pos:position pos:line="164" pos:column="15"/></name><argument_list pos:line="164" pos:column="15">(<argument><expr><literal type="number" pos:line="164" pos:column="16">54<pos:position pos:line="164" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="164" pos:column="20">3<pos:position pos:line="164" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="164" pos:column="23">"ipcCreate: FD "<pos:position pos:line="164" pos:column="39"/></literal> <operator pos:line="164" pos:column="40">&lt;&lt;<pos:position pos:line="164" pos:column="48"/></operator> <name pos:line="164" pos:column="43">crfd<pos:position pos:line="164" pos:column="47"/></name> <operator pos:line="164" pos:column="48">&lt;&lt;<pos:position pos:line="164" pos:column="56"/></operator> <literal type="string" pos:line="164" pos:column="51">" listening..."<pos:position pos:line="164" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="165" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="167" pos:column="5">/* flush or else we get dup data if unbuffered_logs is set */</comment>
    <expr_stmt><expr><call><name pos:line="168" pos:column="5">logsFlush<pos:position pos:line="168" pos:column="14"/></name><argument_list pos:line="168" pos:column="14">()<pos:position pos:line="168" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="17"/></expr_stmt>

    <if pos:line="170" pos:column="5">if <condition pos:line="170" pos:column="8">(<expr><operator pos:line="170" pos:column="9">(<pos:position pos:line="170" pos:column="10"/></operator><name pos:line="170" pos:column="10">pid<pos:position pos:line="170" pos:column="13"/></name> <operator pos:line="170" pos:column="14">=<pos:position pos:line="170" pos:column="15"/></operator> <call><name pos:line="170" pos:column="16">fork<pos:position pos:line="170" pos:column="20"/></name><argument_list pos:line="170" pos:column="20">()<pos:position pos:line="170" pos:column="22"/></argument_list></call><operator pos:line="170" pos:column="22">)<pos:position pos:line="170" pos:column="23"/></operator> <operator pos:line="170" pos:column="24">&lt;<pos:position pos:line="170" pos:column="28"/></operator> <literal type="number" pos:line="170" pos:column="26">0<pos:position pos:line="170" pos:column="27"/></literal></expr>)<pos:position pos:line="170" pos:column="28"/></condition><then pos:line="170" pos:column="28"> <block pos:line="170" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="171" pos:column="9">debugs<pos:position pos:line="171" pos:column="15"/></name><argument_list pos:line="171" pos:column="15">(<argument><expr><literal type="number" pos:line="171" pos:column="16">54<pos:position pos:line="171" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="171" pos:column="20">DBG_IMPORTANT<pos:position pos:line="171" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="171" pos:column="35">"ipcCreate: fork: "<pos:position pos:line="171" pos:column="54"/></literal> <operator pos:line="171" pos:column="55">&lt;&lt;<pos:position pos:line="171" pos:column="63"/></operator> <call><name pos:line="171" pos:column="58">xstrerror<pos:position pos:line="171" pos:column="67"/></name><argument_list pos:line="171" pos:column="67">()<pos:position pos:line="171" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="171" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="71"/></expr_stmt>
        <return pos:line="172" pos:column="9">return <expr><call><name pos:line="172" pos:column="16">ipcCloseAllFD<pos:position pos:line="172" pos:column="29"/></name><argument_list pos:line="172" pos:column="29">(<argument><expr><name pos:line="172" pos:column="30">prfd<pos:position pos:line="172" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="36">pwfd<pos:position pos:line="172" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="42">crfd<pos:position pos:line="172" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="48">cwfd<pos:position pos:line="172" pos:column="52"/></name></expr></argument>)<pos:position pos:line="172" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="54"/></return>
    }<pos:position pos:line="173" pos:column="6"/></block></then></if>

    <if pos:line="175" pos:column="5">if <condition pos:line="175" pos:column="8">(<expr><name pos:line="175" pos:column="9">pid<pos:position pos:line="175" pos:column="12"/></name> <operator pos:line="175" pos:column="13">&gt;<pos:position pos:line="175" pos:column="17"/></operator> <literal type="number" pos:line="175" pos:column="15">0<pos:position pos:line="175" pos:column="16"/></literal></expr>)<pos:position pos:line="175" pos:column="17"/></condition><then pos:line="175" pos:column="17"> <block pos:line="175" pos:column="18">{		<comment type="block" pos:line="175" pos:column="33">/* parent */</comment>
        <comment type="block" pos:line="176" pos:column="9">/* close shared socket with child */</comment>
        <expr_stmt><expr><call><name pos:line="177" pos:column="9">comm_close<pos:position pos:line="177" pos:column="19"/></name><argument_list pos:line="177" pos:column="19">(<argument><expr><name pos:line="177" pos:column="20">crfd<pos:position pos:line="177" pos:column="24"/></name></expr></argument>)<pos:position pos:line="177" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="26"/></expr_stmt>

        <if pos:line="179" pos:column="9">if <condition pos:line="179" pos:column="12">(<expr><name pos:line="179" pos:column="13">cwfd<pos:position pos:line="179" pos:column="17"/></name> <operator pos:line="179" pos:column="18">!=<pos:position pos:line="179" pos:column="20"/></operator> <name pos:line="179" pos:column="21">crfd<pos:position pos:line="179" pos:column="25"/></name></expr>)<pos:position pos:line="179" pos:column="26"/></condition><then pos:line="179" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="180" pos:column="13">comm_close<pos:position pos:line="180" pos:column="23"/></name><argument_list pos:line="180" pos:column="23">(<argument><expr><name pos:line="180" pos:column="24">cwfd<pos:position pos:line="180" pos:column="28"/></name></expr></argument>)<pos:position pos:line="180" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="30"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="182" pos:column="9">cwfd<pos:position pos:line="182" pos:column="13"/></name> <operator pos:line="182" pos:column="14">=<pos:position pos:line="182" pos:column="15"/></operator> <name pos:line="182" pos:column="16">crfd<pos:position pos:line="182" pos:column="20"/></name> <operator pos:line="182" pos:column="21">=<pos:position pos:line="182" pos:column="22"/></operator> <operator pos:line="182" pos:column="23">-<pos:position pos:line="182" pos:column="24"/></operator><literal type="number" pos:line="182" pos:column="24">1<pos:position pos:line="182" pos:column="25"/></literal></expr>;<pos:position pos:line="182" pos:column="26"/></expr_stmt>

        <if pos:line="184" pos:column="9">if <condition pos:line="184" pos:column="12">(<expr><name pos:line="184" pos:column="13">type<pos:position pos:line="184" pos:column="17"/></name> <operator pos:line="184" pos:column="18">==<pos:position pos:line="184" pos:column="20"/></operator> <name pos:line="184" pos:column="21">IPC_TCP_SOCKET<pos:position pos:line="184" pos:column="35"/></name> <operator pos:line="184" pos:column="36">||<pos:position pos:line="184" pos:column="38"/></operator> <name pos:line="184" pos:column="39">type<pos:position pos:line="184" pos:column="43"/></name> <operator pos:line="184" pos:column="44">==<pos:position pos:line="184" pos:column="46"/></operator> <name pos:line="184" pos:column="47">IPC_UDP_SOCKET<pos:position pos:line="184" pos:column="61"/></name></expr>)<pos:position pos:line="184" pos:column="62"/></condition><then pos:line="184" pos:column="62"> <block pos:line="184" pos:column="63">{
            <if pos:line="185" pos:column="13">if <condition pos:line="185" pos:column="16">(<expr><call><name pos:line="185" pos:column="17">comm_connect_addr<pos:position pos:line="185" pos:column="34"/></name><argument_list pos:line="185" pos:column="34">(<argument><expr><name pos:line="185" pos:column="35">pwfd<pos:position pos:line="185" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="185" pos:column="41">ChS<pos:position pos:line="185" pos:column="44"/></name></expr></argument>)<pos:position pos:line="185" pos:column="45"/></argument_list></call> <operator pos:line="185" pos:column="46">==<pos:position pos:line="185" pos:column="48"/></operator> <name pos:line="185" pos:column="49">COMM_ERROR<pos:position pos:line="185" pos:column="59"/></name></expr>)<pos:position pos:line="185" pos:column="60"/></condition><then pos:line="185" pos:column="60">
                <block type="pseudo"><return pos:line="186" pos:column="17">return <expr><call><name pos:line="186" pos:column="24">ipcCloseAllFD<pos:position pos:line="186" pos:column="37"/></name><argument_list pos:line="186" pos:column="37">(<argument><expr><name pos:line="186" pos:column="38">prfd<pos:position pos:line="186" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="44">pwfd<pos:position pos:line="186" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="50">crfd<pos:position pos:line="186" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="56">cwfd<pos:position pos:line="186" pos:column="60"/></name></expr></argument>)<pos:position pos:line="186" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="62"/></return></block></then></if>
        }<pos:position pos:line="187" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="189" pos:column="9">memset<pos:position pos:line="189" pos:column="15"/></name><argument_list pos:line="189" pos:column="15">(<argument><expr><name pos:line="189" pos:column="16">hello_buf<pos:position pos:line="189" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="189" pos:column="27">'\0'<pos:position pos:line="189" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="189" pos:column="33">HELLO_BUF_SZ<pos:position pos:line="189" pos:column="45"/></name></expr></argument>)<pos:position pos:line="189" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="47"/></expr_stmt>

        <if pos:line="191" pos:column="9">if <condition pos:line="191" pos:column="12">(<expr><name pos:line="191" pos:column="13">type<pos:position pos:line="191" pos:column="17"/></name> <operator pos:line="191" pos:column="18">==<pos:position pos:line="191" pos:column="20"/></operator> <name pos:line="191" pos:column="21">IPC_UDP_SOCKET<pos:position pos:line="191" pos:column="35"/></name></expr>)<pos:position pos:line="191" pos:column="36"/></condition><then pos:line="191" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name pos:line="192" pos:column="13">x<pos:position pos:line="192" pos:column="14"/></name> <operator pos:line="192" pos:column="15">=<pos:position pos:line="192" pos:column="16"/></operator> <call><name pos:line="192" pos:column="17">comm_udp_recv<pos:position pos:line="192" pos:column="30"/></name><argument_list pos:line="192" pos:column="30">(<argument><expr><name pos:line="192" pos:column="31">prfd<pos:position pos:line="192" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="37">hello_buf<pos:position pos:line="192" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="48">HELLO_BUF_SZ<pos:position pos:line="192" pos:column="60"/></name> <operator pos:line="192" pos:column="61">-<pos:position pos:line="192" pos:column="62"/></operator> <literal type="number" pos:line="192" pos:column="63">1<pos:position pos:line="192" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="192" pos:column="66">0<pos:position pos:line="192" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="192" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="69"/></expr_stmt></block></then>
        <else pos:line="193" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="194" pos:column="13">x<pos:position pos:line="194" pos:column="14"/></name> <operator pos:line="194" pos:column="15">=<pos:position pos:line="194" pos:column="16"/></operator> <call><name pos:line="194" pos:column="17">read<pos:position pos:line="194" pos:column="21"/></name><argument_list pos:line="194" pos:column="21">(<argument><expr><name pos:line="194" pos:column="22">prfd<pos:position pos:line="194" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="28">hello_buf<pos:position pos:line="194" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="39">HELLO_BUF_SZ<pos:position pos:line="194" pos:column="51"/></name> <operator pos:line="194" pos:column="52">-<pos:position pos:line="194" pos:column="53"/></operator> <literal type="number" pos:line="194" pos:column="54">1<pos:position pos:line="194" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="194" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="57"/></expr_stmt></block></else></if>

        <if pos:line="196" pos:column="9">if <condition pos:line="196" pos:column="12">(<expr><name pos:line="196" pos:column="13">x<pos:position pos:line="196" pos:column="14"/></name> <operator pos:line="196" pos:column="15">&lt;<pos:position pos:line="196" pos:column="19"/></operator> <literal type="number" pos:line="196" pos:column="17">0<pos:position pos:line="196" pos:column="18"/></literal></expr>)<pos:position pos:line="196" pos:column="19"/></condition><then pos:line="196" pos:column="19"> <block pos:line="196" pos:column="20">{
            <expr_stmt><expr><call><name pos:line="197" pos:column="13">debugs<pos:position pos:line="197" pos:column="19"/></name><argument_list pos:line="197" pos:column="19">(<argument><expr><literal type="number" pos:line="197" pos:column="20">54<pos:position pos:line="197" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="197" pos:column="24">DBG_CRITICAL<pos:position pos:line="197" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="197" pos:column="38">"ipcCreate: PARENT: hello read test failed"<pos:position pos:line="197" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="197" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="83"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="198" pos:column="13">debugs<pos:position pos:line="198" pos:column="19"/></name><argument_list pos:line="198" pos:column="19">(<argument><expr><literal type="number" pos:line="198" pos:column="20">54<pos:position pos:line="198" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="198" pos:column="24">DBG_CRITICAL<pos:position pos:line="198" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="198" pos:column="38">"--&gt; read: "<pos:position pos:line="198" pos:column="53"/></literal> <operator pos:line="198" pos:column="51">&lt;&lt;<pos:position pos:line="198" pos:column="59"/></operator> <call><name pos:line="198" pos:column="54">xstrerror<pos:position pos:line="198" pos:column="63"/></name><argument_list pos:line="198" pos:column="63">()<pos:position pos:line="198" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="198" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="67"/></expr_stmt>
            <return pos:line="199" pos:column="13">return <expr><call><name pos:line="199" pos:column="20">ipcCloseAllFD<pos:position pos:line="199" pos:column="33"/></name><argument_list pos:line="199" pos:column="33">(<argument><expr><name pos:line="199" pos:column="34">prfd<pos:position pos:line="199" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="40">pwfd<pos:position pos:line="199" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="46">crfd<pos:position pos:line="199" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="52">cwfd<pos:position pos:line="199" pos:column="56"/></name></expr></argument>)<pos:position pos:line="199" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="58"/></return>
        }<pos:position pos:line="200" pos:column="10"/></block></then> <elseif pos:line="200" pos:column="11">else <if pos:line="200" pos:column="16">if <condition pos:line="200" pos:column="19">(<expr><call><name pos:line="200" pos:column="20">strcmp<pos:position pos:line="200" pos:column="26"/></name><argument_list pos:line="200" pos:column="26">(<argument><expr><name pos:line="200" pos:column="27">hello_buf<pos:position pos:line="200" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="200" pos:column="38">hello_string<pos:position pos:line="200" pos:column="50"/></name></expr></argument>)<pos:position pos:line="200" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="200" pos:column="52"/></condition><then pos:line="200" pos:column="52"> <block pos:line="200" pos:column="53">{
            <expr_stmt><expr><call><name pos:line="201" pos:column="13">debugs<pos:position pos:line="201" pos:column="19"/></name><argument_list pos:line="201" pos:column="19">(<argument><expr><literal type="number" pos:line="201" pos:column="20">54<pos:position pos:line="201" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="24">DBG_CRITICAL<pos:position pos:line="201" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="201" pos:column="38">"ipcCreate: PARENT: hello read test failed"<pos:position pos:line="201" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="201" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="83"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="202" pos:column="13">debugs<pos:position pos:line="202" pos:column="19"/></name><argument_list pos:line="202" pos:column="19">(<argument><expr><literal type="number" pos:line="202" pos:column="20">54<pos:position pos:line="202" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="202" pos:column="24">DBG_CRITICAL<pos:position pos:line="202" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="202" pos:column="38">"--&gt; read returned "<pos:position pos:line="202" pos:column="61"/></literal> <operator pos:line="202" pos:column="59">&lt;&lt;<pos:position pos:line="202" pos:column="67"/></operator> <name pos:line="202" pos:column="62">x<pos:position pos:line="202" pos:column="63"/></name></expr></argument>)<pos:position pos:line="202" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="203" pos:column="13">debugs<pos:position pos:line="203" pos:column="19"/></name><argument_list pos:line="203" pos:column="19">(<argument><expr><literal type="number" pos:line="203" pos:column="20">54<pos:position pos:line="203" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="203" pos:column="24">DBG_CRITICAL<pos:position pos:line="203" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="203" pos:column="38">"--&gt; got '"<pos:position pos:line="203" pos:column="52"/></literal> <operator pos:line="203" pos:column="50">&lt;&lt;<pos:position pos:line="203" pos:column="58"/></operator> <call><name pos:line="203" pos:column="53">rfc1738_escape<pos:position pos:line="203" pos:column="67"/></name><argument_list pos:line="203" pos:column="67">(<argument><expr><name pos:line="203" pos:column="68">hello_buf<pos:position pos:line="203" pos:column="77"/></name></expr></argument>)<pos:position pos:line="203" pos:column="78"/></argument_list></call> <operator pos:line="203" pos:column="79">&lt;&lt;<pos:position pos:line="203" pos:column="87"/></operator> <literal type="string" pos:line="203" pos:column="82">"'"<pos:position pos:line="203" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="87"/></expr_stmt>
            <return pos:line="204" pos:column="13">return <expr><call><name pos:line="204" pos:column="20">ipcCloseAllFD<pos:position pos:line="204" pos:column="33"/></name><argument_list pos:line="204" pos:column="33">(<argument><expr><name pos:line="204" pos:column="34">prfd<pos:position pos:line="204" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="204" pos:column="40">pwfd<pos:position pos:line="204" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="204" pos:column="46">crfd<pos:position pos:line="204" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="204" pos:column="52">cwfd<pos:position pos:line="204" pos:column="56"/></name></expr></argument>)<pos:position pos:line="204" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="58"/></return>
        }<pos:position pos:line="205" pos:column="10"/></block></then></if></elseif></if>

        <expr_stmt><expr><call><name pos:line="207" pos:column="9">commUnsetFdTimeout<pos:position pos:line="207" pos:column="27"/></name><argument_list pos:line="207" pos:column="27">(<argument><expr><name pos:line="207" pos:column="28">prfd<pos:position pos:line="207" pos:column="32"/></name></expr></argument>)<pos:position pos:line="207" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="208" pos:column="9">commSetNonBlocking<pos:position pos:line="208" pos:column="27"/></name><argument_list pos:line="208" pos:column="27">(<argument><expr><name pos:line="208" pos:column="28">prfd<pos:position pos:line="208" pos:column="32"/></name></expr></argument>)<pos:position pos:line="208" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="209" pos:column="9">commSetNonBlocking<pos:position pos:line="209" pos:column="27"/></name><argument_list pos:line="209" pos:column="27">(<argument><expr><name pos:line="209" pos:column="28">pwfd<pos:position pos:line="209" pos:column="32"/></name></expr></argument>)<pos:position pos:line="209" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="34"/></expr_stmt>

        <if pos:line="211" pos:column="9">if <condition pos:line="211" pos:column="12">(<expr><name pos:line="211" pos:column="13">rfd<pos:position pos:line="211" pos:column="16"/></name></expr>)<pos:position pos:line="211" pos:column="17"/></condition><then pos:line="211" pos:column="17">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="212" pos:column="13">*<pos:position pos:line="212" pos:column="14"/></operator><name pos:line="212" pos:column="14">rfd<pos:position pos:line="212" pos:column="17"/></name> <operator pos:line="212" pos:column="18">=<pos:position pos:line="212" pos:column="19"/></operator> <name pos:line="212" pos:column="20">prfd<pos:position pos:line="212" pos:column="24"/></name></expr>;<pos:position pos:line="212" pos:column="25"/></expr_stmt></block></then></if>

        <if pos:line="214" pos:column="9">if <condition pos:line="214" pos:column="12">(<expr><name pos:line="214" pos:column="13">wfd<pos:position pos:line="214" pos:column="16"/></name></expr>)<pos:position pos:line="214" pos:column="17"/></condition><then pos:line="214" pos:column="17">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="215" pos:column="13">*<pos:position pos:line="215" pos:column="14"/></operator><name pos:line="215" pos:column="14">wfd<pos:position pos:line="215" pos:column="17"/></name> <operator pos:line="215" pos:column="18">=<pos:position pos:line="215" pos:column="19"/></operator> <name pos:line="215" pos:column="20">pwfd<pos:position pos:line="215" pos:column="24"/></name></expr>;<pos:position pos:line="215" pos:column="25"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name><name pos:line="217" pos:column="9">fd_table<pos:position pos:line="217" pos:column="17"/></name><index pos:line="217" pos:column="17">[<expr><name pos:line="217" pos:column="18">prfd<pos:position pos:line="217" pos:column="22"/></name></expr>]<pos:position pos:line="217" pos:column="23"/></index></name><operator pos:line="217" pos:column="23">.<pos:position pos:line="217" pos:column="24"/></operator><name><name pos:line="217" pos:column="24">flags<pos:position pos:line="217" pos:column="29"/></name><operator pos:line="217" pos:column="29">.<pos:position pos:line="217" pos:column="30"/></operator><name pos:line="217" pos:column="30">ipc<pos:position pos:line="217" pos:column="33"/></name></name> <operator pos:line="217" pos:column="34">=<pos:position pos:line="217" pos:column="35"/></operator> <literal type="number" pos:line="217" pos:column="36">1<pos:position pos:line="217" pos:column="37"/></literal></expr>;<pos:position pos:line="217" pos:column="38"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="219" pos:column="9">fd_table<pos:position pos:line="219" pos:column="17"/></name><index pos:line="219" pos:column="17">[<expr><name pos:line="219" pos:column="18">pwfd<pos:position pos:line="219" pos:column="22"/></name></expr>]<pos:position pos:line="219" pos:column="23"/></index></name><operator pos:line="219" pos:column="23">.<pos:position pos:line="219" pos:column="24"/></operator><name><name pos:line="219" pos:column="24">flags<pos:position pos:line="219" pos:column="29"/></name><operator pos:line="219" pos:column="29">.<pos:position pos:line="219" pos:column="30"/></operator><name pos:line="219" pos:column="30">ipc<pos:position pos:line="219" pos:column="33"/></name></name> <operator pos:line="219" pos:column="34">=<pos:position pos:line="219" pos:column="35"/></operator> <literal type="number" pos:line="219" pos:column="36">1<pos:position pos:line="219" pos:column="37"/></literal></expr>;<pos:position pos:line="219" pos:column="38"/></expr_stmt>

        <if pos:line="221" pos:column="9">if <condition pos:line="221" pos:column="12">(<expr><name><name pos:line="221" pos:column="13">Config<pos:position pos:line="221" pos:column="19"/></name><operator pos:line="221" pos:column="19">.<pos:position pos:line="221" pos:column="20"/></operator><name pos:line="221" pos:column="20">sleep_after_fork<pos:position pos:line="221" pos:column="36"/></name></name></expr>)<pos:position pos:line="221" pos:column="37"/></condition><then pos:line="221" pos:column="37"> <block pos:line="221" pos:column="38">{
            <comment type="block" pos:line="222" pos:column="13">/* XXX emulation of usleep() */</comment>

            <decl_stmt><decl><type><name><name pos:line="224" pos:column="13">struct<pos:position pos:line="224" pos:column="19"/></name> <name pos:line="224" pos:column="20">timeval<pos:position pos:line="224" pos:column="27"/></name></name></type> <name pos:line="224" pos:column="28">sl<pos:position pos:line="224" pos:column="30"/></name></decl>;<pos:position pos:line="224" pos:column="31"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="225" pos:column="13">sl<pos:position pos:line="225" pos:column="15"/></name><operator pos:line="225" pos:column="15">.<pos:position pos:line="225" pos:column="16"/></operator><name pos:line="225" pos:column="16">tv_sec<pos:position pos:line="225" pos:column="22"/></name></name> <operator pos:line="225" pos:column="23">=<pos:position pos:line="225" pos:column="24"/></operator> <name><name pos:line="225" pos:column="25">Config<pos:position pos:line="225" pos:column="31"/></name><operator pos:line="225" pos:column="31">.<pos:position pos:line="225" pos:column="32"/></operator><name pos:line="225" pos:column="32">sleep_after_fork<pos:position pos:line="225" pos:column="48"/></name></name> <operator pos:line="225" pos:column="49">/<pos:position pos:line="225" pos:column="50"/></operator> <literal type="number" pos:line="225" pos:column="51">1000000<pos:position pos:line="225" pos:column="58"/></literal></expr>;<pos:position pos:line="225" pos:column="59"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="226" pos:column="13">sl<pos:position pos:line="226" pos:column="15"/></name><operator pos:line="226" pos:column="15">.<pos:position pos:line="226" pos:column="16"/></operator><name pos:line="226" pos:column="16">tv_usec<pos:position pos:line="226" pos:column="23"/></name></name> <operator pos:line="226" pos:column="24">=<pos:position pos:line="226" pos:column="25"/></operator> <name><name pos:line="226" pos:column="26">Config<pos:position pos:line="226" pos:column="32"/></name><operator pos:line="226" pos:column="32">.<pos:position pos:line="226" pos:column="33"/></operator><name pos:line="226" pos:column="33">sleep_after_fork<pos:position pos:line="226" pos:column="49"/></name></name> <operator pos:line="226" pos:column="50">%<pos:position pos:line="226" pos:column="51"/></operator> <literal type="number" pos:line="226" pos:column="52">1000000<pos:position pos:line="226" pos:column="59"/></literal></expr>;<pos:position pos:line="226" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="227" pos:column="13">select<pos:position pos:line="227" pos:column="19"/></name><argument_list pos:line="227" pos:column="19">(<argument><expr><literal type="number" pos:line="227" pos:column="20">0<pos:position pos:line="227" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="227" pos:column="23">NULL<pos:position pos:line="227" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="227" pos:column="29">NULL<pos:position pos:line="227" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="227" pos:column="35">NULL<pos:position pos:line="227" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="227" pos:column="41">&amp;<pos:position pos:line="227" pos:column="46"/></operator><name pos:line="227" pos:column="42">sl<pos:position pos:line="227" pos:column="44"/></name></expr></argument>)<pos:position pos:line="227" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="227" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="228" pos:column="10"/></block></then></if>

        <return pos:line="230" pos:column="9">return <expr><name pos:line="230" pos:column="16">pid<pos:position pos:line="230" pos:column="19"/></name></expr>;<pos:position pos:line="230" pos:column="20"/></return>
    }<pos:position pos:line="231" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="233" pos:column="5">/* child */</comment>
    <expr_stmt><expr><call><name pos:line="234" pos:column="5">no_suid<pos:position pos:line="234" pos:column="12"/></name><argument_list pos:line="234" pos:column="12">()<pos:position pos:line="234" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="15"/></expr_stmt>			<comment type="block" pos:line="234" pos:column="33">/* give up extra priviliges */</comment>

    <comment type="block" pos:line="236" pos:column="5">/* close shared socket with parent */</comment>
    <expr_stmt><expr><call><name pos:line="237" pos:column="5">close<pos:position pos:line="237" pos:column="10"/></name><argument_list pos:line="237" pos:column="10">(<argument><expr><name pos:line="237" pos:column="11">prfd<pos:position pos:line="237" pos:column="15"/></name></expr></argument>)<pos:position pos:line="237" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="17"/></expr_stmt>

    <if pos:line="239" pos:column="5">if <condition pos:line="239" pos:column="8">(<expr><name pos:line="239" pos:column="9">pwfd<pos:position pos:line="239" pos:column="13"/></name> <operator pos:line="239" pos:column="14">!=<pos:position pos:line="239" pos:column="16"/></operator> <name pos:line="239" pos:column="17">prfd<pos:position pos:line="239" pos:column="21"/></name></expr>)<pos:position pos:line="239" pos:column="22"/></condition><then pos:line="239" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="240" pos:column="9">close<pos:position pos:line="240" pos:column="14"/></name><argument_list pos:line="240" pos:column="14">(<argument><expr><name pos:line="240" pos:column="15">pwfd<pos:position pos:line="240" pos:column="19"/></name></expr></argument>)<pos:position pos:line="240" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="21"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="242" pos:column="5">pwfd<pos:position pos:line="242" pos:column="9"/></name> <operator pos:line="242" pos:column="10">=<pos:position pos:line="242" pos:column="11"/></operator> <name pos:line="242" pos:column="12">prfd<pos:position pos:line="242" pos:column="16"/></name> <operator pos:line="242" pos:column="17">=<pos:position pos:line="242" pos:column="18"/></operator> <operator pos:line="242" pos:column="19">-<pos:position pos:line="242" pos:column="20"/></operator><literal type="number" pos:line="242" pos:column="20">1<pos:position pos:line="242" pos:column="21"/></literal></expr>;<pos:position pos:line="242" pos:column="22"/></expr_stmt>

    <if pos:line="244" pos:column="5">if <condition pos:line="244" pos:column="8">(<expr><name pos:line="244" pos:column="9">type<pos:position pos:line="244" pos:column="13"/></name> <operator pos:line="244" pos:column="14">==<pos:position pos:line="244" pos:column="16"/></operator> <name pos:line="244" pos:column="17">IPC_TCP_SOCKET<pos:position pos:line="244" pos:column="31"/></name></expr>)<pos:position pos:line="244" pos:column="32"/></condition><then pos:line="244" pos:column="32"> <block pos:line="244" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="245" pos:column="9">debugs<pos:position pos:line="245" pos:column="15"/></name><argument_list pos:line="245" pos:column="15">(<argument><expr><literal type="number" pos:line="245" pos:column="16">54<pos:position pos:line="245" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="245" pos:column="20">3<pos:position pos:line="245" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="245" pos:column="23">"ipcCreate: calling accept on FD "<pos:position pos:line="245" pos:column="57"/></literal> <operator pos:line="245" pos:column="58">&lt;&lt;<pos:position pos:line="245" pos:column="66"/></operator> <name pos:line="245" pos:column="61">crfd<pos:position pos:line="245" pos:column="65"/></name></expr></argument>)<pos:position pos:line="245" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="245" pos:column="67"/></expr_stmt>

        <if pos:line="247" pos:column="9">if <condition pos:line="247" pos:column="12">(<expr><operator pos:line="247" pos:column="13">(<pos:position pos:line="247" pos:column="14"/></operator><name pos:line="247" pos:column="14">fd<pos:position pos:line="247" pos:column="16"/></name> <operator pos:line="247" pos:column="17">=<pos:position pos:line="247" pos:column="18"/></operator> <call><name pos:line="247" pos:column="19">accept<pos:position pos:line="247" pos:column="25"/></name><argument_list pos:line="247" pos:column="25">(<argument><expr><name pos:line="247" pos:column="26">crfd<pos:position pos:line="247" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="247" pos:column="32">NULL<pos:position pos:line="247" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="247" pos:column="38">NULL<pos:position pos:line="247" pos:column="42"/></name></expr></argument>)<pos:position pos:line="247" pos:column="43"/></argument_list></call><operator pos:line="247" pos:column="43">)<pos:position pos:line="247" pos:column="44"/></operator> <operator pos:line="247" pos:column="45">&lt;<pos:position pos:line="247" pos:column="49"/></operator> <literal type="number" pos:line="247" pos:column="47">0<pos:position pos:line="247" pos:column="48"/></literal></expr>)<pos:position pos:line="247" pos:column="49"/></condition><then pos:line="247" pos:column="49"> <block pos:line="247" pos:column="50">{
            <expr_stmt><expr><call><name pos:line="248" pos:column="13">debugs<pos:position pos:line="248" pos:column="19"/></name><argument_list pos:line="248" pos:column="19">(<argument><expr><literal type="number" pos:line="248" pos:column="20">54<pos:position pos:line="248" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="248" pos:column="24">DBG_CRITICAL<pos:position pos:line="248" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="248" pos:column="38">"ipcCreate: FD "<pos:position pos:line="248" pos:column="54"/></literal> <operator pos:line="248" pos:column="55">&lt;&lt;<pos:position pos:line="248" pos:column="63"/></operator> <name pos:line="248" pos:column="58">crfd<pos:position pos:line="248" pos:column="62"/></name> <operator pos:line="248" pos:column="63">&lt;&lt;<pos:position pos:line="248" pos:column="71"/></operator> <literal type="string" pos:line="248" pos:column="66">" accept: "<pos:position pos:line="248" pos:column="77"/></literal> <operator pos:line="248" pos:column="78">&lt;&lt;<pos:position pos:line="248" pos:column="86"/></operator> <call><name pos:line="248" pos:column="81">xstrerror<pos:position pos:line="248" pos:column="90"/></name><argument_list pos:line="248" pos:column="90">()<pos:position pos:line="248" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="248" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="94"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="249" pos:column="13">_exit<pos:position pos:line="249" pos:column="18"/></name><argument_list pos:line="249" pos:column="18">(<argument><expr><literal type="number" pos:line="249" pos:column="19">1<pos:position pos:line="249" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="249" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="250" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="252" pos:column="9">debugs<pos:position pos:line="252" pos:column="15"/></name><argument_list pos:line="252" pos:column="15">(<argument><expr><literal type="number" pos:line="252" pos:column="16">54<pos:position pos:line="252" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="252" pos:column="20">3<pos:position pos:line="252" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="252" pos:column="23">"ipcCreate: CHILD accepted new FD "<pos:position pos:line="252" pos:column="58"/></literal> <operator pos:line="252" pos:column="59">&lt;&lt;<pos:position pos:line="252" pos:column="67"/></operator> <name pos:line="252" pos:column="62">fd<pos:position pos:line="252" pos:column="64"/></name></expr></argument>)<pos:position pos:line="252" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="253" pos:column="9">close<pos:position pos:line="253" pos:column="14"/></name><argument_list pos:line="253" pos:column="14">(<argument><expr><name pos:line="253" pos:column="15">crfd<pos:position pos:line="253" pos:column="19"/></name></expr></argument>)<pos:position pos:line="253" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="254" pos:column="9">cwfd<pos:position pos:line="254" pos:column="13"/></name> <operator pos:line="254" pos:column="14">=<pos:position pos:line="254" pos:column="15"/></operator> <name pos:line="254" pos:column="16">crfd<pos:position pos:line="254" pos:column="20"/></name> <operator pos:line="254" pos:column="21">=<pos:position pos:line="254" pos:column="22"/></operator> <name pos:line="254" pos:column="23">fd<pos:position pos:line="254" pos:column="25"/></name></expr>;<pos:position pos:line="254" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="255" pos:column="6"/></block></then> <elseif pos:line="255" pos:column="7">else <if pos:line="255" pos:column="12">if <condition pos:line="255" pos:column="15">(<expr><name pos:line="255" pos:column="16">type<pos:position pos:line="255" pos:column="20"/></name> <operator pos:line="255" pos:column="21">==<pos:position pos:line="255" pos:column="23"/></operator> <name pos:line="255" pos:column="24">IPC_UDP_SOCKET<pos:position pos:line="255" pos:column="38"/></name></expr>)<pos:position pos:line="255" pos:column="39"/></condition><then pos:line="255" pos:column="39"> <block pos:line="255" pos:column="40">{
        <if pos:line="256" pos:column="9">if <condition pos:line="256" pos:column="12">(<expr><call><name pos:line="256" pos:column="13">comm_connect_addr<pos:position pos:line="256" pos:column="30"/></name><argument_list pos:line="256" pos:column="30">(<argument><expr><name pos:line="256" pos:column="31">crfd<pos:position pos:line="256" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="256" pos:column="37">PaS<pos:position pos:line="256" pos:column="40"/></name></expr></argument>)<pos:position pos:line="256" pos:column="41"/></argument_list></call> <operator pos:line="256" pos:column="42">==<pos:position pos:line="256" pos:column="44"/></operator> <name pos:line="256" pos:column="45">COMM_ERROR<pos:position pos:line="256" pos:column="55"/></name></expr>)<pos:position pos:line="256" pos:column="56"/></condition><then pos:line="256" pos:column="56">
            <block type="pseudo"><return pos:line="257" pos:column="13">return <expr><call><name pos:line="257" pos:column="20">ipcCloseAllFD<pos:position pos:line="257" pos:column="33"/></name><argument_list pos:line="257" pos:column="33">(<argument><expr><name pos:line="257" pos:column="34">prfd<pos:position pos:line="257" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="257" pos:column="40">pwfd<pos:position pos:line="257" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="257" pos:column="46">crfd<pos:position pos:line="257" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="257" pos:column="52">cwfd<pos:position pos:line="257" pos:column="56"/></name></expr></argument>)<pos:position pos:line="257" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="58"/></return></block></then></if>
    }<pos:position pos:line="258" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="260" pos:column="5">if <condition pos:line="260" pos:column="8">(<expr><name pos:line="260" pos:column="9">type<pos:position pos:line="260" pos:column="13"/></name> <operator pos:line="260" pos:column="14">==<pos:position pos:line="260" pos:column="16"/></operator> <name pos:line="260" pos:column="17">IPC_UDP_SOCKET<pos:position pos:line="260" pos:column="31"/></name></expr>)<pos:position pos:line="260" pos:column="32"/></condition><then pos:line="260" pos:column="32"> <block pos:line="260" pos:column="33">{
        <expr_stmt><expr><name pos:line="261" pos:column="9">x<pos:position pos:line="261" pos:column="10"/></name> <operator pos:line="261" pos:column="11">=<pos:position pos:line="261" pos:column="12"/></operator> <call><name pos:line="261" pos:column="13">comm_udp_send<pos:position pos:line="261" pos:column="26"/></name><argument_list pos:line="261" pos:column="26">(<argument><expr><name pos:line="261" pos:column="27">cwfd<pos:position pos:line="261" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="261" pos:column="33">hello_string<pos:position pos:line="261" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="261" pos:column="47">strlen<pos:position pos:line="261" pos:column="53"/></name><argument_list pos:line="261" pos:column="53">(<argument><expr><name pos:line="261" pos:column="54">hello_string<pos:position pos:line="261" pos:column="66"/></name></expr></argument>)<pos:position pos:line="261" pos:column="67"/></argument_list></call> <operator pos:line="261" pos:column="68">+<pos:position pos:line="261" pos:column="69"/></operator> <literal type="number" pos:line="261" pos:column="70">1<pos:position pos:line="261" pos:column="71"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="261" pos:column="73">0<pos:position pos:line="261" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="261" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="261" pos:column="76"/></expr_stmt>

        <if pos:line="263" pos:column="9">if <condition pos:line="263" pos:column="12">(<expr><name pos:line="263" pos:column="13">x<pos:position pos:line="263" pos:column="14"/></name> <operator pos:line="263" pos:column="15">&lt;<pos:position pos:line="263" pos:column="19"/></operator> <literal type="number" pos:line="263" pos:column="17">0<pos:position pos:line="263" pos:column="18"/></literal></expr>)<pos:position pos:line="263" pos:column="19"/></condition><then pos:line="263" pos:column="19"> <block pos:line="263" pos:column="20">{
            <expr_stmt><expr><call><name pos:line="264" pos:column="13">debugs<pos:position pos:line="264" pos:column="19"/></name><argument_list pos:line="264" pos:column="19">(<argument><expr><literal type="number" pos:line="264" pos:column="20">54<pos:position pos:line="264" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="264" pos:column="24">DBG_CRITICAL<pos:position pos:line="264" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="264" pos:column="38">"sendto FD "<pos:position pos:line="264" pos:column="50"/></literal> <operator pos:line="264" pos:column="51">&lt;&lt;<pos:position pos:line="264" pos:column="59"/></operator> <name pos:line="264" pos:column="54">cwfd<pos:position pos:line="264" pos:column="58"/></name> <operator pos:line="264" pos:column="59">&lt;&lt;<pos:position pos:line="264" pos:column="67"/></operator> <literal type="string" pos:line="264" pos:column="62">": "<pos:position pos:line="264" pos:column="66"/></literal> <operator pos:line="264" pos:column="67">&lt;&lt;<pos:position pos:line="264" pos:column="75"/></operator> <call><name pos:line="264" pos:column="70">xstrerror<pos:position pos:line="264" pos:column="79"/></name><argument_list pos:line="264" pos:column="79">()<pos:position pos:line="264" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="264" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="264" pos:column="83"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="265" pos:column="13">debugs<pos:position pos:line="265" pos:column="19"/></name><argument_list pos:line="265" pos:column="19">(<argument><expr><literal type="number" pos:line="265" pos:column="20">54<pos:position pos:line="265" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="265" pos:column="24">DBG_CRITICAL<pos:position pos:line="265" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="265" pos:column="38">"ipcCreate: CHILD: hello write test failed"<pos:position pos:line="265" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="265" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="265" pos:column="83"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="266" pos:column="13">_exit<pos:position pos:line="266" pos:column="18"/></name><argument_list pos:line="266" pos:column="18">(<argument><expr><literal type="number" pos:line="266" pos:column="19">1<pos:position pos:line="266" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="266" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="266" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="267" pos:column="10"/></block></then></if>
    }<pos:position pos:line="268" pos:column="6"/></block></then> <else pos:line="268" pos:column="7">else <block pos:line="268" pos:column="12">{
        <if pos:line="269" pos:column="9">if <condition pos:line="269" pos:column="12">(<expr><call><name pos:line="269" pos:column="13">write<pos:position pos:line="269" pos:column="18"/></name><argument_list pos:line="269" pos:column="18">(<argument><expr><name pos:line="269" pos:column="19">cwfd<pos:position pos:line="269" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="269" pos:column="25">hello_string<pos:position pos:line="269" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="269" pos:column="39">strlen<pos:position pos:line="269" pos:column="45"/></name><argument_list pos:line="269" pos:column="45">(<argument><expr><name pos:line="269" pos:column="46">hello_string<pos:position pos:line="269" pos:column="58"/></name></expr></argument>)<pos:position pos:line="269" pos:column="59"/></argument_list></call> <operator pos:line="269" pos:column="60">+<pos:position pos:line="269" pos:column="61"/></operator> <literal type="number" pos:line="269" pos:column="62">1<pos:position pos:line="269" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="269" pos:column="64"/></argument_list></call> <operator pos:line="269" pos:column="65">&lt;<pos:position pos:line="269" pos:column="69"/></operator> <literal type="number" pos:line="269" pos:column="67">0<pos:position pos:line="269" pos:column="68"/></literal></expr>)<pos:position pos:line="269" pos:column="69"/></condition><then pos:line="269" pos:column="69"> <block pos:line="269" pos:column="70">{
            <expr_stmt><expr><call><name pos:line="270" pos:column="13">debugs<pos:position pos:line="270" pos:column="19"/></name><argument_list pos:line="270" pos:column="19">(<argument><expr><literal type="number" pos:line="270" pos:column="20">54<pos:position pos:line="270" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="270" pos:column="24">DBG_CRITICAL<pos:position pos:line="270" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="270" pos:column="38">"write FD "<pos:position pos:line="270" pos:column="49"/></literal> <operator pos:line="270" pos:column="50">&lt;&lt;<pos:position pos:line="270" pos:column="58"/></operator> <name pos:line="270" pos:column="53">cwfd<pos:position pos:line="270" pos:column="57"/></name> <operator pos:line="270" pos:column="58">&lt;&lt;<pos:position pos:line="270" pos:column="66"/></operator> <literal type="string" pos:line="270" pos:column="61">": "<pos:position pos:line="270" pos:column="65"/></literal> <operator pos:line="270" pos:column="66">&lt;&lt;<pos:position pos:line="270" pos:column="74"/></operator> <call><name pos:line="270" pos:column="69">xstrerror<pos:position pos:line="270" pos:column="78"/></name><argument_list pos:line="270" pos:column="78">()<pos:position pos:line="270" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="270" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="270" pos:column="82"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="271" pos:column="13">debugs<pos:position pos:line="271" pos:column="19"/></name><argument_list pos:line="271" pos:column="19">(<argument><expr><literal type="number" pos:line="271" pos:column="20">54<pos:position pos:line="271" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="271" pos:column="24">DBG_CRITICAL<pos:position pos:line="271" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="271" pos:column="38">"ipcCreate: CHILD: hello write test failed"<pos:position pos:line="271" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="271" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="83"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="272" pos:column="13">_exit<pos:position pos:line="272" pos:column="18"/></name><argument_list pos:line="272" pos:column="18">(<argument><expr><literal type="number" pos:line="272" pos:column="19">1<pos:position pos:line="272" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="272" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="273" pos:column="10"/></block></then></if>
    }<pos:position pos:line="274" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="276" pos:column="5">PutEnvironment<pos:position pos:line="276" pos:column="19"/></name><argument_list pos:line="276" pos:column="19">()<pos:position pos:line="276" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="22"/></expr_stmt>
    <comment type="block" pos:line="277" pos:column="5">/*
     * This double-dup stuff avoids problems when one of
     *  crfd, cwfd, or debug_log are in the rage 0-2.
     */</comment>

    <do pos:line="282" pos:column="5">do <block pos:line="282" pos:column="8">{
        <comment type="block" pos:line="283" pos:column="9">/* First make sure 0-2 is occupied by something. Gets cleaned up later */</comment>
        <expr_stmt><expr><name pos:line="284" pos:column="9">x<pos:position pos:line="284" pos:column="10"/></name> <operator pos:line="284" pos:column="11">=<pos:position pos:line="284" pos:column="12"/></operator> <call><name pos:line="284" pos:column="13">dup<pos:position pos:line="284" pos:column="16"/></name><argument_list pos:line="284" pos:column="16">(<argument><expr><name pos:line="284" pos:column="17">crfd<pos:position pos:line="284" pos:column="21"/></name></expr></argument>)<pos:position pos:line="284" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="285" pos:column="9">assert<pos:position pos:line="285" pos:column="15"/></name><argument_list pos:line="285" pos:column="15">(<argument><expr><name pos:line="285" pos:column="16">x<pos:position pos:line="285" pos:column="17"/></name> <operator pos:line="285" pos:column="18">&gt;<pos:position pos:line="285" pos:column="22"/></operator> <operator pos:line="285" pos:column="20">-<pos:position pos:line="285" pos:column="21"/></operator><literal type="number" pos:line="285" pos:column="21">1<pos:position pos:line="285" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="285" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="285" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="286" pos:column="6"/></block> while <condition pos:line="286" pos:column="13">(<expr><name><name pos:line="286" pos:column="14">x<pos:position pos:line="286" pos:column="15"/></name> <argument_list type="generic" pos:line="286" pos:column="16">&lt; <argument><expr><literal type="number" pos:line="286" pos:column="18">3<pos:position pos:line="286" pos:column="19"/></literal> <operator pos:line="286" pos:column="20">&amp;&amp;<pos:position pos:line="286" pos:column="30"/></operator> <name pos:line="286" pos:column="23">x<pos:position pos:line="286" pos:column="24"/></name></expr></argument> &gt;<pos:position pos:line="286" pos:column="29"/></argument_list></name> <operator pos:line="286" pos:column="27">-<pos:position pos:line="286" pos:column="28"/></operator><literal type="number" pos:line="286" pos:column="28">1<pos:position pos:line="286" pos:column="29"/></literal></expr>)<pos:position pos:line="286" pos:column="30"/></condition>;<pos:position pos:line="286" pos:column="31"/></do>

    <expr_stmt><expr><call><name pos:line="288" pos:column="5">close<pos:position pos:line="288" pos:column="10"/></name><argument_list pos:line="288" pos:column="10">(<argument><expr><name pos:line="288" pos:column="11">x<pos:position pos:line="288" pos:column="12"/></name></expr></argument>)<pos:position pos:line="288" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="288" pos:column="14"/></expr_stmt>

    <expr_stmt><expr><name pos:line="290" pos:column="5">t1<pos:position pos:line="290" pos:column="7"/></name> <operator pos:line="290" pos:column="8">=<pos:position pos:line="290" pos:column="9"/></operator> <call><name pos:line="290" pos:column="10">dup<pos:position pos:line="290" pos:column="13"/></name><argument_list pos:line="290" pos:column="13">(<argument><expr><name pos:line="290" pos:column="14">crfd<pos:position pos:line="290" pos:column="18"/></name></expr></argument>)<pos:position pos:line="290" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><name pos:line="292" pos:column="5">t2<pos:position pos:line="292" pos:column="7"/></name> <operator pos:line="292" pos:column="8">=<pos:position pos:line="292" pos:column="9"/></operator> <call><name pos:line="292" pos:column="10">dup<pos:position pos:line="292" pos:column="13"/></name><argument_list pos:line="292" pos:column="13">(<argument><expr><name pos:line="292" pos:column="14">cwfd<pos:position pos:line="292" pos:column="18"/></name></expr></argument>)<pos:position pos:line="292" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="292" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><name pos:line="294" pos:column="5">t3<pos:position pos:line="294" pos:column="7"/></name> <operator pos:line="294" pos:column="8">=<pos:position pos:line="294" pos:column="9"/></operator> <call><name pos:line="294" pos:column="10">dup<pos:position pos:line="294" pos:column="13"/></name><argument_list pos:line="294" pos:column="13">(<argument><expr><call><name pos:line="294" pos:column="14">fileno<pos:position pos:line="294" pos:column="20"/></name><argument_list pos:line="294" pos:column="20">(<argument><expr><name pos:line="294" pos:column="21">debug_log<pos:position pos:line="294" pos:column="30"/></name></expr></argument>)<pos:position pos:line="294" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="294" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="294" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="296" pos:column="5">assert<pos:position pos:line="296" pos:column="11"/></name><argument_list pos:line="296" pos:column="11">(<argument><expr><name pos:line="296" pos:column="12">t1<pos:position pos:line="296" pos:column="14"/></name> <operator pos:line="296" pos:column="15">&gt;<pos:position pos:line="296" pos:column="19"/></operator> <literal type="number" pos:line="296" pos:column="17">2<pos:position pos:line="296" pos:column="18"/></literal> <operator pos:line="296" pos:column="19">&amp;&amp;<pos:position pos:line="296" pos:column="29"/></operator> <name pos:line="296" pos:column="22">t2<pos:position pos:line="296" pos:column="24"/></name> <operator pos:line="296" pos:column="25">&gt;<pos:position pos:line="296" pos:column="29"/></operator> <literal type="number" pos:line="296" pos:column="27">2<pos:position pos:line="296" pos:column="28"/></literal> <operator pos:line="296" pos:column="29">&amp;&amp;<pos:position pos:line="296" pos:column="39"/></operator> <name pos:line="296" pos:column="32">t3<pos:position pos:line="296" pos:column="34"/></name> <operator pos:line="296" pos:column="35">&gt;<pos:position pos:line="296" pos:column="39"/></operator> <literal type="number" pos:line="296" pos:column="37">2<pos:position pos:line="296" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="296" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="296" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="298" pos:column="5">close<pos:position pos:line="298" pos:column="10"/></name><argument_list pos:line="298" pos:column="10">(<argument><expr><name pos:line="298" pos:column="11">crfd<pos:position pos:line="298" pos:column="15"/></name></expr></argument>)<pos:position pos:line="298" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="298" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="300" pos:column="5">close<pos:position pos:line="300" pos:column="10"/></name><argument_list pos:line="300" pos:column="10">(<argument><expr><name pos:line="300" pos:column="11">cwfd<pos:position pos:line="300" pos:column="15"/></name></expr></argument>)<pos:position pos:line="300" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="300" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="302" pos:column="5">close<pos:position pos:line="302" pos:column="10"/></name><argument_list pos:line="302" pos:column="10">(<argument><expr><call><name pos:line="302" pos:column="11">fileno<pos:position pos:line="302" pos:column="17"/></name><argument_list pos:line="302" pos:column="17">(<argument><expr><name pos:line="302" pos:column="18">debug_log<pos:position pos:line="302" pos:column="27"/></name></expr></argument>)<pos:position pos:line="302" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="302" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="302" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="304" pos:column="5">dup2<pos:position pos:line="304" pos:column="9"/></name><argument_list pos:line="304" pos:column="9">(<argument><expr><name pos:line="304" pos:column="10">t1<pos:position pos:line="304" pos:column="12"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="304" pos:column="14">0<pos:position pos:line="304" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="304" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="304" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="306" pos:column="5">dup2<pos:position pos:line="306" pos:column="9"/></name><argument_list pos:line="306" pos:column="9">(<argument><expr><name pos:line="306" pos:column="10">t2<pos:position pos:line="306" pos:column="12"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="306" pos:column="14">1<pos:position pos:line="306" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="306" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="306" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="308" pos:column="5">dup2<pos:position pos:line="308" pos:column="9"/></name><argument_list pos:line="308" pos:column="9">(<argument><expr><name pos:line="308" pos:column="10">t3<pos:position pos:line="308" pos:column="12"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="308" pos:column="14">2<pos:position pos:line="308" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="308" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="308" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="310" pos:column="5">close<pos:position pos:line="310" pos:column="10"/></name><argument_list pos:line="310" pos:column="10">(<argument><expr><name pos:line="310" pos:column="11">t1<pos:position pos:line="310" pos:column="13"/></name></expr></argument>)<pos:position pos:line="310" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="310" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="312" pos:column="5">close<pos:position pos:line="312" pos:column="10"/></name><argument_list pos:line="312" pos:column="10">(<argument><expr><name pos:line="312" pos:column="11">t2<pos:position pos:line="312" pos:column="13"/></name></expr></argument>)<pos:position pos:line="312" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="312" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="314" pos:column="5">close<pos:position pos:line="314" pos:column="10"/></name><argument_list pos:line="314" pos:column="10">(<argument><expr><name pos:line="314" pos:column="11">t3<pos:position pos:line="314" pos:column="13"/></name></expr></argument>)<pos:position pos:line="314" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="314" pos:column="15"/></expr_stmt>

    <comment type="block" pos:line="316" pos:column="5">/* Make sure all other filedescriptors are closed */</comment>
    <for pos:line="317" pos:column="5">for <control pos:line="317" pos:column="9">(<init><expr><name pos:line="317" pos:column="10">x<pos:position pos:line="317" pos:column="11"/></name> <operator pos:line="317" pos:column="12">=<pos:position pos:line="317" pos:column="13"/></operator> <literal type="number" pos:line="317" pos:column="14">3<pos:position pos:line="317" pos:column="15"/></literal></expr>;<pos:position pos:line="317" pos:column="16"/></init> <condition><expr><name pos:line="317" pos:column="17">x<pos:position pos:line="317" pos:column="18"/></name> <operator pos:line="317" pos:column="19">&lt;<pos:position pos:line="317" pos:column="23"/></operator> <name pos:line="317" pos:column="21">SQUID_MAXFD<pos:position pos:line="317" pos:column="32"/></name></expr>;<pos:position pos:line="317" pos:column="33"/></condition> <incr><expr><operator pos:line="317" pos:column="34">++<pos:position pos:line="317" pos:column="36"/></operator><name pos:line="317" pos:column="36">x<pos:position pos:line="317" pos:column="37"/></name></expr></incr>)<pos:position pos:line="317" pos:column="38"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="318" pos:column="9">close<pos:position pos:line="318" pos:column="14"/></name><argument_list pos:line="318" pos:column="14">(<argument><expr><name pos:line="318" pos:column="15">x<pos:position pos:line="318" pos:column="16"/></name></expr></argument>)<pos:position pos:line="318" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="318" pos:column="18"/></expr_stmt></block></for>

<cpp:if pos:line="320" pos:column="1">#<cpp:directive pos:line="320" pos:column="2">if<pos:position pos:line="320" pos:column="4"/></cpp:directive> <expr><name pos:line="320" pos:column="5">HAVE_SETSID<pos:position pos:line="320" pos:column="16"/></name></expr></cpp:if>
    <if pos:line="321" pos:column="5">if <condition pos:line="321" pos:column="8">(<expr><name pos:line="321" pos:column="9">opt_no_daemon<pos:position pos:line="321" pos:column="22"/></name></expr>)<pos:position pos:line="321" pos:column="23"/></condition><then pos:line="321" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="322" pos:column="9">setsid<pos:position pos:line="322" pos:column="15"/></name><argument_list pos:line="322" pos:column="15">()<pos:position pos:line="322" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="322" pos:column="18"/></expr_stmt></block></then></if>
<cpp:endif pos:line="323" pos:column="1">#<cpp:directive pos:line="323" pos:column="2">endif<pos:position pos:line="323" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="325" pos:column="5">execvp<pos:position pos:line="325" pos:column="11"/></name><argument_list pos:line="325" pos:column="11">(<argument><expr><name pos:line="325" pos:column="12">prog<pos:position pos:line="325" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="325" pos:column="18">(<pos:position pos:line="325" pos:column="19"/></operator><name pos:line="325" pos:column="19">char<pos:position pos:line="325" pos:column="23"/></name> <operator pos:line="325" pos:column="24">*<pos:position pos:line="325" pos:column="25"/></operator><specifier pos:line="325" pos:column="25">const<pos:position pos:line="325" pos:column="30"/></specifier> <operator pos:line="325" pos:column="31">*<pos:position pos:line="325" pos:column="32"/></operator><operator pos:line="325" pos:column="32">)<pos:position pos:line="325" pos:column="33"/></operator> <name pos:line="325" pos:column="34">args<pos:position pos:line="325" pos:column="38"/></name></expr></argument>)<pos:position pos:line="325" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="325" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><name pos:line="327" pos:column="5">debug_log<pos:position pos:line="327" pos:column="14"/></name> <operator pos:line="327" pos:column="15">=<pos:position pos:line="327" pos:column="16"/></operator> <call><name pos:line="327" pos:column="17">fdopen<pos:position pos:line="327" pos:column="23"/></name><argument_list pos:line="327" pos:column="23">(<argument><expr><literal type="number" pos:line="327" pos:column="24">2<pos:position pos:line="327" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="327" pos:column="27">"a+"<pos:position pos:line="327" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="327" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="327" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="329" pos:column="5">debugs<pos:position pos:line="329" pos:column="11"/></name><argument_list pos:line="329" pos:column="11">(<argument><expr><literal type="number" pos:line="329" pos:column="12">54<pos:position pos:line="329" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="329" pos:column="16">DBG_CRITICAL<pos:position pos:line="329" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="329" pos:column="30">"ipcCreate: "<pos:position pos:line="329" pos:column="43"/></literal> <operator pos:line="329" pos:column="44">&lt;&lt;<pos:position pos:line="329" pos:column="52"/></operator> <name pos:line="329" pos:column="47">prog<pos:position pos:line="329" pos:column="51"/></name> <operator pos:line="329" pos:column="52">&lt;&lt;<pos:position pos:line="329" pos:column="60"/></operator> <literal type="string" pos:line="329" pos:column="55">": "<pos:position pos:line="329" pos:column="59"/></literal> <operator pos:line="329" pos:column="60">&lt;&lt;<pos:position pos:line="329" pos:column="68"/></operator> <call><name pos:line="329" pos:column="63">xstrerror<pos:position pos:line="329" pos:column="72"/></name><argument_list pos:line="329" pos:column="72">()<pos:position pos:line="329" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="329" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="329" pos:column="76"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="331" pos:column="5">_exit<pos:position pos:line="331" pos:column="10"/></name><argument_list pos:line="331" pos:column="10">(<argument><expr><literal type="number" pos:line="331" pos:column="11">1<pos:position pos:line="331" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="331" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="331" pos:column="14"/></expr_stmt>

    <return pos:line="333" pos:column="5">return <expr><literal type="number" pos:line="333" pos:column="12">0<pos:position pos:line="333" pos:column="13"/></literal></expr>;<pos:position pos:line="333" pos:column="14"/></return>
}<pos:position pos:line="334" pos:column="2"/></block></function></unit>
