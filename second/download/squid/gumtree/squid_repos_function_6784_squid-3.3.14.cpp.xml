<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6784_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">float<pos:position pos:line="1" pos:column="6"/></name></type>
<name pos:line="2" pos:column="1">calc_heap_skew<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">heap<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type> <name pos:line="2" pos:column="23">heap<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="29">int<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">replace<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">heap_node<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier><modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">nodes<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">long<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">id<pos:position pos:line="5" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="14">diff<pos:position pos:line="5" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="20">skew<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><literal type="number" pos:line="5" pos:column="27">0<pos:position pos:line="5" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive>	<name pos:line="6" pos:column="9">HEAP_DEBUG_SKEW<pos:position pos:line="6" pos:column="24"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">long<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">skewsq<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="8" pos:column="8">/* HEAP_DEBUG_SKEW */</comment>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">float<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">norm<pos:position pos:line="9" pos:column="15"/></name> <init pos:line="9" pos:column="16">= <expr><literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">unsigned<pos:position pos:line="10" pos:column="13"/></name> <name pos:line="10" pos:column="14">long<pos:position pos:line="10" pos:column="18"/></name></type> <name pos:line="10" pos:column="19">max<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/*
     * Lock the heap to copy it.  If replacing it need to keep the heap locked
     * until we are all done.
     */</comment>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">mutex_lock<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name><name pos:line="16" pos:column="16">hp<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">-&gt;<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="20">lock<pos:position pos:line="16" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><name pos:line="18" pos:column="5">max<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <call><name pos:line="18" pos:column="11">heap_nodes<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">heap<pos:position pos:line="18" pos:column="26"/></name></expr></argument>)<pos:position pos:line="18" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/*
     * Copy the heap nodes to a new storage area for offline sorting.
     */</comment>
    <expr_stmt><expr><name pos:line="23" pos:column="5">nodes<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <call><name pos:line="23" pos:column="13">xmalloc<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">max<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">*<pos:position pos:line="23" pos:column="26"/></operator> <sizeof pos:line="23" pos:column="27">sizeof<argument_list pos:line="23" pos:column="33">(<argument><expr><name pos:line="23" pos:column="34">heap_node<pos:position pos:line="23" pos:column="43"/></name> <operator pos:line="23" pos:column="44">*<pos:position pos:line="23" pos:column="45"/></operator></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">memcpy<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name pos:line="24" pos:column="12">nodes<pos:position pos:line="24" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="19">heap<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">nodes<pos:position pos:line="24" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="32">max<pos:position pos:line="24" pos:column="35"/></name> <operator pos:line="24" pos:column="36">*<pos:position pos:line="24" pos:column="37"/></operator> <sizeof pos:line="24" pos:column="38">sizeof<argument_list pos:line="24" pos:column="44">(<argument><expr><name pos:line="24" pos:column="45">heap_node<pos:position pos:line="24" pos:column="54"/></name> <operator pos:line="24" pos:column="55">*<pos:position pos:line="24" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="59"/></expr_stmt>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">replace<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">==<pos:position pos:line="26" pos:column="19"/></operator> <literal type="number" pos:line="26" pos:column="20">0<pos:position pos:line="26" pos:column="21"/></literal></expr>)<pos:position pos:line="26" pos:column="22"/></condition><then pos:line="26" pos:column="22"> <block pos:line="26" pos:column="23">{
        <comment type="block" pos:line="27" pos:column="9">/*
         * Unlock the heap to allow updates from other threads before the sort.
         * This allows other heap operations to proceed concurrently with the
         * heap skew computation on the heap at the time of the call ...
         */</comment>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">mutex_unlock<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name><name pos:line="32" pos:column="22">hp<pos:position pos:line="32" pos:column="24"/></name><operator pos:line="32" pos:column="24">-&gt;<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="26">lock<pos:position pos:line="32" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">qsort<pos:position pos:line="34" pos:column="10"/></name><argument_list pos:line="34" pos:column="10">(<argument><expr><name pos:line="34" pos:column="11">nodes<pos:position pos:line="34" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="18">max<pos:position pos:line="34" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="23">sizeof<argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">heap_node<pos:position pos:line="34" pos:column="39"/></name> <operator pos:line="34" pos:column="40">*<pos:position pos:line="34" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="34" pos:column="44">compare_heap_keys<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="63"/></expr_stmt>

    <for pos:line="36" pos:column="5">for <control pos:line="36" pos:column="9">(<init><expr><name pos:line="36" pos:column="10">id<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <literal type="number" pos:line="36" pos:column="15">0<pos:position pos:line="36" pos:column="16"/></literal></expr>;<pos:position pos:line="36" pos:column="17"/></init> <condition><expr><name pos:line="36" pos:column="18">id<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">&lt;<pos:position pos:line="36" pos:column="25"/></operator> <name pos:line="36" pos:column="23">max<pos:position pos:line="36" pos:column="26"/></name></expr>;<pos:position pos:line="36" pos:column="27"/></condition> <incr><expr><name pos:line="36" pos:column="28">id<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">++<pos:position pos:line="36" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="36" pos:column="33"/></control> <block pos:line="36" pos:column="34">{
        <expr_stmt><expr><name pos:line="37" pos:column="9">diff<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <name pos:line="37" pos:column="16">id<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">-<pos:position pos:line="37" pos:column="20"/></operator> <name><name pos:line="37" pos:column="21">nodes<pos:position pos:line="37" pos:column="26"/></name><index pos:line="37" pos:column="26">[<expr><name pos:line="37" pos:column="27">id<pos:position pos:line="37" pos:column="29"/></name></expr>]<pos:position pos:line="37" pos:column="30"/></index></name><operator pos:line="37" pos:column="30">-&gt;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="32">id<pos:position pos:line="37" pos:column="34"/></name></expr>;<pos:position pos:line="37" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="38" pos:column="9">skew<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">+=<pos:position pos:line="38" pos:column="16"/></operator> <call><name pos:line="38" pos:column="17">abs<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><name pos:line="38" pos:column="21">diff<pos:position pos:line="38" pos:column="25"/></name></expr></argument>)<pos:position pos:line="38" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="27"/></expr_stmt>

<cpp:ifdef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifdef<pos:position pos:line="40" pos:column="7"/></cpp:directive>	<name pos:line="40" pos:column="9">HEAP_DEBUG_SKEW<pos:position pos:line="40" pos:column="24"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="41" pos:column="9">skewsq<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">+=<pos:position pos:line="41" pos:column="18"/></operator> <name pos:line="41" pos:column="19">diff<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">*<pos:position pos:line="41" pos:column="25"/></operator> <name pos:line="41" pos:column="26">diff<pos:position pos:line="41" pos:column="30"/></name></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive>	<name pos:line="42" pos:column="9">HEAP_DEBUG_ALL<pos:position pos:line="42" pos:column="23"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">printf<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><literal type="string" pos:line="43" pos:column="16">"%d\tKey = %f, diff = %d\n"<pos:position pos:line="43" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="45">id<pos:position pos:line="43" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="49">nodes<pos:position pos:line="43" pos:column="54"/></name><index pos:line="43" pos:column="54">[<expr><name pos:line="43" pos:column="55">id<pos:position pos:line="43" pos:column="57"/></name></expr>]<pos:position pos:line="43" pos:column="58"/></index></name><operator pos:line="43" pos:column="58">-&gt;<pos:position pos:line="43" pos:column="63"/></operator><name pos:line="43" pos:column="60">key<pos:position pos:line="43" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="65">diff<pos:position pos:line="43" pos:column="69"/></name></expr></argument>)<pos:position pos:line="43" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="71"/></expr_stmt>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="44" pos:column="8">/* HEAP_DEBUG */</comment>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="45" pos:column="8">/* HEAP_DEBUG_SKEW */</comment>
    }<pos:position pos:line="46" pos:column="6"/></block></for>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">replace<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">!=<pos:position pos:line="48" pos:column="19"/></operator> <literal type="number" pos:line="48" pos:column="20">0<pos:position pos:line="48" pos:column="21"/></literal></expr>)<pos:position pos:line="48" pos:column="22"/></condition><then pos:line="48" pos:column="22"> <block pos:line="48" pos:column="23">{
        <comment type="block" pos:line="49" pos:column="9">/*
         * Replace the original heap with the newly sorted heap and let it
         * continue.  Then compute the skew using the copy of the previous heap
         * which we maintain as private data.
         */</comment>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">memcpy<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><name><name pos:line="54" pos:column="16">heap<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">-&gt;<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="22">nodes<pos:position pos:line="54" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="29">nodes<pos:position pos:line="54" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="36">max<pos:position pos:line="54" pos:column="39"/></name> <operator pos:line="54" pos:column="40">*<pos:position pos:line="54" pos:column="41"/></operator> <sizeof pos:line="54" pos:column="42">sizeof<argument_list pos:line="54" pos:column="48">(<argument><expr><name pos:line="54" pos:column="49">heap_node<pos:position pos:line="54" pos:column="58"/></name> <operator pos:line="54" pos:column="59">*<pos:position pos:line="54" pos:column="60"/></operator></expr></argument>)<pos:position pos:line="54" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="63"/></expr_stmt>

        <for pos:line="56" pos:column="9">for <control pos:line="56" pos:column="13">(<init><expr><name pos:line="56" pos:column="14">id<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <literal type="number" pos:line="56" pos:column="19">0<pos:position pos:line="56" pos:column="20"/></literal></expr>;<pos:position pos:line="56" pos:column="21"/></init> <condition><expr><name pos:line="56" pos:column="22">id<pos:position pos:line="56" pos:column="24"/></name> <operator pos:line="56" pos:column="25">&lt;<pos:position pos:line="56" pos:column="29"/></operator> <name pos:line="56" pos:column="27">max<pos:position pos:line="56" pos:column="30"/></name></expr>;<pos:position pos:line="56" pos:column="31"/></condition> <incr><expr><name pos:line="56" pos:column="32">id<pos:position pos:line="56" pos:column="34"/></name><operator pos:line="56" pos:column="34">++<pos:position pos:line="56" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="56" pos:column="37"/></control> <block pos:line="56" pos:column="38">{
            <comment type="block" pos:line="57" pos:column="13">/*
             * Fix up all the ID values in the copied nodes.
             */</comment>
            <expr_stmt><expr><name><name pos:line="60" pos:column="13">heap<pos:position pos:line="60" pos:column="17"/></name><operator pos:line="60" pos:column="17">-&gt;<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="19">nodes<pos:position pos:line="60" pos:column="24"/></name><index pos:line="60" pos:column="24">[<expr><name pos:line="60" pos:column="25">id<pos:position pos:line="60" pos:column="27"/></name></expr>]<pos:position pos:line="60" pos:column="28"/></index></name><operator pos:line="60" pos:column="28">-&gt;<pos:position pos:line="60" pos:column="33"/></operator><name pos:line="60" pos:column="30">id<pos:position pos:line="60" pos:column="32"/></name> <operator pos:line="60" pos:column="33">=<pos:position pos:line="60" pos:column="34"/></operator> <name pos:line="60" pos:column="35">id<pos:position pos:line="60" pos:column="37"/></name></expr>;<pos:position pos:line="60" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></for>

        <expr_stmt><expr><call><name pos:line="63" pos:column="9">mutex_unlock<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><name><name pos:line="63" pos:column="22">hp<pos:position pos:line="63" pos:column="24"/></name><operator pos:line="63" pos:column="24">-&gt;<pos:position pos:line="63" pos:column="29"/></operator><name pos:line="63" pos:column="26">lock<pos:position pos:line="63" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="65" pos:column="5">/*
     * The skew value is normalized to a range of [0..1]; the distribution
     * appears to be a skewed Gaussian distribution.  For random insertions
     * into a heap the normalized skew will be slightly less than 0.5.  The
     * maximum value of skew/N^2 (for any value of N) is about 0.39 and is
     * fairly stable.
     */</comment>
    <expr_stmt><expr><name pos:line="72" pos:column="5">norm<pos:position pos:line="72" pos:column="9"/></name> <operator pos:line="72" pos:column="10">=<pos:position pos:line="72" pos:column="11"/></operator> <name pos:line="72" pos:column="12">skew<pos:position pos:line="72" pos:column="16"/></name> <operator pos:line="72" pos:column="17">*<pos:position pos:line="72" pos:column="18"/></operator> <literal type="number" pos:line="72" pos:column="19">2.56<pos:position pos:line="72" pos:column="23"/></literal> <operator pos:line="72" pos:column="24">/<pos:position pos:line="72" pos:column="25"/></operator> <operator pos:line="72" pos:column="26">(<pos:position pos:line="72" pos:column="27"/></operator><name pos:line="72" pos:column="27">max<pos:position pos:line="72" pos:column="30"/></name> <operator pos:line="72" pos:column="31">*<pos:position pos:line="72" pos:column="32"/></operator> <name pos:line="72" pos:column="33">max<pos:position pos:line="72" pos:column="36"/></name><operator pos:line="72" pos:column="36">)<pos:position pos:line="72" pos:column="37"/></operator></expr>;<pos:position pos:line="72" pos:column="38"/></expr_stmt>

    <comment type="block" pos:line="74" pos:column="5">/*
     * Free the nodes array; note this is just an array of pointers, not data!
     */</comment>
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">xfree<pos:position pos:line="77" pos:column="10"/></name><argument_list pos:line="77" pos:column="10">(<argument><expr><name pos:line="77" pos:column="11">nodes<pos:position pos:line="77" pos:column="16"/></name></expr></argument>)<pos:position pos:line="77" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="18"/></expr_stmt>
    <return pos:line="78" pos:column="5">return <expr><name pos:line="78" pos:column="12">norm<pos:position pos:line="78" pos:column="16"/></name></expr>;<pos:position pos:line="78" pos:column="17"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
