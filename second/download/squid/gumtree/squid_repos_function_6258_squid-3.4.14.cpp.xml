<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6258_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">AddToMap<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><specifier pos:line="2" pos:column="10">const<pos:position pos:line="2" pos:column="15"/></specifier> <name pos:line="2" pos:column="16">PendingOpenRequest<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">&amp;<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="36">por<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// find unused ID using linear seach; there should not be many entries</comment>
    <for pos:line="5" pos:column="5">for <control pos:line="5" pos:column="9">(<init><decl><type><name pos:line="5" pos:column="10">int<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">id<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></init> <condition><expr><literal type="boolean" pos:line="5" pos:column="22">true<pos:position pos:line="5" pos:column="26"/></literal></expr>;<pos:position pos:line="5" pos:column="27"/></condition> <incr><expr><operator pos:line="5" pos:column="28">++<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="30">id<pos:position pos:line="5" pos:column="32"/></name></expr></incr>)<pos:position pos:line="5" pos:column="33"/></control> <block pos:line="5" pos:column="34">{
        <if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name><name pos:line="6" pos:column="13">TheSharedListenRequestMap<pos:position pos:line="6" pos:column="38"/></name><operator pos:line="6" pos:column="38">.<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="39">find<pos:position pos:line="6" pos:column="43"/></name></name><argument_list pos:line="6" pos:column="43">(<argument><expr><name pos:line="6" pos:column="44">id<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call> <operator pos:line="6" pos:column="48">==<pos:position pos:line="6" pos:column="50"/></operator> <call><name><name pos:line="6" pos:column="51">TheSharedListenRequestMap<pos:position pos:line="6" pos:column="76"/></name><operator pos:line="6" pos:column="76">.<pos:position pos:line="6" pos:column="77"/></operator><name pos:line="6" pos:column="77">end<pos:position pos:line="6" pos:column="80"/></name></name><argument_list pos:line="6" pos:column="80">()<pos:position pos:line="6" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="83"/></condition><then pos:line="6" pos:column="83"> <block pos:line="6" pos:column="84">{
            <expr_stmt><expr><name><name pos:line="7" pos:column="13">TheSharedListenRequestMap<pos:position pos:line="7" pos:column="38"/></name><index pos:line="7" pos:column="38">[<expr><name pos:line="7" pos:column="39">id<pos:position pos:line="7" pos:column="41"/></name></expr>]<pos:position pos:line="7" pos:column="42"/></index></name> <operator pos:line="7" pos:column="43">=<pos:position pos:line="7" pos:column="44"/></operator> <name pos:line="7" pos:column="45">por<pos:position pos:line="7" pos:column="48"/></name></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt>
            <return pos:line="8" pos:column="13">return <expr><name pos:line="8" pos:column="20">id<pos:position pos:line="8" pos:column="22"/></name></expr>;<pos:position pos:line="8" pos:column="23"/></return>
        }<pos:position pos:line="9" pos:column="10"/></block></then></if>
    }<pos:position pos:line="10" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="boolean" pos:line="11" pos:column="12">false<pos:position pos:line="11" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt> <comment type="line" pos:line="11" pos:column="20">// not reached</comment>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">-<pos:position pos:line="12" pos:column="13"/></operator><literal type="number" pos:line="12" pos:column="13">1<pos:position pos:line="12" pos:column="14"/></literal></expr>;<pos:position pos:line="12" pos:column="15"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
