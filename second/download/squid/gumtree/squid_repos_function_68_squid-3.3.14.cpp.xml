<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_68_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">convertHostname<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">( <parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name><modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type> <name pos:line="2" pos:column="30">host<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">in_addr<pos:position pos:line="2" pos:column="43"/></name><modifier pos:line="2" pos:column="43">&amp;<pos:position pos:line="2" pos:column="48"/></modifier></type> <name pos:line="2" pos:column="45">dst<pos:position pos:line="2" pos:column="48"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="50"/></parameter_list>
<comment type="line" pos:line="3" pos:column="1">// purpose: convert a numeric or symbolic hostname</comment>
<comment type="line" pos:line="4" pos:column="1">// paramtr: host (IN): host description to convert</comment>
<comment type="line" pos:line="5" pos:column="1">//          dst (OUT): the internet address in network byteorder.</comment>
<comment type="line" pos:line="6" pos:column="1">// returns: -1 in case of error, see h_errno; 0 otherwise.</comment>
<block pos:line="7" pos:column="1">{
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">( <expr><name pos:line="8" pos:column="10">host<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">==<pos:position pos:line="8" pos:column="17"/></operator> <literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr> )<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21"> <block type="pseudo"><return pos:line="8" pos:column="22">return <expr><operator pos:line="8" pos:column="29">-<pos:position pos:line="8" pos:column="30"/></operator><literal type="number" pos:line="8" pos:column="30">1<pos:position pos:line="8" pos:column="31"/></literal></expr>;<pos:position pos:line="8" pos:column="32"/></return></block></then></if>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">unsigned<pos:position pos:line="9" pos:column="13"/></name> <name pos:line="9" pos:column="14">long<pos:position pos:line="9" pos:column="18"/></name> <name pos:line="9" pos:column="19">int<pos:position pos:line="9" pos:column="22"/></name></type> <name pos:line="9" pos:column="23">h<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><call><name pos:line="9" pos:column="27">inet_addr<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><name pos:line="9" pos:column="37">host<pos:position pos:line="9" pos:column="41"/></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">( <expr><name pos:line="10" pos:column="10">h<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">==<pos:position pos:line="10" pos:column="14"/></operator> <literal type="number" pos:line="10" pos:column="15">0xFFFFFFFF<pos:position pos:line="10" pos:column="25"/></literal> <operator pos:line="10" pos:column="26">&amp;&amp;<pos:position pos:line="10" pos:column="36"/></operator> <call><name pos:line="10" pos:column="29">strncmp<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name pos:line="10" pos:column="37">host<pos:position pos:line="10" pos:column="41"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="10" pos:column="42">"255.255.255.255"<pos:position pos:line="10" pos:column="59"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="10" pos:column="60">15<pos:position pos:line="10" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="63"/></argument_list></call> <operator pos:line="10" pos:column="64">!=<pos:position pos:line="10" pos:column="66"/></operator> <literal type="number" pos:line="10" pos:column="67">0<pos:position pos:line="10" pos:column="68"/></literal></expr> )<pos:position pos:line="10" pos:column="70"/></condition><then pos:line="10" pos:column="70"> <block pos:line="10" pos:column="71">{
        <comment type="line" pos:line="11" pos:column="9">// symbolic host</comment>
        <decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">hostent<pos:position pos:line="12" pos:column="23"/></name></name><modifier pos:line="12" pos:column="23">*<pos:position pos:line="12" pos:column="24"/></modifier></type> <name pos:line="12" pos:column="25">dns<pos:position pos:line="12" pos:column="28"/></name> <init pos:line="12" pos:column="29">= <expr><call><name pos:line="12" pos:column="31">gethostbyname<pos:position pos:line="12" pos:column="44"/></name><argument_list pos:line="12" pos:column="44">(<argument><expr><name pos:line="12" pos:column="45">host<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="51"/></decl_stmt>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">( <expr><name pos:line="13" pos:column="14">dns<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">==<pos:position pos:line="13" pos:column="20"/></operator> <name pos:line="13" pos:column="21">NULL<pos:position pos:line="13" pos:column="25"/></name></expr> )<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27"> <block type="pseudo"><return pos:line="13" pos:column="28">return <expr><operator pos:line="13" pos:column="35">-<pos:position pos:line="13" pos:column="36"/></operator><literal type="number" pos:line="13" pos:column="36">1<pos:position pos:line="13" pos:column="37"/></literal></expr>;<pos:position pos:line="13" pos:column="38"/></return></block></then>
        <else pos:line="14" pos:column="9">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="14">memcpy<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">( <argument><expr><operator pos:line="14" pos:column="22">&amp;<pos:position pos:line="14" pos:column="27"/></operator><name><name pos:line="14" pos:column="23">dst<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">.<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">s_addr<pos:position pos:line="14" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="35">dns<pos:position pos:line="14" pos:column="38"/></name><operator pos:line="14" pos:column="38">-&gt;<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="40">h_addr<pos:position pos:line="14" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="48">dns<pos:position pos:line="14" pos:column="51"/></name><operator pos:line="14" pos:column="51">-&gt;<pos:position pos:line="14" pos:column="56"/></operator><name pos:line="14" pos:column="53">h_length<pos:position pos:line="14" pos:column="61"/></name></name></expr></argument> )<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt></block></else></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then> <else pos:line="15" pos:column="7">else <block pos:line="15" pos:column="12">{
        <comment type="line" pos:line="16" pos:column="9">// numeric host</comment>
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">dst<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">.<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">s_addr<pos:position pos:line="17" pos:column="19"/></name></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <name pos:line="17" pos:column="22">h<pos:position pos:line="17" pos:column="23"/></name></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></else></if>
    <return pos:line="19" pos:column="5">return <expr><literal type="number" pos:line="19" pos:column="12">0<pos:position pos:line="19" pos:column="13"/></literal></expr>;<pos:position pos:line="19" pos:column="14"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
