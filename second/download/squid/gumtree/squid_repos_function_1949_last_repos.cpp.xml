<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1949_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">idnsReadVC<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><specifier pos:line="2" pos:column="12">const<pos:position pos:line="2" pos:column="17"/></specifier> <name><name pos:line="2" pos:column="18">Comm<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">::<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">ConnectionPointer<pos:position pos:line="2" pos:column="41"/></name></name> <modifier pos:line="2" pos:column="42">&amp;<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="43">conn<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">char<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">buf<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">size_t<pos:position pos:line="2" pos:column="66"/></name></type> <name pos:line="2" pos:column="67">len<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="72">Comm<pos:position pos:line="2" pos:column="76"/></name><operator pos:line="2" pos:column="76">::<pos:position pos:line="2" pos:column="78"/></operator><name pos:line="2" pos:column="78">Flag<pos:position pos:line="2" pos:column="82"/></name></name></type> <name pos:line="2" pos:column="83">flag<pos:position pos:line="2" pos:column="87"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="89">int<pos:position pos:line="2" pos:column="92"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="94">void<pos:position pos:line="2" pos:column="98"/></name> <modifier pos:line="2" pos:column="99">*<pos:position pos:line="2" pos:column="100"/></modifier></type><name pos:line="2" pos:column="100">data<pos:position pos:line="2" pos:column="104"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="105"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">nsvc<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type> <name pos:line="4" pos:column="12">vc<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><operator pos:line="4" pos:column="17">(<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="18">nsvc<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></operator><operator pos:line="4" pos:column="24">)<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">data<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">flag<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">==<pos:position pos:line="6" pos:column="16"/></operator> <name><name pos:line="6" pos:column="17">Comm<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">::<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="23">ERR_CLOSING<pos:position pos:line="6" pos:column="34"/></name></name></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">flag<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">!=<pos:position pos:line="9" pos:column="16"/></operator> <name><name pos:line="9" pos:column="17">Comm<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">::<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">OK<pos:position pos:line="9" pos:column="25"/></name></name> <operator pos:line="9" pos:column="26">||<pos:position pos:line="9" pos:column="28"/></operator> <name pos:line="9" pos:column="29">len<pos:position pos:line="9" pos:column="32"/></name> <operator pos:line="9" pos:column="33">&lt;=<pos:position pos:line="9" pos:column="38"/></operator> <literal type="number" pos:line="9" pos:column="36">0<pos:position pos:line="9" pos:column="37"/></literal></expr>)<pos:position pos:line="9" pos:column="38"/></condition><then pos:line="9" pos:column="38"> <block pos:line="9" pos:column="39">{
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name><name pos:line="10" pos:column="13">Comm<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">::<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">IsConnOpen<pos:position pos:line="10" pos:column="29"/></name></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">conn<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="36"/></condition><then pos:line="10" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="11" pos:column="13">conn<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">-&gt;<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="19">close<pos:position pos:line="11" pos:column="24"/></name></name><argument_list pos:line="11" pos:column="24">()<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt></block></then></if>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="15" pos:column="5">vc<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">-&gt;<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="9">msg<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">size<pos:position pos:line="15" pos:column="18"/></name></name> <operator pos:line="15" pos:column="19">+=<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">len<pos:position pos:line="15" pos:column="25"/></name></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>       <comment type="line" pos:line="15" pos:column="33">// XXX should not access -&gt; size directly</comment>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name><name pos:line="17" pos:column="9">vc<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">msg<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">-&gt;<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="18">contentSize<pos:position pos:line="17" pos:column="29"/></name></name><argument_list pos:line="17" pos:column="29">()<pos:position pos:line="17" pos:column="31"/></argument_list></call> <operator pos:line="17" pos:column="32">&lt;<pos:position pos:line="17" pos:column="36"/></operator> <name><name pos:line="17" pos:column="34">vc<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">-&gt;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="38">msglen<pos:position pos:line="17" pos:column="44"/></name></name></expr>)<pos:position pos:line="17" pos:column="45"/></condition><then pos:line="17" pos:column="45"> <block pos:line="17" pos:column="46">{
        <decl_stmt><decl><type><name><name pos:line="18" pos:column="9">AsyncCall<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">::<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">Pointer<pos:position pos:line="18" pos:column="27"/></name></name></type> <name pos:line="18" pos:column="28">call<pos:position pos:line="18" pos:column="32"/></name> <init pos:line="18" pos:column="33">= <expr><call><name pos:line="18" pos:column="35">commCbCall<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">(<argument><expr><literal type="number" pos:line="18" pos:column="46">5<pos:position pos:line="18" pos:column="47"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="18" pos:column="48">4<pos:position pos:line="18" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="51">"idnsReadVC"<pos:position pos:line="18" pos:column="63"/></literal></expr></argument>,
                                             <argument><expr><call><name pos:line="19" pos:column="46">CommIoCbPtrFun<pos:position pos:line="19" pos:column="60"/></name><argument_list pos:line="19" pos:column="60">(<argument><expr><name pos:line="19" pos:column="61">idnsReadVC<pos:position pos:line="19" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="73">vc<pos:position pos:line="19" pos:column="75"/></name></expr></argument>)<pos:position pos:line="19" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="78"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">comm_read<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">conn<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="25">buf<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">+<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="29">len<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="34">vc<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">-&gt;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="38">msglen<pos:position pos:line="20" pos:column="44"/></name></name> <operator pos:line="20" pos:column="45">-<pos:position pos:line="20" pos:column="46"/></operator> <call><name><name pos:line="20" pos:column="47">vc<pos:position pos:line="20" pos:column="49"/></name><operator pos:line="20" pos:column="49">-&gt;<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="51">msg<pos:position pos:line="20" pos:column="54"/></name><operator pos:line="20" pos:column="54">-&gt;<pos:position pos:line="20" pos:column="59"/></operator><name pos:line="20" pos:column="56">contentSize<pos:position pos:line="20" pos:column="67"/></name></name><argument_list pos:line="20" pos:column="67">()<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="20" pos:column="71">call<pos:position pos:line="20" pos:column="75"/></name></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="77"/></expr_stmt>
        <return pos:line="21" pos:column="9">return;<pos:position pos:line="21" pos:column="16"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">assert<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name><name pos:line="24" pos:column="12">vc<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">-&gt;<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="16">ns<pos:position pos:line="24" pos:column="18"/></name></name> <operator pos:line="24" pos:column="19">&lt;<pos:position pos:line="24" pos:column="23"/></operator> <name pos:line="24" pos:column="21">nns<pos:position pos:line="24" pos:column="24"/></name></expr></argument>)<pos:position pos:line="24" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">debugs<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><literal type="number" pos:line="25" pos:column="12">78<pos:position pos:line="25" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="16">3<pos:position pos:line="25" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="19">HERE<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">&lt;&lt;<pos:position pos:line="25" pos:column="32"/></operator> <name pos:line="25" pos:column="27">conn<pos:position pos:line="25" pos:column="31"/></name> <operator pos:line="25" pos:column="32">&lt;&lt;<pos:position pos:line="25" pos:column="40"/></operator> <literal type="string" pos:line="25" pos:column="35">": received "<pos:position pos:line="25" pos:column="48"/></literal> <operator pos:line="25" pos:column="49">&lt;&lt;<pos:position pos:line="25" pos:column="57"/></operator> <call><name><name pos:line="25" pos:column="52">vc<pos:position pos:line="25" pos:column="54"/></name><operator pos:line="25" pos:column="54">-&gt;<pos:position pos:line="25" pos:column="59"/></operator><name pos:line="25" pos:column="56">msg<pos:position pos:line="25" pos:column="59"/></name><operator pos:line="25" pos:column="59">-&gt;<pos:position pos:line="25" pos:column="64"/></operator><name pos:line="25" pos:column="61">contentSize<pos:position pos:line="25" pos:column="72"/></name></name><argument_list pos:line="25" pos:column="72">()<pos:position pos:line="25" pos:column="74"/></argument_list></call> <operator pos:line="25" pos:column="75">&lt;&lt;<pos:position pos:line="25" pos:column="83"/></operator> <literal type="string" pos:line="25" pos:column="78">" bytes via TCP from "<pos:position pos:line="25" pos:column="100"/></literal> <operator pos:line="25" pos:column="101">&lt;&lt;<pos:position pos:line="25" pos:column="109"/></operator> <name><name pos:line="25" pos:column="104">nameservers<pos:position pos:line="25" pos:column="115"/></name><index pos:line="25" pos:column="115">[<expr><name><name pos:line="25" pos:column="116">vc<pos:position pos:line="25" pos:column="118"/></name><operator pos:line="25" pos:column="118">-&gt;<pos:position pos:line="25" pos:column="123"/></operator><name pos:line="25" pos:column="120">ns<pos:position pos:line="25" pos:column="122"/></name></name></expr>]<pos:position pos:line="25" pos:column="123"/></index></name><operator pos:line="25" pos:column="123">.<pos:position pos:line="25" pos:column="124"/></operator><name pos:line="25" pos:column="124">S<pos:position pos:line="25" pos:column="125"/></name> <operator pos:line="25" pos:column="126">&lt;&lt;<pos:position pos:line="25" pos:column="134"/></operator> <literal type="string" pos:line="25" pos:column="129">"."<pos:position pos:line="25" pos:column="132"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="133"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="134"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">idnsGrokReply<pos:position pos:line="27" pos:column="18"/></name><argument_list pos:line="27" pos:column="18">(<argument><expr><name><name pos:line="27" pos:column="19">vc<pos:position pos:line="27" pos:column="21"/></name><operator pos:line="27" pos:column="21">-&gt;<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="23">msg<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">-&gt;<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="28">buf<pos:position pos:line="27" pos:column="31"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="27" pos:column="33">vc<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">-&gt;<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="37">msg<pos:position pos:line="27" pos:column="40"/></name><operator pos:line="27" pos:column="40">-&gt;<pos:position pos:line="27" pos:column="45"/></operator><name pos:line="27" pos:column="42">contentSize<pos:position pos:line="27" pos:column="53"/></name></name><argument_list pos:line="27" pos:column="53">()<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="57">vc<pos:position pos:line="27" pos:column="59"/></name><operator pos:line="27" pos:column="59">-&gt;<pos:position pos:line="27" pos:column="64"/></operator><name pos:line="27" pos:column="61">ns<pos:position pos:line="27" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="28" pos:column="5">vc<pos:position pos:line="28" pos:column="7"/></name><operator pos:line="28" pos:column="7">-&gt;<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="9">msg<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">-&gt;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="14">clean<pos:position pos:line="28" pos:column="19"/></name></name><argument_list pos:line="28" pos:column="19">()<pos:position pos:line="28" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="22"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="29" pos:column="5">AsyncCall<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">::<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="16">Pointer<pos:position pos:line="29" pos:column="23"/></name></name></type> <name pos:line="29" pos:column="24">call<pos:position pos:line="29" pos:column="28"/></name> <init pos:line="29" pos:column="29">= <expr><call><name pos:line="29" pos:column="31">commCbCall<pos:position pos:line="29" pos:column="41"/></name><argument_list pos:line="29" pos:column="41">(<argument><expr><literal type="number" pos:line="29" pos:column="42">5<pos:position pos:line="29" pos:column="43"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="29" pos:column="44">4<pos:position pos:line="29" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="47">"idnsReadVCHeader"<pos:position pos:line="29" pos:column="65"/></literal></expr></argument>,
                                         <argument><expr><call><name pos:line="30" pos:column="42">CommIoCbPtrFun<pos:position pos:line="30" pos:column="56"/></name><argument_list pos:line="30" pos:column="56">(<argument><expr><name pos:line="30" pos:column="57">idnsReadVCHeader<pos:position pos:line="30" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="75">vc<pos:position pos:line="30" pos:column="77"/></name></expr></argument>)<pos:position pos:line="30" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="80"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">comm_read<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">conn<pos:position pos:line="31" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="21">(<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">char<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">*<pos:position pos:line="31" pos:column="28"/></operator><operator pos:line="31" pos:column="28">)<pos:position pos:line="31" pos:column="29"/></operator><operator pos:line="31" pos:column="29">&amp;<pos:position pos:line="31" pos:column="34"/></operator><name><name pos:line="31" pos:column="30">vc<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">-&gt;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="34">msglen<pos:position pos:line="31" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="42">2<pos:position pos:line="31" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="45">call<pos:position pos:line="31" pos:column="49"/></name></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="51"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
