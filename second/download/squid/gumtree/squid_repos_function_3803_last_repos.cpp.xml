<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3803_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">ClientBio<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">read<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">buf<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">int<pos:position pos:line="2" pos:column="36"/></name></type> <name pos:line="2" pos:column="37">size<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">BIO<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">table<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">abortReason<pos:position pos:line="4" pos:column="20"/></name></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21"> <block pos:line="4" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">83<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">3<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"BIO on FD "<pos:position pos:line="5" pos:column="35"/></literal> <operator pos:line="5" pos:column="36">&lt;&lt;<pos:position pos:line="5" pos:column="44"/></operator> <name pos:line="5" pos:column="39">fd_<pos:position pos:line="5" pos:column="42"/></name> <operator pos:line="5" pos:column="43">&lt;&lt;<pos:position pos:line="5" pos:column="51"/></operator> <literal type="string" pos:line="5" pos:column="46">" is aborted"<pos:position pos:line="5" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">BIO_clear_retry_flags<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">table<pos:position pos:line="6" pos:column="36"/></name></expr></argument>)<pos:position pos:line="6" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="38"/></expr_stmt>
        <return pos:line="7" pos:column="9">return <expr><operator pos:line="7" pos:column="16">-<pos:position pos:line="7" pos:column="17"/></operator><literal type="number" pos:line="7" pos:column="17">1<pos:position pos:line="7" pos:column="18"/></literal></expr>;<pos:position pos:line="7" pos:column="19"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">holdRead_<pos:position pos:line="10" pos:column="18"/></name></expr>)<pos:position pos:line="10" pos:column="19"/></condition><then pos:line="10" pos:column="19"> <block pos:line="10" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">83<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">7<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">"Hold flag is set, retry latter. (Hold "<pos:position pos:line="11" pos:column="63"/></literal> <operator pos:line="11" pos:column="64">&lt;&lt;<pos:position pos:line="11" pos:column="72"/></operator> <name pos:line="11" pos:column="67">size<pos:position pos:line="11" pos:column="71"/></name> <operator pos:line="11" pos:column="72">&lt;&lt;<pos:position pos:line="11" pos:column="80"/></operator> <literal type="string" pos:line="11" pos:column="75">"bytes)"<pos:position pos:line="11" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">BIO_set_retry_read<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">table<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">-<pos:position pos:line="13" pos:column="17"/></operator><literal type="number" pos:line="13" pos:column="17">1<pos:position pos:line="13" pos:column="18"/></literal></expr>;<pos:position pos:line="13" pos:column="19"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">!<pos:position pos:line="16" pos:column="10"/></operator><call><name><name pos:line="16" pos:column="10">rbuf<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">.<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">isEmpty<pos:position pos:line="16" pos:column="22"/></name></name><argument_list pos:line="16" pos:column="22">()<pos:position pos:line="16" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="25"/></condition><then pos:line="16" pos:column="25"> <block pos:line="16" pos:column="26">{
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">int<pos:position pos:line="17" pos:column="12"/></name></type> <name pos:line="17" pos:column="13">bytes<pos:position pos:line="17" pos:column="18"/></name> <init pos:line="17" pos:column="19">= <expr><operator pos:line="17" pos:column="21">(<pos:position pos:line="17" pos:column="22"/></operator><ternary><condition><expr><name pos:line="17" pos:column="22">size<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">&lt;=<pos:position pos:line="17" pos:column="32"/></operator> <operator pos:line="17" pos:column="30">(<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">int<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">)<pos:position pos:line="17" pos:column="35"/></operator><call><name><name pos:line="17" pos:column="35">rbuf<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">.<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="40">length<pos:position pos:line="17" pos:column="46"/></name></name><argument_list pos:line="17" pos:column="46">()<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr> ?<pos:position pos:line="17" pos:column="50"/></condition><then pos:line="17" pos:column="50"> <expr><name pos:line="17" pos:column="51">size<pos:position pos:line="17" pos:column="55"/></name></expr> <pos:position pos:line="17" pos:column="56"/></then><else pos:line="17" pos:column="56">: <expr><call><name><name pos:line="17" pos:column="58">rbuf<pos:position pos:line="17" pos:column="62"/></name><operator pos:line="17" pos:column="62">.<pos:position pos:line="17" pos:column="63"/></operator><name pos:line="17" pos:column="63">length<pos:position pos:line="17" pos:column="69"/></name></name><argument_list pos:line="17" pos:column="69">()<pos:position pos:line="17" pos:column="71"/></argument_list></call></expr></else></ternary><operator pos:line="17" pos:column="71">)<pos:position pos:line="17" pos:column="72"/></operator></expr></init></decl>;<pos:position pos:line="17" pos:column="73"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">memcpy<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">buf<pos:position pos:line="18" pos:column="19"/></name></expr></argument>, <argument><expr><call><name><name pos:line="18" pos:column="21">rbuf<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">.<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">rawContent<pos:position pos:line="18" pos:column="36"/></name></name><argument_list pos:line="18" pos:column="36">()<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="18" pos:column="40">bytes<pos:position pos:line="18" pos:column="45"/></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="19" pos:column="9">rbuf<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">.<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">consume<pos:position pos:line="19" pos:column="21"/></name></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">bytes<pos:position pos:line="19" pos:column="27"/></name></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">bytes<pos:position pos:line="20" pos:column="21"/></name></expr>;<pos:position pos:line="20" pos:column="22"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then> <else pos:line="21" pos:column="7">else
        <block type="pseudo"><return pos:line="22" pos:column="9">return <expr><call><name><name pos:line="22" pos:column="16">Ssl<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">::<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">Bio<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">::<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">read<pos:position pos:line="22" pos:column="30"/></name></name><argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">buf<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="36">size<pos:position pos:line="22" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="42">table<pos:position pos:line="22" pos:column="47"/></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></return></block></else></if>

    <return pos:line="24" pos:column="5">return <expr><operator pos:line="24" pos:column="12">-<pos:position pos:line="24" pos:column="13"/></operator><literal type="number" pos:line="24" pos:column="13">1<pos:position pos:line="24" pos:column="14"/></literal></expr>;<pos:position pos:line="24" pos:column="15"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
