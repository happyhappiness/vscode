<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2062_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">handle1xx<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">HttpReply<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">reply<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">HttpMsgPointerT<pos:position pos:line="4" pos:column="20"/></name><argument_list type="generic" pos:line="4" pos:column="20">&lt;<argument><expr><name pos:line="4" pos:column="21">HttpReply<pos:position pos:line="4" pos:column="30"/></name></expr></argument>&gt;<pos:position pos:line="4" pos:column="34"/></argument_list></name></type> <name pos:line="4" pos:column="32">msg<pos:position pos:line="4" pos:column="35"/></name><argument_list pos:line="4" pos:column="35">(<argument><expr><name pos:line="4" pos:column="36">reply<pos:position pos:line="4" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt> <comment type="line" pos:line="4" pos:column="44">// will destroy reply if unused</comment>

    <comment type="line" pos:line="6" pos:column="5">// one 1xx at a time: we must not be called while waiting for previous 1xx</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">Must<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><operator pos:line="7" pos:column="10">!<pos:position pos:line="7" pos:column="11"/></operator><name><name pos:line="7" pos:column="11">flags<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">.<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">handling1xx<pos:position pos:line="7" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="8" pos:column="5">flags<pos:position pos:line="8" pos:column="10"/></name><operator pos:line="8" pos:column="10">.<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">handling1xx<pos:position pos:line="8" pos:column="22"/></name></name> <operator pos:line="8" pos:column="23">=<pos:position pos:line="8" pos:column="24"/></operator> <literal type="boolean" pos:line="8" pos:column="25">true<pos:position pos:line="8" pos:column="29"/></literal></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><call><name><name pos:line="10" pos:column="10">request<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">canHandle1xx<pos:position pos:line="10" pos:column="31"/></name></name><argument_list pos:line="10" pos:column="31">()<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34"> <block pos:line="10" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">11<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">2<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="23">HERE<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">&lt;&lt;<pos:position pos:line="11" pos:column="36"/></operator> <literal type="string" pos:line="11" pos:column="31">"ignoring client-unsupported 1xx"<pos:position pos:line="11" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">proceedAfter1xx<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">()<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">USE_HTTP_VIOLATIONS<pos:position pos:line="16" pos:column="24"/></name></expr></cpp:if>
    <comment type="line" pos:line="17" pos:column="5">// check whether the 1xx response forwarding is allowed by squid.conf</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">Config<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">.<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">accessList<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">.<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="27">reply<pos:position pos:line="18" pos:column="32"/></name></name></expr>)<pos:position pos:line="18" pos:column="33"/></condition><then pos:line="18" pos:column="33"> <block pos:line="18" pos:column="34">{
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">ACLFilledChecklist<pos:position pos:line="19" pos:column="27"/></name></type> <name pos:line="19" pos:column="28">ch<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name><name pos:line="19" pos:column="31">Config<pos:position pos:line="19" pos:column="37"/></name><operator pos:line="19" pos:column="37">.<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="38">accessList<pos:position pos:line="19" pos:column="48"/></name><operator pos:line="19" pos:column="48">.<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="49">reply<pos:position pos:line="19" pos:column="54"/></name></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="56">originalRequest<pos:position pos:line="19" pos:column="71"/></name><argument_list pos:line="19" pos:column="71">()<pos:position pos:line="19" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="19" pos:column="75">NULL<pos:position pos:line="19" pos:column="79"/></name></expr></argument>)<pos:position pos:line="19" pos:column="80"/></argument_list></decl>;<pos:position pos:line="19" pos:column="81"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="20" pos:column="9">ch<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">.<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="12">reply<pos:position pos:line="20" pos:column="17"/></name></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <call><name pos:line="20" pos:column="20">HTTPMSGLOCK<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">reply<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name><name pos:line="21" pos:column="13">ch<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">.<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">fastCheck<pos:position pos:line="21" pos:column="25"/></name></name><argument_list pos:line="21" pos:column="25">()<pos:position pos:line="21" pos:column="27"/></argument_list></call> <operator pos:line="21" pos:column="28">!=<pos:position pos:line="21" pos:column="30"/></operator> <name pos:line="21" pos:column="31">ACCESS_ALLOWED<pos:position pos:line="21" pos:column="45"/></name></expr>)<pos:position pos:line="21" pos:column="46"/></condition><then pos:line="21" pos:column="46"> <block pos:line="21" pos:column="47">{ <comment type="line" pos:line="21" pos:column="49">// TODO: support slow lookups?</comment>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">debugs<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><literal type="number" pos:line="22" pos:column="20">11<pos:position pos:line="22" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="24">3<pos:position pos:line="22" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="27">HERE<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">&lt;&lt;<pos:position pos:line="22" pos:column="40"/></operator> <literal type="string" pos:line="22" pos:column="35">"ignoring denied 1xx"<pos:position pos:line="22" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">proceedAfter1xx<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">()<pos:position pos:line="23" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
            <return pos:line="24" pos:column="13">return;<pos:position pos:line="24" pos:column="20"/></return>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif> <comment type="line" pos:line="27" pos:column="8">// USE_HTTP_VIOLATIONS</comment>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">debugs<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><literal type="number" pos:line="29" pos:column="12">11<pos:position pos:line="29" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="16">2<pos:position pos:line="29" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="19">HERE<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">&lt;&lt;<pos:position pos:line="29" pos:column="32"/></operator> <literal type="string" pos:line="29" pos:column="27">"forwarding 1xx to client"<pos:position pos:line="29" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt>

    <comment type="line" pos:line="31" pos:column="5">// the Sink will use this to call us back after writing 1xx to the client</comment>
    <typedef pos:line="32" pos:column="5">typedef <type><name><name pos:line="32" pos:column="13">NullaryMemFunT<pos:position pos:line="32" pos:column="27"/></name><argument_list type="generic" pos:line="32" pos:column="27">&lt;<argument><expr><name pos:line="32" pos:column="28">HttpStateData<pos:position pos:line="32" pos:column="41"/></name></expr></argument>&gt;<pos:position pos:line="32" pos:column="45"/></argument_list></name></type> <name pos:line="32" pos:column="43">CbDialer<pos:position pos:line="32" pos:column="51"/></name>;<pos:position pos:line="32" pos:column="52"/></typedef>
    <decl_stmt><decl><type><specifier pos:line="33" pos:column="5">const<pos:position pos:line="33" pos:column="10"/></specifier> <name><name pos:line="33" pos:column="11">AsyncCall<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">::<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">Pointer<pos:position pos:line="33" pos:column="29"/></name></name></type> <name pos:line="33" pos:column="30">cb<pos:position pos:line="33" pos:column="32"/></name> <init pos:line="33" pos:column="33">= <expr><call><name pos:line="33" pos:column="35">JobCallback<pos:position pos:line="33" pos:column="46"/></name><argument_list pos:line="33" pos:column="46">(<argument><expr><literal type="number" pos:line="33" pos:column="47">11<pos:position pos:line="33" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="51">3<pos:position pos:line="33" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="54">CbDialer<pos:position pos:line="33" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="64">this<pos:position pos:line="33" pos:column="68"/></name></expr></argument>,
                                  <argument><expr><name><name pos:line="34" pos:column="35">HttpStateData<pos:position pos:line="34" pos:column="48"/></name><operator pos:line="34" pos:column="48">::<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="50">proceedAfter1xx<pos:position pos:line="34" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="67"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">CallJobHere1<pos:position pos:line="35" pos:column="17"/></name><argument_list pos:line="35" pos:column="17">(<argument><expr><literal type="number" pos:line="35" pos:column="18">11<pos:position pos:line="35" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="22">4<pos:position pos:line="35" pos:column="23"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="25">request<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">-&gt;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="34">clientConnectionManager<pos:position pos:line="35" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="59">ConnStateData<pos:position pos:line="35" pos:column="72"/></name></expr></argument>,
                 <argument><expr><name><name pos:line="36" pos:column="18">ConnStateData<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">::<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="33">sendControlMsg<pos:position pos:line="36" pos:column="47"/></name></name></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="49">HttpControlMsg<pos:position pos:line="36" pos:column="63"/></name><argument_list pos:line="36" pos:column="63">(<argument><expr><name pos:line="36" pos:column="64">msg<pos:position pos:line="36" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="69">cb<pos:position pos:line="36" pos:column="71"/></name></expr></argument>)<pos:position pos:line="36" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="74"/></expr_stmt>
    <comment type="line" pos:line="37" pos:column="5">// If the call is not fired, then the Sink is gone, and HttpStateData</comment>
    <comment type="line" pos:line="38" pos:column="5">// will terminate due to an aborted store entry or another similar error.</comment>
    <comment type="line" pos:line="39" pos:column="5">// If we get stuck, it is not handle1xx fault if we could get stuck</comment>
    <comment type="line" pos:line="40" pos:column="5">// for similar reasons without a 1xx response.</comment>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
