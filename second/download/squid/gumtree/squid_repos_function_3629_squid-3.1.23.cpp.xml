<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3629_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">IpIntercept<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">NatLookup<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">int<pos:position pos:line="2" pos:column="27"/></name></type> <name pos:line="2" pos:column="28">fd<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">IpAddress<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">&amp;<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="49">me<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier> <name pos:line="2" pos:column="59">IpAddress<pos:position pos:line="2" pos:column="68"/></name> <modifier pos:line="2" pos:column="69">&amp;<pos:position pos:line="2" pos:column="74"/></modifier></type><name pos:line="2" pos:column="70">peer<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="76">IpAddress<pos:position pos:line="2" pos:column="85"/></name> <modifier pos:line="2" pos:column="86">&amp;<pos:position pos:line="2" pos:column="91"/></modifier></type><name pos:line="2" pos:column="87">client<pos:position pos:line="2" pos:column="93"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="95">IpAddress<pos:position pos:line="2" pos:column="104"/></name> <modifier pos:line="2" pos:column="105">&amp;<pos:position pos:line="2" pos:column="110"/></modifier></type><name pos:line="2" pos:column="106">dst<pos:position pos:line="2" pos:column="109"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="110"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* --enable-linux-netfilter    */</comment>
    <comment type="block" pos:line="5" pos:column="5">/* --enable-ipfw-transparent   */</comment>
    <comment type="block" pos:line="6" pos:column="5">/* --enable-ipf-transparent    */</comment>
    <comment type="block" pos:line="7" pos:column="5">/* --enable-pf-transparent     */</comment>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">IPF_TRANSPARENT<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">||<pos:position pos:line="8" pos:column="23"/></operator> <name pos:line="8" pos:column="24">LINUX_NETFILTER<pos:position pos:line="8" pos:column="39"/></name> <operator pos:line="8" pos:column="40">||<pos:position pos:line="8" pos:column="42"/></operator> <name pos:line="8" pos:column="43">IPFW_TRANSPARENT<pos:position pos:line="8" pos:column="59"/></name> <operator pos:line="8" pos:column="60">||<pos:position pos:line="8" pos:column="62"/></operator> <name pos:line="8" pos:column="63">PF_TRANSPARENT<pos:position pos:line="8" pos:column="77"/></name></expr></cpp:if>

    <expr_stmt><expr><name pos:line="10" pos:column="5">client<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <name pos:line="10" pos:column="14">me<pos:position pos:line="10" pos:column="16"/></name></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">dst<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <name pos:line="11" pos:column="11">peer<pos:position pos:line="11" pos:column="15"/></name></expr>;<pos:position pos:line="11" pos:column="16"/></expr_stmt>

<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="13" pos:column="5">0<pos:position pos:line="13" pos:column="6"/></literal></expr></cpp:if>
    <comment type="line" pos:line="14" pos:column="5">// Crop interception errors down to one per minute.</comment>
    int silent = (squid_curtime - last_reported &gt; 60 ? 0 : 1);
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="line" pos:line="17" pos:column="5">// Show all interception errors.</comment>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">silent<pos:position pos:line="18" pos:column="15"/></name> <init pos:line="18" pos:column="16">= <expr><literal type="number" pos:line="18" pos:column="18">0<pos:position pos:line="18" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="20"/></decl_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">debugs<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><literal type="number" pos:line="21" pos:column="12">89<pos:position pos:line="21" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="16">5<pos:position pos:line="21" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="19">HERE<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">&lt;&lt;<pos:position pos:line="21" pos:column="32"/></operator> <literal type="string" pos:line="21" pos:column="27">"address BEGIN: me= "<pos:position pos:line="21" pos:column="48"/></literal> <operator pos:line="21" pos:column="49">&lt;&lt;<pos:position pos:line="21" pos:column="57"/></operator> <name pos:line="21" pos:column="52">me<pos:position pos:line="21" pos:column="54"/></name> <operator pos:line="21" pos:column="55">&lt;&lt;<pos:position pos:line="21" pos:column="63"/></operator> <literal type="string" pos:line="21" pos:column="58">", client= "<pos:position pos:line="21" pos:column="70"/></literal> <operator pos:line="21" pos:column="71">&lt;&lt;<pos:position pos:line="21" pos:column="79"/></operator> <name pos:line="21" pos:column="74">client<pos:position pos:line="21" pos:column="80"/></name> <operator pos:line="21" pos:column="81">&lt;&lt;<pos:position pos:line="21" pos:column="89"/></operator>
           <literal type="string" pos:line="22" pos:column="12">", dst= "<pos:position pos:line="22" pos:column="21"/></literal> <operator pos:line="22" pos:column="22">&lt;&lt;<pos:position pos:line="22" pos:column="30"/></operator> <name pos:line="22" pos:column="25">dst<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">&lt;&lt;<pos:position pos:line="22" pos:column="37"/></operator> <literal type="string" pos:line="22" pos:column="32">", peer= "<pos:position pos:line="22" pos:column="42"/></literal> <operator pos:line="22" pos:column="43">&lt;&lt;<pos:position pos:line="22" pos:column="51"/></operator> <name pos:line="22" pos:column="46">peer<pos:position pos:line="22" pos:column="50"/></name></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="52"/></expr_stmt>

    <comment type="block" pos:line="24" pos:column="5">/* NP: try TPROXY first, its much quieter than NAT when non-matching */</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">transparent_active<pos:position pos:line="25" pos:column="27"/></name></expr>)<pos:position pos:line="25" pos:column="28"/></condition><then pos:line="25" pos:column="28"> <block pos:line="25" pos:column="29">{
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">( <expr><call><name pos:line="26" pos:column="14">NetfilterTransparent<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">fd<pos:position pos:line="26" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="39">me<pos:position pos:line="26" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="43">dst<pos:position pos:line="26" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="48">silent<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call> <operator pos:line="26" pos:column="56">==<pos:position pos:line="26" pos:column="58"/></operator> <literal type="number" pos:line="26" pos:column="59">0<pos:position pos:line="26" pos:column="60"/></literal></expr>)<pos:position pos:line="26" pos:column="61"/></condition><then pos:line="26" pos:column="61"> <block type="pseudo"><return pos:line="26" pos:column="62">return <expr><literal type="number" pos:line="26" pos:column="69">0<pos:position pos:line="26" pos:column="70"/></literal></expr>;<pos:position pos:line="26" pos:column="71"/></return></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="29" pos:column="5">/* NAT is only available in IPv4 */</comment>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">( <expr><operator pos:line="30" pos:column="10">!<pos:position pos:line="30" pos:column="11"/></operator><call><name><name pos:line="30" pos:column="11">me<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">.<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">IsIPv4<pos:position pos:line="30" pos:column="20"/></name></name><argument_list pos:line="30" pos:column="20">()<pos:position pos:line="30" pos:column="22"/></argument_list></call></expr>   )<pos:position pos:line="30" pos:column="26"/></condition><then pos:line="30" pos:column="26"> <block type="pseudo"><return pos:line="30" pos:column="27">return <expr><operator pos:line="30" pos:column="34">-<pos:position pos:line="30" pos:column="35"/></operator><literal type="number" pos:line="30" pos:column="35">1<pos:position pos:line="30" pos:column="36"/></literal></expr>;<pos:position pos:line="30" pos:column="37"/></return></block></then></if>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">( <expr><operator pos:line="31" pos:column="10">!<pos:position pos:line="31" pos:column="11"/></operator><call><name><name pos:line="31" pos:column="11">peer<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">.<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">IsIPv4<pos:position pos:line="31" pos:column="22"/></name></name><argument_list pos:line="31" pos:column="22">()<pos:position pos:line="31" pos:column="24"/></argument_list></call></expr> )<pos:position pos:line="31" pos:column="26"/></condition><then pos:line="31" pos:column="26"> <block type="pseudo"><return pos:line="31" pos:column="27">return <expr><operator pos:line="31" pos:column="34">-<pos:position pos:line="31" pos:column="35"/></operator><literal type="number" pos:line="31" pos:column="35">1<pos:position pos:line="31" pos:column="36"/></literal></expr>;<pos:position pos:line="31" pos:column="37"/></return></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">intercept_active<pos:position pos:line="33" pos:column="25"/></name></expr>)<pos:position pos:line="33" pos:column="26"/></condition><then pos:line="33" pos:column="26"> <block pos:line="33" pos:column="27">{
        <comment type="block" pos:line="34" pos:column="9">/* NAT methods that use sock-opts to return client address */</comment>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">( <expr><call><name pos:line="35" pos:column="14">NetfilterInterception<pos:position pos:line="35" pos:column="35"/></name><argument_list pos:line="35" pos:column="35">(<argument><expr><name pos:line="35" pos:column="36">fd<pos:position pos:line="35" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="40">me<pos:position pos:line="35" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">client<pos:position pos:line="35" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="52">silent<pos:position pos:line="35" pos:column="58"/></name></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call> <operator pos:line="35" pos:column="60">==<pos:position pos:line="35" pos:column="62"/></operator> <literal type="number" pos:line="35" pos:column="63">0<pos:position pos:line="35" pos:column="64"/></literal></expr>)<pos:position pos:line="35" pos:column="65"/></condition><then pos:line="35" pos:column="65"> <block type="pseudo"><return pos:line="35" pos:column="66">return <expr><literal type="number" pos:line="35" pos:column="73">0<pos:position pos:line="35" pos:column="74"/></literal></expr>;<pos:position pos:line="35" pos:column="75"/></return></block></then></if>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">( <expr><call><name pos:line="36" pos:column="14">IpfwInterception<pos:position pos:line="36" pos:column="30"/></name><argument_list pos:line="36" pos:column="30">(<argument><expr><name pos:line="36" pos:column="31">fd<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="35">me<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="39">client<pos:position pos:line="36" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="47">silent<pos:position pos:line="36" pos:column="53"/></name></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call> <operator pos:line="36" pos:column="55">==<pos:position pos:line="36" pos:column="57"/></operator> <literal type="number" pos:line="36" pos:column="58">0<pos:position pos:line="36" pos:column="59"/></literal></expr>)<pos:position pos:line="36" pos:column="60"/></condition><then pos:line="36" pos:column="60"> <block type="pseudo"><return pos:line="36" pos:column="61">return <expr><literal type="number" pos:line="36" pos:column="68">0<pos:position pos:line="36" pos:column="69"/></literal></expr>;<pos:position pos:line="36" pos:column="70"/></return></block></then></if>

        <comment type="block" pos:line="38" pos:column="9">/* NAT methods that use ioctl to return client address AND destination address */</comment>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">( <expr><call><name pos:line="39" pos:column="14">PfInterception<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">fd<pos:position pos:line="39" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="33">me<pos:position pos:line="39" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="37">client<pos:position pos:line="39" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="45">dst<pos:position pos:line="39" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="50">silent<pos:position pos:line="39" pos:column="56"/></name></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call> <operator pos:line="39" pos:column="58">==<pos:position pos:line="39" pos:column="60"/></operator> <literal type="number" pos:line="39" pos:column="61">0<pos:position pos:line="39" pos:column="62"/></literal></expr>)<pos:position pos:line="39" pos:column="63"/></condition><then pos:line="39" pos:column="63"> <block type="pseudo"><return pos:line="39" pos:column="64">return <expr><literal type="number" pos:line="39" pos:column="71">0<pos:position pos:line="39" pos:column="72"/></literal></expr>;<pos:position pos:line="39" pos:column="73"/></return></block></then></if>
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">( <expr><call><name pos:line="40" pos:column="14">IpfInterception<pos:position pos:line="40" pos:column="29"/></name><argument_list pos:line="40" pos:column="29">(<argument><expr><name pos:line="40" pos:column="30">fd<pos:position pos:line="40" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="34">me<pos:position pos:line="40" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="38">client<pos:position pos:line="40" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="46">dst<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="51">silent<pos:position pos:line="40" pos:column="57"/></name></expr></argument>)<pos:position pos:line="40" pos:column="58"/></argument_list></call> <operator pos:line="40" pos:column="59">==<pos:position pos:line="40" pos:column="61"/></operator> <literal type="number" pos:line="40" pos:column="62">0<pos:position pos:line="40" pos:column="63"/></literal></expr>)<pos:position pos:line="40" pos:column="64"/></condition><then pos:line="40" pos:column="64"> <block type="pseudo"><return pos:line="40" pos:column="65">return <expr><literal type="number" pos:line="40" pos:column="72">0<pos:position pos:line="40" pos:column="73"/></literal></expr>;<pos:position pos:line="40" pos:column="74"/></return></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

<cpp:else pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">else<pos:position pos:line="43" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="43" pos:column="7">/* none of the transparent options configured */</comment>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">debugs<pos:position pos:line="44" pos:column="11"/></name><argument_list pos:line="44" pos:column="11">(<argument><expr><literal type="number" pos:line="44" pos:column="12">89<pos:position pos:line="44" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="16">DBG_IMPORTANT<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="31">"WARNING: transparent proxying not supported"<pos:position pos:line="44" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="78"/></expr_stmt>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="47" pos:column="5">return <expr><operator pos:line="47" pos:column="12">-<pos:position pos:line="47" pos:column="13"/></operator><literal type="number" pos:line="47" pos:column="13">1<pos:position pos:line="47" pos:column="14"/></literal></expr>;<pos:position pos:line="47" pos:column="15"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
