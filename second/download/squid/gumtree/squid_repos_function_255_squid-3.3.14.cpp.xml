<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_255_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">p<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">buf<pos:position pos:line="5" pos:column="13"/></name><index pos:line="5" pos:column="13">[<expr><name pos:line="5" pos:column="14">HELPER_INPUT_BUFFER<pos:position pos:line="5" pos:column="33"/></name></expr>]<pos:position pos:line="5" pos:column="34"/></index></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">username<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">group<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name><name pos:line="8" pos:column="17">groups<pos:position pos:line="8" pos:column="23"/></name><index pos:line="8" pos:column="23">[<expr><literal type="number" pos:line="8" pos:column="24">512<pos:position pos:line="8" pos:column="27"/></literal></expr>]<pos:position pos:line="8" pos:column="28"/></index></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">n<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">argc<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">&gt;<pos:position pos:line="11" pos:column="18"/></operator> <literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr>)<pos:position pos:line="11" pos:column="18"/></condition><then pos:line="11" pos:column="18"> <block pos:line="11" pos:column="19">{		<comment type="block" pos:line="11" pos:column="33">/* should always be true */</comment>
        <expr_stmt><expr><name pos:line="12" pos:column="9">program_name<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <call><name pos:line="12" pos:column="24">strrchr<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><name><name pos:line="12" pos:column="32">argv<pos:position pos:line="12" pos:column="36"/></name><index pos:line="12" pos:column="36">[<expr><literal type="number" pos:line="12" pos:column="37">0<pos:position pos:line="12" pos:column="38"/></literal></expr>]<pos:position pos:line="12" pos:column="39"/></index></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="41">'/'<pos:position pos:line="12" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">program_name<pos:position pos:line="13" pos:column="25"/></name> <operator pos:line="13" pos:column="26">==<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">NULL<pos:position pos:line="13" pos:column="33"/></name></expr>)<pos:position pos:line="13" pos:column="34"/></condition><then pos:line="13" pos:column="34">
            <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="13">program_name<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">=<pos:position pos:line="14" pos:column="27"/></operator> <name><name pos:line="14" pos:column="28">argv<pos:position pos:line="14" pos:column="32"/></name><index pos:line="14" pos:column="32">[<expr><literal type="number" pos:line="14" pos:column="33">0<pos:position pos:line="14" pos:column="34"/></literal></expr>]<pos:position pos:line="14" pos:column="35"/></index></name></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt></block></then></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then> <else pos:line="15" pos:column="7">else <block pos:line="15" pos:column="12">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">program_name<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <literal type="string" pos:line="16" pos:column="24">"(unknown)"<pos:position pos:line="16" pos:column="35"/></literal></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="18" pos:column="5">mypid<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <call><name pos:line="18" pos:column="13">getpid<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">()<pos:position pos:line="18" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">setbuf<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name pos:line="20" pos:column="12">stdout<pos:position pos:line="20" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="20">NULL<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">setbuf<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><name pos:line="21" pos:column="12">stderr<pos:position pos:line="21" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="20">NULL<pos:position pos:line="21" pos:column="24"/></name></expr></argument>)<pos:position pos:line="21" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* Check Command Line */</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">process_options<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">argc<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="27">argv<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">use_global<pos:position pos:line="26" pos:column="19"/></name></expr>)<pos:position pos:line="26" pos:column="20"/></condition><then pos:line="26" pos:column="20"> <block pos:line="26" pos:column="21">{
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">(<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">machinedomain<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">=<pos:position pos:line="27" pos:column="29"/></operator> <call><name pos:line="27" pos:column="30">GetDomainName<pos:position pos:line="27" pos:column="43"/></name><argument_list pos:line="27" pos:column="43">()<pos:position pos:line="27" pos:column="45"/></argument_list></call><operator pos:line="27" pos:column="45">)<pos:position pos:line="27" pos:column="46"/></operator> <operator pos:line="27" pos:column="47">==<pos:position pos:line="27" pos:column="49"/></operator> <name pos:line="27" pos:column="50">NULL<pos:position pos:line="27" pos:column="54"/></name></expr>)<pos:position pos:line="27" pos:column="55"/></condition><then pos:line="27" pos:column="55"> <block pos:line="27" pos:column="56">{
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">fprintf<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">stderr<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="29">"%s: FATAL: Can't read machine domain\n"<pos:position pos:line="28" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="71">program_name<pos:position pos:line="28" pos:column="83"/></name></expr></argument>)<pos:position pos:line="28" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="85"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">exit<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><literal type="number" pos:line="29" pos:column="18">1<pos:position pos:line="29" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">strlwr<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><name pos:line="31" pos:column="16">machinedomain<pos:position pos:line="31" pos:column="29"/></name></expr></argument>)<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">DefaultDomain<pos:position pos:line="32" pos:column="27"/></name></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="13">DefaultDomain<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">=<pos:position pos:line="33" pos:column="28"/></operator> <call><name pos:line="33" pos:column="29">xstrdup<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><name pos:line="33" pos:column="37">machinedomain<pos:position pos:line="33" pos:column="50"/></name></expr></argument>)<pos:position pos:line="33" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="52"/></expr_stmt></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">debug<pos:position pos:line="35" pos:column="10"/></name><argument_list pos:line="35" pos:column="10">(<argument><expr><literal type="string" pos:line="35" pos:column="11">"External ACL win32 group helper build "<pos:position pos:line="35" pos:column="51"/></literal> <name pos:line="35" pos:column="52">__DATE__<pos:position pos:line="35" pos:column="60"/></name> <literal type="string" pos:line="35" pos:column="61">", "<pos:position pos:line="35" pos:column="65"/></literal> <name pos:line="35" pos:column="66">__TIME__<pos:position pos:line="35" pos:column="74"/></name>
          <literal type="string" pos:line="36" pos:column="11">" starting up...\n"<pos:position pos:line="36" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">use_global<pos:position pos:line="37" pos:column="19"/></name></expr>)<pos:position pos:line="37" pos:column="20"/></condition><then pos:line="37" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="9">debug<pos:position pos:line="38" pos:column="14"/></name><argument_list pos:line="38" pos:column="14">(<argument><expr><literal type="string" pos:line="38" pos:column="15">"Domain Global group mode enabled using '%s' as default domain.\n"<pos:position pos:line="38" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="83">DefaultDomain<pos:position pos:line="38" pos:column="96"/></name></expr></argument>)<pos:position pos:line="38" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="98"/></expr_stmt></block></then></if>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">use_case_insensitive_compare<pos:position pos:line="39" pos:column="37"/></name></expr>)<pos:position pos:line="39" pos:column="38"/></condition><then pos:line="39" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="9">debug<pos:position pos:line="40" pos:column="14"/></name><argument_list pos:line="40" pos:column="14">(<argument><expr><literal type="string" pos:line="40" pos:column="15">"Warning: running in case insensitive mode !!!\n"<pos:position pos:line="40" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="66"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="42" pos:column="5">atexit<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><name pos:line="42" pos:column="12">CloseCOM<pos:position pos:line="42" pos:column="20"/></name></expr></argument>)<pos:position pos:line="42" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="22"/></expr_stmt>

    <comment type="block" pos:line="44" pos:column="5">/* Main Loop */</comment>
    <while pos:line="45" pos:column="5">while <condition pos:line="45" pos:column="11">(<expr><call><name pos:line="45" pos:column="12">fgets<pos:position pos:line="45" pos:column="17"/></name><argument_list pos:line="45" pos:column="17">(<argument><expr><name pos:line="45" pos:column="18">buf<pos:position pos:line="45" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="23">HELPER_INPUT_BUFFER<pos:position pos:line="45" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="44">stdin<pos:position pos:line="45" pos:column="49"/></name></expr></argument>)<pos:position pos:line="45" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="51"/></condition> <block pos:line="45" pos:column="52">{
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">NULL<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">==<pos:position pos:line="46" pos:column="20"/></operator> <call><name pos:line="46" pos:column="21">strchr<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">buf<pos:position pos:line="46" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="46" pos:column="33">'\n'<pos:position pos:line="46" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="39"/></condition><then pos:line="46" pos:column="39"> <block pos:line="46" pos:column="40">{
            <comment type="block" pos:line="47" pos:column="13">/* too large message received.. skip and deny */</comment>
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">fprintf<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">stderr<pos:position pos:line="48" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="29">"%s: ERROR: Too large: %s\n"<pos:position pos:line="48" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="59">argv<pos:position pos:line="48" pos:column="63"/></name><index pos:line="48" pos:column="63">[<expr><literal type="number" pos:line="48" pos:column="64">0<pos:position pos:line="48" pos:column="65"/></literal></expr>]<pos:position pos:line="48" pos:column="66"/></index></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="68">buf<pos:position pos:line="48" pos:column="71"/></name></expr></argument>)<pos:position pos:line="48" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="73"/></expr_stmt>
            <while pos:line="49" pos:column="13">while <condition pos:line="49" pos:column="19">(<expr><call><name pos:line="49" pos:column="20">fgets<pos:position pos:line="49" pos:column="25"/></name><argument_list pos:line="49" pos:column="25">(<argument><expr><name pos:line="49" pos:column="26">buf<pos:position pos:line="49" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="31">HELPER_INPUT_BUFFER<pos:position pos:line="49" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="52">stdin<pos:position pos:line="49" pos:column="57"/></name></expr></argument>)<pos:position pos:line="49" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="59"/></condition> <block pos:line="49" pos:column="60">{
                <expr_stmt><expr><call><name pos:line="50" pos:column="17">fprintf<pos:position pos:line="50" pos:column="24"/></name><argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">stderr<pos:position pos:line="50" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="33">"%s: ERROR: Too large..: %s\n"<pos:position pos:line="50" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="65">argv<pos:position pos:line="50" pos:column="69"/></name><index pos:line="50" pos:column="69">[<expr><literal type="number" pos:line="50" pos:column="70">0<pos:position pos:line="50" pos:column="71"/></literal></expr>]<pos:position pos:line="50" pos:column="72"/></index></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="74">buf<pos:position pos:line="50" pos:column="77"/></name></expr></argument>)<pos:position pos:line="50" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="79"/></expr_stmt>
                <if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><call><name pos:line="51" pos:column="21">strchr<pos:position pos:line="51" pos:column="27"/></name><argument_list pos:line="51" pos:column="27">(<argument><expr><name pos:line="51" pos:column="28">buf<pos:position pos:line="51" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="51" pos:column="33">'\n'<pos:position pos:line="51" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="38"/></argument_list></call> <operator pos:line="51" pos:column="39">!=<pos:position pos:line="51" pos:column="41"/></operator> <name pos:line="51" pos:column="42">NULL<pos:position pos:line="51" pos:column="46"/></name></expr>)<pos:position pos:line="51" pos:column="47"/></condition><then pos:line="51" pos:column="47">
                    <block type="pseudo"><break pos:line="52" pos:column="21">break;<pos:position pos:line="52" pos:column="27"/></break></block></then></if>
            }<pos:position pos:line="53" pos:column="14"/></block></while>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">SEND_ERR<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><literal type="string" pos:line="54" pos:column="22">"Invalid Request. Too Long."<pos:position pos:line="54" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="52"/></expr_stmt>
            <continue pos:line="55" pos:column="13">continue;<pos:position pos:line="55" pos:column="22"/></continue>
        }<pos:position pos:line="56" pos:column="10"/></block></then></if>
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><operator pos:line="57" pos:column="13">(<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">p<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">=<pos:position pos:line="57" pos:column="17"/></operator> <call><name pos:line="57" pos:column="18">strchr<pos:position pos:line="57" pos:column="24"/></name><argument_list pos:line="57" pos:column="24">(<argument><expr><name pos:line="57" pos:column="25">buf<pos:position pos:line="57" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="57" pos:column="30">'\n'<pos:position pos:line="57" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="35"/></argument_list></call><operator pos:line="57" pos:column="35">)<pos:position pos:line="57" pos:column="36"/></operator> <operator pos:line="57" pos:column="37">!=<pos:position pos:line="57" pos:column="39"/></operator> <name pos:line="57" pos:column="40">NULL<pos:position pos:line="57" pos:column="44"/></name></expr>)<pos:position pos:line="57" pos:column="45"/></condition><then pos:line="57" pos:column="45">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="58" pos:column="13">*<pos:position pos:line="58" pos:column="14"/></operator><name pos:line="58" pos:column="14">p<pos:position pos:line="58" pos:column="15"/></name> <operator pos:line="58" pos:column="16">=<pos:position pos:line="58" pos:column="17"/></operator> <literal type="char" pos:line="58" pos:column="18">'\0'<pos:position pos:line="58" pos:column="22"/></literal></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt></block></then></if>		<comment type="block" pos:line="58" pos:column="33">/* strip \n */</comment>
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><operator pos:line="59" pos:column="13">(<pos:position pos:line="59" pos:column="14"/></operator><name pos:line="59" pos:column="14">p<pos:position pos:line="59" pos:column="15"/></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <call><name pos:line="59" pos:column="18">strchr<pos:position pos:line="59" pos:column="24"/></name><argument_list pos:line="59" pos:column="24">(<argument><expr><name pos:line="59" pos:column="25">buf<pos:position pos:line="59" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="59" pos:column="30">'\r'<pos:position pos:line="59" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="35"/></argument_list></call><operator pos:line="59" pos:column="35">)<pos:position pos:line="59" pos:column="36"/></operator> <operator pos:line="59" pos:column="37">!=<pos:position pos:line="59" pos:column="39"/></operator> <name pos:line="59" pos:column="40">NULL<pos:position pos:line="59" pos:column="44"/></name></expr>)<pos:position pos:line="59" pos:column="45"/></condition><then pos:line="59" pos:column="45">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="60" pos:column="13">*<pos:position pos:line="60" pos:column="14"/></operator><name pos:line="60" pos:column="14">p<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <literal type="char" pos:line="60" pos:column="18">'\0'<pos:position pos:line="60" pos:column="22"/></literal></expr>;<pos:position pos:line="60" pos:column="23"/></expr_stmt></block></then></if>		<comment type="block" pos:line="60" pos:column="33">/* strip \r */</comment>

        <expr_stmt><expr><call><name pos:line="62" pos:column="9">debug<pos:position pos:line="62" pos:column="14"/></name><argument_list pos:line="62" pos:column="14">(<argument><expr><literal type="string" pos:line="62" pos:column="15">"Got '%s' from Squid (length: %d).\n"<pos:position pos:line="62" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="54">buf<pos:position pos:line="62" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="62" pos:column="59">strlen<pos:position pos:line="62" pos:column="65"/></name><argument_list pos:line="62" pos:column="65">(<argument><expr><name pos:line="62" pos:column="66">buf<pos:position pos:line="62" pos:column="69"/></name></expr></argument>)<pos:position pos:line="62" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="72"/></expr_stmt>

        <if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name><name pos:line="64" pos:column="13">buf<pos:position pos:line="64" pos:column="16"/></name><index pos:line="64" pos:column="16">[<expr><literal type="number" pos:line="64" pos:column="17">0<pos:position pos:line="64" pos:column="18"/></literal></expr>]<pos:position pos:line="64" pos:column="19"/></index></name> <operator pos:line="64" pos:column="20">==<pos:position pos:line="64" pos:column="22"/></operator> <literal type="char" pos:line="64" pos:column="23">'\0'<pos:position pos:line="64" pos:column="27"/></literal></expr>)<pos:position pos:line="64" pos:column="28"/></condition><then pos:line="64" pos:column="28"> <block pos:line="64" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="65" pos:column="13">SEND_ERR<pos:position pos:line="65" pos:column="21"/></name><argument_list pos:line="65" pos:column="21">(<argument><expr><literal type="string" pos:line="65" pos:column="22">"Invalid Request. No Input."<pos:position pos:line="65" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="52"/></expr_stmt>
            <continue pos:line="66" pos:column="13">continue;<pos:position pos:line="66" pos:column="22"/></continue>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="68" pos:column="9">username<pos:position pos:line="68" pos:column="17"/></name> <operator pos:line="68" pos:column="18">=<pos:position pos:line="68" pos:column="19"/></operator> <call><name pos:line="68" pos:column="20">strtok<pos:position pos:line="68" pos:column="26"/></name><argument_list pos:line="68" pos:column="26">(<argument><expr><name pos:line="68" pos:column="27">buf<pos:position pos:line="68" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="32">" "<pos:position pos:line="68" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="37"/></expr_stmt>
        <for pos:line="69" pos:column="9">for <control pos:line="69" pos:column="13">(<init><expr><name pos:line="69" pos:column="14">n<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">=<pos:position pos:line="69" pos:column="17"/></operator> <literal type="number" pos:line="69" pos:column="18">0<pos:position pos:line="69" pos:column="19"/></literal></expr>;<pos:position pos:line="69" pos:column="20"/></init> <condition><expr><operator pos:line="69" pos:column="21">(<pos:position pos:line="69" pos:column="22"/></operator><name pos:line="69" pos:column="22">group<pos:position pos:line="69" pos:column="27"/></name> <operator pos:line="69" pos:column="28">=<pos:position pos:line="69" pos:column="29"/></operator> <call><name pos:line="69" pos:column="30">strtok<pos:position pos:line="69" pos:column="36"/></name><argument_list pos:line="69" pos:column="36">(<argument><expr><name pos:line="69" pos:column="37">NULL<pos:position pos:line="69" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="43">" "<pos:position pos:line="69" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="47"/></argument_list></call><operator pos:line="69" pos:column="47">)<pos:position pos:line="69" pos:column="48"/></operator> <operator pos:line="69" pos:column="49">!=<pos:position pos:line="69" pos:column="51"/></operator> <name pos:line="69" pos:column="52">NULL<pos:position pos:line="69" pos:column="56"/></name></expr>;<pos:position pos:line="69" pos:column="57"/></condition> <incr><expr><operator pos:line="69" pos:column="58">++<pos:position pos:line="69" pos:column="60"/></operator><name pos:line="69" pos:column="60">n<pos:position pos:line="69" pos:column="61"/></name></expr></incr>)<pos:position pos:line="69" pos:column="62"/></control> <block pos:line="69" pos:column="63">{
            <expr_stmt><expr><call><name pos:line="70" pos:column="13">rfc1738_unescape<pos:position pos:line="70" pos:column="29"/></name><argument_list pos:line="70" pos:column="29">(<argument><expr><name pos:line="70" pos:column="30">group<pos:position pos:line="70" pos:column="35"/></name></expr></argument>)<pos:position pos:line="70" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="71" pos:column="13">groups<pos:position pos:line="71" pos:column="19"/></name><index pos:line="71" pos:column="19">[<expr><name pos:line="71" pos:column="20">n<pos:position pos:line="71" pos:column="21"/></name></expr>]<pos:position pos:line="71" pos:column="22"/></index></name> <operator pos:line="71" pos:column="23">=<pos:position pos:line="71" pos:column="24"/></operator> <name pos:line="71" pos:column="25">group<pos:position pos:line="71" pos:column="30"/></name></expr>;<pos:position pos:line="71" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="72" pos:column="10"/></block></for>
        <expr_stmt><expr><name><name pos:line="73" pos:column="9">groups<pos:position pos:line="73" pos:column="15"/></name><index pos:line="73" pos:column="15">[<expr><name pos:line="73" pos:column="16">n<pos:position pos:line="73" pos:column="17"/></name></expr>]<pos:position pos:line="73" pos:column="18"/></index></name> <operator pos:line="73" pos:column="19">=<pos:position pos:line="73" pos:column="20"/></operator> <name pos:line="73" pos:column="21">NULL<pos:position pos:line="73" pos:column="25"/></name></expr>;<pos:position pos:line="73" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="74" pos:column="9">numberofgroups<pos:position pos:line="74" pos:column="23"/></name> <operator pos:line="74" pos:column="24">=<pos:position pos:line="74" pos:column="25"/></operator> <name pos:line="74" pos:column="26">n<pos:position pos:line="74" pos:column="27"/></name></expr>;<pos:position pos:line="74" pos:column="28"/></expr_stmt>

        <if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><name pos:line="76" pos:column="13">NULL<pos:position pos:line="76" pos:column="17"/></name> <operator pos:line="76" pos:column="18">==<pos:position pos:line="76" pos:column="20"/></operator> <name pos:line="76" pos:column="21">username<pos:position pos:line="76" pos:column="29"/></name></expr>)<pos:position pos:line="76" pos:column="30"/></condition><then pos:line="76" pos:column="30"> <block pos:line="76" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="77" pos:column="13">SEND_ERR<pos:position pos:line="77" pos:column="21"/></name><argument_list pos:line="77" pos:column="21">(<argument><expr><literal type="string" pos:line="77" pos:column="22">"Invalid Request. No Username."<pos:position pos:line="77" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="55"/></expr_stmt>
            <continue pos:line="78" pos:column="13">continue;<pos:position pos:line="78" pos:column="22"/></continue>
        }<pos:position pos:line="79" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">rfc1738_unescape<pos:position pos:line="80" pos:column="25"/></name><argument_list pos:line="80" pos:column="25">(<argument><expr><name pos:line="80" pos:column="26">username<pos:position pos:line="80" pos:column="34"/></name></expr></argument>)<pos:position pos:line="80" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="36"/></expr_stmt>

        <if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><operator pos:line="82" pos:column="13">(<pos:position pos:line="82" pos:column="14"/></operator><ternary><condition><expr><name pos:line="82" pos:column="14">use_global<pos:position pos:line="82" pos:column="24"/></name></expr> ?<pos:position pos:line="82" pos:column="26"/></condition><then pos:line="82" pos:column="26"> <expr><call><name pos:line="82" pos:column="27">Valid_Global_Groups<pos:position pos:line="82" pos:column="46"/></name><argument_list pos:line="82" pos:column="46">(<argument><expr><name pos:line="82" pos:column="47">username<pos:position pos:line="82" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="57">groups<pos:position pos:line="82" pos:column="63"/></name></expr></argument>)<pos:position pos:line="82" pos:column="64"/></argument_list></call></expr> <pos:position pos:line="82" pos:column="65"/></then><else pos:line="82" pos:column="65">: <expr><call><name pos:line="82" pos:column="67">Valid_Local_Groups<pos:position pos:line="82" pos:column="85"/></name><argument_list pos:line="82" pos:column="85">(<argument><expr><name pos:line="82" pos:column="86">username<pos:position pos:line="82" pos:column="94"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="96">groups<pos:position pos:line="82" pos:column="102"/></name></expr></argument>)<pos:position pos:line="82" pos:column="103"/></argument_list></call></expr></else></ternary><operator pos:line="82" pos:column="103">)<pos:position pos:line="82" pos:column="104"/></operator></expr>)<pos:position pos:line="82" pos:column="105"/></condition><then pos:line="82" pos:column="105"> <block pos:line="82" pos:column="106">{
            <expr_stmt><expr><call><name pos:line="83" pos:column="13">SEND_OK<pos:position pos:line="83" pos:column="20"/></name><argument_list pos:line="83" pos:column="20">(<argument><expr><literal type="string" pos:line="83" pos:column="21">""<pos:position pos:line="83" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="84" pos:column="10"/></block></then> <else pos:line="84" pos:column="11">else <block pos:line="84" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="85" pos:column="13">SEND_ERR<pos:position pos:line="85" pos:column="21"/></name><argument_list pos:line="85" pos:column="21">(<argument><expr><literal type="string" pos:line="85" pos:column="22">""<pos:position pos:line="85" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="86" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name pos:line="87" pos:column="9">err<pos:position pos:line="87" pos:column="12"/></name> <operator pos:line="87" pos:column="13">=<pos:position pos:line="87" pos:column="14"/></operator> <literal type="number" pos:line="87" pos:column="15">0<pos:position pos:line="87" pos:column="16"/></literal></expr>;<pos:position pos:line="87" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="88" pos:column="6"/></block></while>
    <return pos:line="89" pos:column="5">return <expr><literal type="number" pos:line="89" pos:column="12">0<pos:position pos:line="89" pos:column="13"/></literal></expr>;<pos:position pos:line="89" pos:column="14"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
