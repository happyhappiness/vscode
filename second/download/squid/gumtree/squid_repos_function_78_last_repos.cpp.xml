<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_78_last_repos.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name><modifier pos:line="1" pos:column="11">*<pos:position pos:line="1" pos:column="12"/></modifier></type>
<name pos:line="2" pos:column="1">my_sock_fd2a<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">( <parameter><decl><type><name pos:line="2" pos:column="15">int<pos:position pos:line="2" pos:column="18"/></name></type> <name pos:line="2" pos:column="19">fd<pos:position pos:line="2" pos:column="21"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="23">SockAddress<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">buffer<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">bool<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">peer<pos:position pos:line="2" pos:column="52"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="54"/></parameter_list>
<comment type="line" pos:line="3" pos:column="1">// purpose: thread-safely convert IPv4 socket FD associated address</comment>
<comment type="line" pos:line="4" pos:column="1">//          to ASCII representation</comment>
<comment type="line" pos:line="5" pos:column="1">// paramtr: fd (IN): open socket FD</comment>
<comment type="line" pos:line="6" pos:column="1">//          buffer (OUT): storage area</comment>
<comment type="line" pos:line="7" pos:column="1">//          peer (IN): true, use peer (remote) socket pair</comment>
<comment type="line" pos:line="8" pos:column="1">//                     false, use own (local) socket pair</comment>
<comment type="line" pos:line="9" pos:column="1">// returns: NULL in case of error, or pointer to buffer otherwise</comment>
<comment type="line" pos:line="10" pos:column="1">//          Refer to errno in case of error (usually unconnected fd...)</comment>
<block pos:line="11" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">struct<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">sockaddr_in<pos:position pos:line="12" pos:column="23"/></name></name></type> <name pos:line="12" pos:column="24">socket<pos:position pos:line="12" pos:column="30"/></name></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">socklen_t<pos:position pos:line="13" pos:column="14"/></name></type> <name pos:line="13" pos:column="15">len<pos:position pos:line="13" pos:column="18"/></name> <init pos:line="13" pos:column="19">= <expr><sizeof pos:line="13" pos:column="21">sizeof<argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">socket<pos:position pos:line="13" pos:column="34"/></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="13" pos:column="36"/></decl_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">( <expr><operator pos:line="15" pos:column="10">(<pos:position pos:line="15" pos:column="11"/></operator><ternary><condition><expr><name pos:line="15" pos:column="11">peer<pos:position pos:line="15" pos:column="15"/></name></expr> ?<pos:position pos:line="15" pos:column="17"/></condition><then pos:line="15" pos:column="17"> <expr><call><name pos:line="15" pos:column="18">getpeername<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">( <argument><expr><name pos:line="15" pos:column="31">fd<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="35">(<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="36">SA<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">*<pos:position pos:line="15" pos:column="39"/></operator><operator pos:line="15" pos:column="39">)<pos:position pos:line="15" pos:column="40"/></operator> <operator pos:line="15" pos:column="41">&amp;<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="42">socket<pos:position pos:line="15" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="50">&amp;<pos:position pos:line="15" pos:column="55"/></operator><name pos:line="15" pos:column="51">len<pos:position pos:line="15" pos:column="54"/></name></expr></argument> )<pos:position pos:line="15" pos:column="56"/></argument_list></call></expr> <pos:position pos:line="15" pos:column="57"/></then><else pos:line="15" pos:column="57">:
            <expr><call><name pos:line="16" pos:column="13">getsockname<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">( <argument><expr><name pos:line="16" pos:column="26">fd<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="30">(<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="31">SA<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">*<pos:position pos:line="16" pos:column="34"/></operator><operator pos:line="16" pos:column="34">)<pos:position pos:line="16" pos:column="35"/></operator> <operator pos:line="16" pos:column="36">&amp;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="37">socket<pos:position pos:line="16" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="45">&amp;<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="46">len<pos:position pos:line="16" pos:column="49"/></name></expr></argument> )<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr></else></ternary><operator pos:line="16" pos:column="51">)<pos:position pos:line="16" pos:column="52"/></operator> <operator pos:line="16" pos:column="53">==<pos:position pos:line="16" pos:column="55"/></operator> <operator pos:line="16" pos:column="56">-<pos:position pos:line="16" pos:column="57"/></operator><literal type="number" pos:line="16" pos:column="57">1<pos:position pos:line="16" pos:column="58"/></literal></expr> )<pos:position pos:line="16" pos:column="60"/></condition><then pos:line="16" pos:column="60">
        <block type="pseudo"><return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">NULL<pos:position pos:line="17" pos:column="20"/></name></expr>;<pos:position pos:line="17" pos:column="21"/></return></block></then>
    <else pos:line="18" pos:column="5">else
        <block type="pseudo"><return pos:line="19" pos:column="9">return <expr><call><name pos:line="19" pos:column="16">my_sock_ntoa<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">( <argument><expr><name pos:line="19" pos:column="30">socket<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">buffer<pos:position pos:line="19" pos:column="44"/></name></expr></argument> )<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></return></block></else></if>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
