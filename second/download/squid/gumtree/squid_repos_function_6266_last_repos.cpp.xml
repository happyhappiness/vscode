<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6266_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">CommIO<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">Initialize<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name><name pos:line="4" pos:column="9">CommIO<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">::<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">Initialized<pos:position pos:line="4" pos:column="28"/></name></name></expr>)<pos:position pos:line="4" pos:column="29"/></condition><then pos:line="4" pos:column="29">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="7" pos:column="5">/* Initialize done pipe signal */</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name><name pos:line="8" pos:column="9">DonePipe<pos:position pos:line="8" pos:column="17"/></name><index pos:line="8" pos:column="17">[<expr><literal type="number" pos:line="8" pos:column="18">2<pos:position pos:line="8" pos:column="19"/></literal></expr>]<pos:position pos:line="8" pos:column="20"/></index></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name pos:line="9" pos:column="9">pipe<pos:position pos:line="9" pos:column="13"/></name><argument_list pos:line="9" pos:column="13">(<argument><expr><name pos:line="9" pos:column="14">DonePipe<pos:position pos:line="9" pos:column="22"/></name></expr></argument>)<pos:position pos:line="9" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24"> <block pos:line="9" pos:column="25">{}<pos:position pos:line="9" pos:column="27"/></block></then></if>
    <expr_stmt><expr><name pos:line="10" pos:column="5">DoneFD<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <name><name pos:line="10" pos:column="14">DonePipe<pos:position pos:line="10" pos:column="22"/></name><index pos:line="10" pos:column="22">[<expr><literal type="number" pos:line="10" pos:column="23">1<pos:position pos:line="10" pos:column="24"/></literal></expr>]<pos:position pos:line="10" pos:column="25"/></index></name></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">DoneReadFD<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <name><name pos:line="11" pos:column="18">DonePipe<pos:position pos:line="11" pos:column="26"/></name><index pos:line="11" pos:column="26">[<expr><literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr>]<pos:position pos:line="11" pos:column="29"/></index></name></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">fd_open<pos:position pos:line="12" pos:column="12"/></name><argument_list pos:line="12" pos:column="12">(<argument><expr><name pos:line="12" pos:column="13">DoneReadFD<pos:position pos:line="12" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="25">FD_PIPE<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="34">"async-io completion event: main"<pos:position pos:line="12" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">fd_open<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">DoneFD<pos:position pos:line="13" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="21">FD_PIPE<pos:position pos:line="13" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="30">"async-io completion event: threads"<pos:position pos:line="13" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">commSetNonBlocking<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">DoneReadFD<pos:position pos:line="14" pos:column="34"/></name></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">commSetNonBlocking<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">DoneFD<pos:position pos:line="15" pos:column="30"/></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">Comm<pos:position pos:line="16" pos:column="9"/></name><operator pos:line="16" pos:column="9">::<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">SetSelect<pos:position pos:line="16" pos:column="20"/></name></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">DoneReadFD<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="33">COMM_SELECT_READ<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">NULLFDHandler<pos:position pos:line="16" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="66">NULL<pos:position pos:line="16" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="72">0<pos:position pos:line="16" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">Initialized<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <literal type="boolean" pos:line="17" pos:column="19">true<pos:position pos:line="17" pos:column="23"/></literal></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
