<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1152_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">parse_access_log<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">customlog<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier><modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type> <name pos:line="2" pos:column="31">logs<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">filename<pos:position pos:line="4" pos:column="25"/></name></decl>, <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="28">logdef_name<pos:position pos:line="4" pos:column="39"/></name></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">customlog<pos:position pos:line="5" pos:column="14"/></name> <modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">cl<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">logformat<pos:position pos:line="6" pos:column="14"/></name> <modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">lf<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">cl<pos:position pos:line="8" pos:column="7"/></name> <operator pos:line="8" pos:column="8">=<pos:position pos:line="8" pos:column="9"/></operator> <operator pos:line="8" pos:column="10">(<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">customlog<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></operator><operator pos:line="8" pos:column="22">)<pos:position pos:line="8" pos:column="23"/></operator><call><name pos:line="8" pos:column="23">xcalloc<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><literal type="number" pos:line="8" pos:column="31">1<pos:position pos:line="8" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="34">sizeof<argument_list pos:line="8" pos:column="40">(<argument><expr><operator pos:line="8" pos:column="41">*<pos:position pos:line="8" pos:column="42"/></operator><name pos:line="8" pos:column="42">cl<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="47"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">(<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">filename<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">strtok<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">NULL<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">w_space<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call><operator pos:line="10" pos:column="42">)<pos:position pos:line="10" pos:column="43"/></operator> <operator pos:line="10" pos:column="44">==<pos:position pos:line="10" pos:column="46"/></operator> <name pos:line="10" pos:column="47">NULL<pos:position pos:line="10" pos:column="51"/></name></expr>)<pos:position pos:line="10" pos:column="52"/></condition><then pos:line="10" pos:column="52"> <block pos:line="10" pos:column="53">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">self_destruct<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">strcmp<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">filename<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="26">"none"<pos:position pos:line="15" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call> <operator pos:line="15" pos:column="34">==<pos:position pos:line="15" pos:column="36"/></operator> <literal type="number" pos:line="15" pos:column="37">0<pos:position pos:line="15" pos:column="38"/></literal></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39"> <block pos:line="15" pos:column="40">{
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">cl<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">-&gt;<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="13">type<pos:position pos:line="16" pos:column="17"/></name></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">CLF_NONE<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">aclParseAclList<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">LegacyParser<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><name><name pos:line="17" pos:column="40">cl<pos:position pos:line="17" pos:column="42"/></name><operator pos:line="17" pos:column="42">-&gt;<pos:position pos:line="17" pos:column="47"/></operator><name pos:line="17" pos:column="44">aclList<pos:position pos:line="17" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
        <while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><operator pos:line="18" pos:column="16">*<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">logs<pos:position pos:line="18" pos:column="21"/></name></expr>)<pos:position pos:line="18" pos:column="22"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="13">logs<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <operator pos:line="19" pos:column="20">&amp;<pos:position pos:line="19" pos:column="25"/></operator><name><operator pos:line="19" pos:column="21">(<pos:position pos:line="19" pos:column="22"/></operator><operator pos:line="19" pos:column="22">*<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">logs<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">)<pos:position pos:line="19" pos:column="28"/></operator><operator pos:line="19" pos:column="28">-&gt;<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="30">next<pos:position pos:line="19" pos:column="34"/></name></name></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt></block></while>
        <expr_stmt><expr><operator pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">logs<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <name pos:line="20" pos:column="17">cl<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></expr_stmt>
        <return pos:line="21" pos:column="9">return;<pos:position pos:line="21" pos:column="16"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><operator pos:line="24" pos:column="9">(<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">logdef_name<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <call><name pos:line="24" pos:column="24">strtok<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name pos:line="24" pos:column="31">NULL<pos:position pos:line="24" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="37">w_space<pos:position pos:line="24" pos:column="44"/></name></expr></argument>)<pos:position pos:line="24" pos:column="45"/></argument_list></call><operator pos:line="24" pos:column="45">)<pos:position pos:line="24" pos:column="46"/></operator> <operator pos:line="24" pos:column="47">==<pos:position pos:line="24" pos:column="49"/></operator> <name pos:line="24" pos:column="50">NULL<pos:position pos:line="24" pos:column="54"/></name></expr>)<pos:position pos:line="24" pos:column="55"/></condition><then pos:line="24" pos:column="55">
        <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="9">logdef_name<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <literal type="string" pos:line="25" pos:column="23">"auto"<pos:position pos:line="25" pos:column="29"/></literal></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">debugs<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="number" pos:line="27" pos:column="12">3<pos:position pos:line="27" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="15">9<pos:position pos:line="27" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="18">"Log definition name '"<pos:position pos:line="27" pos:column="41"/></literal> <operator pos:line="27" pos:column="42">&lt;&lt;<pos:position pos:line="27" pos:column="50"/></operator> <name pos:line="27" pos:column="45">logdef_name<pos:position pos:line="27" pos:column="56"/></name> <operator pos:line="27" pos:column="57">&lt;&lt;<pos:position pos:line="27" pos:column="65"/></operator> <literal type="string" pos:line="27" pos:column="60">"' file '"<pos:position pos:line="27" pos:column="70"/></literal> <operator pos:line="27" pos:column="71">&lt;&lt;<pos:position pos:line="27" pos:column="79"/></operator> <name pos:line="27" pos:column="74">filename<pos:position pos:line="27" pos:column="82"/></name> <operator pos:line="27" pos:column="83">&lt;&lt;<pos:position pos:line="27" pos:column="91"/></operator> <literal type="string" pos:line="27" pos:column="86">"'"<pos:position pos:line="27" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="91"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="29" pos:column="5">cl<pos:position pos:line="29" pos:column="7"/></name><operator pos:line="29" pos:column="7">-&gt;<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="9">filename<pos:position pos:line="29" pos:column="17"/></name></name> <operator pos:line="29" pos:column="18">=<pos:position pos:line="29" pos:column="19"/></operator> <call><name pos:line="29" pos:column="20">xstrdup<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">filename<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* look for the definition pointer corresponding to this name */</comment>
    <expr_stmt><expr><name pos:line="32" pos:column="5">lf<pos:position pos:line="32" pos:column="7"/></name> <operator pos:line="32" pos:column="8">=<pos:position pos:line="32" pos:column="9"/></operator> <name><name pos:line="32" pos:column="10">Config<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">.<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">Log<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">.<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="21">logformats<pos:position pos:line="32" pos:column="31"/></name></name></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt>

    <while pos:line="34" pos:column="5">while <condition pos:line="34" pos:column="11">(<expr><name pos:line="34" pos:column="12">lf<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">!=<pos:position pos:line="34" pos:column="17"/></operator> <name pos:line="34" pos:column="18">NULL<pos:position pos:line="34" pos:column="22"/></name></expr>)<pos:position pos:line="34" pos:column="23"/></condition> <block pos:line="34" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">debugs<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="number" pos:line="35" pos:column="16">3<pos:position pos:line="35" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="19">9<pos:position pos:line="35" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="22">"Comparing against '"<pos:position pos:line="35" pos:column="43"/></literal> <operator pos:line="35" pos:column="44">&lt;&lt;<pos:position pos:line="35" pos:column="52"/></operator> <name><name pos:line="35" pos:column="47">lf<pos:position pos:line="35" pos:column="49"/></name><operator pos:line="35" pos:column="49">-&gt;<pos:position pos:line="35" pos:column="54"/></operator><name pos:line="35" pos:column="51">name<pos:position pos:line="35" pos:column="55"/></name></name> <operator pos:line="35" pos:column="56">&lt;&lt;<pos:position pos:line="35" pos:column="64"/></operator> <literal type="string" pos:line="35" pos:column="59">"'"<pos:position pos:line="35" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="64"/></expr_stmt>

        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">strcmp<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><name><name pos:line="37" pos:column="20">lf<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">-&gt;<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="24">name<pos:position pos:line="37" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="30">logdef_name<pos:position pos:line="37" pos:column="41"/></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call> <operator pos:line="37" pos:column="43">==<pos:position pos:line="37" pos:column="45"/></operator> <literal type="number" pos:line="37" pos:column="46">0<pos:position pos:line="37" pos:column="47"/></literal></expr>)<pos:position pos:line="37" pos:column="48"/></condition><then pos:line="37" pos:column="48">
            <block type="pseudo"><break pos:line="38" pos:column="13">break;<pos:position pos:line="38" pos:column="19"/></break></block></then></if>

        <expr_stmt><expr><name pos:line="40" pos:column="9">lf<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">=<pos:position pos:line="40" pos:column="13"/></operator> <name><name pos:line="40" pos:column="14">lf<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">-&gt;<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="18">next<pos:position pos:line="40" pos:column="22"/></name></name></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></while>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">lf<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">!=<pos:position pos:line="43" pos:column="14"/></operator> <name pos:line="43" pos:column="15">NULL<pos:position pos:line="43" pos:column="19"/></name></expr>)<pos:position pos:line="43" pos:column="20"/></condition><then pos:line="43" pos:column="20"> <block pos:line="43" pos:column="21">{
        <expr_stmt><expr><name><name pos:line="44" pos:column="9">cl<pos:position pos:line="44" pos:column="11"/></name><operator pos:line="44" pos:column="11">-&gt;<pos:position pos:line="44" pos:column="16"/></operator><name pos:line="44" pos:column="13">type<pos:position pos:line="44" pos:column="17"/></name></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <name pos:line="44" pos:column="20">CLF_CUSTOM<pos:position pos:line="44" pos:column="30"/></name></expr>;<pos:position pos:line="44" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="45" pos:column="9">cl<pos:position pos:line="45" pos:column="11"/></name><operator pos:line="45" pos:column="11">-&gt;<pos:position pos:line="45" pos:column="16"/></operator><name pos:line="45" pos:column="13">logFormat<pos:position pos:line="45" pos:column="22"/></name></name> <operator pos:line="45" pos:column="23">=<pos:position pos:line="45" pos:column="24"/></operator> <name pos:line="45" pos:column="25">lf<pos:position pos:line="45" pos:column="27"/></name></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then> <elseif pos:line="46" pos:column="7">else <if pos:line="46" pos:column="12">if <condition pos:line="46" pos:column="15">(<expr><call><name pos:line="46" pos:column="16">strcmp<pos:position pos:line="46" pos:column="22"/></name><argument_list pos:line="46" pos:column="22">(<argument><expr><name pos:line="46" pos:column="23">logdef_name<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="36">"auto"<pos:position pos:line="46" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></call> <operator pos:line="46" pos:column="44">==<pos:position pos:line="46" pos:column="46"/></operator> <literal type="number" pos:line="46" pos:column="47">0<pos:position pos:line="46" pos:column="48"/></literal></expr>)<pos:position pos:line="46" pos:column="49"/></condition><then pos:line="46" pos:column="49"> <block pos:line="46" pos:column="50">{
        <expr_stmt><expr><name><name pos:line="47" pos:column="9">cl<pos:position pos:line="47" pos:column="11"/></name><operator pos:line="47" pos:column="11">-&gt;<pos:position pos:line="47" pos:column="16"/></operator><name pos:line="47" pos:column="13">type<pos:position pos:line="47" pos:column="17"/></name></name> <operator pos:line="47" pos:column="18">=<pos:position pos:line="47" pos:column="19"/></operator> <name pos:line="47" pos:column="20">CLF_AUTO<pos:position pos:line="47" pos:column="28"/></name></expr>;<pos:position pos:line="47" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if></elseif> <elseif pos:line="48" pos:column="7">else <if pos:line="48" pos:column="12">if <condition pos:line="48" pos:column="15">(<expr><call><name pos:line="48" pos:column="16">strcmp<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><name pos:line="48" pos:column="23">logdef_name<pos:position pos:line="48" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="36">"squid"<pos:position pos:line="48" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="44"/></argument_list></call> <operator pos:line="48" pos:column="45">==<pos:position pos:line="48" pos:column="47"/></operator> <literal type="number" pos:line="48" pos:column="48">0<pos:position pos:line="48" pos:column="49"/></literal></expr>)<pos:position pos:line="48" pos:column="50"/></condition><then pos:line="48" pos:column="50"> <block pos:line="48" pos:column="51">{
        <expr_stmt><expr><name><name pos:line="49" pos:column="9">cl<pos:position pos:line="49" pos:column="11"/></name><operator pos:line="49" pos:column="11">-&gt;<pos:position pos:line="49" pos:column="16"/></operator><name pos:line="49" pos:column="13">type<pos:position pos:line="49" pos:column="17"/></name></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <name pos:line="49" pos:column="20">CLF_SQUID<pos:position pos:line="49" pos:column="29"/></name></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if></elseif> <elseif pos:line="50" pos:column="7">else <if pos:line="50" pos:column="12">if <condition pos:line="50" pos:column="15">(<expr><call><name pos:line="50" pos:column="16">strcmp<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><name pos:line="50" pos:column="23">logdef_name<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="36">"common"<pos:position pos:line="50" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="45"/></argument_list></call> <operator pos:line="50" pos:column="46">==<pos:position pos:line="50" pos:column="48"/></operator> <literal type="number" pos:line="50" pos:column="49">0<pos:position pos:line="50" pos:column="50"/></literal></expr>)<pos:position pos:line="50" pos:column="51"/></condition><then pos:line="50" pos:column="51"> <block pos:line="50" pos:column="52">{
        <expr_stmt><expr><name><name pos:line="51" pos:column="9">cl<pos:position pos:line="51" pos:column="11"/></name><operator pos:line="51" pos:column="11">-&gt;<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="13">type<pos:position pos:line="51" pos:column="17"/></name></name> <operator pos:line="51" pos:column="18">=<pos:position pos:line="51" pos:column="19"/></operator> <name pos:line="51" pos:column="20">CLF_COMMON<pos:position pos:line="51" pos:column="30"/></name></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>
<cpp:if pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">if<pos:position pos:line="52" pos:column="4"/></cpp:directive> <expr><name pos:line="52" pos:column="5">ICAP_CLIENT<pos:position pos:line="52" pos:column="16"/></name></expr></cpp:if>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if></elseif> <elseif pos:line="53" pos:column="7">else <if pos:line="53" pos:column="12">if <condition pos:line="53" pos:column="15">(<expr><call><name pos:line="53" pos:column="16">strcmp<pos:position pos:line="53" pos:column="22"/></name><argument_list pos:line="53" pos:column="22">(<argument><expr><name pos:line="53" pos:column="23">logdef_name<pos:position pos:line="53" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="36">"icap_squid"<pos:position pos:line="53" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="49"/></argument_list></call> <operator pos:line="53" pos:column="50">==<pos:position pos:line="53" pos:column="52"/></operator> <literal type="number" pos:line="53" pos:column="53">0<pos:position pos:line="53" pos:column="54"/></literal></expr>)<pos:position pos:line="53" pos:column="55"/></condition><then pos:line="53" pos:column="55"> <block pos:line="53" pos:column="56">{
        <expr_stmt><expr><name><name pos:line="54" pos:column="9">cl<pos:position pos:line="54" pos:column="11"/></name><operator pos:line="54" pos:column="11">-&gt;<pos:position pos:line="54" pos:column="16"/></operator><name pos:line="54" pos:column="13">type<pos:position pos:line="54" pos:column="17"/></name></name> <operator pos:line="54" pos:column="18">=<pos:position pos:line="54" pos:column="19"/></operator> <name pos:line="54" pos:column="20">CLF_ICAP_SQUID<pos:position pos:line="54" pos:column="34"/></name></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if></elseif> <else pos:line="56" pos:column="7">else <block pos:line="56" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">debugs<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><literal type="number" pos:line="57" pos:column="16">3<pos:position pos:line="57" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="19">0<pos:position pos:line="57" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="22">"Log format '"<pos:position pos:line="57" pos:column="36"/></literal> <operator pos:line="57" pos:column="37">&lt;&lt;<pos:position pos:line="57" pos:column="45"/></operator> <name pos:line="57" pos:column="40">logdef_name<pos:position pos:line="57" pos:column="51"/></name> <operator pos:line="57" pos:column="52">&lt;&lt;<pos:position pos:line="57" pos:column="60"/></operator> <literal type="string" pos:line="57" pos:column="55">"' is not defined"<pos:position pos:line="57" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">self_destruct<pos:position pos:line="58" pos:column="22"/></name><argument_list pos:line="58" pos:column="22">()<pos:position pos:line="58" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="25"/></expr_stmt>
        <return pos:line="59" pos:column="9">return;<pos:position pos:line="59" pos:column="16"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="62" pos:column="5">aclParseAclList<pos:position pos:line="62" pos:column="20"/></name><argument_list pos:line="62" pos:column="20">(<argument><expr><name pos:line="62" pos:column="21">LegacyParser<pos:position pos:line="62" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="35">&amp;<pos:position pos:line="62" pos:column="40"/></operator><name><name pos:line="62" pos:column="36">cl<pos:position pos:line="62" pos:column="38"/></name><operator pos:line="62" pos:column="38">-&gt;<pos:position pos:line="62" pos:column="43"/></operator><name pos:line="62" pos:column="40">aclList<pos:position pos:line="62" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="49"/></expr_stmt>

    <while pos:line="64" pos:column="5">while <condition pos:line="64" pos:column="11">(<expr><operator pos:line="64" pos:column="12">*<pos:position pos:line="64" pos:column="13"/></operator><name pos:line="64" pos:column="13">logs<pos:position pos:line="64" pos:column="17"/></name></expr>)<pos:position pos:line="64" pos:column="18"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="9">logs<pos:position pos:line="65" pos:column="13"/></name> <operator pos:line="65" pos:column="14">=<pos:position pos:line="65" pos:column="15"/></operator> <operator pos:line="65" pos:column="16">&amp;<pos:position pos:line="65" pos:column="21"/></operator><name><operator pos:line="65" pos:column="17">(<pos:position pos:line="65" pos:column="18"/></operator><operator pos:line="65" pos:column="18">*<pos:position pos:line="65" pos:column="19"/></operator><name pos:line="65" pos:column="19">logs<pos:position pos:line="65" pos:column="23"/></name><operator pos:line="65" pos:column="23">)<pos:position pos:line="65" pos:column="24"/></operator><operator pos:line="65" pos:column="24">-&gt;<pos:position pos:line="65" pos:column="29"/></operator><name pos:line="65" pos:column="26">next<pos:position pos:line="65" pos:column="30"/></name></name></expr>;<pos:position pos:line="65" pos:column="31"/></expr_stmt></block></while>

    <expr_stmt><expr><operator pos:line="67" pos:column="5">*<pos:position pos:line="67" pos:column="6"/></operator><name pos:line="67" pos:column="6">logs<pos:position pos:line="67" pos:column="10"/></name> <operator pos:line="67" pos:column="11">=<pos:position pos:line="67" pos:column="12"/></operator> <name pos:line="67" pos:column="13">cl<pos:position pos:line="67" pos:column="15"/></name></expr>;<pos:position pos:line="67" pos:column="16"/></expr_stmt>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
