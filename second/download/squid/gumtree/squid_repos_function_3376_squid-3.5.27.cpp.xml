<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3376_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">PconnPool<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">closeN<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">n<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">hash_table<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">hid<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><name pos:line="4" pos:column="23">table<pos:position pos:line="4" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">hash_first<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">hid<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// close N connections, one per list, to treat all lists "fairly"</comment>
    <for pos:line="8" pos:column="5">for <control pos:line="8" pos:column="9">(<init><decl><type><name pos:line="8" pos:column="10">int<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">i<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="20"/></init> <condition><expr><name pos:line="8" pos:column="21">i<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">&lt;<pos:position pos:line="8" pos:column="27"/></operator> <name pos:line="8" pos:column="25">n<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">&amp;&amp;<pos:position pos:line="8" pos:column="37"/></operator> <call><name pos:line="8" pos:column="30">count<pos:position pos:line="8" pos:column="35"/></name><argument_list pos:line="8" pos:column="35">()<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></condition> <incr><expr><operator pos:line="8" pos:column="39">++<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="41">i<pos:position pos:line="8" pos:column="42"/></name></expr></incr>)<pos:position pos:line="8" pos:column="43"/></control> <block pos:line="8" pos:column="44">{

        <decl_stmt><decl><type><name pos:line="10" pos:column="9">hash_link<pos:position pos:line="10" pos:column="18"/></name> <modifier pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></modifier></type><name pos:line="10" pos:column="20">current<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><call><name pos:line="10" pos:column="30">hash_next<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><name pos:line="10" pos:column="40">hid<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="45"/></decl_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">current<pos:position pos:line="11" pos:column="21"/></name></expr>)<pos:position pos:line="11" pos:column="22"/></condition><then pos:line="11" pos:column="22"> <block pos:line="11" pos:column="23">{
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">hash_first<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">hid<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name pos:line="13" pos:column="13">current<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <call><name pos:line="13" pos:column="23">hash_next<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">hid<pos:position pos:line="13" pos:column="36"/></name></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">Must<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><name pos:line="14" pos:column="18">current<pos:position pos:line="14" pos:column="25"/></name></expr></argument>)<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt> <comment type="line" pos:line="14" pos:column="28">// must have one because the count() was positive</comment>
        }<pos:position pos:line="15" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="17" pos:column="9">// may delete current</comment>
        <expr_stmt><expr><cast type="reinterpret" pos:line="18" pos:column="9">reinterpret_cast<argument_list type="generic" pos:line="18" pos:column="25">&lt;<argument><expr><name pos:line="18" pos:column="26">IdleConnList<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">*<pos:position pos:line="18" pos:column="39"/></operator></expr></argument>&gt;<pos:position pos:line="18" pos:column="43"/></argument_list><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">current<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></cast><operator pos:line="18" pos:column="49">-&gt;<pos:position pos:line="18" pos:column="54"/></operator><call><name pos:line="18" pos:column="51">closeN<pos:position pos:line="18" pos:column="57"/></name><argument_list pos:line="18" pos:column="57">(<argument><expr><literal type="number" pos:line="18" pos:column="58">1<pos:position pos:line="18" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></for>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
