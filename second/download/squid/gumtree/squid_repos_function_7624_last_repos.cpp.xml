<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7624_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type>
<name pos:line="2" pos:column="1">base64_encode_update<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name><name pos:line="2" pos:column="22">struct<pos:position pos:line="2" pos:column="28"/></name> <name pos:line="2" pos:column="29">base64_encode_ctx<pos:position pos:line="2" pos:column="46"/></name></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">ctx<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="3" pos:column="22">uint8_t<pos:position pos:line="3" pos:column="29"/></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">dst<pos:position pos:line="3" pos:column="34"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="4" pos:column="22">size_t<pos:position pos:line="4" pos:column="28"/></name></type> <name pos:line="4" pos:column="29">length<pos:position pos:line="4" pos:column="35"/></name></decl></parameter>,
                     <parameter><decl><type><specifier pos:line="5" pos:column="22">const<pos:position pos:line="5" pos:column="27"/></specifier> <name pos:line="5" pos:column="28">uint8_t<pos:position pos:line="5" pos:column="35"/></name> <modifier pos:line="5" pos:column="36">*<pos:position pos:line="5" pos:column="37"/></modifier></type><name pos:line="5" pos:column="37">src<pos:position pos:line="5" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="41"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">size_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">done<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">size_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">left<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><name pos:line="8" pos:column="19">length<pos:position pos:line="8" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">unsigned<pos:position pos:line="9" pos:column="13"/></name></type> <name pos:line="9" pos:column="14">left_over<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">size_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">bulk<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>

    <while pos:line="12" pos:column="5">while <condition pos:line="12" pos:column="11">(<expr><name><name pos:line="12" pos:column="12">ctx<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">bits<pos:position pos:line="12" pos:column="21"/></name></name> <operator pos:line="12" pos:column="22">&amp;&amp;<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="25">left<pos:position pos:line="12" pos:column="29"/></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition> <block pos:line="12" pos:column="31">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">left<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">--<pos:position pos:line="13" pos:column="15"/></operator></expr>;<pos:position pos:line="13" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">done<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">+=<pos:position pos:line="14" pos:column="16"/></operator> <call><name pos:line="14" pos:column="17">base64_encode_single<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><name pos:line="14" pos:column="38">ctx<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="43">dst<pos:position pos:line="14" pos:column="46"/></name> <operator pos:line="14" pos:column="47">+<pos:position pos:line="14" pos:column="48"/></operator> <name pos:line="14" pos:column="49">done<pos:position pos:line="14" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="55">*<pos:position pos:line="14" pos:column="56"/></operator><name pos:line="14" pos:column="56">src<pos:position pos:line="14" pos:column="59"/></name><operator pos:line="14" pos:column="59">++<pos:position pos:line="14" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></while>

    <expr_stmt><expr><name pos:line="17" pos:column="5">left_over<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">left<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">%<pos:position pos:line="17" pos:column="23"/></operator> <literal type="number" pos:line="17" pos:column="24">3<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">bulk<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <name pos:line="18" pos:column="12">left<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">-<pos:position pos:line="18" pos:column="18"/></operator> <name pos:line="18" pos:column="19">left_over<pos:position pos:line="18" pos:column="28"/></name></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">bulk<pos:position pos:line="20" pos:column="13"/></name></expr>)<pos:position pos:line="20" pos:column="14"/></condition><then pos:line="20" pos:column="14"> <block pos:line="20" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">assert<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><operator pos:line="21" pos:column="16">!<pos:position pos:line="21" pos:column="17"/></operator><operator pos:line="21" pos:column="17">(<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">bulk<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">%<pos:position pos:line="21" pos:column="24"/></operator> <literal type="number" pos:line="21" pos:column="25">3<pos:position pos:line="21" pos:column="26"/></literal><operator pos:line="21" pos:column="26">)<pos:position pos:line="21" pos:column="27"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="23" pos:column="9">base64_encode_raw<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><name pos:line="23" pos:column="27">dst<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">+<pos:position pos:line="23" pos:column="32"/></operator> <name pos:line="23" pos:column="33">done<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="39">bulk<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="45">src<pos:position pos:line="23" pos:column="48"/></name></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name pos:line="24" pos:column="9">done<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">+=<pos:position pos:line="24" pos:column="16"/></operator> <call><name pos:line="24" pos:column="17">BASE64_ENCODE_RAW_LENGTH<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name pos:line="24" pos:column="42">bulk<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">src<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">+=<pos:position pos:line="25" pos:column="15"/></operator> <name pos:line="25" pos:column="16">bulk<pos:position pos:line="25" pos:column="20"/></name></expr>;<pos:position pos:line="25" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">left<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <name pos:line="26" pos:column="16">left_over<pos:position pos:line="26" pos:column="25"/></name></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <while pos:line="29" pos:column="5">while <condition pos:line="29" pos:column="11">(<expr><name pos:line="29" pos:column="12">left<pos:position pos:line="29" pos:column="16"/></name></expr>)<pos:position pos:line="29" pos:column="17"/></condition> <block pos:line="29" pos:column="18">{
        <expr_stmt><expr><name pos:line="30" pos:column="9">left<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">--<pos:position pos:line="30" pos:column="15"/></operator></expr>;<pos:position pos:line="30" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><name pos:line="31" pos:column="9">done<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">+=<pos:position pos:line="31" pos:column="16"/></operator> <call><name pos:line="31" pos:column="17">base64_encode_single<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><name pos:line="31" pos:column="38">ctx<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">dst<pos:position pos:line="31" pos:column="46"/></name> <operator pos:line="31" pos:column="47">+<pos:position pos:line="31" pos:column="48"/></operator> <name pos:line="31" pos:column="49">done<pos:position pos:line="31" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="55">*<pos:position pos:line="31" pos:column="56"/></operator><name pos:line="31" pos:column="56">src<pos:position pos:line="31" pos:column="59"/></name><operator pos:line="31" pos:column="59">++<pos:position pos:line="31" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">assert<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><name pos:line="34" pos:column="12">done<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">&lt;=<pos:position pos:line="34" pos:column="22"/></operator> <call><name pos:line="34" pos:column="20">BASE64_ENCODE_LENGTH<pos:position pos:line="34" pos:column="40"/></name><argument_list pos:line="34" pos:column="40">(<argument><expr><name pos:line="34" pos:column="41">length<pos:position pos:line="34" pos:column="47"/></name></expr></argument>)<pos:position pos:line="34" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="50"/></expr_stmt>

    <return pos:line="36" pos:column="5">return <expr><name pos:line="36" pos:column="12">done<pos:position pos:line="36" pos:column="16"/></name></expr>;<pos:position pos:line="36" pos:column="17"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
