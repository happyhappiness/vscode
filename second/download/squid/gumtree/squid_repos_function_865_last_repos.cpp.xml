<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_865_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">setLogformat<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">CustomLog<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">cl<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">logdef_name<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier> <name pos:line="2" pos:column="60">bool<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">dieWhenMissing<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="80"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">cl<pos:position pos:line="4" pos:column="14"/></name></expr></argument>)<pos:position pos:line="4" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">logdef_name<pos:position pos:line="5" pos:column="23"/></name></expr></argument>)<pos:position pos:line="5" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">3<pos:position pos:line="7" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="15">9<pos:position pos:line="7" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="18">"possible "<pos:position pos:line="7" pos:column="29"/></literal> <operator pos:line="7" pos:column="30">&lt;&lt;<pos:position pos:line="7" pos:column="38"/></operator> <name><name pos:line="7" pos:column="33">cl<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">-&gt;<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="37">filename<pos:position pos:line="7" pos:column="45"/></name></name> <operator pos:line="7" pos:column="46">&lt;&lt;<pos:position pos:line="7" pos:column="54"/></operator> <literal type="string" pos:line="7" pos:column="49">" logformat: "<pos:position pos:line="7" pos:column="63"/></literal> <operator pos:line="7" pos:column="64">&lt;&lt;<pos:position pos:line="7" pos:column="72"/></operator> <name pos:line="7" pos:column="67">logdef_name<pos:position pos:line="7" pos:column="78"/></name></expr></argument>)<pos:position pos:line="7" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="80"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">cl<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">type<pos:position pos:line="9" pos:column="17"/></name></name> <operator pos:line="9" pos:column="18">!=<pos:position pos:line="9" pos:column="20"/></operator> <name><name pos:line="9" pos:column="21">Log<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">::<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">Format<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">::<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="34">CLF_UNKNOWN<pos:position pos:line="9" pos:column="45"/></name></name></expr>)<pos:position pos:line="9" pos:column="46"/></condition><then pos:line="9" pos:column="46"> <block pos:line="9" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">3<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="19">DBG_CRITICAL<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="33">"FATAL: Second logformat name in one access_log: "<pos:position pos:line="10" pos:column="83"/></literal> <operator pos:line="10" pos:column="84">&lt;&lt;<pos:position pos:line="10" pos:column="92"/></operator>
               <name pos:line="11" pos:column="16">logdef_name<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">&lt;&lt;<pos:position pos:line="11" pos:column="36"/></operator> <literal type="string" pos:line="11" pos:column="31">" "<pos:position pos:line="11" pos:column="34"/></literal> <operator pos:line="11" pos:column="35">&lt;&lt;<pos:position pos:line="11" pos:column="43"/></operator> <name><name pos:line="11" pos:column="38">cl<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">-&gt;<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="42">type<pos:position pos:line="11" pos:column="46"/></name></name> <operator pos:line="11" pos:column="47">&lt;&lt;<pos:position pos:line="11" pos:column="55"/></operator> <literal type="string" pos:line="11" pos:column="50">" ? "<pos:position pos:line="11" pos:column="55"/></literal> <operator pos:line="11" pos:column="56">&lt;&lt;<pos:position pos:line="11" pos:column="64"/></operator> <name><name pos:line="11" pos:column="59">Log<pos:position pos:line="11" pos:column="62"/></name><operator pos:line="11" pos:column="62">::<pos:position pos:line="11" pos:column="64"/></operator><name pos:line="11" pos:column="64">Format<pos:position pos:line="11" pos:column="70"/></name><operator pos:line="11" pos:column="70">::<pos:position pos:line="11" pos:column="72"/></operator><name pos:line="11" pos:column="72">CLF_NONE<pos:position pos:line="11" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="82"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">self_destruct<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">()<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><literal type="boolean" pos:line="13" pos:column="16">false<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="16" pos:column="5">/* look for the definition pointer corresponding to this name */</comment>
    <decl_stmt><decl><type><name><name pos:line="17" pos:column="5">Format<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">::<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">Format<pos:position pos:line="17" pos:column="19"/></name></name> <modifier pos:line="17" pos:column="20">*<pos:position pos:line="17" pos:column="21"/></modifier></type><name pos:line="17" pos:column="21">lf<pos:position pos:line="17" pos:column="23"/></name> <init pos:line="17" pos:column="24">= <expr><name><name pos:line="17" pos:column="26">Log<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">::<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">TheConfig<pos:position pos:line="17" pos:column="40"/></name><operator pos:line="17" pos:column="40">.<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="41">logformats<pos:position pos:line="17" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="17" pos:column="52"/></decl_stmt>

    <while pos:line="19" pos:column="5">while <condition pos:line="19" pos:column="11">(<expr><name pos:line="19" pos:column="12">lf<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">!=<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">NULL<pos:position pos:line="19" pos:column="22"/></name></expr>)<pos:position pos:line="19" pos:column="23"/></condition> <block pos:line="19" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">3<pos:position pos:line="20" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="19">9<pos:position pos:line="20" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="22">"Comparing against '"<pos:position pos:line="20" pos:column="43"/></literal> <operator pos:line="20" pos:column="44">&lt;&lt;<pos:position pos:line="20" pos:column="52"/></operator> <name><name pos:line="20" pos:column="47">lf<pos:position pos:line="20" pos:column="49"/></name><operator pos:line="20" pos:column="49">-&gt;<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="51">name<pos:position pos:line="20" pos:column="55"/></name></name> <operator pos:line="20" pos:column="56">&lt;&lt;<pos:position pos:line="20" pos:column="64"/></operator> <literal type="string" pos:line="20" pos:column="59">"'"<pos:position pos:line="20" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt>

        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">strcmp<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name><name pos:line="22" pos:column="20">lf<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">-&gt;<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="24">name<pos:position pos:line="22" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="30">logdef_name<pos:position pos:line="22" pos:column="41"/></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call> <operator pos:line="22" pos:column="43">==<pos:position pos:line="22" pos:column="45"/></operator> <literal type="number" pos:line="22" pos:column="46">0<pos:position pos:line="22" pos:column="47"/></literal></expr>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48">
            <block type="pseudo"><break pos:line="23" pos:column="13">break;<pos:position pos:line="23" pos:column="19"/></break></block></then></if>

        <expr_stmt><expr><name pos:line="25" pos:column="9">lf<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <name><name pos:line="25" pos:column="14">lf<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">-&gt;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="18">next<pos:position pos:line="25" pos:column="22"/></name></name></expr>;<pos:position pos:line="25" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></while>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">lf<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">!=<pos:position pos:line="28" pos:column="14"/></operator> <name pos:line="28" pos:column="15">NULL<pos:position pos:line="28" pos:column="19"/></name></expr>)<pos:position pos:line="28" pos:column="20"/></condition><then pos:line="28" pos:column="20"> <block pos:line="28" pos:column="21">{
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">cl<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">-&gt;<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="13">type<pos:position pos:line="29" pos:column="17"/></name></name> <operator pos:line="29" pos:column="18">=<pos:position pos:line="29" pos:column="19"/></operator> <name><name pos:line="29" pos:column="20">Log<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">::<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">Format<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">::<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="33">CLF_CUSTOM<pos:position pos:line="29" pos:column="43"/></name></name></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">cl<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">logFormat<pos:position pos:line="30" pos:column="22"/></name></name> <operator pos:line="30" pos:column="23">=<pos:position pos:line="30" pos:column="24"/></operator> <name pos:line="30" pos:column="25">lf<pos:position pos:line="30" pos:column="27"/></name></expr>;<pos:position pos:line="30" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then> <elseif pos:line="31" pos:column="7">else <if pos:line="31" pos:column="12">if <condition pos:line="31" pos:column="15">(<expr><call><name pos:line="31" pos:column="16">strcmp<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">logdef_name<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="36">"auto"<pos:position pos:line="31" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call> <operator pos:line="31" pos:column="44">==<pos:position pos:line="31" pos:column="46"/></operator> <literal type="number" pos:line="31" pos:column="47">0<pos:position pos:line="31" pos:column="48"/></literal></expr>)<pos:position pos:line="31" pos:column="49"/></condition><then pos:line="31" pos:column="49"> <block pos:line="31" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">0<pos:position pos:line="32" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="19">DBG_CRITICAL<pos:position pos:line="32" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="33">"WARNING: Log format 'auto' no longer exists. Using 'squid' instead."<pos:position pos:line="32" pos:column="102"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="104"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="33" pos:column="9">cl<pos:position pos:line="33" pos:column="11"/></name><operator pos:line="33" pos:column="11">-&gt;<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="13">type<pos:position pos:line="33" pos:column="17"/></name></name> <operator pos:line="33" pos:column="18">=<pos:position pos:line="33" pos:column="19"/></operator> <name><name pos:line="33" pos:column="20">Log<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">::<pos:position pos:line="33" pos:column="25"/></operator><name pos:line="33" pos:column="25">Format<pos:position pos:line="33" pos:column="31"/></name><operator pos:line="33" pos:column="31">::<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="33">CLF_SQUID<pos:position pos:line="33" pos:column="42"/></name></name></expr>;<pos:position pos:line="33" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if></elseif> <elseif pos:line="34" pos:column="7">else <if pos:line="34" pos:column="12">if <condition pos:line="34" pos:column="15">(<expr><call><name pos:line="34" pos:column="16">strcmp<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">logdef_name<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="36">"squid"<pos:position pos:line="34" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call> <operator pos:line="34" pos:column="45">==<pos:position pos:line="34" pos:column="47"/></operator> <literal type="number" pos:line="34" pos:column="48">0<pos:position pos:line="34" pos:column="49"/></literal></expr>)<pos:position pos:line="34" pos:column="50"/></condition><then pos:line="34" pos:column="50"> <block pos:line="34" pos:column="51">{
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">cl<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">-&gt;<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="13">type<pos:position pos:line="35" pos:column="17"/></name></name> <operator pos:line="35" pos:column="18">=<pos:position pos:line="35" pos:column="19"/></operator> <name><name pos:line="35" pos:column="20">Log<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">::<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="25">Format<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">::<pos:position pos:line="35" pos:column="33"/></operator><name pos:line="35" pos:column="33">CLF_SQUID<pos:position pos:line="35" pos:column="42"/></name></name></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if></elseif> <elseif pos:line="36" pos:column="7">else <if pos:line="36" pos:column="12">if <condition pos:line="36" pos:column="15">(<expr><call><name pos:line="36" pos:column="16">strcmp<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">logdef_name<pos:position pos:line="36" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="36">"common"<pos:position pos:line="36" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call> <operator pos:line="36" pos:column="46">==<pos:position pos:line="36" pos:column="48"/></operator> <literal type="number" pos:line="36" pos:column="49">0<pos:position pos:line="36" pos:column="50"/></literal></expr>)<pos:position pos:line="36" pos:column="51"/></condition><then pos:line="36" pos:column="51"> <block pos:line="36" pos:column="52">{
        <expr_stmt><expr><name><name pos:line="37" pos:column="9">cl<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">-&gt;<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="13">type<pos:position pos:line="37" pos:column="17"/></name></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <name><name pos:line="37" pos:column="20">Log<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">::<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="25">Format<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">::<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="33">CLF_COMMON<pos:position pos:line="37" pos:column="43"/></name></name></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if></elseif> <elseif pos:line="38" pos:column="7">else <if pos:line="38" pos:column="12">if <condition pos:line="38" pos:column="15">(<expr><call><name pos:line="38" pos:column="16">strcmp<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><name pos:line="38" pos:column="23">logdef_name<pos:position pos:line="38" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="36">"combined"<pos:position pos:line="38" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="47"/></argument_list></call> <operator pos:line="38" pos:column="48">==<pos:position pos:line="38" pos:column="50"/></operator> <literal type="number" pos:line="38" pos:column="51">0<pos:position pos:line="38" pos:column="52"/></literal></expr>)<pos:position pos:line="38" pos:column="53"/></condition><then pos:line="38" pos:column="53"> <block pos:line="38" pos:column="54">{
        <expr_stmt><expr><name><name pos:line="39" pos:column="9">cl<pos:position pos:line="39" pos:column="11"/></name><operator pos:line="39" pos:column="11">-&gt;<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="13">type<pos:position pos:line="39" pos:column="17"/></name></name> <operator pos:line="39" pos:column="18">=<pos:position pos:line="39" pos:column="19"/></operator> <name><name pos:line="39" pos:column="20">Log<pos:position pos:line="39" pos:column="23"/></name><operator pos:line="39" pos:column="23">::<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="25">Format<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">::<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="33">CLF_COMBINED<pos:position pos:line="39" pos:column="45"/></name></name></expr>;<pos:position pos:line="39" pos:column="46"/></expr_stmt>
<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><name pos:line="40" pos:column="5">ICAP_CLIENT<pos:position pos:line="40" pos:column="16"/></name></expr></cpp:if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if></elseif> <elseif pos:line="41" pos:column="7">else <if pos:line="41" pos:column="12">if <condition pos:line="41" pos:column="15">(<expr><call><name pos:line="41" pos:column="16">strcmp<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><name pos:line="41" pos:column="23">logdef_name<pos:position pos:line="41" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="36">"icap_squid"<pos:position pos:line="41" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="49"/></argument_list></call> <operator pos:line="41" pos:column="50">==<pos:position pos:line="41" pos:column="52"/></operator> <literal type="number" pos:line="41" pos:column="53">0<pos:position pos:line="41" pos:column="54"/></literal></expr>)<pos:position pos:line="41" pos:column="55"/></condition><then pos:line="41" pos:column="55"> <block pos:line="41" pos:column="56">{
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">cl<pos:position pos:line="42" pos:column="11"/></name><operator pos:line="42" pos:column="11">-&gt;<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="13">type<pos:position pos:line="42" pos:column="17"/></name></name> <operator pos:line="42" pos:column="18">=<pos:position pos:line="42" pos:column="19"/></operator> <name><name pos:line="42" pos:column="20">Log<pos:position pos:line="42" pos:column="23"/></name><operator pos:line="42" pos:column="23">::<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="25">Format<pos:position pos:line="42" pos:column="31"/></name><operator pos:line="42" pos:column="31">::<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="33">CLF_ICAP_SQUID<pos:position pos:line="42" pos:column="47"/></name></name></expr>;<pos:position pos:line="42" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if></elseif> <elseif pos:line="44" pos:column="7">else <if pos:line="44" pos:column="12">if <condition pos:line="44" pos:column="15">(<expr><call><name pos:line="44" pos:column="16">strcmp<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">(<argument><expr><name pos:line="44" pos:column="23">logdef_name<pos:position pos:line="44" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="36">"useragent"<pos:position pos:line="44" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="48"/></argument_list></call> <operator pos:line="44" pos:column="49">==<pos:position pos:line="44" pos:column="51"/></operator> <literal type="number" pos:line="44" pos:column="52">0<pos:position pos:line="44" pos:column="53"/></literal></expr>)<pos:position pos:line="44" pos:column="54"/></condition><then pos:line="44" pos:column="54"> <block pos:line="44" pos:column="55">{
        <expr_stmt><expr><name><name pos:line="45" pos:column="9">cl<pos:position pos:line="45" pos:column="11"/></name><operator pos:line="45" pos:column="11">-&gt;<pos:position pos:line="45" pos:column="16"/></operator><name pos:line="45" pos:column="13">type<pos:position pos:line="45" pos:column="17"/></name></name> <operator pos:line="45" pos:column="18">=<pos:position pos:line="45" pos:column="19"/></operator> <name><name pos:line="45" pos:column="20">Log<pos:position pos:line="45" pos:column="23"/></name><operator pos:line="45" pos:column="23">::<pos:position pos:line="45" pos:column="25"/></operator><name pos:line="45" pos:column="25">Format<pos:position pos:line="45" pos:column="31"/></name><operator pos:line="45" pos:column="31">::<pos:position pos:line="45" pos:column="33"/></operator><name pos:line="45" pos:column="33">CLF_USERAGENT<pos:position pos:line="45" pos:column="46"/></name></name></expr>;<pos:position pos:line="45" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if></elseif> <elseif pos:line="46" pos:column="7">else <if pos:line="46" pos:column="12">if <condition pos:line="46" pos:column="15">(<expr><call><name pos:line="46" pos:column="16">strcmp<pos:position pos:line="46" pos:column="22"/></name><argument_list pos:line="46" pos:column="22">(<argument><expr><name pos:line="46" pos:column="23">logdef_name<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="36">"referrer"<pos:position pos:line="46" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="47"/></argument_list></call> <operator pos:line="46" pos:column="48">==<pos:position pos:line="46" pos:column="50"/></operator> <literal type="number" pos:line="46" pos:column="51">0<pos:position pos:line="46" pos:column="52"/></literal></expr>)<pos:position pos:line="46" pos:column="53"/></condition><then pos:line="46" pos:column="53"> <block pos:line="46" pos:column="54">{
        <expr_stmt><expr><name><name pos:line="47" pos:column="9">cl<pos:position pos:line="47" pos:column="11"/></name><operator pos:line="47" pos:column="11">-&gt;<pos:position pos:line="47" pos:column="16"/></operator><name pos:line="47" pos:column="13">type<pos:position pos:line="47" pos:column="17"/></name></name> <operator pos:line="47" pos:column="18">=<pos:position pos:line="47" pos:column="19"/></operator> <name><name pos:line="47" pos:column="20">Log<pos:position pos:line="47" pos:column="23"/></name><operator pos:line="47" pos:column="23">::<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="25">Format<pos:position pos:line="47" pos:column="31"/></name><operator pos:line="47" pos:column="31">::<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="33">CLF_REFERER<pos:position pos:line="47" pos:column="44"/></name></name></expr>;<pos:position pos:line="47" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if></elseif> <elseif pos:line="48" pos:column="7">else <if pos:line="48" pos:column="12">if <condition pos:line="48" pos:column="15">(<expr><name pos:line="48" pos:column="16">dieWhenMissing<pos:position pos:line="48" pos:column="30"/></name></expr>)<pos:position pos:line="48" pos:column="31"/></condition><then pos:line="48" pos:column="31"> <block pos:line="48" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">debugs<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">(<argument><expr><literal type="number" pos:line="49" pos:column="16">3<pos:position pos:line="49" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="19">DBG_CRITICAL<pos:position pos:line="49" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="33">"FATAL: Log format '"<pos:position pos:line="49" pos:column="54"/></literal> <operator pos:line="49" pos:column="55">&lt;&lt;<pos:position pos:line="49" pos:column="63"/></operator> <name pos:line="49" pos:column="58">logdef_name<pos:position pos:line="49" pos:column="69"/></name> <operator pos:line="49" pos:column="70">&lt;&lt;<pos:position pos:line="49" pos:column="78"/></operator> <literal type="string" pos:line="49" pos:column="73">"' is not defined"<pos:position pos:line="49" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="93"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">self_destruct<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">()<pos:position pos:line="50" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="25"/></expr_stmt>
        <return pos:line="51" pos:column="9">return <expr><literal type="boolean" pos:line="51" pos:column="16">false<pos:position pos:line="51" pos:column="21"/></literal></expr>;<pos:position pos:line="51" pos:column="22"/></return>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if></elseif> <else pos:line="52" pos:column="7">else <block pos:line="52" pos:column="12">{
        <return pos:line="53" pos:column="9">return <expr><literal type="boolean" pos:line="53" pos:column="16">false<pos:position pos:line="53" pos:column="21"/></literal></expr>;<pos:position pos:line="53" pos:column="22"/></return>
    }<pos:position pos:line="54" pos:column="6"/></block></else></if>

    <return pos:line="56" pos:column="5">return <expr><literal type="boolean" pos:line="56" pos:column="12">true<pos:position pos:line="56" pos:column="16"/></literal></expr>;<pos:position pos:line="56" pos:column="17"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
