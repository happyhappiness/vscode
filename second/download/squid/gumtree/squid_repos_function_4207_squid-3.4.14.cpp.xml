<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4207_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ServiceRep<pos:position pos:line="1" pos:column="34"/></name><operator pos:line="1" pos:column="34">::<pos:position pos:line="1" pos:column="36"/></operator><name pos:line="1" pos:column="36">checkOptions<pos:position pos:line="1" pos:column="48"/></name></name><parameter_list pos:line="1" pos:column="48">()<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name pos:line="3" pos:column="9">theOptions<pos:position pos:line="3" pos:column="19"/></name> <operator pos:line="3" pos:column="20">==<pos:position pos:line="3" pos:column="22"/></operator> <name pos:line="3" pos:column="23">NULL<pos:position pos:line="3" pos:column="27"/></name></expr>)<pos:position pos:line="3" pos:column="28"/></condition><then pos:line="3" pos:column="28">
        <block type="pseudo"><return pos:line="4" pos:column="9">return;<pos:position pos:line="4" pos:column="16"/></return></block></then></if>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name><name pos:line="6" pos:column="10">theOptions<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">-&gt;<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="22">valid<pos:position pos:line="6" pos:column="27"/></name></name><argument_list pos:line="6" pos:column="27">()<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="30"/></condition><then pos:line="6" pos:column="30"> <block pos:line="6" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">93<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="20">DBG_IMPORTANT<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="35">"WARNING: Squid got an invalid ICAP OPTIONS response "<pos:position pos:line="7" pos:column="89"/></literal> <operator pos:line="7" pos:column="90">&lt;&lt;<pos:position pos:line="7" pos:column="98"/></operator>
               <literal type="string" pos:line="8" pos:column="16">"from service "<pos:position pos:line="8" pos:column="31"/></literal> <operator pos:line="8" pos:column="32">&lt;&lt;<pos:position pos:line="8" pos:column="40"/></operator> <call><name pos:line="8" pos:column="35">cfg<pos:position pos:line="8" pos:column="38"/></name><argument_list pos:line="8" pos:column="38">()<pos:position pos:line="8" pos:column="40"/></argument_list></call><operator pos:line="8" pos:column="40">.<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="41">uri<pos:position pos:line="8" pos:column="44"/></name> <operator pos:line="8" pos:column="45">&lt;&lt;<pos:position pos:line="8" pos:column="53"/></operator> <literal type="string" pos:line="8" pos:column="48">"; error: "<pos:position pos:line="8" pos:column="59"/></literal> <operator pos:line="8" pos:column="60">&lt;&lt;<pos:position pos:line="8" pos:column="68"/></operator> <name><name pos:line="8" pos:column="63">theOptions<pos:position pos:line="8" pos:column="73"/></name><operator pos:line="8" pos:column="73">-&gt;<pos:position pos:line="8" pos:column="78"/></operator><name pos:line="8" pos:column="75">error<pos:position pos:line="8" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="82"/></expr_stmt>
        <return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="12" pos:column="5">/*
     * Issue a warning if the ICAP server returned methods in the
     * options response that don't match the method from squid.conf.
     */</comment>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><call><name><name pos:line="17" pos:column="10">theOptions<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">methods<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">.<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">empty<pos:position pos:line="17" pos:column="35"/></name></name><argument_list pos:line="17" pos:column="35">()<pos:position pos:line="17" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="38"/></condition><then pos:line="17" pos:column="38"> <block pos:line="17" pos:column="39">{
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">bool<pos:position pos:line="18" pos:column="13"/></name></type> <name pos:line="18" pos:column="14">method_found<pos:position pos:line="18" pos:column="26"/></name> <init pos:line="18" pos:column="27">= <expr><literal type="boolean" pos:line="18" pos:column="29">false<pos:position pos:line="18" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="35"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">String<pos:position pos:line="19" pos:column="15"/></name></type> <name pos:line="19" pos:column="16">method_list<pos:position pos:line="19" pos:column="27"/></name></decl>;<pos:position pos:line="19" pos:column="28"/></decl_stmt>
        <decl_stmt><decl><type><name><name><name pos:line="20" pos:column="9">Vector<pos:position pos:line="20" pos:column="15"/></name> <argument_list type="generic" pos:line="20" pos:column="16">&lt;<argument><expr><name><name pos:line="20" pos:column="17">ICAP<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">::<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="23">Method<pos:position pos:line="20" pos:column="29"/></name></name></expr></argument>&gt;<pos:position pos:line="20" pos:column="33"/></argument_list></name><operator pos:line="20" pos:column="30">::<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">iterator<pos:position pos:line="20" pos:column="40"/></name></name></type> <name pos:line="20" pos:column="41">iter<pos:position pos:line="20" pos:column="45"/></name> <init pos:line="20" pos:column="46">= <expr><call><name><name pos:line="20" pos:column="48">theOptions<pos:position pos:line="20" pos:column="58"/></name><operator pos:line="20" pos:column="58">-&gt;<pos:position pos:line="20" pos:column="63"/></operator><name pos:line="20" pos:column="60">methods<pos:position pos:line="20" pos:column="67"/></name><operator pos:line="20" pos:column="67">.<pos:position pos:line="20" pos:column="68"/></operator><name pos:line="20" pos:column="68">begin<pos:position pos:line="20" pos:column="73"/></name></name><argument_list pos:line="20" pos:column="73">()<pos:position pos:line="20" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="76"/></decl_stmt>

        <while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><name pos:line="22" pos:column="16">iter<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">!=<pos:position pos:line="22" pos:column="23"/></operator> <call><name><name pos:line="22" pos:column="24">theOptions<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">-&gt;<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="36">methods<pos:position pos:line="22" pos:column="43"/></name><operator pos:line="22" pos:column="43">.<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="44">end<pos:position pos:line="22" pos:column="47"/></name></name><argument_list pos:line="22" pos:column="47">()<pos:position pos:line="22" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="50"/></condition> <block pos:line="22" pos:column="51">{

            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><operator pos:line="24" pos:column="17">*<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">iter<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">==<pos:position pos:line="24" pos:column="25"/></operator> <call><name pos:line="24" pos:column="26">cfg<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">()<pos:position pos:line="24" pos:column="31"/></argument_list></call><operator pos:line="24" pos:column="31">.<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="32">method<pos:position pos:line="24" pos:column="38"/></name></expr>)<pos:position pos:line="24" pos:column="39"/></condition><then pos:line="24" pos:column="39"> <block pos:line="24" pos:column="40">{
                <expr_stmt><expr><name pos:line="25" pos:column="17">method_found<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">=<pos:position pos:line="25" pos:column="31"/></operator> <literal type="boolean" pos:line="25" pos:column="32">true<pos:position pos:line="25" pos:column="36"/></literal></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt>
                <break pos:line="26" pos:column="17">break;<pos:position pos:line="26" pos:column="23"/></break>
            }<pos:position pos:line="27" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">method_list<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">.<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">append<pos:position pos:line="29" pos:column="31"/></name></name><argument_list pos:line="29" pos:column="31">(<argument><expr><call><name><name pos:line="29" pos:column="32">ICAP<pos:position pos:line="29" pos:column="36"/></name><operator pos:line="29" pos:column="36">::<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="38">methodStr<pos:position pos:line="29" pos:column="47"/></name></name><argument_list pos:line="29" pos:column="47">(<argument><expr><operator pos:line="29" pos:column="48">*<pos:position pos:line="29" pos:column="49"/></operator><name pos:line="29" pos:column="49">iter<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">method_list<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">.<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="25">append<pos:position pos:line="30" pos:column="31"/></name></name><argument_list pos:line="30" pos:column="31">(<argument><expr><literal type="string" pos:line="30" pos:column="32">" "<pos:position pos:line="30" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="37">1<pos:position pos:line="30" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="31" pos:column="13">++<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">iter<pos:position pos:line="31" pos:column="19"/></name></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt>
        }<pos:position pos:line="32" pos:column="10"/></block></while>

        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">method_found<pos:position pos:line="34" pos:column="26"/></name></expr>)<pos:position pos:line="34" pos:column="27"/></condition><then pos:line="34" pos:column="27"> <block pos:line="34" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">debugs<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><literal type="number" pos:line="35" pos:column="20">93<pos:position pos:line="35" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="24">DBG_IMPORTANT<pos:position pos:line="35" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="39">"WARNING: Squid is configured to use ICAP method "<pos:position pos:line="35" pos:column="89"/></literal> <operator pos:line="35" pos:column="90">&lt;&lt;<pos:position pos:line="35" pos:column="98"/></operator>
                   <call><name pos:line="36" pos:column="20">cfg<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">()<pos:position pos:line="36" pos:column="25"/></argument_list></call><operator pos:line="36" pos:column="25">.<pos:position pos:line="36" pos:column="26"/></operator><call><name pos:line="36" pos:column="26">methodStr<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">()<pos:position pos:line="36" pos:column="37"/></argument_list></call> <operator pos:line="36" pos:column="38">&lt;&lt;<pos:position pos:line="36" pos:column="46"/></operator>
                   <literal type="string" pos:line="37" pos:column="20">" for service "<pos:position pos:line="37" pos:column="35"/></literal> <operator pos:line="37" pos:column="36">&lt;&lt;<pos:position pos:line="37" pos:column="44"/></operator> <call><name pos:line="37" pos:column="39">cfg<pos:position pos:line="37" pos:column="42"/></name><argument_list pos:line="37" pos:column="42">()<pos:position pos:line="37" pos:column="44"/></argument_list></call><operator pos:line="37" pos:column="44">.<pos:position pos:line="37" pos:column="45"/></operator><name pos:line="37" pos:column="45">uri<pos:position pos:line="37" pos:column="48"/></name> <operator pos:line="37" pos:column="49">&lt;&lt;<pos:position pos:line="37" pos:column="57"/></operator>
                   <literal type="string" pos:line="38" pos:column="20">" but OPTIONS response declares the methods are "<pos:position pos:line="38" pos:column="69"/></literal> <operator pos:line="38" pos:column="70">&lt;&lt;<pos:position pos:line="38" pos:column="78"/></operator> <name pos:line="38" pos:column="73">method_list<pos:position pos:line="38" pos:column="84"/></name></expr></argument>)<pos:position pos:line="38" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="86"/></expr_stmt>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="42" pos:column="5">/*
     *  Check the ICAP server's date header for clock skew
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="45" pos:column="5">const<pos:position pos:line="45" pos:column="10"/></specifier> <name pos:line="45" pos:column="11">int<pos:position pos:line="45" pos:column="14"/></name></type> <name pos:line="45" pos:column="15">skew<pos:position pos:line="45" pos:column="19"/></name> <init pos:line="45" pos:column="20">= <expr><call pos:line="45" pos:column="22">(<name pos:line="45" pos:column="23">int<pos:position pos:line="45" pos:column="26"/></name>)<argument_list pos:line="45" pos:column="27">(<argument><expr><call><name><name pos:line="45" pos:column="28">theOptions<pos:position pos:line="45" pos:column="38"/></name><operator pos:line="45" pos:column="38">-&gt;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="40">timestamp<pos:position pos:line="45" pos:column="49"/></name></name><argument_list pos:line="45" pos:column="49">()<pos:position pos:line="45" pos:column="51"/></argument_list></call> <operator pos:line="45" pos:column="52">-<pos:position pos:line="45" pos:column="53"/></operator> <name pos:line="45" pos:column="54">squid_curtime<pos:position pos:line="45" pos:column="67"/></name></expr></argument>)<pos:position pos:line="45" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="45" pos:column="69"/></decl_stmt>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">abs<pos:position pos:line="46" pos:column="12"/></name><argument_list pos:line="46" pos:column="12">(<argument><expr><name pos:line="46" pos:column="13">skew<pos:position pos:line="46" pos:column="17"/></name></expr></argument>)<pos:position pos:line="46" pos:column="18"/></argument_list></call> <operator pos:line="46" pos:column="19">&gt;<pos:position pos:line="46" pos:column="23"/></operator> <call><name><name pos:line="46" pos:column="21">theOptions<pos:position pos:line="46" pos:column="31"/></name><operator pos:line="46" pos:column="31">-&gt;<pos:position pos:line="46" pos:column="36"/></operator><name pos:line="46" pos:column="33">ttl<pos:position pos:line="46" pos:column="36"/></name></name><argument_list pos:line="46" pos:column="36">()<pos:position pos:line="46" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="39"/></condition><then pos:line="46" pos:column="39"> <block pos:line="46" pos:column="40">{
        <comment type="line" pos:line="47" pos:column="9">// TODO: If skew is negative, the option will be considered down</comment>
        <comment type="line" pos:line="48" pos:column="9">// because of stale options. We should probably change this.</comment>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">debugs<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">(<argument><expr><literal type="number" pos:line="49" pos:column="16">93<pos:position pos:line="49" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="20">DBG_IMPORTANT<pos:position pos:line="49" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="35">"ICAP service's clock is skewed by "<pos:position pos:line="49" pos:column="71"/></literal> <operator pos:line="49" pos:column="72">&lt;&lt;<pos:position pos:line="49" pos:column="80"/></operator> <name pos:line="49" pos:column="75">skew<pos:position pos:line="49" pos:column="79"/></name> <operator pos:line="49" pos:column="80">&lt;&lt;<pos:position pos:line="49" pos:column="88"/></operator>
               <literal type="string" pos:line="50" pos:column="16">" seconds: "<pos:position pos:line="50" pos:column="28"/></literal> <operator pos:line="50" pos:column="29">&lt;&lt;<pos:position pos:line="50" pos:column="37"/></operator> <call><name pos:line="50" pos:column="32">cfg<pos:position pos:line="50" pos:column="35"/></name><argument_list pos:line="50" pos:column="35">()<pos:position pos:line="50" pos:column="37"/></argument_list></call><operator pos:line="50" pos:column="37">.<pos:position pos:line="50" pos:column="38"/></operator><name pos:line="50" pos:column="38">uri<pos:position pos:line="50" pos:column="41"/></name></expr></argument>)<pos:position pos:line="50" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
