<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_55_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">MemBuf<pos:position pos:line="1" pos:column="12"/></name><operator pos:line="1" pos:column="12">::<pos:position pos:line="1" pos:column="14"/></operator><name pos:line="1" pos:column="14">consume<pos:position pos:line="1" pos:column="21"/></name></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">mb_size_t<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">shiftSize<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">mb_size_t<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">cSize<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><call><name pos:line="3" pos:column="29">contentSize<pos:position pos:line="3" pos:column="40"/></name><argument_list pos:line="3" pos:column="40">()<pos:position pos:line="3" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">0<pos:position pos:line="4" pos:column="13"/></literal> <operator pos:line="4" pos:column="14">&lt;=<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="17">shiftSize<pos:position pos:line="4" pos:column="26"/></name> <operator pos:line="4" pos:column="27">&amp;&amp;<pos:position pos:line="4" pos:column="37"/></operator> <name pos:line="4" pos:column="30">shiftSize<pos:position pos:line="4" pos:column="39"/></name> <operator pos:line="4" pos:column="40">&lt;=<pos:position pos:line="4" pos:column="45"/></operator> <name pos:line="4" pos:column="43">cSize<pos:position pos:line="4" pos:column="48"/></name></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">stolen<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt> <comment type="block" pos:line="5" pos:column="22">/* not frozen */</comment>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">PROF_start<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">MemBuf_consume<pos:position pos:line="7" pos:column="30"/></name></expr></argument>)<pos:position pos:line="7" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="32"/></expr_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">shiftSize<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">&gt;<pos:position pos:line="8" pos:column="23"/></operator> <literal type="number" pos:line="8" pos:column="21">0<pos:position pos:line="8" pos:column="22"/></literal></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23"> <block pos:line="8" pos:column="24">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">shiftSize<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&lt;<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="25">cSize<pos:position pos:line="9" pos:column="30"/></name></expr>)<pos:position pos:line="9" pos:column="31"/></condition><then pos:line="9" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="13">memmove<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">buf<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">buf<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">+<pos:position pos:line="10" pos:column="31"/></operator> <name pos:line="10" pos:column="32">shiftSize<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="43">cSize<pos:position pos:line="10" pos:column="48"/></name> <operator pos:line="10" pos:column="49">-<pos:position pos:line="10" pos:column="50"/></operator> <name pos:line="10" pos:column="51">shiftSize<pos:position pos:line="10" pos:column="60"/></name></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="12" pos:column="9">size<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">-=<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">shiftSize<pos:position pos:line="12" pos:column="26"/></name></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="14" pos:column="9">terminate<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">()<pos:position pos:line="14" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">PROF_stop<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">MemBuf_consume<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
