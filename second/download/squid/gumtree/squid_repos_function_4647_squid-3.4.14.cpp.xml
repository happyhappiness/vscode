<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4647_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">ACLFlags<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">supported<pos:position pos:line="1" pos:column="25"/></name></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">ACLFlag<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">f<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list> <specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name pos:line="3" pos:column="9">f<pos:position pos:line="3" pos:column="10"/></name> <operator pos:line="3" pos:column="11">==<pos:position pos:line="3" pos:column="13"/></operator> <name pos:line="3" pos:column="14">ACL_F_REGEX_CASE<pos:position pos:line="3" pos:column="30"/></name></expr>)<pos:position pos:line="3" pos:column="31"/></condition><then pos:line="3" pos:column="31">
        <block type="pseudo"><return pos:line="4" pos:column="9">return <expr><literal type="boolean" pos:line="4" pos:column="16">true<pos:position pos:line="4" pos:column="20"/></literal></expr>;<pos:position pos:line="4" pos:column="21"/></return></block></then></if>
    <return pos:line="5" pos:column="5">return <expr><operator pos:line="5" pos:column="12">(<pos:position pos:line="5" pos:column="13"/></operator><call><name><name pos:line="5" pos:column="13">supported_<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">.<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">find<pos:position pos:line="5" pos:column="28"/></name></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">f<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call> <operator pos:line="5" pos:column="32">!=<pos:position pos:line="5" pos:column="34"/></operator> <name><name pos:line="5" pos:column="35">std<pos:position pos:line="5" pos:column="38"/></name><operator pos:line="5" pos:column="38">::<pos:position pos:line="5" pos:column="40"/></operator><name pos:line="5" pos:column="40">string<pos:position pos:line="5" pos:column="46"/></name><operator pos:line="5" pos:column="46">::<pos:position pos:line="5" pos:column="48"/></operator><name pos:line="5" pos:column="48">npos<pos:position pos:line="5" pos:column="52"/></name></name><operator pos:line="5" pos:column="52">)<pos:position pos:line="5" pos:column="53"/></operator></expr>;<pos:position pos:line="5" pos:column="54"/></return>
}<pos:position pos:line="6" pos:column="2"/></block></function></unit>
