<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3994_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">visitEachMetaHeader<pos:position pos:line="2" pos:column="50"/></name></name><parameter_list pos:line="2" pos:column="50">(<parameter><decl><type><name><name pos:line="2" pos:column="51">libecap<pos:position pos:line="2" pos:column="58"/></name><operator pos:line="2" pos:column="58">::<pos:position pos:line="2" pos:column="60"/></operator><name pos:line="2" pos:column="60">NamedValueVisitor<pos:position pos:line="2" pos:column="77"/></name></name> <modifier pos:line="2" pos:column="78">&amp;<pos:position pos:line="2" pos:column="83"/></modifier></type><name pos:line="2" pos:column="79">visitor<pos:position pos:line="2" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="87"/></parameter_list> <specifier pos:line="2" pos:column="88">const<pos:position pos:line="2" pos:column="93"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpRequest<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">request<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><cast type="dynamic" pos:line="4" pos:column="28">dynamic_cast<argument_list type="generic" pos:line="4" pos:column="40">&lt;<argument><expr><name pos:line="4" pos:column="41">HttpRequest<pos:position pos:line="4" pos:column="52"/></name><operator pos:line="4" pos:column="52">*<pos:position pos:line="4" pos:column="53"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="57"/></argument_list><argument_list pos:line="4" pos:column="54">(<argument><expr><ternary><condition><expr><name pos:line="4" pos:column="55">theCauseRep<pos:position pos:line="4" pos:column="66"/></name></expr> ?<pos:position pos:line="4" pos:column="68"/></condition><then pos:line="4" pos:column="68">
                           <expr><call><name><name pos:line="5" pos:column="28">theCauseRep<pos:position pos:line="5" pos:column="39"/></name><operator pos:line="5" pos:column="39">-&gt;<pos:position pos:line="5" pos:column="44"/></operator><name pos:line="5" pos:column="41">raw<pos:position pos:line="5" pos:column="44"/></name></name><argument_list pos:line="5" pos:column="44">()<pos:position pos:line="5" pos:column="46"/></argument_list></call><operator pos:line="5" pos:column="46">.<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="47">header<pos:position pos:line="5" pos:column="53"/></name></expr> <pos:position pos:line="5" pos:column="54"/></then><else pos:line="5" pos:column="54">: <expr><call><name><name pos:line="5" pos:column="56">theVirginRep<pos:position pos:line="5" pos:column="68"/></name><operator pos:line="5" pos:column="68">.<pos:position pos:line="5" pos:column="69"/></operator><name pos:line="5" pos:column="69">raw<pos:position pos:line="5" pos:column="72"/></name></name><argument_list pos:line="5" pos:column="72">()<pos:position pos:line="5" pos:column="74"/></argument_list></call><operator pos:line="5" pos:column="74">.<pos:position pos:line="5" pos:column="75"/></operator><name pos:line="5" pos:column="75">header<pos:position pos:line="5" pos:column="81"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="5" pos:column="82"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="5" pos:column="83"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name pos:line="6" pos:column="10">request<pos:position pos:line="6" pos:column="17"/></name></expr></argument>)<pos:position pos:line="6" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="19"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">HttpReply<pos:position pos:line="7" pos:column="14"/></name> <modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type><name pos:line="7" pos:column="16">reply<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><cast type="dynamic" pos:line="7" pos:column="24">dynamic_cast<argument_list type="generic" pos:line="7" pos:column="36">&lt;<argument><expr><name pos:line="7" pos:column="37">HttpReply<pos:position pos:line="7" pos:column="46"/></name><operator pos:line="7" pos:column="46">*<pos:position pos:line="7" pos:column="47"/></operator></expr></argument>&gt;<pos:position pos:line="7" pos:column="51"/></argument_list><argument_list pos:line="7" pos:column="48">(<argument><expr><call><name><name pos:line="7" pos:column="49">theVirginRep<pos:position pos:line="7" pos:column="61"/></name><operator pos:line="7" pos:column="61">.<pos:position pos:line="7" pos:column="62"/></operator><name pos:line="7" pos:column="62">raw<pos:position pos:line="7" pos:column="65"/></name></name><argument_list pos:line="7" pos:column="65">()<pos:position pos:line="7" pos:column="67"/></argument_list></call><operator pos:line="7" pos:column="67">.<pos:position pos:line="7" pos:column="68"/></operator><name pos:line="7" pos:column="68">header<pos:position pos:line="7" pos:column="74"/></name></expr></argument>)<pos:position pos:line="7" pos:column="75"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="7" pos:column="76"/></decl_stmt>

    <typedef pos:line="9" pos:column="5">typedef <type><name><name pos:line="9" pos:column="13">Notes<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">::<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">iterator<pos:position pos:line="9" pos:column="28"/></name></name></type> <name pos:line="9" pos:column="29">ACAMLI<pos:position pos:line="9" pos:column="35"/></name>;<pos:position pos:line="9" pos:column="36"/></typedef>
    <for pos:line="10" pos:column="5">for <control pos:line="10" pos:column="9">(<init><decl><type><name pos:line="10" pos:column="10">ACAMLI<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">i<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><call><name><name pos:line="10" pos:column="21">Adaptation<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">::<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="33">Config<pos:position pos:line="10" pos:column="39"/></name><operator pos:line="10" pos:column="39">::<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="41">metaHeaders<pos:position pos:line="10" pos:column="52"/></name><operator pos:line="10" pos:column="52">.<pos:position pos:line="10" pos:column="53"/></operator><name pos:line="10" pos:column="53">begin<pos:position pos:line="10" pos:column="58"/></name></name><argument_list pos:line="10" pos:column="58">()<pos:position pos:line="10" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="61"/></init> <condition><expr><name pos:line="10" pos:column="62">i<pos:position pos:line="10" pos:column="63"/></name> <operator pos:line="10" pos:column="64">!=<pos:position pos:line="10" pos:column="66"/></operator> <call><name><name pos:line="10" pos:column="67">Adaptation<pos:position pos:line="10" pos:column="77"/></name><operator pos:line="10" pos:column="77">::<pos:position pos:line="10" pos:column="79"/></operator><name pos:line="10" pos:column="79">Config<pos:position pos:line="10" pos:column="85"/></name><operator pos:line="10" pos:column="85">::<pos:position pos:line="10" pos:column="87"/></operator><name pos:line="10" pos:column="87">metaHeaders<pos:position pos:line="10" pos:column="98"/></name><operator pos:line="10" pos:column="98">.<pos:position pos:line="10" pos:column="99"/></operator><name pos:line="10" pos:column="99">end<pos:position pos:line="10" pos:column="102"/></name></name><argument_list pos:line="10" pos:column="102">()<pos:position pos:line="10" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="105"/></condition> <incr><expr><operator pos:line="10" pos:column="106">++<pos:position pos:line="10" pos:column="108"/></operator><name pos:line="10" pos:column="108">i<pos:position pos:line="10" pos:column="109"/></name></expr></incr>)<pos:position pos:line="10" pos:column="110"/></control> <block pos:line="10" pos:column="111">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name pos:line="11" pos:column="15">char<pos:position pos:line="11" pos:column="19"/></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">v<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><call><name><operator pos:line="11" pos:column="25">(<pos:position pos:line="11" pos:column="26"/></operator><operator pos:line="11" pos:column="26">*<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="27">i<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">)<pos:position pos:line="11" pos:column="29"/></operator><operator pos:line="11" pos:column="29">-&gt;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="31">match<pos:position pos:line="11" pos:column="36"/></name></name><argument_list pos:line="11" pos:column="36">(<argument><expr><name pos:line="11" pos:column="37">request<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="46">reply<pos:position pos:line="11" pos:column="51"/></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="53"/></decl_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">v<pos:position pos:line="12" pos:column="14"/></name></expr>)<pos:position pos:line="12" pos:column="15"/></condition><then pos:line="12" pos:column="15"> <block pos:line="12" pos:column="16">{
            <decl_stmt><decl><type><specifier pos:line="13" pos:column="13">const<pos:position pos:line="13" pos:column="18"/></specifier> <name><name pos:line="13" pos:column="19">libecap<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">::<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="28">Name<pos:position pos:line="13" pos:column="32"/></name></name></type> <name pos:line="13" pos:column="33">name<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><call><name><operator pos:line="13" pos:column="38">(<pos:position pos:line="13" pos:column="39"/></operator><operator pos:line="13" pos:column="39">*<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="40">i<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">)<pos:position pos:line="13" pos:column="42"/></operator><operator pos:line="13" pos:column="42">-&gt;<pos:position pos:line="13" pos:column="47"/></operator><name><name pos:line="13" pos:column="44">key<pos:position pos:line="13" pos:column="47"/></name><operator pos:line="13" pos:column="47">.<pos:position pos:line="13" pos:column="48"/></operator><name pos:line="13" pos:column="48">termedBuf<pos:position pos:line="13" pos:column="57"/></name></name></name><argument_list pos:line="13" pos:column="57">()<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></decl>;<pos:position pos:line="13" pos:column="61"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="14" pos:column="13">const<pos:position pos:line="14" pos:column="18"/></specifier> <name><name pos:line="14" pos:column="19">libecap<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">::<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="28">Area<pos:position pos:line="14" pos:column="32"/></name></name></type> <name pos:line="14" pos:column="33">value<pos:position pos:line="14" pos:column="38"/></name> <init pos:line="14" pos:column="39">= <expr><call><name><name pos:line="14" pos:column="41">libecap<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">::<pos:position pos:line="14" pos:column="50"/></operator><name pos:line="14" pos:column="50">Area<pos:position pos:line="14" pos:column="54"/></name><operator pos:line="14" pos:column="54">::<pos:position pos:line="14" pos:column="56"/></operator><name pos:line="14" pos:column="56">FromTempString<pos:position pos:line="14" pos:column="70"/></name></name><argument_list pos:line="14" pos:column="70">(<argument><expr><name pos:line="14" pos:column="71">v<pos:position pos:line="14" pos:column="72"/></name></expr></argument>)<pos:position pos:line="14" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="74"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="15" pos:column="13">visitor<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">.<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">visit<pos:position pos:line="15" pos:column="26"/></name></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">name<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="33">value<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></for>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
