<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2403_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">store_client<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">copy<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">StoreEntry<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type> <name pos:line="2" pos:column="33">anEntry<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
                   <parameter><decl><type><name pos:line="3" pos:column="20">StoreIOBuffer<pos:position pos:line="3" pos:column="33"/></name></type> <name pos:line="3" pos:column="34">copyRequest<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>,
                   <parameter><decl><type><name pos:line="4" pos:column="20">STCB<pos:position pos:line="4" pos:column="24"/></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type> <name pos:line="4" pos:column="27">callback_fn<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>,
                   <parameter><decl><type><name pos:line="5" pos:column="20">void<pos:position pos:line="5" pos:column="24"/></name> <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">data<pos:position pos:line="5" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="31"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name> <argument_list pos:line="7" pos:column="12">(<argument><expr><name pos:line="7" pos:column="13">anEntry<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">==<pos:position pos:line="7" pos:column="23"/></operator> <name pos:line="7" pos:column="24">entry<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name> <argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">callback_fn<pos:position pos:line="8" pos:column="24"/></name></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name> <argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">data<pos:position pos:line="9" pos:column="17"/></name></expr></argument>)<pos:position pos:line="9" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><operator pos:line="10" pos:column="12">!<pos:position pos:line="10" pos:column="13"/></operator><call><name pos:line="10" pos:column="13">EBIT_TEST<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name><name pos:line="10" pos:column="23">entry<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">-&gt;<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="30">flags<pos:position pos:line="10" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="37">ENTRY_ABORTED<pos:position pos:line="10" pos:column="50"/></name></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">90<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="16">3<pos:position pos:line="11" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="19">"store_client::copy: "<pos:position pos:line="11" pos:column="41"/></literal> <operator pos:line="11" pos:column="42">&lt;&lt;<pos:position pos:line="11" pos:column="50"/></operator> <call><name><name pos:line="11" pos:column="45">entry<pos:position pos:line="11" pos:column="50"/></name><operator pos:line="11" pos:column="50">-&gt;<pos:position pos:line="11" pos:column="55"/></operator><name pos:line="11" pos:column="52">getMD5Text<pos:position pos:line="11" pos:column="62"/></name></name><argument_list pos:line="11" pos:column="62">()<pos:position pos:line="11" pos:column="64"/></argument_list></call> <operator pos:line="11" pos:column="65">&lt;&lt;<pos:position pos:line="11" pos:column="73"/></operator> <literal type="string" pos:line="11" pos:column="68">", from "<pos:position pos:line="11" pos:column="77"/></literal> <operator pos:line="11" pos:column="78">&lt;&lt;<pos:position pos:line="11" pos:column="86"/></operator>
           <name><name pos:line="12" pos:column="12">copyRequest<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">.<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="24">offset<pos:position pos:line="12" pos:column="30"/></name></name> <operator pos:line="12" pos:column="31">&lt;&lt;<pos:position pos:line="12" pos:column="39"/></operator> <literal type="string" pos:line="12" pos:column="34">", for length "<pos:position pos:line="12" pos:column="49"/></literal> <operator pos:line="12" pos:column="50">&lt;&lt;<pos:position pos:line="12" pos:column="58"/></operator>
           <operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">int<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">)<pos:position pos:line="13" pos:column="17"/></operator> <name><name pos:line="13" pos:column="18">copyRequest<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">.<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">length<pos:position pos:line="13" pos:column="36"/></name></name> <operator pos:line="13" pos:column="37">&lt;&lt;<pos:position pos:line="13" pos:column="45"/></operator> <literal type="string" pos:line="13" pos:column="40">", cb "<pos:position pos:line="13" pos:column="47"/></literal> <operator pos:line="13" pos:column="48">&lt;&lt;<pos:position pos:line="13" pos:column="56"/></operator> <name pos:line="13" pos:column="51">callback_fn<pos:position pos:line="13" pos:column="62"/></name> <operator pos:line="13" pos:column="63">&lt;&lt;<pos:position pos:line="13" pos:column="71"/></operator> <literal type="string" pos:line="13" pos:column="66">", cbdata "<pos:position pos:line="13" pos:column="77"/></literal> <operator pos:line="13" pos:column="78">&lt;&lt;<pos:position pos:line="13" pos:column="86"/></operator>
           <name pos:line="14" pos:column="12">data<pos:position pos:line="14" pos:column="16"/></name></expr></argument>)<pos:position pos:line="14" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt>

<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">STORE_CLIENT_LIST_DEBUG<pos:position pos:line="16" pos:column="28"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><name pos:line="18" pos:column="12">this<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">==<pos:position pos:line="18" pos:column="19"/></operator> <call><name pos:line="18" pos:column="20">storeClientListSearch<pos:position pos:line="18" pos:column="41"/></name><argument_list pos:line="18" pos:column="41">(<argument><expr><name><name pos:line="18" pos:column="42">entry<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">-&gt;<pos:position pos:line="18" pos:column="52"/></operator><name pos:line="18" pos:column="49">mem_obj<pos:position pos:line="18" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="58">data<pos:position pos:line="18" pos:column="62"/></name></expr></argument>)<pos:position pos:line="18" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="65"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">assert<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><operator pos:line="21" pos:column="12">!<pos:position pos:line="21" pos:column="13"/></operator><call><name><name pos:line="21" pos:column="13">_callback<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">.<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">pending<pos:position pos:line="21" pos:column="30"/></name></name><argument_list pos:line="21" pos:column="30">()<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>
<cpp:if pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">if<pos:position pos:line="22" pos:column="4"/></cpp:directive> <expr><name pos:line="22" pos:column="5">ONLYCONTIGUOUSREQUESTS<pos:position pos:line="22" pos:column="27"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">assert<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name pos:line="24" pos:column="12">cmp_offset<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">==<pos:position pos:line="24" pos:column="25"/></operator> <name><name pos:line="24" pos:column="26">copyRequest<pos:position pos:line="24" pos:column="37"/></name><operator pos:line="24" pos:column="37">.<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="38">offset<pos:position pos:line="24" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="26" pos:column="5">/* range requests will skip into the body */</comment>
    <expr_stmt><expr><name pos:line="27" pos:column="5">cmp_offset<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <name><name pos:line="27" pos:column="18">copyRequest<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">.<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="30">offset<pos:position pos:line="27" pos:column="36"/></name></name></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">_callback<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <call><name pos:line="28" pos:column="17">Callback<pos:position pos:line="28" pos:column="25"/></name> <argument_list pos:line="28" pos:column="26">(<argument><expr><name pos:line="28" pos:column="27">callback_fn<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="40">cbdataReference<pos:position pos:line="28" pos:column="55"/></name><argument_list pos:line="28" pos:column="55">(<argument><expr><name pos:line="28" pos:column="56">data<pos:position pos:line="28" pos:column="60"/></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">copyInto<pos:position pos:line="29" pos:column="13"/></name><operator pos:line="29" pos:column="13">.<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">data<pos:position pos:line="29" pos:column="18"/></name></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <name><name pos:line="29" pos:column="21">copyRequest<pos:position pos:line="29" pos:column="32"/></name><operator pos:line="29" pos:column="32">.<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="33">data<pos:position pos:line="29" pos:column="37"/></name></name></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">copyInto<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">.<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">length<pos:position pos:line="30" pos:column="20"/></name></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <name><name pos:line="30" pos:column="23">copyRequest<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">.<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="35">length<pos:position pos:line="30" pos:column="41"/></name></name></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">copyInto<pos:position pos:line="31" pos:column="13"/></name><operator pos:line="31" pos:column="13">.<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">offset<pos:position pos:line="31" pos:column="20"/></name></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <name><name pos:line="31" pos:column="23">copyRequest<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">.<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="35">offset<pos:position pos:line="31" pos:column="41"/></name></name></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>

    <decl_stmt><decl><specifier pos:line="33" pos:column="5">static<pos:position pos:line="33" pos:column="11"/></specifier> <type><name pos:line="33" pos:column="12">bool<pos:position pos:line="33" pos:column="16"/></name></type> <name pos:line="33" pos:column="17">copying<pos:position pos:line="33" pos:column="24"/></name> <argument_list pos:line="33" pos:column="25">(<argument><expr><literal type="boolean" pos:line="33" pos:column="26">false<pos:position pos:line="33" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="32"/></argument_list></decl>;<pos:position pos:line="33" pos:column="33"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">assert<pos:position pos:line="34" pos:column="11"/></name> <argument_list pos:line="34" pos:column="12">(<argument><expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">copying<pos:position pos:line="34" pos:column="21"/></name></expr></argument>)<pos:position pos:line="34" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">copying<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <literal type="boolean" pos:line="35" pos:column="15">true<pos:position pos:line="35" pos:column="19"/></literal></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">PROF_start<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">storeClient_kickReads<pos:position pos:line="36" pos:column="37"/></name></expr></argument>)<pos:position pos:line="36" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="39"/></expr_stmt>
    <comment type="block" pos:line="37" pos:column="5">/* we might be blocking comm reads due to readahead limits
     * now we have a new offset, trigger those reads...
     */</comment>
    <expr_stmt><expr><call><name><name pos:line="40" pos:column="5">entry<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">-&gt;<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="12">mem_obj<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">-&gt;<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="21">kickReads<pos:position pos:line="40" pos:column="30"/></name></name><argument_list pos:line="40" pos:column="30">()<pos:position pos:line="40" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">PROF_stop<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">storeClient_kickReads<pos:position pos:line="41" pos:column="36"/></name></expr></argument>)<pos:position pos:line="41" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="42" pos:column="5">copying<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <literal type="boolean" pos:line="42" pos:column="15">false<pos:position pos:line="42" pos:column="20"/></literal></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>

    <comment type="line" pos:line="44" pos:column="5">// XXX: storeClientCopy2 calls doCopy() whose callback may free 'this'!</comment>
    <comment type="line" pos:line="45" pos:column="5">// We should make store copying asynchronous, to avoid worrying about</comment>
    <comment type="line" pos:line="46" pos:column="5">// 'this' being secretly deleted while we are still inside the object.</comment>
    <comment type="line" pos:line="47" pos:column="5">// For now, lock and use on-stack objects after storeClientCopy2().</comment>
    <expr_stmt><expr><operator pos:line="48" pos:column="5">++<pos:position pos:line="48" pos:column="7"/></operator><name><name pos:line="48" pos:column="7">anEntry<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">-&gt;<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="16">lock_count<pos:position pos:line="48" pos:column="26"/></name></name></expr>;<pos:position pos:line="48" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="50" pos:column="5">storeClientCopy2<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><name pos:line="50" pos:column="22">entry<pos:position pos:line="50" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="29">this<pos:position pos:line="50" pos:column="33"/></name></expr></argument>)<pos:position pos:line="50" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="35"/></expr_stmt>

<cpp:if pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">if<pos:position pos:line="52" pos:column="4"/></cpp:directive> <expr><name pos:line="52" pos:column="5">USE_ADAPTATION<pos:position pos:line="52" pos:column="19"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="53" pos:column="5">anEntry<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">-&gt;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="14">kickProducer<pos:position pos:line="53" pos:column="26"/></name></name><argument_list pos:line="53" pos:column="26">()<pos:position pos:line="53" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name><name pos:line="56" pos:column="5">anEntry<pos:position pos:line="56" pos:column="12"/></name><operator pos:line="56" pos:column="12">-&gt;<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="14">unlock<pos:position pos:line="56" pos:column="20"/></name></name><argument_list pos:line="56" pos:column="20">()<pos:position pos:line="56" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="23"/></expr_stmt> <comment type="line" pos:line="56" pos:column="24">// after the "++enEntry-&gt;lock_count" above</comment>
    <comment type="line" pos:line="57" pos:column="5">// Add no code here. This object may no longer exist.</comment>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
