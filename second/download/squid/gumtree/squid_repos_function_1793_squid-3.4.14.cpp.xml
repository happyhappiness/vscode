<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1793_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">unsigned<pos:position pos:line="1" pos:column="9"/></name> <name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type>
<name><name pos:line="2" pos:column="1">StatHist<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">findBin<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">double<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">v<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{

    <expr_stmt><expr><name pos:line="5" pos:column="5">v<pos:position pos:line="5" pos:column="6"/></name> <operator pos:line="5" pos:column="7">-=<pos:position pos:line="5" pos:column="9"/></operator> <name pos:line="5" pos:column="10">min_<pos:position pos:line="5" pos:column="14"/></name></expr>;<pos:position pos:line="5" pos:column="15"/></expr_stmt>		<comment type="block" pos:line="5" pos:column="25">/* offset */</comment>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">v<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">&lt;=<pos:position pos:line="7" pos:column="16"/></operator> <literal type="number" pos:line="7" pos:column="14">0.0<pos:position pos:line="7" pos:column="17"/></literal></expr>)<pos:position pos:line="7" pos:column="18"/></condition><then pos:line="7" pos:column="18">		<comment type="block" pos:line="7" pos:column="33">/* too small */</comment>
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>;<pos:position pos:line="8" pos:column="18"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">unsigned<pos:position pos:line="10" pos:column="13"/></name> <name pos:line="10" pos:column="14">int<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">bin<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">double<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">tmp_bin<pos:position pos:line="11" pos:column="19"/></name><init pos:line="11" pos:column="19">=<expr><call><name pos:line="11" pos:column="20">floor<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">scale_<pos:position pos:line="11" pos:column="32"/></name> <operator pos:line="11" pos:column="33">*<pos:position pos:line="11" pos:column="34"/></operator> <call><name pos:line="11" pos:column="35">val_in<pos:position pos:line="11" pos:column="41"/></name><argument_list pos:line="11" pos:column="41">(<argument><expr><name pos:line="11" pos:column="42">v<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call> <operator pos:line="11" pos:column="45">+<pos:position pos:line="11" pos:column="46"/></operator> <literal type="number" pos:line="11" pos:column="47">0.5<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="52"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">tmp_bin<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">&lt;<pos:position pos:line="13" pos:column="21"/></operator> <literal type="number" pos:line="13" pos:column="19">0.0<pos:position pos:line="13" pos:column="22"/></literal></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23"> <comment type="line" pos:line="13" pos:column="24">// should not happen</comment>
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="15" pos:column="5">bin<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <cast type="static" pos:line="15" pos:column="11">static_cast <argument_list type="generic" pos:line="15" pos:column="23">&lt;<argument><expr><name pos:line="15" pos:column="24">unsigned<pos:position pos:line="15" pos:column="32"/></name> <name pos:line="15" pos:column="33">int<pos:position pos:line="15" pos:column="36"/></name></expr></argument>&gt;<pos:position pos:line="15" pos:column="40"/></argument_list><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">tmp_bin<pos:position pos:line="15" pos:column="45"/></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></cast></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">bin<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">&gt;=<pos:position pos:line="17" pos:column="18"/></operator> <name pos:line="17" pos:column="16">capacity_<pos:position pos:line="17" pos:column="25"/></name></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26">	<comment type="block" pos:line="17" pos:column="33">/* too big */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="9">bin<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <name pos:line="18" pos:column="15">capacity_<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">-<pos:position pos:line="18" pos:column="26"/></operator> <literal type="number" pos:line="18" pos:column="27">1<pos:position pos:line="18" pos:column="28"/></literal></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt></block></then></if>

    <return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">bin<pos:position pos:line="20" pos:column="15"/></name></expr>;<pos:position pos:line="20" pos:column="16"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
