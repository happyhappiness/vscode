<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7400_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">PeerConnector<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">bail<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><name pos:line="2" pos:column="31">ErrorState<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">error<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">error<pos:position pos:line="4" pos:column="15"/></name></expr></argument>)<pos:position pos:line="4" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="17"/></expr_stmt> <comment type="line" pos:line="4" pos:column="18">// or the recepient will not know there was a problem</comment>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">Must<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><name pos:line="5" pos:column="10">callback<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">!=<pos:position pos:line="5" pos:column="21"/></operator> <name pos:line="5" pos:column="22">NULL<pos:position pos:line="5" pos:column="26"/></name></expr></argument>)<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">CbDialer<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">dialer<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><cast type="dynamic" pos:line="6" pos:column="24">dynamic_cast<argument_list type="generic" pos:line="6" pos:column="36">&lt;<argument><expr><name pos:line="6" pos:column="37">CbDialer<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">*<pos:position pos:line="6" pos:column="46"/></operator></expr></argument>&gt;<pos:position pos:line="6" pos:column="50"/></argument_list><argument_list pos:line="6" pos:column="47">(<argument><expr><call><name><name pos:line="6" pos:column="48">callback<pos:position pos:line="6" pos:column="56"/></name><operator pos:line="6" pos:column="56">-&gt;<pos:position pos:line="6" pos:column="61"/></operator><name pos:line="6" pos:column="58">getDialer<pos:position pos:line="6" pos:column="67"/></name></name><argument_list pos:line="6" pos:column="67">()<pos:position pos:line="6" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="70"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="6" pos:column="71"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">Must<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><name pos:line="7" pos:column="10">dialer<pos:position pos:line="7" pos:column="16"/></name></expr></argument>)<pos:position pos:line="7" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">dialer<pos:position pos:line="8" pos:column="11"/></name><operator pos:line="8" pos:column="11">-&gt;<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="13">answer<pos:position pos:line="8" pos:column="19"/></name></name><argument_list pos:line="8" pos:column="19">()<pos:position pos:line="8" pos:column="21"/></argument_list></call><operator pos:line="8" pos:column="21">.<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">error<pos:position pos:line="8" pos:column="27"/></name> <operator pos:line="8" pos:column="28">=<pos:position pos:line="8" pos:column="29"/></operator> <name pos:line="8" pos:column="30">error<pos:position pos:line="8" pos:column="35"/></name></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">callBack<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">()<pos:position pos:line="10" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="16"/></expr_stmt>
    <comment type="line" pos:line="11" pos:column="5">// Our job is done. The callabck recepient will probably close the failed</comment>
    <comment type="line" pos:line="12" pos:column="5">// peer connection and try another peer or go direct (if possible). We</comment>
    <comment type="line" pos:line="13" pos:column="5">// can close the connection ourselves (our error notification would reach</comment>
    <comment type="line" pos:line="14" pos:column="5">// the recepient before the fd-closure notification), but we would rather</comment>
    <comment type="line" pos:line="15" pos:column="5">// minimize the number of fd-closure notifications and let the recepient</comment>
    <comment type="line" pos:line="16" pos:column="5">// manage the TCP state of the connection.</comment>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
