<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3304_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">AccessCheck<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">check<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">()<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">93<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">4<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="string" pos:line="4" pos:column="27">"start checking"<pos:position pos:line="4" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="45"/></expr_stmt>

    <typedef pos:line="6" pos:column="5">typedef <type><name><name pos:line="6" pos:column="13">AccessRules<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">::<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">iterator<pos:position pos:line="6" pos:column="34"/></name></name></type> <name pos:line="6" pos:column="35">ARI<pos:position pos:line="6" pos:column="38"/></name>;<pos:position pos:line="6" pos:column="39"/></typedef>
    <for pos:line="7" pos:column="5">for <control pos:line="7" pos:column="9">(<init><decl><type><name pos:line="7" pos:column="10">ARI<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">i<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><call><name pos:line="7" pos:column="18">AllRules<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">()<pos:position pos:line="7" pos:column="28"/></argument_list></call><operator pos:line="7" pos:column="28">.<pos:position pos:line="7" pos:column="29"/></operator><call><name pos:line="7" pos:column="29">begin<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">()<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></init> <condition><expr><name pos:line="7" pos:column="38">i<pos:position pos:line="7" pos:column="39"/></name> <operator pos:line="7" pos:column="40">!=<pos:position pos:line="7" pos:column="42"/></operator> <call><name pos:line="7" pos:column="43">AllRules<pos:position pos:line="7" pos:column="51"/></name><argument_list pos:line="7" pos:column="51">()<pos:position pos:line="7" pos:column="53"/></argument_list></call><operator pos:line="7" pos:column="53">.<pos:position pos:line="7" pos:column="54"/></operator><call><name pos:line="7" pos:column="54">end<pos:position pos:line="7" pos:column="57"/></name><argument_list pos:line="7" pos:column="57">()<pos:position pos:line="7" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="60"/></condition> <incr><expr><operator pos:line="7" pos:column="61">++<pos:position pos:line="7" pos:column="63"/></operator><name pos:line="7" pos:column="63">i<pos:position pos:line="7" pos:column="64"/></name></expr></incr>)<pos:position pos:line="7" pos:column="65"/></control> <block pos:line="7" pos:column="66">{
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">AccessRule<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">r<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><operator pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="26">i<pos:position pos:line="8" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">isCandidate<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><operator pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">r<pos:position pos:line="9" pos:column="27"/></name></expr></argument>)<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29"> <block pos:line="9" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="10" pos:column="13">debugs<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><literal type="number" pos:line="10" pos:column="20">93<pos:position pos:line="10" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="24">5<pos:position pos:line="10" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="27">HERE<pos:position pos:line="10" pos:column="31"/></name> <operator pos:line="10" pos:column="32">&lt;&lt;<pos:position pos:line="10" pos:column="40"/></operator> <literal type="string" pos:line="10" pos:column="35">"check: rule '"<pos:position pos:line="10" pos:column="50"/></literal> <operator pos:line="10" pos:column="51">&lt;&lt;<pos:position pos:line="10" pos:column="59"/></operator> <name><name pos:line="10" pos:column="54">r<pos:position pos:line="10" pos:column="55"/></name><operator pos:line="10" pos:column="55">-&gt;<pos:position pos:line="10" pos:column="60"/></operator><name pos:line="10" pos:column="57">id<pos:position pos:line="10" pos:column="59"/></name></name> <operator pos:line="10" pos:column="60">&lt;&lt;<pos:position pos:line="10" pos:column="68"/></operator> <literal type="string" pos:line="10" pos:column="63">"' is a candidate"<pos:position pos:line="10" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="83"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="11" pos:column="13">candidates<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">.<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">push_back<pos:position pos:line="11" pos:column="33"/></name></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name><name pos:line="11" pos:column="34">r<pos:position pos:line="11" pos:column="35"/></name><operator pos:line="11" pos:column="35">-&gt;<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="37">id<pos:position pos:line="11" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="12" pos:column="10"/></block></then></if>
    }<pos:position pos:line="13" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">checkCandidates<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">()<pos:position pos:line="15" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
