<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_12_squid-3.4.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">std<pos:position pos:line="1" pos:column="4"/></name><operator pos:line="1" pos:column="4">::<pos:position pos:line="1" pos:column="6"/></operator><name pos:line="1" pos:column="6">ostream<pos:position pos:line="1" pos:column="13"/></name></name> <modifier pos:line="1" pos:column="14">&amp;<pos:position pos:line="1" pos:column="19"/></modifier></type>
<name><name pos:line="2" pos:column="1">Debug<pos:position pos:line="2" pos:column="6"/></name><operator pos:line="2" pos:column="6">::<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">getDebugOut<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">TheDepth<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">&gt;=<pos:position pos:line="4" pos:column="26"/></operator> <literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="5" pos:column="5">++<pos:position pos:line="5" pos:column="7"/></operator><name pos:line="5" pos:column="7">TheDepth<pos:position pos:line="5" pos:column="15"/></name></expr>;<pos:position pos:line="5" pos:column="16"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">TheDepth<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">&gt;<pos:position pos:line="6" pos:column="22"/></operator> <literal type="number" pos:line="6" pos:column="20">1<pos:position pos:line="6" pos:column="21"/></literal></expr>)<pos:position pos:line="6" pos:column="22"/></condition><then pos:line="6" pos:column="22"> <block pos:line="6" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">assert<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">CurrentDebug<pos:position pos:line="7" pos:column="28"/></name></expr></argument>)<pos:position pos:line="7" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">CurrentDebug<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">&lt;&lt;<pos:position pos:line="8" pos:column="31"/></operator> <name><name pos:line="8" pos:column="26">std<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">::<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="31">endl<pos:position pos:line="8" pos:column="35"/></name></name> <operator pos:line="8" pos:column="36">&lt;&lt;<pos:position pos:line="8" pos:column="44"/></operator> <literal type="string" pos:line="8" pos:column="39">"reentrant debuging "<pos:position pos:line="8" pos:column="60"/></literal> <operator pos:line="8" pos:column="61">&lt;&lt;<pos:position pos:line="8" pos:column="69"/></operator> <name pos:line="8" pos:column="64">TheDepth<pos:position pos:line="8" pos:column="72"/></name> <operator pos:line="8" pos:column="73">&lt;&lt;<pos:position pos:line="8" pos:column="81"/></operator> <literal type="string" pos:line="8" pos:column="76">"-{"<pos:position pos:line="8" pos:column="80"/></literal></expr>;<pos:position pos:line="8" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then> <else pos:line="9" pos:column="7">else <block pos:line="9" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><operator pos:line="10" pos:column="16">!<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">CurrentDebug<pos:position pos:line="10" pos:column="29"/></name></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="11" pos:column="9">CurrentDebug<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <operator pos:line="11" pos:column="24">new<pos:position pos:line="11" pos:column="27"/></operator> <call><name><name pos:line="11" pos:column="28">std<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">::<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">ostringstream<pos:position pos:line="11" pos:column="46"/></name></name><argument_list pos:line="11" pos:column="46">()<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt>
        <comment type="line" pos:line="12" pos:column="9">// set default formatting flags</comment>
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">CurrentDebug<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">-&gt;<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="23">setf<pos:position pos:line="13" pos:column="27"/></name></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name><name pos:line="13" pos:column="28">std<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">::<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="33">ios<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">::<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">fixed<pos:position pos:line="13" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="14" pos:column="9">CurrentDebug<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">-&gt;<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="23">precision<pos:position pos:line="14" pos:column="32"/></name></name><argument_list pos:line="14" pos:column="32">(<argument><expr><literal type="number" pos:line="14" pos:column="33">2<pos:position pos:line="14" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></else></if>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">*<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">CurrentDebug<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
