<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1428_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">watch_child<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">char<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name><name pos:line="2" pos:column="19">argv<pos:position pos:line="2" pos:column="23"/></name><index pos:line="2" pos:column="23">[]<pos:position pos:line="2" pos:column="25"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="26"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifndef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifndef<pos:position pos:line="4" pos:column="8"/></cpp:directive> <name pos:line="4" pos:column="9">_SQUID_MSWIN_<pos:position pos:line="4" pos:column="22"/></name></cpp:ifndef>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">prog<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">failcount<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">time_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">start<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">time_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">stop<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">_SQUID_NEXT_<pos:position pos:line="9" pos:column="20"/></name></cpp:ifdef>

    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">union<pos:position pos:line="11" pos:column="10"/></name> <name pos:line="11" pos:column="11">wait<pos:position pos:line="11" pos:column="15"/></name></name></type> <name pos:line="11" pos:column="16">status<pos:position pos:line="11" pos:column="22"/></name></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else<pos:position pos:line="12" pos:column="6"/></cpp:directive></cpp:else>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">status<pos:position pos:line="14" pos:column="15"/></name></decl>;<pos:position pos:line="14" pos:column="16"/></decl_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name pos:line="17" pos:column="5">pid_t<pos:position pos:line="17" pos:column="10"/></name></type> <name pos:line="17" pos:column="11">pid<pos:position pos:line="17" pos:column="14"/></name></decl>;<pos:position pos:line="17" pos:column="15"/></decl_stmt>
<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef<pos:position pos:line="18" pos:column="7"/></cpp:directive> <name pos:line="18" pos:column="8">TIOCNOTTY<pos:position pos:line="18" pos:column="17"/></name></cpp:ifdef>

    <decl_stmt><decl><type><name pos:line="20" pos:column="5">int<pos:position pos:line="20" pos:column="8"/></name></type> <name pos:line="20" pos:column="9">i<pos:position pos:line="20" pos:column="10"/></name></decl>;<pos:position pos:line="20" pos:column="11"/></decl_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name pos:line="23" pos:column="5">int<pos:position pos:line="23" pos:column="8"/></name></type> <name pos:line="23" pos:column="9">nullfd<pos:position pos:line="23" pos:column="15"/></name></decl>;<pos:position pos:line="23" pos:column="16"/></decl_stmt>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">*<pos:position pos:line="25" pos:column="10"/></operator><operator pos:line="25" pos:column="10">(<pos:position pos:line="25" pos:column="11"/></operator><name><name pos:line="25" pos:column="11">argv<pos:position pos:line="25" pos:column="15"/></name><index pos:line="25" pos:column="15">[<expr><literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>]<pos:position pos:line="25" pos:column="18"/></index></name><operator pos:line="25" pos:column="18">)<pos:position pos:line="25" pos:column="19"/></operator> <operator pos:line="25" pos:column="20">==<pos:position pos:line="25" pos:column="22"/></operator> <literal type="char" pos:line="25" pos:column="23">'('<pos:position pos:line="25" pos:column="26"/></literal></expr>)<pos:position pos:line="25" pos:column="27"/></condition><then pos:line="25" pos:column="27">
        <block type="pseudo"><return pos:line="26" pos:column="9">return;<pos:position pos:line="26" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">openlog<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name pos:line="28" pos:column="13">APP_SHORTNAME<pos:position pos:line="28" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="28">LOG_PID<pos:position pos:line="28" pos:column="35"/></name> <operator pos:line="28" pos:column="36">|<pos:position pos:line="28" pos:column="37"/></operator> <name pos:line="28" pos:column="38">LOG_NDELAY<pos:position pos:line="28" pos:column="48"/></name> <operator pos:line="28" pos:column="49">|<pos:position pos:line="28" pos:column="50"/></operator> <name pos:line="28" pos:column="51">LOG_CONS<pos:position pos:line="28" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="61">LOG_LOCAL4<pos:position pos:line="28" pos:column="71"/></name></expr></argument>)<pos:position pos:line="28" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="73"/></expr_stmt>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">(<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">pid<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <call><name pos:line="30" pos:column="16">fork<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">()<pos:position pos:line="30" pos:column="22"/></argument_list></call><operator pos:line="30" pos:column="22">)<pos:position pos:line="30" pos:column="23"/></operator> <operator pos:line="30" pos:column="24">&lt;<pos:position pos:line="30" pos:column="28"/></operator> <literal type="number" pos:line="30" pos:column="26">0<pos:position pos:line="30" pos:column="27"/></literal></expr>)<pos:position pos:line="30" pos:column="28"/></condition><then pos:line="30" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="9">syslog<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><name pos:line="31" pos:column="16">LOG_ALERT<pos:position pos:line="31" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="27">"fork failed: %s"<pos:position pos:line="31" pos:column="44"/></literal></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="46">xstrerror<pos:position pos:line="31" pos:column="55"/></name><argument_list pos:line="31" pos:column="55">()<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="59"/></expr_stmt></block></then>
    <elseif pos:line="32" pos:column="5">else <if pos:line="32" pos:column="10">if <condition pos:line="32" pos:column="13">(<expr><name pos:line="32" pos:column="14">pid<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">&gt;<pos:position pos:line="32" pos:column="22"/></operator> <literal type="number" pos:line="32" pos:column="20">0<pos:position pos:line="32" pos:column="21"/></literal></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="9">exit<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><literal type="number" pos:line="33" pos:column="14">0<pos:position pos:line="33" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="17"/></expr_stmt></block></then></if></elseif></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><call><name pos:line="35" pos:column="9">setsid<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">()<pos:position pos:line="35" pos:column="17"/></argument_list></call> <operator pos:line="35" pos:column="18">&lt;<pos:position pos:line="35" pos:column="22"/></operator> <literal type="number" pos:line="35" pos:column="20">0<pos:position pos:line="35" pos:column="21"/></literal></expr>)<pos:position pos:line="35" pos:column="22"/></condition><then pos:line="35" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="9">syslog<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">LOG_ALERT<pos:position pos:line="36" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="27">"setsid failed: %s"<pos:position pos:line="36" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="48">xstrerror<pos:position pos:line="36" pos:column="57"/></name><argument_list pos:line="36" pos:column="57">()<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="61"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="38" pos:column="5">closelog<pos:position pos:line="38" pos:column="13"/></name><argument_list pos:line="38" pos:column="13">()<pos:position pos:line="38" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="16"/></expr_stmt>

<cpp:ifdef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifdef<pos:position pos:line="40" pos:column="7"/></cpp:directive> <name pos:line="40" pos:column="8">TIOCNOTTY<pos:position pos:line="40" pos:column="17"/></name></cpp:ifdef>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><operator pos:line="42" pos:column="9">(<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="10">i<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">=<pos:position pos:line="42" pos:column="13"/></operator> <call><name pos:line="42" pos:column="14">open<pos:position pos:line="42" pos:column="18"/></name><argument_list pos:line="42" pos:column="18">(<argument><expr><literal type="string" pos:line="42" pos:column="19">"/dev/tty"<pos:position pos:line="42" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="31">O_RDWR<pos:position pos:line="42" pos:column="37"/></name> <operator pos:line="42" pos:column="38">|<pos:position pos:line="42" pos:column="39"/></operator> <name pos:line="42" pos:column="40">O_TEXT<pos:position pos:line="42" pos:column="46"/></name></expr></argument>)<pos:position pos:line="42" pos:column="47"/></argument_list></call><operator pos:line="42" pos:column="47">)<pos:position pos:line="42" pos:column="48"/></operator> <operator pos:line="42" pos:column="49">&gt;=<pos:position pos:line="42" pos:column="54"/></operator> <literal type="number" pos:line="42" pos:column="52">0<pos:position pos:line="42" pos:column="53"/></literal></expr>)<pos:position pos:line="42" pos:column="54"/></condition><then pos:line="42" pos:column="54"> <block pos:line="42" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">ioctl<pos:position pos:line="43" pos:column="14"/></name><argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">i<pos:position pos:line="43" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="18">TIOCNOTTY<pos:position pos:line="43" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="29">NULL<pos:position pos:line="43" pos:column="33"/></name></expr></argument>)<pos:position pos:line="43" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">close<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">(<argument><expr><name pos:line="44" pos:column="15">i<pos:position pos:line="44" pos:column="16"/></name></expr></argument>)<pos:position pos:line="44" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="49" pos:column="5">/*
     * RBCOLLINS - if cygwin stackdumps when squid is run without
     * -N, check the cygwin1.dll version, it needs to be AT LEAST
     * 1.1.3.  execvp had a bit overflow error in a loop..
     */</comment>
    <comment type="block" pos:line="54" pos:column="5">/* Connect stdio to /dev/null in daemon mode */</comment>
    <expr_stmt><expr><name pos:line="55" pos:column="5">nullfd<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <call><name pos:line="55" pos:column="14">open<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">_PATH_DEVNULL<pos:position pos:line="55" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="34">O_RDWR<pos:position pos:line="55" pos:column="40"/></name> <operator pos:line="55" pos:column="41">|<pos:position pos:line="55" pos:column="42"/></operator> <name pos:line="55" pos:column="43">O_TEXT<pos:position pos:line="55" pos:column="49"/></name></expr></argument>)<pos:position pos:line="55" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="51"/></expr_stmt>

    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">nullfd<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">&lt;<pos:position pos:line="57" pos:column="20"/></operator> <literal type="number" pos:line="57" pos:column="18">0<pos:position pos:line="57" pos:column="19"/></literal></expr>)<pos:position pos:line="57" pos:column="20"/></condition><then pos:line="57" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="9">fatalf<pos:position pos:line="58" pos:column="15"/></name><argument_list pos:line="58" pos:column="15">(<argument><expr><name pos:line="58" pos:column="16">_PATH_DEVNULL<pos:position pos:line="58" pos:column="29"/></name> <literal type="string" pos:line="58" pos:column="30">" %s\n"<pos:position pos:line="58" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name pos:line="58" pos:column="39">xstrerror<pos:position pos:line="58" pos:column="48"/></name><argument_list pos:line="58" pos:column="48">()<pos:position pos:line="58" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="58" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="52"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="60" pos:column="5">dup2<pos:position pos:line="60" pos:column="9"/></name><argument_list pos:line="60" pos:column="9">(<argument><expr><name pos:line="60" pos:column="10">nullfd<pos:position pos:line="60" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="18">0<pos:position pos:line="60" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="21"/></expr_stmt>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name><name pos:line="62" pos:column="9">Debug<pos:position pos:line="62" pos:column="14"/></name><operator pos:line="62" pos:column="14">::<pos:position pos:line="62" pos:column="16"/></operator><name pos:line="62" pos:column="16">log_stderr<pos:position pos:line="62" pos:column="26"/></name></name> <operator pos:line="62" pos:column="27">&lt;<pos:position pos:line="62" pos:column="31"/></operator> <literal type="number" pos:line="62" pos:column="29">0<pos:position pos:line="62" pos:column="30"/></literal></expr>)<pos:position pos:line="62" pos:column="31"/></condition><then pos:line="62" pos:column="31"> <block pos:line="62" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">dup2<pos:position pos:line="63" pos:column="13"/></name><argument_list pos:line="63" pos:column="13">(<argument><expr><name pos:line="63" pos:column="14">nullfd<pos:position pos:line="63" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="22">1<pos:position pos:line="63" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">dup2<pos:position pos:line="64" pos:column="13"/></name><argument_list pos:line="64" pos:column="13">(<argument><expr><name pos:line="64" pos:column="14">nullfd<pos:position pos:line="64" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="22">2<pos:position pos:line="64" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <for pos:line="67" pos:column="5">for <control pos:line="67" pos:column="9">(<init pos:line="67" pos:column="10">;<pos:position pos:line="67" pos:column="11"/></init><condition pos:line="67" pos:column="11">;<pos:position pos:line="67" pos:column="12"/></condition><incr/>)<pos:position pos:line="67" pos:column="13"/></control> <block pos:line="67" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">mainStartScript<pos:position pos:line="68" pos:column="24"/></name><argument_list pos:line="68" pos:column="24">(<argument><expr><name><name pos:line="68" pos:column="25">argv<pos:position pos:line="68" pos:column="29"/></name><index pos:line="68" pos:column="29">[<expr><literal type="number" pos:line="68" pos:column="30">0<pos:position pos:line="68" pos:column="31"/></literal></expr>]<pos:position pos:line="68" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="68" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="34"/></expr_stmt>

        <if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><operator pos:line="70" pos:column="13">(<pos:position pos:line="70" pos:column="14"/></operator><name pos:line="70" pos:column="14">pid<pos:position pos:line="70" pos:column="17"/></name> <operator pos:line="70" pos:column="18">=<pos:position pos:line="70" pos:column="19"/></operator> <call><name pos:line="70" pos:column="20">fork<pos:position pos:line="70" pos:column="24"/></name><argument_list pos:line="70" pos:column="24">()<pos:position pos:line="70" pos:column="26"/></argument_list></call><operator pos:line="70" pos:column="26">)<pos:position pos:line="70" pos:column="27"/></operator> <operator pos:line="70" pos:column="28">==<pos:position pos:line="70" pos:column="30"/></operator> <literal type="number" pos:line="70" pos:column="31">0<pos:position pos:line="70" pos:column="32"/></literal></expr>)<pos:position pos:line="70" pos:column="33"/></condition><then pos:line="70" pos:column="33"> <block pos:line="70" pos:column="34">{
            <comment type="block" pos:line="71" pos:column="13">/* child */</comment>
            <expr_stmt><expr><call><name pos:line="72" pos:column="13">openlog<pos:position pos:line="72" pos:column="20"/></name><argument_list pos:line="72" pos:column="20">(<argument><expr><name pos:line="72" pos:column="21">APP_SHORTNAME<pos:position pos:line="72" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="36">LOG_PID<pos:position pos:line="72" pos:column="43"/></name> <operator pos:line="72" pos:column="44">|<pos:position pos:line="72" pos:column="45"/></operator> <name pos:line="72" pos:column="46">LOG_NDELAY<pos:position pos:line="72" pos:column="56"/></name> <operator pos:line="72" pos:column="57">|<pos:position pos:line="72" pos:column="58"/></operator> <name pos:line="72" pos:column="59">LOG_CONS<pos:position pos:line="72" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="69">LOG_LOCAL4<pos:position pos:line="72" pos:column="79"/></name></expr></argument>)<pos:position pos:line="72" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="81"/></expr_stmt>
            <expr_stmt><expr><name pos:line="73" pos:column="13">prog<pos:position pos:line="73" pos:column="17"/></name> <operator pos:line="73" pos:column="18">=<pos:position pos:line="73" pos:column="19"/></operator> <call><name pos:line="73" pos:column="20">xstrdup<pos:position pos:line="73" pos:column="27"/></name><argument_list pos:line="73" pos:column="27">(<argument><expr><name><name pos:line="73" pos:column="28">argv<pos:position pos:line="73" pos:column="32"/></name><index pos:line="73" pos:column="32">[<expr><literal type="number" pos:line="73" pos:column="33">0<pos:position pos:line="73" pos:column="34"/></literal></expr>]<pos:position pos:line="73" pos:column="35"/></index></name></expr></argument>)<pos:position pos:line="73" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="74" pos:column="13">argv<pos:position pos:line="74" pos:column="17"/></name><index pos:line="74" pos:column="17">[<expr><literal type="number" pos:line="74" pos:column="18">0<pos:position pos:line="74" pos:column="19"/></literal></expr>]<pos:position pos:line="74" pos:column="20"/></index></name> <operator pos:line="74" pos:column="21">=<pos:position pos:line="74" pos:column="22"/></operator> <call><name pos:line="74" pos:column="23">xstrdup<pos:position pos:line="74" pos:column="30"/></name><argument_list pos:line="74" pos:column="30">(<argument><expr><literal type="string" pos:line="74" pos:column="31">"(squid)"<pos:position pos:line="74" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="75" pos:column="13">execvp<pos:position pos:line="75" pos:column="19"/></name><argument_list pos:line="75" pos:column="19">(<argument><expr><name pos:line="75" pos:column="20">prog<pos:position pos:line="75" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="26">argv<pos:position pos:line="75" pos:column="30"/></name></expr></argument>)<pos:position pos:line="75" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="76" pos:column="13">syslog<pos:position pos:line="76" pos:column="19"/></name><argument_list pos:line="76" pos:column="19">(<argument><expr><name pos:line="76" pos:column="20">LOG_ALERT<pos:position pos:line="76" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="31">"execvp failed: %s"<pos:position pos:line="76" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="76" pos:column="52">xstrerror<pos:position pos:line="76" pos:column="61"/></name><argument_list pos:line="76" pos:column="61">()<pos:position pos:line="76" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="76" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="65"/></expr_stmt>
        }<pos:position pos:line="77" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="79" pos:column="9">/* parent */</comment>
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">openlog<pos:position pos:line="80" pos:column="16"/></name><argument_list pos:line="80" pos:column="16">(<argument><expr><name pos:line="80" pos:column="17">APP_SHORTNAME<pos:position pos:line="80" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="32">LOG_PID<pos:position pos:line="80" pos:column="39"/></name> <operator pos:line="80" pos:column="40">|<pos:position pos:line="80" pos:column="41"/></operator> <name pos:line="80" pos:column="42">LOG_NDELAY<pos:position pos:line="80" pos:column="52"/></name> <operator pos:line="80" pos:column="53">|<pos:position pos:line="80" pos:column="54"/></operator> <name pos:line="80" pos:column="55">LOG_CONS<pos:position pos:line="80" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="65">LOG_LOCAL4<pos:position pos:line="80" pos:column="75"/></name></expr></argument>)<pos:position pos:line="80" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="77"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="82" pos:column="9">syslog<pos:position pos:line="82" pos:column="15"/></name><argument_list pos:line="82" pos:column="15">(<argument><expr><name pos:line="82" pos:column="16">LOG_NOTICE<pos:position pos:line="82" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="28">"Squid Parent: child process %d started"<pos:position pos:line="82" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="70">pid<pos:position pos:line="82" pos:column="73"/></name></expr></argument>)<pos:position pos:line="82" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="75"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="84" pos:column="9">time<pos:position pos:line="84" pos:column="13"/></name><argument_list pos:line="84" pos:column="13">(<argument><expr><operator pos:line="84" pos:column="14">&amp;<pos:position pos:line="84" pos:column="19"/></operator><name pos:line="84" pos:column="15">start<pos:position pos:line="84" pos:column="20"/></name></expr></argument>)<pos:position pos:line="84" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="22"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="86" pos:column="9">squid_signal<pos:position pos:line="86" pos:column="21"/></name><argument_list pos:line="86" pos:column="21">(<argument><expr><name pos:line="86" pos:column="22">SIGINT<pos:position pos:line="86" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="30">SIG_IGN<pos:position pos:line="86" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="39">SA_RESTART<pos:position pos:line="86" pos:column="49"/></name></expr></argument>)<pos:position pos:line="86" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="51"/></expr_stmt>

<cpp:ifdef pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">ifdef<pos:position pos:line="88" pos:column="7"/></cpp:directive> <name pos:line="88" pos:column="8">_SQUID_NEXT_<pos:position pos:line="88" pos:column="20"/></name></cpp:ifdef>

        <expr_stmt><expr><name pos:line="90" pos:column="9">pid<pos:position pos:line="90" pos:column="12"/></name> <operator pos:line="90" pos:column="13">=<pos:position pos:line="90" pos:column="14"/></operator> <call><name pos:line="90" pos:column="15">wait3<pos:position pos:line="90" pos:column="20"/></name><argument_list pos:line="90" pos:column="20">(<argument><expr><operator pos:line="90" pos:column="21">&amp;<pos:position pos:line="90" pos:column="26"/></operator><name pos:line="90" pos:column="22">status<pos:position pos:line="90" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="30">0<pos:position pos:line="90" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="33">NULL<pos:position pos:line="90" pos:column="37"/></name></expr></argument>)<pos:position pos:line="90" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="39"/></expr_stmt>

<cpp:else pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">else<pos:position pos:line="92" pos:column="6"/></cpp:directive></cpp:else>

        <expr_stmt><expr><name pos:line="94" pos:column="9">pid<pos:position pos:line="94" pos:column="12"/></name> <operator pos:line="94" pos:column="13">=<pos:position pos:line="94" pos:column="14"/></operator> <call><name pos:line="94" pos:column="15">waitpid<pos:position pos:line="94" pos:column="22"/></name><argument_list pos:line="94" pos:column="22">(<argument><expr><operator pos:line="94" pos:column="23">-<pos:position pos:line="94" pos:column="24"/></operator><literal type="number" pos:line="94" pos:column="24">1<pos:position pos:line="94" pos:column="25"/></literal></expr></argument>, <argument><expr><operator pos:line="94" pos:column="27">&amp;<pos:position pos:line="94" pos:column="32"/></operator><name pos:line="94" pos:column="28">status<pos:position pos:line="94" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="94" pos:column="36">0<pos:position pos:line="94" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="39"/></expr_stmt>

<cpp:endif pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">endif<pos:position pos:line="96" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="98" pos:column="9">time<pos:position pos:line="98" pos:column="13"/></name><argument_list pos:line="98" pos:column="13">(<argument><expr><operator pos:line="98" pos:column="14">&amp;<pos:position pos:line="98" pos:column="19"/></operator><name pos:line="98" pos:column="15">stop<pos:position pos:line="98" pos:column="19"/></name></expr></argument>)<pos:position pos:line="98" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="21"/></expr_stmt>

        <if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><call><name pos:line="100" pos:column="13">WIFEXITED<pos:position pos:line="100" pos:column="22"/></name><argument_list pos:line="100" pos:column="22">(<argument><expr><name pos:line="100" pos:column="23">status<pos:position pos:line="100" pos:column="29"/></name></expr></argument>)<pos:position pos:line="100" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="100" pos:column="31"/></condition><then pos:line="100" pos:column="31"> <block pos:line="100" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="101" pos:column="13">syslog<pos:position pos:line="101" pos:column="19"/></name><argument_list pos:line="101" pos:column="19">(<argument><expr><name pos:line="101" pos:column="20">LOG_NOTICE<pos:position pos:line="101" pos:column="30"/></name></expr></argument>,
                   <argument><expr><literal type="string" pos:line="102" pos:column="20">"Squid Parent: child process %d exited with status %d"<pos:position pos:line="102" pos:column="74"/></literal></expr></argument>,
                   <argument><expr><name pos:line="103" pos:column="20">pid<pos:position pos:line="103" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="103" pos:column="25">WEXITSTATUS<pos:position pos:line="103" pos:column="36"/></name><argument_list pos:line="103" pos:column="36">(<argument><expr><name pos:line="103" pos:column="37">status<pos:position pos:line="103" pos:column="43"/></name></expr></argument>)<pos:position pos:line="103" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="103" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="104" pos:column="10"/></block></then> <elseif pos:line="104" pos:column="11">else <if pos:line="104" pos:column="16">if <condition pos:line="104" pos:column="19">(<expr><call><name pos:line="104" pos:column="20">WIFSIGNALED<pos:position pos:line="104" pos:column="31"/></name><argument_list pos:line="104" pos:column="31">(<argument><expr><name pos:line="104" pos:column="32">status<pos:position pos:line="104" pos:column="38"/></name></expr></argument>)<pos:position pos:line="104" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="104" pos:column="40"/></condition><then pos:line="104" pos:column="40"> <block pos:line="104" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="105" pos:column="13">syslog<pos:position pos:line="105" pos:column="19"/></name><argument_list pos:line="105" pos:column="19">(<argument><expr><name pos:line="105" pos:column="20">LOG_NOTICE<pos:position pos:line="105" pos:column="30"/></name></expr></argument>,
                   <argument><expr><literal type="string" pos:line="106" pos:column="20">"Squid Parent: child process %d exited due to signal %d with status %d"<pos:position pos:line="106" pos:column="91"/></literal></expr></argument>,
                   <argument><expr><name pos:line="107" pos:column="20">pid<pos:position pos:line="107" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="107" pos:column="25">WTERMSIG<pos:position pos:line="107" pos:column="33"/></name><argument_list pos:line="107" pos:column="33">(<argument><expr><name pos:line="107" pos:column="34">status<pos:position pos:line="107" pos:column="40"/></name></expr></argument>)<pos:position pos:line="107" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="107" pos:column="43">WEXITSTATUS<pos:position pos:line="107" pos:column="54"/></name><argument_list pos:line="107" pos:column="54">(<argument><expr><name pos:line="107" pos:column="55">status<pos:position pos:line="107" pos:column="61"/></name></expr></argument>)<pos:position pos:line="107" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="107" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="64"/></expr_stmt>
        }<pos:position pos:line="108" pos:column="10"/></block></then></if></elseif> <else pos:line="108" pos:column="11">else <block pos:line="108" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">syslog<pos:position pos:line="109" pos:column="19"/></name><argument_list pos:line="109" pos:column="19">(<argument><expr><name pos:line="109" pos:column="20">LOG_NOTICE<pos:position pos:line="109" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="32">"Squid Parent: child process %d exited"<pos:position pos:line="109" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="73">pid<pos:position pos:line="109" pos:column="76"/></name></expr></argument>)<pos:position pos:line="109" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="78"/></expr_stmt>
        }<pos:position pos:line="110" pos:column="10"/></block></else></if>

        <if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><name pos:line="112" pos:column="13">stop<pos:position pos:line="112" pos:column="17"/></name> <operator pos:line="112" pos:column="18">-<pos:position pos:line="112" pos:column="19"/></operator> <name pos:line="112" pos:column="20">start<pos:position pos:line="112" pos:column="25"/></name> <operator pos:line="112" pos:column="26">&lt;<pos:position pos:line="112" pos:column="30"/></operator> <literal type="number" pos:line="112" pos:column="28">10<pos:position pos:line="112" pos:column="30"/></literal></expr>)<pos:position pos:line="112" pos:column="31"/></condition><then pos:line="112" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="113" pos:column="13">failcount<pos:position pos:line="113" pos:column="22"/></name><operator pos:line="113" pos:column="22">++<pos:position pos:line="113" pos:column="24"/></operator></expr>;<pos:position pos:line="113" pos:column="25"/></expr_stmt></block></then>
        <else pos:line="114" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="115" pos:column="13">failcount<pos:position pos:line="115" pos:column="22"/></name> <operator pos:line="115" pos:column="23">=<pos:position pos:line="115" pos:column="24"/></operator> <literal type="number" pos:line="115" pos:column="25">0<pos:position pos:line="115" pos:column="26"/></literal></expr>;<pos:position pos:line="115" pos:column="27"/></expr_stmt></block></else></if>

        <if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><name pos:line="117" pos:column="13">failcount<pos:position pos:line="117" pos:column="22"/></name> <operator pos:line="117" pos:column="23">==<pos:position pos:line="117" pos:column="25"/></operator> <literal type="number" pos:line="117" pos:column="26">5<pos:position pos:line="117" pos:column="27"/></literal></expr>)<pos:position pos:line="117" pos:column="28"/></condition><then pos:line="117" pos:column="28"> <block pos:line="117" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="118" pos:column="13">syslog<pos:position pos:line="118" pos:column="19"/></name><argument_list pos:line="118" pos:column="19">(<argument><expr><name pos:line="118" pos:column="20">LOG_ALERT<pos:position pos:line="118" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="31">"Exiting due to repeated, frequent failures"<pos:position pos:line="118" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="77"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="119" pos:column="13">exit<pos:position pos:line="119" pos:column="17"/></name><argument_list pos:line="119" pos:column="17">(<argument><expr><literal type="number" pos:line="119" pos:column="18">1<pos:position pos:line="119" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="120" pos:column="10"/></block></then></if>

        <if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><call><name pos:line="122" pos:column="13">WIFEXITED<pos:position pos:line="122" pos:column="22"/></name><argument_list pos:line="122" pos:column="22">(<argument><expr><name pos:line="122" pos:column="23">status<pos:position pos:line="122" pos:column="29"/></name></expr></argument>)<pos:position pos:line="122" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="31"/></condition><then pos:line="122" pos:column="31">
            <block type="pseudo"><if pos:line="123" pos:column="13">if <condition pos:line="123" pos:column="16">(<expr><call><name pos:line="123" pos:column="17">WEXITSTATUS<pos:position pos:line="123" pos:column="28"/></name><argument_list pos:line="123" pos:column="28">(<argument><expr><name pos:line="123" pos:column="29">status<pos:position pos:line="123" pos:column="35"/></name></expr></argument>)<pos:position pos:line="123" pos:column="36"/></argument_list></call> <operator pos:line="123" pos:column="37">==<pos:position pos:line="123" pos:column="39"/></operator> <literal type="number" pos:line="123" pos:column="40">0<pos:position pos:line="123" pos:column="41"/></literal></expr>)<pos:position pos:line="123" pos:column="42"/></condition><then pos:line="123" pos:column="42">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="124" pos:column="17">exit<pos:position pos:line="124" pos:column="21"/></name><argument_list pos:line="124" pos:column="21">(<argument><expr><literal type="number" pos:line="124" pos:column="22">0<pos:position pos:line="124" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="25"/></expr_stmt></block></then></if></block></then></if>

        <if pos:line="126" pos:column="9">if <condition pos:line="126" pos:column="12">(<expr><call><name pos:line="126" pos:column="13">WIFSIGNALED<pos:position pos:line="126" pos:column="24"/></name><argument_list pos:line="126" pos:column="24">(<argument><expr><name pos:line="126" pos:column="25">status<pos:position pos:line="126" pos:column="31"/></name></expr></argument>)<pos:position pos:line="126" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="33"/></condition><then pos:line="126" pos:column="33"> <block pos:line="126" pos:column="34">{
            <switch pos:line="127" pos:column="13">switch <condition pos:line="127" pos:column="20">(<expr><call><name pos:line="127" pos:column="21">WTERMSIG<pos:position pos:line="127" pos:column="29"/></name><argument_list pos:line="127" pos:column="29">(<argument><expr><name pos:line="127" pos:column="30">status<pos:position pos:line="127" pos:column="36"/></name></expr></argument>)<pos:position pos:line="127" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="127" pos:column="38"/></condition> <block pos:line="127" pos:column="39">{

            <case pos:line="129" pos:column="13">case <expr><name pos:line="129" pos:column="18">SIGKILL<pos:position pos:line="129" pos:column="25"/></name></expr>:<pos:position pos:line="129" pos:column="26"/></case>
                <expr_stmt><expr><call><name pos:line="130" pos:column="17">exit<pos:position pos:line="130" pos:column="21"/></name><argument_list pos:line="130" pos:column="21">(<argument><expr><literal type="number" pos:line="130" pos:column="22">0<pos:position pos:line="130" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="25"/></expr_stmt>
                <break pos:line="131" pos:column="17">break;<pos:position pos:line="131" pos:column="23"/></break>

            <case pos:line="133" pos:column="13">case <expr><name pos:line="133" pos:column="18">SIGINT<pos:position pos:line="133" pos:column="24"/></name></expr>:<pos:position pos:line="133" pos:column="25"/></case>
            <case pos:line="134" pos:column="13">case <expr><name pos:line="134" pos:column="18">SIGTERM<pos:position pos:line="134" pos:column="25"/></name></expr>:<pos:position pos:line="134" pos:column="26"/></case>
                <expr_stmt><expr><call><name pos:line="135" pos:column="17">syslog<pos:position pos:line="135" pos:column="23"/></name><argument_list pos:line="135" pos:column="23">(<argument><expr><name pos:line="135" pos:column="24">LOG_ALERT<pos:position pos:line="135" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="35">"Exiting due to unexpected forced shutdown"<pos:position pos:line="135" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="80"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="136" pos:column="17">exit<pos:position pos:line="136" pos:column="21"/></name><argument_list pos:line="136" pos:column="21">(<argument><expr><literal type="number" pos:line="136" pos:column="22">1<pos:position pos:line="136" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="25"/></expr_stmt>
                <break pos:line="137" pos:column="17">break;<pos:position pos:line="137" pos:column="23"/></break>

            <default pos:line="139" pos:column="13">default:<pos:position pos:line="139" pos:column="21"/></default>
                <break pos:line="140" pos:column="17">break;<pos:position pos:line="140" pos:column="23"/></break>
            }<pos:position pos:line="141" pos:column="14"/></block></switch>
        }<pos:position pos:line="142" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="144" pos:column="9">squid_signal<pos:position pos:line="144" pos:column="21"/></name><argument_list pos:line="144" pos:column="21">(<argument><expr><name pos:line="144" pos:column="22">SIGINT<pos:position pos:line="144" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="30">SIG_DFL<pos:position pos:line="144" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="39">SA_RESTART<pos:position pos:line="144" pos:column="49"/></name></expr></argument>)<pos:position pos:line="144" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="145" pos:column="9">sleep<pos:position pos:line="145" pos:column="14"/></name><argument_list pos:line="145" pos:column="14">(<argument><expr><literal type="number" pos:line="145" pos:column="15">3<pos:position pos:line="145" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="146" pos:column="6"/></block></for>

    <comment type="block" pos:line="148" pos:column="5">/* NOTREACHED */</comment>
<cpp:endif pos:line="149" pos:column="1">#<cpp:directive pos:line="149" pos:column="2">endif<pos:position pos:line="149" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="149" pos:column="8">/* _SQUID_MSWIN_ */</comment>

}<pos:position pos:line="151" pos:column="2"/></block></function></unit>
