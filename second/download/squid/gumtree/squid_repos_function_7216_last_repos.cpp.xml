<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7216_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Mem<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">Segment<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">open<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">theFD<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">&lt;<pos:position pos:line="4" pos:column="22"/></operator> <literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><name pos:line="6" pos:column="5">theFD<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">=<pos:position pos:line="6" pos:column="12"/></operator> <call><name pos:line="6" pos:column="13">shm_open<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><call><name><name pos:line="6" pos:column="22">theName<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">.<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">termedBuf<pos:position pos:line="6" pos:column="39"/></name></name><argument_list pos:line="6" pos:column="39">()<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="6" pos:column="43">O_RDWR<pos:position pos:line="6" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="51">0<pos:position pos:line="6" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="54"/></expr_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">theFD<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">&lt;<pos:position pos:line="7" pos:column="19"/></operator> <literal type="number" pos:line="7" pos:column="17">0<pos:position pos:line="7" pos:column="18"/></literal></expr>)<pos:position pos:line="7" pos:column="19"/></condition><then pos:line="7" pos:column="19"> <block pos:line="7" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">xerrno<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name pos:line="8" pos:column="22">errno<pos:position pos:line="8" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">54<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">5<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="23">"shm_open "<pos:position pos:line="9" pos:column="34"/></literal> <operator pos:line="9" pos:column="35">&lt;&lt;<pos:position pos:line="9" pos:column="43"/></operator> <name pos:line="9" pos:column="38">theName<pos:position pos:line="9" pos:column="45"/></name> <operator pos:line="9" pos:column="46">&lt;&lt;<pos:position pos:line="9" pos:column="54"/></operator> <literal type="string" pos:line="9" pos:column="49">": "<pos:position pos:line="9" pos:column="53"/></literal> <operator pos:line="9" pos:column="54">&lt;&lt;<pos:position pos:line="9" pos:column="62"/></operator> <call><name pos:line="9" pos:column="57">xstrerr<pos:position pos:line="9" pos:column="64"/></name><argument_list pos:line="9" pos:column="64">(<argument><expr><name pos:line="9" pos:column="65">xerrno<pos:position pos:line="9" pos:column="71"/></name></expr></argument>)<pos:position pos:line="9" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">fatalf<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="string" pos:line="10" pos:column="16">"Ipc::Mem::Segment::open failed to shm_open(%s): %s\n"<pos:position pos:line="10" pos:column="70"/></literal></expr></argument>,
               <argument><expr><call><name><name pos:line="11" pos:column="16">theName<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">.<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">termedBuf<pos:position pos:line="11" pos:column="33"/></name></name><argument_list pos:line="11" pos:column="33">()<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="37">xstrerr<pos:position pos:line="11" pos:column="44"/></name><argument_list pos:line="11" pos:column="44">(<argument><expr><name pos:line="11" pos:column="45">xerrno<pos:position pos:line="11" pos:column="51"/></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="14" pos:column="5">theSize<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <call><name pos:line="14" pos:column="15">statSize<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><literal type="string" pos:line="14" pos:column="24">"Ipc::Mem::Segment::open"<pos:position pos:line="14" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">debugs<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="number" pos:line="16" pos:column="12">54<pos:position pos:line="16" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="16">3<pos:position pos:line="16" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="19">HERE<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">&lt;&lt;<pos:position pos:line="16" pos:column="32"/></operator> <literal type="string" pos:line="16" pos:column="27">"opened "<pos:position pos:line="16" pos:column="36"/></literal> <operator pos:line="16" pos:column="37">&lt;&lt;<pos:position pos:line="16" pos:column="45"/></operator> <name pos:line="16" pos:column="40">theName<pos:position pos:line="16" pos:column="47"/></name> <operator pos:line="16" pos:column="48">&lt;&lt;<pos:position pos:line="16" pos:column="56"/></operator> <literal type="string" pos:line="16" pos:column="51">" segment: "<pos:position pos:line="16" pos:column="63"/></literal> <operator pos:line="16" pos:column="64">&lt;&lt;<pos:position pos:line="16" pos:column="72"/></operator> <name pos:line="16" pos:column="67">theSize<pos:position pos:line="16" pos:column="74"/></name></expr></argument>)<pos:position pos:line="16" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="76"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">attach<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">()<pos:position pos:line="18" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="14"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
