<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5033_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">IoState<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">read_<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">buf<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">size_t<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">len<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">off_t<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">coreOff<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">STRCB<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">cb<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="71">void<pos:position pos:line="2" pos:column="75"/></name> <modifier pos:line="2" pos:column="76">*<pos:position pos:line="2" pos:column="77"/></modifier></type><name pos:line="2" pos:column="77">data<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="82"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">79<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">7<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">swap_filen<pos:position pos:line="4" pos:column="29"/></name> <operator pos:line="4" pos:column="30">&lt;&lt;<pos:position pos:line="4" pos:column="38"/></operator> <literal type="string" pos:line="4" pos:column="33">" reads from "<pos:position pos:line="4" pos:column="47"/></literal> <operator pos:line="4" pos:column="48">&lt;&lt;<pos:position pos:line="4" pos:column="56"/></operator> <name pos:line="4" pos:column="51">coreOff<pos:position pos:line="4" pos:column="58"/></name></expr></argument>)<pos:position pos:line="4" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="60"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">theFile<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">!=<pos:position pos:line="6" pos:column="22"/></operator> <name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">coreOff<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">&gt;=<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// if we are dealing with the first read or</comment>
    <comment type="line" pos:line="10" pos:column="5">// if the offset went backwords, start searching from the beginning</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">sidCurrent<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">&lt;<pos:position pos:line="11" pos:column="24"/></operator> <literal type="number" pos:line="11" pos:column="22">0<pos:position pos:line="11" pos:column="23"/></literal> <operator pos:line="11" pos:column="24">||<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">coreOff<pos:position pos:line="11" pos:column="34"/></name> <operator pos:line="11" pos:column="35">&lt;<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="37">objOffset<pos:position pos:line="11" pos:column="46"/></name></expr>)<pos:position pos:line="11" pos:column="47"/></condition><then pos:line="11" pos:column="47"> <block pos:line="11" pos:column="48">{
        <expr_stmt><expr><name pos:line="12" pos:column="9">sidCurrent<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <call><name pos:line="12" pos:column="22">readAnchor<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">()<pos:position pos:line="12" pos:column="34"/></argument_list></call><operator pos:line="12" pos:column="34">.<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="35">start<pos:position pos:line="12" pos:column="40"/></name></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">objOffset<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <literal type="number" pos:line="13" pos:column="21">0<pos:position pos:line="13" pos:column="22"/></literal></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <while pos:line="16" pos:column="5">while <condition pos:line="16" pos:column="11">(<expr><name pos:line="16" pos:column="12">sidCurrent<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">&gt;=<pos:position pos:line="16" pos:column="28"/></operator> <literal type="number" pos:line="16" pos:column="26">0<pos:position pos:line="16" pos:column="27"/></literal> <operator pos:line="16" pos:column="28">&amp;&amp;<pos:position pos:line="16" pos:column="38"/></operator> <name pos:line="16" pos:column="31">coreOff<pos:position pos:line="16" pos:column="38"/></name> <operator pos:line="16" pos:column="39">&gt;=<pos:position pos:line="16" pos:column="44"/></operator> <name pos:line="16" pos:column="42">objOffset<pos:position pos:line="16" pos:column="51"/></name> <operator pos:line="16" pos:column="52">+<pos:position pos:line="16" pos:column="53"/></operator> <call><name pos:line="16" pos:column="54">currentReadableSlice<pos:position pos:line="16" pos:column="74"/></name><argument_list pos:line="16" pos:column="74">()<pos:position pos:line="16" pos:column="76"/></argument_list></call><operator pos:line="16" pos:column="76">.<pos:position pos:line="16" pos:column="77"/></operator><name pos:line="16" pos:column="77">size<pos:position pos:line="16" pos:column="81"/></name></expr>)<pos:position pos:line="16" pos:column="82"/></condition> <block pos:line="16" pos:column="83">{
        <expr_stmt><expr><name pos:line="17" pos:column="9">objOffset<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">+=<pos:position pos:line="17" pos:column="21"/></operator> <call><name pos:line="17" pos:column="22">currentReadableSlice<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">()<pos:position pos:line="17" pos:column="44"/></argument_list></call><operator pos:line="17" pos:column="44">.<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="45">size<pos:position pos:line="17" pos:column="49"/></name></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name pos:line="18" pos:column="9">sidCurrent<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <call><name pos:line="18" pos:column="22">currentReadableSlice<pos:position pos:line="18" pos:column="42"/></name><argument_list pos:line="18" pos:column="42">()<pos:position pos:line="18" pos:column="44"/></argument_list></call><operator pos:line="18" pos:column="44">.<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="45">next<pos:position pos:line="18" pos:column="49"/></name></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">assert<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><name><name pos:line="21" pos:column="12">read<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">.<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">callback<pos:position pos:line="21" pos:column="25"/></name></name> <operator pos:line="21" pos:column="26">==<pos:position pos:line="21" pos:column="28"/></operator> <name pos:line="21" pos:column="29">NULL<pos:position pos:line="21" pos:column="33"/></name></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">assert<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><name><name pos:line="22" pos:column="12">read<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">.<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">callback_data<pos:position pos:line="22" pos:column="30"/></name></name> <operator pos:line="22" pos:column="31">==<pos:position pos:line="22" pos:column="33"/></operator> <name pos:line="22" pos:column="34">NULL<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">read<pos:position pos:line="23" pos:column="9"/></name><operator pos:line="23" pos:column="9">.<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">callback<pos:position pos:line="23" pos:column="18"/></name></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="21">cb<pos:position pos:line="23" pos:column="23"/></name></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">read<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">.<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">callback_data<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <call><name pos:line="24" pos:column="26">cbdataReference<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name pos:line="24" pos:column="42">data<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>

    <comment type="line" pos:line="26" pos:column="5">// punt if read offset is too big (because of client bugs or collapsing)</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">sidCurrent<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">&lt;<pos:position pos:line="27" pos:column="24"/></operator> <literal type="number" pos:line="27" pos:column="22">0<pos:position pos:line="27" pos:column="23"/></literal></expr>)<pos:position pos:line="27" pos:column="24"/></condition><then pos:line="27" pos:column="24"> <block pos:line="27" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">debugs<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><literal type="number" pos:line="28" pos:column="16">79<pos:position pos:line="28" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="20">5<pos:position pos:line="28" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="23">"no "<pos:position pos:line="28" pos:column="28"/></literal> <operator pos:line="28" pos:column="29">&lt;&lt;<pos:position pos:line="28" pos:column="37"/></operator> <name pos:line="28" pos:column="32">coreOff<pos:position pos:line="28" pos:column="39"/></name> <operator pos:line="28" pos:column="40">&lt;&lt;<pos:position pos:line="28" pos:column="48"/></operator> <literal type="string" pos:line="28" pos:column="43">" in "<pos:position pos:line="28" pos:column="49"/></literal> <operator pos:line="28" pos:column="50">&lt;&lt;<pos:position pos:line="28" pos:column="58"/></operator> <operator pos:line="28" pos:column="53">*<pos:position pos:line="28" pos:column="54"/></operator><name pos:line="28" pos:column="54">e<pos:position pos:line="28" pos:column="55"/></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">callReaderBack<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><name pos:line="29" pos:column="24">buf<pos:position pos:line="29" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="29">0<pos:position pos:line="29" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
        <return pos:line="30" pos:column="9">return;<pos:position pos:line="30" pos:column="16"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="33" pos:column="5">offset_<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <name pos:line="33" pos:column="15">coreOff<pos:position pos:line="33" pos:column="22"/></name></expr>;<pos:position pos:line="33" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="34" pos:column="5">len<pos:position pos:line="34" pos:column="8"/></name> <operator pos:line="34" pos:column="9">=<pos:position pos:line="34" pos:column="10"/></operator> <call><name pos:line="34" pos:column="11">min<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><expr><name pos:line="34" pos:column="15">len<pos:position pos:line="34" pos:column="18"/></name></expr></argument>,
              <argument><expr><cast type="static" pos:line="35" pos:column="15">static_cast<argument_list type="generic" pos:line="35" pos:column="26">&lt;<argument><expr><name pos:line="35" pos:column="27">size_t<pos:position pos:line="35" pos:column="33"/></name></expr></argument>&gt;<pos:position pos:line="35" pos:column="37"/></argument_list><argument_list pos:line="35" pos:column="34">(<argument><expr><name pos:line="35" pos:column="35">objOffset<pos:position pos:line="35" pos:column="44"/></name> <operator pos:line="35" pos:column="45">+<pos:position pos:line="35" pos:column="46"/></operator> <call><name pos:line="35" pos:column="47">currentReadableSlice<pos:position pos:line="35" pos:column="67"/></name><argument_list pos:line="35" pos:column="67">()<pos:position pos:line="35" pos:column="69"/></argument_list></call><operator pos:line="35" pos:column="69">.<pos:position pos:line="35" pos:column="70"/></operator><name pos:line="35" pos:column="70">size<pos:position pos:line="35" pos:column="74"/></name> <operator pos:line="35" pos:column="75">-<pos:position pos:line="35" pos:column="76"/></operator> <name pos:line="35" pos:column="77">coreOff<pos:position pos:line="35" pos:column="84"/></name></expr></argument>)<pos:position pos:line="35" pos:column="85"/></argument_list></cast></expr></argument>)<pos:position pos:line="35" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="87"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="36" pos:column="5">const<pos:position pos:line="36" pos:column="10"/></specifier> <name pos:line="36" pos:column="11">uint64_t<pos:position pos:line="36" pos:column="19"/></name></type> <name pos:line="36" pos:column="20">diskOffset<pos:position pos:line="36" pos:column="30"/></name> <init pos:line="36" pos:column="31">= <expr><call><name><name pos:line="36" pos:column="33">dir<pos:position pos:line="36" pos:column="36"/></name><operator pos:line="36" pos:column="36">-&gt;<pos:position pos:line="36" pos:column="41"/></operator><name pos:line="36" pos:column="38">diskOffset<pos:position pos:line="36" pos:column="48"/></name></name><argument_list pos:line="36" pos:column="48">(<argument><expr><name pos:line="36" pos:column="49">sidCurrent<pos:position pos:line="36" pos:column="59"/></name></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="37" pos:column="5">theFile<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">-&gt;<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="14">read<pos:position pos:line="37" pos:column="18"/></name></name><argument_list pos:line="37" pos:column="18">(<argument><expr><operator pos:line="37" pos:column="19">new<pos:position pos:line="37" pos:column="22"/></operator> <call><name pos:line="37" pos:column="23">ReadRequest<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><call><name><operator pos:line="37" pos:column="35">::<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="37">ReadRequest<pos:position pos:line="37" pos:column="48"/></name></name><argument_list pos:line="37" pos:column="48">(<argument><expr><name pos:line="37" pos:column="49">buf<pos:position pos:line="37" pos:column="52"/></name></expr></argument>,
                                  <argument><expr><name pos:line="38" pos:column="35">diskOffset<pos:position pos:line="38" pos:column="45"/></name> <operator pos:line="38" pos:column="46">+<pos:position pos:line="38" pos:column="47"/></operator> <sizeof pos:line="38" pos:column="48">sizeof<argument_list pos:line="38" pos:column="54">(<argument><expr><name pos:line="38" pos:column="55">DbCellHeader<pos:position pos:line="38" pos:column="67"/></name></expr></argument>)<pos:position pos:line="38" pos:column="68"/></argument_list></sizeof> <operator pos:line="38" pos:column="69">+<pos:position pos:line="38" pos:column="70"/></operator> <name pos:line="38" pos:column="71">coreOff<pos:position pos:line="38" pos:column="78"/></name> <operator pos:line="38" pos:column="79">-<pos:position pos:line="38" pos:column="80"/></operator> <name pos:line="38" pos:column="81">objOffset<pos:position pos:line="38" pos:column="90"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="92">len<pos:position pos:line="38" pos:column="95"/></name></expr></argument>)<pos:position pos:line="38" pos:column="96"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="38" pos:column="98">this<pos:position pos:line="38" pos:column="102"/></name></expr></argument>)<pos:position pos:line="38" pos:column="103"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="105"/></expr_stmt>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
