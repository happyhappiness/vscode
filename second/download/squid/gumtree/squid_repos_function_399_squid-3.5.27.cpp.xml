<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_399_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">getdomaingids<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">char<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">ad_groups<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">uint32_t<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">DomainLogonId<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">char<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier><modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">Rids<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="69">uint32_t<pos:position pos:line="2" pos:column="77"/></name></type> <name pos:line="2" pos:column="78">GroupCount<pos:position pos:line="2" pos:column="88"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="89"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">ad_groups<pos:position pos:line="4" pos:column="19"/></name></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20"> <block pos:line="4" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debug<pos:position pos:line="5" pos:column="14"/></name><argument_list pos:line="5" pos:column="14">(<argument><expr><operator pos:line="5" pos:column="15">(<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">char<pos:position pos:line="5" pos:column="20"/></name> <operator pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></operator><operator pos:line="5" pos:column="22">)<pos:position pos:line="5" pos:column="23"/></operator> <literal type="string" pos:line="5" pos:column="24">"%s| %s: ERR: No space to store groups\n"<pos:position pos:line="5" pos:column="65"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="6" pos:column="15">LogTime<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">()<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="6" pos:column="26">PROGRAM<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>
        <return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">NULL<pos:position pos:line="7" pos:column="20"/></name></expr>;<pos:position pos:line="7" pos:column="21"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">DomainLogonId<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">!=<pos:position pos:line="10" pos:column="24"/></operator> <literal type="number" pos:line="10" pos:column="25">0<pos:position pos:line="10" pos:column="26"/></literal></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27"> <block pos:line="10" pos:column="28">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">uint32_t<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">nauth<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">uint8_t<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">rev<pos:position pos:line="12" pos:column="20"/></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">uint64_t<pos:position pos:line="13" pos:column="17"/></name></type> <name pos:line="13" pos:column="18">idauth<pos:position pos:line="13" pos:column="24"/></name></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name></type> <name><name pos:line="14" pos:column="14">dli<pos:position pos:line="14" pos:column="17"/></name><index pos:line="14" pos:column="17">[<expr><literal type="number" pos:line="14" pos:column="18">256<pos:position pos:line="14" pos:column="21"/></literal></expr>]<pos:position pos:line="14" pos:column="22"/></index></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">char<pos:position pos:line="15" pos:column="13"/></name> <modifier pos:line="15" pos:column="14">*<pos:position pos:line="15" pos:column="15"/></modifier></type><name pos:line="15" pos:column="15">ag<pos:position pos:line="15" pos:column="17"/></name></decl>;<pos:position pos:line="15" pos:column="18"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">size_t<pos:position pos:line="16" pos:column="15"/></name></type> <name pos:line="16" pos:column="16">length<pos:position pos:line="16" pos:column="22"/></name></decl>;<pos:position pos:line="16" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">int<pos:position pos:line="17" pos:column="12"/></name></type> <name pos:line="17" pos:column="13">l<pos:position pos:line="17" pos:column="14"/></name></decl>;<pos:position pos:line="17" pos:column="15"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="19" pos:column="9">align<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><literal type="number" pos:line="19" pos:column="15">4<pos:position pos:line="19" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>

        <expr_stmt><expr><name pos:line="21" pos:column="9">nauth<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">get4byt<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">()<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>

        <comment type="block" pos:line="23" pos:column="9">/* prepend rids with DomainID */</comment>
        <expr_stmt><expr><name pos:line="24" pos:column="9">length<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator><literal type="number" pos:line="24" pos:column="16">1<pos:position pos:line="24" pos:column="17"/></literal><operator pos:line="24" pos:column="17">+<pos:position pos:line="24" pos:column="18"/></operator><literal type="number" pos:line="24" pos:column="18">1<pos:position pos:line="24" pos:column="19"/></literal><operator pos:line="24" pos:column="19">+<pos:position pos:line="24" pos:column="20"/></operator><literal type="number" pos:line="24" pos:column="20">6<pos:position pos:line="24" pos:column="21"/></literal><operator pos:line="24" pos:column="21">+<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">nauth<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">*<pos:position pos:line="24" pos:column="28"/></operator><literal type="number" pos:line="24" pos:column="28">4<pos:position pos:line="24" pos:column="29"/></literal></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
        <for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">l<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator><literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></init> <condition><expr><name pos:line="25" pos:column="19">l<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">&lt;<pos:position pos:line="25" pos:column="24"/></operator><operator pos:line="25" pos:column="21">(<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">int<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">)<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="26">GroupCount<pos:position pos:line="25" pos:column="36"/></name></expr>;<pos:position pos:line="25" pos:column="37"/></condition> <incr><expr><name pos:line="25" pos:column="38">l<pos:position pos:line="25" pos:column="39"/></name><operator pos:line="25" pos:column="39">++<pos:position pos:line="25" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="42"/></control> <block pos:line="25" pos:column="43">{
            <expr_stmt><expr><name pos:line="26" pos:column="13">ag<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator><operator pos:line="26" pos:column="16">(<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">char<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">*<pos:position pos:line="26" pos:column="23"/></operator><operator pos:line="26" pos:column="23">)<pos:position pos:line="26" pos:column="24"/></operator><call><name pos:line="26" pos:column="24">xcalloc<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><operator pos:line="26" pos:column="32">(<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="33">length<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">+<pos:position pos:line="26" pos:column="40"/></operator><literal type="number" pos:line="26" pos:column="40">4<pos:position pos:line="26" pos:column="41"/></literal><operator pos:line="26" pos:column="41">)<pos:position pos:line="26" pos:column="42"/></operator><operator pos:line="26" pos:column="42">*<pos:position pos:line="26" pos:column="43"/></operator><sizeof pos:line="26" pos:column="43">sizeof<argument_list pos:line="26" pos:column="49">(<argument><expr><name pos:line="26" pos:column="50">char<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></sizeof></expr></argument>,<argument><expr><literal type="number" pos:line="26" pos:column="56">1<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">memcpy<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><operator pos:line="27" pos:column="20">(<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">void<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">*<pos:position pos:line="27" pos:column="27"/></operator><operator pos:line="27" pos:column="27">)<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">ag<pos:position pos:line="27" pos:column="30"/></name></expr></argument>,<argument><expr><operator pos:line="27" pos:column="31">(<pos:position pos:line="27" pos:column="32"/></operator><specifier pos:line="27" pos:column="32">const<pos:position pos:line="27" pos:column="37"/></specifier> <name pos:line="27" pos:column="38">void<pos:position pos:line="27" pos:column="42"/></name><operator pos:line="27" pos:column="42">*<pos:position pos:line="27" pos:column="43"/></operator><operator pos:line="27" pos:column="43">)<pos:position pos:line="27" pos:column="44"/></operator><operator pos:line="27" pos:column="44">&amp;<pos:position pos:line="27" pos:column="49"/></operator><name><name pos:line="27" pos:column="45">p<pos:position pos:line="27" pos:column="46"/></name><index pos:line="27" pos:column="46">[<expr><name pos:line="27" pos:column="47">bpos<pos:position pos:line="27" pos:column="51"/></name></expr>]<pos:position pos:line="27" pos:column="52"/></index></name></expr></argument>,<argument><expr><literal type="number" pos:line="27" pos:column="53">1<pos:position pos:line="27" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">memcpy<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><operator pos:line="28" pos:column="20">(<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">void<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">*<pos:position pos:line="28" pos:column="27"/></operator><operator pos:line="28" pos:column="27">)<pos:position pos:line="28" pos:column="28"/></operator><operator pos:line="28" pos:column="28">&amp;<pos:position pos:line="28" pos:column="33"/></operator><name><name pos:line="28" pos:column="29">ag<pos:position pos:line="28" pos:column="31"/></name><index pos:line="28" pos:column="31">[<expr><literal type="number" pos:line="28" pos:column="32">1<pos:position pos:line="28" pos:column="33"/></literal></expr>]<pos:position pos:line="28" pos:column="34"/></index></name></expr></argument>,<argument><expr><operator pos:line="28" pos:column="35">(<pos:position pos:line="28" pos:column="36"/></operator><specifier pos:line="28" pos:column="36">const<pos:position pos:line="28" pos:column="41"/></specifier> <name pos:line="28" pos:column="42">void<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">*<pos:position pos:line="28" pos:column="47"/></operator><operator pos:line="28" pos:column="47">)<pos:position pos:line="28" pos:column="48"/></operator><operator pos:line="28" pos:column="48">&amp;<pos:position pos:line="28" pos:column="53"/></operator><name><name pos:line="28" pos:column="49">p<pos:position pos:line="28" pos:column="50"/></name><index pos:line="28" pos:column="50">[<expr><name pos:line="28" pos:column="51">bpos<pos:position pos:line="28" pos:column="55"/></name><operator pos:line="28" pos:column="55">+<pos:position pos:line="28" pos:column="56"/></operator><literal type="number" pos:line="28" pos:column="56">1<pos:position pos:line="28" pos:column="57"/></literal></expr>]<pos:position pos:line="28" pos:column="58"/></index></name></expr></argument>,<argument><expr><literal type="number" pos:line="28" pos:column="59">1<pos:position pos:line="28" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="29" pos:column="13">ag<pos:position pos:line="29" pos:column="15"/></name><index pos:line="29" pos:column="15">[<expr><literal type="number" pos:line="29" pos:column="16">1<pos:position pos:line="29" pos:column="17"/></literal></expr>]<pos:position pos:line="29" pos:column="18"/></index></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <name><name pos:line="29" pos:column="21">ag<pos:position pos:line="29" pos:column="23"/></name><index pos:line="29" pos:column="23">[<expr><literal type="number" pos:line="29" pos:column="24">1<pos:position pos:line="29" pos:column="25"/></literal></expr>]<pos:position pos:line="29" pos:column="26"/></index></name><operator pos:line="29" pos:column="26">+<pos:position pos:line="29" pos:column="27"/></operator><literal type="number" pos:line="29" pos:column="27">1<pos:position pos:line="29" pos:column="28"/></literal></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">memcpy<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><operator pos:line="30" pos:column="20">(<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="21">void<pos:position pos:line="30" pos:column="25"/></name> <operator pos:line="30" pos:column="26">*<pos:position pos:line="30" pos:column="27"/></operator><operator pos:line="30" pos:column="27">)<pos:position pos:line="30" pos:column="28"/></operator><operator pos:line="30" pos:column="28">&amp;<pos:position pos:line="30" pos:column="33"/></operator><name><name pos:line="30" pos:column="29">ag<pos:position pos:line="30" pos:column="31"/></name><index pos:line="30" pos:column="31">[<expr><literal type="number" pos:line="30" pos:column="32">2<pos:position pos:line="30" pos:column="33"/></literal></expr>]<pos:position pos:line="30" pos:column="34"/></index></name></expr></argument>,<argument><expr><operator pos:line="30" pos:column="35">(<pos:position pos:line="30" pos:column="36"/></operator><specifier pos:line="30" pos:column="36">const<pos:position pos:line="30" pos:column="41"/></specifier> <name pos:line="30" pos:column="42">void<pos:position pos:line="30" pos:column="46"/></name><operator pos:line="30" pos:column="46">*<pos:position pos:line="30" pos:column="47"/></operator><operator pos:line="30" pos:column="47">)<pos:position pos:line="30" pos:column="48"/></operator><operator pos:line="30" pos:column="48">&amp;<pos:position pos:line="30" pos:column="53"/></operator><name><name pos:line="30" pos:column="49">p<pos:position pos:line="30" pos:column="50"/></name><index pos:line="30" pos:column="50">[<expr><name pos:line="30" pos:column="51">bpos<pos:position pos:line="30" pos:column="55"/></name><operator pos:line="30" pos:column="55">+<pos:position pos:line="30" pos:column="56"/></operator><literal type="number" pos:line="30" pos:column="56">2<pos:position pos:line="30" pos:column="57"/></literal></expr>]<pos:position pos:line="30" pos:column="58"/></index></name></expr></argument>,<argument><expr><literal type="number" pos:line="30" pos:column="59">6<pos:position pos:line="30" pos:column="60"/></literal><operator pos:line="30" pos:column="60">+<pos:position pos:line="30" pos:column="61"/></operator><name pos:line="30" pos:column="61">nauth<pos:position pos:line="30" pos:column="66"/></name><operator pos:line="30" pos:column="66">*<pos:position pos:line="30" pos:column="67"/></operator><literal type="number" pos:line="30" pos:column="67">4<pos:position pos:line="30" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="70"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">memcpy<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><operator pos:line="31" pos:column="20">(<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="21">void<pos:position pos:line="31" pos:column="25"/></name> <operator pos:line="31" pos:column="26">*<pos:position pos:line="31" pos:column="27"/></operator><operator pos:line="31" pos:column="27">)<pos:position pos:line="31" pos:column="28"/></operator><operator pos:line="31" pos:column="28">&amp;<pos:position pos:line="31" pos:column="33"/></operator><name><name pos:line="31" pos:column="29">ag<pos:position pos:line="31" pos:column="31"/></name><index pos:line="31" pos:column="31">[<expr><name pos:line="31" pos:column="32">length<pos:position pos:line="31" pos:column="38"/></name></expr>]<pos:position pos:line="31" pos:column="39"/></index></name></expr></argument>,<argument><expr><operator pos:line="31" pos:column="40">(<pos:position pos:line="31" pos:column="41"/></operator><specifier pos:line="31" pos:column="41">const<pos:position pos:line="31" pos:column="46"/></specifier> <name pos:line="31" pos:column="47">void<pos:position pos:line="31" pos:column="51"/></name><operator pos:line="31" pos:column="51">*<pos:position pos:line="31" pos:column="52"/></operator><operator pos:line="31" pos:column="52">)<pos:position pos:line="31" pos:column="53"/></operator><name><name pos:line="31" pos:column="53">Rids<pos:position pos:line="31" pos:column="57"/></name><index pos:line="31" pos:column="57">[<expr><name pos:line="31" pos:column="58">l<pos:position pos:line="31" pos:column="59"/></name></expr>]<pos:position pos:line="31" pos:column="60"/></index></name></expr></argument>,<argument><expr><literal type="number" pos:line="31" pos:column="61">4<pos:position pos:line="31" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="64"/></expr_stmt>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><name pos:line="32" pos:column="17">l<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">==<pos:position pos:line="32" pos:column="20"/></operator><literal type="number" pos:line="32" pos:column="20">0<pos:position pos:line="32" pos:column="21"/></literal></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22"> <block pos:line="32" pos:column="23">{
                <if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><operator pos:line="33" pos:column="21">!<pos:position pos:line="33" pos:column="22"/></operator><call><name pos:line="33" pos:column="22">pstrcpy<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">ad_groups<pos:position pos:line="33" pos:column="39"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="33" pos:column="40">"group="<pos:position pos:line="33" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="50"/></condition><then pos:line="33" pos:column="50"> <block pos:line="33" pos:column="51">{
                    <expr_stmt><expr><call><name pos:line="34" pos:column="21">debug<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><operator pos:line="34" pos:column="27">(<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="28">char<pos:position pos:line="34" pos:column="32"/></name> <operator pos:line="34" pos:column="33">*<pos:position pos:line="34" pos:column="34"/></operator><operator pos:line="34" pos:column="34">)<pos:position pos:line="34" pos:column="35"/></operator> <literal type="string" pos:line="34" pos:column="36">"%s| %s: WARN: Too many groups ! size &gt; %d : %s\n"<pos:position pos:line="34" pos:column="89"/></literal></expr></argument>,
                          <argument><expr><call><name pos:line="35" pos:column="27">LogTime<pos:position pos:line="35" pos:column="34"/></name><argument_list pos:line="35" pos:column="34">()<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="35" pos:column="38">PROGRAM<pos:position pos:line="35" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="47">MAX_PAC_GROUP_SIZE<pos:position pos:line="35" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="67">ad_groups<pos:position pos:line="35" pos:column="76"/></name></expr></argument>)<pos:position pos:line="35" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="78"/></expr_stmt>
                }<pos:position pos:line="36" pos:column="18"/></block></then></if>
            }<pos:position pos:line="37" pos:column="14"/></block></then> <else pos:line="37" pos:column="15">else <block pos:line="37" pos:column="20">{
                <if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><operator pos:line="38" pos:column="21">!<pos:position pos:line="38" pos:column="22"/></operator><call><name pos:line="38" pos:column="22">pstrcat<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><name pos:line="38" pos:column="30">ad_groups<pos:position pos:line="38" pos:column="39"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="38" pos:column="40">" group="<pos:position pos:line="38" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="51"/></condition><then pos:line="38" pos:column="51"> <block pos:line="38" pos:column="52">{
                    <expr_stmt><expr><call><name pos:line="39" pos:column="21">debug<pos:position pos:line="39" pos:column="26"/></name><argument_list pos:line="39" pos:column="26">(<argument><expr><operator pos:line="39" pos:column="27">(<pos:position pos:line="39" pos:column="28"/></operator><name pos:line="39" pos:column="28">char<pos:position pos:line="39" pos:column="32"/></name> <operator pos:line="39" pos:column="33">*<pos:position pos:line="39" pos:column="34"/></operator><operator pos:line="39" pos:column="34">)<pos:position pos:line="39" pos:column="35"/></operator> <literal type="string" pos:line="39" pos:column="36">"%s| %s: WARN: Too many groups ! size &gt; %d : %s\n"<pos:position pos:line="39" pos:column="89"/></literal></expr></argument>,
                          <argument><expr><call><name pos:line="40" pos:column="27">LogTime<pos:position pos:line="40" pos:column="34"/></name><argument_list pos:line="40" pos:column="34">()<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="40" pos:column="38">PROGRAM<pos:position pos:line="40" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="47">MAX_PAC_GROUP_SIZE<pos:position pos:line="40" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="67">ad_groups<pos:position pos:line="40" pos:column="76"/></name></expr></argument>)<pos:position pos:line="40" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="78"/></expr_stmt>
                }<pos:position pos:line="41" pos:column="18"/></block></then></if>
            }<pos:position pos:line="42" pos:column="14"/></block></else></if>
            <if pos:line="43" pos:column="13">if <condition pos:line="43" pos:column="16">(<expr><operator pos:line="43" pos:column="17">!<pos:position pos:line="43" pos:column="18"/></operator><call><name pos:line="43" pos:column="18">pstrcat<pos:position pos:line="43" pos:column="25"/></name><argument_list pos:line="43" pos:column="25">(<argument><expr><name pos:line="43" pos:column="26">ad_groups<pos:position pos:line="43" pos:column="35"/></name></expr></argument>,<argument><expr><call><name pos:line="43" pos:column="36">base64_encode_bin<pos:position pos:line="43" pos:column="53"/></name><argument_list pos:line="43" pos:column="53">(<argument><expr><name pos:line="43" pos:column="54">ag<pos:position pos:line="43" pos:column="56"/></name></expr></argument>, <argument><expr><call pos:line="43" pos:column="58">(<name pos:line="43" pos:column="59">int<pos:position pos:line="43" pos:column="62"/></name>)<argument_list pos:line="43" pos:column="63">(<argument><expr><name pos:line="43" pos:column="64">length<pos:position pos:line="43" pos:column="70"/></name><operator pos:line="43" pos:column="70">+<pos:position pos:line="43" pos:column="71"/></operator><literal type="number" pos:line="43" pos:column="71">4<pos:position pos:line="43" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="76"/></condition><then pos:line="43" pos:column="76"> <block pos:line="43" pos:column="77">{
                <expr_stmt><expr><call><name pos:line="44" pos:column="17">debug<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">(<argument><expr><operator pos:line="44" pos:column="23">(<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="24">char<pos:position pos:line="44" pos:column="28"/></name> <operator pos:line="44" pos:column="29">*<pos:position pos:line="44" pos:column="30"/></operator><operator pos:line="44" pos:column="30">)<pos:position pos:line="44" pos:column="31"/></operator> <literal type="string" pos:line="44" pos:column="32">"%s| %s: WARN: Too many groups ! size &gt; %d : %s\n"<pos:position pos:line="44" pos:column="85"/></literal></expr></argument>,
                      <argument><expr><call><name pos:line="45" pos:column="23">LogTime<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">()<pos:position pos:line="45" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="45" pos:column="34">PROGRAM<pos:position pos:line="45" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="43">MAX_PAC_GROUP_SIZE<pos:position pos:line="45" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="63">ad_groups<pos:position pos:line="45" pos:column="72"/></name></expr></argument>)<pos:position pos:line="45" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="74"/></expr_stmt>
            }<pos:position pos:line="46" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="47" pos:column="13">xfree<pos:position pos:line="47" pos:column="18"/></name><argument_list pos:line="47" pos:column="18">(<argument><expr><name pos:line="47" pos:column="19">ag<pos:position pos:line="47" pos:column="21"/></name></expr></argument>)<pos:position pos:line="47" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="48" pos:column="10"/></block></for>

        <comment type="block" pos:line="50" pos:column="9">/* mainly for debug only */</comment>
        <expr_stmt><expr><name pos:line="51" pos:column="9">rev<pos:position pos:line="51" pos:column="12"/></name> <operator pos:line="51" pos:column="13">=<pos:position pos:line="51" pos:column="14"/></operator> <call><name pos:line="51" pos:column="15">get1byt<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">()<pos:position pos:line="51" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="52" pos:column="9">bpos<pos:position pos:line="52" pos:column="13"/></name> <operator pos:line="52" pos:column="14">=<pos:position pos:line="52" pos:column="15"/></operator> <name pos:line="52" pos:column="16">bpos<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">+<pos:position pos:line="52" pos:column="22"/></operator> <literal type="number" pos:line="52" pos:column="23">1<pos:position pos:line="52" pos:column="24"/></literal></expr>;<pos:position pos:line="52" pos:column="25"/></expr_stmt> <comment type="block" pos:line="52" pos:column="26">/*nsub*/</comment>
        <expr_stmt><expr><name pos:line="53" pos:column="9">idauth<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <call><name pos:line="53" pos:column="18">get6byt_be<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">()<pos:position pos:line="53" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="55" pos:column="9">snprintf<pos:position pos:line="55" pos:column="17"/></name><argument_list pos:line="55" pos:column="17">(<argument><expr><name pos:line="55" pos:column="18">dli<pos:position pos:line="55" pos:column="21"/></name></expr></argument>,<argument><expr><sizeof pos:line="55" pos:column="22">sizeof<argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">dli<pos:position pos:line="55" pos:column="32"/></name></expr></argument>)<pos:position pos:line="55" pos:column="33"/></argument_list></sizeof></expr></argument>,<argument><expr><literal type="string" pos:line="55" pos:column="34">"S-%d-%lu"<pos:position pos:line="55" pos:column="44"/></literal></expr></argument>,<argument><expr><name pos:line="55" pos:column="45">rev<pos:position pos:line="55" pos:column="48"/></name></expr></argument>,<argument><expr><operator pos:line="55" pos:column="49">(<pos:position pos:line="55" pos:column="50"/></operator><name pos:line="55" pos:column="50">long<pos:position pos:line="55" pos:column="54"/></name> <name pos:line="55" pos:column="55">unsigned<pos:position pos:line="55" pos:column="63"/></name> <name pos:line="55" pos:column="64">int<pos:position pos:line="55" pos:column="67"/></name><operator pos:line="55" pos:column="67">)<pos:position pos:line="55" pos:column="68"/></operator><name pos:line="55" pos:column="68">idauth<pos:position pos:line="55" pos:column="74"/></name></expr></argument>)<pos:position pos:line="55" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="76"/></expr_stmt>
        <for pos:line="56" pos:column="9">for <control pos:line="56" pos:column="13">( <init><expr><name pos:line="56" pos:column="15">l<pos:position pos:line="56" pos:column="16"/></name><operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator><literal type="number" pos:line="56" pos:column="17">0<pos:position pos:line="56" pos:column="18"/></literal></expr>;<pos:position pos:line="56" pos:column="19"/></init> <condition><expr><name pos:line="56" pos:column="20">l<pos:position pos:line="56" pos:column="21"/></name><operator pos:line="56" pos:column="21">&lt;<pos:position pos:line="56" pos:column="25"/></operator><operator pos:line="56" pos:column="22">(<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="23">int<pos:position pos:line="56" pos:column="26"/></name><operator pos:line="56" pos:column="26">)<pos:position pos:line="56" pos:column="27"/></operator><name pos:line="56" pos:column="27">nauth<pos:position pos:line="56" pos:column="32"/></name></expr>;<pos:position pos:line="56" pos:column="33"/></condition> <incr><expr><name pos:line="56" pos:column="34">l<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">++<pos:position pos:line="56" pos:column="37"/></operator></expr></incr> )<pos:position pos:line="56" pos:column="39"/></control> <block pos:line="56" pos:column="40">{
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">uint32_t<pos:position pos:line="57" pos:column="21"/></name></type> <name pos:line="57" pos:column="22">sauth<pos:position pos:line="57" pos:column="27"/></name></decl>;<pos:position pos:line="57" pos:column="28"/></decl_stmt>
            <expr_stmt><expr><name pos:line="58" pos:column="13">sauth<pos:position pos:line="58" pos:column="18"/></name> <operator pos:line="58" pos:column="19">=<pos:position pos:line="58" pos:column="20"/></operator> <call><name pos:line="58" pos:column="21">get4byt<pos:position pos:line="58" pos:column="28"/></name><argument_list pos:line="58" pos:column="28">()<pos:position pos:line="58" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">snprintf<pos:position pos:line="59" pos:column="21"/></name><argument_list pos:line="59" pos:column="21">(<argument><expr><operator pos:line="59" pos:column="22">(<pos:position pos:line="59" pos:column="23"/></operator><name pos:line="59" pos:column="23">char<pos:position pos:line="59" pos:column="27"/></name> <operator pos:line="59" pos:column="28">*<pos:position pos:line="59" pos:column="29"/></operator><operator pos:line="59" pos:column="29">)<pos:position pos:line="59" pos:column="30"/></operator><operator pos:line="59" pos:column="30">&amp;<pos:position pos:line="59" pos:column="35"/></operator><name><name pos:line="59" pos:column="31">dli<pos:position pos:line="59" pos:column="34"/></name><index pos:line="59" pos:column="34">[<expr><call><name pos:line="59" pos:column="35">strlen<pos:position pos:line="59" pos:column="41"/></name><argument_list pos:line="59" pos:column="41">(<argument><expr><name pos:line="59" pos:column="42">dli<pos:position pos:line="59" pos:column="45"/></name></expr></argument>)<pos:position pos:line="59" pos:column="46"/></argument_list></call></expr>]<pos:position pos:line="59" pos:column="47"/></index></name></expr></argument>,<argument><expr><sizeof pos:line="59" pos:column="48">sizeof<argument_list pos:line="59" pos:column="54">(<argument><expr><name pos:line="59" pos:column="55">dli<pos:position pos:line="59" pos:column="58"/></name></expr></argument>)<pos:position pos:line="59" pos:column="59"/></argument_list></sizeof><operator pos:line="59" pos:column="59">-<pos:position pos:line="59" pos:column="60"/></operator><call><name pos:line="59" pos:column="60">strlen<pos:position pos:line="59" pos:column="66"/></name><argument_list pos:line="59" pos:column="66">(<argument><expr><name pos:line="59" pos:column="67">dli<pos:position pos:line="59" pos:column="70"/></name></expr></argument>)<pos:position pos:line="59" pos:column="71"/></argument_list></call></expr></argument>,<argument><expr><literal type="string" pos:line="59" pos:column="72">"-%u"<pos:position pos:line="59" pos:column="77"/></literal></expr></argument>,<argument><expr><name pos:line="59" pos:column="78">sauth<pos:position pos:line="59" pos:column="83"/></name></expr></argument>)<pos:position pos:line="59" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="85"/></expr_stmt>
        }<pos:position pos:line="60" pos:column="10"/></block></for>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">debug<pos:position pos:line="61" pos:column="14"/></name><argument_list pos:line="61" pos:column="14">(<argument><expr><operator pos:line="61" pos:column="15">(<pos:position pos:line="61" pos:column="16"/></operator><name pos:line="61" pos:column="16">char<pos:position pos:line="61" pos:column="20"/></name> <operator pos:line="61" pos:column="21">*<pos:position pos:line="61" pos:column="22"/></operator><operator pos:line="61" pos:column="22">)<pos:position pos:line="61" pos:column="23"/></operator> <literal type="string" pos:line="61" pos:column="24">"%s| %s: INFO: Got DomainLogonId %s\n"<pos:position pos:line="61" pos:column="62"/></literal></expr></argument>, <argument><expr><call><name pos:line="61" pos:column="64">LogTime<pos:position pos:line="61" pos:column="71"/></name><argument_list pos:line="61" pos:column="71">()<pos:position pos:line="61" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="61" pos:column="75">PROGRAM<pos:position pos:line="61" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="84">dli<pos:position pos:line="61" pos:column="87"/></name></expr></argument>)<pos:position pos:line="61" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="89"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>
    <return pos:line="63" pos:column="5">return <expr><name pos:line="63" pos:column="12">ad_groups<pos:position pos:line="63" pos:column="21"/></name></expr>;<pos:position pos:line="63" pos:column="22"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
