<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_75_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">serverSocket<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">( <parameter><decl><type><name><name pos:line="2" pos:column="15">struct<pos:position pos:line="2" pos:column="21"/></name> <name pos:line="2" pos:column="22">in_addr<pos:position pos:line="2" pos:column="29"/></name></name></type> <name pos:line="2" pos:column="30">host<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">unsigned<pos:position pos:line="2" pos:column="44"/></name> <name pos:line="2" pos:column="45">short<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">port<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="3" pos:column="15">int<pos:position pos:line="3" pos:column="18"/></name></type> <name pos:line="3" pos:column="19">backlog<pos:position pos:line="3" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="28">bool<pos:position pos:line="3" pos:column="32"/></name></type> <name pos:line="3" pos:column="33">reuse<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="40">bool<pos:position pos:line="3" pos:column="44"/></name></type> <name pos:line="3" pos:column="45">nodelay<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="4" pos:column="15">int<pos:position pos:line="4" pos:column="18"/></name></type> <name pos:line="4" pos:column="19">sendBufferSize<pos:position pos:line="4" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="35">int<pos:position pos:line="4" pos:column="38"/></name></type> <name pos:line="4" pos:column="39">recvBufferSize<pos:position pos:line="4" pos:column="53"/></name></decl></parameter> )<pos:position pos:line="4" pos:column="55"/></parameter_list>
<comment type="line" pos:line="5" pos:column="1">// purpose: open a server socket for listening</comment>
<comment type="line" pos:line="6" pos:column="1">// paramtr: host (IN): host to bind locally to, use INADDRY_ANY for *</comment>
<comment type="line" pos:line="7" pos:column="1">//          port (IN): port to bind to, use 0 for system assigned</comment>
<comment type="line" pos:line="8" pos:column="1">//          backlog (IN): listen backlog queue length</comment>
<comment type="line" pos:line="9" pos:column="1">//          reuse (IN): set SO_REUSEADDR option - default usefully</comment>
<comment type="line" pos:line="10" pos:column="1">//          nodelay (IN): true=set TCP_NODELAY option.</comment>
<comment type="line" pos:line="11" pos:column="1">//            SETTING TCP_NODELAY ON A SERVER SOCKET DOES NOT MAKE SENSE!</comment>
<comment type="line" pos:line="12" pos:column="1">//          sendBufferSize (IN): don't set (use sys defaults) if &lt; 0</comment>
<comment type="line" pos:line="13" pos:column="1">//          recvBufferSize (IN): don't set (use sys defaults) if &lt; 0</comment>
<comment type="line" pos:line="14" pos:column="1">// returns: opened listening fd, or -1 on error.</comment>
<comment type="line" pos:line="15" pos:column="1">// warning: error message will be printed on stderr and errno reset.</comment>
<block pos:line="16" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">int<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">sockfd<pos:position pos:line="17" pos:column="15"/></name> <init pos:line="17" pos:column="16">= <expr><call><name pos:line="17" pos:column="18">socket<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">( <argument><expr><name pos:line="17" pos:column="26">AF_INET<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="35">SOCK_STREAM<pos:position pos:line="17" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="48">0<pos:position pos:line="17" pos:column="49"/></literal></expr></argument> )<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="52"/></decl_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">( <expr><name pos:line="18" pos:column="10">sockfd<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">==<pos:position pos:line="18" pos:column="19"/></operator> <operator pos:line="18" pos:column="20">-<pos:position pos:line="18" pos:column="21"/></operator><literal type="number" pos:line="18" pos:column="21">1<pos:position pos:line="18" pos:column="22"/></literal></expr> )<pos:position pos:line="18" pos:column="24"/></condition><then pos:line="18" pos:column="24"> <block pos:line="18" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">perror<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">( <argument><expr><literal type="string" pos:line="19" pos:column="17">"socket"<pos:position pos:line="19" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="19" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><operator pos:line="20" pos:column="16">-<pos:position pos:line="20" pos:column="17"/></operator><literal type="number" pos:line="20" pos:column="17">1<pos:position pos:line="20" pos:column="18"/></literal></expr>;<pos:position pos:line="20" pos:column="19"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">( <expr><name pos:line="23" pos:column="10">reuse<pos:position pos:line="23" pos:column="15"/></name></expr> )<pos:position pos:line="23" pos:column="17"/></condition><then pos:line="23" pos:column="17"> <block pos:line="23" pos:column="18">{
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">int<pos:position pos:line="24" pos:column="12"/></name></type> <name pos:line="24" pos:column="13">opt<pos:position pos:line="24" pos:column="16"/></name> <init pos:line="24" pos:column="17">= <expr><literal type="number" pos:line="24" pos:column="19">1<pos:position pos:line="24" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="21"/></decl_stmt>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">( <expr><call><name pos:line="25" pos:column="14">setsockopt<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">( <argument><expr><name pos:line="25" pos:column="26">sockfd<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">SOL_SOCKET<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">SO_REUSEADDR<pos:position pos:line="25" pos:column="58"/></name></expr></argument>,
                         <argument><expr><operator pos:line="26" pos:column="26">(<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">char<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">*<pos:position pos:line="26" pos:column="32"/></operator><operator pos:line="26" pos:column="32">)<pos:position pos:line="26" pos:column="33"/></operator> <operator pos:line="26" pos:column="34">&amp;<pos:position pos:line="26" pos:column="39"/></operator><name pos:line="26" pos:column="35">opt<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="40">sizeof<argument_list pos:line="26" pos:column="46">(<argument><expr><name pos:line="26" pos:column="47">int<pos:position pos:line="26" pos:column="50"/></name></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="26" pos:column="53"/></argument_list></call> <operator pos:line="26" pos:column="54">==<pos:position pos:line="26" pos:column="56"/></operator> <operator pos:line="26" pos:column="57">-<pos:position pos:line="26" pos:column="58"/></operator><literal type="number" pos:line="26" pos:column="58">1<pos:position pos:line="26" pos:column="59"/></literal></expr>)<pos:position pos:line="26" pos:column="60"/></condition><then pos:line="26" pos:column="60"> <block pos:line="26" pos:column="61">{
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">perror<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">( <argument><expr><literal type="string" pos:line="27" pos:column="21">"setsockopt( SO_REUSEADDR )"<pos:position pos:line="27" pos:column="49"/></literal></expr></argument> )<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">close<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">( <argument><expr><name pos:line="28" pos:column="20">sockfd<pos:position pos:line="28" pos:column="26"/></name></expr></argument> )<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
            <return pos:line="29" pos:column="13">return <expr><operator pos:line="29" pos:column="20">-<pos:position pos:line="29" pos:column="21"/></operator><literal type="number" pos:line="29" pos:column="21">1<pos:position pos:line="29" pos:column="22"/></literal></expr>;<pos:position pos:line="29" pos:column="23"/></return>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">( <expr><call><name pos:line="33" pos:column="10">commonCode<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">( <argument><expr><name pos:line="33" pos:column="22">sockfd<pos:position pos:line="33" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="30">nodelay<pos:position pos:line="33" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="39">sendBufferSize<pos:position pos:line="33" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="55">recvBufferSize<pos:position pos:line="33" pos:column="69"/></name></expr></argument> )<pos:position pos:line="33" pos:column="71"/></argument_list></call> <operator pos:line="33" pos:column="72">==<pos:position pos:line="33" pos:column="74"/></operator> <operator pos:line="33" pos:column="75">-<pos:position pos:line="33" pos:column="76"/></operator><literal type="number" pos:line="33" pos:column="76">1<pos:position pos:line="33" pos:column="77"/></literal></expr> )<pos:position pos:line="33" pos:column="79"/></condition><then pos:line="33" pos:column="79">
        <block type="pseudo"><return pos:line="34" pos:column="9">return <expr><operator pos:line="34" pos:column="16">-<pos:position pos:line="34" pos:column="17"/></operator><literal type="number" pos:line="34" pos:column="17">1<pos:position pos:line="34" pos:column="18"/></literal></expr>;<pos:position pos:line="34" pos:column="19"/></return></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="36" pos:column="5">struct<pos:position pos:line="36" pos:column="11"/></name> <name pos:line="36" pos:column="12">sockaddr_in<pos:position pos:line="36" pos:column="23"/></name></name></type> <name pos:line="36" pos:column="24">server<pos:position pos:line="36" pos:column="30"/></name></decl>;<pos:position pos:line="36" pos:column="31"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">memset<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">( <argument><expr><operator pos:line="37" pos:column="13">&amp;<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="14">server<pos:position pos:line="37" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="22">0<pos:position pos:line="37" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="25">sizeof<argument_list pos:line="37" pos:column="31">(<argument><expr><name pos:line="37" pos:column="32">server<pos:position pos:line="37" pos:column="38"/></name></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">server<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">.<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="12">sin_family<pos:position pos:line="38" pos:column="22"/></name></name> <operator pos:line="38" pos:column="23">=<pos:position pos:line="38" pos:column="24"/></operator> <name pos:line="38" pos:column="25">AF_INET<pos:position pos:line="38" pos:column="32"/></name></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="39" pos:column="5">server<pos:position pos:line="39" pos:column="11"/></name><operator pos:line="39" pos:column="11">.<pos:position pos:line="39" pos:column="12"/></operator><name pos:line="39" pos:column="12">sin_port<pos:position pos:line="39" pos:column="20"/></name></name>   <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <name pos:line="39" pos:column="25">port<pos:position pos:line="39" pos:column="29"/></name></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">server<pos:position pos:line="40" pos:column="11"/></name><operator pos:line="40" pos:column="11">.<pos:position pos:line="40" pos:column="12"/></operator><name pos:line="40" pos:column="12">sin_addr<pos:position pos:line="40" pos:column="20"/></name></name>   <operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator> <name pos:line="40" pos:column="25">host<pos:position pos:line="40" pos:column="29"/></name></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">( <expr><call><name pos:line="41" pos:column="10">bind<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">( <argument><expr><name pos:line="41" pos:column="16">sockfd<pos:position pos:line="41" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="24">(<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="25">SA<pos:position pos:line="41" pos:column="27"/></name><operator pos:line="41" pos:column="27">*<pos:position pos:line="41" pos:column="28"/></operator><operator pos:line="41" pos:column="28">)<pos:position pos:line="41" pos:column="29"/></operator> <operator pos:line="41" pos:column="30">&amp;<pos:position pos:line="41" pos:column="35"/></operator><name pos:line="41" pos:column="31">server<pos:position pos:line="41" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="39">sizeof<argument_list pos:line="41" pos:column="45">(<argument><expr><name pos:line="41" pos:column="46">server<pos:position pos:line="41" pos:column="52"/></name></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="41" pos:column="55"/></argument_list></call> <operator pos:line="41" pos:column="56">==<pos:position pos:line="41" pos:column="58"/></operator> <operator pos:line="41" pos:column="59">-<pos:position pos:line="41" pos:column="60"/></operator><literal type="number" pos:line="41" pos:column="60">1<pos:position pos:line="41" pos:column="61"/></literal></expr> )<pos:position pos:line="41" pos:column="63"/></condition><then pos:line="41" pos:column="63"> <block pos:line="41" pos:column="64">{
        <decl_stmt><decl><type><name pos:line="42" pos:column="9">SockAddress<pos:position pos:line="42" pos:column="20"/></name></type> <name pos:line="42" pos:column="21">socket<pos:position pos:line="42" pos:column="27"/></name></decl>;<pos:position pos:line="42" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">fprintf<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">( <argument><expr><name pos:line="43" pos:column="18">stderr<pos:position pos:line="43" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="26">"bind(%s): %s\n"<pos:position pos:line="43" pos:column="42"/></literal></expr></argument>,
                 <argument><expr><call><name pos:line="44" pos:column="18">my_sock_ntoa<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">server<pos:position pos:line="44" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="44" pos:column="38">socket<pos:position pos:line="44" pos:column="44"/></name></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="47">strerror<pos:position pos:line="44" pos:column="55"/></name><argument_list pos:line="44" pos:column="55">(<argument><expr><name pos:line="44" pos:column="56">errno<pos:position pos:line="44" pos:column="61"/></name></expr></argument>)<pos:position pos:line="44" pos:column="62"/></argument_list></call></expr></argument> )<pos:position pos:line="44" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">close<pos:position pos:line="45" pos:column="14"/></name><argument_list pos:line="45" pos:column="14">(<argument><expr><name pos:line="45" pos:column="15">sockfd<pos:position pos:line="45" pos:column="21"/></name></expr></argument>)<pos:position pos:line="45" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="23"/></expr_stmt>
        <return pos:line="46" pos:column="9">return <expr><operator pos:line="46" pos:column="16">-<pos:position pos:line="46" pos:column="17"/></operator><literal type="number" pos:line="46" pos:column="17">1<pos:position pos:line="46" pos:column="18"/></literal></expr>;<pos:position pos:line="46" pos:column="19"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">( <expr><call><name pos:line="49" pos:column="10">listen<pos:position pos:line="49" pos:column="16"/></name><argument_list pos:line="49" pos:column="16">( <argument><expr><name pos:line="49" pos:column="18">sockfd<pos:position pos:line="49" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="26">backlog<pos:position pos:line="49" pos:column="33"/></name></expr></argument> )<pos:position pos:line="49" pos:column="35"/></argument_list></call> <operator pos:line="49" pos:column="36">==<pos:position pos:line="49" pos:column="38"/></operator> <operator pos:line="49" pos:column="39">-<pos:position pos:line="49" pos:column="40"/></operator><literal type="number" pos:line="49" pos:column="40">1<pos:position pos:line="49" pos:column="41"/></literal></expr> )<pos:position pos:line="49" pos:column="43"/></condition><then pos:line="49" pos:column="43"> <block pos:line="49" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">perror<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">( <argument><expr><literal type="string" pos:line="50" pos:column="17">"listen"<pos:position pos:line="50" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="50" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">close<pos:position pos:line="51" pos:column="14"/></name><argument_list pos:line="51" pos:column="14">(<argument><expr><name pos:line="51" pos:column="15">sockfd<pos:position pos:line="51" pos:column="21"/></name></expr></argument>)<pos:position pos:line="51" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="23"/></expr_stmt>
        <return pos:line="52" pos:column="9">return <expr><operator pos:line="52" pos:column="16">-<pos:position pos:line="52" pos:column="17"/></operator><literal type="number" pos:line="52" pos:column="17">1<pos:position pos:line="52" pos:column="18"/></literal></expr>;<pos:position pos:line="52" pos:column="19"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

    <return pos:line="55" pos:column="5">return <expr><name pos:line="55" pos:column="12">sockfd<pos:position pos:line="55" pos:column="18"/></name></expr>;<pos:position pos:line="55" pos:column="19"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
