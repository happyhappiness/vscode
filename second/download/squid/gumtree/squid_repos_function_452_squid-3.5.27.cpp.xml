<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_452_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><name pos:line="4" pos:column="14">HELPER_INPUT_BUFFER<pos:position pos:line="4" pos:column="33"/></name></expr>]<pos:position pos:line="4" pos:column="34"/></index></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">buflen<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><literal type="number" pos:line="5" pos:column="18">0<pos:position pos:line="5" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">setbuf<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">stdout<pos:position pos:line="7" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="20">NULL<pos:position pos:line="7" pos:column="24"/></name></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">setbuf<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">stderr<pos:position pos:line="8" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="20">NULL<pos:position pos:line="8" pos:column="24"/></name></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><name pos:line="10" pos:column="5">program_name<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <name><name pos:line="10" pos:column="20">argv<pos:position pos:line="10" pos:column="24"/></name><index pos:line="10" pos:column="24">[<expr><literal type="number" pos:line="10" pos:column="25">0<pos:position pos:line="10" pos:column="26"/></literal></expr>]<pos:position pos:line="10" pos:column="27"/></index></name></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">process_options<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">argc<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="27">argv<pos:position pos:line="12" pos:column="31"/></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">debug<pos:position pos:line="14" pos:column="10"/></name><argument_list pos:line="14" pos:column="10">(<argument><expr><literal type="string" pos:line="14" pos:column="11">"%s "<pos:position pos:line="14" pos:column="16"/></literal> <name pos:line="14" pos:column="17">VERSION<pos:position pos:line="14" pos:column="24"/></name> <literal type="string" pos:line="14" pos:column="25">" "<pos:position pos:line="14" pos:column="28"/></literal> <name pos:line="14" pos:column="29">SQUID_BUILD_INFO<pos:position pos:line="14" pos:column="45"/></name> <literal type="string" pos:line="14" pos:column="46">" starting up...\n"<pos:position pos:line="14" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="67">program_name<pos:position pos:line="14" pos:column="79"/></name></expr></argument>)<pos:position pos:line="14" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="81"/></expr_stmt>

    <while pos:line="16" pos:column="5">while <condition pos:line="16" pos:column="11">(<expr><call><name pos:line="16" pos:column="12">fgets<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">buf<pos:position pos:line="16" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="23">HELPER_INPUT_BUFFER<pos:position pos:line="16" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="44">stdin<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call> <operator pos:line="16" pos:column="51">!=<pos:position pos:line="16" pos:column="53"/></operator> <name pos:line="16" pos:column="54">NULL<pos:position pos:line="16" pos:column="58"/></name></expr>)<pos:position pos:line="16" pos:column="59"/></condition> <block pos:line="16" pos:column="60">{
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">char<pos:position pos:line="17" pos:column="13"/></name> <modifier pos:line="17" pos:column="14">*<pos:position pos:line="17" pos:column="15"/></modifier></type><name pos:line="17" pos:column="15">p<pos:position pos:line="17" pos:column="16"/></name></decl>;<pos:position pos:line="17" pos:column="17"/></decl_stmt>

        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">(<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">p<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">strchr<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">buf<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="30">'\n'<pos:position pos:line="19" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call><operator pos:line="19" pos:column="35">)<pos:position pos:line="19" pos:column="36"/></operator> <operator pos:line="19" pos:column="37">!=<pos:position pos:line="19" pos:column="39"/></operator> <name pos:line="19" pos:column="40">NULL<pos:position pos:line="19" pos:column="44"/></name></expr>)<pos:position pos:line="19" pos:column="45"/></condition><then pos:line="19" pos:column="45"> <block pos:line="19" pos:column="46">{
            <expr_stmt><expr><operator pos:line="20" pos:column="13">*<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">p<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="char" pos:line="20" pos:column="18">'\0'<pos:position pos:line="20" pos:column="22"/></literal></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>      <comment type="block" pos:line="20" pos:column="29">/* strip \n */</comment>
            <expr_stmt><expr><name pos:line="21" pos:column="13">buflen<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <name pos:line="21" pos:column="22">p<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">-<pos:position pos:line="21" pos:column="25"/></operator> <name pos:line="21" pos:column="26">buf<pos:position pos:line="21" pos:column="29"/></name></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>   <comment type="block" pos:line="21" pos:column="33">/* length is known already */</comment>
        }<pos:position pos:line="22" pos:column="10"/></block></then> <else pos:line="22" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="13">buflen<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">=<pos:position pos:line="23" pos:column="21"/></operator> <call><name pos:line="23" pos:column="22">strlen<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">buf<pos:position pos:line="23" pos:column="32"/></name></expr></argument>)<pos:position pos:line="23" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt></block></else></if>   <comment type="block" pos:line="23" pos:column="37">/* keep this so we only scan the buffer for \0 once per loop */</comment>

        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debug<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><literal type="string" pos:line="25" pos:column="15">"Got %d bytes '%s' from Squid\n"<pos:position pos:line="25" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="49">buflen<pos:position pos:line="25" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="57">buf<pos:position pos:line="25" pos:column="60"/></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="62"/></expr_stmt>

        <comment type="block" pos:line="27" pos:column="9">/* send 'OK' result back to Squid */</comment>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">SEND_OK<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><literal type="string" pos:line="28" pos:column="17">""<pos:position pos:line="28" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">debug<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><literal type="string" pos:line="30" pos:column="11">"%s "<pos:position pos:line="30" pos:column="16"/></literal> <name pos:line="30" pos:column="17">VERSION<pos:position pos:line="30" pos:column="24"/></name> <literal type="string" pos:line="30" pos:column="25">" "<pos:position pos:line="30" pos:column="28"/></literal> <name pos:line="30" pos:column="29">SQUID_BUILD_INFO<pos:position pos:line="30" pos:column="45"/></name> <literal type="string" pos:line="30" pos:column="46">" shutting down...\n"<pos:position pos:line="30" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="69">program_name<pos:position pos:line="30" pos:column="81"/></name></expr></argument>)<pos:position pos:line="30" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="83"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">exit<pos:position pos:line="31" pos:column="9"/></name><argument_list pos:line="31" pos:column="9">(<argument><expr><literal type="number" pos:line="31" pos:column="10">0<pos:position pos:line="31" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="13"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
