<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3473_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">forgetVb<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">(<parameter><decl><type><specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier> <name pos:line="2" pos:column="46">char<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">reason<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">93<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">9<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <literal type="string" pos:line="4" pos:column="26">"forget vb "<pos:position pos:line="4" pos:column="38"/></literal> <operator pos:line="4" pos:column="39">&lt;&lt;<pos:position pos:line="4" pos:column="47"/></operator> <name pos:line="4" pos:column="42">reason<pos:position pos:line="4" pos:column="48"/></name> <operator pos:line="4" pos:column="49">&lt;&lt;<pos:position pos:line="4" pos:column="57"/></operator> <literal type="string" pos:line="4" pos:column="52">"; status:"<pos:position pos:line="4" pos:column="63"/></literal> <operator pos:line="4" pos:column="64">&lt;&lt;<pos:position pos:line="4" pos:column="72"/></operator> <call><name pos:line="4" pos:column="67">status<pos:position pos:line="4" pos:column="73"/></name><argument_list pos:line="4" pos:column="73">()<pos:position pos:line="4" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="77"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">BodyPipePointer<pos:position pos:line="6" pos:column="20"/></name> <modifier pos:line="6" pos:column="21">&amp;<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="22">p<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><call><name><name pos:line="6" pos:column="26">theVirginRep<pos:position pos:line="6" pos:column="38"/></name><operator pos:line="6" pos:column="38">.<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="39">raw<pos:position pos:line="6" pos:column="42"/></name></name><argument_list pos:line="6" pos:column="42">()<pos:position pos:line="6" pos:column="44"/></argument_list></call><operator pos:line="6" pos:column="44">.<pos:position pos:line="6" pos:column="45"/></operator><name pos:line="6" pos:column="45">body_pipe<pos:position pos:line="6" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="55"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">p<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">!=<pos:position pos:line="7" pos:column="13"/></operator> <name pos:line="7" pos:column="14">NULL<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">&amp;&amp;<pos:position pos:line="7" pos:column="29"/></operator> <call><name><name pos:line="7" pos:column="22">p<pos:position pos:line="7" pos:column="23"/></name><operator pos:line="7" pos:column="23">-&gt;<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="25">stillConsuming<pos:position pos:line="7" pos:column="39"/></name></name><argument_list pos:line="7" pos:column="39">(<argument><expr><name pos:line="7" pos:column="40">this<pos:position pos:line="7" pos:column="44"/></name></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="46"/></condition><then pos:line="7" pos:column="46">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="9">stopConsumingFrom<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">p<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">makingVb<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">==<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">opUndecided<pos:position pos:line="10" pos:column="32"/></name></expr>)<pos:position pos:line="10" pos:column="33"/></condition><then pos:line="10" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="9">makingVb<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">opNever<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt></block></then>
    <elseif pos:line="12" pos:column="5">else <if pos:line="12" pos:column="10">if <condition pos:line="12" pos:column="13">(<expr><name pos:line="12" pos:column="14">makingVb<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">==<pos:position pos:line="12" pos:column="25"/></operator> <name pos:line="12" pos:column="26">opOn<pos:position pos:line="12" pos:column="30"/></name></expr>)<pos:position pos:line="12" pos:column="31"/></condition><then pos:line="12" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="9">makingVb<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">opComplete<pos:position pos:line="13" pos:column="30"/></name></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt></block></then></if></elseif></if>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
