<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4303_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLChecklist<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">check<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">checking<pos:position pos:line="4" pos:column="17"/></name><argument_list pos:line="4" pos:column="17">()<pos:position pos:line="4" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <comment type="block" format="doxygen" pos:line="7" pos:column="5">/** Deny if no rules present. */</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">currentAnswer<pos:position pos:line="8" pos:column="18"/></name><argument_list pos:line="8" pos:column="18">(<argument><expr><name pos:line="8" pos:column="19">ACCESS_DENIED<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name pos:line="10" pos:column="9">callerGone<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">()<pos:position pos:line="10" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22"> <block pos:line="10" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">checkCallback<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><call><name pos:line="11" pos:column="23">currentAnswer<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">()<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="15" pos:column="5">/** The ACL List should NEVER be NULL when calling this method.
     * Always caller should check for NULL and handle appropriate to its needs first.
     * We cannot select a sensible default for all callers here. */</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">accessList<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">==<pos:position pos:line="18" pos:column="22"/></operator> <name pos:line="18" pos:column="23">NULL<pos:position pos:line="18" pos:column="27"/></name></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28"> <block pos:line="18" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">28<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="20">DBG_CRITICAL<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="34">"SECURITY ERROR: ACL "<pos:position pos:line="19" pos:column="56"/></literal> <operator pos:line="19" pos:column="57">&lt;&lt;<pos:position pos:line="19" pos:column="65"/></operator> <name pos:line="19" pos:column="60">this<pos:position pos:line="19" pos:column="64"/></name> <operator pos:line="19" pos:column="65">&lt;&lt;<pos:position pos:line="19" pos:column="73"/></operator> <literal type="string" pos:line="19" pos:column="68">" checked with nothing to match against!!"<pos:position pos:line="19" pos:column="110"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="112"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">currentAnswer<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">ACCESS_DENIED<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">checkCallback<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><call><name pos:line="21" pos:column="23">currentAnswer<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">()<pos:position pos:line="21" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>
        <return pos:line="22" pos:column="9">return;<pos:position pos:line="22" pos:column="16"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="25" pos:column="5">/* NOTE: This holds a cbdata reference to the current access_list
     * entry, not the whole list.
     */</comment>
    <while pos:line="28" pos:column="5">while <condition pos:line="28" pos:column="11">(<expr><name pos:line="28" pos:column="12">accessList<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">!=<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="26">NULL<pos:position pos:line="28" pos:column="30"/></name></expr>)<pos:position pos:line="28" pos:column="31"/></condition> <block pos:line="28" pos:column="32">{
        <comment type="block" format="doxygen" pos:line="29" pos:column="9">/** \par
         * If the _acl_access is no longer valid (i.e. its been
         * freed because of a reconfigure), then bail on this
         * access check.  For now, return ACCESS_DENIED.
         */</comment>

        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">!<pos:position pos:line="35" pos:column="14"/></operator><call><name pos:line="35" pos:column="14">cbdataReferenceValid<pos:position pos:line="35" pos:column="34"/></name><argument_list pos:line="35" pos:column="34">(<argument><expr><name pos:line="35" pos:column="35">accessList<pos:position pos:line="35" pos:column="45"/></name></expr></argument>)<pos:position pos:line="35" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="47"/></condition><then pos:line="35" pos:column="47"> <block pos:line="35" pos:column="48">{
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">cbdataReferenceDone<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">accessList<pos:position pos:line="36" pos:column="43"/></name></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">debugs<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><literal type="number" pos:line="37" pos:column="20">28<pos:position pos:line="37" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="24">4<pos:position pos:line="37" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="27">"ACLChecklist::check: "<pos:position pos:line="37" pos:column="50"/></literal> <operator pos:line="37" pos:column="51">&lt;&lt;<pos:position pos:line="37" pos:column="59"/></operator> <name pos:line="37" pos:column="54">this<pos:position pos:line="37" pos:column="58"/></name> <operator pos:line="37" pos:column="59">&lt;&lt;<pos:position pos:line="37" pos:column="67"/></operator> <literal type="string" pos:line="37" pos:column="62">" accessList is invalid"<pos:position pos:line="37" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="88"/></expr_stmt>
            <continue pos:line="38" pos:column="13">continue;<pos:position pos:line="38" pos:column="22"/></continue>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="41" pos:column="9">checking<pos:position pos:line="41" pos:column="17"/></name> <argument_list pos:line="41" pos:column="18">(<argument><expr><literal type="boolean" pos:line="41" pos:column="19">true<pos:position pos:line="41" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">checkAccessList<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">()<pos:position pos:line="42" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">checking<pos:position pos:line="43" pos:column="17"/></name> <argument_list pos:line="43" pos:column="18">(<argument><expr><literal type="boolean" pos:line="43" pos:column="19">false<pos:position pos:line="43" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt>

        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name pos:line="45" pos:column="13">asyncInProgress<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">()<pos:position pos:line="45" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="31"/></condition><then pos:line="45" pos:column="31"> <block pos:line="45" pos:column="32">{
            <return pos:line="46" pos:column="13">return;<pos:position pos:line="46" pos:column="20"/></return>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>

        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><call><name pos:line="49" pos:column="13">finished<pos:position pos:line="49" pos:column="21"/></name><argument_list pos:line="49" pos:column="21">()<pos:position pos:line="49" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="24"/></condition><then pos:line="49" pos:column="24"> <block pos:line="49" pos:column="25">{
            <comment type="block" format="doxygen" pos:line="50" pos:column="13">/** \par
             * Either the request is allowed, denied, requires authentication.
             */</comment>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">debugs<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><literal type="number" pos:line="53" pos:column="20">28<pos:position pos:line="53" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="24">3<pos:position pos:line="53" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="27">"ACLChecklist::check: "<pos:position pos:line="53" pos:column="50"/></literal> <operator pos:line="53" pos:column="51">&lt;&lt;<pos:position pos:line="53" pos:column="59"/></operator> <name pos:line="53" pos:column="54">this<pos:position pos:line="53" pos:column="58"/></name> <operator pos:line="53" pos:column="59">&lt;&lt;<pos:position pos:line="53" pos:column="67"/></operator> <literal type="string" pos:line="53" pos:column="62">" match found, calling back with "<pos:position pos:line="53" pos:column="96"/></literal> <operator pos:line="53" pos:column="97">&lt;&lt;<pos:position pos:line="53" pos:column="105"/></operator> <call><name pos:line="53" pos:column="100">currentAnswer<pos:position pos:line="53" pos:column="113"/></name><argument_list pos:line="53" pos:column="113">()<pos:position pos:line="53" pos:column="115"/></argument_list></call></expr></argument>)<pos:position pos:line="53" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="117"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">cbdataReferenceDone<pos:position pos:line="54" pos:column="32"/></name><argument_list pos:line="54" pos:column="32">(<argument><expr><name pos:line="54" pos:column="33">accessList<pos:position pos:line="54" pos:column="43"/></name></expr></argument>)<pos:position pos:line="54" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="45"/></expr_stmt> <comment type="block" pos:line="54" pos:column="46">/* A */</comment>
            <expr_stmt><expr><call><name pos:line="55" pos:column="13">checkCallback<pos:position pos:line="55" pos:column="26"/></name><argument_list pos:line="55" pos:column="26">(<argument><expr><call><name pos:line="55" pos:column="27">currentAnswer<pos:position pos:line="55" pos:column="40"/></name><argument_list pos:line="55" pos:column="40">()<pos:position pos:line="55" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="44"/></expr_stmt>
            <comment type="block" pos:line="56" pos:column="13">/* From here on in, this may be invalid */</comment>
            <return pos:line="57" pos:column="13">return;<pos:position pos:line="57" pos:column="20"/></return>
        }<pos:position pos:line="58" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="60" pos:column="9">/*
         * Reference the next access entry
         */</comment>
        <decl_stmt><decl><type><specifier pos:line="63" pos:column="9">const<pos:position pos:line="63" pos:column="14"/></specifier> <name pos:line="63" pos:column="15">acl_access<pos:position pos:line="63" pos:column="25"/></name> <modifier pos:line="63" pos:column="26">*<pos:position pos:line="63" pos:column="27"/></modifier></type><name pos:line="63" pos:column="27">A<pos:position pos:line="63" pos:column="28"/></name> <init pos:line="63" pos:column="29">= <expr><name pos:line="63" pos:column="31">accessList<pos:position pos:line="63" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="63" pos:column="42"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="65" pos:column="9">assert<pos:position pos:line="65" pos:column="15"/></name> <argument_list pos:line="65" pos:column="16">(<argument><expr><name pos:line="65" pos:column="17">A<pos:position pos:line="65" pos:column="18"/></name></expr></argument>)<pos:position pos:line="65" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="20"/></expr_stmt>

        <expr_stmt><expr><name pos:line="67" pos:column="9">accessList<pos:position pos:line="67" pos:column="19"/></name> <operator pos:line="67" pos:column="20">=<pos:position pos:line="67" pos:column="21"/></operator> <call><name pos:line="67" pos:column="22">cbdataReference<pos:position pos:line="67" pos:column="37"/></name><argument_list pos:line="67" pos:column="37">(<argument><expr><name><name pos:line="67" pos:column="38">A<pos:position pos:line="67" pos:column="39"/></name><operator pos:line="67" pos:column="39">-&gt;<pos:position pos:line="67" pos:column="44"/></operator><name pos:line="67" pos:column="41">next<pos:position pos:line="67" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="69" pos:column="9">cbdataReferenceDone<pos:position pos:line="69" pos:column="28"/></name><argument_list pos:line="69" pos:column="28">(<argument><expr><name pos:line="69" pos:column="29">A<pos:position pos:line="69" pos:column="30"/></name></expr></argument>)<pos:position pos:line="69" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="70" pos:column="6"/></block></while>

    <comment type="block" format="doxygen" pos:line="72" pos:column="5">/** If dropped off the end of the list return inversion of last line allow/deny action. */</comment>
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">debugs<pos:position pos:line="73" pos:column="11"/></name><argument_list pos:line="73" pos:column="11">(<argument><expr><literal type="number" pos:line="73" pos:column="12">28<pos:position pos:line="73" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="16">3<pos:position pos:line="73" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="19">HERE<pos:position pos:line="73" pos:column="23"/></name> <operator pos:line="73" pos:column="24">&lt;&lt;<pos:position pos:line="73" pos:column="32"/></operator> <name pos:line="73" pos:column="27">this<pos:position pos:line="73" pos:column="31"/></name> <operator pos:line="73" pos:column="32">&lt;&lt;<pos:position pos:line="73" pos:column="40"/></operator> <literal type="string" pos:line="73" pos:column="35">" NO match found, returning "<pos:position pos:line="73" pos:column="64"/></literal> <operator pos:line="73" pos:column="65">&lt;&lt;<pos:position pos:line="73" pos:column="73"/></operator>
           <operator pos:line="74" pos:column="12">(<pos:position pos:line="74" pos:column="13"/></operator><ternary><condition><expr><call><name pos:line="74" pos:column="13">currentAnswer<pos:position pos:line="74" pos:column="26"/></name><argument_list pos:line="74" pos:column="26">()<pos:position pos:line="74" pos:column="28"/></argument_list></call> <operator pos:line="74" pos:column="29">!=<pos:position pos:line="74" pos:column="31"/></operator> <name pos:line="74" pos:column="32">ACCESS_DENIED<pos:position pos:line="74" pos:column="45"/></name></expr> ?<pos:position pos:line="74" pos:column="47"/></condition><then pos:line="74" pos:column="47"> <expr><name pos:line="74" pos:column="48">ACCESS_DENIED<pos:position pos:line="74" pos:column="61"/></name></expr> <pos:position pos:line="74" pos:column="62"/></then><else pos:line="74" pos:column="62">: <expr><name pos:line="74" pos:column="64">ACCESS_ALLOWED<pos:position pos:line="74" pos:column="78"/></name></expr></else></ternary><operator pos:line="74" pos:column="78">)<pos:position pos:line="74" pos:column="79"/></operator></expr></argument>)<pos:position pos:line="74" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="81"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="76" pos:column="5">checkCallback<pos:position pos:line="76" pos:column="18"/></name><argument_list pos:line="76" pos:column="18">(<argument><expr><ternary><condition><expr><call><name pos:line="76" pos:column="19">currentAnswer<pos:position pos:line="76" pos:column="32"/></name><argument_list pos:line="76" pos:column="32">()<pos:position pos:line="76" pos:column="34"/></argument_list></call> <operator pos:line="76" pos:column="35">!=<pos:position pos:line="76" pos:column="37"/></operator> <name pos:line="76" pos:column="38">ACCESS_DENIED<pos:position pos:line="76" pos:column="51"/></name></expr> ?<pos:position pos:line="76" pos:column="53"/></condition><then pos:line="76" pos:column="53"> <expr><name pos:line="76" pos:column="54">ACCESS_DENIED<pos:position pos:line="76" pos:column="67"/></name></expr> <pos:position pos:line="76" pos:column="68"/></then><else pos:line="76" pos:column="68">: <expr><name pos:line="76" pos:column="70">ACCESS_ALLOWED<pos:position pos:line="76" pos:column="84"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="76" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="86"/></expr_stmt>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
