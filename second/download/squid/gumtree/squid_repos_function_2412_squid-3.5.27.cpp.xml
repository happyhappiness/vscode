<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2412_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemObject<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">trimUnSwappable<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">()<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">int64_t<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">new_mem_lo<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><call><name pos:line="4" pos:column="36">policyLowestOffsetToKeep<pos:position pos:line="4" pos:column="60"/></name><argument_list pos:line="4" pos:column="60">(<argument><expr><literal type="boolean" pos:line="4" pos:column="61">false<pos:position pos:line="4" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="67"/></argument_list></call></expr></init></decl>)<pos:position pos:line="4" pos:column="68"/></condition><then pos:line="4" pos:column="68"> <block pos:line="4" pos:column="69">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">assert<pos:position pos:line="5" pos:column="15"/></name> <argument_list pos:line="5" pos:column="16">(<argument><expr><name pos:line="5" pos:column="17">new_mem_lo<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">&gt;<pos:position pos:line="5" pos:column="32"/></operator> <literal type="number" pos:line="5" pos:column="30">0<pos:position pos:line="5" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="6" pos:column="9">data_hdr<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">.<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">freeDataUpto<pos:position pos:line="6" pos:column="30"/></name></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">new_mem_lo<pos:position pos:line="6" pos:column="41"/></name></expr></argument>)<pos:position pos:line="6" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="7" pos:column="9">inmem_lo<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">new_mem_lo<pos:position pos:line="7" pos:column="30"/></name></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if> <comment type="line" pos:line="8" pos:column="7">// else we should not trim anything at this time</comment>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
