<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4918_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">ResponseParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">parseResponseStatusAndReason<pos:position pos:line="2" pos:column="56"/></name></name><parameter_list pos:line="2" pos:column="56">(<parameter><decl><type><name><name pos:line="2" pos:column="57">Http1<pos:position pos:line="2" pos:column="62"/></name><operator pos:line="2" pos:column="62">::<pos:position pos:line="2" pos:column="64"/></operator><name pos:line="2" pos:column="64">Tokenizer<pos:position pos:line="2" pos:column="73"/></name></name> <modifier pos:line="2" pos:column="74">&amp;<pos:position pos:line="2" pos:column="79"/></modifier></type><name pos:line="2" pos:column="75">tok<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="80">const<pos:position pos:line="2" pos:column="85"/></specifier> <name pos:line="2" pos:column="86">CharacterSet<pos:position pos:line="2" pos:column="98"/></name> <modifier pos:line="2" pos:column="99">&amp;<pos:position pos:line="2" pos:column="104"/></modifier></type><name pos:line="2" pos:column="100">WspDelim<pos:position pos:line="2" pos:column="108"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="109"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">completedStatus_<pos:position pos:line="4" pos:column="26"/></name></expr>)<pos:position pos:line="4" pos:column="27"/></condition><then pos:line="4" pos:column="27"> <block pos:line="4" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">74<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">9<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"seek status-code in: "<pos:position pos:line="5" pos:column="46"/></literal> <operator pos:line="5" pos:column="47">&lt;&lt;<pos:position pos:line="5" pos:column="55"/></operator> <call><name><name pos:line="5" pos:column="50">tok<pos:position pos:line="5" pos:column="53"/></name><operator pos:line="5" pos:column="53">.<pos:position pos:line="5" pos:column="54"/></operator><name pos:line="5" pos:column="54">remaining<pos:position pos:line="5" pos:column="63"/></name></name><argument_list pos:line="5" pos:column="63">()<pos:position pos:line="5" pos:column="65"/></argument_list></call><operator pos:line="5" pos:column="65">.<pos:position pos:line="5" pos:column="66"/></operator><call><name pos:line="5" pos:column="66">substr<pos:position pos:line="5" pos:column="72"/></name><argument_list pos:line="5" pos:column="72">(<argument><expr><literal type="number" pos:line="5" pos:column="73">0<pos:position pos:line="5" pos:column="74"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="5" pos:column="75">10<pos:position pos:line="5" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="78"/></argument_list></call> <operator pos:line="5" pos:column="79">&lt;&lt;<pos:position pos:line="5" pos:column="87"/></operator> <literal type="string" pos:line="5" pos:column="82">"..."<pos:position pos:line="5" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="89"/></expr_stmt>
        <comment type="block" pos:line="6" pos:column="9">/* RFC 7230 section 3.1.2 - status code is 3 DIGIT octets.
         * There is no limit on what those octets may be.
         * 000 through 999 are all valid.
         */</comment>
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">int64_t<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">statusValue<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name><name pos:line="11" pos:column="13">tok<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">int64<pos:position pos:line="11" pos:column="22"/></name></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">statusValue<pos:position pos:line="11" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="36">10<pos:position pos:line="11" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="11" pos:column="40">false<pos:position pos:line="11" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="47">3<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call> <operator pos:line="11" pos:column="50">&amp;&amp;<pos:position pos:line="11" pos:column="60"/></operator> <call><name><name pos:line="11" pos:column="53">tok<pos:position pos:line="11" pos:column="56"/></name><operator pos:line="11" pos:column="56">.<pos:position pos:line="11" pos:column="57"/></operator><name pos:line="11" pos:column="57">skipOne<pos:position pos:line="11" pos:column="64"/></name></name><argument_list pos:line="11" pos:column="64">(<argument><expr><name pos:line="11" pos:column="65">WspDelim<pos:position pos:line="11" pos:column="73"/></name></expr></argument>)<pos:position pos:line="11" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="75"/></condition><then pos:line="11" pos:column="75"> <block pos:line="11" pos:column="76">{

            <expr_stmt><expr><call><name pos:line="13" pos:column="13">debugs<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><literal type="number" pos:line="13" pos:column="20">74<pos:position pos:line="13" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="24">6<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="27">"found int64 status-code="<pos:position pos:line="13" pos:column="53"/></literal> <operator pos:line="13" pos:column="54">&lt;&lt;<pos:position pos:line="13" pos:column="62"/></operator> <name pos:line="13" pos:column="57">statusValue<pos:position pos:line="13" pos:column="68"/></name></expr></argument>)<pos:position pos:line="13" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="70"/></expr_stmt>
            <expr_stmt><expr><name pos:line="14" pos:column="13">statusCode_<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">=<pos:position pos:line="14" pos:column="26"/></operator> <cast type="static" pos:line="14" pos:column="27">static_cast<argument_list type="generic" pos:line="14" pos:column="38">&lt;<argument><expr><name><name pos:line="14" pos:column="39">Http<pos:position pos:line="14" pos:column="43"/></name><operator pos:line="14" pos:column="43">::<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="45">StatusCode<pos:position pos:line="14" pos:column="55"/></name></name></expr></argument>&gt;<pos:position pos:line="14" pos:column="59"/></argument_list><argument_list pos:line="14" pos:column="56">(<argument><expr><name pos:line="14" pos:column="57">statusValue<pos:position pos:line="14" pos:column="68"/></name></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></cast></expr>;<pos:position pos:line="14" pos:column="70"/></expr_stmt>

            <expr_stmt><expr><name pos:line="16" pos:column="13">buf_<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <call><name><name pos:line="16" pos:column="20">tok<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">.<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">remaining<pos:position pos:line="16" pos:column="33"/></name></name><argument_list pos:line="16" pos:column="33">()<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt> <comment type="line" pos:line="16" pos:column="37">// resume checkpoint</comment>
            <expr_stmt><expr><name pos:line="17" pos:column="13">completedStatus_<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">=<pos:position pos:line="17" pos:column="31"/></operator> <literal type="boolean" pos:line="17" pos:column="32">true<pos:position pos:line="17" pos:column="36"/></literal></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>

        }<pos:position pos:line="19" pos:column="10"/></block></then> <elseif pos:line="19" pos:column="11">else <if pos:line="19" pos:column="16">if <condition pos:line="19" pos:column="19">(<expr><call><name><name pos:line="19" pos:column="20">tok<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">.<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">atEnd<pos:position pos:line="19" pos:column="29"/></name></name><argument_list pos:line="19" pos:column="29">()<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="32"/></condition><then pos:line="19" pos:column="32"> <block pos:line="19" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">debugs<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><literal type="number" pos:line="20" pos:column="20">74<pos:position pos:line="20" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="24">6<pos:position pos:line="20" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="27">"Parser needs more data"<pos:position pos:line="20" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="53"/></expr_stmt>
            <return pos:line="21" pos:column="13">return <expr><literal type="number" pos:line="21" pos:column="20">0<pos:position pos:line="21" pos:column="21"/></literal></expr>;<pos:position pos:line="21" pos:column="22"/></return> <comment type="line" pos:line="21" pos:column="23">// need more to be sure we have it all</comment>

        }<pos:position pos:line="23" pos:column="10"/></block></then></if></elseif> <else pos:line="23" pos:column="11">else <block pos:line="23" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">debugs<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><literal type="number" pos:line="24" pos:column="20">74<pos:position pos:line="24" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="24">6<pos:position pos:line="24" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="27">"invalid status-line. invalid code."<pos:position pos:line="24" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="65"/></expr_stmt>
            <return pos:line="25" pos:column="13">return <expr><operator pos:line="25" pos:column="20">-<pos:position pos:line="25" pos:column="21"/></operator><literal type="number" pos:line="25" pos:column="21">1<pos:position pos:line="25" pos:column="22"/></literal></expr>;<pos:position pos:line="25" pos:column="23"/></return> <comment type="line" pos:line="25" pos:column="24">// invalid status, a single SP terminator required</comment>
        }<pos:position pos:line="26" pos:column="10"/></block></else></if>
        <comment type="line" pos:line="27" pos:column="9">// NOTE: any whitespace after the single SP is part of the reason phrase.</comment>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="30" pos:column="5">/* RFC 7230 says we SHOULD ignore the reason phrase content
     * but it has a definite valid vs invalid character set.
     * We interpret the SHOULD as ignoring absence and syntax, but
     * producing an error if it contains an invalid octet.
     */</comment>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">debugs<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><literal type="number" pos:line="36" pos:column="12">74<pos:position pos:line="36" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="16">9<pos:position pos:line="36" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="19">"seek reason-phrase in: "<pos:position pos:line="36" pos:column="44"/></literal> <operator pos:line="36" pos:column="45">&lt;&lt;<pos:position pos:line="36" pos:column="53"/></operator> <call><name><name pos:line="36" pos:column="48">tok<pos:position pos:line="36" pos:column="51"/></name><operator pos:line="36" pos:column="51">.<pos:position pos:line="36" pos:column="52"/></operator><name pos:line="36" pos:column="52">remaining<pos:position pos:line="36" pos:column="61"/></name></name><argument_list pos:line="36" pos:column="61">()<pos:position pos:line="36" pos:column="63"/></argument_list></call><operator pos:line="36" pos:column="63">.<pos:position pos:line="36" pos:column="64"/></operator><call><name pos:line="36" pos:column="64">substr<pos:position pos:line="36" pos:column="70"/></name><argument_list pos:line="36" pos:column="70">(<argument><expr><literal type="number" pos:line="36" pos:column="71">0<pos:position pos:line="36" pos:column="72"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="36" pos:column="73">50<pos:position pos:line="36" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></call> <operator pos:line="36" pos:column="77">&lt;&lt;<pos:position pos:line="36" pos:column="85"/></operator> <literal type="string" pos:line="36" pos:column="80">"..."<pos:position pos:line="36" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="87"/></expr_stmt>

    <comment type="line" pos:line="38" pos:column="5">// if we got here we are still looking for reason-phrase bytes</comment>
    <decl_stmt><decl><specifier pos:line="39" pos:column="5">static<pos:position pos:line="39" pos:column="11"/></specifier> <type><specifier pos:line="39" pos:column="12">const<pos:position pos:line="39" pos:column="17"/></specifier> <name pos:line="39" pos:column="18">CharacterSet<pos:position pos:line="39" pos:column="30"/></name></type> <name pos:line="39" pos:column="31">phraseChars<pos:position pos:line="39" pos:column="42"/></name> <init pos:line="39" pos:column="43">= <expr><name><name pos:line="39" pos:column="45">CharacterSet<pos:position pos:line="39" pos:column="57"/></name><operator pos:line="39" pos:column="57">::<pos:position pos:line="39" pos:column="59"/></operator><name pos:line="39" pos:column="59">WSP<pos:position pos:line="39" pos:column="62"/></name></name> <operator pos:line="39" pos:column="63">+<pos:position pos:line="39" pos:column="64"/></operator> <name><name pos:line="39" pos:column="65">CharacterSet<pos:position pos:line="39" pos:column="77"/></name><operator pos:line="39" pos:column="77">::<pos:position pos:line="39" pos:column="79"/></operator><name pos:line="39" pos:column="79">VCHAR<pos:position pos:line="39" pos:column="84"/></name></name> <operator pos:line="39" pos:column="85">+<pos:position pos:line="39" pos:column="86"/></operator> <name><name pos:line="39" pos:column="87">CharacterSet<pos:position pos:line="39" pos:column="99"/></name><operator pos:line="39" pos:column="99">::<pos:position pos:line="39" pos:column="101"/></operator><name pos:line="39" pos:column="101">OBSTEXT<pos:position pos:line="39" pos:column="108"/></name></name></expr></init></decl>;<pos:position pos:line="39" pos:column="109"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="40" pos:column="5">(<pos:position pos:line="40" pos:column="6"/></operator><name pos:line="40" pos:column="6">void<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">)<pos:position pos:line="40" pos:column="11"/></operator><call><name><name pos:line="40" pos:column="11">tok<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">.<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="15">prefix<pos:position pos:line="40" pos:column="21"/></name></name><argument_list pos:line="40" pos:column="21">(<argument><expr><name pos:line="40" pos:column="22">reasonPhrase_<pos:position pos:line="40" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="37">phraseChars<pos:position pos:line="40" pos:column="48"/></name></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="50"/></expr_stmt> <comment type="line" pos:line="40" pos:column="51">// optional, no error if missing</comment>
    <try pos:line="41" pos:column="5">try <block pos:line="41" pos:column="9">{
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><call><name pos:line="42" pos:column="13">skipLineTerminator<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">tok<pos:position pos:line="42" pos:column="35"/></name></expr></argument>)<pos:position pos:line="42" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="37"/></condition><then pos:line="42" pos:column="37"> <block pos:line="42" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">debugs<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><literal type="number" pos:line="43" pos:column="20">74<pos:position pos:line="43" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="24">DBG_DATA<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="34">"parse remaining buf={length="<pos:position pos:line="43" pos:column="64"/></literal> <operator pos:line="43" pos:column="65">&lt;&lt;<pos:position pos:line="43" pos:column="73"/></operator> <call><name><name pos:line="43" pos:column="68">tok<pos:position pos:line="43" pos:column="71"/></name><operator pos:line="43" pos:column="71">.<pos:position pos:line="43" pos:column="72"/></operator><name pos:line="43" pos:column="72">remaining<pos:position pos:line="43" pos:column="81"/></name></name><argument_list pos:line="43" pos:column="81">()<pos:position pos:line="43" pos:column="83"/></argument_list></call><operator pos:line="43" pos:column="83">.<pos:position pos:line="43" pos:column="84"/></operator><call><name pos:line="43" pos:column="84">length<pos:position pos:line="43" pos:column="90"/></name><argument_list pos:line="43" pos:column="90">()<pos:position pos:line="43" pos:column="92"/></argument_list></call> <operator pos:line="43" pos:column="93">&lt;&lt;<pos:position pos:line="43" pos:column="101"/></operator> <literal type="string" pos:line="43" pos:column="96">", data='"<pos:position pos:line="43" pos:column="106"/></literal> <operator pos:line="43" pos:column="107">&lt;&lt;<pos:position pos:line="43" pos:column="115"/></operator> <call><name><name pos:line="43" pos:column="110">tok<pos:position pos:line="43" pos:column="113"/></name><operator pos:line="43" pos:column="113">.<pos:position pos:line="43" pos:column="114"/></operator><name pos:line="43" pos:column="114">remaining<pos:position pos:line="43" pos:column="123"/></name></name><argument_list pos:line="43" pos:column="123">()<pos:position pos:line="43" pos:column="125"/></argument_list></call> <operator pos:line="43" pos:column="126">&lt;&lt;<pos:position pos:line="43" pos:column="134"/></operator> <literal type="string" pos:line="43" pos:column="129">"'}"<pos:position pos:line="43" pos:column="133"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="134"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="135"/></expr_stmt>
            <expr_stmt><expr><name pos:line="44" pos:column="13">buf_<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <call><name><name pos:line="44" pos:column="20">tok<pos:position pos:line="44" pos:column="23"/></name><operator pos:line="44" pos:column="23">.<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="24">remaining<pos:position pos:line="44" pos:column="33"/></name></name><argument_list pos:line="44" pos:column="33">()<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt> <comment type="line" pos:line="44" pos:column="37">// resume checkpoint</comment>
            <return pos:line="45" pos:column="13">return <expr><literal type="number" pos:line="45" pos:column="20">1<pos:position pos:line="45" pos:column="21"/></literal></expr>;<pos:position pos:line="45" pos:column="22"/></return>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name><name pos:line="47" pos:column="9">reasonPhrase_<pos:position pos:line="47" pos:column="22"/></name><operator pos:line="47" pos:column="22">.<pos:position pos:line="47" pos:column="23"/></operator><name pos:line="47" pos:column="23">clear<pos:position pos:line="47" pos:column="28"/></name></name><argument_list pos:line="47" pos:column="28">()<pos:position pos:line="47" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="31"/></expr_stmt>
        <return pos:line="48" pos:column="9">return <expr><literal type="number" pos:line="48" pos:column="16">0<pos:position pos:line="48" pos:column="17"/></literal></expr>;<pos:position pos:line="48" pos:column="18"/></return> <comment type="line" pos:line="48" pos:column="19">// need more to be sure we have it all</comment>

    }<pos:position pos:line="50" pos:column="6"/></block> <catch pos:line="50" pos:column="7">catch <parameter_list pos:line="50" pos:column="13">(<parameter><decl><type><specifier pos:line="50" pos:column="14">const<pos:position pos:line="50" pos:column="19"/></specifier> <name><name pos:line="50" pos:column="20">std<pos:position pos:line="50" pos:column="23"/></name><operator pos:line="50" pos:column="23">::<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="25">exception<pos:position pos:line="50" pos:column="34"/></name></name> <modifier pos:line="50" pos:column="35">&amp;<pos:position pos:line="50" pos:column="40"/></modifier></type><name pos:line="50" pos:column="36">ex<pos:position pos:line="50" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="50" pos:column="39"/></parameter_list> <block pos:line="50" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">debugs<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><literal type="number" pos:line="51" pos:column="16">74<pos:position pos:line="51" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="20">6<pos:position pos:line="51" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="23">"invalid status-line: "<pos:position pos:line="51" pos:column="46"/></literal> <operator pos:line="51" pos:column="47">&lt;&lt;<pos:position pos:line="51" pos:column="55"/></operator> <call><name><name pos:line="51" pos:column="50">ex<pos:position pos:line="51" pos:column="52"/></name><operator pos:line="51" pos:column="52">.<pos:position pos:line="51" pos:column="53"/></operator><name pos:line="51" pos:column="53">what<pos:position pos:line="51" pos:column="57"/></name></name><argument_list pos:line="51" pos:column="57">()<pos:position pos:line="51" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></catch></try>
    <return pos:line="53" pos:column="5">return <expr><operator pos:line="53" pos:column="12">-<pos:position pos:line="53" pos:column="13"/></operator><literal type="number" pos:line="53" pos:column="13">1<pos:position pos:line="53" pos:column="14"/></literal></expr>;<pos:position pos:line="53" pos:column="15"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
