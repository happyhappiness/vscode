<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6369_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MmappedFile<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">read<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">ReadRequest<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">aRequest<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">79<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <literal type="string" pos:line="4" pos:column="26">"(FD "<pos:position pos:line="4" pos:column="32"/></literal> <operator pos:line="4" pos:column="33">&lt;&lt;<pos:position pos:line="4" pos:column="41"/></operator> <name pos:line="4" pos:column="36">fd<pos:position pos:line="4" pos:column="38"/></name> <operator pos:line="4" pos:column="39">&lt;&lt;<pos:position pos:line="4" pos:column="47"/></operator> <literal type="string" pos:line="4" pos:column="42">", "<pos:position pos:line="4" pos:column="46"/></literal> <operator pos:line="4" pos:column="47">&lt;&lt;<pos:position pos:line="4" pos:column="55"/></operator> <name><name pos:line="4" pos:column="50">aRequest<pos:position pos:line="4" pos:column="58"/></name><operator pos:line="4" pos:column="58">-&gt;<pos:position pos:line="4" pos:column="63"/></operator><name pos:line="4" pos:column="60">len<pos:position pos:line="4" pos:column="63"/></name></name> <operator pos:line="4" pos:column="64">&lt;&lt;<pos:position pos:line="4" pos:column="72"/></operator> <literal type="string" pos:line="4" pos:column="67">", "<pos:position pos:line="4" pos:column="71"/></literal> <operator pos:line="4" pos:column="72">&lt;&lt;<pos:position pos:line="4" pos:column="80"/></operator>
           <name><name pos:line="5" pos:column="12">aRequest<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">-&gt;<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="22">offset<pos:position pos:line="5" pos:column="28"/></name></name> <operator pos:line="5" pos:column="29">&lt;&lt;<pos:position pos:line="5" pos:column="37"/></operator> <literal type="string" pos:line="5" pos:column="32">")"<pos:position pos:line="5" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">fd<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">&gt;=<pos:position pos:line="7" pos:column="20"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">ioRequestor<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">!=<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="27">NULL<pos:position pos:line="8" pos:column="31"/></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">aRequest<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">-&gt;<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="22">len<pos:position pos:line="9" pos:column="25"/></name></name> <operator pos:line="9" pos:column="26">&gt;<pos:position pos:line="9" pos:column="30"/></operator> <literal type="number" pos:line="9" pos:column="28">0<pos:position pos:line="9" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt> <comment type="line" pos:line="9" pos:column="32">// TODO: work around mmap failures on zero-len?</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name><name pos:line="10" pos:column="12">aRequest<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">-&gt;<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="22">offset<pos:position pos:line="10" pos:column="28"/></name></name> <operator pos:line="10" pos:column="29">&gt;=<pos:position pos:line="10" pos:column="34"/></operator> <literal type="number" pos:line="10" pos:column="32">0<pos:position pos:line="10" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><operator pos:line="11" pos:column="12">!<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">error_<pos:position pos:line="11" pos:column="19"/></name></expr></argument>)<pos:position pos:line="11" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt> <comment type="line" pos:line="11" pos:column="22">// TODO: propagate instead?</comment>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">assert<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name pos:line="13" pos:column="12">minOffset<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">&lt;<pos:position pos:line="13" pos:column="26"/></operator> <literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal> <operator pos:line="13" pos:column="26">||<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">minOffset<pos:position pos:line="13" pos:column="38"/></name> <operator pos:line="13" pos:column="39">&lt;=<pos:position pos:line="13" pos:column="44"/></operator> <name><name pos:line="13" pos:column="42">aRequest<pos:position pos:line="13" pos:column="50"/></name><operator pos:line="13" pos:column="50">-&gt;<pos:position pos:line="13" pos:column="55"/></operator><name pos:line="13" pos:column="52">offset<pos:position pos:line="13" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">assert<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><name pos:line="14" pos:column="12">maxOffset<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">&lt;<pos:position pos:line="14" pos:column="26"/></operator> <literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal> <operator pos:line="14" pos:column="26">||<pos:position pos:line="14" pos:column="28"/></operator> <cast type="static" pos:line="14" pos:column="29">static_cast<argument_list type="generic" pos:line="14" pos:column="40">&lt;<argument><expr><name pos:line="14" pos:column="41">uint64_t<pos:position pos:line="14" pos:column="49"/></name></expr></argument>&gt;<pos:position pos:line="14" pos:column="53"/></argument_list><argument_list pos:line="14" pos:column="50">(<argument><expr><name><name pos:line="14" pos:column="51">aRequest<pos:position pos:line="14" pos:column="59"/></name><operator pos:line="14" pos:column="59">-&gt;<pos:position pos:line="14" pos:column="64"/></operator><name pos:line="14" pos:column="61">offset<pos:position pos:line="14" pos:column="67"/></name></name> <operator pos:line="14" pos:column="68">+<pos:position pos:line="14" pos:column="69"/></operator> <name><name pos:line="14" pos:column="70">aRequest<pos:position pos:line="14" pos:column="78"/></name><operator pos:line="14" pos:column="78">-&gt;<pos:position pos:line="14" pos:column="83"/></operator><name pos:line="14" pos:column="80">len<pos:position pos:line="14" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="84"/></argument_list></cast> <operator pos:line="14" pos:column="85">&lt;=<pos:position pos:line="14" pos:column="90"/></operator> <cast type="static" pos:line="14" pos:column="88">static_cast<argument_list type="generic" pos:line="14" pos:column="99">&lt;<argument><expr><name pos:line="14" pos:column="100">uint64_t<pos:position pos:line="14" pos:column="108"/></name></expr></argument>&gt;<pos:position pos:line="14" pos:column="112"/></argument_list><argument_list pos:line="14" pos:column="109">(<argument><expr><name pos:line="14" pos:column="110">maxOffset<pos:position pos:line="14" pos:column="119"/></name></expr></argument>)<pos:position pos:line="14" pos:column="120"/></argument_list></cast></expr></argument>)<pos:position pos:line="14" pos:column="121"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="122"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="16" pos:column="5">Mmapping<pos:position pos:line="16" pos:column="13"/></name></type> <name pos:line="16" pos:column="14">mapping<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">fd<pos:position pos:line="16" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="26">aRequest<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">-&gt;<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="36">len<pos:position pos:line="16" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="41">PROT_READ<pos:position pos:line="16" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="52">MAP_PRIVATE<pos:position pos:line="16" pos:column="63"/></name> <operator pos:line="16" pos:column="64">|<pos:position pos:line="16" pos:column="65"/></operator> <name pos:line="16" pos:column="66">MAP_NORESERVE<pos:position pos:line="16" pos:column="79"/></name></expr></argument>,
                     <argument><expr><name><name pos:line="17" pos:column="22">aRequest<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">offset<pos:position pos:line="17" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></decl>;<pos:position pos:line="17" pos:column="40"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="19" pos:column="5">bool<pos:position pos:line="19" pos:column="9"/></name></type> <name pos:line="19" pos:column="10">done<pos:position pos:line="19" pos:column="14"/></name> <init pos:line="19" pos:column="15">= <expr><literal type="boolean" pos:line="19" pos:column="17">false<pos:position pos:line="19" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="23"/></decl_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<decl><type><name pos:line="20" pos:column="9">void<pos:position pos:line="20" pos:column="13"/></name> <modifier pos:line="20" pos:column="14">*<pos:position pos:line="20" pos:column="15"/></modifier></type><name pos:line="20" pos:column="15">buf<pos:position pos:line="20" pos:column="18"/></name> <init pos:line="20" pos:column="19">= <expr><call><name><name pos:line="20" pos:column="21">mapping<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">.<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="29">map<pos:position pos:line="20" pos:column="32"/></name></name><argument_list pos:line="20" pos:column="32">()<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr></init></decl>)<pos:position pos:line="20" pos:column="35"/></condition><then pos:line="20" pos:column="35"> <block pos:line="20" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">memcpy<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><name><name pos:line="21" pos:column="16">aRequest<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">-&gt;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="26">buf<pos:position pos:line="21" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="31">buf<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="36">aRequest<pos:position pos:line="21" pos:column="44"/></name><operator pos:line="21" pos:column="44">-&gt;<pos:position pos:line="21" pos:column="49"/></operator><name pos:line="21" pos:column="46">len<pos:position pos:line="21" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">done<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <call><name><name pos:line="22" pos:column="16">mapping<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">.<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">unmap<pos:position pos:line="22" pos:column="29"/></name></name><argument_list pos:line="22" pos:column="29">()<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="24" pos:column="5">error_<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <operator pos:line="24" pos:column="14">!<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">done<pos:position pos:line="24" pos:column="19"/></name></expr>;<pos:position pos:line="24" pos:column="20"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="26" pos:column="5">const<pos:position pos:line="26" pos:column="10"/></specifier> <name pos:line="26" pos:column="11">ssize_t<pos:position pos:line="26" pos:column="18"/></name></type> <name pos:line="26" pos:column="19">rlen<pos:position pos:line="26" pos:column="23"/></name> <init pos:line="26" pos:column="24">= <expr><ternary><condition><expr><name pos:line="26" pos:column="26">error_<pos:position pos:line="26" pos:column="32"/></name></expr> ?<pos:position pos:line="26" pos:column="34"/></condition><then pos:line="26" pos:column="34"> <expr><operator pos:line="26" pos:column="35">-<pos:position pos:line="26" pos:column="36"/></operator><literal type="number" pos:line="26" pos:column="36">1<pos:position pos:line="26" pos:column="37"/></literal></expr> <pos:position pos:line="26" pos:column="38"/></then><else pos:line="26" pos:column="38">: <expr><operator pos:line="26" pos:column="40">(<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="41">ssize_t<pos:position pos:line="26" pos:column="48"/></name><operator pos:line="26" pos:column="48">)<pos:position pos:line="26" pos:column="49"/></operator><name><name pos:line="26" pos:column="49">aRequest<pos:position pos:line="26" pos:column="57"/></name><operator pos:line="26" pos:column="57">-&gt;<pos:position pos:line="26" pos:column="62"/></operator><name pos:line="26" pos:column="59">len<pos:position pos:line="26" pos:column="62"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="26" pos:column="63"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="27" pos:column="5">const<pos:position pos:line="27" pos:column="10"/></specifier> <name pos:line="27" pos:column="11">int<pos:position pos:line="27" pos:column="14"/></name></type> <name pos:line="27" pos:column="15">errflag<pos:position pos:line="27" pos:column="22"/></name> <init pos:line="27" pos:column="23">= <expr><ternary><condition><expr><name pos:line="27" pos:column="25">error_<pos:position pos:line="27" pos:column="31"/></name></expr> ?<pos:position pos:line="27" pos:column="33"/></condition><then pos:line="27" pos:column="33"> <expr><name pos:line="27" pos:column="34">DISK_ERROR<pos:position pos:line="27" pos:column="44"/></name></expr> <pos:position pos:line="27" pos:column="45"/></then><else pos:line="27" pos:column="45">:<expr><name pos:line="27" pos:column="46">DISK_OK<pos:position pos:line="27" pos:column="53"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="27" pos:column="54"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="28" pos:column="5">ioRequestor<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">-&gt;<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="18">readCompleted<pos:position pos:line="28" pos:column="31"/></name></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name><name pos:line="28" pos:column="32">aRequest<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="42">buf<pos:position pos:line="28" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="47">rlen<pos:position pos:line="28" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="53">errflag<pos:position pos:line="28" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="62">aRequest<pos:position pos:line="28" pos:column="70"/></name></expr></argument>)<pos:position pos:line="28" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="72"/></expr_stmt>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
