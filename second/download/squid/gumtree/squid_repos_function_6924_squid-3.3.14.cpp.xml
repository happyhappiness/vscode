<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6924_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">boolean<pos:position pos:line="1" pos:column="8"/></name></type>
<name pos:line="2" pos:column="1">alt_match_null_string_p<pos:position pos:line="2" pos:column="24"/></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">unsigned<pos:position pos:line="2" pos:column="33"/></name> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">p<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">unsigned<pos:position pos:line="2" pos:column="51"/></name> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">end<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="63">register_info_type<pos:position pos:line="2" pos:column="81"/></name> <modifier pos:line="2" pos:column="82">*<pos:position pos:line="2" pos:column="83"/></modifier></type><name pos:line="2" pos:column="83">reg_info<pos:position pos:line="2" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="92"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">mcnt<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">unsigned<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">char<pos:position pos:line="5" pos:column="18"/></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">p1<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name pos:line="5" pos:column="25">p<pos:position pos:line="5" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>

    <while pos:line="7" pos:column="5">while <condition pos:line="7" pos:column="11">(<expr><name pos:line="7" pos:column="12">p1<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">&lt;<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="17">end<pos:position pos:line="7" pos:column="20"/></name></expr>)<pos:position pos:line="7" pos:column="21"/></condition> <block pos:line="7" pos:column="22">{
        <comment type="block" pos:line="8" pos:column="9">/* Skip over opcodes that can match nothing, and break when we get
         * to one that can't.  */</comment>

        <switch pos:line="11" pos:column="9">switch <condition pos:line="11" pos:column="16">(<expr><operator pos:line="11" pos:column="17">(<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">re_opcode_t<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">)<pos:position pos:line="11" pos:column="30"/></operator> <operator pos:line="11" pos:column="31">*<pos:position pos:line="11" pos:column="32"/></operator> <name pos:line="11" pos:column="33">p1<pos:position pos:line="11" pos:column="35"/></name></expr>)<pos:position pos:line="11" pos:column="36"/></condition> <block pos:line="11" pos:column="37">{
            <comment type="block" pos:line="12" pos:column="13">/* It's a loop.  */</comment>
        <case pos:line="13" pos:column="9">case <expr><name pos:line="13" pos:column="14">on_failure_jump<pos:position pos:line="13" pos:column="29"/></name></expr>:<pos:position pos:line="13" pos:column="30"/></case>
            <expr_stmt><expr><name pos:line="14" pos:column="13">p1<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">++<pos:position pos:line="14" pos:column="17"/></operator></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">EXTRACT_NUMBER_AND_INCR<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><name pos:line="15" pos:column="37">mcnt<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="43">p1<pos:position pos:line="15" pos:column="45"/></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name pos:line="16" pos:column="13">p1<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">+=<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">mcnt<pos:position pos:line="16" pos:column="23"/></name></expr>;<pos:position pos:line="16" pos:column="24"/></expr_stmt>
            <break pos:line="17" pos:column="13">break;<pos:position pos:line="17" pos:column="19"/></break>

        <default pos:line="19" pos:column="9">default:<pos:position pos:line="19" pos:column="17"/></default>
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><operator pos:line="20" pos:column="17">!<pos:position pos:line="20" pos:column="18"/></operator><call><name pos:line="20" pos:column="18">common_op_match_null_string_p<pos:position pos:line="20" pos:column="47"/></name><argument_list pos:line="20" pos:column="47">(<argument><expr><operator pos:line="20" pos:column="48">&amp;<pos:position pos:line="20" pos:column="53"/></operator><name pos:line="20" pos:column="49">p1<pos:position pos:line="20" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="53">end<pos:position pos:line="20" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="58">reg_info<pos:position pos:line="20" pos:column="66"/></name></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="68"/></condition><then pos:line="20" pos:column="68">
                <block type="pseudo"><return pos:line="21" pos:column="17">return <expr><literal type="boolean" pos:line="21" pos:column="24">false<pos:position pos:line="21" pos:column="29"/></literal></expr>;<pos:position pos:line="21" pos:column="30"/></return></block></then></if>
        }<pos:position pos:line="22" pos:column="10"/></block></switch>
    }<pos:position pos:line="23" pos:column="6"/></block></while>				<comment type="block" pos:line="23" pos:column="33">/* while p1 &lt; end */</comment>

    <return pos:line="25" pos:column="5">return <expr><literal type="boolean" pos:line="25" pos:column="12">true<pos:position pos:line="25" pos:column="16"/></literal></expr>;<pos:position pos:line="25" pos:column="17"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
