<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3619_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">Xaction<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">noteCommConnected<pos:position pos:line="1" pos:column="50"/></name></name><parameter_list pos:line="1" pos:column="50">(<parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">CommConnectCbParams<pos:position pos:line="1" pos:column="76"/></name> <modifier pos:line="1" pos:column="77">&amp;<pos:position pos:line="1" pos:column="82"/></modifier></type><name pos:line="1" pos:column="78">io<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><name pos:line="3" pos:column="5">cs<pos:position pos:line="3" pos:column="7"/></name> <operator pos:line="3" pos:column="8">=<pos:position pos:line="3" pos:column="9"/></operator> <name pos:line="3" pos:column="10">NULL<pos:position pos:line="3" pos:column="14"/></name></expr>;<pos:position pos:line="3" pos:column="15"/></expr_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name><name pos:line="5" pos:column="9">io<pos:position pos:line="5" pos:column="11"/></name><operator pos:line="5" pos:column="11">.<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="12">flag<pos:position pos:line="5" pos:column="16"/></name></name> <operator pos:line="5" pos:column="17">==<pos:position pos:line="5" pos:column="19"/></operator> <name><name pos:line="5" pos:column="20">Comm<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">::<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="26">TIMEOUT<pos:position pos:line="5" pos:column="33"/></name></name></expr>)<pos:position pos:line="5" pos:column="34"/></condition><then pos:line="5" pos:column="34"> <block pos:line="5" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">handleCommTimedout<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">()<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>
        <return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">Must<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><name pos:line="10" pos:column="10">connector<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">!=<pos:position pos:line="10" pos:column="22"/></operator> <name pos:line="10" pos:column="23">NULL<pos:position pos:line="10" pos:column="27"/></name></expr></argument>)<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">connector<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <name pos:line="11" pos:column="17">NULL<pos:position pos:line="11" pos:column="21"/></name></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">io<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">.<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="12">flag<pos:position pos:line="13" pos:column="16"/></name></name> <operator pos:line="13" pos:column="17">!=<pos:position pos:line="13" pos:column="19"/></operator> <name><name pos:line="13" pos:column="20">Comm<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">::<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">OK<pos:position pos:line="13" pos:column="28"/></name></name></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="9">dieOnConnectionFailure<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">()<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt></block></then></if> <comment type="line" pos:line="14" pos:column="35">// throws</comment>

    <typedef pos:line="16" pos:column="5">typedef <type><name><name pos:line="16" pos:column="13">CommCbMemFunT<pos:position pos:line="16" pos:column="26"/></name><argument_list type="generic" pos:line="16" pos:column="26">&lt;<argument><expr><name><name pos:line="16" pos:column="27">Adaptation<pos:position pos:line="16" pos:column="37"/></name><operator pos:line="16" pos:column="37">::<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="39">Icap<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">::<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="45">Xaction<pos:position pos:line="16" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="54">CommTimeoutCbParams<pos:position pos:line="16" pos:column="73"/></name></expr></argument>&gt;<pos:position pos:line="16" pos:column="77"/></argument_list></name></type> <name pos:line="16" pos:column="75">TimeoutDialer<pos:position pos:line="16" pos:column="88"/></name>;<pos:position pos:line="16" pos:column="89"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="17" pos:column="5">AsyncCall<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">::<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="16">Pointer<pos:position pos:line="17" pos:column="23"/></name></name></type> <name pos:line="17" pos:column="24">timeoutCall<pos:position pos:line="17" pos:column="35"/></name> <init pos:line="17" pos:column="36">=  <expr><call><name pos:line="17" pos:column="39">asyncCall<pos:position pos:line="17" pos:column="48"/></name><argument_list pos:line="17" pos:column="48">(<argument><expr><literal type="number" pos:line="17" pos:column="49">93<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="53">5<pos:position pos:line="17" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="56">"Adaptation::Icap::Xaction::noteCommTimedout"<pos:position pos:line="17" pos:column="101"/></literal></expr></argument>,
                                      <argument><expr><call><name pos:line="18" pos:column="39">TimeoutDialer<pos:position pos:line="18" pos:column="52"/></name><argument_list pos:line="18" pos:column="52">(<argument><expr><name pos:line="18" pos:column="53">this<pos:position pos:line="18" pos:column="57"/></name></expr></argument>,<argument><expr><operator pos:line="18" pos:column="58">&amp;<pos:position pos:line="18" pos:column="63"/></operator><name><name pos:line="18" pos:column="59">Adaptation<pos:position pos:line="18" pos:column="69"/></name><operator pos:line="18" pos:column="69">::<pos:position pos:line="18" pos:column="71"/></operator><name pos:line="18" pos:column="71">Icap<pos:position pos:line="18" pos:column="75"/></name><operator pos:line="18" pos:column="75">::<pos:position pos:line="18" pos:column="77"/></operator><name pos:line="18" pos:column="77">Xaction<pos:position pos:line="18" pos:column="84"/></name><operator pos:line="18" pos:column="84">::<pos:position pos:line="18" pos:column="86"/></operator><name pos:line="18" pos:column="86">noteCommTimedout<pos:position pos:line="18" pos:column="102"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="103"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="104"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="105"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">commSetConnTimeout<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><name><name pos:line="19" pos:column="24">io<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">.<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">conn<pos:position pos:line="19" pos:column="31"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="19" pos:column="33">TheConfig<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">.<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="43">connect_timeout<pos:position pos:line="19" pos:column="58"/></name></name><argument_list pos:line="19" pos:column="58">(<argument><expr><call><name pos:line="19" pos:column="59">service<pos:position pos:line="19" pos:column="66"/></name><argument_list pos:line="19" pos:column="66">()<pos:position pos:line="19" pos:column="68"/></argument_list></call><operator pos:line="19" pos:column="68">.<pos:position pos:line="19" pos:column="69"/></operator><call><name pos:line="19" pos:column="69">cfg<pos:position pos:line="19" pos:column="72"/></name><argument_list pos:line="19" pos:column="72">()<pos:position pos:line="19" pos:column="74"/></argument_list></call><operator pos:line="19" pos:column="74">.<pos:position pos:line="19" pos:column="75"/></operator><name pos:line="19" pos:column="75">bypass<pos:position pos:line="19" pos:column="81"/></name></expr></argument>)<pos:position pos:line="19" pos:column="82"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="19" pos:column="84">timeoutCall<pos:position pos:line="19" pos:column="95"/></name></expr></argument>)<pos:position pos:line="19" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="97"/></expr_stmt>

    <typedef pos:line="21" pos:column="5">typedef <type><name><name pos:line="21" pos:column="13">CommCbMemFunT<pos:position pos:line="21" pos:column="26"/></name><argument_list type="generic" pos:line="21" pos:column="26">&lt;<argument><expr><name><name pos:line="21" pos:column="27">Adaptation<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">::<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="39">Icap<pos:position pos:line="21" pos:column="43"/></name><operator pos:line="21" pos:column="43">::<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="45">Xaction<pos:position pos:line="21" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="54">CommCloseCbParams<pos:position pos:line="21" pos:column="71"/></name></expr></argument>&gt;<pos:position pos:line="21" pos:column="75"/></argument_list></name></type> <name pos:line="21" pos:column="73">CloseDialer<pos:position pos:line="21" pos:column="84"/></name>;<pos:position pos:line="21" pos:column="85"/></typedef>
    <expr_stmt><expr><name pos:line="22" pos:column="5">closer<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator>  <call><name pos:line="22" pos:column="15">asyncCall<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><literal type="number" pos:line="22" pos:column="25">93<pos:position pos:line="22" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="29">5<pos:position pos:line="22" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="32">"Adaptation::Icap::Xaction::noteCommClosed"<pos:position pos:line="22" pos:column="75"/></literal></expr></argument>,
                        <argument><expr><call><name pos:line="23" pos:column="25">CloseDialer<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">this<pos:position pos:line="23" pos:column="41"/></name></expr></argument>,<argument><expr><operator pos:line="23" pos:column="42">&amp;<pos:position pos:line="23" pos:column="47"/></operator><name><name pos:line="23" pos:column="43">Adaptation<pos:position pos:line="23" pos:column="53"/></name><operator pos:line="23" pos:column="53">::<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="55">Icap<pos:position pos:line="23" pos:column="59"/></name><operator pos:line="23" pos:column="59">::<pos:position pos:line="23" pos:column="61"/></operator><name pos:line="23" pos:column="61">Xaction<pos:position pos:line="23" pos:column="68"/></name><operator pos:line="23" pos:column="68">::<pos:position pos:line="23" pos:column="70"/></operator><name pos:line="23" pos:column="70">noteCommClosed<pos:position pos:line="23" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="87"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">comm_add_close_handler<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><name><name pos:line="24" pos:column="28">io<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">.<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="31">conn<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">-&gt;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="37">fd<pos:position pos:line="24" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">closer<pos:position pos:line="24" pos:column="47"/></name></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt>

    <comment type="line" pos:line="26" pos:column="5">// If it is a reused connection and the TLS object is built</comment>
    <comment type="line" pos:line="27" pos:column="5">// we should not negotiate new TLS session</comment>
    <decl_stmt><decl><type><specifier pos:line="28" pos:column="5">const<pos:position pos:line="28" pos:column="10"/></specifier> <specifier pos:line="28" pos:column="11">auto<pos:position pos:line="28" pos:column="15"/></specifier> <modifier pos:line="28" pos:column="16">&amp;<pos:position pos:line="28" pos:column="21"/></modifier></type><name pos:line="28" pos:column="17">ssl<pos:position pos:line="28" pos:column="20"/></name> <init pos:line="28" pos:column="21">= <expr><name><name pos:line="28" pos:column="23">fd_table<pos:position pos:line="28" pos:column="31"/></name><index pos:line="28" pos:column="31">[<expr><name><name pos:line="28" pos:column="32">io<pos:position pos:line="28" pos:column="34"/></name><operator pos:line="28" pos:column="34">.<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="35">conn<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">-&gt;<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="41">fd<pos:position pos:line="28" pos:column="43"/></name></name></expr>]<pos:position pos:line="28" pos:column="44"/></index></name><operator pos:line="28" pos:column="44">.<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="45">ssl<pos:position pos:line="28" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="49"/></decl_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">!<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">ssl<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">&amp;&amp;<pos:position pos:line="29" pos:column="24"/></operator> <call><name pos:line="29" pos:column="17">service<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">()<pos:position pos:line="29" pos:column="26"/></argument_list></call><operator pos:line="29" pos:column="26">.<pos:position pos:line="29" pos:column="27"/></operator><call><name pos:line="29" pos:column="27">cfg<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">()<pos:position pos:line="29" pos:column="32"/></argument_list></call><operator pos:line="29" pos:column="32">.<pos:position pos:line="29" pos:column="33"/></operator><name><name pos:line="29" pos:column="33">secure<pos:position pos:line="29" pos:column="39"/></name><operator pos:line="29" pos:column="39">.<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="40">encryptTransport<pos:position pos:line="29" pos:column="56"/></name></name></expr>)<pos:position pos:line="29" pos:column="57"/></condition><then pos:line="29" pos:column="57"> <block pos:line="29" pos:column="58">{
        <decl_stmt><decl><type><name><name pos:line="30" pos:column="9">CbcPointer<pos:position pos:line="30" pos:column="19"/></name><argument_list type="generic" pos:line="30" pos:column="19">&lt;<argument><expr><name><name pos:line="30" pos:column="20">Adaptation<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">::<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="32">Icap<pos:position pos:line="30" pos:column="36"/></name><operator pos:line="30" pos:column="36">::<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="38">Xaction<pos:position pos:line="30" pos:column="45"/></name></name></expr></argument>&gt;<pos:position pos:line="30" pos:column="49"/></argument_list></name></type> <name pos:line="30" pos:column="47">me<pos:position pos:line="30" pos:column="49"/></name><argument_list pos:line="30" pos:column="49">(<argument><expr><name pos:line="30" pos:column="50">this<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></decl>;<pos:position pos:line="30" pos:column="56"/></decl_stmt>
        <expr_stmt><expr><name pos:line="31" pos:column="9">securer<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <call><name pos:line="31" pos:column="19">asyncCall<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">(<argument><expr><literal type="number" pos:line="31" pos:column="29">93<pos:position pos:line="31" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="33">4<pos:position pos:line="31" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="36">"Adaptation::Icap::Xaction::handleSecuredPeer"<pos:position pos:line="31" pos:column="82"/></literal></expr></argument>,
                            <argument><expr><call><name pos:line="32" pos:column="29">MyIcapAnswerDialer<pos:position pos:line="32" pos:column="47"/></name><argument_list pos:line="32" pos:column="47">(<argument><expr><name pos:line="32" pos:column="48">me<pos:position pos:line="32" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="52">&amp;<pos:position pos:line="32" pos:column="57"/></operator><name><name pos:line="32" pos:column="53">Adaptation<pos:position pos:line="32" pos:column="63"/></name><operator pos:line="32" pos:column="63">::<pos:position pos:line="32" pos:column="65"/></operator><name pos:line="32" pos:column="65">Icap<pos:position pos:line="32" pos:column="69"/></name><operator pos:line="32" pos:column="69">::<pos:position pos:line="32" pos:column="71"/></operator><name pos:line="32" pos:column="71">Xaction<pos:position pos:line="32" pos:column="78"/></name><operator pos:line="32" pos:column="78">::<pos:position pos:line="32" pos:column="80"/></operator><name pos:line="32" pos:column="80">handleSecuredPeer<pos:position pos:line="32" pos:column="97"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="98"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="100"/></expr_stmt>

        <expr_stmt><expr><name pos:line="34" pos:column="9">auto<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">*<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">sslConnector<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">=<pos:position pos:line="34" pos:column="29"/></operator> <operator pos:line="34" pos:column="30">new<pos:position pos:line="34" pos:column="33"/></operator> <call><name><name pos:line="34" pos:column="34">Ssl<pos:position pos:line="34" pos:column="37"/></name><operator pos:line="34" pos:column="37">::<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="39">IcapPeerConnector<pos:position pos:line="34" pos:column="56"/></name></name><argument_list pos:line="34" pos:column="56">(<argument><expr><name pos:line="34" pos:column="57">theService<pos:position pos:line="34" pos:column="67"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="69">io<pos:position pos:line="34" pos:column="71"/></name><operator pos:line="34" pos:column="71">.<pos:position pos:line="34" pos:column="72"/></operator><name pos:line="34" pos:column="72">conn<pos:position pos:line="34" pos:column="76"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="78">securer<pos:position pos:line="34" pos:column="85"/></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="87">masterLogEntry<pos:position pos:line="34" pos:column="101"/></name><argument_list pos:line="34" pos:column="101">()<pos:position pos:line="34" pos:column="103"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="34" pos:column="105">TheConfig<pos:position pos:line="34" pos:column="114"/></name><operator pos:line="34" pos:column="114">.<pos:position pos:line="34" pos:column="115"/></operator><name pos:line="34" pos:column="115">connect_timeout<pos:position pos:line="34" pos:column="130"/></name></name><argument_list pos:line="34" pos:column="130">(<argument><expr><call><name pos:line="34" pos:column="131">service<pos:position pos:line="34" pos:column="138"/></name><argument_list pos:line="34" pos:column="138">()<pos:position pos:line="34" pos:column="140"/></argument_list></call><operator pos:line="34" pos:column="140">.<pos:position pos:line="34" pos:column="141"/></operator><call><name pos:line="34" pos:column="141">cfg<pos:position pos:line="34" pos:column="144"/></name><argument_list pos:line="34" pos:column="144">()<pos:position pos:line="34" pos:column="146"/></argument_list></call><operator pos:line="34" pos:column="146">.<pos:position pos:line="34" pos:column="147"/></operator><name pos:line="34" pos:column="147">bypass<pos:position pos:line="34" pos:column="153"/></name></expr></argument>)<pos:position pos:line="34" pos:column="154"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="155"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="156"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="35" pos:column="9">AsyncJob<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">::<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="19">Start<pos:position pos:line="35" pos:column="24"/></name></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">sslConnector<pos:position pos:line="35" pos:column="37"/></name></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="39"/></expr_stmt> <comment type="line" pos:line="35" pos:column="40">// will call our callback</comment>
        <return pos:line="36" pos:column="9">return;<pos:position pos:line="36" pos:column="16"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

<comment type="line" pos:line="39" pos:column="1">// ??    fd_table[io.conn-&gt;fd].noteUse(icapPconnPool);</comment>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">service<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">()<pos:position pos:line="40" pos:column="14"/></argument_list></call><operator pos:line="40" pos:column="14">.<pos:position pos:line="40" pos:column="15"/></operator><call><name pos:line="40" pos:column="15">noteConnectionUse<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">connection<pos:position pos:line="40" pos:column="43"/></name></expr></argument>)<pos:position pos:line="40" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="42" pos:column="5">handleCommConnected<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">()<pos:position pos:line="42" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
