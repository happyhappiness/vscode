<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4286_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ServiceRep<pos:position pos:line="1" pos:column="34"/></name><operator pos:line="1" pos:column="34">::<pos:position pos:line="1" pos:column="36"/></operator><name pos:line="1" pos:column="36">startGettingOptions<pos:position pos:line="1" pos:column="55"/></name></name><parameter_list pos:line="1" pos:column="55">()<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><operator pos:line="3" pos:column="10">!<pos:position pos:line="3" pos:column="11"/></operator><name pos:line="3" pos:column="11">theOptionsFetcher<pos:position pos:line="3" pos:column="28"/></name></expr></argument>)<pos:position pos:line="3" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">93<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">6<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <literal type="string" pos:line="4" pos:column="26">"will get new options "<pos:position pos:line="4" pos:column="49"/></literal> <operator pos:line="4" pos:column="50">&lt;&lt;<pos:position pos:line="4" pos:column="58"/></operator> <call><name pos:line="4" pos:column="53">status<pos:position pos:line="4" pos:column="59"/></name><argument_list pos:line="4" pos:column="59">()<pos:position pos:line="4" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="63"/></expr_stmt>

    <comment type="line" pos:line="6" pos:column="5">// XXX: "this" here is "self"; works until refcounting API changes</comment>
    <expr_stmt><expr><name pos:line="7" pos:column="5">theOptionsFetcher<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">=<pos:position pos:line="7" pos:column="24"/></operator> <call><name pos:line="7" pos:column="25">initiateAdaptation<pos:position pos:line="7" pos:column="43"/></name><argument_list pos:line="7" pos:column="43">(
                            <argument><expr><operator pos:line="8" pos:column="29">new<pos:position pos:line="8" pos:column="32"/></operator> <call><name><name pos:line="8" pos:column="33">Adaptation<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">::<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="45">Icap<pos:position pos:line="8" pos:column="49"/></name><operator pos:line="8" pos:column="49">::<pos:position pos:line="8" pos:column="51"/></operator><name pos:line="8" pos:column="51">OptXactLauncher<pos:position pos:line="8" pos:column="66"/></name></name><argument_list pos:line="8" pos:column="66">(<argument><expr><name pos:line="8" pos:column="67">this<pos:position pos:line="8" pos:column="71"/></name></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="74"/></expr_stmt>
    <comment type="line" pos:line="9" pos:column="5">// TODO: timeout in case Adaptation::Icap::OptXact never calls us back?</comment>
    <comment type="line" pos:line="10" pos:column="5">// Such a timeout should probably be a generic AsyncStart feature.</comment>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
