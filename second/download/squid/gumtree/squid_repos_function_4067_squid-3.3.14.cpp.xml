<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4067_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">finalizeLogInfo<pos:position pos:line="1" pos:column="48"/></name></name><parameter_list pos:line="1" pos:column="48">()<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">HttpRequest<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type> <name pos:line="3" pos:column="19">request_<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><name pos:line="3" pos:column="30">NULL<pos:position pos:line="3" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpRequest<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type> <name pos:line="4" pos:column="19">adapted_request_<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><name pos:line="4" pos:column="38">NULL<pos:position pos:line="4" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">HttpReply<pos:position pos:line="5" pos:column="14"/></name> <modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type> <name pos:line="5" pos:column="17">reply_<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><name pos:line="5" pos:column="26">NULL<pos:position pos:line="5" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">request_<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">=<pos:position pos:line="6" pos:column="15"/></operator> <operator pos:line="6" pos:column="16">(<pos:position pos:line="6" pos:column="17"/></operator><ternary><condition><expr><name><name pos:line="6" pos:column="17">virgin<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">.<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="24">cause<pos:position pos:line="6" pos:column="29"/></name></name></expr>?<pos:position pos:line="6" pos:column="30"/></condition><then pos:line="6" pos:column="30"> <expr><name><name pos:line="6" pos:column="31">virgin<pos:position pos:line="6" pos:column="37"/></name><operator pos:line="6" pos:column="37">.<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="38">cause<pos:position pos:line="6" pos:column="43"/></name></name></expr></then><else pos:line="6" pos:column="43">: <expr><cast type="dynamic" pos:line="6" pos:column="45">dynamic_cast<argument_list type="generic" pos:line="6" pos:column="57">&lt;<argument><expr><name pos:line="6" pos:column="58">HttpRequest<pos:position pos:line="6" pos:column="69"/></name><operator pos:line="6" pos:column="69">*<pos:position pos:line="6" pos:column="70"/></operator></expr></argument>&gt;<pos:position pos:line="6" pos:column="74"/></argument_list><argument_list pos:line="6" pos:column="71">(<argument><expr><name><name pos:line="6" pos:column="72">virgin<pos:position pos:line="6" pos:column="78"/></name><operator pos:line="6" pos:column="78">.<pos:position pos:line="6" pos:column="79"/></operator><name pos:line="6" pos:column="79">header<pos:position pos:line="6" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="86"/></argument_list></cast></expr></else></ternary><operator pos:line="6" pos:column="86">)<pos:position pos:line="6" pos:column="87"/></operator></expr>;<pos:position pos:line="6" pos:column="88"/></expr_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><operator pos:line="7" pos:column="10">(<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">adapted_request_<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">=<pos:position pos:line="7" pos:column="29"/></operator> <cast type="dynamic" pos:line="7" pos:column="30">dynamic_cast<argument_list type="generic" pos:line="7" pos:column="42">&lt;<argument><expr><name pos:line="7" pos:column="43">HttpRequest<pos:position pos:line="7" pos:column="54"/></name><operator pos:line="7" pos:column="54">*<pos:position pos:line="7" pos:column="55"/></operator></expr></argument>&gt;<pos:position pos:line="7" pos:column="59"/></argument_list><argument_list pos:line="7" pos:column="56">(<argument><expr><name><name pos:line="7" pos:column="57">adapted<pos:position pos:line="7" pos:column="64"/></name><operator pos:line="7" pos:column="64">.<pos:position pos:line="7" pos:column="65"/></operator><name pos:line="7" pos:column="65">header<pos:position pos:line="7" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="72"/></argument_list></cast><operator pos:line="7" pos:column="72">)<pos:position pos:line="7" pos:column="73"/></operator></expr>)<pos:position pos:line="7" pos:column="74"/></condition><then pos:line="7" pos:column="74"> <block pos:line="7" pos:column="75">{
        <expr_stmt><expr><name pos:line="8" pos:column="9">adapted_request_<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">=<pos:position pos:line="8" pos:column="27"/></operator> <name pos:line="8" pos:column="28">request_<pos:position pos:line="8" pos:column="36"/></name></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name pos:line="9" pos:column="9">reply_<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <cast type="dynamic" pos:line="9" pos:column="18">dynamic_cast<argument_list type="generic" pos:line="9" pos:column="30">&lt;<argument><expr><name pos:line="9" pos:column="31">HttpReply<pos:position pos:line="9" pos:column="40"/></name><operator pos:line="9" pos:column="40">*<pos:position pos:line="9" pos:column="41"/></operator></expr></argument>&gt;<pos:position pos:line="9" pos:column="45"/></argument_list><argument_list pos:line="9" pos:column="42">(<argument><expr><name><name pos:line="9" pos:column="43">adapted<pos:position pos:line="9" pos:column="50"/></name><operator pos:line="9" pos:column="50">.<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="51">header<pos:position pos:line="9" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></cast></expr>;<pos:position pos:line="9" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">Adaptation<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">::<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">Icap<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">::<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">History<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">::<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="32">Pointer<pos:position pos:line="12" pos:column="39"/></name></name></type> <name pos:line="12" pos:column="40">h<pos:position pos:line="12" pos:column="41"/></name> <init pos:line="12" pos:column="42">= <expr><call><name><name pos:line="12" pos:column="44">request_<pos:position pos:line="12" pos:column="52"/></name><operator pos:line="12" pos:column="52">-&gt;<pos:position pos:line="12" pos:column="57"/></operator><name pos:line="12" pos:column="54">icapHistory<pos:position pos:line="12" pos:column="65"/></name></name><argument_list pos:line="12" pos:column="65">()<pos:position pos:line="12" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="68"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">Must<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">(<argument><expr><name pos:line="13" pos:column="10">h<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">!=<pos:position pos:line="13" pos:column="14"/></operator> <name pos:line="13" pos:column="15">NULL<pos:position pos:line="13" pos:column="19"/></name></expr></argument>)<pos:position pos:line="13" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt> <comment type="line" pos:line="13" pos:column="22">// ICAPXaction::maybeLog calls only if there is a log</comment>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">al<pos:position pos:line="14" pos:column="7"/></name><operator pos:line="14" pos:column="7">.<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">icp<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">opcode<pos:position pos:line="14" pos:column="18"/></name></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">ICP_INVALID<pos:position pos:line="14" pos:column="32"/></name></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">al<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">.<pos:position pos:line="15" pos:column="8"/></operator><name pos:line="15" pos:column="8">url<pos:position pos:line="15" pos:column="11"/></name></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <call><name><name pos:line="15" pos:column="14">h<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">log_uri<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">.<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">termedBuf<pos:position pos:line="15" pos:column="34"/></name></name><argument_list pos:line="15" pos:column="34">()<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="37"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name><name pos:line="16" pos:column="11">Adaptation<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">::<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">Icap<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">::<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">ServiceRep<pos:position pos:line="16" pos:column="39"/></name></name>  <modifier pos:line="16" pos:column="41">&amp;<pos:position pos:line="16" pos:column="46"/></modifier></type><name pos:line="16" pos:column="42">s<pos:position pos:line="16" pos:column="43"/></name> <init pos:line="16" pos:column="44">= <expr><call><name pos:line="16" pos:column="46">service<pos:position pos:line="16" pos:column="53"/></name><argument_list pos:line="16" pos:column="53">()<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="56"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">al<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">.<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">icap<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">.<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">reqMethod<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <call><name><name pos:line="17" pos:column="25">s<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">.<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="27">cfg<pos:position pos:line="17" pos:column="30"/></name></name><argument_list pos:line="17" pos:column="30">()<pos:position pos:line="17" pos:column="32"/></argument_list></call><operator pos:line="17" pos:column="32">.<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="33">method<pos:position pos:line="17" pos:column="39"/></name></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="19" pos:column="5">al<pos:position pos:line="19" pos:column="7"/></name><operator pos:line="19" pos:column="7">.<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">cache<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">.<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">caddr<pos:position pos:line="19" pos:column="19"/></name></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <name><name pos:line="19" pos:column="22">request_<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">client_addr<pos:position pos:line="19" pos:column="43"/></name></name></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="21" pos:column="5">al<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">.<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="8">request<pos:position pos:line="21" pos:column="15"/></name></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <call><name pos:line="21" pos:column="18">HTTPMSGLOCK<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">request_<pos:position pos:line="21" pos:column="38"/></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">al<pos:position pos:line="22" pos:column="7"/></name><operator pos:line="22" pos:column="7">.<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">adapted_request<pos:position pos:line="22" pos:column="23"/></name></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <call><name pos:line="22" pos:column="26">HTTPMSGLOCK<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><name pos:line="22" pos:column="38">adapted_request_<pos:position pos:line="22" pos:column="54"/></name></expr></argument>)<pos:position pos:line="22" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="56"/></expr_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">reply_<pos:position pos:line="24" pos:column="15"/></name></expr>)<pos:position pos:line="24" pos:column="16"/></condition><then pos:line="24" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="9">al<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">.<pos:position pos:line="25" pos:column="12"/></operator><name pos:line="25" pos:column="12">reply<pos:position pos:line="25" pos:column="17"/></name></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <call><name pos:line="25" pos:column="20">HTTPMSGLOCK<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><name pos:line="25" pos:column="32">reply_<pos:position pos:line="25" pos:column="38"/></name></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt></block></then>
    <else pos:line="26" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="9">al<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">.<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">reply<pos:position pos:line="27" pos:column="17"/></name></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="20">NULL<pos:position pos:line="27" pos:column="24"/></name></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt></block></else></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><call><name><name pos:line="29" pos:column="9">h<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">rfc931<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">.<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">size<pos:position pos:line="29" pos:column="23"/></name></name><argument_list pos:line="29" pos:column="23">()<pos:position pos:line="29" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="26"/></condition><then pos:line="29" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="9">al<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">.<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">cache<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">.<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">rfc931<pos:position pos:line="30" pos:column="24"/></name></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <call><name><name pos:line="30" pos:column="27">h<pos:position pos:line="30" pos:column="28"/></name><operator pos:line="30" pos:column="28">-&gt;<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="30">rfc931<pos:position pos:line="30" pos:column="36"/></name><operator pos:line="30" pos:column="36">.<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="37">termedBuf<pos:position pos:line="30" pos:column="46"/></name></name><argument_list pos:line="30" pos:column="46">()<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt></block></then></if>

<cpp:if pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">if<pos:position pos:line="32" pos:column="4"/></cpp:directive> <expr><name pos:line="32" pos:column="5">USE_SSL<pos:position pos:line="32" pos:column="12"/></name></expr></cpp:if>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><call><name><name pos:line="33" pos:column="9">h<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">ssluser<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">.<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">size<pos:position pos:line="33" pos:column="24"/></name></name><argument_list pos:line="33" pos:column="24">()<pos:position pos:line="33" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="27"/></condition><then pos:line="33" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="9">al<pos:position pos:line="34" pos:column="11"/></name><operator pos:line="34" pos:column="11">.<pos:position pos:line="34" pos:column="12"/></operator><name pos:line="34" pos:column="12">cache<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">.<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">ssluser<pos:position pos:line="34" pos:column="25"/></name></name> <operator pos:line="34" pos:column="26">=<pos:position pos:line="34" pos:column="27"/></operator> <call><name><name pos:line="34" pos:column="28">h<pos:position pos:line="34" pos:column="29"/></name><operator pos:line="34" pos:column="29">-&gt;<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="31">ssluser<pos:position pos:line="34" pos:column="38"/></name><operator pos:line="34" pos:column="38">.<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="39">termedBuf<pos:position pos:line="34" pos:column="48"/></name></name><argument_list pos:line="34" pos:column="48">()<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="51"/></expr_stmt></block></then></if>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">al<pos:position pos:line="36" pos:column="7"/></name><operator pos:line="36" pos:column="7">.<pos:position pos:line="36" pos:column="8"/></operator><name pos:line="36" pos:column="8">cache<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">.<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">code<pos:position pos:line="36" pos:column="18"/></name></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <name><name pos:line="36" pos:column="21">h<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">-&gt;<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="24">logType<pos:position pos:line="36" pos:column="31"/></name></name></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">al<pos:position pos:line="37" pos:column="7"/></name><operator pos:line="37" pos:column="7">.<pos:position pos:line="37" pos:column="8"/></operator><name pos:line="37" pos:column="8">cache<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">.<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">requestSize<pos:position pos:line="37" pos:column="25"/></name></name> <operator pos:line="37" pos:column="26">=<pos:position pos:line="37" pos:column="27"/></operator> <name><name pos:line="37" pos:column="28">h<pos:position pos:line="37" pos:column="29"/></name><operator pos:line="37" pos:column="29">-&gt;<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="31">req_sz<pos:position pos:line="37" pos:column="37"/></name></name></expr>;<pos:position pos:line="37" pos:column="38"/></expr_stmt>

    <comment type="line" pos:line="39" pos:column="5">// leave al.icap.bodyBytesRead negative if no body</comment>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">replyHttpHeaderSize<pos:position pos:line="40" pos:column="28"/></name> <operator pos:line="40" pos:column="29">&gt;=<pos:position pos:line="40" pos:column="34"/></operator> <literal type="number" pos:line="40" pos:column="32">0<pos:position pos:line="40" pos:column="33"/></literal> <operator pos:line="40" pos:column="34">||<pos:position pos:line="40" pos:column="36"/></operator> <name pos:line="40" pos:column="37">replyHttpBodySize<pos:position pos:line="40" pos:column="54"/></name> <operator pos:line="40" pos:column="55">&gt;=<pos:position pos:line="40" pos:column="60"/></operator> <literal type="number" pos:line="40" pos:column="58">0<pos:position pos:line="40" pos:column="59"/></literal></expr>)<pos:position pos:line="40" pos:column="60"/></condition><then pos:line="40" pos:column="60"> <block pos:line="40" pos:column="61">{
        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">const<pos:position pos:line="41" pos:column="14"/></specifier> <name pos:line="41" pos:column="15">int64_t<pos:position pos:line="41" pos:column="22"/></name></type> <name pos:line="41" pos:column="23">zero<pos:position pos:line="41" pos:column="27"/></name> <init pos:line="41" pos:column="28">= <expr><literal type="number" pos:line="41" pos:column="30">0<pos:position pos:line="41" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="41" pos:column="32"/></decl_stmt> <comment type="line" pos:line="41" pos:column="33">// to make max() argument types the same</comment>
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">al<pos:position pos:line="42" pos:column="11"/></name><operator pos:line="42" pos:column="11">.<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="12">icap<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">.<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="17">bodyBytesRead<pos:position pos:line="42" pos:column="30"/></name></name> <operator pos:line="42" pos:column="31">=<pos:position pos:line="42" pos:column="32"/></operator>
            <call><name pos:line="43" pos:column="13">max<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">zero<pos:position pos:line="43" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="23">replyHttpHeaderSize<pos:position pos:line="43" pos:column="42"/></name></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call> <operator pos:line="43" pos:column="44">+<pos:position pos:line="43" pos:column="45"/></operator> <call><name pos:line="43" pos:column="46">max<pos:position pos:line="43" pos:column="49"/></name><argument_list pos:line="43" pos:column="49">(<argument><expr><name pos:line="43" pos:column="50">zero<pos:position pos:line="43" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="56">replyHttpBodySize<pos:position pos:line="43" pos:column="73"/></name></expr></argument>)<pos:position pos:line="43" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="75"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">reply_<pos:position pos:line="46" pos:column="15"/></name></expr>)<pos:position pos:line="46" pos:column="16"/></condition><then pos:line="46" pos:column="16"> <block pos:line="46" pos:column="17">{
        <expr_stmt><expr><name><name pos:line="47" pos:column="9">al<pos:position pos:line="47" pos:column="11"/></name><operator pos:line="47" pos:column="11">.<pos:position pos:line="47" pos:column="12"/></operator><name pos:line="47" pos:column="12">http<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">.<pos:position pos:line="47" pos:column="17"/></operator><name pos:line="47" pos:column="17">code<pos:position pos:line="47" pos:column="21"/></name></name> <operator pos:line="47" pos:column="22">=<pos:position pos:line="47" pos:column="23"/></operator> <name><name pos:line="47" pos:column="24">reply_<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">-&gt;<pos:position pos:line="47" pos:column="35"/></operator><name pos:line="47" pos:column="32">sline<pos:position pos:line="47" pos:column="37"/></name><operator pos:line="47" pos:column="37">.<pos:position pos:line="47" pos:column="38"/></operator><name pos:line="47" pos:column="38">status<pos:position pos:line="47" pos:column="44"/></name></name></expr>;<pos:position pos:line="47" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="48" pos:column="9">al<pos:position pos:line="48" pos:column="11"/></name><operator pos:line="48" pos:column="11">.<pos:position pos:line="48" pos:column="12"/></operator><name pos:line="48" pos:column="12">http<pos:position pos:line="48" pos:column="16"/></name><operator pos:line="48" pos:column="16">.<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="17">content_type<pos:position pos:line="48" pos:column="29"/></name></name> <operator pos:line="48" pos:column="30">=<pos:position pos:line="48" pos:column="31"/></operator> <call><name><name pos:line="48" pos:column="32">reply_<pos:position pos:line="48" pos:column="38"/></name><operator pos:line="48" pos:column="38">-&gt;<pos:position pos:line="48" pos:column="43"/></operator><name pos:line="48" pos:column="40">content_type<pos:position pos:line="48" pos:column="52"/></name><operator pos:line="48" pos:column="52">.<pos:position pos:line="48" pos:column="53"/></operator><name pos:line="48" pos:column="53">termedBuf<pos:position pos:line="48" pos:column="62"/></name></name><argument_list pos:line="48" pos:column="62">()<pos:position pos:line="48" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="65"/></expr_stmt>
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">replyHttpBodySize<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">&gt;=<pos:position pos:line="49" pos:column="36"/></operator> <literal type="number" pos:line="49" pos:column="34">0<pos:position pos:line="49" pos:column="35"/></literal></expr>)<pos:position pos:line="49" pos:column="36"/></condition><then pos:line="49" pos:column="36"> <block pos:line="49" pos:column="37">{
            <expr_stmt><expr><name><name pos:line="50" pos:column="13">al<pos:position pos:line="50" pos:column="15"/></name><operator pos:line="50" pos:column="15">.<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="16">cache<pos:position pos:line="50" pos:column="21"/></name><operator pos:line="50" pos:column="21">.<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">replySize<pos:position pos:line="50" pos:column="31"/></name></name> <operator pos:line="50" pos:column="32">=<pos:position pos:line="50" pos:column="33"/></operator> <name pos:line="50" pos:column="34">replyHttpBodySize<pos:position pos:line="50" pos:column="51"/></name> <operator pos:line="50" pos:column="52">+<pos:position pos:line="50" pos:column="53"/></operator> <name><name pos:line="50" pos:column="54">reply_<pos:position pos:line="50" pos:column="60"/></name><operator pos:line="50" pos:column="60">-&gt;<pos:position pos:line="50" pos:column="65"/></operator><name pos:line="50" pos:column="62">hdr_sz<pos:position pos:line="50" pos:column="68"/></name></name></expr>;<pos:position pos:line="50" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="51" pos:column="13">al<pos:position pos:line="51" pos:column="15"/></name><operator pos:line="51" pos:column="15">.<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="16">cache<pos:position pos:line="51" pos:column="21"/></name><operator pos:line="51" pos:column="21">.<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">highOffset<pos:position pos:line="51" pos:column="32"/></name></name> <operator pos:line="51" pos:column="33">=<pos:position pos:line="51" pos:column="34"/></operator> <name pos:line="51" pos:column="35">replyHttpBodySize<pos:position pos:line="51" pos:column="52"/></name></expr>;<pos:position pos:line="51" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="53" pos:column="9">//don't set al.cache.objectSize because it hasn't exist yet</comment>

        <decl_stmt><decl><type><name pos:line="55" pos:column="9">Packer<pos:position pos:line="55" pos:column="15"/></name></type> <name pos:line="55" pos:column="16">p<pos:position pos:line="55" pos:column="17"/></name></decl>;<pos:position pos:line="55" pos:column="18"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="56" pos:column="9">MemBuf<pos:position pos:line="56" pos:column="15"/></name></type> <name pos:line="56" pos:column="16">mb<pos:position pos:line="56" pos:column="18"/></name></decl>;<pos:position pos:line="56" pos:column="19"/></decl_stmt>

        <expr_stmt><expr><call><name><name pos:line="58" pos:column="9">mb<pos:position pos:line="58" pos:column="11"/></name><operator pos:line="58" pos:column="11">.<pos:position pos:line="58" pos:column="12"/></operator><name pos:line="58" pos:column="12">init<pos:position pos:line="58" pos:column="16"/></name></name><argument_list pos:line="58" pos:column="16">()<pos:position pos:line="58" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">packerToMemInit<pos:position pos:line="59" pos:column="24"/></name><argument_list pos:line="59" pos:column="24">(<argument><expr><operator pos:line="59" pos:column="25">&amp;<pos:position pos:line="59" pos:column="30"/></operator><name pos:line="59" pos:column="26">p<pos:position pos:line="59" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="29">&amp;<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="30">mb<pos:position pos:line="59" pos:column="32"/></name></expr></argument>)<pos:position pos:line="59" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="34"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="61" pos:column="9">reply_<pos:position pos:line="61" pos:column="15"/></name><operator pos:line="61" pos:column="15">-&gt;<pos:position pos:line="61" pos:column="20"/></operator><name pos:line="61" pos:column="17">header<pos:position pos:line="61" pos:column="23"/></name><operator pos:line="61" pos:column="23">.<pos:position pos:line="61" pos:column="24"/></operator><name pos:line="61" pos:column="24">packInto<pos:position pos:line="61" pos:column="32"/></name></name><argument_list pos:line="61" pos:column="32">(<argument><expr><operator pos:line="61" pos:column="33">&amp;<pos:position pos:line="61" pos:column="38"/></operator><name pos:line="61" pos:column="34">p<pos:position pos:line="61" pos:column="35"/></name></expr></argument>)<pos:position pos:line="61" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="62" pos:column="9">al<pos:position pos:line="62" pos:column="11"/></name><operator pos:line="62" pos:column="11">.<pos:position pos:line="62" pos:column="12"/></operator><name pos:line="62" pos:column="12">headers<pos:position pos:line="62" pos:column="19"/></name><operator pos:line="62" pos:column="19">.<pos:position pos:line="62" pos:column="20"/></operator><name pos:line="62" pos:column="20">reply<pos:position pos:line="62" pos:column="25"/></name></name> <operator pos:line="62" pos:column="26">=<pos:position pos:line="62" pos:column="27"/></operator> <call><name pos:line="62" pos:column="28">xstrdup<pos:position pos:line="62" pos:column="35"/></name><argument_list pos:line="62" pos:column="35">(<argument><expr><name><name pos:line="62" pos:column="36">mb<pos:position pos:line="62" pos:column="38"/></name><operator pos:line="62" pos:column="38">.<pos:position pos:line="62" pos:column="39"/></operator><name pos:line="62" pos:column="39">buf<pos:position pos:line="62" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="44"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="64" pos:column="9">packerClean<pos:position pos:line="64" pos:column="20"/></name><argument_list pos:line="64" pos:column="20">(<argument><expr><operator pos:line="64" pos:column="21">&amp;<pos:position pos:line="64" pos:column="26"/></operator><name pos:line="64" pos:column="22">p<pos:position pos:line="64" pos:column="23"/></name></expr></argument>)<pos:position pos:line="64" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="65" pos:column="9">mb<pos:position pos:line="65" pos:column="11"/></name><operator pos:line="65" pos:column="11">.<pos:position pos:line="65" pos:column="12"/></operator><name pos:line="65" pos:column="12">clean<pos:position pos:line="65" pos:column="17"/></name></name><argument_list pos:line="65" pos:column="17">()<pos:position pos:line="65" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">prepareLogWithRequestDetails<pos:position pos:line="67" pos:column="33"/></name><argument_list pos:line="67" pos:column="33">(<argument><expr><name pos:line="67" pos:column="34">adapted_request_<pos:position pos:line="67" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="52">alep<pos:position pos:line="67" pos:column="56"/></name></expr></argument>)<pos:position pos:line="67" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="68" pos:column="5">Xaction<pos:position pos:line="68" pos:column="12"/></name><operator pos:line="68" pos:column="12">::<pos:position pos:line="68" pos:column="14"/></operator><name pos:line="68" pos:column="14">finalizeLogInfo<pos:position pos:line="68" pos:column="29"/></name></name><argument_list pos:line="68" pos:column="29">()<pos:position pos:line="68" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="32"/></expr_stmt>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
