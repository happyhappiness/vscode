<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4960_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">authenticateDigestHandleReply<pos:position pos:line="2" pos:column="30"/></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><name pos:line="2" pos:column="31">void<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">data<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">reply<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DigestAuthenticateStateData<pos:position pos:line="4" pos:column="32"/></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">replyData<pos:position pos:line="4" pos:column="43"/></name> <init pos:line="4" pos:column="44">= <expr><cast type="static" pos:line="4" pos:column="46">static_cast <argument_list type="generic" pos:line="4" pos:column="58">&lt; <argument><expr><name pos:line="4" pos:column="60">DigestAuthenticateStateData<pos:position pos:line="4" pos:column="87"/></name> <operator pos:line="4" pos:column="88">*<pos:position pos:line="4" pos:column="89"/></operator></expr></argument> &gt;<pos:position pos:line="4" pos:column="94"/></argument_list><argument_list pos:line="4" pos:column="91">(<argument><expr><name pos:line="4" pos:column="92">data<pos:position pos:line="4" pos:column="96"/></name></expr></argument>)<pos:position pos:line="4" pos:column="97"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="98"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">AuthUserRequest<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">auth_user_request<pos:position pos:line="5" pos:column="39"/></name></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">AuthDigestUserRequest<pos:position pos:line="6" pos:column="26"/></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier></type><name pos:line="6" pos:column="28">digest_request<pos:position pos:line="6" pos:column="42"/></name></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">digest_user_h<pos:position pos:line="7" pos:column="18"/></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">digest_user<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">t<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name pos:line="8" pos:column="15">NULL<pos:position pos:line="8" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">void<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">cbdata<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">29<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">9<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="19">"authenticateDigestHandleReply: {"<pos:position pos:line="10" pos:column="53"/></literal> <operator pos:line="10" pos:column="54">&lt;&lt;<pos:position pos:line="10" pos:column="62"/></operator> <operator pos:line="10" pos:column="57">(<pos:position pos:line="10" pos:column="58"/></operator><ternary><condition><expr><name pos:line="10" pos:column="58">reply<pos:position pos:line="10" pos:column="63"/></name></expr> ?<pos:position pos:line="10" pos:column="65"/></condition><then pos:line="10" pos:column="65"> <expr><name pos:line="10" pos:column="66">reply<pos:position pos:line="10" pos:column="71"/></name></expr> <pos:position pos:line="10" pos:column="72"/></then><else pos:line="10" pos:column="72">: <expr><literal type="string" pos:line="10" pos:column="74">"&lt;NULL&gt;"<pos:position pos:line="10" pos:column="88"/></literal></expr></else></ternary><operator pos:line="10" pos:column="82">)<pos:position pos:line="10" pos:column="83"/></operator> <operator pos:line="10" pos:column="84">&lt;&lt;<pos:position pos:line="10" pos:column="92"/></operator> <literal type="string" pos:line="10" pos:column="87">"}"<pos:position pos:line="10" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="92"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">reply<pos:position pos:line="12" pos:column="14"/></name></expr>)<pos:position pos:line="12" pos:column="15"/></condition><then pos:line="12" pos:column="15"> <block pos:line="12" pos:column="16">{
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">(<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">t<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <call><name pos:line="13" pos:column="18">strchr<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">reply<pos:position pos:line="13" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="32">' '<pos:position pos:line="13" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call><operator pos:line="13" pos:column="36">)<pos:position pos:line="13" pos:column="37"/></operator></expr>)<pos:position pos:line="13" pos:column="38"/></condition><then pos:line="13" pos:column="38">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="14" pos:column="13">*<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">t<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">++<pos:position pos:line="14" pos:column="17"/></operator> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <literal type="char" pos:line="14" pos:column="20">'\0'<pos:position pos:line="14" pos:column="24"/></literal></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt></block></then></if>

        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">*<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">reply<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">==<pos:position pos:line="16" pos:column="22"/></operator> <literal type="char" pos:line="16" pos:column="23">'\0'<pos:position pos:line="16" pos:column="27"/></literal> <operator pos:line="16" pos:column="28">||<pos:position pos:line="16" pos:column="30"/></operator> <operator pos:line="16" pos:column="31">*<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="32">reply<pos:position pos:line="16" pos:column="37"/></name> <operator pos:line="16" pos:column="38">==<pos:position pos:line="16" pos:column="40"/></operator> <literal type="char" pos:line="16" pos:column="41">'\n'<pos:position pos:line="16" pos:column="45"/></literal></expr>)<pos:position pos:line="16" pos:column="46"/></condition><then pos:line="16" pos:column="46">
            <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="13">reply<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="21">NULL<pos:position pos:line="17" pos:column="25"/></name></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt></block></then></if>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">assert<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name><name pos:line="20" pos:column="12">replyData<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">-&gt;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="23">auth_user_request<pos:position pos:line="20" pos:column="40"/></name></name> <operator pos:line="20" pos:column="41">!=<pos:position pos:line="20" pos:column="43"/></operator> <name pos:line="20" pos:column="44">NULL<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">auth_user_request<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <name><name pos:line="21" pos:column="25">replyData<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-&gt;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="36">auth_user_request<pos:position pos:line="21" pos:column="53"/></name></name></expr>;<pos:position pos:line="21" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">digest_request<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <cast type="dynamic" pos:line="22" pos:column="22">dynamic_cast <argument_list type="generic" pos:line="22" pos:column="35">&lt; <argument><expr><name pos:line="22" pos:column="37">AuthDigestUserRequest<pos:position pos:line="22" pos:column="58"/></name> <operator pos:line="22" pos:column="59">*<pos:position pos:line="22" pos:column="60"/></operator></expr></argument> &gt;<pos:position pos:line="22" pos:column="65"/></argument_list><argument_list pos:line="22" pos:column="62">(<argument><expr><name pos:line="22" pos:column="63">auth_user_request<pos:position pos:line="22" pos:column="80"/></name></expr></argument>)<pos:position pos:line="22" pos:column="81"/></argument_list></cast></expr>;<pos:position pos:line="22" pos:column="82"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">assert<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name pos:line="23" pos:column="12">digest_request<pos:position pos:line="23" pos:column="26"/></name></expr></argument>)<pos:position pos:line="23" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name pos:line="25" pos:column="5">digest_user<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <cast type="dynamic" pos:line="25" pos:column="19">dynamic_cast <argument_list type="generic" pos:line="25" pos:column="32">&lt; <argument><expr><name pos:line="25" pos:column="34">digest_user_h<pos:position pos:line="25" pos:column="47"/></name> <operator pos:line="25" pos:column="48">*<pos:position pos:line="25" pos:column="49"/></operator></expr></argument> &gt;<pos:position pos:line="25" pos:column="54"/></argument_list><argument_list pos:line="25" pos:column="51">(<argument><expr><call><name><name pos:line="25" pos:column="52">auth_user_request<pos:position pos:line="25" pos:column="69"/></name><operator pos:line="25" pos:column="69">-&gt;<pos:position pos:line="25" pos:column="74"/></operator><name pos:line="25" pos:column="71">user<pos:position pos:line="25" pos:column="75"/></name></name><argument_list pos:line="25" pos:column="75">()<pos:position pos:line="25" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="78"/></argument_list></cast></expr>;<pos:position pos:line="25" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">assert<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name pos:line="26" pos:column="12">digest_user<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">!=<pos:position pos:line="26" pos:column="26"/></operator> <name pos:line="26" pos:column="27">NULL<pos:position pos:line="26" pos:column="31"/></name></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">reply<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">&amp;&amp;<pos:position pos:line="28" pos:column="25"/></operator> <operator pos:line="28" pos:column="18">(<pos:position pos:line="28" pos:column="19"/></operator><call><name pos:line="28" pos:column="19">strncasecmp<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">reply<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="38">"ERR"<pos:position pos:line="28" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="45">3<pos:position pos:line="28" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="47"/></argument_list></call> <operator pos:line="28" pos:column="48">==<pos:position pos:line="28" pos:column="50"/></operator> <literal type="number" pos:line="28" pos:column="51">0<pos:position pos:line="28" pos:column="52"/></literal><operator pos:line="28" pos:column="52">)<pos:position pos:line="28" pos:column="53"/></operator></expr>)<pos:position pos:line="28" pos:column="54"/></condition><then pos:line="28" pos:column="54"> <block pos:line="28" pos:column="55">{
        <expr_stmt><expr><call><name><name pos:line="29" pos:column="9">digest_request<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">-&gt;<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="25">credentials<pos:position pos:line="29" pos:column="36"/></name></name><argument_list pos:line="29" pos:column="36">(<argument><expr><name><name pos:line="29" pos:column="37">AuthDigestUserRequest<pos:position pos:line="29" pos:column="58"/></name><operator pos:line="29" pos:column="58">::<pos:position pos:line="29" pos:column="60"/></operator><name pos:line="29" pos:column="60">Failed<pos:position pos:line="29" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">digest_request<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">-&gt;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="25">flags<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">.<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="31">invalid_password<pos:position pos:line="30" pos:column="47"/></name></name> <operator pos:line="30" pos:column="48">=<pos:position pos:line="30" pos:column="49"/></operator> <literal type="number" pos:line="30" pos:column="50">1<pos:position pos:line="30" pos:column="51"/></literal></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>

        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">t<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">&amp;&amp;<pos:position pos:line="32" pos:column="25"/></operator> <operator pos:line="32" pos:column="18">*<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="19">t<pos:position pos:line="32" pos:column="20"/></name></expr>)<pos:position pos:line="32" pos:column="21"/></condition><then pos:line="32" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="33" pos:column="13">digest_request<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">-&gt;<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="29">setDenyMessage<pos:position pos:line="33" pos:column="43"/></name></name><argument_list pos:line="33" pos:column="43">(<argument><expr><name pos:line="33" pos:column="44">t<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></then> <elseif pos:line="34" pos:column="7">else <if pos:line="34" pos:column="12">if <condition pos:line="34" pos:column="15">(<expr><name pos:line="34" pos:column="16">reply<pos:position pos:line="34" pos:column="21"/></name></expr>)<pos:position pos:line="34" pos:column="22"/></condition><then pos:line="34" pos:column="22"> <block pos:line="34" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">CvtBin<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">reply<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="23">digest_user<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">-&gt;<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="36">HA1<pos:position pos:line="35" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">digest_user<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">-&gt;<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="22">HA1created<pos:position pos:line="36" pos:column="32"/></name></name> <operator pos:line="36" pos:column="33">=<pos:position pos:line="36" pos:column="34"/></operator> <literal type="number" pos:line="36" pos:column="35">1<pos:position pos:line="36" pos:column="36"/></literal></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><call><name pos:line="39" pos:column="9">cbdataReferenceValidDone<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name><name pos:line="39" pos:column="34">replyData<pos:position pos:line="39" pos:column="43"/></name><operator pos:line="39" pos:column="43">-&gt;<pos:position pos:line="39" pos:column="48"/></operator><name pos:line="39" pos:column="45">data<pos:position pos:line="39" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="51">&amp;<pos:position pos:line="39" pos:column="56"/></operator><name pos:line="39" pos:column="52">cbdata<pos:position pos:line="39" pos:column="58"/></name></expr></argument>)<pos:position pos:line="39" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="60"/></condition><then pos:line="39" pos:column="60">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="40" pos:column="9">replyData<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">-&gt;<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="20">handler<pos:position pos:line="40" pos:column="27"/></name></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">cbdata<pos:position pos:line="40" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="36">NULL<pos:position pos:line="40" pos:column="40"/></name></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="42" pos:column="5">//we know replyData-&gt;auth_user_request != NULL, or we'd have asserted</comment>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">AUTHUSERREQUESTUNLOCK<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">(<argument><expr><name><name pos:line="43" pos:column="27">replyData<pos:position pos:line="43" pos:column="36"/></name><operator pos:line="43" pos:column="36">-&gt;<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="38">auth_user_request<pos:position pos:line="43" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="57">"replyData"<pos:position pos:line="43" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="70"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="45" pos:column="5">cbdataFree<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">replyData<pos:position pos:line="45" pos:column="25"/></name></expr></argument>)<pos:position pos:line="45" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="27"/></expr_stmt>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
