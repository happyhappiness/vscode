<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3657_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHdrRangeSpec<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">parseInit<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">field<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">int<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">flen<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">p<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">flen<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">&lt;<pos:position pos:line="6" pos:column="18"/></operator> <literal type="number" pos:line="6" pos:column="16">2<pos:position pos:line="6" pos:column="17"/></literal></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><literal type="boolean" pos:line="7" pos:column="16">false<pos:position pos:line="7" pos:column="21"/></literal></expr>;<pos:position pos:line="7" pos:column="22"/></return></block></then></if>

    <comment type="block" pos:line="9" pos:column="5">/* is it a suffix-byte-range-spec ? */</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">*<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">field<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <literal type="char" pos:line="10" pos:column="19">'-'<pos:position pos:line="10" pos:column="22"/></literal></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23"> <block pos:line="10" pos:column="24">{
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><call><name pos:line="11" pos:column="14">httpHeaderParseOffset<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><name pos:line="11" pos:column="36">field<pos:position pos:line="11" pos:column="41"/></name> <operator pos:line="11" pos:column="42">+<pos:position pos:line="11" pos:column="43"/></operator> <literal type="number" pos:line="11" pos:column="44">1<pos:position pos:line="11" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="47">&amp;<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="48">length<pos:position pos:line="11" pos:column="54"/></name></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></call> <operator pos:line="11" pos:column="56">||<pos:position pos:line="11" pos:column="58"/></operator> <operator pos:line="11" pos:column="59">!<pos:position pos:line="11" pos:column="60"/></operator><call><name pos:line="11" pos:column="60">known_spec<pos:position pos:line="11" pos:column="70"/></name><argument_list pos:line="11" pos:column="70">(<argument><expr><name pos:line="11" pos:column="71">length<pos:position pos:line="11" pos:column="77"/></name></expr></argument>)<pos:position pos:line="11" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="79"/></condition><then pos:line="11" pos:column="79">
            <block type="pseudo"><return pos:line="12" pos:column="13">return <expr><literal type="boolean" pos:line="12" pos:column="20">false<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <elseif pos:line="13" pos:column="7">else
        <comment type="block" pos:line="14" pos:column="9">/* must have a '-' somewhere in _this_ field */</comment>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><operator pos:line="15" pos:column="14">(<pos:position pos:line="15" pos:column="15"/></operator><operator pos:line="15" pos:column="15">(<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">p<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <call><name pos:line="15" pos:column="20">strchr<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">field<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="34">'-'<pos:position pos:line="15" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call><operator pos:line="15" pos:column="38">)<pos:position pos:line="15" pos:column="39"/></operator> <operator pos:line="15" pos:column="40">&amp;&amp;<pos:position pos:line="15" pos:column="50"/></operator> <operator pos:line="15" pos:column="43">(<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="44">p<pos:position pos:line="15" pos:column="45"/></name> <operator pos:line="15" pos:column="46">-<pos:position pos:line="15" pos:column="47"/></operator> <name pos:line="15" pos:column="48">field<pos:position pos:line="15" pos:column="53"/></name> <operator pos:line="15" pos:column="54">&lt;<pos:position pos:line="15" pos:column="58"/></operator> <name pos:line="15" pos:column="56">flen<pos:position pos:line="15" pos:column="60"/></name><operator pos:line="15" pos:column="60">)<pos:position pos:line="15" pos:column="61"/></operator><operator pos:line="15" pos:column="61">)<pos:position pos:line="15" pos:column="62"/></operator></expr>)<pos:position pos:line="15" pos:column="63"/></condition><then pos:line="15" pos:column="63"> <block pos:line="15" pos:column="64">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">debugs<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><literal type="number" pos:line="16" pos:column="20">64<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="24">2<pos:position pos:line="16" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="27">"invalid (missing '-') range-spec near: '"<pos:position pos:line="16" pos:column="69"/></literal> <operator pos:line="16" pos:column="70">&lt;&lt;<pos:position pos:line="16" pos:column="78"/></operator> <name pos:line="16" pos:column="73">field<pos:position pos:line="16" pos:column="78"/></name> <operator pos:line="16" pos:column="79">&lt;&lt;<pos:position pos:line="16" pos:column="87"/></operator> <literal type="string" pos:line="16" pos:column="82">"'"<pos:position pos:line="16" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="87"/></expr_stmt>
            <return pos:line="17" pos:column="13">return <expr><literal type="boolean" pos:line="17" pos:column="20">false<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></return>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if></elseif> <else pos:line="18" pos:column="11">else <block pos:line="18" pos:column="16">{
            <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><operator pos:line="19" pos:column="17">!<pos:position pos:line="19" pos:column="18"/></operator><call><name pos:line="19" pos:column="18">httpHeaderParseOffset<pos:position pos:line="19" pos:column="39"/></name><argument_list pos:line="19" pos:column="39">(<argument><expr><name pos:line="19" pos:column="40">field<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="47">&amp;<pos:position pos:line="19" pos:column="52"/></operator><name pos:line="19" pos:column="48">offset<pos:position pos:line="19" pos:column="54"/></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call> <operator pos:line="19" pos:column="56">||<pos:position pos:line="19" pos:column="58"/></operator> <operator pos:line="19" pos:column="59">!<pos:position pos:line="19" pos:column="60"/></operator><call><name pos:line="19" pos:column="60">known_spec<pos:position pos:line="19" pos:column="70"/></name><argument_list pos:line="19" pos:column="70">(<argument><expr><name pos:line="19" pos:column="71">offset<pos:position pos:line="19" pos:column="77"/></name></expr></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="79"/></condition><then pos:line="19" pos:column="79">
                <block type="pseudo"><return pos:line="20" pos:column="17">return <expr><literal type="boolean" pos:line="20" pos:column="24">false<pos:position pos:line="20" pos:column="29"/></literal></expr>;<pos:position pos:line="20" pos:column="30"/></return></block></then></if>

            <expr_stmt><expr><operator pos:line="22" pos:column="13">++<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">p<pos:position pos:line="22" pos:column="16"/></name></expr>;<pos:position pos:line="22" pos:column="17"/></expr_stmt>

            <comment type="block" pos:line="24" pos:column="13">/* do we have last-pos ? */</comment>
            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><name pos:line="25" pos:column="17">p<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">-<pos:position pos:line="25" pos:column="20"/></operator> <name pos:line="25" pos:column="21">field<pos:position pos:line="25" pos:column="26"/></name> <operator pos:line="25" pos:column="27">&lt;<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="29">flen<pos:position pos:line="25" pos:column="33"/></name></expr>)<pos:position pos:line="25" pos:column="34"/></condition><then pos:line="25" pos:column="34"> <block pos:line="25" pos:column="35">{
                <decl_stmt><decl><type><name pos:line="26" pos:column="17">int64_t<pos:position pos:line="26" pos:column="24"/></name></type> <name pos:line="26" pos:column="25">last_pos<pos:position pos:line="26" pos:column="33"/></name></decl>;<pos:position pos:line="26" pos:column="34"/></decl_stmt>

                <if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><operator pos:line="28" pos:column="21">!<pos:position pos:line="28" pos:column="22"/></operator><call><name pos:line="28" pos:column="22">httpHeaderParseOffset<pos:position pos:line="28" pos:column="43"/></name><argument_list pos:line="28" pos:column="43">(<argument><expr><name pos:line="28" pos:column="44">p<pos:position pos:line="28" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="47">&amp;<pos:position pos:line="28" pos:column="52"/></operator><name pos:line="28" pos:column="48">last_pos<pos:position pos:line="28" pos:column="56"/></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call> <operator pos:line="28" pos:column="58">||<pos:position pos:line="28" pos:column="60"/></operator> <operator pos:line="28" pos:column="61">!<pos:position pos:line="28" pos:column="62"/></operator><call><name pos:line="28" pos:column="62">known_spec<pos:position pos:line="28" pos:column="72"/></name><argument_list pos:line="28" pos:column="72">(<argument><expr><name pos:line="28" pos:column="73">last_pos<pos:position pos:line="28" pos:column="81"/></name></expr></argument>)<pos:position pos:line="28" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="83"/></condition><then pos:line="28" pos:column="83">
                    <block type="pseudo"><return pos:line="29" pos:column="21">return <expr><literal type="boolean" pos:line="29" pos:column="28">false<pos:position pos:line="29" pos:column="33"/></literal></expr>;<pos:position pos:line="29" pos:column="34"/></return></block></then></if>

                <comment type="line" pos:line="31" pos:column="17">// RFC 2616 s14.35.1 MUST: last-byte-pos &gt;= first-byte-pos</comment>
                <if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">last_pos<pos:position pos:line="32" pos:column="29"/></name> <operator pos:line="32" pos:column="30">&lt;<pos:position pos:line="32" pos:column="34"/></operator> <name pos:line="32" pos:column="32">offset<pos:position pos:line="32" pos:column="38"/></name></expr>)<pos:position pos:line="32" pos:column="39"/></condition><then pos:line="32" pos:column="39"> <block pos:line="32" pos:column="40">{
                    <expr_stmt><expr><call><name pos:line="33" pos:column="21">debugs<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><literal type="number" pos:line="33" pos:column="28">64<pos:position pos:line="33" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="32">2<pos:position pos:line="33" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="35">"invalid (last-byte-pos &lt; first-byte-pos) range-spec near: "<pos:position pos:line="33" pos:column="98"/></literal> <operator pos:line="33" pos:column="96">&lt;&lt;<pos:position pos:line="33" pos:column="104"/></operator> <name pos:line="33" pos:column="99">field<pos:position pos:line="33" pos:column="104"/></name></expr></argument>)<pos:position pos:line="33" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="106"/></expr_stmt>
                    <return pos:line="34" pos:column="21">return <expr><literal type="boolean" pos:line="34" pos:column="28">false<pos:position pos:line="34" pos:column="33"/></literal></expr>;<pos:position pos:line="34" pos:column="34"/></return>
                }<pos:position pos:line="35" pos:column="18"/></block></then></if>

                <decl_stmt><decl><type><name><name pos:line="37" pos:column="17">HttpHdrRangeSpec<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">::<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="35">HttpRange<pos:position pos:line="37" pos:column="44"/></name></name></type> <name pos:line="37" pos:column="45">aSpec<pos:position pos:line="37" pos:column="50"/></name> <argument_list pos:line="37" pos:column="51">(<argument><expr><name pos:line="37" pos:column="52">offset<pos:position pos:line="37" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="60">last_pos<pos:position pos:line="37" pos:column="68"/></name> <operator pos:line="37" pos:column="69">+<pos:position pos:line="37" pos:column="70"/></operator> <literal type="number" pos:line="37" pos:column="71">1<pos:position pos:line="37" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="73"/></argument_list></decl>;<pos:position pos:line="37" pos:column="74"/></decl_stmt>

                <expr_stmt><expr><name pos:line="39" pos:column="17">length<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">=<pos:position pos:line="39" pos:column="25"/></operator> <call><name><name pos:line="39" pos:column="26">aSpec<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">.<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="32">size<pos:position pos:line="39" pos:column="36"/></name></name><argument_list pos:line="39" pos:column="36">()<pos:position pos:line="39" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="40" pos:column="14"/></block></then></if>
        }<pos:position pos:line="41" pos:column="10"/></block></else></if>

    <return pos:line="43" pos:column="5">return <expr><literal type="boolean" pos:line="43" pos:column="12">true<pos:position pos:line="43" pos:column="16"/></literal></expr>;<pos:position pos:line="43" pos:column="17"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
