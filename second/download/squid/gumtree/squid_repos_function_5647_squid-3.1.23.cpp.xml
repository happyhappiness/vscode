<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5647_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">squid_rn_init<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">void<pos:position pos:line="2" pos:column="19"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="20"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">cp<pos:position pos:line="4" pos:column="13"/></name></decl>, <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="16">cplim<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">KERNEL<pos:position pos:line="5" pos:column="14"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">domain<pos:position pos:line="6" pos:column="18"/></name></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">dom<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

    <for pos:line="8" pos:column="5">for <control pos:line="8" pos:column="9">(<init><expr><name pos:line="8" pos:column="10">dom<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <name pos:line="8" pos:column="16">domains<pos:position pos:line="8" pos:column="23"/></name></expr>;<pos:position pos:line="8" pos:column="24"/></init> <condition><expr><name pos:line="8" pos:column="25">dom<pos:position pos:line="8" pos:column="28"/></name></expr>;<pos:position pos:line="8" pos:column="29"/></condition> <incr><expr><name pos:line="8" pos:column="30">dom<pos:position pos:line="8" pos:column="33"/></name> <operator pos:line="8" pos:column="34">=<pos:position pos:line="8" pos:column="35"/></operator> <name><name pos:line="8" pos:column="36">dom<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">-&gt;<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="41">dom_next<pos:position pos:line="8" pos:column="49"/></name></name></expr></incr>)<pos:position pos:line="8" pos:column="50"/></control>
        <block type="pseudo"><if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name><name pos:line="9" pos:column="13">dom<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">dom_maxrtkey<pos:position pos:line="9" pos:column="30"/></name></name> <operator pos:line="9" pos:column="31">&gt;<pos:position pos:line="9" pos:column="35"/></operator> <name pos:line="9" pos:column="33">squid_max_keylen<pos:position pos:line="9" pos:column="49"/></name></expr>)<pos:position pos:line="9" pos:column="50"/></condition><then pos:line="9" pos:column="50">
            <block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="13">squid_max_keylen<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">=<pos:position pos:line="10" pos:column="31"/></operator> <name><name pos:line="10" pos:column="32">dom<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">-&gt;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="37">dom_maxrtkey<pos:position pos:line="10" pos:column="49"/></name></name></expr>;<pos:position pos:line="10" pos:column="50"/></expr_stmt></block></then></if></block></for>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">squid_max_keylen<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">==<pos:position pos:line="12" pos:column="28"/></operator> <literal type="number" pos:line="12" pos:column="29">0<pos:position pos:line="12" pos:column="30"/></literal></expr>)<pos:position pos:line="12" pos:column="31"/></condition><then pos:line="12" pos:column="31"> <block pos:line="12" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">fprintf<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><name pos:line="13" pos:column="17">stderr<pos:position pos:line="13" pos:column="23"/></name></expr></argument>,
                <argument><expr><literal type="string" pos:line="14" pos:column="17">"squid_rn_init: radix functions require squid_max_keylen be set\n"<pos:position pos:line="14" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="85"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">squid_R_Malloc<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">rn_zeros<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="30">char<pos:position pos:line="17" pos:column="34"/></name> <operator pos:line="17" pos:column="35">*<pos:position pos:line="17" pos:column="36"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="38">3<pos:position pos:line="17" pos:column="39"/></literal> <operator pos:line="17" pos:column="40">*<pos:position pos:line="17" pos:column="41"/></operator> <name pos:line="17" pos:column="42">squid_max_keylen<pos:position pos:line="17" pos:column="58"/></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="60"/></expr_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">rn_zeros<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">==<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="21">NULL<pos:position pos:line="18" pos:column="25"/></name></expr>)<pos:position pos:line="18" pos:column="26"/></condition><then pos:line="18" pos:column="26"> <block pos:line="18" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">fprintf<pos:position pos:line="19" pos:column="16"/></name><argument_list pos:line="19" pos:column="16">(<argument><expr><name pos:line="19" pos:column="17">stderr<pos:position pos:line="19" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="25">"squid_rn_init failed.\n"<pos:position pos:line="19" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">exit<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><operator pos:line="20" pos:column="14">-<pos:position pos:line="20" pos:column="15"/></operator><literal type="number" pos:line="20" pos:column="15">1<pos:position pos:line="20" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">memset<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><name pos:line="22" pos:column="12">rn_zeros<pos:position pos:line="22" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="22" pos:column="22">'\0'<pos:position pos:line="22" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="28">3<pos:position pos:line="22" pos:column="29"/></literal> <operator pos:line="22" pos:column="30">*<pos:position pos:line="22" pos:column="31"/></operator> <name pos:line="22" pos:column="32">squid_max_keylen<pos:position pos:line="22" pos:column="48"/></name></expr></argument>)<pos:position pos:line="22" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">rn_ones<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <name pos:line="23" pos:column="15">cp<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <name pos:line="23" pos:column="20">rn_zeros<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">+<pos:position pos:line="23" pos:column="30"/></operator> <name pos:line="23" pos:column="31">squid_max_keylen<pos:position pos:line="23" pos:column="47"/></name></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">addmask_key<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="19">cplim<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="27">rn_ones<pos:position pos:line="24" pos:column="34"/></name> <operator pos:line="24" pos:column="35">+<pos:position pos:line="24" pos:column="36"/></operator> <name pos:line="24" pos:column="37">squid_max_keylen<pos:position pos:line="24" pos:column="53"/></name></expr>;<pos:position pos:line="24" pos:column="54"/></expr_stmt>
    <while pos:line="25" pos:column="5">while <condition pos:line="25" pos:column="11">(<expr><name pos:line="25" pos:column="12">cp<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">&lt;<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="17">cplim<pos:position pos:line="25" pos:column="22"/></name></expr>)<pos:position pos:line="25" pos:column="23"/></condition>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="26" pos:column="9">*<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">cp<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">++<pos:position pos:line="26" pos:column="14"/></operator> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <operator pos:line="26" pos:column="17">-<pos:position pos:line="26" pos:column="18"/></operator><literal type="number" pos:line="26" pos:column="18">1<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></expr_stmt></block></while>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><call><name pos:line="27" pos:column="9">squid_rn_inithead<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><operator pos:line="27" pos:column="27">&amp;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="28">squid_mask_rnhead<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="47">0<pos:position pos:line="27" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></call> <operator pos:line="27" pos:column="50">==<pos:position pos:line="27" pos:column="52"/></operator> <literal type="number" pos:line="27" pos:column="53">0<pos:position pos:line="27" pos:column="54"/></literal></expr>)<pos:position pos:line="27" pos:column="55"/></condition><then pos:line="27" pos:column="55"> <block pos:line="27" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">fprintf<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><name pos:line="28" pos:column="17">stderr<pos:position pos:line="28" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="25">"rn_init2 failed.\n"<pos:position pos:line="28" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">exit<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><operator pos:line="29" pos:column="14">-<pos:position pos:line="29" pos:column="15"/></operator><literal type="number" pos:line="29" pos:column="15">1<pos:position pos:line="29" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
