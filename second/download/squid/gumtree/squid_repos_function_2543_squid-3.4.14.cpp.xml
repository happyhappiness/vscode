<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2543_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FtpStateData<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">dataRead<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">CommIoCbParams<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">&amp;<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="46">io<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">j<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">bin<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="7" pos:column="5">data<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">.<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">read_pending<pos:position pos:line="7" pos:column="22"/></name></name> <operator pos:line="7" pos:column="23">=<pos:position pos:line="7" pos:column="24"/></operator> <literal type="boolean" pos:line="7" pos:column="25">false<pos:position pos:line="7" pos:column="30"/></literal></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">9<pos:position pos:line="9" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="15">3<pos:position pos:line="9" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="18">HERE<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&lt;&lt;<pos:position pos:line="9" pos:column="31"/></operator> <literal type="string" pos:line="9" pos:column="26">"ftpDataRead: FD "<pos:position pos:line="9" pos:column="44"/></literal> <operator pos:line="9" pos:column="45">&lt;&lt;<pos:position pos:line="9" pos:column="53"/></operator> <name><name pos:line="9" pos:column="48">io<pos:position pos:line="9" pos:column="50"/></name><operator pos:line="9" pos:column="50">.<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="51">fd<pos:position pos:line="9" pos:column="53"/></name></name> <operator pos:line="9" pos:column="54">&lt;&lt;<pos:position pos:line="9" pos:column="62"/></operator> <literal type="string" pos:line="9" pos:column="57">" Read "<pos:position pos:line="9" pos:column="65"/></literal> <operator pos:line="9" pos:column="66">&lt;&lt;<pos:position pos:line="9" pos:column="74"/></operator> <name><name pos:line="9" pos:column="69">io<pos:position pos:line="9" pos:column="71"/></name><operator pos:line="9" pos:column="71">.<pos:position pos:line="9" pos:column="72"/></operator><name pos:line="9" pos:column="72">size<pos:position pos:line="9" pos:column="76"/></name></name> <operator pos:line="9" pos:column="77">&lt;&lt;<pos:position pos:line="9" pos:column="85"/></operator> <literal type="string" pos:line="9" pos:column="80">" bytes"<pos:position pos:line="9" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="90"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">io<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">.<pos:position pos:line="11" pos:column="12"/></operator><name pos:line="11" pos:column="12">size<pos:position pos:line="11" pos:column="16"/></name></name> <operator pos:line="11" pos:column="17">&gt;<pos:position pos:line="11" pos:column="21"/></operator> <literal type="number" pos:line="11" pos:column="19">0<pos:position pos:line="11" pos:column="20"/></literal></expr>)<pos:position pos:line="11" pos:column="21"/></condition><then pos:line="11" pos:column="21"> <block pos:line="11" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">kb_incr<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><operator pos:line="12" pos:column="17">&amp;<pos:position pos:line="12" pos:column="22"/></operator><operator pos:line="12" pos:column="18">(<pos:position pos:line="12" pos:column="19"/></operator><name><name pos:line="12" pos:column="19">statCounter<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">.<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">server<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">.<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="38">all<pos:position pos:line="12" pos:column="41"/></name><operator pos:line="12" pos:column="41">.<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="42">kbytes_in<pos:position pos:line="12" pos:column="51"/></name></name><operator pos:line="12" pos:column="51">)<pos:position pos:line="12" pos:column="52"/></operator></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="54">io<pos:position pos:line="12" pos:column="56"/></name><operator pos:line="12" pos:column="56">.<pos:position pos:line="12" pos:column="57"/></operator><name pos:line="12" pos:column="57">size<pos:position pos:line="12" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">kb_incr<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><operator pos:line="13" pos:column="17">&amp;<pos:position pos:line="13" pos:column="22"/></operator><operator pos:line="13" pos:column="18">(<pos:position pos:line="13" pos:column="19"/></operator><name><name pos:line="13" pos:column="19">statCounter<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">.<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">server<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">.<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">ftp<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">.<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="42">kbytes_in<pos:position pos:line="13" pos:column="51"/></name></name><operator pos:line="13" pos:column="51">)<pos:position pos:line="13" pos:column="52"/></operator></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="54">io<pos:position pos:line="13" pos:column="56"/></name><operator pos:line="13" pos:column="56">.<pos:position pos:line="13" pos:column="57"/></operator><name pos:line="13" pos:column="57">size<pos:position pos:line="13" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">io<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">.<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">flag<pos:position pos:line="16" pos:column="16"/></name></name> <operator pos:line="16" pos:column="17">==<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">COMM_ERR_CLOSING<pos:position pos:line="16" pos:column="36"/></name></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37">
        <block type="pseudo"><return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">assert<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name><name pos:line="19" pos:column="12">io<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">.<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">fd<pos:position pos:line="19" pos:column="17"/></name></name> <operator pos:line="19" pos:column="18">==<pos:position pos:line="19" pos:column="20"/></operator> <name><name pos:line="19" pos:column="21">data<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">.<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">conn<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">fd<pos:position pos:line="19" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">EBIT_TEST<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><expr><name><name pos:line="21" pos:column="19">entry<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">-&gt;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="26">flags<pos:position pos:line="21" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="33">ENTRY_ABORTED<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="48"/></condition><then pos:line="21" pos:column="48"> <block pos:line="21" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">abortTransaction<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><literal type="string" pos:line="22" pos:column="26">"entry aborted during dataRead"<pos:position pos:line="22" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="59"/></expr_stmt>
        <return pos:line="23" pos:column="9">return;<pos:position pos:line="23" pos:column="16"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">io<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">.<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">flag<pos:position pos:line="26" pos:column="16"/></name></name> <operator pos:line="26" pos:column="17">==<pos:position pos:line="26" pos:column="19"/></operator> <name pos:line="26" pos:column="20">COMM_OK<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">&amp;&amp;<pos:position pos:line="26" pos:column="38"/></operator> <name><name pos:line="26" pos:column="31">io<pos:position pos:line="26" pos:column="33"/></name><operator pos:line="26" pos:column="33">.<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="34">size<pos:position pos:line="26" pos:column="38"/></name></name> <operator pos:line="26" pos:column="39">&gt;<pos:position pos:line="26" pos:column="43"/></operator> <literal type="number" pos:line="26" pos:column="41">0<pos:position pos:line="26" pos:column="42"/></literal></expr>)<pos:position pos:line="26" pos:column="43"/></condition><then pos:line="26" pos:column="43"> <block pos:line="26" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">9<pos:position pos:line="27" pos:column="17"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="27" pos:column="18">5<pos:position pos:line="27" pos:column="19"/></literal></expr></argument>,<argument><expr><name pos:line="27" pos:column="20">HERE<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">&lt;&lt;<pos:position pos:line="27" pos:column="33"/></operator> <literal type="string" pos:line="27" pos:column="28">"appended "<pos:position pos:line="27" pos:column="39"/></literal> <operator pos:line="27" pos:column="40">&lt;&lt;<pos:position pos:line="27" pos:column="48"/></operator> <name><name pos:line="27" pos:column="43">io<pos:position pos:line="27" pos:column="45"/></name><operator pos:line="27" pos:column="45">.<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="46">size<pos:position pos:line="27" pos:column="50"/></name></name> <operator pos:line="27" pos:column="51">&lt;&lt;<pos:position pos:line="27" pos:column="59"/></operator> <literal type="string" pos:line="27" pos:column="54">" bytes to readBuf"<pos:position pos:line="27" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="28" pos:column="9">data<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">.<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">readBuf<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">-&gt;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="23">appended<pos:position pos:line="28" pos:column="31"/></name></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name><name pos:line="28" pos:column="32">io<pos:position pos:line="28" pos:column="34"/></name><operator pos:line="28" pos:column="34">.<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="35">size<pos:position pos:line="28" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
<cpp:if pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">if<pos:position pos:line="29" pos:column="4"/></cpp:directive> <expr><name pos:line="29" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="29" pos:column="20"/></name></expr></cpp:if>
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">DelayId<pos:position pos:line="30" pos:column="16"/></name></type> <name pos:line="30" pos:column="17">delayId<pos:position pos:line="30" pos:column="24"/></name> <init pos:line="30" pos:column="25">= <expr><call><name><name pos:line="30" pos:column="27">entry<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">-&gt;<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="34">mem_obj<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">-&gt;<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="43">mostBytesAllowed<pos:position pos:line="30" pos:column="59"/></name></name><argument_list pos:line="30" pos:column="59">()<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="62"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="31" pos:column="9">delayId<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">.<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">bytesIn<pos:position pos:line="31" pos:column="24"/></name></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name><name pos:line="31" pos:column="25">io<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">.<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="28">size<pos:position pos:line="31" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><operator pos:line="33" pos:column="9">++<pos:position pos:line="33" pos:column="11"/></operator> <name><name pos:line="33" pos:column="12">IOStats<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">.<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">Ftp<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">.<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="24">reads<pos:position pos:line="33" pos:column="29"/></name></name></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>

        <for pos:line="35" pos:column="9">for <control pos:line="35" pos:column="13">(<init><expr><name pos:line="35" pos:column="14">j<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <name><name pos:line="35" pos:column="18">io<pos:position pos:line="35" pos:column="20"/></name><operator pos:line="35" pos:column="20">.<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="21">size<pos:position pos:line="35" pos:column="25"/></name></name> <operator pos:line="35" pos:column="26">-<pos:position pos:line="35" pos:column="27"/></operator> <literal type="number" pos:line="35" pos:column="28">1<pos:position pos:line="35" pos:column="29"/></literal></expr><operator pos:line="35" pos:column="29">,<pos:position pos:line="35" pos:column="30"/></operator> <expr><name pos:line="35" pos:column="31">bin<pos:position pos:line="35" pos:column="34"/></name> <operator pos:line="35" pos:column="35">=<pos:position pos:line="35" pos:column="36"/></operator> <literal type="number" pos:line="35" pos:column="37">0<pos:position pos:line="35" pos:column="38"/></literal></expr>;<pos:position pos:line="35" pos:column="39"/></init> <condition><expr><name pos:line="35" pos:column="40">j<pos:position pos:line="35" pos:column="41"/></name></expr>;<pos:position pos:line="35" pos:column="42"/></condition> <incr><expr><operator pos:line="35" pos:column="43">++<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="45">bin<pos:position pos:line="35" pos:column="48"/></name></expr></incr>)<pos:position pos:line="35" pos:column="49"/></control>
            <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="13">j<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">&gt;&gt;=<pos:position pos:line="36" pos:column="24"/></operator> <literal type="number" pos:line="36" pos:column="19">1<pos:position pos:line="36" pos:column="20"/></literal></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt></block></for>

        <expr_stmt><expr><operator pos:line="38" pos:column="9">++<pos:position pos:line="38" pos:column="11"/></operator> <name><name pos:line="38" pos:column="12">IOStats<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">.<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="20">Ftp<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">.<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">read_hist<pos:position pos:line="38" pos:column="33"/></name><index pos:line="38" pos:column="33">[<expr><name pos:line="38" pos:column="34">bin<pos:position pos:line="38" pos:column="37"/></name></expr>]<pos:position pos:line="38" pos:column="38"/></index></name></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name><name pos:line="41" pos:column="9">io<pos:position pos:line="41" pos:column="11"/></name><operator pos:line="41" pos:column="11">.<pos:position pos:line="41" pos:column="12"/></operator><name pos:line="41" pos:column="12">flag<pos:position pos:line="41" pos:column="16"/></name></name> <operator pos:line="41" pos:column="17">!=<pos:position pos:line="41" pos:column="19"/></operator> <name pos:line="41" pos:column="20">COMM_OK<pos:position pos:line="41" pos:column="27"/></name></expr>)<pos:position pos:line="41" pos:column="28"/></condition><then pos:line="41" pos:column="28"> <block pos:line="41" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">debugs<pos:position pos:line="42" pos:column="15"/></name><argument_list pos:line="42" pos:column="15">(<argument><expr><literal type="number" pos:line="42" pos:column="16">50<pos:position pos:line="42" pos:column="18"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name pos:line="42" pos:column="20">ignoreErrno<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><name><name pos:line="42" pos:column="32">io<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">.<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="35">xerrno<pos:position pos:line="42" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="42"/></argument_list></call></expr> ?<pos:position pos:line="42" pos:column="44"/></condition><then pos:line="42" pos:column="44"> <expr><literal type="number" pos:line="42" pos:column="45">3<pos:position pos:line="42" pos:column="46"/></literal></expr> <pos:position pos:line="42" pos:column="47"/></then><else pos:line="42" pos:column="47">: <expr><name pos:line="42" pos:column="49">DBG_IMPORTANT<pos:position pos:line="42" pos:column="62"/></name></expr></else></ternary></expr></argument>,
               <argument><expr><literal type="string" pos:line="43" pos:column="16">"ftpDataRead: read error: "<pos:position pos:line="43" pos:column="43"/></literal> <operator pos:line="43" pos:column="44">&lt;&lt;<pos:position pos:line="43" pos:column="52"/></operator> <call><name pos:line="43" pos:column="47">xstrerr<pos:position pos:line="43" pos:column="54"/></name><argument_list pos:line="43" pos:column="54">(<argument><expr><name><name pos:line="43" pos:column="55">io<pos:position pos:line="43" pos:column="57"/></name><operator pos:line="43" pos:column="57">.<pos:position pos:line="43" pos:column="58"/></operator><name pos:line="43" pos:column="58">xerrno<pos:position pos:line="43" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="67"/></expr_stmt>

        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name pos:line="45" pos:column="13">ignoreErrno<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name><name pos:line="45" pos:column="25">io<pos:position pos:line="45" pos:column="27"/></name><operator pos:line="45" pos:column="27">.<pos:position pos:line="45" pos:column="28"/></operator><name pos:line="45" pos:column="28">xerrno<pos:position pos:line="45" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="36"/></condition><then pos:line="45" pos:column="36"> <block pos:line="45" pos:column="37">{
            <typedef pos:line="46" pos:column="13">typedef <type><name><name pos:line="46" pos:column="21">CommCbMemFunT<pos:position pos:line="46" pos:column="34"/></name><argument_list type="generic" pos:line="46" pos:column="34">&lt;<argument><expr><name pos:line="46" pos:column="35">FtpStateData<pos:position pos:line="46" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="49">CommTimeoutCbParams<pos:position pos:line="46" pos:column="68"/></name></expr></argument>&gt;<pos:position pos:line="46" pos:column="72"/></argument_list></name></type> <name pos:line="46" pos:column="70">TimeoutDialer<pos:position pos:line="46" pos:column="83"/></name>;<pos:position pos:line="46" pos:column="84"/></typedef>
            <decl_stmt><decl><type><name><name pos:line="47" pos:column="13">AsyncCall<pos:position pos:line="47" pos:column="22"/></name><operator pos:line="47" pos:column="22">::<pos:position pos:line="47" pos:column="24"/></operator><name pos:line="47" pos:column="24">Pointer<pos:position pos:line="47" pos:column="31"/></name></name></type> <name pos:line="47" pos:column="32">timeoutCall<pos:position pos:line="47" pos:column="43"/></name> <init pos:line="47" pos:column="44">= <expr><call><name pos:line="47" pos:column="46">JobCallback<pos:position pos:line="47" pos:column="57"/></name><argument_list pos:line="47" pos:column="57">(<argument><expr><literal type="number" pos:line="47" pos:column="58">9<pos:position pos:line="47" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="61">5<pos:position pos:line="47" pos:column="62"/></literal></expr></argument>,
                                             <argument><expr><name pos:line="48" pos:column="46">TimeoutDialer<pos:position pos:line="48" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="61">this<pos:position pos:line="48" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="67">FtpStateData<pos:position pos:line="48" pos:column="79"/></name><operator pos:line="48" pos:column="79">::<pos:position pos:line="48" pos:column="81"/></operator><name pos:line="48" pos:column="81">ftpTimeout<pos:position pos:line="48" pos:column="91"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="92"/></argument_list></call></expr></init></decl>;<pos:position pos:line="48" pos:column="93"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">commSetConnTimeout<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><name><name pos:line="49" pos:column="32">io<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">.<pos:position pos:line="49" pos:column="35"/></operator><name pos:line="49" pos:column="35">conn<pos:position pos:line="49" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="41">Config<pos:position pos:line="49" pos:column="47"/></name><operator pos:line="49" pos:column="47">.<pos:position pos:line="49" pos:column="48"/></operator><name pos:line="49" pos:column="48">Timeout<pos:position pos:line="49" pos:column="55"/></name><operator pos:line="49" pos:column="55">.<pos:position pos:line="49" pos:column="56"/></operator><name pos:line="49" pos:column="56">read<pos:position pos:line="49" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="62">timeoutCall<pos:position pos:line="49" pos:column="73"/></name></expr></argument>)<pos:position pos:line="49" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="75"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="51" pos:column="13">maybeReadVirginBody<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">()<pos:position pos:line="51" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="52" pos:column="10"/></block></then> <else pos:line="52" pos:column="11">else <block pos:line="52" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">failed<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">ERR_READ_ERROR<pos:position pos:line="53" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="36">0<pos:position pos:line="53" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="39"/></expr_stmt>
            <comment type="block" pos:line="54" pos:column="13">/* failed closes ctrl.conn and frees ftpState */</comment>
            <return pos:line="55" pos:column="13">return;<pos:position pos:line="55" pos:column="20"/></return>
        }<pos:position pos:line="56" pos:column="10"/></block></else></if>
    }<pos:position pos:line="57" pos:column="6"/></block></then> <elseif pos:line="57" pos:column="7">else <if pos:line="57" pos:column="12">if <condition pos:line="57" pos:column="15">(<expr><name><name pos:line="57" pos:column="16">io<pos:position pos:line="57" pos:column="18"/></name><operator pos:line="57" pos:column="18">.<pos:position pos:line="57" pos:column="19"/></operator><name pos:line="57" pos:column="19">size<pos:position pos:line="57" pos:column="23"/></name></name> <operator pos:line="57" pos:column="24">==<pos:position pos:line="57" pos:column="26"/></operator> <literal type="number" pos:line="57" pos:column="27">0<pos:position pos:line="57" pos:column="28"/></literal></expr>)<pos:position pos:line="57" pos:column="29"/></condition><then pos:line="57" pos:column="29"> <block pos:line="57" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">debugs<pos:position pos:line="58" pos:column="15"/></name><argument_list pos:line="58" pos:column="15">(<argument><expr><literal type="number" pos:line="58" pos:column="16">9<pos:position pos:line="58" pos:column="17"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="58" pos:column="18">3<pos:position pos:line="58" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="21">HERE<pos:position pos:line="58" pos:column="25"/></name> <operator pos:line="58" pos:column="26">&lt;&lt;<pos:position pos:line="58" pos:column="34"/></operator> <literal type="string" pos:line="58" pos:column="29">"Calling dataComplete() because io.size == 0"<pos:position pos:line="58" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="76"/></expr_stmt>
        <comment type="block" pos:line="59" pos:column="9">/*
         * DPW 2007-04-23
         * Dangerous curves ahead.  This call to dataComplete was
         * calling scheduleReadControlReply, handleControlReply,
         * and then ftpReadTransferDone.  If ftpReadTransferDone
         * gets unexpected status code, it closes down the control
         * socket and our FtpStateData object gets destroyed.   As
         * a workaround we no longer set the 'buffered_ok' flag in
         * the scheduleReadControlReply call.
         */</comment>
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">dataComplete<pos:position pos:line="69" pos:column="21"/></name><argument_list pos:line="69" pos:column="21">()<pos:position pos:line="69" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><call><name pos:line="72" pos:column="5">processReplyBody<pos:position pos:line="72" pos:column="21"/></name><argument_list pos:line="72" pos:column="21">()<pos:position pos:line="72" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="24"/></expr_stmt>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
