<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5142_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">ConnOpener<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">sendAnswer<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name pos:line="2" pos:column="30">comm_err_t<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">errFlag<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">xerrno<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="62">const<pos:position pos:line="2" pos:column="67"/></specifier> <name pos:line="2" pos:column="68">char<pos:position pos:line="2" pos:column="72"/></name> <modifier pos:line="2" pos:column="73">*<pos:position pos:line="2" pos:column="74"/></modifier></type><name pos:line="2" pos:column="74">why<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// only mark the address good/bad AFTER connect is finished.</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">host_<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">!=<pos:position pos:line="5" pos:column="17"/></operator> <name pos:line="5" pos:column="18">NULL<pos:position pos:line="5" pos:column="22"/></name></expr>)<pos:position pos:line="5" pos:column="23"/></condition><then pos:line="5" pos:column="23"> <block pos:line="5" pos:column="24">{
        <if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">xerrno<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">==<pos:position pos:line="6" pos:column="22"/></operator> <literal type="number" pos:line="6" pos:column="23">0<pos:position pos:line="6" pos:column="24"/></literal></expr>)<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25"> <comment type="line" pos:line="6" pos:column="26">// XXX: should not we use errFlag instead?</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="13">ipcacheMarkGoodAddr<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><name pos:line="7" pos:column="33">host_<pos:position pos:line="7" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="40">conn_<pos:position pos:line="7" pos:column="45"/></name><operator pos:line="7" pos:column="45">-&gt;<pos:position pos:line="7" pos:column="50"/></operator><name pos:line="7" pos:column="47">remote<pos:position pos:line="7" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="55"/></expr_stmt></block></then>
        <else pos:line="8" pos:column="9">else <block pos:line="8" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="9" pos:column="13">ipcacheMarkBadAddr<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name pos:line="9" pos:column="32">host_<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="39">conn_<pos:position pos:line="9" pos:column="44"/></name><operator pos:line="9" pos:column="44">-&gt;<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="46">remote<pos:position pos:line="9" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="54"/></expr_stmt>
<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><name pos:line="10" pos:column="5">USE_ICMP<pos:position pos:line="10" pos:column="13"/></name></expr></cpp:if>
            <if pos:line="11" pos:column="13">if <condition pos:line="11" pos:column="16">(<expr><name><name pos:line="11" pos:column="17">Config<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">.<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">onoff<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">.<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">test_reachability<pos:position pos:line="11" pos:column="47"/></name></name></expr>)<pos:position pos:line="11" pos:column="48"/></condition><then pos:line="11" pos:column="48">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">netdbDeleteAddrNetwork<pos:position pos:line="12" pos:column="39"/></name><argument_list pos:line="12" pos:column="39">(<argument><expr><name><name pos:line="12" pos:column="40">conn_<pos:position pos:line="12" pos:column="45"/></name><operator pos:line="12" pos:column="45">-&gt;<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="47">remote<pos:position pos:line="12" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt></block></then></if>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="14" pos:column="10"/></block></else></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">callback_<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">!=<pos:position pos:line="17" pos:column="21"/></operator> <name pos:line="17" pos:column="22">NULL<pos:position pos:line="17" pos:column="26"/></name></expr>)<pos:position pos:line="17" pos:column="27"/></condition><then pos:line="17" pos:column="27"> <block pos:line="17" pos:column="28">{
        <comment type="line" pos:line="18" pos:column="9">// avoid scheduling cancelled callbacks, assuming they are common</comment>
        <comment type="line" pos:line="19" pos:column="9">// enough to make this extra check an optimization</comment>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name><name pos:line="20" pos:column="13">callback_<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">canceled<pos:position pos:line="20" pos:column="32"/></name></name><argument_list pos:line="20" pos:column="32">()<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="35"/></condition><then pos:line="20" pos:column="35"> <block pos:line="20" pos:column="36">{
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">debugs<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">5<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="23">4<pos:position pos:line="21" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="26">conn_<pos:position pos:line="21" pos:column="31"/></name> <operator pos:line="21" pos:column="32">&lt;&lt;<pos:position pos:line="21" pos:column="40"/></operator> <literal type="string" pos:line="21" pos:column="35">" not calling canceled "<pos:position pos:line="21" pos:column="59"/></literal> <operator pos:line="21" pos:column="60">&lt;&lt;<pos:position pos:line="21" pos:column="68"/></operator> <operator pos:line="21" pos:column="63">*<pos:position pos:line="21" pos:column="64"/></operator><name pos:line="21" pos:column="64">callback_<pos:position pos:line="21" pos:column="73"/></name> <operator pos:line="21" pos:column="74">&lt;&lt;<pos:position pos:line="21" pos:column="82"/></operator>
                   <literal type="string" pos:line="22" pos:column="20">" ["<pos:position pos:line="22" pos:column="24"/></literal> <operator pos:line="22" pos:column="25">&lt;&lt;<pos:position pos:line="22" pos:column="33"/></operator> <name><name pos:line="22" pos:column="28">callback_<pos:position pos:line="22" pos:column="37"/></name><operator pos:line="22" pos:column="37">-&gt;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="39">id<pos:position pos:line="22" pos:column="41"/></name></name> <operator pos:line="22" pos:column="42">&lt;&lt;<pos:position pos:line="22" pos:column="50"/></operator> <literal type="char" pos:line="22" pos:column="45">']'<pos:position pos:line="22" pos:column="48"/></literal></expr></argument> )<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>
            <comment type="line" pos:line="23" pos:column="13">// TODO save the pconn to the pconnPool ?</comment>
        }<pos:position pos:line="24" pos:column="10"/></block></then> <else pos:line="24" pos:column="11">else <block pos:line="24" pos:column="16">{
            <typedef pos:line="25" pos:column="13">typedef <type><name pos:line="25" pos:column="21">CommConnectCbParams<pos:position pos:line="25" pos:column="40"/></name></type> <name pos:line="25" pos:column="41">Params<pos:position pos:line="25" pos:column="47"/></name>;<pos:position pos:line="25" pos:column="48"/></typedef>
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">Params<pos:position pos:line="26" pos:column="19"/></name> <modifier pos:line="26" pos:column="20">&amp;<pos:position pos:line="26" pos:column="25"/></modifier></type><name pos:line="26" pos:column="21">params<pos:position pos:line="26" pos:column="27"/></name> <init pos:line="26" pos:column="28">= <expr><call><name><name pos:line="26" pos:column="30">GetCommParams<pos:position pos:line="26" pos:column="43"/></name><argument_list type="generic" pos:line="26" pos:column="43">&lt;<argument><expr><name pos:line="26" pos:column="44">Params<pos:position pos:line="26" pos:column="50"/></name></expr></argument>&gt;<pos:position pos:line="26" pos:column="54"/></argument_list></name><argument_list pos:line="26" pos:column="51">(<argument><expr><name pos:line="26" pos:column="52">callback_<pos:position pos:line="26" pos:column="61"/></name></expr></argument>)<pos:position pos:line="26" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="63"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="27" pos:column="13">params<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">.<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="20">conn<pos:position pos:line="27" pos:column="24"/></name></name> <operator pos:line="27" pos:column="25">=<pos:position pos:line="27" pos:column="26"/></operator> <name pos:line="27" pos:column="27">conn_<pos:position pos:line="27" pos:column="32"/></name></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="28" pos:column="13">params<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">.<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="20">flag<pos:position pos:line="28" pos:column="24"/></name></name> <operator pos:line="28" pos:column="25">=<pos:position pos:line="28" pos:column="26"/></operator> <name pos:line="28" pos:column="27">errFlag<pos:position pos:line="28" pos:column="34"/></name></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="29" pos:column="13">params<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">.<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">xerrno<pos:position pos:line="29" pos:column="26"/></name></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator> <name pos:line="29" pos:column="29">xerrno<pos:position pos:line="29" pos:column="35"/></name></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">ScheduleCallHere<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">callback_<pos:position pos:line="30" pos:column="39"/></name></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name pos:line="32" pos:column="9">callback_<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <name pos:line="32" pos:column="21">NULL<pos:position pos:line="32" pos:column="25"/></name></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="35" pos:column="5">// The job will stop without this call because nil callback_ makes</comment>
    <comment type="line" pos:line="36" pos:column="5">// doneAll() true, but this explicit call creates nicer debugging.</comment>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">mustStop<pos:position pos:line="37" pos:column="13"/></name><argument_list pos:line="37" pos:column="13">(<argument><expr><name pos:line="37" pos:column="14">why<pos:position pos:line="37" pos:column="17"/></name></expr></argument>)<pos:position pos:line="37" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
