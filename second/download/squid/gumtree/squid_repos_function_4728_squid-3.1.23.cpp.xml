<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4728_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">UFSSwapLogParser<pos:position pos:line="1" pos:column="17"/></name> <modifier pos:line="1" pos:column="18">*<pos:position pos:line="1" pos:column="19"/></modifier></type><name><name pos:line="1" pos:column="19">UFSSwapLogParser<pos:position pos:line="1" pos:column="35"/></name><operator pos:line="1" pos:column="35">::<pos:position pos:line="1" pos:column="37"/></operator><name pos:line="1" pos:column="37">GetUFSSwapLogParser<pos:position pos:line="1" pos:column="56"/></name></name><parameter_list pos:line="1" pos:column="56">(<parameter><decl><type><name pos:line="1" pos:column="57">FILE<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">fp<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">StoreSwapLogHeader<pos:position pos:line="3" pos:column="23"/></name></type> <name pos:line="3" pos:column="24">header<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">fp<pos:position pos:line="5" pos:column="14"/></name></expr></argument>)<pos:position pos:line="5" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="16"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">fread<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><operator pos:line="7" pos:column="15">&amp;<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="16">header<pos:position pos:line="7" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="24">sizeof<argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">StoreSwapLogHeader<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="52">1<pos:position pos:line="7" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="55">fp<pos:position pos:line="7" pos:column="57"/></name></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call> <operator pos:line="7" pos:column="59">!=<pos:position pos:line="7" pos:column="61"/></operator> <literal type="number" pos:line="7" pos:column="62">1<pos:position pos:line="7" pos:column="63"/></literal></expr>)<pos:position pos:line="7" pos:column="64"/></condition><then pos:line="7" pos:column="64">
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><name pos:line="8" pos:column="16">NULL<pos:position pos:line="8" pos:column="20"/></name></expr>;<pos:position pos:line="8" pos:column="21"/></return></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">header<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">.<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">op<pos:position pos:line="10" pos:column="18"/></name></name> <operator pos:line="10" pos:column="19">!=<pos:position pos:line="10" pos:column="21"/></operator> <name pos:line="10" pos:column="22">SWAP_LOG_VERSION<pos:position pos:line="10" pos:column="38"/></name></expr>)<pos:position pos:line="10" pos:column="39"/></condition><then pos:line="10" pos:column="39"> <block pos:line="10" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">47<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">1<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">"Old swap file detected..."<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">fseek<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><expr><name pos:line="12" pos:column="15">fp<pos:position pos:line="12" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="19">0<pos:position pos:line="12" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="22">SEEK_SET<pos:position pos:line="12" pos:column="30"/></name></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">new<pos:position pos:line="13" pos:column="19"/></operator> <call><name pos:line="13" pos:column="20">UFSSwapLogParser_v1_32bs<pos:position pos:line="13" pos:column="44"/></name><argument_list pos:line="13" pos:column="44">(<argument><expr><name pos:line="13" pos:column="45">fp<pos:position pos:line="13" pos:column="47"/></name></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="49"/></return> <comment type="line" pos:line="13" pos:column="50">// Um. 32-bits except time_t, and can't determine that.</comment>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">header<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">.<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">version<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">==<pos:position pos:line="16" pos:column="26"/></operator> <literal type="number" pos:line="16" pos:column="27">1<pos:position pos:line="16" pos:column="28"/></literal></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29"> <block pos:line="16" pos:column="30">{
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">fseek<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">fp<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="23">header<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">.<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">record_size<pos:position pos:line="17" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="43">SEEK_SET<pos:position pos:line="17" pos:column="51"/></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call> <operator pos:line="17" pos:column="53">!=<pos:position pos:line="17" pos:column="55"/></operator> <literal type="number" pos:line="17" pos:column="56">0<pos:position pos:line="17" pos:column="57"/></literal></expr>)<pos:position pos:line="17" pos:column="58"/></condition><then pos:line="17" pos:column="58">
            <block type="pseudo"><return pos:line="18" pos:column="13">return <expr><name pos:line="18" pos:column="20">NULL<pos:position pos:line="18" pos:column="24"/></name></expr>;<pos:position pos:line="18" pos:column="25"/></return></block></then></if>

        <comment type="line" pos:line="20" pos:column="9">// baseline</comment>
        <comment type="line" pos:line="21" pos:column="9">// 32-bit sfileno</comment>
        <comment type="line" pos:line="22" pos:column="9">// native time_t (hopefully 64-bit)</comment>
        <comment type="line" pos:line="23" pos:column="9">// 64-bit file size</comment>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">header<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">.<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">record_size<pos:position pos:line="24" pos:column="31"/></name></name> <operator pos:line="24" pos:column="32">==<pos:position pos:line="24" pos:column="34"/></operator> <sizeof pos:line="24" pos:column="35">sizeof<argument_list pos:line="24" pos:column="41">(<argument><expr><name pos:line="24" pos:column="42">StoreSwapLogData<pos:position pos:line="24" pos:column="58"/></name></expr></argument>)<pos:position pos:line="24" pos:column="59"/></argument_list></sizeof></expr>)<pos:position pos:line="24" pos:column="60"/></condition><then pos:line="24" pos:column="60"> <block pos:line="24" pos:column="61">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">debugs<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><literal type="number" pos:line="25" pos:column="20">47<pos:position pos:line="25" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="24">1<pos:position pos:line="25" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="27">"Version 1 of swap file with LFS support detected... "<pos:position pos:line="25" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="83"/></expr_stmt>
            <return pos:line="26" pos:column="13">return <expr><operator pos:line="26" pos:column="20">new<pos:position pos:line="26" pos:column="23"/></operator> <call><name pos:line="26" pos:column="24">UFSSwapLogParser_v1<pos:position pos:line="26" pos:column="43"/></name><argument_list pos:line="26" pos:column="43">(<argument><expr><name pos:line="26" pos:column="44">fp<pos:position pos:line="26" pos:column="46"/></name></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="48"/></return>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="29" pos:column="9">// which means we have a 3-way grid of permutations to import (yuck!)</comment>
        <comment type="line" pos:line="30" pos:column="9">// 1) sfileno 32-bit / 64-bit  (64-bit was broken)</comment>
        <comment type="line" pos:line="31" pos:column="9">// 2) time_t 32-bit / 64-bit</comment>
        <comment type="line" pos:line="32" pos:column="9">// 3) size_t 32-bit / 64-bit  (32-bit was pre-LFS)</comment>

        <comment type="line" pos:line="34" pos:column="9">// 32-bit systems...</comment>
        <comment type="line" pos:line="35" pos:column="9">// only LFS (size_t) differs from baseline</comment>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name><name pos:line="36" pos:column="13">header<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">.<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="20">record_size<pos:position pos:line="36" pos:column="31"/></name></name> <operator pos:line="36" pos:column="32">==<pos:position pos:line="36" pos:column="34"/></operator> <sizeof pos:line="36" pos:column="35">sizeof<argument_list pos:line="36" pos:column="41">(<argument><expr pos:line="36" pos:column="42">struct <name><name pos:line="36" pos:column="49">UFSSwapLogParser_v1_32bs<pos:position pos:line="36" pos:column="73"/></name><operator pos:line="36" pos:column="73">::<pos:position pos:line="36" pos:column="75"/></operator><name pos:line="36" pos:column="75">StoreSwapLogDataOld<pos:position pos:line="36" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="95"/></argument_list></sizeof></expr>)<pos:position pos:line="36" pos:column="96"/></condition><then pos:line="36" pos:column="96"> <block pos:line="36" pos:column="97">{
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">debugs<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><literal type="number" pos:line="37" pos:column="20">47<pos:position pos:line="37" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="24">1<pos:position pos:line="37" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="27">"Version 1 (32-bit) swap file without LFS support detected... "<pos:position pos:line="37" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="92"/></expr_stmt>
            <return pos:line="38" pos:column="13">return <expr><operator pos:line="38" pos:column="20">new<pos:position pos:line="38" pos:column="23"/></operator> <call><name pos:line="38" pos:column="24">UFSSwapLogParser_v1_32bs<pos:position pos:line="38" pos:column="48"/></name><argument_list pos:line="38" pos:column="48">(<argument><expr><name pos:line="38" pos:column="49">fp<pos:position pos:line="38" pos:column="51"/></name></expr></argument>)<pos:position pos:line="38" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="53"/></return>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="40" pos:column="9">// LFS (size_t) and timestamps (time_t) differs from baseline</comment>
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name><name pos:line="41" pos:column="13">header<pos:position pos:line="41" pos:column="19"/></name><operator pos:line="41" pos:column="19">.<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="20">record_size<pos:position pos:line="41" pos:column="31"/></name></name> <operator pos:line="41" pos:column="32">==<pos:position pos:line="41" pos:column="34"/></operator> <sizeof pos:line="41" pos:column="35">sizeof<argument_list pos:line="41" pos:column="41">(<argument><expr pos:line="41" pos:column="42">struct <name><name pos:line="41" pos:column="49">UFSSwapLogParser_v1_32bst<pos:position pos:line="41" pos:column="74"/></name><operator pos:line="41" pos:column="74">::<pos:position pos:line="41" pos:column="76"/></operator><name pos:line="41" pos:column="76">StoreSwapLogDataOld<pos:position pos:line="41" pos:column="95"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="96"/></argument_list></sizeof></expr>)<pos:position pos:line="41" pos:column="97"/></condition><then pos:line="41" pos:column="97"> <block pos:line="41" pos:column="98">{
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">debugs<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><literal type="number" pos:line="42" pos:column="20">47<pos:position pos:line="42" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="24">1<pos:position pos:line="42" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="27">"Version 1 (32-bit) swap file with short timestamps and without LFS support detected... "<pos:position pos:line="42" pos:column="116"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="117"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="118"/></expr_stmt>
            <return pos:line="43" pos:column="13">return <expr><operator pos:line="43" pos:column="20">new<pos:position pos:line="43" pos:column="23"/></operator> <call><name pos:line="43" pos:column="24">UFSSwapLogParser_v1_32bst<pos:position pos:line="43" pos:column="49"/></name><argument_list pos:line="43" pos:column="49">(<argument><expr><name pos:line="43" pos:column="50">fp<pos:position pos:line="43" pos:column="52"/></name></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="54"/></return>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="45" pos:column="9">// No downgrade for 64-bit timestamps to 32-bit.</comment>

        <comment type="line" pos:line="47" pos:column="9">// 64-bit systems</comment>
        <comment type="line" pos:line="48" pos:column="9">// sfileno was 64-bit for a some builds</comment>
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name><name pos:line="49" pos:column="13">header<pos:position pos:line="49" pos:column="19"/></name><operator pos:line="49" pos:column="19">.<pos:position pos:line="49" pos:column="20"/></operator><name pos:line="49" pos:column="20">record_size<pos:position pos:line="49" pos:column="31"/></name></name> <operator pos:line="49" pos:column="32">==<pos:position pos:line="49" pos:column="34"/></operator> <sizeof pos:line="49" pos:column="35">sizeof<argument_list pos:line="49" pos:column="41">(<argument><expr pos:line="49" pos:column="42">struct <name><name pos:line="49" pos:column="49">UFSSwapLogParser_v1_64bfn<pos:position pos:line="49" pos:column="74"/></name><operator pos:line="49" pos:column="74">::<pos:position pos:line="49" pos:column="76"/></operator><name pos:line="49" pos:column="76">StoreSwapLogDataOld<pos:position pos:line="49" pos:column="95"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="96"/></argument_list></sizeof></expr>)<pos:position pos:line="49" pos:column="97"/></condition><then pos:line="49" pos:column="97"> <block pos:line="49" pos:column="98">{
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">debugs<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><literal type="number" pos:line="50" pos:column="20">47<pos:position pos:line="50" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="24">1<pos:position pos:line="50" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="27">"Version 1 (64-bit) swap file with broken sfileno detected... "<pos:position pos:line="50" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="92"/></expr_stmt>
            <return pos:line="51" pos:column="13">return <expr><operator pos:line="51" pos:column="20">new<pos:position pos:line="51" pos:column="23"/></operator> <call><name pos:line="51" pos:column="24">UFSSwapLogParser_v1_64bfn<pos:position pos:line="51" pos:column="49"/></name><argument_list pos:line="51" pos:column="49">(<argument><expr><name pos:line="51" pos:column="50">fp<pos:position pos:line="51" pos:column="52"/></name></expr></argument>)<pos:position pos:line="51" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="54"/></return>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="53" pos:column="9">// NP: 64-bit system with 32-bit size_t/time_t are not handled.</comment>

        <expr_stmt><expr><call><name pos:line="55" pos:column="9">debugs<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><literal type="number" pos:line="55" pos:column="16">47<pos:position pos:line="55" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="20">1<pos:position pos:line="55" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="23">"WARNING: The swap file has wrong format!... "<pos:position pos:line="55" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">debugs<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><literal type="number" pos:line="56" pos:column="16">47<pos:position pos:line="56" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="20">1<pos:position pos:line="56" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="23">"NOTE: Cannot safely downgrade caches to short (32-bit) timestamps."<pos:position pos:line="56" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="93"/></expr_stmt>
        <return pos:line="57" pos:column="9">return <expr><name pos:line="57" pos:column="16">NULL<pos:position pos:line="57" pos:column="20"/></name></expr>;<pos:position pos:line="57" pos:column="21"/></return>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="60" pos:column="5">// XXX: version 2 of swapfile. This time use fixed-bit sizes for everything!!</comment>
    <comment type="line" pos:line="61" pos:column="5">// and preferrably write to disk in network-order bytes for the larger fields.</comment>

    <return pos:line="63" pos:column="5">return <expr><name pos:line="63" pos:column="12">NULL<pos:position pos:line="63" pos:column="16"/></name></expr>;<pos:position pos:line="63" pos:column="17"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
