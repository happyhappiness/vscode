<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7443_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">HandshakeParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">parseModernRecord<pos:position pos:line="2" pos:column="45"/></name></name><parameter_list pos:line="2" pos:column="45">()<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">TLSPlaintext<pos:position pos:line="4" pos:column="23"/></name></type> <name pos:line="4" pos:column="24">record<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">(<argument><expr><name pos:line="4" pos:column="31">tkRecords<pos:position pos:line="4" pos:column="40"/></name></expr></argument>)<pos:position pos:line="4" pos:column="41"/></argument_list></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">tkRecords<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">.<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="15">commit<pos:position pos:line="5" pos:column="21"/></name></name><argument_list pos:line="5" pos:column="21">()<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="7" pos:column="5">details<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">-&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">tlsVersion<pos:position pos:line="7" pos:column="24"/></name></name> <operator pos:line="7" pos:column="25">=<pos:position pos:line="7" pos:column="26"/></operator> <name><name pos:line="7" pos:column="27">record<pos:position pos:line="7" pos:column="33"/></name><operator pos:line="7" pos:column="33">.<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="34">version<pos:position pos:line="7" pos:column="41"/></name></name></expr>;<pos:position pos:line="7" pos:column="42"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// RFC 5246: length MUST NOT exceed 2^14</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">Must<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><call><name><name pos:line="10" pos:column="10">record<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">.<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">fragment<pos:position pos:line="10" pos:column="25"/></name><operator pos:line="10" pos:column="25">.<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">length<pos:position pos:line="10" pos:column="32"/></name></name><argument_list pos:line="10" pos:column="32">()<pos:position pos:line="10" pos:column="34"/></argument_list></call> <operator pos:line="10" pos:column="35">&lt;=<pos:position pos:line="10" pos:column="40"/></operator> <operator pos:line="10" pos:column="38">(<pos:position pos:line="10" pos:column="39"/></operator><literal type="number" pos:line="10" pos:column="39">1<pos:position pos:line="10" pos:column="40"/></literal> <operator pos:line="10" pos:column="41">&lt;&lt;<pos:position pos:line="10" pos:column="49"/></operator> <literal type="number" pos:line="10" pos:column="44">14<pos:position pos:line="10" pos:column="46"/></literal><operator pos:line="10" pos:column="46">)<pos:position pos:line="10" pos:column="47"/></operator></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="49"/></expr_stmt>
    <comment type="line" pos:line="11" pos:column="5">// RFC 5246: MUST NOT send zero-length [non-application] fragments</comment>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">Must<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><call><name><name pos:line="12" pos:column="10">record<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">.<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">fragment<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">.<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">length<pos:position pos:line="12" pos:column="32"/></name></name><argument_list pos:line="12" pos:column="32">()<pos:position pos:line="12" pos:column="34"/></argument_list></call> <operator pos:line="12" pos:column="35">||<pos:position pos:line="12" pos:column="37"/></operator> <name><name pos:line="12" pos:column="38">record<pos:position pos:line="12" pos:column="44"/></name><operator pos:line="12" pos:column="44">.<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="45">type<pos:position pos:line="12" pos:column="49"/></name></name> <operator pos:line="12" pos:column="50">==<pos:position pos:line="12" pos:column="52"/></operator> <name><name pos:line="12" pos:column="53">ContentType<pos:position pos:line="12" pos:column="64"/></name><operator pos:line="12" pos:column="64">::<pos:position pos:line="12" pos:column="66"/></operator><name pos:line="12" pos:column="66">ctApplicationData<pos:position pos:line="12" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="85"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">currentContentType<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">!=<pos:position pos:line="14" pos:column="30"/></operator> <name><name pos:line="14" pos:column="31">record<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">.<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="38">type<pos:position pos:line="14" pos:column="42"/></name></name></expr>)<pos:position pos:line="14" pos:column="43"/></condition><then pos:line="14" pos:column="43"> <block pos:line="14" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">Must<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><call><name><name pos:line="15" pos:column="14">tkMessages<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">.<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">atEnd<pos:position pos:line="15" pos:column="30"/></name></name><argument_list pos:line="15" pos:column="30">()<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt> <comment type="line" pos:line="15" pos:column="35">// no currentContentType leftovers</comment>
        <expr_stmt><expr><name pos:line="16" pos:column="9">fragments<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <name><name pos:line="16" pos:column="21">record<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">.<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="28">fragment<pos:position pos:line="16" pos:column="36"/></name></name></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="17" pos:column="9">tkMessages<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">reset<pos:position pos:line="17" pos:column="25"/></name></name><argument_list pos:line="17" pos:column="25">(<argument><expr><name pos:line="17" pos:column="26">fragments<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="17" pos:column="37">true<pos:position pos:line="17" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt> <comment type="line" pos:line="17" pos:column="44">// true because more fragments may come</comment>
        <expr_stmt><expr><name pos:line="18" pos:column="9">currentContentType<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <name><name pos:line="18" pos:column="30">record<pos:position pos:line="18" pos:column="36"/></name><operator pos:line="18" pos:column="36">.<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="37">type<pos:position pos:line="18" pos:column="41"/></name></name></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then> <else pos:line="19" pos:column="7">else <block pos:line="19" pos:column="12">{
        <expr_stmt><expr><call><name><name pos:line="20" pos:column="9">fragments<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">.<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">append<pos:position pos:line="20" pos:column="25"/></name></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name><name pos:line="20" pos:column="26">record<pos:position pos:line="20" pos:column="32"/></name><operator pos:line="20" pos:column="32">.<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="33">fragment<pos:position pos:line="20" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">tkMessages<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">.<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="20">reinput<pos:position pos:line="21" pos:column="27"/></name></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">fragments<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="21" pos:column="39">true<pos:position pos:line="21" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt> <comment type="line" pos:line="21" pos:column="46">// true because more fragments may come</comment>
        <expr_stmt><expr><call><name><name pos:line="22" pos:column="9">tkMessages<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">.<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">rollback<pos:position pos:line="22" pos:column="28"/></name></name><argument_list pos:line="22" pos:column="28">()<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">parseMessages<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">()<pos:position pos:line="24" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
