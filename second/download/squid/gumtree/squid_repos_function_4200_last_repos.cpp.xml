<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4200_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Acl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">OptionExtractor<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">extractOne<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">()<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name><name pos:line="4" pos:column="10">prefix_<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">.<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="18">isEmpty<pos:position pos:line="4" pos:column="25"/></name></name><argument_list pos:line="4" pos:column="25">()<pos:position pos:line="4" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28"> <block pos:line="4" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">extractShort<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">()<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt> <comment type="line" pos:line="5" pos:column="25">// continue with the previously extracted flags</comment>
        <return pos:line="6" pos:column="9">return <expr><literal type="boolean" pos:line="6" pos:column="16">true<pos:position pos:line="6" pos:column="20"/></literal></expr>;<pos:position pos:line="6" pos:column="21"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><call><name pos:line="9" pos:column="10">advance<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">()<pos:position pos:line="9" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return></block></then></if> <comment type="line" pos:line="10" pos:column="23">// end of options (and, possibly, the whole "acl" directive)</comment>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name><name pos:line="12" pos:column="9">prefix_<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">.<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">length<pos:position pos:line="12" pos:column="23"/></name></name><argument_list pos:line="12" pos:column="23">()<pos:position pos:line="12" pos:column="25"/></argument_list></call> <operator pos:line="12" pos:column="26">&lt;<pos:position pos:line="12" pos:column="30"/></operator> <literal type="number" pos:line="12" pos:column="28">2<pos:position pos:line="12" pos:column="29"/></literal></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
        <block type="pseudo"><throw pos:line="13" pos:column="9">throw <expr><call><name pos:line="13" pos:column="15">TexcHere<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><call><name pos:line="13" pos:column="24">ToSBuf<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><literal type="string" pos:line="13" pos:column="31">"truncated(?) ACL flag: "<pos:position pos:line="13" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="58">prefix_<pos:position pos:line="13" pos:column="65"/></name></expr></argument>)<pos:position pos:line="13" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="68"/></throw></block></then></if> <comment type="line" pos:line="13" pos:column="69">// single - or +</comment>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">prefix_<pos:position pos:line="15" pos:column="16"/></name><index pos:line="15" pos:column="16">[<expr><literal type="number" pos:line="15" pos:column="17">0<pos:position pos:line="15" pos:column="18"/></literal></expr>]<pos:position pos:line="15" pos:column="19"/></index></name> <operator pos:line="15" pos:column="20">==<pos:position pos:line="15" pos:column="22"/></operator> <literal type="char" pos:line="15" pos:column="23">'-'<pos:position pos:line="15" pos:column="26"/></literal> <operator pos:line="15" pos:column="27">&amp;&amp;<pos:position pos:line="15" pos:column="37"/></operator> <name><name pos:line="15" pos:column="30">prefix_<pos:position pos:line="15" pos:column="37"/></name><index pos:line="15" pos:column="37">[<expr><literal type="number" pos:line="15" pos:column="38">1<pos:position pos:line="15" pos:column="39"/></literal></expr>]<pos:position pos:line="15" pos:column="40"/></index></name> <operator pos:line="15" pos:column="41">==<pos:position pos:line="15" pos:column="43"/></operator> <literal type="char" pos:line="15" pos:column="44">'-'<pos:position pos:line="15" pos:column="47"/></literal></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48"> <block pos:line="15" pos:column="49">{
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name><name pos:line="16" pos:column="13">prefix_<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">.<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="21">length<pos:position pos:line="16" pos:column="27"/></name></name><argument_list pos:line="16" pos:column="27">()<pos:position pos:line="16" pos:column="29"/></argument_list></call> <operator pos:line="16" pos:column="30">==<pos:position pos:line="16" pos:column="32"/></operator> <literal type="number" pos:line="16" pos:column="33">2<pos:position pos:line="16" pos:column="34"/></literal></expr>)<pos:position pos:line="16" pos:column="35"/></condition><then pos:line="16" pos:column="35">
            <block type="pseudo"><return pos:line="17" pos:column="13">return <expr><literal type="boolean" pos:line="17" pos:column="20">false<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></return></block></then></if> <comment type="line" pos:line="17" pos:column="27">// skipped "--", an explicit end-of-options marker</comment>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">extractWhole<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">()<pos:position pos:line="18" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><literal type="boolean" pos:line="19" pos:column="16">true<pos:position pos:line="19" pos:column="20"/></literal></expr>;<pos:position pos:line="19" pos:column="21"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name><name pos:line="22" pos:column="9">prefix_<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">.<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">length<pos:position pos:line="22" pos:column="23"/></name></name><argument_list pos:line="22" pos:column="23">()<pos:position pos:line="22" pos:column="25"/></argument_list></call> <operator pos:line="22" pos:column="26">==<pos:position pos:line="22" pos:column="28"/></operator> <literal type="number" pos:line="22" pos:column="29">2<pos:position pos:line="22" pos:column="30"/></literal></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31"> <block pos:line="22" pos:column="32">{ <comment type="line" pos:line="22" pos:column="34">// common trivial case: -x or +y</comment>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">extractWhole<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">()<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
        <return pos:line="24" pos:column="9">return <expr><literal type="boolean" pos:line="24" pos:column="16">true<pos:position pos:line="24" pos:column="20"/></literal></expr>;<pos:position pos:line="24" pos:column="21"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="27" pos:column="5">// -xyz or +xyz</comment>
    <expr_stmt><expr><name pos:line="28" pos:column="5">letterPos_<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <literal type="number" pos:line="28" pos:column="18">1<pos:position pos:line="28" pos:column="19"/></literal></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">extractShort<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">()<pos:position pos:line="29" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="20"/></expr_stmt>
    <return pos:line="30" pos:column="5">return <expr><literal type="boolean" pos:line="30" pos:column="12">true<pos:position pos:line="30" pos:column="16"/></literal></expr>;<pos:position pos:line="30" pos:column="17"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
