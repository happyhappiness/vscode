<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_851_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">comm_udp_recvfrom<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">fd<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">void<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">buf<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">size_t<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">len<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">flags<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="61">IpAddress<pos:position pos:line="2" pos:column="70"/></name> <modifier pos:line="2" pos:column="71">&amp;<pos:position pos:line="2" pos:column="76"/></modifier></type><name pos:line="2" pos:column="72">from<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name><name pos:line="4" pos:column="5">statCounter<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">.<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">syscalls<pos:position pos:line="4" pos:column="25"/></name><operator pos:line="4" pos:column="25">.<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="26">sock<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">.<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="31">recvfroms<pos:position pos:line="4" pos:column="40"/></name></name><operator pos:line="4" pos:column="40">++<pos:position pos:line="4" pos:column="42"/></operator></expr>;<pos:position pos:line="4" pos:column="43"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">x<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><literal type="number" pos:line="5" pos:column="13">0<pos:position pos:line="5" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">addrinfo<pos:position pos:line="6" pos:column="20"/></name></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">AI<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><name pos:line="6" pos:column="27">NULL<pos:position pos:line="6" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">5<pos:position pos:line="8" pos:column="13"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="8" pos:column="14">8<pos:position pos:line="8" pos:column="15"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="17">"comm_udp_recvfrom: FD "<pos:position pos:line="8" pos:column="41"/></literal> <operator pos:line="8" pos:column="42">&lt;&lt;<pos:position pos:line="8" pos:column="50"/></operator> <name pos:line="8" pos:column="45">fd<pos:position pos:line="8" pos:column="47"/></name> <operator pos:line="8" pos:column="48">&lt;&lt;<pos:position pos:line="8" pos:column="56"/></operator> <literal type="string" pos:line="8" pos:column="51">" from "<pos:position pos:line="8" pos:column="59"/></literal> <operator pos:line="8" pos:column="60">&lt;&lt;<pos:position pos:line="8" pos:column="68"/></operator> <name pos:line="8" pos:column="63">from<pos:position pos:line="8" pos:column="67"/></name></expr></argument>)<pos:position pos:line="8" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="69"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">( <argument><expr><name pos:line="10" pos:column="13">NULL<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">==<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">AI<pos:position pos:line="10" pos:column="23"/></name></expr></argument> )<pos:position pos:line="10" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">from<pos:position pos:line="12" pos:column="9"/></name><operator pos:line="12" pos:column="9">.<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">InitAddrInfo<pos:position pos:line="12" pos:column="22"/></name></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">AI<pos:position pos:line="12" pos:column="25"/></name></expr></argument>)<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">x<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <call><name pos:line="14" pos:column="9">recvfrom<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><name pos:line="14" pos:column="18">fd<pos:position pos:line="14" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="22">buf<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="27">len<pos:position pos:line="14" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="32">flags<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="39">AI<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">-&gt;<pos:position pos:line="14" pos:column="46"/></operator><name pos:line="14" pos:column="43">ai_addr<pos:position pos:line="14" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="52">&amp;<pos:position pos:line="14" pos:column="57"/></operator><name><name pos:line="14" pos:column="53">AI<pos:position pos:line="14" pos:column="55"/></name><operator pos:line="14" pos:column="55">-&gt;<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="57">ai_addrlen<pos:position pos:line="14" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="69"/></expr_stmt>

    <expr_stmt><expr><name pos:line="16" pos:column="5">from<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <operator pos:line="16" pos:column="12">*<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">AI<pos:position pos:line="16" pos:column="15"/></name></expr>;<pos:position pos:line="16" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="18" pos:column="5">from<pos:position pos:line="18" pos:column="9"/></name><operator pos:line="18" pos:column="9">.<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">FreeAddrInfo<pos:position pos:line="18" pos:column="22"/></name></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">AI<pos:position pos:line="18" pos:column="25"/></name></expr></argument>)<pos:position pos:line="18" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>

    <return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">x<pos:position pos:line="20" pos:column="13"/></name></expr>;<pos:position pos:line="20" pos:column="14"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
