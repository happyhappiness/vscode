<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3212_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">MemStoreRr<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">run<pos:position pos:line="1" pos:column="21"/></name></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">RunnerRegistry<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">&amp;<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="44">r<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">assert<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><call><name><name pos:line="3" pos:column="12">Config<pos:position pos:line="3" pos:column="18"/></name><operator pos:line="3" pos:column="18">.<pos:position pos:line="3" pos:column="19"/></operator><name pos:line="3" pos:column="19">memShared<pos:position pos:line="3" pos:column="28"/></name><operator pos:line="3" pos:column="28">.<pos:position pos:line="3" pos:column="29"/></operator><name pos:line="3" pos:column="29">configured<pos:position pos:line="3" pos:column="39"/></name></name><argument_list pos:line="3" pos:column="39">()<pos:position pos:line="3" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">Ipc<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">::<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">Mem<pos:position pos:line="4" pos:column="13"/></name><operator pos:line="4" pos:column="13">::<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">RegisteredRunner<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">::<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="33">run<pos:position pos:line="4" pos:column="36"/></name></name><argument_list pos:line="4" pos:column="36">(<argument><expr><name pos:line="4" pos:column="37">r<pos:position pos:line="4" pos:column="38"/></name></expr></argument>)<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="40"/></expr_stmt>
}<pos:position pos:line="5" pos:column="2"/></block></function></unit>
