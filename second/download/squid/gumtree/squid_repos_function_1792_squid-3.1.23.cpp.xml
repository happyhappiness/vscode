<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1792_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>

<name pos:line="3" pos:column="1">neighborsUdpAck<pos:position pos:line="3" pos:column="16"/></name><parameter_list pos:line="3" pos:column="16">(<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">cache_key<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type> <name pos:line="3" pos:column="35">key<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="40">icp_common_t<pos:position pos:line="3" pos:column="52"/></name> <modifier pos:line="3" pos:column="53">*<pos:position pos:line="3" pos:column="54"/></modifier></type> <name pos:line="3" pos:column="55">header<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="63">const<pos:position pos:line="3" pos:column="68"/></specifier> <name pos:line="3" pos:column="69">IpAddress<pos:position pos:line="3" pos:column="78"/></name> <modifier pos:line="3" pos:column="79">&amp;<pos:position pos:line="3" pos:column="84"/></modifier></type><name pos:line="3" pos:column="80">from<pos:position pos:line="3" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="85"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">peer<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">p<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name pos:line="5" pos:column="15">NULL<pos:position pos:line="5" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">StoreEntry<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">entry<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">MemObject<pos:position pos:line="7" pos:column="14"/></name> <modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type><name pos:line="7" pos:column="16">mem<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name pos:line="7" pos:column="22">NULL<pos:position pos:line="7" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">peer_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">ntype<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><name pos:line="8" pos:column="20">PEER_NONE<pos:position pos:line="8" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">opcode_d<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">icp_opcode<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">opcode<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><operator pos:line="10" pos:column="25">(<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">icp_opcode<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">)<pos:position pos:line="10" pos:column="37"/></operator> <name><name pos:line="10" pos:column="38">header<pos:position pos:line="10" pos:column="44"/></name><operator pos:line="10" pos:column="44">-&gt;<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="46">opcode<pos:position pos:line="10" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="53"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="number" pos:line="12" pos:column="12">15<pos:position pos:line="12" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="16">6<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="19">"neighborsUdpAck: opcode "<pos:position pos:line="12" pos:column="45"/></literal> <operator pos:line="12" pos:column="46">&lt;&lt;<pos:position pos:line="12" pos:column="54"/></operator> <name pos:line="12" pos:column="49">opcode<pos:position pos:line="12" pos:column="55"/></name> <operator pos:line="12" pos:column="56">&lt;&lt;<pos:position pos:line="12" pos:column="64"/></operator> <literal type="string" pos:line="12" pos:column="59">" '"<pos:position pos:line="12" pos:column="63"/></literal> <operator pos:line="12" pos:column="64">&lt;&lt;<pos:position pos:line="12" pos:column="72"/></operator> <call><name pos:line="12" pos:column="67">storeKeyText<pos:position pos:line="12" pos:column="79"/></name><argument_list pos:line="12" pos:column="79">(<argument><expr><name pos:line="12" pos:column="80">key<pos:position pos:line="12" pos:column="83"/></name></expr></argument>)<pos:position pos:line="12" pos:column="84"/></argument_list></call> <operator pos:line="12" pos:column="85">&lt;&lt;<pos:position pos:line="12" pos:column="93"/></operator> <literal type="string" pos:line="12" pos:column="88">"'"<pos:position pos:line="12" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="93"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">NULL<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">!=<pos:position pos:line="14" pos:column="16"/></operator> <operator pos:line="14" pos:column="17">(<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">entry<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <call><name><name pos:line="14" pos:column="26">Store<pos:position pos:line="14" pos:column="31"/></name><operator pos:line="14" pos:column="31">::<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="33">Root<pos:position pos:line="14" pos:column="37"/></name></name><argument_list pos:line="14" pos:column="37">()<pos:position pos:line="14" pos:column="39"/></argument_list></call><operator pos:line="14" pos:column="39">.<pos:position pos:line="14" pos:column="40"/></operator><call><name pos:line="14" pos:column="40">get<pos:position pos:line="14" pos:column="43"/></name><argument_list pos:line="14" pos:column="43">(<argument><expr><name pos:line="14" pos:column="44">key<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call><operator pos:line="14" pos:column="48">)<pos:position pos:line="14" pos:column="49"/></operator></expr>)<pos:position pos:line="14" pos:column="50"/></condition><then pos:line="14" pos:column="50">
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">mem<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <name><name pos:line="15" pos:column="15">entry<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">mem_obj<pos:position pos:line="15" pos:column="29"/></name></name></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">(<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">p<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <call><name pos:line="17" pos:column="14">whichPeer<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">from<pos:position pos:line="17" pos:column="28"/></name></expr></argument>)<pos:position pos:line="17" pos:column="29"/></argument_list></call><operator pos:line="17" pos:column="29">)<pos:position pos:line="17" pos:column="30"/></operator></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="9">neighborAlive<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">p<pos:position pos:line="18" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="26">mem<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="31">header<pos:position pos:line="18" pos:column="37"/></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">opcode<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">&gt;<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="18">ICP_END<pos:position pos:line="20" pos:column="25"/></name></expr>)<pos:position pos:line="20" pos:column="26"/></condition><then pos:line="20" pos:column="26">
        <block type="pseudo"><return pos:line="21" pos:column="9">return;<pos:position pos:line="21" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="23" pos:column="5">opcode_d<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <name><name pos:line="23" pos:column="16">icp_opcode_str<pos:position pos:line="23" pos:column="30"/></name><index pos:line="23" pos:column="30">[<expr><name pos:line="23" pos:column="31">opcode<pos:position pos:line="23" pos:column="37"/></name></expr>]<pos:position pos:line="23" pos:column="38"/></index></name></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">p<pos:position pos:line="25" pos:column="10"/></name></expr>)<pos:position pos:line="25" pos:column="11"/></condition><then pos:line="25" pos:column="11">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="9">neighborUpdateRtt<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><name pos:line="26" pos:column="27">p<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="30">mem<pos:position pos:line="26" pos:column="33"/></name></expr></argument>)<pos:position pos:line="26" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="28" pos:column="5">/* Does the entry exist? */</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">NULL<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">==<pos:position pos:line="29" pos:column="16"/></operator> <name pos:line="29" pos:column="17">entry<pos:position pos:line="29" pos:column="22"/></name></expr>)<pos:position pos:line="29" pos:column="23"/></condition><then pos:line="29" pos:column="23"> <block pos:line="29" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">12<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">3<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="23">"neighborsUdpAck: Cache key '"<pos:position pos:line="30" pos:column="53"/></literal> <operator pos:line="30" pos:column="54">&lt;&lt;<pos:position pos:line="30" pos:column="62"/></operator> <call><name pos:line="30" pos:column="57">storeKeyText<pos:position pos:line="30" pos:column="69"/></name><argument_list pos:line="30" pos:column="69">(<argument><expr><name pos:line="30" pos:column="70">key<pos:position pos:line="30" pos:column="73"/></name></expr></argument>)<pos:position pos:line="30" pos:column="74"/></argument_list></call> <operator pos:line="30" pos:column="75">&lt;&lt;<pos:position pos:line="30" pos:column="83"/></operator> <literal type="string" pos:line="30" pos:column="78">"' not found"<pos:position pos:line="30" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="93"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">neighborCountIgnored<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">p<pos:position pos:line="31" pos:column="31"/></name></expr></argument>)<pos:position pos:line="31" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
        <return pos:line="32" pos:column="9">return;<pos:position pos:line="32" pos:column="16"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="35" pos:column="5">/* check if someone is already fetching it */</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><call><name pos:line="36" pos:column="9">EBIT_TEST<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><name><name pos:line="36" pos:column="19">entry<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">flags<pos:position pos:line="36" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="33">ENTRY_DISPATCHED<pos:position pos:line="36" pos:column="49"/></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="51"/></condition><then pos:line="36" pos:column="51"> <block pos:line="36" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">debugs<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><literal type="number" pos:line="37" pos:column="16">15<pos:position pos:line="37" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="20">3<pos:position pos:line="37" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="23">"neighborsUdpAck: '"<pos:position pos:line="37" pos:column="43"/></literal> <operator pos:line="37" pos:column="44">&lt;&lt;<pos:position pos:line="37" pos:column="52"/></operator> <call><name pos:line="37" pos:column="47">storeKeyText<pos:position pos:line="37" pos:column="59"/></name><argument_list pos:line="37" pos:column="59">(<argument><expr><name pos:line="37" pos:column="60">key<pos:position pos:line="37" pos:column="63"/></name></expr></argument>)<pos:position pos:line="37" pos:column="64"/></argument_list></call> <operator pos:line="37" pos:column="65">&lt;&lt;<pos:position pos:line="37" pos:column="73"/></operator> <literal type="string" pos:line="37" pos:column="68">"' already being fetched."<pos:position pos:line="37" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="96"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">neighborCountIgnored<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><name pos:line="38" pos:column="30">p<pos:position pos:line="38" pos:column="31"/></name></expr></argument>)<pos:position pos:line="38" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
        <return pos:line="39" pos:column="9">return;<pos:position pos:line="39" pos:column="16"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">mem<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">==<pos:position pos:line="42" pos:column="15"/></operator> <name pos:line="42" pos:column="16">NULL<pos:position pos:line="42" pos:column="20"/></name></expr>)<pos:position pos:line="42" pos:column="21"/></condition><then pos:line="42" pos:column="21"> <block pos:line="42" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">debugs<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><literal type="number" pos:line="43" pos:column="16">15<pos:position pos:line="43" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="20">2<pos:position pos:line="43" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="23">"Ignoring "<pos:position pos:line="43" pos:column="34"/></literal> <operator pos:line="43" pos:column="35">&lt;&lt;<pos:position pos:line="43" pos:column="43"/></operator> <name pos:line="43" pos:column="38">opcode_d<pos:position pos:line="43" pos:column="46"/></name> <operator pos:line="43" pos:column="47">&lt;&lt;<pos:position pos:line="43" pos:column="55"/></operator> <literal type="string" pos:line="43" pos:column="50">" for missing mem_obj: "<pos:position pos:line="43" pos:column="74"/></literal> <operator pos:line="43" pos:column="75">&lt;&lt;<pos:position pos:line="43" pos:column="83"/></operator> <call><name pos:line="43" pos:column="78">storeKeyText<pos:position pos:line="43" pos:column="90"/></name><argument_list pos:line="43" pos:column="90">(<argument><expr><name pos:line="43" pos:column="91">key<pos:position pos:line="43" pos:column="94"/></name></expr></argument>)<pos:position pos:line="43" pos:column="95"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="97"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">neighborCountIgnored<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">p<pos:position pos:line="44" pos:column="31"/></name></expr></argument>)<pos:position pos:line="44" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt>
        <return pos:line="45" pos:column="9">return;<pos:position pos:line="45" pos:column="16"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name><name pos:line="48" pos:column="9">entry<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">-&gt;<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="16">ping_status<pos:position pos:line="48" pos:column="27"/></name></name> <operator pos:line="48" pos:column="28">!=<pos:position pos:line="48" pos:column="30"/></operator> <name pos:line="48" pos:column="31">PING_WAITING<pos:position pos:line="48" pos:column="43"/></name></expr>)<pos:position pos:line="48" pos:column="44"/></condition><then pos:line="48" pos:column="44"> <block pos:line="48" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">debugs<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">(<argument><expr><literal type="number" pos:line="49" pos:column="16">15<pos:position pos:line="49" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="20">2<pos:position pos:line="49" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="23">"neighborsUdpAck: Late "<pos:position pos:line="49" pos:column="47"/></literal> <operator pos:line="49" pos:column="48">&lt;&lt;<pos:position pos:line="49" pos:column="56"/></operator> <name pos:line="49" pos:column="51">opcode_d<pos:position pos:line="49" pos:column="59"/></name> <operator pos:line="49" pos:column="60">&lt;&lt;<pos:position pos:line="49" pos:column="68"/></operator> <literal type="string" pos:line="49" pos:column="63">" for "<pos:position pos:line="49" pos:column="70"/></literal> <operator pos:line="49" pos:column="71">&lt;&lt;<pos:position pos:line="49" pos:column="79"/></operator> <call><name pos:line="49" pos:column="74">storeKeyText<pos:position pos:line="49" pos:column="86"/></name><argument_list pos:line="49" pos:column="86">(<argument><expr><name pos:line="49" pos:column="87">key<pos:position pos:line="49" pos:column="90"/></name></expr></argument>)<pos:position pos:line="49" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="93"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">neighborCountIgnored<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">p<pos:position pos:line="50" pos:column="31"/></name></expr></argument>)<pos:position pos:line="50" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt>
        <return pos:line="51" pos:column="9">return;<pos:position pos:line="51" pos:column="16"/></return>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>

    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name><name pos:line="54" pos:column="9">entry<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">-&gt;<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="16">lock_count<pos:position pos:line="54" pos:column="26"/></name></name> <operator pos:line="54" pos:column="27">==<pos:position pos:line="54" pos:column="29"/></operator> <literal type="number" pos:line="54" pos:column="30">0<pos:position pos:line="54" pos:column="31"/></literal></expr>)<pos:position pos:line="54" pos:column="32"/></condition><then pos:line="54" pos:column="32"> <block pos:line="54" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">debugs<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><literal type="number" pos:line="55" pos:column="16">12<pos:position pos:line="55" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="20">1<pos:position pos:line="55" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="23">"neighborsUdpAck: '"<pos:position pos:line="55" pos:column="43"/></literal> <operator pos:line="55" pos:column="44">&lt;&lt;<pos:position pos:line="55" pos:column="52"/></operator> <call><name pos:line="55" pos:column="47">storeKeyText<pos:position pos:line="55" pos:column="59"/></name><argument_list pos:line="55" pos:column="59">(<argument><expr><name pos:line="55" pos:column="60">key<pos:position pos:line="55" pos:column="63"/></name></expr></argument>)<pos:position pos:line="55" pos:column="64"/></argument_list></call> <operator pos:line="55" pos:column="65">&lt;&lt;<pos:position pos:line="55" pos:column="73"/></operator> <literal type="string" pos:line="55" pos:column="68">"' has no locks"<pos:position pos:line="55" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="86"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">neighborCountIgnored<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name pos:line="56" pos:column="30">p<pos:position pos:line="56" pos:column="31"/></name></expr></argument>)<pos:position pos:line="56" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="33"/></expr_stmt>
        <return pos:line="57" pos:column="9">return;<pos:position pos:line="57" pos:column="16"/></return>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="60" pos:column="5">debugs<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><literal type="number" pos:line="60" pos:column="12">15<pos:position pos:line="60" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="16">3<pos:position pos:line="60" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="19">"neighborsUdpAck: "<pos:position pos:line="60" pos:column="38"/></literal> <operator pos:line="60" pos:column="39">&lt;&lt;<pos:position pos:line="60" pos:column="47"/></operator> <name pos:line="60" pos:column="42">opcode_d<pos:position pos:line="60" pos:column="50"/></name> <operator pos:line="60" pos:column="51">&lt;&lt;<pos:position pos:line="60" pos:column="59"/></operator> <literal type="string" pos:line="60" pos:column="54">" for '"<pos:position pos:line="60" pos:column="62"/></literal> <operator pos:line="60" pos:column="63">&lt;&lt;<pos:position pos:line="60" pos:column="71"/></operator> <call><name pos:line="60" pos:column="66">storeKeyText<pos:position pos:line="60" pos:column="78"/></name><argument_list pos:line="60" pos:column="78">(<argument><expr><name pos:line="60" pos:column="79">key<pos:position pos:line="60" pos:column="82"/></name></expr></argument>)<pos:position pos:line="60" pos:column="83"/></argument_list></call> <operator pos:line="60" pos:column="84">&lt;&lt;<pos:position pos:line="60" pos:column="92"/></operator> <literal type="string" pos:line="60" pos:column="87">"' from "<pos:position pos:line="60" pos:column="96"/></literal> <operator pos:line="60" pos:column="97">&lt;&lt;<pos:position pos:line="60" pos:column="105"/></operator> <operator pos:line="60" pos:column="100">(<pos:position pos:line="60" pos:column="101"/></operator><ternary><condition><expr><name pos:line="60" pos:column="101">p<pos:position pos:line="60" pos:column="102"/></name></expr> ?<pos:position pos:line="60" pos:column="104"/></condition><then pos:line="60" pos:column="104"> <expr><name><name pos:line="60" pos:column="105">p<pos:position pos:line="60" pos:column="106"/></name><operator pos:line="60" pos:column="106">-&gt;<pos:position pos:line="60" pos:column="111"/></operator><name pos:line="60" pos:column="108">host<pos:position pos:line="60" pos:column="112"/></name></name></expr> <pos:position pos:line="60" pos:column="113"/></then><else pos:line="60" pos:column="113">: <expr><literal type="string" pos:line="60" pos:column="115">"source"<pos:position pos:line="60" pos:column="123"/></literal></expr></else></ternary><operator pos:line="60" pos:column="123">)<pos:position pos:line="60" pos:column="124"/></operator> <operator pos:line="60" pos:column="125">&lt;&lt;<pos:position pos:line="60" pos:column="133"/></operator> <literal type="string" pos:line="60" pos:column="128">" "<pos:position pos:line="60" pos:column="131"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="132"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="133"/></expr_stmt>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">p<pos:position pos:line="62" pos:column="10"/></name></expr>)<pos:position pos:line="62" pos:column="11"/></condition><then pos:line="62" pos:column="11"> <block pos:line="62" pos:column="12">{
        <expr_stmt><expr><name pos:line="63" pos:column="9">ntype<pos:position pos:line="63" pos:column="14"/></name> <operator pos:line="63" pos:column="15">=<pos:position pos:line="63" pos:column="16"/></operator> <call><name pos:line="63" pos:column="17">neighborType<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">p<pos:position pos:line="63" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="33">mem<pos:position pos:line="63" pos:column="36"/></name><operator pos:line="63" pos:column="36">-&gt;<pos:position pos:line="63" pos:column="41"/></operator><name pos:line="63" pos:column="38">request<pos:position pos:line="63" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>

    <if pos:line="66" pos:column="5">if <condition pos:line="66" pos:column="8">(<expr><call><name pos:line="66" pos:column="9">ignoreMulticastReply<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">(<argument><expr><name pos:line="66" pos:column="30">p<pos:position pos:line="66" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="33">mem<pos:position pos:line="66" pos:column="36"/></name></expr></argument>)<pos:position pos:line="66" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="38"/></condition><then pos:line="66" pos:column="38"> <block pos:line="66" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">neighborCountIgnored<pos:position pos:line="67" pos:column="29"/></name><argument_list pos:line="67" pos:column="29">(<argument><expr><name pos:line="67" pos:column="30">p<pos:position pos:line="67" pos:column="31"/></name></expr></argument>)<pos:position pos:line="67" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></then> <elseif pos:line="68" pos:column="7">else <if pos:line="68" pos:column="12">if <condition pos:line="68" pos:column="15">(<expr><name pos:line="68" pos:column="16">opcode<pos:position pos:line="68" pos:column="22"/></name> <operator pos:line="68" pos:column="23">==<pos:position pos:line="68" pos:column="25"/></operator> <name pos:line="68" pos:column="26">ICP_MISS<pos:position pos:line="68" pos:column="34"/></name></expr>)<pos:position pos:line="68" pos:column="35"/></condition><then pos:line="68" pos:column="35"> <block pos:line="68" pos:column="36">{
        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">p<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">==<pos:position pos:line="69" pos:column="17"/></operator> <name pos:line="69" pos:column="18">NULL<pos:position pos:line="69" pos:column="22"/></name></expr>)<pos:position pos:line="69" pos:column="23"/></condition><then pos:line="69" pos:column="23"> <block pos:line="69" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="70" pos:column="13">neighborIgnoreNonPeer<pos:position pos:line="70" pos:column="34"/></name><argument_list pos:line="70" pos:column="34">(<argument><expr><name pos:line="70" pos:column="35">from<pos:position pos:line="70" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="41">opcode<pos:position pos:line="70" pos:column="47"/></name></expr></argument>)<pos:position pos:line="70" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="71" pos:column="10"/></block></then> <else pos:line="71" pos:column="11">else <block pos:line="71" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">mem<pos:position pos:line="72" pos:column="16"/></name><operator pos:line="72" pos:column="16">-&gt;<pos:position pos:line="72" pos:column="21"/></operator><name pos:line="72" pos:column="18">ping_reply_callback<pos:position pos:line="72" pos:column="37"/></name></name><argument_list pos:line="72" pos:column="37">(<argument><expr><name pos:line="72" pos:column="38">p<pos:position pos:line="72" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="41">ntype<pos:position pos:line="72" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="48">PROTO_ICP<pos:position pos:line="72" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="59">header<pos:position pos:line="72" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="67">mem<pos:position pos:line="72" pos:column="70"/></name><operator pos:line="72" pos:column="70">-&gt;<pos:position pos:line="72" pos:column="75"/></operator><name pos:line="72" pos:column="72">ircb_data<pos:position pos:line="72" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="83"/></expr_stmt>
        }<pos:position pos:line="73" pos:column="10"/></block></else></if>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if></elseif> <elseif pos:line="74" pos:column="7">else <if pos:line="74" pos:column="12">if <condition pos:line="74" pos:column="15">(<expr><name pos:line="74" pos:column="16">opcode<pos:position pos:line="74" pos:column="22"/></name> <operator pos:line="74" pos:column="23">==<pos:position pos:line="74" pos:column="25"/></operator> <name pos:line="74" pos:column="26">ICP_HIT<pos:position pos:line="74" pos:column="33"/></name></expr>)<pos:position pos:line="74" pos:column="34"/></condition><then pos:line="74" pos:column="34"> <block pos:line="74" pos:column="35">{
        <if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name pos:line="75" pos:column="13">p<pos:position pos:line="75" pos:column="14"/></name> <operator pos:line="75" pos:column="15">==<pos:position pos:line="75" pos:column="17"/></operator> <name pos:line="75" pos:column="18">NULL<pos:position pos:line="75" pos:column="22"/></name></expr>)<pos:position pos:line="75" pos:column="23"/></condition><then pos:line="75" pos:column="23"> <block pos:line="75" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="76" pos:column="13">neighborIgnoreNonPeer<pos:position pos:line="76" pos:column="34"/></name><argument_list pos:line="76" pos:column="34">(<argument><expr><name pos:line="76" pos:column="35">from<pos:position pos:line="76" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="41">opcode<pos:position pos:line="76" pos:column="47"/></name></expr></argument>)<pos:position pos:line="76" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="77" pos:column="10"/></block></then> <else pos:line="77" pos:column="11">else <block pos:line="77" pos:column="16">{
            <expr_stmt><expr><name><name pos:line="78" pos:column="13">header<pos:position pos:line="78" pos:column="19"/></name><operator pos:line="78" pos:column="19">-&gt;<pos:position pos:line="78" pos:column="24"/></operator><name pos:line="78" pos:column="21">opcode<pos:position pos:line="78" pos:column="27"/></name></name> <operator pos:line="78" pos:column="28">=<pos:position pos:line="78" pos:column="29"/></operator> <name pos:line="78" pos:column="30">ICP_HIT<pos:position pos:line="78" pos:column="37"/></name></expr>;<pos:position pos:line="78" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">mem<pos:position pos:line="79" pos:column="16"/></name><operator pos:line="79" pos:column="16">-&gt;<pos:position pos:line="79" pos:column="21"/></operator><name pos:line="79" pos:column="18">ping_reply_callback<pos:position pos:line="79" pos:column="37"/></name></name><argument_list pos:line="79" pos:column="37">(<argument><expr><name pos:line="79" pos:column="38">p<pos:position pos:line="79" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="41">ntype<pos:position pos:line="79" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="48">PROTO_ICP<pos:position pos:line="79" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="59">header<pos:position pos:line="79" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="67">mem<pos:position pos:line="79" pos:column="70"/></name><operator pos:line="79" pos:column="70">-&gt;<pos:position pos:line="79" pos:column="75"/></operator><name pos:line="79" pos:column="72">ircb_data<pos:position pos:line="79" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="83"/></expr_stmt>
        }<pos:position pos:line="80" pos:column="10"/></block></else></if>
    }<pos:position pos:line="81" pos:column="6"/></block></then></if></elseif> <elseif pos:line="81" pos:column="7">else <if pos:line="81" pos:column="12">if <condition pos:line="81" pos:column="15">(<expr><name pos:line="81" pos:column="16">opcode<pos:position pos:line="81" pos:column="22"/></name> <operator pos:line="81" pos:column="23">==<pos:position pos:line="81" pos:column="25"/></operator> <name pos:line="81" pos:column="26">ICP_DECHO<pos:position pos:line="81" pos:column="35"/></name></expr>)<pos:position pos:line="81" pos:column="36"/></condition><then pos:line="81" pos:column="36"> <block pos:line="81" pos:column="37">{
        <if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">p<pos:position pos:line="82" pos:column="14"/></name> <operator pos:line="82" pos:column="15">==<pos:position pos:line="82" pos:column="17"/></operator> <name pos:line="82" pos:column="18">NULL<pos:position pos:line="82" pos:column="22"/></name></expr>)<pos:position pos:line="82" pos:column="23"/></condition><then pos:line="82" pos:column="23"> <block pos:line="82" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="83" pos:column="13">neighborIgnoreNonPeer<pos:position pos:line="83" pos:column="34"/></name><argument_list pos:line="83" pos:column="34">(<argument><expr><name pos:line="83" pos:column="35">from<pos:position pos:line="83" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="41">opcode<pos:position pos:line="83" pos:column="47"/></name></expr></argument>)<pos:position pos:line="83" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="84" pos:column="10"/></block></then> <elseif pos:line="84" pos:column="11">else <if pos:line="84" pos:column="16">if <condition pos:line="84" pos:column="19">(<expr><name pos:line="84" pos:column="20">ntype<pos:position pos:line="84" pos:column="25"/></name> <operator pos:line="84" pos:column="26">==<pos:position pos:line="84" pos:column="28"/></operator> <name pos:line="84" pos:column="29">PEER_SIBLING<pos:position pos:line="84" pos:column="41"/></name></expr>)<pos:position pos:line="84" pos:column="42"/></condition><then pos:line="84" pos:column="42"> <block pos:line="84" pos:column="43">{
            <expr_stmt><expr><call><name pos:line="85" pos:column="13">debug_trap<pos:position pos:line="85" pos:column="23"/></name><argument_list pos:line="85" pos:column="23">(<argument><expr><literal type="string" pos:line="85" pos:column="24">"neighborsUdpAck: Found non-ICP cache as SIBLING\n"<pos:position pos:line="85" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="77"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">debug_trap<pos:position pos:line="86" pos:column="23"/></name><argument_list pos:line="86" pos:column="23">(<argument><expr><literal type="string" pos:line="86" pos:column="24">"neighborsUdpAck: non-ICP neighbors must be a PARENT\n"<pos:position pos:line="86" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="81"/></expr_stmt>
        }<pos:position pos:line="87" pos:column="10"/></block></then></if></elseif> <else pos:line="87" pos:column="11">else <block pos:line="87" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">mem<pos:position pos:line="88" pos:column="16"/></name><operator pos:line="88" pos:column="16">-&gt;<pos:position pos:line="88" pos:column="21"/></operator><name pos:line="88" pos:column="18">ping_reply_callback<pos:position pos:line="88" pos:column="37"/></name></name><argument_list pos:line="88" pos:column="37">(<argument><expr><name pos:line="88" pos:column="38">p<pos:position pos:line="88" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="41">ntype<pos:position pos:line="88" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="48">PROTO_ICP<pos:position pos:line="88" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="59">header<pos:position pos:line="88" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="67">mem<pos:position pos:line="88" pos:column="70"/></name><operator pos:line="88" pos:column="70">-&gt;<pos:position pos:line="88" pos:column="75"/></operator><name pos:line="88" pos:column="72">ircb_data<pos:position pos:line="88" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="83"/></expr_stmt>
        }<pos:position pos:line="89" pos:column="10"/></block></else></if>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if></elseif> <elseif pos:line="90" pos:column="7">else <if pos:line="90" pos:column="12">if <condition pos:line="90" pos:column="15">(<expr><name pos:line="90" pos:column="16">opcode<pos:position pos:line="90" pos:column="22"/></name> <operator pos:line="90" pos:column="23">==<pos:position pos:line="90" pos:column="25"/></operator> <name pos:line="90" pos:column="26">ICP_SECHO<pos:position pos:line="90" pos:column="35"/></name></expr>)<pos:position pos:line="90" pos:column="36"/></condition><then pos:line="90" pos:column="36"> <block pos:line="90" pos:column="37">{
        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><name pos:line="91" pos:column="13">p<pos:position pos:line="91" pos:column="14"/></name></expr>)<pos:position pos:line="91" pos:column="15"/></condition><then pos:line="91" pos:column="15"> <block pos:line="91" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">debugs<pos:position pos:line="92" pos:column="19"/></name><argument_list pos:line="92" pos:column="19">(<argument><expr><literal type="number" pos:line="92" pos:column="20">15<pos:position pos:line="92" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="24">1<pos:position pos:line="92" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="27">"Ignoring SECHO from neighbor "<pos:position pos:line="92" pos:column="58"/></literal> <operator pos:line="92" pos:column="59">&lt;&lt;<pos:position pos:line="92" pos:column="67"/></operator> <name><name pos:line="92" pos:column="62">p<pos:position pos:line="92" pos:column="63"/></name><operator pos:line="92" pos:column="63">-&gt;<pos:position pos:line="92" pos:column="68"/></operator><name pos:line="92" pos:column="65">host<pos:position pos:line="92" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="93" pos:column="13">neighborCountIgnored<pos:position pos:line="93" pos:column="33"/></name><argument_list pos:line="93" pos:column="33">(<argument><expr><name pos:line="93" pos:column="34">p<pos:position pos:line="93" pos:column="35"/></name></expr></argument>)<pos:position pos:line="93" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="94" pos:column="10"/></block></then> <else pos:line="94" pos:column="11">else <block pos:line="94" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">debugs<pos:position pos:line="95" pos:column="19"/></name><argument_list pos:line="95" pos:column="19">(<argument><expr><literal type="number" pos:line="95" pos:column="20">15<pos:position pos:line="95" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="24">1<pos:position pos:line="95" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="27">"Unsolicited SECHO from "<pos:position pos:line="95" pos:column="52"/></literal> <operator pos:line="95" pos:column="53">&lt;&lt;<pos:position pos:line="95" pos:column="61"/></operator> <name pos:line="95" pos:column="56">from<pos:position pos:line="95" pos:column="60"/></name></expr></argument>)<pos:position pos:line="95" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="62"/></expr_stmt>
        }<pos:position pos:line="96" pos:column="10"/></block></else></if>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if></elseif> <elseif pos:line="97" pos:column="7">else <if pos:line="97" pos:column="12">if <condition pos:line="97" pos:column="15">(<expr><name pos:line="97" pos:column="16">opcode<pos:position pos:line="97" pos:column="22"/></name> <operator pos:line="97" pos:column="23">==<pos:position pos:line="97" pos:column="25"/></operator> <name pos:line="97" pos:column="26">ICP_DENIED<pos:position pos:line="97" pos:column="36"/></name></expr>)<pos:position pos:line="97" pos:column="37"/></condition><then pos:line="97" pos:column="37"> <block pos:line="97" pos:column="38">{
        <if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">p<pos:position pos:line="98" pos:column="14"/></name> <operator pos:line="98" pos:column="15">==<pos:position pos:line="98" pos:column="17"/></operator> <name pos:line="98" pos:column="18">NULL<pos:position pos:line="98" pos:column="22"/></name></expr>)<pos:position pos:line="98" pos:column="23"/></condition><then pos:line="98" pos:column="23"> <block pos:line="98" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">neighborIgnoreNonPeer<pos:position pos:line="99" pos:column="34"/></name><argument_list pos:line="99" pos:column="34">(<argument><expr><name pos:line="99" pos:column="35">from<pos:position pos:line="99" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="41">opcode<pos:position pos:line="99" pos:column="47"/></name></expr></argument>)<pos:position pos:line="99" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="100" pos:column="10"/></block></then> <elseif pos:line="100" pos:column="11">else <if pos:line="100" pos:column="16">if <condition pos:line="100" pos:column="19">(<expr><name><name pos:line="100" pos:column="20">p<pos:position pos:line="100" pos:column="21"/></name><operator pos:line="100" pos:column="21">-&gt;<pos:position pos:line="100" pos:column="26"/></operator><name pos:line="100" pos:column="23">stats<pos:position pos:line="100" pos:column="28"/></name><operator pos:line="100" pos:column="28">.<pos:position pos:line="100" pos:column="29"/></operator><name pos:line="100" pos:column="29">pings_acked<pos:position pos:line="100" pos:column="40"/></name></name> <operator pos:line="100" pos:column="41">&gt;<pos:position pos:line="100" pos:column="45"/></operator> <literal type="number" pos:line="100" pos:column="43">100<pos:position pos:line="100" pos:column="46"/></literal></expr>)<pos:position pos:line="100" pos:column="47"/></condition><then pos:line="100" pos:column="47"> <block pos:line="100" pos:column="48">{
            <if pos:line="101" pos:column="13">if <condition pos:line="101" pos:column="16">(<expr><literal type="number" pos:line="101" pos:column="17">100<pos:position pos:line="101" pos:column="20"/></literal> <operator pos:line="101" pos:column="21">*<pos:position pos:line="101" pos:column="22"/></operator> <name><name pos:line="101" pos:column="23">p<pos:position pos:line="101" pos:column="24"/></name><operator pos:line="101" pos:column="24">-&gt;<pos:position pos:line="101" pos:column="29"/></operator><name pos:line="101" pos:column="26">icp<pos:position pos:line="101" pos:column="29"/></name><operator pos:line="101" pos:column="29">.<pos:position pos:line="101" pos:column="30"/></operator><name pos:line="101" pos:column="30">counts<pos:position pos:line="101" pos:column="36"/></name><index pos:line="101" pos:column="36">[<expr><name pos:line="101" pos:column="37">ICP_DENIED<pos:position pos:line="101" pos:column="47"/></name></expr>]<pos:position pos:line="101" pos:column="48"/></index></name> <operator pos:line="101" pos:column="49">/<pos:position pos:line="101" pos:column="50"/></operator> <name><name pos:line="101" pos:column="51">p<pos:position pos:line="101" pos:column="52"/></name><operator pos:line="101" pos:column="52">-&gt;<pos:position pos:line="101" pos:column="57"/></operator><name pos:line="101" pos:column="54">stats<pos:position pos:line="101" pos:column="59"/></name><operator pos:line="101" pos:column="59">.<pos:position pos:line="101" pos:column="60"/></operator><name pos:line="101" pos:column="60">pings_acked<pos:position pos:line="101" pos:column="71"/></name></name> <operator pos:line="101" pos:column="72">&gt;<pos:position pos:line="101" pos:column="76"/></operator> <literal type="number" pos:line="101" pos:column="74">95<pos:position pos:line="101" pos:column="76"/></literal></expr>)<pos:position pos:line="101" pos:column="77"/></condition><then pos:line="101" pos:column="77"> <block pos:line="101" pos:column="78">{
                <expr_stmt><expr><call><name pos:line="102" pos:column="17">debugs<pos:position pos:line="102" pos:column="23"/></name><argument_list pos:line="102" pos:column="23">(<argument><expr><literal type="number" pos:line="102" pos:column="24">15<pos:position pos:line="102" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="102" pos:column="28">0<pos:position pos:line="102" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="31">"95%% of replies from '"<pos:position pos:line="102" pos:column="55"/></literal> <operator pos:line="102" pos:column="56">&lt;&lt;<pos:position pos:line="102" pos:column="64"/></operator> <name><name pos:line="102" pos:column="59">p<pos:position pos:line="102" pos:column="60"/></name><operator pos:line="102" pos:column="60">-&gt;<pos:position pos:line="102" pos:column="65"/></operator><name pos:line="102" pos:column="62">host<pos:position pos:line="102" pos:column="66"/></name></name> <operator pos:line="102" pos:column="67">&lt;&lt;<pos:position pos:line="102" pos:column="75"/></operator> <literal type="string" pos:line="102" pos:column="70">"' are UDP_DENIED"<pos:position pos:line="102" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="90"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="103" pos:column="17">debugs<pos:position pos:line="103" pos:column="23"/></name><argument_list pos:line="103" pos:column="23">(<argument><expr><literal type="number" pos:line="103" pos:column="24">15<pos:position pos:line="103" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="103" pos:column="28">0<pos:position pos:line="103" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="31">"Disabling '"<pos:position pos:line="103" pos:column="44"/></literal> <operator pos:line="103" pos:column="45">&lt;&lt;<pos:position pos:line="103" pos:column="53"/></operator> <name><name pos:line="103" pos:column="48">p<pos:position pos:line="103" pos:column="49"/></name><operator pos:line="103" pos:column="49">-&gt;<pos:position pos:line="103" pos:column="54"/></operator><name pos:line="103" pos:column="51">host<pos:position pos:line="103" pos:column="55"/></name></name> <operator pos:line="103" pos:column="56">&lt;&lt;<pos:position pos:line="103" pos:column="64"/></operator> <literal type="string" pos:line="103" pos:column="59">"', please check your configuration."<pos:position pos:line="103" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="98"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="104" pos:column="17">neighborRemove<pos:position pos:line="104" pos:column="31"/></name><argument_list pos:line="104" pos:column="31">(<argument><expr><name pos:line="104" pos:column="32">p<pos:position pos:line="104" pos:column="33"/></name></expr></argument>)<pos:position pos:line="104" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="35"/></expr_stmt>
                <expr_stmt><expr><name pos:line="105" pos:column="17">p<pos:position pos:line="105" pos:column="18"/></name> <operator pos:line="105" pos:column="19">=<pos:position pos:line="105" pos:column="20"/></operator> <name pos:line="105" pos:column="21">NULL<pos:position pos:line="105" pos:column="25"/></name></expr>;<pos:position pos:line="105" pos:column="26"/></expr_stmt>
            }<pos:position pos:line="106" pos:column="14"/></block></then> <else pos:line="106" pos:column="15">else <block pos:line="106" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="107" pos:column="17">neighborCountIgnored<pos:position pos:line="107" pos:column="37"/></name><argument_list pos:line="107" pos:column="37">(<argument><expr><name pos:line="107" pos:column="38">p<pos:position pos:line="107" pos:column="39"/></name></expr></argument>)<pos:position pos:line="107" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="108" pos:column="14"/></block></else></if>
        }<pos:position pos:line="109" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="110" pos:column="6"/></block></then></if></elseif> <elseif pos:line="110" pos:column="7">else <if pos:line="110" pos:column="12">if <condition pos:line="110" pos:column="15">(<expr><name pos:line="110" pos:column="16">opcode<pos:position pos:line="110" pos:column="22"/></name> <operator pos:line="110" pos:column="23">==<pos:position pos:line="110" pos:column="25"/></operator> <name pos:line="110" pos:column="26">ICP_MISS_NOFETCH<pos:position pos:line="110" pos:column="42"/></name></expr>)<pos:position pos:line="110" pos:column="43"/></condition><then pos:line="110" pos:column="43"> <block pos:line="110" pos:column="44">{
        <expr_stmt><expr><call><name><name pos:line="111" pos:column="9">mem<pos:position pos:line="111" pos:column="12"/></name><operator pos:line="111" pos:column="12">-&gt;<pos:position pos:line="111" pos:column="17"/></operator><name pos:line="111" pos:column="14">ping_reply_callback<pos:position pos:line="111" pos:column="33"/></name></name><argument_list pos:line="111" pos:column="33">(<argument><expr><name pos:line="111" pos:column="34">p<pos:position pos:line="111" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="37">ntype<pos:position pos:line="111" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="44">PROTO_ICP<pos:position pos:line="111" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="55">header<pos:position pos:line="111" pos:column="61"/></name></expr></argument>, <argument><expr><name><name pos:line="111" pos:column="63">mem<pos:position pos:line="111" pos:column="66"/></name><operator pos:line="111" pos:column="66">-&gt;<pos:position pos:line="111" pos:column="71"/></operator><name pos:line="111" pos:column="68">ircb_data<pos:position pos:line="111" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="111" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="79"/></expr_stmt>
    }<pos:position pos:line="112" pos:column="6"/></block></then></if></elseif> <else pos:line="112" pos:column="7">else <block pos:line="112" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="113" pos:column="9">debugs<pos:position pos:line="113" pos:column="15"/></name><argument_list pos:line="113" pos:column="15">(<argument><expr><literal type="number" pos:line="113" pos:column="16">15<pos:position pos:line="113" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="113" pos:column="20">0<pos:position pos:line="113" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="23">"neighborsUdpAck: Unexpected ICP reply: "<pos:position pos:line="113" pos:column="64"/></literal> <operator pos:line="113" pos:column="65">&lt;&lt;<pos:position pos:line="113" pos:column="73"/></operator> <name pos:line="113" pos:column="68">opcode_d<pos:position pos:line="113" pos:column="76"/></name></expr></argument>)<pos:position pos:line="113" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="114" pos:column="6"/></block></else></if>
}<pos:position pos:line="115" pos:column="2"/></block></function></unit>
