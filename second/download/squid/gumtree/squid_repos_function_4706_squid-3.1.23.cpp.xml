<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4706_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">UFSStoreState<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">write<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">buf<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">size_t<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">size<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">off_t<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">aOffset<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">FREE<pos:position pos:line="2" pos:column="71"/></name> <modifier pos:line="2" pos:column="72">*<pos:position pos:line="2" pos:column="73"/></modifier></type> <name pos:line="2" pos:column="74">free_func<pos:position pos:line="2" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="84"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">79<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"UFSStoreState::write: dirn "<pos:position pos:line="4" pos:column="48"/></literal> <operator pos:line="4" pos:column="49">&lt;&lt;<pos:position pos:line="4" pos:column="57"/></operator> <name pos:line="4" pos:column="52">swap_dirn<pos:position pos:line="4" pos:column="61"/></name>  <operator pos:line="4" pos:column="63">&lt;&lt;<pos:position pos:line="4" pos:column="71"/></operator> <literal type="string" pos:line="4" pos:column="66">", fileno "<pos:position pos:line="4" pos:column="77"/></literal><operator pos:line="4" pos:column="77">&lt;&lt;<pos:position pos:line="4" pos:column="85"/></operator>
           <call><name><name pos:line="5" pos:column="12">std<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">::<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">setfill<pos:position pos:line="5" pos:column="24"/></name></name><argument_list pos:line="5" pos:column="24">(<argument><expr><literal type="char" pos:line="5" pos:column="25">'0'<pos:position pos:line="5" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call> <operator pos:line="5" pos:column="30">&lt;&lt;<pos:position pos:line="5" pos:column="38"/></operator> <name><name pos:line="5" pos:column="33">std<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">::<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="38">hex<pos:position pos:line="5" pos:column="41"/></name></name> <operator pos:line="5" pos:column="42">&lt;&lt;<pos:position pos:line="5" pos:column="50"/></operator> <name><name pos:line="5" pos:column="45">std<pos:position pos:line="5" pos:column="48"/></name><operator pos:line="5" pos:column="48">::<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="50">uppercase<pos:position pos:line="5" pos:column="59"/></name></name> <operator pos:line="5" pos:column="60">&lt;&lt;<pos:position pos:line="5" pos:column="68"/></operator> <call><name><name pos:line="5" pos:column="63">std<pos:position pos:line="5" pos:column="66"/></name><operator pos:line="5" pos:column="66">::<pos:position pos:line="5" pos:column="68"/></operator><name pos:line="5" pos:column="68">setw<pos:position pos:line="5" pos:column="72"/></name></name><argument_list pos:line="5" pos:column="72">(<argument><expr><literal type="number" pos:line="5" pos:column="73">8<pos:position pos:line="5" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="75"/></argument_list></call> <operator pos:line="5" pos:column="76">&lt;&lt;<pos:position pos:line="5" pos:column="84"/></operator> <name pos:line="5" pos:column="79">swap_filen<pos:position pos:line="5" pos:column="89"/></name></expr></argument>)<pos:position pos:line="5" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="91"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name><name pos:line="7" pos:column="9">theFile<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">error<pos:position pos:line="7" pos:column="23"/></name></name><argument_list pos:line="7" pos:column="23">()<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26"> <block pos:line="7" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">79<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="8" pos:column="19">1<pos:position pos:line="8" pos:column="20"/></literal></expr></argument>,<argument><expr><name pos:line="8" pos:column="21">HERE<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">&lt;&lt;<pos:position pos:line="8" pos:column="34"/></operator> <literal type="string" pos:line="8" pos:column="29">"avoid write on theFile with error"<pos:position pos:line="8" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">79<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="9" pos:column="19">1<pos:position pos:line="9" pos:column="20"/></literal></expr></argument>,<argument><expr><name pos:line="9" pos:column="21">HERE<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">&lt;&lt;<pos:position pos:line="9" pos:column="34"/></operator> <literal type="string" pos:line="9" pos:column="29">"calling free_func for "<pos:position pos:line="9" pos:column="53"/></literal> <operator pos:line="9" pos:column="54">&lt;&lt;<pos:position pos:line="9" pos:column="62"/></operator> <operator pos:line="9" pos:column="57">(<pos:position pos:line="9" pos:column="58"/></operator><name pos:line="9" pos:column="58">void<pos:position pos:line="9" pos:column="62"/></name><operator pos:line="9" pos:column="62">*<pos:position pos:line="9" pos:column="63"/></operator><operator pos:line="9" pos:column="63">)<pos:position pos:line="9" pos:column="64"/></operator> <name pos:line="9" pos:column="65">buf<pos:position pos:line="9" pos:column="68"/></name></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">free_func<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><operator pos:line="10" pos:column="19">(<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="20">void<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></operator><operator pos:line="10" pos:column="25">)<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">buf<pos:position pos:line="10" pos:column="29"/></name></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">queueWrite<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">buf<pos:position pos:line="14" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="21">size<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="27">aOffset<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="36">free_func<pos:position pos:line="14" pos:column="45"/></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">drainWriteQueue<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">()<pos:position pos:line="15" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
