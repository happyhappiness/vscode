<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1444_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">SwapChecksum24<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">set<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">int32_t<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">f1<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">uint64_t<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">f2<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// split the second 64bit word into two 32bit words</comment>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">set<pos:position pos:line="5" pos:column="8"/></name><argument_list pos:line="5" pos:column="8">(<argument><expr><cast type="static" pos:line="5" pos:column="9">static_cast<argument_list type="generic" pos:line="5" pos:column="20">&lt;<argument><expr><name pos:line="5" pos:column="21">uint32_t<pos:position pos:line="5" pos:column="29"/></name></expr></argument>&gt;<pos:position pos:line="5" pos:column="33"/></argument_list><argument_list pos:line="5" pos:column="30">(<argument><expr><name pos:line="5" pos:column="31">f1<pos:position pos:line="5" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5" pos:column="34"/></argument_list></cast></expr></argument>,
        <argument><expr><cast type="static" pos:line="6" pos:column="9">static_cast<argument_list type="generic" pos:line="6" pos:column="20">&lt;<argument><expr><name pos:line="6" pos:column="21">uint32_t<pos:position pos:line="6" pos:column="29"/></name></expr></argument>&gt;<pos:position pos:line="6" pos:column="33"/></argument_list><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">f2<pos:position pos:line="6" pos:column="33"/></name> <operator pos:line="6" pos:column="34">&gt;&gt;<pos:position pos:line="6" pos:column="39"/></operator> <literal type="number" pos:line="6" pos:column="37">32<pos:position pos:line="6" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></cast></expr></argument>,
        <argument><expr><cast type="static" pos:line="7" pos:column="9">static_cast<argument_list type="generic" pos:line="7" pos:column="20">&lt;<argument><expr><name pos:line="7" pos:column="21">uint32_t<pos:position pos:line="7" pos:column="29"/></name></expr></argument>&gt;<pos:position pos:line="7" pos:column="33"/></argument_list><argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">f2<pos:position pos:line="7" pos:column="33"/></name> <operator pos:line="7" pos:column="34">&amp;<pos:position pos:line="7" pos:column="39"/></operator> <literal type="number" pos:line="7" pos:column="36">0xFFFFFFFF<pos:position pos:line="7" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></cast></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
