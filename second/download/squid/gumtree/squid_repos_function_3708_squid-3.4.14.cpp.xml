<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3708_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemBuf<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">vPrintf<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">fmt<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">va_list<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">vargs<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">VA_COPY<pos:position pos:line="4" pos:column="15"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">va_list<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">ap<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">sz<pos:position pos:line="8" pos:column="11"/></name> <init pos:line="8" pos:column="12">= <expr><literal type="number" pos:line="8" pos:column="14">0<pos:position pos:line="8" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name pos:line="9" pos:column="12">fmt<pos:position pos:line="9" pos:column="15"/></name></expr></argument>)<pos:position pos:line="9" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">buf<pos:position pos:line="10" pos:column="15"/></name></expr></argument>)<pos:position pos:line="10" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><operator pos:line="11" pos:column="12">!<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">stolen<pos:position pos:line="11" pos:column="19"/></name></expr></argument>)<pos:position pos:line="11" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt>	<comment type="block" pos:line="11" pos:column="25">/* not frozen */</comment>
    <comment type="block" pos:line="12" pos:column="5">/* assert in Grow should quit first, but we do not want to have a scary infinite loop */</comment>

    <while pos:line="14" pos:column="5">while <condition pos:line="14" pos:column="11">(<expr><name pos:line="14" pos:column="12">capacity<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">&lt;=<pos:position pos:line="14" pos:column="26"/></operator> <name pos:line="14" pos:column="24">max_capacity<pos:position pos:line="14" pos:column="36"/></name></expr>)<pos:position pos:line="14" pos:column="37"/></condition> <block pos:line="14" pos:column="38">{
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">mb_size_t<pos:position pos:line="15" pos:column="18"/></name></type> <name pos:line="15" pos:column="19">free_space<pos:position pos:line="15" pos:column="29"/></name> <init pos:line="15" pos:column="30">= <expr><name pos:line="15" pos:column="32">capacity<pos:position pos:line="15" pos:column="40"/></name> <operator pos:line="15" pos:column="41">-<pos:position pos:line="15" pos:column="42"/></operator> <name pos:line="15" pos:column="43">size<pos:position pos:line="15" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="48"/></decl_stmt>
        <comment type="block" pos:line="16" pos:column="9">/* put as much as we can */</comment>

<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef<pos:position pos:line="18" pos:column="7"/></cpp:directive> <name pos:line="18" pos:column="8">VA_COPY<pos:position pos:line="18" pos:column="15"/></name></cpp:ifdef>
        <comment type="block" pos:line="19" pos:column="9">/* Fix of bug 753r. The value of vargs is undefined
         * after vsnprintf() returns. Make a copy of vargs
         * incase we loop around and call vsnprintf() again.
         */</comment>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">VA_COPY<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name pos:line="23" pos:column="17">ap<pos:position pos:line="23" pos:column="19"/></name></expr></argument>,<argument><expr><name pos:line="23" pos:column="20">vargs<pos:position pos:line="23" pos:column="25"/></name></expr></argument>)<pos:position pos:line="23" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="24" pos:column="9">sz<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">vsnprintf<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><name pos:line="24" pos:column="24">buf<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">+<pos:position pos:line="24" pos:column="29"/></operator> <name pos:line="24" pos:column="30">size<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="36">free_space<pos:position pos:line="24" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="48">fmt<pos:position pos:line="24" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="53">ap<pos:position pos:line="24" pos:column="55"/></name></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">va_end<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">ap<pos:position pos:line="25" pos:column="18"/></name></expr></argument>)<pos:position pos:line="25" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="20"/></expr_stmt>
<cpp:else pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">else<pos:position pos:line="26" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="26" pos:column="7">/* VA_COPY */</comment>

        <expr_stmt><expr><name pos:line="28" pos:column="9">sz<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <call><name pos:line="28" pos:column="14">vsnprintf<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name pos:line="28" pos:column="24">buf<pos:position pos:line="28" pos:column="27"/></name> <operator pos:line="28" pos:column="28">+<pos:position pos:line="28" pos:column="29"/></operator> <name pos:line="28" pos:column="30">size<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="36">free_space<pos:position pos:line="28" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="48">fmt<pos:position pos:line="28" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="53">vargs<pos:position pos:line="28" pos:column="58"/></name></expr></argument>)<pos:position pos:line="28" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="60"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="29" pos:column="8">/*VA_COPY*/</comment>
        <comment type="block" pos:line="30" pos:column="9">/* check for possible overflow */</comment>
        <comment type="block" pos:line="31" pos:column="9">/* snprintf on Linuz returns -1 on overflows */</comment>
        <comment type="block" pos:line="32" pos:column="9">/* snprintf on FreeBSD returns at least free_space on overflows */</comment>

        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">sz<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">&lt;<pos:position pos:line="34" pos:column="20"/></operator> <literal type="number" pos:line="34" pos:column="18">0<pos:position pos:line="34" pos:column="19"/></literal> <operator pos:line="34" pos:column="20">||<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="23">sz<pos:position pos:line="34" pos:column="25"/></name> <operator pos:line="34" pos:column="26">&gt;=<pos:position pos:line="34" pos:column="31"/></operator> <name pos:line="34" pos:column="29">free_space<pos:position pos:line="34" pos:column="39"/></name></expr>)<pos:position pos:line="34" pos:column="40"/></condition><then pos:line="34" pos:column="40">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="13">grow<pos:position pos:line="35" pos:column="17"/></name><argument_list pos:line="35" pos:column="17">(<argument><expr><name pos:line="35" pos:column="18">capacity<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">+<pos:position pos:line="35" pos:column="28"/></operator> <literal type="number" pos:line="35" pos:column="29">1<pos:position pos:line="35" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt></block></then>
        <else pos:line="36" pos:column="9">else
            <block type="pseudo"><break pos:line="37" pos:column="13">break;<pos:position pos:line="37" pos:column="19"/></break></block></else></if>
    }<pos:position pos:line="38" pos:column="6"/></block></while>

    <expr_stmt><expr><name pos:line="40" pos:column="5">size<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">+=<pos:position pos:line="40" pos:column="12"/></operator> <name pos:line="40" pos:column="13">sz<pos:position pos:line="40" pos:column="15"/></name></expr>;<pos:position pos:line="40" pos:column="16"/></expr_stmt>
    <comment type="block" pos:line="41" pos:column="5">/* on Linux and FreeBSD, '\0' is not counted in return value */</comment>
    <comment type="block" pos:line="42" pos:column="5">/* on XXX it might be counted */</comment>
    <comment type="block" pos:line="43" pos:column="5">/* check that '\0' is appended and not counted */</comment>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><operator pos:line="45" pos:column="9">!<pos:position pos:line="45" pos:column="10"/></operator><name pos:line="45" pos:column="10">size<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">||<pos:position pos:line="45" pos:column="17"/></operator> <name><name pos:line="45" pos:column="18">buf<pos:position pos:line="45" pos:column="21"/></name><index pos:line="45" pos:column="21">[<expr><name pos:line="45" pos:column="22">size<pos:position pos:line="45" pos:column="26"/></name> <operator pos:line="45" pos:column="27">-<pos:position pos:line="45" pos:column="28"/></operator> <literal type="number" pos:line="45" pos:column="29">1<pos:position pos:line="45" pos:column="30"/></literal></expr>]<pos:position pos:line="45" pos:column="31"/></index></name></expr>)<pos:position pos:line="45" pos:column="32"/></condition><then pos:line="45" pos:column="32"> <block pos:line="45" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">assert<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><operator pos:line="46" pos:column="16">!<pos:position pos:line="46" pos:column="17"/></operator><name><name pos:line="46" pos:column="17">buf<pos:position pos:line="46" pos:column="20"/></name><index pos:line="46" pos:column="20">[<expr><name pos:line="46" pos:column="21">size<pos:position pos:line="46" pos:column="25"/></name></expr>]<pos:position pos:line="46" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then> <else pos:line="47" pos:column="7">else <block pos:line="47" pos:column="12">{
        <expr_stmt><expr><operator pos:line="48" pos:column="9">--<pos:position pos:line="48" pos:column="11"/></operator><name pos:line="48" pos:column="11">size<pos:position pos:line="48" pos:column="15"/></name></expr>;<pos:position pos:line="48" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></else></if>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
