<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4371_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">mimicExtensions<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name><name pos:line="2" pos:column="17">Ssl<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">X509_Pointer<pos:position pos:line="2" pos:column="34"/></name></name> <modifier pos:line="2" pos:column="35">&amp;<pos:position pos:line="2" pos:column="40"/></modifier></type> <name pos:line="2" pos:column="37">cert<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="43">Ssl<pos:position pos:line="2" pos:column="46"/></name><operator pos:line="2" pos:column="46">::<pos:position pos:line="2" pos:column="48"/></operator><name pos:line="2" pos:column="48">X509_Pointer<pos:position pos:line="2" pos:column="60"/></name></name> <specifier pos:line="2" pos:column="61">const<pos:position pos:line="2" pos:column="66"/></specifier> <modifier pos:line="2" pos:column="67">&amp;<pos:position pos:line="2" pos:column="72"/></modifier></type> <name pos:line="2" pos:column="69">mimicCert<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name><name pos:line="4" pos:column="16">extensions<pos:position pos:line="4" pos:column="26"/></name><index pos:line="4" pos:column="26">[]<pos:position pos:line="4" pos:column="28"/></index></name><init pos:line="4" pos:column="28">= <expr><block pos:line="4" pos:column="30">{
        <expr><name pos:line="5" pos:column="9">NID_key_usage<pos:position pos:line="5" pos:column="22"/></name></expr>,
        <expr><name pos:line="6" pos:column="9">NID_ext_key_usage<pos:position pos:line="6" pos:column="26"/></name></expr>,
        <expr><name pos:line="7" pos:column="9">NID_basic_constraints<pos:position pos:line="7" pos:column="30"/></name></expr>,
        <expr><literal type="number" pos:line="8" pos:column="9">0<pos:position pos:line="8" pos:column="10"/></literal></expr>
    }<pos:position pos:line="9" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="9" pos:column="7"/></decl_stmt>

    <comment type="line" pos:line="11" pos:column="5">// key usage bit names</comment>
    <enum pos:line="12" pos:column="5">enum <block pos:line="12" pos:column="10">{
        <decl><name pos:line="13" pos:column="9">DigitalSignature<pos:position pos:line="13" pos:column="25"/></name></decl>,
        <decl><name pos:line="14" pos:column="9">NonRepudiation<pos:position pos:line="14" pos:column="23"/></name></decl>,
        <decl><name pos:line="15" pos:column="9">KeyEncipherment<pos:position pos:line="15" pos:column="24"/></name></decl>, <comment type="line" pos:line="15" pos:column="26">// NSS requires for RSA but not EC</comment>
        <decl><name pos:line="16" pos:column="9">DataEncipherment<pos:position pos:line="16" pos:column="25"/></name></decl>,
        <decl><name pos:line="17" pos:column="9">KeyAgreement<pos:position pos:line="17" pos:column="21"/></name></decl>,
        <decl><name pos:line="18" pos:column="9">KeyCertificateSign<pos:position pos:line="18" pos:column="27"/></name></decl>,
        <decl><name pos:line="19" pos:column="9">CRLSign<pos:position pos:line="19" pos:column="16"/></name></decl>,
        <decl><name pos:line="20" pos:column="9">EncipherOnly<pos:position pos:line="20" pos:column="21"/></name></decl>,
        <decl><name pos:line="21" pos:column="9">DecipherOnly<pos:position pos:line="21" pos:column="21"/></name></decl>
    }<pos:position pos:line="22" pos:column="6"/></block>;<pos:position pos:line="22" pos:column="7"/></enum>

    <decl_stmt><decl><type><name pos:line="24" pos:column="5">int<pos:position pos:line="24" pos:column="8"/></name></type> <name pos:line="24" pos:column="9">mimicAlgo<pos:position pos:line="24" pos:column="18"/></name> <init pos:line="24" pos:column="19">= <expr><call><name pos:line="24" pos:column="21">OBJ_obj2nid<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><call><name><name pos:line="24" pos:column="33">mimicCert<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">.<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="43">get<pos:position pos:line="24" pos:column="46"/></name></name><argument_list pos:line="24" pos:column="46">()<pos:position pos:line="24" pos:column="48"/></argument_list></call><operator pos:line="24" pos:column="48">-&gt;<pos:position pos:line="24" pos:column="53"/></operator><name><name pos:line="24" pos:column="50">cert_info<pos:position pos:line="24" pos:column="59"/></name><operator pos:line="24" pos:column="59">-&gt;<pos:position pos:line="24" pos:column="64"/></operator><name pos:line="24" pos:column="61">key<pos:position pos:line="24" pos:column="64"/></name><operator pos:line="24" pos:column="64">-&gt;<pos:position pos:line="24" pos:column="69"/></operator><name pos:line="24" pos:column="66">algor<pos:position pos:line="24" pos:column="71"/></name><operator pos:line="24" pos:column="71">-&gt;<pos:position pos:line="24" pos:column="76"/></operator><name pos:line="24" pos:column="73">algorithm<pos:position pos:line="24" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="84"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="26" pos:column="5">int<pos:position pos:line="26" pos:column="8"/></name></type> <name pos:line="26" pos:column="9">added<pos:position pos:line="26" pos:column="14"/></name> <init pos:line="26" pos:column="15">= <expr><literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">int<pos:position pos:line="27" pos:column="8"/></name></type> <name pos:line="27" pos:column="9">nid<pos:position pos:line="27" pos:column="12"/></name></decl>;<pos:position pos:line="27" pos:column="13"/></decl_stmt>
    <for pos:line="28" pos:column="5">for <control pos:line="28" pos:column="9">(<init><decl><type><name pos:line="28" pos:column="10">int<pos:position pos:line="28" pos:column="13"/></name></type> <name pos:line="28" pos:column="14">i<pos:position pos:line="28" pos:column="15"/></name> <init pos:line="28" pos:column="16">= <expr><literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="20"/></init> <condition><expr><operator pos:line="28" pos:column="21">(<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">nid<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">=<pos:position pos:line="28" pos:column="27"/></operator> <name><name pos:line="28" pos:column="28">extensions<pos:position pos:line="28" pos:column="38"/></name><index pos:line="28" pos:column="38">[<expr><name pos:line="28" pos:column="39">i<pos:position pos:line="28" pos:column="40"/></name></expr>]<pos:position pos:line="28" pos:column="41"/></index></name><operator pos:line="28" pos:column="41">)<pos:position pos:line="28" pos:column="42"/></operator> <operator pos:line="28" pos:column="43">!=<pos:position pos:line="28" pos:column="45"/></operator> <literal type="number" pos:line="28" pos:column="46">0<pos:position pos:line="28" pos:column="47"/></literal></expr>;<pos:position pos:line="28" pos:column="48"/></condition> <incr><expr><operator pos:line="28" pos:column="49">++<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="51">i<pos:position pos:line="28" pos:column="52"/></name></expr></incr>)<pos:position pos:line="28" pos:column="53"/></control> <block pos:line="28" pos:column="54">{
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">const<pos:position pos:line="29" pos:column="14"/></specifier> <name pos:line="29" pos:column="15">int<pos:position pos:line="29" pos:column="18"/></name></type> <name pos:line="29" pos:column="19">pos<pos:position pos:line="29" pos:column="22"/></name> <init pos:line="29" pos:column="23">= <expr><call><name pos:line="29" pos:column="25">X509_get_ext_by_NID<pos:position pos:line="29" pos:column="44"/></name><argument_list pos:line="29" pos:column="44">(<argument><expr><call><name><name pos:line="29" pos:column="45">mimicCert<pos:position pos:line="29" pos:column="54"/></name><operator pos:line="29" pos:column="54">.<pos:position pos:line="29" pos:column="55"/></operator><name pos:line="29" pos:column="55">get<pos:position pos:line="29" pos:column="58"/></name></name><argument_list pos:line="29" pos:column="58">()<pos:position pos:line="29" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="29" pos:column="62">nid<pos:position pos:line="29" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="67">-<pos:position pos:line="29" pos:column="68"/></operator><literal type="number" pos:line="29" pos:column="68">1<pos:position pos:line="29" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="71"/></decl_stmt>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<decl><type><name pos:line="30" pos:column="13">X509_EXTENSION<pos:position pos:line="30" pos:column="27"/></name> <modifier pos:line="30" pos:column="28">*<pos:position pos:line="30" pos:column="29"/></modifier></type><name pos:line="30" pos:column="29">ext<pos:position pos:line="30" pos:column="32"/></name> <init pos:line="30" pos:column="33">= <expr><call><name pos:line="30" pos:column="35">X509_get_ext<pos:position pos:line="30" pos:column="47"/></name><argument_list pos:line="30" pos:column="47">(<argument><expr><call><name><name pos:line="30" pos:column="48">mimicCert<pos:position pos:line="30" pos:column="57"/></name><operator pos:line="30" pos:column="57">.<pos:position pos:line="30" pos:column="58"/></operator><name pos:line="30" pos:column="58">get<pos:position pos:line="30" pos:column="61"/></name></name><argument_list pos:line="30" pos:column="61">()<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="30" pos:column="65">pos<pos:position pos:line="30" pos:column="68"/></name></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr></init></decl>)<pos:position pos:line="30" pos:column="70"/></condition><then pos:line="30" pos:column="70"> <block pos:line="30" pos:column="71">{
            <comment type="line" pos:line="31" pos:column="13">// Mimic extension exactly.</comment>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><call><name pos:line="32" pos:column="17">X509_add_ext<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><call><name><name pos:line="32" pos:column="30">cert<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">.<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">get<pos:position pos:line="32" pos:column="38"/></name></name><argument_list pos:line="32" pos:column="38">()<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="32" pos:column="42">ext<pos:position pos:line="32" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="47">-<pos:position pos:line="32" pos:column="48"/></operator><literal type="number" pos:line="32" pos:column="48">1<pos:position pos:line="32" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="51"/></condition><then pos:line="32" pos:column="51">
                <block type="pseudo"><expr_stmt><expr><operator pos:line="33" pos:column="17">++<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="19">added<pos:position pos:line="33" pos:column="24"/></name></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt></block></then></if>
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">( <expr><name pos:line="34" pos:column="18">nid<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">==<pos:position pos:line="34" pos:column="24"/></operator> <name pos:line="34" pos:column="25">NID_key_usage<pos:position pos:line="34" pos:column="38"/></name> <operator pos:line="34" pos:column="39">&amp;&amp;<pos:position pos:line="34" pos:column="49"/></operator> <name pos:line="34" pos:column="42">mimicAlgo<pos:position pos:line="34" pos:column="51"/></name> <operator pos:line="34" pos:column="52">!=<pos:position pos:line="34" pos:column="54"/></operator> <name pos:line="34" pos:column="55">NID_rsaEncryption<pos:position pos:line="34" pos:column="72"/></name></expr> )<pos:position pos:line="34" pos:column="74"/></condition><then pos:line="34" pos:column="74"> <block pos:line="34" pos:column="75">{
                <comment type="line" pos:line="35" pos:column="17">// NSS does not requre the KeyEncipherment flag on EC keys</comment>
                <comment type="line" pos:line="36" pos:column="17">// but it does require it for RSA keys.  Since ssl-bump</comment>
                <comment type="line" pos:line="37" pos:column="17">// substitutes RSA keys for EC ones, we need to ensure that</comment>
                <comment type="line" pos:line="38" pos:column="17">// that the more stringent requirements are met.</comment>

                <decl_stmt><decl><type><specifier pos:line="40" pos:column="17">const<pos:position pos:line="40" pos:column="22"/></specifier> <name pos:line="40" pos:column="23">int<pos:position pos:line="40" pos:column="26"/></name></type> <name pos:line="40" pos:column="27">p<pos:position pos:line="40" pos:column="28"/></name> <init pos:line="40" pos:column="29">= <expr><call><name pos:line="40" pos:column="31">X509_get_ext_by_NID<pos:position pos:line="40" pos:column="50"/></name><argument_list pos:line="40" pos:column="50">(<argument><expr><call><name><name pos:line="40" pos:column="51">cert<pos:position pos:line="40" pos:column="55"/></name><operator pos:line="40" pos:column="55">.<pos:position pos:line="40" pos:column="56"/></operator><name pos:line="40" pos:column="56">get<pos:position pos:line="40" pos:column="59"/></name></name><argument_list pos:line="40" pos:column="59">()<pos:position pos:line="40" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="40" pos:column="63">NID_key_usage<pos:position pos:line="40" pos:column="76"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="78">-<pos:position pos:line="40" pos:column="79"/></operator><literal type="number" pos:line="40" pos:column="79">1<pos:position pos:line="40" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="82"/></decl_stmt>
                <if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><operator pos:line="41" pos:column="21">(<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">ext<pos:position pos:line="41" pos:column="25"/></name> <operator pos:line="41" pos:column="26">=<pos:position pos:line="41" pos:column="27"/></operator> <call><name pos:line="41" pos:column="28">X509_get_ext<pos:position pos:line="41" pos:column="40"/></name><argument_list pos:line="41" pos:column="40">(<argument><expr><call><name><name pos:line="41" pos:column="41">cert<pos:position pos:line="41" pos:column="45"/></name><operator pos:line="41" pos:column="45">.<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="46">get<pos:position pos:line="41" pos:column="49"/></name></name><argument_list pos:line="41" pos:column="49">()<pos:position pos:line="41" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="41" pos:column="53">p<pos:position pos:line="41" pos:column="54"/></name></expr></argument>)<pos:position pos:line="41" pos:column="55"/></argument_list></call><operator pos:line="41" pos:column="55">)<pos:position pos:line="41" pos:column="56"/></operator> <operator pos:line="41" pos:column="57">!=<pos:position pos:line="41" pos:column="59"/></operator> <name pos:line="41" pos:column="60">NULL<pos:position pos:line="41" pos:column="64"/></name></expr>)<pos:position pos:line="41" pos:column="65"/></condition><then pos:line="41" pos:column="65"> <block pos:line="41" pos:column="66">{
                    <decl_stmt><decl><type><name pos:line="42" pos:column="21">ASN1_BIT_STRING<pos:position pos:line="42" pos:column="36"/></name> <modifier pos:line="42" pos:column="37">*<pos:position pos:line="42" pos:column="38"/></modifier></type><name pos:line="42" pos:column="38">keyusage<pos:position pos:line="42" pos:column="46"/></name> <init pos:line="42" pos:column="47">= <expr><operator pos:line="42" pos:column="49">(<pos:position pos:line="42" pos:column="50"/></operator><name pos:line="42" pos:column="50">ASN1_BIT_STRING<pos:position pos:line="42" pos:column="65"/></name> <operator pos:line="42" pos:column="66">*<pos:position pos:line="42" pos:column="67"/></operator><operator pos:line="42" pos:column="67">)<pos:position pos:line="42" pos:column="68"/></operator><call><name pos:line="42" pos:column="68">X509V3_EXT_d2i<pos:position pos:line="42" pos:column="82"/></name><argument_list pos:line="42" pos:column="82">(<argument><expr><name pos:line="42" pos:column="83">ext<pos:position pos:line="42" pos:column="86"/></name></expr></argument>)<pos:position pos:line="42" pos:column="87"/></argument_list></call></expr></init></decl>;<pos:position pos:line="42" pos:column="88"/></decl_stmt>
                    <expr_stmt><expr><call><name pos:line="43" pos:column="21">ASN1_BIT_STRING_set_bit<pos:position pos:line="43" pos:column="44"/></name><argument_list pos:line="43" pos:column="44">(<argument><expr><name pos:line="43" pos:column="45">keyusage<pos:position pos:line="43" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="55">KeyEncipherment<pos:position pos:line="43" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="72">1<pos:position pos:line="43" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="75"/></expr_stmt>

                    <comment type="line" pos:line="45" pos:column="21">//Build the ASN1_OCTET_STRING</comment>
                    <decl_stmt><decl><type><specifier pos:line="46" pos:column="21">const<pos:position pos:line="46" pos:column="26"/></specifier> <name pos:line="46" pos:column="27">X509V3_EXT_METHOD<pos:position pos:line="46" pos:column="44"/></name> <modifier pos:line="46" pos:column="45">*<pos:position pos:line="46" pos:column="46"/></modifier></type><name pos:line="46" pos:column="46">method<pos:position pos:line="46" pos:column="52"/></name> <init pos:line="46" pos:column="53">= <expr><call><name pos:line="46" pos:column="55">X509V3_EXT_get<pos:position pos:line="46" pos:column="69"/></name><argument_list pos:line="46" pos:column="69">(<argument><expr><name pos:line="46" pos:column="70">ext<pos:position pos:line="46" pos:column="73"/></name></expr></argument>)<pos:position pos:line="46" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="75"/></decl_stmt>
                    <expr_stmt><expr><call><name pos:line="47" pos:column="21">assert<pos:position pos:line="47" pos:column="27"/></name><argument_list pos:line="47" pos:column="27">(<argument><expr><name pos:line="47" pos:column="28">method<pos:position pos:line="47" pos:column="34"/></name> <operator pos:line="47" pos:column="35">&amp;&amp;<pos:position pos:line="47" pos:column="45"/></operator> <name><name pos:line="47" pos:column="38">method<pos:position pos:line="47" pos:column="44"/></name><operator pos:line="47" pos:column="44">-&gt;<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="46">it<pos:position pos:line="47" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>
                    <decl_stmt><decl><type><name pos:line="48" pos:column="21">unsigned<pos:position pos:line="48" pos:column="29"/></name> <name pos:line="48" pos:column="30">char<pos:position pos:line="48" pos:column="34"/></name> <modifier pos:line="48" pos:column="35">*<pos:position pos:line="48" pos:column="36"/></modifier></type><name pos:line="48" pos:column="36">ext_der<pos:position pos:line="48" pos:column="43"/></name> <init pos:line="48" pos:column="44">= <expr><name pos:line="48" pos:column="46">NULL<pos:position pos:line="48" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="48" pos:column="51"/></decl_stmt>
                    <decl_stmt><decl><type><name pos:line="49" pos:column="21">int<pos:position pos:line="49" pos:column="24"/></name></type> <name pos:line="49" pos:column="25">ext_len<pos:position pos:line="49" pos:column="32"/></name> <init pos:line="49" pos:column="33">= <expr><call><name pos:line="49" pos:column="35">ASN1_item_i2d<pos:position pos:line="49" pos:column="48"/></name><argument_list pos:line="49" pos:column="48">(<argument><expr><operator pos:line="49" pos:column="49">(<pos:position pos:line="49" pos:column="50"/></operator><name pos:line="49" pos:column="50">ASN1_VALUE<pos:position pos:line="49" pos:column="60"/></name> <operator pos:line="49" pos:column="61">*<pos:position pos:line="49" pos:column="62"/></operator><operator pos:line="49" pos:column="62">)<pos:position pos:line="49" pos:column="63"/></operator><name pos:line="49" pos:column="63">keyusage<pos:position pos:line="49" pos:column="71"/></name></expr></argument>,
                                                <argument><expr><operator pos:line="50" pos:column="49">&amp;<pos:position pos:line="50" pos:column="54"/></operator><name pos:line="50" pos:column="50">ext_der<pos:position pos:line="50" pos:column="57"/></name></expr></argument>,
                                                <argument><expr><operator pos:line="51" pos:column="49">(<pos:position pos:line="51" pos:column="50"/></operator><specifier pos:line="51" pos:column="50">const<pos:position pos:line="51" pos:column="55"/></specifier> <name pos:line="51" pos:column="56">ASN1_ITEM<pos:position pos:line="51" pos:column="65"/></name> <operator pos:line="51" pos:column="66">*<pos:position pos:line="51" pos:column="67"/></operator><operator pos:line="51" pos:column="67">)<pos:position pos:line="51" pos:column="68"/></operator><call><name pos:line="51" pos:column="68">ASN1_ITEM_ptr<pos:position pos:line="51" pos:column="81"/></name><argument_list pos:line="51" pos:column="81">(<argument><expr><name><name pos:line="51" pos:column="82">method<pos:position pos:line="51" pos:column="88"/></name><operator pos:line="51" pos:column="88">-&gt;<pos:position pos:line="51" pos:column="93"/></operator><name pos:line="51" pos:column="90">it<pos:position pos:line="51" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="94"/></argument_list></call></expr></init></decl>;<pos:position pos:line="51" pos:column="95"/></decl_stmt>

                    <decl_stmt><decl><type><name pos:line="53" pos:column="21">ASN1_OCTET_STRING<pos:position pos:line="53" pos:column="38"/></name> <modifier pos:line="53" pos:column="39">*<pos:position pos:line="53" pos:column="40"/></modifier></type><name pos:line="53" pos:column="40">ext_oct<pos:position pos:line="53" pos:column="47"/></name> <init pos:line="53" pos:column="48">= <expr><call><name pos:line="53" pos:column="50">M_ASN1_OCTET_STRING_new<pos:position pos:line="53" pos:column="73"/></name><argument_list pos:line="53" pos:column="73">()<pos:position pos:line="53" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="53" pos:column="76"/></decl_stmt>
                    <expr_stmt><expr><name><name pos:line="54" pos:column="21">ext_oct<pos:position pos:line="54" pos:column="28"/></name><operator pos:line="54" pos:column="28">-&gt;<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="30">data<pos:position pos:line="54" pos:column="34"/></name></name> <operator pos:line="54" pos:column="35">=<pos:position pos:line="54" pos:column="36"/></operator> <name pos:line="54" pos:column="37">ext_der<pos:position pos:line="54" pos:column="44"/></name></expr>;<pos:position pos:line="54" pos:column="45"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="55" pos:column="21">ext_oct<pos:position pos:line="55" pos:column="28"/></name><operator pos:line="55" pos:column="28">-&gt;<pos:position pos:line="55" pos:column="33"/></operator><name pos:line="55" pos:column="30">length<pos:position pos:line="55" pos:column="36"/></name></name> <operator pos:line="55" pos:column="37">=<pos:position pos:line="55" pos:column="38"/></operator> <name pos:line="55" pos:column="39">ext_len<pos:position pos:line="55" pos:column="46"/></name></expr>;<pos:position pos:line="55" pos:column="47"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="56" pos:column="21">X509_EXTENSION_set_data<pos:position pos:line="56" pos:column="44"/></name><argument_list pos:line="56" pos:column="44">(<argument><expr><name pos:line="56" pos:column="45">ext<pos:position pos:line="56" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="50">ext_oct<pos:position pos:line="56" pos:column="57"/></name></expr></argument>)<pos:position pos:line="56" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="59"/></expr_stmt>

                    <expr_stmt><expr><call><name pos:line="58" pos:column="21">M_ASN1_OCTET_STRING_free<pos:position pos:line="58" pos:column="45"/></name><argument_list pos:line="58" pos:column="45">(<argument><expr><name pos:line="58" pos:column="46">ext_oct<pos:position pos:line="58" pos:column="53"/></name></expr></argument>)<pos:position pos:line="58" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="55"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="59" pos:column="21">ASN1_BIT_STRING_free<pos:position pos:line="59" pos:column="41"/></name><argument_list pos:line="59" pos:column="41">(<argument><expr><name pos:line="59" pos:column="42">keyusage<pos:position pos:line="59" pos:column="50"/></name></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="52"/></expr_stmt>
                }<pos:position pos:line="60" pos:column="18"/></block></then></if>
            }<pos:position pos:line="61" pos:column="14"/></block></then></if>
        }<pos:position pos:line="62" pos:column="10"/></block></then></if>
    }<pos:position pos:line="63" pos:column="6"/></block></for>

    <comment type="line" pos:line="65" pos:column="5">// We could also restrict mimicking of the CA extension to CA:FALSE</comment>
    <comment type="line" pos:line="66" pos:column="5">// because Squid does not generate valid fake CA certificates.</comment>

    <return pos:line="68" pos:column="5">return <expr><name pos:line="68" pos:column="12">added<pos:position pos:line="68" pos:column="17"/></name></expr>;<pos:position pos:line="68" pos:column="18"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
