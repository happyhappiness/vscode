<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6557_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">IcmpPinger<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Open<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">void<pos:position pos:line="2" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="4" pos:column="20"/></name></expr></cpp:if>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">WSADATA<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">wsaData<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">WSAPROTOCOL_INFO<pos:position pos:line="7" pos:column="21"/></name></type> <name pos:line="7" pos:column="22">wpi<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">buf<pos:position pos:line="8" pos:column="13"/></name><index pos:line="8" pos:column="13">[<expr><sizeof pos:line="8" pos:column="14">sizeof<argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">wpi<pos:position pos:line="8" pos:column="24"/></name></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></sizeof></expr>]<pos:position pos:line="8" pos:column="26"/></index></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">x<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">sockaddr_in<pos:position pos:line="11" pos:column="23"/></name></name></type> <name pos:line="11" pos:column="24">PS<pos:position pos:line="11" pos:column="26"/></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">xerrno<pos:position pos:line="12" pos:column="15"/></name></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">WSAStartup<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">2<pos:position pos:line="14" pos:column="17"/></literal></expr></argument>, <argument><expr><operator pos:line="14" pos:column="19">&amp;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="20">wsaData<pos:position pos:line="14" pos:column="27"/></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">atexit<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">Win32SockCleanup<pos:position pos:line="15" pos:column="28"/></name></expr></argument>)<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">getCurrentTime<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">()<pos:position pos:line="17" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">_db_init<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><name pos:line="18" pos:column="14">NULL<pos:position pos:line="18" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="20">"ALL,1"<pos:position pos:line="18" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">setmode<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><literal type="number" pos:line="19" pos:column="13">0<pos:position pos:line="19" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="16">O_BINARY<pos:position pos:line="19" pos:column="24"/></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">setmode<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><literal type="number" pos:line="20" pos:column="13">1<pos:position pos:line="20" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="16">O_BINARY<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">x<pos:position pos:line="21" pos:column="6"/></name> <operator pos:line="21" pos:column="7">=<pos:position pos:line="21" pos:column="8"/></operator> <call><name pos:line="21" pos:column="9">read<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="17">buf<pos:position pos:line="21" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="22">sizeof<argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">wpi<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">x<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">&lt;<pos:position pos:line="23" pos:column="15"/></operator> <operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">int<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">)<pos:position pos:line="23" pos:column="18"/></operator><sizeof pos:line="23" pos:column="18">sizeof<argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">wpi<pos:position pos:line="23" pos:column="28"/></name></expr></argument>)<pos:position pos:line="23" pos:column="29"/></argument_list></sizeof></expr>)<pos:position pos:line="23" pos:column="30"/></condition><then pos:line="23" pos:column="30"> <block pos:line="23" pos:column="31">{
        <expr_stmt><expr><name pos:line="24" pos:column="9">xerrno<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <name pos:line="24" pos:column="18">errno<pos:position pos:line="24" pos:column="23"/></name></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">getCurrentTime<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">()<pos:position pos:line="25" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugs<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="number" pos:line="26" pos:column="16">42<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="20">DBG_CRITICAL<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="34">MYNAME<pos:position pos:line="26" pos:column="40"/></name> <operator pos:line="26" pos:column="41">&lt;&lt;<pos:position pos:line="26" pos:column="49"/></operator> <literal type="string" pos:line="26" pos:column="44">" read: FD 0: "<pos:position pos:line="26" pos:column="59"/></literal> <operator pos:line="26" pos:column="60">&lt;&lt;<pos:position pos:line="26" pos:column="68"/></operator> <call><name pos:line="26" pos:column="63">xstrerr<pos:position pos:line="26" pos:column="70"/></name><argument_list pos:line="26" pos:column="70">(<argument><expr><name pos:line="26" pos:column="71">xerrno<pos:position pos:line="26" pos:column="77"/></name></expr></argument>)<pos:position pos:line="26" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">write<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><literal type="number" pos:line="27" pos:column="15">1<pos:position pos:line="27" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="18">"ERR\n"<pos:position pos:line="27" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="27">4<pos:position pos:line="27" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><operator pos:line="28" pos:column="16">-<pos:position pos:line="28" pos:column="17"/></operator><literal type="number" pos:line="28" pos:column="17">1<pos:position pos:line="28" pos:column="18"/></literal></expr>;<pos:position pos:line="28" pos:column="19"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="31" pos:column="5">memcpy<pos:position pos:line="31" pos:column="11"/></name><argument_list pos:line="31" pos:column="11">(<argument><expr><operator pos:line="31" pos:column="12">&amp;<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="13">wpi<pos:position pos:line="31" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="18">buf<pos:position pos:line="31" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="23">sizeof<argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">wpi<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">write<pos:position pos:line="33" pos:column="10"/></name><argument_list pos:line="33" pos:column="10">(<argument><expr><literal type="number" pos:line="33" pos:column="11">1<pos:position pos:line="33" pos:column="12"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="14">"OK\n"<pos:position pos:line="33" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="22">3<pos:position pos:line="33" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="34" pos:column="5">x<pos:position pos:line="34" pos:column="6"/></name> <operator pos:line="34" pos:column="7">=<pos:position pos:line="34" pos:column="8"/></operator> <call><name pos:line="34" pos:column="9">read<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><literal type="number" pos:line="34" pos:column="14">0<pos:position pos:line="34" pos:column="15"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="17">buf<pos:position pos:line="34" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="22">sizeof<argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">PS<pos:position pos:line="34" pos:column="31"/></name></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">x<pos:position pos:line="36" pos:column="10"/></name> <operator pos:line="36" pos:column="11">&lt;<pos:position pos:line="36" pos:column="15"/></operator> <operator pos:line="36" pos:column="13">(<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">int<pos:position pos:line="36" pos:column="17"/></name><operator pos:line="36" pos:column="17">)<pos:position pos:line="36" pos:column="18"/></operator><sizeof pos:line="36" pos:column="18">sizeof<argument_list pos:line="36" pos:column="24">(<argument><expr><name pos:line="36" pos:column="25">PS<pos:position pos:line="36" pos:column="27"/></name></expr></argument>)<pos:position pos:line="36" pos:column="28"/></argument_list></sizeof></expr>)<pos:position pos:line="36" pos:column="29"/></condition><then pos:line="36" pos:column="29"> <block pos:line="36" pos:column="30">{
        <expr_stmt><expr><name pos:line="37" pos:column="9">xerrno<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <name pos:line="37" pos:column="18">errno<pos:position pos:line="37" pos:column="23"/></name></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">getCurrentTime<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">()<pos:position pos:line="38" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">debugs<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="number" pos:line="39" pos:column="16">42<pos:position pos:line="39" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="20">DBG_CRITICAL<pos:position pos:line="39" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="34">MYNAME<pos:position pos:line="39" pos:column="40"/></name> <operator pos:line="39" pos:column="41">&lt;&lt;<pos:position pos:line="39" pos:column="49"/></operator> <literal type="string" pos:line="39" pos:column="44">" read: FD 0: "<pos:position pos:line="39" pos:column="59"/></literal> <operator pos:line="39" pos:column="60">&lt;&lt;<pos:position pos:line="39" pos:column="68"/></operator> <call><name pos:line="39" pos:column="63">xstrerr<pos:position pos:line="39" pos:column="70"/></name><argument_list pos:line="39" pos:column="70">(<argument><expr><name pos:line="39" pos:column="71">xerrno<pos:position pos:line="39" pos:column="77"/></name></expr></argument>)<pos:position pos:line="39" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">write<pos:position pos:line="40" pos:column="14"/></name><argument_list pos:line="40" pos:column="14">(<argument><expr><literal type="number" pos:line="40" pos:column="15">1<pos:position pos:line="40" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="18">"ERR\n"<pos:position pos:line="40" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="27">4<pos:position pos:line="40" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>
        <return pos:line="41" pos:column="9">return <expr><operator pos:line="41" pos:column="16">-<pos:position pos:line="41" pos:column="17"/></operator><literal type="number" pos:line="41" pos:column="17">1<pos:position pos:line="41" pos:column="18"/></literal></expr>;<pos:position pos:line="41" pos:column="19"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="44" pos:column="5">memcpy<pos:position pos:line="44" pos:column="11"/></name><argument_list pos:line="44" pos:column="11">(<argument><expr><operator pos:line="44" pos:column="12">&amp;<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="13">PS<pos:position pos:line="44" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="17">buf<pos:position pos:line="44" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="22">sizeof<argument_list pos:line="44" pos:column="28">(<argument><expr><name pos:line="44" pos:column="29">PS<pos:position pos:line="44" pos:column="31"/></name></expr></argument>)<pos:position pos:line="44" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name pos:line="46" pos:column="5">icmp_sock<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">=<pos:position pos:line="46" pos:column="16"/></operator> <call><name pos:line="46" pos:column="17">WSASocket<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><name pos:line="46" pos:column="27">FROM_PROTOCOL_INFO<pos:position pos:line="46" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">FROM_PROTOCOL_INFO<pos:position pos:line="46" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="67">FROM_PROTOCOL_INFO<pos:position pos:line="46" pos:column="85"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="87">&amp;<pos:position pos:line="46" pos:column="92"/></operator><name pos:line="46" pos:column="88">wpi<pos:position pos:line="46" pos:column="91"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="93">0<pos:position pos:line="46" pos:column="94"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="96">0<pos:position pos:line="46" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="99"/></expr_stmt>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">icmp_sock<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">==<pos:position pos:line="48" pos:column="21"/></operator> <operator pos:line="48" pos:column="22">-<pos:position pos:line="48" pos:column="23"/></operator><literal type="number" pos:line="48" pos:column="23">1<pos:position pos:line="48" pos:column="24"/></literal></expr>)<pos:position pos:line="48" pos:column="25"/></condition><then pos:line="48" pos:column="25"> <block pos:line="48" pos:column="26">{
        <expr_stmt><expr><name pos:line="49" pos:column="9">xerrno<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <name pos:line="49" pos:column="18">errno<pos:position pos:line="49" pos:column="23"/></name></expr>;<pos:position pos:line="49" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">getCurrentTime<pos:position pos:line="50" pos:column="23"/></name><argument_list pos:line="50" pos:column="23">()<pos:position pos:line="50" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">debugs<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><literal type="number" pos:line="51" pos:column="16">42<pos:position pos:line="51" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="20">DBG_CRITICAL<pos:position pos:line="51" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="34">MYNAME<pos:position pos:line="51" pos:column="40"/></name> <operator pos:line="51" pos:column="41">&lt;&lt;<pos:position pos:line="51" pos:column="49"/></operator> <literal type="string" pos:line="51" pos:column="44">"WSASocket: "<pos:position pos:line="51" pos:column="57"/></literal> <operator pos:line="51" pos:column="58">&lt;&lt;<pos:position pos:line="51" pos:column="66"/></operator> <call><name pos:line="51" pos:column="61">xstrerr<pos:position pos:line="51" pos:column="68"/></name><argument_list pos:line="51" pos:column="68">(<argument><expr><name pos:line="51" pos:column="69">xerrno<pos:position pos:line="51" pos:column="75"/></name></expr></argument>)<pos:position pos:line="51" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">write<pos:position pos:line="52" pos:column="14"/></name><argument_list pos:line="52" pos:column="14">(<argument><expr><literal type="number" pos:line="52" pos:column="15">1<pos:position pos:line="52" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="18">"ERR\n"<pos:position pos:line="52" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="27">4<pos:position pos:line="52" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="30"/></expr_stmt>
        <return pos:line="53" pos:column="9">return <expr><operator pos:line="53" pos:column="16">-<pos:position pos:line="53" pos:column="17"/></operator><literal type="number" pos:line="53" pos:column="17">1<pos:position pos:line="53" pos:column="18"/></literal></expr>;<pos:position pos:line="53" pos:column="19"/></return>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="56" pos:column="5">x<pos:position pos:line="56" pos:column="6"/></name> <operator pos:line="56" pos:column="7">=<pos:position pos:line="56" pos:column="8"/></operator> <call><name pos:line="56" pos:column="9">connect<pos:position pos:line="56" pos:column="16"/></name><argument_list pos:line="56" pos:column="16">(<argument><expr><name pos:line="56" pos:column="17">icmp_sock<pos:position pos:line="56" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="28">(<pos:position pos:line="56" pos:column="29"/></operator>struct <name pos:line="56" pos:column="36">sockaddr<pos:position pos:line="56" pos:column="44"/></name> <operator pos:line="56" pos:column="45">*<pos:position pos:line="56" pos:column="46"/></operator><operator pos:line="56" pos:column="46">)<pos:position pos:line="56" pos:column="47"/></operator> <operator pos:line="56" pos:column="48">&amp;<pos:position pos:line="56" pos:column="53"/></operator><name pos:line="56" pos:column="49">PS<pos:position pos:line="56" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="53">sizeof<argument_list pos:line="56" pos:column="59">(<argument><expr><name pos:line="56" pos:column="60">PS<pos:position pos:line="56" pos:column="62"/></name></expr></argument>)<pos:position pos:line="56" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="65"/></expr_stmt>

    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">SOCKET_ERROR<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">==<pos:position pos:line="58" pos:column="24"/></operator> <name pos:line="58" pos:column="25">x<pos:position pos:line="58" pos:column="26"/></name></expr>)<pos:position pos:line="58" pos:column="27"/></condition><then pos:line="58" pos:column="27"> <block pos:line="58" pos:column="28">{
        <expr_stmt><expr><name pos:line="59" pos:column="9">xerrno<pos:position pos:line="59" pos:column="15"/></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <name pos:line="59" pos:column="18">errno<pos:position pos:line="59" pos:column="23"/></name></expr>;<pos:position pos:line="59" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">getCurrentTime<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">()<pos:position pos:line="60" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">debugs<pos:position pos:line="61" pos:column="15"/></name><argument_list pos:line="61" pos:column="15">(<argument><expr><literal type="number" pos:line="61" pos:column="16">42<pos:position pos:line="61" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="20">DBG_CRITICAL<pos:position pos:line="61" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="34">MYNAME<pos:position pos:line="61" pos:column="40"/></name> <operator pos:line="61" pos:column="41">&lt;&lt;<pos:position pos:line="61" pos:column="49"/></operator> <literal type="string" pos:line="61" pos:column="44">"connect: "<pos:position pos:line="61" pos:column="55"/></literal> <operator pos:line="61" pos:column="56">&lt;&lt;<pos:position pos:line="61" pos:column="64"/></operator> <call><name pos:line="61" pos:column="59">xstrerr<pos:position pos:line="61" pos:column="66"/></name><argument_list pos:line="61" pos:column="66">(<argument><expr><name pos:line="61" pos:column="67">xerrno<pos:position pos:line="61" pos:column="73"/></name></expr></argument>)<pos:position pos:line="61" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">write<pos:position pos:line="62" pos:column="14"/></name><argument_list pos:line="62" pos:column="14">(<argument><expr><literal type="number" pos:line="62" pos:column="15">1<pos:position pos:line="62" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="18">"ERR\n"<pos:position pos:line="62" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="27">4<pos:position pos:line="62" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="30"/></expr_stmt>
        <return pos:line="63" pos:column="9">return <expr><operator pos:line="63" pos:column="16">-<pos:position pos:line="63" pos:column="17"/></operator><literal type="number" pos:line="63" pos:column="17">1<pos:position pos:line="63" pos:column="18"/></literal></expr>;<pos:position pos:line="63" pos:column="19"/></return>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="66" pos:column="5">write<pos:position pos:line="66" pos:column="10"/></name><argument_list pos:line="66" pos:column="10">(<argument><expr><literal type="number" pos:line="66" pos:column="11">1<pos:position pos:line="66" pos:column="12"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="14">"OK\n"<pos:position pos:line="66" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="22">3<pos:position pos:line="66" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">memset<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><name pos:line="67" pos:column="12">buf<pos:position pos:line="67" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="17">0<pos:position pos:line="67" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="67" pos:column="20">sizeof<argument_list pos:line="67" pos:column="26">(<argument><expr><name pos:line="67" pos:column="27">buf<pos:position pos:line="67" pos:column="30"/></name></expr></argument>)<pos:position pos:line="67" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="67" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="68" pos:column="5">x<pos:position pos:line="68" pos:column="6"/></name> <operator pos:line="68" pos:column="7">=<pos:position pos:line="68" pos:column="8"/></operator> <call><name pos:line="68" pos:column="9">recv<pos:position pos:line="68" pos:column="13"/></name><argument_list pos:line="68" pos:column="13">(<argument><expr><name pos:line="68" pos:column="14">icmp_sock<pos:position pos:line="68" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="25">(<pos:position pos:line="68" pos:column="26"/></operator><name pos:line="68" pos:column="26">void<pos:position pos:line="68" pos:column="30"/></name> <operator pos:line="68" pos:column="31">*<pos:position pos:line="68" pos:column="32"/></operator><operator pos:line="68" pos:column="32">)<pos:position pos:line="68" pos:column="33"/></operator> <name pos:line="68" pos:column="34">buf<pos:position pos:line="68" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="39">sizeof<argument_list pos:line="68" pos:column="45">(<argument><expr><name pos:line="68" pos:column="46">buf<pos:position pos:line="68" pos:column="49"/></name></expr></argument>)<pos:position pos:line="68" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="52">0<pos:position pos:line="68" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="55"/></expr_stmt>

    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">x<pos:position pos:line="70" pos:column="10"/></name> <operator pos:line="70" pos:column="11">&lt;<pos:position pos:line="70" pos:column="15"/></operator> <literal type="number" pos:line="70" pos:column="13">3<pos:position pos:line="70" pos:column="14"/></literal></expr>)<pos:position pos:line="70" pos:column="15"/></condition><then pos:line="70" pos:column="15"> <block pos:line="70" pos:column="16">{
        <expr_stmt><expr><name pos:line="71" pos:column="9">xerrno<pos:position pos:line="71" pos:column="15"/></name> <operator pos:line="71" pos:column="16">=<pos:position pos:line="71" pos:column="17"/></operator> <name pos:line="71" pos:column="18">errno<pos:position pos:line="71" pos:column="23"/></name></expr>;<pos:position pos:line="71" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">debugs<pos:position pos:line="72" pos:column="15"/></name><argument_list pos:line="72" pos:column="15">(<argument><expr><literal type="number" pos:line="72" pos:column="16">42<pos:position pos:line="72" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="20">DBG_CRITICAL<pos:position pos:line="72" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="34">MYNAME<pos:position pos:line="72" pos:column="40"/></name> <operator pos:line="72" pos:column="41">&lt;&lt;<pos:position pos:line="72" pos:column="49"/></operator> <literal type="string" pos:line="72" pos:column="44">"recv: "<pos:position pos:line="72" pos:column="52"/></literal> <operator pos:line="72" pos:column="53">&lt;&lt;<pos:position pos:line="72" pos:column="61"/></operator> <call><name pos:line="72" pos:column="56">xstrerr<pos:position pos:line="72" pos:column="63"/></name><argument_list pos:line="72" pos:column="63">(<argument><expr><name pos:line="72" pos:column="64">xerrno<pos:position pos:line="72" pos:column="70"/></name></expr></argument>)<pos:position pos:line="72" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="72" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="73"/></expr_stmt>
        <return pos:line="73" pos:column="9">return <expr><operator pos:line="73" pos:column="16">-<pos:position pos:line="73" pos:column="17"/></operator><literal type="number" pos:line="73" pos:column="17">1<pos:position pos:line="73" pos:column="18"/></literal></expr>;<pos:position pos:line="73" pos:column="19"/></return>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="76" pos:column="5">x<pos:position pos:line="76" pos:column="6"/></name> <operator pos:line="76" pos:column="7">=<pos:position pos:line="76" pos:column="8"/></operator> <call><name pos:line="76" pos:column="9">send<pos:position pos:line="76" pos:column="13"/></name><argument_list pos:line="76" pos:column="13">(<argument><expr><name pos:line="76" pos:column="14">icmp_sock<pos:position pos:line="76" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="25">(<pos:position pos:line="76" pos:column="26"/></operator><specifier pos:line="76" pos:column="26">const<pos:position pos:line="76" pos:column="31"/></specifier> <name pos:line="76" pos:column="32">void<pos:position pos:line="76" pos:column="36"/></name> <operator pos:line="76" pos:column="37">*<pos:position pos:line="76" pos:column="38"/></operator><operator pos:line="76" pos:column="38">)<pos:position pos:line="76" pos:column="39"/></operator> <name pos:line="76" pos:column="40">buf<pos:position pos:line="76" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="76" pos:column="45">strlen<pos:position pos:line="76" pos:column="51"/></name><argument_list pos:line="76" pos:column="51">(<argument><expr><name pos:line="76" pos:column="52">buf<pos:position pos:line="76" pos:column="55"/></name></expr></argument>)<pos:position pos:line="76" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="58">0<pos:position pos:line="76" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><name pos:line="77" pos:column="5">xerrno<pos:position pos:line="77" pos:column="11"/></name> <operator pos:line="77" pos:column="12">=<pos:position pos:line="77" pos:column="13"/></operator> <name pos:line="77" pos:column="14">errno<pos:position pos:line="77" pos:column="19"/></name></expr>;<pos:position pos:line="77" pos:column="20"/></expr_stmt>

    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name pos:line="79" pos:column="9">x<pos:position pos:line="79" pos:column="10"/></name> <operator pos:line="79" pos:column="11">&lt;<pos:position pos:line="79" pos:column="15"/></operator> <literal type="number" pos:line="79" pos:column="13">3<pos:position pos:line="79" pos:column="14"/></literal> <operator pos:line="79" pos:column="15">||<pos:position pos:line="79" pos:column="17"/></operator> <call><name pos:line="79" pos:column="18">strncmp<pos:position pos:line="79" pos:column="25"/></name><argument_list pos:line="79" pos:column="25">(<argument><expr><literal type="string" pos:line="79" pos:column="26">"OK\n"<pos:position pos:line="79" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="34">buf<pos:position pos:line="79" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="39">3<pos:position pos:line="79" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="42"/></condition><then pos:line="79" pos:column="42"> <block pos:line="79" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">debugs<pos:position pos:line="80" pos:column="15"/></name><argument_list pos:line="80" pos:column="15">(<argument><expr><literal type="number" pos:line="80" pos:column="16">42<pos:position pos:line="80" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="20">DBG_CRITICAL<pos:position pos:line="80" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="34">MYNAME<pos:position pos:line="80" pos:column="40"/></name> <operator pos:line="80" pos:column="41">&lt;&lt;<pos:position pos:line="80" pos:column="49"/></operator> <literal type="string" pos:line="80" pos:column="44">"recv: "<pos:position pos:line="80" pos:column="52"/></literal> <operator pos:line="80" pos:column="53">&lt;&lt;<pos:position pos:line="80" pos:column="61"/></operator> <call><name pos:line="80" pos:column="56">xstrerr<pos:position pos:line="80" pos:column="63"/></name><argument_list pos:line="80" pos:column="63">(<argument><expr><name pos:line="80" pos:column="64">xerrno<pos:position pos:line="80" pos:column="70"/></name></expr></argument>)<pos:position pos:line="80" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="73"/></expr_stmt>
        <return pos:line="81" pos:column="9">return <expr><operator pos:line="81" pos:column="16">-<pos:position pos:line="81" pos:column="17"/></operator><literal type="number" pos:line="81" pos:column="17">1<pos:position pos:line="81" pos:column="18"/></literal></expr>;<pos:position pos:line="81" pos:column="19"/></return>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="84" pos:column="5">getCurrentTime<pos:position pos:line="84" pos:column="19"/></name><argument_list pos:line="84" pos:column="19">()<pos:position pos:line="84" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">debugs<pos:position pos:line="85" pos:column="11"/></name><argument_list pos:line="85" pos:column="11">(<argument><expr><literal type="number" pos:line="85" pos:column="12">42<pos:position pos:line="85" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="16">DBG_IMPORTANT<pos:position pos:line="85" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="31">"pinger: Squid socket opened"<pos:position pos:line="85" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="62"/></expr_stmt>

    <comment type="block" pos:line="87" pos:column="5">/* windows uses a socket stream as a dual-direction channel */</comment>
    <expr_stmt><expr><name pos:line="88" pos:column="5">socket_to_squid<pos:position pos:line="88" pos:column="20"/></name> <operator pos:line="88" pos:column="21">=<pos:position pos:line="88" pos:column="22"/></operator> <name pos:line="88" pos:column="23">icmp_sock<pos:position pos:line="88" pos:column="32"/></name></expr>;<pos:position pos:line="88" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="89" pos:column="5">socket_from_squid<pos:position pos:line="89" pos:column="22"/></name> <operator pos:line="89" pos:column="23">=<pos:position pos:line="89" pos:column="24"/></operator> <name pos:line="89" pos:column="25">icmp_sock<pos:position pos:line="89" pos:column="34"/></name></expr>;<pos:position pos:line="89" pos:column="35"/></expr_stmt>

    <return pos:line="91" pos:column="5">return <expr><name pos:line="91" pos:column="12">icmp_sock<pos:position pos:line="91" pos:column="21"/></name></expr>;<pos:position pos:line="91" pos:column="22"/></return>

<cpp:else pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">else<pos:position pos:line="93" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="93" pos:column="7">/* !_SQUID_WINDOWS_ */</comment>

    <comment type="block" pos:line="95" pos:column="5">/* non-windows apps use stdin/out pipes as the squid channel(s) */</comment>
    <expr_stmt><expr><name pos:line="96" pos:column="5">socket_from_squid<pos:position pos:line="96" pos:column="22"/></name> <operator pos:line="96" pos:column="23">=<pos:position pos:line="96" pos:column="24"/></operator> <literal type="number" pos:line="96" pos:column="25">0<pos:position pos:line="96" pos:column="26"/></literal></expr>;<pos:position pos:line="96" pos:column="27"/></expr_stmt> <comment type="line" pos:line="96" pos:column="28">// use STDIN macro ??</comment>
    <expr_stmt><expr><name pos:line="97" pos:column="5">socket_to_squid<pos:position pos:line="97" pos:column="20"/></name> <operator pos:line="97" pos:column="21">=<pos:position pos:line="97" pos:column="22"/></operator> <literal type="number" pos:line="97" pos:column="23">1<pos:position pos:line="97" pos:column="24"/></literal></expr>;<pos:position pos:line="97" pos:column="25"/></expr_stmt> <comment type="line" pos:line="97" pos:column="26">// use STDOUT macro ??</comment>
    <return pos:line="98" pos:column="5">return <expr><name pos:line="98" pos:column="12">socket_to_squid<pos:position pos:line="98" pos:column="27"/></name></expr>;<pos:position pos:line="98" pos:column="28"/></return>
<cpp:endif pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">endif<pos:position pos:line="99" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
