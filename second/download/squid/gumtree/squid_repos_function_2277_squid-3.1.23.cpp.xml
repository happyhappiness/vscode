<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2277_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">store_client<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">dumpStats<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">MemBuf<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type> <name pos:line="2" pos:column="34">output<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">int<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">clientNumber<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list> <specifier pos:line="2" pos:column="60">const<pos:position pos:line="2" pos:column="65"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name><name pos:line="4" pos:column="9">_callback<pos:position pos:line="4" pos:column="18"/></name><operator pos:line="4" pos:column="18">.<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="19">pending<pos:position pos:line="4" pos:column="26"/></name></name><argument_list pos:line="4" pos:column="26">()<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="29"/></condition><then pos:line="4" pos:column="29">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="7" pos:column="5">output<pos:position pos:line="7" pos:column="11"/></name><operator pos:line="7" pos:column="11">-&gt;<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="13">Printf<pos:position pos:line="7" pos:column="19"/></name></name><argument_list pos:line="7" pos:column="19">(<argument><expr><literal type="string" pos:line="7" pos:column="20">"\tClient #%d, %p\n"<pos:position pos:line="7" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="42">clientNumber<pos:position pos:line="7" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="56">_callback<pos:position pos:line="7" pos:column="65"/></name><operator pos:line="7" pos:column="65">.<pos:position pos:line="7" pos:column="66"/></operator><name pos:line="7" pos:column="66">callback_data<pos:position pos:line="7" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="81"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">output<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">Printf<pos:position pos:line="9" pos:column="19"/></name></name><argument_list pos:line="9" pos:column="19">(<argument><expr><literal type="string" pos:line="9" pos:column="20">"\t\tcopy_offset: %"<pos:position pos:line="9" pos:column="40"/></literal> <name pos:line="9" pos:column="41">PRId64<pos:position pos:line="9" pos:column="47"/></name> <literal type="string" pos:line="9" pos:column="48">"\n"<pos:position pos:line="9" pos:column="52"/></literal></expr></argument>,
                   <argument><expr><name><name pos:line="10" pos:column="20">copyInto<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">.<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">offset<pos:position pos:line="10" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">output<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">-&gt;<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="13">Printf<pos:position pos:line="12" pos:column="19"/></name></name><argument_list pos:line="12" pos:column="19">(<argument><expr><literal type="string" pos:line="12" pos:column="20">"\t\tcopy_size: %d\n"<pos:position pos:line="12" pos:column="41"/></literal></expr></argument>,
                   <argument><expr><operator pos:line="13" pos:column="20">(<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">int<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">)<pos:position pos:line="13" pos:column="25"/></operator> <name><name pos:line="13" pos:column="26">copyInto<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">.<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="35">length<pos:position pos:line="13" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">output<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">-&gt;<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="13">Printf<pos:position pos:line="15" pos:column="19"/></name></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="string" pos:line="15" pos:column="20">"\t\tflags:"<pos:position pos:line="15" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">flags<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">.<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">disk_io_pending<pos:position pos:line="17" pos:column="30"/></name></name></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="18" pos:column="9">output<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">Printf<pos:position pos:line="18" pos:column="23"/></name></name><argument_list pos:line="18" pos:column="23">(<argument><expr><literal type="string" pos:line="18" pos:column="24">" disk_io_pending"<pos:position pos:line="18" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">flags<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">.<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">store_copying<pos:position pos:line="20" pos:column="28"/></name></name></expr>)<pos:position pos:line="20" pos:column="29"/></condition><then pos:line="20" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="21" pos:column="9">output<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">Printf<pos:position pos:line="21" pos:column="23"/></name></name><argument_list pos:line="21" pos:column="23">(<argument><expr><literal type="string" pos:line="21" pos:column="24">" store_copying"<pos:position pos:line="21" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name><name pos:line="23" pos:column="9">flags<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">.<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">copy_event_pending<pos:position pos:line="23" pos:column="33"/></name></name></expr>)<pos:position pos:line="23" pos:column="34"/></condition><then pos:line="23" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="24" pos:column="9">output<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">Printf<pos:position pos:line="24" pos:column="23"/></name></name><argument_list pos:line="24" pos:column="23">(<argument><expr><literal type="string" pos:line="24" pos:column="24">" copy_event_pending"<pos:position pos:line="24" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="26" pos:column="5">output<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">-&gt;<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="13">Printf<pos:position pos:line="26" pos:column="19"/></name></name><argument_list pos:line="26" pos:column="19">(<argument><expr><literal type="string" pos:line="26" pos:column="20">"\n"<pos:position pos:line="26" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
