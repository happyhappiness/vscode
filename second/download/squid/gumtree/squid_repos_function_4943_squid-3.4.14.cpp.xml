<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4943_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Rebuild<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">steps<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">()<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">47<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">5<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <name><name pos:line="4" pos:column="26">sd<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">-&gt;<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="30">index<pos:position pos:line="4" pos:column="35"/></name></name> <operator pos:line="4" pos:column="36">&lt;&lt;<pos:position pos:line="4" pos:column="44"/></operator> <literal type="string" pos:line="4" pos:column="39">" filen "<pos:position pos:line="4" pos:column="48"/></literal> <operator pos:line="4" pos:column="49">&lt;&lt;<pos:position pos:line="4" pos:column="57"/></operator> <name pos:line="4" pos:column="52">filen<pos:position pos:line="4" pos:column="57"/></name> <operator pos:line="4" pos:column="58">&lt;&lt;<pos:position pos:line="4" pos:column="66"/></operator> <literal type="string" pos:line="4" pos:column="61">" at "<pos:position pos:line="4" pos:column="67"/></literal> <operator pos:line="4" pos:column="68">&lt;&lt;<pos:position pos:line="4" pos:column="76"/></operator>
           <name pos:line="5" pos:column="12">dbOffset<pos:position pos:line="5" pos:column="20"/></name> <operator pos:line="5" pos:column="21">&lt;&lt;<pos:position pos:line="5" pos:column="29"/></operator> <literal type="string" pos:line="5" pos:column="24">" &lt;= "<pos:position pos:line="5" pos:column="33"/></literal> <operator pos:line="5" pos:column="31">&lt;&lt;<pos:position pos:line="5" pos:column="39"/></operator> <name pos:line="5" pos:column="34">dbSize<pos:position pos:line="5" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="42"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// Balance our desire to maximize the number of entries processed at once</comment>
    <comment type="line" pos:line="8" pos:column="5">// (and, hence, minimize overheads and total rebuild time) with a</comment>
    <comment type="line" pos:line="9" pos:column="5">// requirement to also process Coordinator events, disk I/Os, etc.</comment>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">int<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">maxSpentMsec<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><literal type="number" pos:line="10" pos:column="30">50<pos:position pos:line="10" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt> <comment type="line" pos:line="10" pos:column="34">// keep small: most RAM I/Os are under 1ms</comment>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">timeval<pos:position pos:line="11" pos:column="18"/></name></type> <name pos:line="11" pos:column="19">loopStart<pos:position pos:line="11" pos:column="28"/></name> <init pos:line="11" pos:column="29">= <expr><name pos:line="11" pos:column="31">current_time<pos:position pos:line="11" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="44"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">loaded<pos:position pos:line="13" pos:column="15"/></name> <init pos:line="13" pos:column="16">= <expr><literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="20"/></decl_stmt>
    <while pos:line="14" pos:column="5">while <condition pos:line="14" pos:column="11">(<expr><name pos:line="14" pos:column="12">loaded<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&lt;<pos:position pos:line="14" pos:column="23"/></operator> <name pos:line="14" pos:column="21">dbEntryLimit<pos:position pos:line="14" pos:column="33"/></name> <operator pos:line="14" pos:column="34">&amp;&amp;<pos:position pos:line="14" pos:column="44"/></operator> <name pos:line="14" pos:column="37">dbOffset<pos:position pos:line="14" pos:column="45"/></name> <operator pos:line="14" pos:column="46">&lt;<pos:position pos:line="14" pos:column="50"/></operator> <name pos:line="14" pos:column="48">dbSize<pos:position pos:line="14" pos:column="54"/></name></expr>)<pos:position pos:line="14" pos:column="55"/></condition> <block pos:line="14" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">doOneEntry<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">()<pos:position pos:line="15" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="16" pos:column="9">dbOffset<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">+=<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="21">dbEntrySize<pos:position pos:line="16" pos:column="32"/></name></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="17" pos:column="9">++<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">filen<pos:position pos:line="17" pos:column="16"/></name></expr>;<pos:position pos:line="17" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="18" pos:column="9">++<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">loaded<pos:position pos:line="18" pos:column="17"/></name></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name><name pos:line="20" pos:column="13">counts<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">.<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">scancount<pos:position pos:line="20" pos:column="29"/></name></name> <operator pos:line="20" pos:column="30">%<pos:position pos:line="20" pos:column="31"/></operator> <literal type="number" pos:line="20" pos:column="32">1000<pos:position pos:line="20" pos:column="36"/></literal> <operator pos:line="20" pos:column="37">==<pos:position pos:line="20" pos:column="39"/></operator> <literal type="number" pos:line="20" pos:column="40">0<pos:position pos:line="20" pos:column="41"/></literal></expr>)<pos:position pos:line="20" pos:column="42"/></condition><then pos:line="20" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="13">storeRebuildProgress<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name><name pos:line="21" pos:column="34">sd<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">-&gt;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="38">index<pos:position pos:line="21" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="45">dbEntryLimit<pos:position pos:line="21" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="59">counts<pos:position pos:line="21" pos:column="65"/></name><operator pos:line="21" pos:column="65">.<pos:position pos:line="21" pos:column="66"/></operator><name pos:line="21" pos:column="66">scancount<pos:position pos:line="21" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="77"/></expr_stmt></block></then></if>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">opt_foreground_rebuild<pos:position pos:line="23" pos:column="35"/></name></expr>)<pos:position pos:line="23" pos:column="36"/></condition><then pos:line="23" pos:column="36">
            <block type="pseudo"><continue pos:line="24" pos:column="13">continue;<pos:position pos:line="24" pos:column="22"/></continue></block></then></if> <comment type="line" pos:line="24" pos:column="23">// skip "few entries at a time" check below</comment>

        <expr_stmt><expr><call><name pos:line="26" pos:column="9">getCurrentTime<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">()<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">const<pos:position pos:line="27" pos:column="14"/></specifier> <name pos:line="27" pos:column="15">double<pos:position pos:line="27" pos:column="21"/></name></type> <name pos:line="27" pos:column="22">elapsedMsec<pos:position pos:line="27" pos:column="33"/></name> <init pos:line="27" pos:column="34">= <expr><call><name pos:line="27" pos:column="36">tvSubMsec<pos:position pos:line="27" pos:column="45"/></name><argument_list pos:line="27" pos:column="45">(<argument><expr><name pos:line="27" pos:column="46">loopStart<pos:position pos:line="27" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="57">current_time<pos:position pos:line="27" pos:column="69"/></name></expr></argument>)<pos:position pos:line="27" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="71"/></decl_stmt>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">elapsedMsec<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">&gt;<pos:position pos:line="28" pos:column="29"/></operator> <name pos:line="28" pos:column="27">maxSpentMsec<pos:position pos:line="28" pos:column="39"/></name> <operator pos:line="28" pos:column="40">||<pos:position pos:line="28" pos:column="42"/></operator> <name pos:line="28" pos:column="43">elapsedMsec<pos:position pos:line="28" pos:column="54"/></name> <operator pos:line="28" pos:column="55">&lt;<pos:position pos:line="28" pos:column="59"/></operator> <literal type="number" pos:line="28" pos:column="57">0<pos:position pos:line="28" pos:column="58"/></literal></expr>)<pos:position pos:line="28" pos:column="59"/></condition><then pos:line="28" pos:column="59"> <block pos:line="28" pos:column="60">{
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">debugs<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><literal type="number" pos:line="29" pos:column="20">47<pos:position pos:line="29" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="24">5<pos:position pos:line="29" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="27">HERE<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">&lt;&lt;<pos:position pos:line="29" pos:column="40"/></operator> <literal type="string" pos:line="29" pos:column="35">"pausing after "<pos:position pos:line="29" pos:column="51"/></literal> <operator pos:line="29" pos:column="52">&lt;&lt;<pos:position pos:line="29" pos:column="60"/></operator> <name pos:line="29" pos:column="55">loaded<pos:position pos:line="29" pos:column="61"/></name> <operator pos:line="29" pos:column="62">&lt;&lt;<pos:position pos:line="29" pos:column="70"/></operator> <literal type="string" pos:line="29" pos:column="65">" entries in "<pos:position pos:line="29" pos:column="79"/></literal> <operator pos:line="29" pos:column="80">&lt;&lt;<pos:position pos:line="29" pos:column="88"/></operator>
                   <name pos:line="30" pos:column="20">elapsedMsec<pos:position pos:line="30" pos:column="31"/></name> <operator pos:line="30" pos:column="32">&lt;&lt;<pos:position pos:line="30" pos:column="40"/></operator> <literal type="string" pos:line="30" pos:column="35">"ms; "<pos:position pos:line="30" pos:column="41"/></literal> <operator pos:line="30" pos:column="42">&lt;&lt;<pos:position pos:line="30" pos:column="50"/></operator> <operator pos:line="30" pos:column="45">(<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="46">elapsedMsec<pos:position pos:line="30" pos:column="57"/></name><operator pos:line="30" pos:column="57">/<pos:position pos:line="30" pos:column="58"/></operator><name pos:line="30" pos:column="58">loaded<pos:position pos:line="30" pos:column="64"/></name><operator pos:line="30" pos:column="64">)<pos:position pos:line="30" pos:column="65"/></operator> <operator pos:line="30" pos:column="66">&lt;&lt;<pos:position pos:line="30" pos:column="74"/></operator> <literal type="string" pos:line="30" pos:column="69">"ms per entry"<pos:position pos:line="30" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="85"/></expr_stmt>
            <break pos:line="31" pos:column="13">break;<pos:position pos:line="31" pos:column="19"/></break>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>
    }<pos:position pos:line="33" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">checkpoint<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">()<pos:position pos:line="35" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="18"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
