<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7701_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">ntlm_make_nonce<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">char<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">nonce<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name><name pos:line="4" pos:column="12">std<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">::<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">mt19937<pos:position pos:line="4" pos:column="24"/></name></name></type> <name pos:line="4" pos:column="25">mt<pos:position pos:line="4" pos:column="27"/></name><argument_list pos:line="4" pos:column="27">(<argument><expr><call><name pos:line="4" pos:column="28">time<pos:position pos:line="4" pos:column="32"/></name><argument_list pos:line="4" pos:column="32">(<argument><expr><literal type="number" pos:line="4" pos:column="33">0<pos:position pos:line="4" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="36"/></argument_list></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><name><name pos:line="5" pos:column="12">xuniform_int_distribution<pos:position pos:line="5" pos:column="37"/></name><argument_list type="generic" pos:line="5" pos:column="37">&lt;<argument><expr><name pos:line="5" pos:column="38">uint8_t<pos:position pos:line="5" pos:column="45"/></name></expr></argument>&gt;<pos:position pos:line="5" pos:column="49"/></argument_list></name></type> <name pos:line="5" pos:column="47">dist<pos:position pos:line="5" pos:column="51"/></name></decl>;<pos:position pos:line="5" pos:column="52"/></decl_stmt>

    <for pos:line="7" pos:column="5">for <control pos:line="7" pos:column="9">(<init><decl><type><name pos:line="7" pos:column="10">int<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">i<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="20"/></init> <condition><expr><name pos:line="7" pos:column="21">i<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&lt;<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="25">NTLM_NONCE_LEN<pos:position pos:line="7" pos:column="39"/></name></expr>;<pos:position pos:line="7" pos:column="40"/></condition> <incr><expr><operator pos:line="7" pos:column="41">++<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="43">i<pos:position pos:line="7" pos:column="44"/></name></expr></incr>)<pos:position pos:line="7" pos:column="45"/></control>
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="8" pos:column="9">nonce<pos:position pos:line="8" pos:column="14"/></name><index pos:line="8" pos:column="14">[<expr><name pos:line="8" pos:column="15">i<pos:position pos:line="8" pos:column="16"/></name></expr>]<pos:position pos:line="8" pos:column="17"/></index></name> <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <cast type="static" pos:line="8" pos:column="20">static_cast<argument_list type="generic" pos:line="8" pos:column="31">&lt;<argument><expr><name pos:line="8" pos:column="32">char<pos:position pos:line="8" pos:column="36"/></name></expr></argument>&gt;<pos:position pos:line="8" pos:column="40"/></argument_list><argument_list pos:line="8" pos:column="37">(<argument><expr><call><name pos:line="8" pos:column="38">dist<pos:position pos:line="8" pos:column="42"/></name><argument_list pos:line="8" pos:column="42">(<argument><expr><name pos:line="8" pos:column="43">mt<pos:position pos:line="8" pos:column="45"/></name></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call> <operator pos:line="8" pos:column="47">&amp;<pos:position pos:line="8" pos:column="52"/></operator> <literal type="number" pos:line="8" pos:column="49">0xFF<pos:position pos:line="8" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></cast></expr>;<pos:position pos:line="8" pos:column="55"/></expr_stmt></block></for>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
