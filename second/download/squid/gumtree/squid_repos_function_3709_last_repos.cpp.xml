<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3709_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">Options<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">TransferList<pos:position pos:line="1" pos:column="45"/></name><operator pos:line="1" pos:column="45">::<pos:position pos:line="1" pos:column="47"/></operator><name pos:line="1" pos:column="47">matches<pos:position pos:line="1" pos:column="54"/></name></name><parameter_list pos:line="1" pos:column="54">(<parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">SBuf<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">&amp;<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="67">urlPath<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list> <specifier pos:line="1" pos:column="76">const<pos:position pos:line="1" pos:column="81"/></specifier>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name><name pos:line="3" pos:column="11">SBuf<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">::<pos:position pos:line="3" pos:column="17"/></operator><name pos:line="3" pos:column="17">size_type<pos:position pos:line="3" pos:column="26"/></name></name></type> <name pos:line="3" pos:column="27">urlLen<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><call><name><name pos:line="3" pos:column="36">urlPath<pos:position pos:line="3" pos:column="43"/></name><operator pos:line="3" pos:column="43">.<pos:position pos:line="3" pos:column="44"/></operator><name pos:line="3" pos:column="44">length<pos:position pos:line="3" pos:column="50"/></name></name><argument_list pos:line="3" pos:column="50">()<pos:position pos:line="3" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="53"/></decl_stmt>
    <for pos:line="4" pos:column="5">for <control pos:line="4" pos:column="9">(<init><decl><type><name pos:line="4" pos:column="10">wordlist<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">e<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name pos:line="4" pos:column="24">extensions<pos:position pos:line="4" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></init> <condition><expr><name pos:line="4" pos:column="36">e<pos:position pos:line="4" pos:column="37"/></name></expr>;<pos:position pos:line="4" pos:column="38"/></condition> <incr><expr><name pos:line="4" pos:column="39">e<pos:position pos:line="4" pos:column="40"/></name> <operator pos:line="4" pos:column="41">=<pos:position pos:line="4" pos:column="42"/></operator> <name><name pos:line="4" pos:column="43">e<pos:position pos:line="4" pos:column="44"/></name><operator pos:line="4" pos:column="44">-&gt;<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="46">next<pos:position pos:line="4" pos:column="50"/></name></name></expr></incr>)<pos:position pos:line="4" pos:column="51"/></control> <block pos:line="4" pos:column="52">{
        <comment type="line" pos:line="5" pos:column="9">// optimize: store extension lengths</comment>
        <decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">size_t<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">eLen<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><call><name pos:line="6" pos:column="29">strlen<pos:position pos:line="6" pos:column="35"/></name><argument_list pos:line="6" pos:column="35">(<argument><expr><name><name pos:line="6" pos:column="36">e<pos:position pos:line="6" pos:column="37"/></name><operator pos:line="6" pos:column="37">-&gt;<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="39">key<pos:position pos:line="6" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="44"/></decl_stmt>

        <comment type="line" pos:line="8" pos:column="9">// assume URL contains at least '/' before the extension</comment>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">eLen<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">&lt;<pos:position pos:line="9" pos:column="22"/></operator> <name pos:line="9" pos:column="20">urlLen<pos:position pos:line="9" pos:column="26"/></name></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27"> <block pos:line="9" pos:column="28">{
            <decl_stmt><decl><type><specifier pos:line="10" pos:column="13">const<pos:position pos:line="10" pos:column="18"/></specifier> <name pos:line="10" pos:column="19">size_t<pos:position pos:line="10" pos:column="25"/></name></type> <name pos:line="10" pos:column="26">eOff<pos:position pos:line="10" pos:column="30"/></name> <init pos:line="10" pos:column="31">= <expr><name pos:line="10" pos:column="33">urlLen<pos:position pos:line="10" pos:column="39"/></name> <operator pos:line="10" pos:column="40">-<pos:position pos:line="10" pos:column="41"/></operator> <name pos:line="10" pos:column="42">eLen<pos:position pos:line="10" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="47"/></decl_stmt>
            <comment type="line" pos:line="11" pos:column="13">// RFC 3507 examples imply that extensions come without leading '.'</comment>
            <if pos:line="12" pos:column="13">if <condition pos:line="12" pos:column="16">(<expr><name><name pos:line="12" pos:column="17">urlPath<pos:position pos:line="12" pos:column="24"/></name><index pos:line="12" pos:column="24">[<expr><name pos:line="12" pos:column="25">eOff<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-<pos:position pos:line="12" pos:column="30"/></operator><literal type="number" pos:line="12" pos:column="30">1<pos:position pos:line="12" pos:column="31"/></literal></expr>]<pos:position pos:line="12" pos:column="32"/></index></name> <operator pos:line="12" pos:column="33">==<pos:position pos:line="12" pos:column="35"/></operator> <literal type="char" pos:line="12" pos:column="36">'.'<pos:position pos:line="12" pos:column="39"/></literal> <operator pos:line="12" pos:column="40">&amp;&amp;<pos:position pos:line="12" pos:column="50"/></operator> <call><name><name pos:line="12" pos:column="43">urlPath<pos:position pos:line="12" pos:column="50"/></name><operator pos:line="12" pos:column="50">.<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="51">substr<pos:position pos:line="12" pos:column="57"/></name></name><argument_list pos:line="12" pos:column="57">(<argument><expr><name pos:line="12" pos:column="58">eOff<pos:position pos:line="12" pos:column="62"/></name></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call><operator pos:line="12" pos:column="63">.<pos:position pos:line="12" pos:column="64"/></operator><call><name pos:line="12" pos:column="64">cmp<pos:position pos:line="12" pos:column="67"/></name><argument_list pos:line="12" pos:column="67">(<argument><expr><name><name pos:line="12" pos:column="68">e<pos:position pos:line="12" pos:column="69"/></name><operator pos:line="12" pos:column="69">-&gt;<pos:position pos:line="12" pos:column="74"/></operator><name pos:line="12" pos:column="71">key<pos:position pos:line="12" pos:column="74"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="76">eLen<pos:position pos:line="12" pos:column="80"/></name></expr></argument>)<pos:position pos:line="12" pos:column="81"/></argument_list></call> <operator pos:line="12" pos:column="82">==<pos:position pos:line="12" pos:column="84"/></operator> <literal type="number" pos:line="12" pos:column="85">0<pos:position pos:line="12" pos:column="86"/></literal></expr>)<pos:position pos:line="12" pos:column="87"/></condition><then pos:line="12" pos:column="87"> <block pos:line="12" pos:column="88">{
                <expr_stmt><expr><call><name pos:line="13" pos:column="17">debugs<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><literal type="number" pos:line="13" pos:column="24">93<pos:position pos:line="13" pos:column="26"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="13" pos:column="27">7<pos:position pos:line="13" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="30">"url "<pos:position pos:line="13" pos:column="36"/></literal> <operator pos:line="13" pos:column="37">&lt;&lt;<pos:position pos:line="13" pos:column="45"/></operator> <name pos:line="13" pos:column="40">urlPath<pos:position pos:line="13" pos:column="47"/></name> <operator pos:line="13" pos:column="48">&lt;&lt;<pos:position pos:line="13" pos:column="56"/></operator> <literal type="string" pos:line="13" pos:column="51">" matches "<pos:position pos:line="13" pos:column="62"/></literal> <operator pos:line="13" pos:column="63">&lt;&lt;<pos:position pos:line="13" pos:column="71"/></operator> <name pos:line="13" pos:column="66">name<pos:position pos:line="13" pos:column="70"/></name> <operator pos:line="13" pos:column="71">&lt;&lt;<pos:position pos:line="13" pos:column="79"/></operator> <literal type="string" pos:line="13" pos:column="74">" extension "<pos:position pos:line="13" pos:column="87"/></literal> <operator pos:line="13" pos:column="88">&lt;&lt;<pos:position pos:line="13" pos:column="96"/></operator> <name><name pos:line="13" pos:column="91">e<pos:position pos:line="13" pos:column="92"/></name><operator pos:line="13" pos:column="92">-&gt;<pos:position pos:line="13" pos:column="97"/></operator><name pos:line="13" pos:column="94">key<pos:position pos:line="13" pos:column="97"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="99"/></expr_stmt>
                <return pos:line="14" pos:column="17">return <expr><literal type="boolean" pos:line="14" pos:column="24">true<pos:position pos:line="14" pos:column="28"/></literal></expr>;<pos:position pos:line="14" pos:column="29"/></return>
            }<pos:position pos:line="15" pos:column="14"/></block></then></if>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">debugs<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><literal type="number" pos:line="18" pos:column="12">93<pos:position pos:line="18" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="18" pos:column="15">8<pos:position pos:line="18" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="18">"url "<pos:position pos:line="18" pos:column="24"/></literal> <operator pos:line="18" pos:column="25">&lt;&lt;<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="28">urlPath<pos:position pos:line="18" pos:column="35"/></name> <operator pos:line="18" pos:column="36">&lt;&lt;<pos:position pos:line="18" pos:column="44"/></operator> <literal type="string" pos:line="18" pos:column="39">" matches no "<pos:position pos:line="18" pos:column="53"/></literal> <operator pos:line="18" pos:column="54">&lt;&lt;<pos:position pos:line="18" pos:column="62"/></operator> <name pos:line="18" pos:column="57">name<pos:position pos:line="18" pos:column="61"/></name> <operator pos:line="18" pos:column="62">&lt;&lt;<pos:position pos:line="18" pos:column="70"/></operator> <literal type="string" pos:line="18" pos:column="65">" extensions"<pos:position pos:line="18" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="80"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><literal type="boolean" pos:line="19" pos:column="12">false<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
