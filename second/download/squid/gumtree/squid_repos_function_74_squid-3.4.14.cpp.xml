<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_74_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">REList<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">match<pos:position pos:line="2" pos:column="14"/></name></name><parameter_list pos:line="2" pos:column="14">( <parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name><modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type> <name pos:line="2" pos:column="28">check<pos:position pos:line="2" pos:column="33"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="35"/></parameter_list> <specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">result<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><call><name pos:line="4" pos:column="18">regexec<pos:position pos:line="4" pos:column="25"/></name><argument_list pos:line="4" pos:column="25">( <argument><expr><operator pos:line="4" pos:column="27">&amp;<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="28">rexp<pos:position pos:line="4" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="34">check<pos:position pos:line="4" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="41">0<pos:position pos:line="4" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="44">0<pos:position pos:line="4" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="47">0<pos:position pos:line="4" pos:column="48"/></literal></expr></argument> )<pos:position pos:line="4" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="51"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">( <expr><name pos:line="5" pos:column="10">result<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">!=<pos:position pos:line="5" pos:column="19"/></operator> <literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal> <operator pos:line="5" pos:column="22">&amp;&amp;<pos:position pos:line="5" pos:column="32"/></operator> <name pos:line="5" pos:column="25">result<pos:position pos:line="5" pos:column="31"/></name> <operator pos:line="5" pos:column="32">!=<pos:position pos:line="5" pos:column="34"/></operator> <name pos:line="5" pos:column="35">REG_NOMATCH<pos:position pos:line="5" pos:column="46"/></name></expr> )<pos:position pos:line="5" pos:column="48"/></condition><then pos:line="5" pos:column="48"> <block pos:line="5" pos:column="49">{
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">buffer<pos:position pos:line="6" pos:column="20"/></name><index pos:line="6" pos:column="20">[<expr><literal type="number" pos:line="6" pos:column="21">256<pos:position pos:line="6" pos:column="24"/></literal></expr>]<pos:position pos:line="6" pos:column="25"/></index></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">regerror<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">( <argument><expr><name pos:line="7" pos:column="19">result<pos:position pos:line="7" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="27">&amp;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="28">rexp<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">buffer<pos:position pos:line="7" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="42">256<pos:position pos:line="7" pos:column="45"/></literal></expr></argument> )<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">fprintf<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">( <argument><expr><name pos:line="8" pos:column="18">stderr<pos:position pos:line="8" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="26">"unable to execute re \"%s\"\n+ on line \"%s\": %s\n"<pos:position pos:line="8" pos:column="79"/></literal></expr></argument>,
                 <argument><expr><name pos:line="9" pos:column="18">data<pos:position pos:line="9" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="24">check<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="31">buffer<pos:position pos:line="9" pos:column="37"/></name></expr></argument> )<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">exit<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><literal type="number" pos:line="10" pos:column="14">1<pos:position pos:line="10" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator> <name pos:line="12" pos:column="14">result<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">==<pos:position pos:line="12" pos:column="23"/></operator> <literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal> <operator pos:line="12" pos:column="26">)<pos:position pos:line="12" pos:column="27"/></operator></expr>;<pos:position pos:line="12" pos:column="28"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
