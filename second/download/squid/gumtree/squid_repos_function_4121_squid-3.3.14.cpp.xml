<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4121_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">Xaction<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">start<pos:position pos:line="1" pos:column="38"/></name></name><parameter_list pos:line="1" pos:column="38">()<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="3" pos:column="5">Adaptation<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">::<pos:position pos:line="3" pos:column="17"/></operator><name pos:line="3" pos:column="17">Initiate<pos:position pos:line="3" pos:column="25"/></name><operator pos:line="3" pos:column="25">::<pos:position pos:line="3" pos:column="27"/></operator><name pos:line="3" pos:column="27">start<pos:position pos:line="3" pos:column="32"/></name></name><argument_list pos:line="3" pos:column="32">()<pos:position pos:line="3" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">readBuf<pos:position pos:line="5" pos:column="12"/></name><operator pos:line="5" pos:column="12">.<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">init<pos:position pos:line="5" pos:column="17"/></name></name><argument_list pos:line="5" pos:column="17">(<argument><expr><name pos:line="5" pos:column="18">SQUID_TCP_SO_RCVBUF<pos:position pos:line="5" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="39">SQUID_TCP_SO_RCVBUF<pos:position pos:line="5" pos:column="58"/></name></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">commBuf<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <operator pos:line="6" pos:column="15">(<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">char<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></operator><operator pos:line="6" pos:column="21">)<pos:position pos:line="6" pos:column="22"/></operator><call><name pos:line="6" pos:column="22">memAllocBuf<pos:position pos:line="6" pos:column="33"/></name><argument_list pos:line="6" pos:column="33">(<argument><expr><name pos:line="6" pos:column="34">SQUID_TCP_SO_RCVBUF<pos:position pos:line="6" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="55">&amp;<pos:position pos:line="6" pos:column="60"/></operator><name pos:line="6" pos:column="56">commBufSize<pos:position pos:line="6" pos:column="67"/></name></expr></argument>)<pos:position pos:line="6" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="69"/></expr_stmt>
    <comment type="line" pos:line="7" pos:column="5">// make sure maximum readBuf space does not exceed commBuf size</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">Must<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><cast type="static" pos:line="8" pos:column="10">static_cast<argument_list type="generic" pos:line="8" pos:column="21">&lt;<argument><expr><name pos:line="8" pos:column="22">size_t<pos:position pos:line="8" pos:column="28"/></name></expr></argument>&gt;<pos:position pos:line="8" pos:column="32"/></argument_list><argument_list pos:line="8" pos:column="29">(<argument><expr><call><name><name pos:line="8" pos:column="30">readBuf<pos:position pos:line="8" pos:column="37"/></name><operator pos:line="8" pos:column="37">.<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="38">potentialSpaceSize<pos:position pos:line="8" pos:column="56"/></name></name><argument_list pos:line="8" pos:column="56">()<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></cast> <operator pos:line="8" pos:column="60">&lt;=<pos:position pos:line="8" pos:column="65"/></operator> <name pos:line="8" pos:column="63">commBufSize<pos:position pos:line="8" pos:column="74"/></name></expr></argument>)<pos:position pos:line="8" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="76"/></expr_stmt>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
