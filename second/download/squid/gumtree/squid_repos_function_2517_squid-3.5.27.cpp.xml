<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2517_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">redirectHandleReply<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">void<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">data<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name><name pos:line="2" pos:column="39">Helper<pos:position pos:line="2" pos:column="45"/></name><operator pos:line="2" pos:column="45">::<pos:position pos:line="2" pos:column="47"/></operator><name pos:line="2" pos:column="47">Reply<pos:position pos:line="2" pos:column="52"/></name></name> <modifier pos:line="2" pos:column="53">&amp;<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="54">reply<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">RedirectStateData<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">r<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><cast type="static" pos:line="4" pos:column="28">static_cast<argument_list type="generic" pos:line="4" pos:column="39">&lt;<argument><expr><name pos:line="4" pos:column="40">RedirectStateData<pos:position pos:line="4" pos:column="57"/></name> <operator pos:line="4" pos:column="58">*<pos:position pos:line="4" pos:column="59"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="63"/></argument_list><argument_list pos:line="4" pos:column="60">(<argument><expr><name pos:line="4" pos:column="61">data<pos:position pos:line="4" pos:column="65"/></name></expr></argument>)<pos:position pos:line="4" pos:column="66"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="67"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">61<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">5<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="19">HERE<pos:position pos:line="5" pos:column="23"/></name> <operator pos:line="5" pos:column="24">&lt;&lt;<pos:position pos:line="5" pos:column="32"/></operator> <literal type="string" pos:line="5" pos:column="27">"reply="<pos:position pos:line="5" pos:column="35"/></literal> <operator pos:line="5" pos:column="36">&lt;&lt;<pos:position pos:line="5" pos:column="44"/></operator> <name pos:line="5" pos:column="39">reply<pos:position pos:line="5" pos:column="44"/></name></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="46"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// XXX: This function is now kept only to check for and display the garbage use-case</comment>
    <comment type="line" pos:line="8" pos:column="5">// and to map the old helper response format(s) into new format result code and key=value pairs</comment>
    <comment type="line" pos:line="9" pos:column="5">// it can be removed when the helpers are all updated to the normalized "OK/ERR kv-pairs" format</comment>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">reply<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">result<pos:position pos:line="11" pos:column="21"/></name></name> <operator pos:line="11" pos:column="22">==<pos:position pos:line="11" pos:column="24"/></operator> <name><name pos:line="11" pos:column="25">Helper<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">::<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">Unknown<pos:position pos:line="11" pos:column="40"/></name></name></expr>)<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41"> <block pos:line="11" pos:column="42">{
        <comment type="line" pos:line="12" pos:column="9">// BACKWARD COMPATIBILITY 2012-06-15:</comment>
        <comment type="line" pos:line="13" pos:column="9">// Some nasty old helpers send back the entire input line including extra format keys.</comment>
        <comment type="line" pos:line="14" pos:column="9">// This is especially bad for simple perl search-replace filter scripts.</comment>
        <comment type="line" pos:line="15" pos:column="9">//</comment>
        <comment type="line" pos:line="16" pos:column="9">// * trim all but the first word off the response.</comment>
        <comment type="line" pos:line="17" pos:column="9">// * warn once every 50 responses that this will stop being fixed-up soon.</comment>
        <comment type="line" pos:line="18" pos:column="9">//</comment>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<decl><type><specifier pos:line="19" pos:column="13">const<pos:position pos:line="19" pos:column="18"/></specifier> <name pos:line="19" pos:column="19">char<pos:position pos:line="19" pos:column="23"/></name> <modifier pos:line="19" pos:column="24">*<pos:position pos:line="19" pos:column="25"/></modifier></type> <name pos:line="19" pos:column="26">res<pos:position pos:line="19" pos:column="29"/></name> <init pos:line="19" pos:column="30">= <expr><call><name><name pos:line="19" pos:column="32">reply<pos:position pos:line="19" pos:column="37"/></name><operator pos:line="19" pos:column="37">.<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="38">other<pos:position pos:line="19" pos:column="43"/></name></name><argument_list pos:line="19" pos:column="43">()<pos:position pos:line="19" pos:column="45"/></argument_list></call><operator pos:line="19" pos:column="45">.<pos:position pos:line="19" pos:column="46"/></operator><call><name pos:line="19" pos:column="46">content<pos:position pos:line="19" pos:column="53"/></name><argument_list pos:line="19" pos:column="53">()<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr></init></decl>)<pos:position pos:line="19" pos:column="56"/></condition><then pos:line="19" pos:column="56"> <block pos:line="19" pos:column="57">{
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<decl><type><specifier pos:line="20" pos:column="17">const<pos:position pos:line="20" pos:column="22"/></specifier> <name pos:line="20" pos:column="23">char<pos:position pos:line="20" pos:column="27"/></name> <modifier pos:line="20" pos:column="28">*<pos:position pos:line="20" pos:column="29"/></modifier></type><name pos:line="20" pos:column="29">t<pos:position pos:line="20" pos:column="30"/></name> <init pos:line="20" pos:column="31">= <expr><call><name pos:line="20" pos:column="33">strchr<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">res<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="20" pos:column="45">' '<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr></init></decl>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50"> <block pos:line="20" pos:column="51">{
                <decl_stmt><decl><specifier pos:line="21" pos:column="17">static<pos:position pos:line="21" pos:column="23"/></specifier> <type><name pos:line="21" pos:column="24">int<pos:position pos:line="21" pos:column="27"/></name></type> <name pos:line="21" pos:column="28">warn<pos:position pos:line="21" pos:column="32"/></name> <init pos:line="21" pos:column="33">= <expr><literal type="number" pos:line="21" pos:column="35">0<pos:position pos:line="21" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="37"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="22" pos:column="17">debugs<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><literal type="number" pos:line="22" pos:column="24">61<pos:position pos:line="22" pos:column="26"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="28">(<pos:position pos:line="22" pos:column="29"/></operator><ternary><condition><expr><operator pos:line="22" pos:column="29">!<pos:position pos:line="22" pos:column="30"/></operator><operator pos:line="22" pos:column="30">(<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">warn<pos:position pos:line="22" pos:column="35"/></name><operator pos:line="22" pos:column="35">++<pos:position pos:line="22" pos:column="37"/></operator><operator pos:line="22" pos:column="37">%<pos:position pos:line="22" pos:column="38"/></operator><literal type="number" pos:line="22" pos:column="38">50<pos:position pos:line="22" pos:column="40"/></literal><operator pos:line="22" pos:column="40">)<pos:position pos:line="22" pos:column="41"/></operator></expr>?<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42"> <expr><name pos:line="22" pos:column="43">DBG_CRITICAL<pos:position pos:line="22" pos:column="55"/></name></expr></then><else pos:line="22" pos:column="55">:<expr><literal type="number" pos:line="22" pos:column="56">2<pos:position pos:line="22" pos:column="57"/></literal></expr></else></ternary><operator pos:line="22" pos:column="57">)<pos:position pos:line="22" pos:column="58"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="60">"UPGRADE WARNING: URL rewriter reponded with garbage '"<pos:position pos:line="22" pos:column="115"/></literal> <operator pos:line="22" pos:column="116">&lt;&lt;<pos:position pos:line="22" pos:column="124"/></operator> <name pos:line="22" pos:column="119">t<pos:position pos:line="22" pos:column="120"/></name> <operator pos:line="22" pos:column="121">&lt;&lt;<pos:position pos:line="22" pos:column="129"/></operator>
                       <literal type="string" pos:line="23" pos:column="24">"'. Future Squid will treat this as part of the URL."<pos:position pos:line="23" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="79"/></expr_stmt>
                <decl_stmt><decl><type><specifier pos:line="24" pos:column="17">const<pos:position pos:line="24" pos:column="22"/></specifier> <name pos:line="24" pos:column="23">mb_size_t<pos:position pos:line="24" pos:column="32"/></name></type> <name pos:line="24" pos:column="33">garbageLength<pos:position pos:line="24" pos:column="46"/></name> <init pos:line="24" pos:column="47">= <expr><call><name><name pos:line="24" pos:column="49">reply<pos:position pos:line="24" pos:column="54"/></name><operator pos:line="24" pos:column="54">.<pos:position pos:line="24" pos:column="55"/></operator><name pos:line="24" pos:column="55">other<pos:position pos:line="24" pos:column="60"/></name></name><argument_list pos:line="24" pos:column="60">()<pos:position pos:line="24" pos:column="62"/></argument_list></call><operator pos:line="24" pos:column="62">.<pos:position pos:line="24" pos:column="63"/></operator><call><name pos:line="24" pos:column="63">contentSize<pos:position pos:line="24" pos:column="74"/></name><argument_list pos:line="24" pos:column="74">()<pos:position pos:line="24" pos:column="76"/></argument_list></call> <operator pos:line="24" pos:column="77">-<pos:position pos:line="24" pos:column="78"/></operator> <operator pos:line="24" pos:column="79">(<pos:position pos:line="24" pos:column="80"/></operator><name pos:line="24" pos:column="80">t<pos:position pos:line="24" pos:column="81"/></name><operator pos:line="24" pos:column="81">-<pos:position pos:line="24" pos:column="82"/></operator><name pos:line="24" pos:column="82">res<pos:position pos:line="24" pos:column="85"/></name><operator pos:line="24" pos:column="85">)<pos:position pos:line="24" pos:column="86"/></operator></expr></init></decl>;<pos:position pos:line="24" pos:column="87"/></decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="25" pos:column="17">reply<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">.<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="23">modifiableOther<pos:position pos:line="25" pos:column="38"/></name></name><argument_list pos:line="25" pos:column="38">()<pos:position pos:line="25" pos:column="40"/></argument_list></call><operator pos:line="25" pos:column="40">.<pos:position pos:line="25" pos:column="41"/></operator><call><name pos:line="25" pos:column="41">truncate<pos:position pos:line="25" pos:column="49"/></name><argument_list pos:line="25" pos:column="49">(<argument><expr><name pos:line="25" pos:column="50">garbageLength<pos:position pos:line="25" pos:column="63"/></name></expr></argument>)<pos:position pos:line="25" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="65"/></expr_stmt>
            }<pos:position pos:line="26" pos:column="14"/></block></then></if>
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><call><name><name pos:line="27" pos:column="17">reply<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">.<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">other<pos:position pos:line="27" pos:column="28"/></name></name><argument_list pos:line="27" pos:column="28">()<pos:position pos:line="27" pos:column="30"/></argument_list></call><operator pos:line="27" pos:column="30">.<pos:position pos:line="27" pos:column="31"/></operator><call><name pos:line="27" pos:column="31">hasContent<pos:position pos:line="27" pos:column="41"/></name><argument_list pos:line="27" pos:column="41">()<pos:position pos:line="27" pos:column="43"/></argument_list></call> <operator pos:line="27" pos:column="44">&amp;&amp;<pos:position pos:line="27" pos:column="54"/></operator> <operator pos:line="27" pos:column="47">*<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="48">res<pos:position pos:line="27" pos:column="51"/></name> <operator pos:line="27" pos:column="52">==<pos:position pos:line="27" pos:column="54"/></operator> <literal type="char" pos:line="27" pos:column="55">'\0'<pos:position pos:line="27" pos:column="59"/></literal></expr>)<pos:position pos:line="27" pos:column="60"/></condition><then pos:line="27" pos:column="60">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="28" pos:column="17">reply<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">.<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="23">modifiableOther<pos:position pos:line="28" pos:column="38"/></name></name><argument_list pos:line="28" pos:column="38">()<pos:position pos:line="28" pos:column="40"/></argument_list></call><operator pos:line="28" pos:column="40">.<pos:position pos:line="28" pos:column="41"/></operator><call><name pos:line="28" pos:column="41">clean<pos:position pos:line="28" pos:column="46"/></name><argument_list pos:line="28" pos:column="46">()<pos:position pos:line="28" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="49"/></expr_stmt></block></then></if> <comment type="line" pos:line="28" pos:column="50">// drop the whole buffer of garbage.</comment>

            <comment type="line" pos:line="30" pos:column="13">// if we still have anything in other() after all that</comment>
            <comment type="line" pos:line="31" pos:column="13">// parse it into status=, url= and rewrite-url= keys</comment>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><call><name><name pos:line="32" pos:column="17">reply<pos:position pos:line="32" pos:column="22"/></name><operator pos:line="32" pos:column="22">.<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="23">other<pos:position pos:line="32" pos:column="28"/></name></name><argument_list pos:line="32" pos:column="28">()<pos:position pos:line="32" pos:column="30"/></argument_list></call><operator pos:line="32" pos:column="30">.<pos:position pos:line="32" pos:column="31"/></operator><call><name pos:line="32" pos:column="31">hasContent<pos:position pos:line="32" pos:column="41"/></name><argument_list pos:line="32" pos:column="41">()<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="44"/></condition><then pos:line="32" pos:column="44"> <block pos:line="32" pos:column="45">{
                <comment type="block" pos:line="33" pos:column="17">/* 2012-06-28: This cast is due to urlParse() truncating too-long URLs itself.
                 * At this point altering the helper buffer in that way is not harmful, but annoying.
                 * When Bug 1961 is resolved and urlParse has a const API, this needs to die.
                 */</comment>
                <decl_stmt><decl><type><name pos:line="37" pos:column="17">char<pos:position pos:line="37" pos:column="21"/></name> <modifier pos:line="37" pos:column="22">*<pos:position pos:line="37" pos:column="23"/></modifier></type> <name pos:line="37" pos:column="24">result<pos:position pos:line="37" pos:column="30"/></name> <init pos:line="37" pos:column="31">= <expr><call><name><name pos:line="37" pos:column="33">reply<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">.<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="39">modifiableOther<pos:position pos:line="37" pos:column="54"/></name></name><argument_list pos:line="37" pos:column="54">()<pos:position pos:line="37" pos:column="56"/></argument_list></call><operator pos:line="37" pos:column="56">.<pos:position pos:line="37" pos:column="57"/></operator><call><name pos:line="37" pos:column="57">content<pos:position pos:line="37" pos:column="64"/></name><argument_list pos:line="37" pos:column="64">()<pos:position pos:line="37" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="67"/></decl_stmt>

                <decl_stmt><decl><type><name><name pos:line="39" pos:column="17">Helper<pos:position pos:line="39" pos:column="23"/></name><operator pos:line="39" pos:column="23">::<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="25">Reply<pos:position pos:line="39" pos:column="30"/></name></name></type> <name pos:line="39" pos:column="31">newReply<pos:position pos:line="39" pos:column="39"/></name></decl>;<pos:position pos:line="39" pos:column="40"/></decl_stmt>
                <comment type="line" pos:line="40" pos:column="17">// BACKWARD COMPATIBILITY 2012-06-15:</comment>
                <comment type="line" pos:line="41" pos:column="17">// We got Helper::Unknown reply result but new</comment>
                <comment type="line" pos:line="42" pos:column="17">// RedirectStateData handlers require Helper::Okay,</comment>
                <comment type="line" pos:line="43" pos:column="17">// else will drop the helper reply</comment>
                <expr_stmt><expr><name><name pos:line="44" pos:column="17">newReply<pos:position pos:line="44" pos:column="25"/></name><operator pos:line="44" pos:column="25">.<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="26">result<pos:position pos:line="44" pos:column="32"/></name></name> <operator pos:line="44" pos:column="33">=<pos:position pos:line="44" pos:column="34"/></operator> <name><name pos:line="44" pos:column="35">Helper<pos:position pos:line="44" pos:column="41"/></name><operator pos:line="44" pos:column="41">::<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="43">Okay<pos:position pos:line="44" pos:column="47"/></name></name></expr>;<pos:position pos:line="44" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="45" pos:column="17">newReply<pos:position pos:line="45" pos:column="25"/></name><operator pos:line="45" pos:column="25">.<pos:position pos:line="45" pos:column="26"/></operator><name pos:line="45" pos:column="26">notes<pos:position pos:line="45" pos:column="31"/></name><operator pos:line="45" pos:column="31">.<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="32">append<pos:position pos:line="45" pos:column="38"/></name></name><argument_list pos:line="45" pos:column="38">(<argument><expr><operator pos:line="45" pos:column="39">&amp;<pos:position pos:line="45" pos:column="44"/></operator><name><name pos:line="45" pos:column="40">reply<pos:position pos:line="45" pos:column="45"/></name><operator pos:line="45" pos:column="45">.<pos:position pos:line="45" pos:column="46"/></operator><name pos:line="45" pos:column="46">notes<pos:position pos:line="45" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="53"/></expr_stmt>

                <comment type="line" pos:line="47" pos:column="17">// check and parse for obsoleted Squid-2 urlgroup feature</comment>
                <if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><operator pos:line="48" pos:column="21">*<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="22">result<pos:position pos:line="48" pos:column="28"/></name> <operator pos:line="48" pos:column="29">==<pos:position pos:line="48" pos:column="31"/></operator> <literal type="char" pos:line="48" pos:column="32">'!'<pos:position pos:line="48" pos:column="35"/></literal></expr>)<pos:position pos:line="48" pos:column="36"/></condition><then pos:line="48" pos:column="36"> <block pos:line="48" pos:column="37">{
                    <decl_stmt><decl><specifier pos:line="49" pos:column="21">static<pos:position pos:line="49" pos:column="27"/></specifier> <type><name pos:line="49" pos:column="28">int<pos:position pos:line="49" pos:column="31"/></name></type> <name pos:line="49" pos:column="32">urlgroupWarning<pos:position pos:line="49" pos:column="47"/></name> <init pos:line="49" pos:column="48">= <expr><literal type="number" pos:line="49" pos:column="50">0<pos:position pos:line="49" pos:column="51"/></literal></expr></init></decl>;<pos:position pos:line="49" pos:column="52"/></decl_stmt>
                    <if pos:line="50" pos:column="21">if <condition pos:line="50" pos:column="24">(<expr><operator pos:line="50" pos:column="25">!<pos:position pos:line="50" pos:column="26"/></operator><name pos:line="50" pos:column="26">urlgroupWarning<pos:position pos:line="50" pos:column="41"/></name><operator pos:line="50" pos:column="41">++<pos:position pos:line="50" pos:column="43"/></operator></expr>)<pos:position pos:line="50" pos:column="44"/></condition><then pos:line="50" pos:column="44">
                        <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="25">debugs<pos:position pos:line="51" pos:column="31"/></name><argument_list pos:line="51" pos:column="31">(<argument><expr><literal type="number" pos:line="51" pos:column="32">85<pos:position pos:line="51" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="36">DBG_IMPORTANT<pos:position pos:line="51" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="51">"UPGRADE WARNING: URL rewriter using obsolete Squid-2 urlgroup feature needs updating."<pos:position pos:line="51" pos:column="138"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="139"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="140"/></expr_stmt></block></then></if>
                    <if pos:line="52" pos:column="21">if <condition pos:line="52" pos:column="24">(<decl><type><name pos:line="52" pos:column="25">char<pos:position pos:line="52" pos:column="29"/></name> <modifier pos:line="52" pos:column="30">*<pos:position pos:line="52" pos:column="31"/></modifier></type><name pos:line="52" pos:column="31">t<pos:position pos:line="52" pos:column="32"/></name> <init pos:line="52" pos:column="33">= <expr><call><name pos:line="52" pos:column="35">strchr<pos:position pos:line="52" pos:column="41"/></name><argument_list pos:line="52" pos:column="41">(<argument><expr><name pos:line="52" pos:column="42">result<pos:position pos:line="52" pos:column="48"/></name><operator pos:line="52" pos:column="48">+<pos:position pos:line="52" pos:column="49"/></operator><literal type="number" pos:line="52" pos:column="49">1<pos:position pos:line="52" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="52" pos:column="52">'!'<pos:position pos:line="52" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr></init></decl>)<pos:position pos:line="52" pos:column="57"/></condition><then pos:line="52" pos:column="57"> <block pos:line="52" pos:column="58">{
                        <expr_stmt><expr><operator pos:line="53" pos:column="25">*<pos:position pos:line="53" pos:column="26"/></operator><name pos:line="53" pos:column="26">t<pos:position pos:line="53" pos:column="27"/></name> <operator pos:line="53" pos:column="28">=<pos:position pos:line="53" pos:column="29"/></operator> <literal type="char" pos:line="53" pos:column="30">'\0'<pos:position pos:line="53" pos:column="34"/></literal></expr>;<pos:position pos:line="53" pos:column="35"/></expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="54" pos:column="25">newReply<pos:position pos:line="54" pos:column="33"/></name><operator pos:line="54" pos:column="33">.<pos:position pos:line="54" pos:column="34"/></operator><name pos:line="54" pos:column="34">notes<pos:position pos:line="54" pos:column="39"/></name><operator pos:line="54" pos:column="39">.<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="40">add<pos:position pos:line="54" pos:column="43"/></name></name><argument_list pos:line="54" pos:column="43">(<argument><expr><literal type="string" pos:line="54" pos:column="44">"urlgroup"<pos:position pos:line="54" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="56">result<pos:position pos:line="54" pos:column="62"/></name><operator pos:line="54" pos:column="62">+<pos:position pos:line="54" pos:column="63"/></operator><literal type="number" pos:line="54" pos:column="63">1<pos:position pos:line="54" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="66"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="55" pos:column="25">result<pos:position pos:line="55" pos:column="31"/></name> <operator pos:line="55" pos:column="32">=<pos:position pos:line="55" pos:column="33"/></operator> <name pos:line="55" pos:column="34">t<pos:position pos:line="55" pos:column="35"/></name> <operator pos:line="55" pos:column="36">+<pos:position pos:line="55" pos:column="37"/></operator> <literal type="number" pos:line="55" pos:column="38">1<pos:position pos:line="55" pos:column="39"/></literal></expr>;<pos:position pos:line="55" pos:column="40"/></expr_stmt>
                    }<pos:position pos:line="56" pos:column="22"/></block></then></if>
                }<pos:position pos:line="57" pos:column="18"/></block></then></if>

                <decl_stmt><decl><type><specifier pos:line="59" pos:column="17">const<pos:position pos:line="59" pos:column="22"/></specifier> <name><name pos:line="59" pos:column="23">Http<pos:position pos:line="59" pos:column="27"/></name><operator pos:line="59" pos:column="27">::<pos:position pos:line="59" pos:column="29"/></operator><name pos:line="59" pos:column="29">StatusCode<pos:position pos:line="59" pos:column="39"/></name></name></type> <name pos:line="59" pos:column="40">status<pos:position pos:line="59" pos:column="46"/></name> <init pos:line="59" pos:column="47">= <expr><cast type="static" pos:line="59" pos:column="49">static_cast<argument_list type="generic" pos:line="59" pos:column="60">&lt;<argument><expr><name><name pos:line="59" pos:column="61">Http<pos:position pos:line="59" pos:column="65"/></name><operator pos:line="59" pos:column="65">::<pos:position pos:line="59" pos:column="67"/></operator><name pos:line="59" pos:column="67">StatusCode<pos:position pos:line="59" pos:column="77"/></name></name></expr></argument>&gt;<pos:position pos:line="59" pos:column="81"/></argument_list><argument_list pos:line="59" pos:column="78">(<argument><expr><call><name pos:line="59" pos:column="79">atoi<pos:position pos:line="59" pos:column="83"/></name><argument_list pos:line="59" pos:column="83">(<argument><expr><name pos:line="59" pos:column="84">result<pos:position pos:line="59" pos:column="90"/></name></expr></argument>)<pos:position pos:line="59" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="92"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="59" pos:column="93"/></decl_stmt>

                <if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name pos:line="61" pos:column="21">status<pos:position pos:line="61" pos:column="27"/></name> <operator pos:line="61" pos:column="28">==<pos:position pos:line="61" pos:column="30"/></operator> <name><name pos:line="61" pos:column="31">Http<pos:position pos:line="61" pos:column="35"/></name><operator pos:line="61" pos:column="35">::<pos:position pos:line="61" pos:column="37"/></operator><name pos:line="61" pos:column="37">scMovedPermanently<pos:position pos:line="61" pos:column="55"/></name></name>
                        <operator pos:line="62" pos:column="25">||<pos:position pos:line="62" pos:column="27"/></operator> <name pos:line="62" pos:column="28">status<pos:position pos:line="62" pos:column="34"/></name> <operator pos:line="62" pos:column="35">==<pos:position pos:line="62" pos:column="37"/></operator> <name><name pos:line="62" pos:column="38">Http<pos:position pos:line="62" pos:column="42"/></name><operator pos:line="62" pos:column="42">::<pos:position pos:line="62" pos:column="44"/></operator><name pos:line="62" pos:column="44">scFound<pos:position pos:line="62" pos:column="51"/></name></name>
                        <operator pos:line="63" pos:column="25">||<pos:position pos:line="63" pos:column="27"/></operator> <name pos:line="63" pos:column="28">status<pos:position pos:line="63" pos:column="34"/></name> <operator pos:line="63" pos:column="35">==<pos:position pos:line="63" pos:column="37"/></operator> <name><name pos:line="63" pos:column="38">Http<pos:position pos:line="63" pos:column="42"/></name><operator pos:line="63" pos:column="42">::<pos:position pos:line="63" pos:column="44"/></operator><name pos:line="63" pos:column="44">scSeeOther<pos:position pos:line="63" pos:column="54"/></name></name>
                        <operator pos:line="64" pos:column="25">||<pos:position pos:line="64" pos:column="27"/></operator> <name pos:line="64" pos:column="28">status<pos:position pos:line="64" pos:column="34"/></name> <operator pos:line="64" pos:column="35">==<pos:position pos:line="64" pos:column="37"/></operator> <name><name pos:line="64" pos:column="38">Http<pos:position pos:line="64" pos:column="42"/></name><operator pos:line="64" pos:column="42">::<pos:position pos:line="64" pos:column="44"/></operator><name pos:line="64" pos:column="44">scPermanentRedirect<pos:position pos:line="64" pos:column="63"/></name></name>
                        <operator pos:line="65" pos:column="25">||<pos:position pos:line="65" pos:column="27"/></operator> <name pos:line="65" pos:column="28">status<pos:position pos:line="65" pos:column="34"/></name> <operator pos:line="65" pos:column="35">==<pos:position pos:line="65" pos:column="37"/></operator> <name><name pos:line="65" pos:column="38">Http<pos:position pos:line="65" pos:column="42"/></name><operator pos:line="65" pos:column="42">::<pos:position pos:line="65" pos:column="44"/></operator><name pos:line="65" pos:column="44">scTemporaryRedirect<pos:position pos:line="65" pos:column="63"/></name></name></expr>)<pos:position pos:line="65" pos:column="64"/></condition><then pos:line="65" pos:column="64"> <block pos:line="65" pos:column="65">{

                    <if pos:line="67" pos:column="21">if <condition pos:line="67" pos:column="24">(<decl><type><specifier pos:line="67" pos:column="25">const<pos:position pos:line="67" pos:column="30"/></specifier> <name pos:line="67" pos:column="31">char<pos:position pos:line="67" pos:column="35"/></name> <modifier pos:line="67" pos:column="36">*<pos:position pos:line="67" pos:column="37"/></modifier></type><name pos:line="67" pos:column="37">t<pos:position pos:line="67" pos:column="38"/></name> <init pos:line="67" pos:column="39">= <expr><call><name pos:line="67" pos:column="41">strchr<pos:position pos:line="67" pos:column="47"/></name><argument_list pos:line="67" pos:column="47">(<argument><expr><name pos:line="67" pos:column="48">result<pos:position pos:line="67" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="67" pos:column="56">':'<pos:position pos:line="67" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="60"/></argument_list></call></expr></init></decl>)<pos:position pos:line="67" pos:column="61"/></condition><then pos:line="67" pos:column="61"> <block pos:line="67" pos:column="62">{
                        <decl_stmt><decl><type><name pos:line="68" pos:column="25">char<pos:position pos:line="68" pos:column="29"/></name></type> <name><name pos:line="68" pos:column="30">statusBuf<pos:position pos:line="68" pos:column="39"/></name><index pos:line="68" pos:column="39">[<expr><literal type="number" pos:line="68" pos:column="40">4<pos:position pos:line="68" pos:column="41"/></literal></expr>]<pos:position pos:line="68" pos:column="42"/></index></name></decl>;<pos:position pos:line="68" pos:column="43"/></decl_stmt>
                        <expr_stmt><expr><call><name pos:line="69" pos:column="25">snprintf<pos:position pos:line="69" pos:column="33"/></name><argument_list pos:line="69" pos:column="33">(<argument><expr><name pos:line="69" pos:column="34">statusBuf<pos:position pos:line="69" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="45">sizeof<argument_list pos:line="69" pos:column="51">(<argument><expr><name pos:line="69" pos:column="52">statusBuf<pos:position pos:line="69" pos:column="61"/></name></expr></argument>)<pos:position pos:line="69" pos:column="62"/></argument_list></sizeof></expr></argument>,<argument><expr><literal type="string" pos:line="69" pos:column="63">"%3u"<pos:position pos:line="69" pos:column="68"/></literal></expr></argument>,<argument><expr><name pos:line="69" pos:column="69">status<pos:position pos:line="69" pos:column="75"/></name></expr></argument>)<pos:position pos:line="69" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="77"/></expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="70" pos:column="25">newReply<pos:position pos:line="70" pos:column="33"/></name><operator pos:line="70" pos:column="33">.<pos:position pos:line="70" pos:column="34"/></operator><name pos:line="70" pos:column="34">notes<pos:position pos:line="70" pos:column="39"/></name><operator pos:line="70" pos:column="39">.<pos:position pos:line="70" pos:column="40"/></operator><name pos:line="70" pos:column="40">add<pos:position pos:line="70" pos:column="43"/></name></name><argument_list pos:line="70" pos:column="43">(<argument><expr><literal type="string" pos:line="70" pos:column="44">"status"<pos:position pos:line="70" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="54">statusBuf<pos:position pos:line="70" pos:column="63"/></name></expr></argument>)<pos:position pos:line="70" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="65"/></expr_stmt>
                        <expr_stmt><expr><operator pos:line="71" pos:column="25">++<pos:position pos:line="71" pos:column="27"/></operator><name pos:line="71" pos:column="27">t<pos:position pos:line="71" pos:column="28"/></name></expr>;<pos:position pos:line="71" pos:column="29"/></expr_stmt>
                        <comment type="line" pos:line="72" pos:column="25">// TODO: validate the URL produced here is RFC 2616 compliant URI</comment>
                        <expr_stmt><expr><call><name><name pos:line="73" pos:column="25">newReply<pos:position pos:line="73" pos:column="33"/></name><operator pos:line="73" pos:column="33">.<pos:position pos:line="73" pos:column="34"/></operator><name pos:line="73" pos:column="34">notes<pos:position pos:line="73" pos:column="39"/></name><operator pos:line="73" pos:column="39">.<pos:position pos:line="73" pos:column="40"/></operator><name pos:line="73" pos:column="40">add<pos:position pos:line="73" pos:column="43"/></name></name><argument_list pos:line="73" pos:column="43">(<argument><expr><literal type="string" pos:line="73" pos:column="44">"url"<pos:position pos:line="73" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="51">t<pos:position pos:line="73" pos:column="52"/></name></expr></argument>)<pos:position pos:line="73" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="54"/></expr_stmt>
                    }<pos:position pos:line="74" pos:column="22"/></block></then> <else pos:line="74" pos:column="23">else <block pos:line="74" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="75" pos:column="25">debugs<pos:position pos:line="75" pos:column="31"/></name><argument_list pos:line="75" pos:column="31">(<argument><expr><literal type="number" pos:line="75" pos:column="32">85<pos:position pos:line="75" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="36">DBG_CRITICAL<pos:position pos:line="75" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="50">"ERROR: URL-rewrite produces invalid "<pos:position pos:line="75" pos:column="88"/></literal> <operator pos:line="75" pos:column="89">&lt;&lt;<pos:position pos:line="75" pos:column="97"/></operator> <name pos:line="75" pos:column="92">status<pos:position pos:line="75" pos:column="98"/></name> <operator pos:line="75" pos:column="99">&lt;&lt;<pos:position pos:line="75" pos:column="107"/></operator> <literal type="string" pos:line="75" pos:column="102">" redirect Location: "<pos:position pos:line="75" pos:column="124"/></literal> <operator pos:line="75" pos:column="125">&lt;&lt;<pos:position pos:line="75" pos:column="133"/></operator> <name pos:line="75" pos:column="128">result<pos:position pos:line="75" pos:column="134"/></name></expr></argument>)<pos:position pos:line="75" pos:column="135"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="136"/></expr_stmt>
                    }<pos:position pos:line="76" pos:column="22"/></block></else></if>
                }<pos:position pos:line="77" pos:column="18"/></block></then> <else pos:line="77" pos:column="19">else <block pos:line="77" pos:column="24">{
                    <comment type="line" pos:line="78" pos:column="21">// status code is not a redirect code (or does not exist)</comment>
                    <comment type="line" pos:line="79" pos:column="21">// treat as a re-write URL request</comment>
                    <comment type="line" pos:line="80" pos:column="21">// TODO: validate the URL produced here is RFC 2616 compliant URI</comment>
                    <if pos:line="81" pos:column="21">if <condition pos:line="81" pos:column="24">(<expr><operator pos:line="81" pos:column="25">*<pos:position pos:line="81" pos:column="26"/></operator><name pos:line="81" pos:column="26">result<pos:position pos:line="81" pos:column="32"/></name></expr>)<pos:position pos:line="81" pos:column="33"/></condition><then pos:line="81" pos:column="33">
                        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="82" pos:column="25">newReply<pos:position pos:line="82" pos:column="33"/></name><operator pos:line="82" pos:column="33">.<pos:position pos:line="82" pos:column="34"/></operator><name pos:line="82" pos:column="34">notes<pos:position pos:line="82" pos:column="39"/></name><operator pos:line="82" pos:column="39">.<pos:position pos:line="82" pos:column="40"/></operator><name pos:line="82" pos:column="40">add<pos:position pos:line="82" pos:column="43"/></name></name><argument_list pos:line="82" pos:column="43">(<argument><expr><literal type="string" pos:line="82" pos:column="44">"rewrite-url"<pos:position pos:line="82" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="59">result<pos:position pos:line="82" pos:column="65"/></name></expr></argument>)<pos:position pos:line="82" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="67"/></expr_stmt></block></then></if>
                }<pos:position pos:line="83" pos:column="18"/></block></else></if>

                <decl_stmt><decl><type><name pos:line="85" pos:column="17">void<pos:position pos:line="85" pos:column="21"/></name> <modifier pos:line="85" pos:column="22">*<pos:position pos:line="85" pos:column="23"/></modifier></type><name pos:line="85" pos:column="23">cbdata<pos:position pos:line="85" pos:column="29"/></name></decl>;<pos:position pos:line="85" pos:column="30"/></decl_stmt>
                <if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><call><name pos:line="86" pos:column="21">cbdataReferenceValidDone<pos:position pos:line="86" pos:column="45"/></name><argument_list pos:line="86" pos:column="45">(<argument><expr><name><name pos:line="86" pos:column="46">r<pos:position pos:line="86" pos:column="47"/></name><operator pos:line="86" pos:column="47">-&gt;<pos:position pos:line="86" pos:column="52"/></operator><name pos:line="86" pos:column="49">data<pos:position pos:line="86" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="55">&amp;<pos:position pos:line="86" pos:column="60"/></operator><name pos:line="86" pos:column="56">cbdata<pos:position pos:line="86" pos:column="62"/></name></expr></argument>)<pos:position pos:line="86" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="64"/></condition><then pos:line="86" pos:column="64">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="87" pos:column="21">r<pos:position pos:line="87" pos:column="22"/></name><operator pos:line="87" pos:column="22">-&gt;<pos:position pos:line="87" pos:column="27"/></operator><name pos:line="87" pos:column="24">handler<pos:position pos:line="87" pos:column="31"/></name></name><argument_list pos:line="87" pos:column="31">(<argument><expr><name pos:line="87" pos:column="32">cbdata<pos:position pos:line="87" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="40">newReply<pos:position pos:line="87" pos:column="48"/></name></expr></argument>)<pos:position pos:line="87" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="50"/></expr_stmt></block></then></if>

                <expr_stmt><expr><operator pos:line="89" pos:column="17">delete<pos:position pos:line="89" pos:column="23"/></operator> <name pos:line="89" pos:column="24">r<pos:position pos:line="89" pos:column="25"/></name></expr>;<pos:position pos:line="89" pos:column="26"/></expr_stmt>
                <return pos:line="90" pos:column="17">return;<pos:position pos:line="90" pos:column="24"/></return>
            }<pos:position pos:line="91" pos:column="14"/></block></then></if>
        }<pos:position pos:line="92" pos:column="10"/></block></then></if>
    }<pos:position pos:line="93" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="95" pos:column="5">void<pos:position pos:line="95" pos:column="9"/></name> <modifier pos:line="95" pos:column="10">*<pos:position pos:line="95" pos:column="11"/></modifier></type><name pos:line="95" pos:column="11">cbdata<pos:position pos:line="95" pos:column="17"/></name></decl>;<pos:position pos:line="95" pos:column="18"/></decl_stmt>
    <if pos:line="96" pos:column="5">if <condition pos:line="96" pos:column="8">(<expr><call><name pos:line="96" pos:column="9">cbdataReferenceValidDone<pos:position pos:line="96" pos:column="33"/></name><argument_list pos:line="96" pos:column="33">(<argument><expr><name><name pos:line="96" pos:column="34">r<pos:position pos:line="96" pos:column="35"/></name><operator pos:line="96" pos:column="35">-&gt;<pos:position pos:line="96" pos:column="40"/></operator><name pos:line="96" pos:column="37">data<pos:position pos:line="96" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="43">&amp;<pos:position pos:line="96" pos:column="48"/></operator><name pos:line="96" pos:column="44">cbdata<pos:position pos:line="96" pos:column="50"/></name></expr></argument>)<pos:position pos:line="96" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="52"/></condition><then pos:line="96" pos:column="52">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="97" pos:column="9">r<pos:position pos:line="97" pos:column="10"/></name><operator pos:line="97" pos:column="10">-&gt;<pos:position pos:line="97" pos:column="15"/></operator><name pos:line="97" pos:column="12">handler<pos:position pos:line="97" pos:column="19"/></name></name><argument_list pos:line="97" pos:column="19">(<argument><expr><name pos:line="97" pos:column="20">cbdata<pos:position pos:line="97" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="28">reply<pos:position pos:line="97" pos:column="33"/></name></expr></argument>)<pos:position pos:line="97" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="35"/></expr_stmt></block></then></if>

    <expr_stmt><expr><operator pos:line="99" pos:column="5">delete<pos:position pos:line="99" pos:column="11"/></operator> <name pos:line="99" pos:column="12">r<pos:position pos:line="99" pos:column="13"/></name></expr>;<pos:position pos:line="99" pos:column="14"/></expr_stmt>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
