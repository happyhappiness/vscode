<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1300_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HelperReply<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">parseResponseKeys<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">()<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// parse a "key=value" pair off the 'other()' buffer.</comment>
    <while pos:line="5" pos:column="5">while <condition pos:line="5" pos:column="11">(<expr><call><name pos:line="5" pos:column="12">other<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">()<pos:position pos:line="5" pos:column="19"/></argument_list></call><operator pos:line="5" pos:column="19">.<pos:position pos:line="5" pos:column="20"/></operator><call><name pos:line="5" pos:column="20">hasContent<pos:position pos:line="5" pos:column="30"/></name><argument_list pos:line="5" pos:column="30">()<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="33"/></condition> <block pos:line="5" pos:column="34">{
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">p<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><call><name pos:line="6" pos:column="19">modifiableOther<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">()<pos:position pos:line="6" pos:column="36"/></argument_list></call><operator pos:line="6" pos:column="36">.<pos:position pos:line="6" pos:column="37"/></operator><call><name pos:line="6" pos:column="37">content<pos:position pos:line="6" pos:column="44"/></name><argument_list pos:line="6" pos:column="44">()<pos:position pos:line="6" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="47"/></decl_stmt>
        <while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><operator pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">p<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">&amp;&amp;<pos:position pos:line="7" pos:column="29"/></operator> <call><name pos:line="7" pos:column="22">isKeyNameChar<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><operator pos:line="7" pos:column="36">*<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="37">p<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="40"/></condition> <block type="pseudo"><expr_stmt><expr><operator pos:line="7" pos:column="41">++<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="43">p<pos:position pos:line="7" pos:column="44"/></name></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt></block></while>
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">p<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">!=<pos:position pos:line="8" pos:column="18"/></operator> <literal type="char" pos:line="8" pos:column="19">'='<pos:position pos:line="8" pos:column="22"/></literal></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23">
            <block type="pseudo"><return pos:line="9" pos:column="13">return;<pos:position pos:line="9" pos:column="20"/></return></block></then></if> <comment type="line" pos:line="9" pos:column="21">// done. Not a key.</comment>

        <comment type="line" pos:line="11" pos:column="9">// whitespace between key and value is prohibited.</comment>
        <comment type="line" pos:line="12" pos:column="9">// workaround strwordtok() which skips whitespace prefix.</comment>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">xisspace<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><operator pos:line="13" pos:column="22">*<pos:position pos:line="13" pos:column="23"/></operator><operator pos:line="13" pos:column="23">(<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">p<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">+<pos:position pos:line="13" pos:column="26"/></operator><literal type="number" pos:line="13" pos:column="26">1<pos:position pos:line="13" pos:column="27"/></literal><operator pos:line="13" pos:column="27">)<pos:position pos:line="13" pos:column="28"/></operator></expr></argument>)<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="30"/></condition><then pos:line="13" pos:column="30">
            <block type="pseudo"><return pos:line="14" pos:column="13">return;<pos:position pos:line="14" pos:column="20"/></return></block></then></if> <comment type="line" pos:line="14" pos:column="21">// done. Not a key.</comment>

        <expr_stmt><expr><operator pos:line="16" pos:column="9">*<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">p<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <literal type="char" pos:line="16" pos:column="14">'\0'<pos:position pos:line="16" pos:column="18"/></literal></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="17" pos:column="9">++<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">p<pos:position pos:line="17" pos:column="12"/></name></expr>;<pos:position pos:line="17" pos:column="13"/></expr_stmt>

        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">const<pos:position pos:line="19" pos:column="14"/></specifier> <name pos:line="19" pos:column="15">char<pos:position pos:line="19" pos:column="19"/></name> <modifier pos:line="19" pos:column="20">*<pos:position pos:line="19" pos:column="21"/></modifier></type><name pos:line="19" pos:column="21">key<pos:position pos:line="19" pos:column="24"/></name> <init pos:line="19" pos:column="25">= <expr><call><name pos:line="19" pos:column="27">other<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">()<pos:position pos:line="19" pos:column="34"/></argument_list></call><operator pos:line="19" pos:column="34">.<pos:position pos:line="19" pos:column="35"/></operator><call><name pos:line="19" pos:column="35">content<pos:position pos:line="19" pos:column="42"/></name><argument_list pos:line="19" pos:column="42">()<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="45"/></decl_stmt>

        <comment type="line" pos:line="21" pos:column="9">// the value may be a quoted string or a token</comment>
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">const<pos:position pos:line="22" pos:column="14"/></specifier> <name pos:line="22" pos:column="15">bool<pos:position pos:line="22" pos:column="19"/></name></type> <name pos:line="22" pos:column="20">urlDecode<pos:position pos:line="22" pos:column="29"/></name> <init pos:line="22" pos:column="30">= <expr><operator pos:line="22" pos:column="32">(<pos:position pos:line="22" pos:column="33"/></operator><operator pos:line="22" pos:column="33">*<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="34">p<pos:position pos:line="22" pos:column="35"/></name> <operator pos:line="22" pos:column="36">!=<pos:position pos:line="22" pos:column="38"/></operator> <literal type="char" pos:line="22" pos:column="39">'"'<pos:position pos:line="22" pos:column="42"/></literal><operator pos:line="22" pos:column="42">)<pos:position pos:line="22" pos:column="43"/></operator></expr></init></decl>;<pos:position pos:line="22" pos:column="44"/></decl_stmt> <comment type="line" pos:line="22" pos:column="45">// check before moving p.</comment>
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">char<pos:position pos:line="23" pos:column="13"/></name> <modifier pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></modifier></type><name pos:line="23" pos:column="15">v<pos:position pos:line="23" pos:column="16"/></name> <init pos:line="23" pos:column="17">= <expr><call><name pos:line="23" pos:column="19">strwordtok<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">NULL<pos:position pos:line="23" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="36">&amp;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="37">p<pos:position pos:line="23" pos:column="38"/></name></expr></argument>)<pos:position pos:line="23" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="40"/></decl_stmt>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">v<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">!=<pos:position pos:line="24" pos:column="17"/></operator> <name pos:line="24" pos:column="18">NULL<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">&amp;&amp;<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="26">urlDecode<pos:position pos:line="24" pos:column="35"/></name> <operator pos:line="24" pos:column="36">&amp;&amp;<pos:position pos:line="24" pos:column="46"/></operator> <operator pos:line="24" pos:column="39">(<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="40">p<pos:position pos:line="24" pos:column="41"/></name><operator pos:line="24" pos:column="41">-<pos:position pos:line="24" pos:column="42"/></operator><name pos:line="24" pos:column="42">v<pos:position pos:line="24" pos:column="43"/></name><operator pos:line="24" pos:column="43">)<pos:position pos:line="24" pos:column="44"/></operator> <operator pos:line="24" pos:column="45">&gt;<pos:position pos:line="24" pos:column="49"/></operator> <literal type="number" pos:line="24" pos:column="47">2<pos:position pos:line="24" pos:column="48"/></literal></expr>)<pos:position pos:line="24" pos:column="49"/></condition><then pos:line="24" pos:column="49"> <comment type="line" pos:line="24" pos:column="50">// 1-octet %-escaped requires 3 bytes</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="13">rfc1738_unescape<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">v<pos:position pos:line="25" pos:column="31"/></name></expr></argument>)<pos:position pos:line="25" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="27" pos:column="9">notes<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">.<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="15">add<pos:position pos:line="27" pos:column="18"/></name></name><argument_list pos:line="27" pos:column="18">(<argument><expr><name pos:line="27" pos:column="19">key<pos:position pos:line="27" pos:column="22"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="27" pos:column="24">v<pos:position pos:line="27" pos:column="25"/></name></expr> ?<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27"> <expr><name pos:line="27" pos:column="28">v<pos:position pos:line="27" pos:column="29"/></name></expr> <pos:position pos:line="27" pos:column="30"/></then><else pos:line="27" pos:column="30">: <expr><literal type="string" pos:line="27" pos:column="32">""<pos:position pos:line="27" pos:column="34"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt> <comment type="line" pos:line="27" pos:column="37">// value can be empty, but must not be NULL</comment>

        <expr_stmt><expr><call><name pos:line="29" pos:column="9">modifiableOther<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">()<pos:position pos:line="29" pos:column="26"/></argument_list></call><operator pos:line="29" pos:column="26">.<pos:position pos:line="29" pos:column="27"/></operator><call><name pos:line="29" pos:column="27">consume<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">p<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">-<pos:position pos:line="29" pos:column="38"/></operator> <call><name pos:line="29" pos:column="39">other<pos:position pos:line="29" pos:column="44"/></name><argument_list pos:line="29" pos:column="44">()<pos:position pos:line="29" pos:column="46"/></argument_list></call><operator pos:line="29" pos:column="46">.<pos:position pos:line="29" pos:column="47"/></operator><call><name pos:line="29" pos:column="47">content<pos:position pos:line="29" pos:column="54"/></name><argument_list pos:line="29" pos:column="54">()<pos:position pos:line="29" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">modifiableOther<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">()<pos:position pos:line="30" pos:column="26"/></argument_list></call><operator pos:line="30" pos:column="26">.<pos:position pos:line="30" pos:column="27"/></operator><call><name pos:line="30" pos:column="27">consumeWhitespacePrefix<pos:position pos:line="30" pos:column="50"/></name><argument_list pos:line="30" pos:column="50">()<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></while>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
