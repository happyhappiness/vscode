<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1322_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">peerHandlePingReply<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">CachePeer<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type> <name pos:line="2" pos:column="33">p<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">peer_t<pos:position pos:line="2" pos:column="42"/></name></type> <name pos:line="2" pos:column="43">type<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="49">AnyP<pos:position pos:line="2" pos:column="53"/></name><operator pos:line="2" pos:column="53">::<pos:position pos:line="2" pos:column="55"/></operator><name pos:line="2" pos:column="55">ProtocolType<pos:position pos:line="2" pos:column="67"/></name></name></type> <name pos:line="2" pos:column="68">proto<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="75">void<pos:position pos:line="2" pos:column="79"/></name> <modifier pos:line="2" pos:column="80">*<pos:position pos:line="2" pos:column="81"/></modifier></type><name pos:line="2" pos:column="81">pingdata<pos:position pos:line="2" pos:column="89"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="91">void<pos:position pos:line="2" pos:column="95"/></name> <modifier pos:line="2" pos:column="96">*<pos:position pos:line="2" pos:column="97"/></modifier></type><name pos:line="2" pos:column="97">data<pos:position pos:line="2" pos:column="101"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="102"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">proto<pos:position pos:line="4" pos:column="14"/></name> <operator pos:line="4" pos:column="15">==<pos:position pos:line="4" pos:column="17"/></operator> <name><name pos:line="4" pos:column="18">AnyP<pos:position pos:line="4" pos:column="22"/></name><operator pos:line="4" pos:column="22">::<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">PROTO_ICP<pos:position pos:line="4" pos:column="33"/></name></name></expr>)<pos:position pos:line="4" pos:column="34"/></condition><then pos:line="4" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="5" pos:column="9">peerHandleIcpReply<pos:position pos:line="5" pos:column="27"/></name><argument_list pos:line="5" pos:column="27">(<argument><expr><name pos:line="5" pos:column="28">p<pos:position pos:line="5" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="31">type<pos:position pos:line="5" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="37">(<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="38">icp_common_t<pos:position pos:line="5" pos:column="50"/></name> <operator pos:line="5" pos:column="51">*<pos:position pos:line="5" pos:column="52"/></operator><operator pos:line="5" pos:column="52">)<pos:position pos:line="5" pos:column="53"/></operator><name pos:line="5" pos:column="53">pingdata<pos:position pos:line="5" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="63">data<pos:position pos:line="5" pos:column="67"/></name></expr></argument>)<pos:position pos:line="5" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="69"/></expr_stmt></block></then>

<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">USE_HTCP<pos:position pos:line="7" pos:column="13"/></name></expr></cpp:if>

    <elseif pos:line="9" pos:column="5">else <if pos:line="9" pos:column="10">if <condition pos:line="9" pos:column="13">(<expr><name pos:line="9" pos:column="14">proto<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">==<pos:position pos:line="9" pos:column="22"/></operator> <name><name pos:line="9" pos:column="23">AnyP<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">::<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">PROTO_HTCP<pos:position pos:line="9" pos:column="39"/></name></name></expr>)<pos:position pos:line="9" pos:column="40"/></condition><then pos:line="9" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="9">peerHandleHtcpReply<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">p<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="32">type<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="38">(<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="39">HtcpReplyData<pos:position pos:line="10" pos:column="52"/></name> <operator pos:line="10" pos:column="53">*<pos:position pos:line="10" pos:column="54"/></operator><operator pos:line="10" pos:column="54">)<pos:position pos:line="10" pos:column="55"/></operator><name pos:line="10" pos:column="55">pingdata<pos:position pos:line="10" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="65">data<pos:position pos:line="10" pos:column="69"/></name></expr></argument>)<pos:position pos:line="10" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="71"/></expr_stmt></block></then></if></elseif>

<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

    <else pos:line="14" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">44<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="20">DBG_IMPORTANT<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="35">"peerHandlePingReply: unknown protocol "<pos:position pos:line="15" pos:column="75"/></literal> <operator pos:line="15" pos:column="76">&lt;&lt;<pos:position pos:line="15" pos:column="84"/></operator> <name pos:line="15" pos:column="79">proto<pos:position pos:line="15" pos:column="84"/></name></expr></argument>)<pos:position pos:line="15" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="86"/></expr_stmt></block></else></if>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
