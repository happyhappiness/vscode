<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3481_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">vbMakeMore<pos:position pos:line="2" pos:column="41"/></name></name><parameter_list pos:line="2" pos:column="41">()<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">makingVb<pos:position pos:line="4" pos:column="18"/></name> <operator pos:line="4" pos:column="19">==<pos:position pos:line="4" pos:column="21"/></operator> <name pos:line="4" pos:column="22">opOn<pos:position pos:line="4" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="28"/></expr_stmt> <comment type="line" pos:line="4" pos:column="29">// cannot make more if done proxying</comment>
    <comment type="line" pos:line="5" pos:column="5">// we cannot guarantee more vb, but we can check that there is a chance</comment>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">BodyPipePointer<pos:position pos:line="6" pos:column="26"/></name> <modifier pos:line="6" pos:column="27">&amp;<pos:position pos:line="6" pos:column="32"/></modifier></type><name pos:line="6" pos:column="28">p<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><call><name><name pos:line="6" pos:column="32">theVirginRep<pos:position pos:line="6" pos:column="44"/></name><operator pos:line="6" pos:column="44">.<pos:position pos:line="6" pos:column="45"/></operator><name pos:line="6" pos:column="45">raw<pos:position pos:line="6" pos:column="48"/></name></name><argument_list pos:line="6" pos:column="48">()<pos:position pos:line="6" pos:column="50"/></argument_list></call><operator pos:line="6" pos:column="50">.<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="51">body_pipe<pos:position pos:line="6" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">Must<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><name pos:line="7" pos:column="10">p<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">!=<pos:position pos:line="7" pos:column="14"/></operator> <name pos:line="7" pos:column="15">NULL<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">&amp;&amp;<pos:position pos:line="7" pos:column="30"/></operator> <call><name><name pos:line="7" pos:column="23">p<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">-&gt;<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="26">stillConsuming<pos:position pos:line="7" pos:column="40"/></name></name><argument_list pos:line="7" pos:column="40">(<argument><expr><name pos:line="7" pos:column="41">this<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="48"/></expr_stmt> <comment type="line" pos:line="7" pos:column="49">// we are plugged in</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">Must<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><operator pos:line="8" pos:column="10">!<pos:position pos:line="8" pos:column="11"/></operator><call><name><name pos:line="8" pos:column="11">p<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">productionEnded<pos:position pos:line="8" pos:column="29"/></name></name><argument_list pos:line="8" pos:column="29">()<pos:position pos:line="8" pos:column="31"/></argument_list></call> <operator pos:line="8" pos:column="32">&amp;&amp;<pos:position pos:line="8" pos:column="42"/></operator> <call><name><name pos:line="8" pos:column="35">p<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">-&gt;<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="38">mayNeedMoreData<pos:position pos:line="8" pos:column="53"/></name></name><argument_list pos:line="8" pos:column="53">()<pos:position pos:line="8" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="57"/></expr_stmt> <comment type="line" pos:line="8" pos:column="58">// and may get more</comment>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
