<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6298_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">diskerWriteAttempts<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">IpcIoMsg<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">&amp;<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="31">ipcIo<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">buf<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><call><name><name pos:line="4" pos:column="23">Ipc<pos:position pos:line="4" pos:column="26"/></name><operator pos:line="4" pos:column="26">::<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">Mem<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">::<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="33">PagePointer<pos:position pos:line="4" pos:column="44"/></name></name><argument_list pos:line="4" pos:column="44">(<argument><expr><name><name pos:line="4" pos:column="45">ipcIo<pos:position pos:line="4" pos:column="50"/></name><operator pos:line="4" pos:column="50">.<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="51">page<pos:position pos:line="4" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="57"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">toWrite<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><call><name pos:line="5" pos:column="22">min<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name><name pos:line="5" pos:column="26">ipcIo<pos:position pos:line="5" pos:column="31"/></name><operator pos:line="5" pos:column="31">.<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="32">len<pos:position pos:line="5" pos:column="35"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="5" pos:column="37">Ipc<pos:position pos:line="5" pos:column="40"/></name><operator pos:line="5" pos:column="40">::<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="42">Mem<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">::<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="47">PageSize<pos:position pos:line="5" pos:column="55"/></name></name><argument_list pos:line="5" pos:column="55">()<pos:position pos:line="5" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="59"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">wroteSoFar<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">off_t<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">offset<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><name><name pos:line="7" pos:column="20">ipcIo<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">.<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="26">offset<pos:position pos:line="7" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
    <comment type="line" pos:line="8" pos:column="5">// Partial writes to disk do happen. It is unlikely that the caller can</comment>
    <comment type="line" pos:line="9" pos:column="5">// handle partial writes by doing something other than writing leftovers</comment>
    <comment type="line" pos:line="10" pos:column="5">// again, so we try to write them ourselves to minimize overheads.</comment>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">int<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">attemptLimit<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><literal type="number" pos:line="11" pos:column="30">10<pos:position pos:line="11" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="33"/></decl_stmt>
    <for pos:line="12" pos:column="5">for <control pos:line="12" pos:column="9">(<init><decl><type><name pos:line="12" pos:column="10">int<pos:position pos:line="12" pos:column="13"/></name></type> <name pos:line="12" pos:column="14">attempts<pos:position pos:line="12" pos:column="22"/></name> <init pos:line="12" pos:column="23">= <expr><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="27"/></init> <condition><expr><name pos:line="12" pos:column="28">attempts<pos:position pos:line="12" pos:column="36"/></name> <operator pos:line="12" pos:column="37">&lt;=<pos:position pos:line="12" pos:column="42"/></operator> <name pos:line="12" pos:column="40">attemptLimit<pos:position pos:line="12" pos:column="52"/></name></expr>;<pos:position pos:line="12" pos:column="53"/></condition> <incr><expr><operator pos:line="12" pos:column="54">++<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="56">attempts<pos:position pos:line="12" pos:column="64"/></name></expr></incr>)<pos:position pos:line="12" pos:column="65"/></control> <block pos:line="12" pos:column="66">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name pos:line="13" pos:column="15">ssize_t<pos:position pos:line="13" pos:column="22"/></name></type> <name pos:line="13" pos:column="23">result<pos:position pos:line="13" pos:column="29"/></name> <init pos:line="13" pos:column="30">= <expr><call><name pos:line="13" pos:column="32">pwrite<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">TheFile<pos:position pos:line="13" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="48">buf<pos:position pos:line="13" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="53">toWrite<pos:position pos:line="13" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="62">offset<pos:position pos:line="13" pos:column="68"/></name></expr></argument>)<pos:position pos:line="13" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="70"/></decl_stmt>
        <expr_stmt><expr><operator pos:line="14" pos:column="9">++<pos:position pos:line="14" pos:column="11"/></operator><name><name pos:line="14" pos:column="11">statCounter<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">.<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="23">syscalls<pos:position pos:line="14" pos:column="31"/></name><operator pos:line="14" pos:column="31">.<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">disk<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">.<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">writes<pos:position pos:line="14" pos:column="43"/></name></name></expr>;<pos:position pos:line="14" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">fd_bytes<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">TheFile<pos:position pos:line="15" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="27">result<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="35">FD_WRITE<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>

        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">result<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">&lt;<pos:position pos:line="17" pos:column="24"/></operator> <literal type="number" pos:line="17" pos:column="22">0<pos:position pos:line="17" pos:column="23"/></literal></expr>)<pos:position pos:line="17" pos:column="24"/></condition><then pos:line="17" pos:column="24"> <block pos:line="17" pos:column="25">{
            <expr_stmt><expr><name><name pos:line="18" pos:column="13">ipcIo<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">.<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">xerrno<pos:position pos:line="18" pos:column="25"/></name></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="28">errno<pos:position pos:line="18" pos:column="33"/></name></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">assert<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name><name pos:line="19" pos:column="20">ipcIo<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">.<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">xerrno<pos:position pos:line="19" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">debugs<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><literal type="number" pos:line="20" pos:column="20">47<pos:position pos:line="20" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="24">DBG_IMPORTANT<pos:position pos:line="20" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="39">"ERROR: "<pos:position pos:line="20" pos:column="48"/></literal> <operator pos:line="20" pos:column="49">&lt;&lt;<pos:position pos:line="20" pos:column="57"/></operator> <name pos:line="20" pos:column="52">DbName<pos:position pos:line="20" pos:column="58"/></name> <operator pos:line="20" pos:column="59">&lt;&lt;<pos:position pos:line="20" pos:column="67"/></operator> <literal type="string" pos:line="20" pos:column="62">" failure"<pos:position pos:line="20" pos:column="72"/></literal> <operator pos:line="20" pos:column="73">&lt;&lt;<pos:position pos:line="20" pos:column="81"/></operator>
                   <literal type="string" pos:line="21" pos:column="20">" writing "<pos:position pos:line="21" pos:column="31"/></literal> <operator pos:line="21" pos:column="32">&lt;&lt;<pos:position pos:line="21" pos:column="40"/></operator> <name pos:line="21" pos:column="35">toWrite<pos:position pos:line="21" pos:column="42"/></name> <operator pos:line="21" pos:column="43">&lt;&lt;<pos:position pos:line="21" pos:column="51"/></operator> <literal type="char" pos:line="21" pos:column="46">'/'<pos:position pos:line="21" pos:column="49"/></literal> <operator pos:line="21" pos:column="50">&lt;&lt;<pos:position pos:line="21" pos:column="58"/></operator> <name><name pos:line="21" pos:column="53">ipcIo<pos:position pos:line="21" pos:column="58"/></name><operator pos:line="21" pos:column="58">.<pos:position pos:line="21" pos:column="59"/></operator><name pos:line="21" pos:column="59">len<pos:position pos:line="21" pos:column="62"/></name></name> <operator pos:line="21" pos:column="63">&lt;&lt;<pos:position pos:line="21" pos:column="71"/></operator>
                   <literal type="string" pos:line="22" pos:column="20">" at "<pos:position pos:line="22" pos:column="26"/></literal> <operator pos:line="22" pos:column="27">&lt;&lt;<pos:position pos:line="22" pos:column="35"/></operator> <name><name pos:line="22" pos:column="30">ipcIo<pos:position pos:line="22" pos:column="35"/></name><operator pos:line="22" pos:column="35">.<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="36">offset<pos:position pos:line="22" pos:column="42"/></name></name> <operator pos:line="22" pos:column="43">&lt;&lt;<pos:position pos:line="22" pos:column="51"/></operator> <literal type="char" pos:line="22" pos:column="46">'+'<pos:position pos:line="22" pos:column="49"/></literal> <operator pos:line="22" pos:column="50">&lt;&lt;<pos:position pos:line="22" pos:column="58"/></operator> <name pos:line="22" pos:column="53">wroteSoFar<pos:position pos:line="22" pos:column="63"/></name> <operator pos:line="22" pos:column="64">&lt;&lt;<pos:position pos:line="22" pos:column="72"/></operator>
                   <literal type="string" pos:line="23" pos:column="20">" on "<pos:position pos:line="23" pos:column="26"/></literal> <operator pos:line="23" pos:column="27">&lt;&lt;<pos:position pos:line="23" pos:column="35"/></operator> <name pos:line="23" pos:column="30">attempts<pos:position pos:line="23" pos:column="38"/></name> <operator pos:line="23" pos:column="39">&lt;&lt;<pos:position pos:line="23" pos:column="47"/></operator> <literal type="string" pos:line="23" pos:column="42">" try: "<pos:position pos:line="23" pos:column="50"/></literal> <operator pos:line="23" pos:column="51">&lt;&lt;<pos:position pos:line="23" pos:column="59"/></operator> <call><name pos:line="23" pos:column="54">xstrerr<pos:position pos:line="23" pos:column="61"/></name><argument_list pos:line="23" pos:column="61">(<argument><expr><name><name pos:line="23" pos:column="62">ipcIo<pos:position pos:line="23" pos:column="67"/></name><operator pos:line="23" pos:column="67">.<pos:position pos:line="23" pos:column="68"/></operator><name pos:line="23" pos:column="68">xerrno<pos:position pos:line="23" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="77"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="24" pos:column="13">ipcIo<pos:position pos:line="24" pos:column="18"/></name><operator pos:line="24" pos:column="18">.<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="19">len<pos:position pos:line="24" pos:column="22"/></name></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="25">wroteSoFar<pos:position pos:line="24" pos:column="35"/></name></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
            <return pos:line="25" pos:column="13">return;<pos:position pos:line="25" pos:column="20"/></return> <comment type="line" pos:line="25" pos:column="21">// bail on error</comment>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>

        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">const<pos:position pos:line="28" pos:column="14"/></specifier> <name pos:line="28" pos:column="15">size_t<pos:position pos:line="28" pos:column="21"/></name></type> <name pos:line="28" pos:column="22">wroteNow<pos:position pos:line="28" pos:column="30"/></name> <init pos:line="28" pos:column="31">= <expr><cast type="static" pos:line="28" pos:column="33">static_cast<argument_list type="generic" pos:line="28" pos:column="44">&lt;<argument><expr><name pos:line="28" pos:column="45">size_t<pos:position pos:line="28" pos:column="51"/></name></expr></argument>&gt;<pos:position pos:line="28" pos:column="55"/></argument_list><argument_list pos:line="28" pos:column="52">(<argument><expr><name pos:line="28" pos:column="53">result<pos:position pos:line="28" pos:column="59"/></name></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="28" pos:column="61"/></decl_stmt> <comment type="line" pos:line="28" pos:column="62">// result &gt;= 0</comment>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">ipcIo<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">.<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="15">xerrno<pos:position pos:line="29" pos:column="21"/></name></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <literal type="number" pos:line="29" pos:column="24">0<pos:position pos:line="29" pos:column="25"/></literal></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">47<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="31" pos:column="19">3<pos:position pos:line="31" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="22">"disker"<pos:position pos:line="31" pos:column="30"/></literal> <operator pos:line="31" pos:column="31">&lt;&lt;<pos:position pos:line="31" pos:column="39"/></operator> <name pos:line="31" pos:column="34">KidIdentifier<pos:position pos:line="31" pos:column="47"/></name> <operator pos:line="31" pos:column="48">&lt;&lt;<pos:position pos:line="31" pos:column="56"/></operator> <literal type="string" pos:line="31" pos:column="51">" wrote "<pos:position pos:line="31" pos:column="60"/></literal> <operator pos:line="31" pos:column="61">&lt;&lt;<pos:position pos:line="31" pos:column="69"/></operator>
               <operator pos:line="32" pos:column="16">(<pos:position pos:line="32" pos:column="17"/></operator><ternary><condition><expr><name pos:line="32" pos:column="17">wroteNow<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">&gt;=<pos:position pos:line="32" pos:column="31"/></operator> <name pos:line="32" pos:column="29">toWrite<pos:position pos:line="32" pos:column="36"/></name></expr> ?<pos:position pos:line="32" pos:column="38"/></condition><then pos:line="32" pos:column="38"> <expr><literal type="string" pos:line="32" pos:column="39">"all "<pos:position pos:line="32" pos:column="45"/></literal></expr> <pos:position pos:line="32" pos:column="46"/></then><else pos:line="32" pos:column="46">: <expr><literal type="string" pos:line="32" pos:column="48">"just "<pos:position pos:line="32" pos:column="55"/></literal></expr></else></ternary><operator pos:line="32" pos:column="55">)<pos:position pos:line="32" pos:column="56"/></operator> <operator pos:line="32" pos:column="57">&lt;&lt;<pos:position pos:line="32" pos:column="65"/></operator> <name pos:line="32" pos:column="60">wroteNow<pos:position pos:line="32" pos:column="68"/></name> <operator pos:line="32" pos:column="69">&lt;&lt;<pos:position pos:line="32" pos:column="77"/></operator>
               <literal type="string" pos:line="33" pos:column="16">" out of "<pos:position pos:line="33" pos:column="26"/></literal> <operator pos:line="33" pos:column="27">&lt;&lt;<pos:position pos:line="33" pos:column="35"/></operator> <name pos:line="33" pos:column="30">toWrite<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">&lt;&lt;<pos:position pos:line="33" pos:column="46"/></operator> <literal type="char" pos:line="33" pos:column="41">'/'<pos:position pos:line="33" pos:column="44"/></literal> <operator pos:line="33" pos:column="45">&lt;&lt;<pos:position pos:line="33" pos:column="53"/></operator> <name><name pos:line="33" pos:column="48">ipcIo<pos:position pos:line="33" pos:column="53"/></name><operator pos:line="33" pos:column="53">.<pos:position pos:line="33" pos:column="54"/></operator><name pos:line="33" pos:column="54">len<pos:position pos:line="33" pos:column="57"/></name></name> <operator pos:line="33" pos:column="58">&lt;&lt;<pos:position pos:line="33" pos:column="66"/></operator> <literal type="string" pos:line="33" pos:column="61">" at "<pos:position pos:line="33" pos:column="67"/></literal> <operator pos:line="33" pos:column="68">&lt;&lt;<pos:position pos:line="33" pos:column="76"/></operator>
               <name><name pos:line="34" pos:column="16">ipcIo<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">.<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">offset<pos:position pos:line="34" pos:column="28"/></name></name> <operator pos:line="34" pos:column="29">&lt;&lt;<pos:position pos:line="34" pos:column="37"/></operator> <literal type="char" pos:line="34" pos:column="32">'+'<pos:position pos:line="34" pos:column="35"/></literal> <operator pos:line="34" pos:column="36">&lt;&lt;<pos:position pos:line="34" pos:column="44"/></operator> <name pos:line="34" pos:column="39">wroteSoFar<pos:position pos:line="34" pos:column="49"/></name> <operator pos:line="34" pos:column="50">&lt;&lt;<pos:position pos:line="34" pos:column="58"/></operator> <literal type="string" pos:line="34" pos:column="53">" on "<pos:position pos:line="34" pos:column="59"/></literal> <operator pos:line="34" pos:column="60">&lt;&lt;<pos:position pos:line="34" pos:column="68"/></operator> <name pos:line="34" pos:column="63">attempts<pos:position pos:line="34" pos:column="71"/></name> <operator pos:line="34" pos:column="72">&lt;&lt;<pos:position pos:line="34" pos:column="80"/></operator>
               <literal type="string" pos:line="35" pos:column="16">" try"<pos:position pos:line="35" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>

        <expr_stmt><expr><name pos:line="37" pos:column="9">wroteSoFar<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">+=<pos:position pos:line="37" pos:column="22"/></operator> <name pos:line="37" pos:column="23">wroteNow<pos:position pos:line="37" pos:column="31"/></name></expr>;<pos:position pos:line="37" pos:column="32"/></expr_stmt>

        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">wroteNow<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">&gt;=<pos:position pos:line="39" pos:column="27"/></operator> <name pos:line="39" pos:column="25">toWrite<pos:position pos:line="39" pos:column="32"/></name></expr>)<pos:position pos:line="39" pos:column="33"/></condition><then pos:line="39" pos:column="33"> <block pos:line="39" pos:column="34">{
            <expr_stmt><expr><name><name pos:line="40" pos:column="13">ipcIo<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">.<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="19">xerrno<pos:position pos:line="40" pos:column="25"/></name></name> <operator pos:line="40" pos:column="26">=<pos:position pos:line="40" pos:column="27"/></operator> <literal type="number" pos:line="40" pos:column="28">0<pos:position pos:line="40" pos:column="29"/></literal></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="41" pos:column="13">ipcIo<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">.<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">len<pos:position pos:line="41" pos:column="22"/></name></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <name pos:line="41" pos:column="25">wroteSoFar<pos:position pos:line="41" pos:column="35"/></name></expr>;<pos:position pos:line="41" pos:column="36"/></expr_stmt>
            <return pos:line="42" pos:column="13">return;<pos:position pos:line="42" pos:column="20"/></return> <comment type="line" pos:line="42" pos:column="21">// wrote everything there was to write</comment>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="45" pos:column="9">buf<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">+=<pos:position pos:line="45" pos:column="15"/></operator> <name pos:line="45" pos:column="16">wroteNow<pos:position pos:line="45" pos:column="24"/></name></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="46" pos:column="9">offset<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">+=<pos:position pos:line="46" pos:column="18"/></operator> <name pos:line="46" pos:column="19">wroteNow<pos:position pos:line="46" pos:column="27"/></name></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name pos:line="47" pos:column="9">toWrite<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">-=<pos:position pos:line="47" pos:column="19"/></operator> <name pos:line="47" pos:column="20">wroteNow<pos:position pos:line="47" pos:column="28"/></name></expr>;<pos:position pos:line="47" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="50" pos:column="5">debugs<pos:position pos:line="50" pos:column="11"/></name><argument_list pos:line="50" pos:column="11">(<argument><expr><literal type="number" pos:line="50" pos:column="12">47<pos:position pos:line="50" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="16">DBG_IMPORTANT<pos:position pos:line="50" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="31">"ERROR: "<pos:position pos:line="50" pos:column="40"/></literal> <operator pos:line="50" pos:column="41">&lt;&lt;<pos:position pos:line="50" pos:column="49"/></operator> <name pos:line="50" pos:column="44">DbName<pos:position pos:line="50" pos:column="50"/></name> <operator pos:line="50" pos:column="51">&lt;&lt;<pos:position pos:line="50" pos:column="59"/></operator> <literal type="string" pos:line="50" pos:column="54">" exhausted all "<pos:position pos:line="50" pos:column="71"/></literal> <operator pos:line="50" pos:column="72">&lt;&lt;<pos:position pos:line="50" pos:column="80"/></operator>
           <name pos:line="51" pos:column="12">attemptLimit<pos:position pos:line="51" pos:column="24"/></name> <operator pos:line="51" pos:column="25">&lt;&lt;<pos:position pos:line="51" pos:column="33"/></operator> <literal type="string" pos:line="51" pos:column="28">" attempts while writing "<pos:position pos:line="51" pos:column="54"/></literal> <operator pos:line="51" pos:column="55">&lt;&lt;<pos:position pos:line="51" pos:column="63"/></operator>
           <name pos:line="52" pos:column="12">toWrite<pos:position pos:line="52" pos:column="19"/></name> <operator pos:line="52" pos:column="20">&lt;&lt;<pos:position pos:line="52" pos:column="28"/></operator> <literal type="char" pos:line="52" pos:column="23">'/'<pos:position pos:line="52" pos:column="26"/></literal> <operator pos:line="52" pos:column="27">&lt;&lt;<pos:position pos:line="52" pos:column="35"/></operator> <name><name pos:line="52" pos:column="30">ipcIo<pos:position pos:line="52" pos:column="35"/></name><operator pos:line="52" pos:column="35">.<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="36">len<pos:position pos:line="52" pos:column="39"/></name></name> <operator pos:line="52" pos:column="40">&lt;&lt;<pos:position pos:line="52" pos:column="48"/></operator> <literal type="string" pos:line="52" pos:column="43">" at "<pos:position pos:line="52" pos:column="49"/></literal> <operator pos:line="52" pos:column="50">&lt;&lt;<pos:position pos:line="52" pos:column="58"/></operator> <name><name pos:line="52" pos:column="53">ipcIo<pos:position pos:line="52" pos:column="58"/></name><operator pos:line="52" pos:column="58">.<pos:position pos:line="52" pos:column="59"/></operator><name pos:line="52" pos:column="59">offset<pos:position pos:line="52" pos:column="65"/></name></name> <operator pos:line="52" pos:column="66">&lt;&lt;<pos:position pos:line="52" pos:column="74"/></operator> <literal type="char" pos:line="52" pos:column="69">'+'<pos:position pos:line="52" pos:column="72"/></literal> <operator pos:line="52" pos:column="73">&lt;&lt;<pos:position pos:line="52" pos:column="81"/></operator>
           <name pos:line="53" pos:column="12">wroteSoFar<pos:position pos:line="53" pos:column="22"/></name></expr></argument>)<pos:position pos:line="53" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="24"/></expr_stmt>
    <return pos:line="54" pos:column="5">return;<pos:position pos:line="54" pos:column="12"/></return> <comment type="line" pos:line="54" pos:column="13">// not a fatal I/O error, unless the caller treats it as such</comment>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
