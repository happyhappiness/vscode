<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7453_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">HandshakeParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">parseCiphers<pos:position pos:line="2" pos:column="40"/></name></name><parameter_list pos:line="2" pos:column="40">(<parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">SBuf<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">&amp;<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="53">raw<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">details<pos:position pos:line="4" pos:column="12"/></name><operator pos:line="4" pos:column="12">-&gt;<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="14">ciphers<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">.<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">reserve<pos:position pos:line="4" pos:column="29"/></name></name><argument_list pos:line="4" pos:column="29">(<argument><expr><call><name><name pos:line="4" pos:column="30">raw<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">.<pos:position pos:line="4" pos:column="34"/></operator><name pos:line="4" pos:column="34">length<pos:position pos:line="4" pos:column="40"/></name></name><argument_list pos:line="4" pos:column="40">()<pos:position pos:line="4" pos:column="42"/></argument_list></call> <operator pos:line="4" pos:column="43">/<pos:position pos:line="4" pos:column="44"/></operator> <sizeof pos:line="4" pos:column="45">sizeof<argument_list pos:line="4" pos:column="51">(<argument><expr><name pos:line="4" pos:column="52">uint16_t<pos:position pos:line="4" pos:column="60"/></name></expr></argument>)<pos:position pos:line="4" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="4" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="63"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">Parser<pos:position pos:line="5" pos:column="11"/></name><operator pos:line="5" pos:column="11">::<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">BinaryTokenizer<pos:position pos:line="5" pos:column="28"/></name></name></type> <name pos:line="5" pos:column="29">tk<pos:position pos:line="5" pos:column="31"/></name><argument_list pos:line="5" pos:column="31">(<argument><expr><name pos:line="5" pos:column="32">raw<pos:position pos:line="5" pos:column="35"/></name></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><operator pos:line="6" pos:column="12">!<pos:position pos:line="6" pos:column="13"/></operator><call><name><name pos:line="6" pos:column="13">tk<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">.<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">atEnd<pos:position pos:line="6" pos:column="21"/></name></name><argument_list pos:line="6" pos:column="21">()<pos:position pos:line="6" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="24"/></condition> <block pos:line="6" pos:column="25">{
        <decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">uint16_t<pos:position pos:line="7" pos:column="23"/></name></type> <name pos:line="7" pos:column="24">cipher<pos:position pos:line="7" pos:column="30"/></name> <init pos:line="7" pos:column="31">= <expr><call><name><name pos:line="7" pos:column="33">tk<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">.<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="36">uint16<pos:position pos:line="7" pos:column="42"/></name></name><argument_list pos:line="7" pos:column="42">(<argument><expr><literal type="string" pos:line="7" pos:column="43">"cipher"<pos:position pos:line="7" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="53"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">details<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">-&gt;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="18">ciphers<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">.<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="26">insert<pos:position pos:line="8" pos:column="32"/></name></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">cipher<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></while>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
