<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4081_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">fillPendingStatus<pos:position pos:line="1" pos:column="50"/></name></name><parameter_list pos:line="1" pos:column="50">(<parameter><decl><type><name pos:line="1" pos:column="51">MemBuf<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">&amp;<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="59">buf<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list> <specifier pos:line="1" pos:column="64">const<pos:position pos:line="1" pos:column="69"/></specifier>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="3" pos:column="5">Adaptation<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">::<pos:position pos:line="3" pos:column="17"/></operator><name pos:line="3" pos:column="17">Icap<pos:position pos:line="3" pos:column="21"/></name><operator pos:line="3" pos:column="21">::<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="23">Xaction<pos:position pos:line="3" pos:column="30"/></name><operator pos:line="3" pos:column="30">::<pos:position pos:line="3" pos:column="32"/></operator><name pos:line="3" pos:column="32">fillPendingStatus<pos:position pos:line="3" pos:column="49"/></name></name><argument_list pos:line="3" pos:column="49">(<argument><expr><name pos:line="3" pos:column="50">buf<pos:position pos:line="3" pos:column="53"/></name></expr></argument>)<pos:position pos:line="3" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="55"/></expr_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name><name pos:line="5" pos:column="9">state<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">.<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="15">serviceWaiting<pos:position pos:line="5" pos:column="29"/></name></name></expr>)<pos:position pos:line="5" pos:column="30"/></condition><then pos:line="5" pos:column="30">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="6" pos:column="9">buf<pos:position pos:line="6" pos:column="12"/></name><operator pos:line="6" pos:column="12">.<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">append<pos:position pos:line="6" pos:column="19"/></name></name><argument_list pos:line="6" pos:column="19">(<argument><expr><literal type="string" pos:line="6" pos:column="20">"U"<pos:position pos:line="6" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="25">1<pos:position pos:line="6" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">virgin<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">.<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">body_pipe<pos:position pos:line="8" pos:column="25"/></name></name> <operator pos:line="8" pos:column="26">!=<pos:position pos:line="8" pos:column="28"/></operator> <name pos:line="8" pos:column="29">NULL<pos:position pos:line="8" pos:column="33"/></name></expr>)<pos:position pos:line="8" pos:column="34"/></condition><then pos:line="8" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="9" pos:column="9">buf<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">.<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">append<pos:position pos:line="9" pos:column="19"/></name></name><argument_list pos:line="9" pos:column="19">(<argument><expr><literal type="string" pos:line="9" pos:column="20">"R"<pos:position pos:line="9" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="25">1<pos:position pos:line="9" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">haveConnection<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">()<pos:position pos:line="11" pos:column="25"/></argument_list></call> <operator pos:line="11" pos:column="26">&amp;&amp;<pos:position pos:line="11" pos:column="36"/></operator> <operator pos:line="11" pos:column="29">!<pos:position pos:line="11" pos:column="30"/></operator><call><name pos:line="11" pos:column="30">doneReading<pos:position pos:line="11" pos:column="41"/></name><argument_list pos:line="11" pos:column="41">()<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="44"/></condition><then pos:line="11" pos:column="44">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="12" pos:column="9">buf<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">.<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">append<pos:position pos:line="12" pos:column="19"/></name></name><argument_list pos:line="12" pos:column="19">(<argument><expr><literal type="string" pos:line="12" pos:column="20">"r"<pos:position pos:line="12" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt></block></then></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><call><name><name pos:line="14" pos:column="10">state<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">.<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">doneWriting<pos:position pos:line="14" pos:column="27"/></name></name><argument_list pos:line="14" pos:column="27">()<pos:position pos:line="14" pos:column="29"/></argument_list></call> <operator pos:line="14" pos:column="30">&amp;&amp;<pos:position pos:line="14" pos:column="40"/></operator> <name><name pos:line="14" pos:column="33">state<pos:position pos:line="14" pos:column="38"/></name><operator pos:line="14" pos:column="38">.<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="39">writing<pos:position pos:line="14" pos:column="46"/></name></name> <operator pos:line="14" pos:column="47">!=<pos:position pos:line="14" pos:column="49"/></operator> <name><name pos:line="14" pos:column="50">State<pos:position pos:line="14" pos:column="55"/></name><operator pos:line="14" pos:column="55">::<pos:position pos:line="14" pos:column="57"/></operator><name pos:line="14" pos:column="57">writingInit<pos:position pos:line="14" pos:column="68"/></name></name></expr>)<pos:position pos:line="14" pos:column="69"/></condition><then pos:line="14" pos:column="69">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="15" pos:column="9">buf<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">.<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">Printf<pos:position pos:line="15" pos:column="19"/></name></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="string" pos:line="15" pos:column="20">"w(%d)"<pos:position pos:line="15" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="29">state<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">.<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="35">writing<pos:position pos:line="15" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name><name pos:line="17" pos:column="9">preview<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">.<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">enabled<pos:position pos:line="17" pos:column="24"/></name></name><argument_list pos:line="17" pos:column="24">()<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="27"/></condition><then pos:line="17" pos:column="27"> <block pos:line="17" pos:column="28">{
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><call><name><name pos:line="18" pos:column="14">preview<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">.<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">done<pos:position pos:line="18" pos:column="26"/></name></name><argument_list pos:line="18" pos:column="26">()<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="29"/></condition><then pos:line="18" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="19" pos:column="13">buf<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">.<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">Printf<pos:position pos:line="19" pos:column="23"/></name></name><argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="string" pos:line="19" pos:column="24">"P(%d)"<pos:position pos:line="19" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="33">(<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="34">int<pos:position pos:line="19" pos:column="37"/></name><operator pos:line="19" pos:column="37">)<pos:position pos:line="19" pos:column="38"/></operator> <call><name><name pos:line="19" pos:column="39">preview<pos:position pos:line="19" pos:column="46"/></name><operator pos:line="19" pos:column="46">.<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="47">debt<pos:position pos:line="19" pos:column="51"/></name></name><argument_list pos:line="19" pos:column="51">()<pos:position pos:line="19" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt></block></then></if>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name><name pos:line="22" pos:column="9">virginBodySending<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">.<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="27">active<pos:position pos:line="22" pos:column="33"/></name></name><argument_list pos:line="22" pos:column="33">()<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="36"/></condition><then pos:line="22" pos:column="36">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="23" pos:column="9">buf<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">.<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="13">append<pos:position pos:line="23" pos:column="19"/></name></name><argument_list pos:line="23" pos:column="19">(<argument><expr><literal type="string" pos:line="23" pos:column="20">"B"<pos:position pos:line="23" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="25">1<pos:position pos:line="23" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt></block></then></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><call><name><name pos:line="25" pos:column="10">state<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">.<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="16">doneParsing<pos:position pos:line="25" pos:column="27"/></name></name><argument_list pos:line="25" pos:column="27">()<pos:position pos:line="25" pos:column="29"/></argument_list></call> <operator pos:line="25" pos:column="30">&amp;&amp;<pos:position pos:line="25" pos:column="40"/></operator> <name><name pos:line="25" pos:column="33">state<pos:position pos:line="25" pos:column="38"/></name><operator pos:line="25" pos:column="38">.<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="39">parsing<pos:position pos:line="25" pos:column="46"/></name></name> <operator pos:line="25" pos:column="47">!=<pos:position pos:line="25" pos:column="49"/></operator> <name><name pos:line="25" pos:column="50">State<pos:position pos:line="25" pos:column="55"/></name><operator pos:line="25" pos:column="55">::<pos:position pos:line="25" pos:column="57"/></operator><name pos:line="25" pos:column="57">psIcapHeader<pos:position pos:line="25" pos:column="69"/></name></name></expr>)<pos:position pos:line="25" pos:column="70"/></condition><then pos:line="25" pos:column="70">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="26" pos:column="9">buf<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">.<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">Printf<pos:position pos:line="26" pos:column="19"/></name></name><argument_list pos:line="26" pos:column="19">(<argument><expr><literal type="string" pos:line="26" pos:column="20">"p(%d)"<pos:position pos:line="26" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="29">state<pos:position pos:line="26" pos:column="34"/></name><operator pos:line="26" pos:column="34">.<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="35">parsing<pos:position pos:line="26" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt></block></then></if>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">!<pos:position pos:line="28" pos:column="10"/></operator><call><name pos:line="28" pos:column="10">doneSending<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">()<pos:position pos:line="28" pos:column="23"/></argument_list></call> <operator pos:line="28" pos:column="24">&amp;&amp;<pos:position pos:line="28" pos:column="34"/></operator> <name><name pos:line="28" pos:column="27">state<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">.<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="33">sending<pos:position pos:line="28" pos:column="40"/></name></name> <operator pos:line="28" pos:column="41">!=<pos:position pos:line="28" pos:column="43"/></operator> <name><name pos:line="28" pos:column="44">State<pos:position pos:line="28" pos:column="49"/></name><operator pos:line="28" pos:column="49">::<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="51">sendingUndecided<pos:position pos:line="28" pos:column="67"/></name></name></expr>)<pos:position pos:line="28" pos:column="68"/></condition><then pos:line="28" pos:column="68">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="29" pos:column="9">buf<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">.<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="13">Printf<pos:position pos:line="29" pos:column="19"/></name></name><argument_list pos:line="29" pos:column="19">(<argument><expr><literal type="string" pos:line="29" pos:column="20">"S(%d)"<pos:position pos:line="29" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="29">state<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">.<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="35">sending<pos:position pos:line="29" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt></block></then></if>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">state<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">.<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">readyForUob<pos:position pos:line="31" pos:column="26"/></name></name></expr>)<pos:position pos:line="31" pos:column="27"/></condition><then pos:line="31" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="32" pos:column="9">buf<pos:position pos:line="32" pos:column="12"/></name><operator pos:line="32" pos:column="12">.<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">append<pos:position pos:line="32" pos:column="19"/></name></name><argument_list pos:line="32" pos:column="19">(<argument><expr><literal type="string" pos:line="32" pos:column="20">"6"<pos:position pos:line="32" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="25">1<pos:position pos:line="32" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt></block></then></if>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">canStartBypass<pos:position pos:line="34" pos:column="23"/></name></expr>)<pos:position pos:line="34" pos:column="24"/></condition><then pos:line="34" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="35" pos:column="9">buf<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">.<pos:position pos:line="35" pos:column="13"/></operator><name pos:line="35" pos:column="13">append<pos:position pos:line="35" pos:column="19"/></name></name><argument_list pos:line="35" pos:column="19">(<argument><expr><literal type="string" pos:line="35" pos:column="20">"Y"<pos:position pos:line="35" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="25">1<pos:position pos:line="35" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt></block></then></if>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">protectGroupBypass<pos:position pos:line="37" pos:column="27"/></name></expr>)<pos:position pos:line="37" pos:column="28"/></condition><then pos:line="37" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="38" pos:column="9">buf<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">.<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="13">append<pos:position pos:line="38" pos:column="19"/></name></name><argument_list pos:line="38" pos:column="19">(<argument><expr><literal type="string" pos:line="38" pos:column="20">"G"<pos:position pos:line="38" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="25">1<pos:position pos:line="38" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="28"/></expr_stmt></block></then></if>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
