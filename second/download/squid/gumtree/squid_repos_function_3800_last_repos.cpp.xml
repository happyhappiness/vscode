<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3800_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Bio<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">stateChanged<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">SSL<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">ssl<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">int<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">where<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">int<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">ret<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Here we can use (where &amp; STATE) to check the current state.</comment>
    <comment type="line" pos:line="5" pos:column="5">// Many STATE values are possible, including: SSL_CB_CONNECT_LOOP,</comment>
    <comment type="line" pos:line="6" pos:column="5">// SSL_CB_ACCEPT_LOOP, SSL_CB_HANDSHAKE_START, and SSL_CB_HANDSHAKE_DONE.</comment>
    <comment type="line" pos:line="7" pos:column="5">// For example:</comment>
    <comment type="line" pos:line="8" pos:column="5">// if (where &amp; SSL_CB_HANDSHAKE_START)</comment>
    <comment type="line" pos:line="9" pos:column="5">//    debugs(83, 9, "Trying to establish the SSL connection");</comment>
    <comment type="line" pos:line="10" pos:column="5">// else if (where &amp; SSL_CB_HANDSHAKE_DONE)</comment>
    <comment type="line" pos:line="11" pos:column="5">//    debugs(83, 9, "SSL connection established");</comment>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">83<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="16">7<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="19">"FD "<pos:position pos:line="13" pos:column="24"/></literal> <operator pos:line="13" pos:column="25">&lt;&lt;<pos:position pos:line="13" pos:column="33"/></operator> <name pos:line="13" pos:column="28">fd_<pos:position pos:line="13" pos:column="31"/></name> <operator pos:line="13" pos:column="32">&lt;&lt;<pos:position pos:line="13" pos:column="40"/></operator> <literal type="string" pos:line="13" pos:column="35">" now: 0x"<pos:position pos:line="13" pos:column="45"/></literal> <operator pos:line="13" pos:column="46">&lt;&lt;<pos:position pos:line="13" pos:column="54"/></operator> <name><name pos:line="13" pos:column="49">std<pos:position pos:line="13" pos:column="52"/></name><operator pos:line="13" pos:column="52">::<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="54">hex<pos:position pos:line="13" pos:column="57"/></name></name> <operator pos:line="13" pos:column="58">&lt;&lt;<pos:position pos:line="13" pos:column="66"/></operator> <name pos:line="13" pos:column="61">where<pos:position pos:line="13" pos:column="66"/></name> <operator pos:line="13" pos:column="67">&lt;&lt;<pos:position pos:line="13" pos:column="75"/></operator> <name><name pos:line="13" pos:column="70">std<pos:position pos:line="13" pos:column="73"/></name><operator pos:line="13" pos:column="73">::<pos:position pos:line="13" pos:column="75"/></operator><name pos:line="13" pos:column="75">dec<pos:position pos:line="13" pos:column="78"/></name></name> <operator pos:line="13" pos:column="79">&lt;&lt;<pos:position pos:line="13" pos:column="87"/></operator> <literal type="char" pos:line="13" pos:column="82">' '<pos:position pos:line="13" pos:column="85"/></literal> <operator pos:line="13" pos:column="86">&lt;&lt;<pos:position pos:line="13" pos:column="94"/></operator>
           <call><name pos:line="14" pos:column="12">SSL_state_string<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">ssl<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call> <operator pos:line="14" pos:column="34">&lt;&lt;<pos:position pos:line="14" pos:column="42"/></operator> <literal type="string" pos:line="14" pos:column="37">" ("<pos:position pos:line="14" pos:column="41"/></literal> <operator pos:line="14" pos:column="42">&lt;&lt;<pos:position pos:line="14" pos:column="50"/></operator> <call><name pos:line="14" pos:column="45">SSL_state_string_long<pos:position pos:line="14" pos:column="66"/></name><argument_list pos:line="14" pos:column="66">(<argument><expr><name pos:line="14" pos:column="67">ssl<pos:position pos:line="14" pos:column="70"/></name></expr></argument>)<pos:position pos:line="14" pos:column="71"/></argument_list></call> <operator pos:line="14" pos:column="72">&lt;&lt;<pos:position pos:line="14" pos:column="80"/></operator> <literal type="string" pos:line="14" pos:column="75">")"<pos:position pos:line="14" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="80"/></expr_stmt>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
