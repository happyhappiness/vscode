<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3645_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHdrRange<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">willBeComplex<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">()<pos:position pos:line="2" pos:column="30"/></parameter_list> <specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">this<pos:position pos:line="4" pos:column="16"/></name></expr></argument>)<pos:position pos:line="4" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="18"/></expr_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* check that all rangers are in "strong" order, */</comment>
    <comment type="block" pos:line="6" pos:column="5">/* as far as we can tell without the content length */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int64_t<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">offset<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>

    <for pos:line="9" pos:column="5">for <control pos:line="9" pos:column="9">(<init><decl><type><name pos:line="9" pos:column="10">const_iterator<pos:position pos:line="9" pos:column="24"/></name></type> <name pos:line="9" pos:column="25">pos<pos:position pos:line="9" pos:column="28"/></name> <argument_list pos:line="9" pos:column="29">(<argument><expr><call><name pos:line="9" pos:column="30">begin<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">()<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></decl>;<pos:position pos:line="9" pos:column="39"/></init> <condition><expr><name pos:line="9" pos:column="40">pos<pos:position pos:line="9" pos:column="43"/></name> <operator pos:line="9" pos:column="44">!=<pos:position pos:line="9" pos:column="46"/></operator> <call><name pos:line="9" pos:column="47">end<pos:position pos:line="9" pos:column="50"/></name><argument_list pos:line="9" pos:column="50">()<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="53"/></condition> <incr><expr><operator pos:line="9" pos:column="54">++<pos:position pos:line="9" pos:column="56"/></operator><name pos:line="9" pos:column="56">pos<pos:position pos:line="9" pos:column="59"/></name></expr></incr>)<pos:position pos:line="9" pos:column="60"/></control> <block pos:line="9" pos:column="61">{
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><call><name pos:line="10" pos:column="14">known_spec<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name><operator pos:line="10" pos:column="25">(<pos:position pos:line="10" pos:column="26"/></operator><operator pos:line="10" pos:column="26">*<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="27">pos<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">)<pos:position pos:line="10" pos:column="31"/></operator><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">offset<pos:position pos:line="10" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="41"/></condition><then pos:line="10" pos:column="41">	<comment type="block" pos:line="10" pos:column="49">/* ignore unknowns */</comment>
            <block type="pseudo"><continue pos:line="11" pos:column="13">continue;<pos:position pos:line="11" pos:column="22"/></continue></block></then></if>

        <comment type="block" pos:line="13" pos:column="9">/* Ensure typecasts is safe */</comment>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">assert<pos:position pos:line="14" pos:column="15"/></name> <argument_list pos:line="14" pos:column="16">(<argument><expr><name><operator pos:line="14" pos:column="17">(<pos:position pos:line="14" pos:column="18"/></operator><operator pos:line="14" pos:column="18">*<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">pos<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">)<pos:position pos:line="14" pos:column="23"/></operator><operator pos:line="14" pos:column="23">-&gt;<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="25">offset<pos:position pos:line="14" pos:column="31"/></name></name> <operator pos:line="14" pos:column="32">&gt;=<pos:position pos:line="14" pos:column="37"/></operator> <literal type="number" pos:line="14" pos:column="35">0<pos:position pos:line="14" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>

        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><operator pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">pos<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">)<pos:position pos:line="16" pos:column="19"/></operator><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">offset<pos:position pos:line="16" pos:column="27"/></name></name> <operator pos:line="16" pos:column="28">&lt;<pos:position pos:line="16" pos:column="32"/></operator> <name pos:line="16" pos:column="30">offset<pos:position pos:line="16" pos:column="36"/></name></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37">
            <block type="pseudo"><return pos:line="17" pos:column="13">return <expr><literal type="boolean" pos:line="17" pos:column="20">true<pos:position pos:line="17" pos:column="24"/></literal></expr>;<pos:position pos:line="17" pos:column="25"/></return></block></then></if>

        <expr_stmt><expr><name pos:line="19" pos:column="9">offset<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <name><operator pos:line="19" pos:column="18">(<pos:position pos:line="19" pos:column="19"/></operator><operator pos:line="19" pos:column="19">*<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="20">pos<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">)<pos:position pos:line="19" pos:column="24"/></operator><operator pos:line="19" pos:column="24">-&gt;<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="26">offset<pos:position pos:line="19" pos:column="32"/></name></name></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>

        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">known_spec<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name><operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><operator pos:line="21" pos:column="25">*<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">pos<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">)<pos:position pos:line="21" pos:column="30"/></operator><operator pos:line="21" pos:column="30">-&gt;<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="32">length<pos:position pos:line="21" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="40"/></condition><then pos:line="21" pos:column="40">	<comment type="block" pos:line="21" pos:column="41">/* avoid  unknowns */</comment>
            <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="13">offset<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">+=<pos:position pos:line="22" pos:column="22"/></operator> <name><operator pos:line="22" pos:column="23">(<pos:position pos:line="22" pos:column="24"/></operator><operator pos:line="22" pos:column="24">*<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="25">pos<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">)<pos:position pos:line="22" pos:column="29"/></operator><operator pos:line="22" pos:column="29">-&gt;<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="31">length<pos:position pos:line="22" pos:column="37"/></name></name></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt></block></then></if>
    }<pos:position pos:line="23" pos:column="6"/></block></for>

    <return pos:line="25" pos:column="5">return <expr><literal type="boolean" pos:line="25" pos:column="12">false<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
