<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2031_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">storeDirSelectSwapDirRoundRobin<pos:position pos:line="2" pos:column="32"/></name><parameter_list pos:line="2" pos:column="32">(<parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">StoreEntry<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type> <name pos:line="2" pos:column="52">e<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// e-&gt;objectLen() is negative at this point when we are still STORE_PENDING</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ssize_t<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">objsize<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><call><name><name pos:line="5" pos:column="23">e<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">-&gt;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="26">mem_obj<pos:position pos:line="5" pos:column="33"/></name><operator pos:line="5" pos:column="33">-&gt;<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="35">expectedReplySize<pos:position pos:line="5" pos:column="52"/></name></name><argument_list pos:line="5" pos:column="52">()<pos:position pos:line="5" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="55"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">objsize<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">!=<pos:position pos:line="6" pos:column="19"/></operator> <operator pos:line="6" pos:column="20">-<pos:position pos:line="6" pos:column="21"/></operator><literal type="number" pos:line="6" pos:column="21">1<pos:position pos:line="6" pos:column="22"/></literal></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="9">objsize<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">+=<pos:position pos:line="7" pos:column="19"/></operator> <name><name pos:line="7" pos:column="20">e<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">mem_obj<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">-&gt;<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="32">swap_hdr_sz<pos:position pos:line="7" pos:column="43"/></name></name></expr>;<pos:position pos:line="7" pos:column="44"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="9" pos:column="5">// Increment the first candidate once per selection (not once per</comment>
    <comment type="line" pos:line="10" pos:column="5">// iteration) to reduce bias when some disk(s) attract more entries.</comment>
    <decl_stmt><decl><specifier pos:line="11" pos:column="5">static<pos:position pos:line="11" pos:column="11"/></specifier> <type><name pos:line="11" pos:column="12">int<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">firstCandidate<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><literal type="number" pos:line="11" pos:column="33">0<pos:position pos:line="11" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="35"/></decl_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">++<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">firstCandidate<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">&gt;=<pos:position pos:line="12" pos:column="31"/></operator> <name><name pos:line="12" pos:column="29">Config<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">.<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="36">cacheSwap<pos:position pos:line="12" pos:column="45"/></name><operator pos:line="12" pos:column="45">.<pos:position pos:line="12" pos:column="46"/></operator><name pos:line="12" pos:column="46">n_configured<pos:position pos:line="12" pos:column="58"/></name></name></expr>)<pos:position pos:line="12" pos:column="59"/></condition><then pos:line="12" pos:column="59">
        <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="9">firstCandidate<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <literal type="number" pos:line="13" pos:column="26">0<pos:position pos:line="13" pos:column="27"/></literal></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt></block></then></if>

    <for pos:line="15" pos:column="5">for <control pos:line="15" pos:column="9">(<init><decl><type><name pos:line="15" pos:column="10">int<pos:position pos:line="15" pos:column="13"/></name></type> <name pos:line="15" pos:column="14">i<pos:position pos:line="15" pos:column="15"/></name> <init pos:line="15" pos:column="16">= <expr><literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="20"/></init> <condition><expr><name pos:line="15" pos:column="21">i<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&lt;<pos:position pos:line="15" pos:column="27"/></operator> <name><name pos:line="15" pos:column="25">Config<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">.<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">cacheSwap<pos:position pos:line="15" pos:column="41"/></name><operator pos:line="15" pos:column="41">.<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="42">n_configured<pos:position pos:line="15" pos:column="54"/></name></name></expr>;<pos:position pos:line="15" pos:column="55"/></condition> <incr><expr><operator pos:line="15" pos:column="56">++<pos:position pos:line="15" pos:column="58"/></operator><name pos:line="15" pos:column="58">i<pos:position pos:line="15" pos:column="59"/></name></expr></incr>)<pos:position pos:line="15" pos:column="60"/></control> <block pos:line="15" pos:column="61">{
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">const<pos:position pos:line="16" pos:column="14"/></specifier> <name pos:line="16" pos:column="15">int<pos:position pos:line="16" pos:column="18"/></name></type> <name pos:line="16" pos:column="19">dirn<pos:position pos:line="16" pos:column="23"/></name> <init pos:line="16" pos:column="24">= <expr><operator pos:line="16" pos:column="26">(<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">firstCandidate<pos:position pos:line="16" pos:column="41"/></name> <operator pos:line="16" pos:column="42">+<pos:position pos:line="16" pos:column="43"/></operator> <name pos:line="16" pos:column="44">i<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">)<pos:position pos:line="16" pos:column="46"/></operator> <operator pos:line="16" pos:column="47">%<pos:position pos:line="16" pos:column="48"/></operator> <name><name pos:line="16" pos:column="49">Config<pos:position pos:line="16" pos:column="55"/></name><operator pos:line="16" pos:column="55">.<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="56">cacheSwap<pos:position pos:line="16" pos:column="65"/></name><operator pos:line="16" pos:column="65">.<pos:position pos:line="16" pos:column="66"/></operator><name pos:line="16" pos:column="66">n_configured<pos:position pos:line="16" pos:column="78"/></name></name></expr></init></decl>;<pos:position pos:line="16" pos:column="79"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">const<pos:position pos:line="17" pos:column="14"/></specifier> <name pos:line="17" pos:column="15">SwapDir<pos:position pos:line="17" pos:column="22"/></name> <modifier pos:line="17" pos:column="23">*<pos:position pos:line="17" pos:column="24"/></modifier></type><name pos:line="17" pos:column="24">sd<pos:position pos:line="17" pos:column="26"/></name> <init pos:line="17" pos:column="27">= <expr><cast type="dynamic" pos:line="17" pos:column="29">dynamic_cast<argument_list type="generic" pos:line="17" pos:column="41">&lt;<argument><expr><name pos:line="17" pos:column="42">SwapDir<pos:position pos:line="17" pos:column="49"/></name><operator pos:line="17" pos:column="49">*<pos:position pos:line="17" pos:column="50"/></operator></expr></argument>&gt;<pos:position pos:line="17" pos:column="54"/></argument_list><argument_list pos:line="17" pos:column="51">(<argument><expr><call><name pos:line="17" pos:column="52">INDEXSD<pos:position pos:line="17" pos:column="59"/></name><argument_list pos:line="17" pos:column="59">(<argument><expr><name pos:line="17" pos:column="60">dirn<pos:position pos:line="17" pos:column="64"/></name></expr></argument>)<pos:position pos:line="17" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="17" pos:column="67"/></decl_stmt>

        <decl_stmt><decl><type><name pos:line="19" pos:column="9">int<pos:position pos:line="19" pos:column="12"/></name></type> <name pos:line="19" pos:column="13">load<pos:position pos:line="19" pos:column="17"/></name> <init pos:line="19" pos:column="18">= <expr><literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="22"/></decl_stmt>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><call><name><name pos:line="20" pos:column="14">sd<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">canStore<pos:position pos:line="20" pos:column="26"/></name></name><argument_list pos:line="20" pos:column="26">(<argument><expr><operator pos:line="20" pos:column="27">*<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="28">e<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="31">objsize<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="40">load<pos:position pos:line="20" pos:column="44"/></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="46"/></condition><then pos:line="20" pos:column="46">
            <block type="pseudo"><continue pos:line="21" pos:column="13">continue;<pos:position pos:line="21" pos:column="22"/></continue></block></then></if>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name><name pos:line="23" pos:column="13">load<pos:position pos:line="23" pos:column="17"/></name> <argument_list type="generic" pos:line="23" pos:column="18">&lt; <argument><expr><literal type="number" pos:line="23" pos:column="20">0<pos:position pos:line="23" pos:column="21"/></literal> <operator pos:line="23" pos:column="22">||<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="25">load<pos:position pos:line="23" pos:column="29"/></name></expr></argument> &gt;<pos:position pos:line="23" pos:column="34"/></argument_list></name> <literal type="number" pos:line="23" pos:column="32">1000<pos:position pos:line="23" pos:column="36"/></literal></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37"> <block pos:line="23" pos:column="38">{
            <continue pos:line="24" pos:column="13">continue;<pos:position pos:line="24" pos:column="22"/></continue>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>

        <return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">dirn<pos:position pos:line="27" pos:column="20"/></name></expr>;<pos:position pos:line="27" pos:column="21"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></for>

    <return pos:line="30" pos:column="5">return <expr><operator pos:line="30" pos:column="12">-<pos:position pos:line="30" pos:column="13"/></operator><literal type="number" pos:line="30" pos:column="13">1<pos:position pos:line="30" pos:column="14"/></literal></expr>;<pos:position pos:line="30" pos:column="15"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
