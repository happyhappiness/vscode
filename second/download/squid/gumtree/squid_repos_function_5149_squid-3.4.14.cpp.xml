<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5149_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">ConnOpener<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">connected<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">()<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">temporaryFd_<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&gt;=<pos:position pos:line="4" pos:column="28"/></operator> <literal type="number" pos:line="4" pos:column="26">0<pos:position pos:line="4" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">keepFd<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">()<pos:position pos:line="5" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="14"/></expr_stmt>

    <comment type="block" pos:line="7" pos:column="5">/*
     * stats.conn_open is used to account for the number of
     * connections that we have open to the CachePeer, so we can limit
     * based on the max-conn option.  We need to increment here,
     * even if the connection may fail.
     */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<decl><type><name pos:line="13" pos:column="9">CachePeer<pos:position pos:line="13" pos:column="18"/></name> <modifier pos:line="13" pos:column="19">*<pos:position pos:line="13" pos:column="20"/></modifier></type><name pos:line="13" pos:column="20">peer<pos:position pos:line="13" pos:column="24"/></name><init pos:line="13" pos:column="24">=<expr><operator pos:line="13" pos:column="25">(<pos:position pos:line="13" pos:column="26"/></operator><call><name><name pos:line="13" pos:column="26">conn_<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">-&gt;<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="33">getPeer<pos:position pos:line="13" pos:column="40"/></name></name><argument_list pos:line="13" pos:column="40">()<pos:position pos:line="13" pos:column="42"/></argument_list></call><operator pos:line="13" pos:column="42">)<pos:position pos:line="13" pos:column="43"/></operator></expr></init></decl>)<pos:position pos:line="13" pos:column="44"/></condition><then pos:line="13" pos:column="44">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="14" pos:column="9">++<pos:position pos:line="14" pos:column="11"/></operator><name><name pos:line="14" pos:column="11">peer<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">-&gt;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="17">stats<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">.<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="23">conn_open<pos:position pos:line="14" pos:column="32"/></name></name></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">lookupLocalAddress<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">()<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* TODO: remove these fd_table accesses. But old code still depends on fd_table flags to
     *       indicate the state of a raw fd object being passed around.
     *       Also, legacy code still depends on comm_local_port() with no access to Comm::Connection
     *       when those are done comm_local_port can become one of our member functions to do the below.
     */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">Must<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name><name pos:line="23" pos:column="10">fd_table<pos:position pos:line="23" pos:column="18"/></name><index pos:line="23" pos:column="18">[<expr><name><name pos:line="23" pos:column="19">conn_<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">-&gt;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="26">fd<pos:position pos:line="23" pos:column="28"/></name></name></expr>]<pos:position pos:line="23" pos:column="29"/></index></name><operator pos:line="23" pos:column="29">.<pos:position pos:line="23" pos:column="30"/></operator><name><name pos:line="23" pos:column="30">flags<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">.<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="36">open<pos:position pos:line="23" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">fd_table<pos:position pos:line="24" pos:column="13"/></name><index pos:line="24" pos:column="13">[<expr><name><name pos:line="24" pos:column="14">conn_<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">-&gt;<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="21">fd<pos:position pos:line="24" pos:column="23"/></name></name></expr>]<pos:position pos:line="24" pos:column="24"/></index></name><operator pos:line="24" pos:column="24">.<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">local_addr<pos:position pos:line="24" pos:column="35"/></name> <operator pos:line="24" pos:column="36">=<pos:position pos:line="24" pos:column="37"/></operator> <name><name pos:line="24" pos:column="38">conn_<pos:position pos:line="24" pos:column="43"/></name><operator pos:line="24" pos:column="43">-&gt;<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="45">local<pos:position pos:line="24" pos:column="50"/></name></name></expr>;<pos:position pos:line="24" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">sendAnswer<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">COMM_OK<pos:position pos:line="26" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="25">0<pos:position pos:line="26" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="28">"Comm::ConnOpener::connected"<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
