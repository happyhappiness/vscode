<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_950_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">comm_open_uds<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">int<pos:position pos:line="2" pos:column="18"/></name></type> <name pos:line="2" pos:column="19">sock_type<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="3" pos:column="15">int<pos:position pos:line="3" pos:column="18"/></name></type> <name pos:line="3" pos:column="19">proto<pos:position pos:line="3" pos:column="24"/></name></decl></parameter>,
              <parameter><decl><type><name><name pos:line="4" pos:column="15">struct<pos:position pos:line="4" pos:column="21"/></name> <name pos:line="4" pos:column="22">sockaddr_un<pos:position pos:line="4" pos:column="33"/></name></name><modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type> <name pos:line="4" pos:column="35">addr<pos:position pos:line="4" pos:column="39"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="5" pos:column="15">int<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">flags<pos:position pos:line="5" pos:column="24"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="25"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <comment type="line" pos:line="7" pos:column="5">// TODO: merge with comm_openex() when Ip::Address becomes NetAddress</comment>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">new_socket<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">PROF_start<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">comm_open<pos:position pos:line="11" pos:column="25"/></name></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
    <comment type="block" pos:line="12" pos:column="5">/* Create socket for accepting new connections. */</comment>
    <expr_stmt><expr><operator pos:line="13" pos:column="5">++<pos:position pos:line="13" pos:column="7"/></operator> <name><name pos:line="13" pos:column="8">statCounter<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">syscalls<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">.<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="29">sock<pos:position pos:line="13" pos:column="33"/></name><operator pos:line="13" pos:column="33">.<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="34">sockets<pos:position pos:line="13" pos:column="41"/></name></name></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* Setup the socket addrinfo details for use */</comment>
    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">struct<pos:position pos:line="16" pos:column="11"/></name> <name pos:line="16" pos:column="12">addrinfo<pos:position pos:line="16" pos:column="20"/></name></name></type> <name pos:line="16" pos:column="21">AI<pos:position pos:line="16" pos:column="23"/></name></decl>;<pos:position pos:line="16" pos:column="24"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">AI<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">.<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">ai_flags<pos:position pos:line="17" pos:column="16"/></name></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <literal type="number" pos:line="17" pos:column="19">0<pos:position pos:line="17" pos:column="20"/></literal></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">AI<pos:position pos:line="18" pos:column="7"/></name><operator pos:line="18" pos:column="7">.<pos:position pos:line="18" pos:column="8"/></operator><name pos:line="18" pos:column="8">ai_family<pos:position pos:line="18" pos:column="17"/></name></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <name pos:line="18" pos:column="20">PF_UNIX<pos:position pos:line="18" pos:column="27"/></name></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">AI<pos:position pos:line="19" pos:column="7"/></name><operator pos:line="19" pos:column="7">.<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">ai_socktype<pos:position pos:line="19" pos:column="19"/></name></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <name pos:line="19" pos:column="22">sock_type<pos:position pos:line="19" pos:column="31"/></name></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">AI<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">.<pos:position pos:line="20" pos:column="8"/></operator><name pos:line="20" pos:column="8">ai_protocol<pos:position pos:line="20" pos:column="19"/></name></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">proto<pos:position pos:line="20" pos:column="27"/></name></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">AI<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">.<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="8">ai_addrlen<pos:position pos:line="21" pos:column="18"/></name></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <call><name pos:line="21" pos:column="21">SUN_LEN<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">addr<pos:position pos:line="21" pos:column="33"/></name></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">AI<pos:position pos:line="22" pos:column="7"/></name><operator pos:line="22" pos:column="7">.<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">ai_addr<pos:position pos:line="22" pos:column="15"/></name></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <operator pos:line="22" pos:column="18">(<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="19">sockaddr<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">*<pos:position pos:line="22" pos:column="28"/></operator><operator pos:line="22" pos:column="28">)<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="29">addr<pos:position pos:line="22" pos:column="33"/></name></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">AI<pos:position pos:line="23" pos:column="7"/></name><operator pos:line="23" pos:column="7">.<pos:position pos:line="23" pos:column="8"/></operator><name pos:line="23" pos:column="8">ai_canonname<pos:position pos:line="23" pos:column="20"/></name></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="23">NULL<pos:position pos:line="23" pos:column="27"/></name></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">AI<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">.<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">ai_next<pos:position pos:line="24" pos:column="15"/></name></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <name pos:line="24" pos:column="18">NULL<pos:position pos:line="24" pos:column="22"/></name></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">debugs<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="number" pos:line="26" pos:column="12">50<pos:position pos:line="26" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="16">3<pos:position pos:line="26" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="19">HERE<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">&lt;&lt;<pos:position pos:line="26" pos:column="32"/></operator> <literal type="string" pos:line="26" pos:column="27">"Attempt open socket for: "<pos:position pos:line="26" pos:column="54"/></literal> <operator pos:line="26" pos:column="55">&lt;&lt;<pos:position pos:line="26" pos:column="63"/></operator> <name><name pos:line="26" pos:column="58">addr<pos:position pos:line="26" pos:column="62"/></name><operator pos:line="26" pos:column="62">-&gt;<pos:position pos:line="26" pos:column="67"/></operator><name pos:line="26" pos:column="64">sun_path<pos:position pos:line="26" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="74"/></expr_stmt>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">(<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">new_socket<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <call><name pos:line="28" pos:column="23">socket<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name><name pos:line="28" pos:column="30">AI<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">.<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="33">ai_family<pos:position pos:line="28" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="44">AI<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">.<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="47">ai_socktype<pos:position pos:line="28" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="60">AI<pos:position pos:line="28" pos:column="62"/></name><operator pos:line="28" pos:column="62">.<pos:position pos:line="28" pos:column="63"/></operator><name pos:line="28" pos:column="63">ai_protocol<pos:position pos:line="28" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="75"/></argument_list></call><operator pos:line="28" pos:column="75">)<pos:position pos:line="28" pos:column="76"/></operator> <operator pos:line="28" pos:column="77">&lt;<pos:position pos:line="28" pos:column="81"/></operator> <literal type="number" pos:line="28" pos:column="79">0<pos:position pos:line="28" pos:column="80"/></literal></expr>)<pos:position pos:line="28" pos:column="81"/></condition><then pos:line="28" pos:column="81"> <block pos:line="28" pos:column="82">{
        <comment type="block" pos:line="29" pos:column="9">/* Increase the number of reserved fd's if calls to socket()
         * are failing because the open file table is full.  This
         * limits the number of simultaneous clients */</comment>

        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">limitError<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">errno<pos:position pos:line="33" pos:column="29"/></name></expr></argument>)<pos:position pos:line="33" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="31"/></condition><then pos:line="33" pos:column="31"> <block pos:line="33" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">debugs<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><literal type="number" pos:line="34" pos:column="20">50<pos:position pos:line="34" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="24">DBG_IMPORTANT<pos:position pos:line="34" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="39">HERE<pos:position pos:line="34" pos:column="43"/></name> <operator pos:line="34" pos:column="44">&lt;&lt;<pos:position pos:line="34" pos:column="52"/></operator> <literal type="string" pos:line="34" pos:column="47">"socket failure: "<pos:position pos:line="34" pos:column="65"/></literal> <operator pos:line="34" pos:column="66">&lt;&lt;<pos:position pos:line="34" pos:column="74"/></operator> <call><name pos:line="34" pos:column="69">xstrerror<pos:position pos:line="34" pos:column="78"/></name><argument_list pos:line="34" pos:column="78">()<pos:position pos:line="34" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="82"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">fdAdjustReserved<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">()<pos:position pos:line="35" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></then> <else pos:line="36" pos:column="11">else <block pos:line="36" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">debugs<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><literal type="number" pos:line="37" pos:column="20">50<pos:position pos:line="37" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="24">DBG_CRITICAL<pos:position pos:line="37" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="38">HERE<pos:position pos:line="37" pos:column="42"/></name> <operator pos:line="37" pos:column="43">&lt;&lt;<pos:position pos:line="37" pos:column="51"/></operator> <literal type="string" pos:line="37" pos:column="46">"socket failure: "<pos:position pos:line="37" pos:column="64"/></literal> <operator pos:line="37" pos:column="65">&lt;&lt;<pos:position pos:line="37" pos:column="73"/></operator> <call><name pos:line="37" pos:column="68">xstrerror<pos:position pos:line="37" pos:column="77"/></name><argument_list pos:line="37" pos:column="77">()<pos:position pos:line="37" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="81"/></expr_stmt>
        }<pos:position pos:line="38" pos:column="10"/></block></else></if>

        <expr_stmt><expr><call><name pos:line="40" pos:column="9">PROF_stop<pos:position pos:line="40" pos:column="18"/></name><argument_list pos:line="40" pos:column="18">(<argument><expr><name pos:line="40" pos:column="19">comm_open<pos:position pos:line="40" pos:column="28"/></name></expr></argument>)<pos:position pos:line="40" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>
        <return pos:line="41" pos:column="9">return <expr><operator pos:line="41" pos:column="16">-<pos:position pos:line="41" pos:column="17"/></operator><literal type="number" pos:line="41" pos:column="17">1<pos:position pos:line="41" pos:column="18"/></literal></expr>;<pos:position pos:line="41" pos:column="19"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="44" pos:column="5">debugs<pos:position pos:line="44" pos:column="11"/></name><argument_list pos:line="44" pos:column="11">(<argument><expr><literal type="number" pos:line="44" pos:column="12">50<pos:position pos:line="44" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="16">3<pos:position pos:line="44" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="19">"Opened UDS FD "<pos:position pos:line="44" pos:column="35"/></literal> <operator pos:line="44" pos:column="36">&lt;&lt;<pos:position pos:line="44" pos:column="44"/></operator> <name pos:line="44" pos:column="39">new_socket<pos:position pos:line="44" pos:column="49"/></name> <operator pos:line="44" pos:column="50">&lt;&lt;<pos:position pos:line="44" pos:column="58"/></operator> <literal type="string" pos:line="44" pos:column="53">" : family="<pos:position pos:line="44" pos:column="65"/></literal> <operator pos:line="44" pos:column="66">&lt;&lt;<pos:position pos:line="44" pos:column="74"/></operator> <name><name pos:line="44" pos:column="69">AI<pos:position pos:line="44" pos:column="71"/></name><operator pos:line="44" pos:column="71">.<pos:position pos:line="44" pos:column="72"/></operator><name pos:line="44" pos:column="72">ai_family<pos:position pos:line="44" pos:column="81"/></name></name> <operator pos:line="44" pos:column="82">&lt;&lt;<pos:position pos:line="44" pos:column="90"/></operator> <literal type="string" pos:line="44" pos:column="85">", type="<pos:position pos:line="44" pos:column="94"/></literal> <operator pos:line="44" pos:column="95">&lt;&lt;<pos:position pos:line="44" pos:column="103"/></operator> <name><name pos:line="44" pos:column="98">AI<pos:position pos:line="44" pos:column="100"/></name><operator pos:line="44" pos:column="100">.<pos:position pos:line="44" pos:column="101"/></operator><name pos:line="44" pos:column="101">ai_socktype<pos:position pos:line="44" pos:column="112"/></name></name> <operator pos:line="44" pos:column="113">&lt;&lt;<pos:position pos:line="44" pos:column="121"/></operator> <literal type="string" pos:line="44" pos:column="116">", protocol="<pos:position pos:line="44" pos:column="129"/></literal> <operator pos:line="44" pos:column="130">&lt;&lt;<pos:position pos:line="44" pos:column="138"/></operator> <name><name pos:line="44" pos:column="133">AI<pos:position pos:line="44" pos:column="135"/></name><operator pos:line="44" pos:column="135">.<pos:position pos:line="44" pos:column="136"/></operator><name pos:line="44" pos:column="136">ai_protocol<pos:position pos:line="44" pos:column="147"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="148"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="149"/></expr_stmt>

    <comment type="block" pos:line="46" pos:column="5">/* update fdstat */</comment>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">debugs<pos:position pos:line="47" pos:column="11"/></name><argument_list pos:line="47" pos:column="11">(<argument><expr><literal type="number" pos:line="47" pos:column="12">50<pos:position pos:line="47" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="16">5<pos:position pos:line="47" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="19">HERE<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">&lt;&lt;<pos:position pos:line="47" pos:column="32"/></operator> <literal type="string" pos:line="47" pos:column="27">"FD "<pos:position pos:line="47" pos:column="32"/></literal> <operator pos:line="47" pos:column="33">&lt;&lt;<pos:position pos:line="47" pos:column="41"/></operator> <name pos:line="47" pos:column="36">new_socket<pos:position pos:line="47" pos:column="46"/></name> <operator pos:line="47" pos:column="47">&lt;&lt;<pos:position pos:line="47" pos:column="55"/></operator> <literal type="string" pos:line="47" pos:column="50">" is a new socket"<pos:position pos:line="47" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="70"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="49" pos:column="5">assert<pos:position pos:line="49" pos:column="11"/></name><argument_list pos:line="49" pos:column="11">(<argument><expr><operator pos:line="49" pos:column="12">!<pos:position pos:line="49" pos:column="13"/></operator><call><name pos:line="49" pos:column="13">isOpen<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">new_socket<pos:position pos:line="49" pos:column="30"/></name></expr></argument>)<pos:position pos:line="49" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">fd_open<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><name pos:line="50" pos:column="13">new_socket<pos:position pos:line="50" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="25">FD_MSGHDR<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="36">NULL<pos:position pos:line="50" pos:column="40"/></name></expr></argument>)<pos:position pos:line="50" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="52" pos:column="5">fdd_table<pos:position pos:line="52" pos:column="14"/></name><index pos:line="52" pos:column="14">[<expr><name pos:line="52" pos:column="15">new_socket<pos:position pos:line="52" pos:column="25"/></name></expr>]<pos:position pos:line="52" pos:column="26"/></index></name><operator pos:line="52" pos:column="26">.<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="27">close_file<pos:position pos:line="52" pos:column="37"/></name> <operator pos:line="52" pos:column="38">=<pos:position pos:line="52" pos:column="39"/></operator> <name pos:line="52" pos:column="40">NULL<pos:position pos:line="52" pos:column="44"/></name></expr>;<pos:position pos:line="52" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="54" pos:column="5">fdd_table<pos:position pos:line="54" pos:column="14"/></name><index pos:line="54" pos:column="14">[<expr><name pos:line="54" pos:column="15">new_socket<pos:position pos:line="54" pos:column="25"/></name></expr>]<pos:position pos:line="54" pos:column="26"/></index></name><operator pos:line="54" pos:column="26">.<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="27">close_line<pos:position pos:line="54" pos:column="37"/></name> <operator pos:line="54" pos:column="38">=<pos:position pos:line="54" pos:column="39"/></operator> <literal type="number" pos:line="54" pos:column="40">0<pos:position pos:line="54" pos:column="41"/></literal></expr>;<pos:position pos:line="54" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="56" pos:column="5">fd_table<pos:position pos:line="56" pos:column="13"/></name><index pos:line="56" pos:column="13">[<expr><name pos:line="56" pos:column="14">new_socket<pos:position pos:line="56" pos:column="24"/></name></expr>]<pos:position pos:line="56" pos:column="25"/></index></name><operator pos:line="56" pos:column="25">.<pos:position pos:line="56" pos:column="26"/></operator><name pos:line="56" pos:column="26">sock_family<pos:position pos:line="56" pos:column="37"/></name> <operator pos:line="56" pos:column="38">=<pos:position pos:line="56" pos:column="39"/></operator> <name><name pos:line="56" pos:column="40">AI<pos:position pos:line="56" pos:column="42"/></name><operator pos:line="56" pos:column="42">.<pos:position pos:line="56" pos:column="43"/></operator><name pos:line="56" pos:column="43">ai_family<pos:position pos:line="56" pos:column="52"/></name></name></expr>;<pos:position pos:line="56" pos:column="53"/></expr_stmt>

    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><operator pos:line="58" pos:column="9">!<pos:position pos:line="58" pos:column="10"/></operator><operator pos:line="58" pos:column="10">(<pos:position pos:line="58" pos:column="11"/></operator><name pos:line="58" pos:column="11">flags<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">&amp;<pos:position pos:line="58" pos:column="22"/></operator> <name pos:line="58" pos:column="19">COMM_NOCLOEXEC<pos:position pos:line="58" pos:column="33"/></name><operator pos:line="58" pos:column="33">)<pos:position pos:line="58" pos:column="34"/></operator></expr>)<pos:position pos:line="58" pos:column="35"/></condition><then pos:line="58" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="9">commSetCloseOnExec<pos:position pos:line="59" pos:column="27"/></name><argument_list pos:line="59" pos:column="27">(<argument><expr><name pos:line="59" pos:column="28">new_socket<pos:position pos:line="59" pos:column="38"/></name></expr></argument>)<pos:position pos:line="59" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="40"/></expr_stmt></block></then></if>

    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name pos:line="61" pos:column="9">flags<pos:position pos:line="61" pos:column="14"/></name> <operator pos:line="61" pos:column="15">&amp;<pos:position pos:line="61" pos:column="20"/></operator> <name pos:line="61" pos:column="17">COMM_REUSEADDR<pos:position pos:line="61" pos:column="31"/></name></expr>)<pos:position pos:line="61" pos:column="32"/></condition><then pos:line="61" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="9">commSetReuseAddr<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">new_socket<pos:position pos:line="62" pos:column="36"/></name></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt></block></then></if>

    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">flags<pos:position pos:line="64" pos:column="14"/></name> <operator pos:line="64" pos:column="15">&amp;<pos:position pos:line="64" pos:column="20"/></operator> <name pos:line="64" pos:column="17">COMM_NONBLOCKING<pos:position pos:line="64" pos:column="33"/></name></expr>)<pos:position pos:line="64" pos:column="34"/></condition><then pos:line="64" pos:column="34"> <block pos:line="64" pos:column="35">{
        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><call><name pos:line="65" pos:column="13">commSetNonBlocking<pos:position pos:line="65" pos:column="31"/></name><argument_list pos:line="65" pos:column="31">(<argument><expr><name pos:line="65" pos:column="32">new_socket<pos:position pos:line="65" pos:column="42"/></name></expr></argument>)<pos:position pos:line="65" pos:column="43"/></argument_list></call> <operator pos:line="65" pos:column="44">!=<pos:position pos:line="65" pos:column="46"/></operator> <name pos:line="65" pos:column="47">COMM_OK<pos:position pos:line="65" pos:column="54"/></name></expr>)<pos:position pos:line="65" pos:column="55"/></condition><then pos:line="65" pos:column="55"> <block pos:line="65" pos:column="56">{
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">comm_close<pos:position pos:line="66" pos:column="23"/></name><argument_list pos:line="66" pos:column="23">(<argument><expr><name pos:line="66" pos:column="24">new_socket<pos:position pos:line="66" pos:column="34"/></name></expr></argument>)<pos:position pos:line="66" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">PROF_stop<pos:position pos:line="67" pos:column="22"/></name><argument_list pos:line="67" pos:column="22">(<argument><expr><name pos:line="67" pos:column="23">comm_open<pos:position pos:line="67" pos:column="32"/></name></expr></argument>)<pos:position pos:line="67" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt>
            <return pos:line="68" pos:column="13">return <expr><operator pos:line="68" pos:column="20">-<pos:position pos:line="68" pos:column="21"/></operator><literal type="number" pos:line="68" pos:column="21">1<pos:position pos:line="68" pos:column="22"/></literal></expr>;<pos:position pos:line="68" pos:column="23"/></return>
        }<pos:position pos:line="69" pos:column="10"/></block></then></if>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>

    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><name pos:line="72" pos:column="9">flags<pos:position pos:line="72" pos:column="14"/></name> <operator pos:line="72" pos:column="15">&amp;<pos:position pos:line="72" pos:column="20"/></operator> <name pos:line="72" pos:column="17">COMM_DOBIND<pos:position pos:line="72" pos:column="28"/></name></expr>)<pos:position pos:line="72" pos:column="29"/></condition><then pos:line="72" pos:column="29"> <block pos:line="72" pos:column="30">{
        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><call><name pos:line="73" pos:column="13">commBind<pos:position pos:line="73" pos:column="21"/></name><argument_list pos:line="73" pos:column="21">(<argument><expr><name pos:line="73" pos:column="22">new_socket<pos:position pos:line="73" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="34">AI<pos:position pos:line="73" pos:column="36"/></name></expr></argument>)<pos:position pos:line="73" pos:column="37"/></argument_list></call> <operator pos:line="73" pos:column="38">!=<pos:position pos:line="73" pos:column="40"/></operator> <name pos:line="73" pos:column="41">COMM_OK<pos:position pos:line="73" pos:column="48"/></name></expr>)<pos:position pos:line="73" pos:column="49"/></condition><then pos:line="73" pos:column="49"> <block pos:line="73" pos:column="50">{
            <expr_stmt><expr><call><name pos:line="74" pos:column="13">comm_close<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><name pos:line="74" pos:column="24">new_socket<pos:position pos:line="74" pos:column="34"/></name></expr></argument>)<pos:position pos:line="74" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="75" pos:column="13">PROF_stop<pos:position pos:line="75" pos:column="22"/></name><argument_list pos:line="75" pos:column="22">(<argument><expr><name pos:line="75" pos:column="23">comm_open<pos:position pos:line="75" pos:column="32"/></name></expr></argument>)<pos:position pos:line="75" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="34"/></expr_stmt>
            <return pos:line="76" pos:column="13">return <expr><operator pos:line="76" pos:column="20">-<pos:position pos:line="76" pos:column="21"/></operator><literal type="number" pos:line="76" pos:column="21">1<pos:position pos:line="76" pos:column="22"/></literal></expr>;<pos:position pos:line="76" pos:column="23"/></return>
        }<pos:position pos:line="77" pos:column="10"/></block></then></if>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">ifdef<pos:position pos:line="80" pos:column="7"/></cpp:directive> <name pos:line="80" pos:column="8">TCP_NODELAY<pos:position pos:line="80" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><name pos:line="81" pos:column="9">sock_type<pos:position pos:line="81" pos:column="18"/></name> <operator pos:line="81" pos:column="19">==<pos:position pos:line="81" pos:column="21"/></operator> <name pos:line="81" pos:column="22">SOCK_STREAM<pos:position pos:line="81" pos:column="33"/></name></expr>)<pos:position pos:line="81" pos:column="34"/></condition><then pos:line="81" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="9">commSetTcpNoDelay<pos:position pos:line="82" pos:column="26"/></name><argument_list pos:line="82" pos:column="26">(<argument><expr><name pos:line="82" pos:column="27">new_socket<pos:position pos:line="82" pos:column="37"/></name></expr></argument>)<pos:position pos:line="82" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="39"/></expr_stmt></block></then></if>

<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><name><name pos:line="86" pos:column="9">Config<pos:position pos:line="86" pos:column="15"/></name><operator pos:line="86" pos:column="15">.<pos:position pos:line="86" pos:column="16"/></operator><name pos:line="86" pos:column="16">tcpRcvBufsz<pos:position pos:line="86" pos:column="27"/></name></name> <operator pos:line="86" pos:column="28">&gt;<pos:position pos:line="86" pos:column="32"/></operator> <literal type="number" pos:line="86" pos:column="30">0<pos:position pos:line="86" pos:column="31"/></literal> <operator pos:line="86" pos:column="32">&amp;&amp;<pos:position pos:line="86" pos:column="42"/></operator> <name pos:line="86" pos:column="35">sock_type<pos:position pos:line="86" pos:column="44"/></name> <operator pos:line="86" pos:column="45">==<pos:position pos:line="86" pos:column="47"/></operator> <name pos:line="86" pos:column="48">SOCK_STREAM<pos:position pos:line="86" pos:column="59"/></name></expr>)<pos:position pos:line="86" pos:column="60"/></condition><then pos:line="86" pos:column="60">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="9">commSetTcpRcvbuf<pos:position pos:line="87" pos:column="25"/></name><argument_list pos:line="87" pos:column="25">(<argument><expr><name pos:line="87" pos:column="26">new_socket<pos:position pos:line="87" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="38">Config<pos:position pos:line="87" pos:column="44"/></name><operator pos:line="87" pos:column="44">.<pos:position pos:line="87" pos:column="45"/></operator><name pos:line="87" pos:column="45">tcpRcvBufsz<pos:position pos:line="87" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="58"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="89" pos:column="5">PROF_stop<pos:position pos:line="89" pos:column="14"/></name><argument_list pos:line="89" pos:column="14">(<argument><expr><name pos:line="89" pos:column="15">comm_open<pos:position pos:line="89" pos:column="24"/></name></expr></argument>)<pos:position pos:line="89" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="26"/></expr_stmt>

    <return pos:line="91" pos:column="5">return <expr><name pos:line="91" pos:column="12">new_socket<pos:position pos:line="91" pos:column="22"/></name></expr>;<pos:position pos:line="91" pos:column="23"/></return>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
