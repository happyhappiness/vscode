<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5242_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Fs<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Ufs<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">UFSStoreState<pos:position pos:line="2" pos:column="23"/></name><operator pos:line="2" pos:column="23">::<pos:position pos:line="2" pos:column="25"/></operator><name pos:line="2" pos:column="25">readCompleted<pos:position pos:line="2" pos:column="38"/></name></name><parameter_list pos:line="2" pos:column="38">(<parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">buf<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">int<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">len<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="65">int<pos:position pos:line="2" pos:column="68"/></name></type> <name pos:line="2" pos:column="69">errflag<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="78">RefCount<pos:position pos:line="2" pos:column="86"/></name><argument_list type="generic" pos:line="2" pos:column="86">&lt;<argument><expr><name pos:line="2" pos:column="87">ReadRequest<pos:position pos:line="2" pos:column="98"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="102"/></argument_list></name></type> <name pos:line="2" pos:column="100">result<pos:position pos:line="2" pos:column="106"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="107"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><call><name><name pos:line="4" pos:column="13">result<pos:position pos:line="4" pos:column="19"/></name><operator pos:line="4" pos:column="19">.<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="20">getRaw<pos:position pos:line="4" pos:column="26"/></name></name><argument_list pos:line="4" pos:column="26">()<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">reading<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">=<pos:position pos:line="5" pos:column="14"/></operator> <literal type="boolean" pos:line="5" pos:column="15">false<pos:position pos:line="5" pos:column="20"/></literal></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">79<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">3<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"UFSStoreState::readCompleted: dirno "<pos:position pos:line="6" pos:column="57"/></literal> <operator pos:line="6" pos:column="58">&lt;&lt;<pos:position pos:line="6" pos:column="66"/></operator> <name pos:line="6" pos:column="61">swap_dirn<pos:position pos:line="6" pos:column="70"/></name>  <operator pos:line="6" pos:column="72">&lt;&lt;<pos:position pos:line="6" pos:column="80"/></operator>
           <literal type="string" pos:line="7" pos:column="12">", fileno "<pos:position pos:line="7" pos:column="23"/></literal><operator pos:line="7" pos:column="23">&lt;&lt;<pos:position pos:line="7" pos:column="31"/></operator> <call><name><name pos:line="7" pos:column="26">std<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">::<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="31">setfill<pos:position pos:line="7" pos:column="38"/></name></name><argument_list pos:line="7" pos:column="38">(<argument><expr><literal type="char" pos:line="7" pos:column="39">'0'<pos:position pos:line="7" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call> <operator pos:line="7" pos:column="44">&lt;&lt;<pos:position pos:line="7" pos:column="52"/></operator> <name><name pos:line="7" pos:column="47">std<pos:position pos:line="7" pos:column="50"/></name><operator pos:line="7" pos:column="50">::<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="52">hex<pos:position pos:line="7" pos:column="55"/></name></name> <operator pos:line="7" pos:column="56">&lt;&lt;<pos:position pos:line="7" pos:column="64"/></operator> <call><name><name pos:line="7" pos:column="59">std<pos:position pos:line="7" pos:column="62"/></name><operator pos:line="7" pos:column="62">::<pos:position pos:line="7" pos:column="64"/></operator><name pos:line="7" pos:column="64">setw<pos:position pos:line="7" pos:column="68"/></name></name><argument_list pos:line="7" pos:column="68">(<argument><expr><literal type="number" pos:line="7" pos:column="69">8<pos:position pos:line="7" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="71"/></argument_list></call> <operator pos:line="7" pos:column="72">&lt;&lt;<pos:position pos:line="7" pos:column="80"/></operator>
           <name pos:line="8" pos:column="12">swap_filen<pos:position pos:line="8" pos:column="22"/></name>  <operator pos:line="8" pos:column="24">&lt;&lt;<pos:position pos:line="8" pos:column="32"/></operator> <literal type="string" pos:line="8" pos:column="27">" len "<pos:position pos:line="8" pos:column="34"/></literal><operator pos:line="8" pos:column="34">&lt;&lt;<pos:position pos:line="8" pos:column="42"/></operator> <call><name><name pos:line="8" pos:column="37">std<pos:position pos:line="8" pos:column="40"/></name><operator pos:line="8" pos:column="40">::<pos:position pos:line="8" pos:column="42"/></operator><name pos:line="8" pos:column="42">setfill<pos:position pos:line="8" pos:column="49"/></name></name><argument_list pos:line="8" pos:column="49">(<argument><expr><literal type="char" pos:line="8" pos:column="50">' '<pos:position pos:line="8" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call> <operator pos:line="8" pos:column="55">&lt;&lt;<pos:position pos:line="8" pos:column="63"/></operator> <name><name pos:line="8" pos:column="58">std<pos:position pos:line="8" pos:column="61"/></name><operator pos:line="8" pos:column="61">::<pos:position pos:line="8" pos:column="63"/></operator><name pos:line="8" pos:column="63">dec<pos:position pos:line="8" pos:column="66"/></name></name> <operator pos:line="8" pos:column="67">&lt;&lt;<pos:position pos:line="8" pos:column="75"/></operator> <name pos:line="8" pos:column="70">len<pos:position pos:line="8" pos:column="73"/></name></expr></argument>)<pos:position pos:line="8" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="75"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">len<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">&gt;<pos:position pos:line="10" pos:column="17"/></operator> <literal type="number" pos:line="10" pos:column="15">0<pos:position pos:line="10" pos:column="16"/></literal></expr>)<pos:position pos:line="10" pos:column="17"/></condition><then pos:line="10" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="9">offset_<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">+=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">len<pos:position pos:line="11" pos:column="23"/></name></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">STRCB<pos:position pos:line="13" pos:column="10"/></name> <modifier pos:line="13" pos:column="11">*<pos:position pos:line="13" pos:column="12"/></modifier></type><name pos:line="13" pos:column="12">callback_<pos:position pos:line="13" pos:column="21"/></name> <init pos:line="13" pos:column="22">= <expr><name><name pos:line="13" pos:column="24">read<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">.<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="29">callback<pos:position pos:line="13" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="38"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">callback_<pos:position pos:line="15" pos:column="21"/></name></expr></argument>)<pos:position pos:line="15" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="17" pos:column="5">read<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">.<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">callback<pos:position pos:line="17" pos:column="18"/></name></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="21">NULL<pos:position pos:line="17" pos:column="25"/></name></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="19" pos:column="5">void<pos:position pos:line="19" pos:column="9"/></name> <modifier pos:line="19" pos:column="10">*<pos:position pos:line="19" pos:column="11"/></modifier></type><name pos:line="19" pos:column="11">cbdata<pos:position pos:line="19" pos:column="17"/></name></decl>;<pos:position pos:line="19" pos:column="18"/></decl_stmt>

    <comment type="block" pos:line="21" pos:column="5">/* A note:
     * diskd IO queues closes via the diskd queue. So close callbacks
     * occur strictly after reads and writes.
     * ufs doesn't queue, it simply completes, so close callbacks occur
     * strictly after reads and writes.
     * aufs performs closes syncronously, so close events must be managed
     * to force strict ordering.
     * The below does this:
     * closing is set when theFile-&gt;close() has been called, and close only triggers
     * when no io's are pending.
     * writeCompleted likewise.
     */</comment>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">!<pos:position pos:line="33" pos:column="10"/></operator><name pos:line="33" pos:column="10">closing<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">&amp;&amp;<pos:position pos:line="33" pos:column="28"/></operator> <call><name pos:line="33" pos:column="21">cbdataReferenceValidDone<pos:position pos:line="33" pos:column="45"/></name><argument_list pos:line="33" pos:column="45">(<argument><expr><name><name pos:line="33" pos:column="46">read<pos:position pos:line="33" pos:column="50"/></name><operator pos:line="33" pos:column="50">.<pos:position pos:line="33" pos:column="51"/></operator><name pos:line="33" pos:column="51">callback_data<pos:position pos:line="33" pos:column="64"/></name></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="66">&amp;<pos:position pos:line="33" pos:column="71"/></operator><name pos:line="33" pos:column="67">cbdata<pos:position pos:line="33" pos:column="73"/></name></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="75"/></condition><then pos:line="33" pos:column="75"> <block pos:line="33" pos:column="76">{
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">len<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">&gt;<pos:position pos:line="34" pos:column="21"/></operator> <literal type="number" pos:line="34" pos:column="19">0<pos:position pos:line="34" pos:column="20"/></literal> <operator pos:line="34" pos:column="21">&amp;&amp;<pos:position pos:line="34" pos:column="31"/></operator> <name pos:line="34" pos:column="24">read_buf<pos:position pos:line="34" pos:column="32"/></name> <operator pos:line="34" pos:column="33">!=<pos:position pos:line="34" pos:column="35"/></operator> <name pos:line="34" pos:column="36">buf<pos:position pos:line="34" pos:column="39"/></name></expr>)<pos:position pos:line="34" pos:column="40"/></condition><then pos:line="34" pos:column="40">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="13">memcpy<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><name pos:line="35" pos:column="20">read_buf<pos:position pos:line="35" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="30">buf<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="35">len<pos:position pos:line="35" pos:column="38"/></name></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="37" pos:column="9">callback_<pos:position pos:line="37" pos:column="18"/></name><argument_list pos:line="37" pos:column="18">(<argument><expr><name pos:line="37" pos:column="19">cbdata<pos:position pos:line="37" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="27">read_buf<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="37">len<pos:position pos:line="37" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="42">this<pos:position pos:line="37" pos:column="46"/></name></expr></argument>)<pos:position pos:line="37" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name><name pos:line="40" pos:column="9">flags<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">.<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="15">try_closing<pos:position pos:line="40" pos:column="26"/></name></name> <operator pos:line="40" pos:column="27">||<pos:position pos:line="40" pos:column="29"/></operator> <operator pos:line="40" pos:column="30">(<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="31">theFile<pos:position pos:line="40" pos:column="38"/></name> <operator pos:line="40" pos:column="39">!=<pos:position pos:line="40" pos:column="41"/></operator> <name pos:line="40" pos:column="42">NULL<pos:position pos:line="40" pos:column="46"/></name> <operator pos:line="40" pos:column="47">&amp;&amp;<pos:position pos:line="40" pos:column="57"/></operator> <call><name><name pos:line="40" pos:column="50">theFile<pos:position pos:line="40" pos:column="57"/></name><operator pos:line="40" pos:column="57">-&gt;<pos:position pos:line="40" pos:column="62"/></operator><name pos:line="40" pos:column="59">error<pos:position pos:line="40" pos:column="64"/></name></name><argument_list pos:line="40" pos:column="64">()<pos:position pos:line="40" pos:column="66"/></argument_list></call><operator pos:line="40" pos:column="66">)<pos:position pos:line="40" pos:column="67"/></operator></expr> )<pos:position pos:line="40" pos:column="69"/></condition><then pos:line="40" pos:column="69">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="9">tryClosing<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">()<pos:position pos:line="41" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="22"/></expr_stmt></block></then></if>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
