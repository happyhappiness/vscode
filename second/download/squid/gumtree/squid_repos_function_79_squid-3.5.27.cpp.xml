<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_79_squid-3.5.27.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name><modifier pos:line="1" pos:column="11">*<pos:position pos:line="1" pos:column="12"/></modifier></type>
<name pos:line="2" pos:column="1">my_inet_ntoa<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">( <parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name><name pos:line="2" pos:column="21">struct<pos:position pos:line="2" pos:column="27"/></name> <name pos:line="2" pos:column="28">in_addr<pos:position pos:line="2" pos:column="35"/></name></name><modifier pos:line="2" pos:column="35">&amp;<pos:position pos:line="2" pos:column="40"/></modifier></type> <name pos:line="2" pos:column="37">a<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">HostAddress<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">output<pos:position pos:line="2" pos:column="58"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="60"/></parameter_list>
<comment type="line" pos:line="3" pos:column="1">// purpose: thread-safely convert IPv4 address -&gt; ASCII representation</comment>
<comment type="line" pos:line="4" pos:column="1">// paramtr: a (IN): networked representation of IPv4 address</comment>
<comment type="line" pos:line="5" pos:column="1">//          buffer (OUT): storage area to store representation into.</comment>
<comment type="line" pos:line="6" pos:column="1">// returns: pointer to buffer</comment>
<comment type="line" pos:line="7" pos:column="1">// goodies: INADDR_ANY will be converted to "*"</comment>
<block pos:line="8" pos:column="1">{
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">( <expr><name><name pos:line="9" pos:column="10">a<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">.<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="12">s_addr<pos:position pos:line="9" pos:column="18"/></name></name> <operator pos:line="9" pos:column="19">==<pos:position pos:line="9" pos:column="21"/></operator> <call><name pos:line="9" pos:column="22">ntohl<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name pos:line="9" pos:column="28">INADDR_ANY<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr> )<pos:position pos:line="9" pos:column="41"/></condition><then pos:line="9" pos:column="41"> <block pos:line="9" pos:column="42">{
        <comment type="line" pos:line="10" pos:column="9">// 'default' or '*' or ...</comment>
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">output<pos:position pos:line="11" pos:column="15"/></name><index pos:line="11" pos:column="15">[<expr><literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr>]<pos:position pos:line="11" pos:column="18"/></index></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <literal type="char" pos:line="11" pos:column="21">'*'<pos:position pos:line="11" pos:column="24"/></literal></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">output<pos:position pos:line="12" pos:column="15"/></name><index pos:line="12" pos:column="15">[<expr><literal type="number" pos:line="12" pos:column="16">1<pos:position pos:line="12" pos:column="17"/></literal></expr>]<pos:position pos:line="12" pos:column="18"/></index></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <literal type="char" pos:line="12" pos:column="21">'\0'<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <else pos:line="13" pos:column="7">else <block pos:line="13" pos:column="12">{
        <comment type="line" pos:line="14" pos:column="9">// ANSI C++ forbids casting to an array type, nag, nag, nag...</comment>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">unsigned<pos:position pos:line="15" pos:column="17"/></name> <name pos:line="15" pos:column="18">char<pos:position pos:line="15" pos:column="22"/></name></type> <name><name pos:line="15" pos:column="23">s<pos:position pos:line="15" pos:column="24"/></name><index pos:line="15" pos:column="24">[<expr><sizeof pos:line="15" pos:column="25">sizeof<argument_list pos:line="15" pos:column="31">(<argument><expr><name><name pos:line="15" pos:column="32">a<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">.<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">s_addr<pos:position pos:line="15" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></sizeof></expr>]<pos:position pos:line="15" pos:column="42"/></index></name></decl>;<pos:position pos:line="15" pos:column="43"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">memcpy<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">( <argument><expr><name pos:line="16" pos:column="17">s<pos:position pos:line="16" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="20">&amp;<pos:position pos:line="16" pos:column="25"/></operator><name><name pos:line="16" pos:column="21">a<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">.<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">s_addr<pos:position pos:line="16" pos:column="29"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="31">sizeof<argument_list pos:line="16" pos:column="37">(<argument><expr><name><name pos:line="16" pos:column="38">a<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">.<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="40">s_addr<pos:position pos:line="16" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="18" pos:column="9">snprintf<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">output<pos:position pos:line="18" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="26">sizeof<argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">HostAddress<pos:position pos:line="18" pos:column="44"/></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="47">"%d.%d.%d.%d"<pos:position pos:line="18" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="62">s<pos:position pos:line="18" pos:column="63"/></name><index pos:line="18" pos:column="63">[<expr><literal type="number" pos:line="18" pos:column="64">0<pos:position pos:line="18" pos:column="65"/></literal></expr>]<pos:position pos:line="18" pos:column="66"/></index></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="68">s<pos:position pos:line="18" pos:column="69"/></name><index pos:line="18" pos:column="69">[<expr><literal type="number" pos:line="18" pos:column="70">1<pos:position pos:line="18" pos:column="71"/></literal></expr>]<pos:position pos:line="18" pos:column="72"/></index></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="74">s<pos:position pos:line="18" pos:column="75"/></name><index pos:line="18" pos:column="75">[<expr><literal type="number" pos:line="18" pos:column="76">2<pos:position pos:line="18" pos:column="77"/></literal></expr>]<pos:position pos:line="18" pos:column="78"/></index></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="80">s<pos:position pos:line="18" pos:column="81"/></name><index pos:line="18" pos:column="81">[<expr><literal type="number" pos:line="18" pos:column="82">3<pos:position pos:line="18" pos:column="83"/></literal></expr>]<pos:position pos:line="18" pos:column="84"/></index></name></expr></argument> )<pos:position pos:line="18" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="87"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></else></if>
    <return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">output<pos:position pos:line="20" pos:column="18"/></name></expr>;<pos:position pos:line="20" pos:column="19"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
