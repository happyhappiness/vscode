<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4817_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Parser<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">Tokenizer<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">consumeTrailing<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">(<parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name><name pos:line="2" pos:column="42">SBuf<pos:position pos:line="2" pos:column="46"/></name><operator pos:line="2" pos:column="46">::<pos:position pos:line="2" pos:column="48"/></operator><name pos:line="2" pos:column="48">size_type<pos:position pos:line="2" pos:column="57"/></name></name></type> <name pos:line="2" pos:column="58">n<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">24<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"consuming "<pos:position pos:line="4" pos:column="31"/></literal> <operator pos:line="4" pos:column="32">&lt;&lt;<pos:position pos:line="4" pos:column="40"/></operator> <name pos:line="4" pos:column="35">n<pos:position pos:line="4" pos:column="36"/></name> <operator pos:line="4" pos:column="37">&lt;&lt;<pos:position pos:line="4" pos:column="45"/></operator> <literal type="string" pos:line="4" pos:column="40">" bytes"<pos:position pos:line="4" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="50"/></expr_stmt>

    <comment type="line" pos:line="6" pos:column="5">// If n is npos, we consume everything from buf_ (and nothing from result).</comment>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name><name pos:line="7" pos:column="11">SBuf<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">::<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">size_type<pos:position pos:line="7" pos:column="26"/></name></name></type> <name pos:line="7" pos:column="27">parsed<pos:position pos:line="7" pos:column="33"/></name> <init pos:line="7" pos:column="34">= <expr><ternary><condition><expr><operator pos:line="7" pos:column="36">(<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="37">n<pos:position pos:line="7" pos:column="38"/></name> <operator pos:line="7" pos:column="39">==<pos:position pos:line="7" pos:column="41"/></operator> <name><name pos:line="7" pos:column="42">SBuf<pos:position pos:line="7" pos:column="46"/></name><operator pos:line="7" pos:column="46">::<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="48">npos<pos:position pos:line="7" pos:column="52"/></name></name><operator pos:line="7" pos:column="52">)<pos:position pos:line="7" pos:column="53"/></operator></expr> ?<pos:position pos:line="7" pos:column="55"/></condition><then pos:line="7" pos:column="55"> <expr><call><name><name pos:line="7" pos:column="56">buf_<pos:position pos:line="7" pos:column="60"/></name><operator pos:line="7" pos:column="60">.<pos:position pos:line="7" pos:column="61"/></operator><name pos:line="7" pos:column="61">length<pos:position pos:line="7" pos:column="67"/></name></name><argument_list pos:line="7" pos:column="67">()<pos:position pos:line="7" pos:column="69"/></argument_list></call></expr> <pos:position pos:line="7" pos:column="70"/></then><else pos:line="7" pos:column="70">: <expr><name pos:line="7" pos:column="72">n<pos:position pos:line="7" pos:column="73"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="7" pos:column="74"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">SBuf<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">result<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><name pos:line="9" pos:column="19">buf_<pos:position pos:line="9" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">buf_<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <call><name><name pos:line="10" pos:column="12">result<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">consume<pos:position pos:line="10" pos:column="26"/></name></name><argument_list pos:line="10" pos:column="26">(<argument><expr><call><name><name pos:line="10" pos:column="27">buf_<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">.<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="32">length<pos:position pos:line="10" pos:column="38"/></name></name><argument_list pos:line="10" pos:column="38">()<pos:position pos:line="10" pos:column="40"/></argument_list></call> <operator pos:line="10" pos:column="41">-<pos:position pos:line="10" pos:column="42"/></operator> <name pos:line="10" pos:column="43">parsed<pos:position pos:line="10" pos:column="49"/></name></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">parsed_<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">+=<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">parsed<pos:position pos:line="11" pos:column="22"/></name></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">result<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
