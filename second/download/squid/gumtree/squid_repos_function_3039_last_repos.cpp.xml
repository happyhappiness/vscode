<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3039_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">handleRequestBodyData<pos:position pos:line="2" pos:column="37"/></name></name><parameter_list pos:line="2" pos:column="37">()<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">bodyPipe<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">!=<pos:position pos:line="4" pos:column="23"/></operator> <name pos:line="4" pos:column="24">NULL<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="30"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">bodyParser<pos:position pos:line="6" pos:column="19"/></name></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20"> <block pos:line="6" pos:column="21">{ <comment type="line" pos:line="6" pos:column="23">// chunked encoding</comment>
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<decl><type><specifier pos:line="7" pos:column="13">const<pos:position pos:line="7" pos:column="18"/></specifier> <name pos:line="7" pos:column="19">err_type<pos:position pos:line="7" pos:column="27"/></name></type> <name pos:line="7" pos:column="28">error<pos:position pos:line="7" pos:column="33"/></name> <init pos:line="7" pos:column="34">= <expr><call><name pos:line="7" pos:column="36">handleChunkedRequestBody<pos:position pos:line="7" pos:column="60"/></name><argument_list pos:line="7" pos:column="60">()<pos:position pos:line="7" pos:column="62"/></argument_list></call></expr></init></decl>)<pos:position pos:line="7" pos:column="63"/></condition><then pos:line="7" pos:column="63"> <block pos:line="7" pos:column="64">{
            <expr_stmt><expr><call><name pos:line="8" pos:column="13">abortChunkedRequestBody<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">error<pos:position pos:line="8" pos:column="42"/></name></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="44"/></expr_stmt>
            <return pos:line="9" pos:column="13">return <expr><literal type="boolean" pos:line="9" pos:column="20">false<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return>
        }<pos:position pos:line="10" pos:column="10"/></block></then></if>
    }<pos:position pos:line="11" pos:column="6"/></block></then> <else pos:line="11" pos:column="7">else <block pos:line="11" pos:column="12">{ <comment type="line" pos:line="11" pos:column="14">// identity encoding</comment>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">33<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="12" pos:column="19">5<pos:position pos:line="12" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="22">HERE<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">&lt;&lt;<pos:position pos:line="12" pos:column="35"/></operator> <literal type="string" pos:line="12" pos:column="30">"handling plain request body for "<pos:position pos:line="12" pos:column="64"/></literal> <operator pos:line="12" pos:column="65">&lt;&lt;<pos:position pos:line="12" pos:column="73"/></operator> <name pos:line="12" pos:column="68">clientConnection<pos:position pos:line="12" pos:column="84"/></name></expr></argument>)<pos:position pos:line="12" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="86"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name pos:line="13" pos:column="15">size_t<pos:position pos:line="13" pos:column="21"/></name></type> <name pos:line="13" pos:column="22">putSize<pos:position pos:line="13" pos:column="29"/></name> <init pos:line="13" pos:column="30">= <expr><call><name><name pos:line="13" pos:column="32">bodyPipe<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">-&gt;<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="42">putMoreData<pos:position pos:line="13" pos:column="53"/></name></name><argument_list pos:line="13" pos:column="53">(<argument><expr><call><name><name pos:line="13" pos:column="54">inBuf<pos:position pos:line="13" pos:column="59"/></name><operator pos:line="13" pos:column="59">.<pos:position pos:line="13" pos:column="60"/></operator><name pos:line="13" pos:column="60">c_str<pos:position pos:line="13" pos:column="65"/></name></name><argument_list pos:line="13" pos:column="65">()<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="69">inBuf<pos:position pos:line="13" pos:column="74"/></name><operator pos:line="13" pos:column="74">.<pos:position pos:line="13" pos:column="75"/></operator><name pos:line="13" pos:column="75">length<pos:position pos:line="13" pos:column="81"/></name></name><argument_list pos:line="13" pos:column="81">()<pos:position pos:line="13" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="84"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="85"/></decl_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">putSize<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">&gt;<pos:position pos:line="14" pos:column="25"/></operator> <literal type="number" pos:line="14" pos:column="23">0<pos:position pos:line="14" pos:column="24"/></literal></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="13">consumeInput<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">putSize<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt></block></then></if>

        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><call><name><name pos:line="17" pos:column="14">bodyPipe<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">-&gt;<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="24">mayNeedMoreData<pos:position pos:line="17" pos:column="39"/></name></name><argument_list pos:line="17" pos:column="39">()<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="42"/></condition><then pos:line="17" pos:column="42"> <block pos:line="17" pos:column="43">{
            <comment type="line" pos:line="18" pos:column="13">// BodyPipe will clear us automagically when we produced everything</comment>
            <expr_stmt><expr><name pos:line="19" pos:column="13">bodyPipe<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">NULL<pos:position pos:line="19" pos:column="28"/></name></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>
    }<pos:position pos:line="21" pos:column="6"/></block></else></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">bodyPipe<pos:position pos:line="23" pos:column="18"/></name></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19"> <block pos:line="23" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">33<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="24" pos:column="19">5<pos:position pos:line="24" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="22">HERE<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">&lt;&lt;<pos:position pos:line="24" pos:column="35"/></operator> <literal type="string" pos:line="24" pos:column="30">"produced entire request body for "<pos:position pos:line="24" pos:column="65"/></literal> <operator pos:line="24" pos:column="66">&lt;&lt;<pos:position pos:line="24" pos:column="74"/></operator> <name pos:line="24" pos:column="69">clientConnection<pos:position pos:line="24" pos:column="85"/></name></expr></argument>)<pos:position pos:line="24" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="87"/></expr_stmt>

        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<decl><type><specifier pos:line="26" pos:column="13">const<pos:position pos:line="26" pos:column="18"/></specifier> <name pos:line="26" pos:column="19">char<pos:position pos:line="26" pos:column="23"/></name> <modifier pos:line="26" pos:column="24">*<pos:position pos:line="26" pos:column="25"/></modifier></type><name pos:line="26" pos:column="25">reason<pos:position pos:line="26" pos:column="31"/></name> <init pos:line="26" pos:column="32">= <expr><call><name pos:line="26" pos:column="34">stoppedSending<pos:position pos:line="26" pos:column="48"/></name><argument_list pos:line="26" pos:column="48">()<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr></init></decl>)<pos:position pos:line="26" pos:column="51"/></condition><then pos:line="26" pos:column="51"> <block pos:line="26" pos:column="52">{
            <comment type="block" pos:line="27" pos:column="13">/* we've finished reading like good clients,
             * now do the close that initiateClose initiated.
             */</comment>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">debugs<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><literal type="number" pos:line="30" pos:column="20">33<pos:position pos:line="30" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="24">3<pos:position pos:line="30" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="27">HERE<pos:position pos:line="30" pos:column="31"/></name> <operator pos:line="30" pos:column="32">&lt;&lt;<pos:position pos:line="30" pos:column="40"/></operator> <literal type="string" pos:line="30" pos:column="35">"closing for earlier sending error: "<pos:position pos:line="30" pos:column="72"/></literal> <operator pos:line="30" pos:column="73">&lt;&lt;<pos:position pos:line="30" pos:column="81"/></operator> <name pos:line="30" pos:column="76">reason<pos:position pos:line="30" pos:column="82"/></name></expr></argument>)<pos:position pos:line="30" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="84"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">clientConnection<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">-&gt;<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="31">close<pos:position pos:line="31" pos:column="36"/></name></name><argument_list pos:line="31" pos:column="36">()<pos:position pos:line="31" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt>
            <return pos:line="32" pos:column="13">return <expr><literal type="boolean" pos:line="32" pos:column="20">false<pos:position pos:line="32" pos:column="25"/></literal></expr>;<pos:position pos:line="32" pos:column="26"/></return>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <return pos:line="36" pos:column="5">return <expr><literal type="boolean" pos:line="36" pos:column="12">true<pos:position pos:line="36" pos:column="16"/></literal></expr>;<pos:position pos:line="36" pos:column="17"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
