<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4405_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">adjustSSL<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">SSL<pos:position pos:line="2" pos:column="14"/></name> <modifier pos:line="2" pos:column="15">*<pos:position pos:line="2" pos:column="16"/></modifier></type><name pos:line="2" pos:column="16">ssl<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="21">Ssl<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">Bio<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">sslFeatures<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">&amp;<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="44">features<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">SQUID_USE_OPENSSL_HELLO_OVERWRITE_HACK<pos:position pos:line="4" pos:column="43"/></name></expr></cpp:if>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name><name pos:line="5" pos:column="10">features<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">.<pos:position pos:line="5" pos:column="19"/></operator><name pos:line="5" pos:column="19">initialized_<pos:position pos:line="5" pos:column="31"/></name></name></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><literal type="boolean" pos:line="6" pos:column="16">false<pos:position pos:line="6" pos:column="21"/></literal></expr>;<pos:position pos:line="6" pos:column="22"/></return></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">ssl<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">s3<pos:position pos:line="8" pos:column="17"/></name></name></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18"> <block pos:line="8" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">83<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">5<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="23">"No SSLv3 data found!"<pos:position pos:line="9" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="13" pos:column="5">// If the client supports compression but our context does not support</comment>
    <comment type="line" pos:line="14" pos:column="5">// we can not adjust.</comment>
<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><operator pos:line="15" pos:column="5">!<pos:position pos:line="15" pos:column="6"/></operator><call><name pos:line="15" pos:column="6">defined<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name pos:line="15" pos:column="14">OPENSSL_NO_COMP<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">bool<pos:position pos:line="16" pos:column="15"/></name></type> <name pos:line="16" pos:column="16">requireCompression<pos:position pos:line="16" pos:column="34"/></name> <init pos:line="16" pos:column="35">= <expr><operator pos:line="16" pos:column="37">(<pos:position pos:line="16" pos:column="38"/></operator><name><name pos:line="16" pos:column="38">features<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">.<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="47">compressMethod<pos:position pos:line="16" pos:column="61"/></name></name> <operator pos:line="16" pos:column="62">&amp;&amp;<pos:position pos:line="16" pos:column="72"/></operator> <name><name pos:line="16" pos:column="65">ssl<pos:position pos:line="16" pos:column="68"/></name><operator pos:line="16" pos:column="68">-&gt;<pos:position pos:line="16" pos:column="73"/></operator><name pos:line="16" pos:column="70">ctx<pos:position pos:line="16" pos:column="73"/></name><operator pos:line="16" pos:column="73">-&gt;<pos:position pos:line="16" pos:column="78"/></operator><name pos:line="16" pos:column="75">comp_methods<pos:position pos:line="16" pos:column="87"/></name></name> <operator pos:line="16" pos:column="88">==<pos:position pos:line="16" pos:column="90"/></operator> <name pos:line="16" pos:column="91">NULL<pos:position pos:line="16" pos:column="95"/></name><operator pos:line="16" pos:column="95">)<pos:position pos:line="16" pos:column="96"/></operator></expr></init></decl>;<pos:position pos:line="16" pos:column="97"/></decl_stmt>
<cpp:else pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">else<pos:position pos:line="17" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier pos:line="18" pos:column="5">const<pos:position pos:line="18" pos:column="10"/></specifier> <name pos:line="18" pos:column="11">bool<pos:position pos:line="18" pos:column="15"/></name></type> <name pos:line="18" pos:column="16">requireCompression<pos:position pos:line="18" pos:column="34"/></name> <init pos:line="18" pos:column="35">= <expr><name><name pos:line="18" pos:column="37">features<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">.<pos:position pos:line="18" pos:column="46"/></operator><name pos:line="18" pos:column="46">compressMethod<pos:position pos:line="18" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="18" pos:column="61"/></decl_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">requireCompression<pos:position pos:line="20" pos:column="27"/></name></expr>)<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28"> <block pos:line="20" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">83<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="20">5<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="23">"Client Hello Data supports compression, but we do not!"<pos:position pos:line="21" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="81"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><literal type="boolean" pos:line="22" pos:column="16">false<pos:position pos:line="22" pos:column="21"/></literal></expr>;<pos:position pos:line="22" pos:column="22"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="25" pos:column="5">// Check ciphers list</comment>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">size_t<pos:position pos:line="26" pos:column="11"/></name></type> <name pos:line="26" pos:column="12">token<pos:position pos:line="26" pos:column="17"/></name> <init pos:line="26" pos:column="18">= <expr><literal type="number" pos:line="26" pos:column="20">0<pos:position pos:line="26" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">size_t<pos:position pos:line="27" pos:column="11"/></name></type> <name pos:line="27" pos:column="12">end<pos:position pos:line="27" pos:column="15"/></name> <init pos:line="27" pos:column="16">= <expr><literal type="number" pos:line="27" pos:column="18">0<pos:position pos:line="27" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="20"/></decl_stmt>
    <while pos:line="28" pos:column="5">while <condition pos:line="28" pos:column="11">(<expr><name pos:line="28" pos:column="12">token<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">!=<pos:position pos:line="28" pos:column="20"/></operator> <name><name pos:line="28" pos:column="21">std<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">::<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="26">string<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">::<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="34">npos<pos:position pos:line="28" pos:column="38"/></name></name></expr>)<pos:position pos:line="28" pos:column="39"/></condition> <block pos:line="28" pos:column="40">{
        <expr_stmt><expr><name pos:line="29" pos:column="9">end<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name><name pos:line="29" pos:column="15">features<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">.<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">clientRequestedCiphers<pos:position pos:line="29" pos:column="46"/></name><operator pos:line="29" pos:column="46">.<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="47">find<pos:position pos:line="29" pos:column="51"/></name></name><argument_list pos:line="29" pos:column="51">(<argument><expr><literal type="char" pos:line="29" pos:column="52">':'<pos:position pos:line="29" pos:column="55"/></literal></expr></argument>,<argument><expr><name pos:line="29" pos:column="56">token<pos:position pos:line="29" pos:column="61"/></name></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="63"/></expr_stmt>
        <decl_stmt><decl><type><name><name pos:line="30" pos:column="9">std<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">::<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">string<pos:position pos:line="30" pos:column="20"/></name></name></type> <name pos:line="30" pos:column="21">cipher<pos:position pos:line="30" pos:column="27"/></name></decl>;<pos:position pos:line="30" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="31" pos:column="9">cipher<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">.<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">assign<pos:position pos:line="31" pos:column="22"/></name></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name><name pos:line="31" pos:column="23">features<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">.<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="32">clientRequestedCiphers<pos:position pos:line="31" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="56">token<pos:position pos:line="31" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="63">end<pos:position pos:line="31" pos:column="66"/></name> <operator pos:line="31" pos:column="67">-<pos:position pos:line="31" pos:column="68"/></operator> <name pos:line="31" pos:column="69">token<pos:position pos:line="31" pos:column="74"/></name></expr></argument>)<pos:position pos:line="31" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><name pos:line="32" pos:column="9">token<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <operator pos:line="32" pos:column="17">(<pos:position pos:line="32" pos:column="18"/></operator><ternary><condition><expr><name pos:line="32" pos:column="18">end<pos:position pos:line="32" pos:column="21"/></name> <operator pos:line="32" pos:column="22">!=<pos:position pos:line="32" pos:column="24"/></operator> <name><name pos:line="32" pos:column="25">std<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">::<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="30">string<pos:position pos:line="32" pos:column="36"/></name><operator pos:line="32" pos:column="36">::<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="38">npos<pos:position pos:line="32" pos:column="42"/></name></name></expr> ?<pos:position pos:line="32" pos:column="44"/></condition><then pos:line="32" pos:column="44"> <expr><name pos:line="32" pos:column="45">end<pos:position pos:line="32" pos:column="48"/></name> <operator pos:line="32" pos:column="49">+<pos:position pos:line="32" pos:column="50"/></operator> <literal type="number" pos:line="32" pos:column="51">1<pos:position pos:line="32" pos:column="52"/></literal></expr> <pos:position pos:line="32" pos:column="53"/></then><else pos:line="32" pos:column="53">: <expr><name><name pos:line="32" pos:column="55">std<pos:position pos:line="32" pos:column="58"/></name><operator pos:line="32" pos:column="58">::<pos:position pos:line="32" pos:column="60"/></operator><name pos:line="32" pos:column="60">string<pos:position pos:line="32" pos:column="66"/></name><operator pos:line="32" pos:column="66">::<pos:position pos:line="32" pos:column="68"/></operator><name pos:line="32" pos:column="68">npos<pos:position pos:line="32" pos:column="72"/></name></name></expr></else></ternary><operator pos:line="32" pos:column="72">)<pos:position pos:line="32" pos:column="73"/></operator></expr>;<pos:position pos:line="32" pos:column="74"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="33" pos:column="9">bool<pos:position pos:line="33" pos:column="13"/></name></type> <name pos:line="33" pos:column="14">found<pos:position pos:line="33" pos:column="19"/></name> <init pos:line="33" pos:column="20">= <expr><literal type="boolean" pos:line="33" pos:column="22">false<pos:position pos:line="33" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="33" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">STACK_OF<pos:position pos:line="34" pos:column="17"/></name><argument_list pos:line="34" pos:column="17">(<argument><expr><name pos:line="34" pos:column="18">SSL_CIPHER<pos:position pos:line="34" pos:column="28"/></name></expr></argument>)<pos:position pos:line="34" pos:column="29"/></argument_list></call> <operator pos:line="34" pos:column="30">*<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="31">cipher_stack<pos:position pos:line="34" pos:column="43"/></name> <operator pos:line="34" pos:column="44">=<pos:position pos:line="34" pos:column="45"/></operator> <call><name pos:line="34" pos:column="46">SSL_get_ciphers<pos:position pos:line="34" pos:column="61"/></name><argument_list pos:line="34" pos:column="61">(<argument><expr><name pos:line="34" pos:column="62">ssl<pos:position pos:line="34" pos:column="65"/></name></expr></argument>)<pos:position pos:line="34" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="67"/></expr_stmt>
        <for pos:line="35" pos:column="9">for <control pos:line="35" pos:column="13">(<init><decl><type><name pos:line="35" pos:column="14">int<pos:position pos:line="35" pos:column="17"/></name></type> <name pos:line="35" pos:column="18">i<pos:position pos:line="35" pos:column="19"/></name> <init pos:line="35" pos:column="20">= <expr><literal type="number" pos:line="35" pos:column="22">0<pos:position pos:line="35" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="35" pos:column="24"/></init> <condition><expr><name pos:line="35" pos:column="25">i<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">&lt;<pos:position pos:line="35" pos:column="31"/></operator> <call><name pos:line="35" pos:column="29">sk_SSL_CIPHER_num<pos:position pos:line="35" pos:column="46"/></name><argument_list pos:line="35" pos:column="46">(<argument><expr><name pos:line="35" pos:column="47">cipher_stack<pos:position pos:line="35" pos:column="59"/></name></expr></argument>)<pos:position pos:line="35" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="61"/></condition> <incr><expr><name pos:line="35" pos:column="62">i<pos:position pos:line="35" pos:column="63"/></name><operator pos:line="35" pos:column="63">++<pos:position pos:line="35" pos:column="65"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="66"/></control> <block pos:line="35" pos:column="67">{
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">SSL_CIPHER<pos:position pos:line="36" pos:column="23"/></name> <modifier pos:line="36" pos:column="24">*<pos:position pos:line="36" pos:column="25"/></modifier></type><name pos:line="36" pos:column="25">c<pos:position pos:line="36" pos:column="26"/></name> <init pos:line="36" pos:column="27">= <expr><call><name pos:line="36" pos:column="29">sk_SSL_CIPHER_value<pos:position pos:line="36" pos:column="48"/></name><argument_list pos:line="36" pos:column="48">(<argument><expr><name pos:line="36" pos:column="49">cipher_stack<pos:position pos:line="36" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="63">i<pos:position pos:line="36" pos:column="64"/></name></expr></argument>)<pos:position pos:line="36" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="66"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="37" pos:column="13">const<pos:position pos:line="37" pos:column="18"/></specifier> <name pos:line="37" pos:column="19">char<pos:position pos:line="37" pos:column="23"/></name> <modifier pos:line="37" pos:column="24">*<pos:position pos:line="37" pos:column="25"/></modifier></type><name pos:line="37" pos:column="25">cname<pos:position pos:line="37" pos:column="30"/></name> <init pos:line="37" pos:column="31">= <expr><call><name pos:line="37" pos:column="33">SSL_CIPHER_get_name<pos:position pos:line="37" pos:column="52"/></name><argument_list pos:line="37" pos:column="52">(<argument><expr><name pos:line="37" pos:column="53">c<pos:position pos:line="37" pos:column="54"/></name></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="56"/></decl_stmt>
            <if pos:line="38" pos:column="13">if <condition pos:line="38" pos:column="16">(<expr><call><name><name pos:line="38" pos:column="17">cipher<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">.<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">compare<pos:position pos:line="38" pos:column="31"/></name></name><argument_list pos:line="38" pos:column="31">(<argument><expr><name pos:line="38" pos:column="32">cname<pos:position pos:line="38" pos:column="37"/></name></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="39"/></condition><then pos:line="38" pos:column="39"> <block pos:line="38" pos:column="40">{
                <expr_stmt><expr><name pos:line="39" pos:column="17">found<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <literal type="boolean" pos:line="39" pos:column="25">true<pos:position pos:line="39" pos:column="29"/></literal></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>
                <break pos:line="40" pos:column="17">break;<pos:position pos:line="40" pos:column="23"/></break>
            }<pos:position pos:line="41" pos:column="14"/></block></then></if>
        }<pos:position pos:line="42" pos:column="10"/></block></for>
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">!<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">found<pos:position pos:line="43" pos:column="19"/></name></expr>)<pos:position pos:line="43" pos:column="20"/></condition><then pos:line="43" pos:column="20"> <block pos:line="43" pos:column="21">{
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">debugs<pos:position pos:line="44" pos:column="19"/></name><argument_list pos:line="44" pos:column="19">(<argument><expr><literal type="number" pos:line="44" pos:column="20">83<pos:position pos:line="44" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="24">5<pos:position pos:line="44" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="27">"Client Hello Data supports cipher '"<pos:position pos:line="44" pos:column="64"/></literal><operator pos:line="44" pos:column="64">&lt;&lt;<pos:position pos:line="44" pos:column="72"/></operator> <name pos:line="44" pos:column="67">cipher<pos:position pos:line="44" pos:column="73"/></name> <operator pos:line="44" pos:column="74">&lt;&lt;<pos:position pos:line="44" pos:column="82"/></operator><literal type="string" pos:line="44" pos:column="76">"' but we do not support it!"<pos:position pos:line="44" pos:column="105"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="107"/></expr_stmt>
            <return pos:line="45" pos:column="13">return <expr><literal type="boolean" pos:line="45" pos:column="20">false<pos:position pos:line="45" pos:column="25"/></literal></expr>;<pos:position pos:line="45" pos:column="26"/></return>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></while>

<cpp:if pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">if<pos:position pos:line="49" pos:column="4"/></cpp:directive> <expr><operator pos:line="49" pos:column="5">!<pos:position pos:line="49" pos:column="6"/></operator><call><name pos:line="49" pos:column="6">defined<pos:position pos:line="49" pos:column="13"/></name><argument_list pos:line="49" pos:column="13">(<argument><expr><name pos:line="49" pos:column="14">SSL_TLSEXT_HB_ENABLED<pos:position pos:line="49" pos:column="35"/></name></expr></argument>)<pos:position pos:line="49" pos:column="36"/></argument_list></call></expr></cpp:if>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name><name pos:line="50" pos:column="9">features<pos:position pos:line="50" pos:column="17"/></name><operator pos:line="50" pos:column="17">.<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="18">doHeartBeats<pos:position pos:line="50" pos:column="30"/></name></name></expr>)<pos:position pos:line="50" pos:column="31"/></condition><then pos:line="50" pos:column="31"> <block pos:line="50" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">debugs<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><literal type="number" pos:line="51" pos:column="16">83<pos:position pos:line="51" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="20">5<pos:position pos:line="51" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="23">"Client Hello Data supports HeartBeats but we do not support!"<pos:position pos:line="51" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="87"/></expr_stmt>
        <return pos:line="52" pos:column="9">return <expr><literal type="boolean" pos:line="52" pos:column="16">false<pos:position pos:line="52" pos:column="21"/></literal></expr>;<pos:position pos:line="52" pos:column="22"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif>

    <for pos:line="56" pos:column="5">for <control pos:line="56" pos:column="9">(<init><decl><type><name><name pos:line="56" pos:column="10">std<pos:position pos:line="56" pos:column="13"/></name><operator pos:line="56" pos:column="13">::<pos:position pos:line="56" pos:column="15"/></operator><name><name pos:line="56" pos:column="15">list<pos:position pos:line="56" pos:column="19"/></name><argument_list type="generic" pos:line="56" pos:column="19">&lt;<argument><expr><name pos:line="56" pos:column="20">int<pos:position pos:line="56" pos:column="23"/></name></expr></argument>&gt;<pos:position pos:line="56" pos:column="27"/></argument_list></name><operator pos:line="56" pos:column="24">::<pos:position pos:line="56" pos:column="26"/></operator><name pos:line="56" pos:column="26">iterator<pos:position pos:line="56" pos:column="34"/></name></name></type> <name pos:line="56" pos:column="35">it<pos:position pos:line="56" pos:column="37"/></name> <init pos:line="56" pos:column="38">= <expr><call><name><name pos:line="56" pos:column="40">features<pos:position pos:line="56" pos:column="48"/></name><operator pos:line="56" pos:column="48">.<pos:position pos:line="56" pos:column="49"/></operator><name pos:line="56" pos:column="49">extensions<pos:position pos:line="56" pos:column="59"/></name><operator pos:line="56" pos:column="59">.<pos:position pos:line="56" pos:column="60"/></operator><name pos:line="56" pos:column="60">begin<pos:position pos:line="56" pos:column="65"/></name></name><argument_list pos:line="56" pos:column="65">()<pos:position pos:line="56" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="56" pos:column="68"/></init> <condition><expr><name pos:line="56" pos:column="69">it<pos:position pos:line="56" pos:column="71"/></name> <operator pos:line="56" pos:column="72">!=<pos:position pos:line="56" pos:column="74"/></operator> <call><name><name pos:line="56" pos:column="75">features<pos:position pos:line="56" pos:column="83"/></name><operator pos:line="56" pos:column="83">.<pos:position pos:line="56" pos:column="84"/></operator><name pos:line="56" pos:column="84">extensions<pos:position pos:line="56" pos:column="94"/></name><operator pos:line="56" pos:column="94">.<pos:position pos:line="56" pos:column="95"/></operator><name pos:line="56" pos:column="95">end<pos:position pos:line="56" pos:column="98"/></name></name><argument_list pos:line="56" pos:column="98">()<pos:position pos:line="56" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="101"/></condition> <incr><expr><operator pos:line="56" pos:column="102">++<pos:position pos:line="56" pos:column="104"/></operator><name pos:line="56" pos:column="104">it<pos:position pos:line="56" pos:column="106"/></name></expr></incr>)<pos:position pos:line="56" pos:column="107"/></control> <block pos:line="56" pos:column="108">{
        <decl_stmt><decl><specifier pos:line="57" pos:column="9">static<pos:position pos:line="57" pos:column="15"/></specifier> <type><name pos:line="57" pos:column="16">int<pos:position pos:line="57" pos:column="19"/></name></type> <name><name pos:line="57" pos:column="20">supportedExtensions<pos:position pos:line="57" pos:column="39"/></name><index pos:line="57" pos:column="39">[]<pos:position pos:line="57" pos:column="41"/></index></name> <init pos:line="57" pos:column="42">= <expr><block pos:line="57" pos:column="44">{
<cpp:if pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">if<pos:position pos:line="58" pos:column="4"/></cpp:directive> <expr><call><name pos:line="58" pos:column="5">defined<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><name pos:line="58" pos:column="13">TLSEXT_TYPE_server_name<pos:position pos:line="58" pos:column="36"/></name></expr></argument>)<pos:position pos:line="58" pos:column="37"/></argument_list></call></expr></cpp:if>
            <expr><name pos:line="59" pos:column="13">TLSEXT_TYPE_server_name<pos:position pos:line="59" pos:column="36"/></name></expr>,
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">if<pos:position pos:line="61" pos:column="4"/></cpp:directive> <expr><call><name pos:line="61" pos:column="5">defined<pos:position pos:line="61" pos:column="12"/></name><argument_list pos:line="61" pos:column="12">(<argument><expr><name pos:line="61" pos:column="13">TLSEXT_TYPE_opaque_prf_input<pos:position pos:line="61" pos:column="41"/></name></expr></argument>)<pos:position pos:line="61" pos:column="42"/></argument_list></call></expr></cpp:if>
            <expr><name pos:line="62" pos:column="13">TLSEXT_TYPE_opaque_prf_input<pos:position pos:line="62" pos:column="41"/></name></expr>,
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">if<pos:position pos:line="64" pos:column="4"/></cpp:directive> <expr><call><name pos:line="64" pos:column="5">defined<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><name pos:line="64" pos:column="13">TLSEXT_TYPE_heartbeat<pos:position pos:line="64" pos:column="34"/></name></expr></argument>)<pos:position pos:line="64" pos:column="35"/></argument_list></call></expr></cpp:if>
            <expr><name pos:line="65" pos:column="13">TLSEXT_TYPE_heartbeat<pos:position pos:line="65" pos:column="34"/></name></expr>,
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">if<pos:position pos:line="67" pos:column="4"/></cpp:directive> <expr><call><name pos:line="67" pos:column="5">defined<pos:position pos:line="67" pos:column="12"/></name><argument_list pos:line="67" pos:column="12">(<argument><expr><name pos:line="67" pos:column="13">TLSEXT_TYPE_renegotiate<pos:position pos:line="67" pos:column="36"/></name></expr></argument>)<pos:position pos:line="67" pos:column="37"/></argument_list></call></expr></cpp:if>
            <expr><name pos:line="68" pos:column="13">TLSEXT_TYPE_renegotiate<pos:position pos:line="68" pos:column="36"/></name></expr>,
<cpp:endif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">endif<pos:position pos:line="69" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">if<pos:position pos:line="70" pos:column="4"/></cpp:directive> <expr><call><name pos:line="70" pos:column="5">defined<pos:position pos:line="70" pos:column="12"/></name><argument_list pos:line="70" pos:column="12">(<argument><expr><name pos:line="70" pos:column="13">TLSEXT_TYPE_ec_point_formats<pos:position pos:line="70" pos:column="41"/></name></expr></argument>)<pos:position pos:line="70" pos:column="42"/></argument_list></call></expr></cpp:if>
            <expr><name pos:line="71" pos:column="13">TLSEXT_TYPE_ec_point_formats<pos:position pos:line="71" pos:column="41"/></name></expr>,
<cpp:endif pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">endif<pos:position pos:line="72" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">if<pos:position pos:line="73" pos:column="4"/></cpp:directive> <expr><call><name pos:line="73" pos:column="5">defined<pos:position pos:line="73" pos:column="12"/></name><argument_list pos:line="73" pos:column="12">(<argument><expr><name pos:line="73" pos:column="13">TLSEXT_TYPE_elliptic_curves<pos:position pos:line="73" pos:column="40"/></name></expr></argument>)<pos:position pos:line="73" pos:column="41"/></argument_list></call></expr></cpp:if>
            <expr><name pos:line="74" pos:column="13">TLSEXT_TYPE_elliptic_curves<pos:position pos:line="74" pos:column="40"/></name></expr>,
<cpp:endif pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">endif<pos:position pos:line="75" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">if<pos:position pos:line="76" pos:column="4"/></cpp:directive> <expr><call><name pos:line="76" pos:column="5">defined<pos:position pos:line="76" pos:column="12"/></name><argument_list pos:line="76" pos:column="12">(<argument><expr><name pos:line="76" pos:column="13">TLSEXT_TYPE_session_ticket<pos:position pos:line="76" pos:column="39"/></name></expr></argument>)<pos:position pos:line="76" pos:column="40"/></argument_list></call></expr></cpp:if>
            <expr><name pos:line="77" pos:column="13">TLSEXT_TYPE_session_ticket<pos:position pos:line="77" pos:column="39"/></name></expr>,
<cpp:endif pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">endif<pos:position pos:line="78" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">if<pos:position pos:line="79" pos:column="4"/></cpp:directive> <expr><call><name pos:line="79" pos:column="5">defined<pos:position pos:line="79" pos:column="12"/></name><argument_list pos:line="79" pos:column="12">(<argument><expr><name pos:line="79" pos:column="13">TLSEXT_TYPE_status_request<pos:position pos:line="79" pos:column="39"/></name></expr></argument>)<pos:position pos:line="79" pos:column="40"/></argument_list></call></expr></cpp:if>
            <expr><name pos:line="80" pos:column="13">TLSEXT_TYPE_status_request<pos:position pos:line="80" pos:column="39"/></name></expr>,
<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif<pos:position pos:line="81" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">if<pos:position pos:line="82" pos:column="4"/></cpp:directive> <expr><call><name pos:line="82" pos:column="5">defined<pos:position pos:line="82" pos:column="12"/></name><argument_list pos:line="82" pos:column="12">(<argument><expr><name pos:line="82" pos:column="13">TLSEXT_TYPE_use_srtp<pos:position pos:line="82" pos:column="33"/></name></expr></argument>)<pos:position pos:line="82" pos:column="34"/></argument_list></call></expr></cpp:if>
            <expr><name pos:line="83" pos:column="13">TLSEXT_TYPE_use_srtp<pos:position pos:line="83" pos:column="33"/></name></expr>,
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">if<pos:position pos:line="85" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="85" pos:column="5">0<pos:position pos:line="85" pos:column="6"/></literal></expr></cpp:if> <comment type="line" pos:line="85" pos:column="7">//Allow 13172 Firefox supported extension for testing purposes</comment>
            13172,
<cpp:endif pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">endif<pos:position pos:line="87" pos:column="7"/></cpp:directive></cpp:endif>
            <expr><operator pos:line="88" pos:column="13">-<pos:position pos:line="88" pos:column="14"/></operator><literal type="number" pos:line="88" pos:column="14">1<pos:position pos:line="88" pos:column="15"/></literal></expr>
        }<pos:position pos:line="89" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="89" pos:column="11"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="90" pos:column="9">bool<pos:position pos:line="90" pos:column="13"/></name></type> <name pos:line="90" pos:column="14">found<pos:position pos:line="90" pos:column="19"/></name> <init pos:line="90" pos:column="20">= <expr><literal type="boolean" pos:line="90" pos:column="22">false<pos:position pos:line="90" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="90" pos:column="28"/></decl_stmt>
        <for pos:line="91" pos:column="9">for <control pos:line="91" pos:column="13">(<init><decl><type><name pos:line="91" pos:column="14">int<pos:position pos:line="91" pos:column="17"/></name></type> <name pos:line="91" pos:column="18">i<pos:position pos:line="91" pos:column="19"/></name> <init pos:line="91" pos:column="20">= <expr><literal type="number" pos:line="91" pos:column="22">0<pos:position pos:line="91" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="91" pos:column="24"/></init> <condition><expr><name><name pos:line="91" pos:column="25">supportedExtensions<pos:position pos:line="91" pos:column="44"/></name><index pos:line="91" pos:column="44">[<expr><name pos:line="91" pos:column="45">i<pos:position pos:line="91" pos:column="46"/></name></expr>]<pos:position pos:line="91" pos:column="47"/></index></name> <operator pos:line="91" pos:column="48">!=<pos:position pos:line="91" pos:column="50"/></operator> <operator pos:line="91" pos:column="51">-<pos:position pos:line="91" pos:column="52"/></operator><literal type="number" pos:line="91" pos:column="52">1<pos:position pos:line="91" pos:column="53"/></literal></expr>;<pos:position pos:line="91" pos:column="54"/></condition> <incr><expr><name pos:line="91" pos:column="55">i<pos:position pos:line="91" pos:column="56"/></name><operator pos:line="91" pos:column="56">++<pos:position pos:line="91" pos:column="58"/></operator></expr></incr>)<pos:position pos:line="91" pos:column="59"/></control> <block pos:line="91" pos:column="60">{
            <if pos:line="92" pos:column="13">if <condition pos:line="92" pos:column="16">(<expr><operator pos:line="92" pos:column="17">*<pos:position pos:line="92" pos:column="18"/></operator><name pos:line="92" pos:column="18">it<pos:position pos:line="92" pos:column="20"/></name> <operator pos:line="92" pos:column="21">==<pos:position pos:line="92" pos:column="23"/></operator> <name><name pos:line="92" pos:column="24">supportedExtensions<pos:position pos:line="92" pos:column="43"/></name><index pos:line="92" pos:column="43">[<expr><name pos:line="92" pos:column="44">i<pos:position pos:line="92" pos:column="45"/></name></expr>]<pos:position pos:line="92" pos:column="46"/></index></name></expr>)<pos:position pos:line="92" pos:column="47"/></condition><then pos:line="92" pos:column="47"> <block pos:line="92" pos:column="48">{
                <expr_stmt><expr><name pos:line="93" pos:column="17">found<pos:position pos:line="93" pos:column="22"/></name> <operator pos:line="93" pos:column="23">=<pos:position pos:line="93" pos:column="24"/></operator> <literal type="boolean" pos:line="93" pos:column="25">true<pos:position pos:line="93" pos:column="29"/></literal></expr>;<pos:position pos:line="93" pos:column="30"/></expr_stmt>
                <break pos:line="94" pos:column="17">break;<pos:position pos:line="94" pos:column="23"/></break>
            }<pos:position pos:line="95" pos:column="14"/></block></then></if>
        }<pos:position pos:line="96" pos:column="10"/></block></for>
        <if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><operator pos:line="97" pos:column="13">!<pos:position pos:line="97" pos:column="14"/></operator><name pos:line="97" pos:column="14">found<pos:position pos:line="97" pos:column="19"/></name></expr>)<pos:position pos:line="97" pos:column="20"/></condition><then pos:line="97" pos:column="20"> <block pos:line="97" pos:column="21">{
            <expr_stmt><expr><call><name pos:line="98" pos:column="13">debugs<pos:position pos:line="98" pos:column="19"/></name><argument_list pos:line="98" pos:column="19">(<argument><expr><literal type="number" pos:line="98" pos:column="20">83<pos:position pos:line="98" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="98" pos:column="24">5<pos:position pos:line="98" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="27">"Extension "<pos:position pos:line="98" pos:column="39"/></literal> <operator pos:line="98" pos:column="40">&lt;&lt;<pos:position pos:line="98" pos:column="48"/></operator> <operator pos:line="98" pos:column="43">*<pos:position pos:line="98" pos:column="44"/></operator><name pos:line="98" pos:column="44">it<pos:position pos:line="98" pos:column="46"/></name> <operator pos:line="98" pos:column="47">&lt;&lt;<pos:position pos:line="98" pos:column="55"/></operator>  <literal type="string" pos:line="98" pos:column="51">" does not supported!"<pos:position pos:line="98" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="75"/></expr_stmt>
            <return pos:line="99" pos:column="13">return <expr><literal type="boolean" pos:line="99" pos:column="20">false<pos:position pos:line="99" pos:column="25"/></literal></expr>;<pos:position pos:line="99" pos:column="26"/></return>
        }<pos:position pos:line="100" pos:column="10"/></block></then></if>
    }<pos:position pos:line="101" pos:column="6"/></block></for>

    <decl_stmt><decl><type><name pos:line="103" pos:column="5">SSL3_BUFFER<pos:position pos:line="103" pos:column="16"/></name> <modifier pos:line="103" pos:column="17">*<pos:position pos:line="103" pos:column="18"/></modifier></type><name pos:line="103" pos:column="18">wb<pos:position pos:line="103" pos:column="20"/></name><init pos:line="103" pos:column="20">=<expr><operator pos:line="103" pos:column="21">&amp;<pos:position pos:line="103" pos:column="26"/></operator><operator pos:line="103" pos:column="22">(<pos:position pos:line="103" pos:column="23"/></operator><name><name pos:line="103" pos:column="23">ssl<pos:position pos:line="103" pos:column="26"/></name><operator pos:line="103" pos:column="26">-&gt;<pos:position pos:line="103" pos:column="31"/></operator><name pos:line="103" pos:column="28">s3<pos:position pos:line="103" pos:column="30"/></name><operator pos:line="103" pos:column="30">-&gt;<pos:position pos:line="103" pos:column="35"/></operator><name pos:line="103" pos:column="32">wbuf<pos:position pos:line="103" pos:column="36"/></name></name><operator pos:line="103" pos:column="36">)<pos:position pos:line="103" pos:column="37"/></operator></expr></init></decl>;<pos:position pos:line="103" pos:column="38"/></decl_stmt>
    <if pos:line="104" pos:column="5">if <condition pos:line="104" pos:column="8">(<expr><name><name pos:line="104" pos:column="9">wb<pos:position pos:line="104" pos:column="11"/></name><operator pos:line="104" pos:column="11">-&gt;<pos:position pos:line="104" pos:column="16"/></operator><name pos:line="104" pos:column="13">len<pos:position pos:line="104" pos:column="16"/></name></name> <operator pos:line="104" pos:column="17">&lt;<pos:position pos:line="104" pos:column="21"/></operator> <operator pos:line="104" pos:column="19">(<pos:position pos:line="104" pos:column="20"/></operator><name pos:line="104" pos:column="20">size_t<pos:position pos:line="104" pos:column="26"/></name><operator pos:line="104" pos:column="26">)<pos:position pos:line="104" pos:column="27"/></operator><call><name><name pos:line="104" pos:column="27">features<pos:position pos:line="104" pos:column="35"/></name><operator pos:line="104" pos:column="35">.<pos:position pos:line="104" pos:column="36"/></operator><name pos:line="104" pos:column="36">helloMessage<pos:position pos:line="104" pos:column="48"/></name><operator pos:line="104" pos:column="48">.<pos:position pos:line="104" pos:column="49"/></operator><name pos:line="104" pos:column="49">length<pos:position pos:line="104" pos:column="55"/></name></name><argument_list pos:line="104" pos:column="55">()<pos:position pos:line="104" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="104" pos:column="58"/></condition><then pos:line="104" pos:column="58">
        <block type="pseudo"><return pos:line="105" pos:column="9">return <expr><literal type="boolean" pos:line="105" pos:column="16">false<pos:position pos:line="105" pos:column="21"/></literal></expr>;<pos:position pos:line="105" pos:column="22"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="107" pos:column="5">debugs<pos:position pos:line="107" pos:column="11"/></name><argument_list pos:line="107" pos:column="11">(<argument><expr><literal type="number" pos:line="107" pos:column="12">83<pos:position pos:line="107" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="107" pos:column="16">5<pos:position pos:line="107" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="19">"OpenSSL SSL struct will be adjusted to mimic client hello data!"<pos:position pos:line="107" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="86"/></expr_stmt>

    <comment type="line" pos:line="109" pos:column="5">//Adjust ssl structure data.</comment>
    <comment type="line" pos:line="110" pos:column="5">// We need to fix the random in SSL struct:</comment>
    <expr_stmt><expr><call><name pos:line="111" pos:column="5">memcpy<pos:position pos:line="111" pos:column="11"/></name><argument_list pos:line="111" pos:column="11">(<argument><expr><name><name pos:line="111" pos:column="12">ssl<pos:position pos:line="111" pos:column="15"/></name><operator pos:line="111" pos:column="15">-&gt;<pos:position pos:line="111" pos:column="20"/></operator><name pos:line="111" pos:column="17">s3<pos:position pos:line="111" pos:column="19"/></name><operator pos:line="111" pos:column="19">-&gt;<pos:position pos:line="111" pos:column="24"/></operator><name pos:line="111" pos:column="21">client_random<pos:position pos:line="111" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="111" pos:column="36">features<pos:position pos:line="111" pos:column="44"/></name><operator pos:line="111" pos:column="44">.<pos:position pos:line="111" pos:column="45"/></operator><name pos:line="111" pos:column="45">client_random<pos:position pos:line="111" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="60">SSL3_RANDOM_SIZE<pos:position pos:line="111" pos:column="76"/></name></expr></argument>)<pos:position pos:line="111" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">memcpy<pos:position pos:line="112" pos:column="11"/></name><argument_list pos:line="112" pos:column="11">(<argument><expr><name><name pos:line="112" pos:column="12">wb<pos:position pos:line="112" pos:column="14"/></name><operator pos:line="112" pos:column="14">-&gt;<pos:position pos:line="112" pos:column="19"/></operator><name pos:line="112" pos:column="16">buf<pos:position pos:line="112" pos:column="19"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="112" pos:column="21">features<pos:position pos:line="112" pos:column="29"/></name><operator pos:line="112" pos:column="29">.<pos:position pos:line="112" pos:column="30"/></operator><name pos:line="112" pos:column="30">helloMessage<pos:position pos:line="112" pos:column="42"/></name><operator pos:line="112" pos:column="42">.<pos:position pos:line="112" pos:column="43"/></operator><name pos:line="112" pos:column="43">rawContent<pos:position pos:line="112" pos:column="53"/></name></name><argument_list pos:line="112" pos:column="53">()<pos:position pos:line="112" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="112" pos:column="57">features<pos:position pos:line="112" pos:column="65"/></name><operator pos:line="112" pos:column="65">.<pos:position pos:line="112" pos:column="66"/></operator><name pos:line="112" pos:column="66">helloMessage<pos:position pos:line="112" pos:column="78"/></name><operator pos:line="112" pos:column="78">.<pos:position pos:line="112" pos:column="79"/></operator><name pos:line="112" pos:column="79">length<pos:position pos:line="112" pos:column="85"/></name></name><argument_list pos:line="112" pos:column="85">()<pos:position pos:line="112" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="112" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="89"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="113" pos:column="5">wb<pos:position pos:line="113" pos:column="7"/></name><operator pos:line="113" pos:column="7">-&gt;<pos:position pos:line="113" pos:column="12"/></operator><name pos:line="113" pos:column="9">left<pos:position pos:line="113" pos:column="13"/></name></name> <operator pos:line="113" pos:column="14">=<pos:position pos:line="113" pos:column="15"/></operator> <call><name><name pos:line="113" pos:column="16">features<pos:position pos:line="113" pos:column="24"/></name><operator pos:line="113" pos:column="24">.<pos:position pos:line="113" pos:column="25"/></operator><name pos:line="113" pos:column="25">helloMessage<pos:position pos:line="113" pos:column="37"/></name><operator pos:line="113" pos:column="37">.<pos:position pos:line="113" pos:column="38"/></operator><name pos:line="113" pos:column="38">length<pos:position pos:line="113" pos:column="44"/></name></name><argument_list pos:line="113" pos:column="44">()<pos:position pos:line="113" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="47"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="115" pos:column="5">size_t<pos:position pos:line="115" pos:column="11"/></name></type> <name pos:line="115" pos:column="12">mainHelloSize<pos:position pos:line="115" pos:column="25"/></name> <init pos:line="115" pos:column="26">= <expr><call><name><name pos:line="115" pos:column="28">features<pos:position pos:line="115" pos:column="36"/></name><operator pos:line="115" pos:column="36">.<pos:position pos:line="115" pos:column="37"/></operator><name pos:line="115" pos:column="37">helloMessage<pos:position pos:line="115" pos:column="49"/></name><operator pos:line="115" pos:column="49">.<pos:position pos:line="115" pos:column="50"/></operator><name pos:line="115" pos:column="50">length<pos:position pos:line="115" pos:column="56"/></name></name><argument_list pos:line="115" pos:column="56">()<pos:position pos:line="115" pos:column="58"/></argument_list></call> <operator pos:line="115" pos:column="59">-<pos:position pos:line="115" pos:column="60"/></operator> <literal type="number" pos:line="115" pos:column="61">5<pos:position pos:line="115" pos:column="62"/></literal></expr></init></decl>;<pos:position pos:line="115" pos:column="63"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="116" pos:column="5">const<pos:position pos:line="116" pos:column="10"/></specifier> <name pos:line="116" pos:column="11">char<pos:position pos:line="116" pos:column="15"/></name> <modifier pos:line="116" pos:column="16">*<pos:position pos:line="116" pos:column="17"/></modifier></type><name pos:line="116" pos:column="17">mainHello<pos:position pos:line="116" pos:column="26"/></name> <init pos:line="116" pos:column="27">= <expr><call><name><name pos:line="116" pos:column="29">features<pos:position pos:line="116" pos:column="37"/></name><operator pos:line="116" pos:column="37">.<pos:position pos:line="116" pos:column="38"/></operator><name pos:line="116" pos:column="38">helloMessage<pos:position pos:line="116" pos:column="50"/></name><operator pos:line="116" pos:column="50">.<pos:position pos:line="116" pos:column="51"/></operator><name pos:line="116" pos:column="51">rawContent<pos:position pos:line="116" pos:column="61"/></name></name><argument_list pos:line="116" pos:column="61">()<pos:position pos:line="116" pos:column="63"/></argument_list></call> <operator pos:line="116" pos:column="64">+<pos:position pos:line="116" pos:column="65"/></operator> <literal type="number" pos:line="116" pos:column="66">5<pos:position pos:line="116" pos:column="67"/></literal></expr></init></decl>;<pos:position pos:line="116" pos:column="68"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="117" pos:column="5">assert<pos:position pos:line="117" pos:column="11"/></name><argument_list pos:line="117" pos:column="11">(<argument><expr><operator pos:line="117" pos:column="12">(<pos:position pos:line="117" pos:column="13"/></operator><name pos:line="117" pos:column="13">size_t<pos:position pos:line="117" pos:column="19"/></name><operator pos:line="117" pos:column="19">)<pos:position pos:line="117" pos:column="20"/></operator><name><name pos:line="117" pos:column="20">ssl<pos:position pos:line="117" pos:column="23"/></name><operator pos:line="117" pos:column="23">-&gt;<pos:position pos:line="117" pos:column="28"/></operator><name pos:line="117" pos:column="25">init_buf<pos:position pos:line="117" pos:column="33"/></name><operator pos:line="117" pos:column="33">-&gt;<pos:position pos:line="117" pos:column="38"/></operator><name pos:line="117" pos:column="35">max<pos:position pos:line="117" pos:column="38"/></name></name> <operator pos:line="117" pos:column="39">&gt;<pos:position pos:line="117" pos:column="43"/></operator> <name pos:line="117" pos:column="41">mainHelloSize<pos:position pos:line="117" pos:column="54"/></name></expr></argument>)<pos:position pos:line="117" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="118" pos:column="5">memcpy<pos:position pos:line="118" pos:column="11"/></name><argument_list pos:line="118" pos:column="11">(<argument><expr><name><name pos:line="118" pos:column="12">ssl<pos:position pos:line="118" pos:column="15"/></name><operator pos:line="118" pos:column="15">-&gt;<pos:position pos:line="118" pos:column="20"/></operator><name pos:line="118" pos:column="17">init_buf<pos:position pos:line="118" pos:column="25"/></name><operator pos:line="118" pos:column="25">-&gt;<pos:position pos:line="118" pos:column="30"/></operator><name pos:line="118" pos:column="27">data<pos:position pos:line="118" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="33">mainHello<pos:position pos:line="118" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="44">mainHelloSize<pos:position pos:line="118" pos:column="57"/></name></expr></argument>)<pos:position pos:line="118" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">debugs<pos:position pos:line="119" pos:column="11"/></name><argument_list pos:line="119" pos:column="11">(<argument><expr><literal type="number" pos:line="119" pos:column="12">83<pos:position pos:line="119" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="119" pos:column="16">5<pos:position pos:line="119" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="19">"Hello Data init and adjustd sizes :"<pos:position pos:line="119" pos:column="56"/></literal> <operator pos:line="119" pos:column="57">&lt;&lt;<pos:position pos:line="119" pos:column="65"/></operator> <name><name pos:line="119" pos:column="60">ssl<pos:position pos:line="119" pos:column="63"/></name><operator pos:line="119" pos:column="63">-&gt;<pos:position pos:line="119" pos:column="68"/></operator><name pos:line="119" pos:column="65">init_num<pos:position pos:line="119" pos:column="73"/></name></name> <operator pos:line="119" pos:column="74">&lt;&lt;<pos:position pos:line="119" pos:column="82"/></operator> <literal type="string" pos:line="119" pos:column="77">" = "<pos:position pos:line="119" pos:column="82"/></literal><operator pos:line="119" pos:column="82">&lt;&lt;<pos:position pos:line="119" pos:column="90"/></operator> <name pos:line="119" pos:column="85">mainHelloSize<pos:position pos:line="119" pos:column="98"/></name></expr></argument>)<pos:position pos:line="119" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="100"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="120" pos:column="5">ssl<pos:position pos:line="120" pos:column="8"/></name><operator pos:line="120" pos:column="8">-&gt;<pos:position pos:line="120" pos:column="13"/></operator><name pos:line="120" pos:column="10">init_num<pos:position pos:line="120" pos:column="18"/></name></name> <operator pos:line="120" pos:column="19">=<pos:position pos:line="120" pos:column="20"/></operator> <name pos:line="120" pos:column="21">mainHelloSize<pos:position pos:line="120" pos:column="34"/></name></expr>;<pos:position pos:line="120" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="121" pos:column="5">ssl<pos:position pos:line="121" pos:column="8"/></name><operator pos:line="121" pos:column="8">-&gt;<pos:position pos:line="121" pos:column="13"/></operator><name pos:line="121" pos:column="10">s3<pos:position pos:line="121" pos:column="12"/></name><operator pos:line="121" pos:column="12">-&gt;<pos:position pos:line="121" pos:column="17"/></operator><name pos:line="121" pos:column="14">wpend_ret<pos:position pos:line="121" pos:column="23"/></name></name> <operator pos:line="121" pos:column="24">=<pos:position pos:line="121" pos:column="25"/></operator> <name pos:line="121" pos:column="26">mainHelloSize<pos:position pos:line="121" pos:column="39"/></name></expr>;<pos:position pos:line="121" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="122" pos:column="5">ssl<pos:position pos:line="122" pos:column="8"/></name><operator pos:line="122" pos:column="8">-&gt;<pos:position pos:line="122" pos:column="13"/></operator><name pos:line="122" pos:column="10">s3<pos:position pos:line="122" pos:column="12"/></name><operator pos:line="122" pos:column="12">-&gt;<pos:position pos:line="122" pos:column="17"/></operator><name pos:line="122" pos:column="14">wpend_tot<pos:position pos:line="122" pos:column="23"/></name></name> <operator pos:line="122" pos:column="24">=<pos:position pos:line="122" pos:column="25"/></operator> <name pos:line="122" pos:column="26">mainHelloSize<pos:position pos:line="122" pos:column="39"/></name></expr>;<pos:position pos:line="122" pos:column="40"/></expr_stmt>
    <return pos:line="123" pos:column="5">return <expr><literal type="boolean" pos:line="123" pos:column="12">true<pos:position pos:line="123" pos:column="16"/></literal></expr>;<pos:position pos:line="123" pos:column="17"/></return>
<cpp:else pos:line="124" pos:column="1">#<cpp:directive pos:line="124" pos:column="2">else<pos:position pos:line="124" pos:column="6"/></cpp:directive></cpp:else>
    <return pos:line="125" pos:column="5">return <expr><literal type="boolean" pos:line="125" pos:column="12">false<pos:position pos:line="125" pos:column="17"/></literal></expr>;<pos:position pos:line="125" pos:column="18"/></return>
<cpp:endif pos:line="126" pos:column="1">#<cpp:directive pos:line="126" pos:column="2">endif<pos:position pos:line="126" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="127" pos:column="2"/></block></function></unit>
