<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2127_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ServerStateData<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">sentRequestBody<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">(<parameter><decl><type><specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <name pos:line="2" pos:column="40">CommIoCbParams<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">&amp;<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="56">io<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">11<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"sentRequestBody: FD "<pos:position pos:line="4" pos:column="41"/></literal> <operator pos:line="4" pos:column="42">&lt;&lt;<pos:position pos:line="4" pos:column="50"/></operator> <name><name pos:line="4" pos:column="45">io<pos:position pos:line="4" pos:column="47"/></name><operator pos:line="4" pos:column="47">.<pos:position pos:line="4" pos:column="48"/></operator><name pos:line="4" pos:column="48">fd<pos:position pos:line="4" pos:column="50"/></name></name> <operator pos:line="4" pos:column="51">&lt;&lt;<pos:position pos:line="4" pos:column="59"/></operator> <literal type="string" pos:line="4" pos:column="54">": size "<pos:position pos:line="4" pos:column="63"/></literal> <operator pos:line="4" pos:column="64">&lt;&lt;<pos:position pos:line="4" pos:column="72"/></operator> <name><name pos:line="4" pos:column="67">io<pos:position pos:line="4" pos:column="69"/></name><operator pos:line="4" pos:column="69">.<pos:position pos:line="4" pos:column="70"/></operator><name pos:line="4" pos:column="70">size<pos:position pos:line="4" pos:column="74"/></name></name> <operator pos:line="4" pos:column="75">&lt;&lt;<pos:position pos:line="4" pos:column="83"/></operator> <literal type="string" pos:line="4" pos:column="78">": errflag "<pos:position pos:line="4" pos:column="90"/></literal> <operator pos:line="4" pos:column="91">&lt;&lt;<pos:position pos:line="4" pos:column="99"/></operator> <name><name pos:line="4" pos:column="94">io<pos:position pos:line="4" pos:column="96"/></name><operator pos:line="4" pos:column="96">.<pos:position pos:line="4" pos:column="97"/></operator><name pos:line="4" pos:column="97">flag<pos:position pos:line="4" pos:column="101"/></name></name> <operator pos:line="4" pos:column="102">&lt;&lt;<pos:position pos:line="4" pos:column="110"/></operator> <literal type="string" pos:line="4" pos:column="105">"."<pos:position pos:line="4" pos:column="108"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="110"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">32<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="5" pos:column="15">3<pos:position pos:line="5" pos:column="16"/></literal></expr></argument>,<argument><expr><name pos:line="5" pos:column="17">HERE<pos:position pos:line="5" pos:column="21"/></name> <operator pos:line="5" pos:column="22">&lt;&lt;<pos:position pos:line="5" pos:column="30"/></operator> <literal type="string" pos:line="5" pos:column="25">"sentRequestBody called"<pos:position pos:line="5" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><name pos:line="7" pos:column="5">requestSender<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">=<pos:position pos:line="7" pos:column="20"/></operator> <name pos:line="7" pos:column="21">NULL<pos:position pos:line="7" pos:column="25"/></name></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">io<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">.<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="12">size<pos:position pos:line="9" pos:column="16"/></name></name> <operator pos:line="9" pos:column="17">&gt;<pos:position pos:line="9" pos:column="21"/></operator> <literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21"> <block pos:line="9" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">fd_bytes<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><name><name pos:line="10" pos:column="18">io<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">.<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">fd<pos:position pos:line="10" pos:column="23"/></name></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="25">io<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">.<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">size<pos:position pos:line="10" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">FD_WRITE<pos:position pos:line="10" pos:column="42"/></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">kb_incr<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><operator pos:line="11" pos:column="17">&amp;<pos:position pos:line="11" pos:column="22"/></operator><name><name pos:line="11" pos:column="18">statCounter<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">.<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">server<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">.<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">all<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">.<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="41">kbytes_out<pos:position pos:line="11" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="53">io<pos:position pos:line="11" pos:column="55"/></name><operator pos:line="11" pos:column="55">.<pos:position pos:line="11" pos:column="56"/></operator><name pos:line="11" pos:column="56">size<pos:position pos:line="11" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
        <comment type="line" pos:line="12" pos:column="9">// kids should increment their counters</comment>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">io<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">.<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">flag<pos:position pos:line="15" pos:column="16"/></name></name> <operator pos:line="15" pos:column="17">==<pos:position pos:line="15" pos:column="19"/></operator> <name pos:line="15" pos:column="20">COMM_ERR_CLOSING<pos:position pos:line="15" pos:column="36"/></name></expr>)<pos:position pos:line="15" pos:column="37"/></condition><then pos:line="15" pos:column="37">
        <block type="pseudo"><return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">requestBodySource<pos:position pos:line="18" pos:column="27"/></name></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28"> <block pos:line="18" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">9<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="19" pos:column="18">3<pos:position pos:line="19" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="21">HERE<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">&lt;&lt;<pos:position pos:line="19" pos:column="34"/></operator> <literal type="string" pos:line="19" pos:column="29">"detected while-we-were-sending abort"<pos:position pos:line="19" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="69"/></expr_stmt>
        <return pos:line="20" pos:column="9">return;<pos:position pos:line="20" pos:column="16"/></return> <comment type="line" pos:line="20" pos:column="17">// do nothing;</comment>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name><name pos:line="23" pos:column="9">io<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">.<pos:position pos:line="23" pos:column="12"/></operator><name pos:line="23" pos:column="12">flag<pos:position pos:line="23" pos:column="16"/></name></name></expr>)<pos:position pos:line="23" pos:column="17"/></condition><then pos:line="23" pos:column="17"> <block pos:line="23" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">11<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="20">1<pos:position pos:line="24" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="23">"sentRequestBody error: FD "<pos:position pos:line="24" pos:column="51"/></literal> <operator pos:line="24" pos:column="52">&lt;&lt;<pos:position pos:line="24" pos:column="60"/></operator> <name><name pos:line="24" pos:column="55">io<pos:position pos:line="24" pos:column="57"/></name><operator pos:line="24" pos:column="57">.<pos:position pos:line="24" pos:column="58"/></operator><name pos:line="24" pos:column="58">fd<pos:position pos:line="24" pos:column="60"/></name></name> <operator pos:line="24" pos:column="61">&lt;&lt;<pos:position pos:line="24" pos:column="69"/></operator> <literal type="string" pos:line="24" pos:column="64">": "<pos:position pos:line="24" pos:column="68"/></literal> <operator pos:line="24" pos:column="69">&lt;&lt;<pos:position pos:line="24" pos:column="77"/></operator> <call><name pos:line="24" pos:column="72">xstrerr<pos:position pos:line="24" pos:column="79"/></name><argument_list pos:line="24" pos:column="79">(<argument><expr><name pos:line="24" pos:column="80">errno<pos:position pos:line="24" pos:column="85"/></name></expr></argument>)<pos:position pos:line="24" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="88"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">ErrorState<pos:position pos:line="25" pos:column="19"/></name> <modifier pos:line="25" pos:column="20">*<pos:position pos:line="25" pos:column="21"/></modifier></type><name pos:line="25" pos:column="21">err<pos:position pos:line="25" pos:column="24"/></name></decl>;<pos:position pos:line="25" pos:column="25"/></decl_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">err<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <call><name pos:line="26" pos:column="15">errorCon<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name pos:line="26" pos:column="24">ERR_WRITE_ERROR<pos:position pos:line="26" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="41">HTTP_BAD_GATEWAY<pos:position pos:line="26" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="59">fwd<pos:position pos:line="26" pos:column="62"/></name><operator pos:line="26" pos:column="62">-&gt;<pos:position pos:line="26" pos:column="67"/></operator><name pos:line="26" pos:column="64">request<pos:position pos:line="26" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">err<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">xerrno<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">errno<pos:position pos:line="27" pos:column="28"/></name></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="28" pos:column="9">fwd<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">-&gt;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="14">fail<pos:position pos:line="28" pos:column="18"/></name></name><argument_list pos:line="28" pos:column="18">(<argument><expr><name pos:line="28" pos:column="19">err<pos:position pos:line="28" pos:column="22"/></name></expr></argument>)<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">abortTransaction<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><literal type="string" pos:line="29" pos:column="26">"I/O error while sending request body"<pos:position pos:line="29" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="66"/></expr_stmt>
        <return pos:line="30" pos:column="9">return;<pos:position pos:line="30" pos:column="16"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><call><name pos:line="33" pos:column="9">EBIT_TEST<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><name><name pos:line="33" pos:column="19">entry<pos:position pos:line="33" pos:column="24"/></name><operator pos:line="33" pos:column="24">-&gt;<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="26">flags<pos:position pos:line="33" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="33">ENTRY_ABORTED<pos:position pos:line="33" pos:column="46"/></name></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="48"/></condition><then pos:line="33" pos:column="48"> <block pos:line="33" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">abortTransaction<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><literal type="string" pos:line="34" pos:column="26">"store entry aborted while sending request body"<pos:position pos:line="34" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="76"/></expr_stmt>
        <return pos:line="35" pos:column="9">return;<pos:position pos:line="35" pos:column="16"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><call><name><name pos:line="38" pos:column="9">requestBodySource<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">-&gt;<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="28">exhausted<pos:position pos:line="38" pos:column="37"/></name></name><argument_list pos:line="38" pos:column="37">()<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="40"/></condition><then pos:line="38" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="9">doneSendingRequestBody<pos:position pos:line="39" pos:column="31"/></name><argument_list pos:line="39" pos:column="31">()<pos:position pos:line="39" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt></block></then>
    <else pos:line="40" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="9">sendMoreRequestBody<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">()<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt></block></else></if>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
