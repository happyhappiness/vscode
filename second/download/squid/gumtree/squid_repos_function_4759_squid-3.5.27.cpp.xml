<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4759_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLIP<pos:position pos:line="2" pos:column="6"/></name><operator pos:line="2" pos:column="6">::<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">parse<pos:position pos:line="2" pos:column="13"/></name></name><parameter_list pos:line="2" pos:column="13">()<pos:position pos:line="2" pos:column="15"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">data<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">==<pos:position pos:line="4" pos:column="16"/></operator> <name pos:line="4" pos:column="17">NULL<pos:position pos:line="4" pos:column="21"/></name></expr>)<pos:position pos:line="4" pos:column="22"/></condition><then pos:line="4" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><name pos:line="5" pos:column="9">data<pos:position pos:line="5" pos:column="13"/></name> <operator pos:line="5" pos:column="14">=<pos:position pos:line="5" pos:column="15"/></operator> <operator pos:line="5" pos:column="16">new<pos:position pos:line="5" pos:column="19"/></operator> <call><name pos:line="5" pos:column="20">IPSplay<pos:position pos:line="5" pos:column="27"/></name><argument_list pos:line="5" pos:column="27">()<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="30"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="7" pos:column="5">flags<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">.<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">parseFlags<pos:position pos:line="7" pos:column="21"/></name></name><argument_list pos:line="7" pos:column="21">()<pos:position pos:line="7" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>

    <while pos:line="9" pos:column="5">while <condition pos:line="9" pos:column="11">(<decl><type><name pos:line="9" pos:column="12">char<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">t<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><call><name pos:line="9" pos:column="22">strtokFile<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">()<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr></init></decl>)<pos:position pos:line="9" pos:column="35"/></condition> <block pos:line="9" pos:column="36">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">acl_ip_data<pos:position pos:line="10" pos:column="20"/></name> <modifier pos:line="10" pos:column="21">*<pos:position pos:line="10" pos:column="22"/></modifier></type><name pos:line="10" pos:column="22">q<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><call><name><name pos:line="10" pos:column="26">acl_ip_data<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">::<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="39">FactoryParse<pos:position pos:line="10" pos:column="51"/></name></name><argument_list pos:line="10" pos:column="51">(<argument><expr><name pos:line="10" pos:column="52">t<pos:position pos:line="10" pos:column="53"/></name></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="55"/></decl_stmt>

        <while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><name pos:line="12" pos:column="16">q<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">!=<pos:position pos:line="12" pos:column="20"/></operator> <name pos:line="12" pos:column="21">NULL<pos:position pos:line="12" pos:column="25"/></name></expr>)<pos:position pos:line="12" pos:column="26"/></condition> <block pos:line="12" pos:column="27">{
            <comment type="block" pos:line="13" pos:column="13">/* pop each result off the list and add it to the data tree individually */</comment>
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">acl_ip_data<pos:position pos:line="14" pos:column="24"/></name> <modifier pos:line="14" pos:column="25">*<pos:position pos:line="14" pos:column="26"/></modifier></type><name pos:line="14" pos:column="26">next_node<pos:position pos:line="14" pos:column="35"/></name> <init pos:line="14" pos:column="36">= <expr><name><name pos:line="14" pos:column="38">q<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">-&gt;<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="41">next<pos:position pos:line="14" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="46"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="15" pos:column="13">q<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">next<pos:position pos:line="15" pos:column="20"/></name></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">NULL<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
            <if pos:line="16" pos:column="13">if <condition pos:line="16" pos:column="16">(<expr><operator pos:line="16" pos:column="17">!<pos:position pos:line="16" pos:column="18"/></operator><call><name><name pos:line="16" pos:column="18">data<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">-&gt;<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="24">find<pos:position pos:line="16" pos:column="28"/></name></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">q<pos:position pos:line="16" pos:column="30"/></name></expr></argument>,<argument><expr><name><name pos:line="16" pos:column="31">acl_ip_data<pos:position pos:line="16" pos:column="42"/></name><operator pos:line="16" pos:column="42">::<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="44">NetworkCompare<pos:position pos:line="16" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="60"/></condition><then pos:line="16" pos:column="60">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="17" pos:column="17">data<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">-&gt;<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="23">insert<pos:position pos:line="17" pos:column="29"/></name></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">q<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="33">acl_ip_data<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">::<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="46">NetworkCompare<pos:position pos:line="17" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="62"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="18" pos:column="13">q<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">next_node<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block></while>
    }<pos:position pos:line="20" pos:column="6"/></block></while>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
