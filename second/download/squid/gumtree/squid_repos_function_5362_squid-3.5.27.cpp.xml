<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5362_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Client<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">startAdaptation<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name><name pos:line="2" pos:column="31">Adaptation<pos:position pos:line="2" pos:column="41"/></name><operator pos:line="2" pos:column="41">::<pos:position pos:line="2" pos:column="43"/></operator><name pos:line="2" pos:column="43">ServiceGroupPointer<pos:position pos:line="2" pos:column="62"/></name></name> <modifier pos:line="2" pos:column="63">&amp;<pos:position pos:line="2" pos:column="68"/></modifier></type><name pos:line="2" pos:column="64">group<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="71">HttpRequest<pos:position pos:line="2" pos:column="82"/></name> <modifier pos:line="2" pos:column="83">*<pos:position pos:line="2" pos:column="84"/></modifier></type><name pos:line="2" pos:column="84">cause<pos:position pos:line="2" pos:column="89"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="90"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">11<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"Client::startAdaptation() called"<pos:position pos:line="4" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="55"/></expr_stmt>
    <comment type="line" pos:line="5" pos:column="5">// check whether we should be sending a body as well</comment>
    <comment type="line" pos:line="6" pos:column="5">// start body pipe to feed ICAP transaction if needed</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><operator pos:line="7" pos:column="12">!<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">virginBodyDestination<pos:position pos:line="7" pos:column="34"/></name></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">HttpReply<pos:position pos:line="8" pos:column="14"/></name> <modifier pos:line="8" pos:column="15">*<pos:position pos:line="8" pos:column="16"/></modifier></type><name pos:line="8" pos:column="16">vrep<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><call><name pos:line="8" pos:column="23">virginReply<pos:position pos:line="8" pos:column="34"/></name><argument_list pos:line="8" pos:column="34">()<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><operator pos:line="9" pos:column="12">!<pos:position pos:line="9" pos:column="13"/></operator><name><name pos:line="9" pos:column="13">vrep<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">-&gt;<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="19">body_pipe<pos:position pos:line="9" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int64_t<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">size<pos:position pos:line="10" pos:column="17"/></name> <init pos:line="10" pos:column="18">= <expr><literal type="number" pos:line="10" pos:column="20">0<pos:position pos:line="10" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name><name pos:line="11" pos:column="9">vrep<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">-&gt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">expectingBody<pos:position pos:line="11" pos:column="28"/></name></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name><name pos:line="11" pos:column="29">cause<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">-&gt;<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="36">method<pos:position pos:line="11" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">size<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call> <operator pos:line="11" pos:column="50">&amp;&amp;<pos:position pos:line="11" pos:column="60"/></operator> <name pos:line="11" pos:column="53">size<pos:position pos:line="11" pos:column="57"/></name></expr>)<pos:position pos:line="11" pos:column="58"/></condition><then pos:line="11" pos:column="58"> <block pos:line="11" pos:column="59">{
        <expr_stmt><expr><name pos:line="12" pos:column="9">virginBodyDestination<pos:position pos:line="12" pos:column="30"/></name> <operator pos:line="12" pos:column="31">=<pos:position pos:line="12" pos:column="32"/></operator> <operator pos:line="12" pos:column="33">new<pos:position pos:line="12" pos:column="36"/></operator> <call><name pos:line="12" pos:column="37">BodyPipe<pos:position pos:line="12" pos:column="45"/></name><argument_list pos:line="12" pos:column="45">(<argument><expr><name pos:line="12" pos:column="46">this<pos:position pos:line="12" pos:column="50"/></name></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="13" pos:column="9">vrep<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">body_pipe<pos:position pos:line="13" pos:column="24"/></name></name> <operator pos:line="13" pos:column="25">=<pos:position pos:line="13" pos:column="26"/></operator> <name pos:line="13" pos:column="27">virginBodyDestination<pos:position pos:line="13" pos:column="48"/></name></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">93<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="20">6<pos:position pos:line="14" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="23">HERE<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">&lt;&lt;<pos:position pos:line="14" pos:column="36"/></operator> <literal type="string" pos:line="14" pos:column="31">"will send virgin reply body to "<pos:position pos:line="14" pos:column="64"/></literal> <operator pos:line="14" pos:column="65">&lt;&lt;<pos:position pos:line="14" pos:column="73"/></operator>
               <name pos:line="15" pos:column="16">virginBodyDestination<pos:position pos:line="15" pos:column="37"/></name> <operator pos:line="15" pos:column="38">&lt;&lt;<pos:position pos:line="15" pos:column="46"/></operator> <literal type="string" pos:line="15" pos:column="41">"; size: "<pos:position pos:line="15" pos:column="51"/></literal> <operator pos:line="15" pos:column="52">&lt;&lt;<pos:position pos:line="15" pos:column="60"/></operator> <name pos:line="15" pos:column="55">size<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="61"/></expr_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">size<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">&gt;<pos:position pos:line="16" pos:column="22"/></operator> <literal type="number" pos:line="16" pos:column="20">0<pos:position pos:line="16" pos:column="21"/></literal></expr>)<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="17" pos:column="13">virginBodyDestination<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">-&gt;<pos:position pos:line="17" pos:column="39"/></operator><name pos:line="17" pos:column="36">setBodySize<pos:position pos:line="17" pos:column="47"/></name></name><argument_list pos:line="17" pos:column="47">(<argument><expr><name pos:line="17" pos:column="48">size<pos:position pos:line="17" pos:column="52"/></name></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="54"/></expr_stmt></block></then></if>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="20" pos:column="5">adaptedHeadSource<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <call><name pos:line="20" pos:column="25">initiateAdaptation<pos:position pos:line="20" pos:column="43"/></name><argument_list pos:line="20" pos:column="43">(
                            <argument><expr><operator pos:line="21" pos:column="29">new<pos:position pos:line="21" pos:column="32"/></operator> <call><name><name pos:line="21" pos:column="33">Adaptation<pos:position pos:line="21" pos:column="43"/></name><operator pos:line="21" pos:column="43">::<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="45">Iterator<pos:position pos:line="21" pos:column="53"/></name></name><argument_list pos:line="21" pos:column="53">(<argument><expr><name pos:line="21" pos:column="54">vrep<pos:position pos:line="21" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="60">cause<pos:position pos:line="21" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="67">fwd<pos:position pos:line="21" pos:column="70"/></name><operator pos:line="21" pos:column="70">-&gt;<pos:position pos:line="21" pos:column="75"/></operator><name pos:line="21" pos:column="72">al<pos:position pos:line="21" pos:column="74"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="76">group<pos:position pos:line="21" pos:column="81"/></name></expr></argument>)<pos:position pos:line="21" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="84"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">startedAdaptation<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <call><name pos:line="22" pos:column="25">initiated<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(<argument><expr><name pos:line="22" pos:column="35">adaptedHeadSource<pos:position pos:line="22" pos:column="52"/></name></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">Must<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">startedAdaptation<pos:position pos:line="23" pos:column="27"/></name></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
