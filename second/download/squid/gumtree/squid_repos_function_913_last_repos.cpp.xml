<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_913_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">dump_on_unsupported_protocol<pos:position pos:line="2" pos:column="29"/></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name pos:line="2" pos:column="30">StoreEntry<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">entry<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="49">const<pos:position pos:line="2" pos:column="54"/></specifier> <name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">name<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">acl_access<pos:position pos:line="2" pos:column="77"/></name> <modifier pos:line="2" pos:column="78">*<pos:position pos:line="2" pos:column="79"/></modifier></type><name pos:line="2" pos:column="79">access<pos:position pos:line="2" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="86"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><specifier pos:line="4" pos:column="12">const<pos:position pos:line="4" pos:column="17"/></specifier> <name><name pos:line="4" pos:column="18">std<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">::<pos:position pos:line="4" pos:column="23"/></operator><name><name pos:line="4" pos:column="23">vector<pos:position pos:line="4" pos:column="29"/></name><argument_list type="generic" pos:line="4" pos:column="29">&lt;<argument><expr><specifier pos:line="4" pos:column="30">const<pos:position pos:line="4" pos:column="35"/></specifier> <name pos:line="4" pos:column="36">char<pos:position pos:line="4" pos:column="40"/></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier></expr></argument>&gt;<pos:position pos:line="4" pos:column="46"/></argument_list></name></name></type> <name pos:line="4" pos:column="44">onErrorTunnelMode<pos:position pos:line="4" pos:column="61"/></name> <init pos:line="4" pos:column="62">= <expr><block pos:line="4" pos:column="64">{
        <expr><literal type="string" pos:line="5" pos:column="9">"none"<pos:position pos:line="5" pos:column="15"/></literal></expr>,
        <expr><literal type="string" pos:line="6" pos:column="9">"tunnel"<pos:position pos:line="6" pos:column="17"/></literal></expr>,
        <expr><literal type="string" pos:line="7" pos:column="9">"respond"<pos:position pos:line="7" pos:column="18"/></literal></expr>
    }<pos:position pos:line="8" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="7"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">access<pos:position pos:line="9" pos:column="15"/></name></expr>)<pos:position pos:line="9" pos:column="16"/></condition><then pos:line="9" pos:column="16"> <block pos:line="9" pos:column="17">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">SBufList<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">lines<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><call><name><name pos:line="10" pos:column="26">access<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">treeDump<pos:position pos:line="10" pos:column="42"/></name></name><argument_list pos:line="10" pos:column="42">(<argument><expr><name pos:line="10" pos:column="43">name<pos:position pos:line="10" pos:column="47"/></name></expr></argument>, <argument><expr><lambda><capture pos:line="10" pos:column="49">[]<pos:position pos:line="10" pos:column="51"/></capture><parameter_list pos:line="10" pos:column="51">(<parameter><decl><type><specifier pos:line="10" pos:column="52">const<pos:position pos:line="10" pos:column="57"/></specifier> <name pos:line="10" pos:column="58">allow_t<pos:position pos:line="10" pos:column="65"/></name> <modifier pos:line="10" pos:column="66">&amp;<pos:position pos:line="10" pos:column="71"/></modifier></type><name pos:line="10" pos:column="67">action<pos:position pos:line="10" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="10" pos:column="74"/></parameter_list> <block pos:line="10" pos:column="75">{
            <return pos:line="11" pos:column="13">return <expr><call><name><name pos:line="11" pos:column="20">onErrorTunnelMode<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">.<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="38">at<pos:position pos:line="11" pos:column="40"/></name></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name><name pos:line="11" pos:column="41">action<pos:position pos:line="11" pos:column="47"/></name><operator pos:line="11" pos:column="47">.<pos:position pos:line="11" pos:column="48"/></operator><name pos:line="11" pos:column="48">kind<pos:position pos:line="11" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="54"/></return>
        }<pos:position pos:line="12" pos:column="10"/></block></lambda></expr></argument>)<pos:position pos:line="12" pos:column="11"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="12"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">dump_SBufList<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">entry<pos:position pos:line="13" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="30">lines<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
