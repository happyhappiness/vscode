<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4829_squid-3.4.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">StoreIOState<pos:position pos:line="1" pos:column="13"/></name><operator pos:line="1" pos:column="13">::<pos:position pos:line="1" pos:column="15"/></operator><name pos:line="1" pos:column="15">Pointer<pos:position pos:line="1" pos:column="22"/></name></name></type>
<name><name pos:line="2" pos:column="1">CossSwapDir<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">openStoreIO<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">StoreEntry<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">&amp;<pos:position pos:line="2" pos:column="42"/></modifier></type> <name pos:line="2" pos:column="39">e<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="42">StoreIOState<pos:position pos:line="2" pos:column="54"/></name><operator pos:line="2" pos:column="54">::<pos:position pos:line="2" pos:column="56"/></operator><name pos:line="2" pos:column="56">STFNCB<pos:position pos:line="2" pos:column="62"/></name></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type> <name pos:line="2" pos:column="65">file_callback<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>,
                         <parameter><decl><type><name><name pos:line="3" pos:column="26">StoreIOState<pos:position pos:line="3" pos:column="38"/></name><operator pos:line="3" pos:column="38">::<pos:position pos:line="3" pos:column="40"/></operator><name pos:line="3" pos:column="40">STIOCB<pos:position pos:line="3" pos:column="46"/></name></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type> <name pos:line="3" pos:column="49">callback<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="59">void<pos:position pos:line="3" pos:column="63"/></name> <modifier pos:line="3" pos:column="64">*<pos:position pos:line="3" pos:column="65"/></modifier></type><name pos:line="3" pos:column="65">callback_data<pos:position pos:line="3" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="79"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">p<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">CossState<pos:position pos:line="6" pos:column="14"/></name> <modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">cstate<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">sfileno<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">f<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><name><name pos:line="7" pos:column="17">e<pos:position pos:line="7" pos:column="18"/></name><operator pos:line="7" pos:column="18">.<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="19">swap_filen<pos:position pos:line="7" pos:column="29"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">79<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">3<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="19">"storeCossOpen: offset "<pos:position pos:line="9" pos:column="43"/></literal> <operator pos:line="9" pos:column="44">&lt;&lt;<pos:position pos:line="9" pos:column="52"/></operator> <name pos:line="9" pos:column="47">f<pos:position pos:line="9" pos:column="48"/></name></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="10" pos:column="5">++<pos:position pos:line="10" pos:column="7"/></operator> <call><name><name pos:line="10" pos:column="8">StoreFScoss<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">::<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">GetInstance<pos:position pos:line="10" pos:column="32"/></name></name><argument_list pos:line="10" pos:column="32">()<pos:position pos:line="10" pos:column="34"/></argument_list></call><operator pos:line="10" pos:column="34">.<pos:position pos:line="10" pos:column="35"/></operator><name><name pos:line="10" pos:column="35">stats<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">.<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="41">open<pos:position pos:line="10" pos:column="45"/></name><operator pos:line="10" pos:column="45">.<pos:position pos:line="10" pos:column="46"/></operator><name pos:line="10" pos:column="46">ops<pos:position pos:line="10" pos:column="49"/></name></name></expr>;<pos:position pos:line="10" pos:column="50"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">StoreIOState<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">::<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">Pointer<pos:position pos:line="12" pos:column="26"/></name></name></type> <name pos:line="12" pos:column="27">sio<pos:position pos:line="12" pos:column="30"/></name> <init pos:line="12" pos:column="31">= <expr><operator pos:line="12" pos:column="33">new<pos:position pos:line="12" pos:column="36"/></operator> <call><name pos:line="12" pos:column="37">CossState<pos:position pos:line="12" pos:column="46"/></name> <argument_list pos:line="12" pos:column="47">(<argument><expr><name pos:line="12" pos:column="48">this<pos:position pos:line="12" pos:column="52"/></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="54"/></decl_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">cstate<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <cast type="dynamic" pos:line="13" pos:column="14">dynamic_cast<argument_list type="generic" pos:line="13" pos:column="26">&lt;<argument><expr><name pos:line="13" pos:column="27">CossState<pos:position pos:line="13" pos:column="36"/></name> <operator pos:line="13" pos:column="37">*<pos:position pos:line="13" pos:column="38"/></operator></expr></argument>&gt;<pos:position pos:line="13" pos:column="42"/></argument_list><argument_list pos:line="13" pos:column="39">(<argument><expr><call><name><name pos:line="13" pos:column="40">sio<pos:position pos:line="13" pos:column="43"/></name><operator pos:line="13" pos:column="43">.<pos:position pos:line="13" pos:column="44"/></operator><name pos:line="13" pos:column="44">getRaw<pos:position pos:line="13" pos:column="50"/></name></name><argument_list pos:line="13" pos:column="50">()<pos:position pos:line="13" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></cast></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="15" pos:column="5">sio<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">swap_filen<pos:position pos:line="15" pos:column="20"/></name></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">f<pos:position pos:line="15" pos:column="24"/></name></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">sio<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">-&gt;<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="10">swap_dirn<pos:position pos:line="16" pos:column="19"/></name></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">index<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">sio<pos:position pos:line="17" pos:column="8"/></name><operator pos:line="17" pos:column="8">-&gt;<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="10">offset_<pos:position pos:line="17" pos:column="17"/></name></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <literal type="number" pos:line="17" pos:column="20">0<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">sio<pos:position pos:line="18" pos:column="8"/></name><operator pos:line="18" pos:column="8">-&gt;<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="10">mode<pos:position pos:line="18" pos:column="14"/></name></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">O_RDONLY<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">|<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="28">O_BINARY<pos:position pos:line="18" pos:column="36"/></name></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">sio<pos:position pos:line="19" pos:column="8"/></name><operator pos:line="19" pos:column="8">-&gt;<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="10">callback<pos:position pos:line="19" pos:column="18"/></name></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">callback<pos:position pos:line="19" pos:column="29"/></name></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">sio<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">-&gt;<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="10">file_callback<pos:position pos:line="20" pos:column="23"/></name></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <name pos:line="20" pos:column="26">file_callback<pos:position pos:line="20" pos:column="39"/></name></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">sio<pos:position pos:line="21" pos:column="8"/></name><operator pos:line="21" pos:column="8">-&gt;<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="10">callback_data<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <call><name pos:line="21" pos:column="26">cbdataReference<pos:position pos:line="21" pos:column="41"/></name><argument_list pos:line="21" pos:column="41">(<argument><expr><name pos:line="21" pos:column="42">callback_data<pos:position pos:line="21" pos:column="55"/></name></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">cstate<pos:position pos:line="22" pos:column="11"/></name><operator pos:line="22" pos:column="11">-&gt;<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="13">st_size<pos:position pos:line="22" pos:column="20"/></name></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <name><name pos:line="22" pos:column="23">e<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">.<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="25">swap_file_sz<pos:position pos:line="22" pos:column="37"/></name></name></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">sio<pos:position pos:line="23" pos:column="8"/></name><operator pos:line="23" pos:column="8">-&gt;<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="10">e<pos:position pos:line="23" pos:column="11"/></name></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <operator pos:line="23" pos:column="14">&amp;<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="15">e<pos:position pos:line="23" pos:column="16"/></name></expr>;<pos:position pos:line="23" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="25" pos:column="5">cstate<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">flags<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">.<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="19">writing<pos:position pos:line="25" pos:column="26"/></name></name> <operator pos:line="25" pos:column="27">=<pos:position pos:line="25" pos:column="28"/></operator> <literal type="boolean" pos:line="25" pos:column="29">false<pos:position pos:line="25" pos:column="34"/></literal></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">cstate<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">-&gt;<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="13">flags<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">.<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">reading<pos:position pos:line="26" pos:column="26"/></name></name> <operator pos:line="26" pos:column="27">=<pos:position pos:line="26" pos:column="28"/></operator> <literal type="boolean" pos:line="26" pos:column="29">false<pos:position pos:line="26" pos:column="34"/></literal></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">cstate<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">-&gt;<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="13">readbuffer<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="26">NULL<pos:position pos:line="27" pos:column="30"/></name></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">cstate<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">-&gt;<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="13">reqdiskoffset<pos:position pos:line="28" pos:column="26"/></name></name> <operator pos:line="28" pos:column="27">=<pos:position pos:line="28" pos:column="28"/></operator> <operator pos:line="28" pos:column="29">-<pos:position pos:line="28" pos:column="30"/></operator><literal type="number" pos:line="28" pos:column="30">1<pos:position pos:line="28" pos:column="31"/></literal></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">p<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <call><name pos:line="29" pos:column="9">storeCossMemPointerFromDiskOffset<pos:position pos:line="29" pos:column="42"/></name><argument_list pos:line="29" pos:column="42">(<argument><expr><call><name pos:line="29" pos:column="43">storeCossFilenoToDiskOffset<pos:position pos:line="29" pos:column="70"/></name><argument_list pos:line="29" pos:column="70">(<argument><expr><name pos:line="29" pos:column="71">f<pos:position pos:line="29" pos:column="72"/></name></expr></argument>)<pos:position pos:line="29" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="29" pos:column="75">NULL<pos:position pos:line="29" pos:column="79"/></name></expr></argument>)<pos:position pos:line="29" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="81"/></expr_stmt>
    <comment type="block" pos:line="30" pos:column="5">/* make local copy so we don't have to lock membuf */</comment>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">p<pos:position pos:line="32" pos:column="10"/></name></expr>)<pos:position pos:line="32" pos:column="11"/></condition><then pos:line="32" pos:column="11"> <block pos:line="32" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="33" pos:column="9">cstate<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">-&gt;<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="17">readbuffer<pos:position pos:line="33" pos:column="27"/></name></name> <operator pos:line="33" pos:column="28">=<pos:position pos:line="33" pos:column="29"/></operator> <operator pos:line="33" pos:column="30">(<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">char<pos:position pos:line="33" pos:column="35"/></name> <operator pos:line="33" pos:column="36">*<pos:position pos:line="33" pos:column="37"/></operator><operator pos:line="33" pos:column="37">)<pos:position pos:line="33" pos:column="38"/></operator><call><name pos:line="33" pos:column="38">xmalloc<pos:position pos:line="33" pos:column="45"/></name><argument_list pos:line="33" pos:column="45">(<argument><expr><name><name pos:line="33" pos:column="46">cstate<pos:position pos:line="33" pos:column="52"/></name><operator pos:line="33" pos:column="52">-&gt;<pos:position pos:line="33" pos:column="57"/></operator><name pos:line="33" pos:column="54">st_size<pos:position pos:line="33" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">memcpy<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><name><name pos:line="34" pos:column="16">cstate<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">-&gt;<pos:position pos:line="34" pos:column="27"/></operator><name pos:line="34" pos:column="24">readbuffer<pos:position pos:line="34" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="36">p<pos:position pos:line="34" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="39">cstate<pos:position pos:line="34" pos:column="45"/></name><operator pos:line="34" pos:column="45">-&gt;<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="47">st_size<pos:position pos:line="34" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="35" pos:column="9">++<pos:position pos:line="35" pos:column="11"/></operator> <call><name><name pos:line="35" pos:column="12">StoreFScoss<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">::<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="25">GetInstance<pos:position pos:line="35" pos:column="36"/></name></name><argument_list pos:line="35" pos:column="36">()<pos:position pos:line="35" pos:column="38"/></argument_list></call><operator pos:line="35" pos:column="38">.<pos:position pos:line="35" pos:column="39"/></operator><name><name pos:line="35" pos:column="39">stats<pos:position pos:line="35" pos:column="44"/></name><operator pos:line="35" pos:column="44">.<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="45">open_mem_hits<pos:position pos:line="35" pos:column="58"/></name></name></expr>;<pos:position pos:line="35" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then> <else pos:line="36" pos:column="7">else <block pos:line="36" pos:column="12">{
        <comment type="block" pos:line="37" pos:column="9">/* Do the allocation */</comment>
        <comment type="block" pos:line="38" pos:column="9">/* this is the first time we've been called on a new sio
         * read the whole object into memory, then return the
         * requested amount
         */</comment>
        <expr_stmt><expr><operator pos:line="42" pos:column="9">++<pos:position pos:line="42" pos:column="11"/></operator> <call><name><name pos:line="42" pos:column="12">StoreFScoss<pos:position pos:line="42" pos:column="23"/></name><operator pos:line="42" pos:column="23">::<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="25">GetInstance<pos:position pos:line="42" pos:column="36"/></name></name><argument_list pos:line="42" pos:column="36">()<pos:position pos:line="42" pos:column="38"/></argument_list></call><operator pos:line="42" pos:column="38">.<pos:position pos:line="42" pos:column="39"/></operator><name><name pos:line="42" pos:column="39">stats<pos:position pos:line="42" pos:column="44"/></name><operator pos:line="42" pos:column="44">.<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="45">open_mem_misses<pos:position pos:line="42" pos:column="60"/></name></name></expr>;<pos:position pos:line="42" pos:column="61"/></expr_stmt>
        <comment type="block" pos:line="43" pos:column="9">/*
         * This bit of code actually does the LRU disk thing - we realloc
         * a place for the object here, and the file_read() reads the object
         * into the cossmembuf for later writing ..
         */</comment>
        <expr_stmt><expr><name><name pos:line="48" pos:column="9">cstate<pos:position pos:line="48" pos:column="15"/></name><operator pos:line="48" pos:column="15">-&gt;<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="17">reqdiskoffset<pos:position pos:line="48" pos:column="30"/></name></name> <operator pos:line="48" pos:column="31">=<pos:position pos:line="48" pos:column="32"/></operator> <call><name pos:line="48" pos:column="33">storeCossFilenoToDiskOffset<pos:position pos:line="48" pos:column="60"/></name><argument_list pos:line="48" pos:column="60">(<argument><expr><name><name pos:line="48" pos:column="61">sio<pos:position pos:line="48" pos:column="64"/></name><operator pos:line="48" pos:column="64">-&gt;<pos:position pos:line="48" pos:column="69"/></operator><name pos:line="48" pos:column="66">swap_filen<pos:position pos:line="48" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="49" pos:column="9">sio<pos:position pos:line="49" pos:column="12"/></name><operator pos:line="49" pos:column="12">-&gt;<pos:position pos:line="49" pos:column="17"/></operator><name pos:line="49" pos:column="14">swap_filen<pos:position pos:line="49" pos:column="24"/></name></name> <operator pos:line="49" pos:column="25">=<pos:position pos:line="49" pos:column="26"/></operator> <operator pos:line="49" pos:column="27">-<pos:position pos:line="49" pos:column="28"/></operator><literal type="number" pos:line="49" pos:column="28">1<pos:position pos:line="49" pos:column="29"/></literal></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="50" pos:column="9">sio<pos:position pos:line="50" pos:column="12"/></name><operator pos:line="50" pos:column="12">-&gt;<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="14">swap_filen<pos:position pos:line="50" pos:column="24"/></name></name> <operator pos:line="50" pos:column="25">=<pos:position pos:line="50" pos:column="26"/></operator> <call><name pos:line="50" pos:column="27">allocate<pos:position pos:line="50" pos:column="35"/></name><argument_list pos:line="50" pos:column="35">(<argument><expr><operator pos:line="50" pos:column="36">&amp;<pos:position pos:line="50" pos:column="41"/></operator><name pos:line="50" pos:column="37">e<pos:position pos:line="50" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="40">COSS_ALLOC_REALLOC<pos:position pos:line="50" pos:column="58"/></name></expr></argument>)<pos:position pos:line="50" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="60"/></expr_stmt>

        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name><name pos:line="52" pos:column="13">sio<pos:position pos:line="52" pos:column="16"/></name><operator pos:line="52" pos:column="16">-&gt;<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="18">swap_filen<pos:position pos:line="52" pos:column="28"/></name></name> <operator pos:line="52" pos:column="29">==<pos:position pos:line="52" pos:column="31"/></operator> <operator pos:line="52" pos:column="32">-<pos:position pos:line="52" pos:column="33"/></operator><literal type="number" pos:line="52" pos:column="33">1<pos:position pos:line="52" pos:column="34"/></literal></expr>)<pos:position pos:line="52" pos:column="35"/></condition><then pos:line="52" pos:column="35"> <block pos:line="52" pos:column="36">{
            <comment type="block" pos:line="53" pos:column="13">/* We have to clean up neatly .. */</comment>
            <expr_stmt><expr><operator pos:line="54" pos:column="13">++<pos:position pos:line="54" pos:column="15"/></operator> <call><name><name pos:line="54" pos:column="16">StoreFScoss<pos:position pos:line="54" pos:column="27"/></name><operator pos:line="54" pos:column="27">::<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="29">GetInstance<pos:position pos:line="54" pos:column="40"/></name></name><argument_list pos:line="54" pos:column="40">()<pos:position pos:line="54" pos:column="42"/></argument_list></call><operator pos:line="54" pos:column="42">.<pos:position pos:line="54" pos:column="43"/></operator><name><name pos:line="54" pos:column="43">stats<pos:position pos:line="54" pos:column="48"/></name><operator pos:line="54" pos:column="48">.<pos:position pos:line="54" pos:column="49"/></operator><name pos:line="54" pos:column="49">open<pos:position pos:line="54" pos:column="53"/></name><operator pos:line="54" pos:column="53">.<pos:position pos:line="54" pos:column="54"/></operator><name pos:line="54" pos:column="54">fail<pos:position pos:line="54" pos:column="58"/></name></name></expr>;<pos:position pos:line="54" pos:column="59"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="55" pos:column="13">++<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="15">numcollisions<pos:position pos:line="55" pos:column="28"/></name></expr>;<pos:position pos:line="55" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">debugs<pos:position pos:line="56" pos:column="19"/></name><argument_list pos:line="56" pos:column="19">(<argument><expr><literal type="number" pos:line="56" pos:column="20">79<pos:position pos:line="56" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="24">2<pos:position pos:line="56" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="27">"storeCossOpen: Reallocation of "<pos:position pos:line="56" pos:column="60"/></literal> <operator pos:line="56" pos:column="61">&lt;&lt;<pos:position pos:line="56" pos:column="69"/></operator> <name><name pos:line="56" pos:column="64">e<pos:position pos:line="56" pos:column="65"/></name><operator pos:line="56" pos:column="65">.<pos:position pos:line="56" pos:column="66"/></operator><name pos:line="56" pos:column="66">swap_dirn<pos:position pos:line="56" pos:column="75"/></name></name> <operator pos:line="56" pos:column="76">&lt;&lt;<pos:position pos:line="56" pos:column="84"/></operator> <literal type="string" pos:line="56" pos:column="79">"/"<pos:position pos:line="56" pos:column="82"/></literal> <operator pos:line="56" pos:column="83">&lt;&lt;<pos:position pos:line="56" pos:column="91"/></operator> <name><name pos:line="56" pos:column="86">e<pos:position pos:line="56" pos:column="87"/></name><operator pos:line="56" pos:column="87">.<pos:position pos:line="56" pos:column="88"/></operator><name pos:line="56" pos:column="88">swap_filen<pos:position pos:line="56" pos:column="98"/></name></name> <operator pos:line="56" pos:column="99">&lt;&lt;<pos:position pos:line="56" pos:column="107"/></operator> <literal type="string" pos:line="56" pos:column="102">" failed"<pos:position pos:line="56" pos:column="111"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="113"/></expr_stmt>
            <comment type="block" pos:line="57" pos:column="13">/* XXX XXX XXX Will squid call storeUnlink for this object? */</comment>
            <return pos:line="58" pos:column="13">return <expr><name pos:line="58" pos:column="20">NULL<pos:position pos:line="58" pos:column="24"/></name></expr>;<pos:position pos:line="58" pos:column="25"/></return>
        }<pos:position pos:line="59" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="61" pos:column="9">/* Notify the upper levels that we've changed file number */</comment>
        <expr_stmt><expr><call><name><name pos:line="62" pos:column="9">sio<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">-&gt;<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="14">file_callback<pos:position pos:line="62" pos:column="27"/></name></name><argument_list pos:line="62" pos:column="27">(<argument><expr><name><name pos:line="62" pos:column="28">sio<pos:position pos:line="62" pos:column="31"/></name><operator pos:line="62" pos:column="31">-&gt;<pos:position pos:line="62" pos:column="36"/></operator><name pos:line="62" pos:column="33">callback_data<pos:position pos:line="62" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="48">0<pos:position pos:line="62" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="51">sio<pos:position pos:line="62" pos:column="54"/></name></expr></argument>)<pos:position pos:line="62" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="56"/></expr_stmt>

        <comment type="block" pos:line="64" pos:column="9">/*
         * lock the buffer so it doesn't get swapped out on us
         * this will get unlocked in storeCossClose
         */</comment>
        <expr_stmt><expr><call><name><name pos:line="68" pos:column="9">cstate<pos:position pos:line="68" pos:column="15"/></name><operator pos:line="68" pos:column="15">-&gt;<pos:position pos:line="68" pos:column="20"/></operator><name pos:line="68" pos:column="17">lockMemBuf<pos:position pos:line="68" pos:column="27"/></name></name><argument_list pos:line="68" pos:column="27">()<pos:position pos:line="68" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="30"/></expr_stmt>

        <comment type="block" pos:line="70" pos:column="9">/*
         * Do the index magic to keep the disk and memory LRUs identical
         */</comment>
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">storeCossRemove<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><name pos:line="73" pos:column="25">this<pos:position pos:line="73" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="31">&amp;<pos:position pos:line="73" pos:column="36"/></operator><name pos:line="73" pos:column="32">e<pos:position pos:line="73" pos:column="33"/></name></expr></argument>)<pos:position pos:line="73" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="35"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="75" pos:column="9">storeCossAdd<pos:position pos:line="75" pos:column="21"/></name><argument_list pos:line="75" pos:column="21">(<argument><expr><name pos:line="75" pos:column="22">this<pos:position pos:line="75" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="28">&amp;<pos:position pos:line="75" pos:column="33"/></operator><name pos:line="75" pos:column="29">e<pos:position pos:line="75" pos:column="30"/></name></expr></argument>)<pos:position pos:line="75" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="32"/></expr_stmt>

        <comment type="block" pos:line="77" pos:column="9">/*
        	 * NOTE cstate-&gt;readbuffer is NULL.  We'll actually read
        	 * the disk data into the MemBuf in storeCossRead() and
        	 * return that pointer back to the caller
         	 */</comment>
    }<pos:position pos:line="82" pos:column="6"/></block></else></if>

    <expr_stmt><expr><operator pos:line="84" pos:column="5">++<pos:position pos:line="84" pos:column="7"/></operator> <call><name><name pos:line="84" pos:column="8">StoreFScoss<pos:position pos:line="84" pos:column="19"/></name><operator pos:line="84" pos:column="19">::<pos:position pos:line="84" pos:column="21"/></operator><name pos:line="84" pos:column="21">GetInstance<pos:position pos:line="84" pos:column="32"/></name></name><argument_list pos:line="84" pos:column="32">()<pos:position pos:line="84" pos:column="34"/></argument_list></call><operator pos:line="84" pos:column="34">.<pos:position pos:line="84" pos:column="35"/></operator><name><name pos:line="84" pos:column="35">stats<pos:position pos:line="84" pos:column="40"/></name><operator pos:line="84" pos:column="40">.<pos:position pos:line="84" pos:column="41"/></operator><name pos:line="84" pos:column="41">open<pos:position pos:line="84" pos:column="45"/></name><operator pos:line="84" pos:column="45">.<pos:position pos:line="84" pos:column="46"/></operator><name pos:line="84" pos:column="46">success<pos:position pos:line="84" pos:column="53"/></name></name></expr>;<pos:position pos:line="84" pos:column="54"/></expr_stmt>
    <return pos:line="85" pos:column="5">return <expr><name pos:line="85" pos:column="12">sio<pos:position pos:line="85" pos:column="15"/></name></expr>;<pos:position pos:line="85" pos:column="16"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
