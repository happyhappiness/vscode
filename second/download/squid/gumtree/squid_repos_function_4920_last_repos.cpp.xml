<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4920_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">ResponseParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">parse<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">(<parameter><decl><type><specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <name pos:line="2" pos:column="40">SBuf<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">&amp;<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="46">aBuf<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">buf_<pos:position pos:line="4" pos:column="9"/></name> <operator pos:line="4" pos:column="10">=<pos:position pos:line="4" pos:column="11"/></operator> <name pos:line="4" pos:column="12">aBuf<pos:position pos:line="4" pos:column="16"/></name></expr>;<pos:position pos:line="4" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">74<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="16">DBG_DATA<pos:position pos:line="5" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="26">"Parse buf={length="<pos:position pos:line="5" pos:column="46"/></literal> <operator pos:line="5" pos:column="47">&lt;&lt;<pos:position pos:line="5" pos:column="55"/></operator> <call><name><name pos:line="5" pos:column="50">aBuf<pos:position pos:line="5" pos:column="54"/></name><operator pos:line="5" pos:column="54">.<pos:position pos:line="5" pos:column="55"/></operator><name pos:line="5" pos:column="55">length<pos:position pos:line="5" pos:column="61"/></name></name><argument_list pos:line="5" pos:column="61">()<pos:position pos:line="5" pos:column="63"/></argument_list></call> <operator pos:line="5" pos:column="64">&lt;&lt;<pos:position pos:line="5" pos:column="72"/></operator> <literal type="string" pos:line="5" pos:column="67">", data='"<pos:position pos:line="5" pos:column="77"/></literal> <operator pos:line="5" pos:column="78">&lt;&lt;<pos:position pos:line="5" pos:column="86"/></operator> <name pos:line="5" pos:column="81">aBuf<pos:position pos:line="5" pos:column="85"/></name> <operator pos:line="5" pos:column="86">&lt;&lt;<pos:position pos:line="5" pos:column="94"/></operator> <literal type="string" pos:line="5" pos:column="89">"'}"<pos:position pos:line="5" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="95"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// stage 1: locate the status-line</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">parsingStage_<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">==<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">HTTP_PARSE_NONE<pos:position pos:line="8" pos:column="41"/></name></expr>)<pos:position pos:line="8" pos:column="42"/></condition><then pos:line="8" pos:column="42"> <block pos:line="8" pos:column="43">{
        <comment type="line" pos:line="9" pos:column="9">// RFC 7230 explicitly states whether garbage whitespace is to be handled</comment>
        <comment type="line" pos:line="10" pos:column="9">// at each point of the message framing boundaries.</comment>
        <comment type="line" pos:line="11" pos:column="9">// It omits mentioning garbage prior to HTTP Responses.</comment>
        <comment type="line" pos:line="12" pos:column="9">// Therefore, if we receive anything at all treat it as Response message.</comment>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><call><name><name pos:line="13" pos:column="14">buf_<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">isEmpty<pos:position pos:line="13" pos:column="26"/></name></name><argument_list pos:line="13" pos:column="26">()<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="13">parsingStage_<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">=<pos:position pos:line="14" pos:column="28"/></operator> <name pos:line="14" pos:column="29">HTTP_PARSE_FIRST<pos:position pos:line="14" pos:column="45"/></name></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt></block></then>
        <else pos:line="15" pos:column="9">else
            <block type="pseudo"><return pos:line="16" pos:column="13">return <expr><literal type="boolean" pos:line="16" pos:column="20">false<pos:position pos:line="16" pos:column="25"/></literal></expr>;<pos:position pos:line="16" pos:column="26"/></return></block></else></if>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="19" pos:column="5">// stage 2: parse the status-line</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">parsingStage_<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">==<pos:position pos:line="20" pos:column="25"/></operator> <name pos:line="20" pos:column="26">HTTP_PARSE_FIRST<pos:position pos:line="20" pos:column="42"/></name></expr>)<pos:position pos:line="20" pos:column="43"/></condition><then pos:line="20" pos:column="43"> <block pos:line="20" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">PROF_start<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">HttpParserParseReplyLine<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>

        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">const<pos:position pos:line="23" pos:column="14"/></specifier> <name pos:line="23" pos:column="15">int<pos:position pos:line="23" pos:column="18"/></name></type> <name pos:line="23" pos:column="19">retcode<pos:position pos:line="23" pos:column="26"/></name> <init pos:line="23" pos:column="27">= <expr><call><name pos:line="23" pos:column="29">parseResponseFirstLine<pos:position pos:line="23" pos:column="51"/></name><argument_list pos:line="23" pos:column="51">()<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="54"/></decl_stmt>

        <comment type="line" pos:line="25" pos:column="9">// first-line (or a look-alike) found successfully.</comment>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">retcode<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">&gt;<pos:position pos:line="26" pos:column="25"/></operator> <literal type="number" pos:line="26" pos:column="23">0<pos:position pos:line="26" pos:column="24"/></literal> <operator pos:line="26" pos:column="25">&amp;&amp;<pos:position pos:line="26" pos:column="35"/></operator> <name pos:line="26" pos:column="28">parsingStage_<pos:position pos:line="26" pos:column="41"/></name> <operator pos:line="26" pos:column="42">==<pos:position pos:line="26" pos:column="44"/></operator> <name pos:line="26" pos:column="45">HTTP_PARSE_FIRST<pos:position pos:line="26" pos:column="61"/></name></expr>)<pos:position pos:line="26" pos:column="62"/></condition><then pos:line="26" pos:column="62">
            <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="13">parsingStage_<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">HTTP_PARSE_MIME<pos:position pos:line="27" pos:column="44"/></name></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">debugs<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><literal type="number" pos:line="28" pos:column="16">74<pos:position pos:line="28" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="20">5<pos:position pos:line="28" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="23">"status-line: retval "<pos:position pos:line="28" pos:column="45"/></literal> <operator pos:line="28" pos:column="46">&lt;&lt;<pos:position pos:line="28" pos:column="54"/></operator> <name pos:line="28" pos:column="49">retcode<pos:position pos:line="28" pos:column="56"/></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">74<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="20">5<pos:position pos:line="29" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="23">"status-line: proto "<pos:position pos:line="29" pos:column="44"/></literal> <operator pos:line="29" pos:column="45">&lt;&lt;<pos:position pos:line="29" pos:column="53"/></operator> <name pos:line="29" pos:column="48">msgProtocol_<pos:position pos:line="29" pos:column="60"/></name></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">74<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">5<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="23">"status-line: status-code "<pos:position pos:line="30" pos:column="50"/></literal> <operator pos:line="30" pos:column="51">&lt;&lt;<pos:position pos:line="30" pos:column="59"/></operator> <name pos:line="30" pos:column="54">statusCode_<pos:position pos:line="30" pos:column="65"/></name></expr></argument>)<pos:position pos:line="30" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">74<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="20">5<pos:position pos:line="31" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="23">"status-line: reason-phrase "<pos:position pos:line="31" pos:column="52"/></literal> <operator pos:line="31" pos:column="53">&lt;&lt;<pos:position pos:line="31" pos:column="61"/></operator> <name pos:line="31" pos:column="56">reasonPhrase_<pos:position pos:line="31" pos:column="69"/></name></expr></argument>)<pos:position pos:line="31" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">74<pos:position pos:line="32" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="20">5<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"Parser: bytes processed="<pos:position pos:line="32" pos:column="49"/></literal> <operator pos:line="32" pos:column="50">&lt;&lt;<pos:position pos:line="32" pos:column="58"/></operator> <operator pos:line="32" pos:column="53">(<pos:position pos:line="32" pos:column="54"/></operator><call><name><name pos:line="32" pos:column="54">aBuf<pos:position pos:line="32" pos:column="58"/></name><operator pos:line="32" pos:column="58">.<pos:position pos:line="32" pos:column="59"/></operator><name pos:line="32" pos:column="59">length<pos:position pos:line="32" pos:column="65"/></name></name><argument_list pos:line="32" pos:column="65">()<pos:position pos:line="32" pos:column="67"/></argument_list></call><operator pos:line="32" pos:column="67">-<pos:position pos:line="32" pos:column="68"/></operator><call><name><name pos:line="32" pos:column="68">buf_<pos:position pos:line="32" pos:column="72"/></name><operator pos:line="32" pos:column="72">.<pos:position pos:line="32" pos:column="73"/></operator><name pos:line="32" pos:column="73">length<pos:position pos:line="32" pos:column="79"/></name></name><argument_list pos:line="32" pos:column="79">()<pos:position pos:line="32" pos:column="81"/></argument_list></call><operator pos:line="32" pos:column="81">)<pos:position pos:line="32" pos:column="82"/></operator></expr></argument>)<pos:position pos:line="32" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="84"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">PROF_stop<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><name pos:line="33" pos:column="19">HttpParserParseReplyLine<pos:position pos:line="33" pos:column="43"/></name></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>

        <comment type="line" pos:line="35" pos:column="9">// syntax errors already</comment>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">retcode<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">&lt;<pos:position pos:line="36" pos:column="25"/></operator> <literal type="number" pos:line="36" pos:column="23">0<pos:position pos:line="36" pos:column="24"/></literal></expr>)<pos:position pos:line="36" pos:column="25"/></condition><then pos:line="36" pos:column="25"> <block pos:line="36" pos:column="26">{
            <expr_stmt><expr><name pos:line="37" pos:column="13">parsingStage_<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">=<pos:position pos:line="37" pos:column="28"/></operator> <name pos:line="37" pos:column="29">HTTP_PARSE_DONE<pos:position pos:line="37" pos:column="44"/></name></expr>;<pos:position pos:line="37" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><name pos:line="38" pos:column="13">parseStatusCode<pos:position pos:line="38" pos:column="28"/></name> <operator pos:line="38" pos:column="29">=<pos:position pos:line="38" pos:column="30"/></operator> <name><name pos:line="38" pos:column="31">Http<pos:position pos:line="38" pos:column="35"/></name><operator pos:line="38" pos:column="35">::<pos:position pos:line="38" pos:column="37"/></operator><name pos:line="38" pos:column="37">scInvalidHeader<pos:position pos:line="38" pos:column="52"/></name></name></expr>;<pos:position pos:line="38" pos:column="53"/></expr_stmt>
            <return pos:line="39" pos:column="13">return <expr><literal type="boolean" pos:line="39" pos:column="20">false<pos:position pos:line="39" pos:column="25"/></literal></expr>;<pos:position pos:line="39" pos:column="26"/></return>
        }<pos:position pos:line="40" pos:column="10"/></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="43" pos:column="5">// stage 3: locate the mime header block</comment>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">parsingStage_<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">==<pos:position pos:line="44" pos:column="25"/></operator> <name pos:line="44" pos:column="26">HTTP_PARSE_MIME<pos:position pos:line="44" pos:column="41"/></name></expr>)<pos:position pos:line="44" pos:column="42"/></condition><then pos:line="44" pos:column="42"> <block pos:line="44" pos:column="43">{
        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><call><name pos:line="45" pos:column="14">grabMimeBlock<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><literal type="string" pos:line="45" pos:column="28">"Response"<pos:position pos:line="45" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="40">Config<pos:position pos:line="45" pos:column="46"/></name><operator pos:line="45" pos:column="46">.<pos:position pos:line="45" pos:column="47"/></operator><name pos:line="45" pos:column="47">maxReplyHeaderSize<pos:position pos:line="45" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="67"/></condition><then pos:line="45" pos:column="67">
            <block type="pseudo"><return pos:line="46" pos:column="13">return <expr><literal type="boolean" pos:line="46" pos:column="20">false<pos:position pos:line="46" pos:column="25"/></literal></expr>;<pos:position pos:line="46" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <return pos:line="49" pos:column="5">return <expr><operator pos:line="49" pos:column="12">!<pos:position pos:line="49" pos:column="13"/></operator><call><name pos:line="49" pos:column="13">needsMoreData<pos:position pos:line="49" pos:column="26"/></name><argument_list pos:line="49" pos:column="26">()<pos:position pos:line="49" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="29"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
