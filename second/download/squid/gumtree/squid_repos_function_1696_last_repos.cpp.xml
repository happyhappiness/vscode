<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1696_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">readReply<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">CommIoCbParams<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">&amp;<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="48">io<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><operator pos:line="4" pos:column="10">!<pos:position pos:line="4" pos:column="11"/></operator><name><name pos:line="4" pos:column="11">flags<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">.<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">do_next_read<pos:position pos:line="4" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt> <comment type="line" pos:line="4" pos:column="32">// XXX: should have been set false by mayReadVirginBody()</comment>
    <expr_stmt><expr><name><name pos:line="5" pos:column="5">flags<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">.<pos:position pos:line="5" pos:column="11"/></operator><name pos:line="5" pos:column="11">do_next_read<pos:position pos:line="5" pos:column="23"/></name></name> <operator pos:line="5" pos:column="24">=<pos:position pos:line="5" pos:column="25"/></operator> <literal type="boolean" pos:line="5" pos:column="26">false<pos:position pos:line="5" pos:column="31"/></literal></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">11<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="16">5<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="19">io<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">.<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">conn<pos:position pos:line="7" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// Bail out early on Comm::ERR_CLOSING - close handlers will tidy up for us</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">io<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">.<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">flag<pos:position pos:line="10" pos:column="16"/></name></name> <operator pos:line="10" pos:column="17">==<pos:position pos:line="10" pos:column="19"/></operator> <name><name pos:line="10" pos:column="20">Comm<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">::<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">ERR_CLOSING<pos:position pos:line="10" pos:column="37"/></name></name></expr>)<pos:position pos:line="10" pos:column="38"/></condition><then pos:line="10" pos:column="38"> <block pos:line="10" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">11<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">3<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">"http socket closing"<pos:position pos:line="11" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">EBIT_TEST<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name><name pos:line="15" pos:column="19">entry<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">-&gt;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="26">flags<pos:position pos:line="15" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="33">ENTRY_ABORTED<pos:position pos:line="15" pos:column="46"/></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48"> <block pos:line="15" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">abortTransaction<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><literal type="string" pos:line="16" pos:column="26">"store entry aborted while reading reply"<pos:position pos:line="16" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="69"/></expr_stmt>
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">Must<pos:position pos:line="20" pos:column="9"/></name><argument_list pos:line="20" pos:column="9">(<argument><expr><call><name><name pos:line="20" pos:column="10">Comm<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">::<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">IsConnOpen<pos:position pos:line="20" pos:column="26"/></name></name><argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">serverConnection<pos:position pos:line="20" pos:column="43"/></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">Must<pos:position pos:line="21" pos:column="9"/></name><argument_list pos:line="21" pos:column="9">(<argument><expr><name><name pos:line="21" pos:column="10">io<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">.<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="13">conn<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">-&gt;<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="19">fd<pos:position pos:line="21" pos:column="21"/></name></name> <operator pos:line="21" pos:column="22">==<pos:position pos:line="21" pos:column="24"/></operator> <name><name pos:line="21" pos:column="25">serverConnection<pos:position pos:line="21" pos:column="41"/></name><operator pos:line="21" pos:column="41">-&gt;<pos:position pos:line="21" pos:column="46"/></operator><name pos:line="21" pos:column="43">fd<pos:position pos:line="21" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/*
     * Don't reset the timeout value here. The value should be
     * counting Config.Timeout.request and applies to the request
     * as a whole, not individual read() calls.
     * Plus, it breaks our lame *HalfClosed() detection
     */</comment>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">Must<pos:position pos:line="30" pos:column="9"/></name><argument_list pos:line="30" pos:column="9">(<argument><expr><call><name pos:line="30" pos:column="10">maybeMakeSpaceAvailable<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><literal type="boolean" pos:line="30" pos:column="34">true<pos:position pos:line="30" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="41"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">CommIoCbParams<pos:position pos:line="31" pos:column="19"/></name></type> <name pos:line="31" pos:column="20">rd<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">this<pos:position pos:line="31" pos:column="27"/></name></expr></argument>)<pos:position pos:line="31" pos:column="28"/></argument_list></decl>;<pos:position pos:line="31" pos:column="29"/></decl_stmt> <comment type="line" pos:line="31" pos:column="30">// will be expanded with ReadNow results</comment>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">rd<pos:position pos:line="32" pos:column="7"/></name><operator pos:line="32" pos:column="7">.<pos:position pos:line="32" pos:column="8"/></operator><name pos:line="32" pos:column="8">conn<pos:position pos:line="32" pos:column="12"/></name></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <name><name pos:line="32" pos:column="15">io<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">.<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="18">conn<pos:position pos:line="32" pos:column="22"/></name></name></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">rd<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">.<pos:position pos:line="33" pos:column="8"/></operator><name pos:line="33" pos:column="8">size<pos:position pos:line="33" pos:column="12"/></name></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <call><name><name pos:line="33" pos:column="15">entry<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">-&gt;<pos:position pos:line="33" pos:column="25"/></operator><name pos:line="33" pos:column="22">bytesWanted<pos:position pos:line="33" pos:column="33"/></name></name><argument_list pos:line="33" pos:column="33">(<argument><expr><call><name><name pos:line="33" pos:column="34">Range<pos:position pos:line="33" pos:column="39"/></name><argument_list type="generic" pos:line="33" pos:column="39">&lt;<argument><expr><name pos:line="33" pos:column="40">size_t<pos:position pos:line="33" pos:column="46"/></name></expr></argument>&gt;<pos:position pos:line="33" pos:column="50"/></argument_list></name><argument_list pos:line="33" pos:column="47">(<argument><expr><literal type="number" pos:line="33" pos:column="48">0<pos:position pos:line="33" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="33" pos:column="51">inBuf<pos:position pos:line="33" pos:column="56"/></name><operator pos:line="33" pos:column="56">.<pos:position pos:line="33" pos:column="57"/></operator><name pos:line="33" pos:column="57">spaceSize<pos:position pos:line="33" pos:column="66"/></name></name><argument_list pos:line="33" pos:column="66">()<pos:position pos:line="33" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="71"/></expr_stmt>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name><name pos:line="35" pos:column="9">rd<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">.<pos:position pos:line="35" pos:column="12"/></operator><name pos:line="35" pos:column="12">size<pos:position pos:line="35" pos:column="16"/></name></name> <operator pos:line="35" pos:column="17">&lt;=<pos:position pos:line="35" pos:column="22"/></operator> <literal type="number" pos:line="35" pos:column="20">0<pos:position pos:line="35" pos:column="21"/></literal></expr>)<pos:position pos:line="35" pos:column="22"/></condition><then pos:line="35" pos:column="22"> <block pos:line="35" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">assert<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name><name pos:line="36" pos:column="16">entry<pos:position pos:line="36" pos:column="21"/></name><operator pos:line="36" pos:column="21">-&gt;<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="23">mem_obj<pos:position pos:line="36" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt>
        <decl_stmt><decl><type><name><name pos:line="37" pos:column="9">AsyncCall<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">::<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">Pointer<pos:position pos:line="37" pos:column="27"/></name></name></type> <name pos:line="37" pos:column="28">nilCall<pos:position pos:line="37" pos:column="35"/></name></decl>;<pos:position pos:line="37" pos:column="36"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="38" pos:column="9">entry<pos:position pos:line="38" pos:column="14"/></name><operator pos:line="38" pos:column="14">-&gt;<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="16">mem_obj<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">-&gt;<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="25">delayRead<pos:position pos:line="38" pos:column="34"/></name></name><argument_list pos:line="38" pos:column="34">(<argument><expr><call><name pos:line="38" pos:column="35">DeferredRead<pos:position pos:line="38" pos:column="47"/></name><argument_list pos:line="38" pos:column="47">(<argument><expr><name pos:line="38" pos:column="48">readDelayed<pos:position pos:line="38" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="61">this<pos:position pos:line="38" pos:column="65"/></name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="67">CommRead<pos:position pos:line="38" pos:column="75"/></name><argument_list pos:line="38" pos:column="75">(<argument><expr><name><name pos:line="38" pos:column="76">io<pos:position pos:line="38" pos:column="78"/></name><operator pos:line="38" pos:column="78">.<pos:position pos:line="38" pos:column="79"/></operator><name pos:line="38" pos:column="79">conn<pos:position pos:line="38" pos:column="83"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="85">NULL<pos:position pos:line="38" pos:column="89"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="91">0<pos:position pos:line="38" pos:column="92"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="94">nilCall<pos:position pos:line="38" pos:column="101"/></name></expr></argument>)<pos:position pos:line="38" pos:column="102"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="103"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="105"/></expr_stmt>
        <return pos:line="39" pos:column="9">return;<pos:position pos:line="39" pos:column="16"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <switch pos:line="42" pos:column="5">switch <condition pos:line="42" pos:column="12">(<expr><call><name><name pos:line="42" pos:column="13">Comm<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">::<pos:position pos:line="42" pos:column="19"/></operator><name pos:line="42" pos:column="19">ReadNow<pos:position pos:line="42" pos:column="26"/></name></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name pos:line="42" pos:column="27">rd<pos:position pos:line="42" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="31">inBuf<pos:position pos:line="42" pos:column="36"/></name></expr></argument>)<pos:position pos:line="42" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="38"/></condition> <block pos:line="42" pos:column="39">{
    <case pos:line="43" pos:column="5">case <expr><name><name pos:line="43" pos:column="10">Comm<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">::<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="16">INPROGRESS<pos:position pos:line="43" pos:column="26"/></name></name></expr>:<pos:position pos:line="43" pos:column="27"/></case>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name><name pos:line="44" pos:column="13">inBuf<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">.<pos:position pos:line="44" pos:column="19"/></operator><name pos:line="44" pos:column="19">isEmpty<pos:position pos:line="44" pos:column="26"/></name></name><argument_list pos:line="44" pos:column="26">()<pos:position pos:line="44" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="29"/></condition><then pos:line="44" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="13">debugs<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><literal type="number" pos:line="45" pos:column="20">33<pos:position pos:line="45" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="24">2<pos:position pos:line="45" pos:column="25"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="27">io<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">.<pos:position pos:line="45" pos:column="30"/></operator><name pos:line="45" pos:column="30">conn<pos:position pos:line="45" pos:column="34"/></name></name> <operator pos:line="45" pos:column="35">&lt;&lt;<pos:position pos:line="45" pos:column="43"/></operator> <literal type="string" pos:line="45" pos:column="38">": no data to process, "<pos:position pos:line="45" pos:column="62"/></literal> <operator pos:line="45" pos:column="63">&lt;&lt;<pos:position pos:line="45" pos:column="71"/></operator> <call><name pos:line="45" pos:column="66">xstrerr<pos:position pos:line="45" pos:column="73"/></name><argument_list pos:line="45" pos:column="73">(<argument><expr><name><name pos:line="45" pos:column="74">rd<pos:position pos:line="45" pos:column="76"/></name><operator pos:line="45" pos:column="76">.<pos:position pos:line="45" pos:column="77"/></operator><name pos:line="45" pos:column="77">xerrno<pos:position pos:line="45" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="86"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name><name pos:line="46" pos:column="9">flags<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">.<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">do_next_read<pos:position pos:line="46" pos:column="27"/></name></name> <operator pos:line="46" pos:column="28">=<pos:position pos:line="46" pos:column="29"/></operator> <literal type="boolean" pos:line="46" pos:column="30">true<pos:position pos:line="46" pos:column="34"/></literal></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">maybeReadVirginBody<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">()<pos:position pos:line="47" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="31"/></expr_stmt>
        <return pos:line="48" pos:column="9">return;<pos:position pos:line="48" pos:column="16"/></return>

    <case pos:line="50" pos:column="5">case <expr><name><name pos:line="50" pos:column="10">Comm<pos:position pos:line="50" pos:column="14"/></name><operator pos:line="50" pos:column="14">::<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="16">OK<pos:position pos:line="50" pos:column="18"/></name></name></expr>:<pos:position pos:line="50" pos:column="19"/></case>
    <block pos:line="51" pos:column="5">{
        <expr_stmt><expr><name pos:line="52" pos:column="9">payloadSeen<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">+=<pos:position pos:line="52" pos:column="23"/></operator> <name><name pos:line="52" pos:column="24">rd<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">.<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="27">size<pos:position pos:line="52" pos:column="31"/></name></name></expr>;<pos:position pos:line="52" pos:column="32"/></expr_stmt>
<cpp:if pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">if<pos:position pos:line="53" pos:column="4"/></cpp:directive> <expr><name pos:line="53" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="53" pos:column="20"/></name></expr></cpp:if>
        <decl_stmt><decl><type><name pos:line="54" pos:column="9">DelayId<pos:position pos:line="54" pos:column="16"/></name></type> <name pos:line="54" pos:column="17">delayId<pos:position pos:line="54" pos:column="24"/></name> <init pos:line="54" pos:column="25">= <expr><call><name><name pos:line="54" pos:column="27">entry<pos:position pos:line="54" pos:column="32"/></name><operator pos:line="54" pos:column="32">-&gt;<pos:position pos:line="54" pos:column="37"/></operator><name pos:line="54" pos:column="34">mem_obj<pos:position pos:line="54" pos:column="41"/></name><operator pos:line="54" pos:column="41">-&gt;<pos:position pos:line="54" pos:column="46"/></operator><name pos:line="54" pos:column="43">mostBytesAllowed<pos:position pos:line="54" pos:column="59"/></name></name><argument_list pos:line="54" pos:column="59">()<pos:position pos:line="54" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="54" pos:column="62"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="55" pos:column="9">delayId<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">.<pos:position pos:line="55" pos:column="17"/></operator><name pos:line="55" pos:column="17">bytesIn<pos:position pos:line="55" pos:column="24"/></name></name><argument_list pos:line="55" pos:column="24">(<argument><expr><name><name pos:line="55" pos:column="25">rd<pos:position pos:line="55" pos:column="27"/></name><operator pos:line="55" pos:column="27">.<pos:position pos:line="55" pos:column="28"/></operator><name pos:line="55" pos:column="28">size<pos:position pos:line="55" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif<pos:position pos:line="56" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><name><name pos:line="58" pos:column="9">statCounter<pos:position pos:line="58" pos:column="20"/></name><operator pos:line="58" pos:column="20">.<pos:position pos:line="58" pos:column="21"/></operator><name pos:line="58" pos:column="21">server<pos:position pos:line="58" pos:column="27"/></name><operator pos:line="58" pos:column="27">.<pos:position pos:line="58" pos:column="28"/></operator><name pos:line="58" pos:column="28">all<pos:position pos:line="58" pos:column="31"/></name><operator pos:line="58" pos:column="31">.<pos:position pos:line="58" pos:column="32"/></operator><name pos:line="58" pos:column="32">kbytes_in<pos:position pos:line="58" pos:column="41"/></name></name> <operator pos:line="58" pos:column="42">+=<pos:position pos:line="58" pos:column="44"/></operator> <name><name pos:line="58" pos:column="45">rd<pos:position pos:line="58" pos:column="47"/></name><operator pos:line="58" pos:column="47">.<pos:position pos:line="58" pos:column="48"/></operator><name pos:line="58" pos:column="48">size<pos:position pos:line="58" pos:column="52"/></name></name></expr>;<pos:position pos:line="58" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">statCounter<pos:position pos:line="59" pos:column="20"/></name><operator pos:line="59" pos:column="20">.<pos:position pos:line="59" pos:column="21"/></operator><name pos:line="59" pos:column="21">server<pos:position pos:line="59" pos:column="27"/></name><operator pos:line="59" pos:column="27">.<pos:position pos:line="59" pos:column="28"/></operator><name pos:line="59" pos:column="28">http<pos:position pos:line="59" pos:column="32"/></name><operator pos:line="59" pos:column="32">.<pos:position pos:line="59" pos:column="33"/></operator><name pos:line="59" pos:column="33">kbytes_in<pos:position pos:line="59" pos:column="42"/></name></name> <operator pos:line="59" pos:column="43">+=<pos:position pos:line="59" pos:column="45"/></operator> <name><name pos:line="59" pos:column="46">rd<pos:position pos:line="59" pos:column="48"/></name><operator pos:line="59" pos:column="48">.<pos:position pos:line="59" pos:column="49"/></operator><name pos:line="59" pos:column="49">size<pos:position pos:line="59" pos:column="53"/></name></name></expr>;<pos:position pos:line="59" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="60" pos:column="9">++<pos:position pos:line="60" pos:column="11"/></operator> <name><name pos:line="60" pos:column="12">IOStats<pos:position pos:line="60" pos:column="19"/></name><operator pos:line="60" pos:column="19">.<pos:position pos:line="60" pos:column="20"/></operator><name pos:line="60" pos:column="20">Http<pos:position pos:line="60" pos:column="24"/></name><operator pos:line="60" pos:column="24">.<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="25">reads<pos:position pos:line="60" pos:column="30"/></name></name></expr>;<pos:position pos:line="60" pos:column="31"/></expr_stmt>

        <decl_stmt><decl><type><name pos:line="62" pos:column="9">int<pos:position pos:line="62" pos:column="12"/></name></type> <name pos:line="62" pos:column="13">bin<pos:position pos:line="62" pos:column="16"/></name> <init pos:line="62" pos:column="17">= <expr><literal type="number" pos:line="62" pos:column="19">0<pos:position pos:line="62" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="62" pos:column="21"/></decl_stmt>
        <for pos:line="63" pos:column="9">for <control pos:line="63" pos:column="13">(<init><decl><type><name pos:line="63" pos:column="14">int<pos:position pos:line="63" pos:column="17"/></name></type> <name pos:line="63" pos:column="18">clen<pos:position pos:line="63" pos:column="22"/></name> <init pos:line="63" pos:column="23">= <expr><name><name pos:line="63" pos:column="25">rd<pos:position pos:line="63" pos:column="27"/></name><operator pos:line="63" pos:column="27">.<pos:position pos:line="63" pos:column="28"/></operator><name pos:line="63" pos:column="28">size<pos:position pos:line="63" pos:column="32"/></name></name> <operator pos:line="63" pos:column="33">-<pos:position pos:line="63" pos:column="34"/></operator> <literal type="number" pos:line="63" pos:column="35">1<pos:position pos:line="63" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="63" pos:column="37"/></init> <condition><expr><name pos:line="63" pos:column="38">clen<pos:position pos:line="63" pos:column="42"/></name></expr>;<pos:position pos:line="63" pos:column="43"/></condition> <incr><expr><operator pos:line="63" pos:column="44">++<pos:position pos:line="63" pos:column="46"/></operator><name pos:line="63" pos:column="46">bin<pos:position pos:line="63" pos:column="49"/></name></expr></incr>)<pos:position pos:line="63" pos:column="50"/></control>
            <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="13">clen<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">&gt;&gt;=<pos:position pos:line="64" pos:column="27"/></operator> <literal type="number" pos:line="64" pos:column="22">1<pos:position pos:line="64" pos:column="23"/></literal></expr>;<pos:position pos:line="64" pos:column="24"/></expr_stmt></block></for>

        <expr_stmt><expr><operator pos:line="66" pos:column="9">++<pos:position pos:line="66" pos:column="11"/></operator> <name><name pos:line="66" pos:column="12">IOStats<pos:position pos:line="66" pos:column="19"/></name><operator pos:line="66" pos:column="19">.<pos:position pos:line="66" pos:column="20"/></operator><name pos:line="66" pos:column="20">Http<pos:position pos:line="66" pos:column="24"/></name><operator pos:line="66" pos:column="24">.<pos:position pos:line="66" pos:column="25"/></operator><name pos:line="66" pos:column="25">read_hist<pos:position pos:line="66" pos:column="34"/></name><index pos:line="66" pos:column="34">[<expr><name pos:line="66" pos:column="35">bin<pos:position pos:line="66" pos:column="38"/></name></expr>]<pos:position pos:line="66" pos:column="39"/></index></name></expr>;<pos:position pos:line="66" pos:column="40"/></expr_stmt>

        <comment type="line" pos:line="68" pos:column="9">// update peer response time stats (%&lt;pt)</comment>
        <decl_stmt><decl><type><specifier pos:line="69" pos:column="9">const<pos:position pos:line="69" pos:column="14"/></specifier> <name pos:line="69" pos:column="15">timeval<pos:position pos:line="69" pos:column="22"/></name> <modifier pos:line="69" pos:column="23">&amp;<pos:position pos:line="69" pos:column="28"/></modifier></type><name pos:line="69" pos:column="24">sent<pos:position pos:line="69" pos:column="28"/></name> <init pos:line="69" pos:column="29">= <expr><name><name pos:line="69" pos:column="31">request<pos:position pos:line="69" pos:column="38"/></name><operator pos:line="69" pos:column="38">-&gt;<pos:position pos:line="69" pos:column="43"/></operator><name pos:line="69" pos:column="40">hier<pos:position pos:line="69" pos:column="44"/></name><operator pos:line="69" pos:column="44">.<pos:position pos:line="69" pos:column="45"/></operator><name pos:line="69" pos:column="45">peer_http_request_sent<pos:position pos:line="69" pos:column="67"/></name></name></expr></init></decl>;<pos:position pos:line="69" pos:column="68"/></decl_stmt>
        <if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name><name pos:line="70" pos:column="13">sent<pos:position pos:line="70" pos:column="17"/></name><operator pos:line="70" pos:column="17">.<pos:position pos:line="70" pos:column="18"/></operator><name pos:line="70" pos:column="18">tv_sec<pos:position pos:line="70" pos:column="24"/></name></name></expr>)<pos:position pos:line="70" pos:column="25"/></condition><then pos:line="70" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="13">tvSub<pos:position pos:line="71" pos:column="18"/></name><argument_list pos:line="71" pos:column="18">(<argument><expr><name><name pos:line="71" pos:column="19">request<pos:position pos:line="71" pos:column="26"/></name><operator pos:line="71" pos:column="26">-&gt;<pos:position pos:line="71" pos:column="31"/></operator><name pos:line="71" pos:column="28">hier<pos:position pos:line="71" pos:column="32"/></name><operator pos:line="71" pos:column="32">.<pos:position pos:line="71" pos:column="33"/></operator><name pos:line="71" pos:column="33">peer_response_time<pos:position pos:line="71" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="53">sent<pos:position pos:line="71" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="59">current_time<pos:position pos:line="71" pos:column="71"/></name></expr></argument>)<pos:position pos:line="71" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="73"/></expr_stmt></block></then>
        <else pos:line="72" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="73" pos:column="13">request<pos:position pos:line="73" pos:column="20"/></name><operator pos:line="73" pos:column="20">-&gt;<pos:position pos:line="73" pos:column="25"/></operator><name pos:line="73" pos:column="22">hier<pos:position pos:line="73" pos:column="26"/></name><operator pos:line="73" pos:column="26">.<pos:position pos:line="73" pos:column="27"/></operator><name pos:line="73" pos:column="27">peer_response_time<pos:position pos:line="73" pos:column="45"/></name><operator pos:line="73" pos:column="45">.<pos:position pos:line="73" pos:column="46"/></operator><name pos:line="73" pos:column="46">tv_sec<pos:position pos:line="73" pos:column="52"/></name></name> <operator pos:line="73" pos:column="53">=<pos:position pos:line="73" pos:column="54"/></operator> <operator pos:line="73" pos:column="55">-<pos:position pos:line="73" pos:column="56"/></operator><literal type="number" pos:line="73" pos:column="56">1<pos:position pos:line="73" pos:column="57"/></literal></expr>;<pos:position pos:line="73" pos:column="58"/></expr_stmt></block></else></if>
    }<pos:position pos:line="74" pos:column="6"/></block>

        <comment type="block" pos:line="76" pos:column="9">/* Continue to process previously read data */</comment>
    <break pos:line="77" pos:column="5">break;<pos:position pos:line="77" pos:column="11"/></break>

    <case pos:line="79" pos:column="5">case <expr><name><name pos:line="79" pos:column="10">Comm<pos:position pos:line="79" pos:column="14"/></name><operator pos:line="79" pos:column="14">::<pos:position pos:line="79" pos:column="16"/></operator><name pos:line="79" pos:column="16">ENDFILE<pos:position pos:line="79" pos:column="23"/></name></name></expr>:<pos:position pos:line="79" pos:column="24"/></case> <comment type="line" pos:line="79" pos:column="25">// close detected by 0-byte read</comment>
        <expr_stmt><expr><name pos:line="80" pos:column="9">eof<pos:position pos:line="80" pos:column="12"/></name> <operator pos:line="80" pos:column="13">=<pos:position pos:line="80" pos:column="14"/></operator> <literal type="number" pos:line="80" pos:column="15">1<pos:position pos:line="80" pos:column="16"/></literal></expr>;<pos:position pos:line="80" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="81" pos:column="9">flags<pos:position pos:line="81" pos:column="14"/></name><operator pos:line="81" pos:column="14">.<pos:position pos:line="81" pos:column="15"/></operator><name pos:line="81" pos:column="15">do_next_read<pos:position pos:line="81" pos:column="27"/></name></name> <operator pos:line="81" pos:column="28">=<pos:position pos:line="81" pos:column="29"/></operator> <literal type="boolean" pos:line="81" pos:column="30">false<pos:position pos:line="81" pos:column="35"/></literal></expr>;<pos:position pos:line="81" pos:column="36"/></expr_stmt>

        <comment type="block" pos:line="83" pos:column="9">/* Continue to process previously read data */</comment>
        <break pos:line="84" pos:column="9">break;<pos:position pos:line="84" pos:column="15"/></break>

    <comment type="line" pos:line="86" pos:column="5">// case Comm::COMM_ERROR:</comment>
    <default pos:line="87" pos:column="5">default:<pos:position pos:line="87" pos:column="13"/></default> <comment type="line" pos:line="87" pos:column="14">// no other flags should ever occur</comment>
        <expr_stmt><expr><call><name pos:line="88" pos:column="9">debugs<pos:position pos:line="88" pos:column="15"/></name><argument_list pos:line="88" pos:column="15">(<argument><expr><literal type="number" pos:line="88" pos:column="16">11<pos:position pos:line="88" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="20">2<pos:position pos:line="88" pos:column="21"/></literal></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="23">io<pos:position pos:line="88" pos:column="25"/></name><operator pos:line="88" pos:column="25">.<pos:position pos:line="88" pos:column="26"/></operator><name pos:line="88" pos:column="26">conn<pos:position pos:line="88" pos:column="30"/></name></name> <operator pos:line="88" pos:column="31">&lt;&lt;<pos:position pos:line="88" pos:column="39"/></operator> <literal type="string" pos:line="88" pos:column="34">": read failure: "<pos:position pos:line="88" pos:column="52"/></literal> <operator pos:line="88" pos:column="53">&lt;&lt;<pos:position pos:line="88" pos:column="61"/></operator> <call><name pos:line="88" pos:column="56">xstrerr<pos:position pos:line="88" pos:column="63"/></name><argument_list pos:line="88" pos:column="63">(<argument><expr><name><name pos:line="88" pos:column="64">rd<pos:position pos:line="88" pos:column="66"/></name><operator pos:line="88" pos:column="66">.<pos:position pos:line="88" pos:column="67"/></operator><name pos:line="88" pos:column="67">xerrno<pos:position pos:line="88" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="88" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="76"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="89" pos:column="9">ErrorState<pos:position pos:line="89" pos:column="19"/></name> <modifier pos:line="89" pos:column="20">*<pos:position pos:line="89" pos:column="21"/></modifier></type><name pos:line="89" pos:column="21">err<pos:position pos:line="89" pos:column="24"/></name> <init pos:line="89" pos:column="25">= <expr><operator pos:line="89" pos:column="27">new<pos:position pos:line="89" pos:column="30"/></operator> <call><name pos:line="89" pos:column="31">ErrorState<pos:position pos:line="89" pos:column="41"/></name><argument_list pos:line="89" pos:column="41">(<argument><expr><name pos:line="89" pos:column="42">ERR_READ_ERROR<pos:position pos:line="89" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="58">Http<pos:position pos:line="89" pos:column="62"/></name><operator pos:line="89" pos:column="62">::<pos:position pos:line="89" pos:column="64"/></operator><name pos:line="89" pos:column="64">scBadGateway<pos:position pos:line="89" pos:column="76"/></name></name></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="78">fwd<pos:position pos:line="89" pos:column="81"/></name><operator pos:line="89" pos:column="81">-&gt;<pos:position pos:line="89" pos:column="86"/></operator><name pos:line="89" pos:column="83">request<pos:position pos:line="89" pos:column="90"/></name></name></expr></argument>)<pos:position pos:line="89" pos:column="91"/></argument_list></call></expr></init></decl>;<pos:position pos:line="89" pos:column="92"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="90" pos:column="9">err<pos:position pos:line="90" pos:column="12"/></name><operator pos:line="90" pos:column="12">-&gt;<pos:position pos:line="90" pos:column="17"/></operator><name pos:line="90" pos:column="14">xerrno<pos:position pos:line="90" pos:column="20"/></name></name> <operator pos:line="90" pos:column="21">=<pos:position pos:line="90" pos:column="22"/></operator> <name><name pos:line="90" pos:column="23">rd<pos:position pos:line="90" pos:column="25"/></name><operator pos:line="90" pos:column="25">.<pos:position pos:line="90" pos:column="26"/></operator><name pos:line="90" pos:column="26">xerrno<pos:position pos:line="90" pos:column="32"/></name></name></expr>;<pos:position pos:line="90" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="91" pos:column="9">fwd<pos:position pos:line="91" pos:column="12"/></name><operator pos:line="91" pos:column="12">-&gt;<pos:position pos:line="91" pos:column="17"/></operator><name pos:line="91" pos:column="14">fail<pos:position pos:line="91" pos:column="18"/></name></name><argument_list pos:line="91" pos:column="18">(<argument><expr><name pos:line="91" pos:column="19">err<pos:position pos:line="91" pos:column="22"/></name></expr></argument>)<pos:position pos:line="91" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="92" pos:column="9">flags<pos:position pos:line="92" pos:column="14"/></name><operator pos:line="92" pos:column="14">.<pos:position pos:line="92" pos:column="15"/></operator><name pos:line="92" pos:column="15">do_next_read<pos:position pos:line="92" pos:column="27"/></name></name> <operator pos:line="92" pos:column="28">=<pos:position pos:line="92" pos:column="29"/></operator> <literal type="boolean" pos:line="92" pos:column="30">false<pos:position pos:line="92" pos:column="35"/></literal></expr>;<pos:position pos:line="92" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">closeServer<pos:position pos:line="93" pos:column="20"/></name><argument_list pos:line="93" pos:column="20">()<pos:position pos:line="93" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="94" pos:column="9">mustStop<pos:position pos:line="94" pos:column="17"/></name><argument_list pos:line="94" pos:column="17">(<argument><expr><literal type="string" pos:line="94" pos:column="18">"HttpStateData::readReply"<pos:position pos:line="94" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="46"/></expr_stmt>
        <return pos:line="95" pos:column="9">return;<pos:position pos:line="95" pos:column="16"/></return>
    }<pos:position pos:line="96" pos:column="6"/></block></switch>

    <comment type="block" pos:line="98" pos:column="5">/* Process next response from buffer */</comment>
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">processReply<pos:position pos:line="99" pos:column="17"/></name><argument_list pos:line="99" pos:column="17">()<pos:position pos:line="99" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="20"/></expr_stmt>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
