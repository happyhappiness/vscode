<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7052_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">xgetaddrinfo<pos:position pos:line="2" pos:column="13"/></name> <parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">nodename<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">servname<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>,
              <parameter><decl><type><specifier pos:line="3" pos:column="15">const<pos:position pos:line="3" pos:column="20"/></specifier> <name><name pos:line="3" pos:column="21">struct<pos:position pos:line="3" pos:column="27"/></name> <name pos:line="3" pos:column="28">addrinfo<pos:position pos:line="3" pos:column="36"/></name></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">hints<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="3" pos:column="45">struct<pos:position pos:line="3" pos:column="51"/></name> <name pos:line="3" pos:column="52">addrinfo<pos:position pos:line="3" pos:column="60"/></name></name> <modifier pos:line="3" pos:column="61">*<pos:position pos:line="3" pos:column="62"/></modifier><modifier pos:line="3" pos:column="62">*<pos:position pos:line="3" pos:column="63"/></modifier></type><name pos:line="3" pos:column="63">res<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="67"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">hostent<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">hp<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">servent<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">servent<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">socktype<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">port<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">addrinfo<pos:position pos:line="9" pos:column="20"/></name></name></type> <name pos:line="9" pos:column="21">hint<pos:position pos:line="9" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="27">result<pos:position pos:line="9" pos:column="33"/></name></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">addrinfo<pos:position pos:line="10" pos:column="20"/></name></name> <modifier pos:line="10" pos:column="21">*<pos:position pos:line="10" pos:column="22"/></modifier></type><name pos:line="10" pos:column="22">ai<pos:position pos:line="10" pos:column="24"/></name></decl>, <modifier pos:line="10" pos:column="26">*<pos:position pos:line="10" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="10" pos:column="27">sai<pos:position pos:line="10" pos:column="30"/></name></decl>, <modifier pos:line="10" pos:column="32">*<pos:position pos:line="10" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="10" pos:column="33">eai<pos:position pos:line="10" pos:column="36"/></name></decl>;<pos:position pos:line="10" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier><modifier pos:line="11" pos:column="11">*<pos:position pos:line="11" pos:column="12"/></modifier></type><name pos:line="11" pos:column="12">addrs<pos:position pos:line="11" pos:column="17"/></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">servname<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">==<pos:position pos:line="13" pos:column="20"/></operator> <name pos:line="13" pos:column="21">NULL<pos:position pos:line="13" pos:column="25"/></name> <operator pos:line="13" pos:column="26">&amp;&amp;<pos:position pos:line="13" pos:column="36"/></operator> <name pos:line="13" pos:column="29">nodename<pos:position pos:line="13" pos:column="37"/></name> <operator pos:line="13" pos:column="38">==<pos:position pos:line="13" pos:column="40"/></operator> <name pos:line="13" pos:column="41">NULL<pos:position pos:line="13" pos:column="45"/></name></expr>)<pos:position pos:line="13" pos:column="46"/></condition><then pos:line="13" pos:column="46">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">EAI_NONAME<pos:position pos:line="14" pos:column="26"/></name></expr>;<pos:position pos:line="14" pos:column="27"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">memset<pos:position pos:line="16" pos:column="11"/></name> <argument_list pos:line="16" pos:column="12">(<argument><expr><operator pos:line="16" pos:column="13">&amp;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="14">result<pos:position pos:line="16" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="22">0<pos:position pos:line="16" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="25">sizeof <name pos:line="16" pos:column="32">result<pos:position pos:line="16" pos:column="38"/></name></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* default for hints */</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">hints<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">==<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">NULL<pos:position pos:line="19" pos:column="22"/></name></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23"> <block pos:line="19" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">memset<pos:position pos:line="20" pos:column="15"/></name> <argument_list pos:line="20" pos:column="16">(<argument><expr><operator pos:line="20" pos:column="17">&amp;<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="18">hint<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="24">0<pos:position pos:line="20" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="27">sizeof <name pos:line="20" pos:column="34">hint<pos:position pos:line="20" pos:column="38"/></name></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">hint<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">.<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">ai_family<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <name pos:line="21" pos:column="26">PF_UNSPEC<pos:position pos:line="21" pos:column="35"/></name></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">hints<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <operator pos:line="22" pos:column="17">&amp;<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="18">hint<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">servname<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">==<pos:position pos:line="25" pos:column="20"/></operator> <name pos:line="25" pos:column="21">NULL<pos:position pos:line="25" pos:column="25"/></name></expr>)<pos:position pos:line="25" pos:column="26"/></condition><then pos:line="25" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="9">port<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></expr_stmt></block></then>
    <else pos:line="27" pos:column="5">else <block pos:line="27" pos:column="10">{
        <comment type="block" pos:line="28" pos:column="9">/* check for tcp or udp sockets only */</comment>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name><name pos:line="29" pos:column="13">hints<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">ai_socktype<pos:position pos:line="29" pos:column="31"/></name></name> <operator pos:line="29" pos:column="32">==<pos:position pos:line="29" pos:column="34"/></operator> <name pos:line="29" pos:column="35">SOCK_STREAM<pos:position pos:line="29" pos:column="46"/></name></expr>)<pos:position pos:line="29" pos:column="47"/></condition><then pos:line="29" pos:column="47">
            <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="13">socktype<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">=<pos:position pos:line="30" pos:column="23"/></operator> <literal type="string" pos:line="30" pos:column="24">"tcp"<pos:position pos:line="30" pos:column="29"/></literal></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt></block></then>
        <elseif pos:line="31" pos:column="9">else <if pos:line="31" pos:column="14">if <condition pos:line="31" pos:column="17">(<expr><name><name pos:line="31" pos:column="18">hints<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">-&gt;<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="25">ai_socktype<pos:position pos:line="31" pos:column="36"/></name></name> <operator pos:line="31" pos:column="37">==<pos:position pos:line="31" pos:column="39"/></operator> <name pos:line="31" pos:column="40">SOCK_DGRAM<pos:position pos:line="31" pos:column="50"/></name></expr>)<pos:position pos:line="31" pos:column="51"/></condition><then pos:line="31" pos:column="51">
            <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="13">socktype<pos:position pos:line="32" pos:column="21"/></name> <operator pos:line="32" pos:column="22">=<pos:position pos:line="32" pos:column="23"/></operator> <literal type="string" pos:line="32" pos:column="24">"udp"<pos:position pos:line="32" pos:column="29"/></literal></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt></block></then></if></elseif>
        <else pos:line="33" pos:column="9">else
            <block type="pseudo"><return pos:line="34" pos:column="13">return <expr><name pos:line="34" pos:column="20">EAI_SERVICE<pos:position pos:line="34" pos:column="31"/></name></expr>;<pos:position pos:line="34" pos:column="32"/></return></block></else></if>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">result<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">.<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="16">ai_socktype<pos:position pos:line="35" pos:column="27"/></name></name> <operator pos:line="35" pos:column="28">=<pos:position pos:line="35" pos:column="29"/></operator> <name><name pos:line="35" pos:column="30">hints<pos:position pos:line="35" pos:column="35"/></name><operator pos:line="35" pos:column="35">-&gt;<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="37">ai_socktype<pos:position pos:line="35" pos:column="48"/></name></name></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>

        <comment type="block" pos:line="37" pos:column="9">/* Note: maintain port in host byte order to make debugging easier */</comment>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">isdigit<pos:position pos:line="38" pos:column="20"/></name> <argument_list pos:line="38" pos:column="21">(<argument><expr><operator pos:line="38" pos:column="22">*<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">servname<pos:position pos:line="38" pos:column="31"/></name></expr></argument>)<pos:position pos:line="38" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="33"/></condition><then pos:line="38" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="13">port<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">=<pos:position pos:line="39" pos:column="19"/></operator> <call><name pos:line="39" pos:column="20">strtol<pos:position pos:line="39" pos:column="26"/></name> <argument_list pos:line="39" pos:column="27">(<argument><expr><name pos:line="39" pos:column="28">servname<pos:position pos:line="39" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="38">NULL<pos:position pos:line="39" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="44">10<pos:position pos:line="39" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="48"/></expr_stmt></block></then>
        <elseif pos:line="40" pos:column="9">else <if pos:line="40" pos:column="14">if <condition pos:line="40" pos:column="17">(<expr><operator pos:line="40" pos:column="18">(<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="19">servent<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">=<pos:position pos:line="40" pos:column="28"/></operator> <call><name pos:line="40" pos:column="29">getservbyname<pos:position pos:line="40" pos:column="42"/></name> <argument_list pos:line="40" pos:column="43">(<argument><expr><name pos:line="40" pos:column="44">servname<pos:position pos:line="40" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="54">socktype<pos:position pos:line="40" pos:column="62"/></name></expr></argument>)<pos:position pos:line="40" pos:column="63"/></argument_list></call><operator pos:line="40" pos:column="63">)<pos:position pos:line="40" pos:column="64"/></operator> <operator pos:line="40" pos:column="65">!=<pos:position pos:line="40" pos:column="67"/></operator> <name pos:line="40" pos:column="68">NULL<pos:position pos:line="40" pos:column="72"/></name></expr>)<pos:position pos:line="40" pos:column="73"/></condition><then pos:line="40" pos:column="73">
            <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="13">port<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <call><name pos:line="41" pos:column="20">ntohs<pos:position pos:line="41" pos:column="25"/></name> <argument_list pos:line="41" pos:column="26">(<argument><expr><name><name pos:line="41" pos:column="27">servent<pos:position pos:line="41" pos:column="34"/></name><operator pos:line="41" pos:column="34">-&gt;<pos:position pos:line="41" pos:column="39"/></operator><name pos:line="41" pos:column="36">s_port<pos:position pos:line="41" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="44"/></expr_stmt></block></then></if></elseif>
        <else pos:line="42" pos:column="9">else
            <block type="pseudo"><return pos:line="43" pos:column="13">return <expr><name pos:line="43" pos:column="20">EAI_NONAME<pos:position pos:line="43" pos:column="30"/></name></expr>;<pos:position pos:line="43" pos:column="31"/></return></block></else></if>
    }<pos:position pos:line="44" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="46" pos:column="5">/* if nodename == NULL refer to the local host for a client or any
       for a server */</comment>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">nodename<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">==<pos:position pos:line="48" pos:column="20"/></operator> <name pos:line="48" pos:column="21">NULL<pos:position pos:line="48" pos:column="25"/></name></expr>)<pos:position pos:line="48" pos:column="26"/></condition><then pos:line="48" pos:column="26"> <block pos:line="48" pos:column="27">{
        <decl_stmt><decl><type><name><name pos:line="49" pos:column="9">struct<pos:position pos:line="49" pos:column="15"/></name> <name pos:line="49" pos:column="16">sockaddr_in<pos:position pos:line="49" pos:column="27"/></name></name></type> <name pos:line="49" pos:column="28">sin<pos:position pos:line="49" pos:column="31"/></name></decl>;<pos:position pos:line="49" pos:column="32"/></decl_stmt>

        <comment type="block" pos:line="51" pos:column="9">/* check protocol family is PF_UNSPEC or PF_INET - could try harder
           for IPv6 but that's more code than I'm prepared to write */</comment>
        <if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name><name pos:line="53" pos:column="13">hints<pos:position pos:line="53" pos:column="18"/></name><operator pos:line="53" pos:column="18">-&gt;<pos:position pos:line="53" pos:column="23"/></operator><name pos:line="53" pos:column="20">ai_family<pos:position pos:line="53" pos:column="29"/></name></name> <operator pos:line="53" pos:column="30">==<pos:position pos:line="53" pos:column="32"/></operator> <name pos:line="53" pos:column="33">PF_UNSPEC<pos:position pos:line="53" pos:column="42"/></name> <operator pos:line="53" pos:column="43">||<pos:position pos:line="53" pos:column="45"/></operator> <name><name pos:line="53" pos:column="46">hints<pos:position pos:line="53" pos:column="51"/></name><operator pos:line="53" pos:column="51">-&gt;<pos:position pos:line="53" pos:column="56"/></operator><name pos:line="53" pos:column="53">ai_family<pos:position pos:line="53" pos:column="62"/></name></name> <operator pos:line="53" pos:column="63">==<pos:position pos:line="53" pos:column="65"/></operator> <name pos:line="53" pos:column="66">PF_INET<pos:position pos:line="53" pos:column="73"/></name></expr>)<pos:position pos:line="53" pos:column="74"/></condition><then pos:line="53" pos:column="74">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="54" pos:column="13">result<pos:position pos:line="54" pos:column="19"/></name><operator pos:line="54" pos:column="19">.<pos:position pos:line="54" pos:column="20"/></operator><name pos:line="54" pos:column="20">ai_family<pos:position pos:line="54" pos:column="29"/></name></name> <operator pos:line="54" pos:column="30">=<pos:position pos:line="54" pos:column="31"/></operator> <name pos:line="54" pos:column="32">AF_INET<pos:position pos:line="54" pos:column="39"/></name></expr>;<pos:position pos:line="54" pos:column="40"/></expr_stmt></block></then>
        <else pos:line="55" pos:column="9">else
            <block type="pseudo"><return pos:line="56" pos:column="13">return <expr><name pos:line="56" pos:column="20">EAI_FAMILY<pos:position pos:line="56" pos:column="30"/></name></expr>;<pos:position pos:line="56" pos:column="31"/></return></block></else></if>

        <expr_stmt><expr><name><name pos:line="58" pos:column="9">sin<pos:position pos:line="58" pos:column="12"/></name><operator pos:line="58" pos:column="12">.<pos:position pos:line="58" pos:column="13"/></operator><name pos:line="58" pos:column="13">sin_family<pos:position pos:line="58" pos:column="23"/></name></name> <operator pos:line="58" pos:column="24">=<pos:position pos:line="58" pos:column="25"/></operator> <name><name pos:line="58" pos:column="26">result<pos:position pos:line="58" pos:column="32"/></name><operator pos:line="58" pos:column="32">.<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="33">ai_family<pos:position pos:line="58" pos:column="42"/></name></name></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">sin<pos:position pos:line="59" pos:column="12"/></name><operator pos:line="59" pos:column="12">.<pos:position pos:line="59" pos:column="13"/></operator><name pos:line="59" pos:column="13">sin_port<pos:position pos:line="59" pos:column="21"/></name></name> <operator pos:line="59" pos:column="22">=<pos:position pos:line="59" pos:column="23"/></operator> <call><name pos:line="59" pos:column="24">htons<pos:position pos:line="59" pos:column="29"/></name> <argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">port<pos:position pos:line="59" pos:column="35"/></name></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>
        <if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name><name pos:line="60" pos:column="13">hints<pos:position pos:line="60" pos:column="18"/></name><operator pos:line="60" pos:column="18">-&gt;<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="20">ai_flags<pos:position pos:line="60" pos:column="28"/></name></name> <operator pos:line="60" pos:column="29">&amp;<pos:position pos:line="60" pos:column="34"/></operator> <name pos:line="60" pos:column="31">AI_PASSIVE<pos:position pos:line="60" pos:column="41"/></name></expr>)<pos:position pos:line="60" pos:column="42"/></condition><then pos:line="60" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="61" pos:column="13">sin<pos:position pos:line="61" pos:column="16"/></name><operator pos:line="61" pos:column="16">.<pos:position pos:line="61" pos:column="17"/></operator><name pos:line="61" pos:column="17">sin_addr<pos:position pos:line="61" pos:column="25"/></name><operator pos:line="61" pos:column="25">.<pos:position pos:line="61" pos:column="26"/></operator><name pos:line="61" pos:column="26">s_addr<pos:position pos:line="61" pos:column="32"/></name></name> <operator pos:line="61" pos:column="33">=<pos:position pos:line="61" pos:column="34"/></operator> <call><name pos:line="61" pos:column="35">htonl<pos:position pos:line="61" pos:column="40"/></name> <argument_list pos:line="61" pos:column="41">(<argument><expr><name pos:line="61" pos:column="42">INADDR_ANY<pos:position pos:line="61" pos:column="52"/></name></expr></argument>)<pos:position pos:line="61" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="54"/></expr_stmt></block></then>
        <else pos:line="62" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="63" pos:column="13">sin<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">.<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="17">sin_addr<pos:position pos:line="63" pos:column="25"/></name><operator pos:line="63" pos:column="25">.<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="26">s_addr<pos:position pos:line="63" pos:column="32"/></name></name> <operator pos:line="63" pos:column="33">=<pos:position pos:line="63" pos:column="34"/></operator> <call><name pos:line="63" pos:column="35">htonl<pos:position pos:line="63" pos:column="40"/></name> <argument_list pos:line="63" pos:column="41">(<argument><expr><name pos:line="63" pos:column="42">INADDR_LOOPBACK<pos:position pos:line="63" pos:column="57"/></name></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="59"/></expr_stmt></block></else></if>
        <comment type="block" pos:line="64" pos:column="9">/* Duplicate result and addr and return */</comment>
        <expr_stmt><expr><operator pos:line="65" pos:column="9">*<pos:position pos:line="65" pos:column="10"/></operator><name pos:line="65" pos:column="10">res<pos:position pos:line="65" pos:column="13"/></name> <operator pos:line="65" pos:column="14">=<pos:position pos:line="65" pos:column="15"/></operator> <call><name pos:line="65" pos:column="16">dup_addrinfo<pos:position pos:line="65" pos:column="28"/></name> <argument_list pos:line="65" pos:column="29">(<argument><expr><operator pos:line="65" pos:column="30">&amp;<pos:position pos:line="65" pos:column="35"/></operator><name pos:line="65" pos:column="31">result<pos:position pos:line="65" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="39">&amp;<pos:position pos:line="65" pos:column="44"/></operator><name pos:line="65" pos:column="40">sin<pos:position pos:line="65" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="65" pos:column="45">sizeof <name pos:line="65" pos:column="52">sin<pos:position pos:line="65" pos:column="55"/></name></sizeof></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="57"/></expr_stmt>
        <return pos:line="66" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="66" pos:column="16">(<pos:position pos:line="66" pos:column="17"/></operator><operator pos:line="66" pos:column="17">*<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="18">res<pos:position pos:line="66" pos:column="21"/></name> <operator pos:line="66" pos:column="22">==<pos:position pos:line="66" pos:column="24"/></operator> <name pos:line="66" pos:column="25">NULL<pos:position pos:line="66" pos:column="29"/></name><operator pos:line="66" pos:column="29">)<pos:position pos:line="66" pos:column="30"/></operator></expr> ?<pos:position pos:line="66" pos:column="32"/></condition><then pos:line="66" pos:column="32"> <expr><name pos:line="66" pos:column="33">EAI_MEMORY<pos:position pos:line="66" pos:column="43"/></name></expr> <pos:position pos:line="66" pos:column="44"/></then><else pos:line="66" pos:column="44">: <expr><literal type="number" pos:line="66" pos:column="46">0<pos:position pos:line="66" pos:column="47"/></literal></expr></else></ternary></expr>;<pos:position pos:line="66" pos:column="48"/></return>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="69" pos:column="5">/* If AI_NUMERIC is specified, use inet_pton to translate numbers and
       dots notation. */</comment>
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name><name pos:line="71" pos:column="9">hints<pos:position pos:line="71" pos:column="14"/></name><operator pos:line="71" pos:column="14">-&gt;<pos:position pos:line="71" pos:column="19"/></operator><name pos:line="71" pos:column="16">ai_flags<pos:position pos:line="71" pos:column="24"/></name></name> <operator pos:line="71" pos:column="25">&amp;<pos:position pos:line="71" pos:column="30"/></operator> <name pos:line="71" pos:column="27">AI_NUMERICHOST<pos:position pos:line="71" pos:column="41"/></name></expr>)<pos:position pos:line="71" pos:column="42"/></condition><then pos:line="71" pos:column="42"> <block pos:line="71" pos:column="43">{
        <decl_stmt><decl><type><name><name pos:line="72" pos:column="9">struct<pos:position pos:line="72" pos:column="15"/></name> <name pos:line="72" pos:column="16">sockaddr_in<pos:position pos:line="72" pos:column="27"/></name></name></type> <name pos:line="72" pos:column="28">sin<pos:position pos:line="72" pos:column="31"/></name></decl>;<pos:position pos:line="72" pos:column="32"/></decl_stmt>

        <comment type="block" pos:line="74" pos:column="9">/* check protocol family is PF_UNSPEC or PF_INET */</comment>
        <if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name><name pos:line="75" pos:column="13">hints<pos:position pos:line="75" pos:column="18"/></name><operator pos:line="75" pos:column="18">-&gt;<pos:position pos:line="75" pos:column="23"/></operator><name pos:line="75" pos:column="20">ai_family<pos:position pos:line="75" pos:column="29"/></name></name> <operator pos:line="75" pos:column="30">==<pos:position pos:line="75" pos:column="32"/></operator> <name pos:line="75" pos:column="33">PF_UNSPEC<pos:position pos:line="75" pos:column="42"/></name> <operator pos:line="75" pos:column="43">||<pos:position pos:line="75" pos:column="45"/></operator> <name><name pos:line="75" pos:column="46">hints<pos:position pos:line="75" pos:column="51"/></name><operator pos:line="75" pos:column="51">-&gt;<pos:position pos:line="75" pos:column="56"/></operator><name pos:line="75" pos:column="53">ai_family<pos:position pos:line="75" pos:column="62"/></name></name> <operator pos:line="75" pos:column="63">==<pos:position pos:line="75" pos:column="65"/></operator> <name pos:line="75" pos:column="66">PF_INET<pos:position pos:line="75" pos:column="73"/></name></expr>)<pos:position pos:line="75" pos:column="74"/></condition><then pos:line="75" pos:column="74">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="76" pos:column="13">result<pos:position pos:line="76" pos:column="19"/></name><operator pos:line="76" pos:column="19">.<pos:position pos:line="76" pos:column="20"/></operator><name pos:line="76" pos:column="20">ai_family<pos:position pos:line="76" pos:column="29"/></name></name> <operator pos:line="76" pos:column="30">=<pos:position pos:line="76" pos:column="31"/></operator> <name pos:line="76" pos:column="32">AF_INET<pos:position pos:line="76" pos:column="39"/></name></expr>;<pos:position pos:line="76" pos:column="40"/></expr_stmt></block></then>
        <else pos:line="77" pos:column="9">else
            <block type="pseudo"><return pos:line="78" pos:column="13">return <expr><name pos:line="78" pos:column="20">EAI_FAMILY<pos:position pos:line="78" pos:column="30"/></name></expr>;<pos:position pos:line="78" pos:column="31"/></return></block></else></if>

        <expr_stmt><expr><name><name pos:line="80" pos:column="9">sin<pos:position pos:line="80" pos:column="12"/></name><operator pos:line="80" pos:column="12">.<pos:position pos:line="80" pos:column="13"/></operator><name pos:line="80" pos:column="13">sin_family<pos:position pos:line="80" pos:column="23"/></name></name> <operator pos:line="80" pos:column="24">=<pos:position pos:line="80" pos:column="25"/></operator> <name><name pos:line="80" pos:column="26">result<pos:position pos:line="80" pos:column="32"/></name><operator pos:line="80" pos:column="32">.<pos:position pos:line="80" pos:column="33"/></operator><name pos:line="80" pos:column="33">ai_family<pos:position pos:line="80" pos:column="42"/></name></name></expr>;<pos:position pos:line="80" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="81" pos:column="9">sin<pos:position pos:line="81" pos:column="12"/></name><operator pos:line="81" pos:column="12">.<pos:position pos:line="81" pos:column="13"/></operator><name pos:line="81" pos:column="13">sin_port<pos:position pos:line="81" pos:column="21"/></name></name> <operator pos:line="81" pos:column="22">=<pos:position pos:line="81" pos:column="23"/></operator> <call><name pos:line="81" pos:column="24">htons<pos:position pos:line="81" pos:column="29"/></name> <argument_list pos:line="81" pos:column="30">(<argument><expr><name pos:line="81" pos:column="31">port<pos:position pos:line="81" pos:column="35"/></name></expr></argument>)<pos:position pos:line="81" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="37"/></expr_stmt>
        <if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><call><name pos:line="82" pos:column="13">inet_pton<pos:position pos:line="82" pos:column="22"/></name><argument_list pos:line="82" pos:column="22">(<argument><expr><name><name pos:line="82" pos:column="23">result<pos:position pos:line="82" pos:column="29"/></name><operator pos:line="82" pos:column="29">.<pos:position pos:line="82" pos:column="30"/></operator><name pos:line="82" pos:column="30">ai_family<pos:position pos:line="82" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="41">nodename<pos:position pos:line="82" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="51">&amp;<pos:position pos:line="82" pos:column="56"/></operator><name><name pos:line="82" pos:column="52">sin<pos:position pos:line="82" pos:column="55"/></name><operator pos:line="82" pos:column="55">.<pos:position pos:line="82" pos:column="56"/></operator><name pos:line="82" pos:column="56">sin_addr<pos:position pos:line="82" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="66"/></condition><then pos:line="82" pos:column="66">
            <block type="pseudo"><return pos:line="83" pos:column="13">return <expr><name pos:line="83" pos:column="20">EAI_NONAME<pos:position pos:line="83" pos:column="30"/></name></expr>;<pos:position pos:line="83" pos:column="31"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="84" pos:column="9">sin<pos:position pos:line="84" pos:column="12"/></name><operator pos:line="84" pos:column="12">.<pos:position pos:line="84" pos:column="13"/></operator><name pos:line="84" pos:column="13">sin_addr<pos:position pos:line="84" pos:column="21"/></name><operator pos:line="84" pos:column="21">.<pos:position pos:line="84" pos:column="22"/></operator><name pos:line="84" pos:column="22">s_addr<pos:position pos:line="84" pos:column="28"/></name></name> <operator pos:line="84" pos:column="29">=<pos:position pos:line="84" pos:column="30"/></operator> <call><name pos:line="84" pos:column="31">inet_addr<pos:position pos:line="84" pos:column="40"/></name> <argument_list pos:line="84" pos:column="41">(<argument><expr><name pos:line="84" pos:column="42">nodename<pos:position pos:line="84" pos:column="50"/></name></expr></argument>)<pos:position pos:line="84" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="52"/></expr_stmt>
        <comment type="block" pos:line="85" pos:column="9">/* Duplicate result and addr and return */</comment>
        <expr_stmt><expr><operator pos:line="86" pos:column="9">*<pos:position pos:line="86" pos:column="10"/></operator><name pos:line="86" pos:column="10">res<pos:position pos:line="86" pos:column="13"/></name> <operator pos:line="86" pos:column="14">=<pos:position pos:line="86" pos:column="15"/></operator> <call><name pos:line="86" pos:column="16">dup_addrinfo<pos:position pos:line="86" pos:column="28"/></name> <argument_list pos:line="86" pos:column="29">(<argument><expr><operator pos:line="86" pos:column="30">&amp;<pos:position pos:line="86" pos:column="35"/></operator><name pos:line="86" pos:column="31">result<pos:position pos:line="86" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="39">&amp;<pos:position pos:line="86" pos:column="44"/></operator><name pos:line="86" pos:column="40">sin<pos:position pos:line="86" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="86" pos:column="45">sizeof <name pos:line="86" pos:column="52">sin<pos:position pos:line="86" pos:column="55"/></name></sizeof></expr></argument>)<pos:position pos:line="86" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="57"/></expr_stmt>
        <return pos:line="87" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="87" pos:column="16">(<pos:position pos:line="87" pos:column="17"/></operator><operator pos:line="87" pos:column="17">*<pos:position pos:line="87" pos:column="18"/></operator><name pos:line="87" pos:column="18">res<pos:position pos:line="87" pos:column="21"/></name> <operator pos:line="87" pos:column="22">==<pos:position pos:line="87" pos:column="24"/></operator> <name pos:line="87" pos:column="25">NULL<pos:position pos:line="87" pos:column="29"/></name><operator pos:line="87" pos:column="29">)<pos:position pos:line="87" pos:column="30"/></operator></expr> ?<pos:position pos:line="87" pos:column="32"/></condition><then pos:line="87" pos:column="32"> <expr><name pos:line="87" pos:column="33">EAI_MEMORY<pos:position pos:line="87" pos:column="43"/></name></expr> <pos:position pos:line="87" pos:column="44"/></then><else pos:line="87" pos:column="44">: <expr><literal type="number" pos:line="87" pos:column="46">0<pos:position pos:line="87" pos:column="47"/></literal></expr></else></ternary></expr>;<pos:position pos:line="87" pos:column="48"/></return>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>

<cpp:if pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">if<pos:position pos:line="90" pos:column="4"/></cpp:directive> <expr><name pos:line="90" pos:column="5">HAVE_H_ERRNO<pos:position pos:line="90" pos:column="17"/></name></expr></cpp:if>
    <expr_stmt><expr><name pos:line="91" pos:column="5">h_errno<pos:position pos:line="91" pos:column="12"/></name> <operator pos:line="91" pos:column="13">=<pos:position pos:line="91" pos:column="14"/></operator> <literal type="number" pos:line="91" pos:column="15">0<pos:position pos:line="91" pos:column="16"/></literal></expr>;<pos:position pos:line="91" pos:column="17"/></expr_stmt>
<cpp:endif pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">endif<pos:position pos:line="92" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="93" pos:column="5">errno<pos:position pos:line="93" pos:column="10"/></name> <operator pos:line="93" pos:column="11">=<pos:position pos:line="93" pos:column="12"/></operator> <literal type="number" pos:line="93" pos:column="13">0<pos:position pos:line="93" pos:column="14"/></literal></expr>;<pos:position pos:line="93" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="94" pos:column="5">hp<pos:position pos:line="94" pos:column="7"/></name> <operator pos:line="94" pos:column="8">=<pos:position pos:line="94" pos:column="9"/></operator> <call><name pos:line="94" pos:column="10">gethostbyname<pos:position pos:line="94" pos:column="23"/></name><argument_list pos:line="94" pos:column="23">(<argument><expr><name pos:line="94" pos:column="24">nodename<pos:position pos:line="94" pos:column="32"/></name></expr></argument>)<pos:position pos:line="94" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="34"/></expr_stmt>
    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><name pos:line="95" pos:column="9">hp<pos:position pos:line="95" pos:column="11"/></name> <operator pos:line="95" pos:column="12">==<pos:position pos:line="95" pos:column="14"/></operator> <name pos:line="95" pos:column="15">NULL<pos:position pos:line="95" pos:column="19"/></name></expr>)<pos:position pos:line="95" pos:column="20"/></condition><then pos:line="95" pos:column="20"> <block pos:line="95" pos:column="21">{
<cpp:ifdef pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">ifdef<pos:position pos:line="96" pos:column="7"/></cpp:directive> <name pos:line="96" pos:column="8">EAI_SYSTEM<pos:position pos:line="96" pos:column="18"/></name></cpp:ifdef>
        <if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name pos:line="97" pos:column="13">errno<pos:position pos:line="97" pos:column="18"/></name> <operator pos:line="97" pos:column="19">!=<pos:position pos:line="97" pos:column="21"/></operator> <literal type="number" pos:line="97" pos:column="22">0<pos:position pos:line="97" pos:column="23"/></literal></expr>)<pos:position pos:line="97" pos:column="24"/></condition><then pos:line="97" pos:column="24"> <block pos:line="97" pos:column="25">{
            <return pos:line="98" pos:column="13">return <expr><name pos:line="98" pos:column="20">EAI_SYSTEM<pos:position pos:line="98" pos:column="30"/></name></expr>;<pos:position pos:line="98" pos:column="31"/></return>
        }<pos:position pos:line="99" pos:column="10"/></block></then></if>
<cpp:endif pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">endif<pos:position pos:line="100" pos:column="7"/></cpp:directive></cpp:endif>
        <switch pos:line="101" pos:column="9">switch <condition pos:line="101" pos:column="16">(<expr><name pos:line="101" pos:column="17">h_errno<pos:position pos:line="101" pos:column="24"/></name></expr>)<pos:position pos:line="101" pos:column="25"/></condition> <block pos:line="101" pos:column="26">{
        <case pos:line="102" pos:column="9">case <expr><name pos:line="102" pos:column="14">HOST_NOT_FOUND<pos:position pos:line="102" pos:column="28"/></name></expr>:<pos:position pos:line="102" pos:column="29"/></case>
            <return pos:line="103" pos:column="13">return <expr><name pos:line="103" pos:column="20">EAI_NODATA<pos:position pos:line="103" pos:column="30"/></name></expr>;<pos:position pos:line="103" pos:column="31"/></return>
        <case pos:line="104" pos:column="9">case <expr><name pos:line="104" pos:column="14">NO_DATA<pos:position pos:line="104" pos:column="21"/></name></expr>:<pos:position pos:line="104" pos:column="22"/></case>
            <return pos:line="105" pos:column="13">return <expr><name pos:line="105" pos:column="20">EAI_NODATA<pos:position pos:line="105" pos:column="30"/></name></expr>;<pos:position pos:line="105" pos:column="31"/></return>
<cpp:if pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">if<pos:position pos:line="106" pos:column="4"/></cpp:directive> <expr><call><name pos:line="106" pos:column="5">defined<pos:position pos:line="106" pos:column="12"/></name><argument_list pos:line="106" pos:column="12">(<argument><expr><name pos:line="106" pos:column="13">NO_ADDRESS<pos:position pos:line="106" pos:column="23"/></name></expr></argument>)<pos:position pos:line="106" pos:column="24"/></argument_list></call> <operator pos:line="106" pos:column="25">&amp;&amp;<pos:position pos:line="106" pos:column="35"/></operator> <name pos:line="106" pos:column="28">NO_ADDRESS<pos:position pos:line="106" pos:column="38"/></name> <operator pos:line="106" pos:column="39">!=<pos:position pos:line="106" pos:column="41"/></operator> <name pos:line="106" pos:column="42">NO_DATA<pos:position pos:line="106" pos:column="49"/></name></expr></cpp:if>
        <case pos:line="107" pos:column="9">case <expr><name pos:line="107" pos:column="14">NO_ADDRESS<pos:position pos:line="107" pos:column="24"/></name></expr>:<pos:position pos:line="107" pos:column="25"/></case>
            <return pos:line="108" pos:column="13">return <expr><name pos:line="108" pos:column="20">EAI_NODATA<pos:position pos:line="108" pos:column="30"/></name></expr>;<pos:position pos:line="108" pos:column="31"/></return>
<cpp:endif pos:line="109" pos:column="1">#<cpp:directive pos:line="109" pos:column="2">endif<pos:position pos:line="109" pos:column="7"/></cpp:directive></cpp:endif>
        <case pos:line="110" pos:column="9">case <expr><name pos:line="110" pos:column="14">NO_RECOVERY<pos:position pos:line="110" pos:column="25"/></name></expr>:<pos:position pos:line="110" pos:column="26"/></case>
            <return pos:line="111" pos:column="13">return <expr><name pos:line="111" pos:column="20">EAI_FAIL<pos:position pos:line="111" pos:column="28"/></name></expr>;<pos:position pos:line="111" pos:column="29"/></return>
        <case pos:line="112" pos:column="9">case <expr><name pos:line="112" pos:column="14">TRY_AGAIN<pos:position pos:line="112" pos:column="23"/></name></expr>:<pos:position pos:line="112" pos:column="24"/></case>
            <return pos:line="113" pos:column="13">return <expr><name pos:line="113" pos:column="20">EAI_AGAIN<pos:position pos:line="113" pos:column="29"/></name></expr>;<pos:position pos:line="113" pos:column="30"/></return>
        <default pos:line="114" pos:column="9">default:<pos:position pos:line="114" pos:column="17"/></default>
            <return pos:line="115" pos:column="13">return <expr><name pos:line="115" pos:column="20">EAI_FAIL<pos:position pos:line="115" pos:column="28"/></name></expr>;<pos:position pos:line="115" pos:column="29"/></return>
        }<pos:position pos:line="116" pos:column="10"/></block></switch>
        <return pos:line="117" pos:column="9">return <expr><name pos:line="117" pos:column="16">EAI_FAIL<pos:position pos:line="117" pos:column="24"/></name></expr>;<pos:position pos:line="117" pos:column="25"/></return>
    }<pos:position pos:line="118" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="120" pos:column="5">/* Check that the address family is acceptable.
     */</comment>
    <switch pos:line="122" pos:column="5">switch <condition pos:line="122" pos:column="12">(<expr><name><name pos:line="122" pos:column="13">hp<pos:position pos:line="122" pos:column="15"/></name><operator pos:line="122" pos:column="15">-&gt;<pos:position pos:line="122" pos:column="20"/></operator><name pos:line="122" pos:column="17">h_addrtype<pos:position pos:line="122" pos:column="27"/></name></name></expr>)<pos:position pos:line="122" pos:column="28"/></condition> <block pos:line="122" pos:column="29">{
    <case pos:line="123" pos:column="5">case <expr><name pos:line="123" pos:column="10">AF_INET<pos:position pos:line="123" pos:column="17"/></name></expr>:<pos:position pos:line="123" pos:column="18"/></case>
        <if pos:line="124" pos:column="9">if <condition pos:line="124" pos:column="12">(<expr><operator pos:line="124" pos:column="13">!<pos:position pos:line="124" pos:column="14"/></operator><operator pos:line="124" pos:column="14">(<pos:position pos:line="124" pos:column="15"/></operator><name><name pos:line="124" pos:column="15">hints<pos:position pos:line="124" pos:column="20"/></name><operator pos:line="124" pos:column="20">-&gt;<pos:position pos:line="124" pos:column="25"/></operator><name pos:line="124" pos:column="22">ai_family<pos:position pos:line="124" pos:column="31"/></name></name> <operator pos:line="124" pos:column="32">==<pos:position pos:line="124" pos:column="34"/></operator> <name pos:line="124" pos:column="35">PF_UNSPEC<pos:position pos:line="124" pos:column="44"/></name> <operator pos:line="124" pos:column="45">||<pos:position pos:line="124" pos:column="47"/></operator> <name><name pos:line="124" pos:column="48">hints<pos:position pos:line="124" pos:column="53"/></name><operator pos:line="124" pos:column="53">-&gt;<pos:position pos:line="124" pos:column="58"/></operator><name pos:line="124" pos:column="55">ai_family<pos:position pos:line="124" pos:column="64"/></name></name> <operator pos:line="124" pos:column="65">==<pos:position pos:line="124" pos:column="67"/></operator> <name pos:line="124" pos:column="68">PF_INET<pos:position pos:line="124" pos:column="75"/></name><operator pos:line="124" pos:column="75">)<pos:position pos:line="124" pos:column="76"/></operator></expr>)<pos:position pos:line="124" pos:column="77"/></condition><then pos:line="124" pos:column="77">
            <block type="pseudo"><return pos:line="125" pos:column="13">return <expr><name pos:line="125" pos:column="20">EAI_FAMILY<pos:position pos:line="125" pos:column="30"/></name></expr>;<pos:position pos:line="125" pos:column="31"/></return></block></then></if>
        <break pos:line="126" pos:column="9">break;<pos:position pos:line="126" pos:column="15"/></break>
    <case pos:line="127" pos:column="5">case <expr><name pos:line="127" pos:column="10">AF_INET6<pos:position pos:line="127" pos:column="18"/></name></expr>:<pos:position pos:line="127" pos:column="19"/></case>
        <if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">(<expr><operator pos:line="128" pos:column="13">!<pos:position pos:line="128" pos:column="14"/></operator><operator pos:line="128" pos:column="14">(<pos:position pos:line="128" pos:column="15"/></operator><name><name pos:line="128" pos:column="15">hints<pos:position pos:line="128" pos:column="20"/></name><operator pos:line="128" pos:column="20">-&gt;<pos:position pos:line="128" pos:column="25"/></operator><name pos:line="128" pos:column="22">ai_family<pos:position pos:line="128" pos:column="31"/></name></name> <operator pos:line="128" pos:column="32">==<pos:position pos:line="128" pos:column="34"/></operator> <name pos:line="128" pos:column="35">PF_UNSPEC<pos:position pos:line="128" pos:column="44"/></name> <operator pos:line="128" pos:column="45">||<pos:position pos:line="128" pos:column="47"/></operator> <name><name pos:line="128" pos:column="48">hints<pos:position pos:line="128" pos:column="53"/></name><operator pos:line="128" pos:column="53">-&gt;<pos:position pos:line="128" pos:column="58"/></operator><name pos:line="128" pos:column="55">ai_family<pos:position pos:line="128" pos:column="64"/></name></name> <operator pos:line="128" pos:column="65">==<pos:position pos:line="128" pos:column="67"/></operator> <name pos:line="128" pos:column="68">PF_INET6<pos:position pos:line="128" pos:column="76"/></name><operator pos:line="128" pos:column="76">)<pos:position pos:line="128" pos:column="77"/></operator></expr>)<pos:position pos:line="128" pos:column="78"/></condition><then pos:line="128" pos:column="78">
            <block type="pseudo"><return pos:line="129" pos:column="13">return <expr><name pos:line="129" pos:column="20">EAI_FAMILY<pos:position pos:line="129" pos:column="30"/></name></expr>;<pos:position pos:line="129" pos:column="31"/></return></block></then></if>
        <break pos:line="130" pos:column="9">break;<pos:position pos:line="130" pos:column="15"/></break>
    <default pos:line="131" pos:column="5">default:<pos:position pos:line="131" pos:column="13"/></default>
        <return pos:line="132" pos:column="9">return <expr><name pos:line="132" pos:column="16">EAI_FAMILY<pos:position pos:line="132" pos:column="26"/></name></expr>;<pos:position pos:line="132" pos:column="27"/></return>
    }<pos:position pos:line="133" pos:column="6"/></block></switch>

    <comment type="block" pos:line="135" pos:column="5">/* For each element pointed to by hp, create an element in the
       result linked list. */</comment>
    <expr_stmt><expr><name pos:line="137" pos:column="5">sai<pos:position pos:line="137" pos:column="8"/></name> <operator pos:line="137" pos:column="9">=<pos:position pos:line="137" pos:column="10"/></operator> <name pos:line="137" pos:column="11">eai<pos:position pos:line="137" pos:column="14"/></name> <operator pos:line="137" pos:column="15">=<pos:position pos:line="137" pos:column="16"/></operator> <name pos:line="137" pos:column="17">NULL<pos:position pos:line="137" pos:column="21"/></name></expr>;<pos:position pos:line="137" pos:column="22"/></expr_stmt>
    <for pos:line="138" pos:column="5">for <control pos:line="138" pos:column="9">(<init><expr><name pos:line="138" pos:column="10">addrs<pos:position pos:line="138" pos:column="15"/></name> <operator pos:line="138" pos:column="16">=<pos:position pos:line="138" pos:column="17"/></operator> <name><name pos:line="138" pos:column="18">hp<pos:position pos:line="138" pos:column="20"/></name><operator pos:line="138" pos:column="20">-&gt;<pos:position pos:line="138" pos:column="25"/></operator><name pos:line="138" pos:column="22">h_addr_list<pos:position pos:line="138" pos:column="33"/></name></name></expr>;<pos:position pos:line="138" pos:column="34"/></init> <condition><expr><operator pos:line="138" pos:column="35">*<pos:position pos:line="138" pos:column="36"/></operator><name pos:line="138" pos:column="36">addrs<pos:position pos:line="138" pos:column="41"/></name> <operator pos:line="138" pos:column="42">!=<pos:position pos:line="138" pos:column="44"/></operator> <name pos:line="138" pos:column="45">NULL<pos:position pos:line="138" pos:column="49"/></name></expr>;<pos:position pos:line="138" pos:column="50"/></condition> <incr><expr><name pos:line="138" pos:column="51">addrs<pos:position pos:line="138" pos:column="56"/></name><operator pos:line="138" pos:column="56">++<pos:position pos:line="138" pos:column="58"/></operator></expr></incr>)<pos:position pos:line="138" pos:column="59"/></control> <block pos:line="138" pos:column="60">{
        <decl_stmt><decl><type><name><name pos:line="139" pos:column="9">struct<pos:position pos:line="139" pos:column="15"/></name> <name pos:line="139" pos:column="16">sockaddr<pos:position pos:line="139" pos:column="24"/></name></name></type> <name pos:line="139" pos:column="25">sa<pos:position pos:line="139" pos:column="27"/></name></decl>;<pos:position pos:line="139" pos:column="28"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="140" pos:column="9">size_t<pos:position pos:line="140" pos:column="15"/></name></type> <name pos:line="140" pos:column="16">addrlen<pos:position pos:line="140" pos:column="23"/></name></decl>;<pos:position pos:line="140" pos:column="24"/></decl_stmt>

        <if pos:line="142" pos:column="9">if <condition pos:line="142" pos:column="12">(<expr><name><name pos:line="142" pos:column="13">hp<pos:position pos:line="142" pos:column="15"/></name><operator pos:line="142" pos:column="15">-&gt;<pos:position pos:line="142" pos:column="20"/></operator><name pos:line="142" pos:column="17">h_length<pos:position pos:line="142" pos:column="25"/></name></name> <operator pos:line="142" pos:column="26">&lt;<pos:position pos:line="142" pos:column="30"/></operator> <literal type="number" pos:line="142" pos:column="28">1<pos:position pos:line="142" pos:column="29"/></literal></expr>)<pos:position pos:line="142" pos:column="30"/></condition><then pos:line="142" pos:column="30">
            <block type="pseudo"><continue pos:line="143" pos:column="13">continue;<pos:position pos:line="143" pos:column="22"/></continue></block></then></if>
        <expr_stmt><expr><name><name pos:line="144" pos:column="9">sa<pos:position pos:line="144" pos:column="11"/></name><operator pos:line="144" pos:column="11">.<pos:position pos:line="144" pos:column="12"/></operator><name pos:line="144" pos:column="12">sa_family<pos:position pos:line="144" pos:column="21"/></name></name> <operator pos:line="144" pos:column="22">=<pos:position pos:line="144" pos:column="23"/></operator> <name><name pos:line="144" pos:column="24">hp<pos:position pos:line="144" pos:column="26"/></name><operator pos:line="144" pos:column="26">-&gt;<pos:position pos:line="144" pos:column="31"/></operator><name pos:line="144" pos:column="28">h_addrtype<pos:position pos:line="144" pos:column="38"/></name></name></expr>;<pos:position pos:line="144" pos:column="39"/></expr_stmt>
        <switch pos:line="145" pos:column="9">switch <condition pos:line="145" pos:column="16">(<expr><name><name pos:line="145" pos:column="17">hp<pos:position pos:line="145" pos:column="19"/></name><operator pos:line="145" pos:column="19">-&gt;<pos:position pos:line="145" pos:column="24"/></operator><name pos:line="145" pos:column="21">h_addrtype<pos:position pos:line="145" pos:column="31"/></name></name></expr>)<pos:position pos:line="145" pos:column="32"/></condition> <block pos:line="145" pos:column="33">{
        <case pos:line="146" pos:column="9">case <expr><name pos:line="146" pos:column="14">AF_INET<pos:position pos:line="146" pos:column="21"/></name></expr>:<pos:position pos:line="146" pos:column="22"/></case>
            <expr_stmt><expr><operator pos:line="147" pos:column="13">(<pos:position pos:line="147" pos:column="14"/></operator><operator pos:line="147" pos:column="14">(<pos:position pos:line="147" pos:column="15"/></operator>struct <name pos:line="147" pos:column="22">sockaddr_in<pos:position pos:line="147" pos:column="33"/></name> <operator pos:line="147" pos:column="34">*<pos:position pos:line="147" pos:column="35"/></operator><operator pos:line="147" pos:column="35">)<pos:position pos:line="147" pos:column="36"/></operator> <operator pos:line="147" pos:column="37">&amp;<pos:position pos:line="147" pos:column="42"/></operator><name pos:line="147" pos:column="38">sa<pos:position pos:line="147" pos:column="40"/></name><operator pos:line="147" pos:column="40">)<pos:position pos:line="147" pos:column="41"/></operator><operator pos:line="147" pos:column="41">-&gt;<pos:position pos:line="147" pos:column="46"/></operator><name pos:line="147" pos:column="43">sin_port<pos:position pos:line="147" pos:column="51"/></name> <operator pos:line="147" pos:column="52">=<pos:position pos:line="147" pos:column="53"/></operator> <call><name pos:line="147" pos:column="54">htons<pos:position pos:line="147" pos:column="59"/></name> <argument_list pos:line="147" pos:column="60">(<argument><expr><name pos:line="147" pos:column="61">port<pos:position pos:line="147" pos:column="65"/></name></expr></argument>)<pos:position pos:line="147" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="67"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="148" pos:column="13">memcpy<pos:position pos:line="148" pos:column="19"/></name> <argument_list pos:line="148" pos:column="20">(<argument><expr><operator pos:line="148" pos:column="21">&amp;<pos:position pos:line="148" pos:column="26"/></operator><operator pos:line="148" pos:column="22">(<pos:position pos:line="148" pos:column="23"/></operator><operator pos:line="148" pos:column="23">(<pos:position pos:line="148" pos:column="24"/></operator>struct <name pos:line="148" pos:column="31">sockaddr_in<pos:position pos:line="148" pos:column="42"/></name> <operator pos:line="148" pos:column="43">*<pos:position pos:line="148" pos:column="44"/></operator><operator pos:line="148" pos:column="44">)<pos:position pos:line="148" pos:column="45"/></operator> <operator pos:line="148" pos:column="46">&amp;<pos:position pos:line="148" pos:column="51"/></operator><name pos:line="148" pos:column="47">sa<pos:position pos:line="148" pos:column="49"/></name><operator pos:line="148" pos:column="49">)<pos:position pos:line="148" pos:column="50"/></operator><operator pos:line="148" pos:column="50">-&gt;<pos:position pos:line="148" pos:column="55"/></operator><name pos:line="148" pos:column="52">sin_addr<pos:position pos:line="148" pos:column="60"/></name></expr></argument>,
                    <argument><expr><operator pos:line="149" pos:column="21">*<pos:position pos:line="149" pos:column="22"/></operator><name pos:line="149" pos:column="22">addrs<pos:position pos:line="149" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="149" pos:column="29">hp<pos:position pos:line="149" pos:column="31"/></name><operator pos:line="149" pos:column="31">-&gt;<pos:position pos:line="149" pos:column="36"/></operator><name pos:line="149" pos:column="33">h_length<pos:position pos:line="149" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="149" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name pos:line="150" pos:column="13">addrlen<pos:position pos:line="150" pos:column="20"/></name> <operator pos:line="150" pos:column="21">=<pos:position pos:line="150" pos:column="22"/></operator> <sizeof pos:line="150" pos:column="23">sizeof <argument_list pos:line="150" pos:column="30">(<argument><expr pos:line="150" pos:column="31">struct <name pos:line="150" pos:column="38">sockaddr_in<pos:position pos:line="150" pos:column="49"/></name></expr></argument>)<pos:position pos:line="150" pos:column="50"/></argument_list></sizeof></expr>;<pos:position pos:line="150" pos:column="51"/></expr_stmt>
            <break pos:line="151" pos:column="13">break;<pos:position pos:line="151" pos:column="19"/></break>
        <case pos:line="152" pos:column="9">case <expr><name pos:line="152" pos:column="14">AF_INET6<pos:position pos:line="152" pos:column="22"/></name></expr>:<pos:position pos:line="152" pos:column="23"/></case>
<cpp:if pos:line="153" pos:column="1">#<cpp:directive pos:line="153" pos:column="2">if<pos:position pos:line="153" pos:column="4"/></cpp:directive> <expr><name pos:line="153" pos:column="5">SIN6_LEN<pos:position pos:line="153" pos:column="13"/></name></expr></cpp:if>
            <expr_stmt><expr><operator pos:line="154" pos:column="13">(<pos:position pos:line="154" pos:column="14"/></operator><operator pos:line="154" pos:column="14">(<pos:position pos:line="154" pos:column="15"/></operator>struct <name pos:line="154" pos:column="22">sockaddr_in6<pos:position pos:line="154" pos:column="34"/></name> <operator pos:line="154" pos:column="35">*<pos:position pos:line="154" pos:column="36"/></operator><operator pos:line="154" pos:column="36">)<pos:position pos:line="154" pos:column="37"/></operator> <operator pos:line="154" pos:column="38">&amp;<pos:position pos:line="154" pos:column="43"/></operator><name pos:line="154" pos:column="39">sa<pos:position pos:line="154" pos:column="41"/></name><operator pos:line="154" pos:column="41">)<pos:position pos:line="154" pos:column="42"/></operator><operator pos:line="154" pos:column="42">-&gt;<pos:position pos:line="154" pos:column="47"/></operator><name pos:line="154" pos:column="44">sin6_len<pos:position pos:line="154" pos:column="52"/></name> <operator pos:line="154" pos:column="53">=<pos:position pos:line="154" pos:column="54"/></operator> <name><name pos:line="154" pos:column="55">hp<pos:position pos:line="154" pos:column="57"/></name><operator pos:line="154" pos:column="57">-&gt;<pos:position pos:line="154" pos:column="62"/></operator><name pos:line="154" pos:column="59">h_length<pos:position pos:line="154" pos:column="67"/></name></name></expr>;<pos:position pos:line="154" pos:column="68"/></expr_stmt>
<cpp:endif pos:line="155" pos:column="1">#<cpp:directive pos:line="155" pos:column="2">endif<pos:position pos:line="155" pos:column="7"/></cpp:directive></cpp:endif>
            <expr_stmt><expr><operator pos:line="156" pos:column="13">(<pos:position pos:line="156" pos:column="14"/></operator><operator pos:line="156" pos:column="14">(<pos:position pos:line="156" pos:column="15"/></operator>struct <name pos:line="156" pos:column="22">sockaddr_in6<pos:position pos:line="156" pos:column="34"/></name> <operator pos:line="156" pos:column="35">*<pos:position pos:line="156" pos:column="36"/></operator><operator pos:line="156" pos:column="36">)<pos:position pos:line="156" pos:column="37"/></operator> <operator pos:line="156" pos:column="38">&amp;<pos:position pos:line="156" pos:column="43"/></operator><name pos:line="156" pos:column="39">sa<pos:position pos:line="156" pos:column="41"/></name><operator pos:line="156" pos:column="41">)<pos:position pos:line="156" pos:column="42"/></operator><operator pos:line="156" pos:column="42">-&gt;<pos:position pos:line="156" pos:column="47"/></operator><name pos:line="156" pos:column="44">sin6_port<pos:position pos:line="156" pos:column="53"/></name> <operator pos:line="156" pos:column="54">=<pos:position pos:line="156" pos:column="55"/></operator> <call><name pos:line="156" pos:column="56">htons<pos:position pos:line="156" pos:column="61"/></name> <argument_list pos:line="156" pos:column="62">(<argument><expr><name pos:line="156" pos:column="63">port<pos:position pos:line="156" pos:column="67"/></name></expr></argument>)<pos:position pos:line="156" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="157" pos:column="13">memcpy<pos:position pos:line="157" pos:column="19"/></name> <argument_list pos:line="157" pos:column="20">(<argument><expr><operator pos:line="157" pos:column="21">&amp;<pos:position pos:line="157" pos:column="26"/></operator><operator pos:line="157" pos:column="22">(<pos:position pos:line="157" pos:column="23"/></operator><operator pos:line="157" pos:column="23">(<pos:position pos:line="157" pos:column="24"/></operator>struct <name pos:line="157" pos:column="31">sockaddr_in6<pos:position pos:line="157" pos:column="43"/></name> <operator pos:line="157" pos:column="44">*<pos:position pos:line="157" pos:column="45"/></operator><operator pos:line="157" pos:column="45">)<pos:position pos:line="157" pos:column="46"/></operator> <operator pos:line="157" pos:column="47">&amp;<pos:position pos:line="157" pos:column="52"/></operator><name pos:line="157" pos:column="48">sa<pos:position pos:line="157" pos:column="50"/></name><operator pos:line="157" pos:column="50">)<pos:position pos:line="157" pos:column="51"/></operator><operator pos:line="157" pos:column="51">-&gt;<pos:position pos:line="157" pos:column="56"/></operator><name pos:line="157" pos:column="53">sin6_addr<pos:position pos:line="157" pos:column="62"/></name></expr></argument>,
                    <argument><expr><operator pos:line="158" pos:column="21">*<pos:position pos:line="158" pos:column="22"/></operator><name pos:line="158" pos:column="22">addrs<pos:position pos:line="158" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="29">hp<pos:position pos:line="158" pos:column="31"/></name><operator pos:line="158" pos:column="31">-&gt;<pos:position pos:line="158" pos:column="36"/></operator><name pos:line="158" pos:column="33">h_length<pos:position pos:line="158" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="158" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name pos:line="159" pos:column="13">addrlen<pos:position pos:line="159" pos:column="20"/></name> <operator pos:line="159" pos:column="21">=<pos:position pos:line="159" pos:column="22"/></operator> <sizeof pos:line="159" pos:column="23">sizeof <argument_list pos:line="159" pos:column="30">(<argument><expr pos:line="159" pos:column="31">struct <name pos:line="159" pos:column="38">sockaddr_in6<pos:position pos:line="159" pos:column="50"/></name></expr></argument>)<pos:position pos:line="159" pos:column="51"/></argument_list></sizeof></expr>;<pos:position pos:line="159" pos:column="52"/></expr_stmt>
            <break pos:line="160" pos:column="13">break;<pos:position pos:line="160" pos:column="19"/></break>
        <default pos:line="161" pos:column="9">default:<pos:position pos:line="161" pos:column="17"/></default>
            <continue pos:line="162" pos:column="13">continue;<pos:position pos:line="162" pos:column="22"/></continue>
        }<pos:position pos:line="163" pos:column="10"/></block></switch>

        <expr_stmt><expr><name><name pos:line="165" pos:column="9">result<pos:position pos:line="165" pos:column="15"/></name><operator pos:line="165" pos:column="15">.<pos:position pos:line="165" pos:column="16"/></operator><name pos:line="165" pos:column="16">ai_family<pos:position pos:line="165" pos:column="25"/></name></name> <operator pos:line="165" pos:column="26">=<pos:position pos:line="165" pos:column="27"/></operator> <name><name pos:line="165" pos:column="28">hp<pos:position pos:line="165" pos:column="30"/></name><operator pos:line="165" pos:column="30">-&gt;<pos:position pos:line="165" pos:column="35"/></operator><name pos:line="165" pos:column="32">h_addrtype<pos:position pos:line="165" pos:column="42"/></name></name></expr>;<pos:position pos:line="165" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="166" pos:column="9">ai<pos:position pos:line="166" pos:column="11"/></name> <operator pos:line="166" pos:column="12">=<pos:position pos:line="166" pos:column="13"/></operator> <call><name pos:line="166" pos:column="14">dup_addrinfo<pos:position pos:line="166" pos:column="26"/></name> <argument_list pos:line="166" pos:column="27">(<argument><expr><operator pos:line="166" pos:column="28">&amp;<pos:position pos:line="166" pos:column="33"/></operator><name pos:line="166" pos:column="29">result<pos:position pos:line="166" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="166" pos:column="37">&amp;<pos:position pos:line="166" pos:column="42"/></operator><name pos:line="166" pos:column="38">sa<pos:position pos:line="166" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="42">addrlen<pos:position pos:line="166" pos:column="49"/></name></expr></argument>)<pos:position pos:line="166" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="51"/></expr_stmt>
        <if pos:line="167" pos:column="9">if <condition pos:line="167" pos:column="12">(<expr><name pos:line="167" pos:column="13">ai<pos:position pos:line="167" pos:column="15"/></name> <operator pos:line="167" pos:column="16">==<pos:position pos:line="167" pos:column="18"/></operator> <name pos:line="167" pos:column="19">NULL<pos:position pos:line="167" pos:column="23"/></name></expr>)<pos:position pos:line="167" pos:column="24"/></condition><then pos:line="167" pos:column="24"> <block pos:line="167" pos:column="25">{
            <expr_stmt><expr><call><name pos:line="168" pos:column="13">xfreeaddrinfo<pos:position pos:line="168" pos:column="26"/></name> <argument_list pos:line="168" pos:column="27">(<argument><expr><name pos:line="168" pos:column="28">sai<pos:position pos:line="168" pos:column="31"/></name></expr></argument>)<pos:position pos:line="168" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="33"/></expr_stmt>
            <return pos:line="169" pos:column="13">return <expr><name pos:line="169" pos:column="20">EAI_MEMORY<pos:position pos:line="169" pos:column="30"/></name></expr>;<pos:position pos:line="169" pos:column="31"/></return>
        }<pos:position pos:line="170" pos:column="10"/></block></then></if>
        <if pos:line="171" pos:column="9">if <condition pos:line="171" pos:column="12">(<expr><name pos:line="171" pos:column="13">sai<pos:position pos:line="171" pos:column="16"/></name> <operator pos:line="171" pos:column="17">==<pos:position pos:line="171" pos:column="19"/></operator> <name pos:line="171" pos:column="20">NULL<pos:position pos:line="171" pos:column="24"/></name></expr>)<pos:position pos:line="171" pos:column="25"/></condition><then pos:line="171" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><name pos:line="172" pos:column="13">sai<pos:position pos:line="172" pos:column="16"/></name> <operator pos:line="172" pos:column="17">=<pos:position pos:line="172" pos:column="18"/></operator> <name pos:line="172" pos:column="19">ai<pos:position pos:line="172" pos:column="21"/></name></expr>;<pos:position pos:line="172" pos:column="22"/></expr_stmt></block></then>
        <else pos:line="173" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="174" pos:column="13">eai<pos:position pos:line="174" pos:column="16"/></name><operator pos:line="174" pos:column="16">-&gt;<pos:position pos:line="174" pos:column="21"/></operator><name pos:line="174" pos:column="18">ai_next<pos:position pos:line="174" pos:column="25"/></name></name> <operator pos:line="174" pos:column="26">=<pos:position pos:line="174" pos:column="27"/></operator> <name pos:line="174" pos:column="28">ai<pos:position pos:line="174" pos:column="30"/></name></expr>;<pos:position pos:line="174" pos:column="31"/></expr_stmt></block></else></if>
        <expr_stmt><expr><name pos:line="175" pos:column="9">eai<pos:position pos:line="175" pos:column="12"/></name> <operator pos:line="175" pos:column="13">=<pos:position pos:line="175" pos:column="14"/></operator> <name pos:line="175" pos:column="15">ai<pos:position pos:line="175" pos:column="17"/></name></expr>;<pos:position pos:line="175" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="176" pos:column="6"/></block></for>

    <if pos:line="178" pos:column="5">if <condition pos:line="178" pos:column="8">(<expr><name pos:line="178" pos:column="9">sai<pos:position pos:line="178" pos:column="12"/></name> <operator pos:line="178" pos:column="13">==<pos:position pos:line="178" pos:column="15"/></operator> <name pos:line="178" pos:column="16">NULL<pos:position pos:line="178" pos:column="20"/></name></expr>)<pos:position pos:line="178" pos:column="21"/></condition><then pos:line="178" pos:column="21"> <block pos:line="178" pos:column="22">{
        <return pos:line="179" pos:column="9">return <expr><name pos:line="179" pos:column="16">EAI_NODATA<pos:position pos:line="179" pos:column="26"/></name></expr>;<pos:position pos:line="179" pos:column="27"/></return>
    }<pos:position pos:line="180" pos:column="6"/></block></then></if>

    <if pos:line="182" pos:column="5">if <condition pos:line="182" pos:column="8">(<expr><name><name pos:line="182" pos:column="9">hints<pos:position pos:line="182" pos:column="14"/></name><operator pos:line="182" pos:column="14">-&gt;<pos:position pos:line="182" pos:column="19"/></operator><name pos:line="182" pos:column="16">ai_flags<pos:position pos:line="182" pos:column="24"/></name></name> <operator pos:line="182" pos:column="25">&amp;<pos:position pos:line="182" pos:column="30"/></operator> <name pos:line="182" pos:column="27">AI_CANONNAME<pos:position pos:line="182" pos:column="39"/></name></expr>)<pos:position pos:line="182" pos:column="40"/></condition><then pos:line="182" pos:column="40"> <block pos:line="182" pos:column="41">{
        <expr_stmt><expr><name><name pos:line="183" pos:column="9">sai<pos:position pos:line="183" pos:column="12"/></name><operator pos:line="183" pos:column="12">-&gt;<pos:position pos:line="183" pos:column="17"/></operator><name pos:line="183" pos:column="14">ai_canonname<pos:position pos:line="183" pos:column="26"/></name></name> <operator pos:line="183" pos:column="27">=<pos:position pos:line="183" pos:column="28"/></operator> <call><name pos:line="183" pos:column="29">malloc<pos:position pos:line="183" pos:column="35"/></name> <argument_list pos:line="183" pos:column="36">(<argument><expr><call><name pos:line="183" pos:column="37">strlen<pos:position pos:line="183" pos:column="43"/></name> <argument_list pos:line="183" pos:column="44">(<argument><expr><name><name pos:line="183" pos:column="45">hp<pos:position pos:line="183" pos:column="47"/></name><operator pos:line="183" pos:column="47">-&gt;<pos:position pos:line="183" pos:column="52"/></operator><name pos:line="183" pos:column="49">h_name<pos:position pos:line="183" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="183" pos:column="56"/></argument_list></call> <operator pos:line="183" pos:column="57">+<pos:position pos:line="183" pos:column="58"/></operator> <literal type="number" pos:line="183" pos:column="59">1<pos:position pos:line="183" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="183" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="62"/></expr_stmt>
        <if pos:line="184" pos:column="9">if <condition pos:line="184" pos:column="12">(<expr><name><name pos:line="184" pos:column="13">sai<pos:position pos:line="184" pos:column="16"/></name><operator pos:line="184" pos:column="16">-&gt;<pos:position pos:line="184" pos:column="21"/></operator><name pos:line="184" pos:column="18">ai_canonname<pos:position pos:line="184" pos:column="30"/></name></name> <operator pos:line="184" pos:column="31">==<pos:position pos:line="184" pos:column="33"/></operator> <name pos:line="184" pos:column="34">NULL<pos:position pos:line="184" pos:column="38"/></name></expr>)<pos:position pos:line="184" pos:column="39"/></condition><then pos:line="184" pos:column="39"> <block pos:line="184" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="185" pos:column="13">xfreeaddrinfo<pos:position pos:line="185" pos:column="26"/></name> <argument_list pos:line="185" pos:column="27">(<argument><expr><name pos:line="185" pos:column="28">sai<pos:position pos:line="185" pos:column="31"/></name></expr></argument>)<pos:position pos:line="185" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="33"/></expr_stmt>
            <return pos:line="186" pos:column="13">return <expr><name pos:line="186" pos:column="20">EAI_MEMORY<pos:position pos:line="186" pos:column="30"/></name></expr>;<pos:position pos:line="186" pos:column="31"/></return>
        }<pos:position pos:line="187" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="188" pos:column="9">strcpy<pos:position pos:line="188" pos:column="15"/></name> <argument_list pos:line="188" pos:column="16">(<argument><expr><name><name pos:line="188" pos:column="17">sai<pos:position pos:line="188" pos:column="20"/></name><operator pos:line="188" pos:column="20">-&gt;<pos:position pos:line="188" pos:column="25"/></operator><name pos:line="188" pos:column="22">ai_canonname<pos:position pos:line="188" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="188" pos:column="36">hp<pos:position pos:line="188" pos:column="38"/></name><operator pos:line="188" pos:column="38">-&gt;<pos:position pos:line="188" pos:column="43"/></operator><name pos:line="188" pos:column="40">h_name<pos:position pos:line="188" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="188" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="189" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="191" pos:column="5">*<pos:position pos:line="191" pos:column="6"/></operator><name pos:line="191" pos:column="6">res<pos:position pos:line="191" pos:column="9"/></name> <operator pos:line="191" pos:column="10">=<pos:position pos:line="191" pos:column="11"/></operator> <name pos:line="191" pos:column="12">sai<pos:position pos:line="191" pos:column="15"/></name></expr>;<pos:position pos:line="191" pos:column="16"/></expr_stmt>
    <return pos:line="192" pos:column="5">return <expr><literal type="number" pos:line="192" pos:column="12">0<pos:position pos:line="192" pos:column="13"/></literal></expr>;<pos:position pos:line="192" pos:column="14"/></return>
}<pos:position pos:line="193" pos:column="2"/></block></function></unit>
