<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3161_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">gopherSendRequest<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">fd<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">void<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">data<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">GopherStateData<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">gopherState<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><operator pos:line="4" pos:column="36">(<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">GopherStateData<pos:position pos:line="4" pos:column="52"/></name> <operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator><operator pos:line="4" pos:column="54">)<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="55">data<pos:position pos:line="4" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">buf<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><operator pos:line="5" pos:column="17">(<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></operator><operator pos:line="5" pos:column="24">)<pos:position pos:line="5" pos:column="25"/></operator><call><name pos:line="5" pos:column="25">memAllocate<pos:position pos:line="5" pos:column="36"/></name><argument_list pos:line="5" pos:column="36">(<argument><expr><name pos:line="5" pos:column="37">MEM_4K_BUF<pos:position pos:line="5" pos:column="47"/></name></expr></argument>)<pos:position pos:line="5" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="49"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">gopherState<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">-&gt;<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="22">type_id<pos:position pos:line="7" pos:column="29"/></name></name> <operator pos:line="7" pos:column="30">==<pos:position pos:line="7" pos:column="32"/></operator> <name pos:line="7" pos:column="33">GOPHER_CSO<pos:position pos:line="7" pos:column="43"/></name></expr>)<pos:position pos:line="7" pos:column="44"/></condition><then pos:line="7" pos:column="44"> <block pos:line="7" pos:column="45">{
        <decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">t<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><call><name pos:line="8" pos:column="25">strchr<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><name><name pos:line="8" pos:column="32">gopherState<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">-&gt;<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="45">request<pos:position pos:line="8" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="8" pos:column="54">'?'<pos:position pos:line="8" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="59"/></decl_stmt>

        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">t<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">!=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">NULL<pos:position pos:line="10" pos:column="22"/></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="13">t<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">++<pos:position pos:line="11" pos:column="16"/></operator></expr>;<pos:position pos:line="11" pos:column="17"/></expr_stmt></block></then>		<comment type="block" pos:line="11" pos:column="33">/* skip the ? */</comment>
        <else pos:line="12" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="13">t<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <literal type="string" pos:line="13" pos:column="17">""<pos:position pos:line="13" pos:column="19"/></literal></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt></block></else></if>

        <expr_stmt><expr><call><name pos:line="15" pos:column="9">snprintf<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">buf<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="23">4096<pos:position pos:line="15" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="29">"query %s\r\nquit\r\n"<pos:position pos:line="15" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">t<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then> <elseif pos:line="16" pos:column="7">else <if pos:line="16" pos:column="12">if <condition pos:line="16" pos:column="15">(<expr><name><name pos:line="16" pos:column="16">gopherState<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">-&gt;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="29">type_id<pos:position pos:line="16" pos:column="36"/></name></name> <operator pos:line="16" pos:column="37">==<pos:position pos:line="16" pos:column="39"/></operator> <name pos:line="16" pos:column="40">GOPHER_INDEX<pos:position pos:line="16" pos:column="52"/></name></expr>)<pos:position pos:line="16" pos:column="53"/></condition><then pos:line="16" pos:column="53"> <block pos:line="16" pos:column="54">{
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">char<pos:position pos:line="17" pos:column="13"/></name> <modifier pos:line="17" pos:column="14">*<pos:position pos:line="17" pos:column="15"/></modifier></type><name pos:line="17" pos:column="15">t<pos:position pos:line="17" pos:column="16"/></name> <init pos:line="17" pos:column="17">= <expr><call><name pos:line="17" pos:column="19">strchr<pos:position pos:line="17" pos:column="25"/></name><argument_list pos:line="17" pos:column="25">(<argument><expr><name><name pos:line="17" pos:column="26">gopherState<pos:position pos:line="17" pos:column="37"/></name><operator pos:line="17" pos:column="37">-&gt;<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="39">request<pos:position pos:line="17" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="48">'?'<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="53"/></decl_stmt>

        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">t<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">!=<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">NULL<pos:position pos:line="19" pos:column="22"/></name></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="20" pos:column="13">*<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">t<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="char" pos:line="20" pos:column="18">'\t'<pos:position pos:line="20" pos:column="22"/></literal></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="22" pos:column="9">snprintf<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">buf<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="23">4096<pos:position pos:line="22" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="29">"%s\r\n"<pos:position pos:line="22" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="39">gopherState<pos:position pos:line="22" pos:column="50"/></name><operator pos:line="22" pos:column="50">-&gt;<pos:position pos:line="22" pos:column="55"/></operator><name pos:line="22" pos:column="52">request<pos:position pos:line="22" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if></elseif> <else pos:line="23" pos:column="7">else <block pos:line="23" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">snprintf<pos:position pos:line="24" pos:column="17"/></name><argument_list pos:line="24" pos:column="17">(<argument><expr><name pos:line="24" pos:column="18">buf<pos:position pos:line="24" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="23">4096<pos:position pos:line="24" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="29">"%s\r\n"<pos:position pos:line="24" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="39">gopherState<pos:position pos:line="24" pos:column="50"/></name><operator pos:line="24" pos:column="50">-&gt;<pos:position pos:line="24" pos:column="55"/></operator><name pos:line="24" pos:column="52">request<pos:position pos:line="24" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">debugs<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="number" pos:line="27" pos:column="12">10<pos:position pos:line="27" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="16">5<pos:position pos:line="27" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="19">"gopherSendRequest: FD "<pos:position pos:line="27" pos:column="43"/></literal> <operator pos:line="27" pos:column="44">&lt;&lt;<pos:position pos:line="27" pos:column="52"/></operator> <name pos:line="27" pos:column="47">fd<pos:position pos:line="27" pos:column="49"/></name></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">comm_write<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">fd<pos:position pos:line="28" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="20">buf<pos:position pos:line="28" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="25">strlen<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">buf<pos:position pos:line="28" pos:column="35"/></name></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="38">gopherSendComplete<pos:position pos:line="28" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="58">gopherState<pos:position pos:line="28" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="71">NULL<pos:position pos:line="28" pos:column="75"/></name></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="77"/></expr_stmt>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><call><name pos:line="30" pos:column="9">EBIT_TEST<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name><name pos:line="30" pos:column="19">gopherState<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">-&gt;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="32">entry<pos:position pos:line="30" pos:column="37"/></name><operator pos:line="30" pos:column="37">-&gt;<pos:position pos:line="30" pos:column="42"/></operator><name pos:line="30" pos:column="39">flags<pos:position pos:line="30" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="46">ENTRY_CACHABLE<pos:position pos:line="30" pos:column="60"/></name></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="62"/></condition><then pos:line="30" pos:column="62">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="31" pos:column="9">gopherState<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">-&gt;<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="22">entry<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">-&gt;<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="29">setPublicKey<pos:position pos:line="31" pos:column="41"/></name></name><argument_list pos:line="31" pos:column="41">()<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt></block></then></if>	<comment type="block" pos:line="31" pos:column="49">/* Make it public */</comment>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
