<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4406_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">ServerBio<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">write<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">buf<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">int<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">size<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">BIO<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">table<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">holdWrite_<pos:position pos:line="5" pos:column="19"/></name></expr>)<pos:position pos:line="5" pos:column="20"/></condition><then pos:line="5" pos:column="20"> <block pos:line="5" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">83<pos:position pos:line="6" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="20">7<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>,  <argument><expr><literal type="string" pos:line="6" pos:column="24">"Hold write, for SSL connection on "<pos:position pos:line="6" pos:column="60"/></literal> <operator pos:line="6" pos:column="61">&lt;&lt;<pos:position pos:line="6" pos:column="69"/></operator> <name pos:line="6" pos:column="64">fd_<pos:position pos:line="6" pos:column="67"/></name> <operator pos:line="6" pos:column="68">&lt;&lt;<pos:position pos:line="6" pos:column="76"/></operator> <literal type="string" pos:line="6" pos:column="71">"will not write bytes of size "<pos:position pos:line="6" pos:column="102"/></literal> <operator pos:line="6" pos:column="103">&lt;&lt;<pos:position pos:line="6" pos:column="111"/></operator> <name pos:line="6" pos:column="106">size<pos:position pos:line="6" pos:column="110"/></name></expr></argument>)<pos:position pos:line="6" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="112"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">BIO_set_retry_write<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">table<pos:position pos:line="7" pos:column="34"/></name></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
        <return pos:line="8" pos:column="9">return <expr><operator pos:line="8" pos:column="16">-<pos:position pos:line="8" pos:column="17"/></operator><literal type="number" pos:line="8" pos:column="17">1<pos:position pos:line="8" pos:column="18"/></literal></expr>;<pos:position pos:line="8" pos:column="19"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">helloBuild<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">&amp;&amp;<pos:position pos:line="11" pos:column="31"/></operator> <operator pos:line="11" pos:column="24">(<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="25">bumpMode_<pos:position pos:line="11" pos:column="34"/></name> <operator pos:line="11" pos:column="35">==<pos:position pos:line="11" pos:column="37"/></operator> <name><name pos:line="11" pos:column="38">Ssl<pos:position pos:line="11" pos:column="41"/></name><operator pos:line="11" pos:column="41">::<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="43">bumpPeek<pos:position pos:line="11" pos:column="51"/></name></name> <operator pos:line="11" pos:column="52">||<pos:position pos:line="11" pos:column="54"/></operator> <name pos:line="11" pos:column="55">bumpMode_<pos:position pos:line="11" pos:column="64"/></name> <operator pos:line="11" pos:column="65">==<pos:position pos:line="11" pos:column="67"/></operator> <name><name pos:line="11" pos:column="68">Ssl<pos:position pos:line="11" pos:column="71"/></name><operator pos:line="11" pos:column="71">::<pos:position pos:line="11" pos:column="73"/></operator><name pos:line="11" pos:column="73">bumpStare<pos:position pos:line="11" pos:column="82"/></name></name><operator pos:line="11" pos:column="82">)<pos:position pos:line="11" pos:column="83"/></operator></expr>)<pos:position pos:line="11" pos:column="84"/></condition><then pos:line="11" pos:column="84"> <block pos:line="11" pos:column="85">{
        <comment type="line" pos:line="12" pos:column="9">// buf contains OpenSSL-generated ClientHello. We assume it has a</comment>
        <comment type="line" pos:line="13" pos:column="9">// complete ClientHello and nothing else, but cannot fully verify</comment>
        <comment type="line" pos:line="14" pos:column="9">// that quickly. We only verify that buf starts with a v3+ record</comment>
        <comment type="line" pos:line="15" pos:column="9">// containing ClientHello.</comment>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">Must<pos:position pos:line="16" pos:column="13"/></name><argument_list pos:line="16" pos:column="13">(<argument><expr><name pos:line="16" pos:column="14">size<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">&gt;=<pos:position pos:line="16" pos:column="24"/></operator> <literal type="number" pos:line="16" pos:column="22">2<pos:position pos:line="16" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt> <comment type="line" pos:line="16" pos:column="26">// enough for version and content_type checks below</comment>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">Must<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><name><name pos:line="17" pos:column="14">buf<pos:position pos:line="17" pos:column="17"/></name><index pos:line="17" pos:column="17">[<expr><literal type="number" pos:line="17" pos:column="18">1<pos:position pos:line="17" pos:column="19"/></literal></expr>]<pos:position pos:line="17" pos:column="20"/></index></name> <operator pos:line="17" pos:column="21">&gt;=<pos:position pos:line="17" pos:column="26"/></operator> <literal type="number" pos:line="17" pos:column="24">3<pos:position pos:line="17" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt> <comment type="line" pos:line="17" pos:column="28">// record's version.major; determines buf[0] meaning</comment>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">Must<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><name><name pos:line="18" pos:column="14">buf<pos:position pos:line="18" pos:column="17"/></name><index pos:line="18" pos:column="17">[<expr><literal type="number" pos:line="18" pos:column="18">0<pos:position pos:line="18" pos:column="19"/></literal></expr>]<pos:position pos:line="18" pos:column="20"/></index></name> <operator pos:line="18" pos:column="21">==<pos:position pos:line="18" pos:column="23"/></operator> <literal type="number" pos:line="18" pos:column="24">22<pos:position pos:line="18" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt> <comment type="line" pos:line="18" pos:column="29">// TLSPlaintext.content_type == handshake in v3+</comment>

        <comment type="line" pos:line="20" pos:column="9">//Hello message is the first message we write to server</comment>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">assert<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><call><name><name pos:line="21" pos:column="16">helloMsg<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">.<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">isEmpty<pos:position pos:line="21" pos:column="32"/></name></name><argument_list pos:line="21" pos:column="32">()<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<decl><type><name pos:line="23" pos:column="13">SSL<pos:position pos:line="23" pos:column="16"/></name> <modifier pos:line="23" pos:column="17">*<pos:position pos:line="23" pos:column="18"/></modifier></type><name pos:line="23" pos:column="18">ssl<pos:position pos:line="23" pos:column="21"/></name> <init pos:line="23" pos:column="22">= <expr><name><name pos:line="23" pos:column="24">fd_table<pos:position pos:line="23" pos:column="32"/></name><index pos:line="23" pos:column="32">[<expr><name pos:line="23" pos:column="33">fd_<pos:position pos:line="23" pos:column="36"/></name></expr>]<pos:position pos:line="23" pos:column="37"/></index></name><operator pos:line="23" pos:column="37">.<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="38">ssl<pos:position pos:line="23" pos:column="41"/></name></expr></init></decl>)<pos:position pos:line="23" pos:column="42"/></condition><then pos:line="23" pos:column="42"> <block pos:line="23" pos:column="43">{
            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><name pos:line="24" pos:column="17">bumpMode_<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">==<pos:position pos:line="24" pos:column="29"/></operator> <name><name pos:line="24" pos:column="30">Ssl<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">::<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="35">bumpPeek<pos:position pos:line="24" pos:column="43"/></name></name></expr>)<pos:position pos:line="24" pos:column="44"/></condition><then pos:line="24" pos:column="44"> <block pos:line="24" pos:column="45">{
                <comment type="line" pos:line="25" pos:column="17">// we should not be here if we failed to parse the client-sent ClientHello</comment>
                <expr_stmt><expr><call><name pos:line="26" pos:column="17">Must<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name><name pos:line="26" pos:column="22">clientFeatures<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">.<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="37">initialized_<pos:position pos:line="26" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="51"/></expr_stmt>
                <if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">adjustSSL<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">ssl<pos:position pos:line="27" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="36">clientFeatures<pos:position pos:line="27" pos:column="50"/></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="52"/></condition><then pos:line="27" pos:column="52">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="21">allowBump<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">=<pos:position pos:line="28" pos:column="32"/></operator> <literal type="boolean" pos:line="28" pos:column="33">true<pos:position pos:line="28" pos:column="37"/></literal></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt></block></then></if>
                <expr_stmt><expr><name pos:line="29" pos:column="17">allowSplice<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">=<pos:position pos:line="29" pos:column="30"/></operator> <literal type="boolean" pos:line="29" pos:column="31">true<pos:position pos:line="29" pos:column="35"/></literal></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>
                <comment type="line" pos:line="30" pos:column="17">// Replace OpenSSL-generated ClientHello with client-sent one.</comment>
                <expr_stmt><expr><call><name><name pos:line="31" pos:column="17">helloMsg<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">.<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="26">append<pos:position pos:line="31" pos:column="32"/></name></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name><name pos:line="31" pos:column="33">clientFeatures<pos:position pos:line="31" pos:column="47"/></name><operator pos:line="31" pos:column="47">.<pos:position pos:line="31" pos:column="48"/></operator><name pos:line="31" pos:column="48">helloMessage<pos:position pos:line="31" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="62"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="32" pos:column="17">debugs<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><literal type="number" pos:line="32" pos:column="24">83<pos:position pos:line="32" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="28">7<pos:position pos:line="32" pos:column="29"/></literal></expr></argument>,  <argument><expr><literal type="string" pos:line="32" pos:column="32">"SSL HELLO message for FD "<pos:position pos:line="32" pos:column="59"/></literal> <operator pos:line="32" pos:column="60">&lt;&lt;<pos:position pos:line="32" pos:column="68"/></operator> <name pos:line="32" pos:column="63">fd_<pos:position pos:line="32" pos:column="66"/></name> <operator pos:line="32" pos:column="67">&lt;&lt;<pos:position pos:line="32" pos:column="75"/></operator> <literal type="string" pos:line="32" pos:column="70">": Random number is adjusted for peek mode"<pos:position pos:line="32" pos:column="113"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="115"/></expr_stmt>
            }<pos:position pos:line="33" pos:column="14"/></block></then> <else pos:line="33" pos:column="15">else <block pos:line="33" pos:column="20">{ <comment type="block" pos:line="33" pos:column="22">/*Ssl::bumpStare*/</comment>
                <expr_stmt><expr><name pos:line="34" pos:column="17">allowBump<pos:position pos:line="34" pos:column="26"/></name> <operator pos:line="34" pos:column="27">=<pos:position pos:line="34" pos:column="28"/></operator> <literal type="boolean" pos:line="34" pos:column="29">true<pos:position pos:line="34" pos:column="33"/></literal></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>
                <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name><name pos:line="35" pos:column="21">clientFeatures<pos:position pos:line="35" pos:column="35"/></name><operator pos:line="35" pos:column="35">.<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="36">initialized_<pos:position pos:line="35" pos:column="48"/></name></name> <operator pos:line="35" pos:column="49">&amp;&amp;<pos:position pos:line="35" pos:column="59"/></operator> <call><name pos:line="35" pos:column="52">adjustSSL<pos:position pos:line="35" pos:column="61"/></name><argument_list pos:line="35" pos:column="61">(<argument><expr><name pos:line="35" pos:column="62">ssl<pos:position pos:line="35" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="67">clientFeatures<pos:position pos:line="35" pos:column="81"/></name></expr></argument>)<pos:position pos:line="35" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="83"/></condition><then pos:line="35" pos:column="83"> <block pos:line="35" pos:column="84">{
                    <expr_stmt><expr><name pos:line="36" pos:column="21">allowSplice<pos:position pos:line="36" pos:column="32"/></name> <operator pos:line="36" pos:column="33">=<pos:position pos:line="36" pos:column="34"/></operator> <literal type="boolean" pos:line="36" pos:column="35">true<pos:position pos:line="36" pos:column="39"/></literal></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="37" pos:column="21">helloMsg<pos:position pos:line="37" pos:column="29"/></name><operator pos:line="37" pos:column="29">.<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="30">append<pos:position pos:line="37" pos:column="36"/></name></name><argument_list pos:line="37" pos:column="36">(<argument><expr><name><name pos:line="37" pos:column="37">clientFeatures<pos:position pos:line="37" pos:column="51"/></name><operator pos:line="37" pos:column="51">.<pos:position pos:line="37" pos:column="52"/></operator><name pos:line="37" pos:column="52">helloMessage<pos:position pos:line="37" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="66"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="38" pos:column="21">debugs<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><literal type="number" pos:line="38" pos:column="28">83<pos:position pos:line="38" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="32">7<pos:position pos:line="38" pos:column="33"/></literal></expr></argument>,  <argument><expr><literal type="string" pos:line="38" pos:column="36">"SSL HELLO message for FD "<pos:position pos:line="38" pos:column="63"/></literal> <operator pos:line="38" pos:column="64">&lt;&lt;<pos:position pos:line="38" pos:column="72"/></operator> <name pos:line="38" pos:column="67">fd_<pos:position pos:line="38" pos:column="70"/></name> <operator pos:line="38" pos:column="71">&lt;&lt;<pos:position pos:line="38" pos:column="79"/></operator> <literal type="string" pos:line="38" pos:column="74">": Random number is adjusted for stare mode"<pos:position pos:line="38" pos:column="118"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="120"/></expr_stmt>
                }<pos:position pos:line="39" pos:column="18"/></block></then></if>
            }<pos:position pos:line="40" pos:column="14"/></block></else></if>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="43" pos:column="9">// if we did not use the client-sent ClientHello, then use the OpenSSL-generated one</comment>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name><name pos:line="44" pos:column="13">helloMsg<pos:position pos:line="44" pos:column="21"/></name><operator pos:line="44" pos:column="21">.<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">isEmpty<pos:position pos:line="44" pos:column="29"/></name></name><argument_list pos:line="44" pos:column="29">()<pos:position pos:line="44" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="32"/></condition><then pos:line="44" pos:column="32">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="45" pos:column="13">helloMsg<pos:position pos:line="45" pos:column="21"/></name><operator pos:line="45" pos:column="21">.<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">append<pos:position pos:line="45" pos:column="28"/></name></name><argument_list pos:line="45" pos:column="28">(<argument><expr><name pos:line="45" pos:column="29">buf<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="34">size<pos:position pos:line="45" pos:column="38"/></name></expr></argument>)<pos:position pos:line="45" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="40"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="47" pos:column="9">helloBuild<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <literal type="boolean" pos:line="47" pos:column="22">true<pos:position pos:line="47" pos:column="26"/></literal></expr>;<pos:position pos:line="47" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="48" pos:column="9">helloMsgSize<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <call><name><name pos:line="48" pos:column="24">helloMsg<pos:position pos:line="48" pos:column="32"/></name><operator pos:line="48" pos:column="32">.<pos:position pos:line="48" pos:column="33"/></operator><name pos:line="48" pos:column="33">length<pos:position pos:line="48" pos:column="39"/></name></name><argument_list pos:line="48" pos:column="39">()<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt>
        <comment type="line" pos:line="49" pos:column="9">//allowBump = true;</comment>

        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">allowSplice<pos:position pos:line="51" pos:column="24"/></name></expr>)<pos:position pos:line="51" pos:column="25"/></condition><then pos:line="51" pos:column="25"> <block pos:line="51" pos:column="26">{
            <comment type="line" pos:line="52" pos:column="13">// Do not write yet.....</comment>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">BIO_set_retry_write<pos:position pos:line="53" pos:column="32"/></name><argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">table<pos:position pos:line="53" pos:column="38"/></name></expr></argument>)<pos:position pos:line="53" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="40"/></expr_stmt>
            <return pos:line="54" pos:column="13">return <expr><operator pos:line="54" pos:column="20">-<pos:position pos:line="54" pos:column="21"/></operator><literal type="number" pos:line="54" pos:column="21">1<pos:position pos:line="54" pos:column="22"/></literal></expr>;<pos:position pos:line="54" pos:column="23"/></return>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><operator pos:line="58" pos:column="9">!<pos:position pos:line="58" pos:column="10"/></operator><call><name><name pos:line="58" pos:column="10">helloMsg<pos:position pos:line="58" pos:column="18"/></name><operator pos:line="58" pos:column="18">.<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="19">isEmpty<pos:position pos:line="58" pos:column="26"/></name></name><argument_list pos:line="58" pos:column="26">()<pos:position pos:line="58" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="29"/></condition><then pos:line="58" pos:column="29"> <block pos:line="58" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">debugs<pos:position pos:line="59" pos:column="15"/></name><argument_list pos:line="59" pos:column="15">(<argument><expr><literal type="number" pos:line="59" pos:column="16">83<pos:position pos:line="59" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="20">7<pos:position pos:line="59" pos:column="21"/></literal></expr></argument>,  <argument><expr><literal type="string" pos:line="59" pos:column="24">"buffered write for FD "<pos:position pos:line="59" pos:column="48"/></literal> <operator pos:line="59" pos:column="49">&lt;&lt;<pos:position pos:line="59" pos:column="57"/></operator> <name pos:line="59" pos:column="52">fd_<pos:position pos:line="59" pos:column="55"/></name></expr></argument>)<pos:position pos:line="59" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="57"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="60" pos:column="9">int<pos:position pos:line="60" pos:column="12"/></name></type> <name pos:line="60" pos:column="13">ret<pos:position pos:line="60" pos:column="16"/></name> <init pos:line="60" pos:column="17">= <expr><call><name><name pos:line="60" pos:column="19">Ssl<pos:position pos:line="60" pos:column="22"/></name><operator pos:line="60" pos:column="22">::<pos:position pos:line="60" pos:column="24"/></operator><name pos:line="60" pos:column="24">Bio<pos:position pos:line="60" pos:column="27"/></name><operator pos:line="60" pos:column="27">::<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="29">write<pos:position pos:line="60" pos:column="34"/></name></name><argument_list pos:line="60" pos:column="34">(<argument><expr><call><name><name pos:line="60" pos:column="35">helloMsg<pos:position pos:line="60" pos:column="43"/></name><operator pos:line="60" pos:column="43">.<pos:position pos:line="60" pos:column="44"/></operator><name pos:line="60" pos:column="44">rawContent<pos:position pos:line="60" pos:column="54"/></name></name><argument_list pos:line="60" pos:column="54">()<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="60" pos:column="58">helloMsg<pos:position pos:line="60" pos:column="66"/></name><operator pos:line="60" pos:column="66">.<pos:position pos:line="60" pos:column="67"/></operator><name pos:line="60" pos:column="67">length<pos:position pos:line="60" pos:column="73"/></name></name><argument_list pos:line="60" pos:column="73">()<pos:position pos:line="60" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="60" pos:column="77">table<pos:position pos:line="60" pos:column="82"/></name></expr></argument>)<pos:position pos:line="60" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="84"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="61" pos:column="9">helloMsg<pos:position pos:line="61" pos:column="17"/></name><operator pos:line="61" pos:column="17">.<pos:position pos:line="61" pos:column="18"/></operator><name pos:line="61" pos:column="18">consume<pos:position pos:line="61" pos:column="25"/></name></name><argument_list pos:line="61" pos:column="25">(<argument><expr><name pos:line="61" pos:column="26">ret<pos:position pos:line="61" pos:column="29"/></name></expr></argument>)<pos:position pos:line="61" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="31"/></expr_stmt>
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><operator pos:line="62" pos:column="13">!<pos:position pos:line="62" pos:column="14"/></operator><call><name><name pos:line="62" pos:column="14">helloMsg<pos:position pos:line="62" pos:column="22"/></name><operator pos:line="62" pos:column="22">.<pos:position pos:line="62" pos:column="23"/></operator><name pos:line="62" pos:column="23">isEmpty<pos:position pos:line="62" pos:column="30"/></name></name><argument_list pos:line="62" pos:column="30">()<pos:position pos:line="62" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="33"/></condition><then pos:line="62" pos:column="33"> <block pos:line="62" pos:column="34">{
            <comment type="line" pos:line="63" pos:column="13">// We need to retry sendind data.</comment>
            <comment type="line" pos:line="64" pos:column="13">// Say to openSSL to retry sending hello message</comment>
            <expr_stmt><expr><call><name pos:line="65" pos:column="13">BIO_set_retry_write<pos:position pos:line="65" pos:column="32"/></name><argument_list pos:line="65" pos:column="32">(<argument><expr><name pos:line="65" pos:column="33">table<pos:position pos:line="65" pos:column="38"/></name></expr></argument>)<pos:position pos:line="65" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="40"/></expr_stmt>
            <return pos:line="66" pos:column="13">return <expr><operator pos:line="66" pos:column="20">-<pos:position pos:line="66" pos:column="21"/></operator><literal type="number" pos:line="66" pos:column="21">1<pos:position pos:line="66" pos:column="22"/></literal></expr>;<pos:position pos:line="66" pos:column="23"/></return>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="69" pos:column="9">// Sending hello message complete. Do not send more data for now...</comment>
        <expr_stmt><expr><name pos:line="70" pos:column="9">holdWrite_<pos:position pos:line="70" pos:column="19"/></name> <operator pos:line="70" pos:column="20">=<pos:position pos:line="70" pos:column="21"/></operator> <literal type="boolean" pos:line="70" pos:column="22">true<pos:position pos:line="70" pos:column="26"/></literal></expr>;<pos:position pos:line="70" pos:column="27"/></expr_stmt>

        <comment type="line" pos:line="72" pos:column="9">// spoof openSSL that we write what it ask us to write</comment>
        <return pos:line="73" pos:column="9">return <expr><name pos:line="73" pos:column="16">size<pos:position pos:line="73" pos:column="20"/></name></expr>;<pos:position pos:line="73" pos:column="21"/></return>
    }<pos:position pos:line="74" pos:column="6"/></block></then> <else pos:line="74" pos:column="7">else
        <block type="pseudo"><return pos:line="75" pos:column="9">return <expr><call><name><name pos:line="75" pos:column="16">Ssl<pos:position pos:line="75" pos:column="19"/></name><operator pos:line="75" pos:column="19">::<pos:position pos:line="75" pos:column="21"/></operator><name pos:line="75" pos:column="21">Bio<pos:position pos:line="75" pos:column="24"/></name><operator pos:line="75" pos:column="24">::<pos:position pos:line="75" pos:column="26"/></operator><name pos:line="75" pos:column="26">write<pos:position pos:line="75" pos:column="31"/></name></name><argument_list pos:line="75" pos:column="31">(<argument><expr><name pos:line="75" pos:column="32">buf<pos:position pos:line="75" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="37">size<pos:position pos:line="75" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="43">table<pos:position pos:line="75" pos:column="48"/></name></expr></argument>)<pos:position pos:line="75" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="50"/></return></block></else></if>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
