<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5279_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">digest_nonce_h<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type>
<name pos:line="2" pos:column="1">authenticateDigestNonceNew<pos:position pos:line="2" pos:column="27"/></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">void<pos:position pos:line="2" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">digest_nonce_h<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">newnonce<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><cast type="static" pos:line="4" pos:column="32">static_cast <argument_list type="generic" pos:line="4" pos:column="44">&lt; <argument><expr><name pos:line="4" pos:column="46">digest_nonce_h<pos:position pos:line="4" pos:column="60"/></name> <operator pos:line="4" pos:column="61">*<pos:position pos:line="4" pos:column="62"/></operator></expr></argument> &gt;<pos:position pos:line="4" pos:column="67"/></argument_list><argument_list pos:line="4" pos:column="64">(<argument><expr><call><name><name pos:line="4" pos:column="65">digest_nonce_pool<pos:position pos:line="4" pos:column="82"/></name><operator pos:line="4" pos:column="82">-&gt;<pos:position pos:line="4" pos:column="87"/></operator><name pos:line="4" pos:column="84">alloc<pos:position pos:line="4" pos:column="89"/></name></name><argument_list pos:line="4" pos:column="89">()<pos:position pos:line="4" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="92"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="93"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">digest_nonce_h<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">temp<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* NONCE CREATION - NOTES AND REASONING. RBC 20010108
     * === EXCERPT FROM RFC 2617 ===
     * The contents of the nonce are implementation dependent. The quality
     * of the implementation depends on a good choice. A nonce might, for
     * example, be constructed as the base 64 encoding of
     *
     * time-stamp H(time-stamp ":" ETag ":" private-key)
     *
     * where time-stamp is a server-generated time or other non-repeating
     * value, ETag is the value of the HTTP ETag header associated with
     * the requested entity, and private-key is data known only to the
     * server.  With a nonce of this form a server would recalculate the
     * hash portion after receiving the client authentication header and
     * reject the request if it did not match the nonce from that header
     * or if the time-stamp value is not recent enough. In this way the
     * server can limit the time of the nonce's validity. The inclusion of
     * the ETag prevents a replay request for an updated version of the
     * resource.  (Note: including the IP address of the client in the
     * nonce would appear to offer the server the ability to limit the
     * reuse of the nonce to the same client that originally got it.
     * However, that would break proxy farms, where requests from a single
     * user often go through different proxies in the farm. Also, IP
     * address spoofing is not that hard.)
     * ====
     *
     * Now for my reasoning:
     * We will not accept a unrecognised nonce-&gt;we have all recognisable
     * nonces stored. If we send out unique base64 encodings we guarantee
     * that a given nonce applies to only one user (barring attacks or
     * really bad timing with expiry and creation).  Using a random
     * component in the nonce allows us to loop to find a unique nonce.
     * We use H(nonce_data) so the nonce is meaningless to the reciever.
     * So our nonce looks like base64(H(timestamp,pointertohash,randomdata))
     * And even if our randomness is not very random (probably due to
     * bad coding on my part) we don't really care - the timestamp and
     * memory pointer also guarantee local uniqueness in the input to the hash
     * function.
     */</comment>

    <comment type="block" pos:line="46" pos:column="5">/* create a new nonce */</comment>
    <expr_stmt><expr><name><name pos:line="47" pos:column="5">newnonce<pos:position pos:line="47" pos:column="13"/></name><operator pos:line="47" pos:column="13">-&gt;<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="15">nc<pos:position pos:line="47" pos:column="17"/></name></name> <operator pos:line="47" pos:column="18">=<pos:position pos:line="47" pos:column="19"/></operator> <literal type="number" pos:line="47" pos:column="20">0<pos:position pos:line="47" pos:column="21"/></literal></expr>;<pos:position pos:line="47" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="48" pos:column="5">newnonce<pos:position pos:line="48" pos:column="13"/></name><operator pos:line="48" pos:column="13">-&gt;<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="15">flags<pos:position pos:line="48" pos:column="20"/></name><operator pos:line="48" pos:column="20">.<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="21">valid<pos:position pos:line="48" pos:column="26"/></name></name> <operator pos:line="48" pos:column="27">=<pos:position pos:line="48" pos:column="28"/></operator> <literal type="number" pos:line="48" pos:column="29">1<pos:position pos:line="48" pos:column="30"/></literal></expr>;<pos:position pos:line="48" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">newnonce<pos:position pos:line="49" pos:column="13"/></name><operator pos:line="49" pos:column="13">-&gt;<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="15">noncedata<pos:position pos:line="49" pos:column="24"/></name><operator pos:line="49" pos:column="24">.<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="25">self<pos:position pos:line="49" pos:column="29"/></name></name> <operator pos:line="49" pos:column="30">=<pos:position pos:line="49" pos:column="31"/></operator> <name pos:line="49" pos:column="32">newnonce<pos:position pos:line="49" pos:column="40"/></name></expr>;<pos:position pos:line="49" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="50" pos:column="5">newnonce<pos:position pos:line="50" pos:column="13"/></name><operator pos:line="50" pos:column="13">-&gt;<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="15">noncedata<pos:position pos:line="50" pos:column="24"/></name><operator pos:line="50" pos:column="24">.<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="25">creationtime<pos:position pos:line="50" pos:column="37"/></name></name> <operator pos:line="50" pos:column="38">=<pos:position pos:line="50" pos:column="39"/></operator> <name><name pos:line="50" pos:column="40">current_time<pos:position pos:line="50" pos:column="52"/></name><operator pos:line="50" pos:column="52">.<pos:position pos:line="50" pos:column="53"/></operator><name pos:line="50" pos:column="53">tv_sec<pos:position pos:line="50" pos:column="59"/></name></name></expr>;<pos:position pos:line="50" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">newnonce<pos:position pos:line="51" pos:column="13"/></name><operator pos:line="51" pos:column="13">-&gt;<pos:position pos:line="51" pos:column="18"/></operator><name pos:line="51" pos:column="15">noncedata<pos:position pos:line="51" pos:column="24"/></name><operator pos:line="51" pos:column="24">.<pos:position pos:line="51" pos:column="25"/></operator><name pos:line="51" pos:column="25">randomdata<pos:position pos:line="51" pos:column="35"/></name></name> <operator pos:line="51" pos:column="36">=<pos:position pos:line="51" pos:column="37"/></operator> <call><name pos:line="51" pos:column="38">squid_random<pos:position pos:line="51" pos:column="50"/></name><argument_list pos:line="51" pos:column="50">()<pos:position pos:line="51" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="53"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">authDigestNonceEncode<pos:position pos:line="53" pos:column="26"/></name><argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">newnonce<pos:position pos:line="53" pos:column="35"/></name></expr></argument>)<pos:position pos:line="53" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt>
    <comment type="block" pos:line="54" pos:column="5">/*
     * loop until we get a unique nonce. The nonce creation must
     * have a random factor
     */</comment>

    <while pos:line="59" pos:column="5">while <condition pos:line="59" pos:column="11">(<expr><operator pos:line="59" pos:column="12">(<pos:position pos:line="59" pos:column="13"/></operator><name pos:line="59" pos:column="13">temp<pos:position pos:line="59" pos:column="17"/></name> <operator pos:line="59" pos:column="18">=<pos:position pos:line="59" pos:column="19"/></operator> <call><name pos:line="59" pos:column="20">authenticateDigestNonceFindNonce<pos:position pos:line="59" pos:column="52"/></name><argument_list pos:line="59" pos:column="52">(<argument><expr><operator pos:line="59" pos:column="53">(<pos:position pos:line="59" pos:column="54"/></operator><name pos:line="59" pos:column="54">char<pos:position pos:line="59" pos:column="58"/></name> <specifier pos:line="59" pos:column="59">const<pos:position pos:line="59" pos:column="64"/></specifier> <operator pos:line="59" pos:column="65">*<pos:position pos:line="59" pos:column="66"/></operator><operator pos:line="59" pos:column="66">)<pos:position pos:line="59" pos:column="67"/></operator> <operator pos:line="59" pos:column="68">(<pos:position pos:line="59" pos:column="69"/></operator><name><name pos:line="59" pos:column="69">newnonce<pos:position pos:line="59" pos:column="77"/></name><operator pos:line="59" pos:column="77">-&gt;<pos:position pos:line="59" pos:column="82"/></operator><name pos:line="59" pos:column="79">key<pos:position pos:line="59" pos:column="82"/></name></name><operator pos:line="59" pos:column="82">)<pos:position pos:line="59" pos:column="83"/></operator></expr></argument>)<pos:position pos:line="59" pos:column="84"/></argument_list></call><operator pos:line="59" pos:column="84">)<pos:position pos:line="59" pos:column="85"/></operator></expr>)<pos:position pos:line="59" pos:column="86"/></condition> <block pos:line="59" pos:column="87">{
        <comment type="block" pos:line="60" pos:column="9">/* create a new nonce */</comment>
        <expr_stmt><expr><name><name pos:line="61" pos:column="9">newnonce<pos:position pos:line="61" pos:column="17"/></name><operator pos:line="61" pos:column="17">-&gt;<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="19">noncedata<pos:position pos:line="61" pos:column="28"/></name><operator pos:line="61" pos:column="28">.<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="29">randomdata<pos:position pos:line="61" pos:column="39"/></name></name> <operator pos:line="61" pos:column="40">=<pos:position pos:line="61" pos:column="41"/></operator> <call><name pos:line="61" pos:column="42">squid_random<pos:position pos:line="61" pos:column="54"/></name><argument_list pos:line="61" pos:column="54">()<pos:position pos:line="61" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="57"/></expr_stmt>
        <comment type="block" pos:line="62" pos:column="9">/* Bug 3526 high performance fix: add 1 second to creationtime to avoid duplication */</comment>
        <expr_stmt><expr><operator pos:line="63" pos:column="9">++<pos:position pos:line="63" pos:column="11"/></operator><name><name pos:line="63" pos:column="11">newnonce<pos:position pos:line="63" pos:column="19"/></name><operator pos:line="63" pos:column="19">-&gt;<pos:position pos:line="63" pos:column="24"/></operator><name pos:line="63" pos:column="21">noncedata<pos:position pos:line="63" pos:column="30"/></name><operator pos:line="63" pos:column="30">.<pos:position pos:line="63" pos:column="31"/></operator><name pos:line="63" pos:column="31">creationtime<pos:position pos:line="63" pos:column="43"/></name></name></expr>;<pos:position pos:line="63" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">authDigestNonceEncode<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><name pos:line="64" pos:column="31">newnonce<pos:position pos:line="64" pos:column="39"/></name></expr></argument>)<pos:position pos:line="64" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="67" pos:column="5">hash_join<pos:position pos:line="67" pos:column="14"/></name><argument_list pos:line="67" pos:column="14">(<argument><expr><name pos:line="67" pos:column="15">digest_nonce_cache<pos:position pos:line="67" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="35">newnonce<pos:position pos:line="67" pos:column="43"/></name></expr></argument>)<pos:position pos:line="67" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt>
    <comment type="block" pos:line="68" pos:column="5">/* the cache's link */</comment>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">authDigestNonceLink<pos:position pos:line="69" pos:column="24"/></name><argument_list pos:line="69" pos:column="24">(<argument><expr><name pos:line="69" pos:column="25">newnonce<pos:position pos:line="69" pos:column="33"/></name></expr></argument>)<pos:position pos:line="69" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">newnonce<pos:position pos:line="70" pos:column="13"/></name><operator pos:line="70" pos:column="13">-&gt;<pos:position pos:line="70" pos:column="18"/></operator><name pos:line="70" pos:column="15">flags<pos:position pos:line="70" pos:column="20"/></name><operator pos:line="70" pos:column="20">.<pos:position pos:line="70" pos:column="21"/></operator><name pos:line="70" pos:column="21">incache<pos:position pos:line="70" pos:column="28"/></name></name> <operator pos:line="70" pos:column="29">=<pos:position pos:line="70" pos:column="30"/></operator> <literal type="number" pos:line="70" pos:column="31">1<pos:position pos:line="70" pos:column="32"/></literal></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">debugs<pos:position pos:line="71" pos:column="11"/></name><argument_list pos:line="71" pos:column="11">(<argument><expr><literal type="number" pos:line="71" pos:column="12">29<pos:position pos:line="71" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="16">5<pos:position pos:line="71" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="19">"authenticateDigestNonceNew: created nonce "<pos:position pos:line="71" pos:column="63"/></literal> <operator pos:line="71" pos:column="64">&lt;&lt;<pos:position pos:line="71" pos:column="72"/></operator> <name pos:line="71" pos:column="67">newnonce<pos:position pos:line="71" pos:column="75"/></name> <operator pos:line="71" pos:column="76">&lt;&lt;<pos:position pos:line="71" pos:column="84"/></operator> <literal type="string" pos:line="71" pos:column="79">" at "<pos:position pos:line="71" pos:column="85"/></literal> <operator pos:line="71" pos:column="86">&lt;&lt;<pos:position pos:line="71" pos:column="94"/></operator> <name><name pos:line="71" pos:column="89">newnonce<pos:position pos:line="71" pos:column="97"/></name><operator pos:line="71" pos:column="97">-&gt;<pos:position pos:line="71" pos:column="102"/></operator><name pos:line="71" pos:column="99">noncedata<pos:position pos:line="71" pos:column="108"/></name><operator pos:line="71" pos:column="108">.<pos:position pos:line="71" pos:column="109"/></operator><name pos:line="71" pos:column="109">creationtime<pos:position pos:line="71" pos:column="121"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="122"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="123"/></expr_stmt>
    <return pos:line="72" pos:column="5">return <expr><name pos:line="72" pos:column="12">newnonce<pos:position pos:line="72" pos:column="20"/></name></expr>;<pos:position pos:line="72" pos:column="21"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
