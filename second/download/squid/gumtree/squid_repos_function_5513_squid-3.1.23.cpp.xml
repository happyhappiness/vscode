<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5513_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">esiSequence<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">render<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name><name pos:line="2" pos:column="21">ESISegment<pos:position pos:line="2" pos:column="31"/></name><operator pos:line="2" pos:column="31">::<pos:position pos:line="2" pos:column="33"/></operator><name pos:line="2" pos:column="33">Pointer<pos:position pos:line="2" pos:column="40"/></name></name></type> <name pos:line="2" pos:column="41">output<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* append all processed elements, and trim processed
     * and rendered elements
     */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name> <argument_list pos:line="7" pos:column="12">(<argument><expr><name><name pos:line="7" pos:column="13">output<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">next<pos:position pos:line="7" pos:column="25"/></name></name> <operator pos:line="7" pos:column="26">==<pos:position pos:line="7" pos:column="28"/></operator> <name pos:line="7" pos:column="29">NULL<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name> <argument_list pos:line="8" pos:column="12">(<argument><expr><literal type="number" pos:line="8" pos:column="13">86<pos:position pos:line="8" pos:column="15"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="8" pos:column="16">5<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="19">"esiSequenceRender: rendering "<pos:position pos:line="8" pos:column="50"/></literal> <operator pos:line="8" pos:column="51">&lt;&lt;<pos:position pos:line="8" pos:column="59"/></operator> <name pos:line="8" pos:column="54">processedcount<pos:position pos:line="8" pos:column="68"/></name> <operator pos:line="8" pos:column="69">&lt;&lt;<pos:position pos:line="8" pos:column="77"/></operator> <literal type="string" pos:line="8" pos:column="72">" elements"<pos:position pos:line="8" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="85"/></expr_stmt>

    <for pos:line="10" pos:column="5">for <control pos:line="10" pos:column="9">(<init><decl><type><name pos:line="10" pos:column="10">size_t<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">i<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="23"/></init> <condition><expr><name pos:line="10" pos:column="24">i<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">&lt;<pos:position pos:line="10" pos:column="30"/></operator> <name pos:line="10" pos:column="28">processedcount<pos:position pos:line="10" pos:column="42"/></name></expr>;<pos:position pos:line="10" pos:column="43"/></condition> <incr><expr><operator pos:line="10" pos:column="44">++<pos:position pos:line="10" pos:column="46"/></operator><name pos:line="10" pos:column="46">i<pos:position pos:line="10" pos:column="47"/></name></expr></incr>)<pos:position pos:line="10" pos:column="48"/></control> <block pos:line="10" pos:column="49">{
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">elements<pos:position pos:line="11" pos:column="17"/></name><index pos:line="11" pos:column="17">[<expr><name pos:line="11" pos:column="18">i<pos:position pos:line="11" pos:column="19"/></name></expr>]<pos:position pos:line="11" pos:column="20"/></index></name><operator pos:line="11" pos:column="20">-&gt;<pos:position pos:line="11" pos:column="25"/></operator><call><name pos:line="11" pos:column="22">render<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">output<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">elements<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">.<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">setNULL<pos:position pos:line="12" pos:column="25"/></name></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">i<pos:position pos:line="12" pos:column="27"/></name></expr></argument>,<argument><expr><name pos:line="12" pos:column="28">i<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">+<pos:position pos:line="12" pos:column="30"/></operator><literal type="number" pos:line="12" pos:column="30">1<pos:position pos:line="12" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
        <comment type="block" pos:line="13" pos:column="9">/* FIXME: pass a ESISegment ** ? */</comment>
        <expr_stmt><expr><name pos:line="14" pos:column="9">output<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name><name pos:line="14" pos:column="18">output<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">-&gt;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="26">tail<pos:position pos:line="14" pos:column="30"/></name></name><argument_list pos:line="14" pos:column="30">()<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">elements<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">.<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">pop_front<pos:position pos:line="17" pos:column="23"/></name></name> <argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">processedcount<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">processedcount<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <literal type="number" pos:line="18" pos:column="22">0<pos:position pos:line="18" pos:column="23"/></literal></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">assert<pos:position pos:line="19" pos:column="11"/></name> <argument_list pos:line="19" pos:column="12">(<argument><expr><name><name pos:line="19" pos:column="13">output<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">-&gt;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="21">next<pos:position pos:line="19" pos:column="25"/></name></name> <operator pos:line="19" pos:column="26">==<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="29">NULL<pos:position pos:line="19" pos:column="33"/></name></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
