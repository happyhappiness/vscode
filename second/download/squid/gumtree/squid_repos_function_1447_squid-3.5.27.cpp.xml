<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1447_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">compare<pos:position pos:line="2" pos:column="14"/></name></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">s<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">SBufCaseSensitive<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">isCaseSensitive<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="71">const<pos:position pos:line="2" pos:column="76"/></specifier> <name pos:line="2" pos:column="77">size_type<pos:position pos:line="2" pos:column="86"/></name></type> <name pos:line="2" pos:column="87">n<pos:position pos:line="2" pos:column="88"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="89"/></parameter_list> <specifier pos:line="2" pos:column="90">const<pos:position pos:line="2" pos:column="95"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// 0-length comparison is always true regardless of buffer states</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">n<pos:position pos:line="5" pos:column="11"/></name></expr>)<pos:position pos:line="5" pos:column="12"/></condition><then pos:line="5" pos:column="12"> <block pos:line="5" pos:column="13">{
        <expr_stmt><expr><operator pos:line="6" pos:column="9">++<pos:position pos:line="6" pos:column="11"/></operator><name><name pos:line="6" pos:column="11">stats<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">.<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">compareFast<pos:position pos:line="6" pos:column="28"/></name></name></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt>
        <return pos:line="7" pos:column="9">return <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr>;<pos:position pos:line="7" pos:column="18"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="10" pos:column="5">// N-length compare MUST provide a non-NULL C-string pointer</comment>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">s<pos:position pos:line="11" pos:column="13"/></name></expr></argument>)<pos:position pos:line="11" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="15"/></expr_stmt>

    <comment type="line" pos:line="13" pos:column="5">// when this is a 0-length string, no need for any complexity.</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><call><name pos:line="14" pos:column="10">length<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">()<pos:position pos:line="14" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19"> <block pos:line="14" pos:column="20">{
        <expr_stmt><expr><operator pos:line="15" pos:column="9">++<pos:position pos:line="15" pos:column="11"/></operator><name><name pos:line="15" pos:column="11">stats<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">.<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">compareFast<pos:position pos:line="15" pos:column="28"/></name></name></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><literal type="char" pos:line="16" pos:column="16">'\0'<pos:position pos:line="16" pos:column="20"/></literal> <operator pos:line="16" pos:column="21">-<pos:position pos:line="16" pos:column="22"/></operator> <operator pos:line="16" pos:column="23">*<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">s<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="19" pos:column="5">// brute-force scan in order to avoid ever needing strlen() on a c-string.</comment>
    <expr_stmt><expr><operator pos:line="20" pos:column="5">++<pos:position pos:line="20" pos:column="7"/></operator><name><name pos:line="20" pos:column="7">stats<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">.<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">compareSlow<pos:position pos:line="20" pos:column="24"/></name></name></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="21" pos:column="5">const<pos:position pos:line="21" pos:column="10"/></specifier> <name pos:line="21" pos:column="11">char<pos:position pos:line="21" pos:column="15"/></name> <modifier pos:line="21" pos:column="16">*<pos:position pos:line="21" pos:column="17"/></modifier></type><name pos:line="21" pos:column="17">left<pos:position pos:line="21" pos:column="21"/></name> <init pos:line="21" pos:column="22">= <expr><call><name pos:line="21" pos:column="24">buf<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">()<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="22" pos:column="5">const<pos:position pos:line="22" pos:column="10"/></specifier> <name pos:line="22" pos:column="11">char<pos:position pos:line="22" pos:column="15"/></name> <modifier pos:line="22" pos:column="16">*<pos:position pos:line="22" pos:column="17"/></modifier></type><name pos:line="22" pos:column="17">right<pos:position pos:line="22" pos:column="22"/></name> <init pos:line="22" pos:column="23">= <expr><name pos:line="22" pos:column="25">s<pos:position pos:line="22" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">int<pos:position pos:line="23" pos:column="8"/></name></type> <name pos:line="23" pos:column="9">rv<pos:position pos:line="23" pos:column="11"/></name> <init pos:line="23" pos:column="12">= <expr><literal type="number" pos:line="23" pos:column="14">0<pos:position pos:line="23" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="16"/></decl_stmt>
    <comment type="line" pos:line="24" pos:column="5">// what area to scan.</comment>
    <comment type="line" pos:line="25" pos:column="5">// n may be npos, but we treat that as a huge positive value</comment>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">size_type<pos:position pos:line="26" pos:column="14"/></name></type> <name pos:line="26" pos:column="15">byteCount<pos:position pos:line="26" pos:column="24"/></name> <init pos:line="26" pos:column="25">= <expr><call><name pos:line="26" pos:column="27">min<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><call><name pos:line="26" pos:column="31">length<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">()<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="26" pos:column="41">n<pos:position pos:line="26" pos:column="42"/></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="44"/></decl_stmt>

    <comment type="line" pos:line="28" pos:column="5">// loop until we find a difference, a '\0', or reach the end of area to scan</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">isCaseSensitive<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">==<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="28">caseSensitive<pos:position pos:line="29" pos:column="41"/></name></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42"> <block pos:line="29" pos:column="43">{
        <while pos:line="30" pos:column="9">while <condition pos:line="30" pos:column="15">(<expr><operator pos:line="30" pos:column="16">(<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">rv<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <operator pos:line="30" pos:column="22">*<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="23">left<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">-<pos:position pos:line="30" pos:column="29"/></operator> <operator pos:line="30" pos:column="30">*<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="31">right<pos:position pos:line="30" pos:column="36"/></name><operator pos:line="30" pos:column="36">++<pos:position pos:line="30" pos:column="38"/></operator><operator pos:line="30" pos:column="38">)<pos:position pos:line="30" pos:column="39"/></operator> <operator pos:line="30" pos:column="40">==<pos:position pos:line="30" pos:column="42"/></operator> <literal type="number" pos:line="30" pos:column="43">0<pos:position pos:line="30" pos:column="44"/></literal></expr>)<pos:position pos:line="30" pos:column="45"/></condition> <block pos:line="30" pos:column="46">{
            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><operator pos:line="31" pos:column="17">*<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">left<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">++<pos:position pos:line="31" pos:column="24"/></operator> <operator pos:line="31" pos:column="25">==<pos:position pos:line="31" pos:column="27"/></operator> <literal type="char" pos:line="31" pos:column="28">'\0'<pos:position pos:line="31" pos:column="32"/></literal> <operator pos:line="31" pos:column="33">||<pos:position pos:line="31" pos:column="35"/></operator> <operator pos:line="31" pos:column="36">--<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="38">byteCount<pos:position pos:line="31" pos:column="47"/></name> <operator pos:line="31" pos:column="48">==<pos:position pos:line="31" pos:column="50"/></operator> <literal type="number" pos:line="31" pos:column="51">0<pos:position pos:line="31" pos:column="52"/></literal></expr>)<pos:position pos:line="31" pos:column="53"/></condition><then pos:line="31" pos:column="53">
                <block type="pseudo"><break pos:line="32" pos:column="17">break;<pos:position pos:line="32" pos:column="23"/></break></block></then></if>
        }<pos:position pos:line="33" pos:column="10"/></block></while>
    }<pos:position pos:line="34" pos:column="6"/></block></then> <else pos:line="34" pos:column="7">else <block pos:line="34" pos:column="12">{
        <while pos:line="35" pos:column="9">while <condition pos:line="35" pos:column="15">(<expr><operator pos:line="35" pos:column="16">(<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">rv<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <call><name pos:line="35" pos:column="22">tolower<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><operator pos:line="35" pos:column="30">*<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="31">left<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call> <operator pos:line="35" pos:column="37">-<pos:position pos:line="35" pos:column="38"/></operator> <call><name pos:line="35" pos:column="39">tolower<pos:position pos:line="35" pos:column="46"/></name><argument_list pos:line="35" pos:column="46">(<argument><expr><operator pos:line="35" pos:column="47">*<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="48">right<pos:position pos:line="35" pos:column="53"/></name><operator pos:line="35" pos:column="53">++<pos:position pos:line="35" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call><operator pos:line="35" pos:column="56">)<pos:position pos:line="35" pos:column="57"/></operator> <operator pos:line="35" pos:column="58">==<pos:position pos:line="35" pos:column="60"/></operator> <literal type="number" pos:line="35" pos:column="61">0<pos:position pos:line="35" pos:column="62"/></literal></expr>)<pos:position pos:line="35" pos:column="63"/></condition> <block pos:line="35" pos:column="64">{
            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><operator pos:line="36" pos:column="17">*<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="18">left<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">++<pos:position pos:line="36" pos:column="24"/></operator> <operator pos:line="36" pos:column="25">==<pos:position pos:line="36" pos:column="27"/></operator> <literal type="char" pos:line="36" pos:column="28">'\0'<pos:position pos:line="36" pos:column="32"/></literal> <operator pos:line="36" pos:column="33">||<pos:position pos:line="36" pos:column="35"/></operator> <operator pos:line="36" pos:column="36">--<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="38">byteCount<pos:position pos:line="36" pos:column="47"/></name> <operator pos:line="36" pos:column="48">==<pos:position pos:line="36" pos:column="50"/></operator> <literal type="number" pos:line="36" pos:column="51">0<pos:position pos:line="36" pos:column="52"/></literal></expr>)<pos:position pos:line="36" pos:column="53"/></condition><then pos:line="36" pos:column="53">
                <block type="pseudo"><break pos:line="37" pos:column="17">break;<pos:position pos:line="37" pos:column="23"/></break></block></then></if>
        }<pos:position pos:line="38" pos:column="10"/></block></while>
    }<pos:position pos:line="39" pos:column="6"/></block></else></if>

    <comment type="line" pos:line="41" pos:column="5">// If we stopped scanning because we reached the end</comment>
    <comment type="line" pos:line="42" pos:column="5">//  of buf() before we reached the end of s,</comment>
    <comment type="line" pos:line="43" pos:column="5">// pretend we have a 0-terminator there to compare.</comment>
    <comment type="line" pos:line="44" pos:column="5">// NP: the loop already incremented "right" ready for this comparison</comment>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><operator pos:line="45" pos:column="9">!<pos:position pos:line="45" pos:column="10"/></operator><name pos:line="45" pos:column="10">byteCount<pos:position pos:line="45" pos:column="19"/></name> <operator pos:line="45" pos:column="20">&amp;&amp;<pos:position pos:line="45" pos:column="30"/></operator> <call><name pos:line="45" pos:column="23">length<pos:position pos:line="45" pos:column="29"/></name><argument_list pos:line="45" pos:column="29">()<pos:position pos:line="45" pos:column="31"/></argument_list></call> <operator pos:line="45" pos:column="32">&lt;<pos:position pos:line="45" pos:column="36"/></operator> <name pos:line="45" pos:column="34">n<pos:position pos:line="45" pos:column="35"/></name></expr>)<pos:position pos:line="45" pos:column="36"/></condition><then pos:line="45" pos:column="36">
        <block type="pseudo"><return pos:line="46" pos:column="9">return <expr><literal type="char" pos:line="46" pos:column="16">'\0'<pos:position pos:line="46" pos:column="20"/></literal> <operator pos:line="46" pos:column="21">-<pos:position pos:line="46" pos:column="22"/></operator> <operator pos:line="46" pos:column="23">*<pos:position pos:line="46" pos:column="24"/></operator><name pos:line="46" pos:column="24">right<pos:position pos:line="46" pos:column="29"/></name></expr>;<pos:position pos:line="46" pos:column="30"/></return></block></then></if>

    <comment type="line" pos:line="48" pos:column="5">// If we found a difference within the scan area,</comment>
    <comment type="line" pos:line="49" pos:column="5">// or we found a '\0',</comment>
    <comment type="line" pos:line="50" pos:column="5">// or all n characters were identical (and none was \0).</comment>
    <return pos:line="51" pos:column="5">return <expr><name pos:line="51" pos:column="12">rv<pos:position pos:line="51" pos:column="14"/></name></expr>;<pos:position pos:line="51" pos:column="15"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
