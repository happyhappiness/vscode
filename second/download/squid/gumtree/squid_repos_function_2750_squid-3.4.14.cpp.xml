<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2750_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">TunnelStateData<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">keepGoingAfterRead<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">(<parameter><decl><type><name pos:line="2" pos:column="37">size_t<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">len<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">comm_err_t<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">errcode<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="69">int<pos:position pos:line="2" pos:column="72"/></name></type> <name pos:line="2" pos:column="73">xerrno<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="81">Connection<pos:position pos:line="2" pos:column="91"/></name> <modifier pos:line="2" pos:column="92">&amp;<pos:position pos:line="2" pos:column="97"/></modifier></type><name pos:line="2" pos:column="93">from<pos:position pos:line="2" pos:column="97"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="99">Connection<pos:position pos:line="2" pos:column="109"/></name> <modifier pos:line="2" pos:column="110">&amp;<pos:position pos:line="2" pos:column="115"/></modifier></type><name pos:line="2" pos:column="111">to<pos:position pos:line="2" pos:column="113"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="114"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">26<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="string" pos:line="4" pos:column="27">"from={"<pos:position pos:line="4" pos:column="35"/></literal> <operator pos:line="4" pos:column="36">&lt;&lt;<pos:position pos:line="4" pos:column="44"/></operator> <name><name pos:line="4" pos:column="39">from<pos:position pos:line="4" pos:column="43"/></name><operator pos:line="4" pos:column="43">.<pos:position pos:line="4" pos:column="44"/></operator><name pos:line="4" pos:column="44">conn<pos:position pos:line="4" pos:column="48"/></name></name> <operator pos:line="4" pos:column="49">&lt;&lt;<pos:position pos:line="4" pos:column="57"/></operator> <literal type="string" pos:line="4" pos:column="52">"}, to={"<pos:position pos:line="4" pos:column="61"/></literal> <operator pos:line="4" pos:column="62">&lt;&lt;<pos:position pos:line="4" pos:column="70"/></operator> <name><name pos:line="4" pos:column="65">to<pos:position pos:line="4" pos:column="67"/></name><operator pos:line="4" pos:column="67">.<pos:position pos:line="4" pos:column="68"/></operator><name pos:line="4" pos:column="68">conn<pos:position pos:line="4" pos:column="72"/></name></name> <operator pos:line="4" pos:column="73">&lt;&lt;<pos:position pos:line="4" pos:column="81"/></operator> <literal type="string" pos:line="4" pos:column="76">"}"<pos:position pos:line="4" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="81"/></expr_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* I think this is to prevent free-while-in-a-callback behaviour
     * - RBC 20030229
     * from.conn-&gt;close() / to.conn-&gt;close() done here trigger close callbacks which may free TunnelStateData
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name><name pos:line="10" pos:column="11">CbcPointer<pos:position pos:line="10" pos:column="21"/></name><argument_list type="generic" pos:line="10" pos:column="21">&lt;<argument><expr><name pos:line="10" pos:column="22">TunnelStateData<pos:position pos:line="10" pos:column="37"/></name></expr></argument>&gt;<pos:position pos:line="10" pos:column="41"/></argument_list></name></type> <name pos:line="10" pos:column="39">safetyLock<pos:position pos:line="10" pos:column="49"/></name><argument_list pos:line="10" pos:column="49">(<argument><expr><name pos:line="10" pos:column="50">this<pos:position pos:line="10" pos:column="54"/></name></expr></argument>)<pos:position pos:line="10" pos:column="55"/></argument_list></decl>;<pos:position pos:line="10" pos:column="56"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* Bump the source connection read timeout on any activity */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name><name pos:line="13" pos:column="9">Comm<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">::<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">IsConnOpen<pos:position pos:line="13" pos:column="25"/></name></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name><name pos:line="13" pos:column="26">from<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">.<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">conn<pos:position pos:line="13" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="37"/></condition><then pos:line="13" pos:column="37"> <block pos:line="13" pos:column="38">{
        <decl_stmt><decl><type><name><name pos:line="14" pos:column="9">AsyncCall<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">::<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">Pointer<pos:position pos:line="14" pos:column="27"/></name></name></type> <name pos:line="14" pos:column="28">timeoutCall<pos:position pos:line="14" pos:column="39"/></name> <init pos:line="14" pos:column="40">= <expr><call><name pos:line="14" pos:column="42">commCbCall<pos:position pos:line="14" pos:column="52"/></name><argument_list pos:line="14" pos:column="52">(<argument><expr><literal type="number" pos:line="14" pos:column="53">5<pos:position pos:line="14" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="56">4<pos:position pos:line="14" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="59">"tunnelTimeout"<pos:position pos:line="14" pos:column="74"/></literal></expr></argument>,
                                         <argument><expr><call><name pos:line="15" pos:column="42">CommTimeoutCbPtrFun<pos:position pos:line="15" pos:column="61"/></name><argument_list pos:line="15" pos:column="61">(<argument><expr><name pos:line="15" pos:column="62">tunnelTimeout<pos:position pos:line="15" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="77">this<pos:position pos:line="15" pos:column="81"/></name></expr></argument>)<pos:position pos:line="15" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="84"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">commSetConnTimeout<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name><name pos:line="16" pos:column="28">from<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">.<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="33">conn<pos:position pos:line="16" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="39">Config<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">.<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">Timeout<pos:position pos:line="16" pos:column="53"/></name><operator pos:line="16" pos:column="53">.<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="54">read<pos:position pos:line="16" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="60">timeoutCall<pos:position pos:line="16" pos:column="71"/></name></expr></argument>)<pos:position pos:line="16" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="19" pos:column="5">/* Bump the dest connection read timeout on any activity */</comment>
    <comment type="block" pos:line="20" pos:column="5">/* see Bug 3659: tunnels can be weird, with very long one-way transfers */</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name><name pos:line="21" pos:column="9">Comm<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">::<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">IsConnOpen<pos:position pos:line="21" pos:column="25"/></name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name><name pos:line="21" pos:column="26">to<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">.<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">conn<pos:position pos:line="21" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="35"/></condition><then pos:line="21" pos:column="35"> <block pos:line="21" pos:column="36">{
        <decl_stmt><decl><type><name><name pos:line="22" pos:column="9">AsyncCall<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">::<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">Pointer<pos:position pos:line="22" pos:column="27"/></name></name></type> <name pos:line="22" pos:column="28">timeoutCall<pos:position pos:line="22" pos:column="39"/></name> <init pos:line="22" pos:column="40">= <expr><call><name pos:line="22" pos:column="42">commCbCall<pos:position pos:line="22" pos:column="52"/></name><argument_list pos:line="22" pos:column="52">(<argument><expr><literal type="number" pos:line="22" pos:column="53">5<pos:position pos:line="22" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="56">4<pos:position pos:line="22" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="59">"tunnelTimeout"<pos:position pos:line="22" pos:column="74"/></literal></expr></argument>,
                                         <argument><expr><call><name pos:line="23" pos:column="42">CommTimeoutCbPtrFun<pos:position pos:line="23" pos:column="61"/></name><argument_list pos:line="23" pos:column="61">(<argument><expr><name pos:line="23" pos:column="62">tunnelTimeout<pos:position pos:line="23" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="77">this<pos:position pos:line="23" pos:column="81"/></name></expr></argument>)<pos:position pos:line="23" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="84"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">commSetConnTimeout<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><name><name pos:line="24" pos:column="28">to<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">.<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="31">conn<pos:position pos:line="24" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="37">Config<pos:position pos:line="24" pos:column="43"/></name><operator pos:line="24" pos:column="43">.<pos:position pos:line="24" pos:column="44"/></operator><name pos:line="24" pos:column="44">Timeout<pos:position pos:line="24" pos:column="51"/></name><operator pos:line="24" pos:column="51">.<pos:position pos:line="24" pos:column="52"/></operator><name pos:line="24" pos:column="52">read<pos:position pos:line="24" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="58">timeoutCall<pos:position pos:line="24" pos:column="69"/></name></expr></argument>)<pos:position pos:line="24" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">errcode<pos:position pos:line="27" pos:column="16"/></name></expr>)<pos:position pos:line="27" pos:column="17"/></condition><then pos:line="27" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="28" pos:column="9">from<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">.<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">error<pos:position pos:line="28" pos:column="19"/></name></name> <argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">xerrno<pos:position pos:line="28" pos:column="27"/></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt></block></then>
    <elseif pos:line="29" pos:column="5">else <if pos:line="29" pos:column="10">if <condition pos:line="29" pos:column="13">(<expr><name pos:line="29" pos:column="14">len<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">==<pos:position pos:line="29" pos:column="20"/></operator> <literal type="number" pos:line="29" pos:column="21">0<pos:position pos:line="29" pos:column="22"/></literal> <operator pos:line="29" pos:column="23">||<pos:position pos:line="29" pos:column="25"/></operator> <operator pos:line="29" pos:column="26">!<pos:position pos:line="29" pos:column="27"/></operator><call><name><name pos:line="29" pos:column="27">Comm<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">::<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="33">IsConnOpen<pos:position pos:line="29" pos:column="43"/></name></name><argument_list pos:line="29" pos:column="43">(<argument><expr><name><name pos:line="29" pos:column="44">to<pos:position pos:line="29" pos:column="46"/></name><operator pos:line="29" pos:column="46">.<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="47">conn<pos:position pos:line="29" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="53"/></condition><then pos:line="29" pos:column="53"> <block pos:line="29" pos:column="54">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">26<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">3<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="23">HERE<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">&lt;&lt;<pos:position pos:line="30" pos:column="36"/></operator> <literal type="string" pos:line="30" pos:column="31">"Nothing to write or client gone. Terminate the tunnel."<pos:position pos:line="30" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="89"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="31" pos:column="9">from<pos:position pos:line="31" pos:column="13"/></name><operator pos:line="31" pos:column="13">.<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">conn<pos:position pos:line="31" pos:column="18"/></name><operator pos:line="31" pos:column="18">-&gt;<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="20">close<pos:position pos:line="31" pos:column="25"/></name></name><argument_list pos:line="31" pos:column="25">()<pos:position pos:line="31" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>

        <comment type="block" pos:line="33" pos:column="9">/* Only close the remote end if we've finished queueing data to it */</comment>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name><name pos:line="34" pos:column="13">from<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">.<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">len<pos:position pos:line="34" pos:column="21"/></name></name> <operator pos:line="34" pos:column="22">==<pos:position pos:line="34" pos:column="24"/></operator> <literal type="number" pos:line="34" pos:column="25">0<pos:position pos:line="34" pos:column="26"/></literal> <operator pos:line="34" pos:column="27">&amp;&amp;<pos:position pos:line="34" pos:column="37"/></operator> <call><name><name pos:line="34" pos:column="30">Comm<pos:position pos:line="34" pos:column="34"/></name><operator pos:line="34" pos:column="34">::<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="36">IsConnOpen<pos:position pos:line="34" pos:column="46"/></name></name><argument_list pos:line="34" pos:column="46">(<argument><expr><name><name pos:line="34" pos:column="47">to<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">.<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="50">conn<pos:position pos:line="34" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call></expr> )<pos:position pos:line="34" pos:column="57"/></condition><then pos:line="34" pos:column="57"> <block pos:line="34" pos:column="58">{
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">to<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">.<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="16">conn<pos:position pos:line="35" pos:column="20"/></name><operator pos:line="35" pos:column="20">-&gt;<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="22">close<pos:position pos:line="35" pos:column="27"/></name></name><argument_list pos:line="35" pos:column="27">()<pos:position pos:line="35" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if></elseif> <elseif pos:line="37" pos:column="7">else <if pos:line="37" pos:column="12">if <condition pos:line="37" pos:column="15">(<expr><call><name pos:line="37" pos:column="16">cbdataReferenceValid<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><name pos:line="37" pos:column="37">this<pos:position pos:line="37" pos:column="41"/></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="43"/></condition><then pos:line="37" pos:column="43"> <block pos:line="37" pos:column="44">{
        <return pos:line="38" pos:column="9">return <expr><literal type="boolean" pos:line="38" pos:column="16">true<pos:position pos:line="38" pos:column="20"/></literal></expr>;<pos:position pos:line="38" pos:column="21"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if></elseif></if>

    <return pos:line="41" pos:column="5">return <expr><literal type="boolean" pos:line="41" pos:column="12">false<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
