<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4869_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLAtStepData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">parse<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">()<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <while pos:line="4" pos:column="5">while <condition pos:line="4" pos:column="11">(<decl><type><specifier pos:line="4" pos:column="12">const<pos:position pos:line="4" pos:column="17"/></specifier> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">t<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><call><name pos:line="4" pos:column="28">strtokFile<pos:position pos:line="4" pos:column="38"/></name><argument_list pos:line="4" pos:column="38">()<pos:position pos:line="4" pos:column="40"/></argument_list></call></expr></init></decl>)<pos:position pos:line="4" pos:column="41"/></condition> <block pos:line="4" pos:column="42">{
        <if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">strcasecmp<pos:position pos:line="5" pos:column="23"/></name><argument_list pos:line="5" pos:column="23">(<argument><expr><name pos:line="5" pos:column="24">t<pos:position pos:line="5" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="27">"SslBump1"<pos:position pos:line="5" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></call> <operator pos:line="5" pos:column="39">==<pos:position pos:line="5" pos:column="41"/></operator> <literal type="number" pos:line="5" pos:column="42">0<pos:position pos:line="5" pos:column="43"/></literal></expr>)<pos:position pos:line="5" pos:column="44"/></condition><then pos:line="5" pos:column="44"> <block pos:line="5" pos:column="45">{
            <expr_stmt><expr><call><name><name pos:line="6" pos:column="13">values<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">.<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="20">push_back<pos:position pos:line="6" pos:column="29"/></name></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name><name pos:line="6" pos:column="30">Ssl<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">::<pos:position pos:line="6" pos:column="35"/></operator><name pos:line="6" pos:column="35">bumpStep1<pos:position pos:line="6" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="7" pos:column="10"/></block></then> <elseif pos:line="7" pos:column="11">else <if pos:line="7" pos:column="16">if <condition pos:line="7" pos:column="19">(<expr><call><name pos:line="7" pos:column="20">strcasecmp<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">t<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="34">"SslBump2"<pos:position pos:line="7" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call> <operator pos:line="7" pos:column="46">==<pos:position pos:line="7" pos:column="48"/></operator> <literal type="number" pos:line="7" pos:column="49">0<pos:position pos:line="7" pos:column="50"/></literal></expr>)<pos:position pos:line="7" pos:column="51"/></condition><then pos:line="7" pos:column="51"> <block pos:line="7" pos:column="52">{
            <expr_stmt><expr><call><name><name pos:line="8" pos:column="13">values<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">.<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">push_back<pos:position pos:line="8" pos:column="29"/></name></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name><name pos:line="8" pos:column="30">Ssl<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">::<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="35">bumpStep2<pos:position pos:line="8" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="9" pos:column="10"/></block></then></if></elseif> <elseif pos:line="9" pos:column="11">else <if pos:line="9" pos:column="16">if <condition pos:line="9" pos:column="19">(<expr><call><name pos:line="9" pos:column="20">strcasecmp<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">t<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="34">"SslBump3"<pos:position pos:line="9" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call> <operator pos:line="9" pos:column="46">==<pos:position pos:line="9" pos:column="48"/></operator> <literal type="number" pos:line="9" pos:column="49">0<pos:position pos:line="9" pos:column="50"/></literal></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51"> <block pos:line="9" pos:column="52">{
            <expr_stmt><expr><call><name><name pos:line="10" pos:column="13">values<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">.<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="20">push_back<pos:position pos:line="10" pos:column="29"/></name></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name><name pos:line="10" pos:column="30">Ssl<pos:position pos:line="10" pos:column="33"/></name><operator pos:line="10" pos:column="33">::<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">bumpStep3<pos:position pos:line="10" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="11" pos:column="10"/></block></then></if></elseif> <else pos:line="11" pos:column="11">else <block pos:line="11" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">debugs<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><literal type="number" pos:line="12" pos:column="20">28<pos:position pos:line="12" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="24">DBG_CRITICAL<pos:position pos:line="12" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="38">"FATAL: invalid AtStep step: "<pos:position pos:line="12" pos:column="68"/></literal> <operator pos:line="12" pos:column="69">&lt;&lt;<pos:position pos:line="12" pos:column="77"/></operator> <name pos:line="12" pos:column="72">t<pos:position pos:line="12" pos:column="73"/></name></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="75"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">self_destruct<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">()<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block></else></if>
    }<pos:position pos:line="15" pos:column="6"/></block></while>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
