<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3423_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">clientReplyContext<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">createStoreEntry<pos:position pos:line="2" pos:column="37"/></name></name><parameter_list pos:line="2" pos:column="37">(<parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">HttpRequestMethod<pos:position pos:line="2" pos:column="61"/></name><modifier pos:line="2" pos:column="61">&amp;<pos:position pos:line="2" pos:column="66"/></modifier></type> <name pos:line="2" pos:column="63">m<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">RequestFlags<pos:position pos:line="2" pos:column="78"/></name></type> <name pos:line="2" pos:column="79">reqFlags<pos:position pos:line="2" pos:column="87"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="88"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">http<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">!=<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="20">NULL<pos:position pos:line="4" pos:column="24"/></name></expr></argument>)<pos:position pos:line="4" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="5" pos:column="5">/*
     * For erroneous requests, we might not have a h-&gt;request,
     * so make a fake one.
     */</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">http<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">request<pos:position pos:line="10" pos:column="22"/></name></name> <operator pos:line="10" pos:column="23">==<pos:position pos:line="10" pos:column="25"/></operator> <name pos:line="10" pos:column="26">NULL<pos:position pos:line="10" pos:column="30"/></name></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="11" pos:column="9">http<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">-&gt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">request<pos:position pos:line="11" pos:column="22"/></name></name> <operator pos:line="11" pos:column="23">=<pos:position pos:line="11" pos:column="24"/></operator> <call><name pos:line="11" pos:column="25">HTTPMSGLOCK<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">(<argument><expr><operator pos:line="11" pos:column="37">new<pos:position pos:line="11" pos:column="40"/></operator> <call><name pos:line="11" pos:column="41">HttpRequest<pos:position pos:line="11" pos:column="52"/></name><argument_list pos:line="11" pos:column="52">(<argument><expr><name pos:line="11" pos:column="53">m<pos:position pos:line="11" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="56">AnyP<pos:position pos:line="11" pos:column="60"/></name><operator pos:line="11" pos:column="60">::<pos:position pos:line="11" pos:column="62"/></operator><name pos:line="11" pos:column="62">PROTO_NONE<pos:position pos:line="11" pos:column="72"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="74">null_string<pos:position pos:line="11" pos:column="85"/></name></expr></argument>)<pos:position pos:line="11" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="88"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">StoreEntry<pos:position pos:line="13" pos:column="15"/></name> <modifier pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></modifier></type><name pos:line="13" pos:column="17">e<pos:position pos:line="13" pos:column="18"/></name> <init pos:line="13" pos:column="19">= <expr><call><name pos:line="13" pos:column="21">storeCreateEntry<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name><name pos:line="13" pos:column="38">http<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">-&gt;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="44">uri<pos:position pos:line="13" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="49">http<pos:position pos:line="13" pos:column="53"/></name><operator pos:line="13" pos:column="53">-&gt;<pos:position pos:line="13" pos:column="58"/></operator><name pos:line="13" pos:column="55">log_uri<pos:position pos:line="13" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="64">reqFlags<pos:position pos:line="13" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="74">m<pos:position pos:line="13" pos:column="75"/></name></expr></argument>)<pos:position pos:line="13" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="77"/></decl_stmt>

    <expr_stmt><expr><name pos:line="15" pos:column="5">sc<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <call><name pos:line="15" pos:column="10">storeClientListAdd<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">e<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="32">this<pos:position pos:line="15" pos:column="36"/></name></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>

<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if<pos:position pos:line="17" pos:column="4"/></cpp:directive> <expr><name pos:line="17" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="17" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="18" pos:column="5">sc<pos:position pos:line="18" pos:column="7"/></name><operator pos:line="18" pos:column="7">-&gt;<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="9">setDelayId<pos:position pos:line="18" pos:column="19"/></name></name><argument_list pos:line="18" pos:column="19">(<argument><expr><call><name><name pos:line="18" pos:column="20">DelayId<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">::<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="29">DelayClient<pos:position pos:line="18" pos:column="40"/></name></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">http<pos:position pos:line="18" pos:column="45"/></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="21" pos:column="5">reqofs<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>;<pos:position pos:line="21" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><name pos:line="23" pos:column="5">reqsize<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <literal type="number" pos:line="23" pos:column="15">0<pos:position pos:line="23" pos:column="16"/></literal></expr>;<pos:position pos:line="23" pos:column="17"/></expr_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* I don't think this is actually needed! -- adrian */</comment>
    <comment type="block" pos:line="26" pos:column="5">/* http-&gt;reqbuf = http-&gt;norm_reqbuf; */</comment>
    <comment type="line" pos:line="27" pos:column="5">//    assert(http-&gt;reqbuf == http-&gt;norm_reqbuf);</comment>
    <comment type="block" pos:line="28" pos:column="5">/* The next line is illegal because we don't know if the client stream
     * buffers have been set up
     */</comment>
    <comment type="line" pos:line="31" pos:column="5">//    storeClientCopy(http-&gt;sc, e, 0, HTTP_REQBUF_SZ, http-&gt;reqbuf,</comment>
    <comment type="line" pos:line="32" pos:column="5">//        SendMoreData, this);</comment>
    <comment type="block" pos:line="33" pos:column="5">/* So, we mark the store logic as complete */</comment>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">flags<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">.<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="11">storelogiccomplete<pos:position pos:line="34" pos:column="29"/></name></name> <operator pos:line="34" pos:column="30">=<pos:position pos:line="34" pos:column="31"/></operator> <literal type="number" pos:line="34" pos:column="32">1<pos:position pos:line="34" pos:column="33"/></literal></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* and get the caller to request a read, from whereever they are */</comment>
    <comment type="block" pos:line="37" pos:column="5">/* NOTE: after ANY data flows down the pipe, even one step,
     * this function CAN NOT be used to manage errors
     */</comment>
    <expr_stmt><expr><call><name><name pos:line="40" pos:column="5">http<pos:position pos:line="40" pos:column="9"/></name><operator pos:line="40" pos:column="9">-&gt;<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="11">storeEntry<pos:position pos:line="40" pos:column="21"/></name></name><argument_list pos:line="40" pos:column="21">(<argument><expr><name pos:line="40" pos:column="22">e<pos:position pos:line="40" pos:column="23"/></name></expr></argument>)<pos:position pos:line="40" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
