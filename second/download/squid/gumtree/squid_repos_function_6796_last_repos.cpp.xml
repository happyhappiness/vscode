<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6796_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ESILibxml2Parser<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">parse<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">dataToParse<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">size_t<pos:position pos:line="2" pos:column="56"/></name> <specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier></type> <name pos:line="2" pos:column="63">lengthOfData<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="77">bool<pos:position pos:line="2" pos:column="81"/></name> <specifier pos:line="2" pos:column="82">const<pos:position pos:line="2" pos:column="87"/></specifier></type> <name pos:line="2" pos:column="88">endOfStream<pos:position pos:line="2" pos:column="99"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="100"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <return pos:line="4" pos:column="5">return <expr><operator pos:line="4" pos:column="12">(<pos:position pos:line="4" pos:column="13"/></operator><call><name pos:line="4" pos:column="13">xmlParseChunk<pos:position pos:line="4" pos:column="26"/></name><argument_list pos:line="4" pos:column="26">(<argument><expr><name pos:line="4" pos:column="27">parser<pos:position pos:line="4" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="35">dataToParse<pos:position pos:line="4" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="48">lengthOfData<pos:position pos:line="4" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="62">endOfStream<pos:position pos:line="4" pos:column="73"/></name></expr></argument>)<pos:position pos:line="4" pos:column="74"/></argument_list></call> <operator pos:line="4" pos:column="75">==<pos:position pos:line="4" pos:column="77"/></operator> <literal type="number" pos:line="4" pos:column="78">0<pos:position pos:line="4" pos:column="79"/></literal><operator pos:line="4" pos:column="79">)<pos:position pos:line="4" pos:column="80"/></operator></expr>;<pos:position pos:line="4" pos:column="81"/></return>
}<pos:position pos:line="5" pos:column="2"/></block></function></unit>
