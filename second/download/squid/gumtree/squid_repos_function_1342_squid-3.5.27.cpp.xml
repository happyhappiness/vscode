<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1342_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">peerSelectDnsResults<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">ipcache_addrs<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">ia<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier> <name pos:line="2" pos:column="53">DnsLookupDetails<pos:position pos:line="2" pos:column="69"/></name> <modifier pos:line="2" pos:column="70">&amp;<pos:position pos:line="2" pos:column="75"/></modifier></type><name pos:line="2" pos:column="71">details<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="80">void<pos:position pos:line="2" pos:column="84"/></name> <modifier pos:line="2" pos:column="85">*<pos:position pos:line="2" pos:column="86"/></modifier></type><name pos:line="2" pos:column="86">data<pos:position pos:line="2" pos:column="90"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="91"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ps_state<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">psstate<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><operator pos:line="4" pos:column="25">(<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="26">ps_state<pos:position pos:line="4" pos:column="34"/></name> <operator pos:line="4" pos:column="35">*<pos:position pos:line="4" pos:column="36"/></operator><operator pos:line="4" pos:column="36">)<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">data<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name pos:line="6" pos:column="10">cbdataReferenceValid<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name><name pos:line="6" pos:column="31">psstate<pos:position pos:line="6" pos:column="38"/></name><operator pos:line="6" pos:column="38">-&gt;<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="40">callback_data<pos:position pos:line="6" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="55"/></condition><then pos:line="6" pos:column="55"> <block pos:line="6" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">44<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">3<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="23">"Aborting peer selection. Parent Job went away."<pos:position pos:line="7" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="8" pos:column="9">delete<pos:position pos:line="8" pos:column="15"/></operator> <name pos:line="8" pos:column="16">psstate<pos:position pos:line="8" pos:column="23"/></name></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>
        <return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">psstate<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">request<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">-&gt;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="23">recordLookup<pos:position pos:line="12" pos:column="35"/></name></name><argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">details<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">FwdServer<pos:position pos:line="14" pos:column="14"/></name> <modifier pos:line="14" pos:column="15">*<pos:position pos:line="14" pos:column="16"/></modifier></type><name pos:line="14" pos:column="16">fs<pos:position pos:line="14" pos:column="18"/></name> <init pos:line="14" pos:column="19">= <expr><name><name pos:line="14" pos:column="21">psstate<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">-&gt;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="30">servers<pos:position pos:line="14" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="38"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">ia<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">!=<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="15">NULL<pos:position pos:line="15" pos:column="19"/></name></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20"> <block pos:line="15" pos:column="21">{

        <expr_stmt><expr><call><name pos:line="17" pos:column="9">assert<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><name><name pos:line="17" pos:column="16">ia<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">cur<pos:position pos:line="17" pos:column="23"/></name></name> <operator pos:line="17" pos:column="24">&lt;<pos:position pos:line="17" pos:column="28"/></operator> <name><name pos:line="17" pos:column="26">ia<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">-&gt;<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="30">count<pos:position pos:line="17" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>

        <comment type="line" pos:line="19" pos:column="9">// loop over each result address, adding to the possible destinations.</comment>
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">int<pos:position pos:line="20" pos:column="12"/></name></type> <name pos:line="20" pos:column="13">ip<pos:position pos:line="20" pos:column="15"/></name> <init pos:line="20" pos:column="16">= <expr><name><name pos:line="20" pos:column="18">ia<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">cur<pos:position pos:line="20" pos:column="25"/></name></name></expr></init></decl>;<pos:position pos:line="20" pos:column="26"/></decl_stmt>
        <for pos:line="21" pos:column="9">for <control pos:line="21" pos:column="13">(<init><decl><type><name pos:line="21" pos:column="14">int<pos:position pos:line="21" pos:column="17"/></name></type> <name pos:line="21" pos:column="18">n<pos:position pos:line="21" pos:column="19"/></name> <init pos:line="21" pos:column="20">= <expr><literal type="number" pos:line="21" pos:column="22">0<pos:position pos:line="21" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="24"/></init> <condition><expr><name pos:line="21" pos:column="25">n<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">&lt;<pos:position pos:line="21" pos:column="31"/></operator> <name><name pos:line="21" pos:column="29">ia<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">count<pos:position pos:line="21" pos:column="38"/></name></name></expr>;<pos:position pos:line="21" pos:column="39"/></condition> <incr><expr><operator pos:line="21" pos:column="40">++<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="42">n<pos:position pos:line="21" pos:column="43"/></name></expr><operator pos:line="21" pos:column="43">,<pos:position pos:line="21" pos:column="44"/></operator> <expr><operator pos:line="21" pos:column="45">++<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="47">ip<pos:position pos:line="21" pos:column="49"/></name></expr></incr>)<pos:position pos:line="21" pos:column="50"/></control> <block pos:line="21" pos:column="51">{
            <decl_stmt><decl><type><name><name pos:line="22" pos:column="13">Comm<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">::<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="19">ConnectionPointer<pos:position pos:line="22" pos:column="36"/></name></name></type> <name pos:line="22" pos:column="37">p<pos:position pos:line="22" pos:column="38"/></name></decl>;<pos:position pos:line="22" pos:column="39"/></decl_stmt>

            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><name pos:line="24" pos:column="17">ip<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">&gt;=<pos:position pos:line="24" pos:column="25"/></operator> <name><name pos:line="24" pos:column="23">ia<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">-&gt;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="27">count<pos:position pos:line="24" pos:column="32"/></name></name></expr>)<pos:position pos:line="24" pos:column="33"/></condition><then pos:line="24" pos:column="33"> <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="34">ip<pos:position pos:line="24" pos:column="36"/></name> <operator pos:line="24" pos:column="37">=<pos:position pos:line="24" pos:column="38"/></operator> <literal type="number" pos:line="24" pos:column="39">0<pos:position pos:line="24" pos:column="40"/></literal></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt></block></then></if> <comment type="line" pos:line="24" pos:column="42">// looped back to zero.</comment>

            <comment type="line" pos:line="26" pos:column="13">// Enforce forward_max_tries configuration.</comment>
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><call><name><name pos:line="27" pos:column="17">psstate<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">-&gt;<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="26">paths<pos:position pos:line="27" pos:column="31"/></name><operator pos:line="27" pos:column="31">-&gt;<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="33">size<pos:position pos:line="27" pos:column="37"/></name></name><argument_list pos:line="27" pos:column="37">()<pos:position pos:line="27" pos:column="39"/></argument_list></call> <operator pos:line="27" pos:column="40">&gt;=<pos:position pos:line="27" pos:column="45"/></operator> <operator pos:line="27" pos:column="43">(<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="44">unsigned<pos:position pos:line="27" pos:column="52"/></name> <name pos:line="27" pos:column="53">int<pos:position pos:line="27" pos:column="56"/></name><operator pos:line="27" pos:column="56">)<pos:position pos:line="27" pos:column="57"/></operator><name><name pos:line="27" pos:column="57">Config<pos:position pos:line="27" pos:column="63"/></name><operator pos:line="27" pos:column="63">.<pos:position pos:line="27" pos:column="64"/></operator><name pos:line="27" pos:column="64">forward_max_tries<pos:position pos:line="27" pos:column="81"/></name></name></expr>)<pos:position pos:line="27" pos:column="82"/></condition><then pos:line="27" pos:column="82">
                <block type="pseudo"><break pos:line="28" pos:column="17">break;<pos:position pos:line="28" pos:column="23"/></break></block></then></if>

            <comment type="line" pos:line="30" pos:column="13">// for TPROXY spoofing we must skip unusable addresses.</comment>
            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><name><name pos:line="31" pos:column="17">psstate<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">-&gt;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="26">request<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">-&gt;<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="35">flags<pos:position pos:line="31" pos:column="40"/></name><operator pos:line="31" pos:column="40">.<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="41">spoofClientIp<pos:position pos:line="31" pos:column="54"/></name></name> <operator pos:line="31" pos:column="55">&amp;&amp;<pos:position pos:line="31" pos:column="65"/></operator> <operator pos:line="31" pos:column="58">!<pos:position pos:line="31" pos:column="59"/></operator><operator pos:line="31" pos:column="59">(<pos:position pos:line="31" pos:column="60"/></operator><name><name pos:line="31" pos:column="60">fs<pos:position pos:line="31" pos:column="62"/></name><operator pos:line="31" pos:column="62">-&gt;<pos:position pos:line="31" pos:column="67"/></operator><name pos:line="31" pos:column="64">_peer<pos:position pos:line="31" pos:column="69"/></name></name> <operator pos:line="31" pos:column="70">&amp;&amp;<pos:position pos:line="31" pos:column="80"/></operator> <name><name pos:line="31" pos:column="73">fs<pos:position pos:line="31" pos:column="75"/></name><operator pos:line="31" pos:column="75">-&gt;<pos:position pos:line="31" pos:column="80"/></operator><name pos:line="31" pos:column="77">_peer<pos:position pos:line="31" pos:column="82"/></name><operator pos:line="31" pos:column="82">-&gt;<pos:position pos:line="31" pos:column="87"/></operator><name pos:line="31" pos:column="84">options<pos:position pos:line="31" pos:column="91"/></name><operator pos:line="31" pos:column="91">.<pos:position pos:line="31" pos:column="92"/></operator><name pos:line="31" pos:column="92">no_tproxy<pos:position pos:line="31" pos:column="101"/></name></name><operator pos:line="31" pos:column="101">)<pos:position pos:line="31" pos:column="102"/></operator></expr> )<pos:position pos:line="31" pos:column="104"/></condition><then pos:line="31" pos:column="104"> <block pos:line="31" pos:column="105">{
                <if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name><name pos:line="32" pos:column="21">ia<pos:position pos:line="32" pos:column="23"/></name><operator pos:line="32" pos:column="23">-&gt;<pos:position pos:line="32" pos:column="28"/></operator><name pos:line="32" pos:column="25">in_addrs<pos:position pos:line="32" pos:column="33"/></name><index pos:line="32" pos:column="33">[<expr><name pos:line="32" pos:column="34">ip<pos:position pos:line="32" pos:column="36"/></name></expr>]<pos:position pos:line="32" pos:column="37"/></index></name><operator pos:line="32" pos:column="37">.<pos:position pos:line="32" pos:column="38"/></operator><call><name pos:line="32" pos:column="38">isIPv4<pos:position pos:line="32" pos:column="44"/></name><argument_list pos:line="32" pos:column="44">()<pos:position pos:line="32" pos:column="46"/></argument_list></call> <operator pos:line="32" pos:column="47">!=<pos:position pos:line="32" pos:column="49"/></operator> <call><name><name pos:line="32" pos:column="50">psstate<pos:position pos:line="32" pos:column="57"/></name><operator pos:line="32" pos:column="57">-&gt;<pos:position pos:line="32" pos:column="62"/></operator><name pos:line="32" pos:column="59">request<pos:position pos:line="32" pos:column="66"/></name><operator pos:line="32" pos:column="66">-&gt;<pos:position pos:line="32" pos:column="71"/></operator><name pos:line="32" pos:column="68">client_addr<pos:position pos:line="32" pos:column="79"/></name><operator pos:line="32" pos:column="79">.<pos:position pos:line="32" pos:column="80"/></operator><name pos:line="32" pos:column="80">isIPv4<pos:position pos:line="32" pos:column="86"/></name></name><argument_list pos:line="32" pos:column="86">()<pos:position pos:line="32" pos:column="88"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="89"/></condition><then pos:line="32" pos:column="89"> <block pos:line="32" pos:column="90">{
                    <comment type="line" pos:line="33" pos:column="21">// we CAN'T spoof the address on this link. find another.</comment>
                    <continue pos:line="34" pos:column="21">continue;<pos:position pos:line="34" pos:column="30"/></continue>
                }<pos:position pos:line="35" pos:column="18"/></block></then></if>
            }<pos:position pos:line="36" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="38" pos:column="13">p<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">=<pos:position pos:line="38" pos:column="16"/></operator> <operator pos:line="38" pos:column="17">new<pos:position pos:line="38" pos:column="20"/></operator> <call><name><name pos:line="38" pos:column="21">Comm<pos:position pos:line="38" pos:column="25"/></name><operator pos:line="38" pos:column="25">::<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">Connection<pos:position pos:line="38" pos:column="37"/></name></name><argument_list pos:line="38" pos:column="37">()<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="39" pos:column="13">p<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">-&gt;<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="16">remote<pos:position pos:line="39" pos:column="22"/></name></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <name><name pos:line="39" pos:column="25">ia<pos:position pos:line="39" pos:column="27"/></name><operator pos:line="39" pos:column="27">-&gt;<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="29">in_addrs<pos:position pos:line="39" pos:column="37"/></name><index pos:line="39" pos:column="37">[<expr><name pos:line="39" pos:column="38">ip<pos:position pos:line="39" pos:column="40"/></name></expr>]<pos:position pos:line="39" pos:column="41"/></index></name></expr>;<pos:position pos:line="39" pos:column="42"/></expr_stmt>

            <comment type="line" pos:line="41" pos:column="13">// when IPv6 is disabled we cannot use it</comment>
            <if pos:line="42" pos:column="13">if <condition pos:line="42" pos:column="16">(<expr><operator pos:line="42" pos:column="17">!<pos:position pos:line="42" pos:column="18"/></operator><name><name pos:line="42" pos:column="18">Ip<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">::<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="22">EnableIpv6<pos:position pos:line="42" pos:column="32"/></name></name> <operator pos:line="42" pos:column="33">&amp;&amp;<pos:position pos:line="42" pos:column="43"/></operator> <call><name><name pos:line="42" pos:column="36">p<pos:position pos:line="42" pos:column="37"/></name><operator pos:line="42" pos:column="37">-&gt;<pos:position pos:line="42" pos:column="42"/></operator><name pos:line="42" pos:column="39">remote<pos:position pos:line="42" pos:column="45"/></name><operator pos:line="42" pos:column="45">.<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="46">isIPv6<pos:position pos:line="42" pos:column="52"/></name></name><argument_list pos:line="42" pos:column="52">()<pos:position pos:line="42" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="55"/></condition><then pos:line="42" pos:column="55"> <block pos:line="42" pos:column="56">{
                <decl_stmt><decl><type><specifier pos:line="43" pos:column="17">const<pos:position pos:line="43" pos:column="22"/></specifier> <name pos:line="43" pos:column="23">char<pos:position pos:line="43" pos:column="27"/></name> <modifier pos:line="43" pos:column="28">*<pos:position pos:line="43" pos:column="29"/></modifier></type><name pos:line="43" pos:column="29">host<pos:position pos:line="43" pos:column="33"/></name> <init pos:line="43" pos:column="34">= <expr><operator pos:line="43" pos:column="36">(<pos:position pos:line="43" pos:column="37"/></operator><ternary><condition><expr><name><name pos:line="43" pos:column="37">fs<pos:position pos:line="43" pos:column="39"/></name><operator pos:line="43" pos:column="39">-&gt;<pos:position pos:line="43" pos:column="44"/></operator><name pos:line="43" pos:column="41">_peer<pos:position pos:line="43" pos:column="46"/></name></name></expr> ?<pos:position pos:line="43" pos:column="48"/></condition><then pos:line="43" pos:column="48"> <expr><name><name pos:line="43" pos:column="49">fs<pos:position pos:line="43" pos:column="51"/></name><operator pos:line="43" pos:column="51">-&gt;<pos:position pos:line="43" pos:column="56"/></operator><name pos:line="43" pos:column="53">_peer<pos:position pos:line="43" pos:column="58"/></name><operator pos:line="43" pos:column="58">-&gt;<pos:position pos:line="43" pos:column="63"/></operator><name pos:line="43" pos:column="60">host<pos:position pos:line="43" pos:column="64"/></name></name></expr> <pos:position pos:line="43" pos:column="65"/></then><else pos:line="43" pos:column="65">: <expr><call><name><name pos:line="43" pos:column="67">psstate<pos:position pos:line="43" pos:column="74"/></name><operator pos:line="43" pos:column="74">-&gt;<pos:position pos:line="43" pos:column="79"/></operator><name pos:line="43" pos:column="76">request<pos:position pos:line="43" pos:column="83"/></name><operator pos:line="43" pos:column="83">-&gt;<pos:position pos:line="43" pos:column="88"/></operator><name pos:line="43" pos:column="85">GetHost<pos:position pos:line="43" pos:column="92"/></name></name><argument_list pos:line="43" pos:column="92">()<pos:position pos:line="43" pos:column="94"/></argument_list></call></expr></else></ternary><operator pos:line="43" pos:column="94">)<pos:position pos:line="43" pos:column="95"/></operator></expr></init></decl>;<pos:position pos:line="43" pos:column="96"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="44" pos:column="17">ipcacheMarkBadAddr<pos:position pos:line="44" pos:column="35"/></name><argument_list pos:line="44" pos:column="35">(<argument><expr><name pos:line="44" pos:column="36">host<pos:position pos:line="44" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="42">p<pos:position pos:line="44" pos:column="43"/></name><operator pos:line="44" pos:column="43">-&gt;<pos:position pos:line="44" pos:column="48"/></operator><name pos:line="44" pos:column="45">remote<pos:position pos:line="44" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="53"/></expr_stmt>
                <continue pos:line="45" pos:column="17">continue;<pos:position pos:line="45" pos:column="26"/></continue>
            }<pos:position pos:line="46" pos:column="14"/></block></then></if>

            <if pos:line="48" pos:column="13">if <condition pos:line="48" pos:column="16">(<expr><name><name pos:line="48" pos:column="17">fs<pos:position pos:line="48" pos:column="19"/></name><operator pos:line="48" pos:column="19">-&gt;<pos:position pos:line="48" pos:column="24"/></operator><name pos:line="48" pos:column="21">_peer<pos:position pos:line="48" pos:column="26"/></name></name></expr>)<pos:position pos:line="48" pos:column="27"/></condition><then pos:line="48" pos:column="27">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="49" pos:column="17">p<pos:position pos:line="49" pos:column="18"/></name><operator pos:line="49" pos:column="18">-&gt;<pos:position pos:line="49" pos:column="23"/></operator><name pos:line="49" pos:column="20">remote<pos:position pos:line="49" pos:column="26"/></name><operator pos:line="49" pos:column="26">.<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="27">port<pos:position pos:line="49" pos:column="31"/></name></name><argument_list pos:line="49" pos:column="31">(<argument><expr><name><name pos:line="49" pos:column="32">fs<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">-&gt;<pos:position pos:line="49" pos:column="39"/></operator><name pos:line="49" pos:column="36">_peer<pos:position pos:line="49" pos:column="41"/></name><operator pos:line="49" pos:column="41">-&gt;<pos:position pos:line="49" pos:column="46"/></operator><name pos:line="49" pos:column="43">http_port<pos:position pos:line="49" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="54"/></expr_stmt></block></then>
            <else pos:line="50" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="51" pos:column="17">p<pos:position pos:line="51" pos:column="18"/></name><operator pos:line="51" pos:column="18">-&gt;<pos:position pos:line="51" pos:column="23"/></operator><name pos:line="51" pos:column="20">remote<pos:position pos:line="51" pos:column="26"/></name><operator pos:line="51" pos:column="26">.<pos:position pos:line="51" pos:column="27"/></operator><name pos:line="51" pos:column="27">port<pos:position pos:line="51" pos:column="31"/></name></name><argument_list pos:line="51" pos:column="31">(<argument><expr><name><name pos:line="51" pos:column="32">psstate<pos:position pos:line="51" pos:column="39"/></name><operator pos:line="51" pos:column="39">-&gt;<pos:position pos:line="51" pos:column="44"/></operator><name pos:line="51" pos:column="41">request<pos:position pos:line="51" pos:column="48"/></name><operator pos:line="51" pos:column="48">-&gt;<pos:position pos:line="51" pos:column="53"/></operator><name pos:line="51" pos:column="50">port<pos:position pos:line="51" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="56"/></expr_stmt></block></else></if>
            <expr_stmt><expr><name><name pos:line="52" pos:column="13">p<pos:position pos:line="52" pos:column="14"/></name><operator pos:line="52" pos:column="14">-&gt;<pos:position pos:line="52" pos:column="19"/></operator><name pos:line="52" pos:column="16">peerType<pos:position pos:line="52" pos:column="24"/></name></name> <operator pos:line="52" pos:column="25">=<pos:position pos:line="52" pos:column="26"/></operator> <name><name pos:line="52" pos:column="27">fs<pos:position pos:line="52" pos:column="29"/></name><operator pos:line="52" pos:column="29">-&gt;<pos:position pos:line="52" pos:column="34"/></operator><name pos:line="52" pos:column="31">code<pos:position pos:line="52" pos:column="35"/></name></name></expr>;<pos:position pos:line="52" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">p<pos:position pos:line="53" pos:column="14"/></name><operator pos:line="53" pos:column="14">-&gt;<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="16">setPeer<pos:position pos:line="53" pos:column="23"/></name></name><argument_list pos:line="53" pos:column="23">(<argument><expr><name><name pos:line="53" pos:column="24">fs<pos:position pos:line="53" pos:column="26"/></name><operator pos:line="53" pos:column="26">-&gt;<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="28">_peer<pos:position pos:line="53" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="35"/></expr_stmt>

            <comment type="line" pos:line="55" pos:column="13">// check for a configured outgoing address for this destination...</comment>
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">getOutgoingAddress<pos:position pos:line="56" pos:column="31"/></name><argument_list pos:line="56" pos:column="31">(<argument><expr><name><name pos:line="56" pos:column="32">psstate<pos:position pos:line="56" pos:column="39"/></name><operator pos:line="56" pos:column="39">-&gt;<pos:position pos:line="56" pos:column="44"/></operator><name pos:line="56" pos:column="41">request<pos:position pos:line="56" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="50">p<pos:position pos:line="56" pos:column="51"/></name></expr></argument>)<pos:position pos:line="56" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="53"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">psstate<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">-&gt;<pos:position pos:line="57" pos:column="25"/></operator><name pos:line="57" pos:column="22">paths<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">-&gt;<pos:position pos:line="57" pos:column="32"/></operator><name pos:line="57" pos:column="29">push_back<pos:position pos:line="57" pos:column="38"/></name></name><argument_list pos:line="57" pos:column="38">(<argument><expr><name pos:line="57" pos:column="39">p<pos:position pos:line="57" pos:column="40"/></name></expr></argument>)<pos:position pos:line="57" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></for>
    }<pos:position pos:line="59" pos:column="6"/></block></then> <else pos:line="59" pos:column="7">else <block pos:line="59" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">debugs<pos:position pos:line="60" pos:column="15"/></name><argument_list pos:line="60" pos:column="15">(<argument><expr><literal type="number" pos:line="60" pos:column="16">44<pos:position pos:line="60" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="20">3<pos:position pos:line="60" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="23">HERE<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">&lt;&lt;<pos:position pos:line="60" pos:column="36"/></operator> <literal type="string" pos:line="60" pos:column="31">"Unknown host: "<pos:position pos:line="60" pos:column="47"/></literal> <operator pos:line="60" pos:column="48">&lt;&lt;<pos:position pos:line="60" pos:column="56"/></operator> <operator pos:line="60" pos:column="51">(<pos:position pos:line="60" pos:column="52"/></operator><ternary><condition><expr><name><name pos:line="60" pos:column="52">fs<pos:position pos:line="60" pos:column="54"/></name><operator pos:line="60" pos:column="54">-&gt;<pos:position pos:line="60" pos:column="59"/></operator><name pos:line="60" pos:column="56">_peer<pos:position pos:line="60" pos:column="61"/></name></name></expr> ?<pos:position pos:line="60" pos:column="63"/></condition><then pos:line="60" pos:column="63"> <expr><name><name pos:line="60" pos:column="64">fs<pos:position pos:line="60" pos:column="66"/></name><operator pos:line="60" pos:column="66">-&gt;<pos:position pos:line="60" pos:column="71"/></operator><name pos:line="60" pos:column="68">_peer<pos:position pos:line="60" pos:column="73"/></name><operator pos:line="60" pos:column="73">-&gt;<pos:position pos:line="60" pos:column="78"/></operator><name pos:line="60" pos:column="75">host<pos:position pos:line="60" pos:column="79"/></name></name></expr> <pos:position pos:line="60" pos:column="80"/></then><else pos:line="60" pos:column="80">: <expr><call><name><name pos:line="60" pos:column="82">psstate<pos:position pos:line="60" pos:column="89"/></name><operator pos:line="60" pos:column="89">-&gt;<pos:position pos:line="60" pos:column="94"/></operator><name pos:line="60" pos:column="91">request<pos:position pos:line="60" pos:column="98"/></name><operator pos:line="60" pos:column="98">-&gt;<pos:position pos:line="60" pos:column="103"/></operator><name pos:line="60" pos:column="100">GetHost<pos:position pos:line="60" pos:column="107"/></name></name><argument_list pos:line="60" pos:column="107">()<pos:position pos:line="60" pos:column="109"/></argument_list></call></expr></else></ternary><operator pos:line="60" pos:column="109">)<pos:position pos:line="60" pos:column="110"/></operator></expr></argument>)<pos:position pos:line="60" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="112"/></expr_stmt>
        <comment type="line" pos:line="61" pos:column="9">// discard any previous error.</comment>
        <expr_stmt><expr><operator pos:line="62" pos:column="9">delete<pos:position pos:line="62" pos:column="15"/></operator> <name><name pos:line="62" pos:column="16">psstate<pos:position pos:line="62" pos:column="23"/></name><operator pos:line="62" pos:column="23">-&gt;<pos:position pos:line="62" pos:column="28"/></operator><name pos:line="62" pos:column="25">lastError<pos:position pos:line="62" pos:column="34"/></name></name></expr>;<pos:position pos:line="62" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="63" pos:column="9">psstate<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">-&gt;<pos:position pos:line="63" pos:column="21"/></operator><name pos:line="63" pos:column="18">lastError<pos:position pos:line="63" pos:column="27"/></name></name> <operator pos:line="63" pos:column="28">=<pos:position pos:line="63" pos:column="29"/></operator> <name pos:line="63" pos:column="30">NULL<pos:position pos:line="63" pos:column="34"/></name></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
        <if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name><name pos:line="64" pos:column="13">fs<pos:position pos:line="64" pos:column="15"/></name><operator pos:line="64" pos:column="15">-&gt;<pos:position pos:line="64" pos:column="20"/></operator><name pos:line="64" pos:column="17">code<pos:position pos:line="64" pos:column="21"/></name></name> <operator pos:line="64" pos:column="22">==<pos:position pos:line="64" pos:column="24"/></operator> <name pos:line="64" pos:column="25">HIER_DIRECT<pos:position pos:line="64" pos:column="36"/></name></expr>)<pos:position pos:line="64" pos:column="37"/></condition><then pos:line="64" pos:column="37"> <block pos:line="64" pos:column="38">{
            <expr_stmt><expr><name><name pos:line="65" pos:column="13">psstate<pos:position pos:line="65" pos:column="20"/></name><operator pos:line="65" pos:column="20">-&gt;<pos:position pos:line="65" pos:column="25"/></operator><name pos:line="65" pos:column="22">lastError<pos:position pos:line="65" pos:column="31"/></name></name> <operator pos:line="65" pos:column="32">=<pos:position pos:line="65" pos:column="33"/></operator> <operator pos:line="65" pos:column="34">new<pos:position pos:line="65" pos:column="37"/></operator> <call><name pos:line="65" pos:column="38">ErrorState<pos:position pos:line="65" pos:column="48"/></name><argument_list pos:line="65" pos:column="48">(<argument><expr><name pos:line="65" pos:column="49">ERR_DNS_FAIL<pos:position pos:line="65" pos:column="61"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="63">Http<pos:position pos:line="65" pos:column="67"/></name><operator pos:line="65" pos:column="67">::<pos:position pos:line="65" pos:column="69"/></operator><name pos:line="65" pos:column="69">scServiceUnavailable<pos:position pos:line="65" pos:column="89"/></name></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="91">psstate<pos:position pos:line="65" pos:column="98"/></name><operator pos:line="65" pos:column="98">-&gt;<pos:position pos:line="65" pos:column="103"/></operator><name pos:line="65" pos:column="100">request<pos:position pos:line="65" pos:column="107"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="109"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="66" pos:column="13">psstate<pos:position pos:line="66" pos:column="20"/></name><operator pos:line="66" pos:column="20">-&gt;<pos:position pos:line="66" pos:column="25"/></operator><name pos:line="66" pos:column="22">lastError<pos:position pos:line="66" pos:column="31"/></name><operator pos:line="66" pos:column="31">-&gt;<pos:position pos:line="66" pos:column="36"/></operator><name pos:line="66" pos:column="33">dnsError<pos:position pos:line="66" pos:column="41"/></name></name> <operator pos:line="66" pos:column="42">=<pos:position pos:line="66" pos:column="43"/></operator> <name><name pos:line="66" pos:column="44">details<pos:position pos:line="66" pos:column="51"/></name><operator pos:line="66" pos:column="51">.<pos:position pos:line="66" pos:column="52"/></operator><name pos:line="66" pos:column="52">error<pos:position pos:line="66" pos:column="57"/></name></name></expr>;<pos:position pos:line="66" pos:column="58"/></expr_stmt>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if>
    }<pos:position pos:line="68" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name><name pos:line="70" pos:column="5">psstate<pos:position pos:line="70" pos:column="12"/></name><operator pos:line="70" pos:column="12">-&gt;<pos:position pos:line="70" pos:column="17"/></operator><name pos:line="70" pos:column="14">servers<pos:position pos:line="70" pos:column="21"/></name></name> <operator pos:line="70" pos:column="22">=<pos:position pos:line="70" pos:column="23"/></operator> <name><name pos:line="70" pos:column="24">fs<pos:position pos:line="70" pos:column="26"/></name><operator pos:line="70" pos:column="26">-&gt;<pos:position pos:line="70" pos:column="31"/></operator><name pos:line="70" pos:column="28">next<pos:position pos:line="70" pos:column="32"/></name></name></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">cbdataReferenceDone<pos:position pos:line="71" pos:column="24"/></name><argument_list pos:line="71" pos:column="24">(<argument><expr><name><name pos:line="71" pos:column="25">fs<pos:position pos:line="71" pos:column="27"/></name><operator pos:line="71" pos:column="27">-&gt;<pos:position pos:line="71" pos:column="32"/></operator><name pos:line="71" pos:column="29">_peer<pos:position pos:line="71" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="72" pos:column="5">delete<pos:position pos:line="72" pos:column="11"/></operator> <name pos:line="72" pos:column="12">fs<pos:position pos:line="72" pos:column="14"/></name></expr>;<pos:position pos:line="72" pos:column="15"/></expr_stmt>

    <comment type="line" pos:line="74" pos:column="5">// see if more paths can be found</comment>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">peerSelectDnsPaths<pos:position pos:line="75" pos:column="23"/></name><argument_list pos:line="75" pos:column="23">(<argument><expr><name pos:line="75" pos:column="24">psstate<pos:position pos:line="75" pos:column="31"/></name></expr></argument>)<pos:position pos:line="75" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="33"/></expr_stmt>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
