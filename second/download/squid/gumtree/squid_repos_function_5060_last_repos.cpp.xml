<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5060_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">HeaderUpdater<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">parseReadBytes<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">()<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">staleSwapHeaderSize<pos:position pos:line="4" pos:column="29"/></name></expr>)<pos:position pos:line="4" pos:column="30"/></condition><then pos:line="4" pos:column="30"> <block pos:line="4" pos:column="31">{
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">StoreMetaUnpacker<pos:position pos:line="5" pos:column="26"/></name></type> <name pos:line="5" pos:column="27">aBuilder<pos:position pos:line="5" pos:column="35"/></name><argument_list pos:line="5" pos:column="35">(
            <argument><expr><call><name><name pos:line="6" pos:column="13">exchangeBuffer<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">.<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="28">rawContent<pos:position pos:line="6" pos:column="38"/></name></name><argument_list pos:line="6" pos:column="38">()<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr></argument>,
            <argument><expr><call><name><name pos:line="7" pos:column="13">exchangeBuffer<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">.<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="28">length<pos:position pos:line="7" pos:column="34"/></name></name><argument_list pos:line="7" pos:column="34">()<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr></argument>,
            <argument><expr><operator pos:line="8" pos:column="13">&amp;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="14">staleSwapHeaderSize<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
        <comment type="line" pos:line="9" pos:column="9">// Squid assumes that metadata always fits into a single db slot</comment>
        <expr_stmt><expr><call><name><name pos:line="10" pos:column="9">aBuilder<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">.<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="18">checkBuffer<pos:position pos:line="10" pos:column="29"/></name></name><argument_list pos:line="10" pos:column="29">()<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt> <comment type="line" pos:line="10" pos:column="33">// cannot update an entry with invalid metadata</comment>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">47<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">7<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">"staleSwapHeaderSize="<pos:position pos:line="11" pos:column="45"/></literal> <operator pos:line="11" pos:column="46">&lt;&lt;<pos:position pos:line="11" pos:column="54"/></operator> <name pos:line="11" pos:column="49">staleSwapHeaderSize<pos:position pos:line="11" pos:column="68"/></name></expr></argument>)<pos:position pos:line="11" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">Must<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">staleSwapHeaderSize<pos:position pos:line="12" pos:column="33"/></name> <operator pos:line="12" pos:column="34">&gt;<pos:position pos:line="12" pos:column="38"/></operator> <literal type="number" pos:line="12" pos:column="36">0<pos:position pos:line="12" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">exchangeBuffer<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">.<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">consume<pos:position pos:line="13" pos:column="31"/></name></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">staleSwapHeaderSize<pos:position pos:line="13" pos:column="51"/></name></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">size_t<pos:position pos:line="16" pos:column="17"/></name></type> <name pos:line="16" pos:column="18">staleHttpHeaderSize<pos:position pos:line="16" pos:column="37"/></name> <init pos:line="16" pos:column="38">= <expr><call><name pos:line="16" pos:column="40">headersEnd<pos:position pos:line="16" pos:column="50"/></name><argument_list pos:line="16" pos:column="50">(
                                           <argument><expr><call><name><name pos:line="17" pos:column="44">exchangeBuffer<pos:position pos:line="17" pos:column="58"/></name><operator pos:line="17" pos:column="58">.<pos:position pos:line="17" pos:column="59"/></operator><name pos:line="17" pos:column="59">rawContent<pos:position pos:line="17" pos:column="69"/></name></name><argument_list pos:line="17" pos:column="69">()<pos:position pos:line="17" pos:column="71"/></argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name pos:line="18" pos:column="44">exchangeBuffer<pos:position pos:line="18" pos:column="58"/></name><operator pos:line="18" pos:column="58">.<pos:position pos:line="18" pos:column="59"/></operator><name pos:line="18" pos:column="59">length<pos:position pos:line="18" pos:column="65"/></name></name><argument_list pos:line="18" pos:column="65">()<pos:position pos:line="18" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="69"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">debugs<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="number" pos:line="19" pos:column="12">47<pos:position pos:line="19" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="16">7<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="19">"staleHttpHeaderSize="<pos:position pos:line="19" pos:column="41"/></literal> <operator pos:line="19" pos:column="42">&lt;&lt;<pos:position pos:line="19" pos:column="50"/></operator> <name pos:line="19" pos:column="45">staleHttpHeaderSize<pos:position pos:line="19" pos:column="64"/></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">staleHttpHeaderSize<pos:position pos:line="20" pos:column="29"/></name></expr>)<pos:position pos:line="20" pos:column="30"/></condition><then pos:line="20" pos:column="30"> <block pos:line="20" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">readMore<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">(<argument><expr><literal type="string" pos:line="21" pos:column="18">"need more stale HTTP reply header data"<pos:position pos:line="21" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="60"/></expr_stmt>
        <return pos:line="22" pos:column="9">return;<pos:position pos:line="22" pos:column="16"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="25" pos:column="5">exchangeBuffer<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">.<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="20">consume<pos:position pos:line="25" pos:column="27"/></name></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">staleHttpHeaderSize<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">debugs<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="number" pos:line="26" pos:column="12">47<pos:position pos:line="26" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="16">7<pos:position pos:line="26" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="19">"httpBodySizePrefix="<pos:position pos:line="26" pos:column="40"/></literal> <operator pos:line="26" pos:column="41">&lt;&lt;<pos:position pos:line="26" pos:column="49"/></operator> <call><name><name pos:line="26" pos:column="44">exchangeBuffer<pos:position pos:line="26" pos:column="58"/></name><operator pos:line="26" pos:column="58">.<pos:position pos:line="26" pos:column="59"/></operator><name pos:line="26" pos:column="59">length<pos:position pos:line="26" pos:column="65"/></name></name><argument_list pos:line="26" pos:column="65">()<pos:position pos:line="26" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="69"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">stopReading<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><literal type="string" pos:line="28" pos:column="17">"read the last HTTP header slot"<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">startWriting<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">()<pos:position pos:line="29" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="20"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
