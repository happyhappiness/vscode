<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3437_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">snmpCreateOidFromStr<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">str<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">oid<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier><modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">name<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">int<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">nl<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <specifier pos:line="4" pos:column="10">const<pos:position pos:line="4" pos:column="15"/></specifier> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">delim<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><literal type="string" pos:line="4" pos:column="25">"."<pos:position pos:line="4" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="6" pos:column="5">*<pos:position pos:line="6" pos:column="6"/></operator><name pos:line="6" pos:column="6">name<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">=<pos:position pos:line="6" pos:column="12"/></operator> <name pos:line="6" pos:column="13">NULL<pos:position pos:line="6" pos:column="17"/></name></expr>;<pos:position pos:line="6" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="7" pos:column="5">*<pos:position pos:line="7" pos:column="6"/></operator><name pos:line="7" pos:column="6">nl<pos:position pos:line="7" pos:column="8"/></name> <operator pos:line="7" pos:column="9">=<pos:position pos:line="7" pos:column="10"/></operator> <literal type="number" pos:line="7" pos:column="11">0<pos:position pos:line="7" pos:column="12"/></literal></expr>;<pos:position pos:line="7" pos:column="13"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">s<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><name pos:line="8" pos:column="21">str<pos:position pos:line="8" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* Parse the OID string into oid bits */</comment>
    <while pos:line="11" pos:column="5">while <condition pos:line="11" pos:column="11">(<decl><type><name pos:line="11" pos:column="12">size_t<pos:position pos:line="11" pos:column="18"/></name></type> <name pos:line="11" pos:column="19">len<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><call><name pos:line="11" pos:column="25">strcspn<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><name pos:line="11" pos:column="33">s<pos:position pos:line="11" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="36">delim<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr></init></decl>)<pos:position pos:line="11" pos:column="43"/></condition> <block pos:line="11" pos:column="44">{
        <expr_stmt><expr><operator pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">name<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <operator pos:line="12" pos:column="17">(<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">oid<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">*<pos:position pos:line="12" pos:column="22"/></operator><operator pos:line="12" pos:column="22">)<pos:position pos:line="12" pos:column="23"/></operator><call><name pos:line="12" pos:column="23">xrealloc<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><operator pos:line="12" pos:column="32">*<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">name<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="39">sizeof<argument_list pos:line="12" pos:column="45">(<argument><expr><name pos:line="12" pos:column="46">oid<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></sizeof> <operator pos:line="12" pos:column="51">*<pos:position pos:line="12" pos:column="52"/></operator> <operator pos:line="12" pos:column="53">(<pos:position pos:line="12" pos:column="54"/></operator><operator pos:line="12" pos:column="54">(<pos:position pos:line="12" pos:column="55"/></operator><operator pos:line="12" pos:column="55">*<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="56">nl<pos:position pos:line="12" pos:column="58"/></name><operator pos:line="12" pos:column="58">)<pos:position pos:line="12" pos:column="59"/></operator> <operator pos:line="12" pos:column="60">+<pos:position pos:line="12" pos:column="61"/></operator> <literal type="number" pos:line="12" pos:column="62">1<pos:position pos:line="12" pos:column="63"/></literal><operator pos:line="12" pos:column="63">)<pos:position pos:line="12" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="13" pos:column="9">(<pos:position pos:line="13" pos:column="10"/></operator><operator pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">name<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">)<pos:position pos:line="13" pos:column="16"/></operator><index pos:line="13" pos:column="16">[<expr><operator pos:line="13" pos:column="17">*<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">nl<pos:position pos:line="13" pos:column="20"/></name></expr>]<pos:position pos:line="13" pos:column="21"/></index> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <call><name pos:line="13" pos:column="24">atoi<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">s<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt> <comment type="line" pos:line="13" pos:column="33">// stops at the '.' delimiter</comment>
        <expr_stmt><expr><operator pos:line="14" pos:column="9">++<pos:position pos:line="14" pos:column="11"/></operator><operator pos:line="14" pos:column="11">(<pos:position pos:line="14" pos:column="12"/></operator><operator pos:line="14" pos:column="12">*<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">nl<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">)<pos:position pos:line="14" pos:column="16"/></operator></expr>;<pos:position pos:line="14" pos:column="17"/></expr_stmt>
        <comment type="line" pos:line="15" pos:column="9">// exit with true when the last octet has been parsed</comment>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">s<pos:position pos:line="16" pos:column="14"/></name><index pos:line="16" pos:column="14">[<expr><name pos:line="16" pos:column="15">len<pos:position pos:line="16" pos:column="18"/></name></expr>]<pos:position pos:line="16" pos:column="19"/></index></name> <operator pos:line="16" pos:column="20">==<pos:position pos:line="16" pos:column="22"/></operator> <literal type="char" pos:line="16" pos:column="23">'\0'<pos:position pos:line="16" pos:column="27"/></literal></expr>)<pos:position pos:line="16" pos:column="28"/></condition><then pos:line="16" pos:column="28">
            <block type="pseudo"><return pos:line="17" pos:column="13">return <expr><literal type="boolean" pos:line="17" pos:column="20">true<pos:position pos:line="17" pos:column="24"/></literal></expr>;<pos:position pos:line="17" pos:column="25"/></return></block></then></if>
        <expr_stmt><expr><name pos:line="18" pos:column="9">s<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">+=<pos:position pos:line="18" pos:column="13"/></operator> <name pos:line="18" pos:column="14">len<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">+<pos:position pos:line="18" pos:column="18"/></operator><literal type="number" pos:line="18" pos:column="18">1<pos:position pos:line="18" pos:column="19"/></literal></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></while>

    <comment type="line" pos:line="21" pos:column="5">// if we aborted before the lst octet was found, return false.</comment>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">safe_free<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">name<pos:position pos:line="22" pos:column="19"/></name></expr></argument>)<pos:position pos:line="22" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="21"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><literal type="boolean" pos:line="23" pos:column="12">false<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
