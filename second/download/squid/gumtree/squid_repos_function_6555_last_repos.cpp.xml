<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6555_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Icmp4<pos:position pos:line="2" pos:column="6"/></name><operator pos:line="2" pos:column="6">::<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">Recv<pos:position pos:line="2" pos:column="12"/></name></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">void<pos:position pos:line="2" pos:column="17"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="18"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">n<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">addrinfo<pos:position pos:line="5" pos:column="20"/></name></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">from<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">NULL<pos:position pos:line="5" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">iphdrlen<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><sizeof pos:line="6" pos:column="20">sizeof<argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">iphdr<pos:position pos:line="6" pos:column="32"/></name></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">iphdr<pos:position pos:line="7" pos:column="17"/></name></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">ip<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><name pos:line="7" pos:column="24">NULL<pos:position pos:line="7" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">icmphdr<pos:position pos:line="8" pos:column="19"/></name></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">icmp<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><name pos:line="8" pos:column="28">NULL<pos:position pos:line="8" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="9" pos:column="5">static<pos:position pos:line="9" pos:column="11"/></specifier> <type><name pos:line="9" pos:column="12">char<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">pkt<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><name pos:line="9" pos:column="24">NULL<pos:position pos:line="9" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">timeval<pos:position pos:line="10" pos:column="19"/></name></name></type> <name pos:line="10" pos:column="20">now<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">icmpEchoData<pos:position pos:line="11" pos:column="17"/></name> <modifier pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></modifier></type><name pos:line="11" pos:column="19">echo<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="12" pos:column="5">static<pos:position pos:line="12" pos:column="11"/></specifier> <type><name pos:line="12" pos:column="12">pingerReplyData<pos:position pos:line="12" pos:column="27"/></name></type> <name pos:line="12" pos:column="28">preply<pos:position pos:line="12" pos:column="34"/></name></decl>;<pos:position pos:line="12" pos:column="35"/></decl_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">icmp_sock<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&lt;<pos:position pos:line="14" pos:column="23"/></operator> <literal type="number" pos:line="14" pos:column="21">0<pos:position pos:line="14" pos:column="22"/></literal></expr>)<pos:position pos:line="14" pos:column="23"/></condition><then pos:line="14" pos:column="23"> <block pos:line="14" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">42<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="20">DBG_CRITICAL<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="34">HERE<pos:position pos:line="15" pos:column="38"/></name> <operator pos:line="15" pos:column="39">&lt;&lt;<pos:position pos:line="15" pos:column="47"/></operator> <literal type="string" pos:line="15" pos:column="42">"No socket! Recv() should not be called."<pos:position pos:line="15" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="85"/></expr_stmt>
        <return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">pkt<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">==<pos:position pos:line="19" pos:column="15"/></operator> <name pos:line="19" pos:column="16">NULL<pos:position pos:line="19" pos:column="20"/></name></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="9">pkt<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <operator pos:line="20" pos:column="15">(<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">char<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">*<pos:position pos:line="20" pos:column="22"/></operator><operator pos:line="20" pos:column="22">)<pos:position pos:line="20" pos:column="23"/></operator><call><name pos:line="20" pos:column="23">xmalloc<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">MAX_PKT4_SZ<pos:position pos:line="20" pos:column="42"/></name></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="22" pos:column="5">Ip<pos:position pos:line="22" pos:column="7"/></name><operator pos:line="22" pos:column="7">::<pos:position pos:line="22" pos:column="9"/></operator><name pos:line="22" pos:column="9">Address<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">::<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="18">InitAddr<pos:position pos:line="22" pos:column="26"/></name></name><argument_list pos:line="22" pos:column="26">(<argument><expr><name pos:line="22" pos:column="27">from<pos:position pos:line="22" pos:column="31"/></name></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">n<pos:position pos:line="23" pos:column="6"/></name> <operator pos:line="23" pos:column="7">=<pos:position pos:line="23" pos:column="8"/></operator> <call><name pos:line="23" pos:column="9">recvfrom<pos:position pos:line="23" pos:column="17"/></name><argument_list pos:line="23" pos:column="17">(<argument><expr><name pos:line="23" pos:column="18">icmp_sock<pos:position pos:line="23" pos:column="27"/></name></expr></argument>,
                 <argument><expr><operator pos:line="24" pos:column="18">(<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="19">void<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">*<pos:position pos:line="24" pos:column="25"/></operator><operator pos:line="24" pos:column="25">)<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">pkt<pos:position pos:line="24" pos:column="29"/></name></expr></argument>,
                 <argument><expr><name pos:line="25" pos:column="18">MAX_PKT4_SZ<pos:position pos:line="25" pos:column="29"/></name></expr></argument>,
                 <argument><expr><literal type="number" pos:line="26" pos:column="18">0<pos:position pos:line="26" pos:column="19"/></literal></expr></argument>,
                 <argument><expr><name><name pos:line="27" pos:column="18">from<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">-&gt;<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="24">ai_addr<pos:position pos:line="27" pos:column="31"/></name></name></expr></argument>,
                 <argument><expr><operator pos:line="28" pos:column="18">&amp;<pos:position pos:line="28" pos:column="23"/></operator><name><name pos:line="28" pos:column="19">from<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">-&gt;<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="25">ai_addrlen<pos:position pos:line="28" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">n<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">&lt;=<pos:position pos:line="30" pos:column="16"/></operator> <literal type="number" pos:line="30" pos:column="14">0<pos:position pos:line="30" pos:column="15"/></literal></expr>)<pos:position pos:line="30" pos:column="16"/></condition><then pos:line="30" pos:column="16"> <block pos:line="30" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">42<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="20">DBG_CRITICAL<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">HERE<pos:position pos:line="31" pos:column="38"/></name> <operator pos:line="31" pos:column="39">&lt;&lt;<pos:position pos:line="31" pos:column="47"/></operator> <literal type="string" pos:line="31" pos:column="42">"Error when calling recvfrom() on ICMP socket."<pos:position pos:line="31" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="91"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="32" pos:column="9">Ip<pos:position pos:line="32" pos:column="11"/></name><operator pos:line="32" pos:column="11">::<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">Address<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">::<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">FreeAddr<pos:position pos:line="32" pos:column="30"/></name></name><argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">from<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>
        <return pos:line="33" pos:column="9">return;<pos:position pos:line="33" pos:column="16"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="36" pos:column="5">preply<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">.<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">from<pos:position pos:line="36" pos:column="16"/></name></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <operator pos:line="36" pos:column="19">*<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="20">from<pos:position pos:line="36" pos:column="24"/></name></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>

<cpp:if pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">if<pos:position pos:line="38" pos:column="4"/></cpp:directive> <expr><name pos:line="38" pos:column="5">GETTIMEOFDAY_NO_TZP<pos:position pos:line="38" pos:column="24"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">gettimeofday<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">(<argument><expr><operator pos:line="40" pos:column="18">&amp;<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="19">now<pos:position pos:line="40" pos:column="22"/></name></expr></argument>)<pos:position pos:line="40" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="24"/></expr_stmt>

<cpp:else pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">else<pos:position pos:line="42" pos:column="6"/></cpp:directive></cpp:else>

    <expr_stmt><expr><call><name pos:line="44" pos:column="5">gettimeofday<pos:position pos:line="44" pos:column="17"/></name><argument_list pos:line="44" pos:column="17">(<argument><expr><operator pos:line="44" pos:column="18">&amp;<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="19">now<pos:position pos:line="44" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="24">NULL<pos:position pos:line="44" pos:column="28"/></name></expr></argument>)<pos:position pos:line="44" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="30"/></expr_stmt>

<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="48" pos:column="5">debugs<pos:position pos:line="48" pos:column="11"/></name><argument_list pos:line="48" pos:column="11">(<argument><expr><literal type="number" pos:line="48" pos:column="12">42<pos:position pos:line="48" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="16">8<pos:position pos:line="48" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="19">HERE<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">&lt;&lt;<pos:position pos:line="48" pos:column="32"/></operator> <name pos:line="48" pos:column="27">n<pos:position pos:line="48" pos:column="28"/></name> <operator pos:line="48" pos:column="29">&lt;&lt;<pos:position pos:line="48" pos:column="37"/></operator> <literal type="string" pos:line="48" pos:column="32">" bytes from "<pos:position pos:line="48" pos:column="46"/></literal> <operator pos:line="48" pos:column="47">&lt;&lt;<pos:position pos:line="48" pos:column="55"/></operator> <name><name pos:line="48" pos:column="50">preply<pos:position pos:line="48" pos:column="56"/></name><operator pos:line="48" pos:column="56">.<pos:position pos:line="48" pos:column="57"/></operator><name pos:line="48" pos:column="57">from<pos:position pos:line="48" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="63"/></expr_stmt>

    <expr_stmt><expr><name pos:line="50" pos:column="5">ip<pos:position pos:line="50" pos:column="7"/></name> <operator pos:line="50" pos:column="8">=<pos:position pos:line="50" pos:column="9"/></operator> <operator pos:line="50" pos:column="10">(<pos:position pos:line="50" pos:column="11"/></operator>struct <name pos:line="50" pos:column="18">iphdr<pos:position pos:line="50" pos:column="23"/></name> <operator pos:line="50" pos:column="24">*<pos:position pos:line="50" pos:column="25"/></operator><operator pos:line="50" pos:column="25">)<pos:position pos:line="50" pos:column="26"/></operator> <operator pos:line="50" pos:column="27">(<pos:position pos:line="50" pos:column="28"/></operator><name pos:line="50" pos:column="28">void<pos:position pos:line="50" pos:column="32"/></name> <operator pos:line="50" pos:column="33">*<pos:position pos:line="50" pos:column="34"/></operator><operator pos:line="50" pos:column="34">)<pos:position pos:line="50" pos:column="35"/></operator> <name pos:line="50" pos:column="36">pkt<pos:position pos:line="50" pos:column="39"/></name></expr>;<pos:position pos:line="50" pos:column="40"/></expr_stmt>

<cpp:if pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">if<pos:position pos:line="52" pos:column="4"/></cpp:directive> <expr><name pos:line="52" pos:column="5">HAVE_STRUCT_IPHDR_IP_HL<pos:position pos:line="52" pos:column="28"/></name></expr></cpp:if>

    <expr_stmt><expr><name pos:line="54" pos:column="5">iphdrlen<pos:position pos:line="54" pos:column="13"/></name> <operator pos:line="54" pos:column="14">=<pos:position pos:line="54" pos:column="15"/></operator> <name><name pos:line="54" pos:column="16">ip<pos:position pos:line="54" pos:column="18"/></name><operator pos:line="54" pos:column="18">-&gt;<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="20">ip_hl<pos:position pos:line="54" pos:column="25"/></name></name> <operator pos:line="54" pos:column="26">&lt;&lt;<pos:position pos:line="54" pos:column="34"/></operator> <literal type="number" pos:line="54" pos:column="29">2<pos:position pos:line="54" pos:column="30"/></literal></expr>;<pos:position pos:line="54" pos:column="31"/></expr_stmt>

<cpp:else pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">else<pos:position pos:line="56" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="56" pos:column="7">/* HAVE_STRUCT_IPHDR_IP_HL */</comment>
<cpp:if pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">if<pos:position pos:line="57" pos:column="4"/></cpp:directive> <expr><name pos:line="57" pos:column="5">WORDS_BIGENDIAN<pos:position pos:line="57" pos:column="20"/></name></expr></cpp:if>

    <expr_stmt><expr><name pos:line="59" pos:column="5">iphdrlen<pos:position pos:line="59" pos:column="13"/></name> <operator pos:line="59" pos:column="14">=<pos:position pos:line="59" pos:column="15"/></operator> <operator pos:line="59" pos:column="16">(<pos:position pos:line="59" pos:column="17"/></operator><name><name pos:line="59" pos:column="17">ip<pos:position pos:line="59" pos:column="19"/></name><operator pos:line="59" pos:column="19">-&gt;<pos:position pos:line="59" pos:column="24"/></operator><name pos:line="59" pos:column="21">ip_vhl<pos:position pos:line="59" pos:column="27"/></name></name> <operator pos:line="59" pos:column="28">&gt;&gt;<pos:position pos:line="59" pos:column="33"/></operator> <literal type="number" pos:line="59" pos:column="31">4<pos:position pos:line="59" pos:column="32"/></literal><operator pos:line="59" pos:column="32">)<pos:position pos:line="59" pos:column="33"/></operator> <operator pos:line="59" pos:column="34">&lt;&lt;<pos:position pos:line="59" pos:column="42"/></operator> <literal type="number" pos:line="59" pos:column="37">2<pos:position pos:line="59" pos:column="38"/></literal></expr>;<pos:position pos:line="59" pos:column="39"/></expr_stmt>

<cpp:else pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">else<pos:position pos:line="61" pos:column="6"/></cpp:directive></cpp:else>

    <expr_stmt><expr><name pos:line="63" pos:column="5">iphdrlen<pos:position pos:line="63" pos:column="13"/></name> <operator pos:line="63" pos:column="14">=<pos:position pos:line="63" pos:column="15"/></operator> <operator pos:line="63" pos:column="16">(<pos:position pos:line="63" pos:column="17"/></operator><name><name pos:line="63" pos:column="17">ip<pos:position pos:line="63" pos:column="19"/></name><operator pos:line="63" pos:column="19">-&gt;<pos:position pos:line="63" pos:column="24"/></operator><name pos:line="63" pos:column="21">ip_vhl<pos:position pos:line="63" pos:column="27"/></name></name> <operator pos:line="63" pos:column="28">&amp;<pos:position pos:line="63" pos:column="33"/></operator> <literal type="number" pos:line="63" pos:column="30">0xF<pos:position pos:line="63" pos:column="33"/></literal><operator pos:line="63" pos:column="33">)<pos:position pos:line="63" pos:column="34"/></operator> <operator pos:line="63" pos:column="35">&lt;&lt;<pos:position pos:line="63" pos:column="43"/></operator> <literal type="number" pos:line="63" pos:column="38">2<pos:position pos:line="63" pos:column="39"/></literal></expr>;<pos:position pos:line="63" pos:column="40"/></expr_stmt>

<cpp:endif pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">endif<pos:position pos:line="65" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="66" pos:column="8">/* HAVE_STRUCT_IPHDR_IP_HL */</comment>

    <expr_stmt><expr><name pos:line="68" pos:column="5">icmp<pos:position pos:line="68" pos:column="9"/></name> <operator pos:line="68" pos:column="10">=<pos:position pos:line="68" pos:column="11"/></operator> <operator pos:line="68" pos:column="12">(<pos:position pos:line="68" pos:column="13"/></operator>struct <name pos:line="68" pos:column="20">icmphdr<pos:position pos:line="68" pos:column="27"/></name> <operator pos:line="68" pos:column="28">*<pos:position pos:line="68" pos:column="29"/></operator><operator pos:line="68" pos:column="29">)<pos:position pos:line="68" pos:column="30"/></operator> <operator pos:line="68" pos:column="31">(<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="32">void<pos:position pos:line="68" pos:column="36"/></name> <operator pos:line="68" pos:column="37">*<pos:position pos:line="68" pos:column="38"/></operator><operator pos:line="68" pos:column="38">)<pos:position pos:line="68" pos:column="39"/></operator> <operator pos:line="68" pos:column="40">(<pos:position pos:line="68" pos:column="41"/></operator><name pos:line="68" pos:column="41">pkt<pos:position pos:line="68" pos:column="44"/></name> <operator pos:line="68" pos:column="45">+<pos:position pos:line="68" pos:column="46"/></operator> <name pos:line="68" pos:column="47">iphdrlen<pos:position pos:line="68" pos:column="55"/></name><operator pos:line="68" pos:column="55">)<pos:position pos:line="68" pos:column="56"/></operator></expr>;<pos:position pos:line="68" pos:column="57"/></expr_stmt>

    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name><name pos:line="70" pos:column="9">icmp<pos:position pos:line="70" pos:column="13"/></name><operator pos:line="70" pos:column="13">-&gt;<pos:position pos:line="70" pos:column="18"/></operator><name pos:line="70" pos:column="15">icmp_type<pos:position pos:line="70" pos:column="24"/></name></name> <operator pos:line="70" pos:column="25">!=<pos:position pos:line="70" pos:column="27"/></operator> <name pos:line="70" pos:column="28">ICMP_ECHOREPLY<pos:position pos:line="70" pos:column="42"/></name></expr>)<pos:position pos:line="70" pos:column="43"/></condition><then pos:line="70" pos:column="43"> <block pos:line="70" pos:column="44">{
        <expr_stmt><expr><call><name><name pos:line="71" pos:column="9">Ip<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">::<pos:position pos:line="71" pos:column="13"/></operator><name pos:line="71" pos:column="13">Address<pos:position pos:line="71" pos:column="20"/></name><operator pos:line="71" pos:column="20">::<pos:position pos:line="71" pos:column="22"/></operator><name pos:line="71" pos:column="22">FreeAddr<pos:position pos:line="71" pos:column="30"/></name></name><argument_list pos:line="71" pos:column="30">(<argument><expr><name pos:line="71" pos:column="31">from<pos:position pos:line="71" pos:column="35"/></name></expr></argument>)<pos:position pos:line="71" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="37"/></expr_stmt>
        <return pos:line="72" pos:column="9">return;<pos:position pos:line="72" pos:column="16"/></return>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>

    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name><name pos:line="75" pos:column="9">icmp<pos:position pos:line="75" pos:column="13"/></name><operator pos:line="75" pos:column="13">-&gt;<pos:position pos:line="75" pos:column="18"/></operator><name pos:line="75" pos:column="15">icmp_id<pos:position pos:line="75" pos:column="22"/></name></name> <operator pos:line="75" pos:column="23">!=<pos:position pos:line="75" pos:column="25"/></operator> <name pos:line="75" pos:column="26">icmp_ident<pos:position pos:line="75" pos:column="36"/></name></expr>)<pos:position pos:line="75" pos:column="37"/></condition><then pos:line="75" pos:column="37"> <block pos:line="75" pos:column="38">{
        <expr_stmt><expr><call><name><name pos:line="76" pos:column="9">Ip<pos:position pos:line="76" pos:column="11"/></name><operator pos:line="76" pos:column="11">::<pos:position pos:line="76" pos:column="13"/></operator><name pos:line="76" pos:column="13">Address<pos:position pos:line="76" pos:column="20"/></name><operator pos:line="76" pos:column="20">::<pos:position pos:line="76" pos:column="22"/></operator><name pos:line="76" pos:column="22">FreeAddr<pos:position pos:line="76" pos:column="30"/></name></name><argument_list pos:line="76" pos:column="30">(<argument><expr><name pos:line="76" pos:column="31">from<pos:position pos:line="76" pos:column="35"/></name></expr></argument>)<pos:position pos:line="76" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="37"/></expr_stmt>
        <return pos:line="77" pos:column="9">return;<pos:position pos:line="77" pos:column="16"/></return>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="80" pos:column="5">echo<pos:position pos:line="80" pos:column="9"/></name> <operator pos:line="80" pos:column="10">=<pos:position pos:line="80" pos:column="11"/></operator> <operator pos:line="80" pos:column="12">(<pos:position pos:line="80" pos:column="13"/></operator><name pos:line="80" pos:column="13">icmpEchoData<pos:position pos:line="80" pos:column="25"/></name> <operator pos:line="80" pos:column="26">*<pos:position pos:line="80" pos:column="27"/></operator><operator pos:line="80" pos:column="27">)<pos:position pos:line="80" pos:column="28"/></operator> <operator pos:line="80" pos:column="29">(<pos:position pos:line="80" pos:column="30"/></operator><name pos:line="80" pos:column="30">void<pos:position pos:line="80" pos:column="34"/></name> <operator pos:line="80" pos:column="35">*<pos:position pos:line="80" pos:column="36"/></operator><operator pos:line="80" pos:column="36">)<pos:position pos:line="80" pos:column="37"/></operator> <operator pos:line="80" pos:column="38">(<pos:position pos:line="80" pos:column="39"/></operator><name pos:line="80" pos:column="39">icmp<pos:position pos:line="80" pos:column="43"/></name> <operator pos:line="80" pos:column="44">+<pos:position pos:line="80" pos:column="45"/></operator> <literal type="number" pos:line="80" pos:column="46">1<pos:position pos:line="80" pos:column="47"/></literal><operator pos:line="80" pos:column="47">)<pos:position pos:line="80" pos:column="48"/></operator></expr>;<pos:position pos:line="80" pos:column="49"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="82" pos:column="5">preply<pos:position pos:line="82" pos:column="11"/></name><operator pos:line="82" pos:column="11">.<pos:position pos:line="82" pos:column="12"/></operator><name pos:line="82" pos:column="12">opcode<pos:position pos:line="82" pos:column="18"/></name></name> <operator pos:line="82" pos:column="19">=<pos:position pos:line="82" pos:column="20"/></operator> <name><name pos:line="82" pos:column="21">echo<pos:position pos:line="82" pos:column="25"/></name><operator pos:line="82" pos:column="25">-&gt;<pos:position pos:line="82" pos:column="30"/></operator><name pos:line="82" pos:column="27">opcode<pos:position pos:line="82" pos:column="33"/></name></name></expr>;<pos:position pos:line="82" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="84" pos:column="5">preply<pos:position pos:line="84" pos:column="11"/></name><operator pos:line="84" pos:column="11">.<pos:position pos:line="84" pos:column="12"/></operator><name pos:line="84" pos:column="12">hops<pos:position pos:line="84" pos:column="16"/></name></name> <operator pos:line="84" pos:column="17">=<pos:position pos:line="84" pos:column="18"/></operator> <call><name pos:line="84" pos:column="19">ipHops<pos:position pos:line="84" pos:column="25"/></name><argument_list pos:line="84" pos:column="25">(<argument><expr><name><name pos:line="84" pos:column="26">ip<pos:position pos:line="84" pos:column="28"/></name><operator pos:line="84" pos:column="28">-&gt;<pos:position pos:line="84" pos:column="33"/></operator><name pos:line="84" pos:column="30">ip_ttl<pos:position pos:line="84" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="38"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="86" pos:column="5">struct<pos:position pos:line="86" pos:column="11"/></name> <name pos:line="86" pos:column="12">timeval<pos:position pos:line="86" pos:column="19"/></name></name></type> <name pos:line="86" pos:column="20">tv<pos:position pos:line="86" pos:column="22"/></name></decl>;<pos:position pos:line="86" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">memcpy<pos:position pos:line="87" pos:column="11"/></name><argument_list pos:line="87" pos:column="11">(<argument><expr><operator pos:line="87" pos:column="12">&amp;<pos:position pos:line="87" pos:column="17"/></operator><name pos:line="87" pos:column="13">tv<pos:position pos:line="87" pos:column="15"/></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="17">&amp;<pos:position pos:line="87" pos:column="22"/></operator><name><name pos:line="87" pos:column="18">echo<pos:position pos:line="87" pos:column="22"/></name><operator pos:line="87" pos:column="22">-&gt;<pos:position pos:line="87" pos:column="27"/></operator><name pos:line="87" pos:column="24">tv<pos:position pos:line="87" pos:column="26"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="87" pos:column="28">sizeof<argument_list pos:line="87" pos:column="34">(<argument><expr pos:line="87" pos:column="35">struct <name pos:line="87" pos:column="42">timeval<pos:position pos:line="87" pos:column="49"/></name></expr></argument>)<pos:position pos:line="87" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="87" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="88" pos:column="5">preply<pos:position pos:line="88" pos:column="11"/></name><operator pos:line="88" pos:column="11">.<pos:position pos:line="88" pos:column="12"/></operator><name pos:line="88" pos:column="12">rtt<pos:position pos:line="88" pos:column="15"/></name></name> <operator pos:line="88" pos:column="16">=<pos:position pos:line="88" pos:column="17"/></operator> <call><name pos:line="88" pos:column="18">tvSubMsec<pos:position pos:line="88" pos:column="27"/></name><argument_list pos:line="88" pos:column="27">(<argument><expr><name pos:line="88" pos:column="28">tv<pos:position pos:line="88" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="32">now<pos:position pos:line="88" pos:column="35"/></name></expr></argument>)<pos:position pos:line="88" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="90" pos:column="5">preply<pos:position pos:line="90" pos:column="11"/></name><operator pos:line="90" pos:column="11">.<pos:position pos:line="90" pos:column="12"/></operator><name pos:line="90" pos:column="12">psize<pos:position pos:line="90" pos:column="17"/></name></name> <operator pos:line="90" pos:column="18">=<pos:position pos:line="90" pos:column="19"/></operator> <name pos:line="90" pos:column="20">n<pos:position pos:line="90" pos:column="21"/></name> <operator pos:line="90" pos:column="22">-<pos:position pos:line="90" pos:column="23"/></operator> <name pos:line="90" pos:column="24">iphdrlen<pos:position pos:line="90" pos:column="32"/></name> <operator pos:line="90" pos:column="33">-<pos:position pos:line="90" pos:column="34"/></operator> <operator pos:line="90" pos:column="35">(<pos:position pos:line="90" pos:column="36"/></operator><sizeof pos:line="90" pos:column="36">sizeof<argument_list pos:line="90" pos:column="42">(<argument><expr><name pos:line="90" pos:column="43">icmpEchoData<pos:position pos:line="90" pos:column="55"/></name></expr></argument>)<pos:position pos:line="90" pos:column="56"/></argument_list></sizeof> <operator pos:line="90" pos:column="57">-<pos:position pos:line="90" pos:column="58"/></operator> <name pos:line="90" pos:column="59">MAX_PKT4_SZ<pos:position pos:line="90" pos:column="70"/></name><operator pos:line="90" pos:column="70">)<pos:position pos:line="90" pos:column="71"/></operator></expr>;<pos:position pos:line="90" pos:column="72"/></expr_stmt>

    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name><name pos:line="92" pos:column="9">preply<pos:position pos:line="92" pos:column="15"/></name><operator pos:line="92" pos:column="15">.<pos:position pos:line="92" pos:column="16"/></operator><name pos:line="92" pos:column="16">psize<pos:position pos:line="92" pos:column="21"/></name></name> <operator pos:line="92" pos:column="22">&lt;<pos:position pos:line="92" pos:column="26"/></operator> <literal type="number" pos:line="92" pos:column="24">0<pos:position pos:line="92" pos:column="25"/></literal></expr>)<pos:position pos:line="92" pos:column="26"/></condition><then pos:line="92" pos:column="26"> <block pos:line="92" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">debugs<pos:position pos:line="93" pos:column="15"/></name><argument_list pos:line="93" pos:column="15">(<argument><expr><literal type="number" pos:line="93" pos:column="16">42<pos:position pos:line="93" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="20">DBG_CRITICAL<pos:position pos:line="93" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="34">HERE<pos:position pos:line="93" pos:column="38"/></name> <operator pos:line="93" pos:column="39">&lt;&lt;<pos:position pos:line="93" pos:column="47"/></operator> <literal type="string" pos:line="93" pos:column="42">"Malformed ICMP packet."<pos:position pos:line="93" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="94" pos:column="9">Ip<pos:position pos:line="94" pos:column="11"/></name><operator pos:line="94" pos:column="11">::<pos:position pos:line="94" pos:column="13"/></operator><name pos:line="94" pos:column="13">Address<pos:position pos:line="94" pos:column="20"/></name><operator pos:line="94" pos:column="20">::<pos:position pos:line="94" pos:column="22"/></operator><name pos:line="94" pos:column="22">FreeAddr<pos:position pos:line="94" pos:column="30"/></name></name><argument_list pos:line="94" pos:column="30">(<argument><expr><name pos:line="94" pos:column="31">from<pos:position pos:line="94" pos:column="35"/></name></expr></argument>)<pos:position pos:line="94" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="37"/></expr_stmt>
        <return pos:line="95" pos:column="9">return;<pos:position pos:line="95" pos:column="16"/></return>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="98" pos:column="5">control<pos:position pos:line="98" pos:column="12"/></name><operator pos:line="98" pos:column="12">.<pos:position pos:line="98" pos:column="13"/></operator><name pos:line="98" pos:column="13">SendResult<pos:position pos:line="98" pos:column="23"/></name></name><argument_list pos:line="98" pos:column="23">(<argument><expr><name pos:line="98" pos:column="24">preply<pos:position pos:line="98" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="98" pos:column="32">(<pos:position pos:line="98" pos:column="33"/></operator><sizeof pos:line="98" pos:column="33">sizeof<argument_list pos:line="98" pos:column="39">(<argument><expr><name pos:line="98" pos:column="40">pingerReplyData<pos:position pos:line="98" pos:column="55"/></name></expr></argument>)<pos:position pos:line="98" pos:column="56"/></argument_list></sizeof> <operator pos:line="98" pos:column="57">-<pos:position pos:line="98" pos:column="58"/></operator> <name pos:line="98" pos:column="59">MAX_PKT4_SZ<pos:position pos:line="98" pos:column="70"/></name> <operator pos:line="98" pos:column="71">+<pos:position pos:line="98" pos:column="72"/></operator> <name><name pos:line="98" pos:column="73">preply<pos:position pos:line="98" pos:column="79"/></name><operator pos:line="98" pos:column="79">.<pos:position pos:line="98" pos:column="80"/></operator><name pos:line="98" pos:column="80">psize<pos:position pos:line="98" pos:column="85"/></name></name><operator pos:line="98" pos:column="85">)<pos:position pos:line="98" pos:column="86"/></operator></expr></argument> )<pos:position pos:line="98" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="89"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="100" pos:column="5">Log<pos:position pos:line="100" pos:column="8"/></name><argument_list pos:line="100" pos:column="8">(<argument><expr><name><name pos:line="100" pos:column="9">preply<pos:position pos:line="100" pos:column="15"/></name><operator pos:line="100" pos:column="15">.<pos:position pos:line="100" pos:column="16"/></operator><name pos:line="100" pos:column="16">from<pos:position pos:line="100" pos:column="20"/></name></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="22">icmp<pos:position pos:line="100" pos:column="26"/></name><operator pos:line="100" pos:column="26">-&gt;<pos:position pos:line="100" pos:column="31"/></operator><name pos:line="100" pos:column="28">icmp_type<pos:position pos:line="100" pos:column="37"/></name></name></expr></argument>, <argument><expr><call><name pos:line="100" pos:column="39">IcmpPacketType<pos:position pos:line="100" pos:column="53"/></name><argument_list pos:line="100" pos:column="53">(<argument><expr><name><name pos:line="100" pos:column="54">icmp<pos:position pos:line="100" pos:column="58"/></name><operator pos:line="100" pos:column="58">-&gt;<pos:position pos:line="100" pos:column="63"/></operator><name pos:line="100" pos:column="60">icmp_type<pos:position pos:line="100" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="72">preply<pos:position pos:line="100" pos:column="78"/></name><operator pos:line="100" pos:column="78">.<pos:position pos:line="100" pos:column="79"/></operator><name pos:line="100" pos:column="79">rtt<pos:position pos:line="100" pos:column="82"/></name></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="84">preply<pos:position pos:line="100" pos:column="90"/></name><operator pos:line="100" pos:column="90">.<pos:position pos:line="100" pos:column="91"/></operator><name pos:line="100" pos:column="91">hops<pos:position pos:line="100" pos:column="95"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="97"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="101" pos:column="5">Ip<pos:position pos:line="101" pos:column="7"/></name><operator pos:line="101" pos:column="7">::<pos:position pos:line="101" pos:column="9"/></operator><name pos:line="101" pos:column="9">Address<pos:position pos:line="101" pos:column="16"/></name><operator pos:line="101" pos:column="16">::<pos:position pos:line="101" pos:column="18"/></operator><name pos:line="101" pos:column="18">FreeAddr<pos:position pos:line="101" pos:column="26"/></name></name><argument_list pos:line="101" pos:column="26">(<argument><expr><name pos:line="101" pos:column="27">from<pos:position pos:line="101" pos:column="31"/></name></expr></argument>)<pos:position pos:line="101" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="33"/></expr_stmt>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
