<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1944_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">short<pos:position pos:line="1" pos:column="22"/></name></type>
<name pos:line="2" pos:column="1">idnsQueryID<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">()<pos:position pos:line="2" pos:column="14"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// NP: apparently ranlux are faster, but not quite as "proven"</comment>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><name><name pos:line="5" pos:column="12">std<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">::<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">mt19937<pos:position pos:line="5" pos:column="24"/></name></name></type> <name pos:line="5" pos:column="25">mt<pos:position pos:line="5" pos:column="27"/></name><argument_list pos:line="5" pos:column="27">(<argument><expr><cast type="static" pos:line="5" pos:column="28">static_cast<argument_list type="generic" pos:line="5" pos:column="39">&lt;<argument><expr><name pos:line="5" pos:column="40">uint32_t<pos:position pos:line="5" pos:column="48"/></name></expr></argument>&gt;<pos:position pos:line="5" pos:column="52"/></argument_list><argument_list pos:line="5" pos:column="49">(<argument><expr><call><name pos:line="5" pos:column="50">getCurrentTime<pos:position pos:line="5" pos:column="64"/></name><argument_list pos:line="5" pos:column="64">()<pos:position pos:line="5" pos:column="66"/></argument_list></call> <operator pos:line="5" pos:column="67">&amp;<pos:position pos:line="5" pos:column="72"/></operator> <literal type="number" pos:line="5" pos:column="69">0xFFFFFFFF<pos:position pos:line="5" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="80"/></argument_list></cast></expr></argument>)<pos:position pos:line="5" pos:column="81"/></argument_list></decl>;<pos:position pos:line="5" pos:column="82"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">short<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">id<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><call><name pos:line="6" pos:column="25">mt<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">()<pos:position pos:line="6" pos:column="29"/></argument_list></call> <operator pos:line="6" pos:column="30">&amp;<pos:position pos:line="6" pos:column="35"/></operator> <literal type="number" pos:line="6" pos:column="32">0xFFFF<pos:position pos:line="6" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">short<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">first_id<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><name pos:line="7" pos:column="31">id<pos:position pos:line="7" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>

    <comment type="line" pos:line="9" pos:column="5">// ensure temporal uniqueness by looking for an existing use</comment>
    <while pos:line="10" pos:column="5">while <condition pos:line="10" pos:column="11">(<expr><call><name pos:line="10" pos:column="12">idnsFindQuery<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">id<pos:position pos:line="10" pos:column="28"/></name></expr></argument>)<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="30"/></condition> <block pos:line="10" pos:column="31">{
        <expr_stmt><expr><operator pos:line="11" pos:column="9">++<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">id<pos:position pos:line="11" pos:column="13"/></name></expr>;<pos:position pos:line="11" pos:column="14"/></expr_stmt>

        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">id<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">==<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="19">first_id<pos:position pos:line="13" pos:column="27"/></name></expr>)<pos:position pos:line="13" pos:column="28"/></condition><then pos:line="13" pos:column="28"> <block pos:line="13" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">debugs<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><literal type="number" pos:line="14" pos:column="20">78<pos:position pos:line="14" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="24">DBG_IMPORTANT<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="39">"idnsQueryID: Warning, too many pending DNS requests"<pos:position pos:line="14" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="94"/></expr_stmt>
            <break pos:line="15" pos:column="13">break;<pos:position pos:line="15" pos:column="19"/></break>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></while>

    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">id<pos:position pos:line="19" pos:column="14"/></name></expr>;<pos:position pos:line="19" pos:column="15"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
