<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6191_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">ESIExpression<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">Evaluate<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">s<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">stackmember<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">stack<pos:position pos:line="4" pos:column="22"/></name><index pos:line="4" pos:column="22">[<expr><literal type="number" pos:line="4" pos:column="23">20<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">stackdepth<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <specifier pos:line="6" pos:column="10">const<pos:position pos:line="6" pos:column="15"/></specifier> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">end<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">PROF_start<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">esiExpressionEval<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>

    <while pos:line="9" pos:column="5">while <condition pos:line="9" pos:column="11">(<expr><operator pos:line="9" pos:column="12">*<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">s<pos:position pos:line="9" pos:column="14"/></name></expr>)<pos:position pos:line="9" pos:column="15"/></condition> <block pos:line="9" pos:column="16">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">stackmember<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">candidate<pos:position pos:line="10" pos:column="30"/></name> <init pos:line="10" pos:column="31">= <expr><call><name pos:line="10" pos:column="33">getsymbol<pos:position pos:line="10" pos:column="42"/></name><argument_list pos:line="10" pos:column="42">(<argument><expr><name pos:line="10" pos:column="43">s<pos:position pos:line="10" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="46">&amp;<pos:position pos:line="10" pos:column="51"/></operator><name pos:line="10" pos:column="47">end<pos:position pos:line="10" pos:column="50"/></name></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="52"/></decl_stmt>

        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">candidate<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">.<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">valuetype<pos:position pos:line="12" pos:column="32"/></name></name> <operator pos:line="12" pos:column="33">!=<pos:position pos:line="12" pos:column="35"/></operator> <name pos:line="12" pos:column="36">ESI_EXPR_INVALID<pos:position pos:line="12" pos:column="52"/></name></expr>)<pos:position pos:line="12" pos:column="53"/></condition><then pos:line="12" pos:column="53"> <block pos:line="12" pos:column="54">{
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">assert<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">s<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">!=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">end<pos:position pos:line="13" pos:column="28"/></name></expr></argument>)<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>

            <if pos:line="15" pos:column="13">if <condition pos:line="15" pos:column="16">(<expr><operator pos:line="15" pos:column="17">!<pos:position pos:line="15" pos:column="18"/></operator><call><name pos:line="15" pos:column="18">addmember<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">stack<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="35">&amp;<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="36">stackdepth<pos:position pos:line="15" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="48">&amp;<pos:position pos:line="15" pos:column="53"/></operator><name pos:line="15" pos:column="49">candidate<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="60"/></condition><then pos:line="15" pos:column="60"> <block pos:line="15" pos:column="61">{
                <expr_stmt><expr><call><name pos:line="16" pos:column="17">PROF_stop<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">esiExpressionEval<pos:position pos:line="16" pos:column="44"/></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt>
                <return pos:line="17" pos:column="17">return <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></return>
            }<pos:position pos:line="18" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="20" pos:column="13">s<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <name pos:line="20" pos:column="17">end<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></then> <else pos:line="21" pos:column="11">else <block pos:line="21" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">assert<pos:position pos:line="22" pos:column="19"/></name> <argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">s<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">==<pos:position pos:line="22" pos:column="25"/></operator> <name pos:line="22" pos:column="26">end<pos:position pos:line="22" pos:column="29"/></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">debugs<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><literal type="number" pos:line="23" pos:column="20">86<pos:position pos:line="23" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="24">DBG_IMPORTANT<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="39">"failed parsing expression"<pos:position pos:line="23" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="68"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">PROF_stop<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">esiExpressionEval<pos:position pos:line="24" pos:column="40"/></name></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
            <return pos:line="25" pos:column="13">return <expr><literal type="number" pos:line="25" pos:column="20">0<pos:position pos:line="25" pos:column="21"/></literal></expr>;<pos:position pos:line="25" pos:column="22"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></else></if>
    }<pos:position pos:line="27" pos:column="6"/></block></while>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">stackdepth<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">&gt;<pos:position pos:line="29" pos:column="24"/></operator> <literal type="number" pos:line="29" pos:column="22">1<pos:position pos:line="29" pos:column="23"/></literal></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24"> <block pos:line="29" pos:column="25">{
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">stackmember<pos:position pos:line="30" pos:column="20"/></name></type> <name pos:line="30" pos:column="21">rv<pos:position pos:line="30" pos:column="23"/></name></decl>;<pos:position pos:line="30" pos:column="24"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="31" pos:column="9">rv<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">.<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="12">valuetype<pos:position pos:line="31" pos:column="21"/></name></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="24">ESI_EXPR_INVALID<pos:position pos:line="31" pos:column="40"/></name></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="32" pos:column="9">rv<pos:position pos:line="32" pos:column="11"/></name><operator pos:line="32" pos:column="11">.<pos:position pos:line="32" pos:column="12"/></operator><name pos:line="32" pos:column="12">precedence<pos:position pos:line="32" pos:column="22"/></name></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <literal type="number" pos:line="32" pos:column="25">0<pos:position pos:line="32" pos:column="26"/></literal></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>

        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name><name pos:line="34" pos:column="13">stack<pos:position pos:line="34" pos:column="18"/></name><index pos:line="34" pos:column="18">[<expr><name pos:line="34" pos:column="19">stackdepth<pos:position pos:line="34" pos:column="29"/></name> <operator pos:line="34" pos:column="30">-<pos:position pos:line="34" pos:column="31"/></operator> <literal type="number" pos:line="34" pos:column="32">2<pos:position pos:line="34" pos:column="33"/></literal></expr>]<pos:position pos:line="34" pos:column="34"/></index></name><operator pos:line="34" pos:column="34">.<pos:position pos:line="34" pos:column="35"/></operator>
                <call><name pos:line="35" pos:column="17">eval<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">stack<pos:position pos:line="35" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="29">&amp;<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="30">stackdepth<pos:position pos:line="35" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="42">stackdepth<pos:position pos:line="35" pos:column="52"/></name> <operator pos:line="35" pos:column="53">-<pos:position pos:line="35" pos:column="54"/></operator> <literal type="number" pos:line="35" pos:column="55">2<pos:position pos:line="35" pos:column="56"/></literal></expr></argument>, <argument><expr><operator pos:line="35" pos:column="58">&amp;<pos:position pos:line="35" pos:column="63"/></operator><name pos:line="35" pos:column="59">rv<pos:position pos:line="35" pos:column="61"/></name></expr></argument>)<pos:position pos:line="35" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="63"/></condition><then pos:line="35" pos:column="63"> <block pos:line="35" pos:column="64">{
            <comment type="block" pos:line="36" pos:column="13">/* special case - leading operator failed */</comment>
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">debugs<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><literal type="number" pos:line="37" pos:column="20">86<pos:position pos:line="37" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="24">DBG_IMPORTANT<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="39">"invalid expression"<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">PROF_stop<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><name pos:line="38" pos:column="23">esiExpressionEval<pos:position pos:line="38" pos:column="40"/></name></expr></argument>)<pos:position pos:line="38" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="42"/></expr_stmt>
            <return pos:line="39" pos:column="13">return <expr><literal type="number" pos:line="39" pos:column="20">0<pos:position pos:line="39" pos:column="21"/></literal></expr>;<pos:position pos:line="39" pos:column="22"/></return>
        }<pos:position pos:line="40" pos:column="10"/></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">stackdepth<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">==<pos:position pos:line="43" pos:column="22"/></operator> <literal type="number" pos:line="43" pos:column="23">0<pos:position pos:line="43" pos:column="24"/></literal></expr>)<pos:position pos:line="43" pos:column="25"/></condition><then pos:line="43" pos:column="25"> <block pos:line="43" pos:column="26">{
        <comment type="block" pos:line="44" pos:column="9">/* Empty expression - evaluate to false */</comment>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">PROF_stop<pos:position pos:line="45" pos:column="18"/></name><argument_list pos:line="45" pos:column="18">(<argument><expr><name pos:line="45" pos:column="19">esiExpressionEval<pos:position pos:line="45" pos:column="36"/></name></expr></argument>)<pos:position pos:line="45" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="38"/></expr_stmt>
        <return pos:line="46" pos:column="9">return <expr><literal type="number" pos:line="46" pos:column="16">0<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="49" pos:column="5">/* if we hit here, we think we have a valid result */</comment>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">assert<pos:position pos:line="50" pos:column="11"/></name><argument_list pos:line="50" pos:column="11">(<argument><expr><name pos:line="50" pos:column="12">stackdepth<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">==<pos:position pos:line="50" pos:column="25"/></operator> <literal type="number" pos:line="50" pos:column="26">1<pos:position pos:line="50" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="52" pos:column="5">assert<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><name><name pos:line="52" pos:column="12">stack<pos:position pos:line="52" pos:column="17"/></name><index pos:line="52" pos:column="17">[<expr><literal type="number" pos:line="52" pos:column="18">0<pos:position pos:line="52" pos:column="19"/></literal></expr>]<pos:position pos:line="52" pos:column="20"/></index></name><operator pos:line="52" pos:column="20">.<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="21">valuetype<pos:position pos:line="52" pos:column="30"/></name> <operator pos:line="52" pos:column="31">==<pos:position pos:line="52" pos:column="33"/></operator> <name pos:line="52" pos:column="34">ESI_EXPR_EXPR<pos:position pos:line="52" pos:column="47"/></name></expr></argument>)<pos:position pos:line="52" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="49"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="54" pos:column="5">PROF_stop<pos:position pos:line="54" pos:column="14"/></name><argument_list pos:line="54" pos:column="14">(<argument><expr><name pos:line="54" pos:column="15">esiExpressionEval<pos:position pos:line="54" pos:column="32"/></name></expr></argument>)<pos:position pos:line="54" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="34"/></expr_stmt>

    <return pos:line="56" pos:column="5">return <expr><ternary><condition><expr><name><name pos:line="56" pos:column="12">stack<pos:position pos:line="56" pos:column="17"/></name><index pos:line="56" pos:column="17">[<expr><literal type="number" pos:line="56" pos:column="18">0<pos:position pos:line="56" pos:column="19"/></literal></expr>]<pos:position pos:line="56" pos:column="20"/></index></name><operator pos:line="56" pos:column="20">.<pos:position pos:line="56" pos:column="21"/></operator><name><name pos:line="56" pos:column="21">value<pos:position pos:line="56" pos:column="26"/></name><operator pos:line="56" pos:column="26">.<pos:position pos:line="56" pos:column="27"/></operator><name pos:line="56" pos:column="27">integral<pos:position pos:line="56" pos:column="35"/></name></name></expr> ?<pos:position pos:line="56" pos:column="37"/></condition><then pos:line="56" pos:column="37"> <expr><literal type="number" pos:line="56" pos:column="38">1<pos:position pos:line="56" pos:column="39"/></literal></expr> <pos:position pos:line="56" pos:column="40"/></then><else pos:line="56" pos:column="40">: <expr><literal type="number" pos:line="56" pos:column="42">0<pos:position pos:line="56" pos:column="43"/></literal></expr></else></ternary></expr>;<pos:position pos:line="56" pos:column="44"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
