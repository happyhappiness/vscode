<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1423_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">SquidMainSafe<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">int<pos:position pos:line="2" pos:column="18"/></name></type> <name pos:line="2" pos:column="19">argc<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier><modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">argv<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <try pos:line="4" pos:column="5">try <block pos:line="4" pos:column="9">{
        <return pos:line="5" pos:column="9">return <expr><call><name pos:line="5" pos:column="16">SquidMain<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">argc<pos:position pos:line="5" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="32">argv<pos:position pos:line="5" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="38"/></return>
    }<pos:position pos:line="6" pos:column="6"/></block> <catch pos:line="6" pos:column="7">catch <parameter_list pos:line="6" pos:column="13">(<parameter><decl><type><specifier pos:line="6" pos:column="14">const<pos:position pos:line="6" pos:column="19"/></specifier> <name><name pos:line="6" pos:column="20">std<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">::<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="25">exception<pos:position pos:line="6" pos:column="34"/></name></name> <modifier pos:line="6" pos:column="35">&amp;<pos:position pos:line="6" pos:column="40"/></modifier></type><name pos:line="6" pos:column="36">e<pos:position pos:line="6" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="38"/></parameter_list> <block pos:line="6" pos:column="39">{
        <expr_stmt><expr><name><name pos:line="7" pos:column="9">std<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">::<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">cerr<pos:position pos:line="7" pos:column="18"/></name></name> <operator pos:line="7" pos:column="19">&lt;&lt;<pos:position pos:line="7" pos:column="27"/></operator> <literal type="string" pos:line="7" pos:column="22">"dying from an unhandled exception: "<pos:position pos:line="7" pos:column="59"/></literal> <operator pos:line="7" pos:column="60">&lt;&lt;<pos:position pos:line="7" pos:column="68"/></operator> <call><name><name pos:line="7" pos:column="63">e<pos:position pos:line="7" pos:column="64"/></name><operator pos:line="7" pos:column="64">.<pos:position pos:line="7" pos:column="65"/></operator><name pos:line="7" pos:column="65">what<pos:position pos:line="7" pos:column="69"/></name></name><argument_list pos:line="7" pos:column="69">()<pos:position pos:line="7" pos:column="71"/></argument_list></call> <operator pos:line="7" pos:column="72">&lt;&lt;<pos:position pos:line="7" pos:column="80"/></operator> <name><name pos:line="7" pos:column="75">std<pos:position pos:line="7" pos:column="78"/></name><operator pos:line="7" pos:column="78">::<pos:position pos:line="7" pos:column="80"/></operator><name pos:line="7" pos:column="80">endl<pos:position pos:line="7" pos:column="84"/></name></name></expr>;<pos:position pos:line="7" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">1<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="19">DBG_CRITICAL<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="33">"FATAL: dying from an unhandled exception: "<pos:position pos:line="8" pos:column="77"/></literal> <operator pos:line="8" pos:column="78">&lt;&lt;<pos:position pos:line="8" pos:column="86"/></operator> <call><name><name pos:line="8" pos:column="81">e<pos:position pos:line="8" pos:column="82"/></name><operator pos:line="8" pos:column="82">.<pos:position pos:line="8" pos:column="83"/></operator><name pos:line="8" pos:column="83">what<pos:position pos:line="8" pos:column="87"/></name></name><argument_list pos:line="8" pos:column="87">()<pos:position pos:line="8" pos:column="89"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="91"/></expr_stmt>
        <throw pos:line="9" pos:column="9">throw;<pos:position pos:line="9" pos:column="15"/></throw>
    }<pos:position pos:line="10" pos:column="6"/></block></catch> <catch pos:line="10" pos:column="7">catch <parameter_list pos:line="10" pos:column="13">(<parameter><decl><type><modifier pos:line="10" pos:column="14">...<pos:position pos:line="10" pos:column="17"/></modifier></type></decl></parameter>)<pos:position pos:line="10" pos:column="18"/></parameter_list> <block pos:line="10" pos:column="19">{
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">std<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">::<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">cerr<pos:position pos:line="11" pos:column="18"/></name></name> <operator pos:line="11" pos:column="19">&lt;&lt;<pos:position pos:line="11" pos:column="27"/></operator> <literal type="string" pos:line="11" pos:column="22">"dying from an unhandled exception."<pos:position pos:line="11" pos:column="58"/></literal> <operator pos:line="11" pos:column="59">&lt;&lt;<pos:position pos:line="11" pos:column="67"/></operator> <name><name pos:line="11" pos:column="62">std<pos:position pos:line="11" pos:column="65"/></name><operator pos:line="11" pos:column="65">::<pos:position pos:line="11" pos:column="67"/></operator><name pos:line="11" pos:column="67">endl<pos:position pos:line="11" pos:column="71"/></name></name></expr>;<pos:position pos:line="11" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">1<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="19">DBG_CRITICAL<pos:position pos:line="12" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="33">"FATAL: dying from an unhandled exception."<pos:position pos:line="12" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="78"/></expr_stmt>
        <throw pos:line="13" pos:column="9">throw;<pos:position pos:line="13" pos:column="15"/></throw>
    }<pos:position pos:line="14" pos:column="6"/></block></catch></try>
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">-<pos:position pos:line="15" pos:column="13"/></operator><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal></expr>;<pos:position pos:line="15" pos:column="15"/></return> <comment type="line" pos:line="15" pos:column="16">// not reached</comment>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
