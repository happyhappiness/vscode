<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_907_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_remove_close_handler<pos:position pos:line="2" pos:column="26"/></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">int<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">fd<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="35">AsyncCall<pos:position pos:line="2" pos:column="44"/></name><operator pos:line="2" pos:column="44">::<pos:position pos:line="2" pos:column="46"/></operator><name pos:line="2" pos:column="46">Pointer<pos:position pos:line="2" pos:column="53"/></name></name> <modifier pos:line="2" pos:column="54">&amp;<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="55">call<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><call><name pos:line="4" pos:column="12">isOpen<pos:position pos:line="4" pos:column="18"/></name><argument_list pos:line="4" pos:column="18">(<argument><expr><name pos:line="4" pos:column="19">fd<pos:position pos:line="4" pos:column="21"/></name></expr></argument>)<pos:position pos:line="4" pos:column="22"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">5<pos:position pos:line="5" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="15">5<pos:position pos:line="5" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="18">"comm_remove_close_handler: FD "<pos:position pos:line="5" pos:column="50"/></literal> <operator pos:line="5" pos:column="51">&lt;&lt;<pos:position pos:line="5" pos:column="59"/></operator> <name pos:line="5" pos:column="54">fd<pos:position pos:line="5" pos:column="56"/></name> <operator pos:line="5" pos:column="57">&lt;&lt;<pos:position pos:line="5" pos:column="65"/></operator> <literal type="string" pos:line="5" pos:column="60">", AsyncCall="<pos:position pos:line="5" pos:column="74"/></literal> <operator pos:line="5" pos:column="75">&lt;&lt;<pos:position pos:line="5" pos:column="83"/></operator> <name pos:line="5" pos:column="78">call<pos:position pos:line="5" pos:column="82"/></name></expr></argument>)<pos:position pos:line="5" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="84"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// comm_close removes all close handlers so our handler may be gone</comment>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">AsyncCall<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">::<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">Pointer<pos:position pos:line="8" pos:column="23"/></name></name></type> <name pos:line="8" pos:column="24">p<pos:position pos:line="8" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="27">prev<pos:position pos:line="8" pos:column="31"/></name> <init pos:line="8" pos:column="32">= <expr><name pos:line="8" pos:column="34">NULL<pos:position pos:line="8" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
    <for pos:line="9" pos:column="5">for <control pos:line="9" pos:column="9">(<init><expr><name pos:line="9" pos:column="10">p<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <name><name pos:line="9" pos:column="14">fd_table<pos:position pos:line="9" pos:column="22"/></name><index pos:line="9" pos:column="22">[<expr><name pos:line="9" pos:column="23">fd<pos:position pos:line="9" pos:column="25"/></name></expr>]<pos:position pos:line="9" pos:column="26"/></index></name><operator pos:line="9" pos:column="26">.<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="27">closeHandler<pos:position pos:line="9" pos:column="39"/></name></expr>;<pos:position pos:line="9" pos:column="40"/></init> <condition><expr><name pos:line="9" pos:column="41">p<pos:position pos:line="9" pos:column="42"/></name> <operator pos:line="9" pos:column="43">!=<pos:position pos:line="9" pos:column="45"/></operator> <name pos:line="9" pos:column="46">NULL<pos:position pos:line="9" pos:column="50"/></name> <operator pos:line="9" pos:column="51">&amp;&amp;<pos:position pos:line="9" pos:column="61"/></operator> <name pos:line="9" pos:column="54">p<pos:position pos:line="9" pos:column="55"/></name> <operator pos:line="9" pos:column="56">!=<pos:position pos:line="9" pos:column="58"/></operator> <name pos:line="9" pos:column="59">call<pos:position pos:line="9" pos:column="63"/></name></expr>;<pos:position pos:line="9" pos:column="64"/></condition> <incr><expr><name pos:line="9" pos:column="65">prev<pos:position pos:line="9" pos:column="69"/></name> <operator pos:line="9" pos:column="70">=<pos:position pos:line="9" pos:column="71"/></operator> <name pos:line="9" pos:column="72">p<pos:position pos:line="9" pos:column="73"/></name></expr><operator pos:line="9" pos:column="73">,<pos:position pos:line="9" pos:column="74"/></operator> <expr><name pos:line="9" pos:column="75">p<pos:position pos:line="9" pos:column="76"/></name> <operator pos:line="9" pos:column="77">=<pos:position pos:line="9" pos:column="78"/></operator> <call><name><name pos:line="9" pos:column="79">p<pos:position pos:line="9" pos:column="80"/></name><operator pos:line="9" pos:column="80">-&gt;<pos:position pos:line="9" pos:column="85"/></operator><name pos:line="9" pos:column="82">Next<pos:position pos:line="9" pos:column="86"/></name></name><argument_list pos:line="9" pos:column="86">()<pos:position pos:line="9" pos:column="88"/></argument_list></call></expr></incr>)<pos:position pos:line="9" pos:column="89"/></control><block type="pseudo"><empty_stmt pos:line="9" pos:column="89">;<pos:position pos:line="9" pos:column="90"/></empty_stmt></block></for>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">p<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">!=<pos:position pos:line="11" pos:column="13"/></operator> <name pos:line="11" pos:column="14">NULL<pos:position pos:line="11" pos:column="18"/></name></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="12" pos:column="9">p<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">dequeue<pos:position pos:line="12" pos:column="19"/></name></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name><name pos:line="12" pos:column="20">fd_table<pos:position pos:line="12" pos:column="28"/></name><index pos:line="12" pos:column="28">[<expr><name pos:line="12" pos:column="29">fd<pos:position pos:line="12" pos:column="31"/></name></expr>]<pos:position pos:line="12" pos:column="32"/></index></name><operator pos:line="12" pos:column="32">.<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">closeHandler<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="47">prev<pos:position pos:line="12" pos:column="51"/></name></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">call<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">-&gt;<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="11">cancel<pos:position pos:line="13" pos:column="17"/></name></name><argument_list pos:line="13" pos:column="17">(<argument><expr><literal type="string" pos:line="13" pos:column="18">"comm_remove_close_handler"<pos:position pos:line="13" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
