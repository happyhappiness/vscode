<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4723_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">std<pos:position pos:line="1" pos:column="4"/></name><operator pos:line="1" pos:column="4">::<pos:position pos:line="1" pos:column="6"/></operator><name pos:line="1" pos:column="6">ostream<pos:position pos:line="1" pos:column="13"/></name></name><modifier pos:line="1" pos:column="13">&amp;<pos:position pos:line="1" pos:column="18"/></modifier></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">dump<pos:position pos:line="2" pos:column="11"/></name></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name><name pos:line="2" pos:column="12">std<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">ostream<pos:position pos:line="2" pos:column="24"/></name></name> <modifier pos:line="2" pos:column="25">&amp;<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="26">os<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list> <specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">os<pos:position pos:line="4" pos:column="7"/></name> <operator pos:line="4" pos:column="8">&lt;&lt;<pos:position pos:line="4" pos:column="16"/></operator> <name pos:line="4" pos:column="11">id<pos:position pos:line="4" pos:column="13"/></name>
       <operator pos:line="5" pos:column="8">&lt;&lt;<pos:position pos:line="5" pos:column="16"/></operator> <literal type="string" pos:line="5" pos:column="11">": "<pos:position pos:line="5" pos:column="15"/></literal></expr>;<pos:position pos:line="5" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="6" pos:column="5">store_<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">-&gt;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="13">dump<pos:position pos:line="6" pos:column="17"/></name></name><argument_list pos:line="6" pos:column="17">(<argument><expr><name pos:line="6" pos:column="18">os<pos:position pos:line="6" pos:column="20"/></name></expr></argument>)<pos:position pos:line="6" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">os<pos:position pos:line="7" pos:column="7"/></name> <operator pos:line="7" pos:column="8">&lt;&lt;<pos:position pos:line="7" pos:column="16"/></operator> <literal type="string" pos:line="7" pos:column="11">", offset:"<pos:position pos:line="7" pos:column="22"/></literal> <operator pos:line="7" pos:column="23">&lt;&lt;<pos:position pos:line="7" pos:column="31"/></operator> <name pos:line="7" pos:column="26">off_<pos:position pos:line="7" pos:column="30"/></name>
       <operator pos:line="8" pos:column="8">&lt;&lt;<pos:position pos:line="8" pos:column="16"/></operator> <literal type="string" pos:line="8" pos:column="11">", len:"<pos:position pos:line="8" pos:column="19"/></literal> <operator pos:line="8" pos:column="20">&lt;&lt;<pos:position pos:line="8" pos:column="28"/></operator> <name pos:line="8" pos:column="23">len_<pos:position pos:line="8" pos:column="27"/></name>
       <operator pos:line="9" pos:column="8">&lt;&lt;<pos:position pos:line="9" pos:column="16"/></operator> <literal type="string" pos:line="9" pos:column="11">") : '"<pos:position pos:line="9" pos:column="18"/></literal></expr>;<pos:position pos:line="9" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">print<pos:position pos:line="10" pos:column="10"/></name><argument_list pos:line="10" pos:column="10">(<argument><expr><name pos:line="10" pos:column="11">os<pos:position pos:line="10" pos:column="13"/></name></expr></argument>)<pos:position pos:line="10" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">os<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">&lt;&lt;<pos:position pos:line="11" pos:column="16"/></operator> <literal type="char" pos:line="11" pos:column="11">'\''<pos:position pos:line="11" pos:column="15"/></literal> <operator pos:line="11" pos:column="16">&lt;&lt;<pos:position pos:line="11" pos:column="24"/></operator> <name><name pos:line="11" pos:column="19">std<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">::<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">endl<pos:position pos:line="11" pos:column="28"/></name></name></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">os<pos:position pos:line="12" pos:column="14"/></name></expr>;<pos:position pos:line="12" pos:column="15"/></return>
<cpp:if pos:line="13" pos:column="1"># <cpp:directive pos:line="13" pos:column="3">if<pos:position pos:line="13" pos:column="5"/></cpp:directive> <expr><literal type="number" pos:line="13" pos:column="6">0<pos:position pos:line="13" pos:column="7"/></literal></expr></cpp:if>
    <comment type="line" pos:line="14" pos:column="5">// alternate implementation, based on Raw() API.</comment>
    os &lt;&lt; Raw("SBuf", buf(), length()) &lt;&lt;
       ". id: " &lt;&lt; id &lt;&lt;
       ", offset:" &lt;&lt; off_ &lt;&lt;
       ", len:" &lt;&lt; len_ &lt;&lt;
       ", store: ";
    store_-&gt;dump(os);
    os &lt;&lt; std::endl;
    return os;
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
