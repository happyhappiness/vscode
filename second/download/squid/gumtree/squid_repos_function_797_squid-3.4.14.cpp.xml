<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_797_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ClientHttpRequest<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">noteBodyProducerAborted<pos:position pos:line="2" pos:column="43"/></name></name><parameter_list pos:line="2" pos:column="43">(<parameter><decl><type><name><name pos:line="2" pos:column="44">BodyPipe<pos:position pos:line="2" pos:column="52"/></name><operator pos:line="2" pos:column="52">::<pos:position pos:line="2" pos:column="54"/></operator><name pos:line="2" pos:column="54">Pointer<pos:position pos:line="2" pos:column="61"/></name></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><operator pos:line="4" pos:column="12">!<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">virginHeadSource<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">stopConsumingFrom<pos:position pos:line="5" pos:column="22"/></name><argument_list pos:line="5" pos:column="22">(<argument><expr><name pos:line="5" pos:column="23">adaptedBodySource<pos:position pos:line="5" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">85<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="7" pos:column="15">3<pos:position pos:line="7" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="18">HERE<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&lt;&lt;<pos:position pos:line="7" pos:column="31"/></operator> <literal type="string" pos:line="7" pos:column="26">"REQMOD body production failed"<pos:position pos:line="7" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="59"/></expr_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">request_satisfaction_mode<pos:position pos:line="8" pos:column="34"/></name></expr>)<pos:position pos:line="8" pos:column="35"/></condition><then pos:line="8" pos:column="35"> <block pos:line="8" pos:column="36">{ <comment type="line" pos:line="8" pos:column="38">// too late to recover or serve an error</comment>
        <expr_stmt><expr><call><name><name pos:line="9" pos:column="9">request<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">detailError<pos:position pos:line="9" pos:column="29"/></name></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">ERR_ICAP_FAILURE<pos:position pos:line="9" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="48">ERR_DETAIL_CLT_REQMOD_RESP_BODY<pos:position pos:line="9" pos:column="79"/></name></expr></argument>)<pos:position pos:line="9" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="81"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name><name pos:line="10" pos:column="15">Comm<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">::<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">ConnectionPointer<pos:position pos:line="10" pos:column="38"/></name></name></type> <name pos:line="10" pos:column="39">c<pos:position pos:line="10" pos:column="40"/></name> <init pos:line="10" pos:column="41">= <expr><call><name pos:line="10" pos:column="43">getConn<pos:position pos:line="10" pos:column="50"/></name><argument_list pos:line="10" pos:column="50">()<pos:position pos:line="10" pos:column="52"/></argument_list></call><operator pos:line="10" pos:column="52">-&gt;<pos:position pos:line="10" pos:column="57"/></operator><name pos:line="10" pos:column="54">clientConnection<pos:position pos:line="10" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="71"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">Must<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><call><name><name pos:line="11" pos:column="14">Comm<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">::<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">IsConnOpen<pos:position pos:line="11" pos:column="30"/></name></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">c<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">c<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">close<pos:position pos:line="12" pos:column="17"/></name></name><argument_list pos:line="12" pos:column="17">()<pos:position pos:line="12" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt> <comment type="line" pos:line="12" pos:column="21">// drastic, but we may be writing a response already</comment>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <else pos:line="13" pos:column="7">else <block pos:line="13" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">handleAdaptationFailure<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">ERR_DETAIL_CLT_REQMOD_REQ_BODY<pos:position pos:line="14" pos:column="63"/></name></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></else></if>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
