<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1481.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">logfile_mod_stdio_rotate<pos:position pos:line="2" pos:column="25"/></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">Logfile<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="36">lf<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">S_ISREG<pos:position pos:line="4" pos:column="15"/></name></cpp:ifdef>

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">stat<pos:position pos:line="6" pos:column="16"/></name></name></type> <name pos:line="6" pos:column="17">sb<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">i<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name></type> <name><name pos:line="10" pos:column="10">from<pos:position pos:line="10" pos:column="14"/></name><index pos:line="10" pos:column="14">[<expr><name pos:line="10" pos:column="15">MAXPATHLEN<pos:position pos:line="10" pos:column="25"/></name></expr>]<pos:position pos:line="10" pos:column="26"/></index></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name></type> <name><name pos:line="11" pos:column="10">to<pos:position pos:line="11" pos:column="12"/></name><index pos:line="11" pos:column="12">[<expr><name pos:line="11" pos:column="13">MAXPATHLEN<pos:position pos:line="11" pos:column="23"/></name></expr>]<pos:position pos:line="11" pos:column="24"/></index></name></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">l_stdio_t<pos:position pos:line="12" pos:column="14"/></name> <modifier pos:line="12" pos:column="15">*<pos:position pos:line="12" pos:column="16"/></modifier></type><name pos:line="12" pos:column="16">ll<pos:position pos:line="12" pos:column="18"/></name> <init pos:line="12" pos:column="19">= <expr><operator pos:line="12" pos:column="21">(<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">l_stdio_t<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">*<pos:position pos:line="12" pos:column="33"/></operator><operator pos:line="12" pos:column="33">)<pos:position pos:line="12" pos:column="34"/></operator> <name><name pos:line="12" pos:column="35">lf<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">-&gt;<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="39">data<pos:position pos:line="12" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="12" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="13" pos:column="5">const<pos:position pos:line="13" pos:column="10"/></specifier> <name pos:line="13" pos:column="11">char<pos:position pos:line="13" pos:column="15"/></name> <modifier pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></modifier></type><name pos:line="13" pos:column="17">realpath<pos:position pos:line="13" pos:column="25"/></name> <init pos:line="13" pos:column="26">= <expr><name><name pos:line="13" pos:column="28">lf<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">-&gt;<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="32">path<pos:position pos:line="13" pos:column="36"/></name></name><operator pos:line="13" pos:column="36">+<pos:position pos:line="13" pos:column="37"/></operator><literal type="number" pos:line="13" pos:column="37">6<pos:position pos:line="13" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="39"/></decl_stmt> <comment type="line" pos:line="13" pos:column="40">// skip 'stdio:' prefix.</comment>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">assert<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><name pos:line="14" pos:column="12">realpath<pos:position pos:line="14" pos:column="20"/></name></expr></argument>)<pos:position pos:line="14" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt>

<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">S_ISREG<pos:position pos:line="16" pos:column="15"/></name></cpp:ifdef>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">stat<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><name pos:line="18" pos:column="14">realpath<pos:position pos:line="18" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="24">&amp;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="25">sb<pos:position pos:line="18" pos:column="27"/></name></expr></argument>)<pos:position pos:line="18" pos:column="28"/></argument_list></call> <operator pos:line="18" pos:column="29">==<pos:position pos:line="18" pos:column="31"/></operator> <literal type="number" pos:line="18" pos:column="32">0<pos:position pos:line="18" pos:column="33"/></literal></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34">
        <block type="pseudo"><if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">S_ISREG<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name><name pos:line="19" pos:column="21">sb<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">.<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">st_mode<pos:position pos:line="19" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call> <operator pos:line="19" pos:column="33">==<pos:position pos:line="19" pos:column="35"/></operator> <literal type="number" pos:line="19" pos:column="36">0<pos:position pos:line="19" pos:column="37"/></literal></expr>)<pos:position pos:line="19" pos:column="38"/></condition><then pos:line="19" pos:column="38">
            <block type="pseudo"><return pos:line="20" pos:column="13">return;<pos:position pos:line="20" pos:column="20"/></return></block></then></if></block></then></if>

<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">debugs<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><literal type="number" pos:line="24" pos:column="12">0<pos:position pos:line="24" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="15">DBG_IMPORTANT<pos:position pos:line="24" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="30">"Rotate log file "<pos:position pos:line="24" pos:column="48"/></literal> <operator pos:line="24" pos:column="49">&lt;&lt;<pos:position pos:line="24" pos:column="57"/></operator> <name><name pos:line="24" pos:column="52">lf<pos:position pos:line="24" pos:column="54"/></name><operator pos:line="24" pos:column="54">-&gt;<pos:position pos:line="24" pos:column="59"/></operator><name pos:line="24" pos:column="56">path<pos:position pos:line="24" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="62"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* Rotate numbers 0 through N up one */</comment>
    <for pos:line="27" pos:column="5">for <control pos:line="27" pos:column="9">(<init><expr><name pos:line="27" pos:column="10">i<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <name><name pos:line="27" pos:column="14">Config<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">.<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">Log<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">.<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="25">rotateNumber<pos:position pos:line="27" pos:column="37"/></name></name></expr>;<pos:position pos:line="27" pos:column="38"/></init> <condition><expr><name pos:line="27" pos:column="39">i<pos:position pos:line="27" pos:column="40"/></name> <operator pos:line="27" pos:column="41">&gt;<pos:position pos:line="27" pos:column="45"/></operator> <literal type="number" pos:line="27" pos:column="43">1<pos:position pos:line="27" pos:column="44"/></literal></expr>;<pos:position pos:line="27" pos:column="45"/></condition><incr/>)<pos:position pos:line="27" pos:column="46"/></control> <block pos:line="27" pos:column="47">{
        <expr_stmt><expr><operator pos:line="28" pos:column="9">--<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">i<pos:position pos:line="28" pos:column="12"/></name></expr>;<pos:position pos:line="28" pos:column="13"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">snprintf<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><name pos:line="29" pos:column="18">from<pos:position pos:line="29" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="24">MAXPATHLEN<pos:position pos:line="29" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="36">"%s.%d"<pos:position pos:line="29" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="45">realpath<pos:position pos:line="29" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="55">i<pos:position pos:line="29" pos:column="56"/></name> <operator pos:line="29" pos:column="57">-<pos:position pos:line="29" pos:column="58"/></operator> <literal type="number" pos:line="29" pos:column="59">1<pos:position pos:line="29" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">snprintf<pos:position pos:line="30" pos:column="17"/></name><argument_list pos:line="30" pos:column="17">(<argument><expr><name pos:line="30" pos:column="18">to<pos:position pos:line="30" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="22">MAXPATHLEN<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="34">"%s.%d"<pos:position pos:line="30" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="43">realpath<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="53">i<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">xrename<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">from<pos:position pos:line="31" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="23">to<pos:position pos:line="31" pos:column="25"/></name></expr></argument>)<pos:position pos:line="31" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></for>

    <comment type="block" pos:line="34" pos:column="5">/* Rotate the current log to .0 */</comment>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">logfileFlush<pos:position pos:line="35" pos:column="17"/></name><argument_list pos:line="35" pos:column="17">(<argument><expr><name pos:line="35" pos:column="18">lf<pos:position pos:line="35" pos:column="20"/></name></expr></argument>)<pos:position pos:line="35" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">file_close<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name><name pos:line="37" pos:column="16">ll<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">-&gt;<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="20">fd<pos:position pos:line="37" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>     <comment type="block" pos:line="37" pos:column="29">/* always close */</comment>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name><name pos:line="39" pos:column="9">Config<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">.<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="16">Log<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">.<pos:position pos:line="39" pos:column="20"/></operator><name pos:line="39" pos:column="20">rotateNumber<pos:position pos:line="39" pos:column="32"/></name></name> <operator pos:line="39" pos:column="33">&gt;<pos:position pos:line="39" pos:column="37"/></operator> <literal type="number" pos:line="39" pos:column="35">0<pos:position pos:line="39" pos:column="36"/></literal></expr>)<pos:position pos:line="39" pos:column="37"/></condition><then pos:line="39" pos:column="37"> <block pos:line="39" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">snprintf<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">(<argument><expr><name pos:line="40" pos:column="18">to<pos:position pos:line="40" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="22">MAXPATHLEN<pos:position pos:line="40" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="34">"%s.%d"<pos:position pos:line="40" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="43">realpath<pos:position pos:line="40" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="53">0<pos:position pos:line="40" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">xrename<pos:position pos:line="41" pos:column="16"/></name><argument_list pos:line="41" pos:column="16">(<argument><expr><name pos:line="41" pos:column="17">realpath<pos:position pos:line="41" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="27">to<pos:position pos:line="41" pos:column="29"/></name></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="43" pos:column="5">/* Reopen the log.  It may have been renamed "manually" */</comment>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">ll<pos:position pos:line="44" pos:column="7"/></name><operator pos:line="44" pos:column="7">-&gt;<pos:position pos:line="44" pos:column="12"/></operator><name pos:line="44" pos:column="9">fd<pos:position pos:line="44" pos:column="11"/></name></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <call><name pos:line="44" pos:column="14">file_open<pos:position pos:line="44" pos:column="23"/></name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">realpath<pos:position pos:line="44" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="34">O_WRONLY<pos:position pos:line="44" pos:column="42"/></name> <operator pos:line="44" pos:column="43">|<pos:position pos:line="44" pos:column="44"/></operator> <name pos:line="44" pos:column="45">O_CREAT<pos:position pos:line="44" pos:column="52"/></name> <operator pos:line="44" pos:column="53">|<pos:position pos:line="44" pos:column="54"/></operator> <name pos:line="44" pos:column="55">O_TEXT<pos:position pos:line="44" pos:column="61"/></name></expr></argument>)<pos:position pos:line="44" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="63"/></expr_stmt>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">DISK_ERROR<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">==<pos:position pos:line="46" pos:column="22"/></operator> <name><name pos:line="46" pos:column="23">ll<pos:position pos:line="46" pos:column="25"/></name><operator pos:line="46" pos:column="25">-&gt;<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="27">fd<pos:position pos:line="46" pos:column="29"/></name></name> <operator pos:line="46" pos:column="30">&amp;&amp;<pos:position pos:line="46" pos:column="40"/></operator> <name><name pos:line="46" pos:column="33">lf<pos:position pos:line="46" pos:column="35"/></name><operator pos:line="46" pos:column="35">-&gt;<pos:position pos:line="46" pos:column="40"/></operator><name pos:line="46" pos:column="37">flags<pos:position pos:line="46" pos:column="42"/></name><operator pos:line="46" pos:column="42">.<pos:position pos:line="46" pos:column="43"/></operator><name pos:line="46" pos:column="43">fatal<pos:position pos:line="46" pos:column="48"/></name></name></expr>)<pos:position pos:line="46" pos:column="49"/></condition><then pos:line="46" pos:column="49"> <block pos:line="46" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">debugs<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><literal type="number" pos:line="47" pos:column="16">50<pos:position pos:line="47" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="20">DBG_CRITICAL<pos:position pos:line="47" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="34">"ERROR: logfileRotate: "<pos:position pos:line="47" pos:column="58"/></literal> <operator pos:line="47" pos:column="59">&lt;&lt;<pos:position pos:line="47" pos:column="67"/></operator> <name><name pos:line="47" pos:column="62">lf<pos:position pos:line="47" pos:column="64"/></name><operator pos:line="47" pos:column="64">-&gt;<pos:position pos:line="47" pos:column="69"/></operator><name pos:line="47" pos:column="66">path<pos:position pos:line="47" pos:column="70"/></name></name> <operator pos:line="47" pos:column="71">&lt;&lt;<pos:position pos:line="47" pos:column="79"/></operator> <literal type="string" pos:line="47" pos:column="74">": "<pos:position pos:line="47" pos:column="78"/></literal> <operator pos:line="47" pos:column="79">&lt;&lt;<pos:position pos:line="47" pos:column="87"/></operator> <call><name pos:line="47" pos:column="82">xstrerror<pos:position pos:line="47" pos:column="91"/></name><argument_list pos:line="47" pos:column="91">()<pos:position pos:line="47" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="95"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">fatalf<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><literal type="string" pos:line="48" pos:column="16">"Cannot open %s: %s"<pos:position pos:line="48" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="38">lf<pos:position pos:line="48" pos:column="40"/></name><operator pos:line="48" pos:column="40">-&gt;<pos:position pos:line="48" pos:column="45"/></operator><name pos:line="48" pos:column="42">path<pos:position pos:line="48" pos:column="46"/></name></name></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="48">xstrerror<pos:position pos:line="48" pos:column="57"/></name><argument_list pos:line="48" pos:column="57">()<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
