<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4343_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACL<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">ParseAclLine<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">ConfigParser<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">&amp;<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="33">parser<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">ACL<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier><modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type> <name pos:line="2" pos:column="48">head<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* we're already using strtok() to grok the line */</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">t<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name pos:line="5" pos:column="15">NULL<pos:position pos:line="5" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">ACL<pos:position pos:line="6" pos:column="8"/></name> <modifier pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></modifier></type><name pos:line="6" pos:column="10">A<pos:position pos:line="6" pos:column="11"/></name> <init pos:line="6" pos:column="12">= <expr><name pos:line="6" pos:column="14">NULL<pos:position pos:line="6" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">LOCAL_ARRAY<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">char<pos:position pos:line="7" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">aclname<pos:position pos:line="7" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="32">ACL_NAME_SZ<pos:position pos:line="7" pos:column="43"/></name></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">new_acl<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* snarf the ACL name */</comment>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">t<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">strtok<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">NULL<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="27">w_space<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call><operator pos:line="12" pos:column="35">)<pos:position pos:line="12" pos:column="36"/></operator> <operator pos:line="12" pos:column="37">==<pos:position pos:line="12" pos:column="39"/></operator> <name pos:line="12" pos:column="40">NULL<pos:position pos:line="12" pos:column="44"/></name></expr>)<pos:position pos:line="12" pos:column="45"/></condition><then pos:line="12" pos:column="45"> <block pos:line="12" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">28<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="20">0<pos:position pos:line="13" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="23">"aclParseAclLine: missing ACL name."<pos:position pos:line="13" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="14" pos:column="9">parser<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">.<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">destruct<pos:position pos:line="14" pos:column="24"/></name></name><argument_list pos:line="14" pos:column="24">()<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">strlen<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">t<pos:position pos:line="18" pos:column="17"/></name></expr></argument>)<pos:position pos:line="18" pos:column="18"/></argument_list></call> <operator pos:line="18" pos:column="19">&gt;=<pos:position pos:line="18" pos:column="24"/></operator> <name pos:line="18" pos:column="22">ACL_NAME_SZ<pos:position pos:line="18" pos:column="33"/></name></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34"> <block pos:line="18" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">28<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="23">"aclParseAclLine: aclParseAclLine: ACL name '"<pos:position pos:line="19" pos:column="69"/></literal> <operator pos:line="19" pos:column="70">&lt;&lt;<pos:position pos:line="19" pos:column="78"/></operator> <name pos:line="19" pos:column="73">t<pos:position pos:line="19" pos:column="74"/></name> <operator pos:line="19" pos:column="75">&lt;&lt;<pos:position pos:line="19" pos:column="83"/></operator>
               <literal type="string" pos:line="20" pos:column="16">"' too long, max "<pos:position pos:line="20" pos:column="34"/></literal> <operator pos:line="20" pos:column="35">&lt;&lt;<pos:position pos:line="20" pos:column="43"/></operator> <name pos:line="20" pos:column="38">ACL_NAME_SZ<pos:position pos:line="20" pos:column="49"/></name> <operator pos:line="20" pos:column="50">-<pos:position pos:line="20" pos:column="51"/></operator> <literal type="number" pos:line="20" pos:column="52">1<pos:position pos:line="20" pos:column="53"/></literal> <operator pos:line="20" pos:column="54">&lt;&lt;<pos:position pos:line="20" pos:column="62"/></operator> <literal type="string" pos:line="20" pos:column="57">" characters supported"<pos:position pos:line="20" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="82"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">parser<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">.<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">destruct<pos:position pos:line="21" pos:column="24"/></name></name><argument_list pos:line="21" pos:column="24">()<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
        <return pos:line="22" pos:column="9">return;<pos:position pos:line="22" pos:column="16"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">xstrncpy<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">aclname<pos:position pos:line="25" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="23">t<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="26">ACL_NAME_SZ<pos:position pos:line="25" pos:column="37"/></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
    <comment type="block" pos:line="26" pos:column="5">/* snarf the ACL type */</comment>
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">char<pos:position pos:line="27" pos:column="9"/></name> <modifier pos:line="27" pos:column="10">*<pos:position pos:line="27" pos:column="11"/></modifier></type><name pos:line="27" pos:column="11">theType<pos:position pos:line="27" pos:column="18"/></name></decl>;<pos:position pos:line="27" pos:column="19"/></decl_stmt>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">theType<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">=<pos:position pos:line="29" pos:column="19"/></operator> <call><name pos:line="29" pos:column="20">strtok<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">NULL<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="33">w_space<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call><operator pos:line="29" pos:column="41">)<pos:position pos:line="29" pos:column="42"/></operator> <operator pos:line="29" pos:column="43">==<pos:position pos:line="29" pos:column="45"/></operator> <name pos:line="29" pos:column="46">NULL<pos:position pos:line="29" pos:column="50"/></name></expr>)<pos:position pos:line="29" pos:column="51"/></condition><then pos:line="29" pos:column="51"> <block pos:line="29" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">28<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">0<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="23">"aclParseAclLine: missing ACL type."<pos:position pos:line="30" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="31" pos:column="9">parser<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">.<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">destruct<pos:position pos:line="31" pos:column="24"/></name></name><argument_list pos:line="31" pos:column="24">()<pos:position pos:line="31" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>
        <return pos:line="32" pos:column="9">return;<pos:position pos:line="32" pos:column="16"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><operator pos:line="35" pos:column="9">!<pos:position pos:line="35" pos:column="10"/></operator><call><name><name pos:line="35" pos:column="10">Prototype<pos:position pos:line="35" pos:column="19"/></name><operator pos:line="35" pos:column="19">::<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="21">Registered<pos:position pos:line="35" pos:column="31"/></name></name> <argument_list pos:line="35" pos:column="32">(<argument><expr><name pos:line="35" pos:column="33">theType<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="42"/></condition><then pos:line="35" pos:column="42"> <block pos:line="35" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">debugs<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><literal type="number" pos:line="36" pos:column="16">28<pos:position pos:line="36" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="20">0<pos:position pos:line="36" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="23">"aclParseAclLine: Invalid ACL type '"<pos:position pos:line="36" pos:column="60"/></literal> <operator pos:line="36" pos:column="61">&lt;&lt;<pos:position pos:line="36" pos:column="69"/></operator> <name pos:line="36" pos:column="64">theType<pos:position pos:line="36" pos:column="71"/></name> <operator pos:line="36" pos:column="72">&lt;&lt;<pos:position pos:line="36" pos:column="80"/></operator> <literal type="string" pos:line="36" pos:column="75">"'"<pos:position pos:line="36" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="37" pos:column="9">parser<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">.<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">destruct<pos:position pos:line="37" pos:column="24"/></name></name><argument_list pos:line="37" pos:column="24">()<pos:position pos:line="37" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="27"/></expr_stmt>
        <return pos:line="38" pos:column="9">return;<pos:position pos:line="38" pos:column="16"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="41" pos:column="5">// Is this ACL going to work?</comment>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><call><name pos:line="42" pos:column="9">strcmp<pos:position pos:line="42" pos:column="15"/></name><argument_list pos:line="42" pos:column="15">(<argument><expr><name pos:line="42" pos:column="16">theType<pos:position pos:line="42" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="25">"myip"<pos:position pos:line="42" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call> <operator pos:line="42" pos:column="33">==<pos:position pos:line="42" pos:column="35"/></operator> <literal type="number" pos:line="42" pos:column="36">0<pos:position pos:line="42" pos:column="37"/></literal></expr>)<pos:position pos:line="42" pos:column="38"/></condition><then pos:line="42" pos:column="38"> <block pos:line="42" pos:column="39">{
        <decl_stmt><decl><type><name pos:line="43" pos:column="9">http_port_list<pos:position pos:line="43" pos:column="23"/></name> <modifier pos:line="43" pos:column="24">*<pos:position pos:line="43" pos:column="25"/></modifier></type><name pos:line="43" pos:column="25">p<pos:position pos:line="43" pos:column="26"/></name> <init pos:line="43" pos:column="27">= <expr><name><name pos:line="43" pos:column="29">Config<pos:position pos:line="43" pos:column="35"/></name><operator pos:line="43" pos:column="35">.<pos:position pos:line="43" pos:column="36"/></operator><name pos:line="43" pos:column="36">Sockaddr<pos:position pos:line="43" pos:column="44"/></name><operator pos:line="43" pos:column="44">.<pos:position pos:line="43" pos:column="45"/></operator><name pos:line="43" pos:column="45">http<pos:position pos:line="43" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="43" pos:column="50"/></decl_stmt>
        <while pos:line="44" pos:column="9">while <condition pos:line="44" pos:column="15">(<expr><name pos:line="44" pos:column="16">p<pos:position pos:line="44" pos:column="17"/></name></expr>)<pos:position pos:line="44" pos:column="18"/></condition> <block pos:line="44" pos:column="19">{
            <comment type="line" pos:line="45" pos:column="13">// Bug 3239: not reliable when there is interception traffic coming</comment>
            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><name><name pos:line="46" pos:column="17">p<pos:position pos:line="46" pos:column="18"/></name><operator pos:line="46" pos:column="18">-&gt;<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="20">intercepted<pos:position pos:line="46" pos:column="31"/></name></name></expr>)<pos:position pos:line="46" pos:column="32"/></condition><then pos:line="46" pos:column="32">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">debugs<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">(<argument><expr><literal type="number" pos:line="47" pos:column="24">28<pos:position pos:line="47" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="28">DBG_CRITICAL<pos:position pos:line="47" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="42">"WARNING: 'myip' ACL is not reliable for interception proxies. Please use 'myportname' instead."<pos:position pos:line="47" pos:column="138"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="139"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="140"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="48" pos:column="13">p<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">=<pos:position pos:line="48" pos:column="16"/></operator> <name><name pos:line="48" pos:column="17">p<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">-&gt;<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="20">next<pos:position pos:line="48" pos:column="24"/></name></name></expr>;<pos:position pos:line="48" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="49" pos:column="10"/></block></while>
    }<pos:position pos:line="50" pos:column="6"/></block></then> <elseif pos:line="50" pos:column="7">else <if pos:line="50" pos:column="12">if <condition pos:line="50" pos:column="15">(<expr><call><name pos:line="50" pos:column="16">strcmp<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><name pos:line="50" pos:column="23">theType<pos:position pos:line="50" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="32">"myport"<pos:position pos:line="50" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="41"/></argument_list></call> <operator pos:line="50" pos:column="42">==<pos:position pos:line="50" pos:column="44"/></operator> <literal type="number" pos:line="50" pos:column="45">0<pos:position pos:line="50" pos:column="46"/></literal></expr>)<pos:position pos:line="50" pos:column="47"/></condition><then pos:line="50" pos:column="47"> <block pos:line="50" pos:column="48">{
        <decl_stmt><decl><type><name pos:line="51" pos:column="9">http_port_list<pos:position pos:line="51" pos:column="23"/></name> <modifier pos:line="51" pos:column="24">*<pos:position pos:line="51" pos:column="25"/></modifier></type><name pos:line="51" pos:column="25">p<pos:position pos:line="51" pos:column="26"/></name> <init pos:line="51" pos:column="27">= <expr><name><name pos:line="51" pos:column="29">Config<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">.<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="36">Sockaddr<pos:position pos:line="51" pos:column="44"/></name><operator pos:line="51" pos:column="44">.<pos:position pos:line="51" pos:column="45"/></operator><name pos:line="51" pos:column="45">http<pos:position pos:line="51" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="51" pos:column="50"/></decl_stmt>
        <while pos:line="52" pos:column="9">while <condition pos:line="52" pos:column="15">(<expr><name pos:line="52" pos:column="16">p<pos:position pos:line="52" pos:column="17"/></name></expr>)<pos:position pos:line="52" pos:column="18"/></condition> <block pos:line="52" pos:column="19">{
            <comment type="line" pos:line="53" pos:column="13">// Bug 3239: not reliable when there is interception traffic coming</comment>
            <comment type="line" pos:line="54" pos:column="13">// Bug 3239: myport - not reliable (yet) when there is interception traffic coming</comment>
            <if pos:line="55" pos:column="13">if <condition pos:line="55" pos:column="16">(<expr><name><name pos:line="55" pos:column="17">p<pos:position pos:line="55" pos:column="18"/></name><operator pos:line="55" pos:column="18">-&gt;<pos:position pos:line="55" pos:column="23"/></operator><name pos:line="55" pos:column="20">intercepted<pos:position pos:line="55" pos:column="31"/></name></name></expr>)<pos:position pos:line="55" pos:column="32"/></condition><then pos:line="55" pos:column="32">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="17">debugs<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><literal type="number" pos:line="56" pos:column="24">28<pos:position pos:line="56" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="28">DBG_CRITICAL<pos:position pos:line="56" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="42">"WARNING: 'myport' ACL is not reliable for interception proxies. Please use 'myportname' instead."<pos:position pos:line="56" pos:column="140"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="141"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="142"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="57" pos:column="13">p<pos:position pos:line="57" pos:column="14"/></name> <operator pos:line="57" pos:column="15">=<pos:position pos:line="57" pos:column="16"/></operator> <name><name pos:line="57" pos:column="17">p<pos:position pos:line="57" pos:column="18"/></name><operator pos:line="57" pos:column="18">-&gt;<pos:position pos:line="57" pos:column="23"/></operator><name pos:line="57" pos:column="20">next<pos:position pos:line="57" pos:column="24"/></name></name></expr>;<pos:position pos:line="57" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></while>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><operator pos:line="61" pos:column="9">(<pos:position pos:line="61" pos:column="10"/></operator><name pos:line="61" pos:column="10">A<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <call><name pos:line="61" pos:column="14">FindByName<pos:position pos:line="61" pos:column="24"/></name><argument_list pos:line="61" pos:column="24">(<argument><expr><name pos:line="61" pos:column="25">aclname<pos:position pos:line="61" pos:column="32"/></name></expr></argument>)<pos:position pos:line="61" pos:column="33"/></argument_list></call><operator pos:line="61" pos:column="33">)<pos:position pos:line="61" pos:column="34"/></operator> <operator pos:line="61" pos:column="35">==<pos:position pos:line="61" pos:column="37"/></operator> <name pos:line="61" pos:column="38">NULL<pos:position pos:line="61" pos:column="42"/></name></expr>)<pos:position pos:line="61" pos:column="43"/></condition><then pos:line="61" pos:column="43"> <block pos:line="61" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">debugs<pos:position pos:line="62" pos:column="15"/></name><argument_list pos:line="62" pos:column="15">(<argument><expr><literal type="number" pos:line="62" pos:column="16">28<pos:position pos:line="62" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="20">3<pos:position pos:line="62" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="23">"aclParseAclLine: Creating ACL '"<pos:position pos:line="62" pos:column="56"/></literal> <operator pos:line="62" pos:column="57">&lt;&lt;<pos:position pos:line="62" pos:column="65"/></operator> <name pos:line="62" pos:column="60">aclname<pos:position pos:line="62" pos:column="67"/></name> <operator pos:line="62" pos:column="68">&lt;&lt;<pos:position pos:line="62" pos:column="76"/></operator> <literal type="string" pos:line="62" pos:column="71">"'"<pos:position pos:line="62" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><name pos:line="63" pos:column="9">A<pos:position pos:line="63" pos:column="10"/></name> <operator pos:line="63" pos:column="11">=<pos:position pos:line="63" pos:column="12"/></operator> <call><name><name pos:line="63" pos:column="13">ACL<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">::<pos:position pos:line="63" pos:column="18"/></operator><name pos:line="63" pos:column="18">Factory<pos:position pos:line="63" pos:column="25"/></name></name><argument_list pos:line="63" pos:column="25">(<argument><expr><name pos:line="63" pos:column="26">theType<pos:position pos:line="63" pos:column="33"/></name></expr></argument>)<pos:position pos:line="63" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">xstrncpy<pos:position pos:line="64" pos:column="17"/></name><argument_list pos:line="64" pos:column="17">(<argument><expr><name><name pos:line="64" pos:column="18">A<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">-&gt;<pos:position pos:line="64" pos:column="24"/></operator><name pos:line="64" pos:column="21">name<pos:position pos:line="64" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="27">aclname<pos:position pos:line="64" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="36">ACL_NAME_SZ<pos:position pos:line="64" pos:column="47"/></name></expr></argument>)<pos:position pos:line="64" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="65" pos:column="9">A<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">-&gt;<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="12">cfgline<pos:position pos:line="65" pos:column="19"/></name></name> <operator pos:line="65" pos:column="20">=<pos:position pos:line="65" pos:column="21"/></operator> <call><name pos:line="65" pos:column="22">xstrdup<pos:position pos:line="65" pos:column="29"/></name><argument_list pos:line="65" pos:column="29">(<argument><expr><name pos:line="65" pos:column="30">config_input_line<pos:position pos:line="65" pos:column="47"/></name></expr></argument>)<pos:position pos:line="65" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name pos:line="66" pos:column="9">new_acl<pos:position pos:line="66" pos:column="16"/></name> <operator pos:line="66" pos:column="17">=<pos:position pos:line="66" pos:column="18"/></operator> <literal type="number" pos:line="66" pos:column="19">1<pos:position pos:line="66" pos:column="20"/></literal></expr>;<pos:position pos:line="66" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></then> <else pos:line="67" pos:column="7">else <block pos:line="67" pos:column="12">{
        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><call><name pos:line="68" pos:column="13">strcmp<pos:position pos:line="68" pos:column="19"/></name> <argument_list pos:line="68" pos:column="20">(<argument><expr><call><name><name pos:line="68" pos:column="21">A<pos:position pos:line="68" pos:column="22"/></name><operator pos:line="68" pos:column="22">-&gt;<pos:position pos:line="68" pos:column="27"/></operator><name pos:line="68" pos:column="24">typeString<pos:position pos:line="68" pos:column="34"/></name></name><argument_list pos:line="68" pos:column="34">()<pos:position pos:line="68" pos:column="36"/></argument_list></call></expr></argument>,<argument><expr><name pos:line="68" pos:column="37">theType<pos:position pos:line="68" pos:column="44"/></name></expr></argument>)<pos:position pos:line="68" pos:column="45"/></argument_list></call></expr> )<pos:position pos:line="68" pos:column="47"/></condition><then pos:line="68" pos:column="47"> <block pos:line="68" pos:column="48">{
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">debugs<pos:position pos:line="69" pos:column="19"/></name><argument_list pos:line="69" pos:column="19">(<argument><expr><literal type="number" pos:line="69" pos:column="20">28<pos:position pos:line="69" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="24">0<pos:position pos:line="69" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="27">"aclParseAclLine: ACL '"<pos:position pos:line="69" pos:column="51"/></literal> <operator pos:line="69" pos:column="52">&lt;&lt;<pos:position pos:line="69" pos:column="60"/></operator> <name><name pos:line="69" pos:column="55">A<pos:position pos:line="69" pos:column="56"/></name><operator pos:line="69" pos:column="56">-&gt;<pos:position pos:line="69" pos:column="61"/></operator><name pos:line="69" pos:column="58">name<pos:position pos:line="69" pos:column="62"/></name></name> <operator pos:line="69" pos:column="63">&lt;&lt;<pos:position pos:line="69" pos:column="71"/></operator> <literal type="string" pos:line="69" pos:column="66">"' already exists with different type."<pos:position pos:line="69" pos:column="105"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="107"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">parser<pos:position pos:line="70" pos:column="19"/></name><operator pos:line="70" pos:column="19">.<pos:position pos:line="70" pos:column="20"/></operator><name pos:line="70" pos:column="20">destruct<pos:position pos:line="70" pos:column="28"/></name></name><argument_list pos:line="70" pos:column="28">()<pos:position pos:line="70" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="31"/></expr_stmt>
            <return pos:line="71" pos:column="13">return;<pos:position pos:line="71" pos:column="20"/></return>
        }<pos:position pos:line="72" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="74" pos:column="9">debugs<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><literal type="number" pos:line="74" pos:column="16">28<pos:position pos:line="74" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="20">3<pos:position pos:line="74" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="23">"aclParseAclLine: Appending to '"<pos:position pos:line="74" pos:column="56"/></literal> <operator pos:line="74" pos:column="57">&lt;&lt;<pos:position pos:line="74" pos:column="65"/></operator> <name pos:line="74" pos:column="60">aclname<pos:position pos:line="74" pos:column="67"/></name> <operator pos:line="74" pos:column="68">&lt;&lt;<pos:position pos:line="74" pos:column="76"/></operator> <literal type="string" pos:line="74" pos:column="71">"'"<pos:position pos:line="74" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><name pos:line="75" pos:column="9">new_acl<pos:position pos:line="75" pos:column="16"/></name> <operator pos:line="75" pos:column="17">=<pos:position pos:line="75" pos:column="18"/></operator> <literal type="number" pos:line="75" pos:column="19">0<pos:position pos:line="75" pos:column="20"/></literal></expr>;<pos:position pos:line="75" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="76" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="78" pos:column="5">/*
     * Here we set AclMatchedName in case we need to use it in a
     * warning message in aclDomainCompare().
     */</comment>
    <expr_stmt><expr><name pos:line="82" pos:column="5">AclMatchedName<pos:position pos:line="82" pos:column="19"/></name> <operator pos:line="82" pos:column="20">=<pos:position pos:line="82" pos:column="21"/></operator> <name><name pos:line="82" pos:column="22">A<pos:position pos:line="82" pos:column="23"/></name><operator pos:line="82" pos:column="23">-&gt;<pos:position pos:line="82" pos:column="28"/></operator><name pos:line="82" pos:column="25">name<pos:position pos:line="82" pos:column="29"/></name></name></expr>;<pos:position pos:line="82" pos:column="30"/></expr_stmt>	<comment type="block" pos:line="82" pos:column="33">/* ugly */</comment>

    <comment type="block" pos:line="84" pos:column="5">/*split the function here */</comment>
    <expr_stmt><expr><call><name><name pos:line="85" pos:column="5">A<pos:position pos:line="85" pos:column="6"/></name><operator pos:line="85" pos:column="6">-&gt;<pos:position pos:line="85" pos:column="11"/></operator><name pos:line="85" pos:column="8">parse<pos:position pos:line="85" pos:column="13"/></name></name><argument_list pos:line="85" pos:column="13">()<pos:position pos:line="85" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="16"/></expr_stmt>

    <comment type="block" pos:line="87" pos:column="5">/*
     * Clear AclMatchedName from our temporary hack
     */</comment>
    <expr_stmt><expr><name pos:line="90" pos:column="5">AclMatchedName<pos:position pos:line="90" pos:column="19"/></name> <operator pos:line="90" pos:column="20">=<pos:position pos:line="90" pos:column="21"/></operator> <name pos:line="90" pos:column="22">NULL<pos:position pos:line="90" pos:column="26"/></name></expr>;<pos:position pos:line="90" pos:column="27"/></expr_stmt>	<comment type="block" pos:line="90" pos:column="33">/* ugly */</comment>

    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><operator pos:line="92" pos:column="9">!<pos:position pos:line="92" pos:column="10"/></operator><name pos:line="92" pos:column="10">new_acl<pos:position pos:line="92" pos:column="17"/></name></expr>)<pos:position pos:line="92" pos:column="18"/></condition><then pos:line="92" pos:column="18">
        <block type="pseudo"><return pos:line="93" pos:column="9">return;<pos:position pos:line="93" pos:column="16"/></return></block></then></if>

    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><call><name><name pos:line="95" pos:column="9">A<pos:position pos:line="95" pos:column="10"/></name><operator pos:line="95" pos:column="10">-&gt;<pos:position pos:line="95" pos:column="15"/></operator><name pos:line="95" pos:column="12">empty<pos:position pos:line="95" pos:column="17"/></name></name><argument_list pos:line="95" pos:column="17">()<pos:position pos:line="95" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="95" pos:column="20"/></condition><then pos:line="95" pos:column="20"> <block pos:line="95" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">debugs<pos:position pos:line="96" pos:column="15"/></name><argument_list pos:line="96" pos:column="15">(<argument><expr><literal type="number" pos:line="96" pos:column="16">28<pos:position pos:line="96" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="96" pos:column="20">0<pos:position pos:line="96" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="23">"Warning: empty ACL: "<pos:position pos:line="96" pos:column="45"/></literal> <operator pos:line="96" pos:column="46">&lt;&lt;<pos:position pos:line="96" pos:column="54"/></operator> <name><name pos:line="96" pos:column="49">A<pos:position pos:line="96" pos:column="50"/></name><operator pos:line="96" pos:column="50">-&gt;<pos:position pos:line="96" pos:column="55"/></operator><name pos:line="96" pos:column="52">cfgline<pos:position pos:line="96" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if>

    <if pos:line="99" pos:column="5">if <condition pos:line="99" pos:column="8">(<expr><operator pos:line="99" pos:column="9">!<pos:position pos:line="99" pos:column="10"/></operator><call><name><name pos:line="99" pos:column="10">A<pos:position pos:line="99" pos:column="11"/></name><operator pos:line="99" pos:column="11">-&gt;<pos:position pos:line="99" pos:column="16"/></operator><name pos:line="99" pos:column="13">valid<pos:position pos:line="99" pos:column="18"/></name></name><argument_list pos:line="99" pos:column="18">()<pos:position pos:line="99" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="21"/></condition><then pos:line="99" pos:column="21"> <block pos:line="99" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="100" pos:column="9">fatalf<pos:position pos:line="100" pos:column="15"/></name><argument_list pos:line="100" pos:column="15">(<argument><expr><literal type="string" pos:line="100" pos:column="16">"ERROR: Invalid ACL: %s\n"<pos:position pos:line="100" pos:column="42"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="101" pos:column="16">A<pos:position pos:line="101" pos:column="17"/></name><operator pos:line="101" pos:column="17">-&gt;<pos:position pos:line="101" pos:column="22"/></operator><name pos:line="101" pos:column="19">cfgline<pos:position pos:line="101" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="104" pos:column="5">/* append */</comment>
    <while pos:line="105" pos:column="5">while <condition pos:line="105" pos:column="11">(<expr><operator pos:line="105" pos:column="12">*<pos:position pos:line="105" pos:column="13"/></operator><name pos:line="105" pos:column="13">head<pos:position pos:line="105" pos:column="17"/></name></expr>)<pos:position pos:line="105" pos:column="18"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="106" pos:column="9">head<pos:position pos:line="106" pos:column="13"/></name> <operator pos:line="106" pos:column="14">=<pos:position pos:line="106" pos:column="15"/></operator> <operator pos:line="106" pos:column="16">&amp;<pos:position pos:line="106" pos:column="21"/></operator><name><operator pos:line="106" pos:column="17">(<pos:position pos:line="106" pos:column="18"/></operator><operator pos:line="106" pos:column="18">*<pos:position pos:line="106" pos:column="19"/></operator><name pos:line="106" pos:column="19">head<pos:position pos:line="106" pos:column="23"/></name><operator pos:line="106" pos:column="23">)<pos:position pos:line="106" pos:column="24"/></operator><operator pos:line="106" pos:column="24">-&gt;<pos:position pos:line="106" pos:column="29"/></operator><name pos:line="106" pos:column="26">next<pos:position pos:line="106" pos:column="30"/></name></name></expr>;<pos:position pos:line="106" pos:column="31"/></expr_stmt></block></while>

    <expr_stmt><expr><operator pos:line="108" pos:column="5">*<pos:position pos:line="108" pos:column="6"/></operator><name pos:line="108" pos:column="6">head<pos:position pos:line="108" pos:column="10"/></name> <operator pos:line="108" pos:column="11">=<pos:position pos:line="108" pos:column="12"/></operator> <name pos:line="108" pos:column="13">A<pos:position pos:line="108" pos:column="14"/></name></expr>;<pos:position pos:line="108" pos:column="15"/></expr_stmt>
}<pos:position pos:line="109" pos:column="2"/></block></function></unit>
