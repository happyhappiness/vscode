<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3029_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">concurrentRequestQueueFilled<pos:position pos:line="2" pos:column="44"/></name></name><parameter_list pos:line="2" pos:column="44">()<pos:position pos:line="2" pos:column="46"/></parameter_list> <specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">int<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">existingRequestCount<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><call><name><name pos:line="4" pos:column="38">pipeline<pos:position pos:line="4" pos:column="46"/></name><operator pos:line="4" pos:column="46">.<pos:position pos:line="4" pos:column="47"/></operator><name pos:line="4" pos:column="47">count<pos:position pos:line="4" pos:column="52"/></name></name><argument_list pos:line="4" pos:column="52">()<pos:position pos:line="4" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="55"/></decl_stmt>

    <comment type="line" pos:line="6" pos:column="5">// default to the configured pipeline size.</comment>
    <comment type="line" pos:line="7" pos:column="5">// add 1 because the head of pipeline is counted in concurrent requests and not prefetch queue</comment>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">USE_OPENSSL<pos:position pos:line="8" pos:column="16"/></name></expr></cpp:if>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">int<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">internalRequest<pos:position pos:line="9" pos:column="30"/></name> <init pos:line="9" pos:column="31">= <expr><ternary><condition><expr><operator pos:line="9" pos:column="33">(<pos:position pos:line="9" pos:column="34"/></operator><call><name pos:line="9" pos:column="34">transparent<pos:position pos:line="9" pos:column="45"/></name><argument_list pos:line="9" pos:column="45">()<pos:position pos:line="9" pos:column="47"/></argument_list></call> <operator pos:line="9" pos:column="48">&amp;&amp;<pos:position pos:line="9" pos:column="58"/></operator> <name pos:line="9" pos:column="51">sslBumpMode<pos:position pos:line="9" pos:column="62"/></name> <operator pos:line="9" pos:column="63">==<pos:position pos:line="9" pos:column="65"/></operator> <name><name pos:line="9" pos:column="66">Ssl<pos:position pos:line="9" pos:column="69"/></name><operator pos:line="9" pos:column="69">::<pos:position pos:line="9" pos:column="71"/></operator><name pos:line="9" pos:column="71">bumpSplice<pos:position pos:line="9" pos:column="81"/></name></name><operator pos:line="9" pos:column="81">)<pos:position pos:line="9" pos:column="82"/></operator></expr> ?<pos:position pos:line="9" pos:column="84"/></condition><then pos:line="9" pos:column="84"> <expr><literal type="number" pos:line="9" pos:column="85">1<pos:position pos:line="9" pos:column="86"/></literal></expr> <pos:position pos:line="9" pos:column="87"/></then><else pos:line="9" pos:column="87">: <expr><literal type="number" pos:line="9" pos:column="89">0<pos:position pos:line="9" pos:column="90"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="9" pos:column="91"/></decl_stmt>
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">int<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">internalRequest<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><literal type="number" pos:line="11" pos:column="33">0<pos:position pos:line="11" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="35"/></decl_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><specifier pos:line="13" pos:column="5">const<pos:position pos:line="13" pos:column="10"/></specifier> <name pos:line="13" pos:column="11">int<pos:position pos:line="13" pos:column="14"/></name></type> <name pos:line="13" pos:column="15">concurrentRequestLimit<pos:position pos:line="13" pos:column="37"/></name> <init pos:line="13" pos:column="38">= <expr><call><name pos:line="13" pos:column="40">pipelinePrefetchMax<pos:position pos:line="13" pos:column="59"/></name><argument_list pos:line="13" pos:column="59">()<pos:position pos:line="13" pos:column="61"/></argument_list></call> <operator pos:line="13" pos:column="62">+<pos:position pos:line="13" pos:column="63"/></operator> <literal type="number" pos:line="13" pos:column="64">1<pos:position pos:line="13" pos:column="65"/></literal> <operator pos:line="13" pos:column="66">+<pos:position pos:line="13" pos:column="67"/></operator> <name pos:line="13" pos:column="68">internalRequest<pos:position pos:line="13" pos:column="83"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="84"/></decl_stmt>

    <comment type="line" pos:line="15" pos:column="5">// when queue filled already we cant add more.</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">existingRequestCount<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">&gt;=<pos:position pos:line="16" pos:column="35"/></operator> <name pos:line="16" pos:column="33">concurrentRequestLimit<pos:position pos:line="16" pos:column="55"/></name></expr>)<pos:position pos:line="16" pos:column="56"/></condition><then pos:line="16" pos:column="56"> <block pos:line="16" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">33<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="20">3<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">clientConnection<pos:position pos:line="17" pos:column="39"/></name> <operator pos:line="17" pos:column="40">&lt;&lt;<pos:position pos:line="17" pos:column="48"/></operator> <literal type="string" pos:line="17" pos:column="43">" max concurrent requests reached ("<pos:position pos:line="17" pos:column="79"/></literal> <operator pos:line="17" pos:column="80">&lt;&lt;<pos:position pos:line="17" pos:column="88"/></operator> <name pos:line="17" pos:column="83">concurrentRequestLimit<pos:position pos:line="17" pos:column="105"/></name> <operator pos:line="17" pos:column="106">&lt;&lt;<pos:position pos:line="17" pos:column="114"/></operator> <literal type="string" pos:line="17" pos:column="109">")"<pos:position pos:line="17" pos:column="112"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="114"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">33<pos:position pos:line="18" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="20">5<pos:position pos:line="18" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="23">clientConnection<pos:position pos:line="18" pos:column="39"/></name> <operator pos:line="18" pos:column="40">&lt;&lt;<pos:position pos:line="18" pos:column="48"/></operator> <literal type="string" pos:line="18" pos:column="43">" deferring new request until one is done"<pos:position pos:line="18" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="87"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><literal type="boolean" pos:line="19" pos:column="16">true<pos:position pos:line="19" pos:column="20"/></literal></expr>;<pos:position pos:line="19" pos:column="21"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <return pos:line="22" pos:column="5">return <expr><literal type="boolean" pos:line="22" pos:column="12">false<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
