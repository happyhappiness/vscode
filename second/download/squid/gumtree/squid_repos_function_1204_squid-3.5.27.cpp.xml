<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1204_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">parse_CpuAffinityMap<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">CpuAffinityMap<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier><modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier></type> <name pos:line="2" pos:column="45">cpuAffinityMap<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><operator pos:line="4" pos:column="5">!<pos:position pos:line="4" pos:column="6"/></operator><name pos:line="4" pos:column="6">HAVE_CPU_AFFINITY<pos:position pos:line="4" pos:column="23"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">3<pos:position pos:line="5" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="15">DBG_CRITICAL<pos:position pos:line="5" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="29">"FATAL: Squid built with no CPU affinity "<pos:position pos:line="5" pos:column="71"/></literal> <operator pos:line="5" pos:column="72">&lt;&lt;<pos:position pos:line="5" pos:column="80"/></operator>
           <literal type="string" pos:line="6" pos:column="12">"support, do not set 'cpu_affinity_map'"<pos:position pos:line="6" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">self_destruct<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">()<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="8" pos:column="8">/* HAVE_CPU_AFFINITY */</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><operator pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">cpuAffinityMap<pos:position pos:line="10" pos:column="25"/></name></expr>)<pos:position pos:line="10" pos:column="26"/></condition><then pos:line="10" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">cpuAffinityMap<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <operator pos:line="11" pos:column="27">new<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">CpuAffinityMap<pos:position pos:line="11" pos:column="45"/></name></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="13" pos:column="5">const<pos:position pos:line="13" pos:column="10"/></specifier> <name pos:line="13" pos:column="11">char<pos:position pos:line="13" pos:column="15"/></name> <modifier pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></modifier><specifier pos:line="13" pos:column="17">const<pos:position pos:line="13" pos:column="22"/></specifier></type> <name pos:line="13" pos:column="23">pToken<pos:position pos:line="13" pos:column="29"/></name> <init pos:line="13" pos:column="30">= <expr><call><name><name pos:line="13" pos:column="32">ConfigParser<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">::<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="46">NextToken<pos:position pos:line="13" pos:column="55"/></name></name><argument_list pos:line="13" pos:column="55">()<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="58"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">char<pos:position pos:line="14" pos:column="15"/></name> <modifier pos:line="14" pos:column="16">*<pos:position pos:line="14" pos:column="17"/></modifier><specifier pos:line="14" pos:column="17">const<pos:position pos:line="14" pos:column="22"/></specifier></type> <name pos:line="14" pos:column="23">cToken<pos:position pos:line="14" pos:column="29"/></name> <init pos:line="14" pos:column="30">= <expr><call><name><name pos:line="14" pos:column="32">ConfigParser<pos:position pos:line="14" pos:column="44"/></name><operator pos:line="14" pos:column="44">::<pos:position pos:line="14" pos:column="46"/></operator><name pos:line="14" pos:column="46">NextToken<pos:position pos:line="14" pos:column="55"/></name></name><argument_list pos:line="14" pos:column="55">()<pos:position pos:line="14" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="58"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="15" pos:column="5">std<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">::<pos:position pos:line="15" pos:column="10"/></operator><name><name pos:line="15" pos:column="10">vector<pos:position pos:line="15" pos:column="16"/></name><argument_list type="generic" pos:line="15" pos:column="16">&lt;<argument><expr><name pos:line="15" pos:column="17">int<pos:position pos:line="15" pos:column="20"/></name></expr></argument>&gt;<pos:position pos:line="15" pos:column="24"/></argument_list></name></name></type> <name pos:line="15" pos:column="22">processes<pos:position pos:line="15" pos:column="31"/></name></decl>, <decl><type ref="prev"/><name pos:line="15" pos:column="33">cores<pos:position pos:line="15" pos:column="38"/></name></decl>;<pos:position pos:line="15" pos:column="39"/></decl_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">!<pos:position pos:line="16" pos:column="10"/></operator><call><name pos:line="16" pos:column="10">parseNamedIntList<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">pToken<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="36">"process_numbers"<pos:position pos:line="16" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="55">processes<pos:position pos:line="16" pos:column="64"/></name></expr></argument>)<pos:position pos:line="16" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="66"/></condition><then pos:line="16" pos:column="66"> <block pos:line="16" pos:column="67">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">3<pos:position pos:line="17" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="19">DBG_CRITICAL<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="33">"FATAL: bad 'process_numbers' parameter "<pos:position pos:line="17" pos:column="74"/></literal> <operator pos:line="17" pos:column="75">&lt;&lt;<pos:position pos:line="17" pos:column="83"/></operator>
               <literal type="string" pos:line="18" pos:column="16">"in 'cpu_affinity_map'"<pos:position pos:line="18" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">self_destruct<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">()<pos:position pos:line="19" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then> <elseif pos:line="20" pos:column="7">else <if pos:line="20" pos:column="12">if <condition pos:line="20" pos:column="15">(<expr><operator pos:line="20" pos:column="16">!<pos:position pos:line="20" pos:column="17"/></operator><call><name pos:line="20" pos:column="17">parseNamedIntList<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><name pos:line="20" pos:column="35">cToken<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="43">"cores"<pos:position pos:line="20" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="52">cores<pos:position pos:line="20" pos:column="57"/></name></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="59"/></condition><then pos:line="20" pos:column="59"> <block pos:line="20" pos:column="60">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">3<pos:position pos:line="21" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="19">DBG_CRITICAL<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="33">"FATAL: bad 'cores' parameter in "<pos:position pos:line="21" pos:column="67"/></literal> <operator pos:line="21" pos:column="68">&lt;&lt;<pos:position pos:line="21" pos:column="76"/></operator>
               <literal type="string" pos:line="22" pos:column="16">"'cpu_affinity_map'"<pos:position pos:line="22" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">self_destruct<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">()<pos:position pos:line="23" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if></elseif> <elseif pos:line="24" pos:column="7">else <if pos:line="24" pos:column="12">if <condition pos:line="24" pos:column="15">(<expr><operator pos:line="24" pos:column="16">!<pos:position pos:line="24" pos:column="17"/></operator><call><name><operator pos:line="24" pos:column="17">(<pos:position pos:line="24" pos:column="18"/></operator><operator pos:line="24" pos:column="18">*<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="19">cpuAffinityMap<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">)<pos:position pos:line="24" pos:column="34"/></operator><operator pos:line="24" pos:column="34">-&gt;<pos:position pos:line="24" pos:column="39"/></operator><name pos:line="24" pos:column="36">add<pos:position pos:line="24" pos:column="39"/></name></name><argument_list pos:line="24" pos:column="39">(<argument><expr><name pos:line="24" pos:column="40">processes<pos:position pos:line="24" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="51">cores<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="58"/></condition><then pos:line="24" pos:column="58"> <block pos:line="24" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">3<pos:position pos:line="25" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="19">DBG_CRITICAL<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="33">"FATAL: bad 'cpu_affinity_map'; "<pos:position pos:line="25" pos:column="66"/></literal> <operator pos:line="25" pos:column="67">&lt;&lt;<pos:position pos:line="25" pos:column="75"/></operator>
               <literal type="string" pos:line="26" pos:column="16">"process_numbers and cores lists differ in length or "<pos:position pos:line="26" pos:column="70"/></literal> <operator pos:line="26" pos:column="71">&lt;&lt;<pos:position pos:line="26" pos:column="79"/></operator>
               <literal type="string" pos:line="27" pos:column="16">"contain numbers &lt;= 0"<pos:position pos:line="27" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">self_destruct<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">()<pos:position pos:line="28" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if></elseif></if>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
