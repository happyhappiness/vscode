<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4633_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parseBytesOptionValue<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">size_t<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type> <name pos:line="1" pos:column="44">bptr<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type> <name pos:line="1" pos:column="63">value<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="line" pos:line="3" pos:column="5">// Find number from string beginning.</comment>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <specifier pos:line="4" pos:column="10">const<pos:position pos:line="4" pos:column="15"/></specifier> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type> <name pos:line="4" pos:column="18">number_begin<pos:position pos:line="4" pos:column="30"/></name> <init pos:line="4" pos:column="31">= <expr><name pos:line="4" pos:column="33">value<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <specifier pos:line="5" pos:column="10">const<pos:position pos:line="5" pos:column="15"/></specifier> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type> <name pos:line="5" pos:column="18">number_end<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><name pos:line="5" pos:column="31">value<pos:position pos:line="5" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>

    <while pos:line="7" pos:column="5">while <condition pos:line="7" pos:column="11">(<expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><operator pos:line="7" pos:column="13">*<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">number_end<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">&gt;=<pos:position pos:line="7" pos:column="30"/></operator> <literal type="char" pos:line="7" pos:column="28">'0'<pos:position pos:line="7" pos:column="31"/></literal> <operator pos:line="7" pos:column="32">&amp;&amp;<pos:position pos:line="7" pos:column="42"/></operator> <operator pos:line="7" pos:column="35">*<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="36">number_end<pos:position pos:line="7" pos:column="46"/></name> <operator pos:line="7" pos:column="47">&lt;=<pos:position pos:line="7" pos:column="52"/></operator> <literal type="char" pos:line="7" pos:column="50">'9'<pos:position pos:line="7" pos:column="53"/></literal><operator pos:line="7" pos:column="53">)<pos:position pos:line="7" pos:column="54"/></operator></expr>)<pos:position pos:line="7" pos:column="55"/></condition> <block pos:line="7" pos:column="56">{
        <expr_stmt><expr><operator pos:line="8" pos:column="9">++<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">number_end<pos:position pos:line="8" pos:column="21"/></name></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></while>

    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">std<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">::<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">string<pos:position pos:line="11" pos:column="16"/></name></name></type> <name pos:line="11" pos:column="17">number<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">number_begin<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">number_end<pos:position pos:line="11" pos:column="48"/></name> <operator pos:line="11" pos:column="49">-<pos:position pos:line="11" pos:column="50"/></operator> <name pos:line="11" pos:column="51">number_begin<pos:position pos:line="11" pos:column="63"/></name></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></decl>;<pos:position pos:line="11" pos:column="65"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">std<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">::<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">istringstream<pos:position pos:line="12" pos:column="23"/></name></name></type> <name pos:line="12" pos:column="24">in<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><name pos:line="12" pos:column="27">number<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></decl>;<pos:position pos:line="12" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">d<pos:position pos:line="13" pos:column="10"/></name> <init pos:line="13" pos:column="11">= <expr><literal type="number" pos:line="13" pos:column="13">0<pos:position pos:line="13" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><operator pos:line="14" pos:column="10">(<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">in<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">&gt;&gt;<pos:position pos:line="14" pos:column="19"/></operator> <name pos:line="14" pos:column="17">d<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">)<pos:position pos:line="14" pos:column="19"/></operator></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20">
        <block type="pseudo"><return pos:line="15" pos:column="9">return <expr><literal type="boolean" pos:line="15" pos:column="16">false<pos:position pos:line="15" pos:column="21"/></literal></expr>;<pos:position pos:line="15" pos:column="22"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="17" pos:column="5">int<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">m<pos:position pos:line="17" pos:column="10"/></name></decl>;<pos:position pos:line="17" pos:column="11"/></decl_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">(<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">m<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">parseBytesUnits<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">number_end<pos:position pos:line="18" pos:column="40"/></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call><operator pos:line="18" pos:column="41">)<pos:position pos:line="18" pos:column="42"/></operator> <operator pos:line="18" pos:column="43">==<pos:position pos:line="18" pos:column="45"/></operator> <literal type="number" pos:line="18" pos:column="46">0<pos:position pos:line="18" pos:column="47"/></literal></expr>)<pos:position pos:line="18" pos:column="48"/></condition><then pos:line="18" pos:column="48"> <block pos:line="18" pos:column="49">{
        <return pos:line="19" pos:column="9">return <expr><literal type="boolean" pos:line="19" pos:column="16">false<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="22" pos:column="5">*<pos:position pos:line="22" pos:column="6"/></operator><name pos:line="22" pos:column="6">bptr<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <cast type="static" pos:line="22" pos:column="13">static_cast<argument_list type="generic" pos:line="22" pos:column="24">&lt;<argument><expr><name pos:line="22" pos:column="25">size_t<pos:position pos:line="22" pos:column="31"/></name></expr></argument>&gt;<pos:position pos:line="22" pos:column="35"/></argument_list><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">m<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">*<pos:position pos:line="22" pos:column="36"/></operator> <name pos:line="22" pos:column="37">d<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></cast></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><cast type="static" pos:line="23" pos:column="9">static_cast<argument_list type="generic" pos:line="23" pos:column="20">&lt;<argument><expr><name pos:line="23" pos:column="21">long<pos:position pos:line="23" pos:column="25"/></name></expr></argument>&gt;<pos:position pos:line="23" pos:column="29"/></argument_list><argument_list pos:line="23" pos:column="26">(<argument><expr><operator pos:line="23" pos:column="27">*<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="28">bptr<pos:position pos:line="23" pos:column="32"/></name> <operator pos:line="23" pos:column="33">*<pos:position pos:line="23" pos:column="34"/></operator> <literal type="number" pos:line="23" pos:column="35">2<pos:position pos:line="23" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></cast> <operator pos:line="23" pos:column="38">!=<pos:position pos:line="23" pos:column="40"/></operator> <name pos:line="23" pos:column="41">m<pos:position pos:line="23" pos:column="42"/></name> <operator pos:line="23" pos:column="43">*<pos:position pos:line="23" pos:column="44"/></operator> <name pos:line="23" pos:column="45">d<pos:position pos:line="23" pos:column="46"/></name> <operator pos:line="23" pos:column="47">*<pos:position pos:line="23" pos:column="48"/></operator> <literal type="number" pos:line="23" pos:column="49">2<pos:position pos:line="23" pos:column="50"/></literal></expr>)<pos:position pos:line="23" pos:column="51"/></condition><then pos:line="23" pos:column="51">
        <block type="pseudo"><return pos:line="24" pos:column="9">return <expr><literal type="boolean" pos:line="24" pos:column="16">false<pos:position pos:line="24" pos:column="21"/></literal></expr>;<pos:position pos:line="24" pos:column="22"/></return></block></then></if>

    <return pos:line="26" pos:column="5">return <expr><literal type="boolean" pos:line="26" pos:column="12">true<pos:position pos:line="26" pos:column="16"/></literal></expr>;<pos:position pos:line="26" pos:column="17"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
