<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2178_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">fd<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><operator pos:line="4" pos:column="14">-<pos:position pos:line="4" pos:column="15"/></operator><literal type="number" pos:line="4" pos:column="15">1<pos:position pos:line="4" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">StoreMeta<pos:position pos:line="5" pos:column="14"/></name> <modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">metadata<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name pos:line="5" pos:column="27">NULL<pos:position pos:line="5" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>

    <try pos:line="7" pos:column="5">try <block pos:line="7" pos:column="9">{
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">argc<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">!=<pos:position pos:line="8" pos:column="20"/></operator> <literal type="number" pos:line="8" pos:column="21">2<pos:position pos:line="8" pos:column="22"/></literal></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23">
            <block type="pseudo"><throw pos:line="9" pos:column="13">throw <expr><call><name><name pos:line="9" pos:column="19">std<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">::<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="24">runtime_error<pos:position pos:line="9" pos:column="37"/></name></name><argument_list pos:line="9" pos:column="37">(<argument><expr><literal type="string" pos:line="9" pos:column="38">"No filename provided"<pos:position pos:line="9" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="62"/></throw></block></then></if>

        <expr_stmt><expr><name pos:line="11" pos:column="9">fd<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">open<pos:position pos:line="11" pos:column="18"/></name> <argument_list pos:line="11" pos:column="19">(<argument><expr><name><name pos:line="11" pos:column="20">argv<pos:position pos:line="11" pos:column="24"/></name><index pos:line="11" pos:column="24">[<expr><literal type="number" pos:line="11" pos:column="25">1<pos:position pos:line="11" pos:column="26"/></literal></expr>]<pos:position pos:line="11" pos:column="27"/></index></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="29">O_RDONLY<pos:position pos:line="11" pos:column="37"/></name> <operator pos:line="11" pos:column="38">|<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="40">O_BINARY<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>

        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">fd<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">&lt;<pos:position pos:line="13" pos:column="20"/></operator> <literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20">
            <block type="pseudo"><throw pos:line="14" pos:column="13">throw <expr><call><name><name pos:line="14" pos:column="19">std<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">::<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">runtime_error<pos:position pos:line="14" pos:column="37"/></name></name><argument_list pos:line="14" pos:column="37">(<argument><expr><literal type="string" pos:line="14" pos:column="38">"Could not open file."<pos:position pos:line="14" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="62"/></throw></block></then></if>

        <decl_stmt><decl><type><name pos:line="16" pos:column="9">char<pos:position pos:line="16" pos:column="13"/></name></type> <name><name pos:line="16" pos:column="14">tempbuf<pos:position pos:line="16" pos:column="21"/></name><index pos:line="16" pos:column="21">[<expr><name pos:line="16" pos:column="22">SM_PAGE_SIZE<pos:position pos:line="16" pos:column="34"/></name></expr>]<pos:position pos:line="16" pos:column="35"/></index></name></decl>;<pos:position pos:line="16" pos:column="36"/></decl_stmt>

        <decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">len<pos:position pos:line="18" pos:column="16"/></name> <init pos:line="18" pos:column="17">= <expr><call><name pos:line="18" pos:column="19">read<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">fd<pos:position pos:line="18" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="28">tempbuf<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="37">SM_PAGE_SIZE<pos:position pos:line="18" pos:column="49"/></name></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="51"/></decl_stmt>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">len<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">&lt;<pos:position pos:line="20" pos:column="21"/></operator> <literal type="number" pos:line="20" pos:column="19">0<pos:position pos:line="20" pos:column="20"/></literal></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21">
            <block type="pseudo"><throw pos:line="21" pos:column="13">throw <expr><call><name><name pos:line="21" pos:column="19">std<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">::<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="24">runtime_error<pos:position pos:line="21" pos:column="37"/></name></name><argument_list pos:line="21" pos:column="37">(<argument><expr><literal type="string" pos:line="21" pos:column="38">"Could not read header into memory."<pos:position pos:line="21" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="76"/></throw></block></then></if>

        <expr_stmt><expr><call><name pos:line="23" pos:column="9">close<pos:position pos:line="23" pos:column="14"/></name> <argument_list pos:line="23" pos:column="15">(<argument><expr><name pos:line="23" pos:column="16">fd<pos:position pos:line="23" pos:column="18"/></name></expr></argument>)<pos:position pos:line="23" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt>

        <expr_stmt><expr><name pos:line="25" pos:column="9">fd<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <operator pos:line="25" pos:column="14">-<pos:position pos:line="25" pos:column="15"/></operator><literal type="number" pos:line="25" pos:column="15">1<pos:position pos:line="25" pos:column="16"/></literal></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt>

        <decl_stmt><decl><type><name pos:line="27" pos:column="9">int<pos:position pos:line="27" pos:column="12"/></name></type> <name pos:line="27" pos:column="13">hdr_len<pos:position pos:line="27" pos:column="20"/></name></decl>;<pos:position pos:line="27" pos:column="21"/></decl_stmt>

        <decl_stmt><decl><type><name pos:line="29" pos:column="9">StoreMetaUnpacker<pos:position pos:line="29" pos:column="26"/></name></type> <name pos:line="29" pos:column="27">aBuilder<pos:position pos:line="29" pos:column="35"/></name><argument_list pos:line="29" pos:column="35">(<argument><expr><name pos:line="29" pos:column="36">tempbuf<pos:position pos:line="29" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="45">len<pos:position pos:line="29" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="50">&amp;<pos:position pos:line="29" pos:column="55"/></operator><name pos:line="29" pos:column="51">hdr_len<pos:position pos:line="29" pos:column="58"/></name></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></decl>;<pos:position pos:line="29" pos:column="60"/></decl_stmt>

        <expr_stmt><expr><name pos:line="31" pos:column="9">metadata<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <call><name><name pos:line="31" pos:column="20">aBuilder<pos:position pos:line="31" pos:column="28"/></name><operator pos:line="31" pos:column="28">.<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="29">createStoreMeta<pos:position pos:line="31" pos:column="44"/></name></name> <argument_list pos:line="31" pos:column="45">()<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>

        <decl_stmt><decl><type><name pos:line="33" pos:column="9">cache_key<pos:position pos:line="33" pos:column="18"/></name></type> <name><name pos:line="33" pos:column="19">key<pos:position pos:line="33" pos:column="22"/></name><index pos:line="33" pos:column="22">[<expr><name pos:line="33" pos:column="23">SQUID_MD5_DIGEST_LENGTH<pos:position pos:line="33" pos:column="46"/></name></expr>]<pos:position pos:line="33" pos:column="47"/></index></name></decl>;<pos:position pos:line="33" pos:column="48"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="35" pos:column="9">memset<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">key<pos:position pos:line="35" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="21">'\0'<pos:position pos:line="35" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="27">SQUID_MD5_DIGEST_LENGTH<pos:position pos:line="35" pos:column="50"/></name></expr></argument>)<pos:position pos:line="35" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="52"/></expr_stmt>

        <decl_stmt><decl><type><name pos:line="37" pos:column="9">DumpStoreMeta<pos:position pos:line="37" pos:column="22"/></name></type> <name pos:line="37" pos:column="23">dumper<pos:position pos:line="37" pos:column="29"/></name></decl>;<pos:position pos:line="37" pos:column="30"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="39" pos:column="9">for_each<pos:position pos:line="39" pos:column="17"/></name><argument_list pos:line="39" pos:column="17">(<argument><expr><operator pos:line="39" pos:column="18">*<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="19">metadata<pos:position pos:line="39" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="29">dumper<pos:position pos:line="39" pos:column="35"/></name></expr></argument>)<pos:position pos:line="39" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>

        <return pos:line="41" pos:column="9">return <expr><literal type="number" pos:line="41" pos:column="16">0<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block> <catch pos:line="42" pos:column="7">catch <parameter_list pos:line="42" pos:column="13">(<parameter><decl><type><name><name pos:line="42" pos:column="14">std<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">::<pos:position pos:line="42" pos:column="19"/></operator><name pos:line="42" pos:column="19">runtime_error<pos:position pos:line="42" pos:column="32"/></name></name></type> <name pos:line="42" pos:column="33">error<pos:position pos:line="42" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="42" pos:column="39"/></parameter_list> <block pos:line="42" pos:column="40">{
        <expr_stmt><expr><name><name pos:line="43" pos:column="9">std<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">::<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">cout<pos:position pos:line="43" pos:column="18"/></name></name> <operator pos:line="43" pos:column="19">&lt;&lt;<pos:position pos:line="43" pos:column="27"/></operator> <literal type="string" pos:line="43" pos:column="22">"Failed : "<pos:position pos:line="43" pos:column="33"/></literal> <operator pos:line="43" pos:column="34">&lt;&lt;<pos:position pos:line="43" pos:column="42"/></operator> <call><name><name pos:line="43" pos:column="37">error<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">.<pos:position pos:line="43" pos:column="43"/></operator><name pos:line="43" pos:column="43">what<pos:position pos:line="43" pos:column="47"/></name></name><argument_list pos:line="43" pos:column="47">()<pos:position pos:line="43" pos:column="49"/></argument_list></call> <operator pos:line="43" pos:column="50">&lt;&lt;<pos:position pos:line="43" pos:column="58"/></operator> <name><name pos:line="43" pos:column="53">std<pos:position pos:line="43" pos:column="56"/></name><operator pos:line="43" pos:column="56">::<pos:position pos:line="43" pos:column="58"/></operator><name pos:line="43" pos:column="58">endl<pos:position pos:line="43" pos:column="62"/></name></name></expr>;<pos:position pos:line="43" pos:column="63"/></expr_stmt>

        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">fd<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">&gt;=<pos:position pos:line="45" pos:column="21"/></operator> <literal type="number" pos:line="45" pos:column="19">0<pos:position pos:line="45" pos:column="20"/></literal></expr>)<pos:position pos:line="45" pos:column="21"/></condition><then pos:line="45" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="13">close<pos:position pos:line="46" pos:column="18"/></name><argument_list pos:line="46" pos:column="18">(<argument><expr><name pos:line="46" pos:column="19">fd<pos:position pos:line="46" pos:column="21"/></name></expr></argument>)<pos:position pos:line="46" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="23"/></expr_stmt></block></then></if>

        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">metadata<pos:position pos:line="48" pos:column="21"/></name></expr>)<pos:position pos:line="48" pos:column="22"/></condition><then pos:line="48" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="49" pos:column="13">StoreMeta<pos:position pos:line="49" pos:column="22"/></name><operator pos:line="49" pos:column="22">::<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="24">FreeList<pos:position pos:line="49" pos:column="32"/></name></name><argument_list pos:line="49" pos:column="32">(<argument><expr><operator pos:line="49" pos:column="33">&amp;<pos:position pos:line="49" pos:column="38"/></operator><name pos:line="49" pos:column="34">metadata<pos:position pos:line="49" pos:column="42"/></name></expr></argument>)<pos:position pos:line="49" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="44"/></expr_stmt></block></then></if>

        <return pos:line="51" pos:column="9">return <expr><literal type="number" pos:line="51" pos:column="16">1<pos:position pos:line="51" pos:column="17"/></literal></expr>;<pos:position pos:line="51" pos:column="18"/></return>
    }<pos:position pos:line="52" pos:column="6"/></block></catch></try>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
