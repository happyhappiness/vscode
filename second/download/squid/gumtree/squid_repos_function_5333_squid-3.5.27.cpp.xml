<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5333_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Client<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">swanSong<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">()<pos:position pos:line="2" pos:column="19"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// get rid of our piping obligations</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">requestBodySource<pos:position pos:line="5" pos:column="26"/></name> <operator pos:line="5" pos:column="27">!=<pos:position pos:line="5" pos:column="29"/></operator> <name pos:line="5" pos:column="30">NULL<pos:position pos:line="5" pos:column="34"/></name></expr>)<pos:position pos:line="5" pos:column="35"/></condition><then pos:line="5" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="9">stopConsumingFrom<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">requestBodySource<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt></block></then></if>

<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">USE_ADAPTATION<pos:position pos:line="8" pos:column="19"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">cleanAdaptation<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">()<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><call><name pos:line="12" pos:column="10">doneWithServer<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">()<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="27"/></condition><then pos:line="12" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="9">closeServer<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">()<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">doneWithFwd<pos:position pos:line="15" pos:column="21"/></name></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22"> <block pos:line="15" pos:column="23">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">doneWithFwd<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <literal type="string" pos:line="16" pos:column="23">"swanSong()"<pos:position pos:line="16" pos:column="35"/></literal></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="17" pos:column="9">fwd<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">handleUnregisteredServerEnd<pos:position pos:line="17" pos:column="41"/></name></name><argument_list pos:line="17" pos:column="41">()<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">BodyConsumer<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">::<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">swanSong<pos:position pos:line="20" pos:column="27"/></name></name><argument_list pos:line="20" pos:column="27">()<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>
<cpp:if pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">if<pos:position pos:line="21" pos:column="4"/></cpp:directive> <expr><name pos:line="21" pos:column="5">USE_ADAPTATION<pos:position pos:line="21" pos:column="19"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="22" pos:column="5">Initiator<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">::<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">swanSong<pos:position pos:line="22" pos:column="24"/></name></name><argument_list pos:line="22" pos:column="24">()<pos:position pos:line="22" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="23" pos:column="5">BodyProducer<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">::<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">swanSong<pos:position pos:line="23" pos:column="27"/></name></name><argument_list pos:line="23" pos:column="27">()<pos:position pos:line="23" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="line" pos:line="26" pos:column="5">// paranoid: check that swanSong has been called</comment>
    <comment type="line" pos:line="27" pos:column="5">// extra paranoid: yeah, I really mean it. they MUST pass here.</comment>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">assert<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><operator pos:line="28" pos:column="12">!<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="13">requestBodySource<pos:position pos:line="28" pos:column="30"/></name></expr></argument>)<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt>
<cpp:if pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">if<pos:position pos:line="29" pos:column="4"/></cpp:directive> <expr><name pos:line="29" pos:column="5">USE_ADAPTATION<pos:position pos:line="29" pos:column="19"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">assert<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><operator pos:line="30" pos:column="12">!<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">virginBodyDestination<pos:position pos:line="30" pos:column="34"/></name></expr></argument>)<pos:position pos:line="30" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">assert<pos:position pos:line="31" pos:column="11"/></name><argument_list pos:line="31" pos:column="11">(<argument><expr><operator pos:line="31" pos:column="12">!<pos:position pos:line="31" pos:column="13"/></operator><name pos:line="31" pos:column="13">adaptedBodySource<pos:position pos:line="31" pos:column="30"/></name></expr></argument>)<pos:position pos:line="31" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
