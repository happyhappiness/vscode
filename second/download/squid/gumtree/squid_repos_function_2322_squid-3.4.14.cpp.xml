<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2322_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemObject<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">trimSwappable<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">()<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int64_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">new_mem_lo<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><call><name pos:line="4" pos:column="26">policyLowestOffsetToKeep<pos:position pos:line="4" pos:column="50"/></name><argument_list pos:line="4" pos:column="50">(<argument><expr><literal type="number" pos:line="4" pos:column="51">1<pos:position pos:line="4" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/*
     * We should only free up to what we know has been written
     * to disk, not what has been queued for writing.  Otherwise
     * there will be a chunk of the data which is not in memory
     * and is not yet on disk.
     * The -1 makes sure the page isn't freed until storeSwapOut has
     * walked to the next page.
     */</comment>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int64_t<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">on_disk<pos:position pos:line="13" pos:column="20"/></name></decl>;<pos:position pos:line="13" pos:column="21"/></decl_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">on_disk<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <call><name pos:line="15" pos:column="20">objectBytesOnDisk<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">()<pos:position pos:line="15" pos:column="39"/></argument_list></call><operator pos:line="15" pos:column="39">)<pos:position pos:line="15" pos:column="40"/></operator> <operator pos:line="15" pos:column="41">-<pos:position pos:line="15" pos:column="42"/></operator> <literal type="number" pos:line="15" pos:column="43">1<pos:position pos:line="15" pos:column="44"/></literal> <operator pos:line="15" pos:column="45">&lt;<pos:position pos:line="15" pos:column="49"/></operator> <name pos:line="15" pos:column="47">new_mem_lo<pos:position pos:line="15" pos:column="57"/></name></expr>)<pos:position pos:line="15" pos:column="58"/></condition><then pos:line="15" pos:column="58">
        <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="9">new_mem_lo<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">on_disk<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">-<pos:position pos:line="16" pos:column="31"/></operator> <literal type="number" pos:line="16" pos:column="32">1<pos:position pos:line="16" pos:column="33"/></literal></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">new_mem_lo<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">==<pos:position pos:line="18" pos:column="22"/></operator> <operator pos:line="18" pos:column="23">-<pos:position pos:line="18" pos:column="24"/></operator><literal type="number" pos:line="18" pos:column="24">1<pos:position pos:line="18" pos:column="25"/></literal></expr>)<pos:position pos:line="18" pos:column="26"/></condition><then pos:line="18" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="9">new_mem_lo<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <literal type="number" pos:line="19" pos:column="22">0<pos:position pos:line="19" pos:column="23"/></literal></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt></block></then></if>	<comment type="block" pos:line="19" pos:column="25">/* the above might become -1 */</comment>

    <expr_stmt><expr><call><name><name pos:line="21" pos:column="5">data_hdr<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">.<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">freeDataUpto<pos:position pos:line="21" pos:column="26"/></name></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name pos:line="21" pos:column="27">new_mem_lo<pos:position pos:line="21" pos:column="37"/></name></expr></argument>)<pos:position pos:line="21" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="39"/></expr_stmt>

    <expr_stmt><expr><name pos:line="23" pos:column="5">inmem_lo<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <name pos:line="23" pos:column="16">new_mem_lo<pos:position pos:line="23" pos:column="26"/></name></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
