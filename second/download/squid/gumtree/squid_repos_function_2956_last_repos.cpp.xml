<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2956_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">clientReplyContext<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">createStoreEntry<pos:position pos:line="2" pos:column="37"/></name></name><parameter_list pos:line="2" pos:column="37">(<parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">HttpRequestMethod<pos:position pos:line="2" pos:column="61"/></name><modifier pos:line="2" pos:column="61">&amp;<pos:position pos:line="2" pos:column="66"/></modifier></type> <name pos:line="2" pos:column="63">m<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">RequestFlags<pos:position pos:line="2" pos:column="78"/></name></type> <name pos:line="2" pos:column="79">reqFlags<pos:position pos:line="2" pos:column="87"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="88"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">http<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">!=<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="20">NULL<pos:position pos:line="4" pos:column="24"/></name></expr></argument>)<pos:position pos:line="4" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="5" pos:column="5">/*
     * For erroneous requests, we might not have a h-&gt;request,
     * so make a fake one.
     */</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">http<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">request<pos:position pos:line="10" pos:column="22"/></name></name> <operator pos:line="10" pos:column="23">==<pos:position pos:line="10" pos:column="25"/></operator> <name pos:line="10" pos:column="26">NULL<pos:position pos:line="10" pos:column="30"/></name></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31"> <block pos:line="10" pos:column="32">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name><name pos:line="11" pos:column="15">MasterXaction<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">::<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">Pointer<pos:position pos:line="11" pos:column="37"/></name></name></type> <name pos:line="11" pos:column="38">mx<pos:position pos:line="11" pos:column="40"/></name> <init pos:line="11" pos:column="41">= <expr><operator pos:line="11" pos:column="43">new<pos:position pos:line="11" pos:column="46"/></operator> <call><name pos:line="11" pos:column="47">MasterXaction<pos:position pos:line="11" pos:column="60"/></name><argument_list pos:line="11" pos:column="60">(<argument><expr><name><name pos:line="11" pos:column="61">XactionInitiator<pos:position pos:line="11" pos:column="77"/></name><operator pos:line="11" pos:column="77">::<pos:position pos:line="11" pos:column="79"/></operator><name pos:line="11" pos:column="79">initClient<pos:position pos:line="11" pos:column="89"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="90"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="91"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">http<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">request<pos:position pos:line="12" pos:column="22"/></name></name> <operator pos:line="12" pos:column="23">=<pos:position pos:line="12" pos:column="24"/></operator> <operator pos:line="12" pos:column="25">new<pos:position pos:line="12" pos:column="28"/></operator> <call><name pos:line="12" pos:column="29">HttpRequest<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><name pos:line="12" pos:column="41">m<pos:position pos:line="12" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="44">AnyP<pos:position pos:line="12" pos:column="48"/></name><operator pos:line="12" pos:column="48">::<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="50">PROTO_NONE<pos:position pos:line="12" pos:column="60"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="62">"http"<pos:position pos:line="12" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="70">null_string<pos:position pos:line="12" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="83">mx<pos:position pos:line="12" pos:column="85"/></name></expr></argument>)<pos:position pos:line="12" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="87"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">HTTPMSGLOCK<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name><name pos:line="13" pos:column="21">http<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">-&gt;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="27">request<pos:position pos:line="13" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="16" pos:column="5">StoreEntry<pos:position pos:line="16" pos:column="15"/></name> <modifier pos:line="16" pos:column="16">*<pos:position pos:line="16" pos:column="17"/></modifier></type><name pos:line="16" pos:column="17">e<pos:position pos:line="16" pos:column="18"/></name> <init pos:line="16" pos:column="19">= <expr><call><name pos:line="16" pos:column="21">storeCreateEntry<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><call><name pos:line="16" pos:column="38">storeId<pos:position pos:line="16" pos:column="45"/></name><argument_list pos:line="16" pos:column="45">()<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="49">http<pos:position pos:line="16" pos:column="53"/></name><operator pos:line="16" pos:column="53">-&gt;<pos:position pos:line="16" pos:column="58"/></operator><name pos:line="16" pos:column="55">log_uri<pos:position pos:line="16" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="64">reqFlags<pos:position pos:line="16" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="74">m<pos:position pos:line="16" pos:column="75"/></name></expr></argument>)<pos:position pos:line="16" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="77"/></decl_stmt>

    <comment type="line" pos:line="18" pos:column="5">// Make entry collapsable ASAP, to increase collapsing chances for others,</comment>
    <comment type="line" pos:line="19" pos:column="5">// TODO: every must-revalidate and similar request MUST reach the origin,</comment>
    <comment type="line" pos:line="20" pos:column="5">// but do we have to prohibit others from collapsing on that request?</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">Config<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">.<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">onoff<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">.<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">collapsed_forwarding<pos:position pos:line="21" pos:column="42"/></name></name> <operator pos:line="21" pos:column="43">&amp;&amp;<pos:position pos:line="21" pos:column="53"/></operator> <name><name pos:line="21" pos:column="46">reqFlags<pos:position pos:line="21" pos:column="54"/></name><operator pos:line="21" pos:column="54">.<pos:position pos:line="21" pos:column="55"/></operator><name pos:line="21" pos:column="55">cachable<pos:position pos:line="21" pos:column="63"/></name></name> <operator pos:line="21" pos:column="64">&amp;&amp;<pos:position pos:line="21" pos:column="74"/></operator>
            <operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name><name pos:line="22" pos:column="14">reqFlags<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">.<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">needValidation<pos:position pos:line="22" pos:column="37"/></name></name> <operator pos:line="22" pos:column="38">&amp;&amp;<pos:position pos:line="22" pos:column="48"/></operator>
            <operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">m<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">==<pos:position pos:line="23" pos:column="18"/></operator> <name><name pos:line="23" pos:column="19">Http<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">::<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">METHOD_GET<pos:position pos:line="23" pos:column="35"/></name></name> <operator pos:line="23" pos:column="36">||<pos:position pos:line="23" pos:column="38"/></operator> <name pos:line="23" pos:column="39">m<pos:position pos:line="23" pos:column="40"/></name> <operator pos:line="23" pos:column="41">==<pos:position pos:line="23" pos:column="43"/></operator> <name><name pos:line="23" pos:column="44">Http<pos:position pos:line="23" pos:column="48"/></name><operator pos:line="23" pos:column="48">::<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="50">METHOD_HEAD<pos:position pos:line="23" pos:column="61"/></name></name><operator pos:line="23" pos:column="61">)<pos:position pos:line="23" pos:column="62"/></operator></expr>)<pos:position pos:line="23" pos:column="63"/></condition><then pos:line="23" pos:column="63"> <block pos:line="23" pos:column="64">{
        <comment type="line" pos:line="24" pos:column="9">// make the entry available for future requests now</comment>
        <expr_stmt><expr><call><name><name pos:line="25" pos:column="9">Store<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">::<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="16">Root<pos:position pos:line="25" pos:column="20"/></name></name><argument_list pos:line="25" pos:column="20">()<pos:position pos:line="25" pos:column="22"/></argument_list></call><operator pos:line="25" pos:column="22">.<pos:position pos:line="25" pos:column="23"/></operator><call><name pos:line="25" pos:column="23">allowCollapsing<pos:position pos:line="25" pos:column="38"/></name><argument_list pos:line="25" pos:column="38">(<argument><expr><name pos:line="25" pos:column="39">e<pos:position pos:line="25" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="42">reqFlags<pos:position pos:line="25" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="52">m<pos:position pos:line="25" pos:column="53"/></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="28" pos:column="5">sc<pos:position pos:line="28" pos:column="7"/></name> <operator pos:line="28" pos:column="8">=<pos:position pos:line="28" pos:column="9"/></operator> <call><name pos:line="28" pos:column="10">storeClientListAdd<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">e<pos:position pos:line="28" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="32">this<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>

<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><name pos:line="30" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="30" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="31" pos:column="5">sc<pos:position pos:line="31" pos:column="7"/></name><operator pos:line="31" pos:column="7">-&gt;<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="9">setDelayId<pos:position pos:line="31" pos:column="19"/></name></name><argument_list pos:line="31" pos:column="19">(<argument><expr><call><name><name pos:line="31" pos:column="20">DelayId<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">::<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="29">DelayClient<pos:position pos:line="31" pos:column="40"/></name></name><argument_list pos:line="31" pos:column="40">(<argument><expr><name pos:line="31" pos:column="41">http<pos:position pos:line="31" pos:column="45"/></name></expr></argument>)<pos:position pos:line="31" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="34" pos:column="5">reqofs<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <literal type="number" pos:line="34" pos:column="14">0<pos:position pos:line="34" pos:column="15"/></literal></expr>;<pos:position pos:line="34" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><name pos:line="36" pos:column="5">reqsize<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <literal type="number" pos:line="36" pos:column="15">0<pos:position pos:line="36" pos:column="16"/></literal></expr>;<pos:position pos:line="36" pos:column="17"/></expr_stmt>

    <comment type="block" pos:line="38" pos:column="5">/* I don't think this is actually needed! -- adrian */</comment>
    <comment type="block" pos:line="39" pos:column="5">/* http-&gt;reqbuf = http-&gt;norm_reqbuf; */</comment>
    <comment type="line" pos:line="40" pos:column="5">//    assert(http-&gt;reqbuf == http-&gt;norm_reqbuf);</comment>
    <comment type="block" pos:line="41" pos:column="5">/* The next line is illegal because we don't know if the client stream
     * buffers have been set up
     */</comment>
    <comment type="line" pos:line="44" pos:column="5">//    storeClientCopy(http-&gt;sc, e, 0, HTTP_REQBUF_SZ, http-&gt;reqbuf,</comment>
    <comment type="line" pos:line="45" pos:column="5">//        SendMoreData, this);</comment>
    <comment type="block" pos:line="46" pos:column="5">/* So, we mark the store logic as complete */</comment>
    <expr_stmt><expr><name><name pos:line="47" pos:column="5">flags<pos:position pos:line="47" pos:column="10"/></name><operator pos:line="47" pos:column="10">.<pos:position pos:line="47" pos:column="11"/></operator><name pos:line="47" pos:column="11">storelogiccomplete<pos:position pos:line="47" pos:column="29"/></name></name> <operator pos:line="47" pos:column="30">=<pos:position pos:line="47" pos:column="31"/></operator> <literal type="number" pos:line="47" pos:column="32">1<pos:position pos:line="47" pos:column="33"/></literal></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt>

    <comment type="block" pos:line="49" pos:column="5">/* and get the caller to request a read, from whereever they are */</comment>
    <comment type="block" pos:line="50" pos:column="5">/* NOTE: after ANY data flows down the pipe, even one step,
     * this function CAN NOT be used to manage errors
     */</comment>
    <expr_stmt><expr><call><name><name pos:line="53" pos:column="5">http<pos:position pos:line="53" pos:column="9"/></name><operator pos:line="53" pos:column="9">-&gt;<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="11">storeEntry<pos:position pos:line="53" pos:column="21"/></name></name><argument_list pos:line="53" pos:column="21">(<argument><expr><name pos:line="53" pos:column="22">e<pos:position pos:line="53" pos:column="23"/></name></expr></argument>)<pos:position pos:line="53" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
