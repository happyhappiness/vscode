<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3623_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">In<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">maybeMakeSpaceAvailable<pos:position pos:line="2" pos:column="43"/></name></name><parameter_list pos:line="2" pos:column="43">()<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// The hard-coded parameters are arbitrary but seem reasonable.</comment>
    <comment type="line" pos:line="5" pos:column="5">// A careful study of Squid I/O and parsing patterns is needed to tune them.</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">SBufReservationRequirements<pos:position pos:line="6" pos:column="32"/></name></type> <name pos:line="6" pos:column="33">requirements<pos:position pos:line="6" pos:column="45"/></name></decl>;<pos:position pos:line="6" pos:column="46"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">requirements<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">.<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="18">minSpace<pos:position pos:line="7" pos:column="26"/></name></name> <operator pos:line="7" pos:column="27">=<pos:position pos:line="7" pos:column="28"/></operator> <literal type="number" pos:line="7" pos:column="29">1024<pos:position pos:line="7" pos:column="33"/></literal></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt> <comment type="line" pos:line="7" pos:column="35">// smaller I/Os are not worth their overhead</comment>
    <expr_stmt><expr><name><name pos:line="8" pos:column="5">requirements<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">.<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="18">idealSpace<pos:position pos:line="8" pos:column="28"/></name></name> <operator pos:line="8" pos:column="29">=<pos:position pos:line="8" pos:column="30"/></operator> <name pos:line="8" pos:column="31">CLIENT_REQ_BUF_SZ<pos:position pos:line="8" pos:column="48"/></name></expr>;<pos:position pos:line="8" pos:column="49"/></expr_stmt> <comment type="line" pos:line="8" pos:column="50">// we expect few larger I/Os</comment>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">requirements<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">.<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="18">maxCapacity<pos:position pos:line="9" pos:column="29"/></name></name> <operator pos:line="9" pos:column="30">=<pos:position pos:line="9" pos:column="31"/></operator> <name><name pos:line="9" pos:column="32">Config<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">.<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="39">maxRequestBufferSize<pos:position pos:line="9" pos:column="59"/></name></name></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">requirements<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">.<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="18">allowShared<pos:position pos:line="10" pos:column="29"/></name></name> <operator pos:line="10" pos:column="30">=<pos:position pos:line="10" pos:column="31"/></operator> <literal type="boolean" pos:line="10" pos:column="32">true<pos:position pos:line="10" pos:column="36"/></literal></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt> <comment type="line" pos:line="10" pos:column="38">// allow because inBuf is used immediately</comment>
    <expr_stmt><expr><call><name><name pos:line="11" pos:column="5">buf<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">.<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">reserve<pos:position pos:line="11" pos:column="16"/></name></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">requirements<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><call><name><name pos:line="12" pos:column="10">buf<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">.<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">spaceSize<pos:position pos:line="12" pos:column="23"/></name></name><argument_list pos:line="12" pos:column="23">()<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">33<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="20">4<pos:position pos:line="13" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="23">"request buffer full: client_request_buffer_max_size="<pos:position pos:line="13" pos:column="77"/></literal> <operator pos:line="13" pos:column="78">&lt;&lt;<pos:position pos:line="13" pos:column="86"/></operator> <name><name pos:line="13" pos:column="81">Config<pos:position pos:line="13" pos:column="87"/></name><operator pos:line="13" pos:column="87">.<pos:position pos:line="13" pos:column="88"/></operator><name pos:line="13" pos:column="88">maxRequestBufferSize<pos:position pos:line="13" pos:column="108"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="110"/></expr_stmt></block></then></if>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
