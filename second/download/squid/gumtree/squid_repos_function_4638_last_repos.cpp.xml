<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4638_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Server<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">writeForwardedReplyAndCall<pos:position pos:line="2" pos:column="40"/></name></name><parameter_list pos:line="2" pos:column="40">(<parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">HttpReply<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">reply<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="65">AsyncCall<pos:position pos:line="2" pos:column="74"/></name><operator pos:line="2" pos:column="74">::<pos:position pos:line="2" pos:column="76"/></operator><name pos:line="2" pos:column="76">Pointer<pos:position pos:line="2" pos:column="83"/></name></name> <modifier pos:line="2" pos:column="84">&amp;<pos:position pos:line="2" pos:column="89"/></modifier></type><name pos:line="2" pos:column="85">call<pos:position pos:line="2" pos:column="89"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="90"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">reply<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">!=<pos:position pos:line="4" pos:column="20"/></operator> <name pos:line="4" pos:column="21">NULL<pos:position pos:line="4" pos:column="25"/></name></expr></argument>)<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="27"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">HttpHeader<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">&amp;<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="23">header<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name><name pos:line="5" pos:column="32">reply<pos:position pos:line="5" pos:column="37"/></name><operator pos:line="5" pos:column="37">-&gt;<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="39">header<pos:position pos:line="5" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>

    <comment type="line" pos:line="7" pos:column="5">// without status, the caller must use the writeForwardedForeign() path</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">Must<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><call><name><name pos:line="8" pos:column="10">header<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">.<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">has<pos:position pos:line="8" pos:column="20"/></name></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name><name pos:line="8" pos:column="21">Http<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">::<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">HdrType<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">::<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="36">FTP_STATUS<pos:position pos:line="8" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">Must<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><call><name><name pos:line="9" pos:column="10">header<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">.<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">has<pos:position pos:line="9" pos:column="20"/></name></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name><name pos:line="9" pos:column="21">Http<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">::<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="27">HdrType<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">::<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="36">FTP_REASON<pos:position pos:line="9" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="49"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">int<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">scode<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><call><name><name pos:line="10" pos:column="23">header<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">.<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="30">getInt<pos:position pos:line="10" pos:column="36"/></name></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name><name pos:line="10" pos:column="37">Http<pos:position pos:line="10" pos:column="41"/></name><operator pos:line="10" pos:column="41">::<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="43">HdrType<pos:position pos:line="10" pos:column="50"/></name><operator pos:line="10" pos:column="50">::<pos:position pos:line="10" pos:column="52"/></operator><name pos:line="10" pos:column="52">FTP_STATUS<pos:position pos:line="10" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="64"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">33<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="16">7<pos:position pos:line="11" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="19">"scode: "<pos:position pos:line="11" pos:column="28"/></literal> <operator pos:line="11" pos:column="29">&lt;&lt;<pos:position pos:line="11" pos:column="37"/></operator> <name pos:line="11" pos:column="32">scode<pos:position pos:line="11" pos:column="37"/></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>

    <comment type="line" pos:line="13" pos:column="5">// Status 125 or 150 implies upload or data request, but we still check</comment>
    <comment type="line" pos:line="14" pos:column="5">// the state in case the server is buggy.</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">scode<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">==<pos:position pos:line="15" pos:column="18"/></operator> <literal type="number" pos:line="15" pos:column="19">125<pos:position pos:line="15" pos:column="22"/></literal> <operator pos:line="15" pos:column="23">||<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="26">scode<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">==<pos:position pos:line="15" pos:column="34"/></operator> <literal type="number" pos:line="15" pos:column="35">150<pos:position pos:line="15" pos:column="38"/></literal><operator pos:line="15" pos:column="38">)<pos:position pos:line="15" pos:column="39"/></operator> <operator pos:line="15" pos:column="40">&amp;&amp;<pos:position pos:line="15" pos:column="50"/></operator>
            <operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name><name pos:line="16" pos:column="14">master<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">-&gt;<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="22">serverState<pos:position pos:line="16" pos:column="33"/></name></name> <operator pos:line="16" pos:column="34">==<pos:position pos:line="16" pos:column="36"/></operator> <name pos:line="16" pos:column="37">fssHandleUploadRequest<pos:position pos:line="16" pos:column="59"/></name> <operator pos:line="16" pos:column="60">||<pos:position pos:line="16" pos:column="62"/></operator>
             <name><name pos:line="17" pos:column="14">master<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">serverState<pos:position pos:line="17" pos:column="33"/></name></name> <operator pos:line="17" pos:column="34">==<pos:position pos:line="17" pos:column="36"/></operator> <name pos:line="17" pos:column="37">fssHandleDataRequest<pos:position pos:line="17" pos:column="57"/></name><operator pos:line="17" pos:column="57">)<pos:position pos:line="17" pos:column="58"/></operator></expr>)<pos:position pos:line="17" pos:column="59"/></condition><then pos:line="17" pos:column="59"> <block pos:line="17" pos:column="60">{
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">checkDataConnPost<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">()<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="33"/></condition><then pos:line="18" pos:column="33"> <block pos:line="18" pos:column="34">{
            <comment type="line" pos:line="19" pos:column="13">// If the data connection is ready, start reading data (here)</comment>
            <comment type="line" pos:line="20" pos:column="13">// and forward the response to client (further below).</comment>
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">debugs<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">33<pos:position pos:line="21" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="24">7<pos:position pos:line="21" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="27">"data connection established, start data transfer"<pos:position pos:line="21" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="79"/></expr_stmt>
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><name><name pos:line="22" pos:column="17">master<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">-&gt;<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="25">serverState<pos:position pos:line="22" pos:column="36"/></name></name> <operator pos:line="22" pos:column="37">==<pos:position pos:line="22" pos:column="39"/></operator> <name pos:line="22" pos:column="40">fssHandleUploadRequest<pos:position pos:line="22" pos:column="62"/></name></expr>)<pos:position pos:line="22" pos:column="63"/></condition><then pos:line="22" pos:column="63">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">maybeReadUploadData<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">()<pos:position pos:line="23" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt></block></then></if>
        }<pos:position pos:line="24" pos:column="10"/></block></then> <else pos:line="24" pos:column="11">else <block pos:line="24" pos:column="16">{
            <comment type="line" pos:line="25" pos:column="13">// If we are waiting to accept the data connection, keep waiting.</comment>
            <if pos:line="26" pos:column="13">if <condition pos:line="26" pos:column="16">(<expr><call><name><name pos:line="26" pos:column="17">Comm<pos:position pos:line="26" pos:column="21"/></name><operator pos:line="26" pos:column="21">::<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="23">IsConnOpen<pos:position pos:line="26" pos:column="33"/></name></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">dataListenConn<pos:position pos:line="26" pos:column="48"/></name></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="50"/></condition><then pos:line="26" pos:column="50"> <block pos:line="26" pos:column="51">{
                <expr_stmt><expr><call><name pos:line="27" pos:column="17">debugs<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><literal type="number" pos:line="27" pos:column="24">33<pos:position pos:line="27" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="28">7<pos:position pos:line="27" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="31">"wait for the client to establish a data connection"<pos:position pos:line="27" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="85"/></expr_stmt>
                <expr_stmt><expr><name pos:line="28" pos:column="17">onDataAcceptCall<pos:position pos:line="28" pos:column="33"/></name> <operator pos:line="28" pos:column="34">=<pos:position pos:line="28" pos:column="35"/></operator> <name pos:line="28" pos:column="36">call<pos:position pos:line="28" pos:column="40"/></name></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
                <comment type="line" pos:line="29" pos:column="17">// TODO: Add connect timeout for passive connections listener?</comment>
                <comment type="line" pos:line="30" pos:column="17">// TODO: Remember server response so that we can forward it?</comment>
            }<pos:position pos:line="31" pos:column="14"/></block></then> <else pos:line="31" pos:column="15">else <block pos:line="31" pos:column="20">{
                <comment type="line" pos:line="32" pos:column="17">// Either the connection was establised and closed after the</comment>
                <comment type="line" pos:line="33" pos:column="17">// data was transferred OR we failed to establish an active</comment>
                <comment type="line" pos:line="34" pos:column="17">// data connection and already sent the error to the client.</comment>
                <comment type="line" pos:line="35" pos:column="17">// In either case, there is nothing more to do.</comment>
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">debugs<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><literal type="number" pos:line="36" pos:column="24">33<pos:position pos:line="36" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="28">7<pos:position pos:line="36" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="31">"done with data OR active connection failed"<pos:position pos:line="36" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="77"/></expr_stmt>
            }<pos:position pos:line="37" pos:column="14"/></block></else></if>
            <return pos:line="38" pos:column="13">return;<pos:position pos:line="38" pos:column="20"/></return>
        }<pos:position pos:line="39" pos:column="10"/></block></else></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="42" pos:column="5">MemBuf<pos:position pos:line="42" pos:column="11"/></name></type> <name pos:line="42" pos:column="12">mb<pos:position pos:line="42" pos:column="14"/></name></decl>;<pos:position pos:line="42" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="43" pos:column="5">mb<pos:position pos:line="43" pos:column="7"/></name><operator pos:line="43" pos:column="7">.<pos:position pos:line="43" pos:column="8"/></operator><name pos:line="43" pos:column="8">init<pos:position pos:line="43" pos:column="12"/></name></name><argument_list pos:line="43" pos:column="12">()<pos:position pos:line="43" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="44" pos:column="5">Ftp<pos:position pos:line="44" pos:column="8"/></name><operator pos:line="44" pos:column="8">::<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">PrintReply<pos:position pos:line="44" pos:column="20"/></name></name><argument_list pos:line="44" pos:column="20">(<argument><expr><name pos:line="44" pos:column="21">mb<pos:position pos:line="44" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="25">reply<pos:position pos:line="44" pos:column="30"/></name></expr></argument>)<pos:position pos:line="44" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">debugs<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="number" pos:line="46" pos:column="12">9<pos:position pos:line="46" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="15">2<pos:position pos:line="46" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="18">"FTP Client "<pos:position pos:line="46" pos:column="31"/></literal> <operator pos:line="46" pos:column="32">&lt;&lt;<pos:position pos:line="46" pos:column="40"/></operator> <name pos:line="46" pos:column="35">clientConnection<pos:position pos:line="46" pos:column="51"/></name></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">debugs<pos:position pos:line="47" pos:column="11"/></name><argument_list pos:line="47" pos:column="11">(<argument><expr><literal type="number" pos:line="47" pos:column="12">9<pos:position pos:line="47" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="15">2<pos:position pos:line="47" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="18">"FTP Client REPLY:\n---------\n"<pos:position pos:line="47" pos:column="50"/></literal> <operator pos:line="47" pos:column="51">&lt;&lt;<pos:position pos:line="47" pos:column="59"/></operator> <name><name pos:line="47" pos:column="54">mb<pos:position pos:line="47" pos:column="56"/></name><operator pos:line="47" pos:column="56">.<pos:position pos:line="47" pos:column="57"/></operator><name pos:line="47" pos:column="57">buf<pos:position pos:line="47" pos:column="60"/></name></name> <operator pos:line="47" pos:column="61">&lt;&lt;<pos:position pos:line="47" pos:column="69"/></operator>
           <literal type="string" pos:line="48" pos:column="12">"\n----------"<pos:position pos:line="48" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="50" pos:column="5">Comm<pos:position pos:line="50" pos:column="9"/></name><operator pos:line="50" pos:column="9">::<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">Write<pos:position pos:line="50" pos:column="16"/></name></name><argument_list pos:line="50" pos:column="16">(<argument><expr><name pos:line="50" pos:column="17">clientConnection<pos:position pos:line="50" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="35">&amp;<pos:position pos:line="50" pos:column="40"/></operator><name pos:line="50" pos:column="36">mb<pos:position pos:line="50" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="40">call<pos:position pos:line="50" pos:column="44"/></name></expr></argument>)<pos:position pos:line="50" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="46"/></expr_stmt>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
