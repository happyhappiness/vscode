<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3008_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">kick<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name><name pos:line="4" pos:column="10">Comm<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">IsConnOpen<pos:position pos:line="4" pos:column="26"/></name></name><argument_list pos:line="4" pos:column="26">(<argument><expr><name pos:line="4" pos:column="27">clientConnection<pos:position pos:line="4" pos:column="43"/></name></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="45"/></condition><then pos:line="4" pos:column="45"> <block pos:line="4" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">33<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">2<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="23">clientConnection<pos:position pos:line="5" pos:column="39"/></name> <operator pos:line="5" pos:column="40">&lt;&lt;<pos:position pos:line="5" pos:column="48"/></operator> <literal type="string" pos:line="5" pos:column="43">" Connection was closed"<pos:position pos:line="5" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="69"/></expr_stmt>
        <return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">pinning<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">.<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">pinned<pos:position pos:line="9" pos:column="23"/></name></name> <operator pos:line="9" pos:column="24">&amp;&amp;<pos:position pos:line="9" pos:column="34"/></operator> <operator pos:line="9" pos:column="27">!<pos:position pos:line="9" pos:column="28"/></operator><call><name><name pos:line="9" pos:column="28">Comm<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">::<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="34">IsConnOpen<pos:position pos:line="9" pos:column="44"/></name></name><argument_list pos:line="9" pos:column="44">(<argument><expr><name><name pos:line="9" pos:column="45">pinning<pos:position pos:line="9" pos:column="52"/></name><operator pos:line="9" pos:column="52">.<pos:position pos:line="9" pos:column="53"/></operator><name pos:line="9" pos:column="53">serverConnection<pos:position pos:line="9" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="71"/></condition><then pos:line="9" pos:column="71"> <block pos:line="9" pos:column="72">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">33<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">2<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="23">clientConnection<pos:position pos:line="10" pos:column="39"/></name> <operator pos:line="10" pos:column="40">&lt;&lt;<pos:position pos:line="10" pos:column="48"/></operator> <literal type="string" pos:line="10" pos:column="43">" Connection was pinned but server side gone. Terminating client connection"<pos:position pos:line="10" pos:column="119"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="121"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="11" pos:column="9">clientConnection<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">-&gt;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="27">close<pos:position pos:line="11" pos:column="32"/></name></name><argument_list pos:line="11" pos:column="32">()<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="15" pos:column="5">/** \par
     * We are done with the response, and we are either still receiving request
     * body (early response!) or have already stopped receiving anything.
     *
     * If we are still receiving, then clientParseRequest() below will fail.
     * (XXX: but then we will call readNextRequest() which may succeed and
     * execute a smuggled request as we are not done with the current request).
     *
     * If we stopped because we got everything, then try the next request.
     *
     * If we stopped receiving because of an error, then close now to avoid
     * getting stuck and to prevent accidental request smuggling.
     */</comment>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<decl><type><specifier pos:line="29" pos:column="9">const<pos:position pos:line="29" pos:column="14"/></specifier> <name pos:line="29" pos:column="15">char<pos:position pos:line="29" pos:column="19"/></name> <modifier pos:line="29" pos:column="20">*<pos:position pos:line="29" pos:column="21"/></modifier></type><name pos:line="29" pos:column="21">reason<pos:position pos:line="29" pos:column="27"/></name> <init pos:line="29" pos:column="28">= <expr><call><name pos:line="29" pos:column="30">stoppedReceiving<pos:position pos:line="29" pos:column="46"/></name><argument_list pos:line="29" pos:column="46">()<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr></init></decl>)<pos:position pos:line="29" pos:column="49"/></condition><then pos:line="29" pos:column="49"> <block pos:line="29" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">33<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">3<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="23">"closing for earlier request error: "<pos:position pos:line="30" pos:column="60"/></literal> <operator pos:line="30" pos:column="61">&lt;&lt;<pos:position pos:line="30" pos:column="69"/></operator> <name pos:line="30" pos:column="64">reason<pos:position pos:line="30" pos:column="70"/></name></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="31" pos:column="9">clientConnection<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">-&gt;<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="27">close<pos:position pos:line="31" pos:column="32"/></name></name><argument_list pos:line="31" pos:column="32">()<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
        <return pos:line="32" pos:column="9">return;<pos:position pos:line="32" pos:column="16"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="35" pos:column="5">/** \par
     * Attempt to parse a request from the request buffer.
     * If we've been fed a pipelined request it may already
     * be in our read buffer.
     *
     \par
     * This needs to fall through - if we're unlucky and parse the _last_ request
     * from our read buffer we may never re-register for another client read.
     */</comment>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><call><name pos:line="45" pos:column="9">clientParseRequests<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">()<pos:position pos:line="45" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="31"/></condition><then pos:line="45" pos:column="31"> <block pos:line="45" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">debugs<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><literal type="number" pos:line="46" pos:column="16">33<pos:position pos:line="46" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="20">3<pos:position pos:line="46" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="23">clientConnection<pos:position pos:line="46" pos:column="39"/></name> <operator pos:line="46" pos:column="40">&lt;&lt;<pos:position pos:line="46" pos:column="48"/></operator> <literal type="string" pos:line="46" pos:column="43">": parsed next request from buffer"<pos:position pos:line="46" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="49" pos:column="5">/** \par
     * Either we need to kick-start another read or, if we have
     * a half-closed connection, kill it after the last request.
     * This saves waiting for half-closed connections to finished being
     * half-closed _AND_ then, sometimes, spending "Timeout" time in
     * the keepalive "Waiting for next request" state.
     */</comment>
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><call><name pos:line="56" pos:column="9">commIsHalfClosed<pos:position pos:line="56" pos:column="25"/></name><argument_list pos:line="56" pos:column="25">(<argument><expr><name><name pos:line="56" pos:column="26">clientConnection<pos:position pos:line="56" pos:column="42"/></name><operator pos:line="56" pos:column="42">-&gt;<pos:position pos:line="56" pos:column="47"/></operator><name pos:line="56" pos:column="44">fd<pos:position pos:line="56" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="47"/></argument_list></call> <operator pos:line="56" pos:column="48">&amp;&amp;<pos:position pos:line="56" pos:column="58"/></operator> <call><name><name pos:line="56" pos:column="51">pipeline<pos:position pos:line="56" pos:column="59"/></name><operator pos:line="56" pos:column="59">.<pos:position pos:line="56" pos:column="60"/></operator><name pos:line="56" pos:column="60">empty<pos:position pos:line="56" pos:column="65"/></name></name><argument_list pos:line="56" pos:column="65">()<pos:position pos:line="56" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="68"/></condition><then pos:line="56" pos:column="68"> <block pos:line="56" pos:column="69">{
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">debugs<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><literal type="number" pos:line="57" pos:column="16">33<pos:position pos:line="57" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="20">3<pos:position pos:line="57" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="23">"half-closed client with no pending requests, closing"<pos:position pos:line="57" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="79"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="58" pos:column="9">clientConnection<pos:position pos:line="58" pos:column="25"/></name><operator pos:line="58" pos:column="25">-&gt;<pos:position pos:line="58" pos:column="30"/></operator><name pos:line="58" pos:column="27">close<pos:position pos:line="58" pos:column="32"/></name></name><argument_list pos:line="58" pos:column="32">()<pos:position pos:line="58" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="35"/></expr_stmt>
        <return pos:line="59" pos:column="9">return;<pos:position pos:line="59" pos:column="16"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="62" pos:column="5">/** \par
     * At this point we either have a parsed request (which we've
     * kicked off the processing for) or not. If we have a deferred
     * request (parsed but deferred for pipeling processing reasons)
     * then look at processing it. If not, simply kickstart
     * another read.
     */</comment>
    <decl_stmt><decl><type><name><name pos:line="69" pos:column="5">Http<pos:position pos:line="69" pos:column="9"/></name><operator pos:line="69" pos:column="9">::<pos:position pos:line="69" pos:column="11"/></operator><name pos:line="69" pos:column="11">StreamPointer<pos:position pos:line="69" pos:column="24"/></name></name></type> <name pos:line="69" pos:column="25">deferredRequest<pos:position pos:line="69" pos:column="40"/></name> <init pos:line="69" pos:column="41">= <expr><call><name><name pos:line="69" pos:column="43">pipeline<pos:position pos:line="69" pos:column="51"/></name><operator pos:line="69" pos:column="51">.<pos:position pos:line="69" pos:column="52"/></operator><name pos:line="69" pos:column="52">front<pos:position pos:line="69" pos:column="57"/></name></name><argument_list pos:line="69" pos:column="57">()<pos:position pos:line="69" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="69" pos:column="60"/></decl_stmt>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">deferredRequest<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">!=<pos:position pos:line="70" pos:column="27"/></operator> <literal type="null" pos:line="70" pos:column="28">nullptr<pos:position pos:line="70" pos:column="35"/></literal></expr>)<pos:position pos:line="70" pos:column="36"/></condition><then pos:line="70" pos:column="36"> <block pos:line="70" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">debugs<pos:position pos:line="71" pos:column="15"/></name><argument_list pos:line="71" pos:column="15">(<argument><expr><literal type="number" pos:line="71" pos:column="16">33<pos:position pos:line="71" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="20">3<pos:position pos:line="71" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="23">clientConnection<pos:position pos:line="71" pos:column="39"/></name> <operator pos:line="71" pos:column="40">&lt;&lt;<pos:position pos:line="71" pos:column="48"/></operator> <literal type="string" pos:line="71" pos:column="43">": calling PushDeferredIfNeeded"<pos:position pos:line="71" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">ClientSocketContextPushDeferredIfNeeded<pos:position pos:line="72" pos:column="48"/></name><argument_list pos:line="72" pos:column="48">(<argument><expr><name pos:line="72" pos:column="49">deferredRequest<pos:position pos:line="72" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="66">this<pos:position pos:line="72" pos:column="70"/></name></expr></argument>)<pos:position pos:line="72" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></then> <elseif pos:line="73" pos:column="7">else <if pos:line="73" pos:column="12">if <condition pos:line="73" pos:column="15">(<expr><name><name pos:line="73" pos:column="16">flags<pos:position pos:line="73" pos:column="21"/></name><operator pos:line="73" pos:column="21">.<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="22">readMore<pos:position pos:line="73" pos:column="30"/></name></name></expr>)<pos:position pos:line="73" pos:column="31"/></condition><then pos:line="73" pos:column="31"> <block pos:line="73" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">debugs<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><literal type="number" pos:line="74" pos:column="16">33<pos:position pos:line="74" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="20">3<pos:position pos:line="74" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="23">clientConnection<pos:position pos:line="74" pos:column="39"/></name> <operator pos:line="74" pos:column="40">&lt;&lt;<pos:position pos:line="74" pos:column="48"/></operator> <literal type="string" pos:line="74" pos:column="43">": calling readNextRequest()"<pos:position pos:line="74" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">readNextRequest<pos:position pos:line="75" pos:column="24"/></name><argument_list pos:line="75" pos:column="24">()<pos:position pos:line="75" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if></elseif> <else pos:line="76" pos:column="7">else <block pos:line="76" pos:column="12">{
        <comment type="line" pos:line="77" pos:column="9">// XXX: Can this happen? CONNECT tunnels have deferredRequest set.</comment>
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">debugs<pos:position pos:line="78" pos:column="15"/></name><argument_list pos:line="78" pos:column="15">(<argument><expr><literal type="number" pos:line="78" pos:column="16">33<pos:position pos:line="78" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="20">DBG_IMPORTANT<pos:position pos:line="78" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="35">MYNAME<pos:position pos:line="78" pos:column="41"/></name> <operator pos:line="78" pos:column="42">&lt;&lt;<pos:position pos:line="78" pos:column="50"/></operator> <literal type="string" pos:line="78" pos:column="45">"abandoning "<pos:position pos:line="78" pos:column="58"/></literal> <operator pos:line="78" pos:column="59">&lt;&lt;<pos:position pos:line="78" pos:column="67"/></operator> <name pos:line="78" pos:column="62">clientConnection<pos:position pos:line="78" pos:column="78"/></name></expr></argument>)<pos:position pos:line="78" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="79" pos:column="6"/></block></else></if>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
