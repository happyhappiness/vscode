<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3227_last_repos.cpp" pos:tabs="8"><function type="operator"><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ip<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Address<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">operator <name pos:line="2" pos:column="23">=<pos:position pos:line="2" pos:column="24"/></name></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">addrinfo<pos:position pos:line="2" pos:column="46"/></name></name> <modifier pos:line="2" pos:column="47">&amp;<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="48">s<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{

    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">sockaddr_in<pos:position pos:line="5" pos:column="23"/></name></name><modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type> <name pos:line="5" pos:column="25">ipv4<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name pos:line="5" pos:column="32">NULL<pos:position pos:line="5" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">sockaddr_in6<pos:position pos:line="7" pos:column="24"/></name></name><modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type> <name pos:line="7" pos:column="26">ipv6<pos:position pos:line="7" pos:column="30"/></name> <init pos:line="7" pos:column="31">= <expr><name pos:line="7" pos:column="33">NULL<pos:position pos:line="7" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>

    <comment type="line" pos:line="9" pos:column="5">//struct addrinfo {</comment>
    <comment type="line" pos:line="10" pos:column="5">//             int ai_flags;           /* input flags */</comment>
    <comment type="line" pos:line="11" pos:column="5">//             int ai_family;          /* protocol family for socket */</comment>
    <comment type="line" pos:line="12" pos:column="5">//             int ai_socktype;        /* socket type */</comment>
    <comment type="line" pos:line="13" pos:column="5">//             int ai_protocol;        /* protocol for socket */</comment>
    <comment type="line" pos:line="14" pos:column="5">//             socklen_t ai_addrlen;   /* length of socket-address */</comment>
    <comment type="line" pos:line="15" pos:column="5">//             struct sockaddr *ai_addr; /* socket-address for socket */</comment>
    <comment type="line" pos:line="16" pos:column="5">//             char *ai_canonname;     /* canonical name for service location */</comment>
    <comment type="line" pos:line="17" pos:column="5">//             struct addrinfo *ai_next; /* pointer to next in list */</comment>
    <comment type="line" pos:line="18" pos:column="5">//}</comment>

    <switch pos:line="20" pos:column="5">switch <condition pos:line="20" pos:column="12">(<expr><name><name pos:line="20" pos:column="13">s<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">.<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">ai_family<pos:position pos:line="20" pos:column="24"/></name></name></expr>)<pos:position pos:line="20" pos:column="25"/></condition> <block pos:line="20" pos:column="26">{

    <case pos:line="22" pos:column="5">case <expr><name pos:line="22" pos:column="10">AF_INET<pos:position pos:line="22" pos:column="17"/></name></expr>:<pos:position pos:line="22" pos:column="18"/></case>
        <expr_stmt><expr><name pos:line="23" pos:column="9">ipv4<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <operator pos:line="23" pos:column="16">(<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">sockaddr_in<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">*<pos:position pos:line="23" pos:column="29"/></operator><operator pos:line="23" pos:column="29">)<pos:position pos:line="23" pos:column="30"/></operator><operator pos:line="23" pos:column="30">(<pos:position pos:line="23" pos:column="31"/></operator><name><name pos:line="23" pos:column="31">s<pos:position pos:line="23" pos:column="32"/></name><operator pos:line="23" pos:column="32">.<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="33">ai_addr<pos:position pos:line="23" pos:column="40"/></name></name><operator pos:line="23" pos:column="40">)<pos:position pos:line="23" pos:column="41"/></operator></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
        <comment type="block" pos:line="24" pos:column="9">/* this */</comment>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">assert<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">ipv4<pos:position pos:line="25" pos:column="20"/></name></expr></argument>)<pos:position pos:line="25" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">operator<name pos:line="26" pos:column="17">=<pos:position pos:line="26" pos:column="18"/></name></name><argument_list pos:line="26" pos:column="18">(<argument><expr><operator pos:line="26" pos:column="19">*<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">ipv4<pos:position pos:line="26" pos:column="24"/></name></expr></argument>)<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
        <break pos:line="27" pos:column="9">break;<pos:position pos:line="27" pos:column="15"/></break>

    <case pos:line="29" pos:column="5">case <expr><name pos:line="29" pos:column="10">AF_INET6<pos:position pos:line="29" pos:column="18"/></name></expr>:<pos:position pos:line="29" pos:column="19"/></case>
        <expr_stmt><expr><name pos:line="30" pos:column="9">ipv6<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <operator pos:line="30" pos:column="16">(<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">sockaddr_in6<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">*<pos:position pos:line="30" pos:column="30"/></operator><operator pos:line="30" pos:column="30">)<pos:position pos:line="30" pos:column="31"/></operator><operator pos:line="30" pos:column="31">(<pos:position pos:line="30" pos:column="32"/></operator><name><name pos:line="30" pos:column="32">s<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">.<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="34">ai_addr<pos:position pos:line="30" pos:column="41"/></name></name><operator pos:line="30" pos:column="41">)<pos:position pos:line="30" pos:column="42"/></operator></expr>;<pos:position pos:line="30" pos:column="43"/></expr_stmt>
        <comment type="block" pos:line="31" pos:column="9">/* this */</comment>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">assert<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><name pos:line="32" pos:column="16">ipv6<pos:position pos:line="32" pos:column="20"/></name></expr></argument>)<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">operator<name pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></name></name><argument_list pos:line="33" pos:column="18">(<argument><expr><operator pos:line="33" pos:column="19">*<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">ipv6<pos:position pos:line="33" pos:column="24"/></name></expr></argument>)<pos:position pos:line="33" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt>
        <break pos:line="34" pos:column="9">break;<pos:position pos:line="34" pos:column="15"/></break>

    <case pos:line="36" pos:column="5">case <expr><name pos:line="36" pos:column="10">AF_UNSPEC<pos:position pos:line="36" pos:column="19"/></name></expr>:<pos:position pos:line="36" pos:column="20"/></case>
    <default pos:line="37" pos:column="5">default:<pos:position pos:line="37" pos:column="13"/></default>
        <comment type="line" pos:line="38" pos:column="9">// attempt to handle partially initialised addrinfo.</comment>
        <comment type="line" pos:line="39" pos:column="9">// such as those where data only comes from getsockopt()</comment>
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name><name pos:line="40" pos:column="13">s<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">.<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="15">ai_addr<pos:position pos:line="40" pos:column="22"/></name></name> <operator pos:line="40" pos:column="23">!=<pos:position pos:line="40" pos:column="25"/></operator> <name pos:line="40" pos:column="26">NULL<pos:position pos:line="40" pos:column="30"/></name></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31"> <block pos:line="40" pos:column="32">{
            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><name><name pos:line="41" pos:column="17">s<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">.<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">ai_addrlen<pos:position pos:line="41" pos:column="29"/></name></name> <operator pos:line="41" pos:column="30">==<pos:position pos:line="41" pos:column="32"/></operator> <sizeof pos:line="41" pos:column="33">sizeof<argument_list pos:line="41" pos:column="39">(<argument><expr pos:line="41" pos:column="40">struct <name pos:line="41" pos:column="47">sockaddr_in6<pos:position pos:line="41" pos:column="59"/></name></expr></argument>)<pos:position pos:line="41" pos:column="60"/></argument_list></sizeof></expr>)<pos:position pos:line="41" pos:column="61"/></condition><then pos:line="41" pos:column="61"> <block pos:line="41" pos:column="62">{
                <expr_stmt><expr><call><name pos:line="42" pos:column="17">operator<name pos:line="42" pos:column="25">=<pos:position pos:line="42" pos:column="26"/></name></name><argument_list pos:line="42" pos:column="26">(<argument><expr><operator pos:line="42" pos:column="27">*<pos:position pos:line="42" pos:column="28"/></operator><operator pos:line="42" pos:column="28">(<pos:position pos:line="42" pos:column="29"/></operator><operator pos:line="42" pos:column="29">(<pos:position pos:line="42" pos:column="30"/></operator>struct <name pos:line="42" pos:column="37">sockaddr_in6<pos:position pos:line="42" pos:column="49"/></name><operator pos:line="42" pos:column="49">*<pos:position pos:line="42" pos:column="50"/></operator><operator pos:line="42" pos:column="50">)<pos:position pos:line="42" pos:column="51"/></operator><name><name pos:line="42" pos:column="51">s<pos:position pos:line="42" pos:column="52"/></name><operator pos:line="42" pos:column="52">.<pos:position pos:line="42" pos:column="53"/></operator><name pos:line="42" pos:column="53">ai_addr<pos:position pos:line="42" pos:column="60"/></name></name><operator pos:line="42" pos:column="60">)<pos:position pos:line="42" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="42" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="63"/></expr_stmt>
                <return pos:line="43" pos:column="17">return <expr><literal type="boolean" pos:line="43" pos:column="24">true<pos:position pos:line="43" pos:column="28"/></literal></expr>;<pos:position pos:line="43" pos:column="29"/></return>
            }<pos:position pos:line="44" pos:column="14"/></block></then> <elseif pos:line="44" pos:column="15">else <if pos:line="44" pos:column="20">if <condition pos:line="44" pos:column="23">(<expr><name><name pos:line="44" pos:column="24">s<pos:position pos:line="44" pos:column="25"/></name><operator pos:line="44" pos:column="25">.<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="26">ai_addrlen<pos:position pos:line="44" pos:column="36"/></name></name> <operator pos:line="44" pos:column="37">==<pos:position pos:line="44" pos:column="39"/></operator> <sizeof pos:line="44" pos:column="40">sizeof<argument_list pos:line="44" pos:column="46">(<argument><expr pos:line="44" pos:column="47">struct <name pos:line="44" pos:column="54">sockaddr_in<pos:position pos:line="44" pos:column="65"/></name></expr></argument>)<pos:position pos:line="44" pos:column="66"/></argument_list></sizeof></expr>)<pos:position pos:line="44" pos:column="67"/></condition><then pos:line="44" pos:column="67"> <block pos:line="44" pos:column="68">{
                <expr_stmt><expr><call><name pos:line="45" pos:column="17">operator<name pos:line="45" pos:column="25">=<pos:position pos:line="45" pos:column="26"/></name></name><argument_list pos:line="45" pos:column="26">(<argument><expr><operator pos:line="45" pos:column="27">*<pos:position pos:line="45" pos:column="28"/></operator><operator pos:line="45" pos:column="28">(<pos:position pos:line="45" pos:column="29"/></operator><operator pos:line="45" pos:column="29">(<pos:position pos:line="45" pos:column="30"/></operator>struct <name pos:line="45" pos:column="37">sockaddr_in<pos:position pos:line="45" pos:column="48"/></name><operator pos:line="45" pos:column="48">*<pos:position pos:line="45" pos:column="49"/></operator><operator pos:line="45" pos:column="49">)<pos:position pos:line="45" pos:column="50"/></operator><name><name pos:line="45" pos:column="50">s<pos:position pos:line="45" pos:column="51"/></name><operator pos:line="45" pos:column="51">.<pos:position pos:line="45" pos:column="52"/></operator><name pos:line="45" pos:column="52">ai_addr<pos:position pos:line="45" pos:column="59"/></name></name><operator pos:line="45" pos:column="59">)<pos:position pos:line="45" pos:column="60"/></operator></expr></argument>)<pos:position pos:line="45" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="62"/></expr_stmt>
                <return pos:line="46" pos:column="17">return <expr><literal type="boolean" pos:line="46" pos:column="24">true<pos:position pos:line="46" pos:column="28"/></literal></expr>;<pos:position pos:line="46" pos:column="29"/></return>
            }<pos:position pos:line="47" pos:column="14"/></block></then></if></elseif></if>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>
        <return pos:line="49" pos:column="9">return <expr><literal type="boolean" pos:line="49" pos:column="16">false<pos:position pos:line="49" pos:column="21"/></literal></expr>;<pos:position pos:line="49" pos:column="22"/></return>
    }<pos:position pos:line="50" pos:column="6"/></block></switch>

    <return pos:line="52" pos:column="5">return <expr><literal type="boolean" pos:line="52" pos:column="12">true<pos:position pos:line="52" pos:column="16"/></literal></expr>;<pos:position pos:line="52" pos:column="17"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
