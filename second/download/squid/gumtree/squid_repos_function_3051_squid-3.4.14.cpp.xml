<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3051_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">complete<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">()<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">20<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"storeComplete: '"<pos:position pos:line="4" pos:column="37"/></literal> <operator pos:line="4" pos:column="38">&lt;&lt;<pos:position pos:line="4" pos:column="46"/></operator> <call><name pos:line="4" pos:column="41">getMD5Text<pos:position pos:line="4" pos:column="51"/></name><argument_list pos:line="4" pos:column="51">()<pos:position pos:line="4" pos:column="53"/></argument_list></call> <operator pos:line="4" pos:column="54">&lt;&lt;<pos:position pos:line="4" pos:column="62"/></operator> <literal type="string" pos:line="4" pos:column="57">"'"<pos:position pos:line="4" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="62"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">store_status<pos:position pos:line="6" pos:column="21"/></name> <operator pos:line="6" pos:column="22">!=<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="25">STORE_PENDING<pos:position pos:line="6" pos:column="38"/></name></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39"> <block pos:line="6" pos:column="40">{
        <comment type="block" pos:line="7" pos:column="9">/*
         * if we're not STORE_PENDING, then probably we got aborted
         * and there should be NO clients on this entry
         */</comment>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><call><name pos:line="11" pos:column="16">EBIT_TEST<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">flags<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">ENTRY_ABORTED<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">assert<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name><name pos:line="12" pos:column="16">mem_obj<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">-&gt;<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="25">nclients<pos:position pos:line="12" pos:column="33"/></name></name> <operator pos:line="12" pos:column="34">==<pos:position pos:line="12" pos:column="36"/></operator> <literal type="number" pos:line="12" pos:column="37">0<pos:position pos:line="12" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="16" pos:column="5">/* This is suspect: mem obj offsets include the headers. do we adjust for that
     * in use of object_sz?
     */</comment>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">mem_obj<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">object_sz<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <call><name><name pos:line="19" pos:column="26">mem_obj<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">-&gt;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="35">endOffset<pos:position pos:line="19" pos:column="44"/></name></name><argument_list pos:line="19" pos:column="44">()<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>

    <expr_stmt><expr><name pos:line="21" pos:column="5">store_status<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="20">STORE_OK<pos:position pos:line="21" pos:column="28"/></name></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">assert<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name pos:line="23" pos:column="12">mem_status<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">==<pos:position pos:line="23" pos:column="25"/></operator> <name pos:line="23" pos:column="26">NOT_IN_MEMORY<pos:position pos:line="23" pos:column="39"/></name></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><call><name pos:line="25" pos:column="10">validLength<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">()<pos:position pos:line="25" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="24"/></condition><then pos:line="25" pos:column="24"> <block pos:line="25" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">EBIT_SET<pos:position pos:line="26" pos:column="17"/></name><argument_list pos:line="26" pos:column="17">(<argument><expr><name pos:line="26" pos:column="18">flags<pos:position pos:line="26" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="25">ENTRY_BAD_LENGTH<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">releaseRequest<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">()<pos:position pos:line="27" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><name pos:line="30" pos:column="5">USE_CACHE_DIGESTS<pos:position pos:line="30" pos:column="22"/></name></expr></cpp:if>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">mem_obj<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">-&gt;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="18">request<pos:position pos:line="31" pos:column="25"/></name></name></expr>)<pos:position pos:line="31" pos:column="26"/></condition><then pos:line="31" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="9">mem_obj<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">-&gt;<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="18">request<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">-&gt;<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="27">hier<pos:position pos:line="32" pos:column="31"/></name><operator pos:line="32" pos:column="31">.<pos:position pos:line="32" pos:column="32"/></operator><name pos:line="32" pos:column="32">store_complete_stop<pos:position pos:line="32" pos:column="51"/></name></name> <operator pos:line="32" pos:column="52">=<pos:position pos:line="32" pos:column="53"/></operator> <name pos:line="32" pos:column="54">current_time<pos:position pos:line="32" pos:column="66"/></name></expr>;<pos:position pos:line="32" pos:column="67"/></expr_stmt></block></then></if>

<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="35" pos:column="5">/*
     * We used to call invokeHandlers, then storeSwapOut.  However,
     * Madhukar Reddy &lt;myreddy@persistence.com&gt; reported that
     * responses without content length would sometimes get released
     * in client_side, thinking that the response is incomplete.
     */</comment>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">invokeHandlers<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">()<pos:position pos:line="41" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="22"/></expr_stmt>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
