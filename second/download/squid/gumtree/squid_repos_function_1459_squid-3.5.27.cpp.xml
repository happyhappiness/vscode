<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1459_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">substr<pos:position pos:line="2" pos:column="13"/></name></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">size_type<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">pos<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="29">size_type<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">n<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list> <specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">SBuf<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">rv<pos:position pos:line="4" pos:column="12"/></name><argument_list pos:line="4" pos:column="12">(<argument><expr><operator pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">this<pos:position pos:line="4" pos:column="18"/></name></expr></argument>)<pos:position pos:line="4" pos:column="19"/></argument_list></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">rv<pos:position pos:line="5" pos:column="7"/></name><operator pos:line="5" pos:column="7">.<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">chop<pos:position pos:line="5" pos:column="12"/></name></name><argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">pos<pos:position pos:line="5" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="18">n<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt> <comment type="line" pos:line="5" pos:column="22">//stats handled by callee</comment>
    <return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">rv<pos:position pos:line="6" pos:column="14"/></name></expr>;<pos:position pos:line="6" pos:column="15"/></return>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
