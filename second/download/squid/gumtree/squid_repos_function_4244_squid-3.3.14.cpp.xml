<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4244_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">mimicExtensions<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name><name pos:line="2" pos:column="17">Ssl<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">X509_Pointer<pos:position pos:line="2" pos:column="34"/></name></name> <modifier pos:line="2" pos:column="35">&amp;<pos:position pos:line="2" pos:column="40"/></modifier></type> <name pos:line="2" pos:column="37">cert<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="43">Ssl<pos:position pos:line="2" pos:column="46"/></name><operator pos:line="2" pos:column="46">::<pos:position pos:line="2" pos:column="48"/></operator><name pos:line="2" pos:column="48">X509_Pointer<pos:position pos:line="2" pos:column="60"/></name></name> <specifier pos:line="2" pos:column="61">const<pos:position pos:line="2" pos:column="66"/></specifier> <modifier pos:line="2" pos:column="67">&amp;<pos:position pos:line="2" pos:column="72"/></modifier></type> <name pos:line="2" pos:column="69">mimicCert<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name><name pos:line="4" pos:column="16">extensions<pos:position pos:line="4" pos:column="26"/></name><index pos:line="4" pos:column="26">[]<pos:position pos:line="4" pos:column="28"/></index></name><init pos:line="4" pos:column="28">= <expr><block pos:line="4" pos:column="30">{
        <expr><name pos:line="5" pos:column="9">NID_key_usage<pos:position pos:line="5" pos:column="22"/></name></expr>,
        <expr><name pos:line="6" pos:column="9">NID_ext_key_usage<pos:position pos:line="6" pos:column="26"/></name></expr>,
        <expr><name pos:line="7" pos:column="9">NID_basic_constraints<pos:position pos:line="7" pos:column="30"/></name></expr>,
        <expr><literal type="number" pos:line="8" pos:column="9">0<pos:position pos:line="8" pos:column="10"/></literal></expr>
    }<pos:position pos:line="9" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="9" pos:column="7"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">nid<pos:position pos:line="11" pos:column="12"/></name></decl>;<pos:position pos:line="11" pos:column="13"/></decl_stmt>
    <for pos:line="12" pos:column="5">for <control pos:line="12" pos:column="9">(<init><decl><type><name pos:line="12" pos:column="10">int<pos:position pos:line="12" pos:column="13"/></name></type> <name pos:line="12" pos:column="14">i<pos:position pos:line="12" pos:column="15"/></name> <init pos:line="12" pos:column="16">= <expr><literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="20"/></init> <condition><expr><operator pos:line="12" pos:column="21">(<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">nid<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">=<pos:position pos:line="12" pos:column="27"/></operator> <name><name pos:line="12" pos:column="28">extensions<pos:position pos:line="12" pos:column="38"/></name><index pos:line="12" pos:column="38">[<expr><name pos:line="12" pos:column="39">i<pos:position pos:line="12" pos:column="40"/></name></expr>]<pos:position pos:line="12" pos:column="41"/></index></name><operator pos:line="12" pos:column="41">)<pos:position pos:line="12" pos:column="42"/></operator> <operator pos:line="12" pos:column="43">!=<pos:position pos:line="12" pos:column="45"/></operator> <literal type="number" pos:line="12" pos:column="46">0<pos:position pos:line="12" pos:column="47"/></literal></expr>;<pos:position pos:line="12" pos:column="48"/></condition> <incr><expr><operator pos:line="12" pos:column="49">++<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="51">i<pos:position pos:line="12" pos:column="52"/></name></expr></incr>)<pos:position pos:line="12" pos:column="53"/></control> <block pos:line="12" pos:column="54">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name pos:line="13" pos:column="15">int<pos:position pos:line="13" pos:column="18"/></name></type> <name pos:line="13" pos:column="19">pos<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><call><name pos:line="13" pos:column="25">X509_get_ext_by_NID<pos:position pos:line="13" pos:column="44"/></name><argument_list pos:line="13" pos:column="44">(<argument><expr><call><name><name pos:line="13" pos:column="45">mimicCert<pos:position pos:line="13" pos:column="54"/></name><operator pos:line="13" pos:column="54">.<pos:position pos:line="13" pos:column="55"/></operator><name pos:line="13" pos:column="55">get<pos:position pos:line="13" pos:column="58"/></name></name><argument_list pos:line="13" pos:column="58">()<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="62">nid<pos:position pos:line="13" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="67">-<pos:position pos:line="13" pos:column="68"/></operator><literal type="number" pos:line="13" pos:column="68">1<pos:position pos:line="13" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="71"/></decl_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<decl><type><name pos:line="14" pos:column="13">X509_EXTENSION<pos:position pos:line="14" pos:column="27"/></name> <modifier pos:line="14" pos:column="28">*<pos:position pos:line="14" pos:column="29"/></modifier></type><name pos:line="14" pos:column="29">ext<pos:position pos:line="14" pos:column="32"/></name> <init pos:line="14" pos:column="33">= <expr><call><name pos:line="14" pos:column="35">X509_get_ext<pos:position pos:line="14" pos:column="47"/></name><argument_list pos:line="14" pos:column="47">(<argument><expr><call><name><name pos:line="14" pos:column="48">mimicCert<pos:position pos:line="14" pos:column="57"/></name><operator pos:line="14" pos:column="57">.<pos:position pos:line="14" pos:column="58"/></operator><name pos:line="14" pos:column="58">get<pos:position pos:line="14" pos:column="61"/></name></name><argument_list pos:line="14" pos:column="61">()<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="14" pos:column="65">pos<pos:position pos:line="14" pos:column="68"/></name></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></call></expr></init></decl>)<pos:position pos:line="14" pos:column="70"/></condition><then pos:line="14" pos:column="70">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="13">X509_add_ext<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><call><name><name pos:line="15" pos:column="26">cert<pos:position pos:line="15" pos:column="30"/></name><operator pos:line="15" pos:column="30">.<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="31">get<pos:position pos:line="15" pos:column="34"/></name></name><argument_list pos:line="15" pos:column="34">()<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="15" pos:column="38">ext<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="43">-<pos:position pos:line="15" pos:column="44"/></operator><literal type="number" pos:line="15" pos:column="44">1<pos:position pos:line="15" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt></block></then></if>
    }<pos:position pos:line="16" pos:column="6"/></block></for>

    <comment type="line" pos:line="18" pos:column="5">// We could also restrict mimicking of the CA extension to CA:FALSE</comment>
    <comment type="line" pos:line="19" pos:column="5">// because Squid does not generate valid fake CA certificates.</comment>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
