<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1814_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">external_acl<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">add<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">ExternalACLEntryPointer<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">&amp;<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="50">anEntry<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">trimCache<pos:position pos:line="4" pos:column="14"/></name><argument_list pos:line="4" pos:column="14">()<pos:position pos:line="4" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">anEntry<pos:position pos:line="5" pos:column="19"/></name> <operator pos:line="5" pos:column="20">!=<pos:position pos:line="5" pos:column="22"/></operator> <name pos:line="5" pos:column="23">NULL<pos:position pos:line="5" pos:column="27"/></name></expr></argument>)<pos:position pos:line="5" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name> <argument_list pos:line="6" pos:column="12">(<argument><expr><name><name pos:line="6" pos:column="13">anEntry<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">-&gt;<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="22">def<pos:position pos:line="6" pos:column="25"/></name></name> <operator pos:line="6" pos:column="26">==<pos:position pos:line="6" pos:column="28"/></operator> <name pos:line="6" pos:column="29">NULL<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">anEntry<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">-&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">def<pos:position pos:line="7" pos:column="17"/></name></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">this<pos:position pos:line="7" pos:column="24"/></name></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">ExternalACLEntry<pos:position pos:line="8" pos:column="21"/></name> <modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type><name pos:line="8" pos:column="23">e<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><cast type="const" pos:line="8" pos:column="27">const_cast<argument_list type="generic" pos:line="8" pos:column="37">&lt;<argument><expr><name pos:line="8" pos:column="38">ExternalACLEntry<pos:position pos:line="8" pos:column="54"/></name> <operator pos:line="8" pos:column="55">*<pos:position pos:line="8" pos:column="56"/></operator></expr></argument>&gt;<pos:position pos:line="8" pos:column="60"/></argument_list><argument_list pos:line="8" pos:column="57">(<argument><expr><call><name><name pos:line="8" pos:column="58">anEntry<pos:position pos:line="8" pos:column="65"/></name><operator pos:line="8" pos:column="65">.<pos:position pos:line="8" pos:column="66"/></operator><name pos:line="8" pos:column="66">getRaw<pos:position pos:line="8" pos:column="72"/></name></name><argument_list pos:line="8" pos:column="72">()<pos:position pos:line="8" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="75"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="8" pos:column="76"/></decl_stmt> <comment type="line" pos:line="8" pos:column="77">// XXX: make hash a std::map of Pointer.</comment>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">hash_join<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">cache<pos:position pos:line="9" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="22">e<pos:position pos:line="9" pos:column="23"/></name></expr></argument>)<pos:position pos:line="9" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">dlinkAdd<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><name pos:line="10" pos:column="14">e<pos:position pos:line="10" pos:column="15"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="17">&amp;<pos:position pos:line="10" pos:column="22"/></operator><name><name pos:line="10" pos:column="18">e<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">-&gt;<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="21">lru<pos:position pos:line="10" pos:column="24"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="26">&amp;<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="27">lru_list<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="11" pos:column="5">e<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">-&gt;<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="8">lock<pos:position pos:line="11" pos:column="12"/></name></name><argument_list pos:line="11" pos:column="12">()<pos:position pos:line="11" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="15"/></expr_stmt> <comment type="line" pos:line="11" pos:column="16">//cbdataReference(e); // lock it on behalf of the hash</comment>
    <expr_stmt><expr><operator pos:line="12" pos:column="5">++<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">cache_entries<pos:position pos:line="12" pos:column="20"/></name></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
