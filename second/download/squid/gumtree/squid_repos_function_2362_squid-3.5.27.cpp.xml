<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2362_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">connectDone<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name><name pos:line="2" pos:column="29">Comm<pos:position pos:line="2" pos:column="33"/></name><operator pos:line="2" pos:column="33">::<pos:position pos:line="2" pos:column="35"/></operator><name pos:line="2" pos:column="35">ConnectionPointer<pos:position pos:line="2" pos:column="52"/></name></name> <modifier pos:line="2" pos:column="53">&amp;<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="54">conn<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="60">Comm<pos:position pos:line="2" pos:column="64"/></name><operator pos:line="2" pos:column="64">::<pos:position pos:line="2" pos:column="66"/></operator><name pos:line="2" pos:column="66">Flag<pos:position pos:line="2" pos:column="70"/></name></name></type> <name pos:line="2" pos:column="71">status<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="79">int<pos:position pos:line="2" pos:column="82"/></name></type> <name pos:line="2" pos:column="83">xerrno<pos:position pos:line="2" pos:column="89"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="90"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">status<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">!=<pos:position pos:line="4" pos:column="18"/></operator> <name><name pos:line="4" pos:column="19">Comm<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">::<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">OK<pos:position pos:line="4" pos:column="27"/></name></name></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28"> <block pos:line="4" pos:column="29">{
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">ErrorState<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier><specifier pos:line="5" pos:column="21">const<pos:position pos:line="5" pos:column="26"/></specifier></type> <name pos:line="5" pos:column="27">anErr<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><call><name pos:line="5" pos:column="35">makeConnectingError<pos:position pos:line="5" pos:column="54"/></name><argument_list pos:line="5" pos:column="54">(<argument><expr><name pos:line="5" pos:column="55">ERR_CONNECT_FAIL<pos:position pos:line="5" pos:column="71"/></name></expr></argument>)<pos:position pos:line="5" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="73"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="6" pos:column="9">anErr<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">-&gt;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="16">xerrno<pos:position pos:line="6" pos:column="22"/></name></name> <operator pos:line="6" pos:column="23">=<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="25">xerrno<pos:position pos:line="6" pos:column="31"/></name></expr>;<pos:position pos:line="6" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">fail<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">anErr<pos:position pos:line="7" pos:column="19"/></name></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>

        <comment type="block" pos:line="9" pos:column="9">/* it might have been a timeout with a partially open link */</comment>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">conn<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">!=<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">NULL<pos:position pos:line="10" pos:column="25"/></name></expr>)<pos:position pos:line="10" pos:column="26"/></condition><then pos:line="10" pos:column="26"> <block pos:line="10" pos:column="27">{
            <if pos:line="11" pos:column="13">if <condition pos:line="11" pos:column="16">(<expr><call><name><name pos:line="11" pos:column="17">conn<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">-&gt;<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="23">getPeer<pos:position pos:line="11" pos:column="30"/></name></name><argument_list pos:line="11" pos:column="30">()<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="33"/></condition><then pos:line="11" pos:column="33">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">peerConnectFailed<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><call><name><name pos:line="12" pos:column="35">conn<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">-&gt;<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="41">getPeer<pos:position pos:line="12" pos:column="48"/></name></name><argument_list pos:line="12" pos:column="48">()<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt></block></then></if>

            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">conn<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">-&gt;<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="19">close<pos:position pos:line="14" pos:column="24"/></name></name><argument_list pos:line="14" pos:column="24">()<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">retryOrBail<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">()<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="20" pos:column="5">serverConn<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <name pos:line="20" pos:column="18">conn<pos:position pos:line="20" pos:column="22"/></name></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">debugs<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><literal type="number" pos:line="21" pos:column="12">17<pos:position pos:line="21" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="16">3<pos:position pos:line="21" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="19">HERE<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">&lt;&lt;<pos:position pos:line="21" pos:column="32"/></operator> <call><name pos:line="21" pos:column="27">serverConnection<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">()<pos:position pos:line="21" pos:column="45"/></argument_list></call> <operator pos:line="21" pos:column="46">&lt;&lt;<pos:position pos:line="21" pos:column="54"/></operator> <literal type="string" pos:line="21" pos:column="49">": '"<pos:position pos:line="21" pos:column="54"/></literal> <operator pos:line="21" pos:column="55">&lt;&lt;<pos:position pos:line="21" pos:column="63"/></operator> <call><name><name pos:line="21" pos:column="58">entry<pos:position pos:line="21" pos:column="63"/></name><operator pos:line="21" pos:column="63">-&gt;<pos:position pos:line="21" pos:column="68"/></operator><name pos:line="21" pos:column="65">url<pos:position pos:line="21" pos:column="68"/></name></name><argument_list pos:line="21" pos:column="68">()<pos:position pos:line="21" pos:column="70"/></argument_list></call> <operator pos:line="21" pos:column="71">&lt;&lt;<pos:position pos:line="21" pos:column="79"/></operator> <literal type="string" pos:line="21" pos:column="74">"'"<pos:position pos:line="21" pos:column="77"/></literal></expr></argument> )<pos:position pos:line="21" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="80"/></expr_stmt>

    <expr_stmt><expr><name pos:line="23" pos:column="5">closeHandler<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <call><name pos:line="23" pos:column="20">comm_add_close_handler<pos:position pos:line="23" pos:column="42"/></name><argument_list pos:line="23" pos:column="42">(<argument><expr><call><name pos:line="23" pos:column="43">serverConnection<pos:position pos:line="23" pos:column="59"/></name><argument_list pos:line="23" pos:column="59">()<pos:position pos:line="23" pos:column="61"/></argument_list></call><operator pos:line="23" pos:column="61">-&gt;<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="63">fd<pos:position pos:line="23" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="67">fwdServerClosedWrapper<pos:position pos:line="23" pos:column="89"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="91">this<pos:position pos:line="23" pos:column="95"/></name></expr></argument>)<pos:position pos:line="23" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="97"/></expr_stmt>

<cpp:if pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">if<pos:position pos:line="25" pos:column="4"/></cpp:directive> <expr><name pos:line="25" pos:column="5">USE_OPENSSL<pos:position pos:line="25" pos:column="16"/></name></expr></cpp:if>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><name><name pos:line="26" pos:column="10">request<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">flags<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">.<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">pinned<pos:position pos:line="26" pos:column="31"/></name></name></expr>)<pos:position pos:line="26" pos:column="32"/></condition><then pos:line="26" pos:column="32"> <block pos:line="26" pos:column="33">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">const<pos:position pos:line="27" pos:column="14"/></specifier> <name pos:line="27" pos:column="15">CachePeer<pos:position pos:line="27" pos:column="24"/></name> <modifier pos:line="27" pos:column="25">*<pos:position pos:line="27" pos:column="26"/></modifier></type><name pos:line="27" pos:column="26">p<pos:position pos:line="27" pos:column="27"/></name> <init pos:line="27" pos:column="28">= <expr><call><name pos:line="27" pos:column="30">serverConnection<pos:position pos:line="27" pos:column="46"/></name><argument_list pos:line="27" pos:column="46">()<pos:position pos:line="27" pos:column="48"/></argument_list></call><operator pos:line="27" pos:column="48">-&gt;<pos:position pos:line="27" pos:column="53"/></operator><call><name pos:line="27" pos:column="50">getPeer<pos:position pos:line="27" pos:column="57"/></name><argument_list pos:line="27" pos:column="57">()<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="60"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">const<pos:position pos:line="28" pos:column="14"/></specifier> <name pos:line="28" pos:column="15">bool<pos:position pos:line="28" pos:column="19"/></name></type> <name pos:line="28" pos:column="20">peerWantsTls<pos:position pos:line="28" pos:column="32"/></name> <init pos:line="28" pos:column="33">= <expr><name pos:line="28" pos:column="35">p<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">&amp;&amp;<pos:position pos:line="28" pos:column="47"/></operator> <name><name pos:line="28" pos:column="40">p<pos:position pos:line="28" pos:column="41"/></name><operator pos:line="28" pos:column="41">-&gt;<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="43">use_ssl<pos:position pos:line="28" pos:column="50"/></name></name></expr></init></decl>;<pos:position pos:line="28" pos:column="51"/></decl_stmt>
        <comment type="line" pos:line="29" pos:column="9">// userWillTlsToPeerForUs assumes CONNECT == HTTPS</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">const<pos:position pos:line="30" pos:column="14"/></specifier> <name pos:line="30" pos:column="15">bool<pos:position pos:line="30" pos:column="19"/></name></type> <name pos:line="30" pos:column="20">userWillTlsToPeerForUs<pos:position pos:line="30" pos:column="42"/></name> <init pos:line="30" pos:column="43">= <expr><name pos:line="30" pos:column="45">p<pos:position pos:line="30" pos:column="46"/></name> <operator pos:line="30" pos:column="47">&amp;&amp;<pos:position pos:line="30" pos:column="57"/></operator> <name><name pos:line="30" pos:column="50">p<pos:position pos:line="30" pos:column="51"/></name><operator pos:line="30" pos:column="51">-&gt;<pos:position pos:line="30" pos:column="56"/></operator><name pos:line="30" pos:column="53">options<pos:position pos:line="30" pos:column="60"/></name><operator pos:line="30" pos:column="60">.<pos:position pos:line="30" pos:column="61"/></operator><name pos:line="30" pos:column="61">originserver<pos:position pos:line="30" pos:column="73"/></name></name> <operator pos:line="30" pos:column="74">&amp;&amp;<pos:position pos:line="30" pos:column="84"/></operator>
                                            <name><name pos:line="31" pos:column="45">request<pos:position pos:line="31" pos:column="52"/></name><operator pos:line="31" pos:column="52">-&gt;<pos:position pos:line="31" pos:column="57"/></operator><name pos:line="31" pos:column="54">method<pos:position pos:line="31" pos:column="60"/></name></name> <operator pos:line="31" pos:column="61">==<pos:position pos:line="31" pos:column="63"/></operator> <name><name pos:line="31" pos:column="64">Http<pos:position pos:line="31" pos:column="68"/></name><operator pos:line="31" pos:column="68">::<pos:position pos:line="31" pos:column="70"/></operator><name pos:line="31" pos:column="70">METHOD_CONNECT<pos:position pos:line="31" pos:column="84"/></name></name></expr></init></decl>;<pos:position pos:line="31" pos:column="85"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">const<pos:position pos:line="32" pos:column="14"/></specifier> <name pos:line="32" pos:column="15">bool<pos:position pos:line="32" pos:column="19"/></name></type> <name pos:line="32" pos:column="20">needTlsToPeer<pos:position pos:line="32" pos:column="33"/></name> <init pos:line="32" pos:column="34">= <expr><name pos:line="32" pos:column="36">peerWantsTls<pos:position pos:line="32" pos:column="48"/></name> <operator pos:line="32" pos:column="49">&amp;&amp;<pos:position pos:line="32" pos:column="59"/></operator> <operator pos:line="32" pos:column="52">!<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="53">userWillTlsToPeerForUs<pos:position pos:line="32" pos:column="75"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="76"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">const<pos:position pos:line="33" pos:column="14"/></specifier> <name pos:line="33" pos:column="15">bool<pos:position pos:line="33" pos:column="19"/></name></type> <name pos:line="33" pos:column="20">needTlsToOrigin<pos:position pos:line="33" pos:column="35"/></name> <init pos:line="33" pos:column="36">= <expr><operator pos:line="33" pos:column="38">!<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="39">p<pos:position pos:line="33" pos:column="40"/></name> <operator pos:line="33" pos:column="41">&amp;&amp;<pos:position pos:line="33" pos:column="51"/></operator> <call><name><name pos:line="33" pos:column="44">request<pos:position pos:line="33" pos:column="51"/></name><operator pos:line="33" pos:column="51">-&gt;<pos:position pos:line="33" pos:column="56"/></operator><name pos:line="33" pos:column="53">url<pos:position pos:line="33" pos:column="56"/></name><operator pos:line="33" pos:column="56">.<pos:position pos:line="33" pos:column="57"/></operator><name pos:line="33" pos:column="57">getScheme<pos:position pos:line="33" pos:column="66"/></name></name><argument_list pos:line="33" pos:column="66">()<pos:position pos:line="33" pos:column="68"/></argument_list></call> <operator pos:line="33" pos:column="69">==<pos:position pos:line="33" pos:column="71"/></operator> <name><name pos:line="33" pos:column="72">AnyP<pos:position pos:line="33" pos:column="76"/></name><operator pos:line="33" pos:column="76">::<pos:position pos:line="33" pos:column="78"/></operator><name pos:line="33" pos:column="78">PROTO_HTTPS<pos:position pos:line="33" pos:column="89"/></name></name></expr></init></decl>;<pos:position pos:line="33" pos:column="90"/></decl_stmt>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">needTlsToPeer<pos:position pos:line="34" pos:column="26"/></name> <operator pos:line="34" pos:column="27">||<pos:position pos:line="34" pos:column="29"/></operator> <name pos:line="34" pos:column="30">needTlsToOrigin<pos:position pos:line="34" pos:column="45"/></name> <operator pos:line="34" pos:column="46">||<pos:position pos:line="34" pos:column="48"/></operator> <name><name pos:line="34" pos:column="49">request<pos:position pos:line="34" pos:column="56"/></name><operator pos:line="34" pos:column="56">-&gt;<pos:position pos:line="34" pos:column="61"/></operator><name pos:line="34" pos:column="58">flags<pos:position pos:line="34" pos:column="63"/></name><operator pos:line="34" pos:column="63">.<pos:position pos:line="34" pos:column="64"/></operator><name pos:line="34" pos:column="64">sslPeek<pos:position pos:line="34" pos:column="71"/></name></name></expr>)<pos:position pos:line="34" pos:column="72"/></condition><then pos:line="34" pos:column="72"> <block pos:line="34" pos:column="73">{
            <decl_stmt><decl><type><name><name pos:line="35" pos:column="13">HttpRequest<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">::<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="26">Pointer<pos:position pos:line="35" pos:column="33"/></name></name></type> <name pos:line="35" pos:column="34">requestPointer<pos:position pos:line="35" pos:column="48"/></name> <init pos:line="35" pos:column="49">= <expr><name pos:line="35" pos:column="51">request<pos:position pos:line="35" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="59"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="36" pos:column="13">AsyncCall<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">::<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="24">Pointer<pos:position pos:line="36" pos:column="31"/></name></name></type> <name pos:line="36" pos:column="32">callback<pos:position pos:line="36" pos:column="40"/></name> <init pos:line="36" pos:column="41">= <expr><call><name pos:line="36" pos:column="43">asyncCall<pos:position pos:line="36" pos:column="52"/></name><argument_list pos:line="36" pos:column="52">(<argument><expr><literal type="number" pos:line="36" pos:column="53">17<pos:position pos:line="36" pos:column="55"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="36" pos:column="56">4<pos:position pos:line="36" pos:column="57"/></literal></expr></argument>,
                                                    <argument><expr><literal type="string" pos:line="37" pos:column="53">"FwdState::ConnectedToPeer"<pos:position pos:line="37" pos:column="80"/></literal></expr></argument>,
                                                    <argument><expr><call><name pos:line="38" pos:column="53">FwdStatePeerAnswerDialer<pos:position pos:line="38" pos:column="77"/></name><argument_list pos:line="38" pos:column="77">(<argument><expr><operator pos:line="38" pos:column="78">&amp;<pos:position pos:line="38" pos:column="83"/></operator><name><name pos:line="38" pos:column="79">FwdState<pos:position pos:line="38" pos:column="87"/></name><operator pos:line="38" pos:column="87">::<pos:position pos:line="38" pos:column="89"/></operator><name pos:line="38" pos:column="89">connectedToPeer<pos:position pos:line="38" pos:column="104"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="106">this<pos:position pos:line="38" pos:column="110"/></name></expr></argument>)<pos:position pos:line="38" pos:column="111"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="112"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="113"/></decl_stmt>
            <comment type="line" pos:line="39" pos:column="13">// Use positive timeout when less than one second is left.</comment>
            <decl_stmt><decl><type><specifier pos:line="40" pos:column="13">const<pos:position pos:line="40" pos:column="18"/></specifier> <name pos:line="40" pos:column="19">time_t<pos:position pos:line="40" pos:column="25"/></name></type> <name pos:line="40" pos:column="26">sslNegotiationTimeout<pos:position pos:line="40" pos:column="47"/></name> <init pos:line="40" pos:column="48">= <expr><call><name pos:line="40" pos:column="50">max<pos:position pos:line="40" pos:column="53"/></name><argument_list pos:line="40" pos:column="53">(<argument><expr><cast type="static" pos:line="40" pos:column="54">static_cast<argument_list type="generic" pos:line="40" pos:column="65">&lt;<argument><expr><name pos:line="40" pos:column="66">time_t<pos:position pos:line="40" pos:column="72"/></name></expr></argument>&gt;<pos:position pos:line="40" pos:column="76"/></argument_list><argument_list pos:line="40" pos:column="73">(<argument><expr><literal type="number" pos:line="40" pos:column="74">1<pos:position pos:line="40" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="76"/></argument_list></cast></expr></argument>, <argument><expr><call><name pos:line="40" pos:column="78">timeLeft<pos:position pos:line="40" pos:column="86"/></name><argument_list pos:line="40" pos:column="86">()<pos:position pos:line="40" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="89"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="90"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="41" pos:column="13">Ssl<pos:position pos:line="41" pos:column="16"/></name><operator pos:line="41" pos:column="16">::<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="18">PeerConnector<pos:position pos:line="41" pos:column="31"/></name></name> <modifier pos:line="41" pos:column="32">*<pos:position pos:line="41" pos:column="33"/></modifier></type><name pos:line="41" pos:column="33">connector<pos:position pos:line="41" pos:column="42"/></name> <init pos:line="41" pos:column="43">=
                <expr><operator pos:line="42" pos:column="17">new<pos:position pos:line="42" pos:column="20"/></operator> <call><name><name pos:line="42" pos:column="21">Ssl<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">::<pos:position pos:line="42" pos:column="26"/></operator><name pos:line="42" pos:column="26">PeerConnector<pos:position pos:line="42" pos:column="39"/></name></name><argument_list pos:line="42" pos:column="39">(<argument><expr><name pos:line="42" pos:column="40">requestPointer<pos:position pos:line="42" pos:column="54"/></name></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="56">serverConnection<pos:position pos:line="42" pos:column="72"/></name><argument_list pos:line="42" pos:column="72">()<pos:position pos:line="42" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="42" pos:column="76">clientConn<pos:position pos:line="42" pos:column="86"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="88">callback<pos:position pos:line="42" pos:column="96"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="98">sslNegotiationTimeout<pos:position pos:line="42" pos:column="119"/></name></expr></argument>)<pos:position pos:line="42" pos:column="120"/></argument_list></call></expr></init></decl>;<pos:position pos:line="42" pos:column="121"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">AsyncJob<pos:position pos:line="43" pos:column="21"/></name><operator pos:line="43" pos:column="21">::<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">Start<pos:position pos:line="43" pos:column="28"/></name></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">connector<pos:position pos:line="43" pos:column="38"/></name></expr></argument>)<pos:position pos:line="43" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="40"/></expr_stmt> <comment type="line" pos:line="43" pos:column="41">// will call our callback</comment>
            <return pos:line="44" pos:column="13">return;<pos:position pos:line="44" pos:column="20"/></return>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="line" pos:line="49" pos:column="5">// should reach ConnStateData before the dispatched Client job starts</comment>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">CallJobHere1<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">(<argument><expr><literal type="number" pos:line="50" pos:column="18">17<pos:position pos:line="50" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="22">4<pos:position pos:line="50" pos:column="23"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="25">request<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">-&gt;<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="34">clientConnectionManager<pos:position pos:line="50" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="59">ConnStateData<pos:position pos:line="50" pos:column="72"/></name></expr></argument>,
                 <argument><expr><name><name pos:line="51" pos:column="18">ConnStateData<pos:position pos:line="51" pos:column="31"/></name><operator pos:line="51" pos:column="31">::<pos:position pos:line="51" pos:column="33"/></operator><name pos:line="51" pos:column="33">notePeerConnection<pos:position pos:line="51" pos:column="51"/></name></name></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="53">serverConnection<pos:position pos:line="51" pos:column="69"/></name><argument_list pos:line="51" pos:column="69">()<pos:position pos:line="51" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="73"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">dispatch<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">()<pos:position pos:line="53" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="16"/></expr_stmt>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
