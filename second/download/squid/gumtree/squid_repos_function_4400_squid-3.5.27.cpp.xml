<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4400_squid-3.5.27.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">objToString<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">unsigned<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">bytes<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">len<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="3" pos:column="5">static<pos:position pos:line="3" pos:column="11"/></specifier> <type><name><name pos:line="3" pos:column="12">std<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">::<pos:position pos:line="3" pos:column="17"/></operator><name pos:line="3" pos:column="17">string<pos:position pos:line="3" pos:column="23"/></name></name></type> <name pos:line="3" pos:column="24">buf<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">buf<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">.<pos:position pos:line="4" pos:column="9"/></operator><name pos:line="4" pos:column="9">clear<pos:position pos:line="4" pos:column="14"/></name></name><argument_list pos:line="4" pos:column="14">()<pos:position pos:line="4" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="17"/></expr_stmt>
    <for pos:line="5" pos:column="5">for <control pos:line="5" pos:column="9">(<init><decl><type><name pos:line="5" pos:column="10">int<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">i<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><literal type="number" pos:line="5" pos:column="18">0<pos:position pos:line="5" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></init> <condition><expr><name pos:line="5" pos:column="21">i<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">&lt;<pos:position pos:line="5" pos:column="27"/></operator> <name pos:line="5" pos:column="25">len<pos:position pos:line="5" pos:column="28"/></name></expr>;<pos:position pos:line="5" pos:column="29"/></condition> <incr><expr><name pos:line="5" pos:column="30">i<pos:position pos:line="5" pos:column="31"/></name><operator pos:line="5" pos:column="31">++<pos:position pos:line="5" pos:column="33"/></operator></expr></incr> )<pos:position pos:line="5" pos:column="35"/></control> <block pos:line="5" pos:column="36">{
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">tmp<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><literal type="number" pos:line="6" pos:column="18">3<pos:position pos:line="6" pos:column="19"/></literal></expr>]<pos:position pos:line="6" pos:column="20"/></index></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">snprintf<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">(<argument><expr><name pos:line="7" pos:column="18">tmp<pos:position pos:line="7" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="23">sizeof<argument_list pos:line="7" pos:column="29">(<argument><expr><name pos:line="7" pos:column="30">tmp<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="36">"%.2x"<pos:position pos:line="7" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="44">bytes<pos:position pos:line="7" pos:column="49"/></name><index pos:line="7" pos:column="49">[<expr><name pos:line="7" pos:column="50">i<pos:position pos:line="7" pos:column="51"/></name></expr>]<pos:position pos:line="7" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">buf<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">.<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">append<pos:position pos:line="8" pos:column="19"/></name></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">tmp<pos:position pos:line="8" pos:column="23"/></name></expr></argument>)<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></for>
    <return pos:line="10" pos:column="5">return <expr><call><name><name pos:line="10" pos:column="12">buf<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">.<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">c_str<pos:position pos:line="10" pos:column="21"/></name></name><argument_list pos:line="10" pos:column="21">()<pos:position pos:line="10" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="24"/></return>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
