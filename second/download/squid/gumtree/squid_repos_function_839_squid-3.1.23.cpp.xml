<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_839_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">commio_finish_callback<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">int<pos:position pos:line="2" pos:column="27"/></name></type> <name pos:line="2" pos:column="28">fd<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">comm_io_callback_t<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">ccb<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="57">comm_err_t<pos:position pos:line="2" pos:column="67"/></name></type> <name pos:line="2" pos:column="68">code<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="74">int<pos:position pos:line="2" pos:column="77"/></name></type> <name pos:line="2" pos:column="78">xerrno<pos:position pos:line="2" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="85"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">5<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="18">"commio_finish_callback: called for FD "<pos:position pos:line="4" pos:column="58"/></literal> <operator pos:line="4" pos:column="59">&lt;&lt;<pos:position pos:line="4" pos:column="67"/></operator> <name pos:line="4" pos:column="62">fd<pos:position pos:line="4" pos:column="64"/></name> <operator pos:line="4" pos:column="65">&lt;&lt;<pos:position pos:line="4" pos:column="73"/></operator> <literal type="string" pos:line="4" pos:column="68">" ("<pos:position pos:line="4" pos:column="72"/></literal> <operator pos:line="4" pos:column="73">&lt;&lt;<pos:position pos:line="4" pos:column="81"/></operator>
           <name pos:line="5" pos:column="12">code<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">&lt;&lt;<pos:position pos:line="5" pos:column="25"/></operator> <literal type="string" pos:line="5" pos:column="20">", "<pos:position pos:line="5" pos:column="24"/></literal> <operator pos:line="5" pos:column="25">&lt;&lt;<pos:position pos:line="5" pos:column="33"/></operator> <name pos:line="5" pos:column="28">xerrno<pos:position pos:line="5" pos:column="34"/></name> <operator pos:line="5" pos:column="35">&lt;&lt;<pos:position pos:line="5" pos:column="43"/></operator> <literal type="string" pos:line="5" pos:column="38">")"<pos:position pos:line="5" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><call><name><name pos:line="6" pos:column="12">ccb<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">-&gt;<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="17">active<pos:position pos:line="6" pos:column="23"/></name></name><argument_list pos:line="6" pos:column="23">()<pos:position pos:line="6" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">ccb<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">-&gt;<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="17">fd<pos:position pos:line="7" pos:column="19"/></name></name> <operator pos:line="7" pos:column="20">==<pos:position pos:line="7" pos:column="22"/></operator> <name pos:line="7" pos:column="23">fd<pos:position pos:line="7" pos:column="25"/></name></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="8" pos:column="5">ccb<pos:position pos:line="8" pos:column="8"/></name><operator pos:line="8" pos:column="8">-&gt;<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="10">errcode<pos:position pos:line="8" pos:column="17"/></name></name> <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <name pos:line="8" pos:column="20">code<pos:position pos:line="8" pos:column="24"/></name></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">ccb<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">-&gt;<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="10">xerrno<pos:position pos:line="9" pos:column="16"/></name></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <name pos:line="9" pos:column="19">xerrno<pos:position pos:line="9" pos:column="25"/></name></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">comm_io_callback_t<pos:position pos:line="11" pos:column="23"/></name></type> <name pos:line="11" pos:column="24">cb<pos:position pos:line="11" pos:column="26"/></name> <init pos:line="11" pos:column="27">= <expr><operator pos:line="11" pos:column="29">*<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">ccb<pos:position pos:line="11" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="34"/></decl_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* We've got a copy; blow away the real one */</comment>
    <comment type="block" pos:line="14" pos:column="5">/* XXX duplicate code from commio_cancel_callback! */</comment>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">ccb<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">xerrno<pos:position pos:line="15" pos:column="16"/></name></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <literal type="number" pos:line="15" pos:column="19">0<pos:position pos:line="15" pos:column="20"/></literal></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">ccb<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">-&gt;<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="10">callback<pos:position pos:line="16" pos:column="18"/></name></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="21">NULL<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt> <comment type="line" pos:line="16" pos:column="27">// cb has it</comment>

    <comment type="block" pos:line="18" pos:column="5">/* free data */</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">cb<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">.<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">freefunc<pos:position pos:line="19" pos:column="20"/></name></name></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21"> <block pos:line="19" pos:column="22">{
        <expr_stmt><expr><call><name><name pos:line="20" pos:column="9">cb<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">.<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="12">freefunc<pos:position pos:line="20" pos:column="20"/></name></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name><name pos:line="20" pos:column="21">cb<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">.<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="24">buf<pos:position pos:line="20" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">cb<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">.<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="12">buf<pos:position pos:line="21" pos:column="15"/></name></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <name pos:line="21" pos:column="18">NULL<pos:position pos:line="21" pos:column="22"/></name></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">cb<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">.<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="12">callback<pos:position pos:line="24" pos:column="20"/></name></name> <operator pos:line="24" pos:column="21">!=<pos:position pos:line="24" pos:column="23"/></operator> <name pos:line="24" pos:column="24">NULL<pos:position pos:line="24" pos:column="28"/></name></expr>)<pos:position pos:line="24" pos:column="29"/></condition><then pos:line="24" pos:column="29"> <block pos:line="24" pos:column="30">{
        <typedef pos:line="25" pos:column="9">typedef <type><name pos:line="25" pos:column="17">CommIoCbParams<pos:position pos:line="25" pos:column="31"/></name></type> <name pos:line="25" pos:column="32">Params<pos:position pos:line="25" pos:column="38"/></name>;<pos:position pos:line="25" pos:column="39"/></typedef>
        <decl_stmt><decl><type><name pos:line="26" pos:column="9">Params<pos:position pos:line="26" pos:column="15"/></name> <modifier pos:line="26" pos:column="16">&amp;<pos:position pos:line="26" pos:column="21"/></modifier></type><name pos:line="26" pos:column="17">params<pos:position pos:line="26" pos:column="23"/></name> <init pos:line="26" pos:column="24">= <expr><call><name><name pos:line="26" pos:column="26">GetCommParams<pos:position pos:line="26" pos:column="39"/></name><argument_list type="generic" pos:line="26" pos:column="39">&lt;<argument><expr><name pos:line="26" pos:column="40">Params<pos:position pos:line="26" pos:column="46"/></name></expr></argument>&gt;<pos:position pos:line="26" pos:column="50"/></argument_list></name><argument_list pos:line="26" pos:column="47">(<argument><expr><name><name pos:line="26" pos:column="48">cb<pos:position pos:line="26" pos:column="50"/></name><operator pos:line="26" pos:column="50">.<pos:position pos:line="26" pos:column="51"/></operator><name pos:line="26" pos:column="51">callback<pos:position pos:line="26" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="61"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">params<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">.<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">fd<pos:position pos:line="27" pos:column="18"/></name></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <name><name pos:line="27" pos:column="21">cb<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">.<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="24">fd<pos:position pos:line="27" pos:column="26"/></name></name></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">params<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">.<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">buf<pos:position pos:line="28" pos:column="19"/></name></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <name><name pos:line="28" pos:column="22">cb<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">.<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">buf<pos:position pos:line="28" pos:column="28"/></name></name></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">params<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">.<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="16">size<pos:position pos:line="29" pos:column="20"/></name></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <name><name pos:line="29" pos:column="23">cb<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">.<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">offset<pos:position pos:line="29" pos:column="32"/></name></name></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">params<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">.<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">flag<pos:position pos:line="30" pos:column="20"/></name></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <name><name pos:line="30" pos:column="23">cb<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">.<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="26">errcode<pos:position pos:line="30" pos:column="33"/></name></name></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="31" pos:column="9">params<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">.<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">xerrno<pos:position pos:line="31" pos:column="22"/></name></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <name><name pos:line="31" pos:column="25">cb<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">.<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="28">xerrno<pos:position pos:line="31" pos:column="34"/></name></name></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">ScheduleCallHere<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name><name pos:line="32" pos:column="26">cb<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">.<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="29">callback<pos:position pos:line="32" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
