<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3205_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">TemplateFile<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">loadFor<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">HttpRequest<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">request<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">String<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">hdr<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">USE_ERR_LOCALES<pos:position pos:line="6" pos:column="20"/></name></expr></cpp:if>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">loaded<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">()<pos:position pos:line="7" pos:column="17"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="18"/></condition><then pos:line="7" pos:column="18"> <comment type="line" pos:line="7" pos:column="19">// already loaded?</comment>
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">true<pos:position pos:line="8" pos:column="20"/></literal></expr>;<pos:position pos:line="8" pos:column="21"/></return></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">request<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">||<pos:position pos:line="10" pos:column="20"/></operator> <operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><call><name><name pos:line="10" pos:column="22">request<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">header<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">.<pos:position pos:line="10" pos:column="38"/></operator><name pos:line="10" pos:column="38">getList<pos:position pos:line="10" pos:column="45"/></name></name><argument_list pos:line="10" pos:column="45">(<argument><expr><name pos:line="10" pos:column="46">HDR_ACCEPT_LANGUAGE<pos:position pos:line="10" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="67">&amp;<pos:position pos:line="10" pos:column="72"/></operator><name pos:line="10" pos:column="68">hdr<pos:position pos:line="10" pos:column="71"/></name></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></call></expr> )<pos:position pos:line="10" pos:column="74"/></condition><then pos:line="10" pos:column="74">
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><literal type="boolean" pos:line="11" pos:column="16">false<pos:position pos:line="11" pos:column="21"/></literal></expr>;<pos:position pos:line="11" pos:column="22"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name></type> <name><name pos:line="13" pos:column="10">lang<pos:position pos:line="13" pos:column="14"/></name><index pos:line="13" pos:column="14">[<expr><literal type="number" pos:line="13" pos:column="15">256<pos:position pos:line="13" pos:column="18"/></literal></expr>]<pos:position pos:line="13" pos:column="19"/></index></name></decl>;<pos:position pos:line="13" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">size_t<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">pos<pos:position pos:line="14" pos:column="15"/></name> <init pos:line="14" pos:column="16">= <expr><literal type="number" pos:line="14" pos:column="18">0<pos:position pos:line="14" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt> <comment type="line" pos:line="14" pos:column="21">// current parsing position in header string</comment>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">debugs<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="number" pos:line="16" pos:column="12">4<pos:position pos:line="16" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="15">6<pos:position pos:line="16" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="18">HERE<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">&lt;&lt;<pos:position pos:line="16" pos:column="31"/></operator> <literal type="string" pos:line="16" pos:column="26">"Testing Header: '"<pos:position pos:line="16" pos:column="45"/></literal> <operator pos:line="16" pos:column="46">&lt;&lt;<pos:position pos:line="16" pos:column="54"/></operator> <name pos:line="16" pos:column="49">hdr<pos:position pos:line="16" pos:column="52"/></name> <operator pos:line="16" pos:column="53">&lt;&lt;<pos:position pos:line="16" pos:column="61"/></operator> <literal type="string" pos:line="16" pos:column="56">"'"<pos:position pos:line="16" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="61"/></expr_stmt>

    <while pos:line="18" pos:column="5">while <condition pos:line="18" pos:column="11">( <expr><call><name pos:line="18" pos:column="13">strHdrAcptLangGetItem<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">hdr<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="40">lang<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="46">256<pos:position pos:line="18" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">pos<pos:position pos:line="18" pos:column="54"/></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr> )<pos:position pos:line="18" pos:column="57"/></condition> <block pos:line="18" pos:column="58">{

        <comment type="block" pos:line="20" pos:column="9">/* wildcard uses the configured default language */</comment>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name><name pos:line="21" pos:column="13">lang<pos:position pos:line="21" pos:column="17"/></name><index pos:line="21" pos:column="17">[<expr><literal type="number" pos:line="21" pos:column="18">0<pos:position pos:line="21" pos:column="19"/></literal></expr>]<pos:position pos:line="21" pos:column="20"/></index></name> <operator pos:line="21" pos:column="21">==<pos:position pos:line="21" pos:column="23"/></operator> <literal type="char" pos:line="21" pos:column="24">'*'<pos:position pos:line="21" pos:column="27"/></literal> <operator pos:line="21" pos:column="28">&amp;&amp;<pos:position pos:line="21" pos:column="38"/></operator> <name><name pos:line="21" pos:column="31">lang<pos:position pos:line="21" pos:column="35"/></name><index pos:line="21" pos:column="35">[<expr><literal type="number" pos:line="21" pos:column="36">1<pos:position pos:line="21" pos:column="37"/></literal></expr>]<pos:position pos:line="21" pos:column="38"/></index></name> <operator pos:line="21" pos:column="39">==<pos:position pos:line="21" pos:column="41"/></operator> <literal type="char" pos:line="21" pos:column="42">'\0'<pos:position pos:line="21" pos:column="46"/></literal></expr>)<pos:position pos:line="21" pos:column="47"/></condition><then pos:line="21" pos:column="47"> <block pos:line="21" pos:column="48">{
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">debugs<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><literal type="number" pos:line="22" pos:column="20">4<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="23">6<pos:position pos:line="22" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="26">HERE<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">&lt;&lt;<pos:position pos:line="22" pos:column="39"/></operator> <literal type="string" pos:line="22" pos:column="34">"Found language '"<pos:position pos:line="22" pos:column="52"/></literal> <operator pos:line="22" pos:column="53">&lt;&lt;<pos:position pos:line="22" pos:column="61"/></operator> <name pos:line="22" pos:column="56">lang<pos:position pos:line="22" pos:column="60"/></name> <operator pos:line="22" pos:column="61">&lt;&lt;<pos:position pos:line="22" pos:column="69"/></operator> <literal type="string" pos:line="22" pos:column="64">"'. Using configured default."<pos:position pos:line="22" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="96"/></expr_stmt>
            <return pos:line="23" pos:column="13">return <expr><literal type="boolean" pos:line="23" pos:column="20">false<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></return>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugs<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="number" pos:line="26" pos:column="16">4<pos:position pos:line="26" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="19">6<pos:position pos:line="26" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="22">HERE<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">&lt;&lt;<pos:position pos:line="26" pos:column="35"/></operator> <literal type="string" pos:line="26" pos:column="30">"Found language '"<pos:position pos:line="26" pos:column="48"/></literal> <operator pos:line="26" pos:column="49">&lt;&lt;<pos:position pos:line="26" pos:column="57"/></operator> <name pos:line="26" pos:column="52">lang<pos:position pos:line="26" pos:column="56"/></name> <operator pos:line="26" pos:column="57">&lt;&lt;<pos:position pos:line="26" pos:column="65"/></operator> <literal type="string" pos:line="26" pos:column="60">"', testing for available template"<pos:position pos:line="26" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="97"/></expr_stmt>

        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">tryLoadTemplate<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">lang<pos:position pos:line="28" pos:column="33"/></name></expr></argument>)<pos:position pos:line="28" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="35"/></condition><then pos:line="28" pos:column="35"> <block pos:line="28" pos:column="36">{
            <comment type="block" pos:line="29" pos:column="13">/* store the language we found for the Content-Language reply header */</comment>
            <expr_stmt><expr><name pos:line="30" pos:column="13">errLanguage<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="27">lang<pos:position pos:line="30" pos:column="31"/></name></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
            <break pos:line="31" pos:column="13">break;<pos:position pos:line="31" pos:column="19"/></break>
        }<pos:position pos:line="32" pos:column="10"/></block></then> <elseif pos:line="32" pos:column="11">else <if pos:line="32" pos:column="16">if <condition pos:line="32" pos:column="19">(<expr><name><name pos:line="32" pos:column="20">Config<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">.<pos:position pos:line="32" pos:column="27"/></operator><name pos:line="32" pos:column="27">errorLogMissingLanguages<pos:position pos:line="32" pos:column="51"/></name></name></expr>)<pos:position pos:line="32" pos:column="52"/></condition><then pos:line="32" pos:column="52"> <block pos:line="32" pos:column="53">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">debugs<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><literal type="number" pos:line="33" pos:column="20">4<pos:position pos:line="33" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="23">DBG_IMPORTANT<pos:position pos:line="33" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="38">"WARNING: Error Pages Missing Language: "<pos:position pos:line="33" pos:column="79"/></literal> <operator pos:line="33" pos:column="80">&lt;&lt;<pos:position pos:line="33" pos:column="88"/></operator> <name pos:line="33" pos:column="83">lang<pos:position pos:line="33" pos:column="87"/></name></expr></argument>)<pos:position pos:line="33" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="89"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="35" pos:column="6"/></block></while>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="38" pos:column="5">return <expr><call><name pos:line="38" pos:column="12">loaded<pos:position pos:line="38" pos:column="18"/></name><argument_list pos:line="38" pos:column="18">()<pos:position pos:line="38" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="21"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
