<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1240_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">memFreeString<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">size_t<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">size<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">void<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">buf<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">MemAllocator<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">pool<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><name pos:line="4" pos:column="26">NULL<pos:position pos:line="4" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">buf<pos:position pos:line="5" pos:column="15"/></name></expr></argument>)<pos:position pos:line="5" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="17"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">MemIsInitialized<pos:position pos:line="7" pos:column="25"/></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26"> <block pos:line="7" pos:column="27">{
        <for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init><decl><type><name pos:line="8" pos:column="14">unsigned<pos:position pos:line="8" pos:column="22"/></name> <name pos:line="8" pos:column="23">int<pos:position pos:line="8" pos:column="26"/></name></type> <name pos:line="8" pos:column="27">i<pos:position pos:line="8" pos:column="28"/></name> <init pos:line="8" pos:column="29">= <expr><literal type="number" pos:line="8" pos:column="31">0<pos:position pos:line="8" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></init> <condition><expr><name pos:line="8" pos:column="34">i<pos:position pos:line="8" pos:column="35"/></name> <operator pos:line="8" pos:column="36">&lt;<pos:position pos:line="8" pos:column="40"/></operator> <name pos:line="8" pos:column="38">mem_str_pool_count<pos:position pos:line="8" pos:column="56"/></name></expr>;<pos:position pos:line="8" pos:column="57"/></condition> <incr><expr><operator pos:line="8" pos:column="58">++<pos:position pos:line="8" pos:column="60"/></operator><name pos:line="8" pos:column="60">i<pos:position pos:line="8" pos:column="61"/></name></expr></incr>)<pos:position pos:line="8" pos:column="62"/></control> <block pos:line="8" pos:column="63">{
            <if pos:line="9" pos:column="13">if <condition pos:line="9" pos:column="16">(<expr><name pos:line="9" pos:column="17">size<pos:position pos:line="9" pos:column="21"/></name> <operator pos:line="9" pos:column="22">&lt;=<pos:position pos:line="9" pos:column="27"/></operator> <name><name pos:line="9" pos:column="25">StrPoolsAttrs<pos:position pos:line="9" pos:column="38"/></name><index pos:line="9" pos:column="38">[<expr><name pos:line="9" pos:column="39">i<pos:position pos:line="9" pos:column="40"/></name></expr>]<pos:position pos:line="9" pos:column="41"/></index></name><operator pos:line="9" pos:column="41">.<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="42">obj_size<pos:position pos:line="9" pos:column="50"/></name></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51"> <block pos:line="9" pos:column="52">{
                <expr_stmt><expr><call><name pos:line="10" pos:column="17">assert<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">size<pos:position pos:line="10" pos:column="28"/></name> <operator pos:line="10" pos:column="29">==<pos:position pos:line="10" pos:column="31"/></operator> <name><name pos:line="10" pos:column="32">StrPoolsAttrs<pos:position pos:line="10" pos:column="45"/></name><index pos:line="10" pos:column="45">[<expr><name pos:line="10" pos:column="46">i<pos:position pos:line="10" pos:column="47"/></name></expr>]<pos:position pos:line="10" pos:column="48"/></index></name><operator pos:line="10" pos:column="48">.<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="49">obj_size<pos:position pos:line="10" pos:column="57"/></name></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
                <expr_stmt><expr><name pos:line="11" pos:column="17">pool<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <name><name pos:line="11" pos:column="24">StrPools<pos:position pos:line="11" pos:column="32"/></name><index pos:line="11" pos:column="32">[<expr><name pos:line="11" pos:column="33">i<pos:position pos:line="11" pos:column="34"/></name></expr>]<pos:position pos:line="11" pos:column="35"/></index></name><operator pos:line="11" pos:column="35">.<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="36">pool<pos:position pos:line="11" pos:column="40"/></name></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
                <break pos:line="12" pos:column="17">break;<pos:position pos:line="12" pos:column="23"/></break>
            }<pos:position pos:line="13" pos:column="14"/></block></then></if>
        }<pos:position pos:line="14" pos:column="10"/></block></for>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="17" pos:column="5">// may forget [de]allocations until MemIsInitialized</comment>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">memMeterDec<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">StrCountMeter<pos:position pos:line="18" pos:column="30"/></name></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">memMeterDel<pos:position pos:line="19" pos:column="16"/></name><argument_list pos:line="19" pos:column="16">(<argument><expr><name pos:line="19" pos:column="17">StrVolumeMeter<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="33">size<pos:position pos:line="19" pos:column="37"/></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><ternary><condition><expr><name pos:line="20" pos:column="5">pool<pos:position pos:line="20" pos:column="9"/></name></expr> ?<pos:position pos:line="20" pos:column="11"/></condition><then pos:line="20" pos:column="11"> <expr><call><name><name pos:line="20" pos:column="12">pool<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">freeOne<pos:position pos:line="20" pos:column="25"/></name></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name pos:line="20" pos:column="26">buf<pos:position pos:line="20" pos:column="29"/></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr> <pos:position pos:line="20" pos:column="31"/></then><else pos:line="20" pos:column="31">: <expr><call><name pos:line="20" pos:column="33">xfree<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><name pos:line="20" pos:column="39">buf<pos:position pos:line="20" pos:column="42"/></name></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
